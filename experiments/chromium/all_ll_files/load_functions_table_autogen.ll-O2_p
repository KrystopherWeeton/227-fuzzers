; ModuleID = '../../third_party/angle/src/libANGLE/renderer/load_functions_table_autogen.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/load_functions_table_autogen.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

$_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIfLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm10ELm10ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm10ELm5ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm10ELm6ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm10ELm8ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm12ELm10ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm12ELm12ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm3ELm3ELm3ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm4ELm3ELm3ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm4ELm4ELm3ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm4ELm4ELm4ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm5ELm4ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm5ELm4ELm4ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm5ELm5ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm5ELm5ELm4ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm5ELm5ELm5ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm6ELm5ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm6ELm5ELm5ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm6ELm6ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm6ELm6ELm5ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm6ELm6ELm6ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm8ELm5ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm8ELm6ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle22LoadCompressedToNativeILm8ELm8ELm1ELm16EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIhLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIfLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12Load32FTo16FILm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIsLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIiLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIaLm1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12Load32FTo16FILm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIsLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIiLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIjLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIaLm2EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4ItLj15360EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IsLj1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIsLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4ItLj1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4ItLj65535EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4ItLj32767EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IfLj1065353216EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIfLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IiLj1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIiLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IjLj1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIjLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IhLj255EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIaLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IaLj1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IhLj1EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIhLm3EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle16LoadToNative3To4IaLj127EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12Load32FTo16FILm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIsLm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIfLm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIiLm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIjLm4EEEvmmmPKhmmPhmm = comdat any

$_ZN5angle12LoadToNativeIaLm4EEEvmmmPKhmmPhmm = comdat any

@switch.table._ZN5angle19GetLoadFunctionsMapEjNS_8FormatIDE = private unnamed_addr constant [4 x { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)*] [{ void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_138DEPTH_COMPONENT24_to_D24_UNORM_S8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_138DEPTH_COMPONENT24_to_D24_UNORM_X8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_141DEPTH_COMPONENT24_to_D32_FLOAT_S8X24_UINTEj], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle19GetLoadFunctionsMapEjNS_8FormatIDE(i32, i32) local_unnamed_addr #0 {
  switch i32 %0, label %399 [
    i32 27333, label %3
    i32 6406, label %5
    i32 34844, label %10
    i32 34838, label %13
    i32 32828, label %16
    i32 27385, label %19
    i32 27323, label %21
    i32 27325, label %404
    i32 27324, label %23
    i32 37793, label %24
    i32 27328, label %25
    i32 32993, label %27
    i32 27322, label %28
    i32 37488, label %33
    i32 36285, label %36
    i32 36283, label %37
    i32 37490, label %38
    i32 37492, label %41
    i32 38549, label %46
    i32 37494, label %48
    i32 38551, label %53
    i32 37496, label %55
    i32 37819, label %60
    i32 37816, label %61
    i32 37817, label %62
    i32 37818, label %63
    i32 37820, label %64
    i32 37821, label %65
    i32 37824, label %66
    i32 37825, label %67
    i32 37808, label %68
    i32 37826, label %69
    i32 37827, label %70
    i32 37809, label %71
    i32 37828, label %72
    i32 37810, label %73
    i32 37829, label %74
    i32 37830, label %75
    i32 37811, label %76
    i32 37831, label %77
    i32 37812, label %78
    i32 37832, label %79
    i32 37833, label %80
    i32 37813, label %81
    i32 37814, label %82
    i32 37815, label %83
    i32 36492, label %84
    i32 33777, label %85
    i32 33778, label %86
    i32 33779, label %87
    i32 36494, label %88
    i32 36495, label %89
    i32 33776, label %90
    i32 37489, label %91
    i32 36286, label %94
    i32 36284, label %95
    i32 37491, label %96
    i32 37851, label %99
    i32 37848, label %100
    i32 37849, label %101
    i32 37850, label %102
    i32 37852, label %103
    i32 37853, label %104
    i32 37856, label %105
    i32 37857, label %106
    i32 37840, label %107
    i32 37858, label %108
    i32 37859, label %109
    i32 37841, label %110
    i32 37860, label %111
    i32 37842, label %112
    i32 37861, label %113
    i32 37862, label %114
    i32 37843, label %115
    i32 37863, label %116
    i32 37844, label %117
    i32 37864, label %118
    i32 37865, label %119
    i32 37845, label %120
    i32 37846, label %121
    i32 37847, label %122
    i32 37497, label %123
    i32 37493, label %128
    i32 38550, label %133
    i32 37495, label %135
    i32 38552, label %140
    i32 36493, label %142
    i32 35917, label %143
    i32 35918, label %144
    i32 35919, label %145
    i32 35916, label %146
    i32 35056, label %147
    i32 36013, label %152
    i32 33189, label %157
    i32 33190, label %159
    i32 36012, label %162
    i32 33191, label %164
    i32 38544, label %167
    i32 36196, label %169
    i32 27393, label %172
    i32 27392, label %173
    i32 6409, label %174
    i32 34846, label %179
    i32 34840, label %182
    i32 32837, label %185
    i32 32832, label %190
    i32 6410, label %195
    i32 34847, label %200
    i32 34841, label %203
    i32 35898, label %206
    i32 33325, label %208
    i32 33331, label %210
    i32 33332, label %212
    i32 33322, label %214
    i32 36760, label %216
    i32 27342, label %218
    i32 27346, label %219
    i32 33326, label %220
    i32 33333, label %222
    i32 33334, label %224
    i32 33321, label %226
    i32 33329, label %228
    i32 33330, label %230
    i32 36756, label %232
    i32 27334, label %234
    i32 27338, label %235
    i32 33327, label %236
    i32 33337, label %238
    i32 33338, label %240
    i32 33324, label %242
    i32 36761, label %244
    i32 27343, label %246
    i32 27347, label %247
    i32 33328, label %248
    i32 33339, label %250
    i32 33340, label %252
    i32 33323, label %254
    i32 33335, label %256
    i32 33336, label %258
    i32 36757, label %260
    i32 27335, label %262
    i32 27339, label %263
    i32 6407, label %264
    i32 32857, label %265
    i32 36975, label %267
    i32 27370, label %269
    i32 27371, label %271
    i32 27372, label %273
    i32 27373, label %274
    i32 27374, label %275
    i32 34843, label %280
    i32 36233, label %285
    i32 36215, label %290
    i32 32852, label %295
    i32 36762, label %300
    i32 27344, label %305
    i32 27348, label %306
    i32 34837, label %307
    i32 36227, label %312
    i32 36209, label %317
    i32 36194, label %322
    i32 32855, label %325
    i32 32849, label %329
    i32 36239, label %334
    i32 36221, label %339
    i32 36758, label %344
    i32 27336, label %349
    i32 27340, label %350
    i32 35901, label %351
    i32 6408, label %353
    i32 34842, label %354
    i32 36232, label %356
    i32 36214, label %358
    i32 32859, label %360
    i32 36763, label %362
    i32 27345, label %364
    i32 27349, label %365
    i32 34836, label %366
    i32 36226, label %368
    i32 36208, label %370
    i32 32854, label %372
    i32 32856, label %375
    i32 36238, label %377
    i32 36220, label %379
    i32 36759, label %381
    i32 27337, label %383
    i32 27341, label %384
    i32 36797, label %385
    i32 36798, label %387
    i32 35905, label %389
    i32 35907, label %394
    i32 36168, label %396
  ]

3:                                                ; preds = %2
  %4 = icmp eq i32 %1, 9
  br i1 %4, label %404, label %399

5:                                                ; preds = %2
  %6 = icmp eq i32 %1, 156
  %7 = select i1 %6, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_127ALPHA_to_R32G32B32A32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_116ALPHA_to_defaultEj
  %8 = icmp eq i32 %1, 127
  %9 = select i1 %8, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_127ALPHA_to_R16G16B16A16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %7
  br label %404

10:                                               ; preds = %2
  %11 = icmp eq i32 %1, 148
  %12 = select i1 %11, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125ALPHA16F_EXT_to_R16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_123ALPHA16F_EXT_to_defaultEj
  br label %404

13:                                               ; preds = %2
  %14 = icmp eq i32 %1, 180
  %15 = select i1 %14, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125ALPHA32F_EXT_to_R32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_123ALPHA32F_EXT_to_defaultEj
  br label %404

16:                                               ; preds = %2
  switch i32 %1, label %399 [
    i32 17, label %404
    i32 196, label %17
    i32 217, label %18
  ]

17:                                               ; preds = %16
  br label %404

18:                                               ; preds = %16
  br label %404

19:                                               ; preds = %2
  %20 = icmp eq i32 %1, 66
  br i1 %20, label %404, label %399

21:                                               ; preds = %2
  %22 = icmp eq i32 %1, 69
  br i1 %22, label %404, label %399

23:                                               ; preds = %2
  br label %404

24:                                               ; preds = %2
  br label %404

25:                                               ; preds = %2
  %26 = icmp eq i32 %1, 73
  br i1 %26, label %404, label %399

27:                                               ; preds = %2
  br label %404

28:                                               ; preds = %2
  %29 = icmp eq i32 %1, 74
  %30 = select i1 %29, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_130BGRX8_ANGLEX_to_B8G8R8X8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %31 = icmp eq i32 %1, 72
  %32 = select i1 %31, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_130BGRX8_ANGLEX_to_B8G8R8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %30
  br label %404

33:                                               ; preds = %2
  switch i32 %1, label %399 [
    i32 94, label %404
    i32 148, label %34
    i32 153, label %35
  ]

34:                                               ; preds = %33
  br label %404

35:                                               ; preds = %33
  br label %404

36:                                               ; preds = %2
  br label %404

37:                                               ; preds = %2
  br label %404

38:                                               ; preds = %2
  switch i32 %1, label %399 [
    i32 92, label %404
    i32 141, label %39
    i32 146, label %40
  ]

39:                                               ; preds = %38
  br label %404

40:                                               ; preds = %38
  br label %404

41:                                               ; preds = %2
  %42 = icmp eq i32 %1, 196
  %43 = select i1 %42, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_138COMPRESSED_RGB8_ETC2_to_R8G8B8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %44 = icmp eq i32 %1, 102
  %45 = select i1 %44, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_147COMPRESSED_RGB8_ETC2_to_ETC2_R8G8B8_UNORM_BLOCKEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %43
  br label %404

46:                                               ; preds = %2
  %47 = icmp eq i32 %1, 77
  br i1 %47, label %404, label %399

48:                                               ; preds = %2
  %49 = icmp eq i32 %1, 196
  %50 = select i1 %49, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_158COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_R8G8B8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %51 = icmp eq i32 %1, 98
  %52 = select i1 %51, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_169COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_ETC2_R8G8B8A1_UNORM_BLOCKEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %50
  br label %404

53:                                               ; preds = %2
  %54 = icmp eq i32 %1, 75
  br i1 %54, label %404, label %399

55:                                               ; preds = %2
  %56 = icmp eq i32 %1, 196
  %57 = select i1 %56, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_143COMPRESSED_RGBA8_ETC2_EAC_to_R8G8B8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %58 = icmp eq i32 %1, 100
  %59 = select i1 %58, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_154COMPRESSED_RGBA8_ETC2_EAC_to_ETC2_R8G8B8A8_UNORM_BLOCKEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %57
  br label %404

60:                                               ; preds = %2
  br label %404

61:                                               ; preds = %2
  br label %404

62:                                               ; preds = %2
  br label %404

63:                                               ; preds = %2
  br label %404

64:                                               ; preds = %2
  br label %404

65:                                               ; preds = %2
  br label %404

66:                                               ; preds = %2
  br label %404

67:                                               ; preds = %2
  br label %404

68:                                               ; preds = %2
  br label %404

69:                                               ; preds = %2
  br label %404

70:                                               ; preds = %2
  br label %404

71:                                               ; preds = %2
  br label %404

72:                                               ; preds = %2
  br label %404

73:                                               ; preds = %2
  br label %404

74:                                               ; preds = %2
  br label %404

75:                                               ; preds = %2
  br label %404

76:                                               ; preds = %2
  br label %404

77:                                               ; preds = %2
  br label %404

78:                                               ; preds = %2
  br label %404

79:                                               ; preds = %2
  br label %404

80:                                               ; preds = %2
  br label %404

81:                                               ; preds = %2
  br label %404

82:                                               ; preds = %2
  br label %404

83:                                               ; preds = %2
  br label %404

84:                                               ; preds = %2
  br label %404

85:                                               ; preds = %2
  br label %404

86:                                               ; preds = %2
  br label %404

87:                                               ; preds = %2
  br label %404

88:                                               ; preds = %2
  br label %404

89:                                               ; preds = %2
  br label %404

90:                                               ; preds = %2
  br label %404

91:                                               ; preds = %2
  switch i32 %1, label %399 [
    i32 93, label %404
    i32 148, label %92
    i32 150, label %93
  ]

92:                                               ; preds = %91
  br label %404

93:                                               ; preds = %91
  br label %404

94:                                               ; preds = %2
  br label %404

95:                                               ; preds = %2
  br label %404

96:                                               ; preds = %2
  switch i32 %1, label %399 [
    i32 91, label %404
    i32 141, label %97
    i32 143, label %98
  ]

97:                                               ; preds = %96
  br label %404

98:                                               ; preds = %96
  br label %404

99:                                               ; preds = %2
  br label %404

100:                                              ; preds = %2
  br label %404

101:                                              ; preds = %2
  br label %404

102:                                              ; preds = %2
  br label %404

103:                                              ; preds = %2
  br label %404

104:                                              ; preds = %2
  br label %404

105:                                              ; preds = %2
  br label %404

106:                                              ; preds = %2
  br label %404

107:                                              ; preds = %2
  br label %404

108:                                              ; preds = %2
  br label %404

109:                                              ; preds = %2
  br label %404

110:                                              ; preds = %2
  br label %404

111:                                              ; preds = %2
  br label %404

112:                                              ; preds = %2
  br label %404

113:                                              ; preds = %2
  br label %404

114:                                              ; preds = %2
  br label %404

115:                                              ; preds = %2
  br label %404

116:                                              ; preds = %2
  br label %404

117:                                              ; preds = %2
  br label %404

118:                                              ; preds = %2
  br label %404

119:                                              ; preds = %2
  br label %404

120:                                              ; preds = %2
  br label %404

121:                                              ; preds = %2
  br label %404

122:                                              ; preds = %2
  br label %404

123:                                              ; preds = %2
  %124 = icmp eq i32 %1, 197
  %125 = select i1 %124, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_155COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_to_R8G8B8A8_UNORM_SRGBEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %126 = icmp eq i32 %1, 99
  %127 = select i1 %126, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_160COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_to_ETC2_R8G8B8A8_SRGB_BLOCKEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %125
  br label %404

128:                                              ; preds = %2
  %129 = icmp eq i32 %1, 197
  %130 = select i1 %129, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_144COMPRESSED_SRGB8_ETC2_to_R8G8B8A8_UNORM_SRGBEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %131 = icmp eq i32 %1, 101
  %132 = select i1 %131, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ETC2_to_ETC2_R8G8B8_SRGB_BLOCKEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %130
  br label %404

133:                                              ; preds = %2
  %134 = icmp eq i32 %1, 78
  br i1 %134, label %404, label %399

135:                                              ; preds = %2
  %136 = icmp eq i32 %1, 197
  %137 = select i1 %136, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_164COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_R8G8B8A8_UNORM_SRGBEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %138 = icmp eq i32 %1, 97
  %139 = select i1 %138, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_169COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_ETC2_R8G8B8A1_SRGB_BLOCKEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %137
  br label %404

140:                                              ; preds = %2
  %141 = icmp eq i32 %1, 76
  br i1 %141, label %404, label %399

142:                                              ; preds = %2
  br label %404

143:                                              ; preds = %2
  br label %404

144:                                              ; preds = %2
  br label %404

145:                                              ; preds = %2
  br label %404

146:                                              ; preds = %2
  br label %404

147:                                              ; preds = %2
  %148 = icmp eq i32 %1, 5
  %149 = select i1 %148, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_140DEPTH24_STENCIL8_to_D32_FLOAT_S8X24_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %150 = icmp eq i32 %1, 2
  %151 = select i1 %150, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_137DEPTH24_STENCIL8_to_D24_UNORM_S8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %149
  br label %404

152:                                              ; preds = %2
  %153 = icmp eq i32 %1, 5
  %154 = select i1 %153, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_141DEPTH32F_STENCIL8_to_D32_FLOAT_S8X24_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %155 = icmp eq i32 %1, 2
  %156 = select i1 %155, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_138DEPTH32F_STENCIL8_to_D24_UNORM_S8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %154
  br label %404

157:                                              ; preds = %2
  %158 = icmp eq i32 %1, 1
  br i1 %158, label %404, label %399

159:                                              ; preds = %2
  %160 = add i32 %1, -2
  %161 = icmp ult i32 %160, 4
  br i1 %161, label %400, label %399

162:                                              ; preds = %2
  %163 = icmp eq i32 %1, 4
  br i1 %163, label %404, label %399

164:                                              ; preds = %2
  %165 = icmp eq i32 %1, 4
  %166 = select i1 %165, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_134DEPTH_COMPONENT32_OES_to_D32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_132DEPTH_COMPONENT32_OES_to_defaultEj
  br label %404

167:                                              ; preds = %2
  %168 = icmp eq i32 %1, 77
  br i1 %168, label %404, label %399

169:                                              ; preds = %2
  switch i32 %1, label %399 [
    i32 96, label %404
    i32 102, label %170
    i32 196, label %171
  ]

170:                                              ; preds = %169
  br label %404

171:                                              ; preds = %169
  br label %404

172:                                              ; preds = %2
  br label %404

173:                                              ; preds = %2
  br label %404

174:                                              ; preds = %2
  %175 = icmp eq i32 %1, 156
  %176 = select i1 %175, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_131LUMINANCE_to_R32G32B32A32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_120LUMINANCE_to_defaultEj
  %177 = icmp eq i32 %1, 127
  %178 = select i1 %177, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_131LUMINANCE_to_R16G16B16A16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %176
  br label %404

179:                                              ; preds = %2
  %180 = icmp eq i32 %1, 148
  %181 = select i1 %180, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_129LUMINANCE16F_EXT_to_R16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_127LUMINANCE16F_EXT_to_defaultEj
  br label %404

182:                                              ; preds = %2
  %183 = icmp eq i32 %1, 180
  %184 = select i1 %183, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_129LUMINANCE32F_EXT_to_R32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_127LUMINANCE32F_EXT_to_defaultEj
  br label %404

185:                                              ; preds = %2
  %186 = icmp eq i32 %1, 210
  %187 = select i1 %186, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_135LUMINANCE8_ALPHA8_EXT_to_R8G8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %188 = icmp eq i32 %1, 196
  %189 = select i1 %188, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_139LUMINANCE8_ALPHA8_EXT_to_R8G8B8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %187
  br label %404

190:                                              ; preds = %2
  %191 = icmp eq i32 %1, 217
  %192 = select i1 %191, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_126LUMINANCE8_EXT_to_R8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %193 = icmp eq i32 %1, 196
  %194 = select i1 %193, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_132LUMINANCE8_EXT_to_R8G8B8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %192
  br label %404

195:                                              ; preds = %2
  %196 = icmp eq i32 %1, 156
  %197 = select i1 %196, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_137LUMINANCE_ALPHA_to_R32G32B32A32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_126LUMINANCE_ALPHA_to_defaultEj
  %198 = icmp eq i32 %1, 127
  %199 = select i1 %198, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_137LUMINANCE_ALPHA_to_R16G16B16A16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %197
  br label %404

200:                                              ; preds = %2
  %201 = icmp eq i32 %1, 141
  %202 = select i1 %201, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_138LUMINANCE_ALPHA16F_EXT_to_R16G16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_133LUMINANCE_ALPHA16F_EXT_to_defaultEj
  br label %404

203:                                              ; preds = %2
  %204 = icmp eq i32 %1, 172
  %205 = select i1 %204, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_138LUMINANCE_ALPHA32F_EXT_to_R32G32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_133LUMINANCE_ALPHA32F_EXT_to_defaultEj
  br label %404

206:                                              ; preds = %2
  %207 = icmp eq i32 %1, 126
  br i1 %207, label %404, label %399

208:                                              ; preds = %2
  %209 = icmp eq i32 %1, 148
  br i1 %209, label %404, label %399

210:                                              ; preds = %2
  %211 = icmp eq i32 %1, 149
  br i1 %211, label %404, label %399

212:                                              ; preds = %2
  %213 = icmp eq i32 %1, 152
  br i1 %213, label %404, label %399

214:                                              ; preds = %2
  %215 = icmp eq i32 %1, 153
  br i1 %215, label %404, label %399

216:                                              ; preds = %2
  %217 = icmp eq i32 %1, 150
  br i1 %217, label %404, label %399

218:                                              ; preds = %2
  br label %404

219:                                              ; preds = %2
  br label %404

220:                                              ; preds = %2
  %221 = icmp eq i32 %1, 180
  br i1 %221, label %404, label %399

222:                                              ; preds = %2
  %223 = icmp eq i32 %1, 181
  br i1 %223, label %404, label %399

224:                                              ; preds = %2
  %225 = icmp eq i32 %1, 184
  br i1 %225, label %404, label %399

226:                                              ; preds = %2
  %227 = icmp eq i32 %1, 217
  br i1 %227, label %404, label %399

228:                                              ; preds = %2
  %229 = icmp eq i32 %1, 213
  br i1 %229, label %404, label %399

230:                                              ; preds = %2
  %231 = icmp eq i32 %1, 216
  br i1 %231, label %404, label %399

232:                                              ; preds = %2
  %233 = icmp eq i32 %1, 214
  br i1 %233, label %404, label %399

234:                                              ; preds = %2
  br label %404

235:                                              ; preds = %2
  br label %404

236:                                              ; preds = %2
  %237 = icmp eq i32 %1, 141
  br i1 %237, label %404, label %399

238:                                              ; preds = %2
  %239 = icmp eq i32 %1, 142
  br i1 %239, label %404, label %399

240:                                              ; preds = %2
  %241 = icmp eq i32 %1, 145
  br i1 %241, label %404, label %399

242:                                              ; preds = %2
  %243 = icmp eq i32 %1, 146
  br i1 %243, label %404, label %399

244:                                              ; preds = %2
  %245 = icmp eq i32 %1, 143
  br i1 %245, label %404, label %399

246:                                              ; preds = %2
  br label %404

247:                                              ; preds = %2
  br label %404

248:                                              ; preds = %2
  %249 = icmp eq i32 %1, 172
  br i1 %249, label %404, label %399

250:                                              ; preds = %2
  %251 = icmp eq i32 %1, 173
  br i1 %251, label %404, label %399

252:                                              ; preds = %2
  %253 = icmp eq i32 %1, 176
  br i1 %253, label %404, label %399

254:                                              ; preds = %2
  %255 = icmp eq i32 %1, 210
  br i1 %255, label %404, label %399

256:                                              ; preds = %2
  %257 = icmp eq i32 %1, 206
  br i1 %257, label %404, label %399

258:                                              ; preds = %2
  %259 = icmp eq i32 %1, 209
  br i1 %259, label %404, label %399

260:                                              ; preds = %2
  %261 = icmp eq i32 %1, 207
  br i1 %261, label %404, label %399

262:                                              ; preds = %2
  br label %404

263:                                              ; preds = %2
  br label %404

264:                                              ; preds = %2
  br label %404

265:                                              ; preds = %2
  %266 = icmp eq i32 %1, 123
  br i1 %266, label %404, label %399

267:                                              ; preds = %2
  %268 = icmp eq i32 %1, 122
  br i1 %268, label %404, label %399

269:                                              ; preds = %2
  %270 = icmp eq i32 %1, 119
  br i1 %270, label %404, label %399

271:                                              ; preds = %2
  %272 = icmp eq i32 %1, 120
  br i1 %272, label %404, label %399

273:                                              ; preds = %2
  br label %404

274:                                              ; preds = %2
  br label %404

275:                                              ; preds = %2
  %276 = icmp eq i32 %1, 125
  %277 = select i1 %276, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_139RGB10_UNORM_ANGLEX_to_R10G10B10X2_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %278 = icmp eq i32 %1, 123
  %279 = select i1 %278, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_139RGB10_UNORM_ANGLEX_to_R10G10B10A2_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %277
  br label %404

280:                                              ; preds = %2
  %281 = icmp eq i32 %1, 134
  %282 = select i1 %281, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125RGB16F_to_R16G16B16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %283 = icmp eq i32 %1, 127
  %284 = select i1 %283, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128RGB16F_to_R16G16B16A16_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %282
  br label %404

285:                                              ; preds = %2
  %286 = icmp eq i32 %1, 135
  %287 = select i1 %286, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_124RGB16I_to_R16G16B16_SINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %288 = icmp eq i32 %1, 128
  %289 = select i1 %288, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_127RGB16I_to_R16G16B16A16_SINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %287
  br label %404

290:                                              ; preds = %2
  %291 = icmp eq i32 %1, 138
  %292 = select i1 %291, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125RGB16UI_to_R16G16B16_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %293 = icmp eq i32 %1, 131
  %294 = select i1 %293, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128RGB16UI_to_R16G16B16A16_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %292
  br label %404

295:                                              ; preds = %2
  %296 = icmp eq i32 %1, 139
  %297 = select i1 %296, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128RGB16_EXT_to_R16G16B16_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %298 = icmp eq i32 %1, 132
  %299 = select i1 %298, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_131RGB16_EXT_to_R16G16B16A16_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %297
  br label %404

300:                                              ; preds = %2
  %301 = icmp eq i32 %1, 136
  %302 = select i1 %301, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_134RGB16_SNORM_EXT_to_R16G16B16_SNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %303 = icmp eq i32 %1, 129
  %304 = select i1 %303, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_137RGB16_SNORM_EXT_to_R16G16B16A16_SNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %302
  br label %404

305:                                              ; preds = %2
  br label %404

306:                                              ; preds = %2
  br label %404

307:                                              ; preds = %2
  %308 = icmp eq i32 %1, 164
  %309 = select i1 %308, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125RGB32F_to_R32G32B32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %310 = icmp eq i32 %1, 156
  %311 = select i1 %310, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128RGB32F_to_R32G32B32A32_FLOATEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %309
  br label %404

312:                                              ; preds = %2
  %313 = icmp eq i32 %1, 165
  %314 = select i1 %313, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_124RGB32I_to_R32G32B32_SINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %315 = icmp eq i32 %1, 157
  %316 = select i1 %315, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_127RGB32I_to_R32G32B32A32_SINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %314
  br label %404

317:                                              ; preds = %2
  %318 = icmp eq i32 %1, 168
  %319 = select i1 %318, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125RGB32UI_to_R32G32B32_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %320 = icmp eq i32 %1, 160
  %321 = select i1 %320, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128RGB32UI_to_R32G32B32A32_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %319
  br label %404

322:                                              ; preds = %2
  switch i32 %1, label %399 [
    i32 69, label %404
    i32 189, label %323
    i32 196, label %324
  ]

323:                                              ; preds = %322
  br label %404

324:                                              ; preds = %322
  br label %404

325:                                              ; preds = %2
  switch i32 %1, label %399 [
    i32 9, label %404
    i32 68, label %326
    i32 188, label %327
    i32 196, label %328
  ]

326:                                              ; preds = %325
  br label %404

327:                                              ; preds = %325
  br label %404

328:                                              ; preds = %325
  br label %404

329:                                              ; preds = %2
  %330 = icmp eq i32 %1, 203
  %331 = select i1 %330, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_120RGB8_to_R8G8B8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %332 = icmp eq i32 %1, 196
  %333 = select i1 %332, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_122RGB8_to_R8G8B8A8_UNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %331
  br label %404

334:                                              ; preds = %2
  %335 = icmp eq i32 %1, 199
  %336 = select i1 %335, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_120RGB8I_to_R8G8B8_SINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %337 = icmp eq i32 %1, 190
  %338 = select i1 %337, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_122RGB8I_to_R8G8B8A8_SINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %336
  br label %404

339:                                              ; preds = %2
  %340 = icmp eq i32 %1, 202
  %341 = select i1 %340, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_121RGB8UI_to_R8G8B8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %342 = icmp eq i32 %1, 195
  %343 = select i1 %342, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_123RGB8UI_to_R8G8B8A8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %341
  br label %404

344:                                              ; preds = %2
  %345 = icmp eq i32 %1, 200
  %346 = select i1 %345, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_126RGB8_SNORM_to_R8G8B8_SNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %347 = icmp eq i32 %1, 191
  %348 = select i1 %347, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128RGB8_SNORM_to_R8G8B8A8_SNORMEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %346
  br label %404

349:                                              ; preds = %2
  br label %404

350:                                              ; preds = %2
  br label %404

351:                                              ; preds = %2
  %352 = icmp eq i32 %1, 220
  br i1 %352, label %404, label %399

353:                                              ; preds = %2
  br label %404

354:                                              ; preds = %2
  %355 = icmp eq i32 %1, 127
  br i1 %355, label %404, label %399

356:                                              ; preds = %2
  %357 = icmp eq i32 %1, 128
  br i1 %357, label %404, label %399

358:                                              ; preds = %2
  %359 = icmp eq i32 %1, 131
  br i1 %359, label %404, label %399

360:                                              ; preds = %2
  %361 = icmp eq i32 %1, 132
  br i1 %361, label %404, label %399

362:                                              ; preds = %2
  %363 = icmp eq i32 %1, 129
  br i1 %363, label %404, label %399

364:                                              ; preds = %2
  br label %404

365:                                              ; preds = %2
  br label %404

366:                                              ; preds = %2
  %367 = icmp eq i32 %1, 156
  br i1 %367, label %404, label %399

368:                                              ; preds = %2
  %369 = icmp eq i32 %1, 157
  br i1 %369, label %404, label %399

370:                                              ; preds = %2
  %371 = icmp eq i32 %1, 160
  br i1 %371, label %404, label %399

372:                                              ; preds = %2
  switch i32 %1, label %399 [
    i32 67, label %404
    i32 187, label %373
    i32 196, label %374
  ]

373:                                              ; preds = %372
  br label %404

374:                                              ; preds = %372
  br label %404

375:                                              ; preds = %2
  %376 = icmp eq i32 %1, 196
  br i1 %376, label %404, label %399

377:                                              ; preds = %2
  %378 = icmp eq i32 %1, 190
  br i1 %378, label %404, label %399

379:                                              ; preds = %2
  %380 = icmp eq i32 %1, 195
  br i1 %380, label %404, label %399

381:                                              ; preds = %2
  %382 = icmp eq i32 %1, 191
  br i1 %382, label %404, label %399

383:                                              ; preds = %2
  br label %404

384:                                              ; preds = %2
  br label %404

385:                                              ; preds = %2
  %386 = icmp eq i32 %1, 218
  br i1 %386, label %404, label %399

387:                                              ; preds = %2
  %388 = icmp eq i32 %1, 211
  br i1 %388, label %404, label %399

389:                                              ; preds = %2
  %390 = icmp eq i32 %1, 204
  %391 = select i1 %390, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_126SRGB8_to_R8G8B8_UNORM_SRGBEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* null
  %392 = icmp eq i32 %1, 197
  %393 = select i1 %392, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_128SRGB8_to_R8G8B8A8_UNORM_SRGBEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %391
  br label %404

394:                                              ; preds = %2
  %395 = icmp eq i32 %1, 197
  br i1 %395, label %404, label %399

396:                                              ; preds = %2
  %397 = icmp eq i32 %1, 7
  %398 = select i1 %397, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125STENCIL_INDEX8_to_S8_UINTEj, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* @_ZN5angle12_GLOBAL__N_125STENCIL_INDEX8_to_defaultEj
  br label %404

399:                                              ; preds = %159, %2, %394, %387, %385, %381, %379, %377, %375, %372, %370, %368, %366, %362, %360, %358, %356, %354, %351, %325, %322, %271, %269, %267, %265, %260, %258, %256, %254, %252, %250, %248, %244, %242, %240, %238, %236, %232, %230, %228, %226, %224, %222, %220, %216, %214, %212, %210, %208, %206, %169, %167, %162, %157, %140, %133, %96, %91, %53, %46, %38, %33, %25, %21, %19, %16, %3
  br label %404

400:                                              ; preds = %159
  %401 = sext i32 %160 to i64
  %402 = getelementptr inbounds [4 x { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)*], [4 x { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)*]* @switch.table._ZN5angle19GetLoadFunctionsMapEjNS_8FormatIDE, i64 0, i64 %401
  %403 = load { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)*, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)** %402, align 8
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %403

404:                                              ; preds = %396, %394, %389, %387, %385, %381, %379, %377, %375, %372, %370, %368, %366, %362, %360, %358, %356, %354, %351, %344, %339, %334, %329, %325, %322, %317, %312, %307, %300, %295, %290, %285, %280, %275, %271, %269, %267, %265, %260, %258, %256, %254, %252, %250, %248, %244, %242, %240, %238, %236, %232, %230, %228, %226, %224, %222, %220, %216, %214, %212, %210, %208, %206, %203, %200, %195, %190, %185, %182, %179, %174, %169, %167, %164, %162, %157, %152, %147, %140, %135, %133, %128, %123, %96, %91, %55, %53, %48, %46, %41, %38, %33, %28, %25, %2, %21, %19, %16, %13, %10, %5, %3, %399, %384, %383, %374, %373, %365, %364, %353, %350, %349, %328, %327, %326, %324, %323, %306, %305, %274, %273, %264, %263, %262, %247, %246, %235, %234, %219, %218, %173, %172, %171, %170, %146, %145, %144, %143, %142, %122, %121, %120, %119, %118, %117, %116, %115, %114, %113, %112, %111, %110, %109, %108, %107, %106, %105, %104, %103, %102, %101, %100, %99, %98, %97, %95, %94, %93, %92, %90, %89, %88, %87, %86, %85, %84, %83, %82, %81, %80, %79, %78, %77, %76, %75, %74, %73, %72, %71, %70, %69, %68, %67, %66, %65, %64, %63, %62, %61, %60, %40, %39, %37, %36, %35, %34, %27, %24, %23, %18, %17
  %405 = phi { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* [ null, %399 ], [ @_ZN5angle12_GLOBAL__N_131RGBA8_USCALED_ANGLEX_to_defaultEj, %384 ], [ @_ZN5angle12_GLOBAL__N_131RGBA8_SSCALED_ANGLEX_to_defaultEj, %383 ], [ @_ZN5angle12_GLOBAL__N_123RGBA4_to_R8G8B8A8_UNORMEj, %374 ], [ @_ZN5angle12_GLOBAL__N_123RGBA4_to_R4G4B4A4_UNORMEj, %373 ], [ @_ZN5angle12_GLOBAL__N_132RGBA16_USCALED_ANGLEX_to_defaultEj, %365 ], [ @_ZN5angle12_GLOBAL__N_132RGBA16_SSCALED_ANGLEX_to_defaultEj, %364 ], [ @_ZN5angle12_GLOBAL__N_115RGBA_to_defaultEj, %353 ], [ @_ZN5angle12_GLOBAL__N_130RGB8_USCALED_ANGLEX_to_defaultEj, %350 ], [ @_ZN5angle12_GLOBAL__N_130RGB8_SSCALED_ANGLEX_to_defaultEj, %349 ], [ @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_R8G8B8A8_UNORMEj, %328 ], [ @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_R5G5B5A1_UNORMEj, %327 ], [ @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_B5G5R5A1_UNORMEj, %326 ], [ @_ZN5angle12_GLOBAL__N_124RGB565_to_R8G8B8A8_UNORMEj, %324 ], [ @_ZN5angle12_GLOBAL__N_122RGB565_to_R5G6B5_UNORMEj, %323 ], [ @_ZN5angle12_GLOBAL__N_131RGB16_USCALED_ANGLEX_to_defaultEj, %306 ], [ @_ZN5angle12_GLOBAL__N_131RGB16_SSCALED_ANGLEX_to_defaultEj, %305 ], [ @_ZN5angle12_GLOBAL__N_134RGB10_A2_USCALED_ANGLEX_to_defaultEj, %274 ], [ @_ZN5angle12_GLOBAL__N_134RGB10_A2_SSCALED_ANGLEX_to_defaultEj, %273 ], [ @_ZN5angle12_GLOBAL__N_114RGB_to_defaultEj, %264 ], [ @_ZN5angle12_GLOBAL__N_129RG8_USCALED_ANGLEX_to_defaultEj, %263 ], [ @_ZN5angle12_GLOBAL__N_129RG8_SSCALED_ANGLEX_to_defaultEj, %262 ], [ @_ZN5angle12_GLOBAL__N_130RG16_USCALED_ANGLEX_to_defaultEj, %247 ], [ @_ZN5angle12_GLOBAL__N_130RG16_SSCALED_ANGLEX_to_defaultEj, %246 ], [ @_ZN5angle12_GLOBAL__N_128R8_USCALED_ANGLEX_to_defaultEj, %235 ], [ @_ZN5angle12_GLOBAL__N_128R8_SSCALED_ANGLEX_to_defaultEj, %234 ], [ @_ZN5angle12_GLOBAL__N_129R16_USCALED_ANGLEX_to_defaultEj, %219 ], [ @_ZN5angle12_GLOBAL__N_129R16_SSCALED_ANGLEX_to_defaultEj, %218 ], [ @_ZN5angle12_GLOBAL__N_143G8_B8_R8_3PLANE_420_UNORM_ANGLEX_to_defaultEj, %173 ], [ @_ZN5angle12_GLOBAL__N_142G8_B8R8_2PLANE_420_UNORM_ANGLEX_to_defaultEj, %172 ], [ @_ZN5angle12_GLOBAL__N_131ETC1_RGB8_OES_to_R8G8B8A8_UNORMEj, %171 ], [ @_ZN5angle12_GLOBAL__N_140ETC1_RGB8_OES_to_ETC2_R8G8B8_UNORM_BLOCKEj, %170 ], [ @_ZN5angle12_GLOBAL__N_140COMPRESSED_SRGB_S3TC_DXT1_EXT_to_defaultEj, %146 ], [ @_ZN5angle12_GLOBAL__N_146COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT_to_defaultEj, %145 ], [ @_ZN5angle12_GLOBAL__N_146COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT_to_defaultEj, %144 ], [ @_ZN5angle12_GLOBAL__N_146COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT_to_defaultEj, %143 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT_to_defaultEj, %142 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR_to_defaultEj, %122 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR_to_defaultEj, %121 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR_to_defaultEj, %120 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES_to_defaultEj, %119 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES_to_defaultEj, %118 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR_to_defaultEj, %117 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES_to_defaultEj, %116 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR_to_defaultEj, %115 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES_to_defaultEj, %114 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES_to_defaultEj, %113 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR_to_defaultEj, %112 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES_to_defaultEj, %111 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR_to_defaultEj, %110 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES_to_defaultEj, %109 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES_to_defaultEj, %108 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR_to_defaultEj, %107 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES_to_defaultEj, %106 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES_to_defaultEj, %105 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR_to_defaultEj, %104 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR_to_defaultEj, %103 ], [ @_ZN5angle12_GLOBAL__N_148COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR_to_defaultEj, %102 ], [ @_ZN5angle12_GLOBAL__N_148COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR_to_defaultEj, %101 ], [ @_ZN5angle12_GLOBAL__N_148COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR_to_defaultEj, %100 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR_to_defaultEj, %99 ], [ @_ZN5angle12_GLOBAL__N_142COMPRESSED_SIGNED_RG11_EAC_to_R16G16_SNORMEj, %98 ], [ @_ZN5angle12_GLOBAL__N_142COMPRESSED_SIGNED_RG11_EAC_to_R16G16_FLOATEj, %97 ], [ @_ZN5angle12_GLOBAL__N_142COMPRESSED_SIGNED_RED_RGTC1_EXT_to_defaultEj, %95 ], [ @_ZN5angle12_GLOBAL__N_148COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT_to_defaultEj, %94 ], [ @_ZN5angle12_GLOBAL__N_138COMPRESSED_SIGNED_R11_EAC_to_R16_SNORMEj, %93 ], [ @_ZN5angle12_GLOBAL__N_138COMPRESSED_SIGNED_R11_EAC_to_R16_FLOATEj, %92 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGB_S3TC_DXT1_EXT_to_defaultEj, %90 ], [ @_ZN5angle12_GLOBAL__N_149COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT_to_defaultEj, %89 ], [ @_ZN5angle12_GLOBAL__N_147COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT_to_defaultEj, %88 ], [ @_ZN5angle12_GLOBAL__N_142COMPRESSED_RGBA_S3TC_DXT5_ANGLE_to_defaultEj, %87 ], [ @_ZN5angle12_GLOBAL__N_142COMPRESSED_RGBA_S3TC_DXT3_ANGLE_to_defaultEj, %86 ], [ @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_S3TC_DXT1_EXT_to_defaultEj, %85 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_BPTC_UNORM_EXT_to_defaultEj, %84 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_8x8_KHR_to_defaultEj, %83 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_8x6_KHR_to_defaultEj, %82 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_8x5_KHR_to_defaultEj, %81 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_6x6x6_OES_to_defaultEj, %80 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_6x6x5_OES_to_defaultEj, %79 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_6x6_KHR_to_defaultEj, %78 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_6x5x5_OES_to_defaultEj, %77 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_6x5_KHR_to_defaultEj, %76 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_5x5x5_OES_to_defaultEj, %75 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_5x5x4_OES_to_defaultEj, %74 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_5x5_KHR_to_defaultEj, %73 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_5x4x4_OES_to_defaultEj, %72 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_5x4_KHR_to_defaultEj, %71 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_4x4x4_OES_to_defaultEj, %70 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_4x4x3_OES_to_defaultEj, %69 ], [ @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_4x4_KHR_to_defaultEj, %68 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_4x3x3_OES_to_defaultEj, %67 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_3x3x3_OES_to_defaultEj, %66 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_12x12_KHR_to_defaultEj, %65 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_12x10_KHR_to_defaultEj, %64 ], [ @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_ASTC_10x8_KHR_to_defaultEj, %63 ], [ @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_ASTC_10x6_KHR_to_defaultEj, %62 ], [ @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_ASTC_10x5_KHR_to_defaultEj, %61 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_10x10_KHR_to_defaultEj, %60 ], [ @_ZN5angle12_GLOBAL__N_135COMPRESSED_RG11_EAC_to_R16G16_UNORMEj, %40 ], [ @_ZN5angle12_GLOBAL__N_135COMPRESSED_RG11_EAC_to_R16G16_FLOATEj, %39 ], [ @_ZN5angle12_GLOBAL__N_135COMPRESSED_RED_RGTC1_EXT_to_defaultEj, %37 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_RED_GREEN_RGTC2_EXT_to_defaultEj, %36 ], [ @_ZN5angle12_GLOBAL__N_131COMPRESSED_R11_EAC_to_R16_UNORMEj, %35 ], [ @_ZN5angle12_GLOBAL__N_131COMPRESSED_R11_EAC_to_R16_FLOATEj, %34 ], [ @_ZN5angle12_GLOBAL__N_119BGRA_EXT_to_defaultEj, %27 ], [ @_ZN5angle12_GLOBAL__N_120BGRA8_EXT_to_defaultEj, %24 ], [ @_ZN5angle12_GLOBAL__N_123BGRA4_ANGLEX_to_defaultEj, %23 ], [ @_ZN5angle12_GLOBAL__N_122ALPHA8_EXT_to_R8_UNORMEj, %18 ], [ @_ZN5angle12_GLOBAL__N_128ALPHA8_EXT_to_R8G8B8A8_UNORMEj, %17 ], [ @_ZN5angle12_GLOBAL__N_131A1RGB5_ANGLEX_to_A1R5G5B5_UNORMEj, %3 ], [ %9, %5 ], [ %12, %10 ], [ %15, %13 ], [ @_ZN5angle12_GLOBAL__N_122ALPHA8_EXT_to_A8_UNORMEj, %16 ], [ @_ZN5angle12_GLOBAL__N_136BGR10_A2_ANGLEX_to_B10G10R10A2_UNORMEj, %19 ], [ @_ZN5angle12_GLOBAL__N_129BGR565_ANGLEX_to_B5G6R5_UNORMEj, %21 ], [ @_ZN5angle12_GLOBAL__N_125BGR5_A1_ANGLEX_to_defaultEj, %2 ], [ @_ZN5angle12_GLOBAL__N_140BGRA8_SRGB_ANGLEX_to_B8G8R8A8_UNORM_SRGBEj, %25 ], [ %32, %28 ], [ @_ZN5angle12_GLOBAL__N_141COMPRESSED_R11_EAC_to_EAC_R11_UNORM_BLOCKEj, %33 ], [ @_ZN5angle12_GLOBAL__N_145COMPRESSED_RG11_EAC_to_EAC_R11G11_UNORM_BLOCKEj, %38 ], [ %45, %41 ], [ @_ZN5angle12_GLOBAL__N_162COMPRESSED_RGB8_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGB_UNORM_BLOCKEj, %46 ], [ %52, %48 ], [ @_ZN5angle12_GLOBAL__N_183COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGBA_UNORM_BLOCKEj, %53 ], [ %59, %55 ], [ @_ZN5angle12_GLOBAL__N_148COMPRESSED_SIGNED_R11_EAC_to_EAC_R11_SNORM_BLOCKEj, %91 ], [ @_ZN5angle12_GLOBAL__N_152COMPRESSED_SIGNED_RG11_EAC_to_EAC_R11G11_SNORM_BLOCKEj, %96 ], [ %127, %123 ], [ %132, %128 ], [ @_ZN5angle12_GLOBAL__N_168COMPRESSED_SRGB8_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGB_UNORM_SRGB_BLOCKEj, %133 ], [ %139, %135 ], [ @_ZN5angle12_GLOBAL__N_189COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGBA_UNORM_SRGB_BLOCKEj, %140 ], [ %151, %147 ], [ %156, %152 ], [ @_ZN5angle12_GLOBAL__N_130DEPTH_COMPONENT16_to_D16_UNORMEj, %157 ], [ @_ZN5angle12_GLOBAL__N_131DEPTH_COMPONENT32F_to_D32_FLOATEj, %162 ], [ %166, %164 ], [ @_ZN5angle12_GLOBAL__N_151ETC1_RGB8_LOSSY_DECODE_ANGLE_to_BC1_RGB_UNORM_BLOCKEj, %167 ], [ @_ZN5angle12_GLOBAL__N_140ETC1_RGB8_OES_to_ETC1_R8G8B8_UNORM_BLOCKEj, %169 ], [ %178, %174 ], [ %181, %179 ], [ %184, %182 ], [ %189, %185 ], [ %194, %190 ], [ %199, %195 ], [ %202, %200 ], [ %205, %203 ], [ @_ZN5angle12_GLOBAL__N_133R11F_G11F_B10F_to_R11G11B10_FLOATEj, %206 ], [ @_ZN5angle12_GLOBAL__N_117R16F_to_R16_FLOATEj, %208 ], [ @_ZN5angle12_GLOBAL__N_116R16I_to_R16_SINTEj, %210 ], [ @_ZN5angle12_GLOBAL__N_117R16UI_to_R16_UINTEj, %212 ], [ @_ZN5angle12_GLOBAL__N_120R16_EXT_to_R16_UNORMEj, %214 ], [ @_ZN5angle12_GLOBAL__N_126R16_SNORM_EXT_to_R16_SNORMEj, %216 ], [ @_ZN5angle12_GLOBAL__N_117R32F_to_R32_FLOATEj, %220 ], [ @_ZN5angle12_GLOBAL__N_116R32I_to_R32_SINTEj, %222 ], [ @_ZN5angle12_GLOBAL__N_117R32UI_to_R32_UINTEj, %224 ], [ @_ZN5angle12_GLOBAL__N_114R8_to_R8_UNORMEj, %226 ], [ @_ZN5angle12_GLOBAL__N_114R8I_to_R8_SINTEj, %228 ], [ @_ZN5angle12_GLOBAL__N_115R8UI_to_R8_UINTEj, %230 ], [ @_ZN5angle12_GLOBAL__N_120R8_SNORM_to_R8_SNORMEj, %232 ], [ @_ZN5angle12_GLOBAL__N_121RG16F_to_R16G16_FLOATEj, %236 ], [ @_ZN5angle12_GLOBAL__N_120RG16I_to_R16G16_SINTEj, %238 ], [ @_ZN5angle12_GLOBAL__N_121RG16UI_to_R16G16_UINTEj, %240 ], [ @_ZN5angle12_GLOBAL__N_124RG16_EXT_to_R16G16_UNORMEj, %242 ], [ @_ZN5angle12_GLOBAL__N_130RG16_SNORM_EXT_to_R16G16_SNORMEj, %244 ], [ @_ZN5angle12_GLOBAL__N_121RG32F_to_R32G32_FLOATEj, %248 ], [ @_ZN5angle12_GLOBAL__N_120RG32I_to_R32G32_SINTEj, %250 ], [ @_ZN5angle12_GLOBAL__N_121RG32UI_to_R32G32_UINTEj, %252 ], [ @_ZN5angle12_GLOBAL__N_117RG8_to_R8G8_UNORMEj, %254 ], [ @_ZN5angle12_GLOBAL__N_117RG8I_to_R8G8_SINTEj, %256 ], [ @_ZN5angle12_GLOBAL__N_118RG8UI_to_R8G8_UINTEj, %258 ], [ @_ZN5angle12_GLOBAL__N_123RG8_SNORM_to_R8G8_SNORMEj, %260 ], [ @_ZN5angle12_GLOBAL__N_129RGB10_A2_to_R10G10B10A2_UNORMEj, %265 ], [ @_ZN5angle12_GLOBAL__N_130RGB10_A2UI_to_R10G10B10A2_UINTEj, %267 ], [ @_ZN5angle12_GLOBAL__N_140RGB10_A2_SINT_ANGLEX_to_R10G10B10A2_SINTEj, %269 ], [ @_ZN5angle12_GLOBAL__N_142RGB10_A2_SNORM_ANGLEX_to_R10G10B10A2_SNORMEj, %271 ], [ %279, %275 ], [ %284, %280 ], [ %289, %285 ], [ %294, %290 ], [ %299, %295 ], [ %304, %300 ], [ %311, %307 ], [ %316, %312 ], [ %321, %317 ], [ @_ZN5angle12_GLOBAL__N_122RGB565_to_B5G6R5_UNORMEj, %322 ], [ @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_A1R5G5B5_UNORMEj, %325 ], [ %333, %329 ], [ %338, %334 ], [ %343, %339 ], [ %348, %344 ], [ @_ZN5angle12_GLOBAL__N_129RGB9_E5_to_R9G9B9E5_SHAREDEXPEj, %351 ], [ @_ZN5angle12_GLOBAL__N_129RGBA16F_to_R16G16B16A16_FLOATEj, %354 ], [ @_ZN5angle12_GLOBAL__N_128RGBA16I_to_R16G16B16A16_SINTEj, %356 ], [ @_ZN5angle12_GLOBAL__N_129RGBA16UI_to_R16G16B16A16_UINTEj, %358 ], [ @_ZN5angle12_GLOBAL__N_132RGBA16_EXT_to_R16G16B16A16_UNORMEj, %360 ], [ @_ZN5angle12_GLOBAL__N_138RGBA16_SNORM_EXT_to_R16G16B16A16_SNORMEj, %362 ], [ @_ZN5angle12_GLOBAL__N_129RGBA32F_to_R32G32B32A32_FLOATEj, %366 ], [ @_ZN5angle12_GLOBAL__N_128RGBA32I_to_R32G32B32A32_SINTEj, %368 ], [ @_ZN5angle12_GLOBAL__N_129RGBA32UI_to_R32G32B32A32_UINTEj, %370 ], [ @_ZN5angle12_GLOBAL__N_123RGBA4_to_B4G4R4A4_UNORMEj, %372 ], [ @_ZN5angle12_GLOBAL__N_123RGBA8_to_R8G8B8A8_UNORMEj, %375 ], [ @_ZN5angle12_GLOBAL__N_123RGBA8I_to_R8G8B8A8_SINTEj, %377 ], [ @_ZN5angle12_GLOBAL__N_124RGBA8UI_to_R8G8B8A8_UINTEj, %379 ], [ @_ZN5angle12_GLOBAL__N_129RGBA8_SNORM_to_R8G8B8A8_SNORMEj, %381 ], [ @_ZN5angle12_GLOBAL__N_124SR8_EXT_to_R8_UNORM_SRGBEj, %385 ], [ @_ZN5angle12_GLOBAL__N_127SRG8_EXT_to_R8G8_UNORM_SRGBEj, %387 ], [ %393, %389 ], [ @_ZN5angle12_GLOBAL__N_135SRGB8_ALPHA8_to_R8G8B8A8_UNORM_SRGBEj, %394 ], [ %398, %396 ]
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)* %405
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131A1RGB5_ANGLEX_to_A1R5G5B5_UNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33638, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadRGB5A1ToRGBA8EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127ALPHA_to_R16G16B16A16_FLOATEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5131, label %4
    i32 36193, label %4
    i32 5121, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %1, %3, %2
  %5 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadA16FToRGBA16FEmmmPKhmmPhmm, %1 ], [ @_ZN5angle17LoadA16FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127ALPHA_to_R32G32B32A32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadA32FToRGBA32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_116ALPHA_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125ALPHA16F_EXT_to_R16_FLOATEj(i32) #0 {
  switch i32 %0, label %2 [
    i32 5131, label %3
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %2
  %4 = phi i8 [ 1, %2 ], [ 0, %1 ], [ 0, %1 ]
  %5 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %1 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %1 ]
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123ALPHA16F_EXT_to_defaultEj(i32) #0 {
  switch i32 %0, label %2 [
    i32 5131, label %3
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %2
  %4 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadA16FToRGBA16FEmmmPKhmmPhmm, %1 ], [ @_ZN5angle17LoadA16FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %4, 0
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125ALPHA32F_EXT_to_R32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123ALPHA32F_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadA32FToRGBA32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_122ALPHA8_EXT_to_A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128ALPHA8_EXT_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle13LoadA8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_122ALPHA8_EXT_to_R8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_136BGR10_A2_ANGLEX_to_B10G10R10A2_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 33640
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129BGR565_ANGLEX_to_B5G6R5_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 33635
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle18LoadRGB565ToBGR565EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = icmp eq i32 %0, 5121
  %5 = select i1 %4, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadRGB8ToBGR565EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125BGR5_A1_ANGLEX_to_defaultEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33638, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadRGB5A1ToRGBA8EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123BGRA4_ANGLEX_to_defaultEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33637, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 1, %2 ], [ 0, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle16LoadRGBA4ToRGBA8EmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120BGRA8_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140BGRA8_SRGB_ANGLEX_to_B8G8R8A8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_119BGRA_EXT_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130BGRX8_ANGLEX_to_B8G8R8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130BGRX8_ANGLEX_to_B8G8R8X8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_R11_EAC_to_EAC_R11_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131COMPRESSED_R11_EAC_to_R16_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadEACR11ToR16FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131COMPRESSED_R11_EAC_to_R16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle15LoadEACR11ToR16EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RED_GREEN_RGTC2_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_135COMPRESSED_RED_RGTC1_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_145COMPRESSED_RG11_EAC_to_EAC_R11G11_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_135COMPRESSED_RG11_EAC_to_R16G16_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle18LoadEACRG11ToRG16FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_135COMPRESSED_RG11_EAC_to_R16G16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadEACRG11ToRG16EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_RGB8_ETC2_to_ETC2_R8G8B8_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138COMPRESSED_RGB8_ETC2_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle19LoadETC2RGB8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_162COMPRESSED_RGB8_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGB_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadETC2RGB8ToBC1EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_169COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_ETC2_R8G8B8A1_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_158COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle21LoadETC2RGB8A1ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_183COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGBA_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle19LoadETC2RGB8A1ToBC1EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_154COMPRESSED_RGBA8_ETC2_EAC_to_ETC2_R8G8B8A8_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_143COMPRESSED_RGBA8_ETC2_EAC_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadETC2RGBA8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_10x10_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm10ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_ASTC_10x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_ASTC_10x6_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm6ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_ASTC_10x8_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm8ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_12x10_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm12ELm10ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_12x12_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm12ELm12ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_3x3x3_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm3ELm3ELm3ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_4x3x3_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm3ELm3ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_4x4_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_4x4x3_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm3ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_4x4x4_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm4ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_5x4_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_5x4x4_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm4ELm4ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_5x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_5x5x4_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm4ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_5x5x5_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm5ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_6x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_6x5x5_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm5ELm5ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_6x6_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_6x6x5_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm5ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_ASTC_6x6x6_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm6ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_8x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm8ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_8x6_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm8ELm6ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGBA_ASTC_8x8_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm8ELm8ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141COMPRESSED_RGBA_BPTC_UNORM_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140COMPRESSED_RGBA_S3TC_DXT1_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142COMPRESSED_RGBA_S3TC_DXT3_ANGLE_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142COMPRESSED_RGBA_S3TC_DXT5_ANGLE_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139COMPRESSED_RGB_S3TC_DXT1_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_148COMPRESSED_SIGNED_R11_EAC_to_EAC_R11_SNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138COMPRESSED_SIGNED_R11_EAC_to_R16_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadEACR11SToR16FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138COMPRESSED_SIGNED_R11_EAC_to_R16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadEACR11SToR16EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_148COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142COMPRESSED_SIGNED_RED_RGTC1_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_152COMPRESSED_SIGNED_RG11_EAC_to_EAC_R11G11_SNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142COMPRESSED_SIGNED_RG11_EAC_to_R16G16_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle19LoadEACRG11SToRG16FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142COMPRESSED_SIGNED_RG11_EAC_to_R16G16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle18LoadEACRG11SToRG16EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm10ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_148COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_148COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm6ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_148COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm10ELm8ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm12ELm10ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm12ELm12ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm3ELm3ELm3ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm3ELm3ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm3ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm4ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm4ELm4ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm4ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm5ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm5ELm5ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm5ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_149COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm6ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm8ELm5ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm8ELm6ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm8ELm8ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_160COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_to_ETC2_R8G8B8A8_SRGB_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_155COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_to_R8G8B8A8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadETC2SRGBA8ToSRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB8_ETC2_to_ETC2_R8G8B8_SRGB_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_144COMPRESSED_SRGB8_ETC2_to_R8G8B8A8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadETC2SRGB8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_168COMPRESSED_SRGB8_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGB_UNORM_SRGB_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle18LoadETC2SRGB8ToBC1EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_169COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_ETC2_R8G8B8A1_SRGB_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_164COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_R8G8B8A8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadETC2SRGB8A1ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_189COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGBA_UNORM_SRGB_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadETC2SRGB8A1ToBC1EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_147COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_146COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_146COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_146COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140COMPRESSED_SRGB_S3TC_DXT1_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_137DEPTH24_STENCIL8_to_D24_UNORM_S8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 34042
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle14LoadR32ToR24G8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140DEPTH24_STENCIL8_to_D32_FLOAT_S8X24_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 34042
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadD24S8ToD32FS8X24EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138DEPTH32F_STENCIL8_to_D24_UNORM_S8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 36269
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadD32FS8X24ToD24S8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141DEPTH32F_STENCIL8_to_D32_FLOAT_S8X24_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 36269
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle24LoadD32FS8X24ToD32FS8X24EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130DEPTH_COMPONENT16_to_D16_UNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5125, label %4
    i32 5123, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadR32ToR16EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138DEPTH_COMPONENT24_to_D24_UNORM_S8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle14LoadR32ToR24G8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138DEPTH_COMPONENT24_to_D24_UNORM_X8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle14LoadR32ToR24G8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_141DEPTH_COMPONENT24_to_D32_FLOAT_S8X24_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 34042
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadD24S8ToD32FS8X24EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = icmp eq i32 %0, 5125
  %5 = select i1 %4, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadD32ToD32FX32EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131DEPTH_COMPONENT32F_to_D32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle14LoadD32FToD32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_134DEPTH_COMPONENT32_OES_to_D32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle13LoadD32ToD32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_132DEPTH_COMPONENT32_OES_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle14LoadR32ToR24G8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_151ETC1_RGB8_LOSSY_DECODE_ANGLE_to_BC1_RGB_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadETC1RGB8ToBC1EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140ETC1_RGB8_OES_to_ETC1_R8G8B8_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140ETC1_RGB8_OES_to_ETC2_R8G8B8_UNORM_BLOCKEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131ETC1_RGB8_OES_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle19LoadETC1RGB8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142G8_B8R8_2PLANE_420_UNORM_ANGLEX_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_125UnimplementedLoadFunctionEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_143G8_B8_R8_3PLANE_420_UNORM_ANGLEX_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_125UnimplementedLoadFunctionEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131LUMINANCE_to_R16G16B16A16_FLOATEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5131, label %4
    i32 36193, label %4
    i32 5121, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %1, %3, %2
  %5 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadL16FToRGBA16FEmmmPKhmmPhmm, %1 ], [ @_ZN5angle17LoadL16FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131LUMINANCE_to_R32G32B32A32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadL32FToRGBA32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120LUMINANCE_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129LUMINANCE16F_EXT_to_R16_FLOATEj(i32) #0 {
  switch i32 %0, label %2 [
    i32 5131, label %3
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %2
  %4 = phi i8 [ 1, %2 ], [ 0, %1 ], [ 0, %1 ]
  %5 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %1 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %1 ]
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127LUMINANCE16F_EXT_to_defaultEj(i32) #0 {
  switch i32 %0, label %2 [
    i32 5131, label %3
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %2
  %4 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadL16FToRGBA16FEmmmPKhmmPhmm, %1 ], [ @_ZN5angle17LoadL16FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %4, 0
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129LUMINANCE32F_EXT_to_R32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127LUMINANCE32F_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadL32FToRGBA32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139LUMINANCE8_ALPHA8_EXT_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle14LoadLA8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_135LUMINANCE8_ALPHA8_EXT_to_R8G8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_132LUMINANCE8_EXT_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle13LoadL8ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_126LUMINANCE8_EXT_to_R8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_137LUMINANCE_ALPHA_to_R16G16B16A16_FLOATEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5131, label %4
    i32 36193, label %4
    i32 5121, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %1, %3, %2
  %5 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle18LoadLA16FToRGBA16FEmmmPKhmmPhmm, %1 ], [ @_ZN5angle18LoadLA16FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_137LUMINANCE_ALPHA_to_R32G32B32A32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle18LoadLA32FToRGBA32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_126LUMINANCE_ALPHA_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138LUMINANCE_ALPHA16F_EXT_to_R16G16_FLOATEj(i32) #0 {
  switch i32 %0, label %2 [
    i32 5131, label %3
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %2
  %4 = phi i8 [ 1, %2 ], [ 0, %1 ], [ 0, %1 ]
  %5 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, %1 ], [ @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, %1 ]
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_133LUMINANCE_ALPHA16F_EXT_to_defaultEj(i32) #0 {
  switch i32 %0, label %2 [
    i32 5131, label %3
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %2
  %4 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %2 ], [ @_ZN5angle18LoadLA16FToRGBA16FEmmmPKhmmPhmm, %1 ], [ @_ZN5angle18LoadLA16FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %4, 0
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138LUMINANCE_ALPHA32F_EXT_to_R32G32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_133LUMINANCE_ALPHA32F_EXT_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle18LoadLA32FToRGBA32FEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_133R11F_G11F_B10F_to_R11G11B10_FLOATEj(i32) #0 {
  switch i32 %0, label %5 [
    i32 5126, label %6
    i32 5131, label %2
    i32 36193, label %3
    i32 35899, label %4
  ]

2:                                                ; preds = %1
  br label %6

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %1, %5, %4, %3, %2
  %7 = phi i8 [ 1, %5 ], [ 0, %4 ], [ 1, %3 ], [ 1, %2 ], [ 1, %1 ]
  %8 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %5 ], [ @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, %4 ], [ @_ZN5angle20LoadRGB16FToRG11B10FEmmmPKhmmPhmm, %3 ], [ @_ZN5angle20LoadRGB16FToRG11B10FEmmmPKhmmPhmm, %2 ], [ @_ZN5angle20LoadRGB32FToRG11B10FEmmmPKhmmPhmm, %1 ]
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %8, 0
  %10 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9, i8 %7, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_117R16F_to_R16_FLOATEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5126, label %5
    i32 5131, label %2
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi i8 [ 1, %4 ], [ 0, %3 ], [ 0, %2 ], [ 1, %1 ]
  %7 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle12Load32FTo16FILm1EEEvmmmPKhmmPhmm, %1 ]
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %7, 0
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8, i8 %6, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_116R16I_to_R16_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIsLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_117R16UI_to_R16_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120R16_EXT_to_R16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_126R16_SNORM_EXT_to_R16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129R16_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129R16_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_117R32F_to_R32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_116R32I_to_R32_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5124
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIiLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_117R32UI_to_R32_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_114R8_to_R8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_114R8I_to_R8_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_115R8UI_to_R8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120R8_SNORM_to_R8_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128R8_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128R8_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_121RG16F_to_R16G16_FLOATEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5126, label %5
    i32 5131, label %2
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi i8 [ 1, %4 ], [ 0, %3 ], [ 0, %2 ], [ 1, %1 ]
  %7 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle12Load32FTo16FILm2EEEvmmmPKhmmPhmm, %1 ]
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %7, 0
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8, i8 %6, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120RG16I_to_R16G16_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIsLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_121RG16UI_to_R16G16_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_124RG16_EXT_to_R16G16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130RG16_SNORM_EXT_to_R16G16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130RG16_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130RG16_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_121RG32F_to_R32G32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120RG32I_to_R32G32_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5124
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIiLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_121RG32UI_to_R32G32_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_117RG8_to_R8G8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_117RG8I_to_R8G8_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_118RG8UI_to_R8G8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RG8_SNORM_to_R8G8_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RG8_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RG8_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_114RGB_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGB10_A2_to_R10G10B10A2_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 33640
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130RGB10_A2UI_to_R10G10B10A2_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 33640
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_140RGB10_A2_SINT_ANGLEX_to_R10G10B10A2_SINTEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33640, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle18LoadRGB10A2ToRGBA8EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_142RGB10_A2_SNORM_ANGLEX_to_R10G10B10A2_SNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33640, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle18LoadRGB10A2ToRGBA8EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_134RGB10_A2_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_134RGB10_A2_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139RGB10_UNORM_ANGLEX_to_R10G10B10A2_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 33640
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadRGB10A2ToRGB10X2EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_139RGB10_UNORM_ANGLEX_to_R10G10B10X2_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 33640
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle20LoadRGB10A2ToRGB10X2EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGB16F_to_R16G16B16A16_FLOATEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5126, label %5
    i32 5131, label %2
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle16LoadToNative3To4ItLj15360EEEvmmmPKhmmPhmm, %3 ], [ @_ZN5angle16LoadToNative3To4ItLj15360EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle19LoadRGB32FToRGBA16FEmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB16F_to_R16G16B16_FLOATEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5126, label %5
    i32 5131, label %2
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi i8 [ 1, %4 ], [ 0, %3 ], [ 0, %2 ], [ 1, %1 ]
  %7 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle18LoadRGB32FToRGB16FEmmmPKhmmPhmm, %1 ]
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %7, 0
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8, i8 %6, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127RGB16I_to_R16G16B16A16_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IsLj1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_124RGB16I_to_R16G16B16_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIsLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGB16UI_to_R16G16B16A16_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4ItLj1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB16UI_to_R16G16B16_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131RGB16_EXT_to_R16G16B16A16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4ItLj65535EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGB16_EXT_to_R16G16B16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_137RGB16_SNORM_EXT_to_R16G16B16A16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4ItLj32767EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_134RGB16_SNORM_EXT_to_R16G16B16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131RGB16_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131RGB16_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGB32F_to_R32G32B32A32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IfLj1065353216EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB32F_to_R32G32B32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127RGB32I_to_R32G32B32A32_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5124
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IiLj1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_124RGB32I_to_R32G32B32_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5124
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIiLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGB32UI_to_R32G32B32A32_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IjLj1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB32UI_to_R32G32B32_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_122RGB565_to_B5G6R5_UNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33635, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle16LoadRGB8ToBGR565EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_122RGB565_to_R5G6B5_UNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 33635, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle16LoadRGB8ToBGR565EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_124RGB565_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 33635
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle17LoadR5G6B5ToRGBA8EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = icmp eq i32 %0, 5121
  %5 = select i1 %4, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IhLj255EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_A1R5G5B5_UNORMEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5121, label %5
    i32 33640, label %2
    i32 32820, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle18LoadRGB5A1ToA1RGB5EmmmPKhmmPhmm, %3 ], [ @_ZN5angle19LoadRGB10A2ToBGR5A1EmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadRGBA8ToBGR5A1EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_B5G5R5A1_UNORMEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5121, label %5
    i32 33640, label %2
    i32 32820, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle18LoadRGB5A1ToA1RGB5EmmmPKhmmPhmm, %3 ], [ @_ZN5angle19LoadRGB10A2ToBGR5A1EmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadRGBA8ToBGR5A1EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_R5G5B5A1_UNORMEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5121, label %5
    i32 33640, label %2
    i32 32820, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi i8 [ 1, %4 ], [ 0, %3 ], [ 1, %2 ], [ 1, %1 ]
  %7 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %3 ], [ @_ZN5angle19LoadRGB10A2ToRGB5A1EmmmPKhmmPhmm, %2 ], [ @_ZN5angle17LoadRGBA8ToRGB5A1EmmmPKhmmPhmm, %1 ]
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %7, 0
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8, i8 %6, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125RGB5_A1_to_R8G8B8A8_UNORMEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5121, label %5
    i32 33640, label %2
    i32 32820, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi i8 [ 1, %4 ], [ 1, %3 ], [ 1, %2 ], [ 0, %1 ]
  %7 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle17LoadRGB5A1ToRGBA8EmmmPKhmmPhmm, %3 ], [ @_ZN5angle18LoadRGB10A2ToRGBA8EmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, %1 ]
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %7, 0
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8, i8 %6, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_122RGB8_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IhLj255EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120RGB8_to_R8G8B8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_122RGB8I_to_R8G8B8A8_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IaLj1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_120RGB8I_to_R8G8B8_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RGB8UI_to_R8G8B8A8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IhLj1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_121RGB8UI_to_R8G8B8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGB8_SNORM_to_R8G8B8A8_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IaLj127EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_126RGB8_SNORM_to_R8G8B8_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130RGB8_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_130RGB8_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGB9_E5_to_R9G9B9E5_SHAREDEXPEj(i32) #0 {
  switch i32 %0, label %5 [
    i32 5126, label %6
    i32 5131, label %2
    i32 36193, label %3
    i32 35902, label %4
  ]

2:                                                ; preds = %1
  br label %6

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %1, %5, %4, %3, %2
  %7 = phi i8 [ 1, %5 ], [ 0, %4 ], [ 1, %3 ], [ 1, %2 ], [ 1, %1 ]
  %8 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %5 ], [ @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm, %4 ], [ @_ZN5angle18LoadRGB16FToRGB9E5EmmmPKhmmPhmm, %3 ], [ @_ZN5angle18LoadRGB16FToRGB9E5EmmmPKhmmPhmm, %2 ], [ @_ZN5angle18LoadRGB32FToRGB9E5EmmmPKhmmPhmm, %1 ]
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %8, 0
  %10 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9, i8 %7, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_115RGBA_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGBA16F_to_R16G16B16A16_FLOATEj(i32) #0 {
  switch i32 %0, label %4 [
    i32 5126, label %5
    i32 5131, label %2
    i32 36193, label %3
  ]

2:                                                ; preds = %1
  br label %5

3:                                                ; preds = %1
  br label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4, %3, %2
  %6 = phi i8 [ 1, %4 ], [ 0, %3 ], [ 0, %2 ], [ 1, %1 ]
  %7 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %4 ], [ @_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle12Load32FTo16FILm4EEEvmmmPKhmmPhmm, %1 ]
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %7, 0
  %9 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8, i8 %6, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGBA16I_to_R16G16B16A16_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIsLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGBA16UI_to_R16G16B16A16_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_132RGBA16_EXT_to_R16G16B16A16_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5123
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_138RGBA16_SNORM_EXT_to_R16G16B16A16_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5122
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_132RGBA16_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_132RGBA16_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGBA32F_to_R32G32B32A32_FLOATEj(i32) #0 {
  %2 = icmp eq i32 %0, 5126
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIfLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128RGBA32I_to_R32G32B32A32_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5124
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIiLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGBA32UI_to_R32G32B32A32_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5125
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIjLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RGBA4_to_B4G4R4A4_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 32819
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadRGBA4ToARGB4EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = icmp eq i32 %0, 5121
  %5 = select i1 %4, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadRGBA8ToBGRA4EmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RGBA4_to_R4G4B4A4_UNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 32819, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 0, %2 ], [ 1, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm, %2 ], [ @_ZN5angle16LoadRGBA8ToRGBA4EmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RGBA4_to_R8G8B8A8_UNORMEj(i32) #0 {
  switch i32 %0, label %3 [
    i32 5121, label %4
    i32 32819, label %2
  ]

2:                                                ; preds = %1
  br label %4

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %3, %2
  %5 = phi i8 [ 1, %3 ], [ 1, %2 ], [ 0, %1 ]
  %6 = phi void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* [ @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, %3 ], [ @_ZN5angle16LoadRGBA4ToRGBA8EmmmPKhmmPhmm, %2 ], [ @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, %1 ]
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %6, 0
  %8 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7, i8 %5, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RGBA8_to_R8G8B8A8_UNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_123RGBA8I_to_R8G8B8A8_SINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_124RGBA8UI_to_R8G8B8A8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_129RGBA8_SNORM_to_R8G8B8A8_SNORMEj(i32) #0 {
  %2 = icmp eq i32 %0, 5120
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131RGBA8_SSCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_131RGBA8_USCALED_ANGLEX_to_defaultEj(i32) #0 {
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm, i8 1 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_124SR8_EXT_to_R8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_127SRG8_EXT_to_R8G8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm2EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_128SRGB8_to_R8G8B8A8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle16LoadToNative3To4IhLj255EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_126SRGB8_to_R8G8B8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIaLm3EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_135SRGB8_ALPHA8_to_R8G8B8A8_UNORM_SRGBEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125STENCIL_INDEX8_to_S8_UINTEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i8
  %5 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %6 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %5, 0
  %7 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %6, i8 %4, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } @_ZN5angle12_GLOBAL__N_125STENCIL_INDEX8_to_defaultEj(i32) #0 {
  %2 = icmp eq i32 %0, 5121
  %3 = select i1 %2, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_125UnimplementedLoadFunctionEmmmPKhmmPhmm, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm
  %4 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } undef, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)* %3, 0
  %5 = insertvalue { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %4, i8 1, 1
  ret { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } %5
}

declare void @_ZN5angle17LoadRGB5A1ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeItLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 1
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN5angle12_GLOBAL__N_123UnreachableLoadFunctionEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture, i64, i64, i8* nocapture, i64, i64) #0 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN5angle17LoadA16FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadA32FToRGBA32FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIfLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIhLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %1, %0
  %11 = icmp eq i64 %10, %5
  %12 = icmp eq i64 %10, %8
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %15, i1 false)
  br label %89

16:                                               ; preds = %9
  %17 = icmp eq i64 %0, %4
  %18 = icmp eq i64 %0, %7
  %19 = and i1 %17, %18
  %20 = icmp ne i64 %2, 0
  br i1 %19, label %28, label %21

21:                                               ; preds = %16
  br i1 %20, label %22, label %89

22:                                               ; preds = %21
  %23 = icmp eq i64 %1, 0
  %24 = and i64 %1, 1
  %25 = icmp eq i64 %1, 1
  %26 = sub i64 %1, %24
  %27 = icmp eq i64 %24, 0
  br label %49

28:                                               ; preds = %16
  br i1 %20, label %29, label %89

29:                                               ; preds = %28
  %30 = and i64 %2, 1
  %31 = icmp eq i64 %2, 1
  br i1 %31, label %81, label %32

32:                                               ; preds = %29
  %33 = sub i64 %2, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %46, %34 ]
  %36 = phi i64 [ %33, %32 ], [ %47, %34 ]
  %37 = mul i64 %35, %5
  %38 = getelementptr inbounds i8, i8* %3, i64 %37
  %39 = mul i64 %35, %8
  %40 = getelementptr inbounds i8, i8* %6, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %38, i64 %10, i1 false)
  %41 = or i64 %35, 1
  %42 = mul i64 %41, %5
  %43 = getelementptr inbounds i8, i8* %3, i64 %42
  %44 = mul i64 %41, %8
  %45 = getelementptr inbounds i8, i8* %6, i64 %44
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %43, i64 %10, i1 false)
  %46 = add nuw i64 %35, 2
  %47 = add i64 %36, -2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %81, label %34

49:                                               ; preds = %63, %22
  %50 = phi i64 [ 0, %22 ], [ %64, %63 ]
  br i1 %23, label %63, label %51

51:                                               ; preds = %49
  %52 = mul i64 %50, %5
  %53 = mul i64 %50, %8
  %54 = getelementptr inbounds i8, i8* %3, i64 %52
  %55 = getelementptr inbounds i8, i8* %6, i64 %53
  br i1 %25, label %56, label %66

56:                                               ; preds = %66, %51
  %57 = phi i64 [ 0, %51 ], [ %78, %66 ]
  br i1 %27, label %63, label %58

58:                                               ; preds = %56
  %59 = mul i64 %57, %4
  %60 = getelementptr inbounds i8, i8* %54, i64 %59
  %61 = mul i64 %57, %7
  %62 = getelementptr inbounds i8, i8* %55, i64 %61
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %60, i64 %0, i1 false)
  br label %63

63:                                               ; preds = %58, %56, %49
  %64 = add nuw i64 %50, 1
  %65 = icmp eq i64 %64, %2
  br i1 %65, label %89, label %49

66:                                               ; preds = %51, %66
  %67 = phi i64 [ %78, %66 ], [ 0, %51 ]
  %68 = phi i64 [ %79, %66 ], [ %26, %51 ]
  %69 = mul i64 %67, %4
  %70 = getelementptr inbounds i8, i8* %54, i64 %69
  %71 = mul i64 %67, %7
  %72 = getelementptr inbounds i8, i8* %55, i64 %71
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %70, i64 %0, i1 false)
  %73 = or i64 %67, 1
  %74 = mul i64 %73, %4
  %75 = getelementptr inbounds i8, i8* %54, i64 %74
  %76 = mul i64 %73, %7
  %77 = getelementptr inbounds i8, i8* %55, i64 %76
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %75, i64 %0, i1 false)
  %78 = add nuw i64 %67, 2
  %79 = add i64 %68, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %56, label %66

81:                                               ; preds = %34, %29
  %82 = phi i64 [ 0, %29 ], [ %46, %34 ]
  %83 = icmp eq i64 %30, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %81
  %85 = mul i64 %82, %5
  %86 = getelementptr inbounds i8, i8* %3, i64 %85
  %87 = mul i64 %82, %8
  %88 = getelementptr inbounds i8, i8* %6, i64 %87
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %86, i64 %10, i1 false)
  br label %89

89:                                               ; preds = %63, %84, %81, %21, %28, %14
  ret void
}

declare void @_ZN5angle13LoadA8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIjLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

declare void @_ZN5angle16LoadRGB8ToBGR565EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadRGB565ToBGR565EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIhLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

declare void @_ZN5angle16LoadRGBA4ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm8EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 3
  %11 = lshr i64 %10, 2
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 3
  %15 = lshr i64 %14, 2
  %16 = icmp eq i64 %11, 0
  %17 = shl i64 %15, 3
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %11, 1
  %20 = sub nsw i64 %11, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %37, %13
  %23 = phi i64 [ 0, %13 ], [ %38, %37 ]
  br i1 %16, label %37, label %24

24:                                               ; preds = %22
  %25 = mul i64 %23, %5
  %26 = mul i64 %23, %8
  %27 = getelementptr inbounds i8, i8* %3, i64 %25
  %28 = getelementptr inbounds i8, i8* %6, i64 %26
  br i1 %19, label %30, label %40

29:                                               ; preds = %37, %9
  ret void

30:                                               ; preds = %40, %24
  %31 = phi i64 [ 0, %24 ], [ %52, %40 ]
  br i1 %21, label %37, label %32

32:                                               ; preds = %30
  %33 = mul i64 %31, %4
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = mul i64 %31, %7
  %36 = getelementptr inbounds i8, i8* %28, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %17, i1 false)
  br label %37

37:                                               ; preds = %32, %30, %22
  %38 = add nuw i64 %23, 1
  %39 = icmp eq i64 %38, %2
  br i1 %39, label %29, label %22

40:                                               ; preds = %24, %40
  %41 = phi i64 [ %52, %40 ], [ 0, %24 ]
  %42 = phi i64 [ %53, %40 ], [ %20, %24 ]
  %43 = mul i64 %41, %4
  %44 = getelementptr inbounds i8, i8* %27, i64 %43
  %45 = mul i64 %41, %7
  %46 = getelementptr inbounds i8, i8* %28, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %17, i1 false)
  %47 = or i64 %41, 1
  %48 = mul i64 %47, %4
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = mul i64 %47, %7
  %51 = getelementptr inbounds i8, i8* %28, i64 %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %49, i64 %17, i1 false)
  %52 = add nuw nsw i64 %41, 2
  %53 = add i64 %42, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %30, label %40
}

declare void @_ZN5angle16LoadEACR11ToR16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle15LoadEACR11ToR16EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 3
  %11 = lshr i64 %10, 2
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 3
  %15 = lshr i64 %14, 2
  %16 = icmp eq i64 %11, 0
  %17 = shl i64 %15, 4
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %11, 1
  %20 = sub nsw i64 %11, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %37, %13
  %23 = phi i64 [ 0, %13 ], [ %38, %37 ]
  br i1 %16, label %37, label %24

24:                                               ; preds = %22
  %25 = mul i64 %23, %5
  %26 = mul i64 %23, %8
  %27 = getelementptr inbounds i8, i8* %3, i64 %25
  %28 = getelementptr inbounds i8, i8* %6, i64 %26
  br i1 %19, label %30, label %40

29:                                               ; preds = %37, %9
  ret void

30:                                               ; preds = %40, %24
  %31 = phi i64 [ 0, %24 ], [ %52, %40 ]
  br i1 %21, label %37, label %32

32:                                               ; preds = %30
  %33 = mul i64 %31, %4
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = mul i64 %31, %7
  %36 = getelementptr inbounds i8, i8* %28, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %17, i1 false)
  br label %37

37:                                               ; preds = %32, %30, %22
  %38 = add nuw i64 %23, 1
  %39 = icmp eq i64 %38, %2
  br i1 %39, label %29, label %22

40:                                               ; preds = %24, %40
  %41 = phi i64 [ %52, %40 ], [ 0, %24 ]
  %42 = phi i64 [ %53, %40 ], [ %20, %24 ]
  %43 = mul i64 %41, %4
  %44 = getelementptr inbounds i8, i8* %27, i64 %43
  %45 = mul i64 %41, %7
  %46 = getelementptr inbounds i8, i8* %28, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %17, i1 false)
  %47 = or i64 %41, 1
  %48 = mul i64 %47, %4
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = mul i64 %47, %7
  %51 = getelementptr inbounds i8, i8* %28, i64 %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %49, i64 %17, i1 false)
  %52 = add nuw nsw i64 %41, 2
  %53 = add i64 %42, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %30, label %40
}

declare void @_ZN5angle18LoadEACRG11ToRG16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadEACRG11ToRG16EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadETC2RGB8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadETC2RGB8ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle21LoadETC2RGB8A1ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadETC2RGB8A1ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadETC2RGBA8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm10ELm10ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 9
  %11 = udiv i64 %10, 10
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 9
  %15 = udiv i64 %14, 10
  %16 = icmp ugt i64 %10, 9
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm10ELm5ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 9
  %15 = udiv i64 %14, 10
  %16 = icmp ugt i64 %10, 4
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm10ELm6ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 5
  %11 = udiv i64 %10, 6
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 9
  %15 = udiv i64 %14, 10
  %16 = icmp ugt i64 %10, 5
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm10ELm8ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 7
  %11 = lshr i64 %10, 3
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 9
  %15 = udiv i64 %14, 10
  %16 = icmp eq i64 %11, 0
  %17 = shl i64 %15, 4
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %11, 1
  %20 = sub nsw i64 %11, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %37, %13
  %23 = phi i64 [ 0, %13 ], [ %38, %37 ]
  br i1 %16, label %37, label %24

24:                                               ; preds = %22
  %25 = mul i64 %23, %5
  %26 = mul i64 %23, %8
  %27 = getelementptr inbounds i8, i8* %3, i64 %25
  %28 = getelementptr inbounds i8, i8* %6, i64 %26
  br i1 %19, label %30, label %40

29:                                               ; preds = %37, %9
  ret void

30:                                               ; preds = %40, %24
  %31 = phi i64 [ 0, %24 ], [ %52, %40 ]
  br i1 %21, label %37, label %32

32:                                               ; preds = %30
  %33 = mul i64 %31, %4
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = mul i64 %31, %7
  %36 = getelementptr inbounds i8, i8* %28, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %17, i1 false)
  br label %37

37:                                               ; preds = %32, %30, %22
  %38 = add nuw i64 %23, 1
  %39 = icmp eq i64 %38, %2
  br i1 %39, label %29, label %22

40:                                               ; preds = %24, %40
  %41 = phi i64 [ %52, %40 ], [ 0, %24 ]
  %42 = phi i64 [ %53, %40 ], [ %20, %24 ]
  %43 = mul i64 %41, %4
  %44 = getelementptr inbounds i8, i8* %27, i64 %43
  %45 = mul i64 %41, %7
  %46 = getelementptr inbounds i8, i8* %28, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %17, i1 false)
  %47 = or i64 %41, 1
  %48 = mul i64 %47, %4
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = mul i64 %47, %7
  %51 = getelementptr inbounds i8, i8* %28, i64 %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %49, i64 %17, i1 false)
  %52 = add nuw nsw i64 %41, 2
  %53 = add i64 %42, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %30, label %40
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm12ELm10ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 9
  %11 = udiv i64 %10, 10
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 11
  %15 = udiv i64 %14, 12
  %16 = icmp ugt i64 %10, 9
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm12ELm12ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 11
  %11 = udiv i64 %10, 12
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 11
  %15 = udiv i64 %14, 12
  %16 = icmp ugt i64 %10, 11
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm3ELm3ELm3ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 2
  %11 = udiv i64 %10, 3
  %12 = add i64 %2, 2
  %13 = udiv i64 %12, 3
  %14 = icmp ugt i64 %12, 2
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = add i64 %0, 2
  %17 = udiv i64 %16, 3
  %18 = icmp ugt i64 %10, 2
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %15, %28
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp ult i64 %29, %13
  br i1 %30, label %20, label %27

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm4ELm3ELm3ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 2
  %11 = udiv i64 %10, 3
  %12 = add i64 %2, 2
  %13 = udiv i64 %12, 3
  %14 = icmp ugt i64 %12, 2
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = add i64 %0, 3
  %17 = lshr i64 %16, 2
  %18 = icmp ugt i64 %10, 2
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %15, %28
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp ult i64 %29, %13
  br i1 %30, label %20, label %27

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm3ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 3
  %11 = lshr i64 %10, 2
  %12 = add i64 %2, 2
  %13 = udiv i64 %12, 3
  %14 = icmp ugt i64 %12, 2
  br i1 %14, label %15, label %31

15:                                               ; preds = %9
  %16 = add i64 %0, 3
  %17 = lshr i64 %16, 2
  %18 = icmp eq i64 %11, 0
  %19 = shl i64 %17, 4
  %20 = and i64 %11, 1
  %21 = icmp eq i64 %11, 1
  %22 = sub nsw i64 %11, %20
  %23 = icmp eq i64 %20, 0
  br label %24

24:                                               ; preds = %15, %39
  %25 = phi i64 [ 0, %15 ], [ %40, %39 ]
  br i1 %18, label %39, label %26

26:                                               ; preds = %24
  %27 = mul i64 %25, %5
  %28 = mul i64 %25, %8
  %29 = getelementptr inbounds i8, i8* %3, i64 %27
  %30 = getelementptr inbounds i8, i8* %6, i64 %28
  br i1 %21, label %32, label %42

31:                                               ; preds = %39, %9
  ret void

32:                                               ; preds = %42, %26
  %33 = phi i64 [ 0, %26 ], [ %54, %42 ]
  br i1 %23, label %39, label %34

34:                                               ; preds = %32
  %35 = mul i64 %33, %4
  %36 = getelementptr inbounds i8, i8* %29, i64 %35
  %37 = mul i64 %33, %7
  %38 = getelementptr inbounds i8, i8* %30, i64 %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %36, i64 %19, i1 false)
  br label %39

39:                                               ; preds = %34, %32, %24
  %40 = add nuw nsw i64 %25, 1
  %41 = icmp ult i64 %40, %13
  br i1 %41, label %24, label %31

42:                                               ; preds = %26, %42
  %43 = phi i64 [ %54, %42 ], [ 0, %26 ]
  %44 = phi i64 [ %55, %42 ], [ %22, %26 ]
  %45 = mul i64 %43, %4
  %46 = getelementptr inbounds i8, i8* %29, i64 %45
  %47 = mul i64 %43, %7
  %48 = getelementptr inbounds i8, i8* %30, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %46, i64 %19, i1 false)
  %49 = or i64 %43, 1
  %50 = mul i64 %49, %4
  %51 = getelementptr inbounds i8, i8* %29, i64 %50
  %52 = mul i64 %49, %7
  %53 = getelementptr inbounds i8, i8* %30, i64 %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %51, i64 %19, i1 false)
  %54 = add nuw nsw i64 %43, 2
  %55 = add i64 %44, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %32, label %42
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm4ELm4ELm4ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 3
  %11 = lshr i64 %10, 2
  %12 = add i64 %2, 3
  %13 = lshr i64 %12, 2
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = add i64 %0, 3
  %17 = lshr i64 %16, 2
  %18 = icmp eq i64 %11, 0
  %19 = shl i64 %17, 4
  %20 = and i64 %11, 1
  %21 = icmp eq i64 %11, 1
  %22 = sub nsw i64 %11, %20
  %23 = icmp eq i64 %20, 0
  br label %24

24:                                               ; preds = %39, %15
  %25 = phi i64 [ 0, %15 ], [ %40, %39 ]
  br i1 %18, label %39, label %26

26:                                               ; preds = %24
  %27 = mul i64 %25, %5
  %28 = mul i64 %25, %8
  %29 = getelementptr inbounds i8, i8* %3, i64 %27
  %30 = getelementptr inbounds i8, i8* %6, i64 %28
  br i1 %21, label %32, label %42

31:                                               ; preds = %39, %9
  ret void

32:                                               ; preds = %42, %26
  %33 = phi i64 [ 0, %26 ], [ %54, %42 ]
  br i1 %23, label %39, label %34

34:                                               ; preds = %32
  %35 = mul i64 %33, %4
  %36 = getelementptr inbounds i8, i8* %29, i64 %35
  %37 = mul i64 %33, %7
  %38 = getelementptr inbounds i8, i8* %30, i64 %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %36, i64 %19, i1 false)
  br label %39

39:                                               ; preds = %34, %32, %24
  %40 = add nuw nsw i64 %25, 1
  %41 = icmp eq i64 %40, %13
  br i1 %41, label %31, label %24

42:                                               ; preds = %26, %42
  %43 = phi i64 [ %54, %42 ], [ 0, %26 ]
  %44 = phi i64 [ %55, %42 ], [ %22, %26 ]
  %45 = mul i64 %43, %4
  %46 = getelementptr inbounds i8, i8* %29, i64 %45
  %47 = mul i64 %43, %7
  %48 = getelementptr inbounds i8, i8* %30, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %46, i64 %19, i1 false)
  %49 = or i64 %43, 1
  %50 = mul i64 %49, %4
  %51 = getelementptr inbounds i8, i8* %29, i64 %50
  %52 = mul i64 %49, %7
  %53 = getelementptr inbounds i8, i8* %30, i64 %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %51, i64 %19, i1 false)
  %54 = add nuw nsw i64 %43, 2
  %55 = add i64 %44, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %32, label %42
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm5ELm4ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 3
  %11 = lshr i64 %10, 2
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 4
  %15 = udiv i64 %14, 5
  %16 = icmp eq i64 %11, 0
  %17 = shl i64 %15, 4
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %11, 1
  %20 = sub nsw i64 %11, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %37, %13
  %23 = phi i64 [ 0, %13 ], [ %38, %37 ]
  br i1 %16, label %37, label %24

24:                                               ; preds = %22
  %25 = mul i64 %23, %5
  %26 = mul i64 %23, %8
  %27 = getelementptr inbounds i8, i8* %3, i64 %25
  %28 = getelementptr inbounds i8, i8* %6, i64 %26
  br i1 %19, label %30, label %40

29:                                               ; preds = %37, %9
  ret void

30:                                               ; preds = %40, %24
  %31 = phi i64 [ 0, %24 ], [ %52, %40 ]
  br i1 %21, label %37, label %32

32:                                               ; preds = %30
  %33 = mul i64 %31, %4
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = mul i64 %31, %7
  %36 = getelementptr inbounds i8, i8* %28, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %17, i1 false)
  br label %37

37:                                               ; preds = %32, %30, %22
  %38 = add nuw i64 %23, 1
  %39 = icmp eq i64 %38, %2
  br i1 %39, label %29, label %22

40:                                               ; preds = %24, %40
  %41 = phi i64 [ %52, %40 ], [ 0, %24 ]
  %42 = phi i64 [ %53, %40 ], [ %20, %24 ]
  %43 = mul i64 %41, %4
  %44 = getelementptr inbounds i8, i8* %27, i64 %43
  %45 = mul i64 %41, %7
  %46 = getelementptr inbounds i8, i8* %28, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %17, i1 false)
  %47 = or i64 %41, 1
  %48 = mul i64 %47, %4
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = mul i64 %47, %7
  %51 = getelementptr inbounds i8, i8* %28, i64 %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %49, i64 %17, i1 false)
  %52 = add nuw nsw i64 %41, 2
  %53 = add i64 %42, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %30, label %40
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm5ELm4ELm4ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 3
  %11 = lshr i64 %10, 2
  %12 = add i64 %2, 3
  %13 = lshr i64 %12, 2
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = add i64 %0, 4
  %17 = udiv i64 %16, 5
  %18 = icmp eq i64 %11, 0
  %19 = shl i64 %17, 4
  %20 = and i64 %11, 1
  %21 = icmp eq i64 %11, 1
  %22 = sub nsw i64 %11, %20
  %23 = icmp eq i64 %20, 0
  br label %24

24:                                               ; preds = %39, %15
  %25 = phi i64 [ 0, %15 ], [ %40, %39 ]
  br i1 %18, label %39, label %26

26:                                               ; preds = %24
  %27 = mul i64 %25, %5
  %28 = mul i64 %25, %8
  %29 = getelementptr inbounds i8, i8* %3, i64 %27
  %30 = getelementptr inbounds i8, i8* %6, i64 %28
  br i1 %21, label %32, label %42

31:                                               ; preds = %39, %9
  ret void

32:                                               ; preds = %42, %26
  %33 = phi i64 [ 0, %26 ], [ %54, %42 ]
  br i1 %23, label %39, label %34

34:                                               ; preds = %32
  %35 = mul i64 %33, %4
  %36 = getelementptr inbounds i8, i8* %29, i64 %35
  %37 = mul i64 %33, %7
  %38 = getelementptr inbounds i8, i8* %30, i64 %37
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %36, i64 %19, i1 false)
  br label %39

39:                                               ; preds = %34, %32, %24
  %40 = add nuw nsw i64 %25, 1
  %41 = icmp eq i64 %40, %13
  br i1 %41, label %31, label %24

42:                                               ; preds = %26, %42
  %43 = phi i64 [ %54, %42 ], [ 0, %26 ]
  %44 = phi i64 [ %55, %42 ], [ %22, %26 ]
  %45 = mul i64 %43, %4
  %46 = getelementptr inbounds i8, i8* %29, i64 %45
  %47 = mul i64 %43, %7
  %48 = getelementptr inbounds i8, i8* %30, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %46, i64 %19, i1 false)
  %49 = or i64 %43, 1
  %50 = mul i64 %49, %4
  %51 = getelementptr inbounds i8, i8* %29, i64 %50
  %52 = mul i64 %49, %7
  %53 = getelementptr inbounds i8, i8* %30, i64 %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %51, i64 %19, i1 false)
  %54 = add nuw nsw i64 %43, 2
  %55 = add i64 %44, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %32, label %42
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 4
  %15 = udiv i64 %14, 5
  %16 = icmp ugt i64 %10, 4
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm4ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = add i64 %2, 3
  %13 = lshr i64 %12, 2
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %9
  %16 = add i64 %0, 4
  %17 = udiv i64 %16, 5
  %18 = icmp ugt i64 %10, 4
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %28, %15
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp eq i64 %29, %13
  br i1 %30, label %27, label %20

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm5ELm5ELm5ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = add i64 %2, 4
  %13 = udiv i64 %12, 5
  %14 = icmp ugt i64 %12, 4
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = add i64 %0, 4
  %17 = udiv i64 %16, 5
  %18 = icmp ugt i64 %10, 4
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %15, %28
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp ult i64 %29, %13
  br i1 %30, label %20, label %27

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm6ELm5ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 5
  %15 = udiv i64 %14, 6
  %16 = icmp ugt i64 %10, 4
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm6ELm5ELm5ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = add i64 %2, 4
  %13 = udiv i64 %12, 5
  %14 = icmp ugt i64 %12, 4
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = add i64 %0, 5
  %17 = udiv i64 %16, 6
  %18 = icmp ugt i64 %10, 4
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %15, %28
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp ult i64 %29, %13
  br i1 %30, label %20, label %27

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 5
  %11 = udiv i64 %10, 6
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 5
  %15 = udiv i64 %14, 6
  %16 = icmp ugt i64 %10, 5
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm5ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 5
  %11 = udiv i64 %10, 6
  %12 = add i64 %2, 4
  %13 = udiv i64 %12, 5
  %14 = icmp ugt i64 %12, 4
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = add i64 %0, 5
  %17 = udiv i64 %16, 6
  %18 = icmp ugt i64 %10, 5
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %15, %28
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp ult i64 %29, %13
  br i1 %30, label %20, label %27

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm6ELm6ELm6ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 5
  %11 = udiv i64 %10, 6
  %12 = add i64 %2, 5
  %13 = udiv i64 %12, 6
  %14 = icmp ugt i64 %12, 5
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = add i64 %0, 5
  %17 = udiv i64 %16, 6
  %18 = icmp ugt i64 %10, 5
  %19 = shl i64 %17, 4
  br label %20

20:                                               ; preds = %15, %28
  %21 = phi i64 [ 0, %15 ], [ %29, %28 ]
  br i1 %18, label %22, label %28

22:                                               ; preds = %20
  %23 = mul i64 %21, %5
  %24 = mul i64 %21, %8
  %25 = getelementptr inbounds i8, i8* %3, i64 %23
  %26 = getelementptr inbounds i8, i8* %6, i64 %24
  br label %31

27:                                               ; preds = %28, %9
  ret void

28:                                               ; preds = %31, %20
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp ult i64 %29, %13
  br i1 %30, label %20, label %27

31:                                               ; preds = %22, %31
  %32 = phi i64 [ 0, %22 ], [ %37, %31 ]
  %33 = mul i64 %32, %4
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = mul i64 %32, %7
  %36 = getelementptr inbounds i8, i8* %26, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %19, i1 false)
  %37 = add nuw nsw i64 %32, 1
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %31, label %28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm8ELm5ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 4
  %11 = udiv i64 %10, 5
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 7
  %15 = lshr i64 %14, 3
  %16 = icmp ugt i64 %10, 4
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm8ELm6ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 5
  %11 = udiv i64 %10, 6
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 7
  %15 = lshr i64 %14, 3
  %16 = icmp ugt i64 %10, 5
  %17 = shl i64 %15, 4
  br label %18

18:                                               ; preds = %26, %13
  %19 = phi i64 [ 0, %13 ], [ %27, %26 ]
  br i1 %16, label %20, label %26

20:                                               ; preds = %18
  %21 = mul i64 %19, %5
  %22 = mul i64 %19, %8
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = getelementptr inbounds i8, i8* %6, i64 %22
  br label %29

25:                                               ; preds = %26, %9
  ret void

26:                                               ; preds = %29, %18
  %27 = add nuw i64 %19, 1
  %28 = icmp eq i64 %27, %2
  br i1 %28, label %25, label %18

29:                                               ; preds = %20, %29
  %30 = phi i64 [ 0, %20 ], [ %35, %29 ]
  %31 = mul i64 %30, %4
  %32 = getelementptr inbounds i8, i8* %23, i64 %31
  %33 = mul i64 %30, %7
  %34 = getelementptr inbounds i8, i8* %24, i64 %33
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %32, i64 %17, i1 false)
  %35 = add nuw nsw i64 %30, 1
  %36 = icmp ult i64 %35, %11
  br i1 %36, label %29, label %26
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle22LoadCompressedToNativeILm8ELm8ELm1ELm16EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = add i64 %1, 7
  %11 = lshr i64 %10, 3
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %9
  %14 = add i64 %0, 7
  %15 = lshr i64 %14, 3
  %16 = icmp eq i64 %11, 0
  %17 = shl i64 %15, 4
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %11, 1
  %20 = sub nsw i64 %11, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %37, %13
  %23 = phi i64 [ 0, %13 ], [ %38, %37 ]
  br i1 %16, label %37, label %24

24:                                               ; preds = %22
  %25 = mul i64 %23, %5
  %26 = mul i64 %23, %8
  %27 = getelementptr inbounds i8, i8* %3, i64 %25
  %28 = getelementptr inbounds i8, i8* %6, i64 %26
  br i1 %19, label %30, label %40

29:                                               ; preds = %37, %9
  ret void

30:                                               ; preds = %40, %24
  %31 = phi i64 [ 0, %24 ], [ %52, %40 ]
  br i1 %21, label %37, label %32

32:                                               ; preds = %30
  %33 = mul i64 %31, %4
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = mul i64 %31, %7
  %36 = getelementptr inbounds i8, i8* %28, i64 %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %34, i64 %17, i1 false)
  br label %37

37:                                               ; preds = %32, %30, %22
  %38 = add nuw i64 %23, 1
  %39 = icmp eq i64 %38, %2
  br i1 %39, label %29, label %22

40:                                               ; preds = %24, %40
  %41 = phi i64 [ %52, %40 ], [ 0, %24 ]
  %42 = phi i64 [ %53, %40 ], [ %20, %24 ]
  %43 = mul i64 %41, %4
  %44 = getelementptr inbounds i8, i8* %27, i64 %43
  %45 = mul i64 %41, %7
  %46 = getelementptr inbounds i8, i8* %28, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %17, i1 false)
  %47 = or i64 %41, 1
  %48 = mul i64 %47, %4
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = mul i64 %47, %7
  %51 = getelementptr inbounds i8, i8* %28, i64 %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %49, i64 %17, i1 false)
  %52 = add nuw nsw i64 %41, 2
  %53 = add i64 %42, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %30, label %40
}

declare void @_ZN5angle17LoadEACR11SToR16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle16LoadEACR11SToR16EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadEACRG11SToRG16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadEACRG11SToRG16EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle22LoadETC2SRGBA8ToSRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadETC2SRGB8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadETC2SRGB8ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle22LoadETC2SRGB8A1ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadETC2SRGB8A1ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle14LoadR32ToR24G8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadD24S8ToD32FS8X24EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadD32FS8X24ToD24S8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle24LoadD32FS8X24ToD32FS8X24EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle12LoadR32ToR16EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle16LoadD32ToD32FX32EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle14LoadD32FToD32FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle13LoadD32ToD32FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadETC1RGB8ToBC1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadETC1RGB8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN5angle12_GLOBAL__N_125UnimplementedLoadFunctionEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture, i64, i64, i8* nocapture, i64, i64) #0 {
  ret void
}

declare void @_ZN5angle17LoadL16FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadL32FToRGBA32FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle14LoadLA8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIhLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 1
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

declare void @_ZN5angle13LoadL8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadLA16FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadLA32FToRGBA32FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeItLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIfLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

declare void @_ZN5angle20LoadRGB32FToRG11B10FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadRGB16FToRG11B10FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12Load32FTo16FILm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to float*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %77, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %77
  %37 = phi i64 [ %80, %77 ], [ 0, %25 ]
  %38 = getelementptr inbounds float, float* %29, i64 %37
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = lshr i32 %40, 16
  %42 = and i32 %41, 32768
  %43 = and i32 %40, 2147483647
  %44 = icmp ugt i32 %43, 2139095040
  br i1 %44, label %77, label %45

45:                                               ; preds = %36
  %46 = icmp ugt i32 %43, 1207955455
  br i1 %46, label %47, label %50

47:                                               ; preds = %45
  %48 = trunc i32 %42 to i16
  %49 = or i16 %48, 31744
  br label %77

50:                                               ; preds = %45
  %51 = icmp ult i32 %43, 947912704
  br i1 %51, label %52, label %69

52:                                               ; preds = %50
  %53 = icmp ugt i32 %43, 754974719
  br i1 %53, label %54, label %60

54:                                               ; preds = %52
  %55 = lshr i32 %43, 23
  %56 = sub nuw nsw i32 113, %55
  %57 = and i32 %40, 8388607
  %58 = or i32 %57, 8388608
  %59 = lshr i32 %58, %56
  br label %60

60:                                               ; preds = %54, %52
  %61 = phi i32 [ %59, %54 ], [ 0, %52 ]
  %62 = add nuw i32 %61, 4095
  %63 = lshr i32 %61, 13
  %64 = and i32 %63, 1
  %65 = add nuw i32 %62, %64
  %66 = lshr i32 %65, 13
  %67 = or i32 %66, %42
  %68 = trunc i32 %67 to i16
  br label %77

69:                                               ; preds = %50
  %70 = add i32 %40, 134221823
  %71 = lshr i32 %40, 13
  %72 = and i32 %71, 1
  %73 = add i32 %70, %72
  %74 = lshr i32 %73, 13
  %75 = or i32 %74, %42
  %76 = trunc i32 %75 to i16
  br label %77

77:                                               ; preds = %36, %47, %60, %69
  %78 = phi i16 [ %49, %47 ], [ %68, %60 ], [ %76, %69 ], [ 32767, %36 ]
  %79 = getelementptr inbounds i16, i16* %32, i64 %37
  store i16 %78, i16* %79, align 2
  %80 = add nuw i64 %37, 1
  %81 = icmp eq i64 %80, %0
  br i1 %81, label %33, label %36
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIsLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 1
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIiLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIaLm1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %1, %0
  %11 = icmp eq i64 %10, %5
  %12 = icmp eq i64 %10, %8
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %15, i1 false)
  br label %89

16:                                               ; preds = %9
  %17 = icmp eq i64 %0, %4
  %18 = icmp eq i64 %0, %7
  %19 = and i1 %17, %18
  %20 = icmp ne i64 %2, 0
  br i1 %19, label %28, label %21

21:                                               ; preds = %16
  br i1 %20, label %22, label %89

22:                                               ; preds = %21
  %23 = icmp eq i64 %1, 0
  %24 = and i64 %1, 1
  %25 = icmp eq i64 %1, 1
  %26 = sub i64 %1, %24
  %27 = icmp eq i64 %24, 0
  br label %49

28:                                               ; preds = %16
  br i1 %20, label %29, label %89

29:                                               ; preds = %28
  %30 = and i64 %2, 1
  %31 = icmp eq i64 %2, 1
  br i1 %31, label %81, label %32

32:                                               ; preds = %29
  %33 = sub i64 %2, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %46, %34 ]
  %36 = phi i64 [ %33, %32 ], [ %47, %34 ]
  %37 = mul i64 %35, %5
  %38 = getelementptr inbounds i8, i8* %3, i64 %37
  %39 = mul i64 %35, %8
  %40 = getelementptr inbounds i8, i8* %6, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %38, i64 %10, i1 false)
  %41 = or i64 %35, 1
  %42 = mul i64 %41, %5
  %43 = getelementptr inbounds i8, i8* %3, i64 %42
  %44 = mul i64 %41, %8
  %45 = getelementptr inbounds i8, i8* %6, i64 %44
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %43, i64 %10, i1 false)
  %46 = add nuw i64 %35, 2
  %47 = add i64 %36, -2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %81, label %34

49:                                               ; preds = %63, %22
  %50 = phi i64 [ 0, %22 ], [ %64, %63 ]
  br i1 %23, label %63, label %51

51:                                               ; preds = %49
  %52 = mul i64 %50, %5
  %53 = mul i64 %50, %8
  %54 = getelementptr inbounds i8, i8* %3, i64 %52
  %55 = getelementptr inbounds i8, i8* %6, i64 %53
  br i1 %25, label %56, label %66

56:                                               ; preds = %66, %51
  %57 = phi i64 [ 0, %51 ], [ %78, %66 ]
  br i1 %27, label %63, label %58

58:                                               ; preds = %56
  %59 = mul i64 %57, %4
  %60 = getelementptr inbounds i8, i8* %54, i64 %59
  %61 = mul i64 %57, %7
  %62 = getelementptr inbounds i8, i8* %55, i64 %61
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %60, i64 %0, i1 false)
  br label %63

63:                                               ; preds = %58, %56, %49
  %64 = add nuw i64 %50, 1
  %65 = icmp eq i64 %64, %2
  br i1 %65, label %89, label %49

66:                                               ; preds = %51, %66
  %67 = phi i64 [ %78, %66 ], [ 0, %51 ]
  %68 = phi i64 [ %79, %66 ], [ %26, %51 ]
  %69 = mul i64 %67, %4
  %70 = getelementptr inbounds i8, i8* %54, i64 %69
  %71 = mul i64 %67, %7
  %72 = getelementptr inbounds i8, i8* %55, i64 %71
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %70, i64 %0, i1 false)
  %73 = or i64 %67, 1
  %74 = mul i64 %73, %4
  %75 = getelementptr inbounds i8, i8* %54, i64 %74
  %76 = mul i64 %73, %7
  %77 = getelementptr inbounds i8, i8* %55, i64 %76
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %75, i64 %0, i1 false)
  %78 = add nuw i64 %67, 2
  %79 = add i64 %68, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %56, label %66

81:                                               ; preds = %34, %29
  %82 = phi i64 [ 0, %29 ], [ %46, %34 ]
  %83 = icmp eq i64 %30, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %81
  %85 = mul i64 %82, %5
  %86 = getelementptr inbounds i8, i8* %3, i64 %85
  %87 = mul i64 %82, %8
  %88 = getelementptr inbounds i8, i8* %6, i64 %87
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %86, i64 %10, i1 false)
  br label %89

89:                                               ; preds = %63, %84, %81, %21, %28, %14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12Load32FTo16FILm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 1
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %9
  %13 = icmp eq i64 %1, 0
  %14 = icmp eq i64 %10, 0
  br label %15

15:                                               ; preds = %23, %12
  %16 = phi i64 [ 0, %12 ], [ %24, %23 ]
  br i1 %13, label %23, label %17

17:                                               ; preds = %15
  %18 = mul i64 %16, %5
  %19 = mul i64 %16, %8
  %20 = getelementptr inbounds i8, i8* %3, i64 %18
  %21 = getelementptr inbounds i8, i8* %6, i64 %19
  br label %26

22:                                               ; preds = %23, %9
  ret void

23:                                               ; preds = %34, %15
  %24 = add nuw i64 %16, 1
  %25 = icmp eq i64 %24, %2
  br i1 %25, label %22, label %15

26:                                               ; preds = %34, %17
  %27 = phi i64 [ 0, %17 ], [ %35, %34 ]
  %28 = mul i64 %27, %4
  %29 = getelementptr inbounds i8, i8* %20, i64 %28
  %30 = bitcast i8* %29 to float*
  %31 = mul i64 %27, %7
  %32 = getelementptr inbounds i8, i8* %21, i64 %31
  %33 = bitcast i8* %32 to i16*
  br i1 %14, label %34, label %37

34:                                               ; preds = %78, %26
  %35 = add nuw i64 %27, 1
  %36 = icmp eq i64 %35, %1
  br i1 %36, label %23, label %26

37:                                               ; preds = %26, %78
  %38 = phi i64 [ %81, %78 ], [ 0, %26 ]
  %39 = getelementptr inbounds float, float* %30, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 32768
  %44 = and i32 %41, 2147483647
  %45 = icmp ugt i32 %44, 2139095040
  br i1 %45, label %78, label %46

46:                                               ; preds = %37
  %47 = icmp ugt i32 %44, 1207955455
  br i1 %47, label %48, label %51

48:                                               ; preds = %46
  %49 = trunc i32 %43 to i16
  %50 = or i16 %49, 31744
  br label %78

51:                                               ; preds = %46
  %52 = icmp ult i32 %44, 947912704
  br i1 %52, label %53, label %70

53:                                               ; preds = %51
  %54 = icmp ugt i32 %44, 754974719
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = lshr i32 %44, 23
  %57 = sub nuw nsw i32 113, %56
  %58 = and i32 %41, 8388607
  %59 = or i32 %58, 8388608
  %60 = lshr i32 %59, %57
  br label %61

61:                                               ; preds = %55, %53
  %62 = phi i32 [ %60, %55 ], [ 0, %53 ]
  %63 = add nuw i32 %62, 4095
  %64 = lshr i32 %62, 13
  %65 = and i32 %64, 1
  %66 = add nuw i32 %63, %65
  %67 = lshr i32 %66, 13
  %68 = or i32 %67, %43
  %69 = trunc i32 %68 to i16
  br label %78

70:                                               ; preds = %51
  %71 = add i32 %41, 134221823
  %72 = lshr i32 %41, 13
  %73 = and i32 %72, 1
  %74 = add i32 %71, %73
  %75 = lshr i32 %74, 13
  %76 = or i32 %75, %43
  %77 = trunc i32 %76 to i16
  br label %78

78:                                               ; preds = %37, %48, %61, %70
  %79 = phi i16 [ %50, %48 ], [ %69, %61 ], [ %77, %70 ], [ 32767, %37 ]
  %80 = getelementptr inbounds i16, i16* %33, i64 %38
  store i16 %79, i16* %80, align 2
  %81 = add nuw i64 %38, 1
  %82 = icmp eq i64 %81, %10
  br i1 %82, label %34, label %37
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIsLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIiLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIjLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIaLm2EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 1
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

declare void @_ZN5angle18LoadRGB10A2ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle20LoadRGB10A2ToRGB10X2EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadRGB32FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4ItLj15360EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i16*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i16*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i16, i16* %35, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = bitcast i16* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %44, i64 6, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  store i16 15360, i16* %46, align 2
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i16, i16* %35, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i16, i16* %32, i64 %56
  %58 = bitcast i16* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 2 %58, i64 6, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i16, i16* %35, i64 %59
  store i16 15360, i16* %60, align 2
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i16, i16* %35, i64 %62
  %64 = bitcast i16* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i16, i16* %32, i64 %65
  %67 = bitcast i16* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 2 %67, i64 6, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i16, i16* %35, i64 %68
  store i16 15360, i16* %69, align 2
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

declare void @_ZN5angle18LoadRGB32FToRGB16FEmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeItLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 6
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IsLj1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i16*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i16*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i16, i16* %35, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = bitcast i16* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %44, i64 6, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  store i16 1, i16* %46, align 2
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i16, i16* %35, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i16, i16* %32, i64 %56
  %58 = bitcast i16* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 2 %58, i64 6, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i16, i16* %35, i64 %59
  store i16 1, i16* %60, align 2
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i16, i16* %35, i64 %62
  %64 = bitcast i16* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i16, i16* %32, i64 %65
  %67 = bitcast i16* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 2 %67, i64 6, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i16, i16* %35, i64 %68
  store i16 1, i16* %69, align 2
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIsLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 6
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4ItLj1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i16*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i16*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i16, i16* %35, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = bitcast i16* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %44, i64 6, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  store i16 1, i16* %46, align 2
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i16, i16* %35, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i16, i16* %32, i64 %56
  %58 = bitcast i16* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 2 %58, i64 6, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i16, i16* %35, i64 %59
  store i16 1, i16* %60, align 2
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i16, i16* %35, i64 %62
  %64 = bitcast i16* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i16, i16* %32, i64 %65
  %67 = bitcast i16* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 2 %67, i64 6, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i16, i16* %35, i64 %68
  store i16 1, i16* %69, align 2
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4ItLj65535EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i16*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i16*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i16, i16* %35, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = bitcast i16* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %44, i64 6, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  store i16 -1, i16* %46, align 2
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i16, i16* %35, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i16, i16* %32, i64 %56
  %58 = bitcast i16* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 2 %58, i64 6, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i16, i16* %35, i64 %59
  store i16 -1, i16* %60, align 2
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i16, i16* %35, i64 %62
  %64 = bitcast i16* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i16, i16* %32, i64 %65
  %67 = bitcast i16* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 2 %67, i64 6, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i16, i16* %35, i64 %68
  store i16 -1, i16* %69, align 2
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4ItLj32767EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i16*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i16*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i16, i16* %35, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i16, i16* %32, i64 %42
  %44 = bitcast i16* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %44, i64 6, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  store i16 32767, i16* %46, align 2
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i16, i16* %35, i64 %53
  %55 = bitcast i16* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i16, i16* %32, i64 %56
  %58 = bitcast i16* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %55, i8* align 2 %58, i64 6, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i16, i16* %35, i64 %59
  store i16 32767, i16* %60, align 2
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i16, i16* %35, i64 %62
  %64 = bitcast i16* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i16, i16* %32, i64 %65
  %67 = bitcast i16* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 2 %67, i64 6, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i16, i16* %35, i64 %68
  store i16 32767, i16* %69, align 2
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IfLj1065353216EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to float*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to float*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds float, float* %35, i64 %39
  %41 = bitcast float* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds float, float* %32, i64 %42
  %44 = bitcast float* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %44, i64 12, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds float, float* %35, i64 %45
  store float 1.000000e+00, float* %46, align 4
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds float, float* %35, i64 %53
  %55 = bitcast float* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds float, float* %32, i64 %56
  %58 = bitcast float* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %58, i64 12, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds float, float* %35, i64 %59
  store float 1.000000e+00, float* %60, align 4
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds float, float* %35, i64 %62
  %64 = bitcast float* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds float, float* %32, i64 %65
  %67 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %67, i64 12, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds float, float* %35, i64 %68
  store float 1.000000e+00, float* %69, align 4
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIfLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 12
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IiLj1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i32*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i32*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i32, i32* %35, i64 %39
  %41 = bitcast i32* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i32, i32* %32, i64 %42
  %44 = bitcast i32* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %44, i64 12, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i32, i32* %35, i64 %45
  store i32 1, i32* %46, align 4
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i32, i32* %35, i64 %53
  %55 = bitcast i32* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i32, i32* %32, i64 %56
  %58 = bitcast i32* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %58, i64 12, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i32, i32* %35, i64 %59
  store i32 1, i32* %60, align 4
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i32, i32* %35, i64 %62
  %64 = bitcast i32* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i32, i32* %32, i64 %65
  %67 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %67, i64 12, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i32, i32* %35, i64 %68
  store i32 1, i32* %69, align 4
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIiLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 12
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IjLj1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i32*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to i32*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds i32, i32* %35, i64 %39
  %41 = bitcast i32* %40 to i8*
  %42 = mul i64 %37, 3
  %43 = getelementptr inbounds i32, i32* %32, i64 %42
  %44 = bitcast i32* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %44, i64 12, i1 false)
  %45 = or i64 %39, 3
  %46 = getelementptr inbounds i32, i32* %35, i64 %45
  store i32 1, i32* %46, align 4
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 2
  %54 = getelementptr inbounds i32, i32* %35, i64 %53
  %55 = bitcast i32* %54 to i8*
  %56 = mul i64 %51, 3
  %57 = getelementptr inbounds i32, i32* %32, i64 %56
  %58 = bitcast i32* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %58, i64 12, i1 false)
  %59 = or i64 %53, 3
  %60 = getelementptr inbounds i32, i32* %35, i64 %59
  store i32 1, i32* %60, align 4
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 2
  %63 = getelementptr inbounds i32, i32* %35, i64 %62
  %64 = bitcast i32* %63 to i8*
  %65 = mul i64 %61, 3
  %66 = getelementptr inbounds i32, i32* %32, i64 %65
  %67 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %67, i64 12, i1 false)
  %68 = or i64 %62, 3
  %69 = getelementptr inbounds i32, i32* %35, i64 %68
  store i32 1, i32* %69, align 4
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIjLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 12
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IhLj255EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %43, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %43, %19
  %29 = phi i64 [ 0, %19 ], [ %44, %43 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = mul i64 %29, %7
  %33 = getelementptr inbounds i8, i8* %23, i64 %32
  switch i64 %0, label %46 [
    i64 0, label %43
    i64 1, label %34
  ]

34:                                               ; preds = %46, %28
  %35 = phi i64 [ 0, %28 ], [ %62, %46 ]
  br i1 %16, label %43, label %36

36:                                               ; preds = %34
  %37 = shl i64 %35, 2
  %38 = getelementptr inbounds i8, i8* %33, i64 %37
  %39 = mul i64 %35, 3
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %40, i64 3, i1 false)
  %41 = or i64 %37, 3
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8 -1, i8* %42, align 1
  br label %43

43:                                               ; preds = %36, %34, %28
  %44 = add nuw i64 %29, 1
  %45 = icmp eq i64 %44, %1
  br i1 %45, label %25, label %28

46:                                               ; preds = %28, %46
  %47 = phi i64 [ %62, %46 ], [ 0, %28 ]
  %48 = phi i64 [ %63, %46 ], [ %15, %28 ]
  %49 = shl i64 %47, 2
  %50 = getelementptr inbounds i8, i8* %33, i64 %49
  %51 = mul i64 %47, 3
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %52, i64 3, i1 false)
  %53 = or i64 %49, 3
  %54 = getelementptr inbounds i8, i8* %33, i64 %53
  store i8 -1, i8* %54, align 1
  %55 = or i64 %47, 1
  %56 = shl i64 %55, 2
  %57 = getelementptr inbounds i8, i8* %33, i64 %56
  %58 = mul i64 %55, 3
  %59 = getelementptr inbounds i8, i8* %31, i64 %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %59, i64 3, i1 false)
  %60 = or i64 %56, 3
  %61 = getelementptr inbounds i8, i8* %33, i64 %60
  store i8 -1, i8* %61, align 1
  %62 = add nuw i64 %47, 2
  %63 = add i64 %48, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %34, label %46
}

declare void @_ZN5angle17LoadR5G6B5ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadRGBA8ToBGR5A1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadRGB10A2ToBGR5A1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadRGB5A1ToA1RGB5EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle17LoadRGBA8ToRGB5A1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle19LoadRGB10A2ToRGB5A1EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIaLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IaLj1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %43, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %43, %19
  %29 = phi i64 [ 0, %19 ], [ %44, %43 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = mul i64 %29, %7
  %33 = getelementptr inbounds i8, i8* %23, i64 %32
  switch i64 %0, label %46 [
    i64 0, label %43
    i64 1, label %34
  ]

34:                                               ; preds = %46, %28
  %35 = phi i64 [ 0, %28 ], [ %62, %46 ]
  br i1 %16, label %43, label %36

36:                                               ; preds = %34
  %37 = shl i64 %35, 2
  %38 = getelementptr inbounds i8, i8* %33, i64 %37
  %39 = mul i64 %35, 3
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %40, i64 3, i1 false)
  %41 = or i64 %37, 3
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8 1, i8* %42, align 1
  br label %43

43:                                               ; preds = %36, %34, %28
  %44 = add nuw i64 %29, 1
  %45 = icmp eq i64 %44, %1
  br i1 %45, label %25, label %28

46:                                               ; preds = %28, %46
  %47 = phi i64 [ %62, %46 ], [ 0, %28 ]
  %48 = phi i64 [ %63, %46 ], [ %15, %28 ]
  %49 = shl i64 %47, 2
  %50 = getelementptr inbounds i8, i8* %33, i64 %49
  %51 = mul i64 %47, 3
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %52, i64 3, i1 false)
  %53 = or i64 %49, 3
  %54 = getelementptr inbounds i8, i8* %33, i64 %53
  store i8 1, i8* %54, align 1
  %55 = or i64 %47, 1
  %56 = shl i64 %55, 2
  %57 = getelementptr inbounds i8, i8* %33, i64 %56
  %58 = mul i64 %55, 3
  %59 = getelementptr inbounds i8, i8* %31, i64 %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %59, i64 3, i1 false)
  %60 = or i64 %56, 3
  %61 = getelementptr inbounds i8, i8* %33, i64 %60
  store i8 1, i8* %61, align 1
  %62 = add nuw i64 %47, 2
  %63 = add i64 %48, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %34, label %46
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IhLj1EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %43, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %43, %19
  %29 = phi i64 [ 0, %19 ], [ %44, %43 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = mul i64 %29, %7
  %33 = getelementptr inbounds i8, i8* %23, i64 %32
  switch i64 %0, label %46 [
    i64 0, label %43
    i64 1, label %34
  ]

34:                                               ; preds = %46, %28
  %35 = phi i64 [ 0, %28 ], [ %62, %46 ]
  br i1 %16, label %43, label %36

36:                                               ; preds = %34
  %37 = shl i64 %35, 2
  %38 = getelementptr inbounds i8, i8* %33, i64 %37
  %39 = mul i64 %35, 3
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %40, i64 3, i1 false)
  %41 = or i64 %37, 3
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8 1, i8* %42, align 1
  br label %43

43:                                               ; preds = %36, %34, %28
  %44 = add nuw i64 %29, 1
  %45 = icmp eq i64 %44, %1
  br i1 %45, label %25, label %28

46:                                               ; preds = %28, %46
  %47 = phi i64 [ %62, %46 ], [ 0, %28 ]
  %48 = phi i64 [ %63, %46 ], [ %15, %28 ]
  %49 = shl i64 %47, 2
  %50 = getelementptr inbounds i8, i8* %33, i64 %49
  %51 = mul i64 %47, 3
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %52, i64 3, i1 false)
  %53 = or i64 %49, 3
  %54 = getelementptr inbounds i8, i8* %33, i64 %53
  store i8 1, i8* %54, align 1
  %55 = or i64 %47, 1
  %56 = shl i64 %55, 2
  %57 = getelementptr inbounds i8, i8* %33, i64 %56
  %58 = mul i64 %55, 3
  %59 = getelementptr inbounds i8, i8* %31, i64 %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %59, i64 3, i1 false)
  %60 = or i64 %56, 3
  %61 = getelementptr inbounds i8, i8* %33, i64 %60
  store i8 1, i8* %61, align 1
  %62 = add nuw i64 %47, 2
  %63 = add i64 %48, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %34, label %46
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIhLm3EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = mul i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle16LoadToNative3To4IaLj127EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %43, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %43, %19
  %29 = phi i64 [ 0, %19 ], [ %44, %43 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = mul i64 %29, %7
  %33 = getelementptr inbounds i8, i8* %23, i64 %32
  switch i64 %0, label %46 [
    i64 0, label %43
    i64 1, label %34
  ]

34:                                               ; preds = %46, %28
  %35 = phi i64 [ 0, %28 ], [ %62, %46 ]
  br i1 %16, label %43, label %36

36:                                               ; preds = %34
  %37 = shl i64 %35, 2
  %38 = getelementptr inbounds i8, i8* %33, i64 %37
  %39 = mul i64 %35, 3
  %40 = getelementptr inbounds i8, i8* %31, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %40, i64 3, i1 false)
  %41 = or i64 %37, 3
  %42 = getelementptr inbounds i8, i8* %33, i64 %41
  store i8 127, i8* %42, align 1
  br label %43

43:                                               ; preds = %36, %34, %28
  %44 = add nuw i64 %29, 1
  %45 = icmp eq i64 %44, %1
  br i1 %45, label %25, label %28

46:                                               ; preds = %28, %46
  %47 = phi i64 [ %62, %46 ], [ 0, %28 ]
  %48 = phi i64 [ %63, %46 ], [ %15, %28 ]
  %49 = shl i64 %47, 2
  %50 = getelementptr inbounds i8, i8* %33, i64 %49
  %51 = mul i64 %47, 3
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %52, i64 3, i1 false)
  %53 = or i64 %49, 3
  %54 = getelementptr inbounds i8, i8* %33, i64 %53
  store i8 127, i8* %54, align 1
  %55 = or i64 %47, 1
  %56 = shl i64 %55, 2
  %57 = getelementptr inbounds i8, i8* %33, i64 %56
  %58 = mul i64 %55, 3
  %59 = getelementptr inbounds i8, i8* %31, i64 %58
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %59, i64 3, i1 false)
  %60 = or i64 %56, 3
  %61 = getelementptr inbounds i8, i8* %33, i64 %60
  store i8 127, i8* %61, align 1
  %62 = add nuw i64 %47, 2
  %63 = add i64 %48, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %34, label %46
}

declare void @_ZN5angle18LoadRGB32FToRGB9E5EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle18LoadRGB16FToRGB9E5EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12Load32FTo16FILm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %9
  %13 = icmp eq i64 %1, 0
  %14 = icmp eq i64 %10, 0
  br label %15

15:                                               ; preds = %23, %12
  %16 = phi i64 [ 0, %12 ], [ %24, %23 ]
  br i1 %13, label %23, label %17

17:                                               ; preds = %15
  %18 = mul i64 %16, %5
  %19 = mul i64 %16, %8
  %20 = getelementptr inbounds i8, i8* %3, i64 %18
  %21 = getelementptr inbounds i8, i8* %6, i64 %19
  br label %26

22:                                               ; preds = %23, %9
  ret void

23:                                               ; preds = %34, %15
  %24 = add nuw i64 %16, 1
  %25 = icmp eq i64 %24, %2
  br i1 %25, label %22, label %15

26:                                               ; preds = %34, %17
  %27 = phi i64 [ 0, %17 ], [ %35, %34 ]
  %28 = mul i64 %27, %4
  %29 = getelementptr inbounds i8, i8* %20, i64 %28
  %30 = bitcast i8* %29 to float*
  %31 = mul i64 %27, %7
  %32 = getelementptr inbounds i8, i8* %21, i64 %31
  %33 = bitcast i8* %32 to i16*
  br i1 %14, label %34, label %37

34:                                               ; preds = %78, %26
  %35 = add nuw i64 %27, 1
  %36 = icmp eq i64 %35, %1
  br i1 %36, label %23, label %26

37:                                               ; preds = %26, %78
  %38 = phi i64 [ %81, %78 ], [ 0, %26 ]
  %39 = getelementptr inbounds float, float* %30, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 32768
  %44 = and i32 %41, 2147483647
  %45 = icmp ugt i32 %44, 2139095040
  br i1 %45, label %78, label %46

46:                                               ; preds = %37
  %47 = icmp ugt i32 %44, 1207955455
  br i1 %47, label %48, label %51

48:                                               ; preds = %46
  %49 = trunc i32 %43 to i16
  %50 = or i16 %49, 31744
  br label %78

51:                                               ; preds = %46
  %52 = icmp ult i32 %44, 947912704
  br i1 %52, label %53, label %70

53:                                               ; preds = %51
  %54 = icmp ugt i32 %44, 754974719
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = lshr i32 %44, 23
  %57 = sub nuw nsw i32 113, %56
  %58 = and i32 %41, 8388607
  %59 = or i32 %58, 8388608
  %60 = lshr i32 %59, %57
  br label %61

61:                                               ; preds = %55, %53
  %62 = phi i32 [ %60, %55 ], [ 0, %53 ]
  %63 = add nuw i32 %62, 4095
  %64 = lshr i32 %62, 13
  %65 = and i32 %64, 1
  %66 = add nuw i32 %63, %65
  %67 = lshr i32 %66, 13
  %68 = or i32 %67, %43
  %69 = trunc i32 %68 to i16
  br label %78

70:                                               ; preds = %51
  %71 = add i32 %41, 134221823
  %72 = lshr i32 %41, 13
  %73 = and i32 %72, 1
  %74 = add i32 %71, %73
  %75 = lshr i32 %74, 13
  %76 = or i32 %75, %43
  %77 = trunc i32 %76 to i16
  br label %78

78:                                               ; preds = %37, %48, %61, %70
  %79 = phi i16 [ %50, %48 ], [ %69, %61 ], [ %77, %70 ], [ 32767, %37 ]
  %80 = getelementptr inbounds i16, i16* %33, i64 %38
  store i16 %79, i16* %80, align 2
  %81 = add nuw i64 %38, 1
  %82 = icmp eq i64 %81, %10
  br i1 %82, label %34, label %37
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeItLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIsLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 3
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %46, i8* align 2 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %63, i8* align 2 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIfLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 4
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIiLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 4
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIjLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 4
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

declare void @_ZN5angle16LoadRGBA8ToBGRA4EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle16LoadRGBA4ToARGB4EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

declare void @_ZN5angle16LoadRGBA8ToRGBA4EmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle12LoadToNativeIaLm4EEEvmmmPKhmmPhmm(i64, i64, i64, i8*, i64, i64, i8*, i64, i64) #2 comdat {
  %10 = shl i64 %0, 2
  %11 = mul i64 %10, %1
  %12 = icmp eq i64 %11, %5
  %13 = icmp eq i64 %11, %8
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = mul i64 %8, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %3, i64 %16, i1 false)
  br label %90

17:                                               ; preds = %9
  %18 = icmp eq i64 %10, %4
  %19 = icmp eq i64 %10, %7
  %20 = and i1 %18, %19
  %21 = icmp ne i64 %2, 0
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  br i1 %21, label %23, label %90

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = and i64 %1, 1
  %26 = icmp eq i64 %1, 1
  %27 = sub i64 %1, %25
  %28 = icmp eq i64 %25, 0
  br label %50

29:                                               ; preds = %17
  br i1 %21, label %30, label %90

30:                                               ; preds = %29
  %31 = and i64 %2, 1
  %32 = icmp eq i64 %2, 1
  br i1 %32, label %82, label %33

33:                                               ; preds = %30
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %47, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %48, %35 ]
  %38 = mul i64 %36, %5
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = mul i64 %36, %8
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %39, i64 %11, i1 false)
  %42 = or i64 %36, 1
  %43 = mul i64 %42, %5
  %44 = getelementptr inbounds i8, i8* %3, i64 %43
  %45 = mul i64 %42, %8
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %44, i64 %11, i1 false)
  %47 = add nuw i64 %36, 2
  %48 = add i64 %37, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %82, label %35

50:                                               ; preds = %64, %23
  %51 = phi i64 [ 0, %23 ], [ %65, %64 ]
  br i1 %24, label %64, label %52

52:                                               ; preds = %50
  %53 = mul i64 %51, %5
  %54 = mul i64 %51, %8
  %55 = getelementptr inbounds i8, i8* %3, i64 %53
  %56 = getelementptr inbounds i8, i8* %6, i64 %54
  br i1 %26, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi i64 [ 0, %52 ], [ %79, %67 ]
  br i1 %28, label %64, label %59

59:                                               ; preds = %57
  %60 = mul i64 %58, %4
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = mul i64 %58, %7
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %61, i64 %10, i1 false)
  br label %64

64:                                               ; preds = %59, %57, %50
  %65 = add nuw i64 %51, 1
  %66 = icmp eq i64 %65, %2
  br i1 %66, label %90, label %50

67:                                               ; preds = %52, %67
  %68 = phi i64 [ %79, %67 ], [ 0, %52 ]
  %69 = phi i64 [ %80, %67 ], [ %27, %52 ]
  %70 = mul i64 %68, %4
  %71 = getelementptr inbounds i8, i8* %55, i64 %70
  %72 = mul i64 %68, %7
  %73 = getelementptr inbounds i8, i8* %56, i64 %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %71, i64 %10, i1 false)
  %74 = or i64 %68, 1
  %75 = mul i64 %74, %4
  %76 = getelementptr inbounds i8, i8* %55, i64 %75
  %77 = mul i64 %74, %7
  %78 = getelementptr inbounds i8, i8* %56, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %10, i1 false)
  %79 = add nuw i64 %68, 2
  %80 = add i64 %69, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %57, label %67

82:                                               ; preds = %35, %30
  %83 = phi i64 [ 0, %30 ], [ %47, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = mul i64 %83, %5
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = mul i64 %83, %8
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %87, i64 %11, i1 false)
  br label %90

90:                                               ; preds = %64, %85, %82, %22, %29, %15
  ret void
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
