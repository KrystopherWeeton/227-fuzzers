; ModuleID = '../../third_party/pdfium/xfa/fgas/graphics/cfgas_geshading.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/graphics/cfgas_geshading.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_GEShading = type { i32, %class.CFX_PTemplate, %class.CFX_PTemplate, float, float, i8, i8, [256 x i32] }
%class.CFX_PTemplate = type { float, float }

@_ZN15CFGAS_GEShadingC1ERK13CFX_PTemplateIfES3_bbjj = hidden unnamed_addr alias void (%class.CFGAS_GEShading*, %class.CFX_PTemplate*, %class.CFX_PTemplate*, i1, i1, i32, i32), void (%class.CFGAS_GEShading*, %class.CFX_PTemplate*, %class.CFX_PTemplate*, i1, i1, i32, i32)* @_ZN15CFGAS_GEShadingC2ERK13CFX_PTemplateIfES3_bbjj
@_ZN15CFGAS_GEShadingC1ERK13CFX_PTemplateIfES3_ffbbjj = hidden unnamed_addr alias void (%class.CFGAS_GEShading*, %class.CFX_PTemplate*, %class.CFX_PTemplate*, float, float, i1, i1, i32, i32), void (%class.CFGAS_GEShading*, %class.CFX_PTemplate*, %class.CFX_PTemplate*, float, float, i1, i1, i32, i32)* @_ZN15CFGAS_GEShadingC2ERK13CFX_PTemplateIfES3_ffbbjj
@_ZN15CFGAS_GEShadingD1Ev = hidden unnamed_addr alias void (%class.CFGAS_GEShading*), void (%class.CFGAS_GEShading*)* @_ZN15CFGAS_GEShadingD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFGAS_GEShadingC2ERK13CFX_PTemplateIfES3_bbjj(%class.CFGAS_GEShading* nocapture, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_PTemplate* nocapture readonly dereferenceable(8), i1 zeroext, i1 zeroext, i32, i32) unnamed_addr #0 align 2 {
  %8 = zext i1 %3 to i8
  %9 = zext i1 %4 to i8
  %10 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 0
  store i32 1, i32* %10, align 4
  %11 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 1
  %12 = bitcast %class.CFX_PTemplate* %1 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = bitcast %class.CFX_PTemplate* %11 to i32*
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 1, i32 1
  %16 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = bitcast float* %15 to i32*
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 2
  %21 = bitcast %class.CFX_PTemplate* %2 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast %class.CFX_PTemplate* %20 to i32*
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 2, i32 1
  %25 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 1
  %26 = bitcast float* %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = bitcast float* %24 to i32*
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 3
  store float 0.000000e+00, float* %29, align 4
  %30 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 4
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 5
  store i8 %8, i8* %31, align 4
  %32 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 6
  store i8 %9, i8* %32, align 1
  tail call void @_ZN15CFGAS_GEShading13InitArgbArrayEjj(%class.CFGAS_GEShading* %0, i32 %5, i32 %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFGAS_GEShading13InitArgbArrayEjj(%class.CFGAS_GEShading* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call { i64, i64 } @_Z10ArgbDecodej(i32 %1) #3
  %5 = extractvalue { i64, i64 } %4, 0
  %6 = trunc i64 %5 to i32
  %7 = lshr i64 %5, 32
  %8 = trunc i64 %7 to i32
  %9 = extractvalue { i64, i64 } %4, 1
  %10 = trunc i64 %9 to i32
  %11 = lshr i64 %9, 32
  %12 = trunc i64 %11 to i32
  %13 = tail call { i64, i64 } @_Z10ArgbDecodej(i32 %2) #3
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  %18 = sub nsw i32 %17, %12
  %19 = sitofp i32 %18 to double
  %20 = fdiv double %19, 2.550000e+02
  %21 = fptrunc double %20 to float
  %22 = trunc i64 %15 to i32
  %23 = sub nsw i32 %22, %10
  %24 = sitofp i32 %23 to double
  %25 = fdiv double %24, 2.550000e+02
  %26 = fptrunc double %25 to float
  %27 = lshr i64 %14, 32
  %28 = trunc i64 %27 to i32
  %29 = sub nsw i32 %28, %8
  %30 = sitofp i32 %29 to double
  %31 = fdiv double %30, 2.550000e+02
  %32 = fptrunc double %31 to float
  %33 = trunc i64 %14 to i32
  %34 = sub nsw i32 %33, %6
  %35 = sitofp i32 %34 to double
  %36 = fdiv double %35, 2.550000e+02
  %37 = fptrunc double %36 to float
  %38 = insertelement <4 x float> undef, float %37, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %40 = insertelement <4 x float> undef, float %32, i32 0
  %41 = shufflevector <4 x float> %40, <4 x float> undef, <4 x i32> zeroinitializer
  %42 = insertelement <4 x float> undef, float %26, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = insertelement <4 x float> undef, float %21, i32 0
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <4 x i32> zeroinitializer
  %46 = insertelement <4 x i32> undef, i32 %6, i32 0
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> zeroinitializer
  %48 = insertelement <4 x i32> undef, i32 %8, i32 0
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> zeroinitializer
  %50 = insertelement <4 x i32> undef, i32 %10, i32 0
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> zeroinitializer
  %52 = insertelement <4 x i32> undef, i32 %12, i32 0
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %54

54:                                               ; preds = %54, %3
  %55 = phi i64 [ 0, %3 ], [ %78, %54 ]
  %56 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %3 ], [ %79, %54 ]
  %57 = uitofp <4 x i64> %56 to <4 x float>
  %58 = fmul <4 x float> %39, %57
  %59 = fptosi <4 x float> %58 to <4 x i32>
  %60 = fmul <4 x float> %41, %57
  %61 = fptosi <4 x float> %60 to <4 x i32>
  %62 = fmul <4 x float> %43, %57
  %63 = fptosi <4 x float> %62 to <4 x i32>
  %64 = fmul <4 x float> %45, %57
  %65 = fptosi <4 x float> %64 to <4 x i32>
  %66 = add nsw <4 x i32> %47, %59
  %67 = add nsw <4 x i32> %49, %61
  %68 = add nsw <4 x i32> %51, %63
  %69 = add nsw <4 x i32> %53, %65
  %70 = shl <4 x i32> %66, <i32 24, i32 24, i32 24, i32 24>
  %71 = shl <4 x i32> %67, <i32 16, i32 16, i32 16, i32 16>
  %72 = shl <4 x i32> %68, <i32 8, i32 8, i32 8, i32 8>
  %73 = or <4 x i32> %70, %69
  %74 = or <4 x i32> %73, %71
  %75 = or <4 x i32> %74, %72
  %76 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 7, i64 %55
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %77, align 4
  %78 = add i64 %55, 4
  %79 = add <4 x i64> %56, <i64 4, i64 4, i64 4, i64 4>
  %80 = icmp eq i64 %78, 256
  br i1 %80, label %81, label %54, !llvm.loop !2

81:                                               ; preds = %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFGAS_GEShadingC2ERK13CFX_PTemplateIfES3_ffbbjj(%class.CFGAS_GEShading* nocapture, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_PTemplate* nocapture readonly dereferenceable(8), float, float, i1 zeroext, i1 zeroext, i32, i32) unnamed_addr #0 align 2 {
  %10 = zext i1 %5 to i8
  %11 = zext i1 %6 to i8
  %12 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 0
  store i32 2, i32* %12, align 4
  %13 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 1
  %14 = bitcast %class.CFX_PTemplate* %1 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = bitcast %class.CFX_PTemplate* %13 to i32*
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 1, i32 1
  %18 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = bitcast float* %17 to i32*
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 2
  %23 = bitcast %class.CFX_PTemplate* %2 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %class.CFX_PTemplate* %22 to i32*
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 1
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = bitcast float* %26 to i32*
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 3
  store float %3, float* %31, align 4
  %32 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 4
  store float %4, float* %32, align 4
  %33 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 5
  store i8 %10, i8* %33, align 4
  %34 = getelementptr inbounds %class.CFGAS_GEShading, %class.CFGAS_GEShading* %0, i64 0, i32 6
  store i8 %11, i8* %34, align 1
  tail call void @_ZN15CFGAS_GEShading13InitArgbArrayEjj(%class.CFGAS_GEShading* %0, i32 %7, i32 %8)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN15CFGAS_GEShadingD2Ev(%class.CFGAS_GEShading* nocapture) unnamed_addr #1 align 2 {
  ret void
}

declare { i64, i64 } @_Z10ArgbDecodej(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
