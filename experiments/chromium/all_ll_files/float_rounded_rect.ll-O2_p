; ModuleID = '../../third_party/blink/renderer/platform/geometry/float_rounded_rect.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/float_rounded_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringAppend.8" = type { %"class.WTF::StringAppend.9", %"class.WTF::String" }
%"class.WTF::StringAppend.9" = type { %"class.WTF::String", i8* }
%"class.WTF::StringAppend.7" = type { %"class.WTF::StringAppend.8", i8* }
%"class.WTF::StringAppend.4" = type { %"class.WTF::StringAppend.5", %"class.WTF::String" }
%"class.WTF::StringAppend.5" = type { %"class.WTF::StringAppend.6", i8* }
%"class.WTF::StringAppend.6" = type { i8*, %"class.WTF::String" }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.1", %"class.WTF::String" }
%"class.WTF::StringAppend.1" = type { %"class.WTF::StringAppend.2", i8* }
%"class.WTF::StringAppend.2" = type { %"class.WTF::StringAppend.3", %"class.WTF::String" }
%"class.WTF::StringAppend.3" = type { %"class.WTF::StringAppend.4", i8* }
%"class.WTF::StringTypeAdapter.10" = type { %"class.WTF::StringTypeAdapter.11" }
%"class.WTF::StringTypeAdapter.11" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringTypeAdapter.13" = type <{ i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_EES4_EES3_S4_EENS1_INS1_IT_T0_EET1_EERKSC_SD_ = comdat any

$_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKSB_SC_ = comdat any

$_ZN3WTFplINS_12StringAppendINS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_S4_EENS1_INS1_IT_T0_EET1_EERKSA_SB_ = comdat any

$_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EcvS3_Ev = comdat any

$_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EcvS1_Ev = comdat any

$_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EC2ES7_S3_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EC2ES8_S2_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EC2ES9_S3_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6Is8BitEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs = comdat any

$_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs = comdat any

$_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = comdat any

$_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = comdat any

@.str = private unnamed_addr constant [4 x i8] c"tl:\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"; tr:\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"; bl:\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"; br:\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"InfiniteIntRect\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c" radii:(\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c")\00", align 1
@_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = linkonce_odr hidden local_unnamed_addr global %"class.blink::IntRect" zeroinitializer, comdat, align 4
@_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = linkonce_odr hidden global i64 0, comdat, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.7 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.8 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

@_ZN5blink16FloatRoundedRectC1Effff = hidden unnamed_addr alias void (%"class.blink::FloatRoundedRect"*, float, float, float, float), void (%"class.blink::FloatRoundedRect"*, float, float, float, float)* @_ZN5blink16FloatRoundedRectC2Effff
@_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS0_5RadiiE = hidden unnamed_addr alias void (%"class.blink::FloatRoundedRect"*, %"class.blink::FloatRect"*, %"class.blink::FloatRoundedRect::Radii"*), void (%"class.blink::FloatRoundedRect"*, %"class.blink::FloatRect"*, %"class.blink::FloatRoundedRect::Radii"*)* @_ZN5blink16FloatRoundedRectC2ERKNS_9FloatRectERKNS0_5RadiiE
@_ZN5blink16FloatRoundedRectC1ERKNS_7IntRectERKNS0_5RadiiE = hidden unnamed_addr alias void (%"class.blink::FloatRoundedRect"*, %"class.blink::IntRect"*, %"class.blink::FloatRoundedRect::Radii"*), void (%"class.blink::FloatRoundedRect"*, %"class.blink::IntRect"*, %"class.blink::FloatRoundedRect::Radii"*)* @_ZN5blink16FloatRoundedRectC2ERKNS_7IntRectERKNS0_5RadiiE
@_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_ = hidden unnamed_addr alias void (%"class.blink::FloatRoundedRect"*, %"class.blink::FloatRect"*, %"class.blink::FloatSize"*, %"class.blink::FloatSize"*, %"class.blink::FloatSize"*, %"class.blink::FloatSize"*), void (%"class.blink::FloatRoundedRect"*, %"class.blink::FloatRect"*, %"class.blink::FloatSize"*, %"class.blink::FloatSize"*, %"class.blink::FloatSize"*, %"class.blink::FloatSize"*)* @_ZN5blink16FloatRoundedRectC2ERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRectC2Effff(%"class.blink::FloatRoundedRect"* nocapture, float, float, float, float) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  store float %1, float* %6, align 4
  %7 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  store float %2, float* %7, align 4
  %8 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  store float %3, float* %8, align 4
  %9 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  store float %4, float* %9, align 4
  %10 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %11 = bitcast %"class.blink::FloatRoundedRect::Radii"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 32, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRectC2ERKNS_9FloatRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatRoundedRect::Radii"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::FloatRoundedRect"* %0 to i8*
  %5 = bitcast %"class.blink::FloatRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 16, i1 false)
  %6 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::FloatRoundedRect::Radii"* %2 to i64*
  %8 = bitcast %"class.blink::FloatRoundedRect::Radii"* %6 to i64*
  %9 = load i64, i64* %7, align 4
  store i64 %9, i64* %8, align 4
  %10 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1
  %11 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 1
  %12 = bitcast %"class.blink::FloatSize"* %11 to i64*
  %13 = bitcast %"class.blink::FloatSize"* %10 to i64*
  %14 = load i64, i64* %12, align 4
  store i64 %14, i64* %13, align 4
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2
  %16 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 2
  %17 = bitcast %"class.blink::FloatSize"* %16 to i64*
  %18 = bitcast %"class.blink::FloatSize"* %15 to i64*
  %19 = load i64, i64* %17, align 4
  store i64 %19, i64* %18, align 4
  %20 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3
  %21 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 3
  %22 = bitcast %"class.blink::FloatSize"* %21 to i64*
  %23 = bitcast %"class.blink::FloatSize"* %20 to i64*
  %24 = load i64, i64* %22, align 4
  store i64 %24, i64* %23, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRectC2ERKNS_7IntRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatRoundedRect::Radii"* nocapture readonly dereferenceable(32)) unnamed_addr #2 align 2 {
  %4 = bitcast %"class.blink::IntRect"* %1 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 4
  %6 = sitofp <4 x i32> %5 to <4 x float>
  %7 = bitcast %"class.blink::FloatRoundedRect"* %0 to <4 x float>*
  store <4 x float> %6, <4 x float>* %7, align 4
  %8 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %9 = bitcast %"class.blink::FloatRoundedRect::Radii"* %2 to i64*
  %10 = bitcast %"class.blink::FloatRoundedRect::Radii"* %8 to i64*
  %11 = load i64, i64* %9, align 4
  store i64 %11, i64* %10, align 4
  %12 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1
  %13 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 1
  %14 = bitcast %"class.blink::FloatSize"* %13 to i64*
  %15 = bitcast %"class.blink::FloatSize"* %12 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  %17 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2
  %18 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 2
  %19 = bitcast %"class.blink::FloatSize"* %18 to i64*
  %20 = bitcast %"class.blink::FloatSize"* %17 to i64*
  %21 = load i64, i64* %19, align 4
  store i64 %21, i64* %20, align 4
  %22 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3
  %23 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 3
  %24 = bitcast %"class.blink::FloatSize"* %23 to i64*
  %25 = bitcast %"class.blink::FloatSize"* %22 to i64*
  %26 = load i64, i64* %24, align 4
  store i64 %26, i64* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRectC2ERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_(%"class.blink::FloatRoundedRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %7 = bitcast %"class.blink::FloatRoundedRect"* %0 to i8*
  %8 = bitcast %"class.blink::FloatRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %10 = bitcast %"class.blink::FloatSize"* %2 to i64*
  %11 = bitcast %"class.blink::FloatRoundedRect::Radii"* %9 to i64*
  %12 = load i64, i64* %10, align 4
  store i64 %12, i64* %11, align 4
  %13 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1
  %14 = bitcast %"class.blink::FloatSize"* %3 to i64*
  %15 = bitcast %"class.blink::FloatSize"* %13 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  %17 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2
  %18 = bitcast %"class.blink::FloatSize"* %4 to i64*
  %19 = bitcast %"class.blink::FloatSize"* %17 to i64*
  %20 = load i64, i64* %18, align 4
  store i64 %20, i64* %19, align 4
  %21 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3
  %22 = bitcast %"class.blink::FloatSize"* %5 to i64*
  %23 = bitcast %"class.blink::FloatSize"* %21 to i64*
  %24 = load i64, i64* %22, align 4
  store i64 %24, i64* %23, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect5Radii5ScaleEf(%"class.blink::FloatRoundedRect::Radii"* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = fcmp oeq float %1, 1.000000e+00
  br i1 %3, label %59, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  store float %7, float* %5, align 4
  %8 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, %1
  store float %10, float* %8, align 4
  %11 = fcmp une float %7, 0.000000e+00
  %12 = fcmp une float %10, 0.000000e+00
  %13 = and i1 %11, %12
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.blink::FloatRoundedRect::Radii"* %0 to i32*
  store i32 0, i32* %15, align 4
  %16 = bitcast float* %8 to i32*
  store i32 0, i32* %16, align 4
  br label %17

17:                                               ; preds = %4, %14
  %18 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %18, i64 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %1
  store float %21, float* %19, align 4
  %22 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1, i32 1
  %23 = load float, float* %22, align 4
  %24 = fmul float %23, %1
  store float %24, float* %22, align 4
  %25 = fcmp une float %21, 0.000000e+00
  %26 = fcmp une float %24, 0.000000e+00
  %27 = and i1 %25, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.blink::FloatSize"* %18 to i32*
  store i32 0, i32* %29, align 4
  %30 = bitcast float* %22 to i32*
  store i32 0, i32* %30, align 4
  br label %31

31:                                               ; preds = %17, %28
  %32 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2
  %33 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %32, i64 0, i32 0
  %34 = load float, float* %33, align 4
  %35 = fmul float %34, %1
  store float %35, float* %33, align 4
  %36 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2, i32 1
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, %1
  store float %38, float* %36, align 4
  %39 = fcmp une float %35, 0.000000e+00
  %40 = fcmp une float %38, 0.000000e+00
  %41 = and i1 %39, %40
  br i1 %41, label %45, label %42

42:                                               ; preds = %31
  %43 = bitcast %"class.blink::FloatSize"* %32 to i32*
  store i32 0, i32* %43, align 4
  %44 = bitcast float* %36 to i32*
  store i32 0, i32* %44, align 4
  br label %45

45:                                               ; preds = %31, %42
  %46 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3
  %47 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %46, i64 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = fmul float %48, %1
  store float %49, float* %47, align 4
  %50 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3, i32 1
  %51 = load float, float* %50, align 4
  %52 = fmul float %51, %1
  store float %52, float* %50, align 4
  %53 = fcmp une float %49, 0.000000e+00
  %54 = fcmp une float %52, 0.000000e+00
  %55 = and i1 %53, %54
  br i1 %55, label %59, label %56

56:                                               ; preds = %45
  %57 = bitcast %"class.blink::FloatSize"* %46 to i32*
  store i32 0, i32* %57, align 4
  %58 = bitcast float* %50 to i32*
  store i32 0, i32* %58, align 4
  br label %59

59:                                               ; preds = %45, %2, %56
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect5Radii13ScaleAndFloorEf(%"class.blink::FloatRoundedRect::Radii"* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = fcmp oeq float %1, 1.000000e+00
  br i1 %3, label %67, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  %8 = tail call float @llvm.floor.f32(float %7) #12
  store float %8, float* %5, align 4
  %9 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, %1
  %12 = tail call float @llvm.floor.f32(float %11) #12
  store float %12, float* %9, align 4
  %13 = fcmp une float %8, 0.000000e+00
  %14 = fcmp une float %12, 0.000000e+00
  %15 = and i1 %13, %14
  br i1 %15, label %19, label %16

16:                                               ; preds = %4
  %17 = bitcast %"class.blink::FloatRoundedRect::Radii"* %0 to i32*
  store i32 0, i32* %17, align 4
  %18 = bitcast float* %9 to i32*
  store i32 0, i32* %18, align 4
  br label %19

19:                                               ; preds = %4, %16
  %20 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1
  %21 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %20, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, %1
  %24 = tail call float @llvm.floor.f32(float %23) #12
  store float %24, float* %21, align 4
  %25 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1, i32 1
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, %1
  %28 = tail call float @llvm.floor.f32(float %27) #12
  store float %28, float* %25, align 4
  %29 = fcmp une float %24, 0.000000e+00
  %30 = fcmp une float %28, 0.000000e+00
  %31 = and i1 %29, %30
  br i1 %31, label %35, label %32

32:                                               ; preds = %19
  %33 = bitcast %"class.blink::FloatSize"* %20 to i32*
  store i32 0, i32* %33, align 4
  %34 = bitcast float* %25 to i32*
  store i32 0, i32* %34, align 4
  br label %35

35:                                               ; preds = %19, %32
  %36 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2
  %37 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %36, i64 0, i32 0
  %38 = load float, float* %37, align 4
  %39 = fmul float %38, %1
  %40 = tail call float @llvm.floor.f32(float %39) #12
  store float %40, float* %37, align 4
  %41 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2, i32 1
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, %1
  %44 = tail call float @llvm.floor.f32(float %43) #12
  store float %44, float* %41, align 4
  %45 = fcmp une float %40, 0.000000e+00
  %46 = fcmp une float %44, 0.000000e+00
  %47 = and i1 %45, %46
  br i1 %47, label %51, label %48

48:                                               ; preds = %35
  %49 = bitcast %"class.blink::FloatSize"* %36 to i32*
  store i32 0, i32* %49, align 4
  %50 = bitcast float* %41 to i32*
  store i32 0, i32* %50, align 4
  br label %51

51:                                               ; preds = %35, %48
  %52 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3
  %53 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %52, i64 0, i32 0
  %54 = load float, float* %53, align 4
  %55 = fmul float %54, %1
  %56 = tail call float @llvm.floor.f32(float %55) #12
  store float %56, float* %53, align 4
  %57 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3, i32 1
  %58 = load float, float* %57, align 4
  %59 = fmul float %58, %1
  %60 = tail call float @llvm.floor.f32(float %59) #12
  store float %60, float* %57, align 4
  %61 = fcmp une float %56, 0.000000e+00
  %62 = fcmp une float %60, 0.000000e+00
  %63 = and i1 %61, %62
  br i1 %63, label %67, label %64

64:                                               ; preds = %51
  %65 = bitcast %"class.blink::FloatSize"* %52 to i32*
  store i32 0, i32* %65, align 4
  %66 = bitcast float* %57 to i32*
  store i32 0, i32* %66, align 4
  br label %67

67:                                               ; preds = %51, %2, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect5Radii6ShrinkEffff(%"class.blink::FloatRoundedRect::Radii"* nocapture, float, float, float, float) local_unnamed_addr #0 align 2 {
  %6 = bitcast %"class.blink::FloatRoundedRect::Radii"* %0 to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 4
  %8 = insertelement <4 x float> undef, float %3, i32 0
  %9 = insertelement <4 x float> %8, float %1, i32 1
  %10 = insertelement <4 x float> %9, float %4, i32 2
  %11 = insertelement <4 x float> %10, float %1, i32 3
  %12 = fsub <4 x float> %7, %11
  %13 = fcmp ogt <4 x float> %12, zeroinitializer
  %14 = select <4 x i1> %13, <4 x float> %12, <4 x float> zeroinitializer
  %15 = bitcast %"class.blink::FloatRoundedRect::Radii"* %0 to <4 x float>*
  store <4 x float> %14, <4 x float>* %15, align 4
  %16 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2, i32 0
  %17 = bitcast float* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = insertelement <4 x float> %8, float %2, i32 1
  %20 = insertelement <4 x float> %19, float %4, i32 2
  %21 = insertelement <4 x float> %20, float %2, i32 3
  %22 = fsub <4 x float> %18, %21
  %23 = fcmp ogt <4 x float> %22, zeroinitializer
  %24 = select <4 x i1> %23, <4 x float> %22, <4 x float> zeroinitializer
  %25 = bitcast float* %16 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* nocapture, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fcmp ogt float %7, 0.000000e+00
  br i1 %8, label %9, label %16

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fcmp ogt float %11, 0.000000e+00
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = fadd float %7, %3
  store float %14, float* %6, align 4
  %15 = fadd float %11, %1
  store float %15, float* %10, align 4
  br label %16

16:                                               ; preds = %13, %9, %5
  %17 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1, i32 0
  %18 = load float, float* %17, align 4
  %19 = fcmp ogt float %18, 0.000000e+00
  br i1 %19, label %20, label %27

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = fcmp ogt float %22, 0.000000e+00
  br i1 %23, label %24, label %27

24:                                               ; preds = %20
  %25 = fadd float %18, %4
  store float %25, float* %17, align 4
  %26 = fadd float %22, %1
  store float %26, float* %21, align 4
  br label %27

27:                                               ; preds = %24, %20, %16
  %28 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2, i32 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  br i1 %30, label %31, label %38

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2, i32 1
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  br i1 %34, label %35, label %38

35:                                               ; preds = %31
  %36 = fadd float %29, %3
  store float %36, float* %28, align 4
  %37 = fadd float %33, %2
  store float %37, float* %32, align 4
  br label %38

38:                                               ; preds = %35, %31, %27
  %39 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3, i32 0
  %40 = load float, float* %39, align 4
  %41 = fcmp ogt float %40, 0.000000e+00
  br i1 %41, label %42, label %49

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3, i32 1
  %44 = load float, float* %43, align 4
  %45 = fcmp ogt float %44, 0.000000e+00
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = fadd float %40, %4
  store float %47, float* %39, align 4
  %48 = fadd float %44, %2
  store float %48, float* %43, align 4
  br label %49

49:                                               ; preds = %46, %42, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink16FloatRoundedRect16RadiusCenterRectEv(%"class.blink::FloatRoundedRect"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %3 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %6 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %7 = load float, float* %6, align 4
  %8 = bitcast float* %5 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = insertelement <2 x float> undef, float %4, i32 0
  %11 = insertelement <2 x float> %10, float %7, i32 1
  %12 = fcmp olt <2 x float> %11, %9
  %13 = select <2 x i1> %12, <2 x float> %9, <2 x float> %11
  %14 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %13
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = bitcast float* %2 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = shufflevector <2 x float> %19, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %21 = fcmp olt <2 x float> %17, %20
  %22 = select <2 x i1> %21, <2 x float> %20, <2 x float> %17
  %23 = bitcast %"class.blink::FloatRoundedRect"* %0 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  %25 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1
  %26 = bitcast %"class.blink::FloatSize"* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 4
  %28 = extractelement <2 x float> %24, i32 0
  %29 = extractelement <2 x float> %22, i32 0
  %30 = fadd float %28, %29
  %31 = insertelement <2 x float> undef, float %30, i32 0
  %32 = extractelement <2 x float> %24, i32 1
  %33 = extractelement <2 x float> %22, i32 1
  %34 = fadd float %33, %32
  %35 = insertelement <2 x float> %31, float %34, i32 1
  %36 = fsub <2 x float> %14, %22
  %37 = fadd <2 x float> %36, %27
  %38 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %35, 0
  %39 = insertvalue { <2 x float>, <2 x float> } %38, <2 x float> %37, 1
  ret { <2 x float>, <2 x float> } %39
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16FloatRoundedRect14XInterceptsAtYEfRfS1_(%"class.blink::FloatRoundedRect"* readonly, float, float* nocapture dereferenceable(4), float* nocapture dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fcmp ogt float %6, %1
  br i1 %7, label %171, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %10 = load float, float* %9, align 4
  %11 = fadd float %6, %10
  %12 = fcmp olt float %11, %1
  br i1 %12, label %171, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %15, 0xBE80000000000000
  %17 = fcmp olt float %15, 0x3E80000000000000
  %18 = and i1 %16, %17
  %19 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %20 = load float, float* %19, align 4
  br i1 %18, label %21, label %70

21:                                               ; preds = %13
  %22 = fcmp ogt float %20, 0xBE80000000000000
  %23 = fcmp olt float %20, 0x3E80000000000000
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %70

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %27 = load float, float* %26, align 4
  %28 = fcmp ogt float %27, 0xBE80000000000000
  %29 = fcmp olt float %27, 0x3E80000000000000
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %70

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0xBE80000000000000
  %35 = fcmp olt float %33, 0x3E80000000000000
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %70

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 0
  %39 = load float, float* %38, align 4
  %40 = fcmp ogt float %39, 0xBE80000000000000
  %41 = fcmp olt float %39, 0x3E80000000000000
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %70

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %45 = load float, float* %44, align 4
  %46 = fcmp ogt float %45, 0xBE80000000000000
  %47 = fcmp olt float %45, 0x3E80000000000000
  %48 = and i1 %46, %47
  br i1 %48, label %49, label %70

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %51 = load float, float* %50, align 4
  %52 = fcmp ogt float %51, 0xBE80000000000000
  %53 = fcmp olt float %51, 0x3E80000000000000
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %70

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %57 = load float, float* %56, align 4
  %58 = fcmp ule float %57, 0xBE80000000000000
  %59 = fcmp uge float %57, 0x3E80000000000000
  %60 = or i1 %58, %59
  br i1 %60, label %70, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %63 = bitcast %"class.blink::FloatRoundedRect"* %0 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = bitcast float* %2 to i32*
  store i32 %64, i32* %65, align 4
  %66 = load float, float* %62, align 4
  %67 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %68 = load float, float* %67, align 4
  %69 = fadd float %66, %68
  store float %69, float* %3, align 4
  br label %171

70:                                               ; preds = %13, %55, %37, %43, %25, %31, %21, %49
  %71 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %74 = load float, float* %73, align 4
  %75 = fsub float %11, %74
  %76 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 0
  %77 = load float, float* %76, align 4
  %78 = fcmp ole float %15, 0.000000e+00
  %79 = fcmp ole float %20, 0.000000e+00
  %80 = or i1 %78, %79
  %81 = fcmp ugt float %6, %1
  %82 = or i1 %81, %80
  br i1 %82, label %91, label %83

83:                                               ; preds = %70
  %84 = fadd float %6, %20
  %85 = fcmp ogt float %84, %1
  br i1 %85, label %86, label %91

86:                                               ; preds = %83
  %87 = fadd float %15, %72
  %88 = fsub float %84, %1
  %89 = fmul float %88, %88
  %90 = fmul float %20, %20
  br label %105

91:                                               ; preds = %70, %83
  %92 = fcmp ole float %77, 0.000000e+00
  %93 = fcmp ole float %74, 0.000000e+00
  %94 = or i1 %93, %92
  %95 = fcmp ugt float %75, %1
  %96 = or i1 %95, %94
  %97 = fadd float %74, %75
  %98 = fcmp ult float %97, %1
  %99 = or i1 %98, %96
  br i1 %99, label %115, label %100

100:                                              ; preds = %91
  %101 = fadd float %72, %77
  %102 = fsub float %1, %75
  %103 = fmul float %102, %102
  %104 = fmul float %74, %74
  br label %105

105:                                              ; preds = %86, %100
  %106 = phi float [ %104, %100 ], [ %90, %86 ]
  %107 = phi float [ %103, %100 ], [ %89, %86 ]
  %108 = phi float [ %77, %100 ], [ %15, %86 ]
  %109 = phi float [ %101, %100 ], [ %87, %86 ]
  %110 = fdiv float %107, %106
  %111 = fsub float 1.000000e+00, %110
  %112 = tail call float @sqrtf(float %111) #12
  %113 = fmul float %108, %112
  %114 = fsub float %109, %113
  br label %115

115:                                              ; preds = %105, %91
  %116 = phi float [ %72, %91 ], [ %114, %105 ]
  store float %116, float* %2, align 4
  %117 = load float, float* %71, align 4
  %118 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %119 = load float, float* %118, align 4
  %120 = fadd float %117, %119
  %121 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %122 = load float, float* %121, align 4
  %123 = fsub float %120, %122
  %124 = load float, float* %5, align 4
  %125 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %126 = load float, float* %125, align 4
  %127 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %128 = load float, float* %127, align 4
  %129 = fsub float %120, %128
  %130 = load float, float* %9, align 4
  %131 = fadd float %124, %130
  %132 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %133 = load float, float* %132, align 4
  %134 = fsub float %131, %133
  %135 = fcmp ole float %122, 0.000000e+00
  %136 = fcmp ole float %126, 0.000000e+00
  %137 = or i1 %135, %136
  %138 = fcmp ugt float %124, %1
  %139 = or i1 %138, %137
  br i1 %139, label %152, label %140

140:                                              ; preds = %115
  %141 = fadd float %124, %126
  %142 = fcmp ult float %141, %1
  br i1 %142, label %152, label %143

143:                                              ; preds = %140
  %144 = fsub float %141, %1
  %145 = fmul float %144, %144
  %146 = fmul float %126, %126
  %147 = fdiv float %145, %146
  %148 = fsub float 1.000000e+00, %147
  %149 = tail call float @sqrtf(float %148) #12
  %150 = fmul float %122, %149
  %151 = fadd float %123, %150
  store float %151, float* %3, align 4
  br label %171

152:                                              ; preds = %115, %140
  %153 = fcmp ole float %128, 0.000000e+00
  %154 = fcmp ole float %133, 0.000000e+00
  %155 = or i1 %153, %154
  %156 = fcmp ugt float %134, %1
  %157 = or i1 %155, %156
  %158 = fadd float %133, %134
  %159 = fcmp ult float %158, %1
  %160 = or i1 %157, %159
  br i1 %160, label %170, label %161

161:                                              ; preds = %152
  %162 = fsub float %1, %134
  %163 = fmul float %162, %162
  %164 = fmul float %133, %133
  %165 = fdiv float %163, %164
  %166 = fsub float 1.000000e+00, %165
  %167 = tail call float @sqrtf(float %166) #12
  %168 = fmul float %128, %167
  %169 = fadd float %129, %168
  store float %169, float* %3, align 4
  br label %171

170:                                              ; preds = %152
  store float %120, float* %3, align 4
  br label %171

171:                                              ; preds = %143, %170, %161, %4, %8, %61
  %172 = phi i1 [ true, %61 ], [ false, %8 ], [ false, %4 ], [ true, %161 ], [ true, %170 ], [ true, %143 ]
  ret i1 %172
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect16InflateWithRadiiEi(%"class.blink::FloatRoundedRect"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %5 = bitcast float* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = sitofp i32 %1 to float
  %8 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = fsub float %9, %7
  store float %10, float* %8, align 4
  %11 = insertelement <2 x float> undef, float %7, i32 0
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <2 x i32> zeroinitializer
  %13 = fadd <2 x float> %6, %12
  %14 = fadd <2 x float> %13, %12
  %15 = extractelement <2 x float> %14, i32 0
  store float %15, float* %3, align 4
  %16 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fsub float %17, %7
  store float %18, float* %16, align 4
  %19 = extractelement <2 x float> %14, i32 1
  store float %19, float* %4, align 4
  %20 = fcmp olt float %15, %19
  br i1 %20, label %21, label %26

21:                                               ; preds = %2
  %22 = extractelement <2 x float> %6, i32 0
  %23 = fcmp une float %22, 0.000000e+00
  br i1 %23, label %24, label %34

24:                                               ; preds = %21
  %25 = fdiv float %15, %22
  br label %31

26:                                               ; preds = %2
  %27 = extractelement <2 x float> %6, i32 1
  %28 = fcmp une float %27, 0.000000e+00
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = fdiv float %19, %27
  br label %31

31:                                               ; preds = %29, %24
  %32 = phi float [ %25, %24 ], [ %30, %29 ]
  %33 = fcmp oeq float %32, 1.000000e+00
  br i1 %33, label %91, label %34

34:                                               ; preds = %26, %21, %31
  %35 = phi float [ %32, %31 ], [ 0.000000e+00, %21 ], [ 0.000000e+00, %26 ]
  %36 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %37 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %36, i64 0, i32 0, i32 0
  %38 = load float, float* %37, align 4
  %39 = fmul float %35, %38
  store float %39, float* %37, align 4
  %40 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = fmul float %35, %41
  store float %42, float* %40, align 4
  %43 = fcmp une float %39, 0.000000e+00
  %44 = fcmp une float %42, 0.000000e+00
  %45 = and i1 %43, %44
  br i1 %45, label %49, label %46

46:                                               ; preds = %34
  %47 = bitcast %"class.blink::FloatRoundedRect::Radii"* %36 to i32*
  store i32 0, i32* %47, align 4
  %48 = bitcast float* %40 to i32*
  store i32 0, i32* %48, align 4
  br label %49

49:                                               ; preds = %46, %34
  %50 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1
  %51 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %50, i64 0, i32 0
  %52 = load float, float* %51, align 4
  %53 = fmul float %35, %52
  store float %53, float* %51, align 4
  %54 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %55 = load float, float* %54, align 4
  %56 = fmul float %35, %55
  store float %56, float* %54, align 4
  %57 = fcmp une float %53, 0.000000e+00
  %58 = fcmp une float %56, 0.000000e+00
  %59 = and i1 %57, %58
  br i1 %59, label %63, label %60

60:                                               ; preds = %49
  %61 = bitcast %"class.blink::FloatSize"* %50 to i32*
  store i32 0, i32* %61, align 4
  %62 = bitcast float* %54 to i32*
  store i32 0, i32* %62, align 4
  br label %63

63:                                               ; preds = %60, %49
  %64 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2
  %65 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %64, i64 0, i32 0
  %66 = load float, float* %65, align 4
  %67 = fmul float %35, %66
  store float %67, float* %65, align 4
  %68 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %69 = load float, float* %68, align 4
  %70 = fmul float %35, %69
  store float %70, float* %68, align 4
  %71 = fcmp une float %67, 0.000000e+00
  %72 = fcmp une float %70, 0.000000e+00
  %73 = and i1 %71, %72
  br i1 %73, label %77, label %74

74:                                               ; preds = %63
  %75 = bitcast %"class.blink::FloatSize"* %64 to i32*
  store i32 0, i32* %75, align 4
  %76 = bitcast float* %68 to i32*
  store i32 0, i32* %76, align 4
  br label %77

77:                                               ; preds = %74, %63
  %78 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3
  %79 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %78, i64 0, i32 0
  %80 = load float, float* %79, align 4
  %81 = fmul float %35, %80
  store float %81, float* %79, align 4
  %82 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %83 = load float, float* %82, align 4
  %84 = fmul float %35, %83
  store float %84, float* %82, align 4
  %85 = fcmp une float %81, 0.000000e+00
  %86 = fcmp une float %84, 0.000000e+00
  %87 = and i1 %85, %86
  br i1 %87, label %91, label %88

88:                                               ; preds = %77
  %89 = bitcast %"class.blink::FloatSize"* %78 to i32*
  store i32 0, i32* %89, align 4
  %90 = bitcast float* %82 to i32*
  store i32 0, i32* %90, align 4
  br label %91

91:                                               ; preds = %31, %77, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16FloatRoundedRect14IntersectsQuadERKNS_9FloatQuadE(%"class.blink::FloatRoundedRect"*, %"class.blink::FloatQuad"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::FloatRect", align 4
  %4 = alloca %"class.blink::FloatPoint", align 4
  %5 = alloca %"class.blink::FloatSize", align 4
  %6 = alloca %"class.blink::FloatRect", align 4
  %7 = alloca %"class.blink::FloatPoint", align 4
  %8 = alloca %"class.blink::FloatSize", align 4
  %9 = alloca %"class.blink::FloatRect", align 4
  %10 = alloca %"class.blink::FloatPoint", align 4
  %11 = alloca %"class.blink::FloatSize", align 4
  %12 = alloca %"class.blink::FloatRect", align 4
  %13 = alloca %"class.blink::FloatPoint", align 4
  %14 = alloca %"class.blink::FloatSize", align 4
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0
  %16 = tail call zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatRect"* dereferenceable(16) %15) #12
  br i1 %16, label %17, label %187

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = fcmp ugt float %19, 0.000000e+00
  br i1 %20, label %21, label %55

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fcmp ugt float %23, 0.000000e+00
  br i1 %24, label %25, label %55

25:                                               ; preds = %21
  %26 = bitcast %"class.blink::FloatRect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #12
  %27 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1, i32 0
  %29 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1, i32 1
  %30 = bitcast %"class.blink::FloatRoundedRect"* %0 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %33 = bitcast float* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = bitcast %"class.blink::FloatRect"* %3 to i32*
  store i32 %31, i32* %35, align 4
  %36 = bitcast float* %27 to i32*
  store i32 %34, i32* %36, align 4
  store float %19, float* %28, align 4
  store float %23, float* %29, align 4
  %37 = call zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatRect"* nonnull dereferenceable(16) %3) #12
  br i1 %37, label %38, label %53

38:                                               ; preds = %25
  %39 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %40 = bitcast %"class.blink::FloatPoint"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #12
  %41 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %4, i64 0, i32 0
  %42 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %4, i64 0, i32 1
  %43 = load float, float* %39, align 4
  %44 = load float, float* %18, align 4
  %45 = fadd float %43, %44
  %46 = load float, float* %32, align 4
  %47 = load float, float* %22, align 4
  %48 = fadd float %46, %47
  store float %45, float* %41, align 4
  store float %48, float* %42, align 4
  %49 = bitcast %"class.blink::FloatSize"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #12
  %50 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %5, i64 0, i32 0
  %51 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %5, i64 0, i32 1
  store float %44, float* %50, align 4
  store float %47, float* %51, align 4
  %52 = call zeroext i1 @_ZNK5blink9FloatQuad17IntersectsEllipseERKNS_10FloatPointERKNS_9FloatSizeE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %4, %"class.blink::FloatSize"* nonnull dereferenceable(8) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #12
  br i1 %52, label %53, label %54

53:                                               ; preds = %25, %38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #12
  br label %55

54:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #12
  br label %187

55:                                               ; preds = %21, %17, %53
  %56 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %57 = load float, float* %56, align 4
  %58 = fcmp ugt float %57, 0.000000e+00
  br i1 %58, label %59, label %98

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %61 = load float, float* %60, align 4
  %62 = fcmp ugt float %61, 0.000000e+00
  br i1 %62, label %63, label %98

63:                                               ; preds = %59
  %64 = bitcast %"class.blink::FloatRect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #12
  %65 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 1, i32 0
  %68 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 1, i32 1
  %69 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %72 = load float, float* %71, align 4
  %73 = fadd float %70, %72
  %74 = fsub float %73, %57
  %75 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %76 = bitcast float* %75 to i32*
  %77 = load i32, i32* %76, align 4
  store float %74, float* %65, align 4
  %78 = bitcast float* %66 to i32*
  store i32 %77, i32* %78, align 4
  store float %57, float* %67, align 4
  store float %61, float* %68, align 4
  %79 = call zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatRect"* nonnull dereferenceable(16) %6) #12
  br i1 %79, label %80, label %96

80:                                               ; preds = %63
  %81 = bitcast %"class.blink::FloatPoint"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #12
  %82 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %7, i64 0, i32 0
  %83 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %7, i64 0, i32 1
  %84 = load float, float* %69, align 4
  %85 = load float, float* %71, align 4
  %86 = fadd float %84, %85
  %87 = load float, float* %56, align 4
  %88 = fsub float %86, %87
  %89 = load float, float* %75, align 4
  %90 = load float, float* %60, align 4
  %91 = fadd float %89, %90
  store float %88, float* %82, align 4
  store float %91, float* %83, align 4
  %92 = bitcast %"class.blink::FloatSize"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #12
  %93 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %8, i64 0, i32 0
  %94 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %8, i64 0, i32 1
  store float %87, float* %93, align 4
  store float %90, float* %94, align 4
  %95 = call zeroext i1 @_ZNK5blink9FloatQuad17IntersectsEllipseERKNS_10FloatPointERKNS_9FloatSizeE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %7, %"class.blink::FloatSize"* nonnull dereferenceable(8) %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #12
  br i1 %95, label %96, label %97

96:                                               ; preds = %63, %80
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #12
  br label %98

97:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #12
  br label %187

98:                                               ; preds = %59, %55, %96
  %99 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 0
  %100 = load float, float* %99, align 4
  %101 = fcmp ugt float %100, 0.000000e+00
  br i1 %101, label %102, label %140

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %104 = load float, float* %103, align 4
  %105 = fcmp ugt float %104, 0.000000e+00
  br i1 %105, label %106, label %140

106:                                              ; preds = %102
  %107 = bitcast %"class.blink::FloatRect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %107) #12
  %108 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 0, i32 1
  %109 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 1, i32 0
  %110 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 1, i32 1
  %111 = bitcast %"class.blink::FloatRoundedRect"* %0 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %116 = load float, float* %115, align 4
  %117 = fadd float %114, %116
  %118 = fsub float %117, %104
  %119 = bitcast %"class.blink::FloatRect"* %9 to i32*
  store i32 %112, i32* %119, align 4
  store float %118, float* %108, align 4
  store float %100, float* %109, align 4
  store float %104, float* %110, align 4
  %120 = call zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatRect"* nonnull dereferenceable(16) %9) #12
  br i1 %120, label %121, label %138

121:                                              ; preds = %106
  %122 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = bitcast %"class.blink::FloatPoint"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #12
  %124 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %10, i64 0, i32 0
  %125 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %10, i64 0, i32 1
  %126 = load float, float* %122, align 4
  %127 = load float, float* %99, align 4
  %128 = fadd float %126, %127
  %129 = load float, float* %113, align 4
  %130 = load float, float* %115, align 4
  %131 = fadd float %129, %130
  %132 = load float, float* %103, align 4
  %133 = fsub float %131, %132
  store float %128, float* %124, align 4
  store float %133, float* %125, align 4
  %134 = bitcast %"class.blink::FloatSize"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #12
  %135 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %11, i64 0, i32 0
  %136 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %11, i64 0, i32 1
  store float %127, float* %135, align 4
  store float %132, float* %136, align 4
  %137 = call zeroext i1 @_ZNK5blink9FloatQuad17IntersectsEllipseERKNS_10FloatPointERKNS_9FloatSizeE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %10, %"class.blink::FloatSize"* nonnull dereferenceable(8) %11) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #12
  br i1 %137, label %138, label %139

138:                                              ; preds = %106, %121
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %107) #12
  br label %140

139:                                              ; preds = %121
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %107) #12
  br label %187

140:                                              ; preds = %102, %98, %138
  %141 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %142 = load float, float* %141, align 4
  %143 = fcmp ugt float %142, 0.000000e+00
  br i1 %143, label %144, label %187

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %146 = load float, float* %145, align 4
  %147 = fcmp ugt float %146, 0.000000e+00
  br i1 %147, label %148, label %187

148:                                              ; preds = %144
  %149 = bitcast %"class.blink::FloatRect"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %149) #12
  %150 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 0, i32 1
  %152 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 1, i32 0
  %153 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 1, i32 1
  %154 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %155 = load float, float* %154, align 4
  %156 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %157 = load float, float* %156, align 4
  %158 = fadd float %155, %157
  %159 = fsub float %158, %142
  %160 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %161 = load float, float* %160, align 4
  %162 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %163 = load float, float* %162, align 4
  %164 = fadd float %161, %163
  %165 = fsub float %164, %146
  store float %159, float* %150, align 4
  store float %165, float* %151, align 4
  store float %142, float* %152, align 4
  store float %146, float* %153, align 4
  %166 = call zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatRect"* nonnull dereferenceable(16) %12) #12
  br i1 %166, label %167, label %185

167:                                              ; preds = %148
  %168 = bitcast %"class.blink::FloatPoint"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %168) #12
  %169 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %13, i64 0, i32 0
  %170 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %13, i64 0, i32 1
  %171 = load float, float* %154, align 4
  %172 = load float, float* %156, align 4
  %173 = fadd float %171, %172
  %174 = load float, float* %141, align 4
  %175 = fsub float %173, %174
  %176 = load float, float* %160, align 4
  %177 = load float, float* %162, align 4
  %178 = fadd float %176, %177
  %179 = load float, float* %145, align 4
  %180 = fsub float %178, %179
  store float %175, float* %169, align 4
  store float %180, float* %170, align 4
  %181 = bitcast %"class.blink::FloatSize"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %181) #12
  %182 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %14, i64 0, i32 0
  %183 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %14, i64 0, i32 1
  store float %174, float* %182, align 4
  store float %179, float* %183, align 4
  %184 = call zeroext i1 @_ZNK5blink9FloatQuad17IntersectsEllipseERKNS_10FloatPointERKNS_9FloatSizeE(%"class.blink::FloatQuad"* %1, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13, %"class.blink::FloatSize"* nonnull dereferenceable(8) %14) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %168) #12
  br i1 %184, label %185, label %186

185:                                              ; preds = %148, %167
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %149) #12
  br label %187

186:                                              ; preds = %167
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %149) #12
  br label %187

187:                                              ; preds = %144, %185, %140, %54, %97, %139, %186, %2
  %188 = phi i1 [ false, %2 ], [ false, %54 ], [ false, %97 ], [ false, %139 ], [ false, %186 ], [ true, %140 ], [ true, %185 ], [ true, %144 ]
  ret i1 %188
}

declare zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink9FloatQuad17IntersectsEllipseERKNS_10FloatPointERKNS_9FloatSizeE(%"class.blink::FloatQuad"*, %"class.blink::FloatPoint"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_ZN5blink33CalcBorderRadiiConstraintScaleForERKNS_9FloatRectERKNS_16FloatRoundedRect5RadiiE(%"class.blink::FloatRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatRoundedRect::Radii"* nocapture readonly dereferenceable(32)) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 1, i32 0
  %6 = load float, float* %5, align 4
  %7 = fadd float %4, %6
  %8 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp ogt float %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %2
  %12 = fdiv float %9, %7
  %13 = fcmp ogt float %12, 1.000000e+00
  %14 = select i1 %13, float 1.000000e+00, float %12
  br label %15

15:                                               ; preds = %11, %2
  %16 = phi float [ %14, %11 ], [ 1.000000e+00, %2 ]
  %17 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 2, i32 0
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 3, i32 0
  %20 = load float, float* %19, align 4
  %21 = fadd float %18, %20
  %22 = fcmp ogt float %21, %9
  br i1 %22, label %23, label %27

23:                                               ; preds = %15
  %24 = fdiv float %9, %21
  %25 = fcmp olt float %16, %24
  %26 = select i1 %25, float %16, float %24
  br label %27

27:                                               ; preds = %23, %15
  %28 = phi float [ %26, %23 ], [ %16, %15 ]
  %29 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 2, i32 1
  %32 = load float, float* %31, align 4
  %33 = fadd float %30, %32
  %34 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %35 = load float, float* %34, align 4
  %36 = fcmp ogt float %33, %35
  br i1 %36, label %37, label %41

37:                                               ; preds = %27
  %38 = fdiv float %35, %33
  %39 = fcmp olt float %28, %38
  %40 = select i1 %39, float %28, float %38
  br label %41

41:                                               ; preds = %37, %27
  %42 = phi float [ %40, %37 ], [ %28, %27 ]
  %43 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 1, i32 1
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %1, i64 0, i32 3, i32 1
  %46 = load float, float* %45, align 4
  %47 = fadd float %44, %46
  %48 = fcmp ogt float %47, %35
  br i1 %48, label %49, label %53

49:                                               ; preds = %41
  %50 = fdiv float %35, %47
  %51 = fcmp olt float %42, %50
  %52 = select i1 %51, float %42, float %50
  br label %53

53:                                               ; preds = %41, %49
  %54 = phi float [ %52, %49 ], [ %42, %41 ]
  ret float %54
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect14ConstrainRadiiEv(%"class.blink::FloatRoundedRect"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %6 = load float, float* %5, align 4
  %7 = fadd float %4, %6
  %8 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp ogt float %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %1
  %12 = fdiv float %9, %7
  %13 = fcmp ogt float %12, 1.000000e+00
  %14 = select i1 %13, float 1.000000e+00, float %12
  br label %15

15:                                               ; preds = %11, %1
  %16 = phi float [ %14, %11 ], [ 1.000000e+00, %1 ]
  %17 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 0
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %20 = load float, float* %19, align 4
  %21 = fadd float %18, %20
  %22 = fcmp ogt float %21, %9
  br i1 %22, label %23, label %27

23:                                               ; preds = %15
  %24 = fdiv float %9, %21
  %25 = fcmp olt float %16, %24
  %26 = select i1 %25, float %16, float %24
  br label %27

27:                                               ; preds = %23, %15
  %28 = phi float [ %26, %23 ], [ %16, %15 ]
  %29 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %32 = load float, float* %31, align 4
  %33 = fadd float %30, %32
  %34 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %35 = load float, float* %34, align 4
  %36 = fcmp ogt float %33, %35
  br i1 %36, label %37, label %41

37:                                               ; preds = %27
  %38 = fdiv float %35, %33
  %39 = fcmp olt float %28, %38
  %40 = select i1 %39, float %28, float %38
  br label %41

41:                                               ; preds = %37, %27
  %42 = phi float [ %40, %37 ], [ %28, %27 ]
  %43 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %46 = load float, float* %45, align 4
  %47 = fadd float %44, %46
  %48 = fcmp ogt float %47, %35
  br i1 %48, label %49, label %53

49:                                               ; preds = %41
  %50 = fdiv float %35, %47
  %51 = fcmp olt float %42, %50
  %52 = select i1 %51, float %42, float %50
  br label %53

53:                                               ; preds = %41, %49
  %54 = phi float [ %52, %49 ], [ %42, %41 ]
  tail call void @_ZN5blink16FloatRoundedRect5Radii13ScaleAndFloorEf(%"class.blink::FloatRoundedRect::Radii"* %2, float %54)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink16FloatRoundedRect12IsRenderableEv(%"class.blink::FloatRoundedRect"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %5 = load float, float* %4, align 4
  %6 = fadd float %3, %5
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = fadd double %10, 1.000000e-04
  %12 = fcmp ult double %11, %7
  br i1 %12, label %41, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 0
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %17 = load float, float* %16, align 4
  %18 = fadd float %15, %17
  %19 = fpext float %18 to double
  %20 = fcmp ult double %11, %19
  br i1 %20, label %41, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %25 = load float, float* %24, align 4
  %26 = fadd float %23, %25
  %27 = fpext float %26 to double
  %28 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %29 = load float, float* %28, align 4
  %30 = fpext float %29 to double
  %31 = fadd double %30, 1.000000e-04
  %32 = fcmp ult double %31, %27
  br i1 %32, label %41, label %33

33:                                               ; preds = %21
  %34 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %37 = load float, float* %36, align 4
  %38 = fadd float %35, %37
  %39 = fpext float %38 to double
  %40 = fcmp oge double %31, %39
  br label %41

41:                                               ; preds = %21, %13, %1, %33
  %42 = phi i1 [ false, %21 ], [ false, %13 ], [ false, %1 ], [ %40, %33 ]
  ret i1 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16FloatRoundedRect11AdjustRadiiEv(%"class.blink::FloatRoundedRect"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %2, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1
  %5 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %4, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2
  %8 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %7, i64 0, i32 0
  %9 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3
  %10 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %9, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = bitcast %"class.blink::FloatRoundedRect::Radii"* %2 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %15 = load float, float* %14, align 4
  %16 = insertelement <2 x float> undef, float %6, i32 0
  %17 = insertelement <2 x float> %16, float %15, i32 1
  %18 = fadd <2 x float> %13, %17
  %19 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = shufflevector <2 x float> %21, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %23 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %24 = bitcast %"class.blink::FloatSize"* %9 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fadd <2 x float> %22, %25
  %27 = fcmp olt <2 x float> %18, %26
  %28 = select <2 x i1> %27, <2 x float> %26, <2 x float> %18
  %29 = extractelement <2 x float> %28, i32 0
  %30 = fcmp ole float %29, 0.000000e+00
  %31 = extractelement <2 x float> %28, i32 1
  %32 = fcmp ole float %31, 0.000000e+00
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %76

34:                                               ; preds = %1
  %35 = extractelement <2 x float> %13, i32 0
  %36 = fmul float %35, 0.000000e+00
  store float %36, float* %3, align 4
  %37 = extractelement <2 x float> %13, i32 1
  %38 = fmul float %37, 0.000000e+00
  store float %38, float* %11, align 4
  %39 = fcmp une float %36, 0.000000e+00
  %40 = fcmp une float %38, 0.000000e+00
  %41 = and i1 %39, %40
  br i1 %41, label %45, label %42

42:                                               ; preds = %34
  %43 = bitcast %"class.blink::FloatRoundedRect::Radii"* %2 to i32*
  store i32 0, i32* %43, align 4
  %44 = bitcast float* %11 to i32*
  store i32 0, i32* %44, align 4
  br label %45

45:                                               ; preds = %42, %34
  %46 = fmul float %6, 0.000000e+00
  store float %46, float* %5, align 4
  %47 = extractelement <2 x float> %21, i32 0
  %48 = fmul float %47, 0.000000e+00
  store float %48, float* %19, align 4
  %49 = fcmp une float %46, 0.000000e+00
  %50 = fcmp une float %48, 0.000000e+00
  %51 = and i1 %49, %50
  br i1 %51, label %55, label %52

52:                                               ; preds = %45
  %53 = bitcast %"class.blink::FloatSize"* %4 to i32*
  store i32 0, i32* %53, align 4
  %54 = bitcast float* %19 to i32*
  store i32 0, i32* %54, align 4
  br label %55

55:                                               ; preds = %52, %45
  %56 = extractelement <2 x float> %21, i32 1
  %57 = fmul float %56, 0.000000e+00
  store float %57, float* %8, align 4
  %58 = fmul float %15, 0.000000e+00
  store float %58, float* %14, align 4
  %59 = fcmp une float %57, 0.000000e+00
  %60 = fcmp une float %58, 0.000000e+00
  %61 = and i1 %59, %60
  br i1 %61, label %65, label %62

62:                                               ; preds = %55
  %63 = bitcast %"class.blink::FloatSize"* %7 to i32*
  store i32 0, i32* %63, align 4
  %64 = bitcast float* %14 to i32*
  store i32 0, i32* %64, align 4
  br label %65

65:                                               ; preds = %62, %55
  %66 = extractelement <2 x float> %25, i32 0
  %67 = fmul float %66, 0.000000e+00
  store float %67, float* %10, align 4
  %68 = extractelement <2 x float> %25, i32 1
  %69 = fmul float %68, 0.000000e+00
  store float %69, float* %23, align 4
  %70 = fcmp une float %67, 0.000000e+00
  %71 = fcmp une float %69, 0.000000e+00
  %72 = and i1 %70, %71
  br i1 %72, label %128, label %73

73:                                               ; preds = %65
  %74 = bitcast %"class.blink::FloatSize"* %9 to i32*
  store i32 0, i32* %74, align 4
  %75 = bitcast float* %23 to i32*
  store i32 0, i32* %75, align 4
  br label %128

76:                                               ; preds = %1
  %77 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %78 = bitcast float* %77 to <2 x float>*
  %79 = load <2 x float>, <2 x float>* %78, align 4
  %80 = fdiv <2 x float> %79, %28
  %81 = extractelement <2 x float> %80, i32 0
  %82 = extractelement <2 x float> %80, i32 1
  %83 = fcmp olt float %81, %82
  %84 = select i1 %83, float %81, float %82
  %85 = fcmp oeq float %84, 1.000000e+00
  br i1 %85, label %128, label %86

86:                                               ; preds = %76
  %87 = extractelement <2 x float> %13, i32 0
  %88 = fmul float %84, %87
  store float %88, float* %3, align 4
  %89 = extractelement <2 x float> %13, i32 1
  %90 = fmul float %84, %89
  store float %90, float* %11, align 4
  %91 = fcmp une float %88, 0.000000e+00
  %92 = fcmp une float %90, 0.000000e+00
  %93 = and i1 %91, %92
  br i1 %93, label %97, label %94

94:                                               ; preds = %86
  %95 = bitcast %"class.blink::FloatRoundedRect::Radii"* %2 to i32*
  store i32 0, i32* %95, align 4
  %96 = bitcast float* %11 to i32*
  store i32 0, i32* %96, align 4
  br label %97

97:                                               ; preds = %94, %86
  %98 = fmul float %6, %84
  store float %98, float* %5, align 4
  %99 = extractelement <2 x float> %21, i32 0
  %100 = fmul float %84, %99
  store float %100, float* %19, align 4
  %101 = fcmp une float %98, 0.000000e+00
  %102 = fcmp une float %100, 0.000000e+00
  %103 = and i1 %101, %102
  br i1 %103, label %107, label %104

104:                                              ; preds = %97
  %105 = bitcast %"class.blink::FloatSize"* %4 to i32*
  store i32 0, i32* %105, align 4
  %106 = bitcast float* %19 to i32*
  store i32 0, i32* %106, align 4
  br label %107

107:                                              ; preds = %104, %97
  %108 = extractelement <2 x float> %21, i32 1
  %109 = fmul float %108, %84
  store float %109, float* %8, align 4
  %110 = fmul float %84, %15
  store float %110, float* %14, align 4
  %111 = fcmp une float %109, 0.000000e+00
  %112 = fcmp une float %110, 0.000000e+00
  %113 = and i1 %111, %112
  br i1 %113, label %117, label %114

114:                                              ; preds = %107
  %115 = bitcast %"class.blink::FloatSize"* %7 to i32*
  store i32 0, i32* %115, align 4
  %116 = bitcast float* %14 to i32*
  store i32 0, i32* %116, align 4
  br label %117

117:                                              ; preds = %114, %107
  %118 = extractelement <2 x float> %25, i32 0
  %119 = fmul float %118, %84
  store float %119, float* %10, align 4
  %120 = extractelement <2 x float> %25, i32 1
  %121 = fmul float %84, %120
  store float %121, float* %23, align 4
  %122 = fcmp une float %119, 0.000000e+00
  %123 = fcmp une float %121, 0.000000e+00
  %124 = and i1 %122, %123
  br i1 %124, label %128, label %125

125:                                              ; preds = %117
  %126 = bitcast %"class.blink::FloatSize"* %9 to i32*
  store i32 0, i32* %126, align 4
  %127 = bitcast float* %23 to i32*
  store i32 0, i32* %127, align 4
  br label %128

128:                                              ; preds = %125, %117, %76, %73, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_16FloatRoundedRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::FloatRoundedRect"* dereferenceable(48)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #12
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink16FloatRoundedRect8ToStringEv(%"class.blink::FloatRoundedRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #12
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #12
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink16FloatRoundedRect8ToStringEv(%"class.blink::FloatRoundedRect"*) local_unnamed_addr #6 align 2 {
  %2 = alloca %"class.WTF::StringAppend.8", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::StringAppend.7", align 8
  %5 = alloca %"class.WTF::StringAppend.8", align 8
  %6 = alloca %"class.WTF::StringAppend.9", align 8
  %7 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0
  %8 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i8*) acquire, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %14, !prof !2

10:                                               ; preds = %1
  %11 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  store <4 x i32> <i32 -16777215, i32 -16777215, i32 33554431, i32 33554431>, <4 x i32>* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to <4 x i32>*), align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #12
  br label %14

14:                                               ; preds = %1, %10, %13
  %15 = load i64, i64* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i64*), align 4
  %16 = load i64, i64* bitcast (%"class.blink::IntSize"* getelementptr inbounds (%"class.blink::IntRect", %"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect, i64 0, i32 1) to i64*), align 4
  %17 = trunc i64 %15 to i32
  %18 = lshr i64 %15, 32
  %19 = trunc i64 %18 to i32
  %20 = sitofp i32 %17 to float
  %21 = sitofp i32 %19 to float
  %22 = bitcast %"class.blink::FloatRoundedRect"* %0 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = extractelement <2 x float> %23, i32 0
  %25 = fcmp oeq float %24, %20
  %26 = extractelement <2 x float> %23, i32 1
  %27 = fcmp oeq float %26, %21
  %28 = and i1 %25, %27
  br i1 %28, label %29, label %44

29:                                               ; preds = %14
  %30 = trunc i64 %16 to i32
  %31 = sitofp i32 %30 to float
  %32 = lshr i64 %16, 32
  %33 = trunc i64 %32 to i32
  %34 = sitofp i32 %33 to float
  %35 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1
  %36 = bitcast %"class.blink::FloatSize"* %35 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 4
  %38 = extractelement <2 x float> %37, i32 0
  %39 = fcmp oeq float %38, %31
  %40 = extractelement <2 x float> %37, i32 1
  %41 = fcmp oeq float %40, %34
  %42 = and i1 %39, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %29
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i64 15) #12
  br label %298

44:                                               ; preds = %14, %29
  %45 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %46 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %45, i64 0, i32 0, i32 0
  %47 = load float, float* %46, align 4
  %48 = fcmp ogt float %47, 0xBE80000000000000
  %49 = fcmp olt float %47, 0x3E80000000000000
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %96

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = fcmp ogt float %53, 0xBE80000000000000
  %55 = fcmp olt float %53, 0x3E80000000000000
  %56 = and i1 %54, %55
  br i1 %56, label %57, label %96

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 0
  %59 = load float, float* %58, align 4
  %60 = fcmp ogt float %59, 0xBE80000000000000
  %61 = fcmp olt float %59, 0x3E80000000000000
  %62 = and i1 %60, %61
  br i1 %62, label %63, label %96

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 1, i32 1
  %65 = load float, float* %64, align 4
  %66 = fcmp ogt float %65, 0xBE80000000000000
  %67 = fcmp olt float %65, 0x3E80000000000000
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %96

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 0
  %71 = load float, float* %70, align 4
  %72 = fcmp ogt float %71, 0xBE80000000000000
  %73 = fcmp olt float %71, 0x3E80000000000000
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %96

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2, i32 1
  %77 = load float, float* %76, align 4
  %78 = fcmp ogt float %77, 0xBE80000000000000
  %79 = fcmp olt float %77, 0x3E80000000000000
  %80 = and i1 %78, %79
  br i1 %80, label %81, label %96

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 0
  %83 = load float, float* %82, align 4
  %84 = fcmp ogt float %83, 0xBE80000000000000
  %85 = fcmp olt float %83, 0x3E80000000000000
  %86 = and i1 %84, %85
  br i1 %86, label %87, label %96

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 3, i32 1
  %89 = load float, float* %88, align 4
  %90 = fcmp ogt float %89, 0xBE80000000000000
  %91 = fcmp olt float %89, 0x3E80000000000000
  %92 = and i1 %90, %91
  br i1 %92, label %93, label %96

93:                                               ; preds = %87
  %94 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"* %7) #12
  %95 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %94, %"class.WTF::StringImpl"** %95, align 8
  br label %298

96:                                               ; preds = %69, %75, %57, %63, %44, %51, %81, %87
  %97 = bitcast %"class.WTF::StringAppend.7"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %97) #12
  %98 = bitcast %"class.WTF::StringAppend.8"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %98) #12
  %99 = bitcast %"class.WTF::StringAppend.9"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #12
  %100 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"* %7) #12
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %146, label %102

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %119

109:                                              ; preds = %102
  %110 = zext i32 %108 to i33
  %111 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %110, i33 1) #12
  %112 = extractvalue { i33, i1 } %111, 1
  %113 = extractvalue { i33, i1 } %111, 0
  %114 = icmp slt i33 %113, 0
  %115 = or i1 %112, %114
  br i1 %115, label %116, label %117, !prof !3

116:                                              ; preds = %109
  tail call void @llvm.trap() #12
  unreachable

117:                                              ; preds = %109
  %118 = trunc i33 %113 to i32
  store i32 %118, i32* %107, align 4
  br label %119

119:                                              ; preds = %102, %117
  %120 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %121 = load atomic i32, i32* %103 monotonic, align 4
  %122 = and i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  br i1 %123, label %125, label %135

125:                                              ; preds = %119
  %126 = zext i32 %120 to i33
  %127 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %126, i33 1) #12
  %128 = extractvalue { i33, i1 } %127, 1
  %129 = extractvalue { i33, i1 } %127, 0
  %130 = icmp slt i33 %129, 0
  %131 = or i1 %128, %130
  br i1 %131, label %132, label %133, !prof !3

132:                                              ; preds = %125
  tail call void @llvm.trap() #12
  unreachable

133:                                              ; preds = %125
  %134 = trunc i33 %129 to i32
  store i32 %134, i32* %124, align 4
  br label %135

135:                                              ; preds = %133, %119
  %136 = phi i32 [ %134, %133 ], [ %120, %119 ]
  %137 = load atomic i32, i32* %103 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %135
  %141 = add i32 %136, -1
  store i32 %141, i32* %124, align 4
  br label %142

142:                                              ; preds = %140, %135
  %143 = phi i32 [ %141, %140 ], [ %136, %135 ]
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #12
  br label %146

146:                                              ; preds = %96, %142, %145
  %147 = getelementptr inbounds %"class.WTF::StringAppend.9", %"class.WTF::StringAppend.9"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %100, %"class.WTF::StringImpl"** %147, align 8
  %148 = getelementptr inbounds %"class.WTF::StringAppend.9", %"class.WTF::StringAppend.9"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8** %148, align 8
  %149 = tail call %"class.WTF::StringImpl"* @_ZNK5blink16FloatRoundedRect5Radii8ToStringEv(%"class.blink::FloatRoundedRect::Radii"* %45)
  call void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.8"* nonnull sret %5, %"class.WTF::StringAppend.9"* nonnull dereferenceable(16) %6, %"class.WTF::StringImpl"* %149)
  %150 = bitcast %"class.WTF::StringAppend.8"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150)
  %151 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8, !noalias !4
  %153 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %152, %"class.WTF::StringImpl"** %153, align 8, !noalias !4
  %154 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %154, label %172, label %155

155:                                              ; preds = %146
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = and i32 %157, 2
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %172

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i33
  %164 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %163, i33 1) #12
  %165 = extractvalue { i33, i1 } %164, 1
  %166 = extractvalue { i33, i1 } %164, 0
  %167 = icmp slt i33 %166, 0
  %168 = or i1 %165, %167
  br i1 %168, label %169, label %170, !prof !3

169:                                              ; preds = %160
  call void @llvm.trap() #12
  unreachable

170:                                              ; preds = %160
  %171 = trunc i33 %166 to i32
  store i32 %171, i32* %161, align 4
  br label %172

172:                                              ; preds = %170, %155, %146
  %173 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %2, i64 0, i32 0, i32 1
  %174 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %5, i64 0, i32 0, i32 1
  %175 = bitcast i8** %174 to i64*
  %176 = load i64, i64* %175, align 8, !noalias !4
  %177 = bitcast i8** %173 to i64*
  store i64 %176, i64* %177, align 8, !noalias !4
  %178 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %5, i64 0, i32 1, i32 0, i32 0
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %178, align 8, !noalias !4
  %180 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %2, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %179, %"class.WTF::StringImpl"** %180, align 8, !noalias !4
  %181 = icmp eq %"class.WTF::StringImpl"* %179, null
  br i1 %181, label %199, label %182

182:                                              ; preds = %172
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %184 = load atomic i32, i32* %183 monotonic, align 4
  %185 = and i32 %184, 2
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %199

187:                                              ; preds = %182
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 0
  %189 = load i32, i32* %188, align 4
  %190 = zext i32 %189 to i33
  %191 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %190, i33 1) #12
  %192 = extractvalue { i33, i1 } %191, 1
  %193 = extractvalue { i33, i1 } %191, 0
  %194 = icmp slt i33 %193, 0
  %195 = or i1 %192, %194
  br i1 %195, label %196, label %197, !prof !3

196:                                              ; preds = %187
  call void @llvm.trap() #12
  unreachable

197:                                              ; preds = %187
  %198 = trunc i33 %193 to i32
  store i32 %198, i32* %188, align 4
  br label %199

199:                                              ; preds = %172, %182, %197
  call void @_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.7"* nonnull %4, %"class.WTF::StringAppend.8"* nonnull byval(%"class.WTF::StringAppend.8") align 8 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150)
  %200 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EcvS1_Ev(%"class.WTF::StringAppend.7"* nonnull %4)
  %201 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %200, %"class.WTF::StringImpl"** %201, align 8
  %202 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %203 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %202, align 8
  %204 = icmp eq %"class.WTF::StringImpl"* %203, null
  br i1 %204, label %218, label %205

205:                                              ; preds = %199
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load atomic i32, i32* %206 monotonic, align 4
  %208 = and i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 0
  %211 = load i32, i32* %210, align 4
  br i1 %209, label %212, label %214

212:                                              ; preds = %205
  %213 = add i32 %211, -1
  store i32 %213, i32* %210, align 4
  br label %214

214:                                              ; preds = %212, %205
  %215 = phi i32 [ %213, %212 ], [ %211, %205 ]
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %218

217:                                              ; preds = %214
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %203) #12
  br label %218

218:                                              ; preds = %217, %214, %199
  %219 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %220 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %219, align 8
  %221 = icmp eq %"class.WTF::StringImpl"* %220, null
  br i1 %221, label %235, label %222

222:                                              ; preds = %218
  %223 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %220, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %224 = load atomic i32, i32* %223 monotonic, align 4
  %225 = and i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %220, i64 0, i32 0
  %228 = load i32, i32* %227, align 4
  br i1 %226, label %229, label %231

229:                                              ; preds = %222
  %230 = add i32 %228, -1
  store i32 %230, i32* %227, align 4
  br label %231

231:                                              ; preds = %229, %222
  %232 = phi i32 [ %230, %229 ], [ %228, %222 ]
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %235

234:                                              ; preds = %231
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %220) #12
  br label %235

235:                                              ; preds = %218, %231, %234
  %236 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %178, align 8
  %237 = icmp eq %"class.WTF::StringImpl"* %236, null
  br i1 %237, label %251, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %240 = load atomic i32, i32* %239 monotonic, align 4
  %241 = and i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 0
  %244 = load i32, i32* %243, align 4
  br i1 %242, label %245, label %247

245:                                              ; preds = %238
  %246 = add i32 %244, -1
  store i32 %246, i32* %243, align 4
  br label %247

247:                                              ; preds = %245, %238
  %248 = phi i32 [ %246, %245 ], [ %244, %238 ]
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %251

250:                                              ; preds = %247
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %236) #12
  br label %251

251:                                              ; preds = %250, %247, %235
  %252 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  %253 = icmp eq %"class.WTF::StringImpl"* %252, null
  br i1 %253, label %267, label %254

254:                                              ; preds = %251
  %255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %252, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %256 = load atomic i32, i32* %255 monotonic, align 4
  %257 = and i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %252, i64 0, i32 0
  %260 = load i32, i32* %259, align 4
  br i1 %258, label %261, label %263

261:                                              ; preds = %254
  %262 = add i32 %260, -1
  store i32 %262, i32* %259, align 4
  br label %263

263:                                              ; preds = %261, %254
  %264 = phi i32 [ %262, %261 ], [ %260, %254 ]
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %263
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %252) #12
  br label %267

267:                                              ; preds = %251, %263, %266
  %268 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %147, align 8
  %269 = icmp eq %"class.WTF::StringImpl"* %268, null
  br i1 %269, label %283, label %270

270:                                              ; preds = %267
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %272 = load atomic i32, i32* %271 monotonic, align 4
  %273 = and i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 0
  %276 = load i32, i32* %275, align 4
  br i1 %274, label %277, label %279

277:                                              ; preds = %270
  %278 = add i32 %276, -1
  store i32 %278, i32* %275, align 4
  br label %279

279:                                              ; preds = %277, %270
  %280 = phi i32 [ %278, %277 ], [ %276, %270 ]
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %283

282:                                              ; preds = %279
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %268) #12
  br label %283

283:                                              ; preds = %267, %279, %282
  br i1 %101, label %297, label %284

284:                                              ; preds = %283
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = load atomic i32, i32* %285 monotonic, align 4
  %287 = and i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %290 = load i32, i32* %289, align 4
  br i1 %288, label %291, label %293

291:                                              ; preds = %284
  %292 = add i32 %290, -1
  store i32 %292, i32* %289, align 4
  br label %293

293:                                              ; preds = %291, %284
  %294 = phi i32 [ %292, %291 ], [ %290, %284 ]
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %297

296:                                              ; preds = %293
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #12
  br label %297

297:                                              ; preds = %283, %293, %296
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %99) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %98) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %97) #12
  br label %298

298:                                              ; preds = %297, %93, %43
  %299 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %300 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %299, align 8
  ret %"class.WTF::StringImpl"* %300
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_16FloatRoundedRect5RadiiE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::FloatRoundedRect::Radii"* dereferenceable(32)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #12
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink16FloatRoundedRect5Radii8ToStringEv(%"class.blink::FloatRoundedRect::Radii"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #12
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #12
  ret %"class.std::__1::basic_ostream"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink16FloatRoundedRect5Radii8ToStringEv(%"class.blink::FloatRoundedRect::Radii"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringAppend.4", align 8
  %3 = alloca %"class.WTF::StringAppend", align 8
  %4 = alloca %"class.WTF::StringAppend.1", align 8
  %5 = alloca %"class.WTF::StringAppend.2", align 8
  %6 = alloca %"class.WTF::StringAppend.3", align 8
  %7 = alloca %"class.WTF::StringAppend.4", align 8
  %8 = alloca %"class.WTF::StringAppend.5", align 8
  %9 = bitcast %"class.WTF::StringAppend"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #12
  %10 = bitcast %"class.WTF::StringAppend.1"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %10) #12
  %11 = bitcast %"class.WTF::StringAppend.2"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #12
  %12 = bitcast %"class.WTF::StringAppend.3"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #12
  %13 = bitcast %"class.WTF::StringAppend.4"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #12
  %14 = bitcast %"class.WTF::StringAppend.5"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 0
  %16 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"* %15) #12
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %93, label %18

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  br i1 %22, label %25, label %35

25:                                               ; preds = %18
  %26 = zext i32 %24 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #12
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !3

32:                                               ; preds = %25
  tail call void @llvm.trap() #12
  unreachable

33:                                               ; preds = %25
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %23, align 4
  br label %35

35:                                               ; preds = %33, %18
  %36 = phi i32 [ %34, %33 ], [ %24, %18 ]
  %37 = load atomic i32, i32* %19 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %50

40:                                               ; preds = %35
  %41 = zext i32 %36 to i33
  %42 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %41, i33 1) #12
  %43 = extractvalue { i33, i1 } %42, 1
  %44 = extractvalue { i33, i1 } %42, 0
  %45 = icmp slt i33 %44, 0
  %46 = or i1 %43, %45
  br i1 %46, label %47, label %48, !prof !3

47:                                               ; preds = %40
  tail call void @llvm.trap() #12
  unreachable

48:                                               ; preds = %40
  %49 = trunc i33 %44 to i32
  store i32 %49, i32* %23, align 4
  br label %50

50:                                               ; preds = %48, %35
  %51 = phi i32 [ %49, %48 ], [ %36, %35 ]
  %52 = load atomic i32, i32* %19 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  %56 = add i32 %51, -1
  store i32 %56, i32* %23, align 4
  br label %57

57:                                               ; preds = %55, %50
  %58 = phi i32 [ %56, %55 ], [ %51, %50 ]
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #12
  br label %61

61:                                               ; preds = %57, %60
  %62 = load atomic i32, i32* %19 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %76

65:                                               ; preds = %61
  %66 = load i32, i32* %23, align 4
  %67 = zext i32 %66 to i33
  %68 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %67, i33 1) #12
  %69 = extractvalue { i33, i1 } %68, 1
  %70 = extractvalue { i33, i1 } %68, 0
  %71 = icmp slt i33 %70, 0
  %72 = or i1 %69, %71
  br i1 %72, label %73, label %74, !prof !3

73:                                               ; preds = %65
  tail call void @llvm.trap() #12
  unreachable

74:                                               ; preds = %65
  %75 = trunc i33 %70 to i32
  store i32 %75, i32* %23, align 4
  br label %76

76:                                               ; preds = %61, %74
  %77 = bitcast %"class.WTF::StringAppend.5"* %8 to i64*
  store i64 ptrtoint ([4 x i8]* @.str to i64), i64* %77, align 8
  %78 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %78, align 8
  %79 = load atomic i32, i32* %19 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %97

82:                                               ; preds = %76
  %83 = load i32, i32* %23, align 4
  %84 = zext i32 %83 to i33
  %85 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %84, i33 1) #12
  %86 = extractvalue { i33, i1 } %85, 1
  %87 = extractvalue { i33, i1 } %85, 0
  %88 = icmp slt i33 %87, 0
  %89 = or i1 %86, %88
  br i1 %89, label %90, label %91, !prof !3

90:                                               ; preds = %82
  tail call void @llvm.trap() #12
  unreachable

91:                                               ; preds = %82
  %92 = trunc i33 %87 to i32
  store i32 %92, i32* %23, align 4
  br label %97

93:                                               ; preds = %1
  %94 = bitcast %"class.WTF::StringAppend.5"* %8 to i64*
  store i64 ptrtoint ([4 x i8]* @.str to i64), i64* %94, align 8
  %95 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %95, align 8
  %96 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %96, align 8
  br label %109

97:                                               ; preds = %91, %76
  %98 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %98, align 8
  %99 = load atomic i32, i32* %19 monotonic, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = load i32, i32* %23, align 4
  br i1 %101, label %103, label %105

103:                                              ; preds = %97
  %104 = add i32 %102, -1
  store i32 %104, i32* %23, align 4
  br label %105

105:                                              ; preds = %103, %97
  %106 = phi i32 [ %104, %103 ], [ %102, %97 ]
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #12
  br label %109

109:                                              ; preds = %93, %105, %108
  %110 = phi %"class.WTF::StringImpl"** [ %95, %93 ], [ %78, %105 ], [ %78, %108 ]
  %111 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 1
  %112 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"* %111) #12
  call void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.4"* nonnull sret %7, %"class.WTF::StringAppend.5"* nonnull dereferenceable(24) %8, %"class.WTF::StringImpl"* %112)
  %113 = bitcast %"class.WTF::StringAppend.4"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %113)
  %114 = bitcast %"class.WTF::StringAppend.4"* %7 to i64*
  %115 = load i64, i64* %114, align 8, !noalias !7
  %116 = bitcast %"class.WTF::StringAppend.4"* %2 to i64*
  store i64 %115, i64* %116, align 8, !noalias !7
  %117 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %7, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %117, align 8, !noalias !7
  %119 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %118, %"class.WTF::StringImpl"** %119, align 8, !noalias !7
  %120 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %120, label %138, label %121

121:                                              ; preds = %109
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %138

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i33
  %130 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %129, i33 1) #12
  %131 = extractvalue { i33, i1 } %130, 1
  %132 = extractvalue { i33, i1 } %130, 0
  %133 = icmp slt i33 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %136, !prof !3

135:                                              ; preds = %126
  call void @llvm.trap() #12
  unreachable

136:                                              ; preds = %126
  %137 = trunc i33 %132 to i32
  store i32 %137, i32* %127, align 4
  br label %138

138:                                              ; preds = %136, %121, %109
  %139 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %2, i64 0, i32 0, i32 1
  %140 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %7, i64 0, i32 0, i32 1
  %141 = bitcast i8** %140 to i64*
  %142 = load i64, i64* %141, align 8, !noalias !7
  %143 = bitcast i8** %139 to i64*
  store i64 %142, i64* %143, align 8, !noalias !7
  %144 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %7, i64 0, i32 1, i32 0, i32 0
  %145 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8, !noalias !7
  %146 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %2, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %145, %"class.WTF::StringImpl"** %146, align 8, !noalias !7
  %147 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %147, label %165, label %148

148:                                              ; preds = %138
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %165

153:                                              ; preds = %148
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i33
  %157 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %156, i33 1) #12
  %158 = extractvalue { i33, i1 } %157, 1
  %159 = extractvalue { i33, i1 } %157, 0
  %160 = icmp slt i33 %159, 0
  %161 = or i1 %158, %160
  br i1 %161, label %162, label %163, !prof !3

162:                                              ; preds = %153
  call void @llvm.trap() #12
  unreachable

163:                                              ; preds = %153
  %164 = trunc i33 %159 to i32
  store i32 %164, i32* %154, align 4
  br label %165

165:                                              ; preds = %138, %148, %163
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.3"* nonnull %6, %"class.WTF::StringAppend.4"* nonnull byval(%"class.WTF::StringAppend.4") align 8 %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %113)
  %166 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 2
  %167 = call %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"* %166) #12
  call void @_ZN3WTFplINS_12StringAppendINS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_S4_EENS1_INS1_IT_T0_EET1_EERKSA_SB_(%"class.WTF::StringAppend.2"* nonnull sret %5, %"class.WTF::StringAppend.3"* nonnull dereferenceable(40) %6, %"class.WTF::StringImpl"* %167)
  call void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKSB_SC_(%"class.WTF::StringAppend.1"* nonnull sret %4, %"class.WTF::StringAppend.2"* nonnull dereferenceable(48) %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  %168 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %0, i64 0, i32 3
  %169 = call %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"* %168) #12
  call void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_EES4_EES3_S4_EENS1_INS1_IT_T0_EET1_EERKSC_SD_(%"class.WTF::StringAppend"* nonnull sret %3, %"class.WTF::StringAppend.1"* nonnull dereferenceable(56) %4, %"class.WTF::StringImpl"* %169)
  %170 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %3)
  %171 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 1, i32 0, i32 0
  %172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %171, align 8
  %173 = icmp eq %"class.WTF::StringImpl"* %172, null
  br i1 %173, label %187, label %174

174:                                              ; preds = %165
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  br i1 %178, label %181, label %183

181:                                              ; preds = %174
  %182 = add i32 %180, -1
  store i32 %182, i32* %179, align 4
  br label %183

183:                                              ; preds = %181, %174
  %184 = phi i32 [ %182, %181 ], [ %180, %174 ]
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %172) #12
  br label %187

187:                                              ; preds = %165, %183, %186
  %188 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %189 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %188, align 8
  %190 = icmp eq %"class.WTF::StringImpl"* %189, null
  br i1 %190, label %204, label %191

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %193 = load atomic i32, i32* %192 monotonic, align 4
  %194 = and i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 0
  %197 = load i32, i32* %196, align 4
  br i1 %195, label %198, label %200

198:                                              ; preds = %191
  %199 = add i32 %197, -1
  store i32 %199, i32* %196, align 4
  br label %200

200:                                              ; preds = %198, %191
  %201 = phi i32 [ %199, %198 ], [ %197, %191 ]
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %200
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %189) #12
  br label %204

204:                                              ; preds = %203, %200, %187
  %205 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %205, align 8
  %207 = icmp eq %"class.WTF::StringImpl"* %206, null
  br i1 %207, label %221, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = load atomic i32, i32* %209 monotonic, align 4
  %211 = and i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 0
  %214 = load i32, i32* %213, align 4
  br i1 %212, label %215, label %217

215:                                              ; preds = %208
  %216 = add i32 %214, -1
  store i32 %216, i32* %213, align 4
  br label %217

217:                                              ; preds = %215, %208
  %218 = phi i32 [ %216, %215 ], [ %214, %208 ]
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %206) #12
  br label %221

221:                                              ; preds = %220, %217, %204
  %222 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %223 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %222, align 8
  %224 = icmp eq %"class.WTF::StringImpl"* %223, null
  br i1 %224, label %238, label %225

225:                                              ; preds = %221
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %223, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %227 = load atomic i32, i32* %226 monotonic, align 4
  %228 = and i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %223, i64 0, i32 0
  %231 = load i32, i32* %230, align 4
  br i1 %229, label %232, label %234

232:                                              ; preds = %225
  %233 = add i32 %231, -1
  store i32 %233, i32* %230, align 4
  br label %234

234:                                              ; preds = %232, %225
  %235 = phi i32 [ %233, %232 ], [ %231, %225 ]
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %238

237:                                              ; preds = %234
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %223) #12
  br label %238

238:                                              ; preds = %221, %234, %237
  %239 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %240 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %239, align 8
  %241 = icmp eq %"class.WTF::StringImpl"* %240, null
  br i1 %241, label %255, label %242

242:                                              ; preds = %238
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %240, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %244 = load atomic i32, i32* %243 monotonic, align 4
  %245 = and i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %240, i64 0, i32 0
  %248 = load i32, i32* %247, align 4
  br i1 %246, label %249, label %251

249:                                              ; preds = %242
  %250 = add i32 %248, -1
  store i32 %250, i32* %247, align 4
  br label %251

251:                                              ; preds = %249, %242
  %252 = phi i32 [ %250, %249 ], [ %248, %242 ]
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %255

254:                                              ; preds = %251
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %240) #12
  br label %255

255:                                              ; preds = %254, %251, %238
  %256 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %257 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %256, align 8
  %258 = icmp eq %"class.WTF::StringImpl"* %257, null
  br i1 %258, label %272, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %261 = load atomic i32, i32* %260 monotonic, align 4
  %262 = and i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  br i1 %263, label %266, label %268

266:                                              ; preds = %259
  %267 = add i32 %265, -1
  store i32 %267, i32* %264, align 4
  br label %268

268:                                              ; preds = %266, %259
  %269 = phi i32 [ %267, %266 ], [ %265, %259 ]
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %268
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %257) #12
  br label %272

272:                                              ; preds = %271, %268, %255
  %273 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %274 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  %275 = icmp eq %"class.WTF::StringImpl"* %274, null
  br i1 %275, label %289, label %276

276:                                              ; preds = %272
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load atomic i32, i32* %277 monotonic, align 4
  %279 = and i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 0
  %282 = load i32, i32* %281, align 4
  br i1 %280, label %283, label %285

283:                                              ; preds = %276
  %284 = add i32 %282, -1
  store i32 %284, i32* %281, align 4
  br label %285

285:                                              ; preds = %283, %276
  %286 = phi i32 [ %284, %283 ], [ %282, %276 ]
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %289

288:                                              ; preds = %285
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %274) #12
  br label %289

289:                                              ; preds = %272, %285, %288
  %290 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %5, i64 0, i32 1, i32 0, i32 0
  %291 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %290, align 8
  %292 = icmp eq %"class.WTF::StringImpl"* %291, null
  br i1 %292, label %306, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = load atomic i32, i32* %294 monotonic, align 4
  %296 = and i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 0
  %299 = load i32, i32* %298, align 4
  br i1 %297, label %300, label %302

300:                                              ; preds = %293
  %301 = add i32 %299, -1
  store i32 %301, i32* %298, align 4
  br label %302

302:                                              ; preds = %300, %293
  %303 = phi i32 [ %301, %300 ], [ %299, %293 ]
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %302
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %291) #12
  br label %306

306:                                              ; preds = %305, %302, %289
  %307 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %308 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %307, align 8
  %309 = icmp eq %"class.WTF::StringImpl"* %308, null
  br i1 %309, label %323, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %308, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %312 = load atomic i32, i32* %311 monotonic, align 4
  %313 = and i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %308, i64 0, i32 0
  %316 = load i32, i32* %315, align 4
  br i1 %314, label %317, label %319

317:                                              ; preds = %310
  %318 = add i32 %316, -1
  store i32 %318, i32* %315, align 4
  br label %319

319:                                              ; preds = %317, %310
  %320 = phi i32 [ %318, %317 ], [ %316, %310 ]
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %323

322:                                              ; preds = %319
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %308) #12
  br label %323

323:                                              ; preds = %322, %319, %306
  %324 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %325 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %324, align 8
  %326 = icmp eq %"class.WTF::StringImpl"* %325, null
  br i1 %326, label %340, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  br i1 %331, label %334, label %336

334:                                              ; preds = %327
  %335 = add i32 %333, -1
  store i32 %335, i32* %332, align 4
  br label %336

336:                                              ; preds = %334, %327
  %337 = phi i32 [ %335, %334 ], [ %333, %327 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %340

339:                                              ; preds = %336
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %325) #12
  br label %340

340:                                              ; preds = %323, %336, %339
  %341 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %6, i64 0, i32 0, i32 1, i32 0, i32 0
  %342 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %341, align 8
  %343 = icmp eq %"class.WTF::StringImpl"* %342, null
  br i1 %343, label %357, label %344

344:                                              ; preds = %340
  %345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %342, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %346 = load atomic i32, i32* %345 monotonic, align 4
  %347 = and i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %342, i64 0, i32 0
  %350 = load i32, i32* %349, align 4
  br i1 %348, label %351, label %353

351:                                              ; preds = %344
  %352 = add i32 %350, -1
  store i32 %352, i32* %349, align 4
  br label %353

353:                                              ; preds = %351, %344
  %354 = phi i32 [ %352, %351 ], [ %350, %344 ]
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %356, label %357

356:                                              ; preds = %353
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %342) #12
  br label %357

357:                                              ; preds = %356, %353, %340
  %358 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %359 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %358, align 8
  %360 = icmp eq %"class.WTF::StringImpl"* %359, null
  br i1 %360, label %374, label %361

361:                                              ; preds = %357
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %363 = load atomic i32, i32* %362 monotonic, align 4
  %364 = and i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 0
  %367 = load i32, i32* %366, align 4
  br i1 %365, label %368, label %370

368:                                              ; preds = %361
  %369 = add i32 %367, -1
  store i32 %369, i32* %366, align 4
  br label %370

370:                                              ; preds = %368, %361
  %371 = phi i32 [ %369, %368 ], [ %367, %361 ]
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %374

373:                                              ; preds = %370
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %359) #12
  br label %374

374:                                              ; preds = %357, %370, %373
  %375 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8
  %376 = icmp eq %"class.WTF::StringImpl"* %375, null
  br i1 %376, label %390, label %377

377:                                              ; preds = %374
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %375, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %379 = load atomic i32, i32* %378 monotonic, align 4
  %380 = and i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %375, i64 0, i32 0
  %383 = load i32, i32* %382, align 4
  br i1 %381, label %384, label %386

384:                                              ; preds = %377
  %385 = add i32 %383, -1
  store i32 %385, i32* %382, align 4
  br label %386

386:                                              ; preds = %384, %377
  %387 = phi i32 [ %385, %384 ], [ %383, %377 ]
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %389, label %390

389:                                              ; preds = %386
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %375) #12
  br label %390

390:                                              ; preds = %389, %386, %374
  %391 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %117, align 8
  %392 = icmp eq %"class.WTF::StringImpl"* %391, null
  br i1 %392, label %406, label %393

393:                                              ; preds = %390
  %394 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %391, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %395 = load atomic i32, i32* %394 monotonic, align 4
  %396 = and i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %391, i64 0, i32 0
  %399 = load i32, i32* %398, align 4
  br i1 %397, label %400, label %402

400:                                              ; preds = %393
  %401 = add i32 %399, -1
  store i32 %401, i32* %398, align 4
  br label %402

402:                                              ; preds = %400, %393
  %403 = phi i32 [ %401, %400 ], [ %399, %393 ]
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %405, label %406

405:                                              ; preds = %402
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %391) #12
  br label %406

406:                                              ; preds = %390, %402, %405
  %407 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %408 = icmp eq %"class.WTF::StringImpl"* %407, null
  br i1 %408, label %422, label %409

409:                                              ; preds = %406
  %410 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %407, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %411 = load atomic i32, i32* %410 monotonic, align 4
  %412 = and i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %407, i64 0, i32 0
  %415 = load i32, i32* %414, align 4
  br i1 %413, label %416, label %418

416:                                              ; preds = %409
  %417 = add i32 %415, -1
  store i32 %417, i32* %414, align 4
  br label %418

418:                                              ; preds = %416, %409
  %419 = phi i32 [ %417, %416 ], [ %415, %409 ]
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %422

421:                                              ; preds = %418
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %407) #12
  br label %422

422:                                              ; preds = %406, %418, %421
  br i1 %17, label %448, label %423

423:                                              ; preds = %422
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %425 = load atomic i32, i32* %424 monotonic, align 4
  %426 = and i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %429 = load i32, i32* %428, align 4
  br i1 %427, label %430, label %432

430:                                              ; preds = %423
  %431 = add i32 %429, -1
  store i32 %431, i32* %428, align 4
  br label %432

432:                                              ; preds = %430, %423
  %433 = phi i32 [ %431, %430 ], [ %429, %423 ]
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %437

435:                                              ; preds = %432
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #12
  %436 = load i32, i32* %428, align 4
  br label %437

437:                                              ; preds = %432, %435
  %438 = phi i32 [ %433, %432 ], [ %436, %435 ]
  %439 = load atomic i32, i32* %424 monotonic, align 4
  %440 = and i32 %439, 2
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %442, label %444

442:                                              ; preds = %437
  %443 = add i32 %438, -1
  store i32 %443, i32* %428, align 4
  br label %444

444:                                              ; preds = %442, %437
  %445 = phi i32 [ %443, %442 ], [ %438, %437 ]
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %448

447:                                              ; preds = %444
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #12
  br label %448

448:                                              ; preds = %422, %444, %447
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #12
  ret %"class.WTF::StringImpl"* %170
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_EES4_EES3_S4_EENS1_INS1_IT_T0_EET1_EERKSC_SD_(%"class.WTF::StringAppend"* noalias sret, %"class.WTF::StringAppend.1"* dereferenceable(56), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.1", align 8
  %5 = bitcast %"class.WTF::StringAppend.1"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.WTF::StringAppend.1"* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #12
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %27, %12, %3
  %30 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %37, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %29
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #12
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !3

53:                                               ; preds = %44
  tail call void @llvm.trap() #12
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %54, %39, %29
  %57 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 0, i32 1
  %58 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 1
  %59 = bitcast i8** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast i8** %57 to i64*
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %63, %"class.WTF::StringImpl"** %64, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %65, label %83, label %66

66:                                               ; preds = %56
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %83

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = zext i32 %73 to i33
  %75 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %74, i33 1) #12
  %76 = extractvalue { i33, i1 } %75, 1
  %77 = extractvalue { i33, i1 } %75, 0
  %78 = icmp slt i33 %77, 0
  %79 = or i1 %76, %78
  br i1 %79, label %80, label %81, !prof !3

80:                                               ; preds = %71
  tail call void @llvm.trap() #12
  unreachable

81:                                               ; preds = %71
  %82 = trunc i33 %77 to i32
  store i32 %82, i32* %72, align 4
  br label %83

83:                                               ; preds = %56, %66, %81
  %84 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %4, i64 0, i32 1
  %85 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast i8** %84 to i64*
  store i64 %87, i64* %88, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %89, label %107, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %108

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i33
  %99 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #12
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !3

104:                                              ; preds = %95
  tail call void @llvm.trap() #12
  unreachable

105:                                              ; preds = %95
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %96, align 4
  br label %108

107:                                              ; preds = %83
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EC2ES9_S3_(%"class.WTF::StringAppend"* %0, %"class.WTF::StringAppend.1"* nonnull byval(%"class.WTF::StringAppend.1") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %120

108:                                              ; preds = %90, %105
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EC2ES9_S3_(%"class.WTF::StringAppend"* %0, %"class.WTF::StringAppend.1"* nonnull byval(%"class.WTF::StringAppend.1") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %109 = load atomic i32, i32* %91 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %113 = load i32, i32* %112, align 4
  br i1 %111, label %114, label %116

114:                                              ; preds = %108
  %115 = add i32 %113, -1
  store i32 %115, i32* %112, align 4
  br label %116

116:                                              ; preds = %114, %108
  %117 = phi i32 [ %115, %114 ], [ %113, %108 ]
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %116
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %120

120:                                              ; preds = %107, %116, %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKSB_SC_(%"class.WTF::StringAppend.1"* noalias sret, %"class.WTF::StringAppend.2"* dereferenceable(48), i8*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.2", align 8
  %5 = bitcast %"class.WTF::StringAppend.2"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.WTF::StringAppend.2"* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #12
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %27, %12, %3
  %30 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %37, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %29
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #12
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !3

53:                                               ; preds = %44
  tail call void @llvm.trap() #12
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %54, %39, %29
  %57 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %4, i64 0, i32 0, i32 1
  %58 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 1
  %59 = bitcast i8** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast i8** %57 to i64*
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 1, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %63, %"class.WTF::StringImpl"** %64, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %65, label %83, label %66

66:                                               ; preds = %56
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %83

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = zext i32 %73 to i33
  %75 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %74, i33 1) #12
  %76 = extractvalue { i33, i1 } %75, 1
  %77 = extractvalue { i33, i1 } %75, 0
  %78 = icmp slt i33 %77, 0
  %79 = or i1 %76, %78
  br i1 %79, label %80, label %81, !prof !3

80:                                               ; preds = %71
  tail call void @llvm.trap() #12
  unreachable

81:                                               ; preds = %71
  %82 = trunc i33 %77 to i32
  store i32 %82, i32* %72, align 4
  br label %83

83:                                               ; preds = %56, %66, %81
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EC2ES8_S2_(%"class.WTF::StringAppend.1"* %0, %"class.WTF::StringAppend.2"* nonnull byval(%"class.WTF::StringAppend.2") align 8 %4, i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendINS1_INS1_IPKcNS_6StringEEES3_EES4_EES3_S4_EENS1_INS1_IT_T0_EET1_EERKSA_SB_(%"class.WTF::StringAppend.2"* noalias sret, %"class.WTF::StringAppend.3"* dereferenceable(40), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.3", align 8
  %5 = bitcast %"class.WTF::StringAppend.3"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.WTF::StringAppend.3"* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #12
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %27, %12, %3
  %30 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %4, i64 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 0, i32 0, i32 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %37, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %29
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #12
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !3

53:                                               ; preds = %44
  tail call void @llvm.trap() #12
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %29, %39, %54
  %57 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %4, i64 0, i32 1
  %58 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 1
  %59 = bitcast i8** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast i8** %57 to i64*
  store i64 %60, i64* %61, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %81

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #12
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %68
  tail call void @llvm.trap() #12
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %81

80:                                               ; preds = %56
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EC2ES7_S3_(%"class.WTF::StringAppend.2"* %0, %"class.WTF::StringAppend.3"* nonnull byval(%"class.WTF::StringAppend.3") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %93

81:                                               ; preds = %63, %78
  tail call void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EC2ES7_S3_(%"class.WTF::StringAppend.2"* %0, %"class.WTF::StringAppend.3"* nonnull byval(%"class.WTF::StringAppend.3") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %82 = load atomic i32, i32* %64 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %81
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %81
  %90 = phi i32 [ %88, %87 ], [ %86, %81 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %93

93:                                               ; preds = %80, %89, %92
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.4"* noalias sret, %"class.WTF::StringAppend.5"* dereferenceable(24), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend.5", align 8
  %5 = bitcast %"class.WTF::StringAppend.5"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.WTF::StringAppend.5"* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #12
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %3, %12, %27
  %30 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %4, i64 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %1, i64 0, i32 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #12
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !3

50:                                               ; preds = %41
  tail call void @llvm.trap() #12
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %54

53:                                               ; preds = %29
  tail call void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.4"* %0, %"class.WTF::StringAppend.5"* nonnull byval(%"class.WTF::StringAppend.5") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %66

54:                                               ; preds = %36, %51
  tail call void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.4"* %0, %"class.WTF::StringAppend.5"* nonnull byval(%"class.WTF::StringAppend.5") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %55 = load atomic i32, i32* %37 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %54
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %54
  %63 = phi i32 [ %61, %60 ], [ %59, %54 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %66

66:                                               ; preds = %53, %62, %65
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EcvS3_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = tail call zeroext i1 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6Is8BitEv(%"class.WTF::StringAppend"* %0)
  br i1 %6, label %7, label %67

7:                                                ; preds = %1
  %8 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %9 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %10 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %9, i8** nonnull dereferenceable(8) %4) #12
  %11 = load i8*, i8** %4, align 8
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %13 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  %14 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %16 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 24, i1 false) #12
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %7
  %20 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %27

21:                                               ; preds = %7
  %22 = ptrtoint %"class.WTF::StringImpl"* %17 to i64
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 1
  %26 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  br label %27

27:                                               ; preds = %19, %21
  %28 = phi i8* [ null, %19 ], [ %26, %21 ]
  %29 = phi i64 [ %20, %19 ], [ %22, %21 ]
  %30 = phi i32 [ 0, %19 ], [ %24, %21 ]
  %31 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %29, i64* %31, align 8
  store i8* %28, i8** %14, align 8
  store i32 %30, i32* %15, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.1"* %12, i8* %11) #12
  %32 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  %33 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.1"* %12) #12
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %11, i64 %34
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %32, i8* %35) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  %36 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %36, label %127, label %37

37:                                               ; preds = %27
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  br i1 %41, label %44, label %54

44:                                               ; preds = %37
  %45 = zext i32 %43 to i33
  %46 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #12
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !3

51:                                               ; preds = %44
  call void @llvm.trap() #12
  unreachable

52:                                               ; preds = %44
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %42, align 4
  br label %54

54:                                               ; preds = %37, %52
  %55 = phi i32 [ %53, %52 ], [ %43, %37 ]
  %56 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %57 = load atomic i32, i32* %38 monotonic, align 4
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %62 = add i32 %55, -1
  store i32 %62, i32* %61, align 4
  br label %63

63:                                               ; preds = %60, %54
  %64 = phi i32 [ %62, %60 ], [ %55, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %127

66:                                               ; preds = %63
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %10) #12
  br label %127

67:                                               ; preds = %1
  %68 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #12
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %69 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %70 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %69, i16** nonnull dereferenceable(8) %5) #12
  %71 = load i16*, i16** %5, align 8
  %72 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %73 = bitcast %"class.WTF::StringTypeAdapter.10"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #12
  %74 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %2, i64 0, i32 0, i32 0, i32 1
  %75 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %2, i64 0, i32 0, i32 0, i32 2
  %76 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -86, i64 24, i1 false) #12
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %67
  %80 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %87

81:                                               ; preds = %67
  %82 = ptrtoint %"class.WTF::StringImpl"* %77 to i64
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 1
  %86 = bitcast %"class.WTF::StringImpl"* %85 to i8*
  br label %87

87:                                               ; preds = %79, %81
  %88 = phi i8* [ null, %79 ], [ %86, %81 ]
  %89 = phi i64 [ %80, %79 ], [ %82, %81 ]
  %90 = phi i32 [ 0, %79 ], [ %84, %81 ]
  %91 = bitcast %"class.WTF::StringTypeAdapter.10"* %2 to i64*
  store i64 %89, i64* %91, align 8
  store i8* %88, i8** %74, align 8
  store i32 %90, i32* %75, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.1"* %72, i16* %71) #12
  %92 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %2, i64 0, i32 0
  %93 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.1"* %72) #12
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i16, i16* %71, i64 %94
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %92, i16* %95) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #12
  %96 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %96, label %127, label %97

97:                                               ; preds = %87
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load atomic i32, i32* %98 monotonic, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  br i1 %101, label %104, label %114

104:                                              ; preds = %97
  %105 = zext i32 %103 to i33
  %106 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %105, i33 1) #12
  %107 = extractvalue { i33, i1 } %106, 1
  %108 = extractvalue { i33, i1 } %106, 0
  %109 = icmp slt i33 %108, 0
  %110 = or i1 %107, %109
  br i1 %110, label %111, label %112, !prof !3

111:                                              ; preds = %104
  call void @llvm.trap() #12
  unreachable

112:                                              ; preds = %104
  %113 = trunc i33 %108 to i32
  store i32 %113, i32* %102, align 4
  br label %114

114:                                              ; preds = %97, %112
  %115 = phi i32 [ %113, %112 ], [ %103, %97 ]
  %116 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  %117 = load atomic i32, i32* %98 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %114
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 0
  %122 = add i32 %115, -1
  store i32 %122, i32* %121, align 4
  br label %123

123:                                              ; preds = %120, %114
  %124 = phi i32 [ %122, %120 ], [ %115, %114 ]
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %123
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %70) #12
  br label %127

127:                                              ; preds = %126, %123, %87, %66, %63, %27
  %128 = phi i8* [ %8, %27 ], [ %8, %63 ], [ %8, %66 ], [ %68, %87 ], [ %68, %123 ], [ %68, %126 ]
  %129 = phi i64 [ 0, %27 ], [ %56, %63 ], [ %56, %66 ], [ 0, %87 ], [ %116, %123 ], [ %116, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %128) #12
  %130 = inttoptr i64 %129 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %130
}

declare %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.8"* noalias sret, %"class.WTF::StringAppend.9"* dereferenceable(16), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.9", %"class.WTF::StringAppend.9"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #12
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %12
  tail call void @llvm.trap() #12
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %3, %7, %22
  %25 = getelementptr inbounds %"class.WTF::StringAppend.9", %"class.WTF::StringAppend.9"* %1, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %48

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #12
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !3

43:                                               ; preds = %34
  tail call void @llvm.trap() #12
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %48

46:                                               ; preds = %24
  %47 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend.8"* %0, %"class.WTF::StringImpl"* %5, i8* %47, %"class.WTF::StringImpl"* null)
  br label %61

48:                                               ; preds = %29, %44
  %49 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend.8"* %0, %"class.WTF::StringImpl"* %5, i8* %49, %"class.WTF::StringImpl"* nonnull %2)
  %50 = load atomic i32, i32* %30 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  br i1 %52, label %55, label %57

55:                                               ; preds = %48
  %56 = add i32 %54, -1
  store i32 %56, i32* %53, align 4
  br label %57

57:                                               ; preds = %55, %48
  %58 = phi i32 [ %56, %55 ], [ %54, %48 ]
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %61

61:                                               ; preds = %46, %57, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EcvS1_Ev(%"class.WTF::StringAppend.7"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false) #12
  %10 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %5, i8* %10) #12
  %11 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %14 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  %17 = select i1 %16, %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"* %15
  %18 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 16, i1 false) #12
  %20 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %20) #12
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #12
  br i1 %24, label %25, label %26

25:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #12
  br label %75

26:                                               ; preds = %1
  %27 = icmp eq %"class.WTF::StringImpl"* %12, null
  %28 = select i1 %27, %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"* %12
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #12
  br i1 %32, label %75, label %33

33:                                               ; preds = %26
  %34 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %35 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.7"* %0)
  %36 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %35, i8** nonnull dereferenceable(8) %6) #12
  %37 = load i8*, i8** %6, align 8
  %38 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0
  %39 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 16, i1 false) #12
  %40 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i8* %40) #12
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend.8"* %38, i8* %37) #12
  %41 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.8"* %38) #12
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %37, i64 %42
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i8* %43) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #12
  %44 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %44, label %117, label %45

45:                                               ; preds = %33
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %62

52:                                               ; preds = %45
  %53 = zext i32 %51 to i33
  %54 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %53, i33 1) #12
  %55 = extractvalue { i33, i1 } %54, 1
  %56 = extractvalue { i33, i1 } %54, 0
  %57 = icmp slt i33 %56, 0
  %58 = or i1 %55, %57
  br i1 %58, label %59, label %60, !prof !3

59:                                               ; preds = %52
  call void @llvm.trap() #12
  unreachable

60:                                               ; preds = %52
  %61 = trunc i33 %56 to i32
  store i32 %61, i32* %50, align 4
  br label %62

62:                                               ; preds = %45, %60
  %63 = phi i32 [ %61, %60 ], [ %51, %45 ]
  %64 = ptrtoint %"class.WTF::StringImpl"* %36 to i64
  %65 = load atomic i32, i32* %46 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %70 = add i32 %63, -1
  store i32 %70, i32* %69, align 4
  br label %71

71:                                               ; preds = %68, %62
  %72 = phi i32 [ %70, %68 ], [ %63, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %117

74:                                               ; preds = %71
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #12
  br label %117

75:                                               ; preds = %26, %25
  %76 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #12
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %77 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.7"* %0)
  %78 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %77, i16** nonnull dereferenceable(8) %7) #12
  %79 = load i16*, i16** %7, align 8
  %80 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0
  %81 = bitcast %"class.WTF::StringTypeAdapter.13"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 16, i1 false) #12
  %82 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %2, i8* %82) #12
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend.8"* %80, i16* %79) #12
  %83 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.8"* %80) #12
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i16, i16* %79, i64 %84
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"* nonnull %2, i16* %85) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #12
  %86 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %86, label %117, label %87

87:                                               ; preds = %75
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  br i1 %91, label %94, label %104

94:                                               ; preds = %87
  %95 = zext i32 %93 to i33
  %96 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #12
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !3

101:                                              ; preds = %94
  call void @llvm.trap() #12
  unreachable

102:                                              ; preds = %94
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %92, align 4
  br label %104

104:                                              ; preds = %87, %102
  %105 = phi i32 [ %103, %102 ], [ %93, %87 ]
  %106 = ptrtoint %"class.WTF::StringImpl"* %78 to i64
  %107 = load atomic i32, i32* %88 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %112 = add i32 %105, -1
  store i32 %112, i32* %111, align 4
  br label %113

113:                                              ; preds = %110, %104
  %114 = phi i32 [ %112, %110 ], [ %105, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #12
  br label %117

117:                                              ; preds = %116, %113, %75, %74, %71, %33
  %118 = phi i8* [ %34, %33 ], [ %34, %71 ], [ %34, %74 ], [ %76, %75 ], [ %76, %113 ], [ %76, %116 ]
  %119 = phi i64 [ 0, %33 ], [ %64, %71 ], [ %64, %74 ], [ 0, %75 ], [ %106, %113 ], [ %106, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #12
  %120 = inttoptr i64 %119 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %120
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #10

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.4"*, %"class.WTF::StringAppend.5"* byval(%"class.WTF::StringAppend.5") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.5"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.4"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #12
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #12
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %0, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %1, i64 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %35, label %65, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %53

43:                                               ; preds = %36
  %44 = zext i32 %42 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #12
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !3

50:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

51:                                               ; preds = %43
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %41, align 4
  br label %53

53:                                               ; preds = %36, %51
  %54 = phi i32 [ %52, %51 ], [ %42, %36 ]
  %55 = load atomic i32, i32* %37 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %60 = add i32 %54, -1
  store i32 %60, i32* %59, align 4
  br label %61

61:                                               ; preds = %58, %53
  %62 = phi i32 [ %60, %58 ], [ %54, %53 ]
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %65

65:                                               ; preds = %28, %61, %64
  br i1 %10, label %79, label %66

66:                                               ; preds = %65
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %79

79:                                               ; preds = %65, %75, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.3"*, %"class.WTF::StringAppend.4"* byval(%"class.WTF::StringAppend.4") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.4"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.3"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #12
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #12
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %3
  %29 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %1, i64 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %1, i64 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %57

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #12
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %57

55:                                               ; preds = %28
  %56 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 1
  store i8* %2, i8** %56, align 8
  br label %70

57:                                               ; preds = %38, %53
  %58 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 1
  store i8* %2, i8** %58, align 8
  %59 = load atomic i32, i32* %39 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #12
  br label %70

70:                                               ; preds = %55, %69, %66
  br i1 %10, label %84, label %71

71:                                               ; preds = %70
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %84

84:                                               ; preds = %70, %80, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EC2ES7_S3_(%"class.WTF::StringAppend.2"*, %"class.WTF::StringAppend.3"* byval(%"class.WTF::StringAppend.3") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.3"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.2"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #12
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #12
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %3
  %29 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #12
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %28, %38, %53
  %56 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %1, i64 0, i32 1
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast i8** %56 to i64*
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %61, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %62, label %92, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #12
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %70
  tail call void @llvm.trap() #12
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = load atomic i32, i32* %64 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %87 = add i32 %81, -1
  store i32 %87, i32* %86, align 4
  br label %88

88:                                               ; preds = %85, %80
  %89 = phi i32 [ %87, %85 ], [ %81, %80 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %92

92:                                               ; preds = %55, %88, %91
  br i1 %37, label %106, label %93

93:                                               ; preds = %92
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  br i1 %97, label %100, label %102

100:                                              ; preds = %93
  %101 = add i32 %99, -1
  store i32 %101, i32* %98, align 4
  br label %102

102:                                              ; preds = %100, %93
  %103 = phi i32 [ %101, %100 ], [ %99, %93 ]
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #12
  br label %106

106:                                              ; preds = %105, %102, %92
  br i1 %10, label %120, label %107

107:                                              ; preds = %106
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %113 = load i32, i32* %112, align 4
  br i1 %111, label %114, label %116

114:                                              ; preds = %107
  %115 = add i32 %113, -1
  store i32 %115, i32* %112, align 4
  br label %116

116:                                              ; preds = %114, %107
  %117 = phi i32 [ %115, %114 ], [ %113, %107 ]
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %116
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %120

120:                                              ; preds = %106, %116, %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EC2ES8_S2_(%"class.WTF::StringAppend.1"*, %"class.WTF::StringAppend.2"* byval(%"class.WTF::StringAppend.2") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.2"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.1"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #12
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #12
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %3
  %29 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #12
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %28
  %56 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 1
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast i8** %56 to i64*
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 1, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %62, %"class.WTF::StringImpl"** %63, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %64, label %82, label %65

65:                                               ; preds = %55
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %84

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i33
  %74 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %73, i33 1) #12
  %75 = extractvalue { i33, i1 } %74, 1
  %76 = extractvalue { i33, i1 } %74, 0
  %77 = icmp slt i33 %76, 0
  %78 = or i1 %75, %77
  br i1 %78, label %79, label %80, !prof !3

79:                                               ; preds = %70
  tail call void @llvm.trap() #12
  unreachable

80:                                               ; preds = %70
  %81 = trunc i33 %76 to i32
  store i32 %81, i32* %71, align 4
  br label %84

82:                                               ; preds = %55
  %83 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 1
  store i8* %2, i8** %83, align 8
  br label %97

84:                                               ; preds = %65, %80
  %85 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 1
  store i8* %2, i8** %85, align 8
  %86 = load atomic i32, i32* %66 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  br i1 %88, label %91, label %93

91:                                               ; preds = %84
  %92 = add i32 %90, -1
  store i32 %92, i32* %89, align 4
  br label %93

93:                                               ; preds = %91, %84
  %94 = phi i32 [ %92, %91 ], [ %90, %84 ]
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #12
  br label %97

97:                                               ; preds = %82, %96, %93
  br i1 %37, label %111, label %98

98:                                               ; preds = %97
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  br i1 %102, label %105, label %107

105:                                              ; preds = %98
  %106 = add i32 %104, -1
  store i32 %106, i32* %103, align 4
  br label %107

107:                                              ; preds = %105, %98
  %108 = phi i32 [ %106, %105 ], [ %104, %98 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #12
  br label %111

111:                                              ; preds = %110, %107, %97
  br i1 %10, label %125, label %112

112:                                              ; preds = %111
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  br i1 %116, label %119, label %121

119:                                              ; preds = %112
  %120 = add i32 %118, -1
  store i32 %120, i32* %117, align 4
  br label %121

121:                                              ; preds = %119, %112
  %122 = phi i32 [ %120, %119 ], [ %118, %112 ]
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %125

125:                                              ; preds = %111, %121, %124
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_EC2ES9_S3_(%"class.WTF::StringAppend"*, %"class.WTF::StringAppend.1"* byval(%"class.WTF::StringAppend.1") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.1"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #12
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #12
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %3
  %29 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #12
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %28
  %56 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 0, i32 1
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast i8** %56 to i64*
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %62, %"class.WTF::StringImpl"** %63, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %64, label %82, label %65

65:                                               ; preds = %55
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i33
  %74 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %73, i33 1) #12
  %75 = extractvalue { i33, i1 } %74, 1
  %76 = extractvalue { i33, i1 } %74, 0
  %77 = icmp slt i33 %76, 0
  %78 = or i1 %75, %77
  br i1 %78, label %79, label %80, !prof !3

79:                                               ; preds = %70
  tail call void @llvm.trap() #12
  unreachable

80:                                               ; preds = %70
  %81 = trunc i33 %76 to i32
  store i32 %81, i32* %71, align 4
  br label %82

82:                                               ; preds = %55, %65, %80
  %83 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  %84 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %1, i64 0, i32 1
  %85 = bitcast i8** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast i8** %83 to i64*
  store i64 %86, i64* %87, align 8
  %88 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %88, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %89, label %119, label %90

90:                                               ; preds = %82
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  br i1 %94, label %97, label %107

97:                                               ; preds = %90
  %98 = zext i32 %96 to i33
  %99 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #12
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !3

104:                                              ; preds = %97
  tail call void @llvm.trap() #12
  unreachable

105:                                              ; preds = %97
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %95, align 4
  br label %107

107:                                              ; preds = %90, %105
  %108 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %109 = load atomic i32, i32* %91 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %114 = add i32 %108, -1
  store i32 %114, i32* %113, align 4
  br label %115

115:                                              ; preds = %112, %107
  %116 = phi i32 [ %114, %112 ], [ %108, %107 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %119

119:                                              ; preds = %82, %115, %118
  br i1 %64, label %133, label %120

120:                                              ; preds = %119
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = and i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  br i1 %124, label %127, label %129

127:                                              ; preds = %120
  %128 = add i32 %126, -1
  store i32 %128, i32* %125, align 4
  br label %129

129:                                              ; preds = %127, %120
  %130 = phi i32 [ %128, %127 ], [ %126, %120 ]
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #12
  br label %133

133:                                              ; preds = %132, %129, %119
  br i1 %37, label %147, label %134

134:                                              ; preds = %133
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #12
  br label %147

147:                                              ; preds = %146, %143, %133
  br i1 %10, label %161, label %148

148:                                              ; preds = %147
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  br i1 %152, label %155, label %157

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  store i32 %156, i32* %153, align 4
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %156, %155 ], [ %154, %148 ]
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #12
  br label %161

161:                                              ; preds = %147, %157, %160
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6Is8BitEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %10 = select i1 %8, %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"* %7
  %11 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #12
  %13 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %5, i8* %13) #12
  %14 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %17 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false) #12
  %19 = load i8*, i8** %18, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %19) #12
  %20 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %23 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #12
  %24 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false) #12
  %25 = load i8*, i8** %24, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i8* %25) #12
  %26 = bitcast %"class.WTF::StringTypeAdapter.13"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #12
  %27 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 16, i1 false) #12
  %28 = load i8*, i8** %27, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %2, i8* %28) #12
  %29 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %33 = select i1 %31, %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"* %30
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #12
  br i1 %37, label %38, label %39

38:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  br label %46

39:                                               ; preds = %1
  %40 = icmp eq %"class.WTF::StringImpl"* %21, null
  %41 = select i1 %40, %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"* %21
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  br i1 %45, label %46, label %47

46:                                               ; preds = %39, %38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #12
  br label %59

47:                                               ; preds = %39
  %48 = icmp eq %"class.WTF::StringImpl"* %15, null
  %49 = select i1 %48, %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"* %15
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #12
  br i1 %53, label %59, label %54

54:                                               ; preds = %47
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 1
  %58 = icmp ne i32 %57, 0
  br label %59

59:                                               ; preds = %47, %46, %54
  %60 = phi i1 [ false, %47 ], [ %58, %54 ], [ false, %46 ]
  ret i1 %60
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.1"* %8) #12
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.1"* %8) #12
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %26, i8* %27) #12
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #12
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #12
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #12
  ret i32 %18
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"*, i8*) unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %14) #12
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend.2"* %9) #12
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend.2"* %9) #12
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %25, i8* %26) #12
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #12
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend.2"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.3"* %8) #12
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.3"* %8) #12
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %26, i8* %27) #12
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #12
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #12
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #12
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.3"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %14) #12
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.4"* %9) #12
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.4"* %9) #12
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %25, i8* %26) #12
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #12
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.4"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.4", %"class.WTF::StringAppend.4"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend.5"* %8) #12
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend.5"* %8) #12
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %26, i8* %27) #12
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #12
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #12
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #12
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend.5"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %14) #12
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.6"* %9) #12
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.6"* %9) #12
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %25, i8* %26) #12
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #12
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.6"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.6", %"class.WTF::StringAppend.6"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %13) #12
  %14 = getelementptr inbounds %"class.WTF::StringAppend.6", %"class.WTF::StringAppend.6"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #12
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #12
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %30, i8* %31) #12
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #12
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #12
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #12
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %45, i8* %46) #12
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #12
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  ret i32 %23
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.1"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %9) #12
  %10 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #12
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.3"* %10, i8* %1) #12
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.3"* %10) #12
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %30, i8* %33) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend.2"* %5) #12
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %36) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret void
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.3"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %9) #12
  %10 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #12
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend.5"* %10, i8* %1) #12
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend.5"* %10) #12
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %30, i8* %33) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.4"* %5) #12
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %36) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend.5"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %5, i8* %10) #12
  %11 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #12
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i8* %14) #12
  %15 = bitcast %"class.WTF::StringTypeAdapter.10"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #12
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #12
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.10"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i8* %1) #12
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %34, i8* %37) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #12
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.6"* %6) #12
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"* nonnull %5, i8* %40) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #12
  ret void
}

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"*, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.1"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %9) #12
  %10 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.1", %"class.WTF::StringAppend.1"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #12
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.3"* %10, i16* %1) #12
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.3"* %10) #12
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %30, i16* %33) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EES3_E6lengthEv(%"class.WTF::StringAppend.2"* %5) #12
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i16* %36) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret void
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"*, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.3"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %9) #12
  %10 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.3", %"class.WTF::StringAppend.3"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #12
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend.5"* %10, i16* %1) #12
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend.5"* %10) #12
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %30, i16* %33) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.4"* %5) #12
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i16* %36) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend.5"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %5, i8* %10) #12
  %11 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #12
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i8* %14) #12
  %15 = bitcast %"class.WTF::StringTypeAdapter.10"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #12
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend.5", %"class.WTF::StringAppend.5"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #12
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.10"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"* nonnull %3, i16* %1) #12
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %34, i16* %37) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #12
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.6"* %6) #12
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"* nonnull %5, i16* %40) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend.8"*, %"class.WTF::StringImpl"*, i8*, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #12
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !3

22:                                               ; preds = %13
  tail call void @llvm.trap() #12
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %4, %8, %23
  %26 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %5, i64* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %3, %"class.WTF::StringImpl"** %28, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %29, label %59, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %47

37:                                               ; preds = %30
  %38 = zext i32 %36 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #12
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %37
  tail call void @llvm.trap() #12
  unreachable

45:                                               ; preds = %37
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %35, align 4
  br label %47

47:                                               ; preds = %30, %45
  %48 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %49 = load atomic i32, i32* %31 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %54 = add i32 %48, -1
  store i32 %54, i32* %53, align 4
  br label %55

55:                                               ; preds = %52, %47
  %56 = phi i32 [ %54, %52 ], [ %48, %47 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #12
  br label %59

59:                                               ; preds = %25, %55, %58
  br i1 %7, label %73, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #12
  br label %73

73:                                               ; preds = %59, %69, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.7"*, %"class.WTF::StringAppend.8"* byval(%"class.WTF::StringAppend.8") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #12
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !3

22:                                               ; preds = %13
  tail call void @llvm.trap() #12
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %3
  %26 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %1, i64 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8** %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %1, i64 0, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %54

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #12
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !3

49:                                               ; preds = %40
  tail call void @llvm.trap() #12
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %54

52:                                               ; preds = %25
  %53 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 1
  store i8* %2, i8** %53, align 8
  br label %67

54:                                               ; preds = %35, %50
  %55 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 1
  store i8* %2, i8** %55, align 8
  %56 = load atomic i32, i32* %36 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #12
  br label %67

67:                                               ; preds = %52, %66, %63
  br i1 %7, label %81, label %68

68:                                               ; preds = %67
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #12
  br label %81

81:                                               ; preds = %67, %77, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS_6StringEPKcEES1_EES3_E6lengthEv(%"class.WTF::StringAppend.7"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.7", %"class.WTF::StringAppend.7"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %14) #12
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.8"* %9) #12
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.8"* %9) #12
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %25, i8* %26) #12
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #12
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #12
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend.8"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.9"* %8) #12
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.9"* %8) #12
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %26, i8* %27) #12
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #12
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #12
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #12
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.9"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.9", %"class.WTF::StringAppend.9"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend.9", %"class.WTF::StringAppend.9"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %21) #12
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #12
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #12
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %30, i8* %31) #12
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #12
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #12
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #12
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %46, i8* %47) #12
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #12
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend.8"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.10"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.10"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.10"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #12
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #12
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #12
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %48) #12
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %49, i8* %1) #12
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %52) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #12
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.9"* %6) #12
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.11"* nonnull %53, i8* %56) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend.8"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.10", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.10"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.10"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.10"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #12
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #12
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.10"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"class.WTF::StringAppend.8", %"class.WTF::StringAppend.8"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #12
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i8* %48) #12
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %49, i16* %1) #12
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.13"* nonnull %4, i16* %52) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #12
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.10", %"class.WTF::StringTypeAdapter.10"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.9"* %6) #12
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.11"* nonnull %53, i16* %56) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nofree nounwind }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN3WTFplINS_12StringAppendINS_6StringEPKcEES2_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_: argument 0"}
!6 = distinct !{!6, !"_ZN3WTFplINS_12StringAppendINS_6StringEPKcEES2_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_: argument 0"}
!9 = distinct !{!9, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_"}
