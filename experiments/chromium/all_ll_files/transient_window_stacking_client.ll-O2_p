; ModuleID = '../../ui/wm/core/transient_window_stacking_client.cc'
source_filename = "../../ui/wm/core/transient_window_stacking_client.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.wm::TransientWindowStackingClient" = type { %"class.aura::client::WindowStackingClient" }
%"class.aura::client::WindowStackingClient" = type { i32 (...)** }
%"class.aura::Window" = type { %"class.ui::LayerDelegate", %"class.ui::LayerOwner", %"class.ui::EventTarget", %"class.ui::GestureConsumer", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", %"class.viz::HostFrameSinkClient", %"class.gfx::Rect", %"class.aura::WindowTreeHost"*, i32, i8, i8, %"class.aura::WindowDelegate"*, %"class.aura::Window"*, %"class.std::__1::vector.35", i8, i32, %class.SkRegion, i32, i8, i8, %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48", %"class.std::__1::vector.54", i32, i32, i32, [4 x i8], %"class.base::ObserverList.61", i32, %"class.viz::SubtreeCaptureId", float, %"class.viz::FrameSinkId", i8, i8, i8, %"class.std::__1::unique_ptr.78", %"class.base::WeakPtr.84" }
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.1" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.4", %"class.std::__1::vector.11", %"class.ui::EventHandler"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.6" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::GestureConsumer" = type { i32 (...)** }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.26" }
%"class.std::__1::map.26" = type { %"class.std::__1::__tree.27" }
%"class.std::__1::__tree.27" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.viz::HostFrameSinkClient" = type { i32 (...)** }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.aura::WindowTreeHost" = type opaque
%"class.aura::WindowDelegate" = type opaque
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.aura::Window"**, %"class.aura::Window"**, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.aura::Window"** }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.aura::LayoutManager"* }
%"class.aura::LayoutManager" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.aura::WindowTargeter"* }
%"class.aura::WindowTargeter" = type opaque
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.gfx::Rect"* }
%"class.base::ObserverList.61" = type <{ %"class.std::__1::vector.62", %"class.base::LinkedList.75", i64, i32, [4 x i8] }>
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.70" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.64" }
%"struct.std::__1::__atomic_base.64" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.65" }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__atomic_base.67" }
%"struct.std::__1::__atomic_base.67" = type { %"struct.std::__1::__cxx_atomic_impl.68" }
%"struct.std::__1::__cxx_atomic_impl.68" = type { %"struct.std::__1::__cxx_atomic_base_impl.69" }
%"struct.std::__1::__cxx_atomic_base_impl.69" = type { i8 }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList.75" = type { %"class.base::LinkNode.76" }
%"class.base::LinkNode.76" = type { %"class.base::internal::LinkNodeBase" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.viz::ParentLocalSurfaceIdAllocator"* }
%"class.viz::ParentLocalSurfaceIdAllocator" = type opaque
%"class.base::WeakPtr.84" = type { %"class.base::internal::WeakPtrBase" }
%"class.wm::TransientWindowManager" = type { %"class.aura::WindowObserver", %"class.aura::Window"*, %"class.aura::Window"*, %"class.std::__1::vector.35", %"class.aura::Window"*, i8, i8, i8, i8, [4 x i8], %"class.base::ObserverList.86" }
%"class.aura::WindowObserver" = type { %"class.base::CheckedObserver" }
%"class.base::CheckedObserver" = type { i32 (...)**, %"class.base::WeakPtrFactory" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.85 }
%class.scoped_refptr.85 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::ObserverList.86" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.87", i64, i32, [4 x i8] }>
%"class.base::LinkedList.87" = type { %"class.base::LinkNode.88" }
%"class.base::LinkNode.88" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN2wm29TransientWindowStackingClient9instance_E = hidden local_unnamed_addr global %"class.wm::TransientWindowStackingClient"* null, align 8
@_ZTVN2wm29TransientWindowStackingClientE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.wm::TransientWindowStackingClient"*, %"class.aura::Window"**, %"class.aura::Window"**, i32*)* @_ZN2wm29TransientWindowStackingClient14AdjustStackingEPPN4aura6WindowES4_PNS2_14StackDirectionE to i8*), i8* bitcast (void (%"class.wm::TransientWindowStackingClient"*)* @_ZN2wm29TransientWindowStackingClientD2Ev to i8*), i8* bitcast (void (%"class.wm::TransientWindowStackingClient"*)* @_ZN2wm29TransientWindowStackingClientD0Ev to i8*)] }, align 8

@_ZN2wm29TransientWindowStackingClientC1Ev = hidden unnamed_addr alias void (%"class.wm::TransientWindowStackingClient"*), void (%"class.wm::TransientWindowStackingClient"*)* @_ZN2wm29TransientWindowStackingClientC2Ev
@_ZN2wm29TransientWindowStackingClientD1Ev = hidden unnamed_addr alias void (%"class.wm::TransientWindowStackingClient"*), void (%"class.wm::TransientWindowStackingClient"*)* @_ZN2wm29TransientWindowStackingClientD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2wm29TransientWindowStackingClientC2Ev(%"class.wm::TransientWindowStackingClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.wm::TransientWindowStackingClient", %"class.wm::TransientWindowStackingClient"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2wm29TransientWindowStackingClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  store %"class.wm::TransientWindowStackingClient"* %0, %"class.wm::TransientWindowStackingClient"** @_ZN2wm29TransientWindowStackingClient9instance_E, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2wm29TransientWindowStackingClientD2Ev(%"class.wm::TransientWindowStackingClient"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.wm::TransientWindowStackingClient", %"class.wm::TransientWindowStackingClient"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2wm29TransientWindowStackingClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = load %"class.wm::TransientWindowStackingClient"*, %"class.wm::TransientWindowStackingClient"** @_ZN2wm29TransientWindowStackingClient9instance_E, align 8
  %4 = icmp eq %"class.wm::TransientWindowStackingClient"* %3, %0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store %"class.wm::TransientWindowStackingClient"* null, %"class.wm::TransientWindowStackingClient"** @_ZN2wm29TransientWindowStackingClient9instance_E, align 8
  br label %6

6:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2wm29TransientWindowStackingClientD0Ev(%"class.wm::TransientWindowStackingClient"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.wm::TransientWindowStackingClient", %"class.wm::TransientWindowStackingClient"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2wm29TransientWindowStackingClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = load %"class.wm::TransientWindowStackingClient"*, %"class.wm::TransientWindowStackingClient"** @_ZN2wm29TransientWindowStackingClient9instance_E, align 8
  %4 = icmp eq %"class.wm::TransientWindowStackingClient"* %3, %0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store %"class.wm::TransientWindowStackingClient"* null, %"class.wm::TransientWindowStackingClient"** @_ZN2wm29TransientWindowStackingClient9instance_E, align 8
  br label %6

6:                                                ; preds = %1, %5
  %7 = bitcast %"class.wm::TransientWindowStackingClient"* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2wm29TransientWindowStackingClient14AdjustStackingEPPN4aura6WindowES4_PNS2_14StackDirectionE(%"class.wm::TransientWindowStackingClient"* nocapture readnone, %"class.aura::Window"** nocapture, %"class.aura::Window"** nocapture, i32* nocapture readonly) unnamed_addr #2 align 2 {
  %5 = alloca %"class.std::__1::vector.35", align 8
  %6 = alloca %"class.std::__1::vector.35", align 8
  %7 = load %"class.aura::Window"*, %"class.aura::Window"** %1, align 8
  %8 = tail call %"class.wm::TransientWindowManager"* @_ZN2wm22TransientWindowManager11GetIfExistsEPKN4aura6WindowE(%"class.aura::Window"* %7) #10
  %9 = icmp eq %"class.wm::TransientWindowManager"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = load %"class.aura::Window"*, %"class.aura::Window"** %2, align 8
  %12 = tail call zeroext i1 @_ZNK2wm22TransientWindowManager19IsStackingTransientEPKN4aura6WindowE(%"class.wm::TransientWindowManager"* nonnull %8, %"class.aura::Window"* %11) #10
  br i1 %12, label %296, label %13

13:                                               ; preds = %4, %10
  %14 = bitcast %"class.std::__1::vector.35"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #10
  %16 = bitcast %"class.std::__1::vector.35"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %6, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #10
  %19 = load %"class.aura::Window"*, %"class.aura::Window"** %1, align 8
  %20 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %19, i64 0, i32 13
  %21 = load %"class.aura::Window"*, %"class.aura::Window"** %20, align 8
  %22 = icmp eq %"class.aura::Window"* %19, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  br label %225

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %5, i64 0, i32 0, i32 1
  %26 = bitcast %"class.aura::Window"*** %25 to i64*
  %27 = bitcast %"class.std::__1::vector.35"* %5 to i64*
  %28 = bitcast %"class.aura::Window"*** %15 to i64*
  br label %29

29:                                               ; preds = %105, %24
  %30 = phi i64 [ %95, %105 ], [ 0, %24 ]
  %31 = phi %"class.aura::Window"** [ %96, %105 ], [ null, %24 ]
  %32 = phi %"class.aura::Window"** [ %97, %105 ], [ null, %24 ]
  %33 = phi %"class.aura::Window"** [ %98, %105 ], [ null, %24 ]
  %34 = phi %"class.aura::Window"** [ %99, %105 ], [ null, %24 ]
  %35 = phi %"class.aura::Window"** [ %100, %105 ], [ null, %24 ]
  %36 = phi i64 [ %101, %105 ], [ 0, %24 ]
  %37 = phi %"class.aura::Window"** [ %102, %105 ], [ null, %24 ]
  %38 = phi %"class.aura::Window"* [ %103, %105 ], [ %19, %24 ]
  %39 = phi %"class.aura::Window"* [ %107, %105 ], [ %21, %24 ]
  %40 = ptrtoint %"class.aura::Window"* %38 to i64
  %41 = icmp eq %"class.aura::Window"* %39, %21
  br i1 %41, label %42, label %94

42:                                               ; preds = %29
  %43 = load %"class.aura::Window"**, %"class.aura::Window"*** %15, align 8
  %44 = icmp eq %"class.aura::Window"** %37, %43
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = bitcast %"class.aura::Window"** %37 to i64*
  store i64 %40, i64* %46, align 8
  %47 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %37, i64 1
  %48 = ptrtoint %"class.aura::Window"** %47 to i64
  store i64 %48, i64* %26, align 8
  br label %94

49:                                               ; preds = %42
  %50 = ptrtoint %"class.aura::Window"** %37 to i64
  %51 = sub i64 %50, %30
  %52 = ashr exact i64 %51, 3
  %53 = add nsw i64 %52, 1
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %57

55:                                               ; preds = %49
  %56 = bitcast %"class.std::__1::vector.35"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %56) #11
  unreachable

57:                                               ; preds = %49
  %58 = icmp ult i64 %52, 1152921504606846975
  br i1 %58, label %59, label %67

59:                                               ; preds = %57
  %60 = ashr exact i64 %51, 2
  %61 = icmp ult i64 %60, %53
  %62 = select i1 %61, i64 %53, i64 %60
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %59
  %65 = icmp ugt i64 %62, 2305843009213693951
  br i1 %65, label %66, label %67

66:                                               ; preds = %64
  tail call void @abort() #11
  unreachable

67:                                               ; preds = %64, %57
  %68 = phi i64 [ %62, %64 ], [ 2305843009213693951, %57 ]
  %69 = shl i64 %68, 3
  %70 = tail call i8* @_Znwm(i64 %69) #9
  %71 = bitcast i8* %70 to %"class.aura::Window"**
  br label %72

72:                                               ; preds = %67, %59
  %73 = phi i64 [ %68, %67 ], [ 0, %59 ]
  %74 = phi %"class.aura::Window"** [ %71, %67 ], [ null, %59 ]
  %75 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %74, i64 %52
  %76 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %74, i64 %73
  %77 = ptrtoint %"class.aura::Window"** %76 to i64
  %78 = bitcast %"class.aura::Window"** %75 to i64*
  store i64 %40, i64* %78, align 8
  %79 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %75, i64 1
  %80 = ptrtoint %"class.aura::Window"** %79 to i64
  %81 = sub i64 %36, %30
  %82 = ashr exact i64 %81, 3
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %75, i64 %83
  %85 = ptrtoint %"class.aura::Window"** %84 to i64
  %86 = icmp sgt i64 %81, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %72
  %88 = bitcast %"class.aura::Window"** %84 to i8*
  %89 = inttoptr i64 %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 %81, i1 false) #10
  br label %90

90:                                               ; preds = %87, %72
  store i64 %85, i64* %27, align 8
  store i64 %80, i64* %26, align 8
  store i64 %77, i64* %28, align 8
  %91 = icmp eq i64 %30, 0
  br i1 %91, label %94, label %92

92:                                               ; preds = %90
  %93 = inttoptr i64 %30 to i8*
  tail call void @_ZdlPv(i8* %93) #9
  br label %94

94:                                               ; preds = %92, %90, %45, %29
  %95 = phi i64 [ %85, %92 ], [ %85, %90 ], [ %30, %45 ], [ %30, %29 ]
  %96 = phi %"class.aura::Window"** [ %84, %92 ], [ %84, %90 ], [ %31, %45 ], [ %31, %29 ]
  %97 = phi %"class.aura::Window"** [ %84, %92 ], [ %84, %90 ], [ %32, %45 ], [ %32, %29 ]
  %98 = phi %"class.aura::Window"** [ %79, %92 ], [ %79, %90 ], [ %47, %45 ], [ %33, %29 ]
  %99 = phi %"class.aura::Window"** [ %79, %92 ], [ %79, %90 ], [ %47, %45 ], [ %34, %29 ]
  %100 = phi %"class.aura::Window"** [ %84, %92 ], [ %84, %90 ], [ %35, %45 ], [ %35, %29 ]
  %101 = phi i64 [ %80, %92 ], [ %80, %90 ], [ %48, %45 ], [ %36, %29 ]
  %102 = phi %"class.aura::Window"** [ %79, %92 ], [ %79, %90 ], [ %47, %45 ], [ %37, %29 ]
  %103 = tail call %"class.aura::Window"* @_ZN2wm18GetTransientParentEPN4aura6WindowE(%"class.aura::Window"* nonnull %38) #10
  %104 = icmp eq %"class.aura::Window"* %103, null
  br i1 %104, label %108, label %105

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %103, i64 0, i32 13
  %107 = load %"class.aura::Window"*, %"class.aura::Window"** %106, align 8
  br label %29

108:                                              ; preds = %94
  %109 = icmp eq %"class.aura::Window"** %100, %99
  br i1 %109, label %220, label %110

110:                                              ; preds = %108
  %111 = load %"class.aura::Window"*, %"class.aura::Window"** %2, align 8
  %112 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %111, i64 0, i32 13
  %113 = load %"class.aura::Window"*, %"class.aura::Window"** %112, align 8
  %114 = icmp eq %"class.aura::Window"* %111, null
  br i1 %114, label %220, label %115

115:                                              ; preds = %110
  %116 = bitcast %"class.aura::Window"*** %17 to i64*
  %117 = bitcast %"class.std::__1::vector.35"* %6 to i64*
  %118 = bitcast %"class.aura::Window"*** %18 to i64*
  br label %119

119:                                              ; preds = %191, %115
  %120 = phi i64 [ %183, %191 ], [ 0, %115 ]
  %121 = phi %"class.aura::Window"** [ %184, %191 ], [ null, %115 ]
  %122 = phi %"class.aura::Window"** [ %185, %191 ], [ null, %115 ]
  %123 = phi %"class.aura::Window"** [ %186, %191 ], [ null, %115 ]
  %124 = phi i64 [ %187, %191 ], [ 0, %115 ]
  %125 = phi %"class.aura::Window"** [ %188, %191 ], [ null, %115 ]
  %126 = phi %"class.aura::Window"* [ %189, %191 ], [ %111, %115 ]
  %127 = phi %"class.aura::Window"* [ %193, %191 ], [ %113, %115 ]
  %128 = ptrtoint %"class.aura::Window"* %126 to i64
  %129 = icmp eq %"class.aura::Window"* %127, %113
  br i1 %129, label %130, label %182

130:                                              ; preds = %119
  %131 = load %"class.aura::Window"**, %"class.aura::Window"*** %18, align 8
  %132 = icmp eq %"class.aura::Window"** %125, %131
  br i1 %132, label %137, label %133

133:                                              ; preds = %130
  %134 = bitcast %"class.aura::Window"** %125 to i64*
  store i64 %128, i64* %134, align 8
  %135 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %125, i64 1
  %136 = ptrtoint %"class.aura::Window"** %135 to i64
  store i64 %136, i64* %116, align 8
  br label %182

137:                                              ; preds = %130
  %138 = ptrtoint %"class.aura::Window"** %125 to i64
  %139 = sub i64 %138, %120
  %140 = ashr exact i64 %139, 3
  %141 = add nsw i64 %140, 1
  %142 = icmp ugt i64 %141, 2305843009213693951
  br i1 %142, label %143, label %145

143:                                              ; preds = %137
  %144 = bitcast %"class.std::__1::vector.35"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %144) #11
  unreachable

145:                                              ; preds = %137
  %146 = icmp ult i64 %140, 1152921504606846975
  br i1 %146, label %147, label %155

147:                                              ; preds = %145
  %148 = ashr exact i64 %139, 2
  %149 = icmp ult i64 %148, %141
  %150 = select i1 %149, i64 %141, i64 %148
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %160, label %152

152:                                              ; preds = %147
  %153 = icmp ugt i64 %150, 2305843009213693951
  br i1 %153, label %154, label %155

154:                                              ; preds = %152
  tail call void @abort() #11
  unreachable

155:                                              ; preds = %152, %145
  %156 = phi i64 [ %150, %152 ], [ 2305843009213693951, %145 ]
  %157 = shl i64 %156, 3
  %158 = tail call i8* @_Znwm(i64 %157) #9
  %159 = bitcast i8* %158 to %"class.aura::Window"**
  br label %160

160:                                              ; preds = %155, %147
  %161 = phi i64 [ %156, %155 ], [ 0, %147 ]
  %162 = phi %"class.aura::Window"** [ %159, %155 ], [ null, %147 ]
  %163 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %162, i64 %140
  %164 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %162, i64 %161
  %165 = ptrtoint %"class.aura::Window"** %164 to i64
  %166 = bitcast %"class.aura::Window"** %163 to i64*
  store i64 %128, i64* %166, align 8
  %167 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %163, i64 1
  %168 = ptrtoint %"class.aura::Window"** %167 to i64
  %169 = sub i64 %124, %120
  %170 = ashr exact i64 %169, 3
  %171 = sub nsw i64 0, %170
  %172 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %163, i64 %171
  %173 = ptrtoint %"class.aura::Window"** %172 to i64
  %174 = icmp sgt i64 %169, 0
  br i1 %174, label %175, label %178

175:                                              ; preds = %160
  %176 = bitcast %"class.aura::Window"** %172 to i8*
  %177 = inttoptr i64 %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %176, i8* align 8 %177, i64 %169, i1 false) #10
  br label %178

178:                                              ; preds = %175, %160
  store i64 %173, i64* %117, align 8
  store i64 %168, i64* %116, align 8
  store i64 %165, i64* %118, align 8
  %179 = icmp eq i64 %120, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %178
  %181 = inttoptr i64 %120 to i8*
  tail call void @_ZdlPv(i8* %181) #9
  br label %182

182:                                              ; preds = %180, %178, %133, %119
  %183 = phi i64 [ %173, %180 ], [ %173, %178 ], [ %120, %133 ], [ %120, %119 ]
  %184 = phi %"class.aura::Window"** [ %172, %180 ], [ %172, %178 ], [ %121, %133 ], [ %121, %119 ]
  %185 = phi %"class.aura::Window"** [ %167, %180 ], [ %167, %178 ], [ %135, %133 ], [ %122, %119 ]
  %186 = phi %"class.aura::Window"** [ %172, %180 ], [ %172, %178 ], [ %123, %133 ], [ %123, %119 ]
  %187 = phi i64 [ %168, %180 ], [ %168, %178 ], [ %136, %133 ], [ %124, %119 ]
  %188 = phi %"class.aura::Window"** [ %167, %180 ], [ %167, %178 ], [ %135, %133 ], [ %125, %119 ]
  %189 = tail call %"class.aura::Window"* @_ZN2wm18GetTransientParentEPN4aura6WindowE(%"class.aura::Window"* nonnull %126) #10
  %190 = icmp eq %"class.aura::Window"* %189, null
  br i1 %190, label %194, label %191

191:                                              ; preds = %182
  %192 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %189, i64 0, i32 13
  %193 = load %"class.aura::Window"*, %"class.aura::Window"** %192, align 8
  br label %119

194:                                              ; preds = %182
  %195 = icmp eq %"class.aura::Window"** %186, %185
  br i1 %195, label %214, label %196

196:                                              ; preds = %194, %202
  %197 = phi %"class.aura::Window"** [ %205, %202 ], [ %185, %194 ]
  %198 = phi %"class.aura::Window"** [ %203, %202 ], [ %98, %194 ]
  %199 = icmp eq %"class.aura::Window"** %198, %97
  %200 = icmp eq %"class.aura::Window"** %197, %186
  %201 = or i1 %200, %199
  br i1 %201, label %214, label %202

202:                                              ; preds = %196
  %203 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %198, i64 -1
  %204 = load %"class.aura::Window"*, %"class.aura::Window"** %203, align 8
  %205 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %197, i64 -1
  %206 = load %"class.aura::Window"*, %"class.aura::Window"** %205, align 8
  %207 = icmp eq %"class.aura::Window"* %204, %206
  br i1 %207, label %196, label %208

208:                                              ; preds = %202
  %209 = ptrtoint %"class.aura::Window"* %204 to i64
  %210 = bitcast %"class.aura::Window"** %1 to i64*
  store i64 %209, i64* %210, align 8
  %211 = bitcast %"class.aura::Window"** %205 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.aura::Window"** %2 to i64*
  store i64 %212, i64* %213, align 8
  br label %214

214:                                              ; preds = %196, %208, %194
  %215 = phi %"class.aura::Window"** [ %185, %194 ], [ %184, %208 ], [ %184, %196 ]
  %216 = icmp eq %"class.aura::Window"** %215, null
  br i1 %216, label %220, label %217

217:                                              ; preds = %214
  %218 = ptrtoint %"class.aura::Window"** %215 to i64
  store i64 %218, i64* %116, align 8
  %219 = bitcast %"class.aura::Window"** %215 to i8*
  tail call void @_ZdlPv(i8* %219) #9
  br label %220

220:                                              ; preds = %217, %214, %110, %108
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  %221 = icmp eq %"class.aura::Window"** %96, null
  br i1 %221, label %225, label %222

222:                                              ; preds = %220
  %223 = ptrtoint %"class.aura::Window"** %96 to i64
  store i64 %223, i64* %26, align 8
  %224 = bitcast %"class.aura::Window"** %96 to i8*
  tail call void @_ZdlPv(i8* %224) #9
  br label %225

225:                                              ; preds = %23, %220, %222
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  %226 = load i32, i32* %3, align 4
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %292

228:                                              ; preds = %225
  %229 = load %"class.aura::Window"*, %"class.aura::Window"** %1, align 8
  %230 = load %"class.aura::Window"*, %"class.aura::Window"** %2, align 8
  %231 = tail call zeroext i1 @_ZN2wm20HasTransientAncestorEPKN4aura6WindowES3_(%"class.aura::Window"* %229, %"class.aura::Window"* %230) #10
  br i1 %231, label %292, label %232

232:                                              ; preds = %228
  %233 = load %"class.aura::Window"*, %"class.aura::Window"** %1, align 8
  %234 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %233, i64 0, i32 13
  %235 = load %"class.aura::Window"*, %"class.aura::Window"** %234, align 8
  %236 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %235, i64 0, i32 14
  %237 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %236, i64 0, i32 0, i32 0
  %238 = load %"class.aura::Window"**, %"class.aura::Window"*** %237, align 8
  %239 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %235, i64 0, i32 14, i32 0, i32 1
  %240 = load %"class.aura::Window"**, %"class.aura::Window"*** %239, align 8
  %241 = icmp eq %"class.aura::Window"** %238, %240
  %242 = ptrtoint %"class.aura::Window"** %240 to i64
  %243 = ptrtoint %"class.aura::Window"** %238 to i64
  br i1 %241, label %255, label %244

244:                                              ; preds = %232
  %245 = load %"class.aura::Window"*, %"class.aura::Window"** %2, align 8
  br label %246

246:                                              ; preds = %252, %244
  %247 = phi %"class.aura::Window"** [ %238, %244 ], [ %253, %252 ]
  %248 = load %"class.aura::Window"*, %"class.aura::Window"** %247, align 8
  %249 = icmp eq %"class.aura::Window"* %248, %245
  br i1 %249, label %250, label %252

250:                                              ; preds = %246
  %251 = ptrtoint %"class.aura::Window"** %247 to i64
  br label %255

252:                                              ; preds = %246
  %253 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %247, i64 1
  %254 = icmp eq %"class.aura::Window"** %253, %240
  br i1 %254, label %255, label %246

255:                                              ; preds = %252, %250, %232
  %256 = phi i64 [ %243, %232 ], [ %251, %250 ], [ %242, %252 ]
  %257 = sub i64 %256, %243
  %258 = ashr exact i64 %257, 3
  %259 = bitcast %"class.aura::Window"*** %239 to i64*
  %260 = bitcast %"class.std::__1::vector.35"* %236 to i64*
  %261 = add nsw i64 %258, 1
  %262 = sub i64 %242, %243
  %263 = ashr exact i64 %262, 3
  %264 = icmp ult i64 %261, %263
  br i1 %264, label %265, label %285

265:                                              ; preds = %255, %275
  %266 = phi i64 [ %279, %275 ], [ %261, %255 ]
  %267 = phi i64 [ %266, %275 ], [ %258, %255 ]
  %268 = phi %"class.aura::Window"** [ %278, %275 ], [ %238, %255 ]
  %269 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %268, i64 %266
  %270 = load %"class.aura::Window"*, %"class.aura::Window"** %269, align 8
  %271 = load %"class.aura::Window"*, %"class.aura::Window"** %2, align 8
  %272 = tail call zeroext i1 @_ZN2wm20HasTransientAncestorEPKN4aura6WindowES3_(%"class.aura::Window"* %270, %"class.aura::Window"* %271) #10
  br i1 %272, label %275, label %273

273:                                              ; preds = %265
  %274 = load %"class.aura::Window"**, %"class.aura::Window"*** %237, align 8
  br label %285

275:                                              ; preds = %265
  %276 = load i64, i64* %259, align 8
  %277 = load i64, i64* %260, align 8
  %278 = inttoptr i64 %277 to %"class.aura::Window"**
  %279 = add i64 %266, 1
  %280 = sub i64 %276, %277
  %281 = ashr exact i64 %280, 3
  %282 = icmp ult i64 %279, %281
  br i1 %282, label %265, label %283

283:                                              ; preds = %275
  %284 = inttoptr i64 %277 to %"class.aura::Window"**
  br label %285

285:                                              ; preds = %283, %255, %273
  %286 = phi i64 [ %267, %273 ], [ %258, %255 ], [ %266, %283 ]
  %287 = phi %"class.aura::Window"** [ %274, %273 ], [ %238, %255 ], [ %284, %283 ]
  %288 = getelementptr inbounds %"class.aura::Window"*, %"class.aura::Window"** %287, i64 %286
  %289 = bitcast %"class.aura::Window"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.aura::Window"** %2 to i64*
  store i64 %290, i64* %291, align 8
  br label %292

292:                                              ; preds = %285, %228, %225
  %293 = load %"class.aura::Window"*, %"class.aura::Window"** %1, align 8
  %294 = load %"class.aura::Window"*, %"class.aura::Window"** %2, align 8
  %295 = icmp ne %"class.aura::Window"* %293, %294
  br label %296

296:                                              ; preds = %10, %292
  %297 = phi i1 [ %295, %292 ], [ true, %10 ]
  ret i1 %297
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.wm::TransientWindowManager"* @_ZN2wm22TransientWindowManager11GetIfExistsEPKN4aura6WindowE(%"class.aura::Window"*) local_unnamed_addr #5

declare zeroext i1 @_ZNK2wm22TransientWindowManager19IsStackingTransientEPKN4aura6WindowE(%"class.wm::TransientWindowManager"*, %"class.aura::Window"*) local_unnamed_addr #5

declare zeroext i1 @_ZN2wm20HasTransientAncestorEPKN4aura6WindowES3_(%"class.aura::Window"*, %"class.aura::Window"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.aura::Window"* @_ZN2wm18GetTransientParentEPN4aura6WindowE(%"class.aura::Window"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
