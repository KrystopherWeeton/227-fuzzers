; ModuleID = '../../base/third_party/double_conversion/double-conversion/bignum-dtoa.cc'
source_filename = "../../base/third_party/double_conversion/double-conversion/bignum-dtoa.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.double_conversion::Bignum" = type { i16, i16, [128 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17double_conversion10BignumDtoaEdNS_14BignumDtoaModeEiNS_6VectorIcEEPiS3_(double, i32, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %8 = alloca %"class.double_conversion::Bignum", align 4
  %9 = alloca %"class.double_conversion::Bignum", align 4
  %10 = alloca %"class.double_conversion::Bignum", align 4
  %11 = alloca %"class.double_conversion::Bignum", align 4
  %12 = icmp eq i32 %1, 1
  br i1 %12, label %13, label %32

13:                                               ; preds = %7
  %14 = fptrunc double %0 to float
  %15 = bitcast float %14 to i32
  %16 = and i32 %15, 8388607
  %17 = and i32 %15, 2139095040
  %18 = icmp eq i32 %17, 0
  %19 = or i32 %16, 8388608
  %20 = select i1 %18, i32 %16, i32 %19
  %21 = zext i32 %20 to i64
  br i1 %18, label %26, label %22

22:                                               ; preds = %13
  %23 = lshr i32 %15, 23
  %24 = and i32 %23, 255
  %25 = add nsw i32 %24, -150
  br label %26

26:                                               ; preds = %13, %22
  %27 = phi i32 [ %25, %22 ], [ -149, %13 ]
  %28 = icmp eq i32 %16, 0
  %29 = and i32 %15, 2130706432
  %30 = icmp ne i32 %29, 0
  %31 = and i1 %28, %30
  br label %50

32:                                               ; preds = %7
  %33 = bitcast double %0 to i64
  %34 = and i64 %33, 4503599627370495
  %35 = and i64 %33, 9218868437227405312
  %36 = icmp eq i64 %35, 0
  %37 = or i64 %34, 4503599627370496
  %38 = select i1 %36, i64 %34, i64 %37
  br i1 %36, label %44, label %39

39:                                               ; preds = %32
  %40 = lshr i64 %33, 52
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 2047
  %43 = add nsw i32 %42, -1075
  br label %44

44:                                               ; preds = %32, %39
  %45 = phi i32 [ %43, %39 ], [ -1074, %32 ]
  %46 = icmp eq i64 %34, 0
  %47 = and i64 %33, 9214364837600034816
  %48 = icmp ne i64 %47, 0
  %49 = and i1 %46, %48
  br label %50

50:                                               ; preds = %44, %26
  %51 = phi i1 [ %31, %26 ], [ %49, %44 ]
  %52 = phi i32 [ %27, %26 ], [ %45, %44 ]
  %53 = phi i64 [ %21, %26 ], [ %38, %44 ]
  %54 = icmp ult i32 %1, 2
  %55 = and i64 %53, 1
  %56 = icmp eq i64 %55, 0
  %57 = and i64 %53, 4503599627370496
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %66

59:                                               ; preds = %50, %59
  %60 = phi i32 [ %63, %59 ], [ %52, %50 ]
  %61 = phi i64 [ %62, %59 ], [ %53, %50 ]
  %62 = shl i64 %61, 1
  %63 = add nsw i32 %60, -1
  %64 = and i64 %61, 2251799813685248
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %59, label %66

66:                                               ; preds = %59, %50
  %67 = phi i32 [ %52, %50 ], [ %63, %59 ]
  %68 = add nsw i32 %67, 52
  %69 = sitofp i32 %68 to double
  %70 = fmul double %69, 0x3FD34413509F79FE
  %71 = fadd double %70, -1.000000e-10
  %72 = tail call double @llvm.ceil.f64(double %71) #5
  %73 = fptosi double %72 to i32
  %74 = icmp eq i32 %1, 2
  %75 = xor i32 %73, -1
  %76 = icmp sgt i32 %75, %2
  %77 = and i1 %74, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %66
  store i8 0, i8* %3, align 1
  store i32 0, i32* %5, align 4
  %79 = sub nsw i32 0, %2
  store i32 %79, i32* %6, align 4
  br label %205

80:                                               ; preds = %66
  %81 = bitcast %"class.double_conversion::Bignum"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %81) #5
  %82 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %8, i64 0, i32 2
  %83 = bitcast [128 x i32]* %82 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %83, i8 -86, i64 512, i1 false)
  %84 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %8, i64 0, i32 0
  store i16 0, i16* %84, align 4
  %85 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %8, i64 0, i32 1
  store i16 0, i16* %85, align 2
  %86 = bitcast %"class.double_conversion::Bignum"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %86) #5
  %87 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %9, i64 0, i32 2
  %88 = bitcast [128 x i32]* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %88, i8 -86, i64 512, i1 false)
  %89 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %9, i64 0, i32 0
  store i16 0, i16* %89, align 4
  %90 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %9, i64 0, i32 1
  store i16 0, i16* %90, align 2
  %91 = bitcast %"class.double_conversion::Bignum"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %91) #5
  %92 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %10, i64 0, i32 2
  %93 = bitcast [128 x i32]* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %93, i8 -86, i64 512, i1 false)
  %94 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %10, i64 0, i32 0
  store i16 0, i16* %94, align 4
  %95 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %10, i64 0, i32 1
  store i16 0, i16* %95, align 2
  %96 = bitcast %"class.double_conversion::Bignum"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %96) #5
  %97 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %11, i64 0, i32 2
  %98 = bitcast [128 x i32]* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %98, i8 -86, i64 512, i1 false)
  %99 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %11, i64 0, i32 0
  store i16 0, i16* %99, align 4
  %100 = getelementptr inbounds %"class.double_conversion::Bignum", %"class.double_conversion::Bignum"* %11, i64 0, i32 1
  store i16 0, i16* %100, align 2
  %101 = icmp sgt i32 %52, -1
  br i1 %101, label %102, label %104

102:                                              ; preds = %80
  call void @_ZN17double_conversion6Bignum12AssignUInt64Em(%"class.double_conversion::Bignum"* nonnull %8, i64 %53) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %8, i32 %52) #5
  call void @_ZN17double_conversion6Bignum17AssignPowerUInt16Eti(%"class.double_conversion::Bignum"* nonnull %9, i16 zeroext 10, i32 %73) #5
  br i1 %54, label %103, label %118

103:                                              ; preds = %102
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %8, i32 1) #5
  call void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nonnull %11, i16 zeroext 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %11, i32 %52) #5
  call void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nonnull %10, i16 zeroext 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %10, i32 %52) #5
  br label %115

104:                                              ; preds = %80
  %105 = icmp sgt i32 %73, -1
  br i1 %105, label %106, label %109

106:                                              ; preds = %104
  call void @_ZN17double_conversion6Bignum12AssignUInt64Em(%"class.double_conversion::Bignum"* nonnull %8, i64 %53) #5
  call void @_ZN17double_conversion6Bignum17AssignPowerUInt16Eti(%"class.double_conversion::Bignum"* nonnull %9, i16 zeroext 10, i32 %73) #5
  %107 = sub nsw i32 0, %52
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 %107) #5
  br i1 %54, label %108, label %118

108:                                              ; preds = %106
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %8, i32 1) #5
  call void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nonnull %11, i16 zeroext 1) #5
  call void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nonnull %10, i16 zeroext 1) #5
  br label %115

109:                                              ; preds = %104
  %110 = sub nsw i32 0, %73
  call void @_ZN17double_conversion6Bignum17AssignPowerUInt16Eti(%"class.double_conversion::Bignum"* nonnull %8, i16 zeroext 10, i32 %110) #5
  br i1 %54, label %111, label %113

111:                                              ; preds = %109
  call void @_ZN17double_conversion6Bignum12AssignBignumERKS0_(%"class.double_conversion::Bignum"* nonnull %11, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8) #5
  call void @_ZN17double_conversion6Bignum12AssignBignumERKS0_(%"class.double_conversion::Bignum"* nonnull %10, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8) #5
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt64Em(%"class.double_conversion::Bignum"* nonnull %8, i64 %53) #5
  call void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nonnull %9, i16 zeroext 1) #5
  %112 = sub nsw i32 0, %52
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 %112) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %8, i32 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 1) #5
  br label %115

113:                                              ; preds = %109
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt64Em(%"class.double_conversion::Bignum"* nonnull %8, i64 %53) #5
  call void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"* nonnull %9, i16 zeroext 1) #5
  %114 = sub nsw i32 0, %52
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 %114) #5
  br label %118

115:                                              ; preds = %111, %108, %103
  %116 = and i1 %54, %51
  br i1 %116, label %117, label %118

117:                                              ; preds = %115
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %9, i32 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %8, i32 1) #5
  call void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"* nonnull %11, i32 1) #5
  br label %118

118:                                              ; preds = %102, %106, %113, %115, %117
  %119 = call i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %11, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %9) #5
  %120 = icmp sgt i32 %119, -1
  %121 = icmp sgt i32 %119, 0
  %122 = select i1 %56, i1 %120, i1 %121
  br i1 %122, label %123, label %125

123:                                              ; preds = %118
  %124 = add nsw i32 %73, 1
  store i32 %124, i32* %6, align 4
  br label %130

125:                                              ; preds = %118
  store i32 %73, i32* %6, align 4
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %8, i32 10) #5
  %126 = call i32 @_ZN17double_conversion6Bignum7CompareERKS0_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %10, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %11) #5
  %127 = icmp eq i32 %126, 0
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %10, i32 10) #5
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  call void @_ZN17double_conversion6Bignum12AssignBignumERKS0_(%"class.double_conversion::Bignum"* nonnull %11, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %10) #5
  br label %130

129:                                              ; preds = %125
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %11, i32 10) #5
  br label %130

130:                                              ; preds = %123, %128, %129
  switch i32 %1, label %200 [
    i32 0, label %131
    i32 1, label %131
    i32 2, label %182
    i32 3, label %199
  ]

131:                                              ; preds = %130, %130
  %132 = call i32 @_ZN17double_conversion6Bignum7CompareERKS0_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %10, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %11) #5
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, %"class.double_conversion::Bignum"* %10, %"class.double_conversion::Bignum"* %11
  store i32 0, i32* %5, align 4
  br label %135

135:                                              ; preds = %154, %131
  %136 = call zeroext i16 @_ZN17double_conversion6Bignum21DivideModuloIntBignumERKS0_(%"class.double_conversion::Bignum"* nonnull %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %9) #5
  %137 = trunc i16 %136 to i8
  %138 = add i8 %137, 48
  %139 = load i32, i32* %5, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %5, align 4
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds i8, i8* %3, i64 %141
  store i8 %138, i8* %142, align 1
  %143 = call i32 @_ZN17double_conversion6Bignum7CompareERKS0_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %10) #5
  %144 = icmp slt i32 %143, 1
  %145 = icmp slt i32 %143, 0
  %146 = select i1 %56, i1 %144, i1 %145
  %147 = call i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %134, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %9) #5
  %148 = icmp sgt i32 %147, -1
  %149 = icmp sgt i32 %147, 0
  %150 = select i1 %56, i1 %148, i1 %149
  %151 = or i1 %146, %150
  br i1 %151, label %155, label %152

152:                                              ; preds = %135
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %8, i32 10) #5
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %10, i32 10) #5
  br i1 %133, label %154, label %153

153:                                              ; preds = %152
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %134, i32 10) #5
  br label %154

154:                                              ; preds = %153, %152
  br label %135

155:                                              ; preds = %135
  %156 = and i1 %146, %150
  br i1 %156, label %157, label %174

157:                                              ; preds = %155
  %158 = call i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %9) #5
  %159 = icmp slt i32 %158, 0
  br i1 %159, label %201, label %160

160:                                              ; preds = %157
  %161 = icmp eq i32 %158, 0
  %162 = load i32, i32* %5, align 4
  %163 = add nsw i32 %162, -1
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %3, i64 %164
  %166 = load i8, i8* %165, align 1
  br i1 %161, label %169, label %167

167:                                              ; preds = %160
  %168 = add i8 %166, 1
  store i8 %168, i8* %165, align 1
  br label %201

169:                                              ; preds = %160
  %170 = and i8 %166, 1
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %201, label %172

172:                                              ; preds = %169
  %173 = add i8 %166, 1
  store i8 %173, i8* %165, align 1
  br label %201

174:                                              ; preds = %155
  br i1 %146, label %201, label %175

175:                                              ; preds = %174
  %176 = load i32, i32* %5, align 4
  %177 = add nsw i32 %176, -1
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %3, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = add i8 %180, 1
  store i8 %181, i8* %179, align 1
  br label %201

182:                                              ; preds = %130
  %183 = load i32, i32* %6, align 4
  %184 = sub nsw i32 0, %183
  %185 = icmp sgt i32 %184, %2
  br i1 %185, label %186, label %188

186:                                              ; preds = %182
  %187 = sub nsw i32 0, %2
  store i32 %187, i32* %6, align 4
  store i32 0, i32* %5, align 4
  br label %201

188:                                              ; preds = %182
  %189 = icmp eq i32 %184, %2
  br i1 %189, label %190, label %197

190:                                              ; preds = %188
  call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* nonnull %9, i32 10) #5
  %191 = call i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %8, %"class.double_conversion::Bignum"* nonnull dereferenceable(516) %9) #5
  %192 = icmp sgt i32 %191, -1
  br i1 %192, label %193, label %196

193:                                              ; preds = %190
  store i8 49, i8* %3, align 1
  store i32 1, i32* %5, align 4
  %194 = load i32, i32* %6, align 4
  %195 = add nsw i32 %194, 1
  store i32 %195, i32* %6, align 4
  br label %201

196:                                              ; preds = %190
  store i32 0, i32* %5, align 4
  br label %201

197:                                              ; preds = %188
  %198 = add nsw i32 %183, %2
  call fastcc void @_ZN17double_conversionL21GenerateCountedDigitsEiPiPNS_6BignumES2_NS_6VectorIcEES0_(i32 %198, i32* %6, %"class.double_conversion::Bignum"* nonnull %8, %"class.double_conversion::Bignum"* nonnull %9, i8* %3, i32 %4, i32* %5) #5
  br label %201

199:                                              ; preds = %130
  call fastcc void @_ZN17double_conversionL21GenerateCountedDigitsEiPiPNS_6BignumES2_NS_6VectorIcEES0_(i32 %2, i32* %6, %"class.double_conversion::Bignum"* nonnull %8, %"class.double_conversion::Bignum"* nonnull %9, i8* %3, i32 %4, i32* %5)
  br label %201

200:                                              ; preds = %130
  call void @abort() #6
  unreachable

201:                                              ; preds = %197, %196, %193, %186, %175, %174, %172, %169, %167, %157, %199
  %202 = load i32, i32* %5, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %3, i64 %203
  store i8 0, i8* %204, align 1
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %96) #5
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %91) #5
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %86) #5
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %81) #5
  br label %205

205:                                              ; preds = %201, %78
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN17double_conversionL21GenerateCountedDigitsEiPiPNS_6BignumES2_NS_6VectorIcEES0_(i32, i32* nocapture, %"class.double_conversion::Bignum"*, %"class.double_conversion::Bignum"*, i8*, i32, i32* nocapture) unnamed_addr #0 {
  %8 = add i32 %0, -1
  %9 = icmp sgt i32 %8, 0
  %10 = tail call zeroext i16 @_ZN17double_conversion6Bignum21DivideModuloIntBignumERKS0_(%"class.double_conversion::Bignum"* %2, %"class.double_conversion::Bignum"* dereferenceable(516) %3) #5
  br i1 %9, label %11, label %13

11:                                               ; preds = %7
  %12 = zext i32 %8 to i64
  br label %24

13:                                               ; preds = %24, %7
  %14 = phi i16 [ %10, %7 ], [ %31, %24 ]
  %15 = tail call i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* dereferenceable(516) %2, %"class.double_conversion::Bignum"* dereferenceable(516) %2, %"class.double_conversion::Bignum"* dereferenceable(516) %3) #5
  %16 = lshr i32 %15, 31
  %17 = trunc i32 %16 to i16
  %18 = xor i16 %17, 1
  %19 = add i16 %18, %14
  %20 = trunc i16 %19 to i8
  %21 = add i8 %20, 48
  %22 = sext i32 %8 to i64
  %23 = getelementptr inbounds i8, i8* %4, i64 %22
  store i8 %21, i8* %23, align 1
  br i1 %9, label %33, label %44

24:                                               ; preds = %24, %11
  %25 = phi i64 [ 0, %11 ], [ %30, %24 ]
  %26 = phi i16 [ %10, %11 ], [ %31, %24 ]
  %27 = trunc i16 %26 to i8
  %28 = add i8 %27, 48
  %29 = getelementptr inbounds i8, i8* %4, i64 %25
  store i8 %28, i8* %29, align 1
  tail call void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"* %2, i32 10) #5
  %30 = add nuw nsw i64 %25, 1
  %31 = tail call zeroext i16 @_ZN17double_conversion6Bignum21DivideModuloIntBignumERKS0_(%"class.double_conversion::Bignum"* %2, %"class.double_conversion::Bignum"* dereferenceable(516) %3) #5
  %32 = icmp eq i64 %30, %12
  br i1 %32, label %13, label %24

33:                                               ; preds = %13, %37
  %34 = phi i8 [ %42, %37 ], [ %21, %13 ]
  %35 = phi i64 [ %39, %37 ], [ %22, %13 ]
  %36 = icmp eq i8 %34, 58
  br i1 %36, label %37, label %44

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %4, i64 %35
  store i8 48, i8* %38, align 1
  %39 = add nsw i64 %35, -1
  %40 = getelementptr inbounds i8, i8* %4, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = add i8 %41, 1
  store i8 %42, i8* %40, align 1
  %43 = icmp sgt i64 %39, 0
  br i1 %43, label %33, label %44

44:                                               ; preds = %37, %33, %13
  %45 = load i8, i8* %4, align 1
  %46 = icmp eq i8 %45, 58
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  store i8 49, i8* %4, align 1
  %48 = load i32, i32* %1, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %1, align 4
  br label %50

50:                                               ; preds = %47, %44
  store i32 %0, i32* %6, align 4
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

declare zeroext i16 @_ZN17double_conversion6Bignum21DivideModuloIntBignumERKS0_(%"class.double_conversion::Bignum"*, %"class.double_conversion::Bignum"* dereferenceable(516)) local_unnamed_addr #3

declare i32 @_ZN17double_conversion6Bignum11PlusCompareERKS0_S2_S2_(%"class.double_conversion::Bignum"* dereferenceable(516), %"class.double_conversion::Bignum"* dereferenceable(516), %"class.double_conversion::Bignum"* dereferenceable(516)) local_unnamed_addr #3

declare i32 @_ZN17double_conversion6Bignum7CompareERKS0_S2_(%"class.double_conversion::Bignum"* dereferenceable(516), %"class.double_conversion::Bignum"* dereferenceable(516)) local_unnamed_addr #3

declare void @_ZN17double_conversion6Bignum16MultiplyByUInt32Ej(%"class.double_conversion::Bignum"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #4

declare void @_ZN17double_conversion6Bignum9ShiftLeftEi(%"class.double_conversion::Bignum"*, i32) local_unnamed_addr #3

declare void @_ZN17double_conversion6Bignum12AssignUInt64Em(%"class.double_conversion::Bignum"*, i64) local_unnamed_addr #3

declare void @_ZN17double_conversion6Bignum17AssignPowerUInt16Eti(%"class.double_conversion::Bignum"*, i16 zeroext, i32) local_unnamed_addr #3

declare void @_ZN17double_conversion6Bignum12AssignUInt16Et(%"class.double_conversion::Bignum"*, i16 zeroext) local_unnamed_addr #3

declare void @_ZN17double_conversion6Bignum12AssignBignumERKS0_(%"class.double_conversion::Bignum"*, %"class.double_conversion::Bignum"* dereferenceable(516)) local_unnamed_addr #3

declare void @_ZN17double_conversion6Bignum16MultiplyByUInt64Em(%"class.double_conversion::Bignum"*, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
