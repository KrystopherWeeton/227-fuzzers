; ModuleID = '../../third_party/brotli/dec/huffman.c'
source_filename = "../../third_party/brotli/dec/huffman.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.HuffmanCode = type { i8, i16 }

@kReverseBits = internal unnamed_addr constant [256 x i8] c"\00\80@\C0 \A0`\E0\10\90P\D00\B0p\F0\08\88H\C8(\A8h\E8\18\98X\D88\B8x\F8\04\84D\C4$\A4d\E4\14\94T\D44\B4t\F4\0C\8CL\CC,\ACl\EC\1C\9C\5C\DC<\BC|\FC\02\82B\C2\22\A2b\E2\12\92R\D22\B2r\F2\0A\8AJ\CA*\AAj\EA\1A\9AZ\DA:\BAz\FA\06\86F\C6&\A6f\E6\16\96V\D66\B6v\F6\0E\8EN\CE.\AEn\EE\1E\9E^\DE>\BE~\FE\01\81A\C1!\A1a\E1\11\91Q\D11\B1q\F1\09\89I\C9)\A9i\E9\19\99Y\D99\B9y\F9\05\85E\C5%\A5e\E5\15\95U\D55\B5u\F5\0D\8DM\CD-\ADm\ED\1D\9D]\DD=\BD}\FD\03\83C\C3#\A3c\E3\13\93S\D33\B3s\F3\0B\8BK\CB+\ABk\EB\1B\9B[\DB;\BB{\FB\07\87G\C7'\A7g\E7\17\97W\D77\B7w\F7\0F\8FO\CF/\AFo\EF\1F\9F_\DF?\BF\7F\FF", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliBuildCodeLengthsHuffmanTable(%struct.HuffmanCode* nocapture, i8* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %4 = alloca [18 x i32], align 16
  %5 = alloca [6 x i32], align 16
  %6 = bitcast [18 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %6) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 72, i1 false)
  %7 = bitcast [6 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #2
  %8 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 0
  %9 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 1
  %10 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 2
  %11 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 3
  %12 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 4
  %13 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 5
  %14 = getelementptr inbounds i16, i16* %2, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %9, align 4
  %18 = getelementptr inbounds i16, i16* %2, i64 2
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nsw i32 %17, %20
  store i32 %21, i32* %10, align 8
  %22 = getelementptr inbounds i16, i16* %2, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = add nsw i32 %21, %24
  store i32 %25, i32* %11, align 4
  %26 = getelementptr inbounds i16, i16* %2, i64 4
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %25, %28
  store i32 %29, i32* %12, align 16
  %30 = getelementptr inbounds i16, i16* %2, i64 5
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nsw i32 %29, %32
  store i32 %33, i32* %13, align 4
  store i32 17, i32* %8, align 16
  %34 = getelementptr inbounds i8, i8* %1, i64 17
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, -1
  store i32 %39, i32* %37, align 4
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %40
  store i32 17, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %1, i64 16
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* %45, align 4
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %48
  store i32 16, i32* %49, align 4
  %50 = getelementptr inbounds i8, i8* %1, i64 15
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i32 %54, -1
  store i32 %55, i32* %53, align 4
  %56 = sext i32 %54 to i64
  %57 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %56
  store i32 15, i32* %57, align 4
  %58 = getelementptr inbounds i8, i8* %1, i64 14
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, -1
  store i32 %63, i32* %61, align 4
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %64
  store i32 14, i32* %65, align 4
  %66 = getelementptr inbounds i8, i8* %1, i64 13
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add nsw i32 %70, -1
  store i32 %71, i32* %69, align 4
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %72
  store i32 13, i32* %73, align 4
  %74 = getelementptr inbounds i8, i8* %1, i64 12
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, -1
  store i32 %79, i32* %77, align 4
  %80 = sext i32 %78 to i64
  %81 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %80
  store i32 12, i32* %81, align 4
  %82 = getelementptr inbounds i8, i8* %1, i64 11
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = add nsw i32 %86, -1
  store i32 %87, i32* %85, align 4
  %88 = sext i32 %86 to i64
  %89 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %88
  store i32 11, i32* %89, align 4
  %90 = getelementptr inbounds i8, i8* %1, i64 10
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = add nsw i32 %94, -1
  store i32 %95, i32* %93, align 4
  %96 = sext i32 %94 to i64
  %97 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %96
  store i32 10, i32* %97, align 4
  %98 = getelementptr inbounds i8, i8* %1, i64 9
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %102, -1
  store i32 %103, i32* %101, align 4
  %104 = sext i32 %102 to i64
  %105 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %104
  store i32 9, i32* %105, align 4
  %106 = getelementptr inbounds i8, i8* %1, i64 8
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = add nsw i32 %110, -1
  store i32 %111, i32* %109, align 4
  %112 = sext i32 %110 to i64
  %113 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %112
  store i32 8, i32* %113, align 4
  %114 = getelementptr inbounds i8, i8* %1, i64 7
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i64
  %117 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = add nsw i32 %118, -1
  store i32 %119, i32* %117, align 4
  %120 = sext i32 %118 to i64
  %121 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %120
  store i32 7, i32* %121, align 4
  %122 = getelementptr inbounds i8, i8* %1, i64 6
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = add nsw i32 %126, -1
  store i32 %127, i32* %125, align 4
  %128 = sext i32 %126 to i64
  %129 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %128
  store i32 6, i32* %129, align 4
  %130 = getelementptr inbounds i8, i8* %1, i64 5
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %134, -1
  store i32 %135, i32* %133, align 4
  %136 = sext i32 %134 to i64
  %137 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %136
  store i32 5, i32* %137, align 4
  %138 = getelementptr inbounds i8, i8* %1, i64 4
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = add nsw i32 %142, -1
  store i32 %143, i32* %141, align 4
  %144 = sext i32 %142 to i64
  %145 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %144
  store i32 4, i32* %145, align 4
  %146 = getelementptr inbounds i8, i8* %1, i64 3
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = add nsw i32 %150, -1
  store i32 %151, i32* %149, align 4
  %152 = sext i32 %150 to i64
  %153 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %152
  store i32 3, i32* %153, align 4
  %154 = getelementptr inbounds i8, i8* %1, i64 2
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = add nsw i32 %158, -1
  store i32 %159, i32* %157, align 4
  %160 = sext i32 %158 to i64
  %161 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %160
  store i32 2, i32* %161, align 4
  %162 = getelementptr inbounds i8, i8* %1, i64 1
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %166, -1
  store i32 %167, i32* %165, align 4
  %168 = sext i32 %166 to i64
  %169 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %168
  store i32 1, i32* %169, align 4
  %170 = load i8, i8* %1, align 1
  %171 = zext i8 %170 to i64
  %172 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %173, -1
  store i32 %174, i32* %172, align 4
  %175 = sext i32 %173 to i64
  %176 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %175
  store i32 0, i32* %176, align 4
  %177 = load i32, i32* %8, align 16
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %182, label %179

179:                                              ; preds = %3
  %180 = load i16, i16* %14, align 2
  %181 = icmp eq i16 %180, 0
  br i1 %181, label %255, label %204

182:                                              ; preds = %3
  %183 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 0
  %184 = load i32, i32* %183, align 16
  %185 = shl i32 %184, 16
  %186 = or i32 %185, 43520
  %187 = insertelement <4 x i32> undef, i32 %186, i32 0
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> zeroinitializer
  %189 = bitcast %struct.HuffmanCode* %0 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %189, align 2
  %190 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 4
  %191 = bitcast %struct.HuffmanCode* %190 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %191, align 2
  %192 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 8
  %193 = bitcast %struct.HuffmanCode* %192 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %193, align 2
  %194 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 12
  %195 = bitcast %struct.HuffmanCode* %194 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %195, align 2
  %196 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 16
  %197 = bitcast %struct.HuffmanCode* %196 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %197, align 2
  %198 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 20
  %199 = bitcast %struct.HuffmanCode* %198 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %199, align 2
  %200 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 24
  %201 = bitcast %struct.HuffmanCode* %200 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %201, align 2
  %202 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 28
  %203 = bitcast %struct.HuffmanCode* %202 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %203, align 2
  br label %260

204:                                              ; preds = %179
  %205 = zext i16 %180 to i32
  br label %206

206:                                              ; preds = %204, %206
  %207 = phi i64 [ 0, %204 ], [ %249, %206 ]
  %208 = phi i32 [ %205, %204 ], [ %251, %206 ]
  %209 = phi i64 [ 0, %204 ], [ %250, %206 ]
  %210 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %207
  %211 = load i32, i32* %210, align 4
  %212 = shl i32 %211, 16
  %213 = or i32 %212, 43521
  %214 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %209
  %215 = load i8, i8* %214, align 16
  %216 = zext i8 %215 to i64
  %217 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %216
  %218 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 30
  %219 = bitcast %struct.HuffmanCode* %218 to i32*
  store i32 %213, i32* %219, align 2
  %220 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 28
  %221 = bitcast %struct.HuffmanCode* %220 to i32*
  store i32 %213, i32* %221, align 2
  %222 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 26
  %223 = bitcast %struct.HuffmanCode* %222 to i32*
  store i32 %213, i32* %223, align 2
  %224 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 24
  %225 = bitcast %struct.HuffmanCode* %224 to i32*
  store i32 %213, i32* %225, align 2
  %226 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 22
  %227 = bitcast %struct.HuffmanCode* %226 to i32*
  store i32 %213, i32* %227, align 2
  %228 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 20
  %229 = bitcast %struct.HuffmanCode* %228 to i32*
  store i32 %213, i32* %229, align 2
  %230 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 18
  %231 = bitcast %struct.HuffmanCode* %230 to i32*
  store i32 %213, i32* %231, align 2
  %232 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 16
  %233 = bitcast %struct.HuffmanCode* %232 to i32*
  store i32 %213, i32* %233, align 2
  %234 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 14
  %235 = bitcast %struct.HuffmanCode* %234 to i32*
  store i32 %213, i32* %235, align 2
  %236 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 12
  %237 = bitcast %struct.HuffmanCode* %236 to i32*
  store i32 %213, i32* %237, align 2
  %238 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 10
  %239 = bitcast %struct.HuffmanCode* %238 to i32*
  store i32 %213, i32* %239, align 2
  %240 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 8
  %241 = bitcast %struct.HuffmanCode* %240 to i32*
  store i32 %213, i32* %241, align 2
  %242 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 6
  %243 = bitcast %struct.HuffmanCode* %242 to i32*
  store i32 %213, i32* %243, align 2
  %244 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 4
  %245 = bitcast %struct.HuffmanCode* %244 to i32*
  store i32 %213, i32* %245, align 2
  %246 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %217, i64 2
  %247 = bitcast %struct.HuffmanCode* %246 to i32*
  store i32 %213, i32* %247, align 2
  %248 = bitcast %struct.HuffmanCode* %217 to i32*
  store i32 %213, i32* %248, align 2
  %249 = add nuw nsw i64 %207, 1
  %250 = add i64 %209, 128
  %251 = add nsw i32 %208, -1
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %206

253:                                              ; preds = %206
  %254 = trunc i64 %249 to i32
  br label %255

255:                                              ; preds = %253, %179
  %256 = phi i64 [ 0, %179 ], [ %250, %253 ]
  %257 = phi i32 [ 0, %179 ], [ %254, %253 ]
  %258 = load i16, i16* %18, align 2
  %259 = icmp eq i16 %258, 0
  br i1 %259, label %297, label %261

260:                                              ; preds = %468, %473, %445, %182
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #2
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %6) #2
  ret void

261:                                              ; preds = %255
  %262 = zext i16 %258 to i32
  %263 = sext i32 %257 to i64
  br label %264

264:                                              ; preds = %264, %261
  %265 = phi i64 [ %263, %261 ], [ %291, %264 ]
  %266 = phi i32 [ %262, %261 ], [ %293, %264 ]
  %267 = phi i64 [ %256, %261 ], [ %292, %264 ]
  %268 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %265
  %269 = load i32, i32* %268, align 4
  %270 = shl i32 %269, 16
  %271 = or i32 %270, 43522
  %272 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %267
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i64
  %275 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %274
  %276 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 28
  %277 = bitcast %struct.HuffmanCode* %276 to i32*
  store i32 %271, i32* %277, align 2
  %278 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 24
  %279 = bitcast %struct.HuffmanCode* %278 to i32*
  store i32 %271, i32* %279, align 2
  %280 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 20
  %281 = bitcast %struct.HuffmanCode* %280 to i32*
  store i32 %271, i32* %281, align 2
  %282 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 16
  %283 = bitcast %struct.HuffmanCode* %282 to i32*
  store i32 %271, i32* %283, align 2
  %284 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 12
  %285 = bitcast %struct.HuffmanCode* %284 to i32*
  store i32 %271, i32* %285, align 2
  %286 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 8
  %287 = bitcast %struct.HuffmanCode* %286 to i32*
  store i32 %271, i32* %287, align 2
  %288 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %275, i64 4
  %289 = bitcast %struct.HuffmanCode* %288 to i32*
  store i32 %271, i32* %289, align 2
  %290 = bitcast %struct.HuffmanCode* %275 to i32*
  store i32 %271, i32* %290, align 2
  %291 = add nsw i64 %265, 1
  %292 = add i64 %267, 64
  %293 = add nsw i32 %266, -1
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %264

295:                                              ; preds = %264
  %296 = trunc i64 %291 to i32
  br label %297

297:                                              ; preds = %295, %255
  %298 = phi i64 [ %256, %255 ], [ %292, %295 ]
  %299 = phi i32 [ %257, %255 ], [ %296, %295 ]
  %300 = load i16, i16* %22, align 2
  %301 = icmp eq i16 %300, 0
  br i1 %301, label %377, label %302

302:                                              ; preds = %297
  %303 = zext i16 %300 to i32
  %304 = sext i32 %299 to i64
  %305 = and i32 %303, 1
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %326, label %307

307:                                              ; preds = %302
  %308 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = shl i32 %309, 16
  %311 = or i32 %310, 43523
  %312 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %298
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i64
  %315 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %314
  %316 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %315, i64 24
  %317 = bitcast %struct.HuffmanCode* %316 to i32*
  store i32 %311, i32* %317, align 2
  %318 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %315, i64 16
  %319 = bitcast %struct.HuffmanCode* %318 to i32*
  store i32 %311, i32* %319, align 2
  %320 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %315, i64 8
  %321 = bitcast %struct.HuffmanCode* %320 to i32*
  store i32 %311, i32* %321, align 2
  %322 = bitcast %struct.HuffmanCode* %315 to i32*
  store i32 %311, i32* %322, align 2
  %323 = add nsw i64 %304, 1
  %324 = add i64 %298, 32
  %325 = add nsw i32 %303, -1
  br label %326

326:                                              ; preds = %302, %307
  %327 = phi i64 [ undef, %302 ], [ %323, %307 ]
  %328 = phi i64 [ undef, %302 ], [ %324, %307 ]
  %329 = phi i64 [ %304, %302 ], [ %323, %307 ]
  %330 = phi i32 [ %303, %302 ], [ %325, %307 ]
  %331 = phi i64 [ %298, %302 ], [ %324, %307 ]
  %332 = icmp eq i16 %300, 1
  br i1 %332, label %373, label %333

333:                                              ; preds = %326, %333
  %334 = phi i64 [ %369, %333 ], [ %329, %326 ]
  %335 = phi i32 [ %371, %333 ], [ %330, %326 ]
  %336 = phi i64 [ %370, %333 ], [ %331, %326 ]
  %337 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %334
  %338 = load i32, i32* %337, align 4
  %339 = shl i32 %338, 16
  %340 = or i32 %339, 43523
  %341 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %336
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i64
  %344 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %343
  %345 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %344, i64 24
  %346 = bitcast %struct.HuffmanCode* %345 to i32*
  store i32 %340, i32* %346, align 2
  %347 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %344, i64 16
  %348 = bitcast %struct.HuffmanCode* %347 to i32*
  store i32 %340, i32* %348, align 2
  %349 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %344, i64 8
  %350 = bitcast %struct.HuffmanCode* %349 to i32*
  store i32 %340, i32* %350, align 2
  %351 = bitcast %struct.HuffmanCode* %344 to i32*
  store i32 %340, i32* %351, align 2
  %352 = add nsw i64 %334, 1
  %353 = add i64 %336, 32
  %354 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %352
  %355 = load i32, i32* %354, align 4
  %356 = shl i32 %355, 16
  %357 = or i32 %356, 43523
  %358 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %353
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i64
  %361 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %360
  %362 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %361, i64 24
  %363 = bitcast %struct.HuffmanCode* %362 to i32*
  store i32 %357, i32* %363, align 2
  %364 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %361, i64 16
  %365 = bitcast %struct.HuffmanCode* %364 to i32*
  store i32 %357, i32* %365, align 2
  %366 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %361, i64 8
  %367 = bitcast %struct.HuffmanCode* %366 to i32*
  store i32 %357, i32* %367, align 2
  %368 = bitcast %struct.HuffmanCode* %361 to i32*
  store i32 %357, i32* %368, align 2
  %369 = add nsw i64 %334, 2
  %370 = add i64 %336, 64
  %371 = add nsw i32 %335, -2
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %333

373:                                              ; preds = %333, %326
  %374 = phi i64 [ %327, %326 ], [ %369, %333 ]
  %375 = phi i64 [ %328, %326 ], [ %370, %333 ]
  %376 = trunc i64 %374 to i32
  br label %377

377:                                              ; preds = %373, %297
  %378 = phi i64 [ %298, %297 ], [ %375, %373 ]
  %379 = phi i32 [ %299, %297 ], [ %376, %373 ]
  %380 = load i16, i16* %26, align 2
  %381 = icmp eq i16 %380, 0
  br i1 %381, label %445, label %382

382:                                              ; preds = %377
  %383 = zext i16 %380 to i32
  %384 = sext i32 %379 to i64
  %385 = and i32 %383, 1
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %402, label %387

387:                                              ; preds = %382
  %388 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %384
  %389 = load i32, i32* %388, align 4
  %390 = shl i32 %389, 16
  %391 = or i32 %390, 43524
  %392 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %378
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i64
  %395 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %394
  %396 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %395, i64 16
  %397 = bitcast %struct.HuffmanCode* %396 to i32*
  store i32 %391, i32* %397, align 2
  %398 = bitcast %struct.HuffmanCode* %395 to i32*
  store i32 %391, i32* %398, align 2
  %399 = add nsw i64 %384, 1
  %400 = add i64 %378, 16
  %401 = add nsw i32 %383, -1
  br label %402

402:                                              ; preds = %382, %387
  %403 = phi i64 [ undef, %382 ], [ %399, %387 ]
  %404 = phi i64 [ undef, %382 ], [ %400, %387 ]
  %405 = phi i64 [ %384, %382 ], [ %399, %387 ]
  %406 = phi i32 [ %383, %382 ], [ %401, %387 ]
  %407 = phi i64 [ %378, %382 ], [ %400, %387 ]
  %408 = icmp eq i16 %380, 1
  br i1 %408, label %441, label %409

409:                                              ; preds = %402, %409
  %410 = phi i64 [ %437, %409 ], [ %405, %402 ]
  %411 = phi i32 [ %439, %409 ], [ %406, %402 ]
  %412 = phi i64 [ %438, %409 ], [ %407, %402 ]
  %413 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %410
  %414 = load i32, i32* %413, align 4
  %415 = shl i32 %414, 16
  %416 = or i32 %415, 43524
  %417 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %412
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i64
  %420 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %419
  %421 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %420, i64 16
  %422 = bitcast %struct.HuffmanCode* %421 to i32*
  store i32 %416, i32* %422, align 2
  %423 = bitcast %struct.HuffmanCode* %420 to i32*
  store i32 %416, i32* %423, align 2
  %424 = add nsw i64 %410, 1
  %425 = add i64 %412, 16
  %426 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %424
  %427 = load i32, i32* %426, align 4
  %428 = shl i32 %427, 16
  %429 = or i32 %428, 43524
  %430 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %425
  %431 = load i8, i8* %430, align 1
  %432 = zext i8 %431 to i64
  %433 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %432
  %434 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %433, i64 16
  %435 = bitcast %struct.HuffmanCode* %434 to i32*
  store i32 %429, i32* %435, align 2
  %436 = bitcast %struct.HuffmanCode* %433 to i32*
  store i32 %429, i32* %436, align 2
  %437 = add nsw i64 %410, 2
  %438 = add i64 %412, 32
  %439 = add nsw i32 %411, -2
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %441, label %409

441:                                              ; preds = %409, %402
  %442 = phi i64 [ %403, %402 ], [ %437, %409 ]
  %443 = phi i64 [ %404, %402 ], [ %438, %409 ]
  %444 = trunc i64 %442 to i32
  br label %445

445:                                              ; preds = %441, %377
  %446 = phi i64 [ %378, %377 ], [ %443, %441 ]
  %447 = phi i32 [ %379, %377 ], [ %444, %441 ]
  %448 = load i16, i16* %30, align 2
  %449 = icmp eq i16 %448, 0
  br i1 %449, label %260, label %450

450:                                              ; preds = %445
  %451 = zext i16 %448 to i32
  %452 = sext i32 %447 to i64
  %453 = and i32 %451, 1
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %468, label %455

455:                                              ; preds = %450
  %456 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %452
  %457 = load i32, i32* %456, align 4
  %458 = shl i32 %457, 16
  %459 = or i32 %458, 43525
  %460 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %446
  %461 = load i8, i8* %460, align 1
  %462 = zext i8 %461 to i64
  %463 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %462
  %464 = bitcast %struct.HuffmanCode* %463 to i32*
  store i32 %459, i32* %464, align 2
  %465 = add nsw i64 %452, 1
  %466 = add i64 %446, 8
  %467 = add nsw i32 %451, -1
  br label %468

468:                                              ; preds = %450, %455
  %469 = phi i64 [ %452, %450 ], [ %465, %455 ]
  %470 = phi i32 [ %451, %450 ], [ %467, %455 ]
  %471 = phi i64 [ %446, %450 ], [ %466, %455 ]
  %472 = icmp eq i16 %448, 1
  br i1 %472, label %260, label %473

473:                                              ; preds = %468, %473
  %474 = phi i64 [ %497, %473 ], [ %469, %468 ]
  %475 = phi i32 [ %499, %473 ], [ %470, %468 ]
  %476 = phi i64 [ %498, %473 ], [ %471, %468 ]
  %477 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %474
  %478 = load i32, i32* %477, align 4
  %479 = shl i32 %478, 16
  %480 = or i32 %479, 43525
  %481 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %476
  %482 = load i8, i8* %481, align 1
  %483 = zext i8 %482 to i64
  %484 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %483
  %485 = bitcast %struct.HuffmanCode* %484 to i32*
  store i32 %480, i32* %485, align 2
  %486 = add nsw i64 %474, 1
  %487 = add i64 %476, 8
  %488 = getelementptr inbounds [18 x i32], [18 x i32]* %4, i64 0, i64 %486
  %489 = load i32, i32* %488, align 4
  %490 = shl i32 %489, 16
  %491 = or i32 %490, 43525
  %492 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %487
  %493 = load i8, i8* %492, align 1
  %494 = zext i8 %493 to i64
  %495 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %494
  %496 = bitcast %struct.HuffmanCode* %495 to i32*
  store i32 %491, i32* %496, align 2
  %497 = add nsw i64 %474, 2
  %498 = add i64 %476, 16
  %499 = add nsw i32 %475, -2
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %260, label %473
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BrotliBuildHuffmanTable(%struct.HuffmanCode*, i32, i16* nocapture readonly, i16* nocapture) local_unnamed_addr #0 {
  br label %5

5:                                                ; preds = %5, %4
  %6 = phi i64 [ %10, %5 ], [ -1, %4 ]
  %7 = getelementptr inbounds i16, i16* %2, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = icmp eq i16 %8, -1
  %10 = add i64 %6, -1
  br i1 %9, label %5, label %11

11:                                               ; preds = %5
  %12 = trunc i64 %6 to i32
  %13 = add nsw i32 %12, 16
  %14 = shl i32 1, %1
  %15 = icmp slt i32 %13, %1
  %16 = shl i32 1, %13
  %17 = select i1 %15, i32 %13, i32 %1
  %18 = select i1 %15, i32 %16, i32 %14
  %19 = sext i32 %17 to i64
  br label %20

20:                                               ; preds = %60, %11
  %21 = phi i64 [ %64, %60 ], [ 1, %11 ]
  %22 = phi i64 [ %61, %60 ], [ 0, %11 ]
  %23 = phi i64 [ %63, %60 ], [ 128, %11 ]
  %24 = phi i32 [ %62, %60 ], [ 2, %11 ]
  %25 = getelementptr inbounds i16, i16* %3, i64 %21
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %60, label %28

28:                                               ; preds = %20
  %29 = zext i16 %26 to i32
  %30 = trunc i64 %21 to i32
  %31 = and i32 %30, 255
  %32 = trunc i64 %21 to i32
  %33 = add i32 %32, -16
  br label %34

34:                                               ; preds = %28, %56
  %35 = phi i32 [ %29, %28 ], [ %58, %56 ]
  %36 = phi i64 [ %22, %28 ], [ %57, %56 ]
  %37 = phi i32 [ %33, %28 ], [ %41, %56 ]
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %2, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = shl nuw i32 %41, 16
  %43 = or i32 %31, %42
  %44 = or i32 %43, 43520
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %36
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %47
  br label %49

49:                                               ; preds = %49, %34
  %50 = phi i32 [ %18, %34 ], [ %51, %49 ]
  %51 = sub nsw i32 %50, %24
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %48, i64 %52
  %54 = bitcast %struct.HuffmanCode* %53 to i32*
  store i32 %44, i32* %54, align 2
  %55 = icmp sgt i32 %51, 0
  br i1 %55, label %49, label %56

56:                                               ; preds = %49
  %57 = add i64 %36, %23
  %58 = add nsw i32 %35, -1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %34

60:                                               ; preds = %56, %20
  %61 = phi i64 [ %22, %20 ], [ %57, %56 ]
  %62 = shl i32 %24, 1
  %63 = lshr i64 %23, 1
  %64 = add nuw nsw i64 %21, 1
  %65 = icmp slt i64 %21, %19
  br i1 %65, label %20, label %66

66:                                               ; preds = %60
  %67 = icmp eq i32 %14, %18
  br i1 %67, label %77, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 0, i32 0
  br label %70

70:                                               ; preds = %68, %70
  %71 = phi i32 [ %18, %68 ], [ %75, %70 ]
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %72, i32 0
  %74 = shl nsw i64 %72, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %69, i64 %74, i1 false)
  %75 = shl i32 %71, 1
  %76 = icmp eq i32 %14, %75
  br i1 %76, label %77, label %70

77:                                               ; preds = %70, %66
  %78 = add nsw i32 %1, -1
  %79 = zext i32 %78 to i64
  %80 = lshr i64 128, %79
  %81 = icmp sgt i32 %13, %1
  br i1 %81, label %82, label %205

82:                                               ; preds = %77
  %83 = ptrtoint %struct.HuffmanCode* %0 to i64
  %84 = sext i32 %1 to i64
  %85 = sext i32 %13 to i64
  br label %86

86:                                               ; preds = %196, %82
  %87 = phi i64 [ %84, %82 ], [ %96, %196 ]
  %88 = phi i32 [ %1, %82 ], [ %97, %196 ]
  %89 = phi %struct.HuffmanCode* [ %0, %82 ], [ %201, %196 ]
  %90 = phi i32 [ %14, %82 ], [ %200, %196 ]
  %91 = phi i32 [ %14, %82 ], [ %199, %196 ]
  %92 = phi i32 [ 2, %82 ], [ %202, %196 ]
  %93 = phi i64 [ 128, %82 ], [ %203, %196 ]
  %94 = phi i64 [ 256, %82 ], [ %198, %196 ]
  %95 = phi i64 [ %61, %82 ], [ %197, %196 ]
  %96 = add nsw i64 %87, 1
  %97 = add nsw i32 %88, 1
  %98 = getelementptr inbounds i16, i16* %3, i64 %96
  %99 = load i16, i16* %98, align 2
  %100 = icmp eq i16 %99, 0
  br i1 %100, label %196, label %101

101:                                              ; preds = %86
  %102 = add nsw i32 %88, -15
  %103 = icmp slt i64 %96, 15
  %104 = trunc i64 %96 to i32
  %105 = sub i32 %104, %1
  %106 = shl i32 1, %105
  %107 = and i32 %105, 255
  %108 = trunc i64 %96 to i32
  br label %109

109:                                              ; preds = %101, %191
  %110 = phi i16 [ %99, %101 ], [ %194, %191 ]
  %111 = phi %struct.HuffmanCode* [ %89, %101 ], [ %172, %191 ]
  %112 = phi i32 [ %90, %101 ], [ %171, %191 ]
  %113 = phi i32 [ %91, %101 ], [ %170, %191 ]
  %114 = phi i64 [ %94, %101 ], [ %192, %191 ]
  %115 = phi i64 [ %95, %101 ], [ %168, %191 ]
  %116 = phi i32 [ %102, %101 ], [ %176, %191 ]
  %117 = icmp eq i64 %114, 256
  br i1 %117, label %118, label %167

118:                                              ; preds = %109
  %119 = sext i32 %113 to i64
  %120 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %111, i64 %119
  br i1 %103, label %121, label %147

121:                                              ; preds = %118
  %122 = zext i16 %110 to i32
  %123 = sub nsw i32 %106, %122
  %124 = icmp slt i32 %123, 1
  br i1 %124, label %140, label %125

125:                                              ; preds = %121, %133
  %126 = phi i32 [ %138, %133 ], [ %123, %121 ]
  %127 = phi i32 [ %130, %133 ], [ %108, %121 ]
  %128 = phi i64 [ %129, %133 ], [ %96, %121 ]
  %129 = add nsw i64 %128, 1
  %130 = add nsw i32 %127, 1
  %131 = trunc i64 %129 to i32
  %132 = icmp eq i32 %131, 15
  br i1 %132, label %143, label %133

133:                                              ; preds = %125
  %134 = shl i32 %126, 1
  %135 = getelementptr inbounds i16, i16* %3, i64 %129
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = sub nsw i32 %134, %137
  %139 = icmp slt i32 %138, 1
  br i1 %139, label %140, label %125

140:                                              ; preds = %133, %121
  %141 = phi i64 [ %96, %121 ], [ %129, %133 ]
  %142 = trunc i64 %141 to i32
  br label %143

143:                                              ; preds = %125, %140
  %144 = phi i32 [ %142, %140 ], [ %130, %125 ]
  %145 = sub nsw i32 %144, %1
  %146 = shl i32 1, %145
  br label %147

147:                                              ; preds = %118, %143
  %148 = phi i32 [ %106, %118 ], [ %146, %143 ]
  %149 = phi i32 [ %105, %118 ], [ %145, %143 ]
  %150 = add nsw i32 %148, %112
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %115
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i64
  %154 = add i64 %115, %80
  %155 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %153
  %156 = add nsw i32 %149, %1
  %157 = ptrtoint %struct.HuffmanCode* %120 to i64
  %158 = sub i64 %157, %83
  %159 = lshr exact i64 %158, 2
  %160 = sub nsw i64 %159, %153
  %161 = trunc i64 %160 to i32
  %162 = shl i32 %161, 16
  %163 = and i32 %156, 255
  %164 = or i32 %163, %162
  %165 = or i32 %164, 43520
  %166 = bitcast %struct.HuffmanCode* %155 to i32*
  store i32 %165, i32* %166, align 2
  br label %167

167:                                              ; preds = %147, %109
  %168 = phi i64 [ %154, %147 ], [ %115, %109 ]
  %169 = phi i64 [ 0, %147 ], [ %114, %109 ]
  %170 = phi i32 [ %148, %147 ], [ %113, %109 ]
  %171 = phi i32 [ %150, %147 ], [ %112, %109 ]
  %172 = phi %struct.HuffmanCode* [ %120, %147 ], [ %111, %109 ]
  %173 = sext i32 %116 to i64
  %174 = getelementptr inbounds i16, i16* %2, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = shl nuw i32 %176, 16
  %178 = or i32 %107, %177
  %179 = or i32 %178, 43520
  %180 = getelementptr inbounds [256 x i8], [256 x i8]* @kReverseBits, i64 0, i64 %169
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i64
  %183 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %172, i64 %182
  br label %184

184:                                              ; preds = %184, %167
  %185 = phi i32 [ %170, %167 ], [ %186, %184 ]
  %186 = sub nsw i32 %185, %92
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %183, i64 %187
  %189 = bitcast %struct.HuffmanCode* %188 to i32*
  store i32 %179, i32* %189, align 2
  %190 = icmp sgt i32 %186, 0
  br i1 %190, label %184, label %191

191:                                              ; preds = %184
  %192 = add i64 %169, %93
  %193 = load i16, i16* %98, align 2
  %194 = add i16 %193, -1
  store i16 %194, i16* %98, align 2
  %195 = icmp eq i16 %194, 0
  br i1 %195, label %196, label %109

196:                                              ; preds = %191, %86
  %197 = phi i64 [ %95, %86 ], [ %168, %191 ]
  %198 = phi i64 [ %94, %86 ], [ %192, %191 ]
  %199 = phi i32 [ %91, %86 ], [ %170, %191 ]
  %200 = phi i32 [ %90, %86 ], [ %171, %191 ]
  %201 = phi %struct.HuffmanCode* [ %89, %86 ], [ %172, %191 ]
  %202 = shl i32 %92, 1
  %203 = lshr i64 %93, 1
  %204 = icmp eq i64 %96, %85
  br i1 %204, label %205, label %86

205:                                              ; preds = %196, %77
  %206 = phi i32 [ %14, %77 ], [ %200, %196 ]
  ret i32 %206
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BrotliBuildSimpleHuffmanTable(%struct.HuffmanCode*, i32, i16*, i32) local_unnamed_addr #0 {
  %5 = shl i32 1, %1
  switch i32 %3, label %146 [
    i32 0, label %6
    i32 1, label %11
    i32 2, label %36
    i32 3, label %75
    i32 4, label %86
  ]

6:                                                ; preds = %4
  %7 = load i16, i16* %2, align 2
  %8 = zext i16 %7 to i32
  %9 = shl nuw i32 %8, 16
  %10 = or i32 %9, 43520
  br label %141

11:                                               ; preds = %4
  %12 = getelementptr inbounds i16, i16* %2, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = load i16, i16* %2, align 2
  %15 = icmp ugt i16 %13, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %11
  %17 = zext i16 %14 to i32
  %18 = shl nuw i32 %17, 16
  %19 = or i32 %18, 43521
  %20 = bitcast %struct.HuffmanCode* %0 to i32*
  store i32 %19, i32* %20, align 2
  %21 = load i16, i16* %12, align 2
  %22 = zext i16 %21 to i32
  %23 = shl nuw i32 %22, 16
  %24 = or i32 %23, 43521
  %25 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 1
  br label %141

26:                                               ; preds = %11
  %27 = zext i16 %13 to i32
  %28 = shl nuw i32 %27, 16
  %29 = or i32 %28, 43521
  %30 = bitcast %struct.HuffmanCode* %0 to i32*
  store i32 %29, i32* %30, align 2
  %31 = load i16, i16* %2, align 2
  %32 = zext i16 %31 to i32
  %33 = shl nuw i32 %32, 16
  %34 = or i32 %33, 43521
  %35 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 1
  br label %141

36:                                               ; preds = %4
  %37 = load i16, i16* %2, align 2
  %38 = zext i16 %37 to i32
  %39 = shl nuw i32 %38, 16
  %40 = or i32 %39, 43521
  %41 = bitcast %struct.HuffmanCode* %0 to i32*
  store i32 %40, i32* %41, align 2
  %42 = load i16, i16* %2, align 2
  %43 = zext i16 %42 to i32
  %44 = shl nuw i32 %43, 16
  %45 = or i32 %44, 43521
  %46 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 2
  %47 = bitcast %struct.HuffmanCode* %46 to i32*
  store i32 %45, i32* %47, align 2
  %48 = getelementptr inbounds i16, i16* %2, i64 2
  %49 = load i16, i16* %48, align 2
  %50 = getelementptr inbounds i16, i16* %2, i64 1
  %51 = load i16, i16* %50, align 2
  %52 = icmp ugt i16 %49, %51
  br i1 %52, label %53, label %64

53:                                               ; preds = %36
  %54 = zext i16 %51 to i32
  %55 = shl nuw i32 %54, 16
  %56 = or i32 %55, 43522
  %57 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 1
  %58 = bitcast %struct.HuffmanCode* %57 to i32*
  store i32 %56, i32* %58, align 2
  %59 = load i16, i16* %48, align 2
  %60 = zext i16 %59 to i32
  %61 = shl nuw i32 %60, 16
  %62 = or i32 %61, 43522
  %63 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 3
  br label %141

64:                                               ; preds = %36
  %65 = zext i16 %49 to i32
  %66 = shl nuw i32 %65, 16
  %67 = or i32 %66, 43522
  %68 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 1
  %69 = bitcast %struct.HuffmanCode* %68 to i32*
  store i32 %67, i32* %69, align 2
  %70 = load i16, i16* %50, align 2
  %71 = zext i16 %70 to i32
  %72 = shl nuw i32 %71, 16
  %73 = or i32 %72, 43522
  %74 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 3
  br label %141

75:                                               ; preds = %4
  %76 = load i16, i16* %2, align 2
  %77 = getelementptr inbounds i16, i16* %2, i64 1
  %78 = load i16, i16* %77, align 2
  %79 = icmp ult i16 %78, %76
  br i1 %79, label %80, label %81

80:                                               ; preds = %75
  store i16 %76, i16* %77, align 2
  store i16 %78, i16* %2, align 2
  br label %81

81:                                               ; preds = %75, %80
  %82 = phi i16 [ %76, %75 ], [ %78, %80 ]
  %83 = getelementptr inbounds i16, i16* %2, i64 2
  %84 = load i16, i16* %83, align 2
  %85 = icmp ult i16 %84, %82
  br i1 %85, label %199, label %200

86:                                               ; preds = %4
  %87 = getelementptr inbounds i16, i16* %2, i64 3
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds i16, i16* %2, i64 2
  %90 = load i16, i16* %89, align 2
  %91 = icmp ult i16 %88, %90
  br i1 %91, label %92, label %93

92:                                               ; preds = %86
  store i16 %90, i16* %87, align 2
  store i16 %88, i16* %89, align 2
  br label %93

93:                                               ; preds = %92, %86
  %94 = load i16, i16* %2, align 2
  %95 = zext i16 %94 to i32
  %96 = shl nuw i32 %95, 16
  %97 = or i32 %96, 43521
  %98 = bitcast %struct.HuffmanCode* %0 to i32*
  store i32 %97, i32* %98, align 2
  %99 = getelementptr inbounds i16, i16* %2, i64 1
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = shl nuw i32 %101, 16
  %103 = or i32 %102, 43522
  %104 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 1
  %105 = bitcast %struct.HuffmanCode* %104 to i32*
  store i32 %103, i32* %105, align 2
  %106 = load i16, i16* %2, align 2
  %107 = zext i16 %106 to i32
  %108 = shl nuw i32 %107, 16
  %109 = or i32 %108, 43521
  %110 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 2
  %111 = bitcast %struct.HuffmanCode* %110 to i32*
  store i32 %109, i32* %111, align 2
  %112 = load i16, i16* %89, align 2
  %113 = zext i16 %112 to i32
  %114 = shl nuw i32 %113, 16
  %115 = or i32 %114, 43523
  %116 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 3
  %117 = bitcast %struct.HuffmanCode* %116 to i32*
  store i32 %115, i32* %117, align 2
  %118 = load i16, i16* %2, align 2
  %119 = zext i16 %118 to i32
  %120 = shl nuw i32 %119, 16
  %121 = or i32 %120, 43521
  %122 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 4
  %123 = bitcast %struct.HuffmanCode* %122 to i32*
  store i32 %121, i32* %123, align 2
  %124 = load i16, i16* %99, align 2
  %125 = zext i16 %124 to i32
  %126 = shl nuw i32 %125, 16
  %127 = or i32 %126, 43522
  %128 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 5
  %129 = bitcast %struct.HuffmanCode* %128 to i32*
  store i32 %127, i32* %129, align 2
  %130 = load i16, i16* %2, align 2
  %131 = zext i16 %130 to i32
  %132 = shl nuw i32 %131, 16
  %133 = or i32 %132, 43521
  %134 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 6
  %135 = bitcast %struct.HuffmanCode* %134 to i32*
  store i32 %133, i32* %135, align 2
  %136 = load i16, i16* %87, align 2
  %137 = zext i16 %136 to i32
  %138 = shl nuw i32 %137, 16
  %139 = or i32 %138, 43523
  %140 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 7
  br label %141

141:                                              ; preds = %6, %166, %93, %26, %16, %64, %53
  %142 = phi %struct.HuffmanCode* [ %63, %53 ], [ %74, %64 ], [ %25, %16 ], [ %35, %26 ], [ %140, %93 ], [ %191, %166 ], [ %0, %6 ]
  %143 = phi i32 [ %62, %53 ], [ %73, %64 ], [ %24, %16 ], [ %34, %26 ], [ %139, %93 ], [ %190, %166 ], [ %10, %6 ]
  %144 = phi i32 [ 4, %53 ], [ 4, %64 ], [ 2, %16 ], [ 2, %26 ], [ 8, %93 ], [ 4, %166 ], [ 1, %6 ]
  %145 = bitcast %struct.HuffmanCode* %142 to i32*
  store i32 %143, i32* %145, align 2
  br label %146

146:                                              ; preds = %141, %4
  %147 = phi i32 [ 1, %4 ], [ %144, %141 ]
  %148 = icmp eq i32 %147, %5
  br i1 %148, label %158, label %149

149:                                              ; preds = %146
  %150 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 0, i32 0
  br label %151

151:                                              ; preds = %149, %151
  %152 = phi i32 [ %147, %149 ], [ %156, %151 ]
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %153, i32 0
  %155 = shl nuw nsw i64 %153, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %154, i8* align 2 %150, i64 %155, i1 false)
  %156 = shl i32 %152, 1
  %157 = icmp eq i32 %156, %5
  br i1 %157, label %158, label %151

158:                                              ; preds = %151, %146
  ret i32 %5

159:                                              ; preds = %206
  store i16 %208, i16* %209, align 2
  store i16 %210, i16* %207, align 2
  br label %160

160:                                              ; preds = %159, %206
  %161 = phi i16 [ %210, %159 ], [ %208, %206 ]
  %162 = getelementptr inbounds i16, i16* %2, i64 3
  %163 = load i16, i16* %162, align 2
  %164 = icmp ult i16 %163, %161
  br i1 %164, label %192, label %193

165:                                              ; preds = %193
  store i16 %195, i16* %196, align 2
  store i16 %197, i16* %194, align 2
  br label %166

166:                                              ; preds = %165, %193
  %167 = load i16, i16* %2, align 2
  %168 = zext i16 %167 to i32
  %169 = shl nuw i32 %168, 16
  %170 = or i32 %169, 43522
  %171 = bitcast %struct.HuffmanCode* %0 to i32*
  store i32 %170, i32* %171, align 2
  %172 = getelementptr inbounds i16, i16* %2, i64 1
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = shl nuw i32 %174, 16
  %176 = or i32 %175, 43522
  %177 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 2
  %178 = bitcast %struct.HuffmanCode* %177 to i32*
  store i32 %176, i32* %178, align 2
  %179 = getelementptr inbounds i16, i16* %2, i64 2
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = shl nuw i32 %181, 16
  %183 = or i32 %182, 43522
  %184 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 1
  %185 = bitcast %struct.HuffmanCode* %184 to i32*
  store i32 %183, i32* %185, align 2
  %186 = getelementptr inbounds i16, i16* %2, i64 3
  %187 = load i16, i16* %186, align 2
  %188 = zext i16 %187 to i32
  %189 = shl nuw i32 %188, 16
  %190 = or i32 %189, 43522
  %191 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 3
  br label %141

192:                                              ; preds = %160
  store i16 %161, i16* %162, align 2
  store i16 %163, i16* %207, align 2
  br label %193

193:                                              ; preds = %192, %160
  %194 = getelementptr inbounds i16, i16* %2, i64 2
  %195 = load i16, i16* %194, align 2
  %196 = getelementptr inbounds i16, i16* %2, i64 3
  %197 = load i16, i16* %196, align 2
  %198 = icmp ult i16 %197, %195
  br i1 %198, label %165, label %166

199:                                              ; preds = %81
  store i16 %82, i16* %83, align 2
  store i16 %84, i16* %2, align 2
  br label %200

200:                                              ; preds = %199, %81
  %201 = phi i16 [ %82, %81 ], [ %84, %199 ]
  %202 = getelementptr inbounds i16, i16* %2, i64 3
  %203 = load i16, i16* %202, align 2
  %204 = icmp ult i16 %203, %201
  br i1 %204, label %205, label %206

205:                                              ; preds = %200
  store i16 %201, i16* %202, align 2
  store i16 %203, i16* %2, align 2
  br label %206

206:                                              ; preds = %205, %200
  %207 = getelementptr inbounds i16, i16* %2, i64 1
  %208 = load i16, i16* %207, align 2
  %209 = getelementptr inbounds i16, i16* %2, i64 2
  %210 = load i16, i16* %209, align 2
  %211 = icmp ult i16 %210, %208
  br i1 %211, label %159, label %160
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
