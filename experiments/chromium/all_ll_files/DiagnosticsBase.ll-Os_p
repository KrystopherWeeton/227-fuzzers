; ModuleID = '../../third_party/swiftshader/src/OpenGL/compiler/preprocessor/DiagnosticsBase.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/compiler/preprocessor/DiagnosticsBase.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.pp::Diagnostics" = type { i32 (...)** }
%"struct.pp::SourceLocation" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@.str = private unnamed_addr constant [15 x i8] c"internal error\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"invalid character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"invalid number\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"integer overflow\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"float overflow\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"token too long\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"invalid expression\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"division by zero\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"unexpected end of file found in comment\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"unexpected token\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"invalid directive name\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"macro name is reserved\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"macro redefined\00", align 1
@.str.14 = private unnamed_addr constant [27 x i8] c"predefined macro redefined\00", align 1
@.str.15 = private unnamed_addr constant [27 x i8] c"predefined macro undefined\00", align 1
@.str.16 = private unnamed_addr constant [30 x i8] c"unterminated macro invocation\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"macro undefined while being invoked\00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"Not enough arguments for macro\00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"Too many arguments for macro\00", align 1
@.str.20 = private unnamed_addr constant [31 x i8] c"duplicate macro parameter name\00", align 1
@.str.21 = private unnamed_addr constant [32 x i8] c"macro invocation chain too deep\00", align 1
@.str.22 = private unnamed_addr constant [47 x i8] c"unexpected #endif found without a matching #if\00", align 1
@.str.23 = private unnamed_addr constant [46 x i8] c"unexpected #else found without a matching #if\00", align 1
@.str.24 = private unnamed_addr constant [43 x i8] c"unexpected #else found after another #else\00", align 1
@.str.25 = private unnamed_addr constant [46 x i8] c"unexpected #elif found without a matching #if\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"unexpected #elif found after #else\00", align 1
@.str.27 = private unnamed_addr constant [50 x i8] c"unexpected end of file found in conditional block\00", align 1
@.str.28 = private unnamed_addr constant [23 x i8] c"invalid extension name\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"invalid extension behavior\00", align 1
@.str.30 = private unnamed_addr constant [28 x i8] c"invalid extension directive\00", align 1
@.str.31 = private unnamed_addr constant [23 x i8] c"invalid version number\00", align 1
@.str.32 = private unnamed_addr constant [26 x i8] c"invalid version directive\00", align 1
@.str.33 = private unnamed_addr constant [88 x i8] c"#version directive must occur before anything else, except for comments and white space\00", align 1
@.str.34 = private unnamed_addr constant [62 x i8] c"#version directive must occur on the first line of the shader\00", align 1
@.str.35 = private unnamed_addr constant [20 x i8] c"invalid line number\00", align 1
@.str.36 = private unnamed_addr constant [20 x i8] c"invalid file number\00", align 1
@.str.37 = private unnamed_addr constant [23 x i8] c"invalid line directive\00", align 1
@.str.38 = private unnamed_addr constant [75 x i8] c"extension directive must occur before any non-preprocessor tokens in ESSL3\00", align 1
@.str.39 = private unnamed_addr constant [40 x i8] c"shift exponent is negative or undefined\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"internal tokenizer error\00", align 1
@.str.41 = private unnamed_addr constant [42 x i8] c"unexpected end of file found in directive\00", align 1
@.str.42 = private unnamed_addr constant [46 x i8] c"unexpected token after conditional expression\00", align 1
@.str.43 = private unnamed_addr constant [20 x i8] c"unrecognized pragma\00", align 1
@.str.44 = private unnamed_addr constant [68 x i8] c"extension directive should occur before any non-preprocessor tokens\00", align 1
@.str.45 = private unnamed_addr constant [82 x i8] c"macro name with a double underscore is reserved - unintented behavior is possible\00", align 1
@.str.46 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2pp11DiagnosticsE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.pp::Diagnostics"*)* @_ZN2pp11DiagnosticsD2Ev to i8*), i8* bitcast (void (%"class.pp::Diagnostics"*)* @_ZN2pp11DiagnosticsD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@switch.table._ZN2pp11Diagnostics7messageENS0_2IDE = private unnamed_addr constant [48 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.45, i64 0, i64 0)], align 8

@_ZN2pp11DiagnosticsD1Ev = hidden unnamed_addr alias void (%"class.pp::Diagnostics"*), void (%"class.pp::Diagnostics"*)* @_ZN2pp11DiagnosticsD2Ev

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN2pp11DiagnosticsD2Ev(%"class.pp::Diagnostics"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind optsize ssp uwtable
define hidden void @_ZN2pp11DiagnosticsD0Ev(%"class.pp::Diagnostics"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #4
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2pp11Diagnostics6reportENS0_2IDERKNS_14SourceLocationERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %5 = bitcast %"class.pp::Diagnostics"* %0 to void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)***
  %6 = load void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)**, void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)*, void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)** %6, i64 2
  %8 = load void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)*, void (%"class.pp::Diagnostics"*, i32, %"struct.pp::SourceLocation"*, %"class.std::__1::basic_string"*)** %7, align 8
  tail call void %8(%"class.pp::Diagnostics"* %0, i32 %1, %"struct.pp::SourceLocation"* %2, %"class.std::__1::basic_string"* dereferenceable(24) %3) #5
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden zeroext i1 @_ZN2pp11Diagnostics7isErrorENS0_2IDE(%"class.pp::Diagnostics"* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  %3 = add i32 %1, -1
  %4 = icmp ult i32 %3, 42
  %5 = add i32 %1, -45
  %6 = icmp ugt i32 %5, 3
  %7 = or i1 %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i32 @_ZN2pp11Diagnostics8severityENS0_2IDE(%"class.pp::Diagnostics"* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  %3 = add i32 %1, -1
  %4 = icmp ult i32 %3, 42
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  %6 = add i32 %1, -45
  %7 = icmp ult i32 %6, 4
  %8 = select i1 %7, i32 1, i32 2
  br label %9

9:                                                ; preds = %5, %2
  %10 = phi i32 [ 2, %2 ], [ %8, %5 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i8* @_ZN2pp11Diagnostics7messageENS0_2IDE(%"class.pp::Diagnostics"* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  %3 = add i32 %1, -1
  %4 = icmp ult i32 %3, 48
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds [48 x i8*], [48 x i8*]* @switch.table._ZN2pp11Diagnostics7messageENS0_2IDE, i64 0, i64 %6
  %8 = load i8*, i8** %7, align 8
  ret i8* %8

9:                                                ; preds = %2
  ret i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.46, i64 0, i64 0)
}

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }
attributes #5 = { nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
