; ModuleID = '../../third_party/dav1d/libdav1d/src/cdef_apply_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/cdef_apply_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dFrameContext = type { %struct.Dav1dRef*, %struct.Dav1dSequenceHeader*, %struct.Dav1dRef*, %struct.Dav1dFrameHeader*, [7 x %struct.Dav1dThreadPicture], %struct.Dav1dPicture, %struct.Dav1dThreadPicture, %struct.Dav1dRef*, %struct.refmvs_temporal_block*, [7 x %struct.refmvs_temporal_block*], [7 x %struct.Dav1dRef*], %struct.Dav1dRef*, %struct.Dav1dRef*, i8*, i8*, [7 x i32], [7 x [7 x i32]], [7 x i8], %struct.CdfThreadContext, %struct.CdfThreadContext, %struct.Dav1dTileGroup*, i32, i32, [7 x [2 x %struct.ScalableMotionParams]], [2 x i32], [2 x i32], %struct.Dav1dContext*, %struct.Dav1dTileContext*, i32, %struct.Dav1dTileState*, i32, %struct.Dav1dDSPContext*, %struct.anon.38, i32, [3 x i8*], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [3 x [2 x i16]]], [19 x [3 x i8*]], %struct.BlockContext*, i32, %struct.refmvs_frame, [7 x [7 x i8]], i32, %struct.anon.45, %struct.anon.46, %struct.FrameTileThreadData, [8 x i8] }
%struct.Dav1dSequenceHeader = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dSequenceHeaderOperatingPoint], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dSequenceHeaderOperatingParameterInfo] }
%struct.Dav1dSequenceHeaderOperatingPoint = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.Dav1dSequenceHeaderOperatingParameterInfo = type { i32, i32, i32 }
%struct.Dav1dFrameHeader = type { %struct.anon, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dFrameHeaderOperatingPoint], i32, i32, i32, %struct.anon.0, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32, %struct.anon.1, %struct.anon.2, %struct.anon.3, %struct.anon.4, i32, %struct.anon.7, %struct.anon.8, %struct.anon.9, i32, i32, i32, i32, [2 x i32], i32, i32, [7 x %struct.Dav1dWarpedMotionParams] }
%struct.anon = type { %struct.Dav1dFilmGrainData, i32, i32 }
%struct.Dav1dFilmGrainData = type { i32, i32, [14 x [2 x i8]], i32, [2 x i32], [2 x [10 x [2 x i8]]], i32, i32, [24 x i8], [2 x [28 x i8]], i64, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32 }
%struct.Dav1dFrameHeaderOperatingPoint = type { i32 }
%struct.anon.0 = type { i32, i32 }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i16], [65 x i16], i32 }
%struct.anon.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.3 = type { i32, i32, i32, i32, %struct.Dav1dSegmentationDataSet, [8 x i32], [8 x i32] }
%struct.Dav1dSegmentationDataSet = type { [8 x %struct.Dav1dSegmentationData], i32, i32 }
%struct.Dav1dSegmentationData = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.4 = type { %struct.anon.5, %struct.anon.6 }
%struct.anon.5 = type { i32, i32 }
%struct.anon.6 = type { i32, i32, i32 }
%struct.anon.7 = type { [2 x i32], i32, i32, i32, i32, %struct.Dav1dLoopfilterModeRefDeltas, i32 }
%struct.Dav1dLoopfilterModeRefDeltas = type { [2 x i32], [8 x i32] }
%struct.anon.8 = type { i32, i32, [8 x i32], [8 x i32] }
%struct.anon.9 = type { [3 x i32], [2 x i32] }
%struct.Dav1dWarpedMotionParams = type { i32, [6 x i32], %union.anon }
%union.anon = type { %struct.anon.10 }
%struct.anon.10 = type { i16, i16, i16, i16 }
%struct.Dav1dPicture = type { %struct.Dav1dSequenceHeader*, %struct.Dav1dFrameHeader*, [3 x i8*], [2 x i64], %struct.Dav1dPictureParameters, %struct.Dav1dDataProps, %struct.Dav1dContentLightLevel*, %struct.Dav1dMasteringDisplay*, %struct.Dav1dITUTT35*, [4 x i64], %struct.Dav1dRef*, %struct.Dav1dRef*, %struct.Dav1dRef*, %struct.Dav1dRef*, %struct.Dav1dRef*, [4 x i64], %struct.Dav1dRef*, i8* }
%struct.Dav1dPictureParameters = type { i32, i32, i32, i32 }
%struct.Dav1dDataProps = type { i64, i64, i64, i64, %struct.Dav1dUserData }
%struct.Dav1dUserData = type { i8*, %struct.Dav1dRef* }
%struct.Dav1dContentLightLevel = type { i32, i32 }
%struct.Dav1dMasteringDisplay = type { [3 x [2 x i16]], [2 x i16], i32, i32 }
%struct.Dav1dITUTT35 = type { i8, i8, i64, i8* }
%struct.Dav1dThreadPicture = type { %struct.Dav1dPicture, i32, i32, %struct.thread_data*, i32* }
%struct.thread_data = type { i64, %union.pthread_cond_t, %union.pthread_mutex_t, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.11, %union.anon.13, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.11 = type { i64 }
%union.anon.13 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.refmvs_temporal_block = type { %union.mv, i8 }
%union.mv = type { i32 }
%struct.Dav1dRef = type { i8*, i8*, i32, i32, void (i8*, i8*)*, i8* }
%struct.CdfThreadContext = type { %struct.Dav1dRef*, %union.anon.16, %struct.thread_data*, i32* }
%union.anon.16 = type { %struct.CdfContext* }
%struct.CdfContext = type { %struct.CdfModeContext, [5 x [5 x [16 x i16]]], %struct.CdfCoefContext, %struct.CdfMvContext, %struct.CdfMvContext }
%struct.CdfModeContext = type { [4 x [16 x i16]], [2 x [13 x [16 x i16]]], [9 x [16 x i16]], [5 x [4 x [16 x i16]]], [6 x [16 x i16]], [2 x [16 x i16]], [16 x i16], [2 x [13 x [8 x i16]]], [3 x [13 x [8 x i16]]], [8 x i16], [8 x [8 x i16]], [8 x i16], [8 x [8 x i16]], [3 x [8 x i16]], [2 x [7 x [8 x i16]]], [2 x [7 x [5 x [8 x i16]]]], [2 x [8 x [4 x i16]]], [4 x [3 x [4 x i16]]], [22 x [4 x i16]], [4 x i16], [5 x [4 x i16]], [4 x [4 x i16]], [4 x i16], [2 x i16], [2 x i16], [7 x [2 x i16]], [7 x [2 x i16]], [4 x [2 x i16]], [22 x [2 x i16]], [6 x [2 x i16]], [2 x [2 x i16]], [6 x [2 x i16]], [3 x [2 x i16]], [4 x [2 x i16]], [5 x [2 x i16]], [5 x [2 x i16]], [6 x [2 x i16]], [6 x [2 x i16]], [9 x [2 x i16]], [6 x [3 x [2 x i16]]], [3 x [3 x [2 x i16]]], [2 x [3 x [2 x i16]]], [3 x [3 x [2 x i16]]], [7 x [3 x [2 x i16]]], [3 x [2 x i16]], [3 x [2 x i16]], [3 x [2 x i16]], [22 x [2 x i16]], [7 x [3 x [2 x i16]]], [2 x [2 x i16]], [2 x i16], [8 x i8] }
%struct.CdfCoefContext = type { [2 x [2 x [8 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [16 x i16]]], [2 x [16 x i16]], [2 x [16 x i16]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [41 x [4 x i16]]]], [4 x [2 x [21 x [4 x i16]]]], [5 x [2 x [11 x [2 x i16]]]], [5 x [13 x [2 x i16]]], [2 x [3 x [2 x i16]]], [28 x i8] }
%struct.CdfMvContext = type { [2 x %struct.CdfMvComponent], [4 x i16], [24 x i8] }
%struct.CdfMvComponent = type { [16 x i16], [2 x [4 x i16]], [4 x i16], [2 x i16], [2 x i16], [2 x i16], [10 x [2 x i16]], [2 x i16], [16 x i8] }
%struct.Dav1dTileGroup = type { %struct.Dav1dData, i32, i32 }
%struct.Dav1dData = type { i8*, i64, %struct.Dav1dRef*, %struct.Dav1dDataProps }
%struct.ScalableMotionParams = type { i32, i32 }
%struct.Dav1dContext = type { %struct.Dav1dFrameContext*, i32, %struct.Dav1dPostFilterContext*, i32, %struct.Dav1dTileGroup*, i32, i32, i32, %struct.Dav1dMemPool*, %struct.Dav1dRef*, %struct.Dav1dSequenceHeader*, %struct.Dav1dMemPool*, %struct.Dav1dRef*, %struct.Dav1dFrameHeader*, %struct.Dav1dRef*, %struct.Dav1dContentLightLevel*, %struct.Dav1dRef*, %struct.Dav1dMasteringDisplay*, %struct.Dav1dRef*, %struct.Dav1dITUTT35*, %struct.Dav1dData, %struct.Dav1dPicture, i32, i32*, %struct.anon.17, %struct.PostFilterThreadData, %struct.Dav1dMemPool*, %struct.Dav1dMemPool*, [8 x %struct.anon.18], %struct.Dav1dMemPool*, [8 x %struct.CdfThreadContext], [3 x %struct.Dav1dDSPContext], %struct.anon.20, %struct.Dav1dPicAllocator, i32, i32, i32, i32, i32, i32, i32, i32, %struct.Dav1dLogger, %struct.Dav1dMemPool* }
%struct.Dav1dPostFilterContext = type { %struct.Dav1dContext*, %struct.thread_data, i32, i32 }
%struct.anon.17 = type { %struct.Dav1dThreadPicture*, i32 }
%struct.PostFilterThreadData = type { %union.pthread_mutex_t, %union.pthread_cond_t, %struct.Dav1dTask*, i32, i32 }
%struct.Dav1dTask = type opaque
%struct.anon.18 = type { %struct.Dav1dThreadPicture, %struct.Dav1dRef*, %struct.Dav1dRef*, [7 x i32] }
%struct.Dav1dDSPContext = type { %struct.Dav1dFilmGrainDSPContext, %struct.Dav1dIntraPredDSPContext, %struct.Dav1dMCDSPContext, %struct.Dav1dInvTxfmDSPContext, %struct.Dav1dLoopFilterDSPContext, %struct.Dav1dCdefDSPContext, %struct.Dav1dLoopRestorationDSPContext }
%struct.Dav1dFilmGrainDSPContext = type { void ([82 x i8]*, %struct.Dav1dFilmGrainData*)*, [3 x void ([82 x i8]*, [82 x i8]*, %struct.Dav1dFilmGrainData*, i64)*], void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i64, i8*, [82 x i8]*, i32, i32)*, [3 x void (i8*, i8*, i64, %struct.Dav1dFilmGrainData*, i32, i8*, [82 x i8]*, i32, i32, i8*, i64, i32, i32)*] }
%struct.Dav1dIntraPredDSPContext = type { [14 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*], [3 x void (i16*, i8*, i64, i32, i32, i32, i32)*], [6 x void (i8*, i64, i8*, i32, i32, i16*, i32)*], void (i8*, i64, i16*, i8*, i32, i32)* }
%struct.Dav1dMCDSPContext = type { [10 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*], [10 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*], [10 x void (i16*, i8*, i64, i32, i32, i32, i32)*], [10 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*], void (i8*, i64, i16*, i16*, i32, i32)*, void (i8*, i64, i16*, i16*, i32, i32, i32)*, void (i8*, i64, i16*, i16*, i32, i32, i8*)*, [3 x void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)*], void (i8*, i64, i8*, i32, i32, i8*)*, void (i8*, i64, i8*, i32, i32)*, void (i8*, i64, i8*, i32, i32)*, void (i8*, i64, i8*, i64, i16*, i32, i32)*, void (i16*, i64, i8*, i64, i16*, i32, i32)*, void (i64, i64, i64, i64, i64, i64, i8*, i64, i8*, i64)*, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32)* }
%struct.Dav1dInvTxfmDSPContext = type { [19 x [17 x void (i8*, i64, i16*, i32)*]] }
%struct.Dav1dLoopFilterDSPContext = type { [2 x [2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*]] }
%struct.Av1FilterLUT = type { [64 x i8], [64 x i8], [2 x i64] }
%struct.Dav1dCdefDSPContext = type { i32 (i8*, i64, i32*)*, [3 x void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*] }
%struct.Dav1dLoopRestorationDSPContext = type { [2 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*], [3 x void (i8*, i64, [4 x i8]*, i8*, i64, i32, i32, %union.LooprestorationParams*, i32)*] }
%union.LooprestorationParams = type { %struct.anon.19, [20 x i8] }
%struct.anon.19 = type { i32, i32, i16, i16 }
%struct.anon.20 = type { [2 x %struct.EdgeNode*], [85 x %struct.EdgeBranch], [21 x %struct.EdgeBranch], [256 x %struct.EdgeTip], [64 x %struct.EdgeTip] }
%struct.EdgeNode = type { i32, [2 x i32], [2 x i32] }
%struct.EdgeBranch = type { %struct.EdgeNode, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i32], [4 x i32], [4 x %struct.EdgeNode*] }
%struct.EdgeTip = type { %struct.EdgeNode, [4 x i32] }
%struct.Dav1dPicAllocator = type { i8*, i32 (%struct.Dav1dPicture*, i8*)*, void (%struct.Dav1dPicture*, i8*)* }
%struct.Dav1dLogger = type { i8*, void (i8*, i8*, %struct.__va_list_tag*)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.Dav1dMemPool = type { %union.pthread_mutex_t, %struct.Dav1dMemPoolBuffer*, i32, i32 }
%struct.Dav1dMemPoolBuffer = type { i8*, %struct.Dav1dMemPoolBuffer* }
%struct.Dav1dTileContext = type { %struct.Dav1dFrameContext*, %struct.Dav1dTileState*, i32, i32, %struct.BlockContext, %struct.BlockContext*, [16 x i8], %union.anon.24, [2 x [32 x [3 x [8 x i16]]]], [2 x [32 x i8]], [1024 x i8], %struct.refmvs_tile, [24 x i8], %union.anon.26, %struct.Dav1dWarpedMotionParams, %struct.Av1Filter*, i8*, i32, %struct.anon.37, [8 x i8] }
%struct.BlockContext = type { [32 x i8], [32 x i8], [2 x [32 x i8]], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [2 x [32 x i8]], [2 x [32 x i8]], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [16 x i8], [32 x i8], [32 x i8] }
%union.anon.24 = type { [1024 x i32] }
%struct.refmvs_tile = type { %struct.refmvs_frame*, [37 x %struct.refmvs_block*], %struct.refmvs_temporal_block*, %struct.anon.25, %struct.anon.25 }
%struct.refmvs_block = type { %union.refmvs_mvpair, %union.refmvs_refpair, i8, i8 }
%union.refmvs_mvpair = type { i64 }
%union.refmvs_refpair = type { i16 }
%struct.anon.25 = type { i32, i32 }
%union.anon.26 = type { %struct.anon.27 }
%struct.anon.27 = type { %union.anon.28, %union.anon.30 }
%union.anon.28 = type { %struct.anon.29 }
%struct.anon.29 = type { [2 x [16384 x i16]], [16384 x i8] }
%union.anon.30 = type { [84160 x i16] }
%struct.anon.37 = type { %struct.thread_data, %struct.FrameTileThreadData*, i32 }
%struct.Dav1dTileState = type { %struct.CdfContext, %struct.MsacContext, %struct.anon.21, i32, %struct.anon.22, %struct.anon.23, [8 x [3 x [2 x i16]]], [3 x [2 x i16]]*, i32, [4 x i8], [8 x [4 x [8 x [2 x i8]]]], [4 x [8 x [2 x i8]]]*, [3 x %struct.Av1RestorationUnit*], [24 x i8] }
%struct.MsacContext = type { i8*, i8*, i64, i32, i32, i32, i32 (%struct.MsacContext*, i16*, i64)* }
%struct.anon.21 = type { i32, i32, i32, i32, i32, i32 }
%struct.anon.22 = type { %union.pthread_mutex_t, %union.pthread_cond_t }
%struct.anon.23 = type { i8*, i16* }
%struct.Av1RestorationUnit = type { i8, [3 x i8], [3 x i8], i8, [2 x i8] }
%struct.anon.38 = type { void (%struct.Dav1dTileContext*, i32, i32, %struct.Av1Block*)*, i32 (%struct.Dav1dTileContext*, i32, %struct.Av1Block*)*, void (%struct.Dav1dFrameContext*, i32)*, void (%struct.Dav1dFrameContext*, i32)*, void (%struct.Dav1dFrameContext*, i32)*, void (%struct.Dav1dFrameContext*, i32)*, void (%struct.Dav1dFrameContext*, i32)*, void (%struct.Dav1dTileContext*)*, void (%struct.Dav1dTileContext*, i32, %struct.Av1Block*)* }
%struct.Av1Block = type { i8, i8, i8, i8, i8, i8, i8, i8, %union.anon.39 }
%union.anon.39 = type { %struct.anon.41 }
%struct.anon.41 = type { %union.anon.42, i8, i8, i8, i8, [2 x i8], i8, i8, i8, i8, i16 }
%union.anon.42 = type { %struct.anon.43 }
%struct.anon.43 = type { [2 x %union.mv], i8, i8, i8 }
%struct.refmvs_frame = type { %struct.Dav1dFrameHeader*, i32, i32, i32, i32, i32, i32, [7 x i8], [7 x i8], [7 x i8], [3 x i8], [3 x i32], [3 x [7 x i32]], i32, %struct.refmvs_temporal_block*, %struct.refmvs_temporal_block**, %struct.refmvs_temporal_block*, i64, %struct.refmvs_block*, i64, i32, i32 }
%struct.anon.45 = type { %struct.thread_data, i32, i32, %struct.Av1Block*, %struct.CodedBlockInfo*, [3 x [8 x i16]]*, i8*, i16*, i32, i32, i32, i32* }
%struct.CodedBlockInfo = type { [3 x i16], [3 x i8] }
%struct.anon.46 = type { [4 x i8]*, %struct.Av1Filter*, %struct.Av1Restoration*, i32, i32, i32, [2 x i32], i32, i32, [12 x i8], %struct.Av1FilterLUT, i32, [8 x [4 x [8 x [2 x i8]]]], [2 x i8*], i8*, [2 x [3 x i8*]], [3 x i8*], i32, [3 x i8*], [3 x i8*], %struct.Av1Filter*, %struct.Av1Filter*, i32, %struct.anon.47, [8 x i8] }
%struct.Av1Restoration = type { [3 x [4 x %struct.Av1RestorationUnit]] }
%struct.anon.47 = type { %union.pthread_cond_t, %struct.PostFilterThreadData*, %struct.Dav1dTask*, i32, i32, i32, i32 }
%struct.FrameTileThreadData = type { i64, %union.pthread_mutex_t, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32, [2 x i32]*, i32, [2 x i32], [65 x i16], i32 }
%struct.Av1Filter = type { [2 x [32 x [3 x [2 x i16]]]], [2 x [32 x [2 x [2 x i16]]]], [4 x i8], [16 x [2 x i16]] }

@dav1d_cdef_brow_8bpc.uv_dirs = internal unnamed_addr constant [2 x [8 x i8]] [[8 x i8] c"\00\01\02\03\04\05\06\07", [8 x i8] c"\07\00\02\04\05\06\06\06"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_cdef_brow_8bpc(%struct.Dav1dFrameContext* nocapture, i8** nocapture readonly, %struct.Av1Filter* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [2 x [3 x [8 x [2 x i8]]]], align 16
  %7 = alloca [3 x i8*], align 16
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 31
  %10 = load %struct.Dav1dDSPContext*, %struct.Dav1dDSPContext** %9, align 8
  %11 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 40
  %12 = load i32, i32* %11, align 16
  %13 = shl i32 %12, 1
  %14 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 3
  %15 = load %struct.Dav1dFrameHeader*, %struct.Dav1dFrameHeader** %14, align 8
  %16 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %15, i64 0, i32 40, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 5, i32 4, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 1
  %21 = icmp ne i32 %19, 3
  %22 = zext i1 %21 to i32
  %23 = icmp eq i32 %19, 2
  %24 = zext i1 %23 to i64
  %25 = icmp slt i32 %3, %4
  br i1 %25, label %26, label %63

26:                                               ; preds = %5
  %27 = sub i32 3, %19
  %28 = getelementptr inbounds i8*, i8** %1, i64 2
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8*, i8** %1, i64 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %1 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp sgt i32 %3, 0
  %37 = select i1 %36, i32 12, i32 8
  %38 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 3
  %39 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 39
  %40 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 5, i32 3, i64 0
  %41 = icmp eq i32 %19, 0
  %42 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 5, i32 3, i64 1
  %43 = select i1 %20, i64 2, i64 6
  %44 = select i1 %20, i64 3, i64 7
  %45 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 0, i64 0, i64 0, i64 0
  %46 = icmp sgt i32 %13, 0
  %47 = getelementptr inbounds [3 x i8*], [3 x i8*]* %7, i64 0, i64 0
  %48 = getelementptr inbounds [3 x i8*], [3 x i8*]* %7, i64 0, i64 1
  %49 = getelementptr inbounds [3 x i8*], [3 x i8*]* %7, i64 0, i64 2
  %50 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 38
  %51 = getelementptr inbounds %struct.Dav1dDSPContext, %struct.Dav1dDSPContext* %10, i64 0, i32 5, i32 0
  %52 = getelementptr inbounds %struct.Dav1dDSPContext, %struct.Dav1dDSPContext* %10, i64 0, i32 5, i32 1, i64 0
  %53 = icmp ne i32 %19, 0
  %54 = sext i32 %27 to i64
  %55 = getelementptr inbounds %struct.Dav1dDSPContext, %struct.Dav1dDSPContext* %10, i64 0, i32 5, i32 1, i64 %54
  %56 = add nsw i32 %17, -1
  %57 = lshr i32 8, %22
  %58 = zext i32 %57 to i64
  %59 = lshr i32 64, %22
  %60 = zext i32 %59 to i64
  %61 = zext i1 %20 to i64
  %62 = load i32, i32* %38, align 8
  br label %64

63:                                               ; preds = %139, %5
  ret void

64:                                               ; preds = %26, %139
  %65 = phi i32 [ %62, %26 ], [ %154, %139 ]
  %66 = phi i32 [ %37, %26 ], [ %155, %139 ]
  %67 = phi i32 [ %3, %26 ], [ %74, %139 ]
  %68 = phi i32 [ 0, %26 ], [ %140, %139 ]
  %69 = phi i64 [ %35, %26 ], [ %145, %139 ]
  %70 = phi i64 [ %33, %26 ], [ %150, %139 ]
  %71 = phi i64 [ %30, %26 ], [ %152, %139 ]
  %72 = lshr i32 %67, 1
  %73 = and i32 %72, 15
  %74 = add nsw i32 %67, 2
  %75 = load i32, i32* %39, align 4
  %76 = icmp slt i32 %74, %75
  %77 = and i32 %66, -9
  %78 = select i1 %76, i32 %66, i32 %77
  %79 = and i32 %78, 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %64
  %82 = icmp eq i32 %65, 0
  %83 = zext i1 %82 to i64
  %84 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %83, i64 0
  %85 = load i64, i64* %40, align 8
  %86 = icmp slt i64 %85, 0
  %87 = load i8*, i8** %84, align 8
  br i1 %86, label %88, label %94

88:                                               ; preds = %81
  %89 = getelementptr inbounds i8, i8* %87, i64 %85
  %90 = inttoptr i64 %69 to i8*
  %91 = mul nsw i64 %85, 7
  %92 = getelementptr inbounds i8, i8* %90, i64 %91
  %93 = mul nsw i64 %85, -2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %92, i64 %93, i1 false) #4
  br label %99

94:                                               ; preds = %81
  %95 = inttoptr i64 %69 to i8*
  %96 = mul nsw i64 %85, 6
  %97 = getelementptr inbounds i8, i8* %95, i64 %96
  %98 = shl nsw i64 %85, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %97, i64 %98, i1 false) #4
  br label %99

99:                                               ; preds = %94, %88
  br i1 %41, label %125, label %100

100:                                              ; preds = %99
  %101 = load i64, i64* %42, align 8
  %102 = icmp slt i64 %101, 0
  %103 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %83, i64 1
  %104 = load i8*, i8** %103, align 8
  br i1 %102, label %105, label %116

105:                                              ; preds = %100
  %106 = getelementptr inbounds i8, i8* %104, i64 %101
  %107 = inttoptr i64 %70 to i8*
  %108 = mul nsw i64 %101, %44
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = mul nsw i64 %101, -2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %109, i64 %110, i1 false) #4
  %111 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %83, i64 2
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 %101
  %114 = inttoptr i64 %71 to i8*
  %115 = getelementptr inbounds i8, i8* %114, i64 %108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %115, i64 %110, i1 false) #4
  br label %125

116:                                              ; preds = %100
  %117 = inttoptr i64 %70 to i8*
  %118 = mul nsw i64 %101, %43
  %119 = getelementptr inbounds i8, i8* %117, i64 %118
  %120 = shl nsw i64 %101, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 1 %119, i64 %120, i1 false) #4
  %121 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %83, i64 2
  %122 = load i8*, i8** %121, align 8
  %123 = inttoptr i64 %71 to i8*
  %124 = getelementptr inbounds i8, i8* %123, i64 %118
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %122, i8* align 1 %124, i64 %120, i1 false) #4
  br label %125

125:                                              ; preds = %116, %105, %99, %64
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %45) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 96, i1 false)
  %126 = inttoptr i64 %69 to i8*
  %127 = inttoptr i64 %70 to i8*
  %128 = inttoptr i64 %71 to i8*
  %129 = and i32 %78, -4
  %130 = or i32 %129, 2
  br i1 %46, label %131, label %139

131:                                              ; preds = %125
  %132 = lshr i32 %67, 3
  %133 = and i32 %132, 2
  %134 = zext i32 %73 to i64
  %135 = sext i32 %65 to i64
  %136 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %135, i64 0
  %137 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %135, i64 1
  %138 = getelementptr inbounds %struct.Dav1dFrameContext, %struct.Dav1dFrameContext* %0, i64 0, i32 54, i32 15, i64 %135, i64 2
  br label %157

139:                                              ; preds = %346, %125
  %140 = phi i32 [ %68, %125 ], [ %347, %346 ]
  %141 = phi i32 [ %130, %125 ], [ %355, %346 ]
  %142 = load i64, i64* %40, align 8
  %143 = shl nsw i64 %142, 3
  %144 = getelementptr inbounds i8, i8* %126, i64 %143
  %145 = ptrtoint i8* %144 to i64
  %146 = load i64, i64* %42, align 8
  %147 = shl nsw i64 %146, 3
  %148 = ashr i64 %147, %61
  %149 = getelementptr inbounds i8, i8* %127, i64 %148
  %150 = ptrtoint i8* %149 to i64
  %151 = getelementptr inbounds i8, i8* %128, i64 %148
  %152 = ptrtoint i8* %151 to i64
  %153 = load i32, i32* %38, align 8
  %154 = xor i32 %153, 1
  store i32 %154, i32* %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %45) #4
  %155 = or i32 %141, 4
  %156 = icmp slt i32 %74, %4
  br i1 %156, label %64, label %63

157:                                              ; preds = %346, %131
  %158 = phi i32 [ 0, %131 ], [ %356, %346 ]
  %159 = phi i32 [ %130, %131 ], [ %355, %346 ]
  %160 = phi i32 [ 1, %131 ], [ %349, %346 ]
  %161 = phi i32 [ 0, %131 ], [ %354, %346 ]
  %162 = phi i32 [ 0, %131 ], [ %348, %346 ]
  %163 = phi i8* [ %126, %131 ], [ %351, %346 ]
  %164 = phi i8* [ %127, %131 ], [ %352, %346 ]
  %165 = phi i8* [ %128, %131 ], [ %353, %346 ]
  %166 = phi i32 [ %68, %131 ], [ %347, %346 ]
  %167 = zext i32 %158 to i64
  %168 = lshr i32 %161, 1
  %169 = and i32 %161, 1
  %170 = or i32 %169, %133
  %171 = zext i32 %168 to i64
  %172 = zext i32 %170 to i64
  %173 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %2, i64 %171, i32 2, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = icmp eq i8 %174, -1
  br i1 %175, label %346, label %176

176:                                              ; preds = %157
  %177 = load %struct.Dav1dFrameHeader*, %struct.Dav1dFrameHeader** %14, align 8
  %178 = sext i8 %174 to i64
  %179 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %177, i64 0, i32 40, i32 2, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %177, i64 0, i32 40, i32 3, i64 %178
  %182 = load i32, i32* %181, align 4
  %183 = or i32 %180, %182
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %346, label %185

185:                                              ; preds = %176
  %186 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %2, i64 %171, i32 3, i64 %134, i64 1
  %187 = load i16, i16* %186, align 2
  %188 = zext i16 %187 to i32
  %189 = shl nuw i32 %188, 16
  %190 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %2, i64 %171, i32 3, i64 %134, i64 0
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i32
  %193 = or i32 %189, %192
  %194 = icmp ne i32 %180, 0
  %195 = zext i1 %194 to i32
  %196 = icmp ne i32 %182, 0
  %197 = zext i1 %196 to i32
  %198 = shl nuw nsw i32 %197, 1
  %199 = or i32 %198, %195
  %200 = ashr i32 %180, 2
  %201 = and i32 %180, 3
  %202 = icmp eq i32 %201, 3
  %203 = zext i1 %202 to i32
  %204 = add nuw nsw i32 %201, %203
  %205 = ashr i32 %182, 2
  %206 = and i32 %182, 3
  %207 = icmp eq i32 %206, 3
  %208 = zext i1 %207 to i32
  %209 = add nuw nsw i32 %206, %208
  store i8* %163, i8** %47, align 16
  store i8* %164, i8** %48, align 8
  store i8* %165, i8** %49, align 16
  %210 = shl i32 %161, 4
  %211 = add i32 %210, 16
  %212 = load i32, i32* %50, align 8
  %213 = icmp slt i32 %211, %212
  %214 = select i1 %213, i32 %211, i32 %212
  %215 = icmp slt i32 %210, %214
  br i1 %215, label %216, label %346

216:                                              ; preds = %185
  %217 = icmp eq i32 %200, 0
  %218 = icmp eq i32 %205, 0
  %219 = or i32 %205, %200
  %220 = icmp eq i32 %219, 0
  %221 = icmp eq i32 %204, 0
  br label %222

222:                                              ; preds = %216, %334
  %223 = phi i32 [ %212, %216 ], [ %335, %334 ]
  %224 = phi i8* [ %165, %216 ], [ %341, %334 ]
  %225 = phi i8* [ %164, %216 ], [ %340, %334 ]
  %226 = phi i8* [ %163, %216 ], [ %339, %334 ]
  %227 = phi i64 [ %167, %216 ], [ %232, %334 ]
  %228 = phi i32 [ %159, %216 ], [ %342, %334 ]
  %229 = phi i32 [ %160, %216 ], [ %338, %334 ]
  %230 = phi i32 [ %162, %216 ], [ %337, %334 ]
  %231 = phi i32 [ %166, %216 ], [ %336, %334 ]
  %232 = add nuw i64 %227, 2
  %233 = trunc i64 %232 to i32
  %234 = icmp sgt i32 %223, %233
  %235 = and i32 %228, -3
  %236 = select i1 %234, i32 %228, i32 %235
  %237 = trunc i64 %227 to i32
  %238 = and i32 %237, 30
  %239 = shl i32 3, %238
  %240 = and i32 %239, %193
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %334, label %242

242:                                              ; preds = %222
  %243 = icmp eq i32 %229, 0
  %244 = xor i32 %230, 3
  %245 = select i1 %243, i32 %244, i32 3
  %246 = and i32 %245, %199
  %247 = icmp eq i32 %246, 0
  %248 = and i32 %236, 1
  %249 = icmp eq i32 %248, 0
  %250 = or i1 %247, %249
  br i1 %250, label %254, label %251

251:                                              ; preds = %242
  %252 = sext i32 %231 to i64
  %253 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 %252, i64 0
  call fastcc void @backup2x8([8 x [2 x i8]]* %253, i8** nonnull %47, i64* %40, i32 0, i32 %19, i32 %246)
  br label %254

254:                                              ; preds = %242, %251
  %255 = and i32 %236, 2
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %261, label %257

257:                                              ; preds = %254
  %258 = icmp eq i32 %231, 0
  %259 = zext i1 %258 to i64
  %260 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 %259, i64 0
  call fastcc void @backup2x8([8 x [2 x i8]]* %260, i8** nonnull %47, i64* %40, i32 8, i32 %19, i32 %199)
  br label %261

261:                                              ; preds = %254, %257
  store i32 -1431655766, i32* %8, align 4
  br i1 %220, label %266, label %262

262:                                              ; preds = %261
  %263 = load i32 (i8*, i64, i32*)*, i32 (i8*, i64, i32*)** %51, align 8
  %264 = load i64, i64* %40, align 8
  %265 = call i32 %263(i8* %226, i64 %264, i32* nonnull %8) #4
  br label %266

266:                                              ; preds = %261, %262
  %267 = phi i32 [ %265, %262 ], [ -1431655766, %261 ]
  br i1 %217, label %298, label %268

268:                                              ; preds = %266
  %269 = load i32, i32* %8, align 4
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %285, label %271

271:                                              ; preds = %268
  %272 = lshr i32 %269, 6
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %280, label %274

274:                                              ; preds = %271
  %275 = call i32 @llvm.ctlz.i32(i32 %272, i1 true) #4, !range !2
  %276 = xor i32 %275, 31
  %277 = icmp ult i32 %276, 12
  %278 = select i1 %277, i32 %276, i32 12
  %279 = add nuw nsw i32 %278, 4
  br label %280

280:                                              ; preds = %274, %271
  %281 = phi i32 [ %279, %274 ], [ 4, %271 ]
  %282 = mul nsw i32 %281, %200
  %283 = add nsw i32 %282, 8
  %284 = ashr i32 %283, 4
  br label %285

285:                                              ; preds = %268, %280
  %286 = phi i32 [ %284, %280 ], [ 0, %268 ]
  %287 = or i32 %286, %204
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %308, label %289

289:                                              ; preds = %285
  %290 = load void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*, void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)** %52, align 8
  %291 = load i64, i64* %40, align 8
  %292 = sext i32 %231 to i64
  %293 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 %292, i64 0, i64 0
  %294 = load i8*, i8** %136, align 8
  %295 = shl i64 %227, 2
  %296 = and i64 %295, 4294967288
  %297 = getelementptr inbounds i8, i8* %294, i64 %296
  call void %290(i8* %226, i64 %291, [2 x i8]* %293, i8* %297, i32 %286, i32 %204, i32 %267, i32 %17, i32 %236) #4
  br label %308

298:                                              ; preds = %266
  br i1 %221, label %308, label %299

299:                                              ; preds = %298
  %300 = load void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*, void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)** %52, align 8
  %301 = load i64, i64* %40, align 8
  %302 = sext i32 %231 to i64
  %303 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 %302, i64 0, i64 0
  %304 = load i8*, i8** %136, align 8
  %305 = shl i64 %227, 2
  %306 = and i64 %305, 4294967288
  %307 = getelementptr inbounds i8, i8* %304, i64 %306
  call void %300(i8* %226, i64 %301, [2 x i8]* %303, i8* %307, i32 0, i32 %204, i32 0, i32 %17, i32 %236) #4
  br label %308

308:                                              ; preds = %289, %285, %298, %299
  br i1 %196, label %309, label %331

309:                                              ; preds = %308
  call void @llvm.assume(i1 %53)
  br i1 %218, label %315, label %310

310:                                              ; preds = %309
  %311 = sext i32 %267 to i64
  %312 = getelementptr inbounds [2 x [8 x i8]], [2 x [8 x i8]]* @dav1d_cdef_brow_8bpc.uv_dirs, i64 0, i64 %24, i64 %311
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i32
  br label %315

315:                                              ; preds = %309, %310
  %316 = phi i32 [ %314, %310 ], [ 0, %309 ]
  %317 = sext i32 %231 to i64
  %318 = shl nsw i32 %237, 2
  %319 = lshr i32 %318, %22
  %320 = zext i32 %319 to i64
  %321 = load void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*, void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)** %55, align 8
  %322 = load i64, i64* %42, align 8
  %323 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 %317, i64 1, i64 0
  %324 = load i8*, i8** %137, align 8
  %325 = getelementptr inbounds i8, i8* %324, i64 %320
  call void %321(i8* %225, i64 %322, [2 x i8]* %323, i8* %325, i32 %205, i32 %209, i32 %316, i32 %56, i32 %236) #4
  %326 = load void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*, void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)** %55, align 8
  %327 = load i64, i64* %42, align 8
  %328 = getelementptr inbounds [2 x [3 x [8 x [2 x i8]]]], [2 x [3 x [8 x [2 x i8]]]]* %6, i64 0, i64 %317, i64 2, i64 0
  %329 = load i8*, i8** %138, align 8
  %330 = getelementptr inbounds i8, i8* %329, i64 %320
  call void %326(i8* %224, i64 %327, [2 x i8]* %328, i8* %330, i32 %205, i32 %209, i32 %316, i32 %56, i32 %236) #4
  br label %331

331:                                              ; preds = %315, %308
  %332 = xor i32 %231, 1
  %333 = load i32, i32* %50, align 8
  br label %334

334:                                              ; preds = %222, %331
  %335 = phi i32 [ %333, %331 ], [ %223, %222 ]
  %336 = phi i32 [ %332, %331 ], [ %231, %222 ]
  %337 = phi i32 [ %199, %331 ], [ %230, %222 ]
  %338 = phi i32 [ 0, %331 ], [ 1, %222 ]
  %339 = getelementptr inbounds i8, i8* %226, i64 8
  store i8* %339, i8** %47, align 16
  %340 = getelementptr inbounds i8, i8* %225, i64 %58
  store i8* %340, i8** %48, align 8
  %341 = getelementptr inbounds i8, i8* %224, i64 %58
  store i8* %341, i8** %49, align 16
  %342 = or i32 %236, 1
  %343 = icmp slt i32 %211, %335
  %344 = select i1 %343, i32 %211, i32 %335
  %345 = icmp sgt i32 %344, %233
  br i1 %345, label %222, label %346

346:                                              ; preds = %334, %176, %185, %157
  %347 = phi i32 [ %166, %157 ], [ %166, %185 ], [ %166, %176 ], [ %336, %334 ]
  %348 = phi i32 [ %162, %157 ], [ %162, %185 ], [ %162, %176 ], [ %337, %334 ]
  %349 = phi i32 [ 1, %157 ], [ %160, %185 ], [ 1, %176 ], [ %338, %334 ]
  %350 = phi i32 [ %159, %157 ], [ %159, %185 ], [ %159, %176 ], [ %342, %334 ]
  %351 = getelementptr inbounds i8, i8* %163, i64 64
  %352 = getelementptr inbounds i8, i8* %164, i64 %60
  %353 = getelementptr inbounds i8, i8* %165, i64 %60
  %354 = add nuw nsw i32 %161, 1
  %355 = or i32 %350, 1
  %356 = add i32 %158, 16
  %357 = icmp eq i32 %354, %13
  br i1 %357, label %139, label %157
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @backup2x8([8 x [2 x i8]]* nocapture, i8** nocapture readonly, i64* nocapture readonly, i32, i32, i32) unnamed_addr #2 {
  %7 = and i32 %5, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %79, label %9

9:                                                ; preds = %6
  %10 = sext i32 %3 to i64
  %11 = add nsw i64 %10, -2
  %12 = load i8*, i8** %1, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %11
  %14 = bitcast i8* %13 to i16*
  %15 = bitcast [8 x [2 x i8]]* %0 to i16*
  %16 = load i16, i16* %14, align 1
  store i16 %16, i16* %15, align 1
  %17 = load i64, i64* %2, align 8
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 1, i64 0
  %19 = load i8*, i8** %1, align 8
  %20 = add i64 %11, %17
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = bitcast i8* %21 to i16*
  %23 = bitcast i8* %18 to i16*
  %24 = load i16, i16* %22, align 1
  store i16 %24, i16* %23, align 1
  %25 = load i64, i64* %2, align 8
  %26 = add nsw i64 %25, %17
  %27 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 2, i64 0
  %28 = load i8*, i8** %1, align 8
  %29 = add i64 %11, %26
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = bitcast i8* %30 to i16*
  %32 = bitcast i8* %27 to i16*
  %33 = load i16, i16* %31, align 1
  store i16 %33, i16* %32, align 1
  %34 = load i64, i64* %2, align 8
  %35 = add nsw i64 %34, %26
  %36 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 3, i64 0
  %37 = load i8*, i8** %1, align 8
  %38 = add i64 %11, %35
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = bitcast i8* %39 to i16*
  %41 = bitcast i8* %36 to i16*
  %42 = load i16, i16* %40, align 1
  store i16 %42, i16* %41, align 1
  %43 = load i64, i64* %2, align 8
  %44 = add nsw i64 %43, %35
  %45 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 4, i64 0
  %46 = load i8*, i8** %1, align 8
  %47 = add i64 %11, %44
  %48 = getelementptr inbounds i8, i8* %46, i64 %47
  %49 = bitcast i8* %48 to i16*
  %50 = bitcast i8* %45 to i16*
  %51 = load i16, i16* %49, align 1
  store i16 %51, i16* %50, align 1
  %52 = load i64, i64* %2, align 8
  %53 = add nsw i64 %52, %44
  %54 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 5, i64 0
  %55 = load i8*, i8** %1, align 8
  %56 = add i64 %11, %53
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = bitcast i8* %57 to i16*
  %59 = bitcast i8* %54 to i16*
  %60 = load i16, i16* %58, align 1
  store i16 %60, i16* %59, align 1
  %61 = load i64, i64* %2, align 8
  %62 = add nsw i64 %61, %53
  %63 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 6, i64 0
  %64 = load i8*, i8** %1, align 8
  %65 = add i64 %11, %62
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = bitcast i8* %66 to i16*
  %68 = bitcast i8* %63 to i16*
  %69 = load i16, i16* %67, align 1
  store i16 %69, i16* %68, align 1
  %70 = load i64, i64* %2, align 8
  %71 = add nsw i64 %70, %62
  %72 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 0, i64 7, i64 0
  %73 = load i8*, i8** %1, align 8
  %74 = add i64 %11, %71
  %75 = getelementptr inbounds i8, i8* %73, i64 %74
  %76 = bitcast i8* %75 to i16*
  %77 = bitcast i8* %72 to i16*
  %78 = load i16, i16* %76, align 1
  store i16 %78, i16* %77, align 1
  br label %79

79:                                               ; preds = %9, %6
  %80 = icmp eq i32 %4, 0
  %81 = and i32 %5, 2
  %82 = icmp eq i32 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %135, label %84

84:                                               ; preds = %79
  %85 = icmp eq i32 %4, 1
  %86 = zext i1 %85 to i32
  %87 = lshr i32 8, %86
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %135

89:                                               ; preds = %84
  %90 = icmp ne i32 %4, 3
  %91 = zext i1 %90 to i32
  %92 = ashr i32 %3, %91
  %93 = getelementptr inbounds i8*, i8** %1, i64 1
  %94 = sext i32 %92 to i64
  %95 = add nsw i64 %94, -2
  %96 = getelementptr inbounds i8*, i8** %1, i64 2
  %97 = getelementptr inbounds i64, i64* %2, i64 1
  %98 = zext i32 %87 to i64
  br label %99

99:                                               ; preds = %99, %89
  %100 = phi i64 [ 0, %89 ], [ %131, %99 ]
  %101 = phi i64 [ 0, %89 ], [ %133, %99 ]
  %102 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 1, i64 %100, i64 0
  %103 = load i8*, i8** %93, align 8
  %104 = add i64 %95, %101
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = bitcast i8* %105 to i16*
  %107 = bitcast i8* %102 to i16*
  %108 = load i16, i16* %106, align 1
  store i16 %108, i16* %107, align 1
  %109 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 2, i64 %100, i64 0
  %110 = load i8*, i8** %96, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 %104
  %112 = bitcast i8* %111 to i16*
  %113 = bitcast i8* %109 to i16*
  %114 = load i16, i16* %112, align 1
  store i16 %114, i16* %113, align 1
  %115 = or i64 %100, 1
  %116 = load i64, i64* %97, align 8
  %117 = add nsw i64 %116, %101
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 1, i64 %115, i64 0
  %119 = load i8*, i8** %93, align 8
  %120 = add i64 %95, %117
  %121 = getelementptr inbounds i8, i8* %119, i64 %120
  %122 = bitcast i8* %121 to i16*
  %123 = bitcast i8* %118 to i16*
  %124 = load i16, i16* %122, align 1
  store i16 %124, i16* %123, align 1
  %125 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %0, i64 2, i64 %115, i64 0
  %126 = load i8*, i8** %96, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 %120
  %128 = bitcast i8* %127 to i16*
  %129 = bitcast i8* %125 to i16*
  %130 = load i16, i16* %128, align 1
  store i16 %130, i16* %129, align 1
  %131 = add nuw nsw i64 %100, 2
  %132 = load i64, i64* %97, align 8
  %133 = add nsw i64 %132, %117
  %134 = icmp eq i64 %131, %98
  br i1 %134, label %135, label %99

135:                                              ; preds = %99, %84, %79
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
