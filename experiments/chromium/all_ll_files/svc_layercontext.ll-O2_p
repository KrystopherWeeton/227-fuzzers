; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/svc_layercontext.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/svc_layercontext.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [27 x i8] c"Failed to allocate lc->map\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"Failed to allocate lc->last_coded_q_map\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_init_layer_context(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 11
  store double 3.000000e+01, double* %6, align 8
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 24
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 19
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 6
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %119

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 12
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 0
  %18 = mul nsw i32 %5, %3
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %21 = load i32, i32* %15, align 4
  br label %22

22:                                               ; preds = %14, %33
  %23 = phi i32 [ %12, %14 ], [ %34, %33 ]
  %24 = phi i32 [ %21, %14 ], [ %35, %33 ]
  %25 = phi i64 [ 0, %14 ], [ %38, %33 ]
  %26 = icmp sgt i32 %24, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %22
  %28 = trunc i64 %25 to i32
  br label %41

29:                                               ; preds = %33
  %30 = icmp eq i32 %34, 3
  br i1 %30, label %117, label %119

31:                                               ; preds = %113
  %32 = load i32, i32* %11, align 8
  br label %33

33:                                               ; preds = %31, %22
  %34 = phi i32 [ %32, %31 ], [ %23, %22 ]
  %35 = phi i32 [ %115, %31 ], [ %24, %22 ]
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 22, i64 %25
  store i8 3, i8* %36, align 1
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 23, i64 %25
  store i32 8, i32* %37, align 4
  %38 = add nuw nsw i64 %25, 1
  %39 = sext i32 %34 to i64
  %40 = icmp slt i64 %38, %39
  br i1 %40, label %22, label %29

41:                                               ; preds = %27, %113
  %42 = phi i32 [ %115, %113 ], [ %24, %27 ]
  %43 = phi i32 [ %114, %113 ], [ 0, %27 ]
  %44 = mul nsw i32 %42, %28
  %45 = add nsw i32 %44, %43
  %46 = sext i32 %45 to i64
  %47 = load i32, i32* %16, align 8
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 25
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 40
  store i64 0, i64* %49, align 8
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 26
  store i32 0, i32* %50, align 4
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 29
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 27
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 36
  store i32 0, i32* %53, align 4
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 35
  store i32 0, i32* %54, align 8
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 10
  %56 = bitcast double* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false)
  %57 = load i32, i32* %55, align 4
  %58 = tail call i32 @av1_quantizer_to_qindex(i32 %57) #6
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 42
  store i32 %58, i32* %59, align 8
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 11
  %61 = load i32, i32* %60, align 8
  %62 = tail call i32 @av1_quantizer_to_qindex(i32 %61) #6
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 43
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 7, i64 0
  %65 = bitcast double* %64 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %65, align 8
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 7, i64 2
  %67 = bitcast double* %66 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %67, align 8
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 3
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 6
  store i64 %69, i64* %70, align 8
  %71 = load i32, i32* %59, align 8
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 5, i64 1
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 28, i64 1
  store i32 %71, i32* %73, align 4
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 28, i64 0
  store i32 %71, i32* %74, align 4
  %75 = load i64, i64* %17, align 8
  %76 = mul nsw i64 %75, %69
  %77 = sdiv i64 %76, 1000
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 31
  store i64 %77, i64* %78, align 8
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 0, i32 32
  store i64 %77, i64* %79, align 8
  %80 = load i32, i32* %11, align 8
  %81 = icmp sgt i32 %80, 1
  %82 = icmp eq i32 %43, 0
  %83 = and i1 %82, %81
  br i1 %83, label %84, label %113

84:                                               ; preds = %41
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 13
  store i32 0, i32* %85, align 8
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 16
  store i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 17
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 18
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 14
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %84
  tail call void @aom_free(i8* nonnull %90) #6
  br label %93

93:                                               ; preds = %84, %92
  %94 = tail call i8* @aom_malloc(i64 %19) #6
  store i8* %94, i8** %89, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %96, label %99

96:                                               ; preds = %93
  %97 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %20, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %97, i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)) #6
  %98 = load i8*, i8** %89, align 8
  br label %99

99:                                               ; preds = %93, %96
  %100 = phi i8* [ %94, %93 ], [ %98, %96 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 0, i64 %19, i1 false)
  %101 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %46, i32 15
  %102 = load i8*, i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %99
  tail call void @aom_free(i8* nonnull %102) #6
  br label %105

105:                                              ; preds = %99, %104
  %106 = tail call i8* @aom_malloc(i64 %19) #6
  store i8* %106, i8** %101, align 8
  %107 = icmp eq i8* %106, null
  br i1 %107, label %108, label %111

108:                                              ; preds = %105
  %109 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %20, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %109, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0)) #6
  %110 = load i8*, i8** %101, align 8
  br label %111

111:                                              ; preds = %105, %108
  %112 = phi i8* [ %106, %105 ], [ %110, %108 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 -1, i64 %19, i1 false)
  br label %113

113:                                              ; preds = %111, %41
  %114 = add nuw nsw i32 %43, 1
  %115 = load i32, i32* %15, align 4
  %116 = icmp slt i32 %114, %115
  br i1 %116, label %41, label %31

117:                                              ; preds = %29
  %118 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 22, i64 0
  store i8 1, i8* %118, align 8
  br label %119

119:                                              ; preds = %1, %117, %29
  ret void
}

declare i32 @av1_quantizer_to_qindex(i32) local_unnamed_addr #1

declare void @aom_free(i8*) local_unnamed_addr #1

declare i8* @aom_malloc(i64) local_unnamed_addr #1

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_layer_context_change_config(%struct.AV1_COMP*, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %4 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %3, align 16
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %10 = sitofp i64 %1 to float
  %11 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %4, i64 0, i32 13, i32 13
  %12 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %4, i64 0, i32 13, i32 14
  %13 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %4, i64 0, i32 13, i32 15
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 23
  %16 = load i32, i32* %9, align 4
  br label %17

17:                                               ; preds = %8, %44
  %18 = phi i32 [ %16, %8 ], [ %45, %44 ]
  %19 = phi i32 [ 0, %8 ], [ %46, %44 ]
  %20 = phi i32 [ 0, %8 ], [ %30, %44 ]
  %21 = icmp sgt i32 %18, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %17
  %23 = sext i32 %20 to i64
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %23, i32 6
  %25 = load i64, i64* %24, align 8
  br label %27

26:                                               ; preds = %44, %2
  ret void

27:                                               ; preds = %32, %22
  %28 = phi i32 [ %18, %22 ], [ %42, %32 ]
  %29 = phi i64 [ %25, %22 ], [ %39, %32 ]
  %30 = phi i32 [ %20, %22 ], [ %36, %32 ]
  %31 = icmp sgt i32 %28, 0
  br i1 %31, label %49, label %44

32:                                               ; preds = %17, %32
  %33 = phi i32 [ %42, %32 ], [ %18, %17 ]
  %34 = phi i32 [ %41, %32 ], [ 0, %17 ]
  %35 = mul nsw i32 %33, %19
  %36 = add nsw i32 %35, %34
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %37, i32 3
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %37, i32 6
  store i64 %39, i64* %40, align 8
  %41 = add nuw nsw i32 %34, 1
  %42 = load i32, i32* %9, align 4
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %32, label %27

44:                                               ; preds = %49, %27
  %45 = phi i32 [ %28, %27 ], [ %104, %49 ]
  %46 = add nuw nsw i32 %19, 1
  %47 = load i32, i32* %5, align 8
  %48 = icmp slt i32 %46, %47
  br i1 %48, label %17, label %26

49:                                               ; preds = %27, %49
  %50 = phi i32 [ %104, %49 ], [ %28, %27 ]
  %51 = phi i32 [ %103, %49 ], [ 0, %27 ]
  %52 = mul nsw i32 %50, %19
  %53 = add nsw i32 %52, %51
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 7
  store i64 %29, i64* %55, align 8
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 6
  %57 = load i64, i64* %56, align 8
  %58 = sitofp i64 %57 to float
  %59 = fdiv float %58, %10
  %60 = load i64, i64* %11, align 8
  %61 = sitofp i64 %60 to float
  %62 = fmul float %59, %61
  %63 = fptosi float %62 to i64
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 1, i32 13
  store i64 %63, i64* %64, align 8
  %65 = load i64, i64* %12, align 8
  %66 = sitofp i64 %65 to float
  %67 = fmul float %59, %66
  %68 = fptosi float %67 to i64
  %69 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 1, i32 14
  store i64 %68, i64* %69, align 8
  %70 = load i64, i64* %13, align 8
  %71 = sitofp i64 %70 to float
  %72 = fmul float %59, %71
  %73 = fptosi float %72 to i64
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 1, i32 15
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 0, i32 32
  %76 = load i64, i64* %75, align 8
  %77 = icmp slt i64 %76, %73
  %78 = select i1 %77, i64 %76, i64 %73
  store i64 %78, i64* %75, align 8
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 0, i32 31
  %80 = load i64, i64* %79, align 8
  %81 = icmp slt i64 %80, %73
  %82 = select i1 %81, i64 %80, i64 %73
  store i64 %82, i64* %79, align 8
  %83 = load double, double* %14, align 16
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 2
  %85 = load i32, i32* %84, align 8
  %86 = sitofp i32 %85 to double
  %87 = fdiv double %83, %86
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 8
  store double %87, double* %88, align 8
  %89 = sitofp i64 %57 to double
  %90 = fdiv double %89, %87
  %91 = fptosi double %90 to i32
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 0, i32 21
  store i32 %91, i32* %92, align 8
  %93 = load i32, i32* %15, align 8
  %94 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 0, i32 23
  store i32 %93, i32* %94, align 8
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 10
  %96 = load i32, i32* %95, align 4
  %97 = tail call i32 @av1_quantizer_to_qindex(i32 %96) #6
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 0, i32 42
  store i32 %97, i32* %98, align 8
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 11
  %100 = load i32, i32* %99, align 8
  %101 = tail call i32 @av1_quantizer_to_qindex(i32 %100) #6
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %54, i32 0, i32 43
  store i32 %101, i32* %102, align 4
  %103 = add nuw nsw i32 %51, 1
  %104 = load i32, i32* %9, align 4
  %105 = icmp slt i32 %103, %104
  br i1 %105, label %49, label %44
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_update_temporal_layer_framerate(%struct.AV1_COMP* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = mul nsw i32 %5, %3
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %6, %8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %12 = load double, double* %11, align 16
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = sitofp i32 %14 to double
  %16 = fdiv double %12, %15
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 8
  store double %16, double* %17, align 8
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 6
  %19 = load i64, i64* %18, align 8
  %20 = sitofp i64 %19 to double
  %21 = fdiv double %20, %16
  %22 = fptosi double %21 to i32
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 0, i32 21
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 23
  %25 = load i32, i32* %24, align 16
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 0, i32 23
  store i32 %25, i32* %26, align 8
  %27 = icmp eq i32 %8, 0
  br i1 %27, label %47, label %28

28:                                               ; preds = %1
  %29 = load i32, i32* %2, align 8
  %30 = load i32, i32* %4, align 4
  %31 = mul nsw i32 %30, %29
  %32 = add i32 %8, -1
  %33 = add i32 %32, %31
  %34 = sext i32 %33 to i64
  %35 = load double, double* %11, align 16
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %34, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = sitofp i32 %37 to double
  %39 = fdiv double %35, %38
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %34, i32 3
  %41 = load i64, i64* %40, align 8
  %42 = sub nsw i64 %19, %41
  %43 = sitofp i64 %42 to double
  %44 = fsub double %16, %39
  %45 = fdiv double %43, %44
  %46 = fptosi double %45 to i32
  br label %47

47:                                               ; preds = %1, %28
  %48 = phi i32 [ %46, %28 ], [ %22, %1 ]
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 9
  store i32 %48, i32* %49, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_restore_layer_context(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = mul nsw i32 %6, %4
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %7, %9
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 15
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %17 = load i32, i32* %16, align 16
  %18 = bitcast %struct.RATE_CONTROL* %13 to i8*
  %19 = bitcast %struct.LAYER_CONTEXT* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 8 %19, i64 352, i1 false)
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %21 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %20, align 16
  %22 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %21, i64 0, i32 13
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 1
  %24 = bitcast %struct.PRIMARY_RATE_CONTROL* %22 to i8*
  %25 = bitcast %struct.PRIMARY_RATE_CONTROL* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 8576, i1 false)
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 6
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 3
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  store i8 0, i8* %29, align 16
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 22
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 0
  store i32 %31, i32* %32, align 8
  %33 = icmp eq i32 %31, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %1
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %36 = load i32, i32* %35, align 16
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %36, %38
  %40 = select i1 %39, i32 %36, i32 %38
  store i32 %40, i32* %32, align 8
  br label %41

41:                                               ; preds = %34, %1
  store i32 %15, i32* %14, align 4
  store i32 %17, i32* %16, align 16
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %43 = load i8, i8* %42, align 8
  %44 = icmp eq i8 %43, 3
  br i1 %44, label %45, label %76

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = icmp sgt i32 %47, 1
  br i1 %48, label %49, label %76

49:                                               ; preds = %45
  %50 = load i32, i32* %8, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %76

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %54 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %53, align 8
  %55 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %54, i64 0, i32 9
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 14
  %57 = bitcast i8** %55 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast i8** %56 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %57, align 8
  store i64 %58, i64* %59, align 8
  %61 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %54, i64 0, i32 10
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 15
  %63 = bitcast i8** %61 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = bitcast i8** %62 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %63, align 8
  store i64 %64, i64* %65, align 8
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 13
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %54, i64 0, i32 2
  store i32 %68, i32* %69, align 8
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 16
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %54, i64 0, i32 5
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %11, i32 17
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %54, i64 0, i32 6
  store i32 %74, i32* %75, align 8
  br label %76

76:                                               ; preds = %52, %49, %45, %41
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 15
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 16
  store i32 0, i32* %78, align 8
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %118, label %82

82:                                               ; preds = %76
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 24
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %118, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %91, %93
  br i1 %94, label %95, label %103

95:                                               ; preds = %86
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %89
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = icmp sgt i32 %100, %98
  br i1 %101, label %102, label %103

102:                                              ; preds = %95
  store i32 1, i32* %77, align 4
  br label %103

103:                                              ; preds = %102, %95, %86
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %105 = load i32, i32* %104, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %108, %93
  br i1 %109, label %110, label %118

110:                                              ; preds = %103
  %111 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %106
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, %113
  br i1 %116, label %117, label %118

117:                                              ; preds = %110
  store i32 1, i32* %78, align 8
  br label %118

118:                                              ; preds = %103, %110, %117, %82, %76
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_save_layer_context(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = mul nsw i32 %5, %3
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %6, %8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %13 = bitcast %struct.LAYER_CONTEXT* %11 to i8*
  %14 = bitcast %struct.RATE_CONTROL* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 16 %14, i64 352, i1 false)
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 1
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %17 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %16, align 16
  %18 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %17, i64 0, i32 13
  %19 = bitcast %struct.PRIMARY_RATE_CONTROL* %15 to i8*
  %20 = bitcast %struct.PRIMARY_RATE_CONTROL* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 8576, i1 false)
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = shl i64 %22, 32
  %24 = ashr exact i64 %23, 32
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 6
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %27 = load i8, i8* %26, align 16
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 20
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 22
  store i32 %30, i32* %31, align 4
  %32 = load i32, i32* %2, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %1
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 16
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 11
  %39 = bitcast double* %38 to i64*
  store i64 %37, i64* %39, align 8
  br label %40

40:                                               ; preds = %34, %1
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %42, 3
  br i1 %43, label %44, label %75

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, 1
  br i1 %47, label %48, label %75

48:                                               ; preds = %44
  %49 = load i32, i32* %7, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %75

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %53 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %52, align 8
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 14
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 15
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %53, i64 0, i32 9
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %55, align 8
  store i64 %56, i64* %61, align 8
  %63 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %53, i64 0, i32 10
  %64 = bitcast i8** %63 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %58, align 8
  store i64 %59, i64* %64, align 8
  %66 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %53, i64 0, i32 2
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 13
  store i32 %67, i32* %68, align 8
  %69 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %53, i64 0, i32 5
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 16
  store i32 %70, i32* %71, align 8
  %72 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %53, i64 0, i32 6
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 17
  store i32 %73, i32* %74, align 4
  br label %75

75:                                               ; preds = %51, %48, %44, %40
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %77 = load i8, i8* %76, align 16
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %98

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 0
  %83 = load i32, i32* %2, align 8
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 0
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 1
  store i8 %84, i8* %86, align 1
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 2
  store i8 %84, i8* %87, align 1
  %88 = insertelement <4 x i32> undef, i32 %81, i32 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %90, align 4
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 3
  store i8 %84, i8* %91, align 1
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 4
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 4
  store i8 %84, i8* %93, align 1
  %94 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 5
  store i8 %84, i8* %94, align 1
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 6
  store i8 %84, i8* %95, align 1
  %96 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %96, align 4
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 7
  store i8 %84, i8* %97, align 1
  br label %132

98:                                               ; preds = %75
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %100 = load i32, i32* %99, align 16
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %123, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %105 = load i32, i32* %104, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %116, label %110

110:                                              ; preds = %102
  %111 = load i32, i32* %103, align 8
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %106
  store i32 %111, i32* %112, align 4
  %113 = load i32, i32* %2, align 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %106
  store i8 %114, i8* %115, align 1
  br label %116

116:                                              ; preds = %102, %110
  %117 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %118 = load i32, i32* %117, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %242, label %236

123:                                              ; preds = %307, %98
  %124 = phi i8 [ %308, %307 ], [ %77, %98 ]
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 6
  %126 = and i8 %124, -3
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %132, label %128

128:                                              ; preds = %123
  %129 = load i32, i32* %125, align 16
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %165, label %155

132:                                              ; preds = %79, %123
  %133 = load i32, i32* %2, align 8
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 0
  store i32 %133, i32* %134, align 4
  %135 = load i32, i32* %7, align 4
  %136 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 0
  store i32 %135, i32* %136, align 4
  %137 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 1
  store i32 %133, i32* %137, align 4
  %138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 1
  store i32 %135, i32* %138, align 4
  %139 = load i32, i32* %2, align 8
  %140 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 2
  store i32 %139, i32* %140, align 4
  %141 = load i32, i32* %7, align 4
  %142 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 2
  store i32 %141, i32* %142, align 4
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 3
  store i32 %139, i32* %143, align 4
  %144 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 3
  store i32 %141, i32* %144, align 4
  %145 = load i32, i32* %2, align 8
  %146 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 4
  store i32 %145, i32* %146, align 4
  %147 = load i32, i32* %7, align 4
  %148 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 4
  store i32 %147, i32* %148, align 4
  %149 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 5
  store i32 %145, i32* %149, align 4
  %150 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 5
  store i32 %147, i32* %150, align 4
  %151 = load i32, i32* %2, align 8
  %152 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 6
  store i32 %151, i32* %152, align 4
  %153 = load i32, i32* %7, align 4
  %154 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 6
  store i32 %153, i32* %154, align 4
  br label %225

155:                                              ; preds = %128
  %156 = load i32, i32* %2, align 8
  %157 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 0
  store i32 %156, i32* %157, align 4
  %158 = load i32, i32* %7, align 4
  %159 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 0
  store i32 %158, i32* %159, align 4
  br label %165

160:                                              ; preds = %230
  %161 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %162 = load i32, i32* %161, align 8
  %163 = add i32 %162, 1
  store i32 %163, i32* %161, align 8
  br label %164

164:                                              ; preds = %160, %230
  ret void

165:                                              ; preds = %128, %155
  %166 = load i32, i32* %125, align 16
  %167 = and i32 %166, 2
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %174, label %169

169:                                              ; preds = %165
  %170 = load i32, i32* %2, align 8
  %171 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 1
  store i32 %170, i32* %171, align 4
  %172 = load i32, i32* %7, align 4
  %173 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 1
  store i32 %172, i32* %173, align 4
  br label %174

174:                                              ; preds = %165, %169
  %175 = load i32, i32* %125, align 16
  %176 = and i32 %175, 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %183, label %178

178:                                              ; preds = %174
  %179 = load i32, i32* %2, align 8
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 2
  store i32 %179, i32* %180, align 4
  %181 = load i32, i32* %7, align 4
  %182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 2
  store i32 %181, i32* %182, align 4
  br label %183

183:                                              ; preds = %174, %178
  %184 = load i32, i32* %125, align 16
  %185 = and i32 %184, 8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %192, label %187

187:                                              ; preds = %183
  %188 = load i32, i32* %2, align 8
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 3
  store i32 %188, i32* %189, align 4
  %190 = load i32, i32* %7, align 4
  %191 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 3
  store i32 %190, i32* %191, align 4
  br label %192

192:                                              ; preds = %183, %187
  %193 = load i32, i32* %125, align 16
  %194 = and i32 %193, 16
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %201, label %196

196:                                              ; preds = %192
  %197 = load i32, i32* %2, align 8
  %198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 4
  store i32 %197, i32* %198, align 4
  %199 = load i32, i32* %7, align 4
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 4
  store i32 %199, i32* %200, align 4
  br label %201

201:                                              ; preds = %192, %196
  %202 = load i32, i32* %125, align 16
  %203 = and i32 %202, 32
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %210, label %205

205:                                              ; preds = %201
  %206 = load i32, i32* %2, align 8
  %207 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 5
  store i32 %206, i32* %207, align 4
  %208 = load i32, i32* %7, align 4
  %209 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 5
  store i32 %208, i32* %209, align 4
  br label %210

210:                                              ; preds = %201, %205
  %211 = load i32, i32* %125, align 16
  %212 = and i32 %211, 64
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %219, label %214

214:                                              ; preds = %210
  %215 = load i32, i32* %2, align 8
  %216 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 6
  store i32 %215, i32* %216, align 4
  %217 = load i32, i32* %7, align 4
  %218 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 6
  store i32 %217, i32* %218, align 4
  br label %219

219:                                              ; preds = %210, %214
  %220 = load i32, i32* %125, align 16
  %221 = trunc i32 %220 to i8
  %222 = icmp sgt i8 %221, -1
  br i1 %222, label %223, label %225

223:                                              ; preds = %219
  %224 = load i32, i32* %2, align 8
  br label %230

225:                                              ; preds = %132, %219
  %226 = load i32, i32* %2, align 8
  %227 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 7
  store i32 %226, i32* %227, align 4
  %228 = load i32, i32* %7, align 4
  %229 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 7
  store i32 %228, i32* %229, align 4
  br label %230

230:                                              ; preds = %223, %225
  %231 = phi i32 [ %224, %223 ], [ %226, %225 ]
  %232 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %233 = load i32, i32* %232, align 8
  %234 = add nsw i32 %233, -1
  %235 = icmp eq i32 %231, %234
  br i1 %235, label %160, label %164

236:                                              ; preds = %116
  %237 = load i32, i32* %103, align 8
  %238 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %119
  store i32 %237, i32* %238, align 4
  %239 = load i32, i32* %2, align 8
  %240 = trunc i32 %239 to i8
  %241 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %119
  store i8 %240, i8* %241, align 1
  br label %242

242:                                              ; preds = %236, %116
  %243 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 2
  %244 = load i32, i32* %243, align 4
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %255, label %249

249:                                              ; preds = %242
  %250 = load i32, i32* %103, align 8
  %251 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %245
  store i32 %250, i32* %251, align 4
  %252 = load i32, i32* %2, align 8
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %245
  store i8 %253, i8* %254, align 1
  br label %255

255:                                              ; preds = %249, %242
  %256 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %257 = load i32, i32* %256, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %258
  %260 = load i32, i32* %259, align 4
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %268, label %262

262:                                              ; preds = %255
  %263 = load i32, i32* %103, align 8
  %264 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %258
  store i32 %263, i32* %264, align 4
  %265 = load i32, i32* %2, align 8
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %258
  store i8 %266, i8* %267, align 1
  br label %268

268:                                              ; preds = %262, %255
  %269 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 4
  %270 = load i32, i32* %269, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %281, label %275

275:                                              ; preds = %268
  %276 = load i32, i32* %103, align 8
  %277 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %271
  store i32 %276, i32* %277, align 4
  %278 = load i32, i32* %2, align 8
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %271
  store i8 %279, i8* %280, align 1
  br label %281

281:                                              ; preds = %275, %268
  %282 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 5
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %294, label %288

288:                                              ; preds = %281
  %289 = load i32, i32* %103, align 8
  %290 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %284
  store i32 %289, i32* %290, align 4
  %291 = load i32, i32* %2, align 8
  %292 = trunc i32 %291 to i8
  %293 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %284
  store i8 %292, i8* %293, align 1
  br label %294

294:                                              ; preds = %288, %281
  %295 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 6
  %296 = load i32, i32* %295, align 4
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %307, label %301

301:                                              ; preds = %294
  %302 = load i32, i32* %103, align 8
  %303 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 13, i64 %297
  store i32 %302, i32* %303, align 4
  %304 = load i32, i32* %2, align 8
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 14, i64 %297
  store i8 %305, i8* %306, align 1
  br label %307

307:                                              ; preds = %301, %294
  %308 = load i8, i8* %76, align 16
  br label %123
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_svc_primary_ref_frame(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %4, align 4
  %12 = icmp eq i32 %10, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %1, %8
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, %3
  br i1 %16, label %49, label %54

17:                                               ; preds = %103, %94, %85, %76, %67, %58, %49, %8
  %18 = phi i32 [ 0, %8 ], [ 1, %49 ], [ 2, %58 ], [ 3, %67 ], [ 4, %76 ], [ 5, %85 ], [ 6, %94 ], [ 7, %103 ]
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, %18
  br i1 %21, label %22, label %24

22:                                               ; preds = %99, %103, %17, %24, %28, %32, %36, %40
  %23 = phi i32 [ 0, %17 ], [ 1, %24 ], [ 2, %28 ], [ 3, %32 ], [ 4, %36 ], [ 5, %40 ], [ 7, %103 ], [ 7, %99 ]
  ret i32 %23

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, %18
  br i1 %27, label %22, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, %18
  br i1 %31, label %22, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, %18
  br i1 %35, label %22, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %18
  br i1 %39, label %22, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 5
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, %18
  br i1 %43, label %22, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, %18
  %48 = select i1 %47, i32 6, i32 7
  ret i32 %48

49:                                               ; preds = %13
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 1
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %4, align 4
  %53 = icmp eq i32 %51, %52
  br i1 %53, label %17, label %54

54:                                               ; preds = %49, %13
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %3
  br i1 %57, label %58, label %63

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 2
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* %4, align 4
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %17, label %63

63:                                               ; preds = %58, %54
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 3
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, %3
  br i1 %66, label %67, label %72

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 3
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %4, align 4
  %71 = icmp eq i32 %69, %70
  br i1 %71, label %17, label %72

72:                                               ; preds = %67, %63
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 4
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, %3
  br i1 %75, label %76, label %81

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 4
  %78 = load i32, i32* %77, align 4
  %79 = load i32, i32* %4, align 4
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %17, label %81

81:                                               ; preds = %76, %72
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 5
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, %3
  br i1 %84, label %85, label %90

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 5
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* %4, align 4
  %89 = icmp eq i32 %87, %88
  br i1 %89, label %17, label %90

90:                                               ; preds = %85, %81
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 6
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, %3
  br i1 %93, label %94, label %99

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 6
  %96 = load i32, i32* %95, align 4
  %97 = load i32, i32* %4, align 4
  %98 = icmp eq i32 %96, %97
  br i1 %98, label %17, label %99

99:                                               ; preds = %94, %90
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 17, i64 7
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, %3
  br i1 %102, label %103, label %22

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 18, i64 7
  %105 = load i32, i32* %104, align 4
  %106 = load i32, i32* %4, align 4
  %107 = icmp eq i32 %105, %106
  br i1 %107, label %17, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_free_svc_cyclic_refresh(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %5, %13
  %9 = phi i32 [ %7, %5 ], [ %14, %13 ]
  %10 = phi i32 [ 0, %5 ], [ %15, %13 ]
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %18, label %13

12:                                               ; preds = %13, %1
  ret void

13:                                               ; preds = %33, %8
  %14 = phi i32 [ %9, %8 ], [ %35, %33 ]
  %15 = add nuw nsw i32 %10, 1
  %16 = load i32, i32* %2, align 8
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %8, label %12

18:                                               ; preds = %8, %33
  %19 = phi i32 [ %35, %33 ], [ %9, %8 ]
  %20 = phi i32 [ %34, %33 ], [ 0, %8 ]
  %21 = mul nsw i32 %19, %10
  %22 = add nsw i32 %21, %20
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %23, i32 14
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %18
  tail call void @aom_free(i8* nonnull %25) #6
  br label %28

28:                                               ; preds = %18, %27
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %23, i32 15
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  tail call void @aom_free(i8* nonnull %30) #6
  br label %33

33:                                               ; preds = %28, %32
  %34 = add nuw nsw i32 %20, 1
  %35 = load i32, i32* %6, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %18, label %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_svc_reset_temporal_layers(%struct.AV1_COMP*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  br i1 %5, label %9, label %7

7:                                                ; preds = %2
  %8 = load i32, i32* %6, align 4
  br label %17

9:                                                ; preds = %2
  %10 = icmp eq i32 %1, 0
  %11 = load i32, i32* %6, align 4
  br label %12

12:                                               ; preds = %9, %66
  %13 = phi i32 [ %11, %9 ], [ %67, %66 ]
  %14 = phi i32 [ %11, %9 ], [ %68, %66 ]
  %15 = phi i32 [ 0, %9 ], [ %69, %66 ]
  %16 = icmp sgt i32 %14, 0
  br i1 %16, label %71, label %66

17:                                               ; preds = %66, %7
  %18 = phi i32 [ %8, %7 ], [ %67, %66 ]
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %20 = load i32, i32* %19, align 16
  %21 = mul nsw i32 %18, %20
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %21, %23
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %27 = load double, double* %26, align 16
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %25, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = sitofp i32 %29 to double
  %31 = fdiv double %27, %30
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %25, i32 8
  store double %31, double* %32, align 8
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %25, i32 6
  %34 = load i64, i64* %33, align 8
  %35 = sitofp i64 %34 to double
  %36 = fdiv double %35, %31
  %37 = fptosi double %36 to i32
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %25, i32 0, i32 21
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 23
  %40 = load i32, i32* %39, align 16
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %25, i32 0, i32 23
  store i32 %40, i32* %41, align 8
  %42 = icmp eq i32 %23, 0
  br i1 %42, label %63, label %43

43:                                               ; preds = %17
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %45 = load i32, i32* %19, align 8
  %46 = load i32, i32* %44, align 4
  %47 = mul nsw i32 %46, %45
  %48 = add i32 %23, -1
  %49 = add i32 %48, %47
  %50 = sext i32 %49 to i64
  %51 = load double, double* %26, align 16
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %50, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = sitofp i32 %53 to double
  %55 = fdiv double %51, %54
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %50, i32 3
  %57 = load i64, i64* %56, align 8
  %58 = sub nsw i64 %34, %57
  %59 = sitofp i64 %58 to double
  %60 = fsub double %31, %55
  %61 = fdiv double %59, %60
  %62 = fptosi double %61 to i32
  br label %63

63:                                               ; preds = %17, %43
  %64 = phi i32 [ %62, %43 ], [ %37, %17 ]
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %25, i32 9
  store i32 %64, i32* %65, align 8
  tail call void @av1_restore_layer_context(%struct.AV1_COMP* %0)
  ret void

66:                                               ; preds = %81, %12
  %67 = phi i32 [ %13, %12 ], [ %82, %81 ]
  %68 = phi i32 [ %14, %12 ], [ %82, %81 ]
  %69 = add nuw nsw i32 %15, 1
  %70 = icmp slt i32 %69, %4
  br i1 %70, label %12, label %17

71:                                               ; preds = %12, %81
  %72 = phi i32 [ %82, %81 ], [ %13, %12 ]
  %73 = phi i32 [ %82, %81 ], [ %14, %12 ]
  %74 = phi i32 [ %83, %81 ], [ 0, %12 ]
  br i1 %10, label %81, label %75

75:                                               ; preds = %71
  %76 = mul nsw i32 %73, %15
  %77 = add nsw i32 %76, %74
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %78, i32 12
  store i32 0, i32* %79, align 4
  %80 = load i32, i32* %6, align 4
  br label %81

81:                                               ; preds = %71, %75
  %82 = phi i32 [ %72, %71 ], [ %80, %75 ]
  %83 = add nuw nsw i32 %74, 1
  %84 = icmp slt i32 %83, %82
  br i1 %84, label %71, label %66
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @av1_get_layer_resolution(i32, i32, i32, i32, i32*, i32*) local_unnamed_addr #5 {
  %7 = icmp eq i32* %4, null
  %8 = icmp eq i32* %5, null
  %9 = or i1 %7, %8
  %10 = icmp eq i32 %3, 0
  %11 = or i1 %10, %9
  br i1 %11, label %21, label %12

12:                                               ; preds = %6
  %13 = mul nsw i32 %2, %0
  %14 = sdiv i32 %13, %3
  %15 = mul nsw i32 %2, %1
  %16 = sdiv i32 %15, %3
  %17 = srem i32 %14, 2
  %18 = add nsw i32 %17, %14
  %19 = srem i32 %16, 2
  %20 = add nsw i32 %19, %16
  store i32 %18, i32* %4, align 4
  store i32 %20, i32* %5, align 4
  br label %21

21:                                               ; preds = %6, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_one_pass_cbr_svc_start_layer(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = mul nsw i32 %5, %3
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %6, %8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %10, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = mul nsw i32 %20, %12
  %22 = sdiv i32 %21, %14
  %23 = mul nsw i32 %18, %12
  %24 = sdiv i32 %23, %14
  %25 = srem i32 %22, 2
  %26 = add nsw i32 %25, %22
  %27 = srem i32 %24, 2
  %28 = add nsw i32 %27, %24
  br label %29

29:                                               ; preds = %1, %16
  %30 = phi i32 [ 0, %1 ], [ %26, %16 ]
  %31 = phi i32 [ 0, %1 ], [ %28, %16 ]
  %32 = mul nsw i32 %31, %30
  %33 = icmp slt i32 %32, 76801
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = sext i32 %3 to i64
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 22, i64 %35
  store i8 1, i8* %36, align 1
  br label %37

37:                                               ; preds = %34, %29
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  store i32 %30, i32* %38, align 16
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  store i32 %31, i32* %39, align 4
  tail call void @av1_update_frame_size(%struct.AV1_COMP* %0) #6
  ret void
}

declare void @av1_update_frame_size(%struct.AV1_COMP*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_set_svc_fixed_mode(%struct.AV1_COMP*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 2
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %9 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 2, i32 3>, <4 x i32>* %9, align 4
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 4
  store i32 4, i32* %10, align 4
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 5
  store i32 5, i32* %11, align 4
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 6
  store i32 6, i32* %12, align 4
  %13 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 0
  %14 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 1
  %15 = bitcast i32* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 24, i1 false)
  %16 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 0
  %17 = bitcast i32* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 32, i1 false)
  store i32 1, i32* %13, align 8
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 3
  store i32 1, i32* %22, align 4
  br label %23

23:                                               ; preds = %21, %1
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %25 = load i32, i32* %24, align 4
  switch i32 %25, label %103 [
    i32 0, label %26
    i32 2, label %36
    i32 1, label %57
  ]

26:                                               ; preds = %23
  switch i32 %19, label %103 [
    i32 0, label %34
    i32 1, label %30
    i32 2, label %27
  ]

27:                                               ; preds = %26
  store i32 1, i32* %10, align 4
  store i32 1, i32* %11, align 4
  store i32 1, i32* %12, align 4
  %28 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 1, i32 1>, <4 x i32>* %28, align 4
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 2
  store i32 1, i32* %29, align 8
  br label %103

30:                                               ; preds = %26
  %31 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %32 = bitcast i32* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 0, i64 24, i1 false)
  store i32 1, i32* %5, align 4
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 1
  store i32 1, i32* %33, align 4
  br label %103

34:                                               ; preds = %26
  %35 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 0, i64 28, i1 false)
  store i32 1, i32* %16, align 8
  br label %103

36:                                               ; preds = %23
  %37 = add i32 %4, 3
  %38 = and i32 %37, 3
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %79

40:                                               ; preds = %36
  switch i32 %19, label %103 [
    i32 0, label %48
    i32 1, label %43
    i32 2, label %41
  ]

41:                                               ; preds = %40
  store i32 4, i32* %10, align 4
  store i32 4, i32* %11, align 4
  store i32 4, i32* %12, align 4
  %42 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 2, i32 4, i32 4, i32 4>, <4 x i32>* %42, align 4
  br label %103

43:                                               ; preds = %40
  store i32 3, i32* %10, align 4
  store i32 3, i32* %11, align 4
  store i32 3, i32* %12, align 4
  %44 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 1, i32 3, i32 3, i32 3>, <4 x i32>* %44, align 4
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, 2
  br i1 %47, label %55, label %103

48:                                               ; preds = %40
  %49 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %49, i8 0, i64 28, i1 false)
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = icmp sgt i32 %51, 1
  br i1 %52, label %53, label %103

53:                                               ; preds = %48
  store i32 3, i32* %8, align 4
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 3
  store i32 1, i32* %54, align 4
  br label %103

55:                                               ; preds = %43
  store i32 4, i32* %6, align 4
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 4
  store i32 1, i32* %56, align 8
  br label %103

57:                                               ; preds = %23
  switch i32 %19, label %103 [
    i32 0, label %68
    i32 1, label %63
    i32 2, label %58
  ]

58:                                               ; preds = %57
  store i32 6, i32* %10, align 4
  store i32 6, i32* %11, align 4
  store i32 6, i32* %12, align 4
  %59 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 2, i32 6, i32 6, i32 6>, <4 x i32>* %59, align 4
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %61, 2
  br i1 %62, label %77, label %103

63:                                               ; preds = %57
  store i32 5, i32* %10, align 4
  store i32 5, i32* %11, align 4
  store i32 5, i32* %12, align 4
  %64 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 1, i32 5, i32 5, i32 5>, <4 x i32>* %64, align 4
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %66, 2
  br i1 %67, label %75, label %103

68:                                               ; preds = %57
  %69 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 28, i1 false)
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = icmp sgt i32 %71, 2
  br i1 %72, label %73, label %103

73:                                               ; preds = %68
  store i32 5, i32* %8, align 4
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 5
  store i32 1, i32* %74, align 4
  br label %103

75:                                               ; preds = %63
  store i32 6, i32* %7, align 4
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 6
  store i32 1, i32* %76, align 8
  br label %103

77:                                               ; preds = %58
  store i32 7, i32* %7, align 4
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 7
  store i32 1, i32* %78, align 4
  br label %103

79:                                               ; preds = %36
  %80 = add i32 %4, 1
  %81 = and i32 %80, 3
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %103

83:                                               ; preds = %79
  switch i32 %19, label %103 [
    i32 0, label %93
    i32 1, label %87
    i32 2, label %84
  ]

84:                                               ; preds = %83
  %85 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %86 = bitcast i32* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 0, i64 24, i1 false)
  store i32 7, i32* %5, align 4
  store i32 4, i32* %8, align 4
  br label %103

87:                                               ; preds = %83
  %88 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %89 = bitcast i32* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %89, i8 0, i64 24, i1 false)
  store i32 6, i32* %5, align 4
  store i32 3, i32* %8, align 4
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 2
  br i1 %92, label %101, label %103

93:                                               ; preds = %83
  %94 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %95 = bitcast i32* %94 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %95, i8 0, i64 24, i1 false)
  store i32 5, i32* %5, align 4
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %97 = load i32, i32* %96, align 8
  %98 = icmp sgt i32 %97, 1
  br i1 %98, label %99, label %103

99:                                               ; preds = %93
  store i32 3, i32* %8, align 4
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 3
  store i32 1, i32* %100, align 4
  br label %103

101:                                              ; preds = %87
  store i32 4, i32* %6, align 4
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 4
  store i32 1, i32* %102, align 8
  br label %103

103:                                              ; preds = %23, %83, %57, %40, %26, %55, %43, %41, %48, %53, %79, %101, %87, %84, %93, %99, %73, %68, %77, %58, %63, %75, %34, %27, %30
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_svc_check_reset_layer_rc_flag(%struct.AV1_COMP* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %7 = load i32, i32* %6, align 4
  br label %9

8:                                                ; preds = %47, %1
  ret void

9:                                                ; preds = %5, %47
  %10 = phi i32 [ %3, %5 ], [ %48, %47 ]
  %11 = phi i32 [ %7, %5 ], [ %49, %47 ]
  %12 = phi i32 [ %7, %5 ], [ %50, %47 ]
  %13 = phi i32 [ 0, %5 ], [ %51, %47 ]
  %14 = mul nsw i32 %12, %13
  %15 = add nsw i32 %12, -1
  %16 = add nsw i32 %15, %14
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %17, i32 0, i32 21
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %17, i32 0, i32 24
  %21 = load i32, i32* %20, align 4
  %22 = mul nsw i32 %21, 3
  %23 = ashr i32 %22, 1
  %24 = icmp sgt i32 %19, %23
  %25 = ashr i32 %21, 1
  %26 = icmp slt i32 %19, %25
  %27 = or i1 %26, %24
  br i1 %27, label %28, label %47

28:                                               ; preds = %9
  %29 = icmp sgt i32 %11, 0
  br i1 %29, label %30, label %47

30:                                               ; preds = %28, %30
  %31 = phi i32 [ %43, %30 ], [ %11, %28 ]
  %32 = phi i32 [ %42, %30 ], [ 0, %28 ]
  %33 = mul nsw i32 %31, %13
  %34 = add nsw i32 %33, %32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %35, i32 0, i32 44
  store i32 0, i32* %36, align 8
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %35, i32 0, i32 45
  store i32 0, i32* %37, align 4
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %35, i32 1, i32 14
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %35, i32 0, i32 32
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %35, i32 0, i32 31
  store i64 %39, i64* %41, align 8
  %42 = add nuw nsw i32 %32, 1
  %43 = load i32, i32* %6, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %30, label %45

45:                                               ; preds = %30
  %46 = load i32, i32* %2, align 8
  br label %47

47:                                               ; preds = %45, %28, %9
  %48 = phi i32 [ %46, %45 ], [ %10, %28 ], [ %10, %9 ]
  %49 = phi i32 [ %43, %45 ], [ %11, %28 ], [ %11, %9 ]
  %50 = phi i32 [ %43, %45 ], [ %11, %28 ], [ %12, %9 ]
  %51 = add nuw nsw i32 %13, 1
  %52 = icmp slt i32 %51, %48
  br i1 %52, label %9, label %8
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
