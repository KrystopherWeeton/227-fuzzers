; ModuleID = '../../third_party/blink/renderer/core/html/forms/html_form_controls_collection.cc'
source_filename = "../../third_party/blink/renderer/core/html/forms/html_form_controls_collection.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.21 }
%class.scoped_refptr.21 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.135", i32, [4 x i8], %"class.std::__1::unique_ptr.271", %"class.std::__1::unique_ptr.271", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.281", %"class.std::__1::unique_ptr.287", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.299", %"class.std::__1::unique_ptr.305", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.312", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.156", %"class.std::__1::unique_ptr.162", %"class.std::__1::unique_ptr.168", %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.214", %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.228", %"class.std::__1::unique_ptr.251", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.171" = type { %"struct.std::__1::__atomic_base.172" }
%"struct.std::__1::__atomic_base.172" = type { %"struct.std::__1::__atomic_base.173" }
%"struct.std::__1::__atomic_base.173" = type { %"struct.std::__1::__cxx_atomic_impl.174" }
%"struct.std::__1::__cxx_atomic_impl.174" = type { %"struct.std::__1::__cxx_atomic_base_impl.175" }
%"struct.std::__1::__cxx_atomic_base_impl.175" = type { i64 }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.blink::Worklist.182"* }
%"class.blink::Worklist.182" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"class.blink::Worklist.189"* }
%"class.blink::Worklist.189" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::Worklist.196"* }
%"class.blink::Worklist.196" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.200" = type { %"class.std::__1::__compressed_pair.201" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"class.blink::Worklist.203"* }
%"class.blink::Worklist.203" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.blink::Worklist.210"* }
%"class.blink::Worklist.210" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.blink::Worklist.217"* }
%"class.blink::Worklist.217" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.blink::Worklist.224"* }
%"class.blink::Worklist.224" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.171" }
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.238", %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.245", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { i64 }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { float }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.254", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.254" = type { %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.263" }
%"class.WTF::Vector.263" = type { %"class.WTF::VectorBuffer.264" }
%"class.WTF::VectorBuffer.264" = type { %"class.WTF::VectorBufferBase.265" }
%"class.WTF::VectorBufferBase.265" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.279" }
%"class.WTF::VectorBuffer.279" = type { %"class.WTF::VectorBufferBase.280" }
%"class.WTF::VectorBufferBase.280" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.281" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.293" }
%"class.std::__1::unique_ptr.293" = type { %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.182"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.189"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.196"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.203"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.210"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.547" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.548" }
%"struct.std::__1::__compressed_pair_elem.548" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.299" = type { %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.311 }
%class.scoped_refptr.311 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.312" = type { %"struct.std::__1::__atomic_base.313" }
%"struct.std::__1::__atomic_base.313" = type { %"struct.std::__1::__cxx_atomic_impl.314" }
%"struct.std::__1::__cxx_atomic_impl.314" = type { %"struct.std::__1::__cxx_atomic_base_impl.315" }
%"struct.std::__1::__cxx_atomic_base_impl.315" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.88" }
%"struct.std::__1::atomic.88" = type { %"struct.std::__1::__atomic_base.89" }
%"struct.std::__1::__atomic_base.89" = type { %"struct.std::__1::__atomic_base.90" }
%"struct.std::__1::__atomic_base.90" = type { %"struct.std::__1::__cxx_atomic_impl.91" }
%"struct.std::__1::__cxx_atomic_impl.91" = type { %"struct.std::__1::__cxx_atomic_base_impl.92" }
%"struct.std::__1::__cxx_atomic_base_impl.92" = type { i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.123", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.123" = type { %"class.base::RefCounted.124" }
%"class.base::RefCounted.124" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.127" }
%"class.blink::HeapHashMap.127" = type { %"class.WTF::HashMap.130" }
%"class.WTF::HashMap.130" = type { %"class.WTF::HashTable.131" }
%"class.WTF::HashTable.131" = type <{ %"struct.WTF::KeyValuePair.133"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.133" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.134" }
%"class.blink::MemberBase.134" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::HTMLFormControlsCollection" = type <{ %"class.blink::HTMLCollection", %"class.blink::Member.38", i32, [4 x i8] }>
%"class.blink::HTMLCollection" = type { %"class.blink::ScriptWrappable", %"class.blink::LiveNodeListBase.base", i8, %"class.blink::Member.8", %"class.blink::CollectionItemsCache" }
%"class.blink::LiveNodeListBase.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::Member", i16 }>
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::HTMLCollection::NamedItemCache"* }
%"class.blink::HTMLCollection::NamedItemCache" = type { %"class.blink::HeapHashMap", %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::StringImpl"*, %"class.blink::Member.15" }
%"class.blink::Member.15" = type { %"class.blink::MemberBase.16" }
%"class.blink::MemberBase.16" = type { %"class.blink::HeapVector"* }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.19"*, i32, i32 }
%"class.blink::Member.19" = type { %"class.blink::MemberBase.20" }
%"class.blink::MemberBase.20" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.22" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.0", %"class.blink::Member.0" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.0", %"class.blink::Member.2", %"class.blink::Member.0", %"class.blink::Member.0", %"class.blink::Member.4" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member", %"class.blink::Member.40", %"class.blink::Member.2", %"class.blink::Member.42", %"class.blink::Member.42", %"class.blink::Member.57", %"class.blink::Member.59", %"class.blink::Member.61", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.66", %"class.blink::HeapVector.68" }
%"class.blink::Member.40" = type { %"class.blink::MemberBase.41" }
%"class.blink::MemberBase.41" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.84", %"class.WTF::Vector.84", i8, i32, %"class.blink::Member.95", %"class.blink::Member.97", %"class.blink::Member.99", %"class.blink::Member.101", %"class.blink::Member.103", %"class.blink::Member.105", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.108", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.114", %"class.blink::Member.116", %"class.blink::Member.74", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.119", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.19", %"class.blink::Member.328", %"class.blink::Member.19", %"class.blink::Member.19", %"class.blink::Member.19", %"class.blink::UserActionElementSet", %"class.blink::Member.337", double, double, i64, i64, %"class.blink::HeapHashSet", %"class.blink::HeapHashSet.344", i16, i8, %"class.blink::Member.351", %"class.blink::Member.353", %"class.blink::Member.355", %"class.blink::Member.357", %"class.blink::TextLinkColors", %"class.blink::Member.359", i8, [7 x i8], %"class.blink::HeapHashMap.361", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.19", %"class.WTF::Vector.368", %"class.blink::Member.373", %"class.blink::Member.375", i8, %"class.blink::Member.19", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.377", %"class.blink::HeapVector.379", %"class.std::__1::unique_ptr.387", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.393", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.406", %"class.WTF::Vector.408", i8, i8, %"class.std::__1::unique_ptr.413", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.419", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.427", i8, i32, %"class.blink::Member.429", %"class.blink::Member.431", %"class.blink::Member.433", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.435", %"class.WTF::HashMap.437", %"class.blink::Member.442", %"class.blink::Member.444", %"class.blink::Member.446", %"class.blink::Member.448", %"class.blink::Member.40", %"class.blink::Member.40", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.450", i8, i32, %"class.blink::Member.457", %"class.blink::Member.459", i32, %"class.blink::Member.461", %"class.blink::Member.463", %"class.blink::Member.465", %"class.std::__1::unique_ptr.467", i64, %"class.std::__1::unique_ptr.473", i32, i32, %"class.blink::Member.479", %"class.blink::Member.481", %"class.blink::Member.483", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.485", %"class.WTF::Vector.491", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.496", %"class.blink::Member.503", %"class.std::__1::unique_ptr.505", %"class.blink::Member.511", i8, i8, %"class.WTF::String", %"class.blink::Member.513", i8, [7 x i8], %"class.blink::HeapHashMap.515", %"class.blink::HeapObserverSet", %"class.blink::Member.529", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.531", i32, i8, i8, %"class.blink::WeakMember.533", %"class.blink::Member.534" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.77" }
%"class.blink::HeapHashMap.77" = type { %"class.WTF::HashMap.80" }
%"class.WTF::HashMap.80" = type { %"class.WTF::HashTable.81" }
%"class.WTF::HashTable.81" = type <{ %"struct.WTF::KeyValuePair.83"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.83" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.84" = type { %"class.WTF::VectorBuffer.85" }
%"class.WTF::VectorBuffer.85" = type { %"class.WTF::VectorBufferBase.86" }
%"class.WTF::VectorBufferBase.86" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.87 }
%class.scoped_refptr.87 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.88" }
%"class.blink::Member.95" = type { %"class.blink::MemberBase.96" }
%"class.blink::MemberBase.96" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.97" = type { %"class.blink::MemberBase.98" }
%"class.blink::MemberBase.98" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.552", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.596", i32, i8, [3 x i8], %"class.blink::HeapVector.598", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.606", %"class.blink::Member.608", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.617", %"class.blink::Member.623", %"class.blink::Member.625", i8, [7 x i8] }>
%"class.blink::Supplementable.552" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.553" }
%"class.blink::HeapHashMap.553" = type { %"class.WTF::HashMap.556" }
%"class.WTF::HashMap.556" = type { %"class.WTF::HashTable.557" }
%"class.WTF::HashTable.557" = type <{ %"struct.WTF::KeyValuePair.559"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.559" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.568" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.560" }
%"class.blink::HeapObserverSet.560" = type { i32, [4 x i8], %"class.blink::HeapHashSet.561" }
%"class.blink::HeapHashSet.561" = type { %"class.WTF::HashSet.564" }
%"class.WTF::HashSet.564" = type { %"class.WTF::HashTable.565" }
%"class.WTF::HashTable.565" = type <{ %"class.blink::WeakMember.567"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.567" = type opaque
%"class.blink::Supplementable.568" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.569" }
%"class.blink::HeapHashMap.569" = type { %"class.WTF::HashMap.572" }
%"class.WTF::HashMap.572" = type { %"class.WTF::HashTable.573" }
%"class.WTF::HashTable.573" = type <{ %"struct.WTF::KeyValuePair.575"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.575" = type { i8*, %"class.blink::Member.747" }
%"class.blink::Member.747" = type { %"class.blink::MemberBase.748" }
%"class.blink::MemberBase.748" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.749" }
%"class.blink::Member.749" = type { %"class.blink::MemberBase.750" }
%"class.blink::MemberBase.750" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.576, %"class.std::__1::unique_ptr.580", %"class.std::__1::unique_ptr.580", %"class.std::__1::unique_ptr.586", %"class.std::__1::unique_ptr.586", %"class.blink::Member.97", i32, [4 x i8], %"class.WTF::HashSet.592", i32, i32 }
%class.scoped_refptr.576 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.577", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.579 }
%"class.WTF::RefCounted.577" = type { %"class.base::RefCounted.578" }
%"class.base::RefCounted.578" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.579 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.580" = type { %"class.std::__1::__compressed_pair.581" }
%"class.std::__1::__compressed_pair.581" = type { %"struct.std::__1::__compressed_pair_elem.582" }
%"struct.std::__1::__compressed_pair_elem.582" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.586" = type { %"class.std::__1::__compressed_pair.587" }
%"class.std::__1::__compressed_pair.587" = type { %"struct.std::__1::__compressed_pair_elem.588" }
%"struct.std::__1::__compressed_pair_elem.588" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.592" = type { %"class.WTF::HashTable.593" }
%"class.WTF::HashTable.593" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.596" = type { %"class.blink::MemberBase.597" }
%"class.blink::MemberBase.597" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.598" = type { %"class.WTF::Vector.601" }
%"class.WTF::Vector.601" = type { %"class.WTF::VectorBuffer.602" }
%"class.WTF::VectorBuffer.602" = type { %"class.WTF::VectorBufferBase.603" }
%"class.WTF::VectorBufferBase.603" = type { %"class.blink::Member.604"*, i32, i32 }
%"class.blink::Member.604" = type opaque
%"class.blink::Member.606" = type { %"class.blink::MemberBase.607" }
%"class.blink::MemberBase.607" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.608" = type { %"class.blink::MemberBase.609" }
%"class.blink::MemberBase.609" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.610", i32, i32 }
%"class.blink::HeapHashMap.610" = type { %"class.WTF::HashMap.613" }
%"class.WTF::HashMap.613" = type { %"class.WTF::HashTable.614" }
%"class.WTF::HashTable.614" = type <{ %"struct.WTF::KeyValuePair.616"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.616" = type opaque
%"class.std::__1::unique_ptr.617" = type { %"class.std::__1::__compressed_pair.618" }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.619" }
%"struct.std::__1::__compressed_pair_elem.619" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.623" = type { %"class.blink::MemberBase.624" }
%"class.blink::MemberBase.624" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.625" = type { %"class.blink::MemberBase.626" }
%"class.blink::MemberBase.626" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.99" = type { %"class.blink::MemberBase.100" }
%"class.blink::MemberBase.100" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.101" = type { %"class.blink::MemberBase.102" }
%"class.blink::MemberBase.102" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.103" = type { %"class.blink::MemberBase.104" }
%"class.blink::MemberBase.104" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.105" = type { %"class.blink::MemberBase.106" }
%"class.blink::MemberBase.106" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.114" = type { %"class.blink::MemberBase.115" }
%"class.blink::MemberBase.115" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.116" = type { %"class.blink::MemberBase.117" }
%"class.blink::MemberBase.117" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.74" = type { %"class.blink::MemberBase.75" }
%"class.blink::MemberBase.75" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.118 }
%class.scoped_refptr.118 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.119" = type { %"class.WTF::VectorBuffer.120" }
%"class.WTF::VectorBuffer.120" = type { %"class.WTF::VectorBufferBase.121" }
%"class.WTF::VectorBufferBase.121" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.122 }
%class.scoped_refptr.122 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.328" = type { %"class.blink::MemberBase.329" }
%"class.blink::MemberBase.329" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.330" }
%"class.blink::HeapHashMap.330" = type { %"class.WTF::HashMap.333" }
%"class.WTF::HashMap.333" = type { %"class.WTF::HashTable.334" }
%"class.WTF::HashTable.334" = type <{ %"struct.WTF::KeyValuePair.336"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.336" = type opaque
%"class.blink::Member.337" = type { %"class.blink::MemberBase.338" }
%"class.blink::MemberBase.338" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.341" }
%"class.WTF::HashTable.341" = type <{ %"class.blink::WeakMember.343"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.343" = type opaque
%"class.blink::HeapHashSet.344" = type { %"class.WTF::HashSet.347" }
%"class.WTF::HashSet.347" = type { %"class.WTF::HashTable.348" }
%"class.WTF::HashTable.348" = type <{ %"class.blink::WeakMember.350"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.350" = type opaque
%"class.blink::Member.351" = type { %"class.blink::MemberBase.352" }
%"class.blink::MemberBase.352" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.353" = type { %"class.blink::MemberBase.354" }
%"class.blink::MemberBase.354" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.355" = type { %"class.blink::MemberBase.356" }
%"class.blink::MemberBase.356" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.357" = type { %"class.blink::MemberBase.358" }
%"class.blink::MemberBase.358" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.359" = type { %"class.blink::MemberBase.360" }
%"class.blink::MemberBase.360" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.361" = type { %"class.WTF::HashMap.364" }
%"class.WTF::HashMap.364" = type { %"class.WTF::HashTable.365" }
%"class.WTF::HashTable.365" = type <{ %"struct.WTF::KeyValuePair.367"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.367" = type opaque
%"class.WTF::Vector.368" = type { %"class.WTF::VectorBuffer.369" }
%"class.WTF::VectorBuffer.369" = type { %"class.WTF::VectorBufferBase.370" }
%"class.WTF::VectorBufferBase.370" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.373" = type { %"class.blink::MemberBase.374" }
%"class.blink::MemberBase.374" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.375" = type { %"class.blink::MemberBase.376" }
%"class.blink::MemberBase.376" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.377" = type { %"class.blink::MemberBase.378" }
%"class.blink::MemberBase.378" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.379" = type { %"class.WTF::Vector.382" }
%"class.WTF::Vector.382" = type { %"class.WTF::VectorBuffer.383" }
%"class.WTF::VectorBuffer.383" = type { %"class.WTF::VectorBufferBase.384" }
%"class.WTF::VectorBufferBase.384" = type { %"class.blink::Member.385"*, i32, i32 }
%"class.blink::Member.385" = type opaque
%"class.std::__1::unique_ptr.387" = type { %"class.std::__1::__compressed_pair.388" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.393" = type { %"class.WTF::HashSet.396" }
%"class.WTF::HashSet.396" = type { %"class.WTF::HashTable.397" }
%"class.WTF::HashTable.397" = type <{ %"class.blink::WeakMember.399"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.399" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.400", i32, [4 x i8] }>
%"class.WTF::Vector.400" = type { %"class.WTF::VectorBuffer.401" }
%"class.WTF::VectorBuffer.401" = type { %"class.WTF::VectorBufferBase.402" }
%"class.WTF::VectorBufferBase.402" = type { %"struct.std::__1::pair.403"*, i32, i32 }
%"struct.std::__1::pair.403" = type opaque
%"class.blink::Member.406" = type { %"class.blink::MemberBase.407" }
%"class.blink::MemberBase.407" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.408" = type { %"class.WTF::VectorBuffer.409" }
%"class.WTF::VectorBuffer.409" = type { %"class.WTF::VectorBufferBase.410" }
%"class.WTF::VectorBufferBase.410" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.413" = type { %"class.std::__1::__compressed_pair.414" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.419" = type { %"class.WTF::Vector.422" }
%"class.WTF::Vector.422" = type { %"class.WTF::VectorBuffer.423" }
%"class.WTF::VectorBuffer.423" = type { %"class.WTF::VectorBufferBase.424" }
%"class.WTF::VectorBufferBase.424" = type { %"class.blink::Member.425"*, i32, i32 }
%"class.blink::Member.425" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.40" }
%"class.blink::Member.427" = type { %"class.blink::MemberBase.428" }
%"class.blink::MemberBase.428" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.429" = type { %"class.blink::MemberBase.430" }
%"class.blink::MemberBase.430" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.431" = type { %"class.blink::MemberBase.432" }
%"class.blink::MemberBase.432" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.433" = type { %"class.blink::MemberBase.434" }
%"class.blink::MemberBase.434" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.435" = type { %"class.blink::MemberBase.436" }
%"class.blink::MemberBase.436" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.437" = type { %"class.WTF::HashTable.438" }
%"class.WTF::HashTable.438" = type <{ %"struct.WTF::KeyValuePair.441"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.441" = type opaque
%"class.blink::Member.442" = type { %"class.blink::MemberBase.443" }
%"class.blink::MemberBase.443" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.444" = type { %"class.blink::MemberBase.445" }
%"class.blink::MemberBase.445" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.446" = type { %"class.blink::MemberBase.447" }
%"class.blink::MemberBase.447" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.448" = type { %"class.blink::MemberBase.449" }
%"class.blink::MemberBase.449" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.327", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.318, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.318 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.319" }>
%"class.base::RefCountedThreadSafe.319" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.320 }
%class.scoped_refptr.320 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.321", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.321" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.322" }
%"struct.std::__1::atomic.322" = type { %"struct.std::__1::__atomic_base.323" }
%"struct.std::__1::__atomic_base.323" = type { %"struct.std::__1::__atomic_base.324" }
%"struct.std::__1::__atomic_base.324" = type { %"struct.std::__1::__cxx_atomic_impl.325" }
%"struct.std::__1::__cxx_atomic_impl.325" = type { %"struct.std::__1::__cxx_atomic_base_impl.326" }
%"struct.std::__1::__cxx_atomic_base_impl.326" = type { i8 }
%"class.blink::WeakMember.327" = type { %"class.blink::MemberBase.41" }
%"class.blink::HeapHashSet.450" = type { %"class.WTF::HashSet.453" }
%"class.WTF::HashSet.453" = type { %"class.WTF::HashTable.454" }
%"class.WTF::HashTable.454" = type <{ %"class.blink::Member.456"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.456" = type opaque
%"class.blink::Member.457" = type { %"class.blink::MemberBase.458" }
%"class.blink::MemberBase.458" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.459" = type { %"class.blink::MemberBase.460" }
%"class.blink::MemberBase.460" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.461" = type { %"class.blink::MemberBase.462" }
%"class.blink::MemberBase.462" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.463" = type { %"class.blink::MemberBase.464" }
%"class.blink::MemberBase.464" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.465" = type { %"class.blink::MemberBase.466" }
%"class.blink::MemberBase.466" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.467" = type { %"class.std::__1::__compressed_pair.468" }
%"class.std::__1::__compressed_pair.468" = type { %"struct.std::__1::__compressed_pair_elem.469" }
%"struct.std::__1::__compressed_pair_elem.469" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.473" = type { %"class.std::__1::__compressed_pair.474" }
%"class.std::__1::__compressed_pair.474" = type { %"struct.std::__1::__compressed_pair_elem.475" }
%"struct.std::__1::__compressed_pair_elem.475" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.479" = type { %"class.blink::MemberBase.480" }
%"class.blink::MemberBase.480" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.481" = type { %"class.blink::MemberBase.482" }
%"class.blink::MemberBase.482" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.483" = type { %"class.blink::MemberBase.484" }
%"class.blink::MemberBase.484" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.485" = type { %"class.blink::MemberBase.486" }
%"class.blink::MemberBase.486" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type <{ %"class.blink::Member.489", %"class.blink::Member.489", i32, i8, [3 x i8] }>
%"class.blink::Member.489" = type { %"class.blink::MemberBase.490" }
%"class.blink::MemberBase.490" = type { %"class.blink::IntersectionObserver"* }
%"class.blink::IntersectionObserver" = type opaque
%"class.WTF::Vector.491" = type { %"class.WTF::VectorBuffer.492" }
%"class.WTF::VectorBuffer.492" = type { %"class.WTF::VectorBufferBase.493" }
%"class.WTF::VectorBufferBase.493" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.496" = type { %"class.WTF::HashMap.499" }
%"class.WTF::HashMap.499" = type { %"class.WTF::HashTable.500" }
%"class.WTF::HashTable.500" = type <{ %"struct.WTF::KeyValuePair.502"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.502" = type opaque
%"class.blink::Member.503" = type { %"class.blink::MemberBase.504" }
%"class.blink::MemberBase.504" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.511" = type { %"class.blink::MemberBase.512" }
%"class.blink::MemberBase.512" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.513" = type { %"class.blink::MemberBase.514" }
%"class.blink::MemberBase.514" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.515" = type { %"class.WTF::HashMap.518" }
%"class.WTF::HashMap.518" = type { %"class.WTF::HashTable.519" }
%"class.WTF::HashTable.519" = type <{ %"struct.WTF::KeyValuePair.521"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.521" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.522" }
%"class.blink::HeapHashSet.522" = type { %"class.WTF::HashSet.525" }
%"class.WTF::HashSet.525" = type { %"class.WTF::HashTable.526" }
%"class.WTF::HashTable.526" = type <{ %"class.blink::WeakMember.528"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.528" = type opaque
%"class.blink::Member.529" = type { %"class.blink::MemberBase.530" }
%"class.blink::MemberBase.530" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.531" = type { %"class.blink::MemberBase.532" }
%"class.blink::MemberBase.532" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.40", %"class.blink::HeapHashSet.538", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.545", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.538" = type { %"class.WTF::HashSet.541" }
%"class.WTF::HashSet.541" = type { %"class.WTF::HashTable.542" }
%"class.WTF::HashTable.542" = type <{ %"class.blink::Member.544"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.544" = type opaque
%"class.blink::HeapTaskRunnerTimer.545" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.546", { i64, i64 } }
%"class.blink::WeakMember.546" = type { %"class.blink::MemberBase.532" }
%"class.blink::WeakMember.533" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::Node"* }
%"class.blink::Member.534" = type { %"class.blink::MemberBase.535" }
%"class.blink::MemberBase.535" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.42" = type { %"class.blink::MemberBase.43" }
%"class.blink::MemberBase.43" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.46" }
%"class.blink::HeapHashMap.46" = type { %"class.WTF::HashMap.49" }
%"class.WTF::HashMap.49" = type { %"class.WTF::HashTable.50" }
%"class.WTF::HashTable.50" = type <{ %"struct.WTF::KeyValuePair.52"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.52" = type { %"class.WTF::AtomicString", %"class.blink::Member.53" }
%"class.blink::Member.53" = type { %"class.blink::MemberBase.54" }
%"class.blink::MemberBase.54" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.19", i32, %"class.blink::HeapVector" }
%"class.blink::Member.57" = type { %"class.blink::MemberBase.58" }
%"class.blink::MemberBase.58" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.59" = type { %"class.blink::MemberBase.60" }
%"class.blink::MemberBase.60" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.61" = type { %"class.blink::MemberBase.62" }
%"class.blink::MemberBase.62" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.63" }
%"class.blink::Member.63" = type { %"class.blink::MemberBase.64" }
%"class.blink::MemberBase.64" = type { %"class.blink::HeapHashMap.65"* }
%"class.blink::HeapHashMap.65" = type opaque
%"class.blink::Member.66" = type { %"class.blink::MemberBase.67" }
%"class.blink::MemberBase.67" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.68" = type { %"class.WTF::Vector.71" }
%"class.WTF::Vector.71" = type { %"class.WTF::VectorBuffer.72" }
%"class.WTF::VectorBuffer.72" = type { %"class.WTF::VectorBufferBase.73" }
%"class.WTF::VectorBufferBase.73" = type { %"class.blink::Member.74"*, i32, i32 }
%"class.blink::Member.4" = type { %"class.blink::MemberBase.5" }
%"class.blink::MemberBase.5" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.22" = type { %"class.blink::MemberBase.23" }
%"class.blink::MemberBase.23" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.26", %"class.blink::Member.28", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.26" = type { %"class.WTF::SingleThreadedBitField.27" }
%"class.WTF::SingleThreadedBitField.27" = type { i32 }
%"class.blink::Member.28" = type { %"class.blink::MemberBase.29" }
%"class.blink::MemberBase.29" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.30 }
%class.scoped_refptr.30 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.31", %"class.WTF::AtomicString", %"class.WTF::Vector.33" }
%"class.WTF::RefCounted.31" = type { %"class.base::RefCounted.32" }
%"class.base::RefCounted.32" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.33" = type { %"class.WTF::VectorBuffer.34" }
%"class.WTF::VectorBuffer.34" = type { %"class.WTF::VectorBufferBase.35", [32 x i8] }
%"class.WTF::VectorBufferBase.35" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.blink::CollectionItemsCache" = type { %"class.blink::CollectionIndexCache", i8, %"class.blink::HeapVector" }
%"class.blink::CollectionIndexCache" = type { i32 (...)**, %"class.blink::Member.19", i32, i32 }
%"class.blink::Member.38" = type { %"class.blink::MemberBase.39" }
%"class.blink::MemberBase.39" = type { %"class.blink::HTMLElement"* }
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::HeapVector.627" = type { %"class.WTF::Vector.630" }
%"class.WTF::Vector.630" = type { %"class.WTF::VectorBuffer.631" }
%"class.WTF::VectorBuffer.631" = type { %"class.WTF::VectorBufferBase.632" }
%"class.WTF::VectorBufferBase.632" = type { %"class.blink::Member.633"*, i32, i32 }
%"class.blink::Member.633" = type { %"class.blink::MemberBase.634" }
%"class.blink::MemberBase.634" = type { %"class.blink::ListedElement"* }
%"class.blink::ListedElement" = type <{ %"class.blink::GarbageCollectedMixin", i8, [7 x i8], %"class.blink::Member.635", %"class.blink::Member.637", %"class.blink::Member.639", %"class.WTF::String", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.blink::Member.635" = type { %"class.blink::MemberBase.636" }
%"class.blink::MemberBase.636" = type { %"class.blink::FormAttributeTargetObserver"* }
%"class.blink::FormAttributeTargetObserver" = type opaque
%"class.blink::Member.637" = type { %"class.blink::MemberBase.638" }
%"class.blink::MemberBase.638" = type { %"class.blink::HTMLFormElement"* }
%"class.blink::HTMLFormElement" = type { %"class.blink::HTMLElement", %"class.blink::FormSubmission::Attributes", %"class.blink::Member.642", %"class.blink::RadioButtonGroupScope", %"class.blink::HeapVector.627", %"class.blink::HeapVector.645", i32, i8, i8, i8, i8 }
%"class.blink::FormSubmission::Attributes" = type { i32, i8, %"class.WTF::String", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::String" }
%"class.blink::Member.642" = type { %"class.blink::MemberBase.643" }
%"class.blink::MemberBase.643" = type { %"class.blink::HeapHashMap.644"* }
%"class.blink::HeapHashMap.644" = type opaque
%"class.blink::HeapVector.645" = type { %"class.WTF::Vector.648" }
%"class.WTF::Vector.648" = type { %"class.WTF::VectorBuffer.649" }
%"class.WTF::VectorBuffer.649" = type { %"class.WTF::VectorBufferBase.650" }
%"class.WTF::VectorBufferBase.650" = type { %"class.blink::Member.651"*, i32, i32 }
%"class.blink::Member.651" = type { %"class.blink::MemberBase.652" }
%"class.blink::MemberBase.652" = type { %"class.blink::HTMLImageElement"* }
%"class.blink::HTMLImageElement" = type { %"class.blink::HTMLElement", %"class.blink::ImageElementBase", %"class.blink::ActiveScriptWrappable", %"class.blink::FormAssociated", %"class.blink::Member.653", %"class.blink::Member.707", %"class.blink::Member.637", %"class.WTF::AtomicString", float, %"class.blink::Member.709", i8, i8, i32, %"class.std::__1::unique_ptr.711" }
%"class.blink::ImageElementBase" = type { %"class.blink::CanvasImageSource", %"class.blink::ImageBitmapSource", i32, i32 }
%"class.blink::CanvasImageSource" = type { i32 (...)** }
%"class.blink::ImageBitmapSource" = type { i32 (...)** }
%"class.blink::ActiveScriptWrappable" = type { %"class.blink::ActiveScriptWrappableBase" }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FormAssociated" = type { i32 (...)** }
%"class.blink::Member.653" = type { %"class.blink::MemberBase.654" }
%"class.blink::MemberBase.654" = type { %"class.blink::HTMLImageLoader"* }
%"class.blink::HTMLImageLoader" = type { %"class.blink::ImageLoader" }
%"class.blink::ImageLoader" = type { %"class.blink::ImageResourceObserver", %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.19", %"class.blink::Member.657", %"class.blink::Member.657", %"class.WTF::String", i32, %"class.WTF::AtomicString", %"class.base::WeakPtr", %"class.std::__1::unique_ptr.693", %"class.std::__1::unique_ptr.693", %"class.blink::TaskHandle", %"class.blink::TaskHandle", i8, i32, %"class.blink::HeapVector.699" }
%"class.blink::ImageResourceObserver" = type { i32 (...)** }
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.657" = type { %"class.blink::MemberBase.658" }
%"class.blink::MemberBase.658" = type { %"class.blink::ImageResourceContent"* }
%"class.blink::ImageResourceContent" = type { %"class.blink::ImageObserver", i8, i8, i8, i32, %"class.blink::Member.661", float, i8, %class.scoped_refptr.663, %"class.WTF::HashCountedSet", %"class.WTF::HashCountedSet" }
%"class.blink::ImageObserver" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.661" = type { %"class.blink::MemberBase.662" }
%"class.blink::MemberBase.662" = type { %"class.blink::ImageResourceInfo"* }
%"class.blink::ImageResourceInfo" = type { %"class.blink::GarbageCollectedMixin" }
%class.scoped_refptr.663 = type { %"class.blink::Image"* }
%"class.blink::Image" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i8, %class.scoped_refptr.665, %"class.blink::WeakPersistent", i32, i8, %"class.std::__1::unique_ptr.681" }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.664" }
%"class.base::RefCountedThreadSafe.664" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.665 = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted.666", i64, %"class.WTF::Vector.668", %"class.WTF::Vector.673" }
%"class.WTF::RefCounted.666" = type { %"class.base::RefCounted.667" }
%"class.base::RefCounted.667" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.668" = type { %"class.WTF::VectorBuffer.669" }
%"class.WTF::VectorBuffer.669" = type { %"class.WTF::VectorBufferBase.670" }
%"class.WTF::VectorBufferBase.670" = type { i8*, i32, i32 }
%"class.WTF::Vector.673" = type { %"class.WTF::VectorBuffer.674" }
%"class.WTF::VectorBuffer.674" = type { %"class.WTF::VectorBufferBase.675" }
%"class.WTF::VectorBufferBase.675" = type { %"class.std::__1::unique_ptr.676"*, i32, i32 }
%"class.std::__1::unique_ptr.676" = type opaque
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase.679" }
%"class.blink::PersistentBase.679" = type { %"class.blink::ImageObserver"*, %"class.blink::PersistentNodePtr.680" }
%"class.blink::PersistentNodePtr.680" = type { %"class.blink::PersistentNode"* }
%"class.std::__1::unique_ptr.681" = type { %"class.std::__1::__compressed_pair.682" }
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.683" }
%"struct.std::__1::__compressed_pair_elem.683" = type { %"class.blink::DarkModeImageCache"* }
%"class.blink::DarkModeImageCache" = type opaque
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.687" }
%"class.WTF::HashMap.687" = type { %"class.WTF::HashTable.688" }
%"class.WTF::HashTable.688" = type <{ %"struct.WTF::KeyValuePair.691"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.691" = type <{ %"class.blink::ImageResourceObserver"*, i32, [4 x i8] }>
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.692 }
%class.scoped_refptr.692 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::unique_ptr.693" = type { %"class.std::__1::__compressed_pair.694" }
%"class.std::__1::__compressed_pair.694" = type { %"struct.std::__1::__compressed_pair_elem.695" }
%"struct.std::__1::__compressed_pair_elem.695" = type { %"class.blink::IncrementLoadEventDelayCount"* }
%"class.blink::IncrementLoadEventDelayCount" = type opaque
%"class.blink::HeapVector.699" = type { %"class.WTF::Vector.702" }
%"class.WTF::Vector.702" = type { %"class.WTF::VectorBuffer.703" }
%"class.WTF::VectorBuffer.703" = type { %"class.WTF::VectorBufferBase.704" }
%"class.WTF::VectorBufferBase.704" = type { %"class.blink::Member.705"*, i32, i32 }
%"class.blink::Member.705" = type opaque
%"class.blink::Member.707" = type { %"class.blink::MemberBase.708" }
%"class.blink::MemberBase.708" = type { %"class.blink::HTMLImageElement::ViewportChangeListener"* }
%"class.blink::HTMLImageElement::ViewportChangeListener" = type opaque
%"class.blink::Member.709" = type { %"class.blink::MemberBase.710" }
%"class.blink::MemberBase.710" = type { %"class.blink::HTMLSourceElement"* }
%"class.blink::HTMLSourceElement" = type opaque
%"class.std::__1::unique_ptr.711" = type { %"class.std::__1::__compressed_pair.712" }
%"class.std::__1::__compressed_pair.712" = type { %"struct.std::__1::__compressed_pair_elem.713" }
%"struct.std::__1::__compressed_pair_elem.713" = type { %"struct.blink::LazyLoadImageObserver::VisibleLoadTimeMetrics"* }
%"struct.blink::LazyLoadImageObserver::VisibleLoadTimeMetrics" = type { i8, i8, %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"class.blink::Member.639" = type { %"class.blink::MemberBase.640" }
%"class.blink::MemberBase.640" = type { %"class.blink::ValidityState"* }
%"class.blink::ValidityState" = type opaque
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.28", %"class.WTF::Vector.751" }
%"class.WTF::Vector.751" = type { %"class.WTF::VectorBuffer.752" }
%"class.WTF::VectorBuffer.752" = type { %"class.WTF::VectorBufferBase.753", [64 x i8] }
%"class.WTF::VectorBufferBase.753" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.WTF::HashSet.718" = type { %"class.WTF::HashTable.719" }
%"class.WTF::HashTable.719" = type <{ %"class.WTF::StringImpl"**, i32, i32, i32, [4 x i8] }>
%"class.blink::LiveNodeListBase" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::Member", i16, [6 x i8] }>
%"class.blink::V8UnionElementOrRadioNodeList" = type { %"class.blink::bindings::UnionBase", i32, %"class.blink::Member.19", %"class.blink::Member.724" }
%"class.blink::bindings::UnionBase" = type { i32 (...)** }
%"class.blink::Member.724" = type { %"class.blink::MemberBase.725" }
%"class.blink::MemberBase.725" = type { %"class.blink::RadioNodeList"* }
%"class.blink::RadioNodeList" = type { %"class.blink::LiveNodeList", %"class.WTF::AtomicString" }
%"class.blink::LiveNodeList" = type { %"class.blink::NodeList", %"class.blink::LiveNodeListBase.base", %"class.blink::CollectionItemsCache.726" }
%"class.blink::NodeList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::CollectionItemsCache.726" = type { %"class.blink::CollectionIndexCache.727", i8, %"class.blink::HeapVector" }
%"class.blink::CollectionIndexCache.727" = type { i32 (...)**, %"class.blink::Member.19", i32, i32 }
%"class.WTF::Vector.728" = type { %"class.WTF::VectorBuffer.729" }
%"class.WTF::VectorBuffer.729" = type { %"class.WTF::VectorBufferBase.730" }
%"class.WTF::VectorBufferBase.730" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::HashSet.733" = type { %"class.WTF::HashTable.734" }
%"class.WTF::HashTable.734" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.742, %"class.blink::Member.743", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.742 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.743" = type { %"class.blink::MemberBase.744" }
%"class.blink::MemberBase.744" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.745" }
%"class.blink::Persistent.745" = type { %"class.blink::PersistentBase.746" }
%"class.blink::PersistentBase.746" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.758" }
%"class.std::__1::__compressed_pair.758" = type { %"struct.std::__1::__compressed_pair_elem.759" }
%"struct.std::__1::__compressed_pair_elem.759" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.760 }
%union.anon.760 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::HeapHashTableBacking" = type { i8 }
%"class.blink::HeapVectorBacking" = type { i8 }

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink26HTMLFormControlsCollection18GetWrapperTypeInfoEv = comdat any

$_ZN5blink14HTMLCollection14NamedItemCache15AddElementToMapERNS_11HeapHashMapIPN3WTF10StringImplENS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEENS3_10StringHashENS3_10HashTraitsIS5_EENSD_ISB_EEEERKNS3_12AtomicStringEPS8_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6insertINS_17HashMapTranslatorISI_SD_SJ_EES2_PS9_EENS_18HashTableAddResultISK_SB_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6ExpandEPSB_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE12ExpandBufferEjPSB_Rb = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE8RehashToEPSB_jSL_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE4CallEm = comdat any

$_ZN5blink20HeapHashTableBackingIN3WTF9HashTableIPNS1_10StringImplENS1_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEEEENS1_24KeyValuePairKeyExtractorENS1_10StringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEE14AllocateObjectISM_EEPvm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE7GetNameEPKv = comdat any

$_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableIPNS_10StringImplENS_12KeyValuePairIS4_N5blink6MemberINS6_10HeapVectorINS7_INS6_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSH_ISC_EEEESI_NS6_13HeapAllocatorEEEE5TraceEPNS6_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE7GetNameEPKv = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv = comdat any

$_ZNK3WTF6VectorIN5blink6MemberINS1_13ListedElementEEELj0ENS1_13HeapAllocatorEE2atEj = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_14HTMLCollection14NamedItemCacheEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_14HTMLCollection14NamedItemCacheEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_14HTMLCollection14NamedItemCacheEE7GetNameEPKv = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_S2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE2atEj = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_8bindings9UnionBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_8bindings9UnionBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_8bindings9UnionBaseEE7GetNameEPKv = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN5blink10TraceTraitINS_11HTMLElementEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink26HTMLFormControlsCollectionE = hidden unnamed_addr constant { [16 x i8*], [6 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*)* @_ZN5blink26HTMLFormControlsCollectionD2Ev to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*)* @_ZN5blink26HTMLFormControlsCollectionD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Visitor"*)* @_ZNK5blink26HTMLFormControlsCollection5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::HTMLFormControlsCollection"*)* @_ZNK5blink26HTMLFormControlsCollection18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Document"*)* @_ZNK5blink26HTMLFormControlsCollection15InvalidateCacheEPNS_8DocumentE to i8*), i8* bitcast (%"class.blink::HTMLElement"* (%"class.blink::HTMLFormControlsCollection"*, %"class.WTF::AtomicString"*)* @_ZNK5blink26HTMLFormControlsCollection9namedItemERKN3WTF12AtomicStringE to i8*), i8* bitcast (%"class.blink::HTMLElement"* (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Element"*)* @_ZNK5blink26HTMLFormControlsCollection16VirtualItemAfterEPNS_7ElementE to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*, %"class.WTF::Vector.728"*)* @_ZN5blink26HTMLFormControlsCollection22SupportedPropertyNamesERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*)* @_ZNK5blink26HTMLFormControlsCollection17UpdateIdNameCacheEv to i8*)], [6 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Visitor"*)* @_ZThn16_NK5blink26HTMLFormControlsCollection5TraceEPNS_7VisitorE to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*)* @_ZThn16_N5blink26HTMLFormControlsCollectionD1Ev to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*)* @_ZThn16_N5blink26HTMLFormControlsCollectionD0Ev to i8*), i8* bitcast (void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Document"*)* @_ZThn16_NK5blink26HTMLFormControlsCollection15InvalidateCacheEPNS_8DocumentE to i8*)] }, align 8
@_ZN5blink10html_names7kIdAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names9kNameAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.3 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.4 = private unnamed_addr constant [97 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_hash_table_backing.h\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.7 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableIPNS_10StringImplENS_12KeyValuePairIS5_NS1_6MemberINS1_10HeapVectorINS7_INS1_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS5_EENSH_ISC_EEEESI_NS1_13HeapAllocatorEEEEEEEPKcv = private unnamed_addr constant [474 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapHashTableBacking<WTF::HashTable<WTF::StringImpl *, WTF::KeyValuePair<WTF::StringImpl *, blink::Member<blink::HeapVector<blink::Member<blink::Element>, 0> > >, WTF::KeyValuePairKeyExtractor, WTF::StringHash, WTF::HashMapValueTraits<WTF::HashTraits<WTF::StringImpl *>, WTF::HashTraits<blink::Member<blink::HeapVector<blink::Member<blink::Element>, 0> > > >, WTF::HashTraits<WTF::StringImpl *>, blink::HeapAllocator> >]\00", align 1
@_ZN5blink11ThreadState26main_thread_state_storage_E = external global [0 x i8], align 1
@_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.8 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.10 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.11 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberINS1_7ElementEEENS_12VectorTraitsIS5_EEEEEEPKcv = private unnamed_addr constant [155 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapVectorBacking<blink::Member<blink::Element>, WTF::VectorTraits<blink::Member<blink::Element> > >]\00", align 1
@_ZN5blink26HTMLFormControlsCollection18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@.str.12 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14HTMLCollection14NamedItemCacheEEEPKcv = private unnamed_addr constant [85 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HTMLCollection::NamedItemCache]\00", align 1
@_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_14HTMLCollection14NamedItemCacheEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_14HTMLCollection14NamedItemCacheEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPNS_10StringImplEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::StringImpl *]\00", align 1
@_ZN5blink10html_names7kImgTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8bindings9UnionBaseEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::bindings::UnionBase]\00", align 1
@_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_8bindings9UnionBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_8bindings9UnionBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_8bindings9UnionBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZTVN5blink29V8UnionElementOrRadioNodeListE = external unnamed_addr constant { [6 x i8*] }, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@.str.13 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

@_ZN5blink26HTMLFormControlsCollectionC1ERNS_13ContainerNodeE = hidden unnamed_addr alias void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::ContainerNode"*), void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::ContainerNode"*)* @_ZN5blink26HTMLFormControlsCollectionC2ERNS_13ContainerNodeE
@_ZN5blink26HTMLFormControlsCollectionC1ERNS_13ContainerNodeENS_14CollectionTypeE = hidden unnamed_addr alias void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::ContainerNode"*, i32), void (%"class.blink::HTMLFormControlsCollection"*, %"class.blink::ContainerNode"*, i32)* @_ZN5blink26HTMLFormControlsCollectionC2ERNS_13ContainerNodeENS_14CollectionTypeE
@_ZN5blink26HTMLFormControlsCollectionD1Ev = hidden unnamed_addr alias void (%"class.blink::HTMLFormControlsCollection"*), void (%"class.blink::HTMLFormControlsCollection"*)* @_ZN5blink26HTMLFormControlsCollectionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26HTMLFormControlsCollectionC2ERNS_13ContainerNodeE(%"class.blink::HTMLFormControlsCollection"*, %"class.blink::ContainerNode"* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  tail call void @_ZN5blink14HTMLCollectionC2ERNS_13ContainerNodeENS_14CollectionTypeENS0_21ItemAfterOverrideTypeE(%"class.blink::HTMLCollection"* %3, %"class.blink::ContainerNode"* dereferenceable(80) %1, i32 17, i32 0) #8
  %4 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*], [6 x i8*] }, { [16 x i8*], [6 x i8*] }* @_ZTVN5blink26HTMLFormControlsCollectionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*], [6 x i8*] }, { [16 x i8*], [6 x i8*] }* @_ZTVN5blink26HTMLFormControlsCollectionE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::HTMLElement"* null, %"class.blink::HTMLElement"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 2
  store i32 0, i32* %7, align 8
  ret void
}

declare void @_ZN5blink14HTMLCollectionC2ERNS_13ContainerNodeENS_14CollectionTypeENS0_21ItemAfterOverrideTypeE(%"class.blink::HTMLCollection"*, %"class.blink::ContainerNode"* dereferenceable(80), i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26HTMLFormControlsCollectionC2ERNS_13ContainerNodeENS_14CollectionTypeE(%"class.blink::HTMLFormControlsCollection"*, %"class.blink::ContainerNode"* dereferenceable(80), i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  tail call void @_ZN5blink14HTMLCollectionC2ERNS_13ContainerNodeENS_14CollectionTypeENS0_21ItemAfterOverrideTypeE(%"class.blink::HTMLCollection"* %4, %"class.blink::ContainerNode"* dereferenceable(80) %1, i32 17, i32 0) #8
  %5 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*], [6 x i8*] }, { [16 x i8*], [6 x i8*] }* @_ZTVN5blink26HTMLFormControlsCollectionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*], [6 x i8*] }, { [16 x i8*], [6 x i8*] }* @_ZTVN5blink26HTMLFormControlsCollectionE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::HTMLElement"* null, %"class.blink::HTMLElement"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 2
  store i32 0, i32* %8, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink14HTMLCollectionD2Ev(%"class.blink::HTMLCollection"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26HTMLFormControlsCollectionD2Ev(%"class.blink::HTMLFormControlsCollection"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  tail call void @_ZN5blink14HTMLCollectionD2Ev(%"class.blink::HTMLCollection"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_N5blink26HTMLFormControlsCollectionD1Ev(%"class.blink::HTMLFormControlsCollection"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 -1, i32 1
  %3 = bitcast %"class.blink::Member.38"* %2 to %"class.blink::HTMLCollection"*
  tail call void @_ZN5blink14HTMLCollectionD2Ev(%"class.blink::HTMLCollection"* %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26HTMLFormControlsCollectionD0Ev(%"class.blink::HTMLFormControlsCollection"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  tail call void @_ZN5blink14HTMLCollectionD2Ev(%"class.blink::HTMLCollection"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_N5blink26HTMLFormControlsCollectionD0Ev(%"class.blink::HTMLFormControlsCollection"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 -1, i32 1
  %3 = bitcast %"class.blink::Member.38"* %2 to %"class.blink::HTMLCollection"*
  tail call void @_ZN5blink14HTMLCollectionD2Ev(%"class.blink::HTMLCollection"* %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink26HTMLFormControlsCollection14ListedElementsEv(%"class.blink::HTMLFormControlsCollection"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %3 = bitcast %"class.blink::ContainerNode"** %2 to %"class.blink::HTMLFormElement"**
  %4 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %3, align 8
  %5 = tail call dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink15HTMLFormElement14ListedElementsEv(%"class.blink::HTMLFormElement"* %4) #8
  ret %"class.blink::HeapVector.627"* %5
}

declare dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink15HTMLFormElement14ListedElementsEv(%"class.blink::HTMLFormElement"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.blink::HeapVector.645"* @_ZNK5blink26HTMLFormControlsCollection17FormImageElementsEv(%"class.blink::HTMLFormControlsCollection"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %3 = bitcast %"class.blink::ContainerNode"** %2 to %"class.blink::HTMLFormElement"**
  %4 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %3, align 8
  %5 = tail call dereferenceable(16) %"class.blink::HeapVector.645"* @_ZN5blink15HTMLFormElement13ImageElementsEv(%"class.blink::HTMLFormElement"* %4) #8
  ret %"class.blink::HeapVector.645"* %5
}

declare dereferenceable(16) %"class.blink::HeapVector.645"* @_ZN5blink15HTMLFormElement13ImageElementsEv(%"class.blink::HTMLFormElement"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLElement"* @_ZNK5blink26HTMLFormControlsCollection16VirtualItemAfterEPNS_7ElementE(%"class.blink::HTMLFormControlsCollection"* nocapture, %"class.blink::Element"* readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %4 = bitcast %"class.blink::ContainerNode"** %3 to %"class.blink::HTMLFormElement"**
  %5 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %4, align 8
  %6 = tail call dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink15HTMLFormElement14ListedElementsEv(%"class.blink::HTMLFormElement"* %5) #8
  %7 = icmp eq %"class.blink::Element"* %1, null
  br i1 %7, label %44, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.blink::HTMLElement"*, %"class.blink::HTMLElement"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %10, i64 0, i32 0
  %12 = icmp eq %"class.blink::Element"* %11, %1
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, 1
  br label %44

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %41, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %6, i64 0, i32 0
  br label %23

23:                                               ; preds = %37, %21
  %24 = phi i32 [ 0, %21 ], [ %38, %37 ]
  %25 = tail call dereferenceable(8) %"class.blink::Member.633"* @_ZNK3WTF6VectorIN5blink6MemberINS1_13ListedElementEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.630"* %22, i32 %24) #8
  %26 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %25, i64 0, i32 0, i32 0
  %27 = load %"class.blink::ListedElement"*, %"class.blink::ListedElement"** %26, align 8
  %28 = bitcast %"class.blink::ListedElement"* %27 to i1 (%"class.blink::ListedElement"*)***
  %29 = load i1 (%"class.blink::ListedElement"*)**, i1 (%"class.blink::ListedElement"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %29, i64 6
  %31 = load i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.blink::ListedElement"* %27) #8
  br i1 %32, label %33, label %37

33:                                               ; preds = %23
  %34 = tail call dereferenceable(104) %"class.blink::HTMLElement"* @_ZN5blink13ListedElement13ToHTMLElementEv(%"class.blink::ListedElement"* %27) #8
  %35 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %34, i64 0, i32 0
  %36 = icmp eq %"class.blink::Element"* %35, %1
  br i1 %36, label %41, label %37

37:                                               ; preds = %33, %23
  %38 = add nuw i32 %24, 1
  %39 = load i32, i32* %18, align 4
  %40 = icmp ult i32 %38, %39
  br i1 %40, label %23, label %41

41:                                               ; preds = %33, %37, %17
  %42 = phi i32 [ 0, %17 ], [ %38, %37 ], [ %24, %33 ]
  %43 = add i32 %42, 1
  br label %44

44:                                               ; preds = %2, %13, %41
  %45 = phi i32 [ %16, %13 ], [ %43, %41 ], [ 0, %2 ]
  %46 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp ult i32 %45, %47
  br i1 %48, label %49, label %80

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %6, i64 0, i32 0
  br label %51

51:                                               ; preds = %49, %73
  %52 = phi i32 [ %45, %49 ], [ %74, %73 ]
  %53 = tail call dereferenceable(8) %"class.blink::Member.633"* @_ZNK3WTF6VectorIN5blink6MemberINS1_13ListedElementEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.630"* %50, i32 %52) #8
  %54 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.blink::ListedElement"*, %"class.blink::ListedElement"** %54, align 8
  %56 = bitcast %"class.blink::ListedElement"* %55 to i1 (%"class.blink::ListedElement"*)***
  %57 = load i1 (%"class.blink::ListedElement"*)**, i1 (%"class.blink::ListedElement"*)*** %56, align 8
  %58 = getelementptr inbounds i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %57, i64 6
  %59 = load i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %58, align 8
  %60 = tail call zeroext i1 %59(%"class.blink::ListedElement"* %55) #8
  br i1 %60, label %61, label %73

61:                                               ; preds = %51
  %62 = tail call dereferenceable(104) %"class.blink::HTMLElement"* @_ZN5blink13ListedElement13ToHTMLElementEv(%"class.blink::ListedElement"* %55) #8
  %63 = ptrtoint %"class.blink::HTMLElement"* %62 to i64
  %64 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 1
  %65 = bitcast %"class.blink::Member.38"* %64 to i64*
  store atomic i64 %63, i64* %65 monotonic, align 8
  %66 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %77, label %68

68:                                               ; preds = %61
  %69 = bitcast %"class.blink::HTMLElement"* %62 to i8*
  %70 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %69) #8
  %71 = getelementptr inbounds %"class.blink::Member.38", %"class.blink::Member.38"* %64, i64 0, i32 0, i32 0
  %72 = load %"class.blink::HTMLElement"*, %"class.blink::HTMLElement"** %71, align 8
  br label %77

73:                                               ; preds = %51
  %74 = add nuw i32 %52, 1
  %75 = load i32, i32* %46, align 4
  %76 = icmp ult i32 %74, %75
  br i1 %76, label %51, label %80

77:                                               ; preds = %61, %68
  %78 = phi %"class.blink::HTMLElement"* [ %62, %61 ], [ %72, %68 ]
  %79 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 2
  store i32 %52, i32* %79, align 8
  br label %80

80:                                               ; preds = %73, %44, %77
  %81 = phi %"class.blink::HTMLElement"* [ %78, %77 ], [ null, %44 ], [ null, %73 ]
  ret %"class.blink::HTMLElement"* %81
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dereferenceable(104) %"class.blink::HTMLElement"* @_ZN5blink13ListedElement13ToHTMLElementEv(%"class.blink::ListedElement"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink26HTMLFormControlsCollection15InvalidateCacheEPNS_8DocumentE(%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Document"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  tail call void @_ZNK5blink14HTMLCollection15InvalidateCacheEPNS_8DocumentE(%"class.blink::HTMLCollection"* %3, %"class.blink::Document"* %1) #8
  %4 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 1
  %5 = bitcast %"class.blink::Member.38"* %4 to i64*
  store atomic i64 0, i64* %5 monotonic, align 8
  %6 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 2
  store i32 0, i32* %6, align 8
  ret void
}

declare void @_ZNK5blink14HTMLCollection15InvalidateCacheEPNS_8DocumentE(%"class.blink::HTMLCollection"*, %"class.blink::Document"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_NK5blink26HTMLFormControlsCollection15InvalidateCacheEPNS_8DocumentE(%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Document"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 -1, i32 1
  %4 = bitcast %"class.blink::Member.38"* %3 to %"class.blink::HTMLCollection"*
  tail call void @_ZNK5blink14HTMLCollection15InvalidateCacheEPNS_8DocumentE(%"class.blink::HTMLCollection"* %4, %"class.blink::Document"* %1) #8
  %5 = getelementptr inbounds %"class.blink::Member.38", %"class.blink::Member.38"* %3, i64 12
  %6 = bitcast %"class.blink::Member.38"* %5 to i64*
  store atomic i64 0, i64* %6 monotonic, align 8
  %7 = getelementptr inbounds %"class.blink::Member.38", %"class.blink::Member.38"* %3, i64 13
  %8 = bitcast %"class.blink::Member.38"* %7 to i32*
  store i32 0, i32* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLElement"* @_ZNK5blink26HTMLFormControlsCollection9namedItemERKN3WTF12AtomicStringE(%"class.blink::HTMLFormControlsCollection"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %4 = bitcast %"class.blink::ContainerNode"** %3 to %"class.blink::HTMLFormElement"**
  %5 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %4, align 8
  %6 = tail call dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink15HTMLFormElement14ListedElementsEv(%"class.blink::HTMLFormElement"* %5) #8
  %7 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %9 = tail call fastcc %"class.blink::HTMLElement"* @_ZN5blinkL14FirstNamedItemERKNS_10HeapVectorINS_6MemberINS_13ListedElementEEELj0EEERKNS_13QualifiedNameERKN3WTF6StringE(%"class.blink::HeapVector.627"* dereferenceable(16) %6, %"class.blink::QualifiedName"* dereferenceable(8) %7, %"class.WTF::String"* dereferenceable(8) %8)
  %10 = icmp eq %"class.blink::HTMLElement"* %9, null
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %12 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %4, align 8
  %13 = tail call dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink15HTMLFormElement14ListedElementsEv(%"class.blink::HTMLFormElement"* %12) #8
  %14 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kNameAttrE, align 8
  %15 = tail call fastcc %"class.blink::HTMLElement"* @_ZN5blinkL14FirstNamedItemERKNS_10HeapVectorINS_6MemberINS_13ListedElementEEELj0EEERKNS_13QualifiedNameERKN3WTF6StringE(%"class.blink::HeapVector.627"* dereferenceable(16) %13, %"class.blink::QualifiedName"* dereferenceable(8) %14, %"class.WTF::String"* dereferenceable(8) %8)
  br label %16

16:                                               ; preds = %2, %11
  %17 = phi %"class.blink::HTMLElement"* [ %15, %11 ], [ %9, %2 ]
  ret %"class.blink::HTMLElement"* %17
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.blink::HTMLElement"* @_ZN5blinkL14FirstNamedItemERKNS_10HeapVectorINS_6MemberINS_13ListedElementEEELj0EEERKNS_13QualifiedNameERKN3WTF6StringE(%"class.blink::HeapVector.627"* nocapture readonly dereferenceable(16), %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::Member.633"*, %"class.blink::Member.633"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %88, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  br label %15

15:                                               ; preds = %11, %85
  %16 = phi %"class.blink::Member.633"* [ %5, %11 ], [ %86, %85 ]
  %17 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.blink::ListedElement"*, %"class.blink::ListedElement"** %17, align 8
  %19 = tail call dereferenceable(104) %"class.blink::HTMLElement"* @_ZN5blink13ListedElement13ToHTMLElementEv(%"class.blink::ListedElement"* %18) #8
  %20 = load %"class.blink::ListedElement"*, %"class.blink::ListedElement"** %17, align 8
  %21 = bitcast %"class.blink::ListedElement"* %20 to i1 (%"class.blink::ListedElement"*)***
  %22 = load i1 (%"class.blink::ListedElement"*)**, i1 (%"class.blink::ListedElement"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %22, i64 6
  %24 = load i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.blink::ListedElement"* %20) #8
  br i1 %25, label %26, label %85

26:                                               ; preds = %15
  %27 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %19, i64 0, i32 0, i32 3, i32 0, i32 0
  %28 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %27, align 8
  %29 = icmp eq %"class.blink::ElementData"* %28, null
  br i1 %29, label %79, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %28, i64 0, i32 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %42, label %35

35:                                               ; preds = %30
  %36 = bitcast %"class.blink::ElementData"* %28 to %"class.blink::UniqueElementData"*
  %37 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %28, i64 1, i32 1
  %38 = bitcast %"class.blink::Member.28"* %37 to %"class.blink::Attribute"**
  %39 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %38, align 8
  %40 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %36, i64 0, i32 2, i32 0, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  br label %47

42:                                               ; preds = %30
  %43 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %28, i64 1
  %44 = bitcast %"class.blink::ElementData"* %43 to %"class.blink::Attribute"*
  %45 = lshr i32 %32, 1
  %46 = and i32 %45, 268435455
  br label %47

47:                                               ; preds = %42, %35
  %48 = phi %"class.blink::Attribute"* [ %44, %42 ], [ %39, %35 ]
  %49 = phi i32 [ %46, %42 ], [ %41, %35 ]
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %48, i64 %50
  %52 = icmp eq i32 %49, 0
  br i1 %52, label %79, label %53

53:                                               ; preds = %47
  %54 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %12, align 8
  %55 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %54, i64 0, i32 3, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %54, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %57

57:                                               ; preds = %72, %53
  %58 = phi %"class.blink::Attribute"* [ %48, %53 ], [ %73, %72 ]
  %59 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %59, align 8
  %61 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %60, %54
  br i1 %61, label %75, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %60, i64 0, i32 3, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %64, %65
  br i1 %66, label %67, label %72

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %60, i64 0, i32 4, i32 0, i32 0, i32 0
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %69, %70
  br i1 %71, label %75, label %72

72:                                               ; preds = %67, %62
  %73 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %58, i64 1
  %74 = icmp eq %"class.blink::Attribute"* %73, %51
  br i1 %74, label %79, label %57

75:                                               ; preds = %67, %57
  %76 = icmp eq %"class.blink::Attribute"* %58, null
  %77 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %58, i64 0, i32 1
  %78 = select i1 %76, %"class.WTF::AtomicString"* %13, %"class.WTF::AtomicString"* %77
  br label %79

79:                                               ; preds = %72, %75, %26, %47
  %80 = phi %"class.WTF::AtomicString"* [ %13, %47 ], [ %13, %26 ], [ %78, %75 ], [ %13, %72 ]
  %81 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %81, align 8
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %84 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %82, %"class.WTF::StringImpl"* %83) #8
  br i1 %84, label %88, label %85

85:                                               ; preds = %15, %79
  %86 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %16, i64 1
  %87 = icmp eq %"class.blink::Member.633"* %86, %9
  br i1 %87, label %88, label %15

88:                                               ; preds = %79, %85, %3
  %89 = phi %"class.blink::HTMLElement"* [ null, %3 ], [ null, %85 ], [ %19, %79 ]
  ret %"class.blink::HTMLElement"* %89
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink26HTMLFormControlsCollection17UpdateIdNameCacheEv(%"class.blink::HTMLFormControlsCollection"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::HashSet.718", align 8
  %3 = alloca %"class.WTF::StringImpl"*, align 8
  %4 = alloca %"class.WTF::StringImpl"*, align 8
  %5 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %6 = load %"class.blink::HTMLCollection::NamedItemCache"*, %"class.blink::HTMLCollection::NamedItemCache"** %5, align 8
  %7 = icmp eq %"class.blink::HTMLCollection::NamedItemCache"* %6, null
  br i1 %7, label %8, label %485

8:                                                ; preds = %1
  %9 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_14HTMLCollection14NamedItemCacheEEEPhm(i64 48) #8
  %10 = bitcast i8* %9 to %"class.blink::HTMLCollection::NamedItemCache"*
  tail call void @_ZN5blink14HTMLCollection14NamedItemCacheC1Ev(%"class.blink::HTMLCollection::NamedItemCache"* %10) #8
  %11 = getelementptr inbounds i8, i8* %9, i64 -4
  %12 = bitcast i8* %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = or i16 %13, 1
  store atomic i16 %14, i16* %12 release, align 2
  %15 = bitcast %"class.WTF::HashSet.718"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.WTF::HashSet.718", %"class.WTF::HashSet.718"* %2, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.WTF::HashSet.718", %"class.WTF::HashSet.718"* %2, i64 0, i32 0, i32 1
  %18 = bitcast %"class.WTF::HashSet.718"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 20, i1 false) #8
  %19 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %20 = bitcast %"class.blink::ContainerNode"** %19 to %"class.blink::HTMLFormElement"**
  %21 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %20, align 8
  %22 = tail call dereferenceable(16) %"class.blink::HeapVector.627"* @_ZNK5blink15HTMLFormElement14ListedElementsEv(%"class.blink::HTMLFormElement"* %21) #8
  %23 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member.633"*, %"class.blink::Member.633"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::HeapVector.627", %"class.blink::HeapVector.627"* %22, i64 0, i32 0, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %24, i64 %27
  %29 = icmp eq i32 %26, 0
  br i1 %29, label %44, label %30

30:                                               ; preds = %8
  %31 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %31, i64 0, i32 0, i32 0
  %33 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %34 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kNameAttrE, align 8
  %35 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %34, i64 0, i32 0, i32 0
  %36 = bitcast i8* %9 to %"class.blink::HeapHashMap"*
  %37 = bitcast %"class.WTF::StringImpl"** %3 to i8*
  %38 = bitcast %"class.WTF::StringImpl"** %3 to i64*
  %39 = getelementptr inbounds %"class.WTF::HashSet.718", %"class.WTF::HashSet.718"* %2, i64 0, i32 0
  %40 = getelementptr inbounds i8, i8* %9, i64 24
  %41 = bitcast i8* %40 to %"class.blink::HeapHashMap"*
  %42 = bitcast %"class.WTF::StringImpl"** %4 to i8*
  %43 = bitcast %"class.WTF::StringImpl"** %4 to i64*
  br label %63

44:                                               ; preds = %217, %8
  %45 = load %"class.blink::HTMLFormElement"*, %"class.blink::HTMLFormElement"** %20, align 8
  %46 = call dereferenceable(16) %"class.blink::HeapVector.645"* @_ZN5blink15HTMLFormElement13ImageElementsEv(%"class.blink::HTMLFormElement"* %45) #8
  %47 = getelementptr inbounds %"class.blink::HeapVector.645", %"class.blink::HeapVector.645"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load %"class.blink::Member.651"*, %"class.blink::Member.651"** %47, align 8
  %49 = getelementptr inbounds %"class.blink::HeapVector.645", %"class.blink::HeapVector.645"* %46, i64 0, i32 0, i32 0, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %"class.blink::Member.651", %"class.blink::Member.651"* %48, i64 %51
  %53 = icmp eq i32 %50, 0
  br i1 %53, label %220, label %54

54:                                               ; preds = %44
  %55 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %56 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %55, i64 0, i32 0, i32 0
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %58 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kNameAttrE, align 8
  %59 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %58, i64 0, i32 0, i32 0
  %60 = bitcast i8* %9 to %"class.blink::HeapHashMap"*
  %61 = getelementptr inbounds i8, i8* %9, i64 24
  %62 = bitcast i8* %61 to %"class.blink::HeapHashMap"*
  br label %247

63:                                               ; preds = %30, %217
  %64 = phi %"class.blink::Member.633"* [ %24, %30 ], [ %218, %217 ]
  %65 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %64, i64 0, i32 0, i32 0
  %66 = load %"class.blink::ListedElement"*, %"class.blink::ListedElement"** %65, align 8
  %67 = bitcast %"class.blink::ListedElement"* %66 to i1 (%"class.blink::ListedElement"*)***
  %68 = load i1 (%"class.blink::ListedElement"*)**, i1 (%"class.blink::ListedElement"*)*** %67, align 8
  %69 = getelementptr inbounds i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %68, i64 6
  %70 = load i1 (%"class.blink::ListedElement"*)*, i1 (%"class.blink::ListedElement"*)** %69, align 8
  %71 = call zeroext i1 %70(%"class.blink::ListedElement"* %66) #8
  br i1 %71, label %72, label %217

72:                                               ; preds = %63
  %73 = load %"class.blink::ListedElement"*, %"class.blink::ListedElement"** %65, align 8
  %74 = call dereferenceable(104) %"class.blink::HTMLElement"* @_ZN5blink13ListedElement13ToHTMLElementEv(%"class.blink::ListedElement"* %73) #8
  %75 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %74, i64 0, i32 0
  %76 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %74, i64 0, i32 0, i32 3, i32 0, i32 0
  %77 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %76, align 8
  %78 = icmp eq %"class.blink::ElementData"* %77, null
  br i1 %78, label %188, label %79

79:                                               ; preds = %72
  %80 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 0, i32 3, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %132, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 0, i32 0, i32 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %95, label %88

88:                                               ; preds = %83
  %89 = bitcast %"class.blink::ElementData"* %77 to %"class.blink::UniqueElementData"*
  %90 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 1, i32 1
  %91 = bitcast %"class.blink::Member.28"* %90 to %"class.blink::Attribute"**
  %92 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %91, align 8
  %93 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %89, i64 0, i32 2, i32 0, i32 0, i32 2
  %94 = load i32, i32* %93, align 4
  br label %100

95:                                               ; preds = %83
  %96 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 1
  %97 = bitcast %"class.blink::ElementData"* %96 to %"class.blink::Attribute"*
  %98 = lshr i32 %85, 1
  %99 = and i32 %98, 268435455
  br label %100

100:                                              ; preds = %95, %88
  %101 = phi %"class.blink::Attribute"* [ %97, %95 ], [ %92, %88 ]
  %102 = phi i32 [ %99, %95 ], [ %94, %88 ]
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %101, i64 %103
  %105 = icmp eq i32 %102, 0
  br i1 %105, label %132, label %106

106:                                              ; preds = %100
  %107 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %32, align 8
  %108 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %107, i64 0, i32 3, i32 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %107, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %110

110:                                              ; preds = %125, %106
  %111 = phi %"class.blink::Attribute"* [ %101, %106 ], [ %126, %125 ]
  %112 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %111, i64 0, i32 0, i32 0, i32 0
  %113 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %112, align 8
  %114 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %113, %107
  br i1 %114, label %128, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %113, i64 0, i32 3, i32 0, i32 0, i32 0
  %117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %116, align 8
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %108, align 8
  %119 = icmp eq %"class.WTF::StringImpl"* %117, %118
  br i1 %119, label %120, label %125

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %113, i64 0, i32 4, i32 0, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %122, %123
  br i1 %124, label %128, label %125

125:                                              ; preds = %120, %115
  %126 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %111, i64 1
  %127 = icmp eq %"class.blink::Attribute"* %126, %104
  br i1 %127, label %132, label %110

128:                                              ; preds = %120, %110
  %129 = icmp eq %"class.blink::Attribute"* %111, null
  %130 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %111, i64 0, i32 1
  %131 = select i1 %129, %"class.WTF::AtomicString"* %33, %"class.WTF::AtomicString"* %130
  br label %132

132:                                              ; preds = %125, %128, %79, %100
  %133 = phi %"class.WTF::AtomicString"* [ %33, %100 ], [ %33, %79 ], [ %131, %128 ], [ %33, %125 ]
  %134 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %74, i64 0, i32 0, i32 0, i32 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = and i32 %135, 1048576
  %137 = icmp eq i32 %136, 0
  %138 = or i1 %137, %78
  br i1 %138, label %188, label %139

139:                                              ; preds = %132
  %140 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 0, i32 0, i32 0, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %151, label %144

144:                                              ; preds = %139
  %145 = bitcast %"class.blink::ElementData"* %77 to %"class.blink::UniqueElementData"*
  %146 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 1, i32 1
  %147 = bitcast %"class.blink::Member.28"* %146 to %"class.blink::Attribute"**
  %148 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %147, align 8
  %149 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %145, i64 0, i32 2, i32 0, i32 0, i32 2
  %150 = load i32, i32* %149, align 4
  br label %156

151:                                              ; preds = %139
  %152 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %77, i64 1
  %153 = bitcast %"class.blink::ElementData"* %152 to %"class.blink::Attribute"*
  %154 = lshr i32 %141, 1
  %155 = and i32 %154, 268435455
  br label %156

156:                                              ; preds = %151, %144
  %157 = phi %"class.blink::Attribute"* [ %153, %151 ], [ %148, %144 ]
  %158 = phi i32 [ %155, %151 ], [ %150, %144 ]
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %157, i64 %159
  %161 = icmp eq i32 %158, 0
  br i1 %161, label %188, label %162

162:                                              ; preds = %156
  %163 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %35, align 8
  %164 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %163, i64 0, i32 3, i32 0, i32 0, i32 0
  %165 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %163, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %166

166:                                              ; preds = %181, %162
  %167 = phi %"class.blink::Attribute"* [ %157, %162 ], [ %182, %181 ]
  %168 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %167, i64 0, i32 0, i32 0, i32 0
  %169 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %168, align 8
  %170 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %169, %163
  br i1 %170, label %184, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %169, i64 0, i32 3, i32 0, i32 0, i32 0
  %173 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %172, align 8
  %174 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %164, align 8
  %175 = icmp eq %"class.WTF::StringImpl"* %173, %174
  br i1 %175, label %176, label %181

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %169, i64 0, i32 4, i32 0, i32 0, i32 0
  %178 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %177, align 8
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %180 = icmp eq %"class.WTF::StringImpl"* %178, %179
  br i1 %180, label %184, label %181

181:                                              ; preds = %176, %171
  %182 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %167, i64 1
  %183 = icmp eq %"class.blink::Attribute"* %182, %160
  br i1 %183, label %188, label %166

184:                                              ; preds = %176, %166
  %185 = icmp eq %"class.blink::Attribute"* %167, null
  %186 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %167, i64 0, i32 1
  %187 = select i1 %185, %"class.WTF::AtomicString"* %33, %"class.WTF::AtomicString"* %186
  br label %188

188:                                              ; preds = %181, %72, %184, %132, %156
  %189 = phi %"class.WTF::AtomicString"* [ %133, %156 ], [ %133, %132 ], [ %133, %184 ], [ %33, %72 ], [ %133, %181 ]
  %190 = phi %"class.WTF::AtomicString"* [ %33, %156 ], [ %33, %132 ], [ %187, %184 ], [ %33, %72 ], [ %33, %181 ]
  %191 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %189, i64 0, i32 0, i32 0, i32 0
  %192 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %191, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %192, null
  br i1 %193, label %202, label %194

194:                                              ; preds = %188
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 1
  %196 = load i32, i32* %195, align 4
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %202, label %198

198:                                              ; preds = %194
  call void @_ZN5blink14HTMLCollection14NamedItemCache15AddElementToMapERNS_11HeapHashMapIPN3WTF10StringImplENS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEENS3_10StringHashENS3_10HashTraitsIS5_EENSD_ISB_EEEERKNS3_12AtomicStringEPS8_(%"class.blink::HeapHashMap"* dereferenceable(24) %36, %"class.WTF::AtomicString"* dereferenceable(8) %189, %"class.blink::Element"* %75) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #8
  %199 = bitcast %"class.WTF::AtomicString"* %189 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %38, align 8
  %201 = call { %"class.WTF::StringImpl"**, i8 } @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_S2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_(%"class.WTF::HashTable.719"* nonnull %39, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %3, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #8
  br label %202

202:                                              ; preds = %188, %198, %194
  %203 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %190, i64 0, i32 0, i32 0, i32 0
  %204 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %203, align 8
  %205 = icmp eq %"class.WTF::StringImpl"* %204, null
  br i1 %205, label %217, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %217, label %210

210:                                              ; preds = %206
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %191, align 8
  %212 = icmp eq %"class.WTF::StringImpl"* %211, %204
  br i1 %212, label %217, label %213

213:                                              ; preds = %210
  call void @_ZN5blink14HTMLCollection14NamedItemCache15AddElementToMapERNS_11HeapHashMapIPN3WTF10StringImplENS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEENS3_10StringHashENS3_10HashTraitsIS5_EENSD_ISB_EEEERKNS3_12AtomicStringEPS8_(%"class.blink::HeapHashMap"* dereferenceable(24) %41, %"class.WTF::AtomicString"* dereferenceable(8) %190, %"class.blink::Element"* %75) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  %214 = bitcast %"class.WTF::AtomicString"* %190 to i64*
  %215 = load i64, i64* %214, align 8
  store i64 %215, i64* %43, align 8
  %216 = call { %"class.WTF::StringImpl"**, i8 } @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_S2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_(%"class.WTF::HashTable.719"* nonnull %39, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %4, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  br label %217

217:                                              ; preds = %210, %202, %206, %213, %63
  %218 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %64, i64 1
  %219 = icmp eq %"class.blink::Member.633"* %218, %28
  br i1 %219, label %44, label %63

220:                                              ; preds = %482, %44
  %221 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 2
  %222 = load i16, i16* %221, align 8
  %223 = and i16 %222, 30
  %224 = icmp eq i16 %223, 4
  br i1 %224, label %233, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1
  %227 = bitcast %"class.blink::LiveNodeListBase.base"* %226 to %"class.blink::LiveNodeListBase"*
  %228 = load %"class.blink::ContainerNode"*, %"class.blink::ContainerNode"** %19, align 8
  %229 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %228, i64 0, i32 0, i32 3, i32 0, i32 0
  %230 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %229, align 8
  %231 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %230, i64 0, i32 2, i32 0, i32 0
  %232 = load %"class.blink::Document"*, %"class.blink::Document"** %231, align 8
  call void @_ZN5blink8Document31RegisterNodeListWithIdNameCacheEPKNS_16LiveNodeListBaseE(%"class.blink::Document"* %232, %"class.blink::LiveNodeListBase"* %227) #8
  br label %233

233:                                              ; preds = %225, %220
  %234 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 3
  %235 = ptrtoint i8* %9 to i64
  %236 = bitcast %"class.blink::Member.8"* %234 to i64*
  store atomic i64 %235, i64* %236 monotonic, align 8
  %237 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %241, label %239

239:                                              ; preds = %233
  %240 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %9) #8
  br label %241

241:                                              ; preds = %233, %239
  %242 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %16, align 8
  %243 = icmp eq %"class.WTF::StringImpl"** %242, null
  br i1 %243, label %246, label %244, !prof !2

244:                                              ; preds = %241
  %245 = bitcast %"class.WTF::StringImpl"** %242 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %245) #8
  store %"class.WTF::StringImpl"** null, %"class.WTF::StringImpl"*** %16, align 8
  br label %246

246:                                              ; preds = %241, %244
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  br label %485

247:                                              ; preds = %54, %482
  %248 = phi %"class.blink::Member.651"* [ %48, %54 ], [ %483, %482 ]
  %249 = getelementptr inbounds %"class.blink::Member.651", %"class.blink::Member.651"* %248, i64 0, i32 0, i32 0
  %250 = load %"class.blink::HTMLImageElement"*, %"class.blink::HTMLImageElement"** %249, align 8
  %251 = getelementptr inbounds %"class.blink::HTMLImageElement", %"class.blink::HTMLImageElement"* %250, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %252 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %251, align 8
  %253 = icmp eq %"class.blink::ElementData"* %252, null
  br i1 %253, label %363, label %254

254:                                              ; preds = %247
  %255 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 0, i32 3, i32 0, i32 0, i32 0
  %256 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %255, align 8
  %257 = icmp eq %"class.WTF::StringImpl"* %256, null
  br i1 %257, label %307, label %258

258:                                              ; preds = %254
  %259 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 0, i32 0, i32 0, i32 0
  %260 = load i32, i32* %259, align 4
  %261 = and i32 %260, 1
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %270, label %263

263:                                              ; preds = %258
  %264 = bitcast %"class.blink::ElementData"* %252 to %"class.blink::UniqueElementData"*
  %265 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 1, i32 1
  %266 = bitcast %"class.blink::Member.28"* %265 to %"class.blink::Attribute"**
  %267 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %266, align 8
  %268 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %264, i64 0, i32 2, i32 0, i32 0, i32 2
  %269 = load i32, i32* %268, align 4
  br label %275

270:                                              ; preds = %258
  %271 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 1
  %272 = bitcast %"class.blink::ElementData"* %271 to %"class.blink::Attribute"*
  %273 = lshr i32 %260, 1
  %274 = and i32 %273, 268435455
  br label %275

275:                                              ; preds = %270, %263
  %276 = phi %"class.blink::Attribute"* [ %272, %270 ], [ %267, %263 ]
  %277 = phi i32 [ %274, %270 ], [ %269, %263 ]
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %276, i64 %278
  %280 = icmp eq i32 %277, 0
  br i1 %280, label %307, label %281

281:                                              ; preds = %275
  %282 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %56, align 8
  %283 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %282, i64 0, i32 3, i32 0, i32 0, i32 0
  %284 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %282, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %285

285:                                              ; preds = %300, %281
  %286 = phi %"class.blink::Attribute"* [ %276, %281 ], [ %301, %300 ]
  %287 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %286, i64 0, i32 0, i32 0, i32 0
  %288 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %287, align 8
  %289 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %288, %282
  br i1 %289, label %303, label %290

290:                                              ; preds = %285
  %291 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %288, i64 0, i32 3, i32 0, i32 0, i32 0
  %292 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %291, align 8
  %293 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %283, align 8
  %294 = icmp eq %"class.WTF::StringImpl"* %292, %293
  br i1 %294, label %295, label %300

295:                                              ; preds = %290
  %296 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %288, i64 0, i32 4, i32 0, i32 0, i32 0
  %297 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %298 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %284, align 8
  %299 = icmp eq %"class.WTF::StringImpl"* %297, %298
  br i1 %299, label %303, label %300

300:                                              ; preds = %295, %290
  %301 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %286, i64 1
  %302 = icmp eq %"class.blink::Attribute"* %301, %279
  br i1 %302, label %307, label %285

303:                                              ; preds = %295, %285
  %304 = icmp eq %"class.blink::Attribute"* %286, null
  %305 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %286, i64 0, i32 1
  %306 = select i1 %304, %"class.WTF::AtomicString"* %57, %"class.WTF::AtomicString"* %305
  br label %307

307:                                              ; preds = %300, %303, %254, %275
  %308 = phi %"class.WTF::AtomicString"* [ %57, %275 ], [ %57, %254 ], [ %306, %303 ], [ %57, %300 ]
  %309 = getelementptr inbounds %"class.blink::HTMLImageElement", %"class.blink::HTMLImageElement"* %250, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %310 = load i32, i32* %309, align 8
  %311 = and i32 %310, 1048576
  %312 = icmp eq i32 %311, 0
  %313 = or i1 %312, %253
  br i1 %313, label %363, label %314

314:                                              ; preds = %307
  %315 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 0, i32 0, i32 0, i32 0
  %316 = load i32, i32* %315, align 4
  %317 = and i32 %316, 1
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %326, label %319

319:                                              ; preds = %314
  %320 = bitcast %"class.blink::ElementData"* %252 to %"class.blink::UniqueElementData"*
  %321 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 1, i32 1
  %322 = bitcast %"class.blink::Member.28"* %321 to %"class.blink::Attribute"**
  %323 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %322, align 8
  %324 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %320, i64 0, i32 2, i32 0, i32 0, i32 2
  %325 = load i32, i32* %324, align 4
  br label %331

326:                                              ; preds = %314
  %327 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %252, i64 1
  %328 = bitcast %"class.blink::ElementData"* %327 to %"class.blink::Attribute"*
  %329 = lshr i32 %316, 1
  %330 = and i32 %329, 268435455
  br label %331

331:                                              ; preds = %326, %319
  %332 = phi %"class.blink::Attribute"* [ %328, %326 ], [ %323, %319 ]
  %333 = phi i32 [ %330, %326 ], [ %325, %319 ]
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %332, i64 %334
  %336 = icmp eq i32 %333, 0
  br i1 %336, label %363, label %337

337:                                              ; preds = %331
  %338 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %59, align 8
  %339 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %338, i64 0, i32 3, i32 0, i32 0, i32 0
  %340 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %338, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %341

341:                                              ; preds = %356, %337
  %342 = phi %"class.blink::Attribute"* [ %332, %337 ], [ %357, %356 ]
  %343 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %342, i64 0, i32 0, i32 0, i32 0
  %344 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %343, align 8
  %345 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %344, %338
  br i1 %345, label %359, label %346

346:                                              ; preds = %341
  %347 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %344, i64 0, i32 3, i32 0, i32 0, i32 0
  %348 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %347, align 8
  %349 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %339, align 8
  %350 = icmp eq %"class.WTF::StringImpl"* %348, %349
  br i1 %350, label %351, label %356

351:                                              ; preds = %346
  %352 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %344, i64 0, i32 4, i32 0, i32 0, i32 0
  %353 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %352, align 8
  %354 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %340, align 8
  %355 = icmp eq %"class.WTF::StringImpl"* %353, %354
  br i1 %355, label %359, label %356

356:                                              ; preds = %351, %346
  %357 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %342, i64 1
  %358 = icmp eq %"class.blink::Attribute"* %357, %335
  br i1 %358, label %363, label %341

359:                                              ; preds = %351, %341
  %360 = icmp eq %"class.blink::Attribute"* %342, null
  %361 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %342, i64 0, i32 1
  %362 = select i1 %360, %"class.WTF::AtomicString"* %57, %"class.WTF::AtomicString"* %361
  br label %363

363:                                              ; preds = %356, %247, %359, %307, %331
  %364 = phi %"class.WTF::AtomicString"* [ %308, %331 ], [ %308, %307 ], [ %308, %359 ], [ %57, %247 ], [ %308, %356 ]
  %365 = phi %"class.WTF::AtomicString"* [ %57, %331 ], [ %57, %307 ], [ %362, %359 ], [ %57, %247 ], [ %57, %356 ]
  %366 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %364, i64 0, i32 0, i32 0, i32 0
  %367 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %366, align 8
  %368 = icmp eq %"class.WTF::StringImpl"* %367, null
  br i1 %368, label %422, label %369

369:                                              ; preds = %363
  %370 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %367, i64 0, i32 1
  %371 = load i32, i32* %370, align 4
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %422, label %373

373:                                              ; preds = %369
  %374 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %16, align 8
  %375 = icmp eq %"class.WTF::StringImpl"** %374, null
  br i1 %375, label %419, label %376

376:                                              ; preds = %373
  %377 = load i32, i32* %17, align 8
  %378 = add i32 %377, -1
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %367, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %381 = load atomic i32, i32* %380 monotonic, align 4
  %382 = lshr i32 %381, 8
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %386

384:                                              ; preds = %376
  %385 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %367) #8
  br label %386

386:                                              ; preds = %384, %376
  %387 = phi i32 [ %385, %384 ], [ %382, %376 ]
  %388 = and i32 %387, %378
  %389 = zext i32 %388 to i64
  %390 = xor i32 %387, -1
  %391 = lshr i32 %387, 23
  %392 = add i32 %391, %390
  %393 = shl i32 %392, 12
  %394 = xor i32 %393, %392
  %395 = lshr i32 %394, 7
  %396 = xor i32 %395, %394
  %397 = shl i32 %396, 2
  %398 = xor i32 %397, %396
  %399 = lshr i32 %398, 20
  %400 = xor i32 %399, %398
  %401 = or i32 %400, 1
  %402 = zext i32 %401 to i64
  br label %403

403:                                              ; preds = %411, %386
  %404 = phi i64 [ 0, %386 ], [ %413, %411 ]
  %405 = phi i64 [ %389, %386 ], [ %415, %411 ]
  %406 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %374, i64 %405
  %407 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %406, align 8
  %408 = ptrtoint %"class.WTF::StringImpl"* %407 to i64
  switch i64 %408, label %409 [
    i64 0, label %419
    i64 -1, label %411
  ]

409:                                              ; preds = %403
  %410 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %407, %"class.WTF::StringImpl"* nonnull %367) #8
  br i1 %410, label %416, label %411

411:                                              ; preds = %409, %403
  %412 = icmp eq i64 %404, 0
  %413 = select i1 %412, i64 %402, i64 %404
  %414 = add i64 %413, %405
  %415 = and i64 %414, %379
  br label %403

416:                                              ; preds = %409
  %417 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %374, i64 %405
  %418 = icmp eq %"class.WTF::StringImpl"** %417, null
  br i1 %418, label %419, label %422

419:                                              ; preds = %403, %416, %373
  %420 = load %"class.blink::HTMLImageElement"*, %"class.blink::HTMLImageElement"** %249, align 8
  %421 = getelementptr inbounds %"class.blink::HTMLImageElement", %"class.blink::HTMLImageElement"* %420, i64 0, i32 0, i32 0
  call void @_ZN5blink14HTMLCollection14NamedItemCache15AddElementToMapERNS_11HeapHashMapIPN3WTF10StringImplENS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEENS3_10StringHashENS3_10HashTraitsIS5_EENSD_ISB_EEEERKNS3_12AtomicStringEPS8_(%"class.blink::HeapHashMap"* dereferenceable(24) %60, %"class.WTF::AtomicString"* dereferenceable(8) %364, %"class.blink::Element"* %421) #8
  br label %422

422:                                              ; preds = %416, %363, %369, %419
  %423 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %365, i64 0, i32 0, i32 0, i32 0
  %424 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %423, align 8
  %425 = icmp eq %"class.WTF::StringImpl"* %424, null
  br i1 %425, label %482, label %426

426:                                              ; preds = %422
  %427 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %424, i64 0, i32 1
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %482, label %430

430:                                              ; preds = %426
  %431 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %366, align 8
  %432 = icmp eq %"class.WTF::StringImpl"* %431, %424
  br i1 %432, label %482, label %433

433:                                              ; preds = %430
  %434 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %16, align 8
  %435 = icmp eq %"class.WTF::StringImpl"** %434, null
  br i1 %435, label %479, label %436

436:                                              ; preds = %433
  %437 = load i32, i32* %17, align 8
  %438 = add i32 %437, -1
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %424, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %441 = load atomic i32, i32* %440 monotonic, align 4
  %442 = lshr i32 %441, 8
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %446

444:                                              ; preds = %436
  %445 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %424) #8
  br label %446

446:                                              ; preds = %444, %436
  %447 = phi i32 [ %445, %444 ], [ %442, %436 ]
  %448 = and i32 %447, %438
  %449 = zext i32 %448 to i64
  %450 = xor i32 %447, -1
  %451 = lshr i32 %447, 23
  %452 = add i32 %451, %450
  %453 = shl i32 %452, 12
  %454 = xor i32 %453, %452
  %455 = lshr i32 %454, 7
  %456 = xor i32 %455, %454
  %457 = shl i32 %456, 2
  %458 = xor i32 %457, %456
  %459 = lshr i32 %458, 20
  %460 = xor i32 %459, %458
  %461 = or i32 %460, 1
  %462 = zext i32 %461 to i64
  br label %463

463:                                              ; preds = %471, %446
  %464 = phi i64 [ 0, %446 ], [ %473, %471 ]
  %465 = phi i64 [ %449, %446 ], [ %475, %471 ]
  %466 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %434, i64 %465
  %467 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %466, align 8
  %468 = ptrtoint %"class.WTF::StringImpl"* %467 to i64
  switch i64 %468, label %469 [
    i64 0, label %479
    i64 -1, label %471
  ]

469:                                              ; preds = %463
  %470 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %467, %"class.WTF::StringImpl"* nonnull %424) #8
  br i1 %470, label %476, label %471

471:                                              ; preds = %469, %463
  %472 = icmp eq i64 %464, 0
  %473 = select i1 %472, i64 %462, i64 %464
  %474 = add i64 %473, %465
  %475 = and i64 %474, %439
  br label %463

476:                                              ; preds = %469
  %477 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %434, i64 %465
  %478 = icmp eq %"class.WTF::StringImpl"** %477, null
  br i1 %478, label %479, label %482

479:                                              ; preds = %463, %476, %433
  %480 = load %"class.blink::HTMLImageElement"*, %"class.blink::HTMLImageElement"** %249, align 8
  %481 = getelementptr inbounds %"class.blink::HTMLImageElement", %"class.blink::HTMLImageElement"* %480, i64 0, i32 0, i32 0
  call void @_ZN5blink14HTMLCollection14NamedItemCache15AddElementToMapERNS_11HeapHashMapIPN3WTF10StringImplENS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEENS3_10StringHashENS3_10HashTraitsIS5_EENSD_ISB_EEEERKNS3_12AtomicStringEPS8_(%"class.blink::HeapHashMap"* dereferenceable(24) %62, %"class.WTF::AtomicString"* dereferenceable(8) %365, %"class.blink::Element"* %481) #8
  br label %482

482:                                              ; preds = %476, %430, %422, %426, %479
  %483 = getelementptr inbounds %"class.blink::Member.651", %"class.blink::Member.651"* %248, i64 1
  %484 = icmp eq %"class.blink::Member.651"* %483, %52
  br i1 %484, label %220, label %247

485:                                              ; preds = %1, %246
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::V8UnionElementOrRadioNodeList"* @_ZN5blink26HTMLFormControlsCollection11namedGetterERKN3WTF12AtomicStringE(%"class.blink::HTMLFormControlsCollection"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::HeapVector", align 8
  %4 = bitcast %"class.blink::HeapVector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #8
  %6 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  call void @_ZNK5blink14HTMLCollection10NamedItemsERKN3WTF12AtomicStringERNS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEE(%"class.blink::HTMLCollection"* %6, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.blink::HeapVector"* nonnull dereferenceable(16) %3) #8
  %7 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %3, i64 0, i32 0
  %8 = load i32, i32* %5, align 4
  switch i32 %8, label %49 [
    i32 0, label %67
    i32 1, label %9
  ]

9:                                                ; preds = %2
  %10 = call dereferenceable(8) %"class.blink::Member.19"* @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %7, i32 0) #8
  %11 = getelementptr inbounds %"class.blink::Member.19", %"class.blink::Member.19"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.blink::Element"*, %"class.blink::Element"** %11, align 8
  %13 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kImgTagE, align 8
  %14 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %12, i64 0, i32 0, i32 0
  %15 = icmp eq %"class.blink::Element"* %12, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %12, i64 0, i32 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %18, 48
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %13, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %14, i64 1, i32 2
  %25 = bitcast %"class.blink::Member.0"* %24 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %26 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %26, i64 0, i32 3, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %23, i64 0, i32 3, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %28, %30
  br i1 %31, label %67, label %32

32:                                               ; preds = %9, %16, %21
  %33 = call dereferenceable(8) %"class.blink::Member.19"* @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %7, i32 0) #8
  %34 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64 32) #8
  %35 = bitcast i8* %34 to %"class.blink::V8UnionElementOrRadioNodeList"*
  %36 = bitcast %"class.blink::Member.19"* %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast i8* %34 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink29V8UnionElementOrRadioNodeListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %38, align 8
  %39 = getelementptr inbounds i8, i8* %34, i64 8
  %40 = bitcast i8* %39 to i32*
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds i8, i8* %34, i64 16
  %42 = bitcast i8* %41 to i64*
  store i64 %37, i64* %42, align 8
  %43 = getelementptr inbounds i8, i8* %34, i64 24
  %44 = bitcast i8* %43 to %"class.blink::RadioNodeList"**
  store %"class.blink::RadioNodeList"* null, %"class.blink::RadioNodeList"** %44, align 8
  %45 = getelementptr inbounds i8, i8* %34, i64 -4
  %46 = bitcast i8* %45 to i16*
  %47 = load atomic i16, i16* %46 monotonic, align 2
  %48 = or i16 %47, 1
  store atomic i16 %48, i16* %46 release, align 2
  br label %67

49:                                               ; preds = %2
  %50 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %51 = load %"class.blink::ContainerNode"*, %"class.blink::ContainerNode"** %50, align 8
  %52 = call %"class.blink::RadioNodeList"* @_ZN5blink13ContainerNode16GetRadioNodeListERKN3WTF12AtomicStringEb(%"class.blink::ContainerNode"* %51, %"class.WTF::AtomicString"* dereferenceable(8) %1, i1 zeroext false) #8
  %53 = ptrtoint %"class.blink::RadioNodeList"* %52 to i64
  %54 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64 32) #8
  %55 = bitcast i8* %54 to %"class.blink::V8UnionElementOrRadioNodeList"*
  %56 = bitcast i8* %54 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink29V8UnionElementOrRadioNodeListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds i8, i8* %54, i64 8
  %58 = bitcast i8* %57 to i32*
  store i32 1, i32* %58, align 8
  %59 = getelementptr inbounds i8, i8* %54, i64 16
  %60 = bitcast i8* %59 to %"class.blink::Element"**
  store %"class.blink::Element"* null, %"class.blink::Element"** %60, align 8
  %61 = getelementptr inbounds i8, i8* %54, i64 24
  %62 = bitcast i8* %61 to i64*
  store i64 %53, i64* %62, align 8
  %63 = getelementptr inbounds i8, i8* %54, i64 -4
  %64 = bitcast i8* %63 to i16*
  %65 = load atomic i16, i16* %64 monotonic, align 2
  %66 = or i16 %65, 1
  store atomic i16 %66, i16* %64 release, align 2
  br label %67

67:                                               ; preds = %2, %21, %49, %32
  %68 = phi %"class.blink::V8UnionElementOrRadioNodeList"* [ %35, %32 ], [ %55, %49 ], [ null, %2 ], [ null, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8
  ret %"class.blink::V8UnionElementOrRadioNodeList"* %68
}

declare void @_ZNK5blink14HTMLCollection10NamedItemsERKN3WTF12AtomicStringERNS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEE(%"class.blink::HTMLCollection"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::HeapVector"* dereferenceable(16)) local_unnamed_addr #1

declare %"class.blink::RadioNodeList"* @_ZN5blink13ContainerNode16GetRadioNodeListERKN3WTF12AtomicStringEb(%"class.blink::ContainerNode"*, %"class.WTF::AtomicString"* dereferenceable(8), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26HTMLFormControlsCollection22SupportedPropertyNamesERN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::HTMLFormControlsCollection"*, %"class.WTF::Vector.728"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::HashSet.733", align 8
  %4 = bitcast %"class.WTF::HashSet.733"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"class.WTF::HashSet.733", %"class.WTF::HashSet.733"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.WTF::HashSet.733", %"class.WTF::HashSet.733"* %3, i64 0, i32 0, i32 1
  %7 = bitcast %"class.WTF::HashSet.733"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 20, i1 false) #8
  %8 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  %9 = tail call i32 @_ZNK5blink14HTMLCollection6lengthEv(%"class.blink::HTMLCollection"* %8) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %55, label %11

11:                                               ; preds = %2
  %12 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %13 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %12, i64 0, i32 0, i32 0
  %14 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %15 = getelementptr inbounds %"class.WTF::HashSet.733", %"class.WTF::HashSet.733"* %3, i64 0, i32 0
  %16 = getelementptr inbounds %"class.WTF::Vector.728", %"class.WTF::Vector.728"* %1, i64 0, i32 0, i32 0, i32 2
  %17 = getelementptr inbounds %"class.WTF::Vector.728", %"class.WTF::Vector.728"* %1, i64 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.WTF::Vector.728", %"class.WTF::Vector.728"* %1, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kNameAttrE, align 8
  %20 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %19, i64 0, i32 0, i32 0
  br label %56

21:                                               ; preds = %262
  %22 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %5, align 8
  %23 = bitcast %"class.WTF::AtomicString"* %22 to i8*
  %24 = icmp eq %"class.WTF::AtomicString"* %22, null
  br i1 %24, label %55, label %25, !prof !2

25:                                               ; preds = %21
  %26 = load i32, i32* %6, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %54, label %28

28:                                               ; preds = %25
  %29 = zext i32 %26 to i64
  br label %30

30:                                               ; preds = %51, %28
  %31 = phi i64 [ 0, %28 ], [ %52, %51 ]
  %32 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %22, i64 %31
  %33 = bitcast %"class.WTF::AtomicString"* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = bitcast i8* %34 to %"class.WTF::StringImpl"*
  %36 = ptrtoint i8* %34 to i64
  switch i64 %36, label %37 [
    i64 -1, label %51
    i64 0, label %51
  ]

37:                                               ; preds = %30
  %38 = getelementptr inbounds i8, i8* %34, i64 8
  %39 = bitcast i8* %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = bitcast i8* %34 to i32*
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %37
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %37
  %48 = phi i32 [ %46, %45 ], [ %44, %37 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #8
  br label %51

51:                                               ; preds = %50, %47, %30, %30
  %52 = add nuw nsw i64 %31, 1
  %53 = icmp eq i64 %52, %29
  br i1 %53, label %54, label %30

54:                                               ; preds = %51, %25
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %23) #8
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %5, align 8
  br label %55

55:                                               ; preds = %2, %21, %54
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  ret void

56:                                               ; preds = %262, %11
  %57 = phi i32 [ 0, %11 ], [ %263, %262 ]
  %58 = call %"class.blink::Element"* @_ZNK5blink14HTMLCollection4itemEj(%"class.blink::HTMLCollection"* %8, i32 %57) #8
  %59 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %58, i64 0, i32 3, i32 0, i32 0
  %60 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %59, align 8
  %61 = icmp eq %"class.blink::ElementData"* %60, null
  br i1 %61, label %115, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %60, i64 0, i32 3, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %115, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %60, i64 0, i32 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %78, label %71

71:                                               ; preds = %66
  %72 = bitcast %"class.blink::ElementData"* %60 to %"class.blink::UniqueElementData"*
  %73 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %60, i64 1, i32 1
  %74 = bitcast %"class.blink::Member.28"* %73 to %"class.blink::Attribute"**
  %75 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %74, align 8
  %76 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %72, i64 0, i32 2, i32 0, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  br label %83

78:                                               ; preds = %66
  %79 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %60, i64 1
  %80 = bitcast %"class.blink::ElementData"* %79 to %"class.blink::Attribute"*
  %81 = lshr i32 %68, 1
  %82 = and i32 %81, 268435455
  br label %83

83:                                               ; preds = %78, %71
  %84 = phi %"class.blink::Attribute"* [ %80, %78 ], [ %75, %71 ]
  %85 = phi i32 [ %82, %78 ], [ %77, %71 ]
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %84, i64 %86
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %115, label %89

89:                                               ; preds = %83
  %90 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %13, align 8
  %91 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %90, i64 0, i32 3, i32 0, i32 0, i32 0
  %92 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %90, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %93

93:                                               ; preds = %108, %89
  %94 = phi %"class.blink::Attribute"* [ %84, %89 ], [ %109, %108 ]
  %95 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %95, align 8
  %97 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %96, %90
  br i1 %97, label %111, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %96, i64 0, i32 3, i32 0, i32 0, i32 0
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  %101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  %102 = icmp eq %"class.WTF::StringImpl"* %100, %101
  br i1 %102, label %103, label %108

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %96, i64 0, i32 4, i32 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, %106
  br i1 %107, label %111, label %108

108:                                              ; preds = %103, %98
  %109 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %94, i64 1
  %110 = icmp eq %"class.blink::Attribute"* %109, %87
  br i1 %110, label %115, label %93

111:                                              ; preds = %103, %93
  %112 = icmp eq %"class.blink::Attribute"* %94, null
  %113 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %94, i64 0, i32 1
  %114 = select i1 %112, %"class.WTF::AtomicString"* %14, %"class.WTF::AtomicString"* %113
  br label %115

115:                                              ; preds = %108, %111, %56, %62, %83
  %116 = phi %"class.WTF::AtomicString"* [ %14, %83 ], [ %14, %62 ], [ %14, %56 ], [ %114, %111 ], [ %14, %108 ]
  %117 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %117, align 8
  %119 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %119, label %160, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %160, label %124

124:                                              ; preds = %120
  %125 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.734"* nonnull %15, %"class.WTF::AtomicString"* dereferenceable(8) %116, %"class.WTF::AtomicString"* dereferenceable(8) %116) #8
  %126 = extractvalue { %"class.WTF::AtomicString"*, i8 } %125, 1
  %127 = and i8 %126, 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %160, label %129

129:                                              ; preds = %124
  %130 = load i32, i32* %16, align 4
  %131 = load i32, i32* %17, align 8
  %132 = icmp eq i32 %130, %131
  br i1 %132, label %159, label %133, !prof !3

133:                                              ; preds = %129
  %134 = load %"class.WTF::String"*, %"class.WTF::String"** %18, align 8
  %135 = zext i32 %130 to i64
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %117, align 8
  %137 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %134, i64 %135, i32 0, i32 0
  store %"class.WTF::StringImpl"* %136, %"class.WTF::StringImpl"** %137, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %138, label %156, label %139

139:                                              ; preds = %133
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = and i32 %141, 2
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %156

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i33
  %148 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %147, i33 1) #8
  %149 = extractvalue { i33, i1 } %148, 1
  %150 = extractvalue { i33, i1 } %148, 0
  %151 = icmp slt i33 %150, 0
  %152 = or i1 %149, %151
  br i1 %152, label %153, label %154, !prof !3

153:                                              ; preds = %144
  call void @llvm.trap() #8
  unreachable

154:                                              ; preds = %144
  %155 = trunc i33 %150 to i32
  store i32 %155, i32* %145, align 4
  br label %156

156:                                              ; preds = %154, %139, %133
  %157 = load i32, i32* %16, align 4
  %158 = add i32 %157, 1
  store i32 %158, i32* %16, align 4
  br label %160

159:                                              ; preds = %129
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_(%"class.WTF::Vector.728"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %116) #8
  br label %160

160:                                              ; preds = %115, %159, %156, %124, %120
  %161 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %58, i64 0, i32 0, i32 0, i32 1
  %162 = load i32, i32* %161, align 8
  %163 = and i32 %162, 1048576
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %217, label %165

165:                                              ; preds = %160
  %166 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %59, align 8
  %167 = icmp eq %"class.blink::ElementData"* %166, null
  br i1 %167, label %217, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %166, i64 0, i32 0, i32 0, i32 0
  %170 = load i32, i32* %169, align 4
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %180, label %173

173:                                              ; preds = %168
  %174 = bitcast %"class.blink::ElementData"* %166 to %"class.blink::UniqueElementData"*
  %175 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %166, i64 1, i32 1
  %176 = bitcast %"class.blink::Member.28"* %175 to %"class.blink::Attribute"**
  %177 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %176, align 8
  %178 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %174, i64 0, i32 2, i32 0, i32 0, i32 2
  %179 = load i32, i32* %178, align 4
  br label %185

180:                                              ; preds = %168
  %181 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %166, i64 1
  %182 = bitcast %"class.blink::ElementData"* %181 to %"class.blink::Attribute"*
  %183 = lshr i32 %170, 1
  %184 = and i32 %183, 268435455
  br label %185

185:                                              ; preds = %180, %173
  %186 = phi %"class.blink::Attribute"* [ %182, %180 ], [ %177, %173 ]
  %187 = phi i32 [ %184, %180 ], [ %179, %173 ]
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %186, i64 %188
  %190 = icmp eq i32 %187, 0
  br i1 %190, label %217, label %191

191:                                              ; preds = %185
  %192 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %20, align 8
  %193 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %192, i64 0, i32 3, i32 0, i32 0, i32 0
  %194 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %192, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %195

195:                                              ; preds = %210, %191
  %196 = phi %"class.blink::Attribute"* [ %186, %191 ], [ %211, %210 ]
  %197 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %196, i64 0, i32 0, i32 0, i32 0
  %198 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %197, align 8
  %199 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %198, %192
  br i1 %199, label %213, label %200

200:                                              ; preds = %195
  %201 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %198, i64 0, i32 3, i32 0, i32 0, i32 0
  %202 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %201, align 8
  %203 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %193, align 8
  %204 = icmp eq %"class.WTF::StringImpl"* %202, %203
  br i1 %204, label %205, label %210

205:                                              ; preds = %200
  %206 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %198, i64 0, i32 4, i32 0, i32 0, i32 0
  %207 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %206, align 8
  %208 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %194, align 8
  %209 = icmp eq %"class.WTF::StringImpl"* %207, %208
  br i1 %209, label %213, label %210

210:                                              ; preds = %205, %200
  %211 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %196, i64 1
  %212 = icmp eq %"class.blink::Attribute"* %211, %189
  br i1 %212, label %217, label %195

213:                                              ; preds = %205, %195
  %214 = icmp eq %"class.blink::Attribute"* %196, null
  %215 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %196, i64 0, i32 1
  %216 = select i1 %214, %"class.WTF::AtomicString"* %14, %"class.WTF::AtomicString"* %215
  br label %217

217:                                              ; preds = %210, %213, %160, %165, %185
  %218 = phi %"class.WTF::AtomicString"* [ %14, %185 ], [ %14, %165 ], [ %14, %160 ], [ %216, %213 ], [ %14, %210 ]
  %219 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %218, i64 0, i32 0, i32 0, i32 0
  %220 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %219, align 8
  %221 = icmp eq %"class.WTF::StringImpl"* %220, null
  br i1 %221, label %262, label %222

222:                                              ; preds = %217
  %223 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %220, i64 0, i32 1
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %262, label %226

226:                                              ; preds = %222
  %227 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.734"* nonnull %15, %"class.WTF::AtomicString"* dereferenceable(8) %218, %"class.WTF::AtomicString"* dereferenceable(8) %218) #8
  %228 = extractvalue { %"class.WTF::AtomicString"*, i8 } %227, 1
  %229 = and i8 %228, 1
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %262, label %231

231:                                              ; preds = %226
  %232 = load i32, i32* %16, align 4
  %233 = load i32, i32* %17, align 8
  %234 = icmp eq i32 %232, %233
  br i1 %234, label %261, label %235, !prof !3

235:                                              ; preds = %231
  %236 = load %"class.WTF::String"*, %"class.WTF::String"** %18, align 8
  %237 = zext i32 %232 to i64
  %238 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %219, align 8
  %239 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %236, i64 %237, i32 0, i32 0
  store %"class.WTF::StringImpl"* %238, %"class.WTF::StringImpl"** %239, align 8
  %240 = icmp eq %"class.WTF::StringImpl"* %238, null
  br i1 %240, label %258, label %241

241:                                              ; preds = %235
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %238, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %243 = load atomic i32, i32* %242 monotonic, align 4
  %244 = and i32 %243, 2
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %258

246:                                              ; preds = %241
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %238, i64 0, i32 0
  %248 = load i32, i32* %247, align 4
  %249 = zext i32 %248 to i33
  %250 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %249, i33 1) #8
  %251 = extractvalue { i33, i1 } %250, 1
  %252 = extractvalue { i33, i1 } %250, 0
  %253 = icmp slt i33 %252, 0
  %254 = or i1 %251, %253
  br i1 %254, label %255, label %256, !prof !3

255:                                              ; preds = %246
  call void @llvm.trap() #8
  unreachable

256:                                              ; preds = %246
  %257 = trunc i33 %252 to i32
  store i32 %257, i32* %247, align 4
  br label %258

258:                                              ; preds = %256, %241, %235
  %259 = load i32, i32* %16, align 4
  %260 = add i32 %259, 1
  store i32 %260, i32* %16, align 4
  br label %262

261:                                              ; preds = %231
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_(%"class.WTF::Vector.728"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %218) #8
  br label %262

262:                                              ; preds = %217, %261, %258, %226, %222
  %263 = add nuw i32 %57, 1
  %264 = icmp eq i32 %263, %9
  br i1 %264, label %21, label %56
}

declare i32 @_ZNK5blink14HTMLCollection6lengthEv(%"class.blink::HTMLCollection"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink26HTMLFormControlsCollection5TraceEPNS_7VisitorE(%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member.38"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11HTMLElementEE5TraceEPNS_7VisitorEPKv) #8
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 0, i32 0
  tail call void @_ZNK5blink14HTMLCollection5TraceEPNS_7VisitorE(%"class.blink::HTMLCollection"* %14, %"class.blink::Visitor"* %1) #8
  ret void
}

declare void @_ZNK5blink14HTMLCollection5TraceEPNS_7VisitorE(%"class.blink::HTMLCollection"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_NK5blink26HTMLFormControlsCollection5TraceEPNS_7VisitorE(%"class.blink::HTMLFormControlsCollection"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLFormControlsCollection", %"class.blink::HTMLFormControlsCollection"* %0, i64 -1, i32 1
  %4 = getelementptr inbounds %"class.blink::Member.38", %"class.blink::Member.38"* %3, i64 12
  %5 = bitcast %"class.blink::Member.38"* %4 to i64*
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = inttoptr i64 %6 to i8*
  %10 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, i64 5
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %12, align 8
  tail call void %13(%"class.blink::Visitor"* %1, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11HTMLElementEE5TraceEPNS_7VisitorEPKv) #8
  br label %14

14:                                               ; preds = %2, %8
  %15 = bitcast %"class.blink::Member.38"* %3 to %"class.blink::HTMLCollection"*
  tail call void @_ZNK5blink14HTMLCollection5TraceEPNS_7VisitorE(%"class.blink::HTMLCollection"* %15, %"class.blink::Visitor"* %1) #8
  ret void
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink26HTMLFormControlsCollection18GetWrapperTypeInfoEv(%"class.blink::HTMLFormControlsCollection"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink26HTMLFormControlsCollection18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14HTMLCollection14NamedItemCache15AddElementToMapERNS_11HeapHashMapIPN3WTF10StringImplENS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEENS3_10StringHashENS3_10HashTraitsIS5_EENSD_ISB_EEEERKNS3_12AtomicStringEPS8_(%"class.blink::HeapHashMap"* dereferenceable(24), %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::Element"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.blink::Element"*, align 8
  %5 = alloca %"class.WTF::StringImpl"*, align 8
  %6 = alloca %"class.blink::HeapVector"*, align 8
  store %"class.blink::Element"* %2, %"class.blink::Element"** %4, align 8
  %7 = bitcast %"class.WTF::StringImpl"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.WTF::StringImpl"** %5 to i64*
  store i64 %9, i64* %10, align 8
  %11 = bitcast %"class.blink::HeapVector"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  %12 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %13 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %17 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %16, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %18

18:                                               ; preds = %15, %3
  %19 = phi i32 [ %13, %3 ], [ %17, %15 ]
  %20 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %12, i64 0, i32 19, i64 0
  %21 = bitcast %"class.blink::BaseArena"** %20 to %"class.blink::NormalPageArena"**
  %22 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %22, i64 0, i32 4
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %24, 24
  br i1 %25, label %56, label %26, !prof !3

26:                                               ; preds = %18
  %27 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %22, i64 0, i32 3
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 24
  store i8* %29, i8** %27, align 8
  %30 = add i64 %24, -24
  store i64 %30, i64* %23, align 8
  %31 = bitcast i8* %28 to i32*
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %28, i64 4
  %33 = bitcast i8* %32 to i16*
  %34 = trunc i32 %19 to i16
  %35 = shl i16 %34, 2
  store atomic i16 %35, i16* %33 monotonic, align 2
  %36 = getelementptr inbounds i8, i8* %28, i64 6
  %37 = bitcast i8* %36 to i16*
  store i16 12, i16* %37, align 2
  %38 = ptrtoint i8* %28 to i64
  %39 = and i64 %38, -131072
  %40 = inttoptr i64 %39 to i8*
  %41 = getelementptr inbounds i8, i8* %40, i64 4400
  %42 = bitcast i8* %41 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %43 = bitcast i8* %41 to i64*
  %44 = load i64, i64* %43, align 16
  %45 = sub i64 %38, %44
  %46 = lshr i64 %45, 3
  %47 = lshr i64 %45, 6
  %48 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %42, i64 0, i32 0, i32 1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = trunc i64 %46 to i32
  %51 = and i32 %50, 7
  %52 = shl i32 1, %51
  %53 = trunc i32 %52 to i8
  %54 = or i8 %49, %53
  store atomic i8 %54, i8* %48 release, align 1
  %55 = getelementptr inbounds i8, i8* %28, i64 8
  br label %59

56:                                               ; preds = %18
  %57 = zext i32 %19 to i64
  %58 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %22, i64 24, i64 %57) #8
  br label %59

59:                                               ; preds = %26, %56
  %60 = phi i8* [ %55, %26 ], [ %58, %56 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 -4
  %62 = bitcast i8* %61 to i16*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 16, i1 false) #8
  %63 = load atomic i16, i16* %62 monotonic, align 2
  %64 = or i16 %63, 1
  store atomic i16 %64, i16* %62 release, align 2
  %65 = bitcast %"class.blink::HeapVector"** %6 to i8**
  store i8* %60, i8** %65, align 8
  %66 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0
  %67 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6insertINS_17HashMapTranslatorISI_SD_SJ_EES2_PS9_EENS_18HashTableAddResultISK_SB_EEOT0_OT1_(%"class.WTF::HashTable"* %66, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %5, %"class.blink::HeapVector"** nonnull dereferenceable(8) %6) #8
  %68 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %67, 0
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1, i32 0, i32 0
  %70 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %69, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %71 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %70, i64 0, i32 0, i32 0, i32 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %70, i64 0, i32 0, i32 0, i32 0, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %72, %74
  br i1 %75, label %92, label %76, !prof !3

76:                                               ; preds = %59
  %77 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %70, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = load %"class.blink::Member.19"*, %"class.blink::Member.19"** %77, align 8
  %79 = zext i32 %72 to i64
  %80 = getelementptr inbounds %"class.blink::Member.19", %"class.blink::Member.19"* %78, i64 %79
  %81 = bitcast %"class.blink::Element"** %4 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.blink::Member.19"* %80 to i64*
  store atomic i64 %82, i64* %83 monotonic, align 8
  %84 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %89, label %86

86:                                               ; preds = %76
  %87 = inttoptr i64 %82 to i8*
  %88 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %87) #8
  br label %89

89:                                               ; preds = %86, %76
  %90 = load i32, i32* %71, align 4
  %91 = add i32 %90, 1
  store i32 %91, i32* %71, align 4
  br label %94

92:                                               ; preds = %59
  %93 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %70, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector"* %93, %"class.blink::Element"** nonnull dereferenceable(8) %4) #8
  br label %94

94:                                               ; preds = %89, %92
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6insertINS_17HashMapTranslatorISI_SD_SJ_EES2_PS9_EENS_18HashTableAddResultISK_SB_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"** dereferenceable(8), %"class.blink::HeapVector"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6ExpandEPSB_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %10
  %22 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %16) #8
  br label %23

23:                                               ; preds = %10, %21
  %24 = phi i32 [ %22, %21 ], [ %19, %10 ]
  %25 = and i32 %24, %14
  %26 = zext i32 %25 to i64
  %27 = xor i32 %24, -1
  %28 = lshr i32 %24, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %51, %23
  %41 = phi i64 [ 0, %23 ], [ %54, %51 ]
  %42 = phi i64 [ %26, %23 ], [ %56, %51 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %23 ], [ %52, %51 ]
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %42
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %44, i64 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = ptrtoint %"class.WTF::StringImpl"* %46 to i64
  switch i64 %47, label %48 [
    i64 0, label %57
    i64 -1, label %51
  ]

48:                                               ; preds = %40
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %50 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %46, %"class.WTF::StringImpl"* %49) #8
  br i1 %50, label %129, label %51

51:                                               ; preds = %40, %48
  %52 = phi %"struct.WTF::KeyValuePair"* [ %43, %48 ], [ %44, %40 ]
  %53 = icmp eq i64 %41, 0
  %54 = select i1 %53, i64 %39, i64 %41
  %55 = add i64 %54, %42
  %56 = and i64 %55, %15
  br label %40

57:                                               ; preds = %40
  %58 = icmp eq %"struct.WTF::KeyValuePair"* %43, null
  br i1 %58, label %67, label %59

59:                                               ; preds = %57
  %60 = bitcast %"struct.WTF::KeyValuePair"* %43 to i8*
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* nonnull %60, i64 16) #8
  %61 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %62 = load i32, i32* %61, align 8
  %63 = add i32 %62, 2147483647
  %64 = and i32 %63, 2147483647
  %65 = and i32 %62, -2147483648
  %66 = or i32 %64, %65
  store i32 %66, i32* %61, align 8
  br label %67

67:                                               ; preds = %57, %59
  %68 = phi %"struct.WTF::KeyValuePair"* [ %43, %59 ], [ %44, %57 ]
  %69 = bitcast %"class.WTF::StringImpl"** %1 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"struct.WTF::KeyValuePair"* %68 to i64*
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1
  %73 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %2, align 8
  %74 = ptrtoint %"class.blink::HeapVector"* %73 to i64
  %75 = bitcast %"class.blink::Member.15"* %72 to i64*
  store atomic i64 %74, i64* %75 monotonic, align 8
  %76 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %67
  %79 = bitcast %"class.blink::HeapVector"* %73 to i8*
  %80 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %79) #8
  br label %81

81:                                               ; preds = %67, %78
  %82 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %117, label %84

84:                                               ; preds = %81
  %85 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %86 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %85, i64 0, i32 1
  %87 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %86) #8
  %88 = icmp eq i8* %87, null
  br i1 %88, label %89, label %91, !prof !3

89:                                               ; preds = %84
  %90 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %86, i8* %90) #8
  br label %91

91:                                               ; preds = %89, %84
  %92 = phi i8* [ %90, %89 ], [ %87, %84 ]
  %93 = bitcast i8* %92 to %"class.blink::ThreadState"**
  %94 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %93, align 8
  %95 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %94, i64 0, i32 9
  %96 = load i8, i8* %95, align 1, !range !4
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %117, label %98

98:                                               ; preds = %91
  %99 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %94, i64 0, i32 13
  %100 = load i64, i64* %99, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %99, align 8
  %102 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %94, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  %103 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %102, align 8
  %104 = load atomic i64, i64* %75 monotonic, align 8
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %98
  %107 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %103, i64 0, i32 0, i32 0
  %108 = inttoptr i64 %104 to i8*
  %109 = bitcast %"class.blink::MarkingVisitor"* %103 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %110 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %109, align 8
  %111 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %110, i64 5
  %112 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %111, align 8
  tail call void %112(%"class.blink::Visitor"* %107, i8* nonnull %108, i8* %108, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5TraceEPNS_7VisitorEPKv) #8
  %113 = load i64, i64* %99, align 8
  br label %114

114:                                              ; preds = %106, %98
  %115 = phi i64 [ %101, %98 ], [ %113, %106 ]
  %116 = add i64 %115, -1
  store i64 %116, i64* %99, align 8
  br label %117

117:                                              ; preds = %81, %91, %114
  %118 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, 1
  store i32 %120, i32* %118, align 4
  %121 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %122 = load i32, i32* %121, align 8
  %123 = add i32 %122, %120
  %124 = shl i32 %123, 1
  %125 = load i32, i32* %12, align 8
  %126 = icmp ult i32 %124, %125
  br i1 %126, label %129, label %127

127:                                              ; preds = %117
  %128 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6ExpandEPSB_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %68)
  br label %129

129:                                              ; preds = %48, %117, %127
  %130 = phi i8 [ 1, %117 ], [ 1, %127 ], [ 0, %48 ]
  %131 = phi %"struct.WTF::KeyValuePair"* [ %68, %117 ], [ %128, %127 ], [ %44, %48 ]
  %132 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %131, 0
  %133 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %132, i8 %130, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %133
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE6ExpandEPSB_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca i8, align 1
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %39, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #8
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %23, i8* %24) #8
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #8
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #8
  br label %31

31:                                               ; preds = %28, %22, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  %32 = load i32, i32* %7, align 8
  %33 = icmp ult i32 %32, %14
  br i1 %33, label %34, label %39

34:                                               ; preds = %2, %31
  %35 = phi i32 [ %14, %31 ], [ 8, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #8
  store i8 -86, i8* %4, align 1
  %36 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE12ExpandBufferEjPSB_Rb(%"class.WTF::HashTable"* %0, i32 %35, %"struct.WTF::KeyValuePair"* %1, i8* nonnull dereferenceable(1) %4) #8
  %37 = load i8, i8* %4, align 1, !range !4
  %38 = icmp eq i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  br i1 %38, label %39, label %45

39:                                               ; preds = %10, %34, %31
  %40 = phi i32 [ %35, %34 ], [ %14, %31 ], [ %8, %10 ]
  %41 = zext i32 %40 to i64
  %42 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE4CallEm(i64 %41) #8
  %43 = bitcast %"class.blink::HeapHashTableBacking"* %42 to %"struct.WTF::KeyValuePair"*
  %44 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE8RehashToEPSB_jSL_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %43, i32 %40, %"struct.WTF::KeyValuePair"* %1) #8
  br label %45

45:                                               ; preds = %34, %39
  %46 = phi %"struct.WTF::KeyValuePair"* [ %44, %39 ], [ %36, %34 ]
  ret %"struct.WTF::KeyValuePair"* %46
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE12ExpandBufferEjPSB_Rb(%"class.WTF::HashTable"*, i32, %"struct.WTF::KeyValuePair"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  store i8 0, i8* %3, align 1
  %6 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %7 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %6, i64 0, i32 1
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %7) #8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !3

10:                                               ; preds = %4
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %7, i8* %11) #8
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i8* [ %11, %10 ], [ %8, %4 ]
  %14 = bitcast i8* %13 to %"class.blink::ThreadState"**
  %15 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !4
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %27, label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 13
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %23
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #8
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  br label %30

30:                                               ; preds = %23, %27
  %31 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %32 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair"* %32, null
  br i1 %33, label %80, label %34

34:                                               ; preds = %30
  %35 = zext i32 %1 to i64
  %36 = shl nuw nsw i64 %35, 4
  %37 = bitcast %"struct.WTF::KeyValuePair"* %32 to i8*
  %38 = call zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8* nonnull %37, i64 %36) #8
  br i1 %38, label %39, label %80

39:                                               ; preds = %34
  store i8 1, i8* %3, align 1
  %40 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %43 = zext i32 %41 to i64
  %44 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE4CallEm(i64 %43) #8
  %45 = bitcast %"class.blink::HeapHashTableBacking"* %44 to %"struct.WTF::KeyValuePair"*
  %46 = icmp eq i32 %41, 0
  br i1 %46, label %47, label %58

47:                                               ; preds = %77, %39
  %48 = phi %"struct.WTF::KeyValuePair"* [ null, %39 ], [ %65, %77 ]
  %49 = bitcast %"class.WTF::HashTable"* %0 to %"class.blink::HeapHashTableBacking"**
  store %"class.blink::HeapHashTableBacking"* %44, %"class.blink::HeapHashTableBacking"** %49, align 8
  %50 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.blink::HeapHashTableBacking", %"class.blink::HeapHashTableBacking"* %44, i64 0, i32 0
  %54 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %53) #8
  br label %55

55:                                               ; preds = %47, %52
  %56 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 %36, i1 false)
  %57 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE8RehashToEPSB_jSL_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %42, i32 %1, %"struct.WTF::KeyValuePair"* %48)
  br label %80

58:                                               ; preds = %39, %77
  %59 = phi i64 [ %78, %77 ], [ 0, %39 ]
  %60 = phi %"struct.WTF::KeyValuePair"* [ %65, %77 ], [ null, %39 ]
  %61 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 %59
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %62, %2
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 %59
  %65 = select i1 %63, %"struct.WTF::KeyValuePair"* %64, %"struct.WTF::KeyValuePair"* %60
  %66 = bitcast %"struct.WTF::KeyValuePair"* %62 to i64*
  %67 = load i64, i64* %66, align 8
  switch i64 %67, label %70 [
    i64 -1, label %68
    i64 0, label %68
  ]

68:                                               ; preds = %58, %58
  %69 = bitcast %"struct.WTF::KeyValuePair"* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 16, i1 false)
  br label %77

70:                                               ; preds = %58
  %71 = bitcast %"struct.WTF::KeyValuePair"* %64 to i64*
  store i64 %67, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 %59, i32 1
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 %59, i32 1
  %74 = bitcast %"class.blink::Member.15"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.blink::Member.15"* %72 to i64*
  store i64 %75, i64* %76, align 8
  br label %77

77:                                               ; preds = %68, %70
  %78 = add nuw nsw i64 %59, 1
  %79 = icmp eq i64 %78, %43
  br i1 %79, label %47, label %58

80:                                               ; preds = %34, %30, %55
  %81 = phi %"struct.WTF::KeyValuePair"* [ %57, %55 ], [ null, %30 ], [ null, %34 ]
  ret %"struct.WTF::KeyValuePair"* %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_N5blink6MemberINS4_10HeapVectorINS5_INS4_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENSF_ISA_EEEESG_NS4_13HeapAllocatorEE8RehashToEPSB_jSL_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %10, align 8
  br label %37

14:                                               ; preds = %106, %4
  %15 = phi %"struct.WTF::KeyValuePair"* [ null, %4 ], [ %109, %106 ]
  %16 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = bitcast %"struct.WTF::KeyValuePair"* %1 to i8*
  tail call void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8* %19) #8
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %22 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %21, align 8
  %23 = bitcast %"class.WTF::HashTable"* %0 to i64*
  store atomic i64 %5, i64* %23 monotonic, align 8
  %24 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = bitcast %"struct.WTF::KeyValuePair"* %1 to i8*
  %28 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %27) #8
  br label %29

29:                                               ; preds = %20, %26
  store i32 %2, i32* %6, align 8
  %30 = icmp eq %"struct.WTF::KeyValuePair"* %22, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %29
  %32 = bitcast %"struct.WTF::KeyValuePair"* %22 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %32) #8
  br label %33

33:                                               ; preds = %29, %31
  %34 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, -2147483648
  store i32 %36, i32* %34, align 8
  ret %"struct.WTF::KeyValuePair"* %15

37:                                               ; preds = %9, %106
  %38 = phi i32 [ %7, %9 ], [ %107, %106 ]
  %39 = phi %"struct.WTF::KeyValuePair"* [ %13, %9 ], [ %108, %106 ]
  %40 = phi %"struct.WTF::KeyValuePair"* [ null, %9 ], [ %109, %106 ]
  %41 = phi i32 [ 0, %9 ], [ %110, %106 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %39, i64 %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %43, i64 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  switch i64 %46, label %47 [
    i64 -1, label %106
    i64 0, label %106
  ]

47:                                               ; preds = %37
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = lshr i32 %49, 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %45) #8
  br label %54

54:                                               ; preds = %52, %47
  %55 = phi i32 [ %53, %52 ], [ %50, %47 ]
  %56 = and i32 %55, %11
  %57 = zext i32 %56 to i64
  %58 = xor i32 %55, -1
  %59 = lshr i32 %55, 23
  %60 = add i32 %59, %58
  %61 = shl i32 %60, 12
  %62 = xor i32 %61, %60
  %63 = lshr i32 %62, 7
  %64 = xor i32 %63, %62
  %65 = shl i32 %64, 2
  %66 = xor i32 %65, %64
  %67 = lshr i32 %66, 20
  %68 = xor i32 %67, %66
  %69 = or i32 %68, 1
  %70 = zext i32 %69 to i64
  br label %71

71:                                               ; preds = %85, %54
  %72 = phi %"struct.WTF::KeyValuePair"* [ null, %54 ], [ %86, %85 ]
  %73 = phi i64 [ 0, %54 ], [ %88, %85 ]
  %74 = phi i64 [ %57, %54 ], [ %90, %85 ]
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %74
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %75, i64 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = ptrtoint %"class.WTF::StringImpl"* %77 to i64
  switch i64 %78, label %82 [
    i64 0, label %79
    i64 -1, label %85
  ]

79:                                               ; preds = %71
  %80 = icmp eq %"struct.WTF::KeyValuePair"* %72, null
  %81 = select i1 %80, %"struct.WTF::KeyValuePair"* %75, %"struct.WTF::KeyValuePair"* %72
  br label %91

82:                                               ; preds = %71
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %84 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %77, %"class.WTF::StringImpl"* %83) #8
  br i1 %84, label %91, label %85

85:                                               ; preds = %82, %71
  %86 = phi %"struct.WTF::KeyValuePair"* [ %72, %82 ], [ %75, %71 ]
  %87 = icmp eq i64 %73, 0
  %88 = select i1 %87, i64 %70, i64 %73
  %89 = add i64 %88, %74
  %90 = and i64 %89, %12
  br label %71

91:                                               ; preds = %82, %79
  %92 = phi %"struct.WTF::KeyValuePair"* [ %81, %79 ], [ %75, %82 ]
  %93 = bitcast %"struct.WTF::KeyValuePair"* %43 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"struct.WTF::KeyValuePair"* %92 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %92, i64 0, i32 1
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %39, i64 %42, i32 1
  %98 = bitcast %"class.blink::Member.15"* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.blink::Member.15"* %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %10, align 8
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 %42
  %103 = icmp eq %"struct.WTF::KeyValuePair"* %102, %3
  %104 = select i1 %103, %"struct.WTF::KeyValuePair"* %92, %"struct.WTF::KeyValuePair"* %40
  %105 = load i32, i32* %6, align 8
  br label %106

106:                                              ; preds = %37, %37, %91
  %107 = phi i32 [ %38, %37 ], [ %105, %91 ], [ %38, %37 ]
  %108 = phi %"struct.WTF::KeyValuePair"* [ %39, %37 ], [ %101, %91 ], [ %39, %37 ]
  %109 = phi %"struct.WTF::KeyValuePair"* [ %40, %37 ], [ %104, %91 ], [ %40, %37 ]
  %110 = add i32 %41, 1
  %111 = icmp eq i32 %110, %107
  br i1 %111, label %14, label %37
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.4, i64 0, i64 0), i32 77, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 4
  %21 = call i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableIPNS1_10StringImplENS1_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEEEENS1_24KeyValuePairKeyExtractorENS1_10StringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEE14AllocateObjectISM_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapHashTableBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapHashTableBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableIPNS1_10StringImplENS1_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_7ElementEEELj0EEEEEEENS1_24KeyValuePairKeyExtractorENS1_10StringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEE14AllocateObjectISM_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 5, i32 %20, i8* getelementptr inbounds ([474 x i8], [474 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableIPNS_10StringImplENS_12KeyValuePairIS5_NS1_6MemberINS1_10HeapVectorINS7_INS1_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS5_EENSH_ISC_EEEESI_NS1_13HeapAllocatorEEEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #5 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #8
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %21, i8* %22) #8
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #8
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #8
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #8
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !3

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #8
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 -2
  %6 = bitcast i8* %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp ult i16 %7, 4
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %22

17:                                               ; preds = %4
  %18 = load atomic i16, i16* %6 monotonic, align 2
  %19 = lshr i16 %18, 2
  %20 = zext i16 %19 to i64
  %21 = shl nuw nsw i64 %20, 3
  br label %22

22:                                               ; preds = %9, %17
  %23 = phi i64 [ %16, %9 ], [ %21, %17 ]
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)***
  %25 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)**, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %25, i64 4
  %27 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0, i8* nonnull %1, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, i64 %23) #8
  br i1 %28, label %30, label %29

29:                                               ; preds = %2, %22
  tail call void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableIPNS_10StringImplENS_12KeyValuePairIS4_N5blink6MemberINS6_10HeapVectorINS7_INS6_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSH_ISC_EEEESI_NS6_13HeapAllocatorEEEE5TraceEPNS6_7VisitorEPKv(%"class.blink::Visitor"* %0, i8* %1) #8
  br label %30

30:                                               ; preds = %22, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableIPNS_10StringImplENS_12KeyValuePairIS4_N5blink6MemberINS6_10HeapVectorINS7_INS6_7ElementEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSH_ISC_EEEESI_NS6_13HeapAllocatorEEEE5TraceEPNS6_7VisitorEPKv(%"class.blink::Visitor"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"struct.WTF::KeyValuePair"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %9, %17
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 4
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*)***
  %25 = load i1 (%"class.blink::Visitor"*)**, i1 (%"class.blink::Visitor"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %25, i64 3
  %27 = load i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0) #8
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %20
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %33

32:                                               ; preds = %61, %20
  ret void

33:                                               ; preds = %61, %30
  %34 = phi i64 [ 0, %30 ], [ %62, %61 ]
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %34
  %36 = bitcast %"struct.WTF::KeyValuePair"* %35 to i64*
  br i1 %28, label %37, label %49

37:                                               ; preds = %33
  %38 = load atomic i64, i64* %36 monotonic, align 8
  switch i64 %38, label %39 [
    i64 -1, label %61
    i64 0, label %61
  ]

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %34, i32 1
  %41 = bitcast %"class.blink::Member.15"* %40 to i64*
  %42 = load atomic i64, i64* %41 monotonic, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %39
  %45 = inttoptr i64 %42 to i8*
  %46 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %47 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %46, i64 5
  %48 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %47, align 8
  tail call void %48(%"class.blink::Visitor"* %0, i8* nonnull %45, i8* nonnull %45, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5TraceEPNS_7VisitorEPKv) #8
  br label %61

49:                                               ; preds = %33
  %50 = load i64, i64* %36, align 8
  switch i64 %50, label %51 [
    i64 -1, label %61
    i64 0, label %61
  ]

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %34, i32 1
  %53 = bitcast %"class.blink::Member.15"* %52 to i64*
  %54 = load atomic i64, i64* %53 monotonic, align 8
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %51
  %57 = inttoptr i64 %54 to i8*
  %58 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %59 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %58, i64 5
  %60 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %59, align 8
  tail call void %60(%"class.blink::Visitor"* %0, i8* nonnull %57, i8* nonnull %57, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5TraceEPNS_7VisitorEPKv) #8
  br label %61

61:                                               ; preds = %49, %49, %37, %37, %56, %51, %39, %44
  %62 = add nuw nsw i64 %34, 1
  %63 = icmp eq i64 %62, %23
  br i1 %63, label %32, label %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  %6 = bitcast i8* %1 to i8**
  %7 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8**)***
  %8 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %8, i64 11
  %10 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %9, align 8
  tail call void %10(%"class.blink::Visitor"* %0, i8** %6) #8
  br i1 %5, label %17, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %4 to i8*
  %13 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %14 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %14, i64 5
  %16 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %15, align 8
  tail call void %16(%"class.blink::Visitor"* %0, i8* nonnull %12, i8* nonnull %12, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv) #8
  br label %17

17:                                               ; preds = %2, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.19"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member.19", %"class.blink::Member.19"* %3, i64 %28
  %30 = bitcast %"class.blink::Member.19"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv) #8
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Element"*
  %4 = bitcast i8* %1 to void (%"class.blink::Element"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)**, void (%"class.blink::Element"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Element"* %3, %"class.blink::Visitor"* %0) #8
  ret void
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8*) local_unnamed_addr #1

declare void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8*) local_unnamed_addr #1

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_10HeapVectorINS_6MemberINS_7ElementEEELj0EEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIRPS3_EEvOT_(%"class.WTF::Vector"*, %"class.blink::Element"** dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"* %0, i32 %14) #8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::Member.19"*, %"class.blink::Member.19"** %15, align 8
  %17 = load i32, i32* %3, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.blink::Member.19", %"class.blink::Member.19"* %16, i64 %18
  %20 = bitcast %"class.blink::Element"** %1 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.blink::Member.19"* %19 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %2
  %26 = inttoptr i64 %21 to i8*
  %27 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %26) #8
  br label %28

28:                                               ; preds = %2, %25
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %59, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::Member.19"*, %"class.blink::Member.19"** %8, align 8
  %10 = icmp eq %"class.blink::Member.19"* %9, null
  %11 = zext i32 %1 to i64
  %12 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64 %11) #8
  br i1 %10, label %13, label %24

13:                                               ; preds = %7
  %14 = lshr i64 %12, 3
  %15 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %14) #8
  %16 = ptrtoint %"class.blink::HeapVectorBacking"* %15 to i64
  %17 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = trunc i64 %14 to i32
  store i32 %18, i32* %4, align 8
  %19 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %59, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %15, i64 0, i32 0
  %23 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %22) #8
  br label %59

24:                                               ; preds = %7
  %25 = load %"class.blink::Member.19"*, %"class.blink::Member.19"** %8, align 8
  %26 = icmp eq %"class.blink::Member.19"* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.blink::Member.19"* %25 to i8*
  %29 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %28, i64 %12) #8
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = lshr i64 %12, 3
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %4, align 8
  br label %59

33:                                               ; preds = %24, %27
  %34 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %35 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %34, i64 0, i32 1
  %36 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %35) #8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %40, !prof !3

38:                                               ; preds = %33
  %39 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %35, i8* %39) #8
  br label %40

40:                                               ; preds = %38, %33
  %41 = phi i8* [ %39, %38 ], [ %36, %33 ]
  %42 = bitcast i8* %41 to %"class.blink::ThreadState"**
  %43 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 6
  %45 = load i8, i8* %44, align 8, !range !4
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 16
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %55, label %51

51:                                               ; preds = %40, %47
  %52 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 13
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %47, %51
  %56 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #8
  %57 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #8
  br label %58

58:                                               ; preds = %51, %55
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %1)
  br label %59

59:                                               ; preds = %30, %21, %13, %2, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = bitcast %"class.WTF::Vector"* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %10 monotonic, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = shl nuw nsw i64 %9, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %6, i64 %12) #8
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %6) #8
  br label %50

13:                                               ; preds = %2
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64 %14) #8
  %16 = lshr i64 %15, 3
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %16) #8
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::Member.19"*, %"class.blink::Member.19"** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %22 = icmp ne %"class.blink::HeapVectorBacking"* %17, null
  %23 = icmp ne %"class.blink::Member.19"* %20, null
  %24 = and i1 %22, %23
  %25 = bitcast %"class.blink::Member.19"* %20 to i8*
  br i1 %24, label %28, label %26, !prof !2

26:                                               ; preds = %13
  %27 = bitcast %"class.WTF::Vector"* %0 to i8**
  br label %35

28:                                               ; preds = %13
  %29 = load i32, i32* %21, align 4
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %32, i8* nonnull %25, i64 %31) #8
  %33 = bitcast %"class.WTF::Vector"* %0 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %26, %28
  %36 = phi i8** [ %27, %26 ], [ %33, %28 ]
  %37 = phi i8* [ %25, %26 ], [ %34, %28 ]
  %38 = load i32, i32* %21, align 4
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %37, i64 %40) #8
  %41 = load i8*, i8** %36, align 8
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %41) #8
  %42 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %18, i64* %42 monotonic, align 8
  %43 = trunc i64 %16 to i32
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %43, i32* %44, align 8
  %45 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %35
  %48 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %49 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %48) #8
  br label %50

50:                                               ; preds = %47, %35, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.10, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.11, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %22 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %26 = call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %25, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %27

27:                                               ; preds = %19, %24
  %28 = phi i32 [ %22, %19 ], [ %26, %24 ]
  %29 = call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %21, %"class.blink::ThreadState"* bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadState"*), i64 %20, i32 4, i32 %28, i8* getelementptr inbounds ([155 x i8], [155 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberINS1_7ElementEEENS_12VectorTraitsIS5_EEEEEEPKcv, i64 0, i64 0)) #8
  %30 = bitcast i8* %29 to %"class.blink::HeapVectorBacking"*
  %31 = getelementptr inbounds i8, i8* %29, i64 -4
  %32 = bitcast i8* %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = or i16 %33, 1
  store atomic i16 %34, i16* %32 release, align 2
  ret %"class.blink::HeapVectorBacking"* %30
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #1

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #1

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZN5blink8Document31RegisterNodeListWithIdNameCacheEPKNS_16LiveNodeListBaseE(%"class.blink::Document"*, %"class.blink::LiveNodeListBase"*) local_unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare %"class.blink::Element"* @_ZNK5blink14HTMLCollection4itemEj(%"class.blink::HTMLCollection"*, i32) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::Member.633"* @_ZNK3WTF6VectorIN5blink6MemberINS1_13ListedElementEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.630"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.630", %"class.WTF::Vector.630"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector.630", %"class.WTF::Vector.630"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member.633"*, %"class.blink::Member.633"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Member.633", %"class.blink::Member.633"* %24, i64 %25
  ret %"class.blink::Member.633"* %26
}

declare void @_ZN5blink14HTMLCollection14NamedItemCacheC1Ev(%"class.blink::HTMLCollection::NamedItemCache"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_14HTMLCollection14NamedItemCacheEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_14HTMLCollection14NamedItemCacheEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14HTMLCollection14NamedItemCacheEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_14HTMLCollection14NamedItemCacheEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = bitcast i8* %1 to i8**
  %6 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8**)***
  %7 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %7, i64 11
  %9 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %8, align 8
  tail call void %9(%"class.blink::Visitor"* %0, i8** %5) #8
  %10 = icmp eq i64 %4, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %4 to i8*
  %13 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %14 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %14, i64 5
  %16 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %15, align 8
  tail call void %16(%"class.blink::Visitor"* %0, i8* nonnull %12, i8* nonnull %12, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv) #8
  br label %17

17:                                               ; preds = %11, %2
  %18 = getelementptr inbounds i8, i8* %1, i64 24
  %19 = bitcast i8* %18 to i64*
  %20 = load atomic i64, i64* %19 monotonic, align 8
  %21 = bitcast i8* %18 to i8**
  %22 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %6, align 8
  %23 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %22, i64 11
  %24 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %23, align 8
  tail call void %24(%"class.blink::Visitor"* %0, i8** %21) #8
  %25 = icmp eq i64 %20, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %17
  %27 = inttoptr i64 %20 to i8*
  %28 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %29 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %29, i64 5
  %31 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %30, align 8
  tail call void %31(%"class.blink::Visitor"* %0, i8* nonnull %27, i8* nonnull %27, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableIPNS2_10StringImplENS2_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_7ElementEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_10StringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv) #8
  br label %32

32:                                               ; preds = %17, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_14HTMLCollection14NamedItemCacheEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::StringImpl"**, i8 } @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_S2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_(%"class.WTF::HashTable.719"*, %"class.WTF::StringImpl"** dereferenceable(8), %"class.WTF::StringImpl"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 0
  %5 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"** %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.719"* %0, %"class.WTF::StringImpl"** null)
  %9 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::StringImpl"** [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %10
  %22 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %16) #8
  br label %23

23:                                               ; preds = %10, %21
  %24 = phi i32 [ %22, %21 ], [ %19, %10 ]
  %25 = and i32 %24, %14
  %26 = zext i32 %25 to i64
  %27 = xor i32 %24, -1
  %28 = lshr i32 %24, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %50, %23
  %41 = phi i64 [ 0, %23 ], [ %53, %50 ]
  %42 = phi i64 [ %26, %23 ], [ %55, %50 ]
  %43 = phi %"class.WTF::StringImpl"** [ null, %23 ], [ %51, %50 ]
  %44 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, i64 %42
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  switch i64 %46, label %47 [
    i64 0, label %56
    i64 -1, label %50
  ]

47:                                               ; preds = %40
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %49 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %45, %"class.WTF::StringImpl"* %48) #8
  br i1 %49, label %84, label %50

50:                                               ; preds = %40, %47
  %51 = phi %"class.WTF::StringImpl"** [ %43, %47 ], [ %44, %40 ]
  %52 = icmp eq i64 %41, 0
  %53 = select i1 %52, i64 %39, i64 %41
  %54 = add i64 %53, %42
  %55 = and i64 %54, %15
  br label %40

56:                                               ; preds = %40
  %57 = icmp eq %"class.WTF::StringImpl"** %43, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.WTF::StringImpl"** %44 to i64*
  br label %68

60:                                               ; preds = %56
  %61 = bitcast %"class.WTF::StringImpl"** %43 to i64*
  store i64 0, i64* %61, align 8
  %62 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 3
  %63 = load i32, i32* %62, align 8
  %64 = add i32 %63, 2147483647
  %65 = and i32 %64, 2147483647
  %66 = and i32 %63, -2147483648
  %67 = or i32 %65, %66
  store i32 %67, i32* %62, align 8
  br label %68

68:                                               ; preds = %58, %60
  %69 = phi i64* [ %59, %58 ], [ %61, %60 ]
  %70 = phi %"class.WTF::StringImpl"** [ %44, %58 ], [ %43, %60 ]
  %71 = bitcast %"class.WTF::StringImpl"** %2 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %69, align 8
  %73 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %73, align 4
  %76 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, %75
  %79 = shl i32 %78, 1
  %80 = load i32, i32* %12, align 8
  %81 = icmp ult i32 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %68
  %83 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.719"* %0, %"class.WTF::StringImpl"** %70)
  br label %84

84:                                               ; preds = %47, %68, %82
  %85 = phi i8 [ 1, %68 ], [ 1, %82 ], [ 0, %47 ]
  %86 = phi %"class.WTF::StringImpl"** [ %70, %68 ], [ %83, %82 ], [ %44, %47 ]
  %87 = insertvalue { %"class.WTF::StringImpl"**, i8 } undef, %"class.WTF::StringImpl"** %86, 0
  %88 = insertvalue { %"class.WTF::StringImpl"**, i8 } %87, i8 %85, 1
  ret { %"class.WTF::StringImpl"**, i8 } %88
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.719"*, %"class.WTF::StringImpl"**) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #8
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #8
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPNS_10StringImplEEEPKcv, i64 0, i64 0)) #8
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"**
  %37 = call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_(%"class.WTF::HashTable.719"* %0, %"class.WTF::StringImpl"** %36, i32 %32, %"class.WTF::StringImpl"** %1) #8
  ret %"class.WTF::StringImpl"** %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_(%"class.WTF::HashTable.719"*, %"class.WTF::StringImpl"**, i32, %"class.WTF::StringImpl"**) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::StringImpl"** %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.719"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %9, align 8
  %17 = ptrtoint %"class.WTF::StringImpl"** %16 to i64
  br label %31

18:                                               ; preds = %95
  %19 = bitcast %"class.WTF::HashTable.719"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %96, %18 ]
  %23 = phi %"class.WTF::StringImpl"** [ null, %10 ], [ %99, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #8
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable.719", %"class.WTF::HashTable.719"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"class.WTF::StringImpl"** %23

31:                                               ; preds = %13, %95
  %32 = phi i64 [ %17, %13 ], [ %96, %95 ]
  %33 = phi i32 [ %7, %13 ], [ %97, %95 ]
  %34 = phi %"class.WTF::StringImpl"** [ %16, %13 ], [ %98, %95 ]
  %35 = phi %"class.WTF::StringImpl"** [ null, %13 ], [ %99, %95 ]
  %36 = phi i32 [ 0, %13 ], [ %100, %95 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, i64 %37
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  switch i64 %40, label %41 [
    i64 -1, label %95
    i64 0, label %95
  ]

41:                                               ; preds = %31
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = lshr i32 %43, 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %39) #8
  br label %48

48:                                               ; preds = %46, %41
  %49 = phi i32 [ %47, %46 ], [ %44, %41 ]
  %50 = and i32 %49, %14
  %51 = zext i32 %50 to i64
  %52 = xor i32 %49, -1
  %53 = lshr i32 %49, 23
  %54 = add i32 %53, %52
  %55 = shl i32 %54, 12
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 7
  %58 = xor i32 %57, %56
  %59 = shl i32 %58, 2
  %60 = xor i32 %59, %58
  %61 = lshr i32 %60, 20
  %62 = xor i32 %61, %60
  %63 = or i32 %62, 1
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %78, %48
  %66 = phi %"class.WTF::StringImpl"** [ null, %48 ], [ %79, %78 ]
  %67 = phi i64 [ 0, %48 ], [ %81, %78 ]
  %68 = phi i64 [ %51, %48 ], [ %83, %78 ]
  %69 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, i64 %68
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %75 [
    i64 0, label %72
    i64 -1, label %78
  ]

72:                                               ; preds = %65
  %73 = icmp eq %"class.WTF::StringImpl"** %66, null
  %74 = select i1 %73, %"class.WTF::StringImpl"** %69, %"class.WTF::StringImpl"** %66
  br label %84

75:                                               ; preds = %65
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %77 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %70, %"class.WTF::StringImpl"* %76) #8
  br i1 %77, label %84, label %78

78:                                               ; preds = %75, %65
  %79 = phi %"class.WTF::StringImpl"** [ %66, %75 ], [ %69, %65 ]
  %80 = icmp eq i64 %67, 0
  %81 = select i1 %80, i64 %64, i64 %67
  %82 = add i64 %81, %68
  %83 = and i64 %82, %15
  br label %65

84:                                               ; preds = %75, %72
  %85 = phi %"class.WTF::StringImpl"** [ %74, %72 ], [ %69, %75 ]
  %86 = bitcast %"class.WTF::StringImpl"** %38 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.WTF::StringImpl"** %85 to i64*
  store i64 %87, i64* %88, align 8
  %89 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %9, align 8
  %90 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, i64 %37
  %91 = icmp eq %"class.WTF::StringImpl"** %90, %3
  %92 = select i1 %91, %"class.WTF::StringImpl"** %85, %"class.WTF::StringImpl"** %35
  %93 = load i32, i32* %6, align 8
  %94 = ptrtoint %"class.WTF::StringImpl"** %89 to i64
  br label %95

95:                                               ; preds = %31, %31, %84
  %96 = phi i64 [ %32, %31 ], [ %94, %84 ], [ %32, %31 ]
  %97 = phi i32 [ %33, %31 ], [ %93, %84 ], [ %33, %31 ]
  %98 = phi %"class.WTF::StringImpl"** [ %34, %31 ], [ %89, %84 ], [ %34, %31 ]
  %99 = phi %"class.WTF::StringImpl"** [ %35, %31 ], [ %92, %84 ], [ %35, %31 ]
  %100 = add i32 %36, 1
  %101 = icmp eq i32 %100, %97
  br i1 %101, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::Member.19"* @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member.19"*, %"class.blink::Member.19"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Member.19", %"class.blink::Member.19"* %24, i64 %25
  ret %"class.blink::Member.19"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #8
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #8
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8bindings9UnionBaseEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8bindings9UnionBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::bindings::UnionBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::bindings::UnionBase"* %3, %"class.blink::Visitor"* %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_8bindings9UnionBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::bindings::UnionBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::bindings::UnionBase"*)***
  %4 = load void (%"class.blink::bindings::UnionBase"*)**, void (%"class.blink::bindings::UnionBase"*)*** %3, align 8
  %5 = load void (%"class.blink::bindings::UnionBase"*)*, void (%"class.blink::bindings::UnionBase"*)** %4, align 8
  tail call void %5(%"class.blink::bindings::UnionBase"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_8bindings9UnionBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.734"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.734"* %0, %"class.WTF::AtomicString"* null)
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::AtomicString"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %22
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"class.WTF::StringImpl"* [ %25, %27 ], [ %60, %52 ]
  %43 = phi %"class.WTF::AtomicString"* [ %23, %27 ], [ %58, %52 ]
  %44 = phi %"class.WTF::AtomicString"* [ null, %27 ], [ %53, %52 ]
  %45 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %46 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %47 = bitcast %"class.WTF::AtomicString"* %43 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = icmp eq %"class.WTF::StringImpl"* %42, %17
  br i1 %51, label %125, label %52

52:                                               ; preds = %41, %50
  %53 = phi %"class.WTF::AtomicString"* [ %44, %50 ], [ %43, %41 ]
  %54 = icmp eq i64 %46, 0
  %55 = select i1 %54, i64 %40, i64 %46
  %56 = add i64 %55, %45
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %57
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"class.WTF::AtomicString"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.WTF::AtomicString"* %53 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"class.WTF::AtomicString"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #8
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !3

91:                                               ; preds = %82
  tail call void @llvm.trap() #8
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %73, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #8
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %116
  %120 = shl i32 %119, 1
  %121 = load i32, i32* %12, align 8
  %122 = icmp ult i32 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %113
  %124 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.734"* %0, %"class.WTF::AtomicString"* %73)
  br label %125

125:                                              ; preds = %50, %113, %123
  %126 = phi i8 [ 1, %113 ], [ 1, %123 ], [ 0, %50 ]
  %127 = phi %"class.WTF::AtomicString"* [ %73, %113 ], [ %124, %123 ], [ %43, %50 ]
  %128 = insertvalue { %"class.WTF::AtomicString"*, i8 } undef, %"class.WTF::AtomicString"* %127, 0
  %129 = insertvalue { %"class.WTF::AtomicString"*, i8 } %128, i8 %126, 1
  ret { %"class.WTF::AtomicString"*, i8 } %129
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.734"*, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #8
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #8
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #8
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #8
  %36 = bitcast i8* %35 to %"class.WTF::AtomicString"*
  %37 = call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable.734"* %0, %"class.WTF::AtomicString"* %36, i32 %32, %"class.WTF::AtomicString"* %1) #8
  ret %"class.WTF::AtomicString"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable.734"*, %"class.WTF::AtomicString"*, i32, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.734"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %17 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  br label %61

18:                                               ; preds = %157
  %19 = bitcast %"class.WTF::HashTable.734"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %158, %18 ]
  %23 = phi %"class.WTF::AtomicString"* [ null, %10 ], [ %161, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %159, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"class.WTF::AtomicString"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %55, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %52, %29
  %32 = phi i64 [ 0, %29 ], [ %53, %52 ]
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 %32
  %34 = bitcast %"class.WTF::AtomicString"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %37 = ptrtoint i8* %35 to i64
  switch i64 %37, label %38 [
    i64 -1, label %52
    i64 0, label %52
  ]

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %35, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = bitcast i8* %35 to i32*
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %38
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi i32 [ %47, %46 ], [ %45, %38 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #8
  br label %52

52:                                               ; preds = %51, %48, %31, %31
  %53 = add nuw nsw i64 %32, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %55, label %31

55:                                               ; preds = %52, %27
  %56 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %56) #8
  br label %57

57:                                               ; preds = %20, %55
  %58 = getelementptr inbounds %"class.WTF::HashTable.734", %"class.WTF::HashTable.734"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = and i32 %59, -2147483648
  store i32 %60, i32* %58, align 8
  ret %"class.WTF::AtomicString"* %23

61:                                               ; preds = %13, %157
  %62 = phi i64 [ %17, %13 ], [ %158, %157 ]
  %63 = phi i32 [ %7, %13 ], [ %159, %157 ]
  %64 = phi %"class.WTF::AtomicString"* [ %16, %13 ], [ %160, %157 ]
  %65 = phi %"class.WTF::AtomicString"* [ null, %13 ], [ %161, %157 ]
  %66 = phi i32 [ 0, %13 ], [ %162, %157 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 %67
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %72 [
    i64 -1, label %157
    i64 0, label %157
  ]

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, %14
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %77
  %79 = ptrtoint %"class.WTF::AtomicString"* %78 to i64
  %80 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %78, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %72
  %84 = xor i32 %75, -1
  %85 = lshr i32 %74, 31
  %86 = add nsw i32 %85, %84
  %87 = shl i32 %86, 12
  %88 = xor i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = xor i32 %89, %88
  %91 = shl i32 %90, 2
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 20
  %94 = xor i32 %93, %92
  %95 = or i32 %94, 1
  %96 = zext i32 %95 to i64
  br label %105

97:                                               ; preds = %117
  %98 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  br label %99

99:                                               ; preds = %97, %72
  %100 = phi i64 [ %79, %72 ], [ %98, %97 ]
  %101 = phi %"class.WTF::AtomicString"* [ null, %72 ], [ %118, %97 ]
  %102 = icmp eq %"class.WTF::AtomicString"* %101, null
  %103 = ptrtoint %"class.WTF::AtomicString"* %101 to i64
  %104 = select i1 %102, i64 %100, i64 %103
  br label %128

105:                                              ; preds = %117, %83
  %106 = phi %"class.WTF::AtomicString"* [ null, %83 ], [ %118, %117 ]
  %107 = phi %"class.WTF::StringImpl"* [ %81, %83 ], [ %126, %117 ]
  %108 = phi i64 [ %79, %83 ], [ %124, %117 ]
  %109 = phi %"class.WTF::AtomicString"* [ %78, %83 ], [ %123, %117 ]
  %110 = phi i64 [ %77, %83 ], [ %122, %117 ]
  %111 = phi i64 [ 0, %83 ], [ %120, %117 ]
  %112 = bitcast %"class.WTF::AtomicString"* %109 to i8**
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, inttoptr (i64 -1 to i8*)
  br i1 %114, label %117, label %115

115:                                              ; preds = %105
  %116 = icmp eq %"class.WTF::StringImpl"* %107, %70
  br i1 %116, label %128, label %117

117:                                              ; preds = %115, %105
  %118 = phi %"class.WTF::AtomicString"* [ %106, %115 ], [ %109, %105 ]
  %119 = icmp eq i64 %111, 0
  %120 = select i1 %119, i64 %96, i64 %111
  %121 = add i64 %120, %110
  %122 = and i64 %121, %15
  %123 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %122
  %124 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  %125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %123, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %97, label %105

128:                                              ; preds = %115, %99
  %129 = phi i64 [ %104, %99 ], [ %108, %115 ]
  %130 = inttoptr i64 %129 to %"class.WTF::AtomicString"*
  %131 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %133, label %147, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %132) #8
  br label %147

147:                                              ; preds = %128, %143, %146
  %148 = bitcast %"class.WTF::AtomicString"* %68 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = inttoptr i64 %129 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %69, align 8
  %151 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %152 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %151, i64 %67
  %153 = icmp eq %"class.WTF::AtomicString"* %152, %3
  %154 = select i1 %153, %"class.WTF::AtomicString"* %130, %"class.WTF::AtomicString"* %65
  %155 = load i32, i32* %6, align 8
  %156 = ptrtoint %"class.WTF::AtomicString"* %151 to i64
  br label %157

157:                                              ; preds = %61, %61, %147
  %158 = phi i64 [ %62, %61 ], [ %156, %147 ], [ %62, %61 ]
  %159 = phi i32 [ %63, %61 ], [ %155, %147 ], [ %63, %61 ]
  %160 = phi %"class.WTF::AtomicString"* [ %64, %61 ], [ %151, %147 ], [ %64, %61 ]
  %161 = phi %"class.WTF::AtomicString"* [ %65, %61 ], [ %154, %147 ], [ %65, %61 ]
  %162 = add i32 %66, 1
  %163 = icmp eq i32 %162, %159
  br i1 %163, label %18, label %61
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKNS_12AtomicStringEEEvOT_(%"class.WTF::Vector.728"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.728", %"class.WTF::Vector.728"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.728", %"class.WTF::Vector.728"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  %16 = getelementptr inbounds %"class.WTF::Vector.728", %"class.WTF::Vector.728"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  br i1 %15, label %18, label %45, !prof !2

18:                                               ; preds = %2
  %19 = icmp eq %"class.WTF::String"* %17, null
  %20 = zext i32 %14 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %20) #8
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %23 = ptrtoint i8* %22 to i64
  br i1 %19, label %24, label %26

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::Vector.728"* %0 to i64*
  store atomic i64 %23, i64* %25 monotonic, align 8
  br label %41

26:                                               ; preds = %18
  %27 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  %28 = icmp ne i8* %22, null
  %29 = icmp ne %"class.WTF::String"* %27, null
  %30 = and i1 %28, %29
  %31 = bitcast %"class.WTF::String"* %27 to i8*
  br i1 %30, label %32, label %38, !prof !2

32:                                               ; preds = %26
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* nonnull align 8 %31, i64 %35, i1 false) #8
  %36 = bitcast %"class.WTF::Vector.728"* %0 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i8* [ %37, %32 ], [ %31, %26 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %39) #8
  %40 = bitcast %"class.WTF::Vector.728"* %0 to i64*
  store atomic i64 %23, i64* %40 monotonic, align 8
  br label %41

41:                                               ; preds = %38, %24
  %42 = lshr i64 %21, 3
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %6, align 8
  %44 = bitcast i8* %22 to %"class.WTF::String"*
  br label %45

45:                                               ; preds = %41, %2
  %46 = phi %"class.WTF::String"* [ %17, %2 ], [ %44, %41 ]
  %47 = load i32, i32* %3, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %46, i64 %48, i32 0, i32 0
  store %"class.WTF::StringImpl"* %50, %"class.WTF::StringImpl"** %51, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %50, null
  br i1 %52, label %70, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %50, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i33
  %62 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %61, i33 1) #8
  %63 = extractvalue { i33, i1 } %62, 1
  %64 = extractvalue { i33, i1 } %62, 0
  %65 = icmp slt i33 %64, 0
  %66 = or i1 %63, %65
  br i1 %66, label %67, label %68, !prof !3

67:                                               ; preds = %58
  tail call void @llvm.trap() #8
  unreachable

68:                                               ; preds = %58
  %69 = trunc i33 %64 to i32
  store i32 %69, i32* %59, align 4
  br label %70

70:                                               ; preds = %45, %53, %68
  %71 = load i32, i32* %3, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.13, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11HTMLElementEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Element"*
  %4 = bitcast i8* %1 to void (%"class.blink::Element"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)**, void (%"class.blink::Element"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Element"* %3, %"class.blink::Visitor"* %0) #8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
