; ModuleID = '../../components/omnibox/browser/autocomplete_provider.cc'
source_filename = "../../components/omnibox/browser/autocomplete_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.AutocompleteProvider = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i64, %"class.std::__1::vector", i8, i32 }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.AutocompleteMatch*, %struct.AutocompleteMatch*, %"class.std::__1::__compressed_pair" }
%struct.AutocompleteMatch = type { %class.AutocompleteProvider*, i32, i32, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %struct.SplitAutocompletion, i8, %class.GURL, %class.GURL, %"class.std::__1::basic_string.14", %class.GURL, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.26", %"class.std::__1::basic_string", %"class.std::__1::vector.26", %"class.std::__1::basic_string", %"class.std::__1::vector.26", %"class.absl::optional", i8, [7 x i8], %"class.absl::optional.34", i32, i32, i8, %"class.base::internal::flat_tree", %"class.std::__1::unique_ptr.58", %"class.std::__1::basic_string", i8, %class.scoped_refptr, i8, %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.69", %"class.std::__1::map", %"class.std::__1::vector", %"class.std::__1::vector.83", %"class.std::__1::vector.112" }
%struct.SplitAutocompletion = type { %"class.std::__1::basic_string", %"class.std::__1::vector.7" }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.std::__1::__compressed_pair.9" }
%"class.gfx::Range" = type { i32, i32 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.gfx::Range"* }
%"class.std::__1::basic_string.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.17 }
%union.anon.17 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string.14", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %class.GURL* }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"struct.AutocompleteMatch::ACMatchClassification"*, %"struct.AutocompleteMatch::ACMatchClassification"*, %"class.std::__1::__compressed_pair.28" }
%"struct.AutocompleteMatch::ACMatchClassification" = type <{ i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.AutocompleteMatch::ACMatchClassification"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.33 }
%union.anon.33 = type { i32 }
%"class.absl::optional.34" = type { %"class.absl::optional_internal::optional_data.35" }
%"class.absl::optional_internal::optional_data.35" = type { %"class.absl::optional_internal::optional_data_base.36" }
%"class.absl::optional_internal::optional_data_base.36" = type { %"class.absl::optional_internal::optional_data_dtor_base.37" }
%"class.absl::optional_internal::optional_data_dtor_base.37" = type { i8, [7 x i8], %union.anon.38 }
%union.anon.38 = type { %class.SuggestionAnswer }
%class.SuggestionAnswer = type <{ %class.GURL, %"class.SuggestionAnswer::ImageLine", %"class.SuggestionAnswer::ImageLine", i32, [4 x i8] }>
%"class.SuggestionAnswer::ImageLine" = type { %"class.std::__1::vector.39", i32, %"class.absl::optional.46", %"class.absl::optional.46", %class.GURL }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.SuggestionAnswer::TextField"*, %"class.SuggestionAnswer::TextField"*, %"class.std::__1::__compressed_pair.41" }
%"class.SuggestionAnswer::TextField" = type { %"class.std::__1::basic_string", i32, i8, i32, i32 }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.SuggestionAnswer::TextField"* }
%"class.absl::optional.46" = type { %"class.absl::optional_internal::optional_data.47" }
%"class.absl::optional_internal::optional_data.47" = type { %"class.absl::optional_internal::optional_data_base.48" }
%"class.absl::optional_internal::optional_data_base.48" = type { %"class.absl::optional_internal::optional_data_dtor_base.49" }
%"class.absl::optional_internal::optional_data_dtor_base.49" = type { i8, %union.anon.50 }
%union.anon.50 = type { %"class.SuggestionAnswer::TextField" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.51" }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { i32*, i32*, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { i32* }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.AutocompleteMatch* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%class.scoped_refptr = type { %class.OmniboxAction* }
%class.OmniboxAction = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.TemplateURLRef::SearchTermsArgs"* }
%"struct.TemplateURLRef::SearchTermsArgs" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, %"class.std::__1::basic_string.14", i32, i64, %"class.std::__1::basic_string.14", i32, %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", i8, %"class.std::__1::basic_string.14", %class.GURL, %"class.gfx::Size", i32, i8, %"struct.TemplateURLRef::SearchTermsArgs::ContextualSearchParams" }
%"class.gfx::Size" = type { i32, i32 }
%"struct.TemplateURLRef::SearchTermsArgs::ContextualSearchParams" = type { i32, i32, %"class.std::__1::basic_string.14", i64, i32, i8, %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.75", %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { i64 }
%"class.std::__1::vector.83" = type { %"class.std::__1::__vector_base.84" }
%"class.std::__1::__vector_base.84" = type { %"struct.query_tiles::Tile"*, %"struct.query_tiles::Tile"*, %"class.std::__1::__compressed_pair.107" }
%"struct.query_tiles::Tile" = type { %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14", %"class.std::__1::vector.85", %"class.std::__1::vector.92", %"class.std::__1::vector.100" }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"struct.query_tiles::ImageMetadata"*, %"struct.query_tiles::ImageMetadata"*, %"class.std::__1::__compressed_pair.87" }
%"struct.query_tiles::ImageMetadata" = type { %class.GURL }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.query_tiles::ImageMetadata"* }
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"class.std::__1::unique_ptr.94"*, %"class.std::__1::unique_ptr.94"*, %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::unique_ptr.94" = type opaque
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.std::__1::unique_ptr.94"* }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"class.std::__1::basic_string.14"*, %"class.std::__1::basic_string.14"*, %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.std::__1::basic_string.14"* }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.query_tiles::Tile"* }
%"class.std::__1::vector.112" = type { %"class.std::__1::__vector_base.113" }
%"class.std::__1::__vector_base.113" = type { %"struct.AutocompleteMatch::NavsuggestTile"*, %"struct.AutocompleteMatch::NavsuggestTile"*, %"class.std::__1::__compressed_pair.114" }
%"struct.AutocompleteMatch::NavsuggestTile" = type { %class.GURL, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.AutocompleteMatch::NavsuggestTile"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { %struct.TermMatch*, %struct.TermMatch*, %"class.std::__1::__compressed_pair.121" }
%struct.TermMatch = type { i32, i64, i64 }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %struct.TermMatch* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::vector.126" = type opaque
%"struct.std::__1::pair.139" = type { i8, %"class.std::__1::basic_string" }
%class.AutocompleteInput = type { %"class.std::__1::basic_string", i64, %class.GURL, %"class.std::__1::basic_string", i32, i32, %"struct.url::Parsed", %"class.std::__1::basic_string", %class.GURL, %"class.std::__1::basic_string.14", i8, i8, i8, i32, i8, i32, %"class.std::__1::vector.127", %"class.absl::optional.134", i8, i8, i32 }
%"class.std::__1::vector.127" = type { %"class.std::__1::__vector_base.128" }
%"class.std::__1::__vector_base.128" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.std::__1::basic_string"* }
%"class.absl::optional.134" = type { %"class.absl::optional_internal::optional_data.135" }
%"class.absl::optional_internal::optional_data.135" = type { %"class.absl::optional_internal::optional_data_base.136" }
%"class.absl::optional_internal::optional_data_base.136" = type { %"class.absl::optional_internal::optional_data_dtor_base.137" }
%"class.absl::optional_internal::optional_data_dtor_base.137" = type { i8, %union.anon.138 }
%union.anon.138 = type { %"class.std::__1::basic_string.14" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.18 }
%struct.anon.18 = type { i8 }
%"class.std::__1::allocator.5" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm = comdat any

@_ZTV20AutocompleteProvider = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.AutocompleteProvider*, i1, i1)* @_ZN20AutocompleteProvider4StopEbb to i8*), i8* bitcast (void (%class.AutocompleteProvider*, %struct.AutocompleteMatch*)* @_ZN20AutocompleteProvider11DeleteMatchERK17AutocompleteMatch to i8*), i8* bitcast (void (%class.AutocompleteProvider*, %"class.std::__1::vector.126"*)* @_ZNK20AutocompleteProvider15AddProviderInfoEPNSt3__16vectorIN7metrics30OmniboxEventProto_ProviderInfoENS0_9allocatorIS3_EEEE to i8*), i8* bitcast (void (%class.AutocompleteProvider*)* @_ZN20AutocompleteProvider12ResetSessionEv to i8*), i8* bitcast (i64 (%class.AutocompleteProvider*)* @_ZNK20AutocompleteProvider19EstimateMemoryUsageEv to i8*), i8* bitcast (void (%class.AutocompleteProvider*)* @_ZN20AutocompleteProviderD2Ev to i8*), i8* bitcast (void (%class.AutocompleteProvider*)* @_ZN20AutocompleteProviderD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [9 x i8] c"Bookmark\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Builtin\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Clipboard\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Document\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"HistoryQuick\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"HistoryURL\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Keyword\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"OnDeviceHead\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"Search\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Shortcuts\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"ZeroSuggest\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"LocalHistoryZeroSuggest\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"QueryTile\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"MostVisitedSites\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"VerbatimMatch\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"VoiceSuggest\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"Unknown\00", align 1
@_ZN3url12kHttpsSchemeE = external constant [0 x i8], align 1
@_ZN3url11kHttpSchemeE = external constant [0 x i8], align 1

@_ZN20AutocompleteProviderD1Ev = hidden unnamed_addr alias void (%class.AutocompleteProvider*), void (%class.AutocompleteProvider*)* @_ZN20AutocompleteProviderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20AutocompleteProviderC2ENS_4TypeE(%class.AutocompleteProvider* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV20AutocompleteProvider, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 2
  %6 = tail call i64 @_ZN17OmniboxFieldTrial21GetProviderMaxMatchesEN20AutocompleteProvider4TypeE(i32 %1) #15
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 3
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #15
  %9 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 4
  store i8 1, i8* %9, align 8
  %10 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 5
  store i32 %1, i32* %10, align 4
  ret void
}

declare i64 @_ZN17OmniboxFieldTrial21GetProviderMaxMatchesEN20AutocompleteProvider4TypeE(i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN20AutocompleteProvider12TypeToStringENS_4TypeE(i32) local_unnamed_addr #2 align 2 {
  switch i32 %0, label %17 [
    i32 1, label %18
    i32 2, label %2
    i32 256, label %3
    i32 512, label %4
    i32 4, label %5
    i32 8, label %6
    i32 16, label %7
    i32 1024, label %8
    i32 32, label %9
    i32 64, label %10
    i32 128, label %11
    i32 2048, label %12
    i32 4096, label %13
    i32 8192, label %14
    i32 16384, label %15
    i32 32768, label %16
  ]

2:                                                ; preds = %1
  br label %18

3:                                                ; preds = %1
  br label %18

4:                                                ; preds = %1
  br label %18

5:                                                ; preds = %1
  br label %18

6:                                                ; preds = %1
  br label %18

7:                                                ; preds = %1
  br label %18

8:                                                ; preds = %1
  br label %18

9:                                                ; preds = %1
  br label %18

10:                                               ; preds = %1
  br label %18

11:                                               ; preds = %1
  br label %18

12:                                               ; preds = %1
  br label %18

13:                                               ; preds = %1
  br label %18

14:                                               ; preds = %1
  br label %18

15:                                               ; preds = %1
  br label %18

16:                                               ; preds = %1
  br label %18

17:                                               ; preds = %1
  br label %18

18:                                               ; preds = %1, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2
  %19 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), %17 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), %16 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), %15 ], [ getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), %14 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), %13 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0), %12 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), %11 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), %10 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), %9 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), %8 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), %7 ], [ getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), %6 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), %5 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), %4 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), %3 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), %2 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), %1 ]
  ret i8* %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20AutocompleteProvider4StopEbb(%class.AutocompleteProvider* nocapture, i1 zeroext, i1 zeroext) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 4
  store i8 1, i8* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK20AutocompleteProvider7GetNameEv(%class.AutocompleteProvider* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %19 [
    i32 1, label %20
    i32 2, label %4
    i32 256, label %5
    i32 512, label %6
    i32 4, label %7
    i32 8, label %8
    i32 16, label %9
    i32 1024, label %10
    i32 32, label %11
    i32 64, label %12
    i32 128, label %13
    i32 2048, label %14
    i32 4096, label %15
    i32 8192, label %16
    i32 16384, label %17
    i32 32768, label %18
  ]

4:                                                ; preds = %1
  br label %20

5:                                                ; preds = %1
  br label %20

6:                                                ; preds = %1
  br label %20

7:                                                ; preds = %1
  br label %20

8:                                                ; preds = %1
  br label %20

9:                                                ; preds = %1
  br label %20

10:                                               ; preds = %1
  br label %20

11:                                               ; preds = %1
  br label %20

12:                                               ; preds = %1
  br label %20

13:                                               ; preds = %1
  br label %20

14:                                               ; preds = %1
  br label %20

15:                                               ; preds = %1
  br label %20

16:                                               ; preds = %1
  br label %20

17:                                               ; preds = %1
  br label %20

18:                                               ; preds = %1
  br label %20

19:                                               ; preds = %1
  br label %20

20:                                               ; preds = %1, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19
  %21 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), %19 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), %18 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), %17 ], [ getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), %16 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), %15 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0), %14 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), %13 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), %12 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), %11 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), %10 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), %9 ], [ getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), %8 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), %7 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), %6 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), %5 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), %4 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), %1 ]
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20AutocompleteProvider26ClassifyAllMatchesInStringERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_bRKNS0_6vectorIN17AutocompleteMatch21ACMatchClassificationENS4_ISB_EEEE(%"class.std::__1::vector.26"* noalias sret, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i1 zeroext, %"class.std::__1::vector.26"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::vector.119", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::vector.26", align 8
  %10 = alloca %"class.std::__1::vector.26", align 8
  %11 = alloca %"class.std::__1::vector.119", align 8
  %12 = alloca %"class.std::__1::vector.26", align 8
  %13 = alloca %"class.std::__1::vector.119", align 8
  %14 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = zext i8 %16 to i64
  %21 = select i1 %17, i64 %19, i64 %20
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %55

23:                                               ; preds = %5
  %24 = bitcast %"class.std::__1::vector.26"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #15
  %25 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %4, i64 0, i32 0, i32 1
  %26 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::vector.26"* %4 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 4
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %593, label %33

33:                                               ; preds = %23
  %34 = icmp ugt i64 %31, 1152921504606846975
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = bitcast %"class.std::__1::vector.26"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #16
  unreachable

37:                                               ; preds = %33
  %38 = tail call i8* @_Znwm(i64 %30) #17
  %39 = bitcast i8* %38 to %"struct.AutocompleteMatch::ACMatchClassification"*
  %40 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 1
  %41 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %40 to i8**
  store i8* %38, i8** %41, align 8
  %42 = bitcast %"class.std::__1::vector.26"* %0 to i8**
  store i8* %38, i8** %42, align 8
  %43 = getelementptr inbounds %"struct.AutocompleteMatch::ACMatchClassification", %"struct.AutocompleteMatch::ACMatchClassification"* %39, i64 %31
  %44 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.AutocompleteMatch::ACMatchClassification"* %43, %"struct.AutocompleteMatch::ACMatchClassification"** %44, align 8
  %45 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %40 to i64*
  %46 = ptrtoint i8* %38 to i64
  %47 = icmp sgt i64 %30, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %37
  %49 = lshr exact i64 %30, 4
  %50 = inttoptr i64 %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* align 8 %50, i64 %30, i1 false) #15
  %51 = getelementptr inbounds %"struct.AutocompleteMatch::ACMatchClassification", %"struct.AutocompleteMatch::ACMatchClassification"* %39, i64 %49
  %52 = ptrtoint %"struct.AutocompleteMatch::ACMatchClassification"* %51 to i64
  br label %53

53:                                               ; preds = %48, %37
  %54 = phi i64 [ %52, %48 ], [ %46, %37 ]
  store i64 %54, i64* %45, align 8
  br label %593

55:                                               ; preds = %5
  %56 = bitcast %"class.std::__1::vector.119"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #15
  %57 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %6, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %6, i64 0, i32 0, i32 1
  %59 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %59, i64 0, i32 1, i32 1
  %61 = bitcast %"class.std::__1::vector.119"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 -86, i64 24, i1 false)
  %62 = load i8, i8* %60, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %55
  %65 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %66 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* align 8 %66, i64 24, i1 false) #15
  br label %244

67:                                               ; preds = %55
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i16*, i16** %68, align 8
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %71, 11
  br i1 %72, label %73, label %78

73:                                               ; preds = %67
  %74 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %75 = trunc i64 %71 to i8
  %76 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %76, i64 0, i32 1, i32 1
  store i8 %75, i8* %77, align 1
  br label %95

78:                                               ; preds = %67
  %79 = icmp ugt i64 %71, 9223372036854775791
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %81) #16
  unreachable

82:                                               ; preds = %78
  %83 = add nuw nsw i64 %71, 8
  %84 = and i64 %83, -8
  %85 = icmp slt i64 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %82
  tail call void @abort() #16
  unreachable

87:                                               ; preds = %82
  %88 = shl i64 %84, 1
  %89 = tail call i8* @_Znwm(i64 %88) #17
  %90 = bitcast i8* %89 to i16*
  %91 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  store i8* %89, i8** %91, align 8
  %92 = or i64 %84, -9223372036854775808
  %93 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %92, i64* %93, align 8
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %71, i64* %94, align 8
  br label %95

95:                                               ; preds = %87, %73
  %96 = phi i16* [ %74, %73 ], [ %90, %87 ]
  %97 = add nuw nsw i64 %71, 1
  %98 = add i64 %71, 1
  %99 = icmp ult i64 %98, 16
  br i1 %99, label %189, label %100

100:                                              ; preds = %95
  %101 = add i64 %71, 1
  %102 = getelementptr i16, i16* %96, i64 %101
  %103 = getelementptr i16, i16* %69, i64 %101
  %104 = icmp ult i16* %96, %103
  %105 = icmp ult i16* %69, %102
  %106 = and i1 %104, %105
  br i1 %106, label %189, label %107

107:                                              ; preds = %100
  %108 = and i64 %98, -16
  %109 = sub i64 %97, %108
  %110 = getelementptr i16, i16* %69, i64 %108
  %111 = getelementptr i16, i16* %96, i64 %108
  %112 = add i64 %108, -16
  %113 = lshr exact i64 %112, 4
  %114 = add nuw nsw i64 %113, 1
  %115 = and i64 %114, 3
  %116 = icmp ult i64 %112, 48
  br i1 %116, label %168, label %117

117:                                              ; preds = %107
  %118 = sub nsw i64 %114, %115
  br label %119

119:                                              ; preds = %119, %117
  %120 = phi i64 [ 0, %117 ], [ %165, %119 ]
  %121 = phi i64 [ %118, %117 ], [ %166, %119 ]
  %122 = getelementptr i16, i16* %69, i64 %120
  %123 = getelementptr i16, i16* %96, i64 %120
  %124 = bitcast i16* %122 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !2
  %126 = getelementptr i16, i16* %122, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2, !alias.scope !2
  %129 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %129, align 2, !alias.scope !5, !noalias !2
  %130 = getelementptr i16, i16* %123, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %131, align 2, !alias.scope !5, !noalias !2
  %132 = or i64 %120, 16
  %133 = getelementptr i16, i16* %69, i64 %132
  %134 = getelementptr i16, i16* %96, i64 %132
  %135 = bitcast i16* %133 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2, !alias.scope !2
  %137 = getelementptr i16, i16* %133, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2, !alias.scope !2
  %140 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %140, align 2, !alias.scope !5, !noalias !2
  %141 = getelementptr i16, i16* %134, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %142, align 2, !alias.scope !5, !noalias !2
  %143 = or i64 %120, 32
  %144 = getelementptr i16, i16* %69, i64 %143
  %145 = getelementptr i16, i16* %96, i64 %143
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2, !alias.scope !2
  %148 = getelementptr i16, i16* %144, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2, !alias.scope !2
  %151 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %151, align 2, !alias.scope !5, !noalias !2
  %152 = getelementptr i16, i16* %145, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %153, align 2, !alias.scope !5, !noalias !2
  %154 = or i64 %120, 48
  %155 = getelementptr i16, i16* %69, i64 %154
  %156 = getelementptr i16, i16* %96, i64 %154
  %157 = bitcast i16* %155 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !2
  %159 = getelementptr i16, i16* %155, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !2
  %162 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %162, align 2, !alias.scope !5, !noalias !2
  %163 = getelementptr i16, i16* %156, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %164, align 2, !alias.scope !5, !noalias !2
  %165 = add i64 %120, 64
  %166 = add i64 %121, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %119, !llvm.loop !7

168:                                              ; preds = %119, %107
  %169 = phi i64 [ 0, %107 ], [ %165, %119 ]
  %170 = icmp eq i64 %115, 0
  br i1 %170, label %187, label %171

171:                                              ; preds = %168, %171
  %172 = phi i64 [ %184, %171 ], [ %169, %168 ]
  %173 = phi i64 [ %185, %171 ], [ %115, %168 ]
  %174 = getelementptr i16, i16* %69, i64 %172
  %175 = getelementptr i16, i16* %96, i64 %172
  %176 = bitcast i16* %174 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !2
  %178 = getelementptr i16, i16* %174, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !2
  %181 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %181, align 2, !alias.scope !5, !noalias !2
  %182 = getelementptr i16, i16* %175, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %183, align 2, !alias.scope !5, !noalias !2
  %184 = add i64 %172, 16
  %185 = add i64 %173, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %171, !llvm.loop !9

187:                                              ; preds = %171, %168
  %188 = icmp eq i64 %98, %108
  br i1 %188, label %242, label %189

189:                                              ; preds = %187, %100, %95
  %190 = phi i64 [ %97, %100 ], [ %97, %95 ], [ %109, %187 ]
  %191 = phi i16* [ %69, %100 ], [ %69, %95 ], [ %110, %187 ]
  %192 = phi i16* [ %96, %100 ], [ %96, %95 ], [ %111, %187 ]
  %193 = add i64 %190, -1
  %194 = and i64 %190, 7
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %207, label %196

196:                                              ; preds = %189, %196
  %197 = phi i64 [ %202, %196 ], [ %190, %189 ]
  %198 = phi i16* [ %204, %196 ], [ %191, %189 ]
  %199 = phi i16* [ %203, %196 ], [ %192, %189 ]
  %200 = phi i64 [ %205, %196 ], [ %194, %189 ]
  %201 = load i16, i16* %198, align 2
  store i16 %201, i16* %199, align 2
  %202 = add i64 %197, -1
  %203 = getelementptr inbounds i16, i16* %199, i64 1
  %204 = getelementptr inbounds i16, i16* %198, i64 1
  %205 = add i64 %200, -1
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %196, !llvm.loop !11

207:                                              ; preds = %196, %189
  %208 = phi i64 [ %190, %189 ], [ %202, %196 ]
  %209 = phi i16* [ %191, %189 ], [ %204, %196 ]
  %210 = phi i16* [ %192, %189 ], [ %203, %196 ]
  %211 = icmp ult i64 %193, 7
  br i1 %211, label %242, label %212

212:                                              ; preds = %207, %212
  %213 = phi i64 [ %238, %212 ], [ %208, %207 ]
  %214 = phi i16* [ %240, %212 ], [ %209, %207 ]
  %215 = phi i16* [ %239, %212 ], [ %210, %207 ]
  %216 = load i16, i16* %214, align 2
  store i16 %216, i16* %215, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 1
  %218 = getelementptr inbounds i16, i16* %214, i64 1
  %219 = load i16, i16* %218, align 2
  store i16 %219, i16* %217, align 2
  %220 = getelementptr inbounds i16, i16* %215, i64 2
  %221 = getelementptr inbounds i16, i16* %214, i64 2
  %222 = load i16, i16* %221, align 2
  store i16 %222, i16* %220, align 2
  %223 = getelementptr inbounds i16, i16* %215, i64 3
  %224 = getelementptr inbounds i16, i16* %214, i64 3
  %225 = load i16, i16* %224, align 2
  store i16 %225, i16* %223, align 2
  %226 = getelementptr inbounds i16, i16* %215, i64 4
  %227 = getelementptr inbounds i16, i16* %214, i64 4
  %228 = load i16, i16* %227, align 2
  store i16 %228, i16* %226, align 2
  %229 = getelementptr inbounds i16, i16* %215, i64 5
  %230 = getelementptr inbounds i16, i16* %214, i64 5
  %231 = load i16, i16* %230, align 2
  store i16 %231, i16* %229, align 2
  %232 = getelementptr inbounds i16, i16* %215, i64 6
  %233 = getelementptr inbounds i16, i16* %214, i64 6
  %234 = load i16, i16* %233, align 2
  store i16 %234, i16* %232, align 2
  %235 = getelementptr inbounds i16, i16* %215, i64 7
  %236 = getelementptr inbounds i16, i16* %214, i64 7
  %237 = load i16, i16* %236, align 2
  store i16 %237, i16* %235, align 2
  %238 = add i64 %213, -8
  %239 = getelementptr inbounds i16, i16* %215, i64 8
  %240 = getelementptr inbounds i16, i16* %214, i64 8
  %241 = icmp eq i64 %238, 0
  br i1 %241, label %242, label %212, !llvm.loop !12

242:                                              ; preds = %207, %212, %187
  %243 = load i8, i8* %15, align 1
  br label %244

244:                                              ; preds = %242, %64
  %245 = phi i8 [ %243, %242 ], [ %16, %64 ]
  %246 = icmp slt i8 %245, 0
  br i1 %246, label %250, label %247

247:                                              ; preds = %244
  %248 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %249 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %248, i8* align 8 %249, i64 24, i1 false) #15
  br label %424

250:                                              ; preds = %244
  %251 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %252 = load i16*, i16** %251, align 8
  %253 = load i64, i64* %18, align 8
  %254 = icmp ult i64 %253, 11
  br i1 %254, label %255, label %260

255:                                              ; preds = %250
  %256 = bitcast %"class.std::__1::basic_string"* %8 to i16*
  %257 = trunc i64 %253 to i8
  %258 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %259 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %258, i64 0, i32 1, i32 1
  store i8 %257, i8* %259, align 1
  br label %277

260:                                              ; preds = %250
  %261 = icmp ugt i64 %253, 9223372036854775791
  br i1 %261, label %262, label %264

262:                                              ; preds = %260
  %263 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %263) #16
  unreachable

264:                                              ; preds = %260
  %265 = add nuw nsw i64 %253, 8
  %266 = and i64 %265, -8
  %267 = icmp slt i64 %266, 0
  br i1 %267, label %268, label %269

268:                                              ; preds = %264
  tail call void @abort() #16
  unreachable

269:                                              ; preds = %264
  %270 = shl i64 %266, 1
  %271 = tail call i8* @_Znwm(i64 %270) #17
  %272 = bitcast i8* %271 to i16*
  %273 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  store i8* %271, i8** %273, align 8
  %274 = or i64 %266, -9223372036854775808
  %275 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %274, i64* %275, align 8
  %276 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %253, i64* %276, align 8
  br label %277

277:                                              ; preds = %269, %255
  %278 = phi i16* [ %256, %255 ], [ %272, %269 ]
  %279 = add nuw nsw i64 %253, 1
  %280 = add i64 %253, 1
  %281 = icmp ult i64 %280, 16
  br i1 %281, label %371, label %282

282:                                              ; preds = %277
  %283 = add i64 %253, 1
  %284 = getelementptr i16, i16* %278, i64 %283
  %285 = getelementptr i16, i16* %252, i64 %283
  %286 = icmp ult i16* %278, %285
  %287 = icmp ult i16* %252, %284
  %288 = and i1 %286, %287
  br i1 %288, label %371, label %289

289:                                              ; preds = %282
  %290 = and i64 %280, -16
  %291 = sub i64 %279, %290
  %292 = getelementptr i16, i16* %252, i64 %290
  %293 = getelementptr i16, i16* %278, i64 %290
  %294 = add i64 %290, -16
  %295 = lshr exact i64 %294, 4
  %296 = add nuw nsw i64 %295, 1
  %297 = and i64 %296, 3
  %298 = icmp ult i64 %294, 48
  br i1 %298, label %350, label %299

299:                                              ; preds = %289
  %300 = sub nsw i64 %296, %297
  br label %301

301:                                              ; preds = %301, %299
  %302 = phi i64 [ 0, %299 ], [ %347, %301 ]
  %303 = phi i64 [ %300, %299 ], [ %348, %301 ]
  %304 = getelementptr i16, i16* %252, i64 %302
  %305 = getelementptr i16, i16* %278, i64 %302
  %306 = bitcast i16* %304 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !13
  %308 = getelementptr i16, i16* %304, i64 8
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 2, !alias.scope !13
  %311 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %307, <8 x i16>* %311, align 2, !alias.scope !16, !noalias !13
  %312 = getelementptr i16, i16* %305, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %313, align 2, !alias.scope !16, !noalias !13
  %314 = or i64 %302, 16
  %315 = getelementptr i16, i16* %252, i64 %314
  %316 = getelementptr i16, i16* %278, i64 %314
  %317 = bitcast i16* %315 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !13
  %319 = getelementptr i16, i16* %315, i64 8
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 2, !alias.scope !13
  %322 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %322, align 2, !alias.scope !16, !noalias !13
  %323 = getelementptr i16, i16* %316, i64 8
  %324 = bitcast i16* %323 to <8 x i16>*
  store <8 x i16> %321, <8 x i16>* %324, align 2, !alias.scope !16, !noalias !13
  %325 = or i64 %302, 32
  %326 = getelementptr i16, i16* %252, i64 %325
  %327 = getelementptr i16, i16* %278, i64 %325
  %328 = bitcast i16* %326 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 2, !alias.scope !13
  %330 = getelementptr i16, i16* %326, i64 8
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !13
  %333 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %333, align 2, !alias.scope !16, !noalias !13
  %334 = getelementptr i16, i16* %327, i64 8
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %335, align 2, !alias.scope !16, !noalias !13
  %336 = or i64 %302, 48
  %337 = getelementptr i16, i16* %252, i64 %336
  %338 = getelementptr i16, i16* %278, i64 %336
  %339 = bitcast i16* %337 to <8 x i16>*
  %340 = load <8 x i16>, <8 x i16>* %339, align 2, !alias.scope !13
  %341 = getelementptr i16, i16* %337, i64 8
  %342 = bitcast i16* %341 to <8 x i16>*
  %343 = load <8 x i16>, <8 x i16>* %342, align 2, !alias.scope !13
  %344 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %340, <8 x i16>* %344, align 2, !alias.scope !16, !noalias !13
  %345 = getelementptr i16, i16* %338, i64 8
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %343, <8 x i16>* %346, align 2, !alias.scope !16, !noalias !13
  %347 = add i64 %302, 64
  %348 = add i64 %303, -4
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %301, !llvm.loop !18

350:                                              ; preds = %301, %289
  %351 = phi i64 [ 0, %289 ], [ %347, %301 ]
  %352 = icmp eq i64 %297, 0
  br i1 %352, label %369, label %353

353:                                              ; preds = %350, %353
  %354 = phi i64 [ %366, %353 ], [ %351, %350 ]
  %355 = phi i64 [ %367, %353 ], [ %297, %350 ]
  %356 = getelementptr i16, i16* %252, i64 %354
  %357 = getelementptr i16, i16* %278, i64 %354
  %358 = bitcast i16* %356 to <8 x i16>*
  %359 = load <8 x i16>, <8 x i16>* %358, align 2, !alias.scope !13
  %360 = getelementptr i16, i16* %356, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  %362 = load <8 x i16>, <8 x i16>* %361, align 2, !alias.scope !13
  %363 = bitcast i16* %357 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %363, align 2, !alias.scope !16, !noalias !13
  %364 = getelementptr i16, i16* %357, i64 8
  %365 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %362, <8 x i16>* %365, align 2, !alias.scope !16, !noalias !13
  %366 = add i64 %354, 16
  %367 = add i64 %355, -1
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %353, !llvm.loop !19

369:                                              ; preds = %353, %350
  %370 = icmp eq i64 %280, %290
  br i1 %370, label %424, label %371

371:                                              ; preds = %369, %282, %277
  %372 = phi i64 [ %279, %282 ], [ %279, %277 ], [ %291, %369 ]
  %373 = phi i16* [ %252, %282 ], [ %252, %277 ], [ %292, %369 ]
  %374 = phi i16* [ %278, %282 ], [ %278, %277 ], [ %293, %369 ]
  %375 = add i64 %372, -1
  %376 = and i64 %372, 7
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %389, label %378

378:                                              ; preds = %371, %378
  %379 = phi i64 [ %384, %378 ], [ %372, %371 ]
  %380 = phi i16* [ %386, %378 ], [ %373, %371 ]
  %381 = phi i16* [ %385, %378 ], [ %374, %371 ]
  %382 = phi i64 [ %387, %378 ], [ %376, %371 ]
  %383 = load i16, i16* %380, align 2
  store i16 %383, i16* %381, align 2
  %384 = add i64 %379, -1
  %385 = getelementptr inbounds i16, i16* %381, i64 1
  %386 = getelementptr inbounds i16, i16* %380, i64 1
  %387 = add i64 %382, -1
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %389, label %378, !llvm.loop !20

389:                                              ; preds = %378, %371
  %390 = phi i64 [ %372, %371 ], [ %384, %378 ]
  %391 = phi i16* [ %373, %371 ], [ %386, %378 ]
  %392 = phi i16* [ %374, %371 ], [ %385, %378 ]
  %393 = icmp ult i64 %375, 7
  br i1 %393, label %424, label %394

394:                                              ; preds = %389, %394
  %395 = phi i64 [ %420, %394 ], [ %390, %389 ]
  %396 = phi i16* [ %422, %394 ], [ %391, %389 ]
  %397 = phi i16* [ %421, %394 ], [ %392, %389 ]
  %398 = load i16, i16* %396, align 2
  store i16 %398, i16* %397, align 2
  %399 = getelementptr inbounds i16, i16* %397, i64 1
  %400 = getelementptr inbounds i16, i16* %396, i64 1
  %401 = load i16, i16* %400, align 2
  store i16 %401, i16* %399, align 2
  %402 = getelementptr inbounds i16, i16* %397, i64 2
  %403 = getelementptr inbounds i16, i16* %396, i64 2
  %404 = load i16, i16* %403, align 2
  store i16 %404, i16* %402, align 2
  %405 = getelementptr inbounds i16, i16* %397, i64 3
  %406 = getelementptr inbounds i16, i16* %396, i64 3
  %407 = load i16, i16* %406, align 2
  store i16 %407, i16* %405, align 2
  %408 = getelementptr inbounds i16, i16* %397, i64 4
  %409 = getelementptr inbounds i16, i16* %396, i64 4
  %410 = load i16, i16* %409, align 2
  store i16 %410, i16* %408, align 2
  %411 = getelementptr inbounds i16, i16* %397, i64 5
  %412 = getelementptr inbounds i16, i16* %396, i64 5
  %413 = load i16, i16* %412, align 2
  store i16 %413, i16* %411, align 2
  %414 = getelementptr inbounds i16, i16* %397, i64 6
  %415 = getelementptr inbounds i16, i16* %396, i64 6
  %416 = load i16, i16* %415, align 2
  store i16 %416, i16* %414, align 2
  %417 = getelementptr inbounds i16, i16* %397, i64 7
  %418 = getelementptr inbounds i16, i16* %396, i64 7
  %419 = load i16, i16* %418, align 2
  store i16 %419, i16* %417, align 2
  %420 = add i64 %395, -8
  %421 = getelementptr inbounds i16, i16* %397, i64 8
  %422 = getelementptr inbounds i16, i16* %396, i64 8
  %423 = icmp eq i64 %420, 0
  br i1 %423, label %424, label %394, !llvm.loop !21

424:                                              ; preds = %389, %394, %369, %247
  call void @_Z15FindTermMatchesNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES5_bb(%"class.std::__1::vector.119"* nonnull sret %6, %"class.std::__1::basic_string"* nonnull %7, %"class.std::__1::basic_string"* nonnull %8, i1 zeroext true, i1 zeroext false) #15
  %425 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %426 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %425, i64 0, i32 1, i32 1
  %427 = load i8, i8* %426, align 1
  %428 = icmp slt i8 %427, 0
  br i1 %428, label %429, label %432

429:                                              ; preds = %424
  %430 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %431 = load i8*, i8** %430, align 8
  call void @_ZdlPv(i8* %431) #17
  br label %432

432:                                              ; preds = %424, %429
  %433 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %434 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %433, i64 0, i32 1, i32 1
  %435 = load i8, i8* %434, align 1
  %436 = icmp slt i8 %435, 0
  br i1 %436, label %437, label %440

437:                                              ; preds = %432
  %438 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %439 = load i8*, i8** %438, align 8
  call void @_ZdlPv(i8* %439) #17
  br label %440

440:                                              ; preds = %432, %437
  %441 = bitcast %"class.std::__1::vector.26"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %441) #15
  %442 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %9, i64 0, i32 0, i32 0
  %443 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %9, i64 0, i32 0, i32 1
  %444 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %441, i8 0, i64 24, i1 false) #15
  br i1 %3, label %445, label %511

445:                                              ; preds = %440
  %446 = bitcast %"class.std::__1::vector.26"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %446) #15
  %447 = bitcast %"class.std::__1::vector.119"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %447, i8 0, i64 24, i1 false) #15
  %448 = bitcast %struct.TermMatch** %58 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = bitcast %"class.std::__1::vector.119"* %6 to i64*
  %451 = load i64, i64* %450, align 8
  %452 = sub i64 %449, %451
  %453 = sdiv exact i64 %452, 24
  %454 = icmp eq i64 %452, 0
  br i1 %454, label %477, label %455

455:                                              ; preds = %445
  %456 = icmp ugt i64 %453, 768614336404564650
  br i1 %456, label %457, label %459

457:                                              ; preds = %455
  %458 = bitcast %"class.std::__1::vector.119"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %458) #16
  unreachable

459:                                              ; preds = %455
  %460 = call i8* @_Znwm(i64 %452) #17
  %461 = bitcast i8* %460 to %struct.TermMatch*
  %462 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %11, i64 0, i32 0, i32 1
  %463 = bitcast %struct.TermMatch** %462 to i8**
  store i8* %460, i8** %463, align 8
  %464 = bitcast %"class.std::__1::vector.119"* %11 to i8**
  store i8* %460, i8** %464, align 8
  %465 = getelementptr inbounds %struct.TermMatch, %struct.TermMatch* %461, i64 %453
  %466 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  store %struct.TermMatch* %465, %struct.TermMatch** %466, align 8
  %467 = bitcast %struct.TermMatch** %462 to i64*
  %468 = ptrtoint i8* %460 to i64
  %469 = icmp sgt i64 %452, 0
  br i1 %469, label %470, label %475

470:                                              ; preds = %459
  %471 = udiv exact i64 %452, 24
  %472 = inttoptr i64 %451 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %460, i8* align 8 %472, i64 %452, i1 false) #15
  %473 = getelementptr inbounds %struct.TermMatch, %struct.TermMatch* %461, i64 %471
  %474 = ptrtoint %struct.TermMatch* %473 to i64
  br label %475

475:                                              ; preds = %470, %459
  %476 = phi i64 [ %474, %470 ], [ %468, %459 ]
  store i64 %476, i64* %467, align 8
  br label %477

477:                                              ; preds = %445, %475
  %478 = load i8, i8* %15, align 1
  %479 = icmp slt i8 %478, 0
  %480 = load i64, i64* %18, align 8
  %481 = zext i8 %478 to i64
  %482 = select i1 %479, i64 %480, i64 %481
  call void @_Z19ClassifyTermMatchesNSt3__16vectorI9TermMatchNS_9allocatorIS1_EEEEmii(%"class.std::__1::vector.26"* nonnull sret %10, %"class.std::__1::vector.119"* nonnull %11, i64 %482, i32 0, i32 2) #15
  %483 = load %"struct.AutocompleteMatch::ACMatchClassification"*, %"struct.AutocompleteMatch::ACMatchClassification"** %442, align 8
  %484 = icmp eq %"struct.AutocompleteMatch::ACMatchClassification"* %483, null
  br i1 %484, label %485, label %487

485:                                              ; preds = %477
  %486 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %443 to i64*
  br label %491

487:                                              ; preds = %477
  %488 = ptrtoint %"struct.AutocompleteMatch::ACMatchClassification"* %483 to i64
  %489 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %443 to i64*
  store i64 %488, i64* %489, align 8
  %490 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"* %483 to i8*
  call void @_ZdlPv(i8* %490) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %441, i8 0, i64 24, i1 false) #15
  br label %491

491:                                              ; preds = %485, %487
  %492 = phi i64* [ %486, %485 ], [ %489, %487 ]
  %493 = bitcast %"class.std::__1::vector.26"* %10 to i64*
  %494 = load i64, i64* %493, align 8
  %495 = bitcast %"class.std::__1::vector.26"* %9 to i64*
  store i64 %494, i64* %495, align 8
  %496 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %10, i64 0, i32 0, i32 1
  %497 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %496 to i64*
  %498 = load i64, i64* %497, align 8
  store i64 %498, i64* %492, align 8
  %499 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %500 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %499 to i64*
  %501 = load i64, i64* %500, align 8
  %502 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %444 to i64*
  store i64 %501, i64* %502, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %446, i8 0, i64 24, i1 false) #15
  %503 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %11, i64 0, i32 0, i32 0
  %504 = load %struct.TermMatch*, %struct.TermMatch** %503, align 8
  %505 = icmp eq %struct.TermMatch* %504, null
  br i1 %505, label %577, label %506

506:                                              ; preds = %491
  %507 = bitcast %struct.TermMatch* %504 to i8*
  %508 = ptrtoint %struct.TermMatch* %504 to i64
  %509 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %11, i64 0, i32 0, i32 1
  %510 = bitcast %struct.TermMatch** %509 to i64*
  store i64 %508, i64* %510, align 8
  call void @_ZdlPv(i8* %507) #17
  br label %577

511:                                              ; preds = %440
  %512 = bitcast %"class.std::__1::vector.26"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %512) #15
  %513 = bitcast %"class.std::__1::vector.119"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %513, i8 0, i64 24, i1 false) #15
  %514 = bitcast %struct.TermMatch** %58 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = bitcast %"class.std::__1::vector.119"* %6 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = sub i64 %515, %517
  %519 = sdiv exact i64 %518, 24
  %520 = icmp eq i64 %518, 0
  br i1 %520, label %543, label %521

521:                                              ; preds = %511
  %522 = icmp ugt i64 %519, 768614336404564650
  br i1 %522, label %523, label %525

523:                                              ; preds = %521
  %524 = bitcast %"class.std::__1::vector.119"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %524) #16
  unreachable

525:                                              ; preds = %521
  %526 = call i8* @_Znwm(i64 %518) #17
  %527 = bitcast i8* %526 to %struct.TermMatch*
  %528 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %13, i64 0, i32 0, i32 1
  %529 = bitcast %struct.TermMatch** %528 to i8**
  store i8* %526, i8** %529, align 8
  %530 = bitcast %"class.std::__1::vector.119"* %13 to i8**
  store i8* %526, i8** %530, align 8
  %531 = getelementptr inbounds %struct.TermMatch, %struct.TermMatch* %527, i64 %519
  %532 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  store %struct.TermMatch* %531, %struct.TermMatch** %532, align 8
  %533 = bitcast %struct.TermMatch** %528 to i64*
  %534 = ptrtoint i8* %526 to i64
  %535 = icmp sgt i64 %518, 0
  br i1 %535, label %536, label %541

536:                                              ; preds = %525
  %537 = udiv exact i64 %518, 24
  %538 = inttoptr i64 %517 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %526, i8* align 8 %538, i64 %518, i1 false) #15
  %539 = getelementptr inbounds %struct.TermMatch, %struct.TermMatch* %527, i64 %537
  %540 = ptrtoint %struct.TermMatch* %539 to i64
  br label %541

541:                                              ; preds = %536, %525
  %542 = phi i64 [ %540, %536 ], [ %534, %525 ]
  store i64 %542, i64* %533, align 8
  br label %543

543:                                              ; preds = %511, %541
  %544 = load i8, i8* %15, align 1
  %545 = icmp slt i8 %544, 0
  %546 = load i64, i64* %18, align 8
  %547 = zext i8 %544 to i64
  %548 = select i1 %545, i64 %546, i64 %547
  call void @_Z19ClassifyTermMatchesNSt3__16vectorI9TermMatchNS_9allocatorIS1_EEEEmii(%"class.std::__1::vector.26"* nonnull sret %12, %"class.std::__1::vector.119"* nonnull %13, i64 %548, i32 2, i32 0) #15
  %549 = load %"struct.AutocompleteMatch::ACMatchClassification"*, %"struct.AutocompleteMatch::ACMatchClassification"** %442, align 8
  %550 = icmp eq %"struct.AutocompleteMatch::ACMatchClassification"* %549, null
  br i1 %550, label %551, label %553

551:                                              ; preds = %543
  %552 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %443 to i64*
  br label %557

553:                                              ; preds = %543
  %554 = ptrtoint %"struct.AutocompleteMatch::ACMatchClassification"* %549 to i64
  %555 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %443 to i64*
  store i64 %554, i64* %555, align 8
  %556 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"* %549 to i8*
  call void @_ZdlPv(i8* %556) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %441, i8 0, i64 24, i1 false) #15
  br label %557

557:                                              ; preds = %551, %553
  %558 = phi i64* [ %552, %551 ], [ %555, %553 ]
  %559 = bitcast %"class.std::__1::vector.26"* %12 to i64*
  %560 = load i64, i64* %559, align 8
  %561 = bitcast %"class.std::__1::vector.26"* %9 to i64*
  store i64 %560, i64* %561, align 8
  %562 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %12, i64 0, i32 0, i32 1
  %563 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %562 to i64*
  %564 = load i64, i64* %563, align 8
  store i64 %564, i64* %558, align 8
  %565 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  %566 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %565 to i64*
  %567 = load i64, i64* %566, align 8
  %568 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %444 to i64*
  store i64 %567, i64* %568, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %512, i8 0, i64 24, i1 false) #15
  %569 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %13, i64 0, i32 0, i32 0
  %570 = load %struct.TermMatch*, %struct.TermMatch** %569, align 8
  %571 = icmp eq %struct.TermMatch* %570, null
  br i1 %571, label %577, label %572

572:                                              ; preds = %557
  %573 = bitcast %struct.TermMatch* %570 to i8*
  %574 = ptrtoint %struct.TermMatch* %570 to i64
  %575 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %13, i64 0, i32 0, i32 1
  %576 = bitcast %struct.TermMatch** %575 to i64*
  store i64 %574, i64* %576, align 8
  call void @_ZdlPv(i8* %573) #17
  br label %577

577:                                              ; preds = %572, %557, %506, %491
  %578 = phi i8* [ %446, %491 ], [ %446, %506 ], [ %512, %557 ], [ %512, %572 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %578) #15
  call void @_ZN17AutocompleteMatch20MergeClassificationsERKNSt3__16vectorINS_21ACMatchClassificationENS0_9allocatorIS2_EEEES7_(%"class.std::__1::vector.26"* sret %0, %"class.std::__1::vector.26"* dereferenceable(24) %4, %"class.std::__1::vector.26"* nonnull dereferenceable(24) %9) #15
  %579 = load %"struct.AutocompleteMatch::ACMatchClassification"*, %"struct.AutocompleteMatch::ACMatchClassification"** %442, align 8
  %580 = icmp eq %"struct.AutocompleteMatch::ACMatchClassification"* %579, null
  br i1 %580, label %585, label %581

581:                                              ; preds = %577
  %582 = ptrtoint %"struct.AutocompleteMatch::ACMatchClassification"* %579 to i64
  %583 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"** %443 to i64*
  store i64 %582, i64* %583, align 8
  %584 = bitcast %"struct.AutocompleteMatch::ACMatchClassification"* %579 to i8*
  call void @_ZdlPv(i8* %584) #17
  br label %585

585:                                              ; preds = %577, %581
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %441) #15
  %586 = load %struct.TermMatch*, %struct.TermMatch** %57, align 8
  %587 = icmp eq %struct.TermMatch* %586, null
  br i1 %587, label %592, label %588

588:                                              ; preds = %585
  %589 = ptrtoint %struct.TermMatch* %586 to i64
  %590 = bitcast %struct.TermMatch** %58 to i64*
  store i64 %589, i64* %590, align 8
  %591 = bitcast %struct.TermMatch* %586 to i8*
  call void @_ZdlPv(i8* %591) #17
  br label %592

592:                                              ; preds = %585, %588
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #15
  br label %593

593:                                              ; preds = %53, %23, %592
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_Z15FindTermMatchesNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES5_bb(%"class.std::__1::vector.119"* sret, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, i1 zeroext, i1 zeroext) local_unnamed_addr #1

declare void @_Z19ClassifyTermMatchesNSt3__16vectorI9TermMatchNS_9allocatorIS1_EEEEmii(%"class.std::__1::vector.26"* sret, %"class.std::__1::vector.119"*, i64, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN17AutocompleteMatch20MergeClassificationsERKNSt3__16vectorINS_21ACMatchClassificationENS0_9allocatorIS2_EEEES7_(%"class.std::__1::vector.26"* sret, %"class.std::__1::vector.26"* dereferenceable(24), %"class.std::__1::vector.26"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK20AutocompleteProvider26AsOmniboxEventProviderTypeEv(%class.AutocompleteProvider* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %19 [
    i32 1, label %20
    i32 2, label %4
    i32 256, label %5
    i32 512, label %6
    i32 4, label %7
    i32 8, label %8
    i32 16, label %9
    i32 1024, label %10
    i32 32, label %11
    i32 64, label %12
    i32 128, label %13
    i32 2048, label %14
    i32 4096, label %15
    i32 8192, label %16
    i32 16384, label %17
    i32 32768, label %18
  ]

4:                                                ; preds = %1
  br label %20

5:                                                ; preds = %1
  br label %20

6:                                                ; preds = %1
  br label %20

7:                                                ; preds = %1
  br label %20

8:                                                ; preds = %1
  br label %20

9:                                                ; preds = %1
  br label %20

10:                                               ; preds = %1
  br label %20

11:                                               ; preds = %1
  br label %20

12:                                               ; preds = %1
  br label %20

13:                                               ; preds = %1
  br label %20

14:                                               ; preds = %1
  br label %20

15:                                               ; preds = %1
  br label %20

16:                                               ; preds = %1
  br label %20

17:                                               ; preds = %1
  br label %20

18:                                               ; preds = %1
  br label %20

19:                                               ; preds = %1
  br label %20

20:                                               ; preds = %1, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4
  %21 = phi i32 [ 0, %19 ], [ 4, %18 ], [ 11, %17 ], [ 11, %16 ], [ 19, %15 ], [ 18, %14 ], [ 11, %13 ], [ 7, %12 ], [ 4, %11 ], [ 17, %10 ], [ 5, %9 ], [ 1, %8 ], [ 3, %7 ], [ 16, %6 ], [ 14, %5 ], [ 6, %4 ], [ 10, %1 ]
  ret i32 %21
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN20AutocompleteProvider11DeleteMatchERK17AutocompleteMatch(%class.AutocompleteProvider* nocapture, %struct.AutocompleteMatch* nocapture dereferenceable(1600)) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK20AutocompleteProvider15AddProviderInfoEPNSt3__16vectorIN7metrics30OmniboxEventProto_ProviderInfoENS0_9allocatorIS3_EEEE(%class.AutocompleteProvider* nocapture, %"class.std::__1::vector.126"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN20AutocompleteProvider12ResetSessionEv(%class.AutocompleteProvider* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK20AutocompleteProvider19EstimateMemoryUsageEv(%class.AutocompleteProvider* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 3
  %3 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.AutocompleteMatch** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = inttoptr i64 %7 to %struct.AutocompleteMatch*
  %10 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 3, i32 0, i32 1
  %11 = load %struct.AutocompleteMatch*, %struct.AutocompleteMatch** %10, align 8
  %12 = icmp eq %struct.AutocompleteMatch* %11, %9
  br i1 %12, label %20, label %13

13:                                               ; preds = %1, %13
  %14 = phi i64 [ %17, %13 ], [ 0, %1 ]
  %15 = phi %struct.AutocompleteMatch* [ %18, %13 ], [ %9, %1 ]
  %16 = tail call i64 @_ZNK17AutocompleteMatch19EstimateMemoryUsageEv(%struct.AutocompleteMatch* %15) #15
  %17 = add i64 %16, %14
  %18 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %15, i64 1
  %19 = icmp eq %struct.AutocompleteMatch* %18, %11
  br i1 %19, label %20, label %13

20:                                               ; preds = %13, %1
  %21 = phi i64 [ 0, %1 ], [ %17, %13 ]
  %22 = add i64 %8, %21
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20AutocompleteProviderD2Ev(%class.AutocompleteProvider* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV20AutocompleteProvider, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 4
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %6 = load %struct.AutocompleteMatch*, %struct.AutocompleteMatch** %5, align 8
  %7 = icmp eq %struct.AutocompleteMatch* %6, null
  br i1 %7, label %22, label %8

8:                                                ; preds = %1
  %9 = bitcast %struct.AutocompleteMatch* %6 to i8*
  %10 = getelementptr inbounds %class.AutocompleteProvider, %class.AutocompleteProvider* %0, i64 0, i32 3, i32 0, i32 1
  %11 = load %struct.AutocompleteMatch*, %struct.AutocompleteMatch** %10, align 8
  %12 = icmp eq %struct.AutocompleteMatch* %11, %6
  br i1 %12, label %20, label %13

13:                                               ; preds = %8, %13
  %14 = phi %struct.AutocompleteMatch* [ %15, %13 ], [ %11, %8 ]
  %15 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %14, i64 -1
  tail call void @_ZN17AutocompleteMatchD1Ev(%struct.AutocompleteMatch* %15) #15
  %16 = icmp eq %struct.AutocompleteMatch* %15, %6
  br i1 %16, label %17, label %13

17:                                               ; preds = %13
  %18 = bitcast %"class.std::__1::vector"* %4 to i8**
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %17, %8
  %21 = phi i8* [ %19, %17 ], [ %9, %8 ]
  store %struct.AutocompleteMatch* %6, %struct.AutocompleteMatch** %10, align 8
  tail call void @_ZdlPv(i8* %21) #17
  br label %22

22:                                               ; preds = %1, %20
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN20AutocompleteProviderD0Ev(%class.AutocompleteProvider* nocapture readnone) unnamed_addr #6 align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20AutocompleteProvider14FixupUserInputERK17AutocompleteInput(%"struct.std::__1::pair.139"* noalias sret, %class.AutocompleteInput* dereferenceable(512)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::pair.139", align 8
  %4 = alloca %class.GURL, align 8
  %5 = alloca %"class.std::__1::basic_string.14", align 8
  %6 = alloca %"class.std::__1::basic_string.14", align 8
  %7 = alloca %"class.std::__1::basic_string.14", align 8
  %8 = alloca %"class.std::__1::basic_string.14", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %3, i64 0, i32 1
  %14 = bitcast %class.AutocompleteInput* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  %20 = bitcast %class.AutocompleteInput* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false) #15
  br label %198

21:                                               ; preds = %2
  %22 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i16*, i16** %22, align 8
  %24 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %25, 11
  br i1 %26, label %27, label %32

27:                                               ; preds = %21
  %28 = bitcast %"class.std::__1::basic_string"* %13 to i16*
  %29 = trunc i64 %25 to i8
  %30 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %30, i64 0, i32 1, i32 1
  store i8 %29, i8* %31, align 1
  br label %49

32:                                               ; preds = %21
  %33 = icmp ugt i64 %25, 9223372036854775791
  br i1 %33, label %34, label %36

34:                                               ; preds = %32
  %35 = bitcast %"class.std::__1::basic_string"* %13 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %35) #16
  unreachable

36:                                               ; preds = %32
  %37 = add nuw nsw i64 %25, 8
  %38 = and i64 %37, -8
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  tail call void @abort() #16
  unreachable

41:                                               ; preds = %36
  %42 = shl i64 %38, 1
  %43 = tail call i8* @_Znwm(i64 %42) #17
  %44 = bitcast i8* %43 to i16*
  %45 = bitcast %"class.std::__1::basic_string"* %13 to i8**
  store i8* %43, i8** %45, align 8
  %46 = or i64 %38, -9223372036854775808
  %47 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %25, i64* %48, align 8
  br label %49

49:                                               ; preds = %41, %27
  %50 = phi i16* [ %28, %27 ], [ %44, %41 ]
  %51 = add nuw nsw i64 %25, 1
  %52 = add i64 %25, 1
  %53 = icmp ult i64 %52, 16
  br i1 %53, label %143, label %54

54:                                               ; preds = %49
  %55 = add i64 %25, 1
  %56 = getelementptr i16, i16* %50, i64 %55
  %57 = getelementptr i16, i16* %23, i64 %55
  %58 = icmp ult i16* %50, %57
  %59 = icmp ult i16* %23, %56
  %60 = and i1 %58, %59
  br i1 %60, label %143, label %61

61:                                               ; preds = %54
  %62 = and i64 %52, -16
  %63 = sub i64 %51, %62
  %64 = getelementptr i16, i16* %23, i64 %62
  %65 = getelementptr i16, i16* %50, i64 %62
  %66 = add i64 %62, -16
  %67 = lshr exact i64 %66, 4
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 48
  br i1 %70, label %122, label %71

71:                                               ; preds = %61
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i16, i16* %23, i64 %74
  %77 = getelementptr i16, i16* %50, i64 %74
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !22
  %80 = getelementptr i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !22
  %83 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !25, !noalias !22
  %84 = getelementptr i16, i16* %77, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !25, !noalias !22
  %86 = or i64 %74, 16
  %87 = getelementptr i16, i16* %23, i64 %86
  %88 = getelementptr i16, i16* %50, i64 %86
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !22
  %91 = getelementptr i16, i16* %87, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !22
  %94 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !25, !noalias !22
  %95 = getelementptr i16, i16* %88, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !25, !noalias !22
  %97 = or i64 %74, 32
  %98 = getelementptr i16, i16* %23, i64 %97
  %99 = getelementptr i16, i16* %50, i64 %97
  %100 = bitcast i16* %98 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !22
  %102 = getelementptr i16, i16* %98, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !22
  %105 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !25, !noalias !22
  %106 = getelementptr i16, i16* %99, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !25, !noalias !22
  %108 = or i64 %74, 48
  %109 = getelementptr i16, i16* %23, i64 %108
  %110 = getelementptr i16, i16* %50, i64 %108
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !22
  %113 = getelementptr i16, i16* %109, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !22
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !25, !noalias !22
  %117 = getelementptr i16, i16* %110, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !25, !noalias !22
  %119 = add i64 %74, 64
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !27

122:                                              ; preds = %73, %61
  %123 = phi i64 [ 0, %61 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i16, i16* %23, i64 %126
  %129 = getelementptr i16, i16* %50, i64 %126
  %130 = bitcast i16* %128 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !22
  %132 = getelementptr i16, i16* %128, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !22
  %135 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !25, !noalias !22
  %136 = getelementptr i16, i16* %129, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !25, !noalias !22
  %138 = add i64 %126, 16
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !28

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %52, %62
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %54, %49
  %144 = phi i64 [ %51, %54 ], [ %51, %49 ], [ %63, %141 ]
  %145 = phi i16* [ %23, %54 ], [ %23, %49 ], [ %64, %141 ]
  %146 = phi i16* [ %50, %54 ], [ %50, %49 ], [ %65, %141 ]
  %147 = add i64 %144, -1
  %148 = and i64 %144, 7
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %143, %150
  %151 = phi i64 [ %156, %150 ], [ %144, %143 ]
  %152 = phi i16* [ %158, %150 ], [ %145, %143 ]
  %153 = phi i16* [ %157, %150 ], [ %146, %143 ]
  %154 = phi i64 [ %159, %150 ], [ %148, %143 ]
  %155 = load i16, i16* %152, align 2
  store i16 %155, i16* %153, align 2
  %156 = add i64 %151, -1
  %157 = getelementptr inbounds i16, i16* %153, i64 1
  %158 = getelementptr inbounds i16, i16* %152, i64 1
  %159 = add i64 %154, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %150, !llvm.loop !29

161:                                              ; preds = %150, %143
  %162 = phi i64 [ %144, %143 ], [ %156, %150 ]
  %163 = phi i16* [ %145, %143 ], [ %158, %150 ]
  %164 = phi i16* [ %146, %143 ], [ %157, %150 ]
  %165 = icmp ult i64 %147, 7
  br i1 %165, label %196, label %166

166:                                              ; preds = %161, %166
  %167 = phi i64 [ %192, %166 ], [ %162, %161 ]
  %168 = phi i16* [ %194, %166 ], [ %163, %161 ]
  %169 = phi i16* [ %193, %166 ], [ %164, %161 ]
  %170 = load i16, i16* %168, align 2
  store i16 %170, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %169, i64 1
  %172 = getelementptr inbounds i16, i16* %168, i64 1
  %173 = load i16, i16* %172, align 2
  store i16 %173, i16* %171, align 2
  %174 = getelementptr inbounds i16, i16* %169, i64 2
  %175 = getelementptr inbounds i16, i16* %168, i64 2
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %169, i64 3
  %178 = getelementptr inbounds i16, i16* %168, i64 3
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %169, i64 4
  %181 = getelementptr inbounds i16, i16* %168, i64 4
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %169, i64 5
  %184 = getelementptr inbounds i16, i16* %168, i64 5
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %169, i64 6
  %187 = getelementptr inbounds i16, i16* %168, i64 6
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %169, i64 7
  %190 = getelementptr inbounds i16, i16* %168, i64 7
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = add i64 %167, -8
  %193 = getelementptr inbounds i16, i16* %169, i64 8
  %194 = getelementptr inbounds i16, i16* %168, i64 8
  %195 = icmp eq i64 %192, 0
  br i1 %195, label %196, label %166, !llvm.loop !30

196:                                              ; preds = %161, %166, %141
  %197 = load i8, i8* %15, align 1
  br label %198

198:                                              ; preds = %196, %18
  %199 = phi i8 [ %197, %196 ], [ %16, %18 ]
  %200 = bitcast %class.GURL* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %200) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %200, i8 -86, i64 120, i1 false)
  %201 = bitcast %"class.std::__1::basic_string.14"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %201) #15
  %202 = icmp slt i8 %199, 0
  %203 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load i16*, i16** %203, align 8
  %205 = bitcast %class.AutocompleteInput* %1 to i16*
  %206 = select i1 %202, i16* %204, i16* %205
  %207 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %208 = load i64, i64* %207, align 8
  %209 = zext i8 %199 to i64
  %210 = select i1 %202, i64 %208, i64 %209
  call void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.14"* nonnull sret %5, i16* %206, i64 %210) #15
  %211 = bitcast %"class.std::__1::basic_string.14"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %211) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %211, i8 0, i64 24, i1 false) #15
  call void @_ZN13url_formatter8FixupURLERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(%class.GURL* nonnull sret %4, %"class.std::__1::basic_string.14"* nonnull dereferenceable(24) %5, %"class.std::__1::basic_string.14"* nonnull dereferenceable(24) %6) #15
  %212 = bitcast %"class.std::__1::basic_string.14"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %213 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %212, i64 0, i32 1, i32 0
  %214 = load i8, i8* %213, align 1
  %215 = icmp slt i8 %214, 0
  br i1 %215, label %216, label %219

216:                                              ; preds = %198
  %217 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  call void @_ZdlPv(i8* %218) #17
  br label %219

219:                                              ; preds = %198, %216
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %211) #15
  %220 = bitcast %"class.std::__1::basic_string.14"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %221 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %220, i64 0, i32 1, i32 0
  %222 = load i8, i8* %221, align 1
  %223 = icmp slt i8 %222, 0
  br i1 %223, label %224, label %227

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  call void @_ZdlPv(i8* %226) #17
  br label %227

227:                                              ; preds = %219, %224
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %201) #15
  %228 = bitcast %"class.std::__1::basic_string.14"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %228) #15
  %229 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %231 = bitcast %class.GURL* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %232 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %231, i64 0, i32 1, i32 0
  %233 = bitcast %"class.std::__1::basic_string.14"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %233, i8 -86, i64 24, i1 false)
  %234 = load i8, i8* %232, align 1
  %235 = icmp slt i8 %234, 0
  br i1 %235, label %237, label %236

236:                                              ; preds = %227
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %228, i8* nonnull align 8 %200, i64 24, i1 false) #15
  br label %242

237:                                              ; preds = %227
  %238 = getelementptr inbounds %class.GURL, %class.GURL* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load i8*, i8** %238, align 8
  %240 = getelementptr inbounds %class.GURL, %class.GURL* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %241 = load i64, i64* %240, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string.14"* nonnull %7, i8* %239, i64 %241) #15
  br label %242

242:                                              ; preds = %236, %237
  %243 = bitcast %"class.std::__1::basic_string.14"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %244 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %243, i64 0, i32 1, i32 0
  %245 = load i8, i8* %244, align 1
  %246 = icmp slt i8 %245, 0
  %247 = load i64, i64* %230, align 8
  %248 = zext i8 %245 to i64
  %249 = select i1 %246, i64 %247, i64 %248
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %437

251:                                              ; preds = %242
  %252 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 0
  %253 = load i8, i8* %12, align 8, !range !31
  store i8 %253, i8* %252, align 8
  %254 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1
  %255 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %256 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %255, i64 0, i32 1, i32 1
  %257 = load i8, i8* %256, align 1
  %258 = icmp slt i8 %257, 0
  br i1 %258, label %262, label %259

259:                                              ; preds = %251
  %260 = bitcast %"class.std::__1::basic_string"* %254 to i8*
  %261 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %260, i8* align 8 %261, i64 24, i1 false) #15
  br label %1091

262:                                              ; preds = %251
  %263 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %264 = load i16*, i16** %263, align 8
  %265 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %266 = load i64, i64* %265, align 8
  %267 = icmp ult i64 %266, 11
  br i1 %267, label %268, label %273

268:                                              ; preds = %262
  %269 = bitcast %"class.std::__1::basic_string"* %254 to i16*
  %270 = trunc i64 %266 to i8
  %271 = bitcast %"class.std::__1::basic_string"* %254 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %272 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %271, i64 0, i32 1, i32 1
  store i8 %270, i8* %272, align 1
  br label %290

273:                                              ; preds = %262
  %274 = icmp ugt i64 %266, 9223372036854775791
  br i1 %274, label %275, label %277

275:                                              ; preds = %273
  %276 = bitcast %"class.std::__1::basic_string"* %254 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %276) #16
  unreachable

277:                                              ; preds = %273
  %278 = add nuw nsw i64 %266, 8
  %279 = and i64 %278, -8
  %280 = icmp slt i64 %279, 0
  br i1 %280, label %281, label %282

281:                                              ; preds = %277
  call void @abort() #16
  unreachable

282:                                              ; preds = %277
  %283 = shl i64 %279, 1
  %284 = call i8* @_Znwm(i64 %283) #17
  %285 = bitcast i8* %284 to i16*
  %286 = bitcast %"class.std::__1::basic_string"* %254 to i8**
  store i8* %284, i8** %286, align 8
  %287 = or i64 %279, -9223372036854775808
  %288 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %287, i64* %288, align 8
  %289 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %266, i64* %289, align 8
  br label %290

290:                                              ; preds = %282, %268
  %291 = phi i16* [ %269, %268 ], [ %285, %282 ]
  %292 = add nuw nsw i64 %266, 1
  %293 = add i64 %266, 1
  %294 = icmp ult i64 %293, 16
  br i1 %294, label %384, label %295

295:                                              ; preds = %290
  %296 = add i64 %266, 1
  %297 = getelementptr i16, i16* %291, i64 %296
  %298 = getelementptr i16, i16* %264, i64 %296
  %299 = icmp ult i16* %291, %298
  %300 = icmp ult i16* %264, %297
  %301 = and i1 %299, %300
  br i1 %301, label %384, label %302

302:                                              ; preds = %295
  %303 = and i64 %293, -16
  %304 = sub i64 %292, %303
  %305 = getelementptr i16, i16* %264, i64 %303
  %306 = getelementptr i16, i16* %291, i64 %303
  %307 = add i64 %303, -16
  %308 = lshr exact i64 %307, 4
  %309 = add nuw nsw i64 %308, 1
  %310 = and i64 %309, 3
  %311 = icmp ult i64 %307, 48
  br i1 %311, label %363, label %312

312:                                              ; preds = %302
  %313 = sub nsw i64 %309, %310
  br label %314

314:                                              ; preds = %314, %312
  %315 = phi i64 [ 0, %312 ], [ %360, %314 ]
  %316 = phi i64 [ %313, %312 ], [ %361, %314 ]
  %317 = getelementptr i16, i16* %264, i64 %315
  %318 = getelementptr i16, i16* %291, i64 %315
  %319 = bitcast i16* %317 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !32
  %321 = getelementptr i16, i16* %317, i64 8
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !32
  %324 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %324, align 2, !alias.scope !35, !noalias !32
  %325 = getelementptr i16, i16* %318, i64 8
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %326, align 2, !alias.scope !35, !noalias !32
  %327 = or i64 %315, 16
  %328 = getelementptr i16, i16* %264, i64 %327
  %329 = getelementptr i16, i16* %291, i64 %327
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !32
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !32
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !35, !noalias !32
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !35, !noalias !32
  %338 = or i64 %315, 32
  %339 = getelementptr i16, i16* %264, i64 %338
  %340 = getelementptr i16, i16* %291, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !32
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !32
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !35, !noalias !32
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !35, !noalias !32
  %349 = or i64 %315, 48
  %350 = getelementptr i16, i16* %264, i64 %349
  %351 = getelementptr i16, i16* %291, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !32
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !32
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !35, !noalias !32
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !35, !noalias !32
  %360 = add i64 %315, 64
  %361 = add i64 %316, -4
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %314, !llvm.loop !37

363:                                              ; preds = %314, %302
  %364 = phi i64 [ 0, %302 ], [ %360, %314 ]
  %365 = icmp eq i64 %310, 0
  br i1 %365, label %382, label %366

366:                                              ; preds = %363, %366
  %367 = phi i64 [ %379, %366 ], [ %364, %363 ]
  %368 = phi i64 [ %380, %366 ], [ %310, %363 ]
  %369 = getelementptr i16, i16* %264, i64 %367
  %370 = getelementptr i16, i16* %291, i64 %367
  %371 = bitcast i16* %369 to <8 x i16>*
  %372 = load <8 x i16>, <8 x i16>* %371, align 2, !alias.scope !32
  %373 = getelementptr i16, i16* %369, i64 8
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 2, !alias.scope !32
  %376 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %376, align 2, !alias.scope !35, !noalias !32
  %377 = getelementptr i16, i16* %370, i64 8
  %378 = bitcast i16* %377 to <8 x i16>*
  store <8 x i16> %375, <8 x i16>* %378, align 2, !alias.scope !35, !noalias !32
  %379 = add i64 %367, 16
  %380 = add i64 %368, -1
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %382, label %366, !llvm.loop !38

382:                                              ; preds = %366, %363
  %383 = icmp eq i64 %293, %303
  br i1 %383, label %1091, label %384

384:                                              ; preds = %382, %295, %290
  %385 = phi i64 [ %292, %295 ], [ %292, %290 ], [ %304, %382 ]
  %386 = phi i16* [ %264, %295 ], [ %264, %290 ], [ %305, %382 ]
  %387 = phi i16* [ %291, %295 ], [ %291, %290 ], [ %306, %382 ]
  %388 = add i64 %385, -1
  %389 = and i64 %385, 7
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %402, label %391

391:                                              ; preds = %384, %391
  %392 = phi i64 [ %397, %391 ], [ %385, %384 ]
  %393 = phi i16* [ %399, %391 ], [ %386, %384 ]
  %394 = phi i16* [ %398, %391 ], [ %387, %384 ]
  %395 = phi i64 [ %400, %391 ], [ %389, %384 ]
  %396 = load i16, i16* %393, align 2
  store i16 %396, i16* %394, align 2
  %397 = add i64 %392, -1
  %398 = getelementptr inbounds i16, i16* %394, i64 1
  %399 = getelementptr inbounds i16, i16* %393, i64 1
  %400 = add i64 %395, -1
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %402, label %391, !llvm.loop !39

402:                                              ; preds = %391, %384
  %403 = phi i64 [ %385, %384 ], [ %397, %391 ]
  %404 = phi i16* [ %386, %384 ], [ %399, %391 ]
  %405 = phi i16* [ %387, %384 ], [ %398, %391 ]
  %406 = icmp ult i64 %388, 7
  br i1 %406, label %1091, label %407

407:                                              ; preds = %402, %407
  %408 = phi i64 [ %433, %407 ], [ %403, %402 ]
  %409 = phi i16* [ %435, %407 ], [ %404, %402 ]
  %410 = phi i16* [ %434, %407 ], [ %405, %402 ]
  %411 = load i16, i16* %409, align 2
  store i16 %411, i16* %410, align 2
  %412 = getelementptr inbounds i16, i16* %410, i64 1
  %413 = getelementptr inbounds i16, i16* %409, i64 1
  %414 = load i16, i16* %413, align 2
  store i16 %414, i16* %412, align 2
  %415 = getelementptr inbounds i16, i16* %410, i64 2
  %416 = getelementptr inbounds i16, i16* %409, i64 2
  %417 = load i16, i16* %416, align 2
  store i16 %417, i16* %415, align 2
  %418 = getelementptr inbounds i16, i16* %410, i64 3
  %419 = getelementptr inbounds i16, i16* %409, i64 3
  %420 = load i16, i16* %419, align 2
  store i16 %420, i16* %418, align 2
  %421 = getelementptr inbounds i16, i16* %410, i64 4
  %422 = getelementptr inbounds i16, i16* %409, i64 4
  %423 = load i16, i16* %422, align 2
  store i16 %423, i16* %421, align 2
  %424 = getelementptr inbounds i16, i16* %410, i64 5
  %425 = getelementptr inbounds i16, i16* %409, i64 5
  %426 = load i16, i16* %425, align 2
  store i16 %426, i16* %424, align 2
  %427 = getelementptr inbounds i16, i16* %410, i64 6
  %428 = getelementptr inbounds i16, i16* %409, i64 6
  %429 = load i16, i16* %428, align 2
  store i16 %429, i16* %427, align 2
  %430 = getelementptr inbounds i16, i16* %410, i64 7
  %431 = getelementptr inbounds i16, i16* %409, i64 7
  %432 = load i16, i16* %431, align 2
  store i16 %432, i16* %430, align 2
  %433 = add i64 %408, -8
  %434 = getelementptr inbounds i16, i16* %410, i64 8
  %435 = getelementptr inbounds i16, i16* %409, i64 8
  %436 = icmp eq i64 %433, 0
  br i1 %436, label %1091, label %407, !llvm.loop !40

437:                                              ; preds = %242
  %438 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 5
  %439 = load i32, i32* %438, align 4
  %440 = icmp eq i32 %439, 3
  br i1 %440, label %495, label %441

441:                                              ; preds = %437
  %442 = call zeroext i1 @_ZNK4GURL15HostIsIPAddressEv(%class.GURL* nonnull %4) #15
  br i1 %442, label %443, label %495

443:                                              ; preds = %441
  %444 = bitcast %"class.std::__1::basic_string.14"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %444) #15
  %445 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %446 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %447 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %448 = bitcast %"class.std::__1::basic_string.14"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %448, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %447) #15
  %449 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 6, i32 3, i32 0
  %450 = load i32, i32* %449, align 8
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %1, i64 0, i32 6, i32 3, i32 1
  %453 = load i32, i32* %452, align 4
  %454 = sext i32 %453 to i64
  %455 = bitcast %class.AutocompleteInput* %1 to %"class.std::__1::allocator.5"*
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %9, %"class.std::__1::basic_string"* dereferenceable(24) %11, i64 %451, i64 %454, %"class.std::__1::allocator.5"* dereferenceable(1) %455) #15
  %456 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %457 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %456, i64 0, i32 1, i32 1
  %458 = load i8, i8* %457, align 1
  %459 = icmp slt i8 %458, 0
  %460 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %461 = load i16*, i16** %460, align 8
  %462 = bitcast %"class.std::__1::basic_string"* %9 to i16*
  %463 = select i1 %459, i16* %461, i16* %462
  %464 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %465 = load i64, i64* %464, align 8
  %466 = zext i8 %458 to i64
  %467 = select i1 %459, i64 %465, i64 %466
  call void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.14"* nonnull sret %8, i16* %463, i64 %467) #15
  %468 = load i8, i8* %457, align 1
  %469 = icmp slt i8 %468, 0
  br i1 %469, label %470, label %473

470:                                              ; preds = %443
  %471 = bitcast %"class.std::__1::basic_string"* %9 to i8**
  %472 = load i8*, i8** %471, align 8
  call void @_ZdlPv(i8* %472) #17
  br label %473

473:                                              ; preds = %443, %470
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %447) #15
  %474 = getelementptr inbounds %class.GURL, %class.GURL* %4, i64 0, i32 2, i32 3, i32 0
  %475 = load i32, i32* %474, align 8
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds %class.GURL, %class.GURL* %4, i64 0, i32 2, i32 3, i32 1
  %478 = load i32, i32* %477, align 4
  %479 = sext i32 %478 to i64
  %480 = bitcast %"class.std::__1::basic_string.14"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %481 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %480, i64 0, i32 1, i32 0
  %482 = load i8, i8* %481, align 1
  %483 = icmp slt i8 %482, 0
  %484 = load i8*, i8** %445, align 8
  %485 = load i64, i64* %446, align 8
  %486 = zext i8 %482 to i64
  %487 = select i1 %483, i8* %484, i8* %444
  %488 = select i1 %483, i64 %485, i64 %486
  %489 = call dereferenceable(24) %"class.std::__1::basic_string.14"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKcm(%"class.std::__1::basic_string.14"* nonnull %7, i64 %476, i64 %479, i8* %487, i64 %488) #15
  %490 = load i8, i8* %481, align 1
  %491 = icmp slt i8 %490, 0
  br i1 %491, label %492, label %494

492:                                              ; preds = %473
  %493 = load i8*, i8** %445, align 8
  call void @_ZdlPv(i8* %493) #17
  br label %494

494:                                              ; preds = %473, %492
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %444) #15
  br label %495

495:                                              ; preds = %437, %494, %441
  %496 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %496) #15
  %497 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %498 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %499 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %500 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %500, i8 -86, i64 24, i1 false)
  %501 = load i8, i8* %244, align 1
  %502 = icmp slt i8 %501, 0
  %503 = load i8*, i8** %229, align 8
  %504 = select i1 %502, i8* %503, i8* %228
  %505 = load i64, i64* %230, align 8
  %506 = zext i8 %501 to i64
  %507 = select i1 %502, i64 %505, i64 %506
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %10, i8* %504, i64 %507) #15
  %508 = call zeroext i1 @_ZN17AutocompleteInput13HasHTTPSchemeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string"* dereferenceable(24) %11) #15
  br i1 %508, label %511, label %509

509:                                              ; preds = %495
  %510 = call i64 @_ZN20AutocompleteProvider16TrimSchemePrefixEPNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEb(%"class.std::__1::basic_string"* nonnull %10, i1 zeroext false)
  br label %511

511:                                              ; preds = %509, %495
  %512 = load i8, i8* %15, align 1
  %513 = icmp slt i8 %512, 0
  %514 = load i16*, i16** %203, align 8
  %515 = load i64, i64* %207, align 8
  %516 = select i1 %513, i16* %514, i16* %205
  %517 = zext i8 %512 to i64
  %518 = select i1 %513, i64 %515, i64 %517
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %533, label %520

520:                                              ; preds = %511
  %521 = getelementptr inbounds i16, i16* %516, i64 %518
  br label %522

522:                                              ; preds = %520, %526
  %523 = phi i16* [ %521, %520 ], [ %524, %526 ]
  %524 = getelementptr inbounds i16, i16* %523, i64 -1
  %525 = load i16, i16* %524, align 2
  switch i16 %525, label %528 [
    i16 47, label %526
    i16 92, label %526
  ]

526:                                              ; preds = %522, %522
  %527 = icmp eq i16* %524, %516
  br i1 %527, label %533, label %522

528:                                              ; preds = %522
  %529 = ptrtoint i16* %524 to i64
  %530 = ptrtoint i16* %516 to i64
  %531 = sub i64 %529, %530
  %532 = ashr exact i64 %531, 1
  br label %533

533:                                              ; preds = %526, %511, %528
  %534 = phi i64 [ %532, %528 ], [ -1, %511 ], [ -1, %526 ]
  %535 = xor i64 %534, -1
  %536 = add i64 %518, %535
  %537 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %538 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %537, i64 0, i32 1, i32 1
  %539 = load i8, i8* %538, align 1
  %540 = icmp slt i8 %539, 0
  %541 = load i64, i64* %498, align 8
  %542 = zext i8 %539 to i64
  %543 = select i1 %540, i64 %541, i64 %542
  %544 = icmp ugt i64 %543, %518
  br i1 %544, label %547, label %545

545:                                              ; preds = %533
  %546 = bitcast %"class.std::__1::basic_string"* %10 to i16*
  br label %556

547:                                              ; preds = %533
  %548 = load i16*, i16** %497, align 8
  %549 = bitcast %"class.std::__1::basic_string"* %10 to i16*
  %550 = select i1 %540, i16* %548, i16* %549
  %551 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16* %550, i64 %543, i16* %516, i64 %518, i32 0) #15
  %552 = select i1 %551, i64 0, i64 %536
  %553 = load i8, i8* %538, align 1
  %554 = load i64, i64* %498, align 8
  %555 = zext i8 %553 to i64
  br label %556

556:                                              ; preds = %545, %547
  %557 = phi i16* [ %546, %545 ], [ %549, %547 ]
  %558 = phi i64 [ %542, %545 ], [ %555, %547 ]
  %559 = phi i64 [ %541, %545 ], [ %554, %547 ]
  %560 = phi i8 [ %539, %545 ], [ %553, %547 ]
  %561 = phi i64 [ %536, %545 ], [ %552, %547 ]
  %562 = icmp slt i8 %560, 0
  %563 = load i16*, i16** %497, align 8
  %564 = select i1 %562, i16* %563, i16* %557
  %565 = select i1 %562, i64 %559, i64 %558
  %566 = icmp eq i64 %565, 0
  br i1 %566, label %580, label %567

567:                                              ; preds = %556
  %568 = getelementptr inbounds i16, i16* %564, i64 %565
  br label %569

569:                                              ; preds = %567, %573
  %570 = phi i16* [ %568, %567 ], [ %571, %573 ]
  %571 = getelementptr inbounds i16, i16* %570, i64 -1
  %572 = load i16, i16* %571, align 2
  switch i16 %572, label %575 [
    i16 47, label %573
    i16 92, label %573
  ]

573:                                              ; preds = %569, %569
  %574 = icmp eq i16* %571, %564
  br i1 %574, label %580, label %569

575:                                              ; preds = %569
  %576 = ptrtoint i16* %571 to i64
  %577 = ptrtoint i16* %564 to i64
  %578 = sub i64 %576, %577
  %579 = ashr exact i64 %578, 1
  br label %580

580:                                              ; preds = %573, %556, %575
  %581 = phi i64 [ %579, %575 ], [ -1, %556 ], [ -1, %573 ]
  %582 = xor i64 %581, -1
  %583 = add i64 %565, %582
  %584 = icmp ugt i64 %561, %583
  br i1 %584, label %585, label %699

585:                                              ; preds = %580
  %586 = sub i64 %561, %583
  %587 = icmp eq i64 %586, 0
  br i1 %587, label %713, label %588

588:                                              ; preds = %585
  br i1 %562, label %589, label %593

589:                                              ; preds = %588
  %590 = load i64, i64* %499, align 8
  %591 = and i64 %590, 9223372036854775807
  %592 = add nsw i64 %591, -1
  br label %593

593:                                              ; preds = %588, %589
  %594 = phi i64 [ %592, %589 ], [ 10, %588 ]
  %595 = phi i64 [ %559, %589 ], [ %558, %588 ]
  %596 = sub i64 %594, %595
  %597 = icmp ult i64 %596, %586
  br i1 %597, label %598, label %603

598:                                              ; preds = %593
  %599 = add i64 %595, %586
  %600 = sub i64 %599, %594
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* nonnull %10, i64 %594, i64 %600, i64 %595, i64 %595, i64 0, i64 0) #15
  %601 = load i8, i8* %538, align 1
  %602 = load i16*, i16** %497, align 8
  br label %603

603:                                              ; preds = %598, %593
  %604 = phi i16* [ %602, %598 ], [ %563, %593 ]
  %605 = phi i8 [ %601, %598 ], [ %560, %593 ]
  %606 = icmp slt i8 %605, 0
  %607 = select i1 %606, i16* %604, i16* %557
  %608 = getelementptr inbounds i16, i16* %607, i64 %595
  %609 = icmp ult i64 %586, 16
  br i1 %609, label %681, label %610

610:                                              ; preds = %603
  %611 = and i64 %586, -16
  %612 = sub i64 %586, %611
  %613 = getelementptr i16, i16* %608, i64 %611
  %614 = add i64 %611, -16
  %615 = lshr exact i64 %614, 4
  %616 = add nuw nsw i64 %615, 1
  %617 = and i64 %616, 7
  %618 = icmp ult i64 %614, 112
  br i1 %618, label %666, label %619

619:                                              ; preds = %610
  %620 = sub nsw i64 %616, %617
  br label %621

621:                                              ; preds = %621, %619
  %622 = phi i64 [ 0, %619 ], [ %663, %621 ]
  %623 = phi i64 [ %620, %619 ], [ %664, %621 ]
  %624 = getelementptr i16, i16* %608, i64 %622
  %625 = bitcast i16* %624 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %625, align 2
  %626 = getelementptr i16, i16* %624, i64 8
  %627 = bitcast i16* %626 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %627, align 2
  %628 = or i64 %622, 16
  %629 = getelementptr i16, i16* %608, i64 %628
  %630 = bitcast i16* %629 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %630, align 2
  %631 = getelementptr i16, i16* %629, i64 8
  %632 = bitcast i16* %631 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %632, align 2
  %633 = or i64 %622, 32
  %634 = getelementptr i16, i16* %608, i64 %633
  %635 = bitcast i16* %634 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %635, align 2
  %636 = getelementptr i16, i16* %634, i64 8
  %637 = bitcast i16* %636 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %637, align 2
  %638 = or i64 %622, 48
  %639 = getelementptr i16, i16* %608, i64 %638
  %640 = bitcast i16* %639 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %640, align 2
  %641 = getelementptr i16, i16* %639, i64 8
  %642 = bitcast i16* %641 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %642, align 2
  %643 = or i64 %622, 64
  %644 = getelementptr i16, i16* %608, i64 %643
  %645 = bitcast i16* %644 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %645, align 2
  %646 = getelementptr i16, i16* %644, i64 8
  %647 = bitcast i16* %646 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %647, align 2
  %648 = or i64 %622, 80
  %649 = getelementptr i16, i16* %608, i64 %648
  %650 = bitcast i16* %649 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %650, align 2
  %651 = getelementptr i16, i16* %649, i64 8
  %652 = bitcast i16* %651 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %652, align 2
  %653 = or i64 %622, 96
  %654 = getelementptr i16, i16* %608, i64 %653
  %655 = bitcast i16* %654 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %655, align 2
  %656 = getelementptr i16, i16* %654, i64 8
  %657 = bitcast i16* %656 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %657, align 2
  %658 = or i64 %622, 112
  %659 = getelementptr i16, i16* %608, i64 %658
  %660 = bitcast i16* %659 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %660, align 2
  %661 = getelementptr i16, i16* %659, i64 8
  %662 = bitcast i16* %661 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %662, align 2
  %663 = add i64 %622, 128
  %664 = add i64 %623, -8
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %621, !llvm.loop !41

666:                                              ; preds = %621, %610
  %667 = phi i64 [ 0, %610 ], [ %663, %621 ]
  %668 = icmp eq i64 %617, 0
  br i1 %668, label %679, label %669

669:                                              ; preds = %666, %669
  %670 = phi i64 [ %676, %669 ], [ %667, %666 ]
  %671 = phi i64 [ %677, %669 ], [ %617, %666 ]
  %672 = getelementptr i16, i16* %608, i64 %670
  %673 = bitcast i16* %672 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %673, align 2
  %674 = getelementptr i16, i16* %672, i64 8
  %675 = bitcast i16* %674 to <8 x i16>*
  store <8 x i16> <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>, <8 x i16>* %675, align 2
  %676 = add i64 %670, 16
  %677 = add i64 %671, -1
  %678 = icmp eq i64 %677, 0
  br i1 %678, label %679, label %669, !llvm.loop !42

679:                                              ; preds = %669, %666
  %680 = icmp eq i64 %586, %611
  br i1 %680, label %690, label %681

681:                                              ; preds = %679, %603
  %682 = phi i64 [ %586, %603 ], [ %612, %679 ]
  %683 = phi i16* [ %608, %603 ], [ %613, %679 ]
  br label %684

684:                                              ; preds = %681, %684
  %685 = phi i64 [ %687, %684 ], [ %682, %681 ]
  %686 = phi i16* [ %688, %684 ], [ %683, %681 ]
  store i16 47, i16* %686, align 2
  %687 = add i64 %685, -1
  %688 = getelementptr inbounds i16, i16* %686, i64 1
  %689 = icmp eq i64 %687, 0
  br i1 %689, label %690, label %684, !llvm.loop !43

690:                                              ; preds = %684, %679
  %691 = add i64 %595, %586
  %692 = load i8, i8* %538, align 1
  %693 = icmp slt i8 %692, 0
  br i1 %693, label %694, label %695

694:                                              ; preds = %690
  store i64 %691, i64* %498, align 8
  br label %697

695:                                              ; preds = %690
  %696 = trunc i64 %691 to i8
  store i8 %696, i8* %538, align 1
  br label %697

697:                                              ; preds = %695, %694
  %698 = getelementptr inbounds i16, i16* %607, i64 %691
  store i16 0, i16* %698, align 2
  br label %713

699:                                              ; preds = %580
  %700 = icmp ult i64 %561, %583
  br i1 %700, label %701, label %713

701:                                              ; preds = %699
  %702 = add nsw i64 %581, 1
  %703 = add i64 %702, %561
  %704 = icmp ult i64 %565, %703
  br i1 %704, label %705, label %707

705:                                              ; preds = %701
  %706 = bitcast %"class.std::__1::basic_string"* %10 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %706) #16
  unreachable

707:                                              ; preds = %701
  br i1 %562, label %708, label %710

708:                                              ; preds = %707
  %709 = getelementptr inbounds i16, i16* %563, i64 %703
  store i16 0, i16* %709, align 2
  store i64 %703, i64* %498, align 8
  br label %713

710:                                              ; preds = %707
  %711 = getelementptr inbounds i16, i16* %557, i64 %703
  store i16 0, i16* %711, align 2
  %712 = trunc i64 %703 to i8
  store i8 %712, i8* %538, align 1
  br label %715

713:                                              ; preds = %699, %585, %697, %708
  %714 = load i8, i8* %538, align 1
  br label %715

715:                                              ; preds = %713, %710
  %716 = phi i8 [ %714, %713 ], [ %712, %710 ]
  %717 = icmp slt i8 %716, 0
  %718 = load i64, i64* %498, align 8
  %719 = zext i8 %716 to i64
  %720 = select i1 %717, i64 %718, i64 %719
  %721 = icmp eq i64 %720, 0
  %722 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 0
  br i1 %721, label %723, label %908

723:                                              ; preds = %715
  %724 = load i8, i8* %12, align 8, !range !31
  store i8 %724, i8* %722, align 8
  %725 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1
  %726 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %727 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %726, i64 0, i32 1, i32 1
  %728 = load i8, i8* %727, align 1
  %729 = icmp slt i8 %728, 0
  br i1 %729, label %733, label %730

730:                                              ; preds = %723
  %731 = bitcast %"class.std::__1::basic_string"* %725 to i8*
  %732 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %731, i8* align 8 %732, i64 24, i1 false) #15
  br label %1084

733:                                              ; preds = %723
  %734 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %735 = load i16*, i16** %734, align 8
  %736 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %737 = load i64, i64* %736, align 8
  %738 = icmp ult i64 %737, 11
  br i1 %738, label %739, label %744

739:                                              ; preds = %733
  %740 = bitcast %"class.std::__1::basic_string"* %725 to i16*
  %741 = trunc i64 %737 to i8
  %742 = bitcast %"class.std::__1::basic_string"* %725 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %743 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %742, i64 0, i32 1, i32 1
  store i8 %741, i8* %743, align 1
  br label %761

744:                                              ; preds = %733
  %745 = icmp ugt i64 %737, 9223372036854775791
  br i1 %745, label %746, label %748

746:                                              ; preds = %744
  %747 = bitcast %"class.std::__1::basic_string"* %725 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %747) #16
  unreachable

748:                                              ; preds = %744
  %749 = add nuw nsw i64 %737, 8
  %750 = and i64 %749, -8
  %751 = icmp slt i64 %750, 0
  br i1 %751, label %752, label %753

752:                                              ; preds = %748
  call void @abort() #16
  unreachable

753:                                              ; preds = %748
  %754 = shl i64 %750, 1
  %755 = call i8* @_Znwm(i64 %754) #17
  %756 = bitcast i8* %755 to i16*
  %757 = bitcast %"class.std::__1::basic_string"* %725 to i8**
  store i8* %755, i8** %757, align 8
  %758 = or i64 %750, -9223372036854775808
  %759 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %758, i64* %759, align 8
  %760 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %737, i64* %760, align 8
  br label %761

761:                                              ; preds = %753, %739
  %762 = phi i16* [ %740, %739 ], [ %756, %753 ]
  %763 = add nuw nsw i64 %737, 1
  %764 = add i64 %737, 1
  %765 = icmp ult i64 %764, 16
  br i1 %765, label %855, label %766

766:                                              ; preds = %761
  %767 = add i64 %737, 1
  %768 = getelementptr i16, i16* %762, i64 %767
  %769 = getelementptr i16, i16* %735, i64 %767
  %770 = icmp ult i16* %762, %769
  %771 = icmp ult i16* %735, %768
  %772 = and i1 %770, %771
  br i1 %772, label %855, label %773

773:                                              ; preds = %766
  %774 = and i64 %764, -16
  %775 = sub i64 %763, %774
  %776 = getelementptr i16, i16* %735, i64 %774
  %777 = getelementptr i16, i16* %762, i64 %774
  %778 = add i64 %774, -16
  %779 = lshr exact i64 %778, 4
  %780 = add nuw nsw i64 %779, 1
  %781 = and i64 %780, 3
  %782 = icmp ult i64 %778, 48
  br i1 %782, label %834, label %783

783:                                              ; preds = %773
  %784 = sub nsw i64 %780, %781
  br label %785

785:                                              ; preds = %785, %783
  %786 = phi i64 [ 0, %783 ], [ %831, %785 ]
  %787 = phi i64 [ %784, %783 ], [ %832, %785 ]
  %788 = getelementptr i16, i16* %735, i64 %786
  %789 = getelementptr i16, i16* %762, i64 %786
  %790 = bitcast i16* %788 to <8 x i16>*
  %791 = load <8 x i16>, <8 x i16>* %790, align 2, !alias.scope !45
  %792 = getelementptr i16, i16* %788, i64 8
  %793 = bitcast i16* %792 to <8 x i16>*
  %794 = load <8 x i16>, <8 x i16>* %793, align 2, !alias.scope !45
  %795 = bitcast i16* %789 to <8 x i16>*
  store <8 x i16> %791, <8 x i16>* %795, align 2, !alias.scope !48, !noalias !45
  %796 = getelementptr i16, i16* %789, i64 8
  %797 = bitcast i16* %796 to <8 x i16>*
  store <8 x i16> %794, <8 x i16>* %797, align 2, !alias.scope !48, !noalias !45
  %798 = or i64 %786, 16
  %799 = getelementptr i16, i16* %735, i64 %798
  %800 = getelementptr i16, i16* %762, i64 %798
  %801 = bitcast i16* %799 to <8 x i16>*
  %802 = load <8 x i16>, <8 x i16>* %801, align 2, !alias.scope !45
  %803 = getelementptr i16, i16* %799, i64 8
  %804 = bitcast i16* %803 to <8 x i16>*
  %805 = load <8 x i16>, <8 x i16>* %804, align 2, !alias.scope !45
  %806 = bitcast i16* %800 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %806, align 2, !alias.scope !48, !noalias !45
  %807 = getelementptr i16, i16* %800, i64 8
  %808 = bitcast i16* %807 to <8 x i16>*
  store <8 x i16> %805, <8 x i16>* %808, align 2, !alias.scope !48, !noalias !45
  %809 = or i64 %786, 32
  %810 = getelementptr i16, i16* %735, i64 %809
  %811 = getelementptr i16, i16* %762, i64 %809
  %812 = bitcast i16* %810 to <8 x i16>*
  %813 = load <8 x i16>, <8 x i16>* %812, align 2, !alias.scope !45
  %814 = getelementptr i16, i16* %810, i64 8
  %815 = bitcast i16* %814 to <8 x i16>*
  %816 = load <8 x i16>, <8 x i16>* %815, align 2, !alias.scope !45
  %817 = bitcast i16* %811 to <8 x i16>*
  store <8 x i16> %813, <8 x i16>* %817, align 2, !alias.scope !48, !noalias !45
  %818 = getelementptr i16, i16* %811, i64 8
  %819 = bitcast i16* %818 to <8 x i16>*
  store <8 x i16> %816, <8 x i16>* %819, align 2, !alias.scope !48, !noalias !45
  %820 = or i64 %786, 48
  %821 = getelementptr i16, i16* %735, i64 %820
  %822 = getelementptr i16, i16* %762, i64 %820
  %823 = bitcast i16* %821 to <8 x i16>*
  %824 = load <8 x i16>, <8 x i16>* %823, align 2, !alias.scope !45
  %825 = getelementptr i16, i16* %821, i64 8
  %826 = bitcast i16* %825 to <8 x i16>*
  %827 = load <8 x i16>, <8 x i16>* %826, align 2, !alias.scope !45
  %828 = bitcast i16* %822 to <8 x i16>*
  store <8 x i16> %824, <8 x i16>* %828, align 2, !alias.scope !48, !noalias !45
  %829 = getelementptr i16, i16* %822, i64 8
  %830 = bitcast i16* %829 to <8 x i16>*
  store <8 x i16> %827, <8 x i16>* %830, align 2, !alias.scope !48, !noalias !45
  %831 = add i64 %786, 64
  %832 = add i64 %787, -4
  %833 = icmp eq i64 %832, 0
  br i1 %833, label %834, label %785, !llvm.loop !50

834:                                              ; preds = %785, %773
  %835 = phi i64 [ 0, %773 ], [ %831, %785 ]
  %836 = icmp eq i64 %781, 0
  br i1 %836, label %853, label %837

837:                                              ; preds = %834, %837
  %838 = phi i64 [ %850, %837 ], [ %835, %834 ]
  %839 = phi i64 [ %851, %837 ], [ %781, %834 ]
  %840 = getelementptr i16, i16* %735, i64 %838
  %841 = getelementptr i16, i16* %762, i64 %838
  %842 = bitcast i16* %840 to <8 x i16>*
  %843 = load <8 x i16>, <8 x i16>* %842, align 2, !alias.scope !45
  %844 = getelementptr i16, i16* %840, i64 8
  %845 = bitcast i16* %844 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !45
  %847 = bitcast i16* %841 to <8 x i16>*
  store <8 x i16> %843, <8 x i16>* %847, align 2, !alias.scope !48, !noalias !45
  %848 = getelementptr i16, i16* %841, i64 8
  %849 = bitcast i16* %848 to <8 x i16>*
  store <8 x i16> %846, <8 x i16>* %849, align 2, !alias.scope !48, !noalias !45
  %850 = add i64 %838, 16
  %851 = add i64 %839, -1
  %852 = icmp eq i64 %851, 0
  br i1 %852, label %853, label %837, !llvm.loop !51

853:                                              ; preds = %837, %834
  %854 = icmp eq i64 %764, %774
  br i1 %854, label %1084, label %855

855:                                              ; preds = %853, %766, %761
  %856 = phi i64 [ %763, %766 ], [ %763, %761 ], [ %775, %853 ]
  %857 = phi i16* [ %735, %766 ], [ %735, %761 ], [ %776, %853 ]
  %858 = phi i16* [ %762, %766 ], [ %762, %761 ], [ %777, %853 ]
  %859 = add i64 %856, -1
  %860 = and i64 %856, 7
  %861 = icmp eq i64 %860, 0
  br i1 %861, label %873, label %862

862:                                              ; preds = %855, %862
  %863 = phi i64 [ %868, %862 ], [ %856, %855 ]
  %864 = phi i16* [ %870, %862 ], [ %857, %855 ]
  %865 = phi i16* [ %869, %862 ], [ %858, %855 ]
  %866 = phi i64 [ %871, %862 ], [ %860, %855 ]
  %867 = load i16, i16* %864, align 2
  store i16 %867, i16* %865, align 2
  %868 = add i64 %863, -1
  %869 = getelementptr inbounds i16, i16* %865, i64 1
  %870 = getelementptr inbounds i16, i16* %864, i64 1
  %871 = add i64 %866, -1
  %872 = icmp eq i64 %871, 0
  br i1 %872, label %873, label %862, !llvm.loop !52

873:                                              ; preds = %862, %855
  %874 = phi i64 [ %856, %855 ], [ %868, %862 ]
  %875 = phi i16* [ %857, %855 ], [ %870, %862 ]
  %876 = phi i16* [ %858, %855 ], [ %869, %862 ]
  %877 = icmp ult i64 %859, 7
  br i1 %877, label %1084, label %878

878:                                              ; preds = %873, %878
  %879 = phi i64 [ %904, %878 ], [ %874, %873 ]
  %880 = phi i16* [ %906, %878 ], [ %875, %873 ]
  %881 = phi i16* [ %905, %878 ], [ %876, %873 ]
  %882 = load i16, i16* %880, align 2
  store i16 %882, i16* %881, align 2
  %883 = getelementptr inbounds i16, i16* %881, i64 1
  %884 = getelementptr inbounds i16, i16* %880, i64 1
  %885 = load i16, i16* %884, align 2
  store i16 %885, i16* %883, align 2
  %886 = getelementptr inbounds i16, i16* %881, i64 2
  %887 = getelementptr inbounds i16, i16* %880, i64 2
  %888 = load i16, i16* %887, align 2
  store i16 %888, i16* %886, align 2
  %889 = getelementptr inbounds i16, i16* %881, i64 3
  %890 = getelementptr inbounds i16, i16* %880, i64 3
  %891 = load i16, i16* %890, align 2
  store i16 %891, i16* %889, align 2
  %892 = getelementptr inbounds i16, i16* %881, i64 4
  %893 = getelementptr inbounds i16, i16* %880, i64 4
  %894 = load i16, i16* %893, align 2
  store i16 %894, i16* %892, align 2
  %895 = getelementptr inbounds i16, i16* %881, i64 5
  %896 = getelementptr inbounds i16, i16* %880, i64 5
  %897 = load i16, i16* %896, align 2
  store i16 %897, i16* %895, align 2
  %898 = getelementptr inbounds i16, i16* %881, i64 6
  %899 = getelementptr inbounds i16, i16* %880, i64 6
  %900 = load i16, i16* %899, align 2
  store i16 %900, i16* %898, align 2
  %901 = getelementptr inbounds i16, i16* %881, i64 7
  %902 = getelementptr inbounds i16, i16* %880, i64 7
  %903 = load i16, i16* %902, align 2
  store i16 %903, i16* %901, align 2
  %904 = add i64 %879, -8
  %905 = getelementptr inbounds i16, i16* %881, i64 8
  %906 = getelementptr inbounds i16, i16* %880, i64 8
  %907 = icmp eq i64 %904, 0
  br i1 %907, label %1084, label %878, !llvm.loop !53

908:                                              ; preds = %715
  store i8 1, i8* %722, align 8
  %909 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1
  br i1 %717, label %912, label %910

910:                                              ; preds = %908
  %911 = bitcast %"class.std::__1::basic_string"* %909 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %911, i8* nonnull align 8 %496, i64 24, i1 false) #15
  br label %1084

912:                                              ; preds = %908
  %913 = load i16*, i16** %497, align 8
  %914 = icmp ult i64 %718, 11
  br i1 %914, label %915, label %920

915:                                              ; preds = %912
  %916 = bitcast %"class.std::__1::basic_string"* %909 to i16*
  %917 = trunc i64 %718 to i8
  %918 = bitcast %"class.std::__1::basic_string"* %909 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %919 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %918, i64 0, i32 1, i32 1
  store i8 %917, i8* %919, align 1
  br label %937

920:                                              ; preds = %912
  %921 = icmp ugt i64 %718, 9223372036854775791
  br i1 %921, label %922, label %924

922:                                              ; preds = %920
  %923 = bitcast %"class.std::__1::basic_string"* %909 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %923) #16
  unreachable

924:                                              ; preds = %920
  %925 = add nuw nsw i64 %718, 8
  %926 = and i64 %925, -8
  %927 = icmp slt i64 %926, 0
  br i1 %927, label %928, label %929

928:                                              ; preds = %924
  call void @abort() #16
  unreachable

929:                                              ; preds = %924
  %930 = shl i64 %926, 1
  %931 = call i8* @_Znwm(i64 %930) #17
  %932 = bitcast i8* %931 to i16*
  %933 = bitcast %"class.std::__1::basic_string"* %909 to i8**
  store i8* %931, i8** %933, align 8
  %934 = or i64 %926, -9223372036854775808
  %935 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %934, i64* %935, align 8
  %936 = getelementptr inbounds %"struct.std::__1::pair.139", %"struct.std::__1::pair.139"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %718, i64* %936, align 8
  br label %937

937:                                              ; preds = %929, %915
  %938 = phi i16* [ %916, %915 ], [ %932, %929 ]
  %939 = add nuw nsw i64 %718, 1
  %940 = add i64 %718, 1
  %941 = icmp ult i64 %940, 16
  br i1 %941, label %1031, label %942

942:                                              ; preds = %937
  %943 = add i64 %718, 1
  %944 = getelementptr i16, i16* %938, i64 %943
  %945 = getelementptr i16, i16* %913, i64 %943
  %946 = icmp ult i16* %938, %945
  %947 = icmp ult i16* %913, %944
  %948 = and i1 %946, %947
  br i1 %948, label %1031, label %949

949:                                              ; preds = %942
  %950 = and i64 %940, -16
  %951 = sub i64 %939, %950
  %952 = getelementptr i16, i16* %913, i64 %950
  %953 = getelementptr i16, i16* %938, i64 %950
  %954 = add i64 %950, -16
  %955 = lshr exact i64 %954, 4
  %956 = add nuw nsw i64 %955, 1
  %957 = and i64 %956, 3
  %958 = icmp ult i64 %954, 48
  br i1 %958, label %1010, label %959

959:                                              ; preds = %949
  %960 = sub nsw i64 %956, %957
  br label %961

961:                                              ; preds = %961, %959
  %962 = phi i64 [ 0, %959 ], [ %1007, %961 ]
  %963 = phi i64 [ %960, %959 ], [ %1008, %961 ]
  %964 = getelementptr i16, i16* %913, i64 %962
  %965 = getelementptr i16, i16* %938, i64 %962
  %966 = bitcast i16* %964 to <8 x i16>*
  %967 = load <8 x i16>, <8 x i16>* %966, align 2, !alias.scope !54
  %968 = getelementptr i16, i16* %964, i64 8
  %969 = bitcast i16* %968 to <8 x i16>*
  %970 = load <8 x i16>, <8 x i16>* %969, align 2, !alias.scope !54
  %971 = bitcast i16* %965 to <8 x i16>*
  store <8 x i16> %967, <8 x i16>* %971, align 2, !alias.scope !57, !noalias !54
  %972 = getelementptr i16, i16* %965, i64 8
  %973 = bitcast i16* %972 to <8 x i16>*
  store <8 x i16> %970, <8 x i16>* %973, align 2, !alias.scope !57, !noalias !54
  %974 = or i64 %962, 16
  %975 = getelementptr i16, i16* %913, i64 %974
  %976 = getelementptr i16, i16* %938, i64 %974
  %977 = bitcast i16* %975 to <8 x i16>*
  %978 = load <8 x i16>, <8 x i16>* %977, align 2, !alias.scope !54
  %979 = getelementptr i16, i16* %975, i64 8
  %980 = bitcast i16* %979 to <8 x i16>*
  %981 = load <8 x i16>, <8 x i16>* %980, align 2, !alias.scope !54
  %982 = bitcast i16* %976 to <8 x i16>*
  store <8 x i16> %978, <8 x i16>* %982, align 2, !alias.scope !57, !noalias !54
  %983 = getelementptr i16, i16* %976, i64 8
  %984 = bitcast i16* %983 to <8 x i16>*
  store <8 x i16> %981, <8 x i16>* %984, align 2, !alias.scope !57, !noalias !54
  %985 = or i64 %962, 32
  %986 = getelementptr i16, i16* %913, i64 %985
  %987 = getelementptr i16, i16* %938, i64 %985
  %988 = bitcast i16* %986 to <8 x i16>*
  %989 = load <8 x i16>, <8 x i16>* %988, align 2, !alias.scope !54
  %990 = getelementptr i16, i16* %986, i64 8
  %991 = bitcast i16* %990 to <8 x i16>*
  %992 = load <8 x i16>, <8 x i16>* %991, align 2, !alias.scope !54
  %993 = bitcast i16* %987 to <8 x i16>*
  store <8 x i16> %989, <8 x i16>* %993, align 2, !alias.scope !57, !noalias !54
  %994 = getelementptr i16, i16* %987, i64 8
  %995 = bitcast i16* %994 to <8 x i16>*
  store <8 x i16> %992, <8 x i16>* %995, align 2, !alias.scope !57, !noalias !54
  %996 = or i64 %962, 48
  %997 = getelementptr i16, i16* %913, i64 %996
  %998 = getelementptr i16, i16* %938, i64 %996
  %999 = bitcast i16* %997 to <8 x i16>*
  %1000 = load <8 x i16>, <8 x i16>* %999, align 2, !alias.scope !54
  %1001 = getelementptr i16, i16* %997, i64 8
  %1002 = bitcast i16* %1001 to <8 x i16>*
  %1003 = load <8 x i16>, <8 x i16>* %1002, align 2, !alias.scope !54
  %1004 = bitcast i16* %998 to <8 x i16>*
  store <8 x i16> %1000, <8 x i16>* %1004, align 2, !alias.scope !57, !noalias !54
  %1005 = getelementptr i16, i16* %998, i64 8
  %1006 = bitcast i16* %1005 to <8 x i16>*
  store <8 x i16> %1003, <8 x i16>* %1006, align 2, !alias.scope !57, !noalias !54
  %1007 = add i64 %962, 64
  %1008 = add i64 %963, -4
  %1009 = icmp eq i64 %1008, 0
  br i1 %1009, label %1010, label %961, !llvm.loop !59

1010:                                             ; preds = %961, %949
  %1011 = phi i64 [ 0, %949 ], [ %1007, %961 ]
  %1012 = icmp eq i64 %957, 0
  br i1 %1012, label %1029, label %1013

1013:                                             ; preds = %1010, %1013
  %1014 = phi i64 [ %1026, %1013 ], [ %1011, %1010 ]
  %1015 = phi i64 [ %1027, %1013 ], [ %957, %1010 ]
  %1016 = getelementptr i16, i16* %913, i64 %1014
  %1017 = getelementptr i16, i16* %938, i64 %1014
  %1018 = bitcast i16* %1016 to <8 x i16>*
  %1019 = load <8 x i16>, <8 x i16>* %1018, align 2, !alias.scope !54
  %1020 = getelementptr i16, i16* %1016, i64 8
  %1021 = bitcast i16* %1020 to <8 x i16>*
  %1022 = load <8 x i16>, <8 x i16>* %1021, align 2, !alias.scope !54
  %1023 = bitcast i16* %1017 to <8 x i16>*
  store <8 x i16> %1019, <8 x i16>* %1023, align 2, !alias.scope !57, !noalias !54
  %1024 = getelementptr i16, i16* %1017, i64 8
  %1025 = bitcast i16* %1024 to <8 x i16>*
  store <8 x i16> %1022, <8 x i16>* %1025, align 2, !alias.scope !57, !noalias !54
  %1026 = add i64 %1014, 16
  %1027 = add i64 %1015, -1
  %1028 = icmp eq i64 %1027, 0
  br i1 %1028, label %1029, label %1013, !llvm.loop !60

1029:                                             ; preds = %1013, %1010
  %1030 = icmp eq i64 %940, %950
  br i1 %1030, label %1084, label %1031

1031:                                             ; preds = %1029, %942, %937
  %1032 = phi i64 [ %939, %942 ], [ %939, %937 ], [ %951, %1029 ]
  %1033 = phi i16* [ %913, %942 ], [ %913, %937 ], [ %952, %1029 ]
  %1034 = phi i16* [ %938, %942 ], [ %938, %937 ], [ %953, %1029 ]
  %1035 = add i64 %1032, -1
  %1036 = and i64 %1032, 7
  %1037 = icmp eq i64 %1036, 0
  br i1 %1037, label %1049, label %1038

1038:                                             ; preds = %1031, %1038
  %1039 = phi i64 [ %1044, %1038 ], [ %1032, %1031 ]
  %1040 = phi i16* [ %1046, %1038 ], [ %1033, %1031 ]
  %1041 = phi i16* [ %1045, %1038 ], [ %1034, %1031 ]
  %1042 = phi i64 [ %1047, %1038 ], [ %1036, %1031 ]
  %1043 = load i16, i16* %1040, align 2
  store i16 %1043, i16* %1041, align 2
  %1044 = add i64 %1039, -1
  %1045 = getelementptr inbounds i16, i16* %1041, i64 1
  %1046 = getelementptr inbounds i16, i16* %1040, i64 1
  %1047 = add i64 %1042, -1
  %1048 = icmp eq i64 %1047, 0
  br i1 %1048, label %1049, label %1038, !llvm.loop !61

1049:                                             ; preds = %1038, %1031
  %1050 = phi i64 [ %1032, %1031 ], [ %1044, %1038 ]
  %1051 = phi i16* [ %1033, %1031 ], [ %1046, %1038 ]
  %1052 = phi i16* [ %1034, %1031 ], [ %1045, %1038 ]
  %1053 = icmp ult i64 %1035, 7
  br i1 %1053, label %1084, label %1054

1054:                                             ; preds = %1049, %1054
  %1055 = phi i64 [ %1080, %1054 ], [ %1050, %1049 ]
  %1056 = phi i16* [ %1082, %1054 ], [ %1051, %1049 ]
  %1057 = phi i16* [ %1081, %1054 ], [ %1052, %1049 ]
  %1058 = load i16, i16* %1056, align 2
  store i16 %1058, i16* %1057, align 2
  %1059 = getelementptr inbounds i16, i16* %1057, i64 1
  %1060 = getelementptr inbounds i16, i16* %1056, i64 1
  %1061 = load i16, i16* %1060, align 2
  store i16 %1061, i16* %1059, align 2
  %1062 = getelementptr inbounds i16, i16* %1057, i64 2
  %1063 = getelementptr inbounds i16, i16* %1056, i64 2
  %1064 = load i16, i16* %1063, align 2
  store i16 %1064, i16* %1062, align 2
  %1065 = getelementptr inbounds i16, i16* %1057, i64 3
  %1066 = getelementptr inbounds i16, i16* %1056, i64 3
  %1067 = load i16, i16* %1066, align 2
  store i16 %1067, i16* %1065, align 2
  %1068 = getelementptr inbounds i16, i16* %1057, i64 4
  %1069 = getelementptr inbounds i16, i16* %1056, i64 4
  %1070 = load i16, i16* %1069, align 2
  store i16 %1070, i16* %1068, align 2
  %1071 = getelementptr inbounds i16, i16* %1057, i64 5
  %1072 = getelementptr inbounds i16, i16* %1056, i64 5
  %1073 = load i16, i16* %1072, align 2
  store i16 %1073, i16* %1071, align 2
  %1074 = getelementptr inbounds i16, i16* %1057, i64 6
  %1075 = getelementptr inbounds i16, i16* %1056, i64 6
  %1076 = load i16, i16* %1075, align 2
  store i16 %1076, i16* %1074, align 2
  %1077 = getelementptr inbounds i16, i16* %1057, i64 7
  %1078 = getelementptr inbounds i16, i16* %1056, i64 7
  %1079 = load i16, i16* %1078, align 2
  store i16 %1079, i16* %1077, align 2
  %1080 = add i64 %1055, -8
  %1081 = getelementptr inbounds i16, i16* %1057, i64 8
  %1082 = getelementptr inbounds i16, i16* %1056, i64 8
  %1083 = icmp eq i64 %1080, 0
  br i1 %1083, label %1084, label %1054, !llvm.loop !62

1084:                                             ; preds = %1049, %1054, %873, %878, %1029, %853, %910, %730
  %1085 = load i8, i8* %538, align 1
  %1086 = icmp slt i8 %1085, 0
  br i1 %1086, label %1087, label %1090

1087:                                             ; preds = %1084
  %1088 = bitcast %"class.std::__1::basic_string"* %10 to i8**
  %1089 = load i8*, i8** %1088, align 8
  call void @_ZdlPv(i8* %1089) #17
  br label %1090

1090:                                             ; preds = %1084, %1087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %496) #15
  br label %1091

1091:                                             ; preds = %402, %407, %382, %259, %1090
  %1092 = load i8, i8* %244, align 1
  %1093 = icmp slt i8 %1092, 0
  br i1 %1093, label %1094, label %1096

1094:                                             ; preds = %1091
  %1095 = load i8*, i8** %229, align 8
  call void @_ZdlPv(i8* %1095) #17
  br label %1096

1096:                                             ; preds = %1091, %1094
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %228) #15
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %4) #15
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %200) #15
  %1097 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1098 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1097, i64 0, i32 1, i32 1
  %1099 = load i8, i8* %1098, align 1
  %1100 = icmp slt i8 %1099, 0
  br i1 %1100, label %1101, label %1104

1101:                                             ; preds = %1096
  %1102 = bitcast %"class.std::__1::basic_string"* %13 to i8**
  %1103 = load i8*, i8** %1102, align 8
  call void @_ZdlPv(i8* %1103) #17
  br label %1104

1104:                                             ; preds = %1096, %1101
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare void @_ZN13url_formatter8FixupURLERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(%class.GURL* sret, %"class.std::__1::basic_string.14"* dereferenceable(24), %"class.std::__1::basic_string.14"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.14"* sret, i16*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZNK4GURL15HostIsIPAddressEv(%class.GURL*) local_unnamed_addr #1

declare void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZN17AutocompleteInput13HasHTTPSchemeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN20AutocompleteProvider16TrimSchemePrefixEPNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEb(%"class.std::__1::basic_string"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  br i1 %1, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call zeroext i1 @_ZN17AutocompleteInput14HasHTTPSSchemeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string"* dereferenceable(24) %0) #15
  br i1 %6, label %9, label %533

7:                                                ; preds = %2
  %8 = tail call zeroext i1 @_ZN17AutocompleteInput13HasHTTPSchemeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string"* dereferenceable(24) %0) #15
  br i1 %8, label %9, label %533

9:                                                ; preds = %5, %7
  %10 = select i1 %1, [0 x i8]* @_ZN3url12kHttpsSchemeE, [0 x i8]* @_ZN3url11kHttpSchemeE
  %11 = getelementptr inbounds [0 x i8], [0 x i8]* %10, i64 0, i64 0
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #15
  %13 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #15
  %14 = tail call i64 @strlen(i8* nonnull %11) #15
  call void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %4, i8* nonnull %11, i64 %14) #15
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1, !noalias !63
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %9
  %20 = zext i8 %17 to i64
  br label %28

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8, !noalias !63
  %24 = and i64 %23, 9223372036854775807
  %25 = add nsw i64 %24, -1
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8, !noalias !63
  br label %28

28:                                               ; preds = %21, %19
  %29 = phi i64 [ 10, %19 ], [ %25, %21 ]
  %30 = phi i64 [ %20, %19 ], [ %27, %21 ]
  %31 = icmp eq i64 %30, %29
  br i1 %31, label %32, label %35

32:                                               ; preds = %28
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* nonnull %4, i64 %29, i64 1, i64 %29, i64 %29, i64 0, i64 0) #15, !noalias !63
  %33 = load i8, i8* %16, align 1, !noalias !63
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %40, label %36

35:                                               ; preds = %28
  br i1 %18, label %40, label %36

36:                                               ; preds = %35, %32
  %37 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %38 = trunc i64 %30 to i8
  %39 = add i8 %38, 1
  store i8 %39, i8* %16, align 1, !noalias !63
  br label %45

40:                                               ; preds = %35, %32
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i16*, i16** %41, align 8, !noalias !63
  %43 = add i64 %30, 1
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %43, i64* %44, align 8, !noalias !63
  br label %45

45:                                               ; preds = %36, %40
  %46 = phi i16* [ %37, %36 ], [ %42, %40 ]
  %47 = getelementptr inbounds i16, i16* %46, i64 %30
  store i16 58, i16* %47, align 2, !noalias !63
  %48 = getelementptr inbounds i16, i16* %47, i64 1
  store i16 0, i16* %48, align 2, !noalias !63
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* nonnull align 8 %13, i64 24, i1 false) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #15, !noalias !63
  %49 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %49, i64 0, i32 1, i32 1
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i16*, i16** %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  br label %61

58:                                               ; preds = %45
  %59 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %60 = zext i8 %51 to i64
  br label %61

61:                                               ; preds = %58, %53
  %62 = phi i16* [ %55, %53 ], [ %59, %58 ]
  %63 = phi i64 [ %57, %53 ], [ %60, %58 ]
  %64 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %64, i64 0, i32 1, i32 1
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i16*, i16** %68, align 8
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %73 = zext i8 %66 to i64
  %74 = select i1 %67, i16* %69, i16* %72
  %75 = select i1 %67, i64 %71, i64 %73
  %76 = icmp eq i64 %75, 0
  %77 = bitcast i16* %69 to i8*
  br i1 %76, label %133, label %78

78:                                               ; preds = %61
  %79 = getelementptr inbounds i16, i16* %62, i64 %63
  %80 = shl nuw i64 %75, 1
  %81 = ashr exact i64 %80, 1
  %82 = ptrtoint i16* %79 to i64
  %83 = ptrtoint i16* %62 to i64
  %84 = shl nuw i64 %63, 1
  %85 = ashr exact i64 %84, 1
  %86 = icmp slt i64 %85, %81
  br i1 %86, label %126, label %87

87:                                               ; preds = %78
  %88 = load i16, i16* %74, align 2
  br label %89

89:                                               ; preds = %118, %87
  %90 = phi i64 [ %85, %87 ], [ %122, %118 ]
  %91 = phi i16* [ %62, %87 ], [ %119, %118 ]
  %92 = sub nsw i64 %90, %81
  %93 = add nsw i64 %92, 1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %126, label %95

95:                                               ; preds = %89, %100
  %96 = phi i64 [ %102, %100 ], [ %93, %89 ]
  %97 = phi i16* [ %101, %100 ], [ %91, %89 ]
  %98 = load i16, i16* %97, align 2
  %99 = icmp eq i16 %98, %88
  br i1 %99, label %104, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds i16, i16* %97, i64 1
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %126, label %95

104:                                              ; preds = %95
  %105 = icmp eq i16* %97, null
  br i1 %105, label %126, label %106

106:                                              ; preds = %104, %113
  %107 = phi i16* [ %111, %113 ], [ %97, %104 ]
  %108 = phi i16* [ %114, %113 ], [ %74, %104 ]
  %109 = phi i64 [ %110, %113 ], [ %81, %104 ]
  %110 = add i64 %109, -1
  %111 = getelementptr inbounds i16, i16* %107, i64 1
  %112 = icmp eq i64 %110, 0
  br i1 %112, label %124, label %113

113:                                              ; preds = %106
  %114 = getelementptr inbounds i16, i16* %108, i64 1
  %115 = load i16, i16* %111, align 2
  %116 = load i16, i16* %114, align 2
  %117 = icmp eq i16 %116, %115
  br i1 %117, label %106, label %118

118:                                              ; preds = %113
  %119 = getelementptr inbounds i16, i16* %97, i64 1
  %120 = ptrtoint i16* %119 to i64
  %121 = sub i64 %82, %120
  %122 = ashr exact i64 %121, 1
  %123 = icmp slt i64 %122, %81
  br i1 %123, label %126, label %89

124:                                              ; preds = %106
  %125 = ptrtoint i16* %97 to i64
  br label %126

126:                                              ; preds = %118, %104, %89, %100, %124, %78
  %127 = phi i64 [ %125, %124 ], [ %82, %78 ], [ %82, %100 ], [ %82, %89 ], [ %82, %104 ], [ %82, %118 ]
  %128 = phi i16* [ %97, %124 ], [ %79, %78 ], [ %79, %100 ], [ %79, %89 ], [ %79, %104 ], [ %79, %118 ]
  %129 = icmp eq i16* %128, %79
  %130 = sub i64 %127, %83
  %131 = ashr exact i64 %130, 1
  %132 = select i1 %129, i64 -1, i64 %131
  br label %133

133:                                              ; preds = %61, %126
  %134 = phi i64 [ 0, %61 ], [ %132, %126 ]
  br i1 %67, label %135, label %141

135:                                              ; preds = %133
  call void @_ZdlPv(i8* %77) #17
  %136 = load i8, i8* %16, align 1
  %137 = icmp slt i8 %136, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  %139 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %140 = load i8*, i8** %139, align 8
  call void @_ZdlPv(i8* %140) #17
  br label %141

141:                                              ; preds = %133, %135, %138
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #15
  %142 = call i64 @strlen(i8* nonnull %11) #18
  %143 = add i64 %142, %134
  %144 = load i8, i8* %50, align 1
  %145 = icmp slt i8 %144, 0
  br i1 %145, label %146, label %149

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %148 = load i64, i64* %147, align 8
  br label %151

149:                                              ; preds = %141
  %150 = zext i8 %144 to i64
  br label %151

151:                                              ; preds = %146, %149
  %152 = phi i64 [ %148, %146 ], [ %150, %149 ]
  %153 = add i64 %143, 3
  %154 = icmp ult i64 %153, %152
  %155 = select i1 %154, i64 %153, i64 %152
  %156 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %157 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %158

158:                                              ; preds = %165, %151
  %159 = phi i64 [ %143, %151 ], [ %160, %165 ]
  %160 = add i64 %159, 1
  %161 = icmp ult i64 %160, %155
  br i1 %161, label %162, label %170

162:                                              ; preds = %158
  br i1 %145, label %163, label %165

163:                                              ; preds = %162
  %164 = load i16*, i16** %157, align 8
  br label %165

165:                                              ; preds = %162, %163
  %166 = phi i16* [ %164, %163 ], [ %156, %162 ]
  %167 = getelementptr inbounds i16, i16* %166, i64 %160
  %168 = load i16, i16* %167, align 2
  %169 = icmp eq i16 %168, 47
  br i1 %169, label %158, label %170

170:                                              ; preds = %158, %165
  %171 = sub i64 %160, %134
  br i1 %145, label %172, label %175

172:                                              ; preds = %170
  %173 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %174 = load i64, i64* %173, align 8
  br label %177

175:                                              ; preds = %170
  %176 = zext i8 %144 to i64
  br label %177

177:                                              ; preds = %175, %172
  %178 = phi i64 [ %174, %172 ], [ %176, %175 ]
  %179 = icmp ult i64 %178, %134
  br i1 %179, label %180, label %182

180:                                              ; preds = %177
  %181 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %181) #16
  unreachable

182:                                              ; preds = %177
  switch i64 %171, label %191 [
    i64 -1, label %183
    i64 0, label %530
  ]

183:                                              ; preds = %182
  br i1 %145, label %184, label %188

184:                                              ; preds = %183
  %185 = load i16*, i16** %157, align 8
  %186 = getelementptr inbounds i16, i16* %185, i64 %134
  store i16 0, i16* %186, align 2
  %187 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %134, i64* %187, align 8
  br label %530

188:                                              ; preds = %183
  %189 = getelementptr inbounds i16, i16* %156, i64 %134
  store i16 0, i16* %189, align 2
  %190 = trunc i64 %134 to i8
  store i8 %190, i8* %50, align 1
  br label %530

191:                                              ; preds = %182
  br i1 %145, label %192, label %196

192:                                              ; preds = %191
  %193 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %194 = load i64, i64* %193, align 8
  %195 = load i16*, i16** %157, align 8
  br label %198

196:                                              ; preds = %191
  %197 = zext i8 %144 to i64
  br label %198

198:                                              ; preds = %196, %192
  %199 = phi i64 [ %194, %192 ], [ %197, %196 ]
  %200 = phi i16* [ %195, %192 ], [ %156, %196 ]
  %201 = sub i64 %199, %134
  %202 = icmp ult i64 %201, %171
  %203 = select i1 %202, i64 %201, i64 %171
  %204 = sub i64 %201, %203
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %520, label %206

206:                                              ; preds = %198
  %207 = getelementptr inbounds i16, i16* %200, i64 %134
  %208 = getelementptr inbounds i16, i16* %207, i64 %203
  %209 = icmp sgt i64 %203, 0
  br i1 %209, label %210, label %354

210:                                              ; preds = %206
  %211 = icmp ult i64 %204, 16
  br i1 %211, label %301, label %212

212:                                              ; preds = %210
  %213 = sub i64 %199, %203
  %214 = getelementptr i16, i16* %200, i64 %213
  %215 = getelementptr i16, i16* %200, i64 %199
  %216 = icmp ult i16* %207, %215
  %217 = icmp ult i16* %208, %214
  %218 = and i1 %216, %217
  br i1 %218, label %301, label %219

219:                                              ; preds = %212
  %220 = and i64 %204, -16
  %221 = sub i64 %204, %220
  %222 = getelementptr i16, i16* %208, i64 %220
  %223 = getelementptr i16, i16* %207, i64 %220
  %224 = add i64 %220, -16
  %225 = lshr exact i64 %224, 4
  %226 = add nuw nsw i64 %225, 1
  %227 = and i64 %226, 3
  %228 = icmp ult i64 %224, 48
  br i1 %228, label %280, label %229

229:                                              ; preds = %219
  %230 = sub nsw i64 %226, %227
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %277, %231 ]
  %233 = phi i64 [ %230, %229 ], [ %278, %231 ]
  %234 = getelementptr i16, i16* %208, i64 %232
  %235 = getelementptr i16, i16* %207, i64 %232
  %236 = bitcast i16* %234 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2, !alias.scope !66
  %238 = getelementptr i16, i16* %234, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !66
  %241 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %241, align 2, !alias.scope !69, !noalias !66
  %242 = getelementptr i16, i16* %235, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %243, align 2, !alias.scope !69, !noalias !66
  %244 = or i64 %232, 16
  %245 = getelementptr i16, i16* %208, i64 %244
  %246 = getelementptr i16, i16* %207, i64 %244
  %247 = bitcast i16* %245 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2, !alias.scope !66
  %249 = getelementptr i16, i16* %245, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !66
  %252 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %252, align 2, !alias.scope !69, !noalias !66
  %253 = getelementptr i16, i16* %246, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %254, align 2, !alias.scope !69, !noalias !66
  %255 = or i64 %232, 32
  %256 = getelementptr i16, i16* %208, i64 %255
  %257 = getelementptr i16, i16* %207, i64 %255
  %258 = bitcast i16* %256 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !66
  %260 = getelementptr i16, i16* %256, i64 8
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2, !alias.scope !66
  %263 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %259, <8 x i16>* %263, align 2, !alias.scope !69, !noalias !66
  %264 = getelementptr i16, i16* %257, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %265, align 2, !alias.scope !69, !noalias !66
  %266 = or i64 %232, 48
  %267 = getelementptr i16, i16* %208, i64 %266
  %268 = getelementptr i16, i16* %207, i64 %266
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !66
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !66
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !69, !noalias !66
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !69, !noalias !66
  %277 = add i64 %232, 64
  %278 = add i64 %233, -4
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %231, !llvm.loop !71

280:                                              ; preds = %231, %219
  %281 = phi i64 [ 0, %219 ], [ %277, %231 ]
  %282 = icmp eq i64 %227, 0
  br i1 %282, label %299, label %283

283:                                              ; preds = %280, %283
  %284 = phi i64 [ %296, %283 ], [ %281, %280 ]
  %285 = phi i64 [ %297, %283 ], [ %227, %280 ]
  %286 = getelementptr i16, i16* %208, i64 %284
  %287 = getelementptr i16, i16* %207, i64 %284
  %288 = bitcast i16* %286 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 2, !alias.scope !66
  %290 = getelementptr i16, i16* %286, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !66
  %293 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %293, align 2, !alias.scope !69, !noalias !66
  %294 = getelementptr i16, i16* %287, i64 8
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %295, align 2, !alias.scope !69, !noalias !66
  %296 = add i64 %284, 16
  %297 = add i64 %285, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %283, !llvm.loop !72

299:                                              ; preds = %283, %280
  %300 = icmp eq i64 %204, %220
  br i1 %300, label %520, label %301

301:                                              ; preds = %299, %212, %210
  %302 = phi i64 [ %204, %212 ], [ %204, %210 ], [ %221, %299 ]
  %303 = phi i16* [ %208, %212 ], [ %208, %210 ], [ %222, %299 ]
  %304 = phi i16* [ %207, %212 ], [ %207, %210 ], [ %223, %299 ]
  %305 = add i64 %302, -1
  %306 = and i64 %302, 7
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %319, label %308

308:                                              ; preds = %301, %308
  %309 = phi i64 [ %314, %308 ], [ %302, %301 ]
  %310 = phi i16* [ %316, %308 ], [ %303, %301 ]
  %311 = phi i16* [ %315, %308 ], [ %304, %301 ]
  %312 = phi i64 [ %317, %308 ], [ %306, %301 ]
  %313 = load i16, i16* %310, align 2
  store i16 %313, i16* %311, align 2
  %314 = add i64 %309, -1
  %315 = getelementptr inbounds i16, i16* %311, i64 1
  %316 = getelementptr inbounds i16, i16* %310, i64 1
  %317 = add i64 %312, -1
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %319, label %308, !llvm.loop !73

319:                                              ; preds = %308, %301
  %320 = phi i64 [ %302, %301 ], [ %314, %308 ]
  %321 = phi i16* [ %303, %301 ], [ %316, %308 ]
  %322 = phi i16* [ %304, %301 ], [ %315, %308 ]
  %323 = icmp ult i64 %305, 7
  br i1 %323, label %520, label %324

324:                                              ; preds = %319, %324
  %325 = phi i64 [ %350, %324 ], [ %320, %319 ]
  %326 = phi i16* [ %352, %324 ], [ %321, %319 ]
  %327 = phi i16* [ %351, %324 ], [ %322, %319 ]
  %328 = load i16, i16* %326, align 2
  store i16 %328, i16* %327, align 2
  %329 = getelementptr inbounds i16, i16* %327, i64 1
  %330 = getelementptr inbounds i16, i16* %326, i64 1
  %331 = load i16, i16* %330, align 2
  store i16 %331, i16* %329, align 2
  %332 = getelementptr inbounds i16, i16* %327, i64 2
  %333 = getelementptr inbounds i16, i16* %326, i64 2
  %334 = load i16, i16* %333, align 2
  store i16 %334, i16* %332, align 2
  %335 = getelementptr inbounds i16, i16* %327, i64 3
  %336 = getelementptr inbounds i16, i16* %326, i64 3
  %337 = load i16, i16* %336, align 2
  store i16 %337, i16* %335, align 2
  %338 = getelementptr inbounds i16, i16* %327, i64 4
  %339 = getelementptr inbounds i16, i16* %326, i64 4
  %340 = load i16, i16* %339, align 2
  store i16 %340, i16* %338, align 2
  %341 = getelementptr inbounds i16, i16* %327, i64 5
  %342 = getelementptr inbounds i16, i16* %326, i64 5
  %343 = load i16, i16* %342, align 2
  store i16 %343, i16* %341, align 2
  %344 = getelementptr inbounds i16, i16* %327, i64 6
  %345 = getelementptr inbounds i16, i16* %326, i64 6
  %346 = load i16, i16* %345, align 2
  store i16 %346, i16* %344, align 2
  %347 = getelementptr inbounds i16, i16* %327, i64 7
  %348 = getelementptr inbounds i16, i16* %326, i64 7
  %349 = load i16, i16* %348, align 2
  store i16 %349, i16* %347, align 2
  %350 = add i64 %325, -8
  %351 = getelementptr inbounds i16, i16* %327, i64 8
  %352 = getelementptr inbounds i16, i16* %326, i64 8
  %353 = icmp eq i64 %350, 0
  br i1 %353, label %520, label %324, !llvm.loop !74

354:                                              ; preds = %206
  %355 = icmp slt i64 %203, 0
  br i1 %355, label %356, label %520

356:                                              ; preds = %354
  %357 = getelementptr inbounds i16, i16* %208, i64 %204
  %358 = getelementptr inbounds i16, i16* %207, i64 %204
  %359 = icmp ult i64 %204, 16
  br i1 %359, label %467, label %360

360:                                              ; preds = %356
  %361 = add i64 %199, -1
  %362 = sub i64 %361, %134
  %363 = sub i64 %362, %203
  %364 = sub i64 %361, %203
  %365 = getelementptr i16, i16* %200, i64 %364
  %366 = ptrtoint i16* %365 to i64
  %367 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %363, i64 2)
  %368 = extractvalue { i64, i1 } %367, 0
  %369 = extractvalue { i64, i1 } %367, 1
  %370 = icmp ugt i64 %368, %366
  %371 = or i1 %370, %369
  %372 = add i64 %199, -1
  %373 = getelementptr i16, i16* %200, i64 %372
  %374 = ptrtoint i16* %373 to i64
  %375 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %363, i64 2)
  %376 = extractvalue { i64, i1 } %375, 0
  %377 = extractvalue { i64, i1 } %375, 1
  %378 = icmp ugt i64 %376, %374
  %379 = or i1 %378, %377
  %380 = or i1 %371, %379
  br i1 %380, label %467, label %381

381:                                              ; preds = %360
  %382 = add i64 %134, %203
  %383 = getelementptr i16, i16* %200, i64 %382
  %384 = icmp ult i16* %207, %357
  %385 = icmp ult i16* %383, %358
  %386 = and i1 %384, %385
  br i1 %386, label %467, label %387

387:                                              ; preds = %381
  %388 = and i64 %204, -16
  %389 = sub i64 %204, %388
  %390 = sub i64 0, %388
  %391 = getelementptr i16, i16* %357, i64 %390
  %392 = sub i64 0, %388
  %393 = getelementptr i16, i16* %358, i64 %392
  %394 = add i64 %388, -16
  %395 = lshr exact i64 %394, 4
  %396 = add nuw nsw i64 %395, 1
  %397 = and i64 %396, 1
  %398 = icmp eq i64 %394, 0
  br i1 %398, label %445, label %399

399:                                              ; preds = %387
  %400 = sub nuw nsw i64 %396, %397
  %401 = getelementptr i16, i16* %357, i64 -1
  %402 = getelementptr i16, i16* %358, i64 -1
  %403 = getelementptr i16, i16* %357, i64 -1
  %404 = getelementptr i16, i16* %358, i64 -1
  br label %405

405:                                              ; preds = %405, %399
  %406 = phi i64 [ 0, %399 ], [ %440, %405 ]
  %407 = phi i64 [ %400, %399 ], [ %441, %405 ]
  %408 = sub i64 0, %406
  %409 = sub i64 0, %406
  %410 = getelementptr inbounds i16, i16* %402, i64 %409
  %411 = getelementptr inbounds i16, i16* %401, i64 %408
  %412 = getelementptr inbounds i16, i16* %411, i64 -7
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 2, !alias.scope !75
  %415 = getelementptr inbounds i16, i16* %411, i64 -8
  %416 = getelementptr inbounds i16, i16* %415, i64 -7
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !75
  %419 = getelementptr inbounds i16, i16* %410, i64 -7
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %414, <8 x i16>* %420, align 2, !alias.scope !78, !noalias !75
  %421 = getelementptr inbounds i16, i16* %410, i64 -8
  %422 = getelementptr inbounds i16, i16* %421, i64 -7
  %423 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %423, align 2, !alias.scope !78, !noalias !75
  %424 = sub nuw nsw i64 -16, %406
  %425 = sub nuw nsw i64 -16, %406
  %426 = getelementptr inbounds i16, i16* %404, i64 %425
  %427 = getelementptr inbounds i16, i16* %403, i64 %424
  %428 = getelementptr inbounds i16, i16* %427, i64 -7
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !75
  %431 = getelementptr inbounds i16, i16* %427, i64 -8
  %432 = getelementptr inbounds i16, i16* %431, i64 -7
  %433 = bitcast i16* %432 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 2, !alias.scope !75
  %435 = getelementptr inbounds i16, i16* %426, i64 -7
  %436 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %436, align 2, !alias.scope !78, !noalias !75
  %437 = getelementptr inbounds i16, i16* %426, i64 -8
  %438 = getelementptr inbounds i16, i16* %437, i64 -7
  %439 = bitcast i16* %438 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %439, align 2, !alias.scope !78, !noalias !75
  %440 = add i64 %406, 32
  %441 = add i64 %407, -2
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %443, label %405, !llvm.loop !80

443:                                              ; preds = %405
  %444 = sub nuw nsw i64 -32, %406
  br label %445

445:                                              ; preds = %443, %387
  %446 = phi i64 [ 0, %387 ], [ %444, %443 ]
  %447 = icmp eq i64 %397, 0
  br i1 %447, label %465, label %448

448:                                              ; preds = %445
  %449 = getelementptr i16, i16* %357, i64 -1
  %450 = getelementptr i16, i16* %358, i64 -1
  %451 = getelementptr inbounds i16, i16* %450, i64 %446
  %452 = getelementptr inbounds i16, i16* %449, i64 %446
  %453 = getelementptr inbounds i16, i16* %452, i64 -7
  %454 = bitcast i16* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 2, !alias.scope !75
  %456 = getelementptr inbounds i16, i16* %452, i64 -8
  %457 = getelementptr inbounds i16, i16* %456, i64 -7
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 2, !alias.scope !75
  %460 = getelementptr inbounds i16, i16* %451, i64 -7
  %461 = bitcast i16* %460 to <8 x i16>*
  store <8 x i16> %455, <8 x i16>* %461, align 2, !alias.scope !78, !noalias !75
  %462 = getelementptr inbounds i16, i16* %451, i64 -8
  %463 = getelementptr inbounds i16, i16* %462, i64 -7
  %464 = bitcast i16* %463 to <8 x i16>*
  store <8 x i16> %459, <8 x i16>* %464, align 2, !alias.scope !78, !noalias !75
  br label %465

465:                                              ; preds = %445, %448
  %466 = icmp eq i64 %204, %388
  br i1 %466, label %520, label %467

467:                                              ; preds = %465, %381, %360, %356
  %468 = phi i64 [ %204, %381 ], [ %204, %360 ], [ %204, %356 ], [ %389, %465 ]
  %469 = phi i16* [ %357, %381 ], [ %357, %360 ], [ %357, %356 ], [ %391, %465 ]
  %470 = phi i16* [ %358, %381 ], [ %358, %360 ], [ %358, %356 ], [ %393, %465 ]
  %471 = add i64 %468, -1
  %472 = and i64 %468, 7
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %485, label %474

474:                                              ; preds = %467, %474
  %475 = phi i64 [ %482, %474 ], [ %468, %467 ]
  %476 = phi i16* [ %480, %474 ], [ %469, %467 ]
  %477 = phi i16* [ %479, %474 ], [ %470, %467 ]
  %478 = phi i64 [ %483, %474 ], [ %472, %467 ]
  %479 = getelementptr inbounds i16, i16* %477, i64 -1
  %480 = getelementptr inbounds i16, i16* %476, i64 -1
  %481 = load i16, i16* %480, align 2
  store i16 %481, i16* %479, align 2
  %482 = add i64 %475, -1
  %483 = add i64 %478, -1
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %485, label %474, !llvm.loop !81

485:                                              ; preds = %474, %467
  %486 = phi i64 [ %468, %467 ], [ %482, %474 ]
  %487 = phi i16* [ %469, %467 ], [ %480, %474 ]
  %488 = phi i16* [ %470, %467 ], [ %479, %474 ]
  %489 = icmp ult i64 %471, 7
  br i1 %489, label %520, label %490

490:                                              ; preds = %485, %490
  %491 = phi i64 [ %518, %490 ], [ %486, %485 ]
  %492 = phi i16* [ %516, %490 ], [ %487, %485 ]
  %493 = phi i16* [ %515, %490 ], [ %488, %485 ]
  %494 = getelementptr inbounds i16, i16* %493, i64 -1
  %495 = getelementptr inbounds i16, i16* %492, i64 -1
  %496 = load i16, i16* %495, align 2
  store i16 %496, i16* %494, align 2
  %497 = getelementptr inbounds i16, i16* %493, i64 -2
  %498 = getelementptr inbounds i16, i16* %492, i64 -2
  %499 = load i16, i16* %498, align 2
  store i16 %499, i16* %497, align 2
  %500 = getelementptr inbounds i16, i16* %493, i64 -3
  %501 = getelementptr inbounds i16, i16* %492, i64 -3
  %502 = load i16, i16* %501, align 2
  store i16 %502, i16* %500, align 2
  %503 = getelementptr inbounds i16, i16* %493, i64 -4
  %504 = getelementptr inbounds i16, i16* %492, i64 -4
  %505 = load i16, i16* %504, align 2
  store i16 %505, i16* %503, align 2
  %506 = getelementptr inbounds i16, i16* %493, i64 -5
  %507 = getelementptr inbounds i16, i16* %492, i64 -5
  %508 = load i16, i16* %507, align 2
  store i16 %508, i16* %506, align 2
  %509 = getelementptr inbounds i16, i16* %493, i64 -6
  %510 = getelementptr inbounds i16, i16* %492, i64 -6
  %511 = load i16, i16* %510, align 2
  store i16 %511, i16* %509, align 2
  %512 = getelementptr inbounds i16, i16* %493, i64 -7
  %513 = getelementptr inbounds i16, i16* %492, i64 -7
  %514 = load i16, i16* %513, align 2
  store i16 %514, i16* %512, align 2
  %515 = getelementptr inbounds i16, i16* %493, i64 -8
  %516 = getelementptr inbounds i16, i16* %492, i64 -8
  %517 = load i16, i16* %516, align 2
  store i16 %517, i16* %515, align 2
  %518 = add i64 %491, -8
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %520, label %490, !llvm.loop !82

520:                                              ; preds = %485, %490, %319, %324, %465, %299, %354, %198
  %521 = sub i64 %199, %203
  %522 = load i8, i8* %50, align 1
  %523 = icmp slt i8 %522, 0
  br i1 %523, label %524, label %526

524:                                              ; preds = %520
  %525 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %521, i64* %525, align 8
  br label %528

526:                                              ; preds = %520
  %527 = trunc i64 %521 to i8
  store i8 %527, i8* %50, align 1
  br label %528

528:                                              ; preds = %526, %524
  %529 = getelementptr inbounds i16, i16* %200, i64 %521
  store i16 0, i16* %529, align 2
  br label %530

530:                                              ; preds = %182, %528, %184, %188
  %531 = icmp eq i64 %134, 0
  %532 = select i1 %531, i64 %160, i64 0
  br label %533

533:                                              ; preds = %7, %5, %530
  %534 = phi i64 [ %532, %530 ], [ 0, %5 ], [ 0, %7 ]
  ret i64 %534
}

declare zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16*, i64, i16*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #8

declare zeroext i1 @_ZN17AutocompleteInput14HasHTTPSSchemeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20AutocompleteProvider33InExplicitExperimentalKeywordModeERK17AutocompleteInputRKNSt3__112basic_stringIDsNS3_11char_traitsIDsEENS3_9allocatorIDsEEEE(%class.AutocompleteInput* dereferenceable(512), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZN17OmniboxFieldTrial32IsExperimentalKeywordModeEnabledEv() #15
  br i1 %3, label %4, label %56

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 11
  %6 = load i8, i8* %5, align 1, !range !31
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %56, label %8

8:                                                ; preds = %4
  %9 = bitcast %class.AutocompleteInput* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %9, i64 0, i32 1, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i16*, i16** %13, align 8
  %15 = bitcast %class.AutocompleteInput* %0 to i16*
  %16 = select i1 %12, i16* %14, i16* %15
  %17 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = zext i8 %11 to i64
  %20 = select i1 %12, i64 %18, i64 %19
  %21 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %21, i64 0, i32 1, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i16*, i16** %25, align 8
  %27 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %28 = select i1 %24, i16* %26, i16* %27
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = zext i8 %23 to i64
  %32 = select i1 %24, i64 %30, i64 %31
  %33 = tail call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16* %16, i64 %20, i16* %28, i64 %32, i32 0) #15
  br i1 %33, label %34, label %56

34:                                               ; preds = %8
  %35 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, -2
  %38 = icmp eq i32 %37, 2
  br i1 %38, label %43, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 10
  %41 = load i8, i8* %40, align 8, !range !31
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %39, %34
  %44 = load i8, i8* %10, align 1
  %45 = icmp slt i8 %44, 0
  %46 = load i64, i64* %17, align 8
  %47 = zext i8 %44 to i64
  %48 = select i1 %45, i64 %46, i64 %47
  %49 = load i8, i8* %22, align 1
  %50 = icmp slt i8 %49, 0
  %51 = load i64, i64* %29, align 8
  %52 = zext i8 %49 to i64
  %53 = select i1 %50, i64 %51, i64 %52
  %54 = add i64 %53, 1
  %55 = icmp ugt i64 %48, %54
  br label %56

56:                                               ; preds = %4, %43, %39, %8, %2
  %57 = phi i1 [ false, %8 ], [ false, %4 ], [ false, %2 ], [ true, %39 ], [ %55, %43 ]
  ret i1 %57
}

declare zeroext i1 @_ZN17OmniboxFieldTrial32IsExperimentalKeywordModeEnabledEv() local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN20AutocompleteProvider25IsExplicitlyInKeywordModeERK17AutocompleteInputRKNSt3__112basic_stringIDsNS3_11char_traitsIDsEENS3_9allocatorIDsEEEE(%class.AutocompleteInput* nocapture readonly dereferenceable(512), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 13
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -2
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 10
  %9 = load i8, i8* %8, align 8, !range !31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %7, %2
  %12 = bitcast %class.AutocompleteInput* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %class.AutocompleteInput, %class.AutocompleteInput* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %14 to i64
  %19 = select i1 %15, i64 %17, i64 %18
  %20 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %20, i64 0, i32 1, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = zext i8 %22 to i64
  %27 = select i1 %23, i64 %25, i64 %26
  %28 = add i64 %27, 1
  %29 = icmp ugt i64 %19, %28
  br label %30

30:                                               ; preds = %7, %11
  %31 = phi i1 [ true, %7 ], [ %29, %11 ]
  ret i1 %31
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string.14"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN17AutocompleteMatchD1Ev(%struct.AutocompleteMatch*) unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

declare i64 @_ZNK17AutocompleteMatch19EstimateMemoryUsageEv(%struct.AutocompleteMatch*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24), i64, i64, %"class.std::__1::allocator.5"* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = zext i8 %8 to i64
  %13 = select i1 %9, i64 %11, i64 %12
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %16) #16
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %21 = select i1 %9, i16* %19, i16* %20
  %22 = getelementptr inbounds i16, i16* %21, i64 %2
  %23 = sub i64 %13, %2
  %24 = icmp ult i64 %23, %3
  %25 = select i1 %24, i64 %23, i64 %3
  %26 = icmp ugt i64 %25, 9223372036854775791
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %28) #16
  unreachable

29:                                               ; preds = %17
  %30 = icmp ult i64 %25, 11
  br i1 %30, label %44, label %31

31:                                               ; preds = %29
  %32 = add nuw nsw i64 %25, 8
  %33 = and i64 %32, -8
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @abort() #16
  unreachable

36:                                               ; preds = %31
  %37 = shl i64 %33, 1
  %38 = tail call i8* @_Znwm(i64 %37) #17
  %39 = bitcast i8* %38 to i16*
  %40 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %38, i8** %40, align 8
  %41 = or i64 %33, -9223372036854775808
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %25, i64* %43, align 8
  br label %50

44:                                               ; preds = %29
  %45 = trunc i64 %25 to i8
  %46 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %46, i64 0, i32 1, i32 1
  store i8 %45, i8* %47, align 1
  %48 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %49 = icmp eq i64 %25, 0
  br i1 %49, label %195, label %50

50:                                               ; preds = %44, %36
  %51 = phi i16* [ %39, %36 ], [ %48, %44 ]
  %52 = icmp ult i64 %25, 16
  br i1 %52, label %142, label %53

53:                                               ; preds = %50
  %54 = getelementptr i16, i16* %51, i64 %25
  %55 = add i64 %25, %2
  %56 = getelementptr i16, i16* %21, i64 %55
  %57 = icmp ult i16* %51, %56
  %58 = icmp ult i16* %22, %54
  %59 = and i1 %57, %58
  br i1 %59, label %142, label %60

60:                                               ; preds = %53
  %61 = and i64 %25, -16
  %62 = sub i64 %25, %61
  %63 = getelementptr i16, i16* %22, i64 %61
  %64 = getelementptr i16, i16* %51, i64 %61
  %65 = add i64 %61, -16
  %66 = lshr exact i64 %65, 4
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 48
  br i1 %69, label %121, label %70

70:                                               ; preds = %60
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr i16, i16* %22, i64 %73
  %76 = getelementptr i16, i16* %51, i64 %73
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !83
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !83
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !86, !noalias !83
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !86, !noalias !83
  %85 = or i64 %73, 16
  %86 = getelementptr i16, i16* %22, i64 %85
  %87 = getelementptr i16, i16* %51, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !83
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !83
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !86, !noalias !83
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !86, !noalias !83
  %96 = or i64 %73, 32
  %97 = getelementptr i16, i16* %22, i64 %96
  %98 = getelementptr i16, i16* %51, i64 %96
  %99 = bitcast i16* %97 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !83
  %101 = getelementptr i16, i16* %97, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !83
  %104 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %104, align 2, !alias.scope !86, !noalias !83
  %105 = getelementptr i16, i16* %98, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %106, align 2, !alias.scope !86, !noalias !83
  %107 = or i64 %73, 48
  %108 = getelementptr i16, i16* %22, i64 %107
  %109 = getelementptr i16, i16* %51, i64 %107
  %110 = bitcast i16* %108 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !83
  %112 = getelementptr i16, i16* %108, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !83
  %115 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %115, align 2, !alias.scope !86, !noalias !83
  %116 = getelementptr i16, i16* %109, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %117, align 2, !alias.scope !86, !noalias !83
  %118 = add i64 %73, 64
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !88

121:                                              ; preds = %72, %60
  %122 = phi i64 [ 0, %60 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr i16, i16* %22, i64 %125
  %128 = getelementptr i16, i16* %51, i64 %125
  %129 = bitcast i16* %127 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !83
  %131 = getelementptr i16, i16* %127, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !83
  %134 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !86, !noalias !83
  %135 = getelementptr i16, i16* %128, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !86, !noalias !83
  %137 = add i64 %125, 16
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !89

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %25, %61
  br i1 %141, label %195, label %142

142:                                              ; preds = %140, %53, %50
  %143 = phi i64 [ %25, %53 ], [ %25, %50 ], [ %62, %140 ]
  %144 = phi i16* [ %22, %53 ], [ %22, %50 ], [ %63, %140 ]
  %145 = phi i16* [ %51, %53 ], [ %51, %50 ], [ %64, %140 ]
  %146 = add i64 %143, -1
  %147 = and i64 %143, 7
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %160, label %149

149:                                              ; preds = %142, %149
  %150 = phi i64 [ %155, %149 ], [ %143, %142 ]
  %151 = phi i16* [ %157, %149 ], [ %144, %142 ]
  %152 = phi i16* [ %156, %149 ], [ %145, %142 ]
  %153 = phi i64 [ %158, %149 ], [ %147, %142 ]
  %154 = load i16, i16* %151, align 2
  store i16 %154, i16* %152, align 2
  %155 = add i64 %150, -1
  %156 = getelementptr inbounds i16, i16* %152, i64 1
  %157 = getelementptr inbounds i16, i16* %151, i64 1
  %158 = add i64 %153, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %149, !llvm.loop !90

160:                                              ; preds = %149, %142
  %161 = phi i64 [ %143, %142 ], [ %155, %149 ]
  %162 = phi i16* [ %144, %142 ], [ %157, %149 ]
  %163 = phi i16* [ %145, %142 ], [ %156, %149 ]
  %164 = icmp ult i64 %146, 7
  br i1 %164, label %195, label %165

165:                                              ; preds = %160, %165
  %166 = phi i64 [ %191, %165 ], [ %161, %160 ]
  %167 = phi i16* [ %193, %165 ], [ %162, %160 ]
  %168 = phi i16* [ %192, %165 ], [ %163, %160 ]
  %169 = load i16, i16* %167, align 2
  store i16 %169, i16* %168, align 2
  %170 = getelementptr inbounds i16, i16* %168, i64 1
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %168, i64 2
  %174 = getelementptr inbounds i16, i16* %167, i64 2
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %168, i64 3
  %177 = getelementptr inbounds i16, i16* %167, i64 3
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %168, i64 4
  %180 = getelementptr inbounds i16, i16* %167, i64 4
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %168, i64 5
  %183 = getelementptr inbounds i16, i16* %167, i64 5
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %168, i64 6
  %186 = getelementptr inbounds i16, i16* %167, i64 6
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %168, i64 7
  %189 = getelementptr inbounds i16, i16* %167, i64 7
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = add i64 %166, -8
  %192 = getelementptr inbounds i16, i16* %168, i64 8
  %193 = getelementptr inbounds i16, i16* %167, i64 8
  %194 = icmp eq i64 %191, 0
  br i1 %194, label %195, label %165, !llvm.loop !91

195:                                              ; preds = %160, %165, %140, %44
  %196 = phi i16* [ %48, %44 ], [ %51, %140 ], [ %51, %165 ], [ %51, %160 ]
  %197 = getelementptr inbounds i16, i16* %196, i64 %25
  store i16 0, i16* %197, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

declare dereferenceable(24) %"class.std::__1::basic_string.14"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEmmPKcm(%"class.std::__1::basic_string.14"*, i64, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = sub i64 9223372036854775791, %1
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %11) #16
  unreachable

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  br label %22

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i16* [ %19, %17 ], [ %21, %20 ]
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ult i64 %1, 4611686018427387879
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = add i64 %2, %1
  %28 = shl i64 %1, 1
  %29 = icmp ult i64 %27, %28
  %30 = select i1 %29, i64 %28, i64 %27
  %31 = icmp ult i64 %30, 11
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = add i64 %30, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #16
  unreachable

37:                                               ; preds = %22, %26, %32
  %38 = phi i64 [ %34, %32 ], [ 9223372036854775791, %22 ], [ 11, %26 ]
  %39 = shl i64 %38, 1
  %40 = tail call i8* @_Znwm(i64 %39) #17
  %41 = bitcast i8* %40 to i16*
  %42 = icmp eq i64 %4, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %37
  %44 = icmp ult i64 %4, 16
  br i1 %44, label %135, label %45

45:                                               ; preds = %43
  %46 = shl i64 %4, 1
  %47 = getelementptr i8, i8* %40, i64 %46
  %48 = getelementptr i16, i16* %23, i64 %4
  %49 = bitcast i16* %48 to i8*
  %50 = icmp ult i8* %40, %49
  %51 = icmp ugt i8* %47, %24
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %45
  %54 = and i64 %4, -16
  %55 = sub i64 %4, %54
  %56 = getelementptr i16, i16* %23, i64 %54
  %57 = getelementptr i16, i16* %41, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %23, i64 %66
  %69 = getelementptr i16, i16* %41, i64 %66
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !92
  %72 = getelementptr i16, i16* %68, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !92
  %75 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !95, !noalias !92
  %76 = getelementptr i16, i16* %69, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !95, !noalias !92
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %23, i64 %78
  %80 = getelementptr i16, i16* %41, i64 %78
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !92
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !92
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !95, !noalias !92
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !95, !noalias !92
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %23, i64 %89
  %91 = getelementptr i16, i16* %41, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !92
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !92
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !95, !noalias !92
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !95, !noalias !92
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %23, i64 %100
  %102 = getelementptr i16, i16* %41, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !92
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !92
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !95, !noalias !92
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !95, !noalias !92
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !97

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %23, i64 %118
  %121 = getelementptr i16, i16* %41, i64 %118
  %122 = bitcast i16* %120 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !92
  %124 = getelementptr i16, i16* %120, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !92
  %127 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !95, !noalias !92
  %128 = getelementptr i16, i16* %121, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !95, !noalias !92
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !98

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %54, %4
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %45, %43
  %136 = phi i64 [ %4, %45 ], [ %4, %43 ], [ %55, %133 ]
  %137 = phi i16* [ %23, %45 ], [ %23, %43 ], [ %56, %133 ]
  %138 = phi i16* [ %41, %45 ], [ %41, %43 ], [ %57, %133 ]
  %139 = add i64 %136, -1
  %140 = and i64 %136, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i64 [ %148, %142 ], [ %136, %135 ]
  %144 = phi i16* [ %150, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %149, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %144, align 2
  store i16 %147, i16* %145, align 2
  %148 = add i64 %143, -1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !99

153:                                              ; preds = %142, %135
  %154 = phi i64 [ %136, %135 ], [ %148, %142 ]
  %155 = phi i16* [ %137, %135 ], [ %150, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %149, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %184, %158 ], [ %154, %153 ]
  %160 = phi i16* [ %186, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %185, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %160, align 2
  store i16 %162, i16* %161, align 2
  %163 = getelementptr inbounds i16, i16* %161, i64 1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %161, i64 2
  %167 = getelementptr inbounds i16, i16* %160, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %161, i64 3
  %170 = getelementptr inbounds i16, i16* %160, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %161, i64 4
  %173 = getelementptr inbounds i16, i16* %160, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %161, i64 5
  %176 = getelementptr inbounds i16, i16* %160, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %161, i64 6
  %179 = getelementptr inbounds i16, i16* %160, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %161, i64 7
  %182 = getelementptr inbounds i16, i16* %160, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %159, -8
  %185 = getelementptr inbounds i16, i16* %161, i64 8
  %186 = getelementptr inbounds i16, i16* %160, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !100

188:                                              ; preds = %153, %158, %133, %37
  %189 = sub i64 %3, %5
  %190 = sub i64 %189, %4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %347, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i16, i16* %41, i64 %4
  %194 = getelementptr inbounds i16, i16* %193, i64 %6
  %195 = getelementptr inbounds i16, i16* %23, i64 %4
  %196 = getelementptr inbounds i16, i16* %195, i64 %5
  %197 = icmp ult i64 %190, 16
  br i1 %197, label %294, label %198

198:                                              ; preds = %192
  %199 = bitcast i16* %196 to i8*
  %200 = add i64 %6, %4
  %201 = shl i64 %200, 1
  %202 = getelementptr i8, i8* %40, i64 %201
  %203 = add i64 %6, %3
  %204 = sub i64 %203, %5
  %205 = shl i64 %204, 1
  %206 = getelementptr i8, i8* %40, i64 %205
  %207 = getelementptr i16, i16* %23, i64 %3
  %208 = bitcast i16* %207 to i8*
  %209 = icmp ult i8* %202, %208
  %210 = icmp ugt i8* %206, %199
  %211 = and i1 %209, %210
  br i1 %211, label %294, label %212

212:                                              ; preds = %198
  %213 = and i64 %190, -16
  %214 = sub i64 %190, %213
  %215 = getelementptr i16, i16* %196, i64 %213
  %216 = getelementptr i16, i16* %194, i64 %213
  %217 = add i64 %213, -16
  %218 = lshr exact i64 %217, 4
  %219 = add nuw nsw i64 %218, 1
  %220 = and i64 %219, 3
  %221 = icmp ult i64 %217, 48
  br i1 %221, label %273, label %222

222:                                              ; preds = %212
  %223 = sub nsw i64 %219, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ 0, %222 ], [ %270, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %271, %224 ]
  %227 = getelementptr i16, i16* %196, i64 %225
  %228 = getelementptr i16, i16* %194, i64 %225
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !101
  %231 = getelementptr i16, i16* %227, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !101
  %234 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !104, !noalias !101
  %235 = getelementptr i16, i16* %228, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !104, !noalias !101
  %237 = or i64 %225, 16
  %238 = getelementptr i16, i16* %196, i64 %237
  %239 = getelementptr i16, i16* %194, i64 %237
  %240 = bitcast i16* %238 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !101
  %242 = getelementptr i16, i16* %238, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !101
  %245 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %245, align 2, !alias.scope !104, !noalias !101
  %246 = getelementptr i16, i16* %239, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %247, align 2, !alias.scope !104, !noalias !101
  %248 = or i64 %225, 32
  %249 = getelementptr i16, i16* %196, i64 %248
  %250 = getelementptr i16, i16* %194, i64 %248
  %251 = bitcast i16* %249 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !101
  %253 = getelementptr i16, i16* %249, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !101
  %256 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !104, !noalias !101
  %257 = getelementptr i16, i16* %250, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !104, !noalias !101
  %259 = or i64 %225, 48
  %260 = getelementptr i16, i16* %196, i64 %259
  %261 = getelementptr i16, i16* %194, i64 %259
  %262 = bitcast i16* %260 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !101
  %264 = getelementptr i16, i16* %260, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !101
  %267 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !104, !noalias !101
  %268 = getelementptr i16, i16* %261, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !104, !noalias !101
  %270 = add i64 %225, 64
  %271 = add i64 %226, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %224, !llvm.loop !106

273:                                              ; preds = %224, %212
  %274 = phi i64 [ 0, %212 ], [ %270, %224 ]
  %275 = icmp eq i64 %220, 0
  br i1 %275, label %292, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %289, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %290, %276 ], [ %220, %273 ]
  %279 = getelementptr i16, i16* %196, i64 %277
  %280 = getelementptr i16, i16* %194, i64 %277
  %281 = bitcast i16* %279 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !101
  %283 = getelementptr i16, i16* %279, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !101
  %286 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !104, !noalias !101
  %287 = getelementptr i16, i16* %280, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !104, !noalias !101
  %289 = add i64 %277, 16
  %290 = add i64 %278, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %276, !llvm.loop !107

292:                                              ; preds = %276, %273
  %293 = icmp eq i64 %190, %213
  br i1 %293, label %347, label %294

294:                                              ; preds = %292, %198, %192
  %295 = phi i64 [ %190, %198 ], [ %190, %192 ], [ %214, %292 ]
  %296 = phi i16* [ %196, %198 ], [ %196, %192 ], [ %215, %292 ]
  %297 = phi i16* [ %194, %198 ], [ %194, %192 ], [ %216, %292 ]
  %298 = add i64 %295, -1
  %299 = and i64 %295, 7
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294, %301
  %302 = phi i64 [ %307, %301 ], [ %295, %294 ]
  %303 = phi i16* [ %309, %301 ], [ %296, %294 ]
  %304 = phi i16* [ %308, %301 ], [ %297, %294 ]
  %305 = phi i64 [ %310, %301 ], [ %299, %294 ]
  %306 = load i16, i16* %303, align 2
  store i16 %306, i16* %304, align 2
  %307 = add i64 %302, -1
  %308 = getelementptr inbounds i16, i16* %304, i64 1
  %309 = getelementptr inbounds i16, i16* %303, i64 1
  %310 = add i64 %305, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %301, !llvm.loop !108

312:                                              ; preds = %301, %294
  %313 = phi i64 [ %295, %294 ], [ %307, %301 ]
  %314 = phi i16* [ %296, %294 ], [ %309, %301 ]
  %315 = phi i16* [ %297, %294 ], [ %308, %301 ]
  %316 = icmp ult i64 %298, 7
  br i1 %316, label %347, label %317

317:                                              ; preds = %312, %317
  %318 = phi i64 [ %343, %317 ], [ %313, %312 ]
  %319 = phi i16* [ %345, %317 ], [ %314, %312 ]
  %320 = phi i16* [ %344, %317 ], [ %315, %312 ]
  %321 = load i16, i16* %319, align 2
  store i16 %321, i16* %320, align 2
  %322 = getelementptr inbounds i16, i16* %320, i64 1
  %323 = getelementptr inbounds i16, i16* %319, i64 1
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %320, i64 2
  %326 = getelementptr inbounds i16, i16* %319, i64 2
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %320, i64 3
  %329 = getelementptr inbounds i16, i16* %319, i64 3
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = getelementptr inbounds i16, i16* %320, i64 4
  %332 = getelementptr inbounds i16, i16* %319, i64 4
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %320, i64 5
  %335 = getelementptr inbounds i16, i16* %319, i64 5
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %320, i64 6
  %338 = getelementptr inbounds i16, i16* %319, i64 6
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %320, i64 7
  %341 = getelementptr inbounds i16, i16* %319, i64 7
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = add i64 %318, -8
  %344 = getelementptr inbounds i16, i16* %320, i64 8
  %345 = getelementptr inbounds i16, i16* %319, i64 8
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %317, !llvm.loop !109

347:                                              ; preds = %312, %317, %292, %188
  %348 = icmp eq i64 %1, 10
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  tail call void @_ZdlPv(i8* %24) #17
  br label %350

350:                                              ; preds = %347, %349
  %351 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %40, i8** %351, align 8
  %352 = or i64 %38, -9223372036854775808
  %353 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %352, i64* %353, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }
attributes #17 = { builtin nounwind }
attributes #18 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{i8 0, i8 2}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !10}
!39 = distinct !{!39, !10}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !8}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !44, !8}
!44 = !{!"llvm.loop.unroll.runtime.disable"}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !8}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !10}
!53 = distinct !{!53, !8}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !8}
!60 = distinct !{!60, !10}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !8}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_S6_: argument 0"}
!65 = distinct !{!65, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_S6_"}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !10}
!73 = distinct !{!73, !10}
!74 = distinct !{!74, !8}
!75 = !{!76}
!76 = distinct !{!76, !77}
!77 = distinct !{!77, !"LVerDomain"}
!78 = !{!79}
!79 = distinct !{!79, !77}
!80 = distinct !{!80, !8}
!81 = distinct !{!81, !10}
!82 = distinct !{!82, !8}
!83 = !{!84}
!84 = distinct !{!84, !85}
!85 = distinct !{!85, !"LVerDomain"}
!86 = !{!87}
!87 = distinct !{!87, !85}
!88 = distinct !{!88, !8}
!89 = distinct !{!89, !10}
!90 = distinct !{!90, !10}
!91 = distinct !{!91, !8}
!92 = !{!93}
!93 = distinct !{!93, !94}
!94 = distinct !{!94, !"LVerDomain"}
!95 = !{!96}
!96 = distinct !{!96, !94}
!97 = distinct !{!97, !8}
!98 = distinct !{!98, !10}
!99 = distinct !{!99, !10}
!100 = distinct !{!100, !8}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !8}
!107 = distinct !{!107, !10}
!108 = distinct !{!108, !10}
!109 = distinct !{!109, !8}
