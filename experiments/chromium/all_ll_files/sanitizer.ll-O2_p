; ModuleID = '../../third_party/blink/renderer/modules/sanitizer_api/sanitizer.cc'
source_filename = "../../third_party/blink/renderer/modules/sanitizer_api/sanitizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.250", i32, [4 x i8], %"class.std::__1::unique_ptr.388", %"class.std::__1::unique_ptr.388", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.399", %"class.std::__1::unique_ptr.405", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.417", %"class.std::__1::unique_ptr.423", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.430", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.253", %"class.std::__1::unique_ptr.259", %"class.std::__1::unique_ptr.265", %"class.std::__1::unique_ptr.271", %"class.std::__1::unique_ptr.277", %"class.std::__1::unique_ptr.283", %"class.std::__1::unique_ptr.294", %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.315", %"class.std::__1::unique_ptr.322", %"class.std::__1::unique_ptr.322", %"class.std::__1::unique_ptr.329", %"class.std::__1::unique_ptr.336", %"class.std::__1::unique_ptr.343", %"class.std::__1::unique_ptr.368", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.277" = type { %"class.std::__1::__compressed_pair.278" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.286" = type { %"struct.std::__1::__atomic_base.287" }
%"struct.std::__1::__atomic_base.287" = type { %"struct.std::__1::__atomic_base.288" }
%"struct.std::__1::__atomic_base.288" = type { %"struct.std::__1::__cxx_atomic_impl.289" }
%"struct.std::__1::__cxx_atomic_impl.289" = type { %"struct.std::__1::__cxx_atomic_base_impl.290" }
%"struct.std::__1::__cxx_atomic_base_impl.290" = type { i64 }
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"class.blink::Worklist.297"* }
%"class.blink::Worklist.297" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.301" = type { %"class.std::__1::__compressed_pair.302" }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.blink::Worklist.304"* }
%"class.blink::Worklist.304" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.blink::Worklist.311"* }
%"class.blink::Worklist.311" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.315" = type { %"class.std::__1::__compressed_pair.316" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.blink::Worklist.318"* }
%"class.blink::Worklist.318" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.322" = type { %"class.std::__1::__compressed_pair.323" }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"class.blink::Worklist.325"* }
%"class.blink::Worklist.325" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"class.blink::Worklist.332"* }
%"class.blink::Worklist.332" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.336" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.blink::Worklist.339"* }
%"class.blink::Worklist.339" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.286" }
%"class.std::__1::unique_ptr.343" = type { %"class.std::__1::__compressed_pair.344" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.346", %"class.std::__1::__compressed_pair.354", %"class.std::__1::__compressed_pair.359", %"class.std::__1::__compressed_pair.361", [4 x i8] }>
%"class.std::__1::unique_ptr.346" = type { %"class.std::__1::__compressed_pair.347" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.348", %"struct.std::__1::__compressed_pair_elem.349" }
%"struct.std::__1::__compressed_pair_elem.348" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.349" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { i64 }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.355" }
%"struct.std::__1::__compressed_pair_elem.355" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { float }
%"class.std::__1::unique_ptr.368" = type { %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.371", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.371" = type { %"class.std::__1::__compressed_pair.372" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.373" }
%"struct.std::__1::__compressed_pair_elem.373" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.380" }
%"class.WTF::Vector.380" = type { %"class.WTF::VectorBuffer.381" }
%"class.WTF::VectorBuffer.381" = type { %"class.WTF::VectorBufferBase.382" }
%"class.WTF::VectorBufferBase.382" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.388" = type { %"class.std::__1::__compressed_pair.389" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.390" }
%"struct.std::__1::__compressed_pair_elem.390" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.396" }
%"class.WTF::VectorBuffer.396" = type { %"class.WTF::VectorBufferBase.397" }
%"class.WTF::VectorBufferBase.397" = type { %"struct.std::__1::pair.398"*, i32, i32 }
%"struct.std::__1::pair.398" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.411" }
%"class.std::__1::unique_ptr.411" = type { %"class.std::__1::__compressed_pair.412" }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.413" }
%"struct.std::__1::__compressed_pair_elem.413" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.297"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.304"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.311"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.318"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.325"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.438" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.439" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.417" = type { %"class.std::__1::__compressed_pair.418" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.419" }
%"struct.std::__1::__compressed_pair_elem.419" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.423" = type { %"class.std::__1::__compressed_pair.424" }
%"class.std::__1::__compressed_pair.424" = type { %"struct.std::__1::__compressed_pair_elem.425" }
%"struct.std::__1::__compressed_pair_elem.425" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.429 }
%class.scoped_refptr.429 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.430" = type { %"struct.std::__1::__atomic_base.431" }
%"struct.std::__1::__atomic_base.431" = type { %"struct.std::__1::__cxx_atomic_impl.432" }
%"struct.std::__1::__cxx_atomic_impl.432" = type { %"struct.std::__1::__cxx_atomic_base_impl.433" }
%"struct.std::__1::__cxx_atomic_base_impl.433" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.237", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.237" = type { %"class.base::RefCounted.238" }
%"class.base::RefCounted.238" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.241" }
%"class.blink::HeapHashMap.241" = type { %"class.WTF::HashMap.244" }
%"class.WTF::HashMap.244" = type { %"class.WTF::HashTable.245" }
%"class.WTF::HashTable.245" = type <{ %"struct.WTF::KeyValuePair.247"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.247" = type { %"class.blink::WeakMember.248", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.248" = type { %"class.blink::MemberBase.249" }
%"class.blink::MemberBase.249" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.138" }
%"struct.std::__1::atomic.138" = type { %"struct.std::__1::__atomic_base.139" }
%"struct.std::__1::__atomic_base.139" = type { %"struct.std::__1::__atomic_base.140" }
%"struct.std::__1::__atomic_base.140" = type { %"struct.std::__1::__cxx_atomic_impl.141" }
%"struct.std::__1::__cxx_atomic_impl.141" = type { %"struct.std::__1::__cxx_atomic_base_impl.142" }
%"struct.std::__1::__cxx_atomic_base_impl.142" = type { i32 }
%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.476 }
%class.scoped_refptr.476 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.477", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.477" = type { %"class.base::RefCounted.478" }
%"class.base::RefCounted.478" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::Sanitizer" = type { %"class.blink::ScriptWrappable", %"struct.blink::SanitizerConfigImpl", %"class.blink::Member", %"class.WTF::Vector", %"class.WTF::HashSet", %"class.WTF::HashMap" }
%"struct.blink::SanitizerConfigImpl" = type { %"class.WTF::HashSet", %"class.WTF::HashSet", %"class.WTF::HashSet", %"class.WTF::HashMap", %"class.WTF::HashMap", i8, [7 x i8] }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::SanitizerConfig"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.WTF::String"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.1" }
%"class.WTF::HashTable.1" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::String", %"class.WTF::Vector" }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.69", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.78", %"class.blink::Member.80", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.89", %"class.blink::Member.225", %"class.blink::Member.227", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.15" }
%"class.WTF::HashMap.15" = type { %"class.WTF::HashTable.16" }
%"class.WTF::HashTable.16" = type <{ %"struct.WTF::KeyValuePair.18"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.18" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.24" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.21" }
%"class.WTF::HashSet.21" = type { %"class.WTF::HashTable.22" }
%"class.WTF::HashTable.22" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::Supplementable.24" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.25" }
%"class.blink::HeapHashMap.25" = type { %"class.WTF::HashMap.28" }
%"class.WTF::HashMap.28" = type { %"class.WTF::HashTable.29" }
%"class.WTF::HashTable.29" = type <{ %"struct.WTF::KeyValuePair.31"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.31" = type { i8*, %"class.blink::Member.1638" }
%"class.blink::Member.1638" = type { %"class.blink::MemberBase.1639" }
%"class.blink::MemberBase.1639" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1640" }
%"class.blink::Member.1640" = type { %"class.blink::MemberBase.1641" }
%"class.blink::MemberBase.1641" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.32, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.57", %"class.std::__1::unique_ptr.57", %"class.blink::Member.63", i32, [4 x i8], %"class.WTF::HashSet.65", i32, i32 }
%class.scoped_refptr.32 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.33 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.33 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type { %"class.url::Origin", %"class.std::__1::map", %"class.std::__1::map.46", %"class.std::__1::map.55"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.36 }
%union.anon.36 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::map.46" = type { %"class.std::__1::__tree.47" }
%"class.std::__1::__tree.47" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.48", %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::map.55" = type opaque
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member.63" = type { %"class.blink::MemberBase.64" }
%"class.blink::MemberBase.64" = type { %"class.blink::ExecutionContext"* }
%"class.WTF::HashSet.65" = type { %"class.WTF::HashTable.66" }
%"class.WTF::HashTable.66" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.69" = type { %"class.blink::MemberBase.70" }
%"class.blink::MemberBase.70" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.73" }
%"class.WTF::Vector.73" = type { %"class.WTF::VectorBuffer.74" }
%"class.WTF::VectorBuffer.74" = type { %"class.WTF::VectorBufferBase.75" }
%"class.WTF::VectorBufferBase.75" = type { %"class.blink::Member.76"*, i32, i32 }
%"class.blink::Member.76" = type opaque
%"class.blink::Member.78" = type { %"class.blink::MemberBase.79" }
%"class.blink::MemberBase.79" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.80" = type { %"class.blink::MemberBase.81" }
%"class.blink::MemberBase.81" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.82", i32, i32 }
%"class.blink::HeapHashMap.82" = type { %"class.WTF::HashMap.85" }
%"class.WTF::HashMap.85" = type { %"class.WTF::HashTable.86" }
%"class.WTF::HashTable.86" = type <{ %"struct.WTF::KeyValuePair.88"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.88" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type { %"class.mojo::StructPtr", %"class.mojo::AssociatedRemote" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.92" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::mojom::blink::PolicyContainerPolicies"* }
%"class.blink::mojom::blink::PolicyContainerPolicies" = type { i32, i32, %"class.WTF::Vector.95" }
%"class.WTF::Vector.95" = type { %"class.WTF::VectorBuffer.96" }
%"class.WTF::VectorBuffer.96" = type { %"class.WTF::VectorBufferBase.97" }
%"class.WTF::VectorBufferBase.97" = type { %"class.mojo::StructPtr.98"*, i32, i32 }
%"class.mojo::StructPtr.98" = type { %"class.std::__1::unique_ptr.99" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.network::mojom::blink::ContentSecurityPolicy"* }
%"class.network::mojom::blink::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.102", %"class.WTF::HashMap.109", %"class.WTF::HashMap.114", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.WTF::Vector", i32, %"class.mojo::StructPtr.119", %"class.WTF::Vector" }
%"class.mojo::StructPtr.102" = type { %"class.std::__1::unique_ptr.103" }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.network::mojom::blink::CSPSource"* }
%"class.network::mojom::blink::CSPSource" = type <{ %"class.WTF::String", %"class.WTF::String", i32, [4 x i8], %"class.WTF::String", i8, i8, [6 x i8] }>
%"class.WTF::HashMap.109" = type { %"class.WTF::HashTable.110" }
%"class.WTF::HashTable.110" = type <{ %"struct.WTF::KeyValuePair.113"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.113" = type opaque
%"class.WTF::HashMap.114" = type { %"class.WTF::HashTable.115" }
%"class.WTF::HashTable.115" = type <{ %"struct.WTF::KeyValuePair.118"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.118" = type opaque
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::blink::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::blink::ContentSecurityPolicyHeader" = type { %"class.WTF::String", i32, i32 }
%"class.mojo::StructPtr.119" = type { %"class.std::__1::unique_ptr.120" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.network::mojom::blink::CSPTrustedTypes"* }
%"class.network::mojom::blink::CSPTrustedTypes" = type <{ %"class.WTF::Vector", i8, i8, [6 x i8] }>
%"class.mojo::AssociatedRemote" = type { %"class.mojo::internal::AssociatedInterfacePtrState" }
%"class.mojo::internal::AssociatedInterfacePtrState" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.216" }
%"class.mojo::internal::AssociatedInterfacePtrStateBase.base" = type <{ %"class.std::__1::unique_ptr.134", i32 }>
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::InterfaceEndpointClient" = type { %"class.mojo::MessageReceiverWithResponder", i8, %"class.base::RepeatingCallback", %"class.base::OnceCallback", %"class.absl::optional.143", %"class.absl::optional.148", %"class.mojo::ConnectionGroup::Ref", i32, %"class.mojo::ScopedInterfaceEndpointHandle", %"class.std::__1::unique_ptr.169", %"class.mojo::InterfaceEndpointController"*, %"class.mojo::MessageReceiverWithResponderStatus"*, %"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk", %"class.mojo::MessageDispatcher", %"class.std::__1::map.191", %"class.std::__1::map.202", i64, %"class.base::OnceCallback.162", %"class.base::OnceCallback.211", i8, %class.scoped_refptr.153, %"class.mojo::internal::ControlMessageProxy", %"class.mojo::internal::ControlMessageHandler", i8*, %"class.base::WeakPtrFactory.212" }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.137 }
%class.scoped_refptr.137 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.138" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.143" = type { %"class.absl::optional_internal::optional_data.144" }
%"class.absl::optional_internal::optional_data.144" = type { %"class.absl::optional_internal::optional_data_base.145" }
%"class.absl::optional_internal::optional_data_base.145" = type { %"class.absl::optional_internal::optional_data_dtor_base.146" }
%"class.absl::optional_internal::optional_data_dtor_base.146" = type { i8, %union.anon.147 }
%union.anon.147 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.148" = type { %"class.absl::optional_internal::optional_data.149" }
%"class.absl::optional_internal::optional_data.149" = type { %"class.absl::optional_internal::optional_data_base.150" }
%"class.absl::optional_internal::optional_data_base.150" = type { %"class.absl::optional_internal::optional_data_dtor_base.151" }
%"class.absl::optional_internal::optional_data_dtor_base.151" = type { i8, %union.anon.152 }
%union.anon.152 = type { %"class.base::OneShotTimer" }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback.162" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.153, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.155 }
%class.scoped_refptr.155 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.156", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.156" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.157" }
%"struct.std::__1::atomic.157" = type { %"struct.std::__1::__atomic_base.158" }
%"struct.std::__1::__atomic_base.158" = type { %"struct.std::__1::__atomic_base.159" }
%"struct.std::__1::__atomic_base.159" = type { %"struct.std::__1::__cxx_atomic_impl.160" }
%"struct.std::__1::__cxx_atomic_impl.160" = type { %"struct.std::__1::__cxx_atomic_base_impl.161" }
%"struct.std::__1::__cxx_atomic_base_impl.161" = type { i8 }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.167 }
%class.scoped_refptr.167 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.229", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.153, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::RefCountedThreadSafe.229" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr.168 }
%class.scoped_refptr.168 = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.mojo::AssociatedGroup"* }
%"class.mojo::AssociatedGroup" = type { %"class.base::RepeatingCallback.172", %class.scoped_refptr.173 }
%"class.base::RepeatingCallback.172" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.173 = type { %"class.mojo::AssociatedGroupController"* }
%"class.mojo::AssociatedGroupController" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.174", [4 x i8] }>
%"class.base::RefCountedThreadSafe.174" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::InterfaceEndpointController" = type opaque
%"class.mojo::MessageReceiverWithResponderStatus" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::InterfaceEndpointClient::HandleIncomingMessageThunk" = type { %"class.mojo::MessageReceiver", %"class.mojo::InterfaceEndpointClient"* }
%"class.mojo::MessageDispatcher" = type { %"class.mojo::MessageReceiver", %"class.std::__1::unique_ptr.178", %"class.std::__1::unique_ptr.184", %"class.mojo::MessageReceiver"*, %"class.base::WeakPtrFactory.190" }
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.mojo::MessageReceiver"* }
%"class.std::__1::unique_ptr.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"class.mojo::MessageFilter"* }
%"class.mojo::MessageFilter" = type { i32 (...)** }
%"class.base::WeakPtrFactory.190" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::map.191" = type { %"class.std::__1::__tree.192" }
%"class.std::__1::__tree.192" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.193", %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::map.202" = type { %"class.std::__1::__tree.203" }
%"class.std::__1::__tree.203" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.204", %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.base::OnceCallback.162" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.211" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.153 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.154" }>
%"class.base::RefCountedThreadSafe.154" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::internal::ControlMessageProxy" = type { %"class.mojo::InterfaceEndpointClient"*, i8, %"class.base::OnceCallback.162" }
%"class.mojo::internal::ControlMessageHandler" = type <{ %"class.mojo::MessageReceiverWithResponderStatus", %"class.mojo::InterfaceEndpointClient"*, i32, [4 x i8] }>
%"class.base::WeakPtrFactory.212" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.216" = type { %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"class.blink::mojom::blink::PolicyContainerHostProxy"* }
%"class.blink::mojom::blink::PolicyContainerHostProxy" = type { %"class.blink::mojom::blink::PolicyContainerHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::PolicyContainerHost" = type { i32 (...)** }
%"class.blink::Member.225" = type { %"class.blink::MemberBase.226" }
%"class.blink::MemberBase.226" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.227" = type { %"class.blink::MemberBase.228" }
%"class.blink::MemberBase.228" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::SanitizerConfig" = type { %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, i8, i8, %"class.WTF::Vector.8", i8, %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector.8", %"class.WTF::Vector" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::Vector.8" = type { %"class.WTF::VectorBuffer.9" }
%"class.WTF::VectorBuffer.9" = type { %"class.WTF::VectorBufferBase.10" }
%"class.WTF::VectorBufferBase.10" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type opaque
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.231" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.231" = type { %"class.v8::TracedReference.232" }
%"class.v8::TracedReference.232" = type { %"class.v8::BasicTracedReference.233" }
%"class.v8::BasicTracedReference.233" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.236, %"class.blink::Member.434", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.236 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.434" = type { %"class.blink::MemberBase.435" }
%"class.blink::MemberBase.435" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.436" }
%"class.blink::Persistent.436" = type { %"class.blink::PersistentBase.437" }
%"class.blink::PersistentBase.437" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.blink::V8UnionDocumentOrDocumentFragmentOrString" = type { %"class.blink::bindings::UnionBase", i32, %"class.blink::Member.445", %"class.blink::Member.447", %"class.WTF::String" }
%"class.blink::bindings::UnionBase" = type { i32 (...)** }
%"class.blink::Member.445" = type { %"class.blink::MemberBase.446" }
%"class.blink::MemberBase.446" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable.556", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.564", %"class.WTF::Vector.564", i8, i32, %"class.blink::Member.569", %"class.blink::Member.63", %"class.blink::Member.878", %"class.blink::Member.880", %"class.blink::Member.882", %"class.blink::Member.884", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.892", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.898", %"class.blink::Member.900", %"class.blink::Member.519", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.903", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.495", %"class.blink::Member.474", %"class.blink::Member.853", %"class.blink::Member.474", %"class.blink::Member.474", %"class.blink::Member.474", %"class.blink::UserActionElementSet", %"class.blink::Member.919", double, double, i64, i64, %"class.blink::HeapHashSet.921", %"class.blink::HeapHashSet.928", i16, i8, %"class.blink::Member.935", %"class.blink::Member.937", %"class.blink::Member.939", %"class.blink::Member.941", %"class.blink::TextLinkColors", %"class.blink::Member.943", i8, [7 x i8], %"class.blink::HeapHashMap.945", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.474", %"class.WTF::Vector.952", %"class.blink::Member.957", %"class.blink::Member.959", i8, %"class.blink::Member.474", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.961", %"class.blink::HeapVector.963", %"class.std::__1::unique_ptr.971", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.977", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.990", %"class.WTF::Vector.992", i8, i8, %"class.std::__1::unique_ptr.997", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.495", %"class.blink::HeapVector.1003", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1011", i8, i32, %"class.blink::Member.1013", %"class.blink::Member.1015", %"class.blink::Member.1017", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1019", %"class.WTF::HashMap.1021", %"class.blink::Member.1026", %"class.blink::Member.1028", %"class.blink::Member.1030", %"class.blink::Member.1032", %"class.blink::Member.445", %"class.blink::Member.445", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1034", i8, i32, %"class.blink::Member.1041", %"class.blink::Member.1043", i32, %"class.blink::Member.1045", %"class.blink::Member.1047", %"class.blink::Member.1049", %"class.std::__1::unique_ptr.1051", i64, %"class.std::__1::unique_ptr.1057", i32, i32, %"class.blink::Member.1063", %"class.blink::Member.1065", %"class.blink::Member.1067", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1069", %"class.WTF::Vector.864", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1071", %"class.blink::Member.1078", %"class.std::__1::unique_ptr.1080", %"class.blink::Member.1086", i8, i8, %"class.WTF::String", %"class.blink::Member.1088", i8, [7 x i8], %"class.blink::HeapHashMap.1090", %"class.blink::HeapObserverSet.1097", %"class.blink::Member.1105", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1107", i32, i8, i8, %"class.blink::WeakMember.1109", %"class.blink::Member.1110" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.449", %"class.blink::Member.449" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.449", %"class.blink::Member.451", %"class.blink::Member.449", %"class.blink::Member.449", %"class.blink::Member.453" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.451" = type { %"class.blink::MemberBase.452" }
%"class.blink::MemberBase.452" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.453" = type { %"class.blink::MemberBase.454" }
%"class.blink::MemberBase.454" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.449" = type { %"class.blink::MemberBase.450" }
%"class.blink::MemberBase.450" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.457", %"class.blink::Member.445", %"class.blink::Member.451", %"class.blink::Member.459", %"class.blink::Member.459", %"class.blink::Member.502", %"class.blink::Member.504", %"class.blink::Member.506", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.511", %"class.blink::HeapVector.513" }
%"class.blink::Member.457" = type { %"class.blink::MemberBase.458" }
%"class.blink::MemberBase.458" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.459" = type { %"class.blink::MemberBase.460" }
%"class.blink::MemberBase.460" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.463" }
%"class.blink::HeapHashMap.463" = type { %"class.WTF::HashMap.466" }
%"class.WTF::HashMap.466" = type { %"class.WTF::HashTable.467" }
%"class.WTF::HashTable.467" = type <{ %"struct.WTF::KeyValuePair.469"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.469" = type { %"class.WTF::AtomicString", %"class.blink::Member.470" }
%"class.blink::Member.470" = type { %"class.blink::MemberBase.471" }
%"class.blink::MemberBase.471" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.474", i32, %"class.blink::HeapVector.495" }
%"class.blink::Member.502" = type { %"class.blink::MemberBase.503" }
%"class.blink::MemberBase.503" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.504" = type { %"class.blink::MemberBase.505" }
%"class.blink::MemberBase.505" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.506" = type { %"class.blink::MemberBase.507" }
%"class.blink::MemberBase.507" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.508" }
%"class.blink::Member.508" = type { %"class.blink::MemberBase.509" }
%"class.blink::MemberBase.509" = type { %"class.blink::HeapHashMap.510"* }
%"class.blink::HeapHashMap.510" = type opaque
%"class.blink::Member.511" = type { %"class.blink::MemberBase.512" }
%"class.blink::MemberBase.512" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.513" = type { %"class.WTF::Vector.516" }
%"class.WTF::Vector.516" = type { %"class.WTF::VectorBuffer.517" }
%"class.WTF::VectorBuffer.517" = type { %"class.WTF::VectorBufferBase.518" }
%"class.WTF::VectorBufferBase.518" = type { %"class.blink::Member.519"*, i32, i32 }
%"class.blink::Supplementable.556" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.557" }
%"class.blink::HeapHashMap.557" = type { %"class.WTF::HashMap.560" }
%"class.WTF::HashMap.560" = type { %"class.WTF::HashTable.561" }
%"class.WTF::HashTable.561" = type <{ %"struct.WTF::KeyValuePair.563"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.563" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.564" = type { %"class.WTF::VectorBuffer.565" }
%"class.WTF::VectorBuffer.565" = type { %"class.WTF::VectorBufferBase.566" }
%"class.WTF::VectorBufferBase.566" = type { %"class.base::OnceCallback.162"*, i32, i32 }
%"class.blink::Member.569" = type { %"class.blink::MemberBase.570" }
%"class.blink::MemberBase.570" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type { %"class.blink::DOMWindow", %"class.blink::ExecutionContext.base", %"class.blink::Supplementable.705", %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.713", %"class.blink::Member.445", %"class.blink::Member.715", i8, %"class.blink::Member.717", %"class.blink::Member.719", %"class.blink::Member.721", %"class.blink::Member.721", %"class.blink::Member.721", %"class.blink::Member.721", %"class.blink::Member.721", %"class.blink::Member.721", %"class.blink::Member.723", %"class.blink::Member.725", %"class.blink::Member.727", %"class.blink::Member.729", %"class.blink::Member.731", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector", %"class.blink::Member.733", %class.scoped_refptr.735, %"class.blink::HeapHashSet.797", %"class.blink::Member.804", %"class.blink::HeapHashMap.817", %"class.std::__1::unique_ptr.824", %"class.blink::Member.836", %"class.blink::Member.857", %"class.blink::Member.859", %"class.blink::Member.861", %"class.WTF::Vector.864", %"class.util::TokenType.603", %"class.WTF::HashSet.869", %"class.WTF::Deque.873" }
%"class.blink::DOMWindow" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::Member.592", %"class.blink::Member.594", %"class.blink::Member.596", %"class.blink::Member.598", i8, %"class.WTF::Vector.600" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.585" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.573" }
%"class.blink::HeapVector.573" = type { %"class.WTF::Vector.576" }
%"class.WTF::Vector.576" = type { %"class.WTF::VectorBuffer.577" }
%"class.WTF::VectorBuffer.577" = type { %"class.WTF::VectorBufferBase.578", [32 x i8] }
%"class.WTF::VectorBufferBase.578" = type { %"struct.std::__1::pair.579"*, i32, i32 }
%"struct.std::__1::pair.579" = type { %"class.WTF::AtomicString", %"class.blink::Member.580" }
%"class.blink::Member.580" = type { %"class.blink::MemberBase.581" }
%"class.blink::MemberBase.581" = type { %"class.blink::HeapVector.582"* }
%"class.blink::HeapVector.582" = type opaque
%"class.std::__1::unique_ptr.585" = type { %"class.std::__1::__compressed_pair.586" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.WTF::Vector.588"* }
%"class.WTF::Vector.588" = type opaque
%"class.blink::Member.592" = type { %"class.blink::MemberBase.593" }
%"class.blink::MemberBase.593" = type { %"class.blink::Frame"* }
%"class.blink::Frame" = type { i32 (...)**, %"class.blink::FrameTree", %"class.blink::Member.1135", %"class.blink::Member.1137", %"class.blink::Member.1139", i8, i32, i8, i32, %"class.blink::Member.1141", %"class.blink::Member.594", %"class.blink::FrameLifecycle", %"class.blink::Member.592", %"class.blink::Member.592", %"class.blink::Member.592", %"class.blink::Member.592", %"class.blink::Member.592", %"class.blink::Member.592", %"class.blink::Member.842", %"class.blink::NavigationRateLimiter", i32, %"class.base::flat_map", %"class.blink::Member.1151", i8, %"class.base::UnguessableToken", %"class.absl::optional.1153", %"class.absl::optional.1158", %"class.blink::UserActivationState", i8, [7 x i8], %"class.blink::MultiToken", %"class.blink::TaskHandle", %"class.blink::OpenedFrameTracker" }
%"class.blink::FrameTree" = type <{ %"class.blink::Member.592", %"class.WTF::AtomicString", i32, i8, i8, [2 x i8] }>
%"class.blink::Member.1135" = type { %"class.blink::MemberBase.1136" }
%"class.blink::MemberBase.1136" = type { %"class.blink::Page"* }
%"class.blink::Page" = type opaque
%"class.blink::Member.1137" = type { %"class.blink::MemberBase.1138" }
%"class.blink::MemberBase.1138" = type { %"class.blink::FrameOwner"* }
%"class.blink::FrameOwner" = type opaque
%"class.blink::Member.1139" = type { %"class.blink::MemberBase.1140" }
%"class.blink::MemberBase.1140" = type { %"class.blink::DOMWindow"* }
%"class.blink::Member.1141" = type { %"class.blink::MemberBase.1142" }
%"class.blink::MemberBase.1142" = type { %"class.blink::FrameClient"* }
%"class.blink::FrameClient" = type opaque
%"class.blink::FrameLifecycle" = type { i32 }
%"class.blink::Member.842" = type { %"class.blink::MemberBase.843" }
%"class.blink::MemberBase.843" = type { %"class.blink::LocalFrame"* }
%"class.blink::LocalFrame" = type <{ %"class.blink::Frame", %"class.blink::FrameScheduler::Delegate", %"class.blink::Supplementable.1170", %"class.blink::mojom::blink::LocalFrame", %"class.blink::mojom::blink::LocalMainFrame", %"class.blink::mojom::blink::FullscreenVideoElementHandler", %"class.blink::mojom::blink::HighPriorityLocalFrame", %"class.std::__1::unique_ptr.1178", %"class.blink::HeapMojoUniqueReceiverSet", %"class.blink::HeapHashSet.1186", %"class.blink::FrameLoader", %"class.blink::Member.1203", %"class.blink::Member.474", %"class.blink::Member.1205", %"class.blink::Member.1207", %"class.blink::Member.1209", %"class.blink::Member.1211", i32, i8, [3 x i8], float, float, i64, %"class.blink::Member.1213", %class.scoped_refptr.1215, %"class.blink::Member.1216", %"class.blink::Member.1218", %"class.blink::Member.1220", %"class.blink::Member.1222", %"class.blink::Member.1224", %"class.blink::Member.1226", %"class.blink::Member.1228", %"class.blink::InterfaceRegistry"*, %"class.blink::HeapMojoRemote.1230", %"class.blink::mojom::blink::ViewportIntersectionState", %"class.std::__1::unique_ptr.1233", %"class.blink::ClientHintsPreferences", i8, [7 x i8], %"class.base::RepeatingCallback.1239", %"class.std::__1::unique_ptr.1240", %"class.absl::optional.1158", i32, [4 x i8], %"class.std::__1::unique_ptr.1246", %"class.blink::HeapMojoAssociatedRemote", %"class.blink::HeapMojoAssociatedRemote.1254", %"class.blink::HeapMojoAssociatedReceiver", %"class.blink::HeapMojoAssociatedReceiver.1259", %"class.blink::HeapMojoReceiver", %"class.blink::HeapMojoAssociatedReceiver.1264", i32, [4 x i8], %"class.base::TimeTicks", %"class.blink::Member.1267", %"class.blink::Member.1269", %"class.blink::Member.1271", %"class.blink::Member.1273", %"class.mojo::StructPtr.1276", %"class.blink::Member.1285", %"class.blink::TransientAllowFullscreen", %"class.blink::PaymentRequestToken", i8, [3 x i8], %"class.gfx::Rect", %"class.absl::optional.1287", i8, [7 x i8] }>
%"class.blink::FrameScheduler::Delegate" = type { i32 (...)** }
%"class.blink::Supplementable.1170" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1171" }
%"class.blink::HeapHashMap.1171" = type { %"class.WTF::HashMap.1174" }
%"class.WTF::HashMap.1174" = type { %"class.WTF::HashTable.1175" }
%"class.WTF::HashTable.1175" = type <{ %"struct.WTF::KeyValuePair.1177"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1177" = type opaque
%"class.blink::mojom::blink::LocalFrame" = type { i32 (...)** }
%"class.blink::mojom::blink::LocalMainFrame" = type { i32 (...)** }
%"class.blink::mojom::blink::FullscreenVideoElementHandler" = type { i32 (...)** }
%"class.blink::mojom::blink::HighPriorityLocalFrame" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1178" = type { %"class.std::__1::__compressed_pair.1179" }
%"class.std::__1::__compressed_pair.1179" = type { %"struct.std::__1::__compressed_pair_elem.1180" }
%"struct.std::__1::__compressed_pair_elem.1180" = type { %"class.blink::FrameScheduler"* }
%"class.blink::FrameScheduler" = type { %"class.blink::FrameOrWorkerScheduler" }
%"class.blink::FrameOrWorkerScheduler" = type { i32 (...)**, %"class.WTF::HashMap.827", %"class.base::WeakPtrFactory.832" }
%"class.WTF::HashMap.827" = type { %"class.WTF::HashTable.828" }
%"class.WTF::HashTable.828" = type <{ %"struct.WTF::KeyValuePair.831"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.831" = type opaque
%"class.base::WeakPtrFactory.832" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoUniqueReceiverSet" = type { %"class.blink::Member.1184" }
%"class.blink::Member.1184" = type { %"class.blink::MemberBase.1185" }
%"class.blink::MemberBase.1185" = type { %"class.blink::HeapMojoUniqueReceiverSet<blink::mojom::blink::PauseSubresourceLoadingHandle, std::__1::default_delete<blink::mojom::blink::PauseSubresourceLoadingHandle>, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoUniqueReceiverSet<blink::mojom::blink::PauseSubresourceLoadingHandle, std::__1::default_delete<blink::mojom::blink::PauseSubresourceLoadingHandle>, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::ReceiverSetBase" }
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.840" }
%"class.blink::WeakMember.840" = type { %"class.blink::MemberBase.841" }
%"class.blink::MemberBase.841" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.mojo::ReceiverSetBase" = type { %"class.mojo::ReceiverSetState" }
%"class.mojo::ReceiverSetState" = type { %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.1650", i64, %"class.std::__1::map.1651", i8*, i64, %"class.base::WeakPtrFactory.1660" }
%"class.base::RepeatingCallback.1650" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::map.1651" = type { %"class.std::__1::__tree.1652" }
%"class.std::__1::__tree.1652" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1653", %"class.std::__1::__compressed_pair.1657" }
%"class.std::__1::__compressed_pair.1653" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.1657" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.base::WeakPtrFactory.1660" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapHashSet.1186" = type { %"class.WTF::HashSet.1189" }
%"class.WTF::HashSet.1189" = type { %"class.WTF::HashTable.1190" }
%"class.WTF::HashTable.1190" = type <{ %"class.blink::WeakMember.1192"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1192" = type opaque
%"class.blink::FrameLoader" = type { %"class.blink::Member.842", %"class.blink::Member.1193", %"class.blink::Member.1195", %"class.std::__1::unique_ptr.1197", i32, i8, i8, i8, i32, %"class.blink::WebScopedVirtualTimePauser", %"class.WTF::HashSet" }
%"class.blink::Member.1193" = type { %"class.blink::MemberBase.1194" }
%"class.blink::MemberBase.1194" = type { %"class.blink::ProgressTracker"* }
%"class.blink::ProgressTracker" = type opaque
%"class.blink::Member.1195" = type { %"class.blink::MemberBase.1196" }
%"class.blink::MemberBase.1196" = type { %"class.blink::DocumentLoader"* }
%"class.blink::DocumentLoader" = type opaque
%"class.std::__1::unique_ptr.1197" = type { %"class.std::__1::__compressed_pair.1198" }
%"class.std::__1::__compressed_pair.1198" = type { %"struct.std::__1::__compressed_pair_elem.1199" }
%"struct.std::__1::__compressed_pair_elem.1199" = type { %"struct.blink::FrameLoader::ClientNavigationState"* }
%"struct.blink::FrameLoader::ClientNavigationState" = type { %"class.blink::KURL" }
%"class.blink::WebScopedVirtualTimePauser" = type { %"class.base::TimeTicks", i8, i8, i32, %"class.blink::scheduler::MainThreadSchedulerImpl"*, %"class.blink::WebString", i64 }
%"class.blink::scheduler::MainThreadSchedulerImpl" = type opaque
%"class.blink::WebString" = type { %class.scoped_refptr }
%"class.blink::Member.1203" = type { %"class.blink::MemberBase.1204" }
%"class.blink::MemberBase.1204" = type { %"class.blink::LocalFrameView"* }
%"class.blink::LocalFrameView" = type { %"class.blink::FrameView.base", %"class.blink::LayoutSize", %"class.WTF::HashSet.1294", %"class.blink::Member.842", i8, i8, %"class.blink::LayoutSubtreeRootList", %"class.blink::DepthOrderedLayoutObjectList", i8, i32, i32, %"class.blink::HeapTaskRunnerTimer.1299", i8, i32, %"class.blink::Color", %"class.absl::optional.1301", %"class.WTF::AtomicString", %"class.WTF::AtomicString", i8, i32, i64, i8, %"class.blink::LayoutObjectCounter", %"class.blink::Member.1306", %"class.blink::Member.1308", %"class.blink::Member.1308", %"class.std::__1::unique_ptr.1311", i32, [4 x i8], %"class.WTF::HashSet.1314", %"class.blink::Member.1321", %"class.blink::IntSize", %"class.blink::IntSize", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1323", %"class.blink::HeapHashSet.1330", %"class.blink::IntSize", i8, %"class.std::__1::unique_ptr.1338", i8, %"class.blink::Member.1344", i8, i8, i32, %"class.blink::HeapLinkedHashSet", %"class.blink::HeapLinkedHashSet.1356", i8, i32, i8, i8, i8, i8, i8, [3 x i8], %"struct.blink::LifecycleData", %"class.std::__1::unique_ptr.1370", i8, %"class.std::__1::unique_ptr.1376", %"class.std::__1::unique_ptr.1493", %"class.WTF::Vector.1499", i32, %class.scoped_refptr.1504, i32, %"class.base::TimeTicks", i64, i64, %"class.blink::Member.1505", %"class.blink::Member.1507", %"class.blink::Member.1509", %"class.blink::HeapHashSet.1511", %"class.blink::HeapHashSet.1518", %"class.std::__1::unique_ptr.1525", %"class.std::__1::unique_ptr.1532", %"class.WTF::Vector.564" }
%"class.blink::FrameView.base" = type <{ %"class.blink::EmbeddedContentView.base", i8, %"struct.blink::PhysicalRect", [4 x i8], %"class.base::TimeTicks", i32, i8, i8, i8 }>
%"class.blink::EmbeddedContentView.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::IntRect", i8, i8, i8 }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.WTF::HashSet.1294" = type { %"class.WTF::HashTable.1295" }
%"class.WTF::HashTable.1295" = type <{ %class.scoped_refptr.1298*, i32, i32, i32, [4 x i8] }>
%class.scoped_refptr.1298 = type { %"class.blink::LayoutEmbeddedObject"* }
%"class.blink::LayoutEmbeddedObject" = type opaque
%"class.blink::LayoutSubtreeRootList" = type { %"class.blink::DepthOrderedLayoutObjectList" }
%"class.blink::DepthOrderedLayoutObjectList" = type { %"struct.blink::DepthOrderedLayoutObjectListData"* }
%"struct.blink::DepthOrderedLayoutObjectListData" = type opaque
%"class.blink::HeapTaskRunnerTimer.1299" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1300", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.909, %"class.base::WeakPtrFactory.910" }
%class.scoped_refptr.909 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::WeakPtrFactory.910" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::WeakMember.1300" = type { %"class.blink::MemberBase.1204" }
%"class.blink::Color" = type { i32 }
%"class.absl::optional.1301" = type { %"class.absl::optional_internal::optional_data.1302" }
%"class.absl::optional_internal::optional_data.1302" = type { %"class.absl::optional_internal::optional_data_base.1303" }
%"class.absl::optional_internal::optional_data_base.1303" = type { %"class.absl::optional_internal::optional_data_dtor_base.1304" }
%"class.absl::optional_internal::optional_data_dtor_base.1304" = type { i8, %union.anon.1305 }
%union.anon.1305 = type { %"class.blink::IntSize" }
%"class.blink::LayoutObjectCounter" = type { i32 }
%"class.blink::Member.1306" = type { %"class.blink::MemberBase.1307" }
%"class.blink::MemberBase.1307" = type { %"class.blink::FragmentAnchor"* }
%"class.blink::FragmentAnchor" = type opaque
%"class.blink::Member.1308" = type { %"class.blink::MemberBase.1309" }
%"class.blink::MemberBase.1309" = type { %"class.blink::HeapHashSet.1310"* }
%"class.blink::HeapHashSet.1310" = type opaque
%"class.std::__1::unique_ptr.1311" = type { %"class.std::__1::__compressed_pair.1312" }
%"class.std::__1::__compressed_pair.1312" = type { %"struct.std::__1::__compressed_pair_elem.1313" }
%"struct.std::__1::__compressed_pair_elem.1313" = type { %"class.WTF::HashSet.1314"* }
%"class.WTF::HashSet.1314" = type { %"class.WTF::HashTable.1315" }
%"class.WTF::HashTable.1315" = type <{ %"class.blink::LayoutObject"**, i32, i32, i32, [4 x i8] }>
%"class.blink::LayoutObject" = type opaque
%"class.blink::Member.1321" = type { %"class.blink::MemberBase.1322" }
%"class.blink::MemberBase.1322" = type { %"class.blink::FrameViewAutoSizeInfo"* }
%"class.blink::FrameViewAutoSizeInfo" = type opaque
%"class.blink::HeapHashSet.1323" = type { %"class.WTF::HashSet.1326" }
%"class.WTF::HashSet.1326" = type { %"class.WTF::HashTable.1327" }
%"class.WTF::HashTable.1327" = type <{ %"class.blink::Member.1329"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1329" = type opaque
%"class.blink::HeapHashSet.1330" = type { %"class.WTF::HashSet.1333" }
%"class.WTF::HashSet.1333" = type { %"class.WTF::HashTable.1334" }
%"class.WTF::HashTable.1334" = type <{ %"class.blink::Member.1336"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1336" = type { %"class.blink::MemberBase.1337" }
%"class.blink::MemberBase.1337" = type { %"class.blink::Scrollbar"* }
%"class.blink::Scrollbar" = type { %"class.blink::DisplayItemClient.base", %"class.blink::Member.1566", i32, %"class.blink::ScrollbarTheme"*, i32, i32, float, float, i32, i32, i32, float, i8, i32, i8, %"class.blink::HeapTaskRunnerTimer.1577", float, i8, i8, i8, i8, %"class.blink::IntRect", %"class.blink::Member.474" }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::Member.1566" = type { %"class.blink::MemberBase.1567" }
%"class.blink::MemberBase.1567" = type { %"class.blink::ScrollableArea"* }
%"class.blink::ScrollableArea" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::ThreadState::PrefinalizerRegistration.1568", %"class.blink::Member.1569", %"class.blink::Member.1571", %"class.blink::Member.1573", %"class.blink::Member.1575", %"class.WTF::Vector.564", i16, %class.scoped_refptr.909 }
%"class.blink::ThreadState::PrefinalizerRegistration.1568" = type { i8 }
%"class.blink::Member.1569" = type { %"class.blink::MemberBase.1570" }
%"class.blink::MemberBase.1570" = type { %"class.blink::MacScrollbarAnimator"* }
%"class.blink::MacScrollbarAnimator" = type opaque
%"class.blink::Member.1571" = type { %"class.blink::MemberBase.1572" }
%"class.blink::MemberBase.1572" = type { %"class.blink::ScrollAnimatorBase"* }
%"class.blink::ScrollAnimatorBase" = type opaque
%"class.blink::Member.1573" = type { %"class.blink::MemberBase.1574" }
%"class.blink::MemberBase.1574" = type { %"class.blink::ProgrammaticScrollAnimator"* }
%"class.blink::ProgrammaticScrollAnimator" = type opaque
%"class.blink::Member.1575" = type { %"class.blink::MemberBase.1576" }
%"class.blink::MemberBase.1576" = type { %"class.blink::DisallowNewWrapper"* }
%"class.blink::DisallowNewWrapper" = type opaque
%"class.blink::ScrollbarTheme" = type opaque
%"class.blink::HeapTaskRunnerTimer.1577" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1578", { i64, i64 } }
%"class.blink::WeakMember.1578" = type { %"class.blink::MemberBase.1337" }
%"class.blink::IntSize" = type { i32, i32 }
%"class.std::__1::unique_ptr.1338" = type { %"class.std::__1::__compressed_pair.1339" }
%"class.std::__1::__compressed_pair.1339" = type { %"struct.std::__1::__compressed_pair_elem.1340" }
%"struct.std::__1::__compressed_pair_elem.1340" = type { %"class.blink::LayoutAnalyzer"* }
%"class.blink::LayoutAnalyzer" = type opaque
%"class.blink::Member.1344" = type { %"class.blink::MemberBase.1345" }
%"class.blink::MemberBase.1345" = type { %"class.blink::RootFrameViewport"* }
%"class.blink::RootFrameViewport" = type opaque
%"class.blink::HeapLinkedHashSet" = type { %"class.WTF::LinkedHashSet" }
%"class.WTF::LinkedHashSet" = type { %"class.WTF::HashMap.1348", %"class.WTF::VectorBackedLinkedList" }
%"class.WTF::HashMap.1348" = type { %"class.WTF::HashTable.1349" }
%"class.WTF::HashTable.1349" = type <{ %"struct.WTF::KeyValuePair.1351"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1351" = type opaque
%"class.WTF::VectorBackedLinkedList" = type { %"class.WTF::Vector.1352", i32, i32 }
%"class.WTF::Vector.1352" = type { %"class.WTF::VectorBuffer.1353" }
%"class.WTF::VectorBuffer.1353" = type { %"class.WTF::VectorBufferBase.1354" }
%"class.WTF::VectorBufferBase.1354" = type { %"class.WTF::VectorBackedLinkedListNode"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode" = type opaque
%"class.blink::HeapLinkedHashSet.1356" = type { %"class.WTF::LinkedHashSet.1359" }
%"class.WTF::LinkedHashSet.1359" = type { %"class.WTF::HashMap.1360", %"class.WTF::VectorBackedLinkedList.1364" }
%"class.WTF::HashMap.1360" = type { %"class.WTF::HashTable.1361" }
%"class.WTF::HashTable.1361" = type <{ %"struct.WTF::KeyValuePair.1363"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1363" = type opaque
%"class.WTF::VectorBackedLinkedList.1364" = type { %"class.WTF::Vector.1365", i32, i32 }
%"class.WTF::Vector.1365" = type { %"class.WTF::VectorBuffer.1366" }
%"class.WTF::VectorBuffer.1366" = type { %"class.WTF::VectorBufferBase.1367" }
%"class.WTF::VectorBufferBase.1367" = type { %"class.WTF::VectorBackedLinkedListNode.1368"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode.1368" = type opaque
%"struct.blink::LifecycleData" = type <{ %"class.base::TimeTicks", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1370" = type { %"class.std::__1::__compressed_pair.1371" }
%"class.std::__1::__compressed_pair.1371" = type { %"struct.std::__1::__compressed_pair_elem.1372" }
%"struct.std::__1::__compressed_pair_elem.1372" = type { %"class.blink::ScrollingCoordinatorContext"* }
%"class.blink::ScrollingCoordinatorContext" = type opaque
%"class.std::__1::unique_ptr.1376" = type { %"class.std::__1::__compressed_pair.1377" }
%"class.std::__1::__compressed_pair.1377" = type { %"struct.std::__1::__compressed_pair_elem.1378" }
%"struct.std::__1::__compressed_pair_elem.1378" = type { %"class.blink::PaintController"* }
%"class.blink::PaintController" = type { i32, %class.scoped_refptr.1379, %class.scoped_refptr.1379, %"class.blink::PaintChunker", i8, i8, %"class.WTF::Vector.1470", i32, i32, i32, [4 x i8], %"class.WTF::HashMap.1475", i32, i32, i32, i32, %"class.WTF::String", %"struct.blink::PaintController::SubsequencesData", %"struct.blink::PaintController::SubsequencesData", i32, i32, i32, i32 }
%class.scoped_refptr.1379 = type { %"class.blink::PaintArtifact"* }
%"class.blink::PaintArtifact" = type { %"class.WTF::RefCounted.1380", [4 x i8], %"class.blink::DisplayItemList", %"class.WTF::Vector.1387" }
%"class.WTF::RefCounted.1380" = type { %"class.base::RefCounted.1381" }
%"class.base::RefCounted.1381" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DisplayItemList" = type <{ %"class.WTF::Vector.1382", i32, [4 x i8] }>
%"class.WTF::Vector.1382" = type { %"class.WTF::VectorBuffer.1383" }
%"class.WTF::VectorBuffer.1383" = type { %"class.WTF::VectorBufferBase.1384" }
%"class.WTF::VectorBufferBase.1384" = type { %"struct.blink::DisplayItemList::ItemSlot"*, i32, i32 }
%"struct.blink::DisplayItemList::ItemSlot" = type { [40 x i8] }
%"class.WTF::Vector.1387" = type { %"class.WTF::VectorBuffer.1388" }
%"class.WTF::VectorBuffer.1388" = type { %"class.WTF::VectorBufferBase.1389" }
%"class.WTF::VectorBufferBase.1389" = type { %"struct.blink::PaintChunk"*, i32, i32 }
%"struct.blink::PaintChunk" = type <{ i32, i32, %"class.blink::Color", float, %"struct.blink::DisplayItem::Id", %"class.blink::RefCountedPropertyTreeState", %"class.std::__1::unique_ptr.1393", %"class.std::__1::unique_ptr.1442", %"class.blink::IntRect", %"class.blink::IntRect", i8, i8, [6 x i8] }>
%"struct.blink::DisplayItem::Id" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.blink::DisplayItemClient" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.1390, %class.scoped_refptr.1391, %class.scoped_refptr.1392 }
%class.scoped_refptr.1390 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.1406", i8, i8, %class.scoped_refptr.1390, i32, i32 }
%"class.WTF::RefCounted.1406" = type { %"class.base::RefCounted.1407" }
%"class.base::RefCounted.1407" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.1391 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.1561" }
%"class.blink::PaintPropertyNode.1561" = type { %"class.WTF::RefCounted.1562", i8, i8, %class.scoped_refptr.1391, i32, i32 }
%"class.WTF::RefCounted.1562" = type { %"class.base::RefCounted.1563" }
%"class.base::RefCounted.1563" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.1392 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.1558" }
%"class.blink::PaintPropertyNode.1558" = type { %"class.WTF::RefCounted.1559", i8, i8, %class.scoped_refptr.1392, i32, i32 }
%"class.WTF::RefCounted.1559" = type { %"class.base::RefCounted.1560" }
%"class.base::RefCounted.1560" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.1393" = type { %"class.std::__1::__compressed_pair.1394" }
%"class.std::__1::__compressed_pair.1394" = type { %"struct.std::__1::__compressed_pair_elem.1395" }
%"struct.std::__1::__compressed_pair_elem.1395" = type { %"struct.blink::HitTestData"* }
%"struct.blink::HitTestData" = type { %"class.WTF::Vector.1396", %"class.WTF::Vector.1401", %"class.blink::IntRect", %"class.blink::TransformPaintPropertyNode"* }
%"class.WTF::Vector.1396" = type { %"class.WTF::VectorBuffer.1397" }
%"class.WTF::VectorBuffer.1397" = type { %"class.WTF::VectorBufferBase.1398" }
%"class.WTF::VectorBufferBase.1398" = type { %"struct.blink::TouchActionRect"*, i32, i32 }
%"struct.blink::TouchActionRect" = type { %"class.blink::IntRect", i32 }
%"class.WTF::Vector.1401" = type { %"class.WTF::VectorBuffer.1402" }
%"class.WTF::VectorBuffer.1402" = type { %"class.WTF::VectorBufferBase.1403" }
%"class.WTF::VectorBufferBase.1403" = type { %"class.blink::IntRect"*, i32, i32 }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.1421" }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.1414, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.1415", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.1408" }
%"class.blink::FloatSize" = type { float, float }
%"class.std::__1::unique_ptr.1408" = type { %"class.std::__1::__compressed_pair.1409" }
%"class.std::__1::__compressed_pair.1409" = type { %"struct.std::__1::__compressed_pair_elem.1410" }
%"struct.std::__1::__compressed_pair_elem.1410" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.1414 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.1543", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.1543" = type { %"class.WTF::RefCounted.1544", i8, i8, %class.scoped_refptr.1414, i32, i32 }
%"class.WTF::RefCounted.1544" = type { %"class.base::RefCounted.1545" }
%"class.base::RefCounted.1545" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.1546" }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.1546" = type { %"class.absl::optional_internal::optional_data.1547" }
%"class.absl::optional_internal::optional_data.1547" = type { %"class.absl::optional_internal::optional_data_base.1548" }
%"class.absl::optional_internal::optional_data_base.1548" = type { %"class.absl::optional_internal::optional_data_dtor_base.1549" }
%"class.absl::optional_internal::optional_data_dtor_base.1549" = type { i8, %union.anon.1550 }
%union.anon.1550 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector.1551", %"struct.cc::TargetSnapAreaElementIds" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector.1551" = type { %"class.std::__1::__vector_base.1552" }
%"class.std::__1::__vector_base.1552" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.1553" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.std::__1::__compressed_pair.1553" = type { %"struct.std::__1::__compressed_pair_elem.1554" }
%"struct.std::__1::__compressed_pair_elem.1554" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.1415" = type { %"class.std::__1::__compressed_pair.1416" }
%"class.std::__1::__compressed_pair.1416" = type { %"struct.std::__1::__compressed_pair_elem.1417" }
%"struct.std::__1::__compressed_pair_elem.1417" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.1421" = type { %"class.std::__1::__compressed_pair.1422" }
%"class.std::__1::__compressed_pair.1422" = type { %"struct.std::__1::__compressed_pair_elem.1423" }
%"struct.std::__1::__compressed_pair_elem.1423" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.1424", %"class.std::__1::unique_ptr.1430", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1424" = type { %"class.std::__1::__compressed_pair.1425" }
%"class.std::__1::__compressed_pair.1425" = type { %"struct.std::__1::__compressed_pair_elem.1426" }
%"struct.std::__1::__compressed_pair_elem.1426" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.1430" = type { %"class.std::__1::__compressed_pair.1431" }
%"class.std::__1::__compressed_pair.1431" = type { %"struct.std::__1::__compressed_pair_elem.1432" }
%"struct.std::__1::__compressed_pair_elem.1432" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.1442" = type { %"class.std::__1::__compressed_pair.1443" }
%"class.std::__1::__compressed_pair.1443" = type { %"struct.std::__1::__compressed_pair_elem.1444" }
%"struct.std::__1::__compressed_pair_elem.1444" = type { %"struct.blink::LayerSelectionData"* }
%"struct.blink::LayerSelectionData" = type { %"class.absl::optional.1445", %"class.absl::optional.1445" }
%"class.absl::optional.1445" = type { %"class.absl::optional_internal::optional_data.1446" }
%"class.absl::optional_internal::optional_data.1446" = type { %"class.absl::optional_internal::optional_data_base.1447" }
%"class.absl::optional_internal::optional_data_base.1447" = type { %"class.absl::optional_internal::optional_data_dtor_base.1448" }
%"class.absl::optional_internal::optional_data_dtor_base.1448" = type { i8, [3 x i8], %union.anon.1449 }
%union.anon.1449 = type { %"struct.blink::PaintedSelectionBound" }
%"struct.blink::PaintedSelectionBound" = type <{ i32, %"class.blink::IntPoint", %"class.blink::IntPoint", i8, [3 x i8] }>
%"class.blink::PaintChunker" = type <{ %"class.WTF::Vector.1387"*, %"class.absl::optional.1455", %"class.blink::PropertyTreeStateOrAlias", %"class.blink::Region", i8, i8, i8, i8, %"class.blink::Color", float, [4 x i8] }>
%"class.absl::optional.1455" = type { %"class.absl::optional_internal::optional_data.1456" }
%"class.absl::optional_internal::optional_data.1456" = type { %"class.absl::optional_internal::optional_data_base.1457" }
%"class.absl::optional_internal::optional_data_base.1457" = type { %"class.absl::optional_internal::optional_data_dtor_base.1458" }
%"class.absl::optional_internal::optional_data_dtor_base.1458" = type { i8, %union.anon.1459 }
%union.anon.1459 = type { %"struct.blink::DisplayItem::Id" }
%"class.blink::PropertyTreeStateOrAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::Region" = type { %"class.blink::IntRect", %"class.blink::Region::Shape" }
%"class.blink::Region::Shape" = type { %"class.WTF::Vector.1460", %"class.WTF::Vector.1465" }
%"class.WTF::Vector.1460" = type { %"class.WTF::VectorBuffer.1461" }
%"class.WTF::VectorBuffer.1461" = type { %"class.WTF::VectorBufferBase.1462", [128 x i8] }
%"class.WTF::VectorBufferBase.1462" = type { i32*, i32, i32 }
%"class.WTF::Vector.1465" = type { %"class.WTF::VectorBuffer.1466" }
%"class.WTF::VectorBuffer.1466" = type { %"class.WTF::VectorBufferBase.1467", [128 x i8] }
%"class.WTF::VectorBufferBase.1467" = type { %"struct.blink::Region::Span"*, i32, i32 }
%"struct.blink::Region::Span" = type { i32, i32 }
%"class.WTF::Vector.1470" = type { %"class.WTF::VectorBuffer.1471" }
%"class.WTF::VectorBuffer.1471" = type { %"class.WTF::VectorBufferBase.1472" }
%"class.WTF::VectorBufferBase.1472" = type { %"struct.blink::FrameFirstPaint"*, i32, i32 }
%"struct.blink::FrameFirstPaint" = type <{ i8*, i8, [7 x i8] }>
%"class.WTF::HashMap.1475" = type { %"class.WTF::HashTable.1476" }
%"class.WTF::HashTable.1476" = type <{ %"struct.WTF::KeyValuePair.1479"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1479" = type opaque
%"struct.blink::PaintController::SubsequencesData" = type { %"class.WTF::HashMap.1480", %"class.WTF::Vector.1485" }
%"class.WTF::HashMap.1480" = type { %"class.WTF::HashTable.1481" }
%"class.WTF::HashTable.1481" = type <{ %"struct.WTF::KeyValuePair.1484"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1484" = type opaque
%"class.WTF::Vector.1485" = type { %"class.WTF::VectorBuffer.1486" }
%"class.WTF::VectorBuffer.1486" = type { %"class.WTF::VectorBufferBase.1487" }
%"class.WTF::VectorBufferBase.1487" = type { %"struct.blink::PaintController::SubsequenceMarkers"*, i32, i32 }
%"struct.blink::PaintController::SubsequenceMarkers" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.std::__1::unique_ptr.1493" = type { %"class.std::__1::__compressed_pair.1494" }
%"class.std::__1::__compressed_pair.1494" = type { %"struct.std::__1::__compressed_pair_elem.1495" }
%"struct.std::__1::__compressed_pair_elem.1495" = type { %"class.blink::PaintArtifactCompositor"* }
%"class.blink::PaintArtifactCompositor" = type opaque
%"class.WTF::Vector.1499" = type { %"class.WTF::VectorBuffer.1500" }
%"class.WTF::VectorBuffer.1500" = type { %"class.WTF::VectorBufferBase.1501" }
%"class.WTF::VectorBufferBase.1501" = type { %"struct.blink::PreCompositedLayerInfo"*, i32, i32 }
%"struct.blink::PreCompositedLayerInfo" = type opaque
%class.scoped_refptr.1504 = type { %"class.blink::LocalFrameUkmAggregator"* }
%"class.blink::LocalFrameUkmAggregator" = type opaque
%"class.blink::Member.1505" = type { %"class.blink::MemberBase.1506" }
%"class.blink::MemberBase.1506" = type { %"class.blink::LayoutShiftTracker"* }
%"class.blink::LayoutShiftTracker" = type opaque
%"class.blink::Member.1507" = type { %"class.blink::MemberBase.1508" }
%"class.blink::MemberBase.1508" = type { %"class.blink::PaintTimingDetector"* }
%"class.blink::PaintTimingDetector" = type opaque
%"class.blink::Member.1509" = type { %"class.blink::MemberBase.1510" }
%"class.blink::MemberBase.1510" = type { %"class.blink::MobileFriendlinessChecker"* }
%"class.blink::MobileFriendlinessChecker" = type opaque
%"class.blink::HeapHashSet.1511" = type { %"class.WTF::HashSet.1514" }
%"class.WTF::HashSet.1514" = type { %"class.WTF::HashTable.1515" }
%"class.WTF::HashTable.1515" = type <{ %"class.blink::WeakMember.1517"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1517" = type opaque
%"class.blink::HeapHashSet.1518" = type { %"class.WTF::HashSet.1521" }
%"class.WTF::HashSet.1521" = type { %"class.WTF::HashTable.1522" }
%"class.WTF::HashTable.1522" = type <{ %"class.blink::WeakMember.1524"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1524" = type opaque
%"class.std::__1::unique_ptr.1525" = type { %"class.std::__1::__compressed_pair.1526" }
%"class.std::__1::__compressed_pair.1526" = type { %"struct.std::__1::__compressed_pair_elem.1527" }
%"struct.std::__1::__compressed_pair_elem.1527" = type { %"class.blink::OverlayInterstitialAdDetector"* }
%"class.blink::OverlayInterstitialAdDetector" = type <{ i8, i8, [6 x i8], %"class.base::Time", %"class.blink::IntSize", i32, i8, [3 x i8], i32, i32, i8, i8, [6 x i8] }>
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.1528" }
%"class.base::time_internal::TimeBase.1528" = type { i64 }
%"class.std::__1::unique_ptr.1532" = type { %"class.std::__1::__compressed_pair.1533" }
%"class.std::__1::__compressed_pair.1533" = type { %"struct.std::__1::__compressed_pair_elem.1534" }
%"struct.std::__1::__compressed_pair_elem.1534" = type { %"class.blink::StickyAdDetector"* }
%"class.blink::StickyAdDetector" = type <{ %"class.absl::optional.1535", i32, i32, i32, i8, [3 x i8] }>
%"class.absl::optional.1535" = type { %"class.absl::optional_internal::optional_data.1536" }
%"class.absl::optional_internal::optional_data.1536" = type { %"class.absl::optional_internal::optional_data_base.1537" }
%"class.absl::optional_internal::optional_data_base.1537" = type { %"class.absl::optional_internal::optional_data_dtor_base.1538" }
%"class.absl::optional_internal::optional_data_dtor_base.1538" = type { i8, %union.anon.1539 }
%union.anon.1539 = type { %"class.base::Time" }
%"class.blink::Member.1205" = type { %"class.blink::MemberBase.1206" }
%"class.blink::MemberBase.1206" = type { %"class.blink::Editor"* }
%"class.blink::Editor" = type opaque
%"class.blink::Member.1207" = type { %"class.blink::MemberBase.1208" }
%"class.blink::MemberBase.1208" = type { %"class.blink::FrameSelection"* }
%"class.blink::FrameSelection" = type opaque
%"class.blink::Member.1209" = type { %"class.blink::MemberBase.1210" }
%"class.blink::MemberBase.1210" = type { %"class.blink::EventHandler"* }
%"class.blink::EventHandler" = type opaque
%"class.blink::Member.1211" = type { %"class.blink::MemberBase.1212" }
%"class.blink::MemberBase.1212" = type { %"class.blink::FrameConsole"* }
%"class.blink::FrameConsole" = type opaque
%"class.blink::Member.1213" = type { %"class.blink::MemberBase.1214" }
%"class.blink::MemberBase.1214" = type { %"class.blink::CoreProbeSink"* }
%"class.blink::CoreProbeSink" = type opaque
%class.scoped_refptr.1215 = type { %"class.blink::InspectorTaskRunner"* }
%"class.blink::InspectorTaskRunner" = type opaque
%"class.blink::Member.1216" = type { %"class.blink::MemberBase.1217" }
%"class.blink::MemberBase.1217" = type { %"class.blink::PerformanceMonitor"* }
%"class.blink::PerformanceMonitor" = type opaque
%"class.blink::Member.1218" = type { %"class.blink::MemberBase.1219" }
%"class.blink::MemberBase.1219" = type { %"class.blink::AdTracker"* }
%"class.blink::AdTracker" = type opaque
%"class.blink::Member.1220" = type { %"class.blink::MemberBase.1221" }
%"class.blink::MemberBase.1221" = type { %"class.blink::IdlenessDetector"* }
%"class.blink::IdlenessDetector" = type opaque
%"class.blink::Member.1222" = type { %"class.blink::MemberBase.1223" }
%"class.blink::MemberBase.1223" = type { %"class.blink::InspectorIssueReporter"* }
%"class.blink::InspectorIssueReporter" = type opaque
%"class.blink::Member.1224" = type { %"class.blink::MemberBase.1225" }
%"class.blink::MemberBase.1225" = type { %"class.blink::InspectorTraceEvents"* }
%"class.blink::InspectorTraceEvents" = type opaque
%"class.blink::Member.1226" = type { %"class.blink::MemberBase.1227" }
%"class.blink::MemberBase.1227" = type { %"class.blink::SmoothScrollSequencer"* }
%"class.blink::SmoothScrollSequencer" = type opaque
%"class.blink::Member.1228" = type { %"class.blink::MemberBase.1229" }
%"class.blink::MemberBase.1229" = type { %"class.blink::ContentCaptureManager"* }
%"class.blink::ContentCaptureManager" = type opaque
%"class.blink::InterfaceRegistry" = type opaque
%"class.blink::HeapMojoRemote.1230" = type { %"class.blink::Member.1231" }
%"class.blink::Member.1231" = type { %"class.blink::MemberBase.1232" }
%"class.blink::MemberBase.1232" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::ReportingServiceProxy, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::ReportingServiceProxy, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::Remote.1663" }
%"class.mojo::Remote.1663" = type { %"class.mojo::internal::InterfacePtrState.1664" }
%"class.mojo::internal::InterfacePtrState.1664" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1665" }
%"class.mojo::internal::InterfacePtrStateBase.base" = type <{ %class.scoped_refptr.605, %"class.std::__1::unique_ptr.134", %"class.mojo::ScopedHandleBase", [4 x i8], %class.scoped_refptr.153, i32 }>
%class.scoped_refptr.605 = type { %"class.mojo::internal::MultiplexRouter"* }
%"class.mojo::internal::MultiplexRouter" = type <{ %"class.mojo::MessageReceiver", %"class.mojo::AssociatedGroupController.base", [4 x i8], %"class.mojo::PipeControlMessageHandlerDelegate", i32, i8, [3 x i8], %class.scoped_refptr.153, %"class.mojo::MessageHeaderValidator"*, %"class.mojo::MessageDispatcher", %"class.mojo::Connector", %"class.mojo::ScopedHandleBase", [4 x i8], %"class.absl::optional.663", %"class.absl::optional.668", %"class.absl::optional.622", %"class.mojo::PipeControlMessageHandler", %"class.mojo::PipeControlMessageProxy", %"class.base::small_map", i32, [4 x i8], %"class.base::circular_deque", %"class.std::__1::map.688", i8, [7 x i8], %class.scoped_refptr.153, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.mojo::AssociatedGroupController.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.174" }>
%"class.mojo::PipeControlMessageHandlerDelegate" = type { i32 (...)** }
%"class.mojo::MessageHeaderValidator" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string" }
%"class.mojo::Connector" = type { %"class.mojo::MessageReceiver", %"class.base::OnceCallback.162", %"class.mojo::ScopedHandleBase", %"class.mojo::MessageReceiver"*, %class.scoped_refptr.153, %"class.std::__1::unique_ptr.606", %"class.absl::optional.616", %"struct.std::__1::atomic.430", i8, i8, i8, i8, i32, i32, %"class.absl::optional.622", %"class.std::__1::unique_ptr.627", i8, i64, %class.scoped_refptr.660, %"class.base::Lock", i8, i8*, %"class.mojo::Connector::RunLoopNestingObserver"*, i8, i64, %"class.mojo::ConnectionGroup::Ref", %"class.base::WeakPtr", %"class.base::WeakPtrFactory.662" }
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"class.mojo::SimpleWatcher"* }
%"class.mojo::SimpleWatcher" = type { i32, %class.scoped_refptr.153, i8, %"class.mojo::ScopedHandleBase.609", %class.scoped_refptr.610, %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.611", i8*, %"class.base::WeakPtrFactory.612" }
%"class.mojo::ScopedHandleBase.609" = type { %"class.mojo::TrapHandle" }
%"class.mojo::TrapHandle" = type { %"class.mojo::Handle" }
%class.scoped_refptr.610 = type { %"class.mojo::SimpleWatcher::Context"* }
%"class.mojo::SimpleWatcher::Context" = type opaque
%"class.mojo::Handle" = type { i32 }
%"class.base::RepeatingCallback.611" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtrFactory.612" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.616" = type { %"class.absl::optional_internal::optional_data.617" }
%"class.absl::optional_internal::optional_data.617" = type { %"class.absl::optional_internal::optional_data_base.618" }
%"class.absl::optional_internal::optional_data_base.618" = type { %"class.absl::optional_internal::optional_data_dtor_base.619" }
%"class.absl::optional_internal::optional_data_dtor_base.619" = type { i8, %union.anon.620 }
%union.anon.620 = type { %"class.mojo::HandleSignalTracker" }
%"class.mojo::HandleSignalTracker" = type { %"class.base::RepeatingCallback.621", %"struct.mojo::HandleSignalsState", %"class.mojo::SimpleWatcher", %"class.mojo::SimpleWatcher" }
%"class.base::RepeatingCallback.621" = type { %"class.base::internal::CallbackBaseCopyable" }
%"struct.mojo::HandleSignalsState" = type { %struct.MojoHandleSignalsState }
%struct.MojoHandleSignalsState = type { i32, i32 }
%"class.std::__1::unique_ptr.627" = type { %"class.std::__1::__compressed_pair.628" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.629" }
%"struct.std::__1::__compressed_pair_elem.629" = type { %"class.mojo::SyncHandleWatcher"* }
%"class.mojo::SyncHandleWatcher" = type { %"class.mojo::Handle", i32, %"class.base::RepeatingCallback.630", i8, i64, %class.scoped_refptr.631, %class.scoped_refptr.656 }
%"class.base::RepeatingCallback.630" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.631 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted.632", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map.634", %"class.std::__1::map.645", i8, [7 x i8] }>
%"class.base::RefCounted.632" = type { %"class.base::subtle::RefCountedBase" }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.633 }
%class.scoped_refptr.633 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map.634" = type { %"class.std::__1::__tree.635" }
%"class.std::__1::__tree.635" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.636", %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::map.645" = type { %"class.std::__1::__tree.646" }
%"class.std::__1::__tree.646" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.647", %"class.std::__1::__compressed_pair.651" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.651" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%class.scoped_refptr.656 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type opaque
%class.scoped_refptr.660 = type { %"class.mojo::internal::MessageQuotaChecker"* }
%"class.mojo::internal::MessageQuotaChecker" = type opaque
%"class.mojo::Connector::RunLoopNestingObserver" = type opaque
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.661 }
%class.scoped_refptr.661 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::WeakPtrFactory.662" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.absl::optional.663" = type { %"class.absl::optional_internal::optional_data.664" }
%"class.absl::optional_internal::optional_data.664" = type { %"class.absl::optional_internal::optional_data_base.665" }
%"class.absl::optional_internal::optional_data_base.665" = type { %"class.absl::optional_internal::optional_data_dtor_base.666" }
%"class.absl::optional_internal::optional_data_dtor_base.666" = type { i8, %union.anon.667 }
%union.anon.667 = type { %"class.mojo::SimpleWatcher" }
%"class.absl::optional.668" = type { %"class.absl::optional_internal::optional_data.669" }
%"class.absl::optional_internal::optional_data.669" = type { %"class.absl::optional_internal::optional_data_base.670" }
%"class.absl::optional_internal::optional_data_base.670" = type { %"class.absl::optional_internal::optional_data_dtor_base.671" }
%"class.absl::optional_internal::optional_data_dtor_base.671" = type { i8, [7 x i8], %union.anon.672 }
%union.anon.672 = type { %"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" }
%"struct.mojo::internal::MultiplexRouter::ExclusiveSyncWaitInfo" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.absl::optional.622" = type { %"class.absl::optional_internal::optional_data.623" }
%"class.absl::optional_internal::optional_data.623" = type { %"class.absl::optional_internal::optional_data_base.624" }
%"class.absl::optional_internal::optional_data_base.624" = type { %"class.absl::optional_internal::optional_data_dtor_base.625" }
%"class.absl::optional_internal::optional_data_dtor_base.625" = type { i8, %union.anon.626 }
%union.anon.626 = type { %"class.base::Lock" }
%"class.mojo::PipeControlMessageHandler" = type { %"class.mojo::MessageReceiver", %"class.std::__1::basic_string", %"class.mojo::PipeControlMessageHandlerDelegate"* }
%"class.mojo::PipeControlMessageProxy" = type { %"class.mojo::MessageReceiver"* }
%"class.base::small_map" = type { i64, %"class.base::internal::small_map_default_init", %union.anon.673 }
%"class.base::internal::small_map_default_init" = type { i8 }
%union.anon.673 = type { %"class.std::__1::map.676" }
%"class.std::__1::map.676" = type { %"class.std::__1::__tree.677" }
%"class.std::__1::__tree.677" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.678", %"class.std::__1::__compressed_pair.682" }
%"class.std::__1::__compressed_pair.678" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.687"*, i64 }
%"class.std::__1::unique_ptr.687" = type opaque
%"class.std::__1::map.688" = type { %"class.std::__1::__tree.689" }
%"class.std::__1::__tree.689" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.690", %"class.std::__1::__compressed_pair.694" }
%"class.std::__1::__compressed_pair.690" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.694" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.std::__1::unique_ptr.1665" = type { %"class.std::__1::__compressed_pair.1666" }
%"class.std::__1::__compressed_pair.1666" = type { %"struct.std::__1::__compressed_pair_elem.1667" }
%"struct.std::__1::__compressed_pair_elem.1667" = type { %"class.blink::mojom::blink::ReportingServiceProxyProxy"* }
%"class.blink::mojom::blink::ReportingServiceProxyProxy" = type { %"class.blink::mojom::blink::ReportingServiceProxy", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::ReportingServiceProxy" = type { i32 (...)** }
%"class.blink::mojom::blink::ViewportIntersectionState" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", i32, %"class.gfx::Size", %"class.gfx::Point", %"class.gfx::Transform" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.std::__1::unique_ptr.1233" = type { %"class.std::__1::__compressed_pair.1234" }
%"class.std::__1::__compressed_pair.1234" = type { %"struct.std::__1::__compressed_pair_elem.1235" }
%"struct.std::__1::__compressed_pair_elem.1235" = type { %"class.blink::WebURLLoaderFactory"* }
%"class.blink::WebURLLoaderFactory" = type opaque
%"class.blink::ClientHintsPreferences" = type { %"struct.blink::WebEnabledClientHints" }
%"struct.blink::WebEnabledClientHints" = type { [16 x i8] }
%"class.base::RepeatingCallback.1239" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::unique_ptr.1240" = type { %"class.std::__1::__compressed_pair.1241" }
%"class.std::__1::__compressed_pair.1241" = type { %"struct.std::__1::__compressed_pair_elem.1242" }
%"struct.std::__1::__compressed_pair_elem.1242" = type { %"class.blink::FrameOverlay"* }
%"class.blink::FrameOverlay" = type opaque
%"class.std::__1::unique_ptr.1246" = type { %"class.std::__1::__compressed_pair.1247" }
%"class.std::__1::__compressed_pair.1247" = type { %"struct.std::__1::__compressed_pair_elem.1248" }
%"struct.std::__1::__compressed_pair_elem.1248" = type { %"class.blink::WebPrescientNetworking"* }
%"class.blink::WebPrescientNetworking" = type opaque
%"class.blink::HeapMojoAssociatedRemote" = type { %"class.blink::Member.1252" }
%"class.blink::Member.1252" = type { %"class.blink::MemberBase.1253" }
%"class.blink::MemberBase.1253" = type { %"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::LocalFrameHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::LocalFrameHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::AssociatedRemote.1673" }
%"class.mojo::AssociatedRemote.1673" = type { %"class.mojo::internal::AssociatedInterfacePtrState.1674" }
%"class.mojo::internal::AssociatedInterfacePtrState.1674" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1675" }
%"class.std::__1::unique_ptr.1675" = type { %"class.std::__1::__compressed_pair.1676" }
%"class.std::__1::__compressed_pair.1676" = type { %"struct.std::__1::__compressed_pair_elem.1677" }
%"struct.std::__1::__compressed_pair_elem.1677" = type { %"class.blink::mojom::blink::LocalFrameHostProxy"* }
%"class.blink::mojom::blink::LocalFrameHostProxy" = type { %"class.blink::mojom::blink::LocalFrameHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::LocalFrameHost" = type { i32 (...)** }
%"class.blink::HeapMojoAssociatedRemote.1254" = type { %"class.blink::Member.1255" }
%"class.blink::Member.1255" = type { %"class.blink::MemberBase.1256" }
%"class.blink::MemberBase.1256" = type { %"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::BackForwardCacheControllerHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedRemote<blink::mojom::blink::BackForwardCacheControllerHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.mojo::AssociatedRemote.1683" }
%"class.mojo::AssociatedRemote.1683" = type { %"class.mojo::internal::AssociatedInterfacePtrState.1684" }
%"class.mojo::internal::AssociatedInterfacePtrState.1684" = type { %"class.mojo::internal::AssociatedInterfacePtrStateBase.base", %"class.std::__1::unique_ptr.1685" }
%"class.std::__1::unique_ptr.1685" = type { %"class.std::__1::__compressed_pair.1686" }
%"class.std::__1::__compressed_pair.1686" = type { %"struct.std::__1::__compressed_pair_elem.1687" }
%"struct.std::__1::__compressed_pair_elem.1687" = type { %"class.blink::mojom::blink::BackForwardCacheControllerHostProxy"* }
%"class.blink::mojom::blink::BackForwardCacheControllerHostProxy" = type { %"class.blink::mojom::blink::BackForwardCacheControllerHost", %"class.mojo::MessageReceiverWithResponder"* }
%"class.blink::mojom::blink::BackForwardCacheControllerHost" = type { i32 (...)** }
%"class.blink::HeapMojoAssociatedReceiver" = type { %"class.blink::Member.1257" }
%"class.blink::Member.1257" = type { %"class.blink::MemberBase.1258" }
%"class.blink::MemberBase.1258" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1693", %"class.blink::Member.842", %"class.mojo::AssociatedReceiver" }
%"class.blink::ThreadState::PrefinalizerRegistration.1693" = type { i8 }
%"class.mojo::AssociatedReceiver" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::LocalFrameStub", %"class.base::WeakPtrFactory.1694" }
%"class.mojo::internal::AssociatedReceiverBase" = type { %"class.std::__1::unique_ptr.134" }
%"class.blink::mojom::blink::LocalFrameStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::LocalFrame"* }
%"class.base::WeakPtrFactory.1694" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoAssociatedReceiver.1259" = type { %"class.blink::Member.1260" }
%"class.blink::Member.1260" = type { %"class.blink::MemberBase.1261" }
%"class.blink::MemberBase.1261" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalMainFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::LocalMainFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1697", %"class.blink::Member.842", %"class.mojo::AssociatedReceiver.1698" }
%"class.blink::ThreadState::PrefinalizerRegistration.1697" = type { i8 }
%"class.mojo::AssociatedReceiver.1698" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::LocalMainFrameStub", %"class.base::WeakPtrFactory.1699" }
%"class.blink::mojom::blink::LocalMainFrameStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::LocalMainFrame"* }
%"class.base::WeakPtrFactory.1699" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::HeapMojoReceiver" = type { %"class.blink::Member.1262" }
%"class.blink::Member.1262" = type { %"class.blink::MemberBase.1263" }
%"class.blink::MemberBase.1263" = type { %"class.blink::HeapMojoReceiver<blink::mojom::blink::HighPriorityLocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoReceiver<blink::mojom::blink::HighPriorityLocalFrame, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1702", %"class.blink::Member.842", %"class.mojo::Receiver" }
%"class.blink::ThreadState::PrefinalizerRegistration.1702" = type { i8 }
%"class.mojo::Receiver" = type { %"class.mojo::internal::BindingState" }
%"class.mojo::internal::BindingState" = type { %"class.mojo::internal::BindingStateBase", %"class.blink::mojom::blink::HighPriorityLocalFrameStub" }
%"class.mojo::internal::BindingStateBase" = type { %class.scoped_refptr.605, %"class.std::__1::unique_ptr.134", %"class.base::WeakPtrFactory.1703" }
%"class.base::WeakPtrFactory.1703" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::mojom::blink::HighPriorityLocalFrameStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::HighPriorityLocalFrame"* }
%"class.blink::HeapMojoAssociatedReceiver.1264" = type { %"class.blink::Member.1265" }
%"class.blink::Member.1265" = type { %"class.blink::MemberBase.1266" }
%"class.blink::MemberBase.1266" = type { %"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::FullscreenVideoElementHandler, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoAssociatedReceiver<blink::mojom::blink::FullscreenVideoElementHandler, blink::LocalFrame, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type { %"class.blink::ContextLifecycleObserver", %"class.blink::ThreadState::PrefinalizerRegistration.1706", %"class.blink::Member.842", %"class.mojo::AssociatedReceiver.1707" }
%"class.blink::ThreadState::PrefinalizerRegistration.1706" = type { i8 }
%"class.mojo::AssociatedReceiver.1707" = type { %"class.mojo::internal::AssociatedReceiverBase", %"class.blink::mojom::blink::FullscreenVideoElementHandlerStub", %"class.base::WeakPtrFactory.1708" }
%"class.blink::mojom::blink::FullscreenVideoElementHandlerStub" = type { %"class.mojo::MessageReceiverWithResponderStatus", %"class.blink::mojom::blink::FullscreenVideoElementHandler"* }
%"class.base::WeakPtrFactory.1708" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.blink::Member.1267" = type { %"class.blink::MemberBase.1268" }
%"class.blink::MemberBase.1268" = type { %"class.blink::SystemClipboard"* }
%"class.blink::SystemClipboard" = type opaque
%"class.blink::Member.1269" = type { %"class.blink::MemberBase.1270" }
%"class.blink::MemberBase.1270" = type { %"class.blink::RawSystemClipboard"* }
%"class.blink::RawSystemClipboard" = type opaque
%"class.blink::Member.1271" = type { %"class.blink::MemberBase.1272" }
%"class.blink::MemberBase.1272" = type { %"class.blink::BackgroundColorPaintImageGenerator"* }
%"class.blink::BackgroundColorPaintImageGenerator" = type opaque
%"class.blink::Member.1273" = type { %"class.blink::MemberBase.1274" }
%"class.blink::MemberBase.1274" = type { %"class.blink::HeapHashMap.1275"* }
%"class.blink::HeapHashMap.1275" = type opaque
%"class.mojo::StructPtr.1276" = type { %"class.std::__1::unique_ptr.1277" }
%"class.std::__1::unique_ptr.1277" = type { %"class.std::__1::__compressed_pair.1278" }
%"class.std::__1::__compressed_pair.1278" = type { %"struct.std::__1::__compressed_pair_elem.1279" }
%"struct.std::__1::__compressed_pair_elem.1279" = type { %"class.blink::mojom::blink::BlinkOptimizationGuideHints"* }
%"class.blink::mojom::blink::BlinkOptimizationGuideHints" = type { %"class.mojo::InlinedStructPtr.1280", %"class.mojo::InlinedStructPtr.1281" }
%"class.mojo::InlinedStructPtr.1280" = type { %"class.blink::mojom::blink::DelayAsyncScriptExecutionHints", i32 }
%"class.blink::mojom::blink::DelayAsyncScriptExecutionHints" = type { i32 }
%"class.mojo::InlinedStructPtr.1281" = type { %"class.blink::mojom::blink::DelayCompetingLowPriorityRequestsHints", i32 }
%"class.blink::mojom::blink::DelayCompetingLowPriorityRequestsHints" = type { i32, i32 }
%"class.blink::Member.1285" = type { %"class.blink::MemberBase.1286" }
%"class.blink::MemberBase.1286" = type { %"class.blink::TextFragmentHandler"* }
%"class.blink::TextFragmentHandler" = type opaque
%"class.blink::TransientAllowFullscreen" = type { %"class.base::TimeTicks" }
%"class.blink::PaymentRequestToken" = type { %"class.base::TimeTicks" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.absl::optional.1287" = type { %"class.absl::optional_internal::optional_data.1288" }
%"class.absl::optional_internal::optional_data.1288" = type { %"class.absl::optional_internal::optional_data_base.1289" }
%"class.absl::optional_internal::optional_data_base.1289" = type { %"class.absl::optional_internal::optional_data_dtor_base.1290" }
%"class.absl::optional_internal::optional_data_dtor_base.1290" = type { i8, %union.anon.1291 }
%union.anon.1291 = type { %"class.blink::FrameAdEvidence" }
%"class.blink::FrameAdEvidence" = type { i8, i8, i32, i32, i32 }
%"class.blink::NavigationRateLimiter" = type <{ %"class.blink::Member.592", %"class.base::TimeTicks", i32, i8, i8, [2 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.1143" }
%"class.std::__1::vector.1143" = type { %"class.std::__1::__vector_base.1144" }
%"class.std::__1::__vector_base.1144" = type { %"struct.std::__1::pair.1145"*, %"struct.std::__1::pair.1145"*, %"class.std::__1::__compressed_pair.1146" }
%"struct.std::__1::pair.1145" = type { i32, [4 x i8], %"class.blink::PolicyValue" }
%"class.blink::PolicyValue" = type <{ i32, i8, [3 x i8], double, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.1146" = type { %"struct.std::__1::__compressed_pair_elem.1147" }
%"struct.std::__1::__compressed_pair_elem.1147" = type { %"struct.std::__1::pair.1145"* }
%"class.blink::Member.1151" = type { %"class.blink::MemberBase.1152" }
%"class.blink::MemberBase.1152" = type { %"class.blink::WindowAgentFactory"* }
%"class.blink::WindowAgentFactory" = type opaque
%"class.absl::optional.1153" = type { %"class.absl::optional_internal::optional_data.1154" }
%"class.absl::optional_internal::optional_data.1154" = type { %"class.absl::optional_internal::optional_data_base.1155" }
%"class.absl::optional_internal::optional_data_base.1155" = type { %"class.absl::optional_internal::optional_data_dtor_base.1156" }
%"class.absl::optional_internal::optional_data_dtor_base.1156" = type { i8, %union.anon.1157 }
%union.anon.1157 = type { %"class.std::__1::basic_string" }
%"class.absl::optional.1158" = type { %"class.absl::optional_internal::optional_data.1159" }
%"class.absl::optional_internal::optional_data.1159" = type { %"class.absl::optional_internal::optional_data_base.1160" }
%"class.absl::optional_internal::optional_data_base.1160" = type { %"class.absl::optional_internal::optional_data_dtor_base.1161" }
%"class.absl::optional_internal::optional_data_dtor_base.1161" = type { i8, %union.anon.1162 }
%union.anon.1162 = type { %"class.base::UnguessableToken" }
%"class.blink::UserActivationState" = type { i8, %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i32 }
%"class.blink::MultiToken" = type <{ %"class.base::UnguessableToken", i32, [4 x i8] }>
%"class.blink::OpenedFrameTracker" = type { %"class.blink::HeapHashSet.1163" }
%"class.blink::HeapHashSet.1163" = type { %"class.WTF::HashSet.1166" }
%"class.WTF::HashSet.1166" = type { %"class.WTF::HashTable.1167" }
%"class.WTF::HashTable.1167" = type <{ %"class.blink::WeakMember.1169"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1169" = type opaque
%"class.blink::Member.594" = type { %"class.blink::MemberBase.595" }
%"class.blink::MemberBase.595" = type { %"class.blink::WindowProxyManager"* }
%"class.blink::WindowProxyManager" = type opaque
%"class.blink::Member.596" = type { %"class.blink::MemberBase.597" }
%"class.blink::MemberBase.597" = type { %"class.blink::InputDeviceCapabilitiesConstants"* }
%"class.blink::InputDeviceCapabilitiesConstants" = type opaque
%"class.blink::Member.598" = type { %"class.blink::MemberBase.599" }
%"class.blink::MemberBase.599" = type { %"class.blink::Location"* }
%"class.blink::Location" = type opaque
%"class.WTF::Vector.600" = type { %"class.WTF::VectorBuffer.601" }
%"class.WTF::VectorBuffer.601" = type { %"class.WTF::VectorBufferBase.602" }
%"class.WTF::VectorBufferBase.602" = type { %"struct.blink::DOMWindow::CoopAccessMonitor"*, i32, i32 }
%"struct.blink::DOMWindow::CoopAccessMonitor" = type { i32, %"class.util::TokenType.603", %"class.mojo::Remote", i8, %"class.WTF::String" }
%"class.mojo::Remote" = type { %"class.mojo::internal::InterfacePtrState" }
%"class.mojo::internal::InterfacePtrState" = type { %"class.mojo::internal::InterfacePtrStateBase.base", %"class.std::__1::unique_ptr.697" }
%"class.std::__1::unique_ptr.697" = type { %"class.std::__1::__compressed_pair.698" }
%"class.std::__1::__compressed_pair.698" = type { %"struct.std::__1::__compressed_pair_elem.699" }
%"struct.std::__1::__compressed_pair_elem.699" = type { %"class.network::mojom::blink::CrossOriginOpenerPolicyReporterProxy"* }
%"class.network::mojom::blink::CrossOriginOpenerPolicyReporterProxy" = type { %"class.network::mojom::blink::CrossOriginOpenerPolicyReporter", %"class.mojo::MessageReceiverWithResponder"* }
%"class.network::mojom::blink::CrossOriginOpenerPolicyReporter" = type { i32 (...)** }
%"class.blink::ExecutionContext.base" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.69", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.78", %"class.blink::Member.80", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.89", %"class.blink::Member.225", %"class.blink::Member.227", i8 }>
%"class.blink::Supplementable.705" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.706" }
%"class.blink::HeapHashMap.706" = type { %"class.WTF::HashMap.709" }
%"class.WTF::HashMap.709" = type { %"class.WTF::HashTable.710" }
%"class.WTF::HashTable.710" = type <{ %"struct.WTF::KeyValuePair.712"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.712" = type opaque
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.713" = type { %"class.blink::MemberBase.714" }
%"class.blink::MemberBase.714" = type { %"class.blink::ScriptController"* }
%"class.blink::ScriptController" = type opaque
%"class.blink::Member.715" = type { %"class.blink::MemberBase.716" }
%"class.blink::MemberBase.716" = type { %"class.blink::DOMVisualViewport"* }
%"class.blink::DOMVisualViewport" = type opaque
%"class.blink::Member.717" = type { %"class.blink::MemberBase.718" }
%"class.blink::MemberBase.718" = type { %"class.blink::Screen"* }
%"class.blink::Screen" = type opaque
%"class.blink::Member.719" = type { %"class.blink::MemberBase.720" }
%"class.blink::MemberBase.720" = type { %"class.blink::History"* }
%"class.blink::History" = type opaque
%"class.blink::Member.721" = type { %"class.blink::MemberBase.722" }
%"class.blink::MemberBase.722" = type { %"class.blink::BarProp"* }
%"class.blink::BarProp" = type opaque
%"class.blink::Member.723" = type { %"class.blink::MemberBase.724" }
%"class.blink::MemberBase.724" = type { %"class.blink::Navigator"* }
%"class.blink::Navigator" = type opaque
%"class.blink::Member.725" = type { %"class.blink::MemberBase.726" }
%"class.blink::MemberBase.726" = type { %"class.blink::StyleMedia"* }
%"class.blink::StyleMedia" = type opaque
%"class.blink::Member.727" = type { %"class.blink::MemberBase.728" }
%"class.blink::MemberBase.728" = type { %"class.blink::CustomElementRegistry"* }
%"class.blink::CustomElementRegistry" = type opaque
%"class.blink::Member.729" = type { %"class.blink::MemberBase.730" }
%"class.blink::MemberBase.730" = type { %"class.blink::Modulator"* }
%"class.blink::Modulator" = type opaque
%"class.blink::Member.731" = type { %"class.blink::MemberBase.732" }
%"class.blink::MemberBase.732" = type { %"class.blink::External"* }
%"class.blink::External" = type opaque
%"class.blink::Member.733" = type { %"class.blink::MemberBase.734" }
%"class.blink::MemberBase.734" = type { %"class.blink::ApplicationCache"* }
%"class.blink::ApplicationCache" = type opaque
%class.scoped_refptr.735 = type { %"class.blink::SerializedScriptValue"* }
%"class.blink::SerializedScriptValue" = type <{ %"class.WTF::ThreadSafeRefCounted", [4 x i8], %"class.std::__1::unique_ptr.737", i64, %"class.WTF::Vector.741", %"class.WTF::Vector.746", %"class.WTF::Vector.752", %"class.WTF::Vector.770", %class.scoped_refptr.32, %"class.WTF::HashMap.776", %"class.WTF::Vector.781", %"class.WTF::Vector.741", %"class.WTF::Vector.787", %"class.WTF::HashMap.792", i8, [7 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.736" }
%"class.base::RefCountedThreadSafe.736" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.737" = type { %"class.std::__1::__compressed_pair.738" }
%"class.std::__1::__compressed_pair.738" = type { %"struct.std::__1::__compressed_pair_elem.739" }
%"struct.std::__1::__compressed_pair_elem.739" = type { i8* }
%"class.WTF::Vector.746" = type { %"class.WTF::VectorBuffer.747" }
%"class.WTF::VectorBuffer.747" = type { %"class.WTF::VectorBufferBase.748", [8 x i8] }
%"class.WTF::VectorBufferBase.748" = type { %class.scoped_refptr.749*, i32, i32 }
%class.scoped_refptr.749 = type { %"class.blink::StaticBitmapImage"* }
%"class.blink::StaticBitmapImage" = type opaque
%"class.WTF::Vector.752" = type { %"class.WTF::VectorBuffer.753" }
%"class.WTF::VectorBuffer.753" = type { %"class.WTF::VectorBufferBase.754" }
%"class.WTF::VectorBufferBase.754" = type { %"class.blink::SerializedScriptValue::Stream"*, i32, i32 }
%"class.blink::SerializedScriptValue::Stream" = type { %"class.blink::MessagePortChannel", %"class.std::__1::unique_ptr.756", %"class.std::__1::unique_ptr.762" }
%"class.blink::MessagePortChannel" = type { %class.scoped_refptr.755 }
%class.scoped_refptr.755 = type { %"class.blink::MessagePortChannel::State"* }
%"class.blink::MessagePortChannel::State" = type opaque
%"class.std::__1::unique_ptr.756" = type { %"class.std::__1::__compressed_pair.757" }
%"class.std::__1::__compressed_pair.757" = type { %"struct.std::__1::__compressed_pair_elem.758" }
%"struct.std::__1::__compressed_pair_elem.758" = type { %"class.blink::ReadableStreamTransferringOptimizer"* }
%"class.blink::ReadableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.std::__1::unique_ptr.762" = type { %"class.std::__1::__compressed_pair.763" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"struct.std::__1::__compressed_pair_elem.764" = type { %"class.blink::WritableStreamTransferringOptimizer"* }
%"class.blink::WritableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.WTF::Vector.770" = type { %"class.WTF::VectorBuffer.771" }
%"class.WTF::VectorBuffer.771" = type { %"class.WTF::VectorBufferBase.772" }
%"class.WTF::VectorBufferBase.772" = type { %"class.v8::CompiledWasmModule"*, i32, i32 }
%"class.v8::CompiledWasmModule" = type { %"class.std::__1::shared_ptr.773", %"class.std::__1::basic_string" }
%"class.std::__1::shared_ptr.773" = type { %"class.v8::internal::wasm::NativeModule"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::wasm::NativeModule" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.WTF::HashMap.776" = type { %"class.WTF::HashTable.777" }
%"class.WTF::HashTable.777" = type <{ %"struct.WTF::KeyValuePair.780"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.780" = type opaque
%"class.WTF::Vector.781" = type { %"class.WTF::VectorBuffer.782" }
%"class.WTF::VectorBuffer.782" = type { %"class.WTF::VectorBufferBase.783" }
%"class.WTF::VectorBufferBase.783" = type { %"class.mojo::ScopedHandleBase.784"*, i32, i32 }
%"class.mojo::ScopedHandleBase.784" = type { %"class.mojo::Handle" }
%"class.WTF::Vector.741" = type { %"class.WTF::VectorBuffer.742" }
%"class.WTF::VectorBuffer.742" = type { %"class.WTF::VectorBufferBase.743", [16 x i8] }
%"class.WTF::VectorBufferBase.743" = type { %"class.blink::ArrayBufferContents"*, i32, i32 }
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.WTF::Vector.787" = type { %"class.WTF::VectorBuffer.788" }
%"class.WTF::VectorBuffer.788" = type { %"class.WTF::VectorBufferBase.789" }
%"class.WTF::VectorBufferBase.789" = type { %"class.mojo::PendingRemote"*, i32, i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.WTF::HashMap.792" = type { %"class.WTF::HashTable.793" }
%"class.WTF::HashTable.793" = type <{ %"struct.WTF::KeyValuePair.796"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.796" = type { i8**, %"class.std::__1::unique_ptr.1642" }
%"class.std::__1::unique_ptr.1642" = type { %"class.std::__1::__compressed_pair.1643" }
%"class.std::__1::__compressed_pair.1643" = type { %"struct.std::__1::__compressed_pair_elem.1644" }
%"struct.std::__1::__compressed_pair_elem.1644" = type { %"class.blink::SerializedScriptValue::Attachment"* }
%"class.blink::SerializedScriptValue::Attachment" = type { i32 (...)** }
%"class.blink::HeapHashSet.797" = type { %"class.WTF::HashSet.800" }
%"class.WTF::HashSet.800" = type { %"class.WTF::HashTable.801" }
%"class.WTF::HashTable.801" = type <{ %"class.blink::WeakMember.803"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.803" = type opaque
%"class.blink::Member.804" = type { %"class.blink::MemberBase.805" }
%"class.blink::MemberBase.805" = type { %"class.blink::Event"* }
%"class.blink::Event" = type { %"class.blink::ScriptWrappable", %"class.WTF::AtomicString", i16, i32, i8, %"class.blink::probe::AsyncTaskId", %"class.blink::Member.811", %"class.blink::Member.811", %"class.blink::Member.813", %"class.blink::Member.815", %"class.base::TimeTicks" }
%"class.blink::probe::AsyncTaskId" = type { i8, %"class.absl::optional.806" }
%"class.absl::optional.806" = type { %"class.absl::optional_internal::optional_data.807" }
%"class.absl::optional_internal::optional_data.807" = type { %"class.absl::optional_internal::optional_data_base.808" }
%"class.absl::optional_internal::optional_data_base.808" = type { %"class.absl::optional_internal::optional_data_dtor_base.809" }
%"class.absl::optional_internal::optional_data_dtor_base.809" = type { i8, %union.anon.810 }
%union.anon.810 = type { i64 }
%"class.blink::Member.811" = type { %"class.blink::MemberBase.812" }
%"class.blink::MemberBase.812" = type { %"class.blink::EventTarget"* }
%"class.blink::Member.813" = type { %"class.blink::MemberBase.814" }
%"class.blink::MemberBase.814" = type { %"class.blink::Event"* }
%"class.blink::Member.815" = type { %"class.blink::MemberBase.816" }
%"class.blink::MemberBase.816" = type { %"class.blink::EventPath"* }
%"class.blink::EventPath" = type opaque
%"class.blink::HeapHashMap.817" = type { %"class.WTF::HashMap.820" }
%"class.WTF::HashMap.820" = type { %"class.WTF::HashTable.821" }
%"class.WTF::HashTable.821" = type <{ %"struct.WTF::KeyValuePair.823"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.823" = type opaque
%"class.std::__1::unique_ptr.824" = type { %"class.std::__1::__compressed_pair.825" }
%"class.std::__1::__compressed_pair.825" = type { %"struct.std::__1::__compressed_pair_elem.826" }
%"struct.std::__1::__compressed_pair_elem.826" = type { %"class.blink::FrameOrWorkerScheduler"* }
%"class.blink::Member.836" = type { %"class.blink::MemberBase.837" }
%"class.blink::MemberBase.837" = type { %"class.blink::InputMethodController"* }
%"class.blink::InputMethodController" = type { %"class.blink::ExecutionContextLifecycleObserver.base", %"class.blink::Member.842", %"class.blink::CachedTextInputInfo", %"class.blink::Member.853", %"class.blink::Member.855", i8, i32 }
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::CachedTextInputInfo" = type { %"class.blink::Member.844", %"class.blink::LayoutObject"*, %"class.blink::HeapHashMap.846", %"class.WTF::String", %"class.blink::CachedTextInputInfo::CachedPlainTextRange", %"class.blink::CachedTextInputInfo::CachedPlainTextRange" }
%"class.blink::Member.844" = type { %"class.blink::MemberBase.845" }
%"class.blink::MemberBase.845" = type { %"class.blink::ContainerNode"* }
%"class.blink::HeapHashMap.846" = type { %"class.WTF::HashMap.849" }
%"class.WTF::HashMap.849" = type { %"class.WTF::HashTable.850" }
%"class.WTF::HashTable.850" = type <{ %"struct.WTF::KeyValuePair.852"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.852" = type opaque
%"class.blink::CachedTextInputInfo::CachedPlainTextRange" = type { %"class.blink::PositionTemplate", %"class.blink::PositionTemplate", i32, i32 }
%"class.blink::PositionTemplate" = type { %"class.blink::Member.449", i32, i32 }
%"class.blink::Member.855" = type { %"class.blink::MemberBase.856" }
%"class.blink::MemberBase.856" = type { %"class.blink::EditContext"* }
%"class.blink::EditContext" = type opaque
%"class.blink::Member.857" = type { %"class.blink::MemberBase.858" }
%"class.blink::MemberBase.858" = type { %"class.blink::SpellChecker"* }
%"class.blink::SpellChecker" = type { %"class.blink::Member.569", %"class.blink::Member.1129", %"class.blink::Member.1131" }
%"class.blink::Member.1129" = type { %"class.blink::MemberBase.1130" }
%"class.blink::MemberBase.1130" = type { %"class.blink::SpellCheckRequester"* }
%"class.blink::SpellCheckRequester" = type opaque
%"class.blink::Member.1131" = type { %"class.blink::MemberBase.1132" }
%"class.blink::MemberBase.1132" = type { %"class.blink::IdleSpellCheckController"* }
%"class.blink::IdleSpellCheckController" = type opaque
%"class.blink::Member.859" = type { %"class.blink::MemberBase.860" }
%"class.blink::MemberBase.860" = type { %"class.blink::TextSuggestionController"* }
%"class.blink::TextSuggestionController" = type { i32 (...)**, i8, %"class.blink::Member.569", %"class.blink::HeapMojoRemote" }
%"class.blink::HeapMojoRemote" = type { %"class.blink::Member.1125" }
%"class.blink::Member.1125" = type { %"class.blink::MemberBase.1126" }
%"class.blink::MemberBase.1126" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::TextSuggestionHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::TextSuggestionHost, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::Member.861" = type { %"class.blink::MemberBase.862" }
%"class.blink::MemberBase.862" = type { %"class.blink::HeapHashMap.863"* }
%"class.blink::HeapHashMap.863" = type opaque
%"class.util::TokenType.603" = type { %"class.base::StrongAlias.604" }
%"class.base::StrongAlias.604" = type { %"class.base::UnguessableToken" }
%"class.WTF::HashSet.869" = type { %"class.WTF::HashTable.870" }
%"class.WTF::HashTable.870" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.WTF::Deque.873" = type { %"class.WTF::Deque<long, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<long, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.876" }
%"class.WTF::VectorBuffer.876" = type { %"class.WTF::VectorBufferBase.877" }
%"class.WTF::VectorBufferBase.877" = type { i64*, i32, i32 }
%"class.blink::Member.878" = type { %"class.blink::MemberBase.879" }
%"class.blink::MemberBase.879" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.880" = type { %"class.blink::MemberBase.881" }
%"class.blink::MemberBase.881" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.882" = type { %"class.blink::MemberBase.883" }
%"class.blink::MemberBase.883" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.884" = type { %"class.blink::MemberBase.885" }
%"class.blink::MemberBase.885" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.892" = type { %"class.std::__1::__compressed_pair.893" }
%"class.std::__1::__compressed_pair.893" = type { %"struct.std::__1::__compressed_pair_elem.894" }
%"struct.std::__1::__compressed_pair_elem.894" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.886" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.886" = type { %"class.std::__1::__compressed_pair.887" }
%"class.std::__1::__compressed_pair.887" = type { %"struct.std::__1::__compressed_pair_elem.888" }
%"struct.std::__1::__compressed_pair_elem.888" = type { %"class.blink::KURL"* }
%"class.blink::Member.898" = type { %"class.blink::MemberBase.899" }
%"class.blink::MemberBase.899" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.900" = type { %"class.blink::MemberBase.901" }
%"class.blink::MemberBase.901" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.445" }
%"class.blink::Member.519" = type { %"class.blink::MemberBase.520" }
%"class.blink::MemberBase.520" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.521", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.523, %"class.WTF::Vector.524", %"class.WTF::Vector.524", %"class.blink::Member.449", %"class.blink::Member.529", %"class.blink::HeapHashSet.533", %"class.blink::Member.445", %"class.WTF::HashSet.540", %"class.WTF::TextPosition", %"class.blink::Member.544", %"class.blink::HeapVector.546", %"class.blink::Member.553" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.521" = type { %"class.blink::MemberBase.522" }
%"class.blink::MemberBase.522" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.523 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type opaque
%"class.WTF::Vector.524" = type { %"class.WTF::VectorBuffer.525" }
%"class.WTF::VectorBuffer.525" = type { %"class.WTF::VectorBufferBase.526" }
%"class.WTF::VectorBufferBase.526" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type opaque
%"class.blink::Member.529" = type { %"class.blink::MemberBase.530" }
%"class.blink::MemberBase.530" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.531" }
%"class.blink::Member.531" = type { %"class.blink::MemberBase.532" }
%"class.blink::MemberBase.532" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.533" = type { %"class.WTF::HashSet.536" }
%"class.WTF::HashSet.536" = type { %"class.WTF::HashTable.537" }
%"class.WTF::HashTable.537" = type <{ %"class.blink::WeakMember.539"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.539" = type { %"class.blink::MemberBase.452" }
%"class.WTF::HashSet.540" = type { %"class.WTF::HashTable.541" }
%"class.WTF::HashTable.541" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.544" = type { %"class.blink::MemberBase.545" }
%"class.blink::MemberBase.545" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type opaque
%"class.blink::HeapVector.546" = type { %"class.WTF::Vector.549" }
%"class.WTF::Vector.549" = type { %"class.WTF::VectorBuffer.550" }
%"class.WTF::VectorBuffer.550" = type { %"class.WTF::VectorBufferBase.551" }
%"class.WTF::VectorBufferBase.551" = type { %"class.blink::Member.529"*, i32, i32 }
%"class.blink::Member.553" = type { %"class.blink::MemberBase.554" }
%"class.blink::MemberBase.554" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.902 }
%class.scoped_refptr.902 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.903" = type { %"class.WTF::VectorBuffer.904" }
%"class.WTF::VectorBuffer.904" = type { %"class.WTF::VectorBufferBase.905" }
%"class.WTF::VectorBufferBase.905" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.906 }
%class.scoped_refptr.906 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.853" = type { %"class.blink::MemberBase.854" }
%"class.blink::MemberBase.854" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.445", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.449", %"class.blink::Member.449", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.912" }
%"class.blink::HeapHashMap.912" = type { %"class.WTF::HashMap.915" }
%"class.WTF::HashMap.915" = type { %"class.WTF::HashTable.916" }
%"class.WTF::HashTable.916" = type <{ %"struct.WTF::KeyValuePair.918"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.918" = type opaque
%"class.blink::Member.919" = type { %"class.blink::MemberBase.920" }
%"class.blink::MemberBase.920" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.921" = type { %"class.WTF::HashSet.924" }
%"class.WTF::HashSet.924" = type { %"class.WTF::HashTable.925" }
%"class.WTF::HashTable.925" = type <{ %"class.blink::WeakMember.927"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.927" = type opaque
%"class.blink::HeapHashSet.928" = type { %"class.WTF::HashSet.931" }
%"class.WTF::HashSet.931" = type { %"class.WTF::HashTable.932" }
%"class.WTF::HashTable.932" = type <{ %"class.blink::WeakMember.934"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.934" = type opaque
%"class.blink::Member.935" = type { %"class.blink::MemberBase.936" }
%"class.blink::MemberBase.936" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.937" = type { %"class.blink::MemberBase.938" }
%"class.blink::MemberBase.938" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.939" = type { %"class.blink::MemberBase.940" }
%"class.blink::MemberBase.940" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.451", %"class.blink::HeapVector.513" }
%"class.blink::Member.941" = type { %"class.blink::MemberBase.942" }
%"class.blink::MemberBase.942" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.943" = type { %"class.blink::MemberBase.944" }
%"class.blink::MemberBase.944" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.945" = type { %"class.WTF::HashMap.948" }
%"class.WTF::HashMap.948" = type { %"class.WTF::HashTable.949" }
%"class.WTF::HashTable.949" = type <{ %"struct.WTF::KeyValuePair.951"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.951" = type opaque
%"class.WTF::Vector.952" = type { %"class.WTF::VectorBuffer.953" }
%"class.WTF::VectorBuffer.953" = type { %"class.WTF::VectorBufferBase.954" }
%"class.WTF::VectorBufferBase.954" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.957" = type { %"class.blink::MemberBase.958" }
%"class.blink::MemberBase.958" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.959" = type { %"class.blink::MemberBase.960" }
%"class.blink::MemberBase.960" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.474" = type { %"class.blink::MemberBase.475" }
%"class.blink::MemberBase.475" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.479" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.479" = type { %"class.blink::MemberBase.480" }
%"class.blink::MemberBase.480" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.483", %"class.blink::Member.485", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.483" = type { %"class.WTF::SingleThreadedBitField.484" }
%"class.WTF::SingleThreadedBitField.484" = type { i32 }
%"class.blink::Member.485" = type { %"class.blink::MemberBase.486" }
%"class.blink::MemberBase.486" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.487 }
%class.scoped_refptr.487 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.488", %"class.WTF::AtomicString", %"class.WTF::Vector.490" }
%"class.WTF::RefCounted.488" = type { %"class.base::RefCounted.489" }
%"class.base::RefCounted.489" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.490" = type { %"class.WTF::VectorBuffer.491" }
%"class.WTF::VectorBuffer.491" = type { %"class.WTF::VectorBufferBase.492", [32 x i8] }
%"class.WTF::VectorBufferBase.492" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.961" = type { %"class.blink::MemberBase.962" }
%"class.blink::MemberBase.962" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.963" = type { %"class.WTF::Vector.966" }
%"class.WTF::Vector.966" = type { %"class.WTF::VectorBuffer.967" }
%"class.WTF::VectorBuffer.967" = type { %"class.WTF::VectorBufferBase.968" }
%"class.WTF::VectorBufferBase.968" = type { %"class.blink::Member.969"*, i32, i32 }
%"class.blink::Member.969" = type opaque
%"class.std::__1::unique_ptr.971" = type { %"class.std::__1::__compressed_pair.972" }
%"class.std::__1::__compressed_pair.972" = type { %"struct.std::__1::__compressed_pair_elem.973" }
%"struct.std::__1::__compressed_pair_elem.973" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.977" = type { %"class.WTF::HashSet.980" }
%"class.WTF::HashSet.980" = type { %"class.WTF::HashTable.981" }
%"class.WTF::HashTable.981" = type <{ %"class.blink::WeakMember.983"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.983" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.984", i32, [4 x i8] }>
%"class.WTF::Vector.984" = type { %"class.WTF::VectorBuffer.985" }
%"class.WTF::VectorBuffer.985" = type { %"class.WTF::VectorBufferBase.986" }
%"class.WTF::VectorBufferBase.986" = type { %"struct.std::__1::pair.987"*, i32, i32 }
%"struct.std::__1::pair.987" = type opaque
%"class.blink::Member.990" = type { %"class.blink::MemberBase.991" }
%"class.blink::MemberBase.991" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.992" = type { %"class.WTF::VectorBuffer.993" }
%"class.WTF::VectorBuffer.993" = type { %"class.WTF::VectorBufferBase.994" }
%"class.WTF::VectorBufferBase.994" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.997" = type { %"class.std::__1::__compressed_pair.998" }
%"class.std::__1::__compressed_pair.998" = type { %"struct.std::__1::__compressed_pair_elem.999" }
%"struct.std::__1::__compressed_pair_elem.999" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.495" = type { %"class.WTF::Vector.498" }
%"class.WTF::Vector.498" = type { %"class.WTF::VectorBuffer.499" }
%"class.WTF::VectorBuffer.499" = type { %"class.WTF::VectorBufferBase.500" }
%"class.WTF::VectorBufferBase.500" = type { %"class.blink::Member.474"*, i32, i32 }
%"class.blink::HeapVector.1003" = type { %"class.WTF::Vector.1006" }
%"class.WTF::Vector.1006" = type { %"class.WTF::VectorBuffer.1007" }
%"class.WTF::VectorBuffer.1007" = type { %"class.WTF::VectorBufferBase.1008" }
%"class.WTF::VectorBufferBase.1008" = type { %"class.blink::Member.1009"*, i32, i32 }
%"class.blink::Member.1009" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.445" }
%"class.blink::Member.1011" = type { %"class.blink::MemberBase.1012" }
%"class.blink::MemberBase.1012" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1013" = type { %"class.blink::MemberBase.1014" }
%"class.blink::MemberBase.1014" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1015" = type { %"class.blink::MemberBase.1016" }
%"class.blink::MemberBase.1016" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1017" = type { %"class.blink::MemberBase.1018" }
%"class.blink::MemberBase.1018" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1019" = type { %"class.blink::MemberBase.1020" }
%"class.blink::MemberBase.1020" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1021" = type { %"class.WTF::HashTable.1022" }
%"class.WTF::HashTable.1022" = type <{ %"struct.WTF::KeyValuePair.1025"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1025" = type opaque
%"class.blink::Member.1026" = type { %"class.blink::MemberBase.1027" }
%"class.blink::MemberBase.1027" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1028" = type { %"class.blink::MemberBase.1029" }
%"class.blink::MemberBase.1029" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1030" = type { %"class.blink::MemberBase.1031" }
%"class.blink::MemberBase.1031" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1032" = type { %"class.blink::MemberBase.1033" }
%"class.blink::MemberBase.1033" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.911", { i64, i64 } }
%"class.blink::WeakMember.911" = type { %"class.blink::MemberBase.446" }
%"class.blink::HeapHashSet.1034" = type { %"class.WTF::HashSet.1037" }
%"class.WTF::HashSet.1037" = type { %"class.WTF::HashTable.1038" }
%"class.WTF::HashTable.1038" = type <{ %"class.blink::Member.1040"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1040" = type opaque
%"class.blink::Member.1041" = type { %"class.blink::MemberBase.1042" }
%"class.blink::MemberBase.1042" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1043" = type { %"class.blink::MemberBase.1044" }
%"class.blink::MemberBase.1044" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1045" = type { %"class.blink::MemberBase.1046" }
%"class.blink::MemberBase.1046" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1047" = type { %"class.blink::MemberBase.1048" }
%"class.blink::MemberBase.1048" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1049" = type { %"class.blink::MemberBase.1050" }
%"class.blink::MemberBase.1050" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1051" = type { %"class.std::__1::__compressed_pair.1052" }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1057" = type { %"class.std::__1::__compressed_pair.1058" }
%"class.std::__1::__compressed_pair.1058" = type { %"struct.std::__1::__compressed_pair_elem.1059" }
%"struct.std::__1::__compressed_pair_elem.1059" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.1063" = type { %"class.blink::MemberBase.1064" }
%"class.blink::MemberBase.1064" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1065" = type { %"class.blink::MemberBase.1066" }
%"class.blink::MemberBase.1066" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1067" = type { %"class.blink::MemberBase.1068" }
%"class.blink::MemberBase.1068" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1069" = type { %"class.blink::MemberBase.1070" }
%"class.blink::MemberBase.1070" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.864" = type { %"class.WTF::VectorBuffer.865" }
%"class.WTF::VectorBuffer.865" = type { %"class.WTF::VectorBufferBase.866" }
%"class.WTF::VectorBufferBase.866" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.1071" = type { %"class.WTF::HashMap.1074" }
%"class.WTF::HashMap.1074" = type { %"class.WTF::HashTable.1075" }
%"class.WTF::HashTable.1075" = type <{ %"struct.WTF::KeyValuePair.1077"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1077" = type opaque
%"class.blink::Member.1078" = type { %"class.blink::MemberBase.1079" }
%"class.blink::MemberBase.1079" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1080" = type { %"class.std::__1::__compressed_pair.1081" }
%"class.std::__1::__compressed_pair.1081" = type { %"struct.std::__1::__compressed_pair_elem.1082" }
%"struct.std::__1::__compressed_pair_elem.1082" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1086" = type { %"class.blink::MemberBase.1087" }
%"class.blink::MemberBase.1087" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1088" = type { %"class.blink::MemberBase.1089" }
%"class.blink::MemberBase.1089" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1090" = type { %"class.WTF::HashMap.1093" }
%"class.WTF::HashMap.1093" = type { %"class.WTF::HashTable.1094" }
%"class.WTF::HashTable.1094" = type <{ %"struct.WTF::KeyValuePair.1096"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1096" = type opaque
%"class.blink::HeapObserverSet.1097" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1098" }
%"class.blink::HeapHashSet.1098" = type { %"class.WTF::HashSet.1101" }
%"class.WTF::HashSet.1101" = type { %"class.WTF::HashTable.1102" }
%"class.WTF::HashTable.1102" = type <{ %"class.blink::WeakMember.1104"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1104" = type opaque
%"class.blink::Member.1105" = type { %"class.blink::MemberBase.1106" }
%"class.blink::MemberBase.1106" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1107" = type { %"class.blink::MemberBase.1108" }
%"class.blink::MemberBase.1108" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.445", %"class.blink::HeapHashSet.1114", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1121", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1114" = type { %"class.WTF::HashSet.1117" }
%"class.WTF::HashSet.1117" = type { %"class.WTF::HashTable.1118" }
%"class.WTF::HashTable.1118" = type <{ %"class.blink::Member.1120"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1120" = type opaque
%"class.blink::HeapTaskRunnerTimer.1121" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1122", { i64, i64 } }
%"class.blink::WeakMember.1122" = type { %"class.blink::MemberBase.1108" }
%"class.blink::WeakMember.1109" = type { %"class.blink::MemberBase.450" }
%"class.blink::Member.1110" = type { %"class.blink::MemberBase.1111" }
%"class.blink::MemberBase.1111" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.447" = type { %"class.blink::MemberBase.448" }
%"class.blink::MemberBase.448" = type { %"class.blink::DocumentFragment"* }
%"class.blink::DocumentFragment" = type { %"class.blink::ContainerNode" }
%"class.blink::HeapHashSet.1579" = type { %"class.WTF::HashSet.1582" }
%"class.WTF::HashSet.1582" = type { %"class.WTF::HashTable.1583" }
%"class.WTF::HashTable.1583" = type <{ %"class.blink::Member.1585"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1585" = type { %"class.blink::MemberBase.1709" }
%"class.blink::MemberBase.1709" = type { %"class.blink::ShadowRoot"* }
%"class.blink::ShadowRoot" = type <{ %"class.blink::DocumentFragment", %"class.blink::TreeScope", %"class.blink::Member.939", %"class.blink::Member.1710", i32, [4 x i8] }>
%"class.blink::Member.1710" = type { %"class.blink::MemberBase.1711" }
%"class.blink::MemberBase.1711" = type { %"class.blink::SlotAssignment"* }
%"class.blink::SlotAssignment" = type opaque
%"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML" = type { %"class.blink::bindings::UnionBase", i32, %"class.blink::Member.445", %"class.blink::Member.447", %"class.WTF::String", %"class.blink::Member.1586" }
%"class.blink::Member.1586" = type { %"class.blink::MemberBase.1587" }
%"class.blink::MemberBase.1587" = type { %"class.blink::TrustedHTML"* }
%"class.blink::TrustedHTML" = type { %"class.blink::ScriptWrappable", %"class.WTF::String" }
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::DOMParser" = type { %"class.blink::ScriptWrappable", %"class.blink::WeakMember.1588" }
%"class.blink::WeakMember.1588" = type { %"class.blink::MemberBase.570" }
%"class.blink::ParseFromStringOptions" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, [6 x i8] }>
%"class.blink::HTMLTemplateElement" = type <{ %"class.blink::HTMLElement", %"class.blink::Member.1589", i32, [4 x i8] }>
%"class.blink::Member.1589" = type { %"class.blink::MemberBase.1590" }
%"class.blink::MemberBase.1590" = type { %"class.blink::TemplateContentDocumentFragment"* }
%"class.blink::TemplateContentDocumentFragment" = type opaque
%"class.WTF::Vector.1591" = type { %"class.WTF::VectorBuffer.1592" }
%"class.WTF::VectorBuffer.1592" = type { %"class.WTF::VectorBufferBase.492" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::HTMLAnchorElement" = type { %"class.blink::HTMLElement", %"class.blink::DOMURLUtils.base", i32, i64, %"class.blink::Member.1595" }
%"class.blink::DOMURLUtils.base" = type <{ %"class.blink::DOMURLUtilsReadOnly", i8 }>
%"class.blink::DOMURLUtilsReadOnly" = type { i32 (...)** }
%"class.blink::Member.1595" = type { %"class.blink::MemberBase.1596" }
%"class.blink::MemberBase.1596" = type { %"class.blink::RelList"* }
%"class.blink::RelList" = type { %"class.blink::DOMTokenList.base", [7 x i8] }
%"class.blink::DOMTokenList.base" = type <{ %"class.blink::ScriptWrappable", %"class.blink::SpaceSplitString", %"class.blink::Member.474", %"class.blink::QualifiedName", i8 }>
%"class.blink::HTMLFormElement" = type { %"class.blink::HTMLElement", %"class.blink::FormSubmission::Attributes", %"class.blink::Member.1611", %"class.blink::RadioButtonGroupScope", %"class.blink::HeapVector.1614", %"class.blink::HeapVector.1622", i32, i8, i8, i8, i8 }
%"class.blink::FormSubmission::Attributes" = type { i32, i8, %"class.WTF::String", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::String" }
%"class.blink::Member.1611" = type { %"class.blink::MemberBase.1612" }
%"class.blink::MemberBase.1612" = type { %"class.blink::HeapHashMap.1613"* }
%"class.blink::HeapHashMap.1613" = type opaque
%"class.blink::HeapVector.1614" = type { %"class.WTF::Vector.1617" }
%"class.WTF::Vector.1617" = type { %"class.WTF::VectorBuffer.1618" }
%"class.WTF::VectorBuffer.1618" = type { %"class.WTF::VectorBufferBase.1619" }
%"class.WTF::VectorBufferBase.1619" = type { %"class.blink::Member.1620"*, i32, i32 }
%"class.blink::Member.1620" = type opaque
%"class.blink::HeapVector.1622" = type { %"class.WTF::Vector.1625" }
%"class.WTF::Vector.1625" = type { %"class.WTF::VectorBuffer.1626" }
%"class.WTF::VectorBuffer.1626" = type { %"class.WTF::VectorBufferBase.1627" }
%"class.WTF::VectorBufferBase.1627" = type { %"class.blink::Member.1628"*, i32, i32 }
%"class.blink::Member.1628" = type opaque
%"class.blink::HTMLFormControlElement" = type <{ %"class.blink::HTMLElement", %"class.blink::ListedElement.base", [4 x i8], %"class.blink::FormAssociated", i32, [4 x i8], %"class.blink::WebString", i32, i8, [3 x i8] }>
%"class.blink::ListedElement.base" = type <{ %"class.blink::GarbageCollectedMixin", i8, [7 x i8], %"class.blink::Member.1630", %"class.blink::Member.1632", %"class.blink::Member.1634", %"class.WTF::String", i8, [3 x i8], i32, i32 }>
%"class.blink::Member.1630" = type { %"class.blink::MemberBase.1631" }
%"class.blink::MemberBase.1631" = type { %"class.blink::FormAttributeTargetObserver"* }
%"class.blink::FormAttributeTargetObserver" = type opaque
%"class.blink::Member.1632" = type { %"class.blink::MemberBase.1633" }
%"class.blink::MemberBase.1633" = type { %"class.blink::HTMLFormElement"* }
%"class.blink::Member.1634" = type { %"class.blink::MemberBase.1635" }
%"class.blink::MemberBase.1635" = type { %"class.blink::ValidityState"* }
%"class.blink::ValidityState" = type opaque
%"class.blink::FormAssociated" = type { i32 (...)** }
%"class.v8::Value" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA21_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA6_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA20_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA16_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA19_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA18_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA23_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA27_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA25_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA24_KcRKS4_EEOT_OT0_ = comdat any

$_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA22_KcRKS4_EEOT_OT0_ = comdat any

$_ZN5blink19SanitizerConfigImplaSEOS0_ = comdat any

$_ZN5blink19SanitizerConfigImplD2Ev = comdat any

$_ZN3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_ED2Ev = comdat any

$_ZN5blink13CustomElement11IsValidNameERKN3WTF12AtomicStringEb = comdat any

$_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_ = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink9Sanitizer18GetWrapperTypeInfoEv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE16LookupForWritingERKS1_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E16LookupForWritingERKS1_ = comdat any

$_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RKS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_8bindings9UnionBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_8bindings9UnionBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_8bindings9UnionBaseEE7GetNameEPKv = comdat any

$_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6LookupERKS1_ = comdat any

$_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8ContainsINS_22IdentityHashTranslatorIS8_SD_S4_EES1_EEbRKT0_ = comdat any

$_ZN5blink10TraceTraitINS_15SanitizerConfigEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink9SanitizerE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::Sanitizer"*)* @_ZN5blink9SanitizerD2Ev to i8*), i8* bitcast (void (%"class.blink::Sanitizer"*)* @_ZN5blink9SanitizerD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::Sanitizer"*, %"class.blink::Visitor"*)* @_ZNK5blink9Sanitizer5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::Sanitizer"*)* @_ZNK5blink9Sanitizer18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"APPLET\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"BASE\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"EMBED\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"IFRAME\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"NOEMBED\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"NOFRAMES\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"NOLAYER\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"NOSCRIPT\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"OBJECT\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"FRAME\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"FRAMESET\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"PARAM\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"SCRIPT\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"onabort\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"onafterprint\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"onanimationstart\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"onanimationiteration\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"onanimationend\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"onauxclick\00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c"onbeforecopy\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"onbeforecut\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"onbeforepaste\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"onbeforeprint\00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"onbeforeunload\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"onblur\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c"oncancel\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"oncanplay\00", align 1
@.str.28 = private unnamed_addr constant [17 x i8] c"oncanplaythrough\00", align 1
@.str.29 = private unnamed_addr constant [9 x i8] c"onchange\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"onclick\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"onclose\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"oncontextmenu\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"oncopy\00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"oncuechange\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"oncut\00", align 1
@.str.36 = private unnamed_addr constant [11 x i8] c"ondblclick\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"ondrag\00", align 1
@.str.38 = private unnamed_addr constant [10 x i8] c"ondragend\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"ondragenter\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"ondragleave\00", align 1
@.str.41 = private unnamed_addr constant [11 x i8] c"ondragover\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"ondragstart\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"ondrop\00", align 1
@.str.44 = private unnamed_addr constant [17 x i8] c"ondurationchange\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"onemptied\00", align 1
@.str.46 = private unnamed_addr constant [8 x i8] c"onended\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"onerror\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"onfocus\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"onfocusin\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"onfocusout\00", align 1
@.str.51 = private unnamed_addr constant [11 x i8] c"onformdata\00", align 1
@.str.52 = private unnamed_addr constant [20 x i8] c"ongotpointercapture\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"onhashchange\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c"oninput\00", align 1
@.str.55 = private unnamed_addr constant [10 x i8] c"oninvalid\00", align 1
@.str.56 = private unnamed_addr constant [10 x i8] c"onkeydown\00", align 1
@.str.57 = private unnamed_addr constant [11 x i8] c"onkeypress\00", align 1
@.str.58 = private unnamed_addr constant [8 x i8] c"onkeyup\00", align 1
@.str.59 = private unnamed_addr constant [17 x i8] c"onlanguagechange\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"onload\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"onloadeddata\00", align 1
@.str.62 = private unnamed_addr constant [17 x i8] c"onloadedmetadata\00", align 1
@.str.63 = private unnamed_addr constant [12 x i8] c"onloadstart\00", align 1
@.str.64 = private unnamed_addr constant [21 x i8] c"onlostpointercapture\00", align 1
@.str.65 = private unnamed_addr constant [10 x i8] c"onmessage\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"onmessageerror\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c"onmousedown\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"onmouseenter\00", align 1
@.str.69 = private unnamed_addr constant [13 x i8] c"onmouseleave\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"onmousemove\00", align 1
@.str.71 = private unnamed_addr constant [11 x i8] c"onmouseout\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"onmouseover\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"onmouseup\00", align 1
@.str.74 = private unnamed_addr constant [13 x i8] c"onmousewheel\00", align 1
@.str.75 = private unnamed_addr constant [9 x i8] c"ononline\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"onoffline\00", align 1
@.str.77 = private unnamed_addr constant [20 x i8] c"onorientationchange\00", align 1
@.str.78 = private unnamed_addr constant [13 x i8] c"onoverscroll\00", align 1
@.str.79 = private unnamed_addr constant [11 x i8] c"onpagehide\00", align 1
@.str.80 = private unnamed_addr constant [11 x i8] c"onpageshow\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"onpaste\00", align 1
@.str.82 = private unnamed_addr constant [8 x i8] c"onpause\00", align 1
@.str.83 = private unnamed_addr constant [7 x i8] c"onplay\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"onplaying\00", align 1
@.str.85 = private unnamed_addr constant [16 x i8] c"onpointercancel\00", align 1
@.str.86 = private unnamed_addr constant [14 x i8] c"onpointerdown\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"onpointerenter\00", align 1
@.str.88 = private unnamed_addr constant [15 x i8] c"onpointerleave\00", align 1
@.str.89 = private unnamed_addr constant [14 x i8] c"onpointermove\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c"onpointerout\00", align 1
@.str.91 = private unnamed_addr constant [14 x i8] c"onpointerover\00", align 1
@.str.92 = private unnamed_addr constant [19 x i8] c"onpointerrawupdate\00", align 1
@.str.93 = private unnamed_addr constant [12 x i8] c"onpointerup\00", align 1
@.str.94 = private unnamed_addr constant [11 x i8] c"onpopstate\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"onportalactivate\00", align 1
@.str.96 = private unnamed_addr constant [11 x i8] c"onprogress\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"onratechange\00", align 1
@.str.98 = private unnamed_addr constant [8 x i8] c"onreset\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"onresize\00", align 1
@.str.100 = private unnamed_addr constant [9 x i8] c"onscroll\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"onscrollend\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"onsearch\00", align 1
@.str.103 = private unnamed_addr constant [9 x i8] c"onseeked\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c"onseeking\00", align 1
@.str.105 = private unnamed_addr constant [9 x i8] c"onselect\00", align 1
@.str.106 = private unnamed_addr constant [14 x i8] c"onselectstart\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"onselectionchange\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"onshow\00", align 1
@.str.109 = private unnamed_addr constant [10 x i8] c"onstalled\00", align 1
@.str.110 = private unnamed_addr constant [10 x i8] c"onstorage\00", align 1
@.str.111 = private unnamed_addr constant [10 x i8] c"onsuspend\00", align 1
@.str.112 = private unnamed_addr constant [9 x i8] c"onsubmit\00", align 1
@.str.113 = private unnamed_addr constant [13 x i8] c"ontimeupdate\00", align 1
@.str.114 = private unnamed_addr constant [17 x i8] c"ontimezonechange\00", align 1
@.str.115 = private unnamed_addr constant [9 x i8] c"ontoggle\00", align 1
@.str.116 = private unnamed_addr constant [13 x i8] c"ontouchstart\00", align 1
@.str.117 = private unnamed_addr constant [12 x i8] c"ontouchmove\00", align 1
@.str.118 = private unnamed_addr constant [11 x i8] c"ontouchend\00", align 1
@.str.119 = private unnamed_addr constant [14 x i8] c"ontouchcancel\00", align 1
@.str.120 = private unnamed_addr constant [16 x i8] c"ontransitionend\00", align 1
@.str.121 = private unnamed_addr constant [9 x i8] c"onunload\00", align 1
@.str.122 = private unnamed_addr constant [15 x i8] c"onvolumechange\00", align 1
@.str.123 = private unnamed_addr constant [10 x i8] c"onwaiting\00", align 1
@.str.124 = private unnamed_addr constant [23 x i8] c"onwebkitanimationstart\00", align 1
@.str.125 = private unnamed_addr constant [27 x i8] c"onwebkitanimationiteration\00", align 1
@.str.126 = private unnamed_addr constant [21 x i8] c"onwebkitanimationend\00", align 1
@.str.127 = private unnamed_addr constant [25 x i8] c"onwebkitfullscreenchange\00", align 1
@.str.128 = private unnamed_addr constant [24 x i8] c"onwebkitfullscreenerror\00", align 1
@.str.129 = private unnamed_addr constant [22 x i8] c"onwebkittransitionend\00", align 1
@.str.130 = private unnamed_addr constant [8 x i8] c"onwheel\00", align 1
@.str.131 = private unnamed_addr constant [32 x i8] c"Cannot find current DOM window.\00", align 1
@.str.132 = private unnamed_addr constant [42 x i8] c"<!DOCTYPE html><html><body></body></html>\00", align 1
@.str.133 = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@.str.134 = private unnamed_addr constant [5 x i8] c"href\00", align 1
@.str.135 = private unnamed_addr constant [11 x i8] c"javascript\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c"action\00", align 1
@.str.137 = private unnamed_addr constant [12 x i8] c"javascript:\00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"formaction\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17IDLDictionaryBaseEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::IDLDictionaryBase]\00", align 1
@.str.139 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.140 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.141 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv = private unnamed_addr constant [70 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ScriptWrappable]\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink9Sanitizer18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@.str.142 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.143 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@.str.144 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.145 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@.str.146 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [133 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::String, WTF::Vector<WTF::String, 0, WTF::PartitionAllocator> >]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8bindings9UnionBaseEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::bindings::UnionBase]\00", align 1
@_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_8bindings9UnionBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_8bindings9UnionBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_8bindings9UnionBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZTVN5blink41V8UnionDocumentOrDocumentFragmentOrStringE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZN5blink10html_names12kTemplateTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names5kATagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kAreaTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kFormTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kInputTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kButtonTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8

@_ZN5blink9SanitizerC1EPNS_16ExecutionContextEPKNS_15SanitizerConfigE = hidden unnamed_addr alias void (%"class.blink::Sanitizer"*, %"class.blink::ExecutionContext"*, %"class.blink::SanitizerConfig"*), void (%"class.blink::Sanitizer"*, %"class.blink::ExecutionContext"*, %"class.blink::SanitizerConfig"*)* @_ZN5blink9SanitizerC2EPNS_16ExecutionContextEPKNS_15SanitizerConfigE
@_ZN5blink9SanitizerD1Ev = hidden unnamed_addr alias void (%"class.blink::Sanitizer"*), void (%"class.blink::Sanitizer"*)* @_ZN5blink9SanitizerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9SanitizerC2EPNS_16ExecutionContextEPKNS_15SanitizerConfigE(%"class.blink::Sanitizer"*, %"class.blink::ExecutionContext"*, %"class.blink::SanitizerConfig"*) unnamed_addr #0 align 2 {
  %4 = alloca [1 x %"class.WTF::String"], align 8
  %5 = alloca [13 x %"class.WTF::String"], align 8
  %6 = alloca [117 x %"struct.WTF::KeyValuePair"], align 8
  %7 = alloca %"struct.blink::SanitizerConfigImpl", align 8
  %8 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink9SanitizerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %10 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1
  %11 = bitcast %"struct.blink::SanitizerConfigImpl"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 20, i1 false) #9
  %12 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 1
  %13 = bitcast %"class.WTF::HashSet"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 20, i1 false) #9
  %14 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 2
  %15 = bitcast %"class.WTF::HashSet"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 20, i1 false) #9
  %16 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 3
  %17 = bitcast %"class.WTF::HashMap"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 20, i1 false) #9
  %18 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 4
  %19 = bitcast %"class.WTF::HashMap"* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 20, i1 false) #9
  %20 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 2
  %21 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %20, i64 0, i32 0, i32 0
  store %"class.blink::SanitizerConfig"* null, %"class.blink::SanitizerConfig"** %21, align 8
  %22 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3
  %23 = bitcast [1 x %"class.WTF::String"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #9
  %24 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %4, i64 0, i64 0
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1) #9
  %25 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %25, align 8
  %26 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  store i32 0, i32* %26, align 8
  %27 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #9
  %28 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %29 = ptrtoint i8* %28 to i64
  %30 = bitcast %"class.WTF::Vector"* %22 to i64*
  store atomic i64 %29, i64* %30 monotonic, align 8
  %31 = lshr i64 %27, 3
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %26, align 8
  %33 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  store i32 1, i32* %33, align 4
  %34 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %4, i64 0, i64 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = bitcast i8* %28 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %3
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #9
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  call void @llvm.trap() #9
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %3
  %56 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %4, i64 0, i64 0, i32 0, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #9
  br label %72

72:                                               ; preds = %55, %68, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #9
  %73 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 4
  %74 = bitcast [13 x %"class.WTF::String"]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %74) #9
  %75 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 0
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %75, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i64 6) #9
  %76 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4) #9
  %77 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 2
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %77, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5) #9
  %78 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 3
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %78, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 6) #9
  %79 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 4
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %79, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i64 7) #9
  %80 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 5
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %80, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i64 8) #9
  %81 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %81, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i64 7) #9
  %82 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %82, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i64 8) #9
  %83 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %83, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0), i64 6) #9
  %84 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %84, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i64 5) #9
  %85 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 10
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %85, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i64 8) #9
  %86 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 11
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %86, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 5) #9
  %87 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %87, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0), i64 6) #9
  %88 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %73, i64 0, i32 0
  %89 = bitcast %"class.WTF::HashSet"* %73 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 20, i1 false) #9
  call void @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %88, i32 13) #9
  %90 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* nonnull dereferenceable(8) %75, %"class.WTF::String"* nonnull dereferenceable(8) %75) #9
  %91 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 1
  %92 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %91, %"class.WTF::String"* dereferenceable(8) %91) #9
  %93 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 2
  %94 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %93, %"class.WTF::String"* dereferenceable(8) %93) #9
  %95 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 3
  %96 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %95, %"class.WTF::String"* dereferenceable(8) %95) #9
  %97 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 4
  %98 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %97, %"class.WTF::String"* dereferenceable(8) %97) #9
  %99 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 5
  %100 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %99, %"class.WTF::String"* dereferenceable(8) %99) #9
  %101 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 6
  %102 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %101, %"class.WTF::String"* dereferenceable(8) %101) #9
  %103 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 7
  %104 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %103, %"class.WTF::String"* dereferenceable(8) %103) #9
  %105 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 8
  %106 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %105, %"class.WTF::String"* dereferenceable(8) %105) #9
  %107 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 9
  %108 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %107, %"class.WTF::String"* dereferenceable(8) %107) #9
  %109 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 10
  %110 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %109, %"class.WTF::String"* dereferenceable(8) %109) #9
  %111 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 11
  %112 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %111) #9
  %113 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 12
  %114 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %88, %"class.WTF::String"* dereferenceable(8) %113, %"class.WTF::String"* dereferenceable(8) %113) #9
  %115 = getelementptr inbounds [13 x %"class.WTF::String"], [13 x %"class.WTF::String"]* %5, i64 0, i64 13
  br label %116

116:                                              ; preds = %135, %72
  %117 = phi %"class.WTF::String"* [ %115, %72 ], [ %118, %135 ]
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %117, i64 -1
  %119 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %118, i64 0, i32 0, i32 0
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %119, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %121, label %135, label %122

122:                                              ; preds = %116
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  br i1 %126, label %129, label %131

129:                                              ; preds = %122
  %130 = add i32 %128, -1
  store i32 %130, i32* %127, align 4
  br label %131

131:                                              ; preds = %129, %122
  %132 = phi i32 [ %130, %129 ], [ %128, %122 ]
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %131
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %120) #9
  br label %135

135:                                              ; preds = %116, %131, %134
  %136 = icmp eq %"class.WTF::String"* %118, %75
  br i1 %136, label %137, label %116

137:                                              ; preds = %135
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %74) #9
  %138 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 5
  %139 = bitcast [117 x %"struct.WTF::KeyValuePair"]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2808, i8* nonnull %139) #9
  %140 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 0
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* nonnull %140, [8 x i8]* nonnull dereferenceable(8) @.str.14, %"class.WTF::Vector"* dereferenceable(16) %22)
  %141 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 1
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %141, [13 x i8]* nonnull dereferenceable(13) @.str.15, %"class.WTF::Vector"* dereferenceable(16) %22)
  %142 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 2
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %142, [17 x i8]* nonnull dereferenceable(17) @.str.16, %"class.WTF::Vector"* dereferenceable(16) %22)
  %143 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 3
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA21_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %143, [21 x i8]* nonnull dereferenceable(21) @.str.17, %"class.WTF::Vector"* dereferenceable(16) %22)
  %144 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 4
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %144, [15 x i8]* nonnull dereferenceable(15) @.str.18, %"class.WTF::Vector"* dereferenceable(16) %22)
  %145 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 5
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %145, [11 x i8]* nonnull dereferenceable(11) @.str.19, %"class.WTF::Vector"* dereferenceable(16) %22)
  %146 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 6
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %146, [13 x i8]* nonnull dereferenceable(13) @.str.20, %"class.WTF::Vector"* dereferenceable(16) %22)
  %147 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 7
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %147, [12 x i8]* nonnull dereferenceable(12) @.str.21, %"class.WTF::Vector"* dereferenceable(16) %22)
  %148 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 8
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %148, [14 x i8]* nonnull dereferenceable(14) @.str.22, %"class.WTF::Vector"* dereferenceable(16) %22)
  %149 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 9
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %149, [14 x i8]* nonnull dereferenceable(14) @.str.23, %"class.WTF::Vector"* dereferenceable(16) %22)
  %150 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 10
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %150, [15 x i8]* nonnull dereferenceable(15) @.str.24, %"class.WTF::Vector"* dereferenceable(16) %22)
  %151 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 11
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %151, [7 x i8]* nonnull dereferenceable(7) @.str.25, %"class.WTF::Vector"* dereferenceable(16) %22)
  %152 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 12
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %152, [9 x i8]* nonnull dereferenceable(9) @.str.26, %"class.WTF::Vector"* dereferenceable(16) %22)
  %153 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 13
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %153, [10 x i8]* nonnull dereferenceable(10) @.str.27, %"class.WTF::Vector"* dereferenceable(16) %22)
  %154 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 14
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %154, [17 x i8]* nonnull dereferenceable(17) @.str.28, %"class.WTF::Vector"* dereferenceable(16) %22)
  %155 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 15
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %155, [9 x i8]* nonnull dereferenceable(9) @.str.29, %"class.WTF::Vector"* dereferenceable(16) %22)
  %156 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 16
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %156, [8 x i8]* nonnull dereferenceable(8) @.str.30, %"class.WTF::Vector"* dereferenceable(16) %22)
  %157 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 17
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %157, [8 x i8]* nonnull dereferenceable(8) @.str.31, %"class.WTF::Vector"* dereferenceable(16) %22)
  %158 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 18
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %158, [14 x i8]* nonnull dereferenceable(14) @.str.32, %"class.WTF::Vector"* dereferenceable(16) %22)
  %159 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 19
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %159, [7 x i8]* nonnull dereferenceable(7) @.str.33, %"class.WTF::Vector"* dereferenceable(16) %22)
  %160 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 20
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %160, [12 x i8]* nonnull dereferenceable(12) @.str.34, %"class.WTF::Vector"* dereferenceable(16) %22)
  %161 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 21
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA6_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %161, [6 x i8]* nonnull dereferenceable(6) @.str.35, %"class.WTF::Vector"* dereferenceable(16) %22)
  %162 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 22
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %162, [11 x i8]* nonnull dereferenceable(11) @.str.36, %"class.WTF::Vector"* dereferenceable(16) %22)
  %163 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 23
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %163, [7 x i8]* nonnull dereferenceable(7) @.str.37, %"class.WTF::Vector"* dereferenceable(16) %22)
  %164 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 24
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %164, [10 x i8]* nonnull dereferenceable(10) @.str.38, %"class.WTF::Vector"* dereferenceable(16) %22)
  %165 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 25
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %165, [12 x i8]* nonnull dereferenceable(12) @.str.39, %"class.WTF::Vector"* dereferenceable(16) %22)
  %166 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 26
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %166, [12 x i8]* nonnull dereferenceable(12) @.str.40, %"class.WTF::Vector"* dereferenceable(16) %22)
  %167 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 27
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %167, [11 x i8]* nonnull dereferenceable(11) @.str.41, %"class.WTF::Vector"* dereferenceable(16) %22)
  %168 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 28
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %168, [12 x i8]* nonnull dereferenceable(12) @.str.42, %"class.WTF::Vector"* dereferenceable(16) %22)
  %169 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 29
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %169, [7 x i8]* nonnull dereferenceable(7) @.str.43, %"class.WTF::Vector"* dereferenceable(16) %22)
  %170 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 30
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %170, [17 x i8]* nonnull dereferenceable(17) @.str.44, %"class.WTF::Vector"* dereferenceable(16) %22)
  %171 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 31
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %171, [10 x i8]* nonnull dereferenceable(10) @.str.45, %"class.WTF::Vector"* dereferenceable(16) %22)
  %172 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 32
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %172, [8 x i8]* nonnull dereferenceable(8) @.str.46, %"class.WTF::Vector"* dereferenceable(16) %22)
  %173 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 33
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %173, [8 x i8]* nonnull dereferenceable(8) @.str.47, %"class.WTF::Vector"* dereferenceable(16) %22)
  %174 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 34
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %174, [8 x i8]* nonnull dereferenceable(8) @.str.48, %"class.WTF::Vector"* dereferenceable(16) %22)
  %175 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 35
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %175, [10 x i8]* nonnull dereferenceable(10) @.str.49, %"class.WTF::Vector"* dereferenceable(16) %22)
  %176 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 36
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %176, [11 x i8]* nonnull dereferenceable(11) @.str.50, %"class.WTF::Vector"* dereferenceable(16) %22)
  %177 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 37
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %177, [11 x i8]* nonnull dereferenceable(11) @.str.51, %"class.WTF::Vector"* dereferenceable(16) %22)
  %178 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 38
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA20_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %178, [20 x i8]* nonnull dereferenceable(20) @.str.52, %"class.WTF::Vector"* dereferenceable(16) %22)
  %179 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 39
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %179, [13 x i8]* nonnull dereferenceable(13) @.str.53, %"class.WTF::Vector"* dereferenceable(16) %22)
  %180 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 40
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %180, [8 x i8]* nonnull dereferenceable(8) @.str.54, %"class.WTF::Vector"* dereferenceable(16) %22)
  %181 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 41
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %181, [10 x i8]* nonnull dereferenceable(10) @.str.55, %"class.WTF::Vector"* dereferenceable(16) %22)
  %182 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 42
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %182, [10 x i8]* nonnull dereferenceable(10) @.str.56, %"class.WTF::Vector"* dereferenceable(16) %22)
  %183 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 43
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %183, [11 x i8]* nonnull dereferenceable(11) @.str.57, %"class.WTF::Vector"* dereferenceable(16) %22)
  %184 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 44
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %184, [8 x i8]* nonnull dereferenceable(8) @.str.58, %"class.WTF::Vector"* dereferenceable(16) %22)
  %185 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 45
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %185, [17 x i8]* nonnull dereferenceable(17) @.str.59, %"class.WTF::Vector"* dereferenceable(16) %22)
  %186 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 46
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %186, [7 x i8]* nonnull dereferenceable(7) @.str.60, %"class.WTF::Vector"* dereferenceable(16) %22)
  %187 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 47
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %187, [13 x i8]* nonnull dereferenceable(13) @.str.61, %"class.WTF::Vector"* dereferenceable(16) %22)
  %188 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 48
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %188, [17 x i8]* nonnull dereferenceable(17) @.str.62, %"class.WTF::Vector"* dereferenceable(16) %22)
  %189 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 49
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %189, [12 x i8]* nonnull dereferenceable(12) @.str.63, %"class.WTF::Vector"* dereferenceable(16) %22)
  %190 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 50
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA21_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %190, [21 x i8]* nonnull dereferenceable(21) @.str.64, %"class.WTF::Vector"* dereferenceable(16) %22)
  %191 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 51
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %191, [10 x i8]* nonnull dereferenceable(10) @.str.65, %"class.WTF::Vector"* dereferenceable(16) %22)
  %192 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 52
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %192, [15 x i8]* nonnull dereferenceable(15) @.str.66, %"class.WTF::Vector"* dereferenceable(16) %22)
  %193 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 53
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %193, [12 x i8]* nonnull dereferenceable(12) @.str.67, %"class.WTF::Vector"* dereferenceable(16) %22)
  %194 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 54
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %194, [13 x i8]* nonnull dereferenceable(13) @.str.68, %"class.WTF::Vector"* dereferenceable(16) %22)
  %195 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 55
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %195, [13 x i8]* nonnull dereferenceable(13) @.str.69, %"class.WTF::Vector"* dereferenceable(16) %22)
  %196 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 56
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %196, [12 x i8]* nonnull dereferenceable(12) @.str.70, %"class.WTF::Vector"* dereferenceable(16) %22)
  %197 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 57
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %197, [11 x i8]* nonnull dereferenceable(11) @.str.71, %"class.WTF::Vector"* dereferenceable(16) %22)
  %198 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 58
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %198, [12 x i8]* nonnull dereferenceable(12) @.str.72, %"class.WTF::Vector"* dereferenceable(16) %22)
  %199 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 59
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %199, [10 x i8]* nonnull dereferenceable(10) @.str.73, %"class.WTF::Vector"* dereferenceable(16) %22)
  %200 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 60
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %200, [13 x i8]* nonnull dereferenceable(13) @.str.74, %"class.WTF::Vector"* dereferenceable(16) %22)
  %201 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 61
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %201, [9 x i8]* nonnull dereferenceable(9) @.str.75, %"class.WTF::Vector"* dereferenceable(16) %22)
  %202 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 62
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %202, [10 x i8]* nonnull dereferenceable(10) @.str.76, %"class.WTF::Vector"* dereferenceable(16) %22)
  %203 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 63
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA20_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %203, [20 x i8]* nonnull dereferenceable(20) @.str.77, %"class.WTF::Vector"* dereferenceable(16) %22)
  %204 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 64
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %204, [13 x i8]* nonnull dereferenceable(13) @.str.78, %"class.WTF::Vector"* dereferenceable(16) %22)
  %205 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 65
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %205, [11 x i8]* nonnull dereferenceable(11) @.str.79, %"class.WTF::Vector"* dereferenceable(16) %22)
  %206 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 66
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %206, [11 x i8]* nonnull dereferenceable(11) @.str.80, %"class.WTF::Vector"* dereferenceable(16) %22)
  %207 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 67
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %207, [8 x i8]* nonnull dereferenceable(8) @.str.81, %"class.WTF::Vector"* dereferenceable(16) %22)
  %208 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 68
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %208, [8 x i8]* nonnull dereferenceable(8) @.str.82, %"class.WTF::Vector"* dereferenceable(16) %22)
  %209 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 69
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %209, [7 x i8]* nonnull dereferenceable(7) @.str.83, %"class.WTF::Vector"* dereferenceable(16) %22)
  %210 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 70
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %210, [10 x i8]* nonnull dereferenceable(10) @.str.84, %"class.WTF::Vector"* dereferenceable(16) %22)
  %211 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 71
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA16_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %211, [16 x i8]* nonnull dereferenceable(16) @.str.85, %"class.WTF::Vector"* dereferenceable(16) %22)
  %212 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 72
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %212, [14 x i8]* nonnull dereferenceable(14) @.str.86, %"class.WTF::Vector"* dereferenceable(16) %22)
  %213 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 73
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %213, [15 x i8]* nonnull dereferenceable(15) @.str.87, %"class.WTF::Vector"* dereferenceable(16) %22)
  %214 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 74
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %214, [15 x i8]* nonnull dereferenceable(15) @.str.88, %"class.WTF::Vector"* dereferenceable(16) %22)
  %215 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 75
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %215, [14 x i8]* nonnull dereferenceable(14) @.str.89, %"class.WTF::Vector"* dereferenceable(16) %22)
  %216 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 76
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %216, [13 x i8]* nonnull dereferenceable(13) @.str.90, %"class.WTF::Vector"* dereferenceable(16) %22)
  %217 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 77
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %217, [14 x i8]* nonnull dereferenceable(14) @.str.91, %"class.WTF::Vector"* dereferenceable(16) %22)
  %218 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 78
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA19_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %218, [19 x i8]* nonnull dereferenceable(19) @.str.92, %"class.WTF::Vector"* dereferenceable(16) %22)
  %219 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 79
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %219, [12 x i8]* nonnull dereferenceable(12) @.str.93, %"class.WTF::Vector"* dereferenceable(16) %22)
  %220 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 80
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %220, [11 x i8]* nonnull dereferenceable(11) @.str.94, %"class.WTF::Vector"* dereferenceable(16) %22)
  %221 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 81
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %221, [17 x i8]* nonnull dereferenceable(17) @.str.95, %"class.WTF::Vector"* dereferenceable(16) %22)
  %222 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 82
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %222, [11 x i8]* nonnull dereferenceable(11) @.str.96, %"class.WTF::Vector"* dereferenceable(16) %22)
  %223 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 83
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %223, [13 x i8]* nonnull dereferenceable(13) @.str.97, %"class.WTF::Vector"* dereferenceable(16) %22)
  %224 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 84
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %224, [8 x i8]* nonnull dereferenceable(8) @.str.98, %"class.WTF::Vector"* dereferenceable(16) %22)
  %225 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 85
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %225, [9 x i8]* nonnull dereferenceable(9) @.str.99, %"class.WTF::Vector"* dereferenceable(16) %22)
  %226 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 86
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %226, [9 x i8]* nonnull dereferenceable(9) @.str.100, %"class.WTF::Vector"* dereferenceable(16) %22)
  %227 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 87
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %227, [12 x i8]* nonnull dereferenceable(12) @.str.101, %"class.WTF::Vector"* dereferenceable(16) %22)
  %228 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 88
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %228, [9 x i8]* nonnull dereferenceable(9) @.str.102, %"class.WTF::Vector"* dereferenceable(16) %22)
  %229 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 89
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %229, [9 x i8]* nonnull dereferenceable(9) @.str.103, %"class.WTF::Vector"* dereferenceable(16) %22)
  %230 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 90
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %230, [10 x i8]* nonnull dereferenceable(10) @.str.104, %"class.WTF::Vector"* dereferenceable(16) %22)
  %231 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 91
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %231, [9 x i8]* nonnull dereferenceable(9) @.str.105, %"class.WTF::Vector"* dereferenceable(16) %22)
  %232 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 92
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %232, [14 x i8]* nonnull dereferenceable(14) @.str.106, %"class.WTF::Vector"* dereferenceable(16) %22)
  %233 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 93
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA18_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %233, [18 x i8]* nonnull dereferenceable(18) @.str.107, %"class.WTF::Vector"* dereferenceable(16) %22)
  %234 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 94
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %234, [7 x i8]* nonnull dereferenceable(7) @.str.108, %"class.WTF::Vector"* dereferenceable(16) %22)
  %235 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 95
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %235, [10 x i8]* nonnull dereferenceable(10) @.str.109, %"class.WTF::Vector"* dereferenceable(16) %22)
  %236 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 96
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %236, [10 x i8]* nonnull dereferenceable(10) @.str.110, %"class.WTF::Vector"* dereferenceable(16) %22)
  %237 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 97
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %237, [10 x i8]* nonnull dereferenceable(10) @.str.111, %"class.WTF::Vector"* dereferenceable(16) %22)
  %238 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 98
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %238, [9 x i8]* nonnull dereferenceable(9) @.str.112, %"class.WTF::Vector"* dereferenceable(16) %22)
  %239 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 99
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %239, [13 x i8]* nonnull dereferenceable(13) @.str.113, %"class.WTF::Vector"* dereferenceable(16) %22)
  %240 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 100
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %240, [17 x i8]* nonnull dereferenceable(17) @.str.114, %"class.WTF::Vector"* dereferenceable(16) %22)
  %241 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 101
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %241, [9 x i8]* nonnull dereferenceable(9) @.str.115, %"class.WTF::Vector"* dereferenceable(16) %22)
  %242 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 102
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %242, [13 x i8]* nonnull dereferenceable(13) @.str.116, %"class.WTF::Vector"* dereferenceable(16) %22)
  %243 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 103
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %243, [12 x i8]* nonnull dereferenceable(12) @.str.117, %"class.WTF::Vector"* dereferenceable(16) %22)
  %244 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 104
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %244, [11 x i8]* nonnull dereferenceable(11) @.str.118, %"class.WTF::Vector"* dereferenceable(16) %22)
  %245 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 105
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %245, [14 x i8]* nonnull dereferenceable(14) @.str.119, %"class.WTF::Vector"* dereferenceable(16) %22)
  %246 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 106
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA16_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %246, [16 x i8]* nonnull dereferenceable(16) @.str.120, %"class.WTF::Vector"* dereferenceable(16) %22)
  %247 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 107
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %247, [9 x i8]* nonnull dereferenceable(9) @.str.121, %"class.WTF::Vector"* dereferenceable(16) %22)
  %248 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 108
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %248, [15 x i8]* nonnull dereferenceable(15) @.str.122, %"class.WTF::Vector"* dereferenceable(16) %22)
  %249 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 109
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %249, [10 x i8]* nonnull dereferenceable(10) @.str.123, %"class.WTF::Vector"* dereferenceable(16) %22)
  %250 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 110
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA23_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %250, [23 x i8]* nonnull dereferenceable(23) @.str.124, %"class.WTF::Vector"* dereferenceable(16) %22)
  %251 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 111
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA27_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %251, [27 x i8]* nonnull dereferenceable(27) @.str.125, %"class.WTF::Vector"* dereferenceable(16) %22)
  %252 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 112
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA21_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %252, [21 x i8]* nonnull dereferenceable(21) @.str.126, %"class.WTF::Vector"* dereferenceable(16) %22)
  %253 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 113
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA25_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %253, [25 x i8]* nonnull dereferenceable(25) @.str.127, %"class.WTF::Vector"* dereferenceable(16) %22)
  %254 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 114
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA24_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %254, [24 x i8]* nonnull dereferenceable(24) @.str.128, %"class.WTF::Vector"* dereferenceable(16) %22)
  %255 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 115
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA22_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %255, [22 x i8]* nonnull dereferenceable(22) @.str.129, %"class.WTF::Vector"* dereferenceable(16) %22)
  %256 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 116
  call void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"* %256, [8 x i8]* nonnull dereferenceable(8) @.str.130, %"class.WTF::Vector"* dereferenceable(16) %22)
  %257 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %138, i64 0, i32 0
  %258 = bitcast %"class.WTF::HashMap"* %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %258, i8 0, i64 20, i1 false) #9
  call void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.1"* %257, i32 117) #9
  %259 = getelementptr inbounds [117 x %"struct.WTF::KeyValuePair"], [117 x %"struct.WTF::KeyValuePair"]* %6, i64 0, i64 117
  br label %260

260:                                              ; preds = %260, %137
  %261 = phi %"struct.WTF::KeyValuePair"* [ %265, %260 ], [ %140, %137 ]
  %262 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %261, i64 0, i32 0
  %263 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %261, i64 0, i32 1
  %264 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RKS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.1"* %257, %"class.WTF::String"* dereferenceable(8) %262, %"class.WTF::Vector"* dereferenceable(16) %263) #9
  %265 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %261, i64 1
  %266 = icmp eq %"struct.WTF::KeyValuePair"* %265, %259
  br i1 %266, label %267, label %260

267:                                              ; preds = %260, %325
  %268 = phi %"struct.WTF::KeyValuePair"* [ %269, %325 ], [ %259, %260 ]
  %269 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %268, i64 -1
  %270 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %268, i64 -1, i32 1
  %271 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %270, i64 0, i32 0, i32 0, i32 0
  %272 = load %"class.WTF::String"*, %"class.WTF::String"** %271, align 8
  %273 = icmp eq %"class.WTF::String"* %272, null
  br i1 %273, label %308, label %274, !prof !3

274:                                              ; preds = %267
  %275 = bitcast %"class.WTF::String"* %272 to i8*
  %276 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %268, i64 -1, i32 1, i32 0, i32 0, i32 2
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %306, label %279, !prof !2

279:                                              ; preds = %274
  %280 = zext i32 %277 to i64
  %281 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %272, i64 %280
  br label %282

282:                                              ; preds = %300, %279
  %283 = phi %"class.WTF::String"* [ %301, %300 ], [ %272, %279 ]
  %284 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %283, i64 0, i32 0, i32 0
  %285 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %284, align 8
  %286 = icmp eq %"class.WTF::StringImpl"* %285, null
  br i1 %286, label %300, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %285, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %289 = load atomic i32, i32* %288 monotonic, align 4
  %290 = and i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %285, i64 0, i32 0
  %293 = load i32, i32* %292, align 4
  br i1 %291, label %294, label %296

294:                                              ; preds = %287
  %295 = add i32 %293, -1
  store i32 %295, i32* %292, align 4
  br label %296

296:                                              ; preds = %294, %287
  %297 = phi i32 [ %295, %294 ], [ %293, %287 ]
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %300

299:                                              ; preds = %296
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %285) #9
  br label %300

300:                                              ; preds = %299, %296, %282
  %301 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %283, i64 1
  %302 = icmp eq %"class.WTF::String"* %301, %281
  br i1 %302, label %303, label %282

303:                                              ; preds = %300
  store i32 0, i32* %276, align 4
  %304 = bitcast %"class.WTF::Vector"* %270 to i8**
  %305 = load i8*, i8** %304, align 8
  br label %306

306:                                              ; preds = %303, %274
  %307 = phi i8* [ %305, %303 ], [ %275, %274 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %307) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %271, align 8
  br label %308

308:                                              ; preds = %306, %267
  %309 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %269, i64 0, i32 0, i32 0, i32 0
  %310 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %309, align 8
  %311 = icmp eq %"class.WTF::StringImpl"* %310, null
  br i1 %311, label %325, label %312

312:                                              ; preds = %308
  %313 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %310, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %314 = load atomic i32, i32* %313 monotonic, align 4
  %315 = and i32 %314, 2
  %316 = icmp eq i32 %315, 0
  %317 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %310, i64 0, i32 0
  %318 = load i32, i32* %317, align 4
  br i1 %316, label %319, label %321

319:                                              ; preds = %312
  %320 = add i32 %318, -1
  store i32 %320, i32* %317, align 4
  br label %321

321:                                              ; preds = %319, %312
  %322 = phi i32 [ %320, %319 ], [ %318, %312 ]
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %325

324:                                              ; preds = %321
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %310) #9
  br label %325

325:                                              ; preds = %308, %321, %324
  %326 = icmp eq %"struct.WTF::KeyValuePair"* %269, %140
  br i1 %326, label %327, label %267

327:                                              ; preds = %325
  call void @llvm.lifetime.end.p0i8(i64 2808, i8* nonnull %139) #9
  %328 = icmp eq %"class.blink::SanitizerConfig"* %2, null
  br i1 %328, label %353, label %329

329:                                              ; preds = %327
  %330 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %2, i64 0, i32 6
  %331 = load i8, i8* %330, align 1, !range !4
  %332 = icmp eq i8 %331, 0
  br i1 %332, label %333, label %354

333:                                              ; preds = %329
  %334 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %2, i64 0, i32 4
  %335 = load i8, i8* %334, align 1, !range !4
  %336 = icmp eq i8 %335, 0
  br i1 %336, label %337, label %354

337:                                              ; preds = %333
  %338 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %2, i64 0, i32 3
  %339 = load i8, i8* %338, align 2, !range !4
  %340 = icmp eq i8 %339, 0
  br i1 %340, label %341, label %354

341:                                              ; preds = %337
  %342 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %2, i64 0, i32 5
  %343 = load i8, i8* %342, align 4, !range !4
  %344 = icmp eq i8 %343, 0
  br i1 %344, label %345, label %354

345:                                              ; preds = %341
  %346 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %2, i64 0, i32 1
  %347 = load i8, i8* %346, align 8, !range !4
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %349, label %354

349:                                              ; preds = %345
  %350 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %2, i64 0, i32 2
  %351 = load i8, i8* %350, align 1, !range !4
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %353, label %354

353:                                              ; preds = %327, %349
  br label %354

354:                                              ; preds = %329, %333, %337, %341, %345, %349, %353
  %355 = phi %"class.blink::SanitizerConfig"* [ null, %353 ], [ %2, %349 ], [ %2, %345 ], [ %2, %341 ], [ %2, %337 ], [ %2, %333 ], [ %2, %329 ]
  %356 = bitcast %"struct.blink::SanitizerConfigImpl"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %356) #9
  call void @_ZN5blink19SanitizerConfigImpl4FromEPKNS_15SanitizerConfigE(%"struct.blink::SanitizerConfigImpl"* nonnull sret %7, %"class.blink::SanitizerConfig"* %355) #9
  %357 = call dereferenceable(128) %"struct.blink::SanitizerConfigImpl"* @_ZN5blink19SanitizerConfigImplaSEOS0_(%"struct.blink::SanitizerConfigImpl"* %10, %"struct.blink::SanitizerConfigImpl"* nonnull dereferenceable(128) %7)
  call void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %356) #9
  %358 = call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_119SanitizerConfigCopyEPKNS_15SanitizerConfigE(%"class.blink::SanitizerConfig"* %355)
  %359 = ptrtoint %"class.blink::SanitizerConfig"* %358 to i64
  %360 = bitcast %"class.blink::Member"* %20 to i64*
  store atomic i64 %359, i64* %360 monotonic, align 8
  %361 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %367, label %363

363:                                              ; preds = %354
  %364 = bitcast %"class.blink::SanitizerConfig"* %358 to i8*
  %365 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %364) #9
  %366 = load %"class.blink::SanitizerConfig"*, %"class.blink::SanitizerConfig"** %21, align 8
  br label %367

367:                                              ; preds = %354, %363
  %368 = phi %"class.blink::SanitizerConfig"* [ %358, %354 ], [ %366, %363 ]
  %369 = icmp eq %"class.blink::SanitizerConfig"* %368, null
  br i1 %369, label %370, label %380

370:                                              ; preds = %367
  %371 = icmp eq %"class.blink::ExecutionContext"* %1, null
  %372 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %1, i64 0, i32 3
  %373 = icmp eq %"class.blink::UseCounter"* %372, null
  %374 = or i1 %371, %373
  br i1 %374, label %380, label %375

375:                                              ; preds = %370
  %376 = bitcast %"class.blink::UseCounter"* %372 to void (%"class.blink::UseCounter"*, i32)***
  %377 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %376, align 8
  %378 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %377, i64 3
  %379 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %378, align 8
  call void %379(%"class.blink::UseCounter"* nonnull %372, i32 3815) #9
  br label %380

380:                                              ; preds = %367, %375, %370
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA8_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [8 x i8]* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [8 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA13_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [13 x i8]* dereferenceable(13), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [13 x i8], [13 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [13 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA17_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [17 x i8]* dereferenceable(17), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [17 x i8], [17 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [17 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA21_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [21 x i8]* dereferenceable(21), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [21 x i8], [21 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [21 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA15_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [15 x i8]* dereferenceable(15), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [15 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA11_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [11 x i8]* dereferenceable(11), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [11 x i8], [11 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [11 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA12_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [12 x i8]* dereferenceable(12), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [12 x i8], [12 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [12 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA14_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [14 x i8]* dereferenceable(14), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [14 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA7_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [7 x i8]* dereferenceable(7), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [7 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA9_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [9 x i8]* dereferenceable(9), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [9 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA10_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [10 x i8]* dereferenceable(10), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [10 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA6_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [6 x i8]* dereferenceable(6), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [6 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA20_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [20 x i8]* dereferenceable(20), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [20 x i8], [20 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [20 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA16_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [16 x i8]* dereferenceable(16), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [16 x i8], [16 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [16 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA19_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [19 x i8]* dereferenceable(19), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [19 x i8], [19 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [19 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA18_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [18 x i8]* dereferenceable(18), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [18 x i8], [18 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [18 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA23_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [23 x i8]* dereferenceable(23), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [23 x i8], [23 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [23 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA27_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [27 x i8]* dereferenceable(27), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [27 x i8], [27 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [27 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA25_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [25 x i8]* dereferenceable(25), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [25 x i8], [25 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [25 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA24_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [24 x i8]* dereferenceable(24), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [24 x i8], [24 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [24 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12KeyValuePairINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEC2IRA22_KcRKS4_EEOT_OT0_(%"struct.WTF::KeyValuePair"*, [22 x i8]* dereferenceable(22), %"class.WTF::Vector"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0
  %5 = getelementptr inbounds [22 x i8], [22 x i8]* %1, i64 0, i64 0
  %6 = icmp eq [22 x i8]* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %5) #10
  br label %9

9:                                                ; preds = %3, %7
  %10 = phi i64 [ %8, %7 ], [ 0, %3 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %4, i8* %5, i64 %10) #9
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %9
  %18 = zext i32 %13 to i64
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = lshr i64 %19, 3
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %15, align 8
  %25 = bitcast i8* %20 to %"class.WTF::String"*
  br label %26

26:                                               ; preds = %17, %9
  %27 = phi %"class.WTF::String"* [ null, %9 ], [ %25, %17 ]
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::String"*, %"class.WTF::String"** %31, align 8
  %33 = load i32, i32* %28, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 %34
  %36 = icmp eq i32 %33, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %26, %61
  %38 = phi %"class.WTF::String"* [ %62, %61 ], [ %27, %26 ]
  %39 = phi %"class.WTF::String"* [ %63, %61 ], [ %32, %26 ]
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %42, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i33
  %53 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #9
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %49
  tail call void @llvm.trap() #9
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4
  br label %61

61:                                               ; preds = %59, %44, %37
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 1
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %35
  br i1 %64, label %65, label %37

65:                                               ; preds = %61, %26
  ret void
}

declare void @_ZN5blink19SanitizerConfigImpl4FromEPKNS_15SanitizerConfigE(%"struct.blink::SanitizerConfigImpl"* sret, %"class.blink::SanitizerConfig"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(128) %"struct.blink::SanitizerConfigImpl"* @_ZN5blink19SanitizerConfigImplaSEOS0_(%"struct.blink::SanitizerConfigImpl"*, %"struct.blink::SanitizerConfigImpl"* dereferenceable(128)) local_unnamed_addr #3 comdat align 2 {
  %3 = bitcast %"struct.blink::SanitizerConfigImpl"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"struct.blink::SanitizerConfigImpl"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  store atomic i64 %6, i64* %3 monotonic, align 8
  store atomic i64 %4, i64* %5 monotonic, align 8
  %7 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %7, align 4
  %10 = load i32, i32* %8, align 4
  store i32 %10, i32* %7, align 4
  store i32 %9, i32* %8, align 4
  %11 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 2
  %12 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %11, align 4
  %14 = load i32, i32* %12, align 4
  store i32 %14, i32* %11, align 4
  store i32 %13, i32* %12, align 4
  %15 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 2147483647
  %18 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 2147483647
  %21 = and i32 %16, -2147483648
  %22 = or i32 %20, %21
  store i32 %22, i32* %15, align 8
  %23 = load i32, i32* %18, align 8
  %24 = and i32 %23, -2147483648
  %25 = or i32 %24, %17
  store i32 %25, i32* %18, align 8
  %26 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1
  %27 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1
  %28 = bitcast %"class.WTF::HashSet"* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.WTF::HashSet"* %26 to i64*
  %31 = load i64, i64* %30, align 8
  store atomic i64 %31, i64* %28 monotonic, align 8
  store atomic i64 %29, i64* %30 monotonic, align 8
  %32 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %33 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %34 = load i32, i32* %32, align 4
  %35 = load i32, i32* %33, align 4
  store i32 %35, i32* %32, align 4
  store i32 %34, i32* %33, align 4
  %36 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 2
  %37 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 2
  %38 = load i32, i32* %36, align 4
  %39 = load i32, i32* %37, align 4
  store i32 %39, i32* %36, align 4
  store i32 %38, i32* %37, align 4
  %40 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 2147483647
  %43 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 3
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 2147483647
  %46 = and i32 %41, -2147483648
  %47 = or i32 %45, %46
  store i32 %47, i32* %40, align 8
  %48 = load i32, i32* %43, align 8
  %49 = and i32 %48, -2147483648
  %50 = or i32 %49, %42
  store i32 %50, i32* %43, align 8
  %51 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2
  %52 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2
  %53 = bitcast %"class.WTF::HashSet"* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"class.WTF::HashSet"* %51 to i64*
  %56 = load i64, i64* %55, align 8
  store atomic i64 %56, i64* %53 monotonic, align 8
  store atomic i64 %54, i64* %55 monotonic, align 8
  %57 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 1
  %58 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 1
  %59 = load i32, i32* %57, align 4
  %60 = load i32, i32* %58, align 4
  store i32 %60, i32* %57, align 4
  store i32 %59, i32* %58, align 4
  %61 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 2
  %62 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 2
  %63 = load i32, i32* %61, align 4
  %64 = load i32, i32* %62, align 4
  store i32 %64, i32* %61, align 4
  store i32 %63, i32* %62, align 4
  %65 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = and i32 %66, 2147483647
  %68 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, 2147483647
  %71 = and i32 %66, -2147483648
  %72 = or i32 %70, %71
  store i32 %72, i32* %65, align 8
  %73 = load i32, i32* %68, align 8
  %74 = and i32 %73, -2147483648
  %75 = or i32 %74, %67
  store i32 %75, i32* %68, align 8
  %76 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3
  %77 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3
  %78 = bitcast %"class.WTF::HashMap"* %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.WTF::HashMap"* %76 to i64*
  %81 = load i64, i64* %80, align 8
  store atomic i64 %81, i64* %78 monotonic, align 8
  store atomic i64 %79, i64* %80 monotonic, align 8
  %82 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 1
  %83 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 1
  %84 = load i32, i32* %82, align 4
  %85 = load i32, i32* %83, align 4
  store i32 %85, i32* %82, align 4
  store i32 %84, i32* %83, align 4
  %86 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 2
  %87 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 2
  %88 = load i32, i32* %86, align 4
  %89 = load i32, i32* %87, align 4
  store i32 %89, i32* %86, align 4
  store i32 %88, i32* %87, align 4
  %90 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = and i32 %91, 2147483647
  %93 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = and i32 %94, 2147483647
  %96 = and i32 %91, -2147483648
  %97 = or i32 %95, %96
  store i32 %97, i32* %90, align 8
  %98 = load i32, i32* %93, align 8
  %99 = and i32 %98, -2147483648
  %100 = or i32 %99, %92
  store i32 %100, i32* %93, align 8
  %101 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4
  %102 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4
  %103 = bitcast %"class.WTF::HashMap"* %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.WTF::HashMap"* %101 to i64*
  %106 = load i64, i64* %105, align 8
  store atomic i64 %106, i64* %103 monotonic, align 8
  store atomic i64 %104, i64* %105 monotonic, align 8
  %107 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %108 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 1
  %109 = load i32, i32* %107, align 4
  %110 = load i32, i32* %108, align 4
  store i32 %110, i32* %107, align 4
  store i32 %109, i32* %108, align 4
  %111 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 2
  %112 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 2
  %113 = load i32, i32* %111, align 4
  %114 = load i32, i32* %112, align 4
  store i32 %114, i32* %111, align 4
  store i32 %113, i32* %112, align 4
  %115 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 3
  %116 = load i32, i32* %115, align 8
  %117 = and i32 %116, 2147483647
  %118 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 3
  %119 = load i32, i32* %118, align 8
  %120 = and i32 %119, 2147483647
  %121 = and i32 %116, -2147483648
  %122 = or i32 %120, %121
  store i32 %122, i32* %115, align 8
  %123 = load i32, i32* %118, align 8
  %124 = and i32 %123, -2147483648
  %125 = or i32 %124, %117
  store i32 %125, i32* %118, align 8
  %126 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 5
  %127 = load i8, i8* %126, align 8, !range !4
  %128 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 5
  store i8 %127, i8* %128, align 8
  ret %"struct.blink::SanitizerConfigImpl"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4
  tail call void @_ZN3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_ED2Ev(%"class.WTF::HashMap"* %2) #9
  %3 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3
  tail call void @_ZN3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_ED2Ev(%"class.WTF::HashMap"* %3) #9
  %4 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %39, label %7, !prof !3

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %7
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %34, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %34 ]
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %14
  %16 = bitcast %"class.WTF::String"* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast i8* %17 to %"class.WTF::StringImpl"*
  %19 = ptrtoint i8* %17 to i64
  switch i64 %19, label %20 [
    i64 -1, label %34
    i64 0, label %34
  ]

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = bitcast i8* %17 to i32*
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %20
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %20
  %31 = phi i32 [ %29, %28 ], [ %27, %20 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %34

34:                                               ; preds = %33, %30, %13, %13
  %35 = add nuw nsw i64 %14, 1
  %36 = icmp eq i64 %35, %12
  br i1 %36, label %37, label %13

37:                                               ; preds = %34, %7
  %38 = bitcast %"class.WTF::String"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %38) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %4, align 8
  br label %39

39:                                               ; preds = %1, %37
  %40 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 0
  %41 = load %"class.WTF::String"*, %"class.WTF::String"** %40, align 8
  %42 = icmp eq %"class.WTF::String"* %41, null
  br i1 %42, label %75, label %43, !prof !3

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %73, label %47

47:                                               ; preds = %43
  %48 = zext i32 %45 to i64
  br label %49

49:                                               ; preds = %70, %47
  %50 = phi i64 [ 0, %47 ], [ %71, %70 ]
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %41, i64 %50
  %52 = bitcast %"class.WTF::String"* %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = bitcast i8* %53 to %"class.WTF::StringImpl"*
  %55 = ptrtoint i8* %53 to i64
  switch i64 %55, label %56 [
    i64 -1, label %70
    i64 0, label %70
  ]

56:                                               ; preds = %49
  %57 = getelementptr inbounds i8, i8* %53, i64 8
  %58 = bitcast i8* %57 to i32*
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = bitcast i8* %53 to i32*
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %56
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %56
  %67 = phi i32 [ %65, %64 ], [ %63, %56 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %54) #9
  br label %70

70:                                               ; preds = %69, %66, %49, %49
  %71 = add nuw nsw i64 %50, 1
  %72 = icmp eq i64 %71, %48
  br i1 %72, label %73, label %49

73:                                               ; preds = %70, %43
  %74 = bitcast %"class.WTF::String"* %41 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %74) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %40, align 8
  br label %75

75:                                               ; preds = %39, %73
  %76 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %77 = load %"class.WTF::String"*, %"class.WTF::String"** %76, align 8
  %78 = icmp eq %"class.WTF::String"* %77, null
  br i1 %78, label %111, label %79, !prof !3

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %109, label %83

83:                                               ; preds = %79
  %84 = zext i32 %81 to i64
  br label %85

85:                                               ; preds = %106, %83
  %86 = phi i64 [ 0, %83 ], [ %107, %106 ]
  %87 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %77, i64 %86
  %88 = bitcast %"class.WTF::String"* %87 to i8**
  %89 = load i8*, i8** %88, align 8
  %90 = bitcast i8* %89 to %"class.WTF::StringImpl"*
  %91 = ptrtoint i8* %89 to i64
  switch i64 %91, label %92 [
    i64 -1, label %106
    i64 0, label %106
  ]

92:                                               ; preds = %85
  %93 = getelementptr inbounds i8, i8* %89, i64 8
  %94 = bitcast i8* %93 to i32*
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = bitcast i8* %89 to i32*
  %99 = load i32, i32* %98, align 4
  br i1 %97, label %100, label %102

100:                                              ; preds = %92
  %101 = add i32 %99, -1
  store i32 %101, i32* %98, align 4
  br label %102

102:                                              ; preds = %100, %92
  %103 = phi i32 [ %101, %100 ], [ %99, %92 ]
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %90) #9
  br label %106

106:                                              ; preds = %105, %102, %85, %85
  %107 = add nuw nsw i64 %86, 1
  %108 = icmp eq i64 %107, %84
  br i1 %108, label %109, label %85

109:                                              ; preds = %106, %79
  %110 = bitcast %"class.WTF::String"* %77 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %110) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %76, align 8
  br label %111

111:                                              ; preds = %75, %109
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_119SanitizerConfigCopyEPKNS_15SanitizerConfigE(%"class.blink::SanitizerConfig"*) unnamed_addr #0 {
  %2 = icmp eq %"class.blink::SanitizerConfig"* %0, null
  br i1 %2, label %48, label %3

3:                                                ; preds = %1
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 104) #9
  %5 = bitcast i8* %4 to %"class.blink::SanitizerConfig"*
  tail call void @_ZN5blink15SanitizerConfigC1Ev(%"class.blink::SanitizerConfig"* %5) #9
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  %10 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 1
  %11 = load i8, i8* %10, align 8, !range !4
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 7
  tail call void @_ZN5blink15SanitizerConfig18setAllowAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"* %5, %"class.WTF::Vector.8"* dereferenceable(16) %14) #9
  br label %15

15:                                               ; preds = %3, %13
  %16 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 2
  %17 = load i8, i8* %16, align 1, !range !4
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 8
  %21 = load i8, i8* %20, align 8, !range !4
  %22 = getelementptr inbounds i8, i8* %4, i64 32
  store i8 %21, i8* %22, align 8
  %23 = getelementptr inbounds i8, i8* %4, i64 9
  store i8 1, i8* %23, align 1
  br label %24

24:                                               ; preds = %15, %19
  %25 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 3
  %26 = load i8, i8* %25, align 2, !range !4
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 9
  tail call void @_ZN5blink15SanitizerConfig16setAllowElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"* %5, %"class.WTF::Vector"* dereferenceable(16) %29) #9
  br label %30

30:                                               ; preds = %24, %28
  %31 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 4
  %32 = load i8, i8* %31, align 1, !range !4
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 10
  tail call void @_ZN5blink15SanitizerConfig16setBlockElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"* %5, %"class.WTF::Vector"* dereferenceable(16) %35) #9
  br label %36

36:                                               ; preds = %30, %34
  %37 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 5
  %38 = load i8, i8* %37, align 4, !range !4
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 11
  tail call void @_ZN5blink15SanitizerConfig17setDropAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"* %5, %"class.WTF::Vector.8"* dereferenceable(16) %41) #9
  br label %42

42:                                               ; preds = %36, %40
  %43 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 6
  %44 = load i8, i8* %43, align 1, !range !4
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %0, i64 0, i32 12
  tail call void @_ZN5blink15SanitizerConfig15setDropElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"* %5, %"class.WTF::Vector"* dereferenceable(16) %47) #9
  br label %48

48:                                               ; preds = %42, %46, %1
  %49 = phi %"class.blink::SanitizerConfig"* [ null, %1 ], [ %5, %46 ], [ %5, %42 ]
  ret %"class.blink::SanitizerConfig"* %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9SanitizerD2Ev(%"class.blink::Sanitizer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink9SanitizerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 5
  tail call void @_ZN3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_ED2Ev(%"class.WTF::HashMap"* %3) #9
  %4 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 4, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %39, label %7, !prof !3

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %7
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %34, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %34 ]
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %14
  %16 = bitcast %"class.WTF::String"* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast i8* %17 to %"class.WTF::StringImpl"*
  %19 = ptrtoint i8* %17 to i64
  switch i64 %19, label %20 [
    i64 -1, label %34
    i64 0, label %34
  ]

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = bitcast i8* %17 to i32*
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %20
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %20
  %31 = phi i32 [ %29, %28 ], [ %27, %20 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %34

34:                                               ; preds = %33, %30, %13, %13
  %35 = add nuw nsw i64 %14, 1
  %36 = icmp eq i64 %35, %12
  br i1 %36, label %37, label %13

37:                                               ; preds = %34, %7
  %38 = bitcast %"class.WTF::String"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %38) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %4, align 8
  br label %39

39:                                               ; preds = %1, %37
  %40 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3
  %41 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::String"*, %"class.WTF::String"** %41, align 8
  %43 = icmp eq %"class.WTF::String"* %42, null
  br i1 %43, label %78, label %44, !prof !3

44:                                               ; preds = %39
  %45 = bitcast %"class.WTF::String"* %42 to i8*
  %46 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %76, label %49, !prof !2

49:                                               ; preds = %44
  %50 = zext i32 %47 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %42, i64 %50
  br label %52

52:                                               ; preds = %70, %49
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %42, %49 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #9
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %46, align 4
  %74 = bitcast %"class.WTF::Vector"* %40 to i8**
  %75 = load i8*, i8** %74, align 8
  br label %76

76:                                               ; preds = %73, %44
  %77 = phi i8* [ %75, %73 ], [ %45, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %77) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %41, align 8
  br label %78

78:                                               ; preds = %39, %76
  %79 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1
  tail call void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"* %79) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_ED2Ev(%"class.WTF::HashMap"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 0
  %3 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %2, align 8
  %4 = icmp eq %"struct.WTF::KeyValuePair"* %3, null
  br i1 %4, label %80, label %5, !prof !3

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %78, label %9

9:                                                ; preds = %5
  %10 = zext i32 %7 to i64
  br label %11

11:                                               ; preds = %75, %9
  %12 = phi i64 [ 0, %9 ], [ %76, %75 ]
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %12
  %14 = bitcast %"struct.WTF::KeyValuePair"* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, inttoptr (i64 -1 to i8*)
  br i1 %16, label %75, label %17

17:                                               ; preds = %11
  %18 = bitcast i8* %15 to %"class.WTF::StringImpl"*
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %12, i32 1
  %20 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::String"*, %"class.WTF::String"** %20, align 8
  %22 = icmp eq %"class.WTF::String"* %21, null
  br i1 %22, label %59, label %23, !prof !3

23:                                               ; preds = %17
  %24 = bitcast %"class.WTF::String"* %21 to i8*
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %12, i32 1, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %55, label %28, !prof !2

28:                                               ; preds = %23
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 %29
  br label %31

31:                                               ; preds = %49, %28
  %32 = phi %"class.WTF::String"* [ %50, %49 ], [ %21, %28 ]
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %45

43:                                               ; preds = %36
  %44 = add i32 %42, -1
  store i32 %44, i32* %41, align 4
  br label %45

45:                                               ; preds = %43, %36
  %46 = phi i32 [ %44, %43 ], [ %42, %36 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %34) #9
  br label %49

49:                                               ; preds = %48, %45, %31
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 1
  %51 = icmp eq %"class.WTF::String"* %50, %30
  br i1 %51, label %52, label %31

52:                                               ; preds = %49
  store i32 0, i32* %25, align 4
  %53 = bitcast %"class.WTF::Vector"* %19 to i8**
  %54 = load i8*, i8** %53, align 8
  br label %55

55:                                               ; preds = %52, %23
  %56 = phi i8* [ %54, %52 ], [ %24, %23 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %56) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %20, align 8
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %13, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  br label %59

59:                                               ; preds = %55, %17
  %60 = phi %"class.WTF::StringImpl"* [ %58, %55 ], [ %18, %17 ]
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #9
  br label %75

75:                                               ; preds = %74, %71, %59, %11
  %76 = add nuw nsw i64 %12, 1
  %77 = icmp eq i64 %76, %10
  br i1 %77, label %78, label %11

78:                                               ; preds = %75, %5
  %79 = bitcast %"struct.WTF::KeyValuePair"* %3 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %79) #9
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %2, align 8
  br label %80

80:                                               ; preds = %1, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9SanitizerD0Ev(%"class.blink::Sanitizer"*) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink9SanitizerD2Ev(%"class.blink::Sanitizer"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Sanitizer"* @_ZN5blink9Sanitizer6CreateEPNS_16ExecutionContextEPKNS_15SanitizerConfigERNS_14ExceptionStateE(%"class.blink::ExecutionContext"*, %"class.blink::SanitizerConfig"*, %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 216) #9
  %5 = bitcast i8* %4 to %"class.blink::Sanitizer"*
  tail call void @_ZN5blink9SanitizerC2EPNS_16ExecutionContextEPKNS_15SanitizerConfigE(%"class.blink::Sanitizer"* %5, %"class.blink::ExecutionContext"* %0, %"class.blink::SanitizerConfig"* %1) #9
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  ret %"class.blink::Sanitizer"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink9Sanitizer16sanitizeToStringEPNS_11ScriptStateEPKNS_41V8UnionDocumentOrDocumentFragmentOrStringERNS_14ExceptionStateE(%"class.blink::Sanitizer"*, %"class.blink::ScriptState"*, %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::HeapHashSet.1579", align 8
  %6 = tail call %"class.blink::LocalDOMWindow"* @_ZN5blink14LocalDOMWindow4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"* %1) #9
  %7 = tail call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer15PrepareFragmentEPNS_14LocalDOMWindowEPNS_11ScriptStateEPKNS_41V8UnionDocumentOrDocumentFragmentOrStringERNS_14ExceptionStateE(%"class.blink::Sanitizer"* undef, %"class.blink::LocalDOMWindow"* %6, %"class.blink::ScriptState"* %1, %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %2, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  %8 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  %12 = tail call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer12DoSanitizingEPNS_16DocumentFragmentEPNS_14LocalDOMWindowERNS_14ExceptionStateE(%"class.blink::Sanitizer"* %0, %"class.blink::DocumentFragment"* %7, %"class.blink::LocalDOMWindow"* %6, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi %"class.blink::DocumentFragment"* [ %12, %11 ], [ null, %4 ]
  %15 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %14, i64 0, i32 0, i32 0
  %16 = bitcast %"class.blink::HeapHashSet.1579"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 20, i1 false) #9
  %17 = call %"class.WTF::StringImpl"* @_ZN5blink12CreateMarkupEPKNS_4NodeENS_12ChildrenOnlyENS_12AbsoluteURLsENS_18IncludeShadowRootsENS_11HeapHashSetINS_6MemberINS_10ShadowRootEEEN3WTF10MemberHashIS8_EENSA_10HashTraitsIS9_EEEE(%"class.blink::Node"* %15, i32 1, i32 0, i32 0, %"class.blink::HeapHashSet.1579"* nonnull %5) #9
  ret %"class.WTF::StringImpl"* %17
}

declare %"class.WTF::StringImpl"* @_ZN5blink12CreateMarkupEPKNS_4NodeENS_12ChildrenOnlyENS_12AbsoluteURLsENS_18IncludeShadowRootsENS_11HeapHashSetINS_6MemberINS_10ShadowRootEEEN3WTF10MemberHashIS8_EENSA_10HashTraitsIS9_EEEE(%"class.blink::Node"*, i32, i32, i32, %"class.blink::HeapHashSet.1579"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer12SanitizeImplEPNS_11ScriptStateEPKNS_41V8UnionDocumentOrDocumentFragmentOrStringERNS_14ExceptionStateE(%"class.blink::Sanitizer"*, %"class.blink::ScriptState"*, %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = tail call %"class.blink::LocalDOMWindow"* @_ZN5blink14LocalDOMWindow4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"* %1) #9
  %6 = tail call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer15PrepareFragmentEPNS_14LocalDOMWindowEPNS_11ScriptStateEPKNS_41V8UnionDocumentOrDocumentFragmentOrStringERNS_14ExceptionStateE(%"class.blink::Sanitizer"* undef, %"class.blink::LocalDOMWindow"* %5, %"class.blink::ScriptState"* %1, %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %2, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %7 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = tail call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer12DoSanitizingEPNS_16DocumentFragmentEPNS_14LocalDOMWindowERNS_14ExceptionStateE(%"class.blink::Sanitizer"* %0, %"class.blink::DocumentFragment"* %6, %"class.blink::LocalDOMWindow"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br label %12

12:                                               ; preds = %4, %10
  %13 = phi %"class.blink::DocumentFragment"* [ %11, %10 ], [ null, %4 ]
  ret %"class.blink::DocumentFragment"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer8sanitizeEPNS_11ScriptStateEPKNS_54V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTMLERNS_14ExceptionStateE(%"class.blink::Sanitizer"*, %"class.blink::ScriptState"*, %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML"* nocapture readonly, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML", %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML"* %2, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %158 [
    i32 0, label %7
    i32 1, label %23
    i32 2, label %42
    i32 3, label %121
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML", %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML"* %2, i64 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.blink::Document"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64 40) #9
  %12 = bitcast i8* %11 to %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*
  %13 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink41V8UnionDocumentOrDocumentFragmentOrStringE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds i8, i8* %11, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %11, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %10, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %11, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false) #9
  %19 = getelementptr inbounds i8, i8* %11, i64 -4
  %20 = bitcast i8* %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = or i16 %21, 1
  store atomic i16 %22, i16* %20 release, align 2
  br label %158

23:                                               ; preds = %4
  %24 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML", %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML"* %2, i64 0, i32 3, i32 0, i32 0
  %25 = bitcast %"class.blink::DocumentFragment"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64 40) #9
  %28 = bitcast i8* %27 to %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*
  %29 = bitcast i8* %27 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink41V8UnionDocumentOrDocumentFragmentOrStringE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %30 = getelementptr inbounds i8, i8* %27, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 1, i32* %31, align 8
  %32 = getelementptr inbounds i8, i8* %27, i64 16
  %33 = bitcast i8* %32 to %"class.blink::Document"**
  store %"class.blink::Document"* null, %"class.blink::Document"** %33, align 8
  %34 = getelementptr inbounds i8, i8* %27, i64 24
  %35 = bitcast i8* %34 to i64*
  store i64 %26, i64* %35, align 8
  %36 = getelementptr inbounds i8, i8* %27, i64 32
  %37 = bitcast i8* %36 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %37, align 8
  %38 = getelementptr inbounds i8, i8* %27, i64 -4
  %39 = bitcast i8* %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = or i16 %40, 1
  store atomic i16 %41, i16* %39 release, align 2
  br label %158

42:                                               ; preds = %4
  %43 = tail call %"class.blink::LocalDOMWindow"* @_ZN5blink14LocalDOMWindow4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"* %1) #9
  %44 = icmp eq %"class.blink::LocalDOMWindow"* %43, null
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %3, i32 11, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.131, i64 0, i64 0)) #9
  br label %167

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML", %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML"* %2, i64 0, i32 4, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %67, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %67

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i33
  %59 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %58, i33 1) #9
  %60 = extractvalue { i33, i1 } %59, 1
  %61 = extractvalue { i33, i1 } %59, 0
  %62 = icmp slt i33 %61, 0
  %63 = or i1 %60, %62
  br i1 %63, label %64, label %65, !prof !2

64:                                               ; preds = %55
  tail call void @llvm.trap() #9
  unreachable

65:                                               ; preds = %55
  %66 = trunc i33 %61 to i32
  store i32 %66, i32* %56, align 4
  br label %67

67:                                               ; preds = %46, %50, %65
  %68 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* nonnull %43) #9
  %69 = tail call %"class.WTF::StringImpl"* @_ZN5blink24TrustedTypesCheckForHTMLEN3WTF6StringEPKNS_16ExecutionContextERNS_14ExceptionStateE(%"class.WTF::StringImpl"* %48, %"class.blink::ExecutionContext"* %68, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  %70 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64 40) #9
  %71 = bitcast i8* %70 to %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*
  %72 = bitcast i8* %70 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink41V8UnionDocumentOrDocumentFragmentOrStringE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %72, align 8
  %73 = getelementptr inbounds i8, i8* %70, i64 8
  %74 = bitcast i8* %73 to i32*
  store i32 2, i32* %74, align 8
  %75 = getelementptr inbounds i8, i8* %70, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 16, i1 false) #9
  %76 = getelementptr inbounds i8, i8* %70, i64 32
  %77 = bitcast i8* %76 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %69, %"class.WTF::StringImpl"** %77, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %78, label %96, label %79

79:                                               ; preds = %67
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %101

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i33
  %88 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %87, i33 1) #9
  %89 = extractvalue { i33, i1 } %88, 1
  %90 = extractvalue { i33, i1 } %88, 0
  %91 = icmp slt i33 %90, 0
  %92 = or i1 %89, %91
  br i1 %92, label %93, label %94, !prof !2

93:                                               ; preds = %84
  tail call void @llvm.trap() #9
  unreachable

94:                                               ; preds = %84
  %95 = trunc i33 %90 to i32
  store i32 %95, i32* %85, align 4
  br label %101

96:                                               ; preds = %67
  %97 = getelementptr inbounds i8, i8* %70, i64 -4
  %98 = bitcast i8* %97 to i16*
  %99 = load atomic i16, i16* %98 monotonic, align 2
  %100 = or i16 %99, 1
  store atomic i16 %100, i16* %98 release, align 2
  br label %117

101:                                              ; preds = %79, %94
  %102 = getelementptr inbounds i8, i8* %70, i64 -4
  %103 = bitcast i8* %102 to i16*
  %104 = load atomic i16, i16* %103 monotonic, align 2
  %105 = or i16 %104, 1
  store atomic i16 %105, i16* %103 release, align 2
  %106 = load atomic i32, i32* %80 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %101
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %101
  %114 = phi i32 [ %112, %111 ], [ %110, %101 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %69) #9
  br label %117

117:                                              ; preds = %116, %113, %96
  %118 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %119 = load i32, i32* %118, align 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %158, label %167

121:                                              ; preds = %4
  %122 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML", %"class.blink::V8UnionDocumentOrDocumentFragmentOrStringOrTrustedHTML"* %2, i64 0, i32 5, i32 0, i32 0
  %123 = load %"class.blink::TrustedHTML"*, %"class.blink::TrustedHTML"** %122, align 8
  %124 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink11TrustedHTML8toStringEv(%"class.blink::TrustedHTML"* %123) #9
  %125 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64 40) #9
  %126 = bitcast i8* %125 to %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*
  %127 = bitcast i8* %125 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink41V8UnionDocumentOrDocumentFragmentOrStringE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %127, align 8
  %128 = getelementptr inbounds i8, i8* %125, i64 8
  %129 = bitcast i8* %128 to i32*
  store i32 2, i32* %129, align 8
  %130 = getelementptr inbounds i8, i8* %125, i64 16
  %131 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %124, i64 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 16, i1 false) #9
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = getelementptr inbounds i8, i8* %125, i64 32
  %134 = bitcast i8* %133 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %132, %"class.WTF::StringImpl"** %134, align 8
  %135 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %135, label %153, label %136

136:                                              ; preds = %121
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load atomic i32, i32* %137 monotonic, align 4
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %153

141:                                              ; preds = %136
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i33
  %145 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %144, i33 1) #9
  %146 = extractvalue { i33, i1 } %145, 1
  %147 = extractvalue { i33, i1 } %145, 0
  %148 = icmp slt i33 %147, 0
  %149 = or i1 %146, %148
  br i1 %149, label %150, label %151, !prof !2

150:                                              ; preds = %141
  tail call void @llvm.trap() #9
  unreachable

151:                                              ; preds = %141
  %152 = trunc i33 %147 to i32
  store i32 %152, i32* %142, align 4
  br label %153

153:                                              ; preds = %121, %136, %151
  %154 = getelementptr inbounds i8, i8* %125, i64 -4
  %155 = bitcast i8* %154 to i16*
  %156 = load atomic i16, i16* %155 monotonic, align 2
  %157 = or i16 %156, 1
  store atomic i16 %157, i16* %155 release, align 2
  br label %158

158:                                              ; preds = %117, %4, %153, %23, %7
  %159 = phi %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* [ null, %4 ], [ %126, %153 ], [ %71, %117 ], [ %28, %23 ], [ %12, %7 ]
  %160 = tail call %"class.blink::LocalDOMWindow"* @_ZN5blink14LocalDOMWindow4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"* %1) #9
  %161 = tail call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer15PrepareFragmentEPNS_14LocalDOMWindowEPNS_11ScriptStateEPKNS_41V8UnionDocumentOrDocumentFragmentOrStringERNS_14ExceptionStateE(%"class.blink::Sanitizer"* undef, %"class.blink::LocalDOMWindow"* %160, %"class.blink::ScriptState"* %1, %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %159, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  %162 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %158
  %166 = tail call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer12DoSanitizingEPNS_16DocumentFragmentEPNS_14LocalDOMWindowERNS_14ExceptionStateE(%"class.blink::Sanitizer"* %0, %"class.blink::DocumentFragment"* %161, %"class.blink::LocalDOMWindow"* %160, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  br label %167

167:                                              ; preds = %165, %158, %45, %117
  %168 = phi %"class.blink::DocumentFragment"* [ null, %117 ], [ null, %45 ], [ %166, %165 ], [ null, %158 ]
  ret %"class.blink::DocumentFragment"* %168
}

declare %"class.blink::LocalDOMWindow"* @_ZN5blink14LocalDOMWindow4FromEPKNS_11ScriptStateE(%"class.blink::ScriptState"*) local_unnamed_addr #2

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink24TrustedTypesCheckForHTMLEN3WTF6StringEPKNS_16ExecutionContextERNS_14ExceptionStateE(%"class.WTF::StringImpl"*, %"class.blink::ExecutionContext"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

declare %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"*) unnamed_addr #2

declare dereferenceable(8) %"class.WTF::String"* @_ZNK5blink11TrustedHTML8toStringEv(%"class.blink::TrustedHTML"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer15PrepareFragmentEPNS_14LocalDOMWindowEPNS_11ScriptStateEPKNS_41V8UnionDocumentOrDocumentFragmentOrStringERNS_14ExceptionStateE(%"class.blink::Sanitizer"* nocapture readnone, %"class.blink::LocalDOMWindow"*, %"class.blink::ScriptState"*, %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = icmp eq %"class.blink::LocalDOMWindow"* %1, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %5
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %4, i32 11, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.131, i64 0, i64 0)) #9
  br label %137

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrString", %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %3, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  switch i32 %13, label %137 [
    i32 0, label %14
    i32 1, label %33
    i32 2, label %47
  ]

14:                                               ; preds = %11
  %15 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* nonnull %1) #9
  %16 = icmp eq %"class.blink::ExecutionContext"* %15, null
  %17 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %15, i64 0, i32 3
  %18 = icmp eq %"class.blink::UseCounter"* %17, null
  %19 = or i1 %16, %18
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.blink::UseCounter"* %17 to void (%"class.blink::UseCounter"*, i32)***
  %22 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %22, i64 3
  %24 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %23, align 8
  tail call void %24(%"class.blink::UseCounter"* nonnull %17, i32 3820) #9
  br label %25

25:                                               ; preds = %14, %20
  %26 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrString", %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %3, i64 0, i32 2, i32 0, i32 0
  %27 = load %"class.blink::Document"*, %"class.blink::Document"** %26, align 8
  %28 = tail call %"class.blink::DocumentFragment"* @_ZN5blink8Document22createDocumentFragmentEv(%"class.blink::Document"* %27) #9
  %29 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %28, i64 0, i32 0
  %30 = load %"class.blink::Document"*, %"class.blink::Document"** %26, align 8
  %31 = tail call %"class.blink::HTMLElement"* @_ZNK5blink8Document4bodyEv(%"class.blink::Document"* %30) #9
  %32 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %31, i64 0, i32 0, i32 0
  tail call void @_ZN5blink13ContainerNode19CloneChildNodesFromERKS0_NS_17CloneChildrenFlagE(%"class.blink::ContainerNode"* %29, %"class.blink::ContainerNode"* dereferenceable(80) %32, i32 1) #9
  br label %137

33:                                               ; preds = %11
  %34 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* nonnull %1) #9
  %35 = icmp eq %"class.blink::ExecutionContext"* %34, null
  %36 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %34, i64 0, i32 3
  %37 = icmp eq %"class.blink::UseCounter"* %36, null
  %38 = or i1 %35, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %33
  %40 = bitcast %"class.blink::UseCounter"* %36 to void (%"class.blink::UseCounter"*, i32)***
  %41 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %41, i64 3
  %43 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %42, align 8
  tail call void %43(%"class.blink::UseCounter"* nonnull %36, i32 3821) #9
  br label %44

44:                                               ; preds = %33, %39
  %45 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrString", %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %3, i64 0, i32 3, i32 0, i32 0
  %46 = load %"class.blink::DocumentFragment"*, %"class.blink::DocumentFragment"** %45, align 8
  br label %137

47:                                               ; preds = %11
  %48 = tail call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* nonnull %1) #9
  %49 = icmp eq %"class.blink::ExecutionContext"* %48, null
  %50 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %48, i64 0, i32 3
  %51 = icmp eq %"class.blink::UseCounter"* %50, null
  %52 = or i1 %49, %51
  br i1 %52, label %58, label %53

53:                                               ; preds = %47
  %54 = bitcast %"class.blink::UseCounter"* %50 to void (%"class.blink::UseCounter"*, i32)***
  %55 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %55, i64 3
  %57 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %56, align 8
  tail call void %57(%"class.blink::UseCounter"* nonnull %50, i32 3819) #9
  br label %58

58:                                               ; preds = %47, %53
  %59 = tail call %"class.blink::Document"* @_ZNK5blink14LocalDOMWindow8documentEv(%"class.blink::LocalDOMWindow"* nonnull %1) #9
  %60 = icmp eq %"class.blink::Document"* %59, null
  br i1 %60, label %61, label %110

61:                                               ; preds = %58
  %62 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 24) #9
  %63 = bitcast i8* %62 to %"class.blink::DOMParser"*
  tail call void @_ZN5blink9DOMParserC1EPNS_11ScriptStateE(%"class.blink::DOMParser"* %63, %"class.blink::ScriptState"* %2) #9
  %64 = getelementptr inbounds i8, i8* %62, i64 -4
  %65 = bitcast i8* %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = or i16 %66, 1
  store atomic i16 %67, i16* %65 release, align 2
  %68 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.132, i64 0, i64 0), i64 41) #9
  %69 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.133, i64 0, i64 0), i64 9) #9
  %70 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 16) #9
  %71 = bitcast i8* %70 to %"class.blink::ParseFromStringOptions"*
  call void @_ZN5blink22ParseFromStringOptionsC1Ev(%"class.blink::ParseFromStringOptions"* %71) #9
  %72 = getelementptr inbounds i8, i8* %70, i64 -4
  %73 = bitcast i8* %72 to i16*
  %74 = load atomic i16, i16* %73 monotonic, align 2
  %75 = or i16 %74, 1
  store atomic i16 %75, i16* %73 release, align 2
  %76 = call %"class.blink::Document"* @_ZN5blink9DOMParser15parseFromStringERKN3WTF6StringES4_PKNS_22ParseFromStringOptionsE(%"class.blink::DOMParser"* %63, %"class.WTF::String"* nonnull dereferenceable(8) %7, %"class.WTF::String"* nonnull dereferenceable(8) %8, %"class.blink::ParseFromStringOptions"* %71) #9
  %77 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %61
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #9
  br label %93

93:                                               ; preds = %61, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #9
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %131, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load atomic i32, i32* %98 monotonic, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  br i1 %101, label %104, label %106

104:                                              ; preds = %97
  %105 = add i32 %103, -1
  store i32 %105, i32* %102, align 4
  br label %106

106:                                              ; preds = %104, %97
  %107 = phi i32 [ %105, %104 ], [ %103, %97 ]
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %131

109:                                              ; preds = %106
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %95) #9
  br label %131

110:                                              ; preds = %58
  %111 = tail call %"class.blink::Document"* @_ZNK5blink14LocalDOMWindow8documentEv(%"class.blink::LocalDOMWindow"* nonnull %1) #9
  %112 = tail call dereferenceable(24) %"class.blink::DOMImplementation"* @_ZN5blink8Document14implementationEv(%"class.blink::Document"* %111) #9
  %113 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %113) #9
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %114, align 8
  %115 = call %"class.blink::Document"* @_ZN5blink17DOMImplementation18createHTMLDocumentERKN3WTF6StringE(%"class.blink::DOMImplementation"* %112, %"class.WTF::String"* nonnull dereferenceable(8) %6) #9
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %131, label %118

118:                                              ; preds = %110
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  br i1 %122, label %125, label %127

125:                                              ; preds = %118
  %126 = add i32 %124, -1
  store i32 %126, i32* %123, align 4
  br label %127

127:                                              ; preds = %125, %118
  %128 = phi i32 [ %126, %125 ], [ %124, %118 ]
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %127
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %116) #9
  br label %131

131:                                              ; preds = %130, %127, %110, %93, %106, %109
  %132 = phi i8* [ %68, %109 ], [ %68, %106 ], [ %68, %93 ], [ %113, %110 ], [ %113, %127 ], [ %113, %130 ]
  %133 = phi %"class.blink::Document"* [ %76, %109 ], [ %76, %106 ], [ %76, %93 ], [ %115, %110 ], [ %115, %127 ], [ %115, %130 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #9
  %134 = call %"class.blink::Range"* @_ZN5blink8Document11createRangeEv(%"class.blink::Document"* %133) #9
  %135 = getelementptr inbounds %"class.blink::V8UnionDocumentOrDocumentFragmentOrString", %"class.blink::V8UnionDocumentOrDocumentFragmentOrString"* %3, i64 0, i32 4
  %136 = call %"class.blink::DocumentFragment"* @_ZN5blink5Range24createContextualFragmentERKN3WTF6StringERNS_14ExceptionStateE(%"class.blink::Range"* %134, %"class.WTF::String"* dereferenceable(8) %135, %"class.blink::ExceptionState"* dereferenceable(72) %4) #9
  br label %137

137:                                              ; preds = %11, %131, %44, %25, %10
  %138 = phi %"class.blink::DocumentFragment"* [ %136, %131 ], [ %46, %44 ], [ %28, %25 ], [ null, %10 ], [ null, %11 ]
  ret %"class.blink::DocumentFragment"* %138
}

declare %"class.blink::DocumentFragment"* @_ZN5blink8Document22createDocumentFragmentEv(%"class.blink::Document"*) local_unnamed_addr #2

declare void @_ZN5blink13ContainerNode19CloneChildNodesFromERKS0_NS_17CloneChildrenFlagE(%"class.blink::ContainerNode"*, %"class.blink::ContainerNode"* dereferenceable(80), i32) local_unnamed_addr #2

declare %"class.blink::HTMLElement"* @_ZNK5blink8Document4bodyEv(%"class.blink::Document"*) local_unnamed_addr #2

declare %"class.blink::Document"* @_ZNK5blink14LocalDOMWindow8documentEv(%"class.blink::LocalDOMWindow"*) local_unnamed_addr #2

declare dereferenceable(24) %"class.blink::DOMImplementation"* @_ZN5blink8Document14implementationEv(%"class.blink::Document"*) local_unnamed_addr #2

declare %"class.blink::Document"* @_ZN5blink17DOMImplementation18createHTMLDocumentERKN3WTF6StringE(%"class.blink::DOMImplementation"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %"class.blink::Document"* @_ZN5blink9DOMParser15parseFromStringERKN3WTF6StringES4_PKNS_22ParseFromStringOptionsE(%"class.blink::DOMParser"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.blink::ParseFromStringOptions"*) local_unnamed_addr #2

declare %"class.blink::Range"* @_ZN5blink8Document11createRangeEv(%"class.blink::Document"*) local_unnamed_addr #2

declare %"class.blink::DocumentFragment"* @_ZN5blink5Range24createContextualFragmentERKN3WTF6StringERNS_14ExceptionStateE(%"class.blink::Range"*, %"class.WTF::String"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer12DoSanitizingEPNS_16DocumentFragmentEPNS_14LocalDOMWindowERNS_14ExceptionStateE(%"class.blink::Sanitizer"*, %"class.blink::DocumentFragment"* returned, %"class.blink::LocalDOMWindow"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.blink::Node"*, %"class.blink::Node"** %8, align 8
  %10 = icmp eq %"class.blink::Node"* %9, null
  br i1 %10, label %589, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %1, i64 0, i32 0, i32 0
  %13 = bitcast %"class.WTF::String"* %5 to i8*
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %15 = bitcast %"class.WTF::String"* %6 to i8*
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %17 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  %18 = bitcast %"class.WTF::AtomicString"* %7 to i64*
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 4, i32 0, i32 0
  %21 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 5
  %23 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %25 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %26 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 1, i32 0, i32 1
  %27 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %28 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %30 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kTemplateTagE, align 8
  %31 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %30, i64 0, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %11, %58
  %33 = phi %"class.blink::Node"* [ %9, %11 ], [ %59, %58 ]
  %34 = bitcast %"class.blink::Node"* %33 to i32 (%"class.blink::Node"*)***
  %35 = load i32 (%"class.blink::Node"*)**, i32 (%"class.blink::Node"*)*** %34, align 8
  %36 = getelementptr inbounds i32 (%"class.blink::Node"*)*, i32 (%"class.blink::Node"*)** %35, i64 30
  %37 = load i32 (%"class.blink::Node"*)*, i32 (%"class.blink::Node"*)** %36, align 8
  %38 = call i32 %37(%"class.blink::Node"* nonnull %33) #9
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %61, label %40

40:                                               ; preds = %32
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 1
  %47 = bitcast %"class.blink::Node"* %46 to %"class.blink::Node"**
  %48 = load %"class.blink::Node"*, %"class.blink::Node"** %47, align 8
  %49 = icmp eq %"class.blink::Node"* %48, null
  br i1 %49, label %50, label %58

50:                                               ; preds = %45, %40
  %51 = icmp eq %"class.blink::Node"* %33, %12
  br i1 %51, label %589, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %54 = load %"class.blink::Node"*, %"class.blink::Node"** %53, align 8
  %55 = icmp eq %"class.blink::Node"* %54, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* nonnull dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %58

58:                                               ; preds = %56, %52, %45, %588
  %59 = phi %"class.blink::Node"* [ %572, %588 ], [ %57, %56 ], [ %54, %52 ], [ %48, %45 ]
  %60 = icmp eq %"class.blink::Node"* %59, null
  br i1 %60, label %589, label %32

61:                                               ; preds = %32
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #9
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9
  %62 = bitcast %"class.blink::Node"* %33 to %"class.WTF::StringImpl"* (%"class.blink::Node"*)***
  %63 = load %"class.WTF::StringImpl"* (%"class.blink::Node"*)**, %"class.WTF::StringImpl"* (%"class.blink::Node"*)*** %62, align 8
  %64 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::Node"*)*, %"class.WTF::StringImpl"* (%"class.blink::Node"*)** %63, i64 27
  %65 = load %"class.WTF::StringImpl"* (%"class.blink::Node"*)*, %"class.WTF::StringImpl"* (%"class.blink::Node"*)** %64, align 8
  %66 = call %"class.WTF::StringImpl"* %65(%"class.blink::Node"* nonnull %33) #9
  store %"class.WTF::StringImpl"* %66, %"class.WTF::StringImpl"** %16, align 8
  %67 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"* nonnull %6) #9
  store %"class.WTF::StringImpl"* %67, %"class.WTF::StringImpl"** %14, align 8
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %83, label %70

70:                                               ; preds = %61
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  br i1 %74, label %77, label %79

77:                                               ; preds = %70
  %78 = add i32 %76, -1
  store i32 %78, i32* %75, align 4
  br label %79

79:                                               ; preds = %77, %70
  %80 = phi i32 [ %78, %77 ], [ %76, %70 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %79
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %68) #9
  br label %83

83:                                               ; preds = %61, %79, %82
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  %84 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10LowerASCIIEv(%"class.WTF::String"* nonnull %5) #9
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %109, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 acquire, align 4
  %89 = and i32 %88, 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %86
  %92 = load atomic i32, i32* %87 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %109

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i33
  %99 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #9
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !2

104:                                              ; preds = %95
  call void @llvm.trap() #9
  unreachable

105:                                              ; preds = %95
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %96, align 4
  br label %109

107:                                              ; preds = %86
  %108 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %84) #9
  br label %109

109:                                              ; preds = %83, %91, %105, %107
  %110 = phi %"class.WTF::StringImpl"* [ %108, %107 ], [ %84, %91 ], [ %84, %105 ], [ null, %83 ]
  %111 = ptrtoint %"class.WTF::StringImpl"* %110 to i64
  store i64 %111, i64* %18, align 8
  %112 = call zeroext i1 @_ZN5blink13CustomElement11IsValidNameERKN3WTF12AtomicStringEb(%"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, i1 zeroext false)
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %128, label %115

115:                                              ; preds = %109
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #9
  br label %128

128:                                              ; preds = %109, %124, %127
  br i1 %85, label %142, label %129

129:                                              ; preds = %128
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  br i1 %133, label %136, label %138

136:                                              ; preds = %129
  %137 = add i32 %135, -1
  store i32 %137, i32* %134, align 4
  br label %138

138:                                              ; preds = %136, %129
  %139 = phi i32 [ %137, %136 ], [ %135, %129 ]
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #9
  br label %142

142:                                              ; preds = %128, %138, %141
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  %143 = load %"class.WTF::String"*, %"class.WTF::String"** %20, align 8
  %144 = icmp eq %"class.WTF::String"* %143, null
  br i1 %144, label %220, label %145

145:                                              ; preds = %142
  %146 = load i32, i32* %21, align 8
  %147 = add i32 %146, -1
  %148 = zext i32 %147 to i64
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = lshr i32 %151, 8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %145
  %155 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %149) #9
  br label %156

156:                                              ; preds = %154, %145
  %157 = phi i32 [ %155, %154 ], [ %152, %145 ]
  %158 = and i32 %157, %147
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %143, i64 %159
  %161 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %160, i64 0, i32 0, i32 0
  %162 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %161, align 8
  %163 = icmp eq %"class.WTF::StringImpl"* %162, null
  br i1 %163, label %220, label %164

164:                                              ; preds = %156
  %165 = xor i32 %157, -1
  %166 = lshr i32 %157, 23
  %167 = add i32 %166, %165
  %168 = shl i32 %167, 12
  %169 = xor i32 %168, %167
  %170 = lshr i32 %169, 7
  %171 = xor i32 %170, %169
  %172 = shl i32 %171, 2
  %173 = xor i32 %172, %171
  %174 = lshr i32 %173, 20
  %175 = xor i32 %174, %173
  %176 = or i32 %175, 1
  %177 = zext i32 %176 to i64
  br label %178

178:                                              ; preds = %189, %164
  %179 = phi %"class.WTF::StringImpl"* [ %162, %164 ], [ %196, %189 ]
  %180 = phi %"class.WTF::String"* [ %160, %164 ], [ %194, %189 ]
  %181 = phi i64 [ %159, %164 ], [ %193, %189 ]
  %182 = phi i64 [ 0, %164 ], [ %191, %189 ]
  %183 = bitcast %"class.WTF::String"* %180 to i8**
  %184 = load i8*, i8** %183, align 8
  %185 = icmp eq i8* %184, inttoptr (i64 -1 to i8*)
  br i1 %185, label %189, label %186

186:                                              ; preds = %178
  %187 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %188 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %179, %"class.WTF::StringImpl"* %187) #9
  br i1 %188, label %198, label %189

189:                                              ; preds = %186, %178
  %190 = icmp eq i64 %182, 0
  %191 = select i1 %190, i64 %177, i64 %182
  %192 = add i64 %191, %181
  %193 = and i64 %192, %148
  %194 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %143, i64 %193
  %195 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %194, i64 0, i32 0, i32 0
  %196 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %195, align 8
  %197 = icmp eq %"class.WTF::StringImpl"* %196, null
  br i1 %197, label %220, label %178

198:                                              ; preds = %186
  %199 = icmp eq %"class.WTF::String"* %180, null
  br i1 %199, label %220, label %200

200:                                              ; preds = %198
  %201 = icmp eq %"class.blink::Node"* %12, %33
  br i1 %201, label %208, label %202

202:                                              ; preds = %200
  %203 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %204 = load %"class.blink::Node"*, %"class.blink::Node"** %203, align 8
  %205 = icmp eq %"class.blink::Node"* %204, null
  br i1 %205, label %206, label %208

206:                                              ; preds = %202
  %207 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %208

208:                                              ; preds = %200, %202, %206
  %209 = phi %"class.blink::Node"* [ %207, %206 ], [ null, %200 ], [ %204, %202 ]
  call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %33) #9
  %210 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %211 = icmp eq %"class.blink::ExecutionContext"* %210, null
  %212 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %210, i64 0, i32 3
  %213 = icmp eq %"class.blink::UseCounter"* %212, null
  %214 = or i1 %211, %213
  br i1 %214, label %571, label %215

215:                                              ; preds = %208
  %216 = bitcast %"class.blink::UseCounter"* %212 to void (%"class.blink::UseCounter"*, i32)***
  %217 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %216, align 8
  %218 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %217, i64 3
  %219 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %218, align 8
  call void %219(%"class.blink::UseCounter"* nonnull %212, i32 3818) #9
  br label %571

220:                                              ; preds = %189, %198, %156, %142
  br i1 %112, label %221, label %244

221:                                              ; preds = %220
  %222 = load i8, i8* %22, align 8, !range !4
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %224, label %244

224:                                              ; preds = %221
  %225 = icmp eq %"class.blink::Node"* %12, %33
  br i1 %225, label %232, label %226

226:                                              ; preds = %224
  %227 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %228 = load %"class.blink::Node"*, %"class.blink::Node"** %227, align 8
  %229 = icmp eq %"class.blink::Node"* %228, null
  br i1 %229, label %230, label %232

230:                                              ; preds = %226
  %231 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %232

232:                                              ; preds = %224, %226, %230
  %233 = phi %"class.blink::Node"* [ %231, %230 ], [ null, %224 ], [ %228, %226 ]
  call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %33) #9
  %234 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %235 = icmp eq %"class.blink::ExecutionContext"* %234, null
  %236 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %234, i64 0, i32 3
  %237 = icmp eq %"class.blink::UseCounter"* %236, null
  %238 = or i1 %235, %237
  br i1 %238, label %571, label %239

239:                                              ; preds = %232
  %240 = bitcast %"class.blink::UseCounter"* %236 to void (%"class.blink::UseCounter"*, i32)***
  %241 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %240, align 8
  %242 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %241, i64 3
  %243 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %242, align 8
  call void %243(%"class.blink::UseCounter"* nonnull %236, i32 3818) #9
  br label %571

244:                                              ; preds = %221, %220
  %245 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 1
  %246 = load i32, i32* %245, align 8
  %247 = and i32 %246, 48
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %269, label %249

249:                                              ; preds = %244
  %250 = icmp eq %"class.blink::Node"* %12, %33
  br i1 %250, label %257, label %251

251:                                              ; preds = %249
  %252 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %253 = load %"class.blink::Node"*, %"class.blink::Node"** %252, align 8
  %254 = icmp eq %"class.blink::Node"* %253, null
  br i1 %254, label %255, label %257

255:                                              ; preds = %251
  %256 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %257

257:                                              ; preds = %249, %251, %255
  %258 = phi %"class.blink::Node"* [ %256, %255 ], [ null, %249 ], [ %253, %251 ]
  call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %33) #9
  %259 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %260 = icmp eq %"class.blink::ExecutionContext"* %259, null
  %261 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %259, i64 0, i32 3
  %262 = icmp eq %"class.blink::UseCounter"* %261, null
  %263 = or i1 %260, %262
  br i1 %263, label %571, label %264

264:                                              ; preds = %257
  %265 = bitcast %"class.blink::UseCounter"* %261 to void (%"class.blink::UseCounter"*, i32)***
  %266 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %265, align 8
  %267 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %266, i64 3
  %268 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %267, align 8
  call void %268(%"class.blink::UseCounter"* nonnull %261, i32 3818) #9
  br label %571

269:                                              ; preds = %244
  %270 = load %"class.WTF::String"*, %"class.WTF::String"** %23, align 8
  %271 = icmp eq %"class.WTF::String"* %270, null
  br i1 %271, label %347, label %272

272:                                              ; preds = %269
  %273 = load i32, i32* %24, align 8
  %274 = add i32 %273, -1
  %275 = zext i32 %274 to i64
  %276 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %276, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load atomic i32, i32* %277 monotonic, align 4
  %279 = lshr i32 %278, 8
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %283

281:                                              ; preds = %272
  %282 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %276) #9
  br label %283

283:                                              ; preds = %281, %272
  %284 = phi i32 [ %282, %281 ], [ %279, %272 ]
  %285 = and i32 %284, %274
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %270, i64 %286
  %288 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %287, i64 0, i32 0, i32 0
  %289 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %288, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %289, null
  br i1 %290, label %347, label %291

291:                                              ; preds = %283
  %292 = xor i32 %284, -1
  %293 = lshr i32 %284, 23
  %294 = add i32 %293, %292
  %295 = shl i32 %294, 12
  %296 = xor i32 %295, %294
  %297 = lshr i32 %296, 7
  %298 = xor i32 %297, %296
  %299 = shl i32 %298, 2
  %300 = xor i32 %299, %298
  %301 = lshr i32 %300, 20
  %302 = xor i32 %301, %300
  %303 = or i32 %302, 1
  %304 = zext i32 %303 to i64
  br label %305

305:                                              ; preds = %316, %291
  %306 = phi %"class.WTF::StringImpl"* [ %289, %291 ], [ %323, %316 ]
  %307 = phi %"class.WTF::String"* [ %287, %291 ], [ %321, %316 ]
  %308 = phi i64 [ %286, %291 ], [ %320, %316 ]
  %309 = phi i64 [ 0, %291 ], [ %318, %316 ]
  %310 = bitcast %"class.WTF::String"* %307 to i8**
  %311 = load i8*, i8** %310, align 8
  %312 = icmp eq i8* %311, inttoptr (i64 -1 to i8*)
  br i1 %312, label %316, label %313

313:                                              ; preds = %305
  %314 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %315 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %306, %"class.WTF::StringImpl"* %314) #9
  br i1 %315, label %325, label %316

316:                                              ; preds = %313, %305
  %317 = icmp eq i64 %309, 0
  %318 = select i1 %317, i64 %304, i64 %309
  %319 = add i64 %318, %308
  %320 = and i64 %319, %275
  %321 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %270, i64 %320
  %322 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %321, i64 0, i32 0, i32 0
  %323 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %322, align 8
  %324 = icmp eq %"class.WTF::StringImpl"* %323, null
  br i1 %324, label %347, label %305

325:                                              ; preds = %313
  %326 = icmp eq %"class.WTF::String"* %307, null
  br i1 %326, label %347, label %327

327:                                              ; preds = %325
  %328 = icmp eq %"class.blink::Node"* %12, %33
  br i1 %328, label %335, label %329

329:                                              ; preds = %327
  %330 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %331 = load %"class.blink::Node"*, %"class.blink::Node"** %330, align 8
  %332 = icmp eq %"class.blink::Node"* %331, null
  br i1 %332, label %333, label %335

333:                                              ; preds = %329
  %334 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %335

335:                                              ; preds = %327, %329, %333
  %336 = phi %"class.blink::Node"* [ %334, %333 ], [ null, %327 ], [ %331, %329 ]
  call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %33) #9
  %337 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %338 = icmp eq %"class.blink::ExecutionContext"* %337, null
  %339 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %337, i64 0, i32 3
  %340 = icmp eq %"class.blink::UseCounter"* %339, null
  %341 = or i1 %338, %340
  br i1 %341, label %571, label %342

342:                                              ; preds = %335
  %343 = bitcast %"class.blink::UseCounter"* %339 to void (%"class.blink::UseCounter"*, i32)***
  %344 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %343, align 8
  %345 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %344, i64 3
  %346 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %345, align 8
  call void %346(%"class.blink::UseCounter"* nonnull %339, i32 3818) #9
  br label %571

347:                                              ; preds = %316, %325, %283, %269
  %348 = load %"class.WTF::String"*, %"class.WTF::String"** %25, align 8
  %349 = icmp eq %"class.WTF::String"* %348, null
  br i1 %349, label %443, label %350

350:                                              ; preds = %347
  %351 = load i32, i32* %26, align 8
  %352 = add i32 %351, -1
  %353 = zext i32 %352 to i64
  %354 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %355 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %354, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load atomic i32, i32* %355 monotonic, align 4
  %357 = lshr i32 %356, 8
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %361

359:                                              ; preds = %350
  %360 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %354) #9
  br label %361

361:                                              ; preds = %359, %350
  %362 = phi i32 [ %360, %359 ], [ %357, %350 ]
  %363 = and i32 %362, %352
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %348, i64 %364
  %366 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %365, i64 0, i32 0, i32 0
  %367 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %366, align 8
  %368 = icmp eq %"class.WTF::StringImpl"* %367, null
  br i1 %368, label %443, label %369

369:                                              ; preds = %361
  %370 = xor i32 %362, -1
  %371 = lshr i32 %362, 23
  %372 = add i32 %371, %370
  %373 = shl i32 %372, 12
  %374 = xor i32 %373, %372
  %375 = lshr i32 %374, 7
  %376 = xor i32 %375, %374
  %377 = shl i32 %376, 2
  %378 = xor i32 %377, %376
  %379 = lshr i32 %378, 20
  %380 = xor i32 %379, %378
  %381 = or i32 %380, 1
  %382 = zext i32 %381 to i64
  br label %383

383:                                              ; preds = %394, %369
  %384 = phi %"class.WTF::StringImpl"* [ %367, %369 ], [ %401, %394 ]
  %385 = phi %"class.WTF::String"* [ %365, %369 ], [ %399, %394 ]
  %386 = phi i64 [ %364, %369 ], [ %398, %394 ]
  %387 = phi i64 [ 0, %369 ], [ %396, %394 ]
  %388 = bitcast %"class.WTF::String"* %385 to i8**
  %389 = load i8*, i8** %388, align 8
  %390 = icmp eq i8* %389, inttoptr (i64 -1 to i8*)
  br i1 %390, label %394, label %391

391:                                              ; preds = %383
  %392 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %393 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %384, %"class.WTF::StringImpl"* %392) #9
  br i1 %393, label %403, label %394

394:                                              ; preds = %391, %383
  %395 = icmp eq i64 %387, 0
  %396 = select i1 %395, i64 %382, i64 %387
  %397 = add i64 %396, %386
  %398 = and i64 %397, %353
  %399 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %348, i64 %398
  %400 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %399, i64 0, i32 0, i32 0
  %401 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %400, align 8
  %402 = icmp eq %"class.WTF::StringImpl"* %401, null
  br i1 %402, label %443, label %383

403:                                              ; preds = %391
  %404 = icmp eq %"class.WTF::String"* %385, null
  br i1 %404, label %443, label %405

405:                                              ; preds = %403
  %406 = call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %33) #9
  %407 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %408 = load %"class.blink::Node"*, %"class.blink::Node"** %407, align 8
  %409 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 1
  %410 = bitcast %"class.blink::Node"* %409 to %"class.blink::Node"**
  br label %411

411:                                              ; preds = %405, %418
  %412 = load i32, i32* %245, align 8
  %413 = and i32 %412, 2
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %422, label %415

415:                                              ; preds = %411
  %416 = load %"class.blink::Node"*, %"class.blink::Node"** %410, align 8
  %417 = icmp eq %"class.blink::Node"* %416, null
  br i1 %417, label %422, label %418

418:                                              ; preds = %415
  %419 = call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %406, %"class.blink::Node"* nonnull %416, %"class.blink::Node"* %408, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  %420 = load i32, i32* %27, align 8
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %411, label %431

422:                                              ; preds = %415, %411
  %423 = icmp eq %"class.blink::Node"* %12, %33
  br i1 %423, label %429, label %424

424:                                              ; preds = %422
  %425 = load %"class.blink::Node"*, %"class.blink::Node"** %407, align 8
  %426 = icmp eq %"class.blink::Node"* %425, null
  br i1 %426, label %427, label %429

427:                                              ; preds = %424
  %428 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %429

429:                                              ; preds = %427, %424, %422
  %430 = phi %"class.blink::Node"* [ %428, %427 ], [ null, %422 ], [ %425, %424 ]
  call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %33) #9
  br label %431

431:                                              ; preds = %418, %429
  %432 = phi %"class.blink::Node"* [ %430, %429 ], [ null, %418 ]
  %433 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %434 = icmp eq %"class.blink::ExecutionContext"* %433, null
  %435 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %433, i64 0, i32 3
  %436 = icmp eq %"class.blink::UseCounter"* %435, null
  %437 = or i1 %434, %436
  br i1 %437, label %571, label %438

438:                                              ; preds = %431
  %439 = bitcast %"class.blink::UseCounter"* %435 to void (%"class.blink::UseCounter"*, i32)***
  %440 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %439, align 8
  %441 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %440, i64 3
  %442 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %441, align 8
  call void %442(%"class.blink::UseCounter"* nonnull %435, i32 3818) #9
  br label %571

443:                                              ; preds = %394, %403, %361, %347
  %444 = load %"class.WTF::String"*, %"class.WTF::String"** %28, align 8
  %445 = icmp eq %"class.WTF::String"* %444, null
  br i1 %445, label %501, label %446

446:                                              ; preds = %443
  %447 = load i32, i32* %29, align 8
  %448 = add i32 %447, -1
  %449 = zext i32 %448 to i64
  %450 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %451 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %450, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %452 = load atomic i32, i32* %451 monotonic, align 4
  %453 = lshr i32 %452, 8
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %457

455:                                              ; preds = %446
  %456 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %450) #9
  br label %457

457:                                              ; preds = %455, %446
  %458 = phi i32 [ %456, %455 ], [ %453, %446 ]
  %459 = and i32 %458, %448
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %444, i64 %460
  %462 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %461, i64 0, i32 0, i32 0
  %463 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %462, align 8
  %464 = icmp eq %"class.WTF::StringImpl"* %463, null
  br i1 %464, label %501, label %465

465:                                              ; preds = %457
  %466 = xor i32 %458, -1
  %467 = lshr i32 %458, 23
  %468 = add i32 %467, %466
  %469 = shl i32 %468, 12
  %470 = xor i32 %469, %468
  %471 = lshr i32 %470, 7
  %472 = xor i32 %471, %470
  %473 = shl i32 %472, 2
  %474 = xor i32 %473, %472
  %475 = lshr i32 %474, 20
  %476 = xor i32 %475, %474
  %477 = or i32 %476, 1
  %478 = zext i32 %477 to i64
  br label %479

479:                                              ; preds = %490, %465
  %480 = phi %"class.WTF::StringImpl"* [ %463, %465 ], [ %497, %490 ]
  %481 = phi %"class.WTF::String"* [ %461, %465 ], [ %495, %490 ]
  %482 = phi i64 [ %460, %465 ], [ %494, %490 ]
  %483 = phi i64 [ 0, %465 ], [ %492, %490 ]
  %484 = bitcast %"class.WTF::String"* %481 to i8**
  %485 = load i8*, i8** %484, align 8
  %486 = icmp eq i8* %485, inttoptr (i64 -1 to i8*)
  br i1 %486, label %490, label %487

487:                                              ; preds = %479
  %488 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %489 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %480, %"class.WTF::StringImpl"* %488) #9
  br i1 %489, label %499, label %490

490:                                              ; preds = %487, %479
  %491 = icmp eq i64 %483, 0
  %492 = select i1 %491, i64 %478, i64 %483
  %493 = add i64 %492, %482
  %494 = and i64 %493, %449
  %495 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %444, i64 %494
  %496 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %495, i64 0, i32 0, i32 0
  %497 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %496, align 8
  %498 = icmp eq %"class.WTF::StringImpl"* %497, null
  br i1 %498, label %501, label %479

499:                                              ; preds = %487
  %500 = icmp eq %"class.WTF::String"* %481, null
  br i1 %500, label %501, label %539

501:                                              ; preds = %490, %499, %457, %443
  %502 = call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %33) #9
  %503 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 0, i32 5, i32 0, i32 0
  %504 = load %"class.blink::Node"*, %"class.blink::Node"** %503, align 8
  %505 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 1
  %506 = bitcast %"class.blink::Node"* %505 to %"class.blink::Node"**
  br label %507

507:                                              ; preds = %501, %514
  %508 = load i32, i32* %245, align 8
  %509 = and i32 %508, 2
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %518, label %511

511:                                              ; preds = %507
  %512 = load %"class.blink::Node"*, %"class.blink::Node"** %506, align 8
  %513 = icmp eq %"class.blink::Node"* %512, null
  br i1 %513, label %518, label %514

514:                                              ; preds = %511
  %515 = call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %502, %"class.blink::Node"* nonnull %512, %"class.blink::Node"* %504, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  %516 = load i32, i32* %27, align 8
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %507, label %527

518:                                              ; preds = %511, %507
  %519 = icmp eq %"class.blink::Node"* %12, %33
  br i1 %519, label %525, label %520

520:                                              ; preds = %518
  %521 = load %"class.blink::Node"*, %"class.blink::Node"** %503, align 8
  %522 = icmp eq %"class.blink::Node"* %521, null
  br i1 %522, label %523, label %525

523:                                              ; preds = %520
  %524 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %33, %"class.blink::Node"* %12) #9
  br label %525

525:                                              ; preds = %523, %520, %518
  %526 = phi %"class.blink::Node"* [ %524, %523 ], [ null, %518 ], [ %521, %520 ]
  call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %33) #9
  br label %527

527:                                              ; preds = %514, %525
  %528 = phi %"class.blink::Node"* [ %526, %525 ], [ null, %514 ]
  %529 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %530 = icmp eq %"class.blink::ExecutionContext"* %529, null
  %531 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %529, i64 0, i32 3
  %532 = icmp eq %"class.blink::UseCounter"* %531, null
  %533 = or i1 %530, %532
  br i1 %533, label %571, label %534

534:                                              ; preds = %527
  %535 = bitcast %"class.blink::UseCounter"* %531 to void (%"class.blink::UseCounter"*, i32)***
  %536 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %535, align 8
  %537 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %536, i64 3
  %538 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %537, align 8
  call void %538(%"class.blink::UseCounter"* nonnull %531, i32 3818) #9
  br label %571

539:                                              ; preds = %499
  %540 = load i32, i32* %245, align 8
  %541 = and i32 %540, 48
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %569

543:                                              ; preds = %539
  %544 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %31, align 8
  %545 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %33, i64 1, i32 2
  %546 = bitcast %"class.blink::Member.449"* %545 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %547 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %546, align 8
  %548 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %547, i64 0, i32 3, i32 0, i32 0, i32 0
  %549 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %548, align 8
  %550 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %544, i64 0, i32 3, i32 0, i32 0, i32 0
  %551 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %550, align 8
  %552 = icmp eq %"class.WTF::StringImpl"* %549, %551
  br i1 %552, label %553, label %569

553:                                              ; preds = %543
  %554 = bitcast %"class.blink::Node"* %33 to %"class.blink::HTMLTemplateElement"*
  %555 = call %"class.blink::DocumentFragment"* @_ZNK5blink19HTMLTemplateElement7contentEv(%"class.blink::HTMLTemplateElement"* %554) #9
  %556 = call %"class.blink::DocumentFragment"* @_ZN5blink9Sanitizer12DoSanitizingEPNS_16DocumentFragmentEPNS_14LocalDOMWindowERNS_14ExceptionStateE(%"class.blink::Sanitizer"* %0, %"class.blink::DocumentFragment"* %555, %"class.blink::LocalDOMWindow"* %2, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %557 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %2) #9
  %558 = icmp eq %"class.blink::ExecutionContext"* %557, null
  %559 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %557, i64 0, i32 3
  %560 = icmp eq %"class.blink::UseCounter"* %559, null
  %561 = or i1 %558, %560
  br i1 %561, label %567, label %562

562:                                              ; preds = %553
  %563 = bitcast %"class.blink::UseCounter"* %559 to void (%"class.blink::UseCounter"*, i32)***
  %564 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %563, align 8
  %565 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %564, i64 3
  %566 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %565, align 8
  call void %566(%"class.blink::UseCounter"* nonnull %559, i32 3818) #9
  br label %567

567:                                              ; preds = %553, %562
  %568 = call %"class.blink::Node"* @_ZN5blink9Sanitizer11KeepElementEPNS_4NodeEPNS_16DocumentFragmentERN3WTF6StringEPNS_14LocalDOMWindowE(%"class.blink::Sanitizer"* %0, %"class.blink::Node"* nonnull %33, %"class.blink::DocumentFragment"* %1, %"class.WTF::String"* nonnull dereferenceable(8) %5, %"class.blink::LocalDOMWindow"* %2)
  br label %571

569:                                              ; preds = %539, %543
  %570 = call %"class.blink::Node"* @_ZN5blink9Sanitizer11KeepElementEPNS_4NodeEPNS_16DocumentFragmentERN3WTF6StringEPNS_14LocalDOMWindowE(%"class.blink::Sanitizer"* %0, %"class.blink::Node"* nonnull %33, %"class.blink::DocumentFragment"* %1, %"class.WTF::String"* nonnull dereferenceable(8) %5, %"class.blink::LocalDOMWindow"* %2)
  br label %571

571:                                              ; preds = %534, %527, %438, %431, %342, %335, %264, %257, %239, %232, %215, %208, %569, %567
  %572 = phi %"class.blink::Node"* [ %568, %567 ], [ %570, %569 ], [ %209, %208 ], [ %209, %215 ], [ %233, %232 ], [ %233, %239 ], [ %258, %257 ], [ %258, %264 ], [ %336, %335 ], [ %336, %342 ], [ %432, %431 ], [ %432, %438 ], [ %528, %527 ], [ %528, %534 ]
  %573 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %574 = icmp eq %"class.WTF::StringImpl"* %573, null
  br i1 %574, label %588, label %575

575:                                              ; preds = %571
  %576 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %573, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %577 = load atomic i32, i32* %576 monotonic, align 4
  %578 = and i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %573, i64 0, i32 0
  %581 = load i32, i32* %580, align 4
  br i1 %579, label %582, label %584

582:                                              ; preds = %575
  %583 = add i32 %581, -1
  store i32 %583, i32* %580, align 4
  br label %584

584:                                              ; preds = %582, %575
  %585 = phi i32 [ %583, %582 ], [ %581, %575 ]
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %587, label %588

587:                                              ; preds = %584
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %573) #9
  br label %588

588:                                              ; preds = %571, %584, %587
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #9
  br label %58

589:                                              ; preds = %50, %58, %4
  ret %"class.blink::DocumentFragment"* %1
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink13CustomElement11IsValidNameERKN3WTF12AtomicStringEb(%"class.WTF::AtomicString"* dereferenceable(8), i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  br i1 %1, label %3, label %30

3:                                                ; preds = %2
  %4 = tail call dereferenceable(16) %"class.WTF::Vector.1591"* @_ZN5blink13CustomElement26EmbedderCustomElementNamesEv() #9
  %5 = getelementptr inbounds %"class.WTF::Vector.1591", %"class.WTF::Vector.1591"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.1591", %"class.WTF::Vector.1591"* %4, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 %9
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  br label %15

15:                                               ; preds = %20, %12
  %16 = phi %"class.WTF::AtomicString"* [ %6, %12 ], [ %21, %20 ]
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, %14
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %22 = icmp ult %"class.WTF::AtomicString"* %21, %10
  br i1 %22, label %15, label %30

23:                                               ; preds = %15
  %24 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  %25 = ptrtoint %"class.WTF::AtomicString"* %6 to i64
  %26 = sub i64 %24, %25
  %27 = lshr exact i64 %26, 3
  %28 = trunc i64 %27 to i32
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %163

30:                                               ; preds = %20, %23, %3, %2
  %31 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %163, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 1
  br i1 %38, label %54, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp ugt i32 %42, 1
  br i1 %43, label %44, label %163

44:                                               ; preds = %40
  %45 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = add i32 %42, -1
  %48 = zext i32 %47 to i64
  %49 = tail call i8* @memchr(i8* %46, i32 45, i64 %48) #10
  %50 = icmp eq i8* %49, null
  %51 = ptrtoint i8* %49 to i64
  %52 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  %53 = sub i64 %51, %52
  br i1 %50, label %163, label %68

54:                                               ; preds = %34
  %55 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp ugt i32 %57, 1
  br i1 %58, label %59, label %163

59:                                               ; preds = %54, %64
  %60 = phi i64 [ %65, %64 ], [ 1, %54 ]
  %61 = getelementptr inbounds i16, i16* %55, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 45
  br i1 %63, label %68, label %64

64:                                               ; preds = %59
  %65 = add nuw nsw i64 %60, 1
  %66 = trunc i64 %65 to i32
  %67 = icmp eq i32 %57, %66
  br i1 %67, label %163, label %59

68:                                               ; preds = %59, %44
  %69 = phi i32 [ %42, %44 ], [ %57, %59 ]
  %70 = phi i64 [ %53, %44 ], [ %60, %59 ]
  %71 = trunc i64 %70 to i32
  %72 = icmp eq i32 %71, -1
  %73 = icmp eq i32 %69, 0
  %74 = or i1 %72, %73
  br i1 %74, label %163, label %75

75:                                               ; preds = %68
  %76 = load atomic i32, i32* %35 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %75
  %80 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  br label %86

83:                                               ; preds = %75
  %84 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %85 = load i16, i16* %84, align 2
  br label %86

86:                                               ; preds = %79, %83
  %87 = phi i16 [ %82, %79 ], [ %85, %83 ]
  %88 = add i16 %87, -97
  %89 = icmp ult i16 %88, 26
  br i1 %89, label %90, label %163

90:                                               ; preds = %86
  %91 = load atomic i32, i32* %35 monotonic, align 4
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %117, label %94

94:                                               ; preds = %90
  %95 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %96 = zext i32 %69 to i64
  %97 = icmp ugt i32 %69, 1
  br i1 %97, label %98, label %160

98:                                               ; preds = %94, %114
  %99 = phi i64 [ %115, %114 ], [ 1, %94 ]
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = add i8 %101, -97
  %103 = icmp ult i8 %102, 26
  %104 = add i8 %101, -48
  %105 = icmp ult i8 %104, 10
  %106 = or i1 %103, %105
  br i1 %106, label %114, label %107

107:                                              ; preds = %98
  switch i8 %101, label %108 [
    i8 -73, label %114
    i8 95, label %114
    i8 46, label %114
    i8 45, label %114
  ]

108:                                              ; preds = %107
  %109 = icmp ult i8 %101, -64
  %110 = icmp eq i8 %101, -41
  %111 = or i1 %109, %110
  %112 = icmp ne i8 %101, -9
  %113 = xor i1 %112, %111
  br i1 %113, label %114, label %163

114:                                              ; preds = %98, %107, %107, %107, %107, %108
  %115 = add nuw nsw i64 %99, 1
  %116 = icmp ult i64 %115, %96
  br i1 %116, label %98, label %160

117:                                              ; preds = %90
  %118 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  br label %119

119:                                              ; preds = %158, %117
  %120 = phi %"class.WTF::StringImpl"* [ %32, %117 ], [ %159, %158 ]
  %121 = phi i32 [ 1, %117 ], [ %155, %158 ]
  %122 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %122, label %126, label %123

123:                                              ; preds = %119
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 1
  %125 = load i32, i32* %124, align 4
  br label %126

126:                                              ; preds = %119, %123
  %127 = phi i32 [ %125, %123 ], [ 0, %119 ]
  %128 = icmp ult i32 %121, %127
  br i1 %128, label %129, label %160

129:                                              ; preds = %126
  %130 = add nuw i32 %121, 1
  %131 = zext i32 %121 to i64
  %132 = getelementptr inbounds i16, i16* %118, i64 %131
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = and i32 %134, 64512
  %136 = icmp eq i32 %135, 55296
  br i1 %136, label %137, label %154

137:                                              ; preds = %129
  br i1 %122, label %142, label %138

138:                                              ; preds = %137
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %130, %140
  br i1 %141, label %154, label %142

142:                                              ; preds = %137, %138
  %143 = zext i32 %130 to i64
  %144 = getelementptr inbounds i16, i16* %118, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = and i32 %146, 64512
  %148 = icmp eq i32 %147, 56320
  br i1 %148, label %149, label %154

149:                                              ; preds = %142
  %150 = add i32 %121, 2
  %151 = shl nuw nsw i32 %134, 10
  %152 = add nsw i32 %151, -56613888
  %153 = add nsw i32 %152, %146
  br label %154

154:                                              ; preds = %142, %149, %138, %129
  %155 = phi i32 [ %130, %129 ], [ %150, %149 ], [ %130, %142 ], [ %130, %138 ]
  %156 = phi i32 [ %134, %129 ], [ %153, %149 ], [ %134, %142 ], [ %134, %138 ]
  %157 = tail call zeroext i1 @_ZN5blink9Character32IsPotentialCustomElementNameCharEi(i32 %156) #9
  br i1 %157, label %158, label %163

158:                                              ; preds = %154
  %159 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  br label %119

160:                                              ; preds = %114, %126, %94
  %161 = tail call zeroext i1 @_ZN5blink13CustomElement27IsHyphenatedSpecElementNameERKN3WTF12AtomicStringE(%"class.WTF::AtomicString"* dereferenceable(8) %0) #9
  %162 = xor i1 %161, true
  br label %163

163:                                              ; preds = %64, %108, %154, %23, %68, %44, %54, %40, %30, %86, %160
  %164 = phi i1 [ %162, %160 ], [ true, %23 ], [ false, %68 ], [ false, %86 ], [ false, %30 ], [ false, %40 ], [ false, %54 ], [ false, %44 ], [ false, %154 ], [ false, %108 ], [ false, %64 ]
  ret i1 %164
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String10LowerASCIIEv(%"class.WTF::String"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink9Sanitizer11DropElementEPNS_4NodeEPNS_16DocumentFragmentE(%"class.blink::Sanitizer"* nocapture readnone, %"class.blink::Node"*, %"class.blink::DocumentFragment"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %2, i64 0, i32 0, i32 0
  %5 = icmp eq %"class.blink::Node"* %4, %1
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 5, i32 0, i32 0
  %8 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %9 = icmp eq %"class.blink::Node"* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = tail call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %1, %"class.blink::Node"* %4) #9
  br label %12

12:                                               ; preds = %3, %6, %10
  %13 = phi %"class.blink::Node"* [ %11, %10 ], [ null, %3 ], [ %8, %6 ]
  tail call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %1) #9
  ret %"class.blink::Node"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink9Sanitizer12BlockElementEPNS_4NodeEPNS_16DocumentFragmentERNS_14ExceptionStateE(%"class.blink::Sanitizer"* nocapture readnone, %"class.blink::Node"*, %"class.blink::DocumentFragment"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %1) #9
  %6 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 5, i32 0, i32 0
  %7 = load %"class.blink::Node"*, %"class.blink::Node"** %6, align 8
  %8 = icmp eq %"class.blink::Node"* %1, null
  %9 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1
  %11 = bitcast %"class.blink::Node"* %10 to %"class.blink::Node"**
  %12 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  br i1 %8, label %27, label %13

13:                                               ; preds = %4, %20
  %14 = load i32, i32* %9, align 8
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %27, label %17

17:                                               ; preds = %13
  %18 = load %"class.blink::Node"*, %"class.blink::Node"** %11, align 8
  %19 = icmp eq %"class.blink::Node"* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %17
  %21 = tail call %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"* %5, %"class.blink::Node"* nonnull %18, %"class.blink::Node"* %7, %"class.blink::ExceptionState"* dereferenceable(72) %3) #9
  %22 = load i32, i32* %12, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %13, label %37

24:                                               ; preds = %17
  %25 = load %"class.blink::Node"*, %"class.blink::Node"** %11, align 8
  %26 = icmp eq %"class.blink::Node"* %25, null
  br i1 %26, label %27, label %35

27:                                               ; preds = %13, %4, %24
  %28 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %2, i64 0, i32 0, i32 0
  %29 = icmp eq %"class.blink::Node"* %28, %1
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = load %"class.blink::Node"*, %"class.blink::Node"** %6, align 8
  %32 = icmp eq %"class.blink::Node"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = tail call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %1, %"class.blink::Node"* %28) #9
  br label %35

35:                                               ; preds = %24, %27, %30, %33
  %36 = phi %"class.blink::Node"* [ %34, %33 ], [ null, %27 ], [ %31, %30 ], [ %25, %24 ]
  tail call void @_ZN5blink4Node6removeEv(%"class.blink::Node"* %1) #9
  br label %37

37:                                               ; preds = %20, %35
  %38 = phi %"class.blink::Node"* [ %36, %35 ], [ null, %20 ]
  ret %"class.blink::Node"* %38
}

declare %"class.blink::DocumentFragment"* @_ZNK5blink19HTMLTemplateElement7contentEv(%"class.blink::HTMLTemplateElement"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink9Sanitizer11KeepElementEPNS_4NodeEPNS_16DocumentFragmentERN3WTF6StringEPNS_14LocalDOMWindowE(%"class.blink::Sanitizer"*, %"class.blink::Node"*, %"class.blink::DocumentFragment"*, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::LocalDOMWindow"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = alloca %"class.WTF::StringView", align 8
  %16 = alloca %"class.WTF::StringView", align 8
  %17 = alloca %"class.WTF::StringView", align 8
  %18 = alloca %"class.WTF::StringView", align 8
  %19 = alloca %"class.WTF::StringView", align 8
  %20 = alloca %"class.WTF::Vector", align 8
  %21 = alloca %"class.WTF::String", align 8
  %22 = alloca %"class.WTF::Vector", align 8
  %23 = alloca %"class.WTF::String", align 8
  %24 = alloca %"class.WTF::Vector.1591", align 8
  %25 = alloca %"class.WTF::Vector.1591", align 8
  %26 = alloca %"class.WTF::Vector", align 8
  %27 = alloca %"class.WTF::Vector", align 8
  %28 = alloca %"class.WTF::Vector", align 8
  %29 = alloca %"class.WTF::Vector", align 8
  %30 = alloca %"class.WTF::Vector", align 8
  %31 = alloca %"class.WTF::Vector", align 8
  %32 = alloca %"class.blink::KURL", align 8
  %33 = alloca %"class.blink::KURL", align 8
  %34 = alloca %"class.WTF::StringView", align 8
  %35 = alloca %"class.WTF::StringView", align 8
  %36 = bitcast %"class.blink::Node"* %1 to %"class.blink::Element"*
  %37 = bitcast %"class.WTF::Vector"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #9
  %38 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 3
  %39 = bitcast %"class.WTF::String"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %20, %"class.WTF::HashMap"* %38, %"class.WTF::String"* nonnull dereferenceable(8) %21)
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %20, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::String"*, %"class.WTF::String"** %40, align 8
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %20, i64 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %41, i64 %44
  %46 = icmp eq i32 %43, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %5
  %48 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  br label %49

49:                                               ; preds = %55, %47
  %50 = phi %"class.WTF::String"* [ %41, %47 ], [ %56, %55 ]
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %54 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %52, %"class.WTF::StringImpl"* %53) #9
  br i1 %54, label %58, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %50, i64 1
  %57 = icmp ult %"class.WTF::String"* %56, %45
  br i1 %57, label %49, label %65

58:                                               ; preds = %49
  %59 = ptrtoint %"class.WTF::String"* %50 to i64
  %60 = ptrtoint %"class.WTF::String"* %41 to i64
  %61 = sub i64 %59, %60
  %62 = lshr exact i64 %61, 3
  %63 = trunc i64 %62 to i32
  %64 = icmp ne i32 %63, -1
  br label %65

65:                                               ; preds = %55, %5, %58
  %66 = phi i1 [ %64, %58 ], [ false, %5 ], [ false, %55 ]
  %67 = load %"class.WTF::String"*, %"class.WTF::String"** %40, align 8
  %68 = icmp eq %"class.WTF::String"* %67, null
  br i1 %68, label %102, label %69, !prof !3

69:                                               ; preds = %65
  %70 = bitcast %"class.WTF::String"* %67 to i8*
  %71 = load i32, i32* %42, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %100, label %73, !prof !2

73:                                               ; preds = %69
  %74 = zext i32 %71 to i64
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %67, i64 %74
  br label %76

76:                                               ; preds = %94, %73
  %77 = phi %"class.WTF::String"* [ %95, %94 ], [ %67, %73 ]
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %77, i64 0, i32 0, i32 0
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  %80 = icmp eq %"class.WTF::StringImpl"* %79, null
  br i1 %80, label %94, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  br i1 %85, label %88, label %90

88:                                               ; preds = %81
  %89 = add i32 %87, -1
  store i32 %89, i32* %86, align 4
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i32 [ %89, %88 ], [ %87, %81 ]
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #9
  br label %94

94:                                               ; preds = %93, %90, %76
  %95 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %77, i64 1
  %96 = icmp eq %"class.WTF::String"* %95, %75
  br i1 %96, label %97, label %76

97:                                               ; preds = %94
  store i32 0, i32* %42, align 4
  %98 = bitcast %"class.WTF::Vector"* %20 to i8**
  %99 = load i8*, i8** %98, align 8
  br label %100

100:                                              ; preds = %97, %69
  %101 = phi i8* [ %99, %97 ], [ %70, %69 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %101) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %40, align 8
  br label %102

102:                                              ; preds = %65, %100
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %119, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %104) #9
  br label %119

119:                                              ; preds = %102, %115, %118
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #9
  br i1 %66, label %1079, label %120

120:                                              ; preds = %119
  %121 = bitcast %"class.WTF::Vector"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #9
  %122 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 1, i32 4
  %123 = bitcast %"class.WTF::String"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #9
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %22, %"class.WTF::HashMap"* %122, %"class.WTF::String"* nonnull dereferenceable(8) %23)
  %124 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %125 = load %"class.WTF::String"*, %"class.WTF::String"** %124, align 8
  %126 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %125, i64 %128
  %130 = icmp eq i32 %127, 0
  br i1 %130, label %149, label %131

131:                                              ; preds = %120
  %132 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  br label %133

133:                                              ; preds = %139, %131
  %134 = phi %"class.WTF::String"* [ %125, %131 ], [ %140, %139 ]
  %135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %134, i64 0, i32 0, i32 0
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %135, align 8
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  %138 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %136, %"class.WTF::StringImpl"* %137) #9
  br i1 %138, label %142, label %139

139:                                              ; preds = %133
  %140 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %134, i64 1
  %141 = icmp ult %"class.WTF::String"* %140, %129
  br i1 %141, label %133, label %149

142:                                              ; preds = %133
  %143 = ptrtoint %"class.WTF::String"* %134 to i64
  %144 = ptrtoint %"class.WTF::String"* %125 to i64
  %145 = sub i64 %143, %144
  %146 = lshr exact i64 %145, 3
  %147 = trunc i64 %146 to i32
  %148 = icmp ne i32 %147, -1
  br label %149

149:                                              ; preds = %139, %120, %142
  %150 = phi i1 [ %148, %142 ], [ false, %120 ], [ false, %139 ]
  %151 = load %"class.WTF::String"*, %"class.WTF::String"** %124, align 8
  %152 = icmp eq %"class.WTF::String"* %151, null
  br i1 %152, label %186, label %153, !prof !3

153:                                              ; preds = %149
  %154 = bitcast %"class.WTF::String"* %151 to i8*
  %155 = load i32, i32* %126, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %184, label %157, !prof !2

157:                                              ; preds = %153
  %158 = zext i32 %155 to i64
  %159 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %151, i64 %158
  br label %160

160:                                              ; preds = %178, %157
  %161 = phi %"class.WTF::String"* [ %179, %178 ], [ %151, %157 ]
  %162 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %161, i64 0, i32 0, i32 0
  %163 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %162, align 8
  %164 = icmp eq %"class.WTF::StringImpl"* %163, null
  br i1 %164, label %178, label %165

165:                                              ; preds = %160
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = load atomic i32, i32* %166 monotonic, align 4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  br i1 %169, label %172, label %174

172:                                              ; preds = %165
  %173 = add i32 %171, -1
  store i32 %173, i32* %170, align 4
  br label %174

174:                                              ; preds = %172, %165
  %175 = phi i32 [ %173, %172 ], [ %171, %165 ]
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %174
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %163) #9
  br label %178

178:                                              ; preds = %177, %174, %160
  %179 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %161, i64 1
  %180 = icmp eq %"class.WTF::String"* %179, %159
  br i1 %180, label %181, label %160

181:                                              ; preds = %178
  store i32 0, i32* %126, align 4
  %182 = bitcast %"class.WTF::Vector"* %22 to i8**
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %181, %153
  %185 = phi i8* [ %183, %181 ], [ %154, %153 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %185) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %124, align 8
  br label %186

186:                                              ; preds = %149, %184
  %187 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %23, i64 0, i32 0, i32 0
  %188 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %187, align 8
  %189 = icmp eq %"class.WTF::StringImpl"* %188, null
  br i1 %189, label %203, label %190

190:                                              ; preds = %186
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %188, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = load atomic i32, i32* %191 monotonic, align 4
  %193 = and i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %188, i64 0, i32 0
  %196 = load i32, i32* %195, align 4
  br i1 %194, label %197, label %199

197:                                              ; preds = %190
  %198 = add i32 %196, -1
  store i32 %198, i32* %195, align 4
  br label %199

199:                                              ; preds = %197, %190
  %200 = phi i32 [ %198, %197 ], [ %196, %190 ]
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %199
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %188) #9
  br label %203

203:                                              ; preds = %186, %199, %202
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #9
  br i1 %150, label %204, label %285

204:                                              ; preds = %203
  %205 = bitcast %"class.WTF::Vector.1591"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %205) #9
  call void @_ZNK5blink7Element17getAttributeNamesEv(%"class.WTF::Vector.1591"* nonnull sret %24, %"class.blink::Element"* %36) #9
  %206 = getelementptr inbounds %"class.WTF::Vector.1591", %"class.WTF::Vector.1591"* %24, i64 0, i32 0, i32 0, i32 0
  %207 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %206, align 8
  %208 = getelementptr inbounds %"class.WTF::Vector.1591", %"class.WTF::Vector.1591"* %24, i64 0, i32 0, i32 0, i32 2
  %209 = load i32, i32* %208, align 4
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %207, i64 %210
  %212 = icmp eq i32 %209, 0
  br i1 %212, label %222, label %213

213:                                              ; preds = %204
  %214 = bitcast %"class.WTF::StringView"* %19 to i8*
  %215 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 0
  %216 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 1
  %217 = bitcast i8** %216 to %"class.WTF::StringImpl"**
  %218 = bitcast %"class.WTF::StringView"* %19 to i64*
  %219 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 2
  br label %258

220:                                              ; preds = %282
  %221 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %206, align 8
  br label %222

222:                                              ; preds = %220, %204
  %223 = phi %"class.WTF::AtomicString"* [ %221, %220 ], [ %207, %204 ]
  %224 = icmp eq %"class.WTF::AtomicString"* %223, null
  br i1 %224, label %1077, label %225, !prof !3

225:                                              ; preds = %222
  %226 = bitcast %"class.WTF::AtomicString"* %223 to i8*
  %227 = load i32, i32* %208, align 4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %256, label %229, !prof !2

229:                                              ; preds = %225
  %230 = zext i32 %227 to i64
  %231 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %223, i64 %230
  br label %232

232:                                              ; preds = %250, %229
  %233 = phi %"class.WTF::AtomicString"* [ %251, %250 ], [ %223, %229 ]
  %234 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %233, i64 0, i32 0, i32 0, i32 0
  %235 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %234, align 8
  %236 = icmp eq %"class.WTF::StringImpl"* %235, null
  br i1 %236, label %250, label %237

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load atomic i32, i32* %238 monotonic, align 4
  %240 = and i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 0
  %243 = load i32, i32* %242, align 4
  br i1 %241, label %244, label %246

244:                                              ; preds = %237
  %245 = add i32 %243, -1
  store i32 %245, i32* %242, align 4
  br label %246

246:                                              ; preds = %244, %237
  %247 = phi i32 [ %245, %244 ], [ %243, %237 ]
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %250

249:                                              ; preds = %246
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %235) #9
  br label %250

250:                                              ; preds = %249, %246, %232
  %251 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %233, i64 1
  %252 = icmp eq %"class.WTF::AtomicString"* %251, %231
  br i1 %252, label %253, label %232

253:                                              ; preds = %250
  store i32 0, i32* %208, align 4
  %254 = bitcast %"class.WTF::Vector.1591"* %24 to i8**
  %255 = load i8*, i8** %254, align 8
  br label %256

256:                                              ; preds = %253, %225
  %257 = phi i8* [ %255, %253 ], [ %226, %225 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %257) #9
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %206, align 8
  br label %1077

258:                                              ; preds = %213, %282
  %259 = phi %"class.WTF::AtomicString"* [ %207, %213 ], [ %283, %282 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %214) #9
  %260 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %259, i64 0, i32 0, i32 0, i32 0
  %261 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %260, align 8
  %262 = icmp eq %"class.WTF::StringImpl"* %261, null
  br i1 %262, label %263, label %265

263:                                              ; preds = %258
  store i8* null, i8** %216, align 8
  %264 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %264, i64* %218, align 8
  br label %269

265:                                              ; preds = %258
  store %"class.WTF::StringImpl"* %261, %"class.WTF::StringImpl"** %215, align 8
  %266 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %261, i64 0, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %261, i64 1
  store %"class.WTF::StringImpl"* %268, %"class.WTF::StringImpl"** %217, align 8
  br label %269

269:                                              ; preds = %263, %265
  %270 = phi i32 [ %267, %265 ], [ 0, %263 ]
  store i32 %270, i32* %219, align 8
  %271 = call i64 @_ZNK5blink7Element24WeakLowercaseIfNecessaryERKN3WTF10StringViewE(%"class.blink::Element"* %36, %"class.WTF::StringView"* nonnull dereferenceable(24) %19) #9
  call void @_ZN5blink7Element21RemoveAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"* %36, %"class.WTF::AtomicString"* dereferenceable(8) %259, i64 %271) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %214) #9
  %272 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %4) #9
  %273 = icmp eq %"class.blink::ExecutionContext"* %272, null
  %274 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %272, i64 0, i32 3
  %275 = icmp eq %"class.blink::UseCounter"* %274, null
  %276 = or i1 %273, %275
  br i1 %276, label %282, label %277

277:                                              ; preds = %269
  %278 = bitcast %"class.blink::UseCounter"* %274 to void (%"class.blink::UseCounter"*, i32)***
  %279 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %278, align 8
  %280 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %279, i64 3
  %281 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %280, align 8
  call void %281(%"class.blink::UseCounter"* nonnull %274, i32 3818) #9
  br label %282

282:                                              ; preds = %269, %277
  %283 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %259, i64 1
  %284 = icmp eq %"class.WTF::AtomicString"* %283, %211
  br i1 %284, label %220, label %258

285:                                              ; preds = %203
  %286 = bitcast %"class.WTF::Vector.1591"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %286) #9
  call void @_ZNK5blink7Element17getAttributeNamesEv(%"class.WTF::Vector.1591"* nonnull sret %25, %"class.blink::Element"* %36) #9
  %287 = getelementptr inbounds %"class.WTF::Vector.1591", %"class.WTF::Vector.1591"* %25, i64 0, i32 0, i32 0, i32 0
  %288 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %287, align 8
  %289 = getelementptr inbounds %"class.WTF::Vector.1591", %"class.WTF::Vector.1591"* %25, i64 0, i32 0, i32 0, i32 2
  %290 = load i32, i32* %289, align 4
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %288, i64 %291
  %293 = icmp eq i32 %290, 0
  br i1 %293, label %421, label %294

294:                                              ; preds = %285
  %295 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 5
  %296 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %295, i64 0, i32 0
  %297 = bitcast %"class.WTF::Vector"* %26 to i8*
  %298 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %26, i64 0, i32 0, i32 0, i32 2
  %299 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %300 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %26, i64 0, i32 0, i32 0, i32 0
  %301 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %302 = bitcast %"class.WTF::Vector"* %27 to i8*
  %303 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %27, i64 0, i32 0, i32 0, i32 0
  %304 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %27, i64 0, i32 0, i32 0, i32 2
  %305 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %306 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %122, i64 0, i32 0
  %307 = bitcast %"class.WTF::Vector"* %28 to i8*
  %308 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %28, i64 0, i32 0, i32 0, i32 2
  %309 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %28, i64 0, i32 0, i32 0, i32 0
  %310 = bitcast %"class.WTF::Vector"* %29 to i8*
  %311 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %29, i64 0, i32 0, i32 0, i32 0
  %312 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %29, i64 0, i32 0, i32 0, i32 2
  %313 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %38, i64 0, i32 0
  %314 = bitcast %"class.WTF::Vector"* %30 to i8*
  %315 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %30, i64 0, i32 0, i32 0, i32 2
  %316 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %30, i64 0, i32 0, i32 0, i32 0
  %317 = bitcast %"class.WTF::Vector"* %31 to i8*
  %318 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %31, i64 0, i32 0, i32 0, i32 0
  %319 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %31, i64 0, i32 0, i32 0, i32 2
  %320 = bitcast %"class.WTF::Vector"* %31 to i8**
  %321 = bitcast %"class.WTF::Vector"* %30 to i8**
  %322 = bitcast %"class.WTF::Vector"* %29 to i8**
  %323 = bitcast %"class.WTF::Vector"* %28 to i8**
  %324 = bitcast %"class.WTF::Vector"* %27 to i8**
  %325 = bitcast %"class.WTF::Vector"* %26 to i8**
  %326 = icmp eq %"class.blink::Node"* %1, null
  %327 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 1
  %328 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kATagE, align 8
  %329 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %328, i64 0, i32 0, i32 0, i32 0
  %330 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1, i32 2
  %331 = bitcast %"class.blink::Member.449"* %330 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %332 = bitcast %"class.WTF::StringView"* %16 to i8*
  %333 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 0
  %334 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 1
  %335 = bitcast i8** %334 to %"class.WTF::StringImpl"**
  %336 = bitcast %"class.WTF::StringView"* %16 to i64*
  %337 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 2
  %338 = bitcast %"class.WTF::StringView"* %17 to i8*
  %339 = bitcast %"class.WTF::StringView"* %17 to i64*
  %340 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 1
  %341 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 2
  %342 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %32, i64 0, i32 0
  %343 = bitcast %"class.blink::Node"* %1 to %"class.blink::HTMLAnchorElement"*
  %344 = bitcast %"class.WTF::StringView"* %14 to i8*
  %345 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 0
  %346 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  %347 = bitcast i8** %346 to %"class.WTF::StringImpl"**
  %348 = bitcast %"class.WTF::StringView"* %14 to i64*
  %349 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  %350 = bitcast %"class.WTF::StringView"* %15 to i8*
  %351 = bitcast %"class.WTF::StringView"* %15 to i64*
  %352 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 1
  %353 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 2
  %354 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kAreaTagE, align 8
  %355 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %354, i64 0, i32 0, i32 0, i32 0
  %356 = bitcast %"class.WTF::StringView"* %12 to i8*
  %357 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  %358 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %359 = bitcast i8** %358 to %"class.WTF::StringImpl"**
  %360 = bitcast %"class.WTF::StringView"* %12 to i64*
  %361 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  %362 = bitcast %"class.WTF::StringView"* %13 to i8*
  %363 = bitcast %"class.WTF::StringView"* %13 to i64*
  %364 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %365 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  %366 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %33, i64 0, i32 0
  %367 = bitcast %"class.WTF::StringView"* %10 to i8*
  %368 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  %369 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %370 = bitcast i8** %369 to %"class.WTF::StringImpl"**
  %371 = bitcast %"class.WTF::StringView"* %10 to i64*
  %372 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  %373 = bitcast %"class.WTF::StringView"* %11 to i8*
  %374 = bitcast %"class.WTF::StringView"* %11 to i64*
  %375 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %376 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  %377 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kFormTagE, align 8
  %378 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %377, i64 0, i32 0, i32 0, i32 0
  %379 = bitcast %"class.WTF::StringView"* %34 to i8*
  %380 = bitcast %"class.WTF::StringView"* %8 to i8*
  %381 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  %382 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %383 = bitcast i8** %382 to %"class.WTF::StringImpl"**
  %384 = bitcast %"class.WTF::StringView"* %8 to i64*
  %385 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  %386 = bitcast %"class.WTF::StringView"* %9 to i8*
  %387 = bitcast %"class.WTF::StringView"* %9 to i64*
  %388 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %389 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  %390 = bitcast %"class.blink::Node"* %1 to %"class.blink::HTMLFormElement"*
  %391 = bitcast %"class.WTF::StringView"* %34 to i64*
  %392 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %34, i64 0, i32 1
  %393 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %34, i64 0, i32 2
  %394 = bitcast %"class.WTF::StringView"* %35 to i8*
  %395 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kInputTagE, align 8
  %396 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %395, i64 0, i32 0, i32 0, i32 0
  %397 = load %"class.blink::HTMLQualifiedName"*, %"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kButtonTagE, align 8
  %398 = getelementptr inbounds %"class.blink::HTMLQualifiedName", %"class.blink::HTMLQualifiedName"* %397, i64 0, i32 0, i32 0, i32 0
  %399 = bitcast %"class.WTF::StringView"* %6 to i8*
  %400 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  %401 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %402 = bitcast i8** %401 to %"class.WTF::StringImpl"**
  %403 = bitcast %"class.WTF::StringView"* %6 to i64*
  %404 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  %405 = bitcast %"class.WTF::StringView"* %7 to i8*
  %406 = bitcast %"class.WTF::StringView"* %7 to i64*
  %407 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %408 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  %409 = bitcast %"class.blink::Node"* %1 to %"class.blink::HTMLFormControlElement"*
  %410 = bitcast %"class.WTF::StringView"* %35 to i64*
  %411 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %35, i64 0, i32 1
  %412 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %35, i64 0, i32 2
  %413 = bitcast %"class.WTF::StringView"* %18 to i8*
  %414 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 0
  %415 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 1
  %416 = bitcast i8** %415 to %"class.WTF::StringImpl"**
  %417 = bitcast %"class.WTF::StringView"* %18 to i64*
  %418 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 2
  br label %457

419:                                              ; preds = %1074
  %420 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %287, align 8
  br label %421

421:                                              ; preds = %419, %285
  %422 = phi %"class.WTF::AtomicString"* [ %420, %419 ], [ %288, %285 ]
  %423 = icmp eq %"class.WTF::AtomicString"* %422, null
  br i1 %423, label %1077, label %424, !prof !3

424:                                              ; preds = %421
  %425 = bitcast %"class.WTF::AtomicString"* %422 to i8*
  %426 = load i32, i32* %289, align 4
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %455, label %428, !prof !2

428:                                              ; preds = %424
  %429 = zext i32 %426 to i64
  %430 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %422, i64 %429
  br label %431

431:                                              ; preds = %449, %428
  %432 = phi %"class.WTF::AtomicString"* [ %450, %449 ], [ %422, %428 ]
  %433 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %432, i64 0, i32 0, i32 0, i32 0
  %434 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %433, align 8
  %435 = icmp eq %"class.WTF::StringImpl"* %434, null
  br i1 %435, label %449, label %436

436:                                              ; preds = %431
  %437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %438 = load atomic i32, i32* %437 monotonic, align 4
  %439 = and i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %434, i64 0, i32 0
  %442 = load i32, i32* %441, align 4
  br i1 %440, label %443, label %445

443:                                              ; preds = %436
  %444 = add i32 %442, -1
  store i32 %444, i32* %441, align 4
  br label %445

445:                                              ; preds = %443, %436
  %446 = phi i32 [ %444, %443 ], [ %442, %436 ]
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %449

448:                                              ; preds = %445
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %434) #9
  br label %449

449:                                              ; preds = %448, %445, %431
  %450 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %432, i64 1
  %451 = icmp eq %"class.WTF::AtomicString"* %450, %430
  br i1 %451, label %452, label %431

452:                                              ; preds = %449
  store i32 0, i32* %289, align 4
  %453 = bitcast %"class.WTF::Vector.1591"* %25 to i8**
  %454 = load i8*, i8** %453, align 8
  br label %455

455:                                              ; preds = %452, %424
  %456 = phi i8* [ %454, %452 ], [ %425, %424 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %456) #9
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %287, align 8
  br label %1077

457:                                              ; preds = %294, %1074
  %458 = phi %"class.WTF::AtomicString"* [ %288, %294 ], [ %1075, %1074 ]
  %459 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 0, i32 0
  %460 = call zeroext i1 @_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8ContainsINS_22IdentityHashTranslatorIS8_SD_S4_EES1_EEbRKT0_(%"class.WTF::HashTable.1"* %296, %"class.WTF::String"* dereferenceable(8) %459) #9
  br i1 %460, label %461, label %506

461:                                              ; preds = %457
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %297) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %26, %"class.WTF::HashMap"* %295, %"class.WTF::String"* dereferenceable(8) %459)
  %462 = load i32, i32* %298, align 4
  %463 = load i32, i32* %299, align 4
  %464 = icmp eq i32 %462, %463
  br i1 %464, label %465, label %484

465:                                              ; preds = %461
  %466 = icmp eq i32 %462, 0
  br i1 %466, label %794, label %467

467:                                              ; preds = %465
  %468 = load %"class.WTF::String"*, %"class.WTF::String"** %300, align 8
  %469 = load %"class.WTF::String"*, %"class.WTF::String"** %301, align 8
  %470 = zext i32 %462 to i64
  %471 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %468, i64 %470
  br label %472

472:                                              ; preds = %480, %467
  %473 = phi %"class.WTF::String"* [ %482, %480 ], [ %469, %467 ]
  %474 = phi %"class.WTF::String"* [ %481, %480 ], [ %468, %467 ]
  %475 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %474, i64 0, i32 0, i32 0
  %476 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %475, align 8
  %477 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %473, i64 0, i32 0, i32 0
  %478 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %477, align 8
  %479 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %476, %"class.WTF::StringImpl"* %478) #9
  br i1 %479, label %480, label %484

480:                                              ; preds = %472
  %481 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %474, i64 1
  %482 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %473, i64 1
  %483 = icmp eq %"class.WTF::String"* %481, %471
  br i1 %483, label %794, label %472

484:                                              ; preds = %472, %461
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %302) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %27, %"class.WTF::HashMap"* %295, %"class.WTF::String"* dereferenceable(8) %459)
  %485 = load %"class.WTF::String"*, %"class.WTF::String"** %303, align 8
  %486 = load i32, i32* %304, align 4
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %485, i64 %487
  %489 = icmp eq i32 %486, 0
  br i1 %489, label %506, label %490

490:                                              ; preds = %484, %496
  %491 = phi %"class.WTF::String"* [ %497, %496 ], [ %485, %484 ]
  %492 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %491, i64 0, i32 0, i32 0
  %493 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %492, align 8
  %494 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %305, align 8
  %495 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %493, %"class.WTF::StringImpl"* %494) #9
  br i1 %495, label %499, label %496

496:                                              ; preds = %490
  %497 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %491, i64 1
  %498 = icmp ult %"class.WTF::String"* %497, %488
  br i1 %498, label %490, label %506

499:                                              ; preds = %490
  %500 = ptrtoint %"class.WTF::String"* %491 to i64
  %501 = ptrtoint %"class.WTF::String"* %485 to i64
  %502 = sub i64 %500, %501
  %503 = lshr exact i64 %502, 3
  %504 = trunc i64 %503 to i32
  %505 = icmp eq i32 %504, -1
  br i1 %505, label %506, label %757

506:                                              ; preds = %496, %499, %484, %457
  %507 = phi i1 [ true, %499 ], [ false, %457 ], [ true, %484 ], [ true, %496 ]
  %508 = call zeroext i1 @_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8ContainsINS_22IdentityHashTranslatorIS8_SD_S4_EES1_EEbRKT0_(%"class.WTF::HashTable.1"* %306, %"class.WTF::String"* dereferenceable(8) %459) #9
  br i1 %508, label %509, label %554

509:                                              ; preds = %506
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %307) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %28, %"class.WTF::HashMap"* %122, %"class.WTF::String"* dereferenceable(8) %459)
  %510 = load i32, i32* %308, align 4
  %511 = load i32, i32* %299, align 4
  %512 = icmp eq i32 %510, %511
  br i1 %512, label %513, label %532

513:                                              ; preds = %509
  %514 = icmp eq i32 %510, 0
  br i1 %514, label %720, label %515

515:                                              ; preds = %513
  %516 = load %"class.WTF::String"*, %"class.WTF::String"** %309, align 8
  %517 = load %"class.WTF::String"*, %"class.WTF::String"** %301, align 8
  %518 = zext i32 %510 to i64
  %519 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %516, i64 %518
  br label %520

520:                                              ; preds = %528, %515
  %521 = phi %"class.WTF::String"* [ %530, %528 ], [ %517, %515 ]
  %522 = phi %"class.WTF::String"* [ %529, %528 ], [ %516, %515 ]
  %523 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %522, i64 0, i32 0, i32 0
  %524 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %523, align 8
  %525 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %521, i64 0, i32 0, i32 0
  %526 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %525, align 8
  %527 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %524, %"class.WTF::StringImpl"* %526) #9
  br i1 %527, label %528, label %532

528:                                              ; preds = %520
  %529 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %522, i64 1
  %530 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %521, i64 1
  %531 = icmp eq %"class.WTF::String"* %529, %519
  br i1 %531, label %720, label %520

532:                                              ; preds = %520, %509
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %310) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %29, %"class.WTF::HashMap"* %122, %"class.WTF::String"* dereferenceable(8) %459)
  %533 = load %"class.WTF::String"*, %"class.WTF::String"** %311, align 8
  %534 = load i32, i32* %312, align 4
  %535 = zext i32 %534 to i64
  %536 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %533, i64 %535
  %537 = icmp eq i32 %534, 0
  br i1 %537, label %554, label %538

538:                                              ; preds = %532, %544
  %539 = phi %"class.WTF::String"* [ %545, %544 ], [ %533, %532 ]
  %540 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %539, i64 0, i32 0, i32 0
  %541 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %540, align 8
  %542 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %305, align 8
  %543 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %541, %"class.WTF::StringImpl"* %542) #9
  br i1 %543, label %547, label %544

544:                                              ; preds = %538
  %545 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %539, i64 1
  %546 = icmp ult %"class.WTF::String"* %545, %536
  br i1 %546, label %538, label %554

547:                                              ; preds = %538
  %548 = ptrtoint %"class.WTF::String"* %539 to i64
  %549 = ptrtoint %"class.WTF::String"* %533 to i64
  %550 = sub i64 %548, %549
  %551 = lshr exact i64 %550, 3
  %552 = trunc i64 %551 to i32
  %553 = icmp eq i32 %552, -1
  br i1 %553, label %554, label %681

554:                                              ; preds = %544, %547, %532, %506
  %555 = phi i1 [ true, %547 ], [ false, %506 ], [ true, %532 ], [ true, %544 ]
  %556 = call zeroext i1 @_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8ContainsINS_22IdentityHashTranslatorIS8_SD_S4_EES1_EEbRKT0_(%"class.WTF::HashTable.1"* %313, %"class.WTF::String"* dereferenceable(8) %459) #9
  br i1 %556, label %557, label %643

557:                                              ; preds = %554
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %314) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %30, %"class.WTF::HashMap"* %38, %"class.WTF::String"* dereferenceable(8) %459)
  %558 = load i32, i32* %315, align 4
  %559 = load i32, i32* %299, align 4
  %560 = icmp eq i32 %558, %559
  br i1 %560, label %561, label %580

561:                                              ; preds = %557
  %562 = icmp eq i32 %558, 0
  br i1 %562, label %644, label %563

563:                                              ; preds = %561
  %564 = load %"class.WTF::String"*, %"class.WTF::String"** %316, align 8
  %565 = load %"class.WTF::String"*, %"class.WTF::String"** %301, align 8
  %566 = zext i32 %558 to i64
  %567 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %564, i64 %566
  br label %568

568:                                              ; preds = %576, %563
  %569 = phi %"class.WTF::String"* [ %578, %576 ], [ %565, %563 ]
  %570 = phi %"class.WTF::String"* [ %577, %576 ], [ %564, %563 ]
  %571 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %570, i64 0, i32 0, i32 0
  %572 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %571, align 8
  %573 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %569, i64 0, i32 0, i32 0
  %574 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %573, align 8
  %575 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %572, %"class.WTF::StringImpl"* %574) #9
  br i1 %575, label %576, label %580

576:                                              ; preds = %568
  %577 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %570, i64 1
  %578 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %569, i64 1
  %579 = icmp eq %"class.WTF::String"* %577, %567
  br i1 %579, label %644, label %568

580:                                              ; preds = %568, %557
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %317) #9
  call void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* nonnull sret %31, %"class.WTF::HashMap"* %38, %"class.WTF::String"* dereferenceable(8) %459)
  %581 = load %"class.WTF::String"*, %"class.WTF::String"** %318, align 8
  %582 = load i32, i32* %319, align 4
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %581, i64 %583
  %585 = icmp eq i32 %582, 0
  br i1 %585, label %605, label %586

586:                                              ; preds = %580, %592
  %587 = phi %"class.WTF::String"* [ %593, %592 ], [ %581, %580 ]
  %588 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %587, i64 0, i32 0, i32 0
  %589 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %588, align 8
  %590 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %305, align 8
  %591 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %589, %"class.WTF::StringImpl"* %590) #9
  br i1 %591, label %595, label %592

592:                                              ; preds = %586
  %593 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %587, i64 1
  %594 = icmp ult %"class.WTF::String"* %593, %584
  br i1 %594, label %586, label %602

595:                                              ; preds = %586
  %596 = ptrtoint %"class.WTF::String"* %587 to i64
  %597 = ptrtoint %"class.WTF::String"* %581 to i64
  %598 = sub i64 %596, %597
  %599 = lshr exact i64 %598, 3
  %600 = trunc i64 %599 to i32
  %601 = icmp ne i32 %600, -1
  br label %602

602:                                              ; preds = %592, %595
  %603 = phi i1 [ %601, %595 ], [ false, %592 ]
  %604 = load %"class.WTF::String"*, %"class.WTF::String"** %318, align 8
  br label %605

605:                                              ; preds = %602, %580
  %606 = phi %"class.WTF::String"* [ %604, %602 ], [ %581, %580 ]
  %607 = phi i1 [ %603, %602 ], [ false, %580 ]
  %608 = xor i1 %607, true
  %609 = icmp eq %"class.WTF::String"* %606, null
  br i1 %609, label %642, label %610, !prof !3

610:                                              ; preds = %605
  %611 = bitcast %"class.WTF::String"* %606 to i8*
  %612 = load i32, i32* %319, align 4
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %640, label %614, !prof !2

614:                                              ; preds = %610
  %615 = zext i32 %612 to i64
  %616 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %606, i64 %615
  br label %617

617:                                              ; preds = %635, %614
  %618 = phi %"class.WTF::String"* [ %636, %635 ], [ %606, %614 ]
  %619 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %618, i64 0, i32 0, i32 0
  %620 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %619, align 8
  %621 = icmp eq %"class.WTF::StringImpl"* %620, null
  br i1 %621, label %635, label %622

622:                                              ; preds = %617
  %623 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %620, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %624 = load atomic i32, i32* %623 monotonic, align 4
  %625 = and i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %620, i64 0, i32 0
  %628 = load i32, i32* %627, align 4
  br i1 %626, label %629, label %631

629:                                              ; preds = %622
  %630 = add i32 %628, -1
  store i32 %630, i32* %627, align 4
  br label %631

631:                                              ; preds = %629, %622
  %632 = phi i32 [ %630, %629 ], [ %628, %622 ]
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %634, label %635

634:                                              ; preds = %631
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %620) #9
  br label %635

635:                                              ; preds = %634, %631, %617
  %636 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %618, i64 1
  %637 = icmp eq %"class.WTF::String"* %636, %616
  br i1 %637, label %638, label %617

638:                                              ; preds = %635
  store i32 0, i32* %319, align 4
  %639 = load i8*, i8** %320, align 8
  br label %640

640:                                              ; preds = %638, %610
  %641 = phi i8* [ %639, %638 ], [ %611, %610 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %641) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %318, align 8
  br label %642

642:                                              ; preds = %640, %605
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %317) #9
  br label %644

643:                                              ; preds = %554
  br i1 %555, label %681, label %718

644:                                              ; preds = %576, %561, %642
  %645 = phi i1 [ %608, %642 ], [ false, %561 ], [ false, %576 ]
  %646 = load %"class.WTF::String"*, %"class.WTF::String"** %316, align 8
  %647 = icmp eq %"class.WTF::String"* %646, null
  br i1 %647, label %680, label %648, !prof !3

648:                                              ; preds = %644
  %649 = bitcast %"class.WTF::String"* %646 to i8*
  %650 = load i32, i32* %315, align 4
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %678, label %652, !prof !2

652:                                              ; preds = %648
  %653 = zext i32 %650 to i64
  %654 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %646, i64 %653
  br label %655

655:                                              ; preds = %673, %652
  %656 = phi %"class.WTF::String"* [ %674, %673 ], [ %646, %652 ]
  %657 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %656, i64 0, i32 0, i32 0
  %658 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %657, align 8
  %659 = icmp eq %"class.WTF::StringImpl"* %658, null
  br i1 %659, label %673, label %660

660:                                              ; preds = %655
  %661 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %658, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %662 = load atomic i32, i32* %661 monotonic, align 4
  %663 = and i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %658, i64 0, i32 0
  %666 = load i32, i32* %665, align 4
  br i1 %664, label %667, label %669

667:                                              ; preds = %660
  %668 = add i32 %666, -1
  store i32 %668, i32* %665, align 4
  br label %669

669:                                              ; preds = %667, %660
  %670 = phi i32 [ %668, %667 ], [ %666, %660 ]
  %671 = icmp eq i32 %670, 0
  br i1 %671, label %672, label %673

672:                                              ; preds = %669
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %658) #9
  br label %673

673:                                              ; preds = %672, %669, %655
  %674 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %656, i64 1
  %675 = icmp eq %"class.WTF::String"* %674, %654
  br i1 %675, label %676, label %655

676:                                              ; preds = %673
  store i32 0, i32* %315, align 4
  %677 = load i8*, i8** %321, align 8
  br label %678

678:                                              ; preds = %676, %648
  %679 = phi i8* [ %677, %676 ], [ %649, %648 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %679) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %316, align 8
  br label %680

680:                                              ; preds = %644, %678
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %314) #9
  br i1 %555, label %681, label %718

681:                                              ; preds = %547, %680, %643
  %682 = phi i1 [ true, %643 ], [ %645, %680 ], [ true, %547 ]
  %683 = load %"class.WTF::String"*, %"class.WTF::String"** %311, align 8
  %684 = icmp eq %"class.WTF::String"* %683, null
  br i1 %684, label %685, label %686, !prof !3

685:                                              ; preds = %681
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %310) #9
  br label %720

686:                                              ; preds = %681
  %687 = bitcast %"class.WTF::String"* %683 to i8*
  %688 = load i32, i32* %312, align 4
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %716, label %690, !prof !2

690:                                              ; preds = %686
  %691 = zext i32 %688 to i64
  %692 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %683, i64 %691
  br label %693

693:                                              ; preds = %711, %690
  %694 = phi %"class.WTF::String"* [ %712, %711 ], [ %683, %690 ]
  %695 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %694, i64 0, i32 0, i32 0
  %696 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %695, align 8
  %697 = icmp eq %"class.WTF::StringImpl"* %696, null
  br i1 %697, label %711, label %698

698:                                              ; preds = %693
  %699 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %696, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %700 = load atomic i32, i32* %699 monotonic, align 4
  %701 = and i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %696, i64 0, i32 0
  %704 = load i32, i32* %703, align 4
  br i1 %702, label %705, label %707

705:                                              ; preds = %698
  %706 = add i32 %704, -1
  store i32 %706, i32* %703, align 4
  br label %707

707:                                              ; preds = %705, %698
  %708 = phi i32 [ %706, %705 ], [ %704, %698 ]
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %710, label %711

710:                                              ; preds = %707
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %696) #9
  br label %711

711:                                              ; preds = %710, %707, %693
  %712 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %694, i64 1
  %713 = icmp eq %"class.WTF::String"* %712, %692
  br i1 %713, label %714, label %693

714:                                              ; preds = %711
  store i32 0, i32* %312, align 4
  %715 = load i8*, i8** %322, align 8
  br label %716

716:                                              ; preds = %686, %714
  %717 = phi i8* [ %715, %714 ], [ %687, %686 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %717) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %310) #9
  br label %720

718:                                              ; preds = %643, %680
  %719 = phi i1 [ %645, %680 ], [ true, %643 ]
  br i1 %507, label %757, label %831

720:                                              ; preds = %528, %716, %685, %513
  %721 = phi i1 [ %682, %716 ], [ true, %513 ], [ %682, %685 ], [ true, %528 ]
  %722 = load %"class.WTF::String"*, %"class.WTF::String"** %309, align 8
  %723 = icmp eq %"class.WTF::String"* %722, null
  br i1 %723, label %756, label %724, !prof !3

724:                                              ; preds = %720
  %725 = bitcast %"class.WTF::String"* %722 to i8*
  %726 = load i32, i32* %308, align 4
  %727 = icmp eq i32 %726, 0
  br i1 %727, label %754, label %728, !prof !2

728:                                              ; preds = %724
  %729 = zext i32 %726 to i64
  %730 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %722, i64 %729
  br label %731

731:                                              ; preds = %749, %728
  %732 = phi %"class.WTF::String"* [ %750, %749 ], [ %722, %728 ]
  %733 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %732, i64 0, i32 0, i32 0
  %734 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %733, align 8
  %735 = icmp eq %"class.WTF::StringImpl"* %734, null
  br i1 %735, label %749, label %736

736:                                              ; preds = %731
  %737 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %734, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %738 = load atomic i32, i32* %737 monotonic, align 4
  %739 = and i32 %738, 2
  %740 = icmp eq i32 %739, 0
  %741 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %734, i64 0, i32 0
  %742 = load i32, i32* %741, align 4
  br i1 %740, label %743, label %745

743:                                              ; preds = %736
  %744 = add i32 %742, -1
  store i32 %744, i32* %741, align 4
  br label %745

745:                                              ; preds = %743, %736
  %746 = phi i32 [ %744, %743 ], [ %742, %736 ]
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %748, label %749

748:                                              ; preds = %745
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %734) #9
  br label %749

749:                                              ; preds = %748, %745, %731
  %750 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %732, i64 1
  %751 = icmp eq %"class.WTF::String"* %750, %730
  br i1 %751, label %752, label %731

752:                                              ; preds = %749
  store i32 0, i32* %308, align 4
  %753 = load i8*, i8** %323, align 8
  br label %754

754:                                              ; preds = %752, %724
  %755 = phi i8* [ %753, %752 ], [ %725, %724 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %755) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %309, align 8
  br label %756

756:                                              ; preds = %720, %754
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %307) #9
  br i1 %507, label %757, label %831

757:                                              ; preds = %499, %756, %718
  %758 = phi i1 [ %719, %718 ], [ %721, %756 ], [ true, %499 ]
  %759 = load %"class.WTF::String"*, %"class.WTF::String"** %303, align 8
  %760 = icmp eq %"class.WTF::String"* %759, null
  br i1 %760, label %793, label %761, !prof !3

761:                                              ; preds = %757
  %762 = bitcast %"class.WTF::String"* %759 to i8*
  %763 = load i32, i32* %304, align 4
  %764 = icmp eq i32 %763, 0
  br i1 %764, label %791, label %765, !prof !2

765:                                              ; preds = %761
  %766 = zext i32 %763 to i64
  %767 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %759, i64 %766
  br label %768

768:                                              ; preds = %786, %765
  %769 = phi %"class.WTF::String"* [ %787, %786 ], [ %759, %765 ]
  %770 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %769, i64 0, i32 0, i32 0
  %771 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %770, align 8
  %772 = icmp eq %"class.WTF::StringImpl"* %771, null
  br i1 %772, label %786, label %773

773:                                              ; preds = %768
  %774 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %771, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %775 = load atomic i32, i32* %774 monotonic, align 4
  %776 = and i32 %775, 2
  %777 = icmp eq i32 %776, 0
  %778 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %771, i64 0, i32 0
  %779 = load i32, i32* %778, align 4
  br i1 %777, label %780, label %782

780:                                              ; preds = %773
  %781 = add i32 %779, -1
  store i32 %781, i32* %778, align 4
  br label %782

782:                                              ; preds = %780, %773
  %783 = phi i32 [ %781, %780 ], [ %779, %773 ]
  %784 = icmp eq i32 %783, 0
  br i1 %784, label %785, label %786

785:                                              ; preds = %782
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %771) #9
  br label %786

786:                                              ; preds = %785, %782, %768
  %787 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %769, i64 1
  %788 = icmp eq %"class.WTF::String"* %787, %767
  br i1 %788, label %789, label %768

789:                                              ; preds = %786
  store i32 0, i32* %304, align 4
  %790 = load i8*, i8** %324, align 8
  br label %791

791:                                              ; preds = %789, %761
  %792 = phi i8* [ %790, %789 ], [ %762, %761 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %792) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %303, align 8
  br label %793

793:                                              ; preds = %757, %791
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %302) #9
  br label %794

794:                                              ; preds = %480, %793, %465
  %795 = phi i1 [ %758, %793 ], [ true, %465 ], [ true, %480 ]
  %796 = load %"class.WTF::String"*, %"class.WTF::String"** %300, align 8
  %797 = icmp eq %"class.WTF::String"* %796, null
  br i1 %797, label %830, label %798, !prof !3

798:                                              ; preds = %794
  %799 = bitcast %"class.WTF::String"* %796 to i8*
  %800 = load i32, i32* %298, align 4
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %828, label %802, !prof !2

802:                                              ; preds = %798
  %803 = zext i32 %800 to i64
  %804 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %796, i64 %803
  br label %805

805:                                              ; preds = %823, %802
  %806 = phi %"class.WTF::String"* [ %824, %823 ], [ %796, %802 ]
  %807 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %806, i64 0, i32 0, i32 0
  %808 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %807, align 8
  %809 = icmp eq %"class.WTF::StringImpl"* %808, null
  br i1 %809, label %823, label %810

810:                                              ; preds = %805
  %811 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %808, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %812 = load atomic i32, i32* %811 monotonic, align 4
  %813 = and i32 %812, 2
  %814 = icmp eq i32 %813, 0
  %815 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %808, i64 0, i32 0
  %816 = load i32, i32* %815, align 4
  br i1 %814, label %817, label %819

817:                                              ; preds = %810
  %818 = add i32 %816, -1
  store i32 %818, i32* %815, align 4
  br label %819

819:                                              ; preds = %817, %810
  %820 = phi i32 [ %818, %817 ], [ %816, %810 ]
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %822, label %823

822:                                              ; preds = %819
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %808) #9
  br label %823

823:                                              ; preds = %822, %819, %805
  %824 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %806, i64 1
  %825 = icmp eq %"class.WTF::String"* %824, %804
  br i1 %825, label %826, label %805

826:                                              ; preds = %823
  store i32 0, i32* %298, align 4
  %827 = load i8*, i8** %325, align 8
  br label %828

828:                                              ; preds = %826, %798
  %829 = phi i8* [ %827, %826 ], [ %799, %798 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %829) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %300, align 8
  br label %830

830:                                              ; preds = %794, %828
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %297) #9
  br label %831

831:                                              ; preds = %756, %718, %830
  %832 = phi i1 [ %795, %830 ], [ %719, %718 ], [ %721, %756 ]
  br i1 %326, label %833, label %834

833:                                              ; preds = %831
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %394) #9
  br label %1033

834:                                              ; preds = %831
  %835 = load i32, i32* %327, align 8
  %836 = and i32 %835, 48
  %837 = icmp eq i32 %836, 0
  br i1 %837, label %838, label %889

838:                                              ; preds = %834
  %839 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %329, align 8
  %840 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %331, align 8
  %841 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %840, i64 0, i32 3, i32 0, i32 0, i32 0
  %842 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %841, align 8
  %843 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %839, i64 0, i32 3, i32 0, i32 0, i32 0
  %844 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %843, align 8
  %845 = icmp eq %"class.WTF::StringImpl"* %842, %844
  br i1 %845, label %846, label %889

846:                                              ; preds = %838
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %332) #9
  %847 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 0, i32 0, i32 0, i32 0
  %848 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %847, align 8
  %849 = icmp eq %"class.WTF::StringImpl"* %848, null
  br i1 %849, label %850, label %852

850:                                              ; preds = %846
  store i8* null, i8** %334, align 8
  %851 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %851, i64* %336, align 8
  br label %857

852:                                              ; preds = %846
  store %"class.WTF::StringImpl"* %848, %"class.WTF::StringImpl"** %333, align 8
  %853 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %848, i64 0, i32 1
  %854 = load i32, i32* %853, align 4
  %855 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %848, i64 1
  store %"class.WTF::StringImpl"* %855, %"class.WTF::StringImpl"** %335, align 8
  %856 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %857

857:                                              ; preds = %852, %850
  %858 = phi i64 [ %856, %852 ], [ %851, %850 ]
  %859 = phi i32 [ %854, %852 ], [ 0, %850 ]
  store i32 %859, i32* %337, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %338) #9
  store i64 %858, i64* %339, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i64 0, i64 0), i8** %340, align 8
  store i32 4, i32* %341, align 8
  %860 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %16, %"class.WTF::StringView"* nonnull dereferenceable(24) %17) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %338) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %332) #9
  br i1 %860, label %861, label %889

861:                                              ; preds = %857
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %342) #9
  call void @_ZNK5blink17HTMLAnchorElement4HrefEv(%"class.blink::KURL"* nonnull sret %32, %"class.blink::HTMLAnchorElement"* nonnull %343) #9
  %862 = call %"class.WTF::StringImpl"* @_ZNK5blink4KURL8ProtocolEv(%"class.blink::KURL"* nonnull %32) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %344) #9
  %863 = icmp eq %"class.WTF::StringImpl"* %862, null
  br i1 %863, label %864, label %866

864:                                              ; preds = %861
  store i8* null, i8** %346, align 8
  %865 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %865, i64* %348, align 8
  br label %871

866:                                              ; preds = %861
  store %"class.WTF::StringImpl"* %862, %"class.WTF::StringImpl"** %345, align 8
  %867 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %862, i64 0, i32 1
  %868 = load i32, i32* %867, align 4
  %869 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %862, i64 1
  store %"class.WTF::StringImpl"* %869, %"class.WTF::StringImpl"** %347, align 8
  %870 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %871

871:                                              ; preds = %866, %864
  %872 = phi i64 [ %870, %866 ], [ %865, %864 ]
  %873 = phi i32 [ %868, %866 ], [ 0, %864 ]
  store i32 %873, i32* %349, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %350) #9
  store i64 %872, i64* %351, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135, i64 0, i64 0), i8** %352, align 8
  store i32 10, i32* %353, align 8
  %874 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %14, %"class.WTF::StringView"* nonnull dereferenceable(24) %15) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %350) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %344) #9
  br i1 %863, label %888, label %875

875:                                              ; preds = %871
  %876 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %862, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %877 = load atomic i32, i32* %876 monotonic, align 4
  %878 = and i32 %877, 2
  %879 = icmp eq i32 %878, 0
  %880 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %862, i64 0, i32 0
  %881 = load i32, i32* %880, align 4
  br i1 %879, label %882, label %884

882:                                              ; preds = %875
  %883 = add i32 %881, -1
  store i32 %883, i32* %880, align 4
  br label %884

884:                                              ; preds = %882, %875
  %885 = phi i32 [ %883, %882 ], [ %881, %875 ]
  %886 = icmp eq i32 %885, 0
  br i1 %886, label %887, label %888

887:                                              ; preds = %884
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %862) #9
  br label %888

888:                                              ; preds = %887, %884, %871
  call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* nonnull %32) #9
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %342) #9
  br i1 %874, label %1051, label %889

889:                                              ; preds = %838, %857, %888, %834
  %890 = load i32, i32* %327, align 8
  %891 = and i32 %890, 48
  %892 = icmp eq i32 %891, 0
  br i1 %892, label %893, label %944

893:                                              ; preds = %889
  %894 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %355, align 8
  %895 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %331, align 8
  %896 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %895, i64 0, i32 3, i32 0, i32 0, i32 0
  %897 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %896, align 8
  %898 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %894, i64 0, i32 3, i32 0, i32 0, i32 0
  %899 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %898, align 8
  %900 = icmp eq %"class.WTF::StringImpl"* %897, %899
  br i1 %900, label %901, label %944

901:                                              ; preds = %893
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %356) #9
  %902 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 0, i32 0, i32 0, i32 0
  %903 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %902, align 8
  %904 = icmp eq %"class.WTF::StringImpl"* %903, null
  br i1 %904, label %905, label %907

905:                                              ; preds = %901
  store i8* null, i8** %358, align 8
  %906 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %906, i64* %360, align 8
  br label %912

907:                                              ; preds = %901
  store %"class.WTF::StringImpl"* %903, %"class.WTF::StringImpl"** %357, align 8
  %908 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %903, i64 0, i32 1
  %909 = load i32, i32* %908, align 4
  %910 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %903, i64 1
  store %"class.WTF::StringImpl"* %910, %"class.WTF::StringImpl"** %359, align 8
  %911 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %912

912:                                              ; preds = %907, %905
  %913 = phi i64 [ %911, %907 ], [ %906, %905 ]
  %914 = phi i32 [ %909, %907 ], [ 0, %905 ]
  store i32 %914, i32* %361, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %362) #9
  store i64 %913, i64* %363, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i64 0, i64 0), i8** %364, align 8
  store i32 4, i32* %365, align 8
  %915 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %12, %"class.WTF::StringView"* nonnull dereferenceable(24) %13) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %362) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %356) #9
  br i1 %915, label %916, label %944

916:                                              ; preds = %912
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %366) #9
  call void @_ZNK5blink17HTMLAnchorElement4HrefEv(%"class.blink::KURL"* nonnull sret %33, %"class.blink::HTMLAnchorElement"* nonnull %343) #9
  %917 = call %"class.WTF::StringImpl"* @_ZNK5blink4KURL8ProtocolEv(%"class.blink::KURL"* nonnull %33) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %367) #9
  %918 = icmp eq %"class.WTF::StringImpl"* %917, null
  br i1 %918, label %919, label %921

919:                                              ; preds = %916
  store i8* null, i8** %369, align 8
  %920 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %920, i64* %371, align 8
  br label %926

921:                                              ; preds = %916
  store %"class.WTF::StringImpl"* %917, %"class.WTF::StringImpl"** %368, align 8
  %922 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %917, i64 0, i32 1
  %923 = load i32, i32* %922, align 4
  %924 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %917, i64 1
  store %"class.WTF::StringImpl"* %924, %"class.WTF::StringImpl"** %370, align 8
  %925 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %926

926:                                              ; preds = %921, %919
  %927 = phi i64 [ %925, %921 ], [ %920, %919 ]
  %928 = phi i32 [ %923, %921 ], [ 0, %919 ]
  store i32 %928, i32* %372, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %373) #9
  store i64 %927, i64* %374, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135, i64 0, i64 0), i8** %375, align 8
  store i32 10, i32* %376, align 8
  %929 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %10, %"class.WTF::StringView"* nonnull dereferenceable(24) %11) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %373) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %367) #9
  br i1 %918, label %943, label %930

930:                                              ; preds = %926
  %931 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %917, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %932 = load atomic i32, i32* %931 monotonic, align 4
  %933 = and i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %917, i64 0, i32 0
  %936 = load i32, i32* %935, align 4
  br i1 %934, label %937, label %939

937:                                              ; preds = %930
  %938 = add i32 %936, -1
  store i32 %938, i32* %935, align 4
  br label %939

939:                                              ; preds = %937, %930
  %940 = phi i32 [ %938, %937 ], [ %936, %930 ]
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %942, label %943

942:                                              ; preds = %939
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %917) #9
  br label %943

943:                                              ; preds = %942, %939, %926
  call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* nonnull %33) #9
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %366) #9
  br i1 %929, label %1051, label %944

944:                                              ; preds = %893, %912, %943, %889
  %945 = load i32, i32* %327, align 8
  %946 = and i32 %945, 48
  %947 = icmp eq i32 %946, 0
  br i1 %947, label %948, label %992

948:                                              ; preds = %944
  %949 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %378, align 8
  %950 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %331, align 8
  %951 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %950, i64 0, i32 3, i32 0, i32 0, i32 0
  %952 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %951, align 8
  %953 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %949, i64 0, i32 3, i32 0, i32 0, i32 0
  %954 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %953, align 8
  %955 = icmp eq %"class.WTF::StringImpl"* %952, %954
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %379) #9
  br i1 %955, label %956, label %991

956:                                              ; preds = %948
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %380) #9
  %957 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 0, i32 0, i32 0, i32 0
  %958 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %957, align 8
  %959 = icmp eq %"class.WTF::StringImpl"* %958, null
  br i1 %959, label %960, label %962

960:                                              ; preds = %956
  store i8* null, i8** %382, align 8
  %961 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %961, i64* %384, align 8
  br label %967

962:                                              ; preds = %956
  store %"class.WTF::StringImpl"* %958, %"class.WTF::StringImpl"** %381, align 8
  %963 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 1
  %964 = load i32, i32* %963, align 4
  %965 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 1
  store %"class.WTF::StringImpl"* %965, %"class.WTF::StringImpl"** %383, align 8
  %966 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %967

967:                                              ; preds = %962, %960
  %968 = phi i64 [ %966, %962 ], [ %961, %960 ]
  %969 = phi i32 [ %964, %962 ], [ 0, %960 ]
  store i32 %969, i32* %385, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %386) #9
  store i64 %968, i64* %387, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i64 0, i64 0), i8** %388, align 8
  store i32 6, i32* %389, align 8
  %970 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %9) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %386) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %380) #9
  br i1 %970, label %971, label %991

971:                                              ; preds = %967
  %972 = call %"class.WTF::StringImpl"* @_ZNK5blink15HTMLFormElement6actionEv(%"class.blink::HTMLFormElement"* nonnull %390) #9
  %973 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %973, i64* %391, align 8
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i8** %392, align 8
  store i32 11, i32* %393, align 8
  %974 = icmp eq %"class.WTF::StringImpl"* %972, null
  br i1 %974, label %975, label %976

975:                                              ; preds = %971
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %379) #9
  br label %992

976:                                              ; preds = %971
  %977 = call zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %972, %"class.WTF::StringView"* nonnull dereferenceable(24) %34) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %379) #9
  %978 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %972, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %979 = load atomic i32, i32* %978 monotonic, align 4
  %980 = and i32 %979, 2
  %981 = icmp eq i32 %980, 0
  %982 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %972, i64 0, i32 0
  %983 = load i32, i32* %982, align 4
  br i1 %981, label %984, label %986

984:                                              ; preds = %976
  %985 = add i32 %983, -1
  store i32 %985, i32* %982, align 4
  br label %986

986:                                              ; preds = %984, %976
  %987 = phi i32 [ %985, %984 ], [ %983, %976 ]
  %988 = icmp eq i32 %987, 0
  br i1 %988, label %989, label %990

989:                                              ; preds = %986
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %972) #9
  br i1 %977, label %1051, label %992

990:                                              ; preds = %986
  br i1 %977, label %1051, label %992

991:                                              ; preds = %967, %948
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %379) #9
  br label %992

992:                                              ; preds = %944, %975, %990, %989, %991
  %993 = load i32, i32* %327, align 8
  %994 = and i32 %993, 48
  %995 = icmp eq i32 %994, 0
  br i1 %995, label %996, label %1004

996:                                              ; preds = %992
  %997 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %396, align 8
  %998 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %331, align 8
  %999 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %998, i64 0, i32 3, i32 0, i32 0, i32 0
  %1000 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %999, align 8
  %1001 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %997, i64 0, i32 3, i32 0, i32 0, i32 0
  %1002 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1001, align 8
  %1003 = icmp eq %"class.WTF::StringImpl"* %1000, %1002
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %394) #9
  br i1 %1003, label %1013, label %1005

1004:                                             ; preds = %992
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %394) #9
  br label %1033

1005:                                             ; preds = %996
  %1006 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %398, align 8
  %1007 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %331, align 8
  %1008 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %1007, i64 0, i32 3, i32 0, i32 0, i32 0
  %1009 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1008, align 8
  %1010 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %1006, i64 0, i32 3, i32 0, i32 0, i32 0
  %1011 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1010, align 8
  %1012 = icmp eq %"class.WTF::StringImpl"* %1009, %1011
  br i1 %1012, label %1013, label %1033

1013:                                             ; preds = %1005, %996
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %399) #9
  %1014 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 0, i32 0, i32 0, i32 0
  %1015 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1014, align 8
  %1016 = icmp eq %"class.WTF::StringImpl"* %1015, null
  br i1 %1016, label %1017, label %1019

1017:                                             ; preds = %1013
  store i8* null, i8** %401, align 8
  %1018 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1018, i64* %403, align 8
  br label %1024

1019:                                             ; preds = %1013
  store %"class.WTF::StringImpl"* %1015, %"class.WTF::StringImpl"** %400, align 8
  %1020 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1015, i64 0, i32 1
  %1021 = load i32, i32* %1020, align 4
  %1022 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1015, i64 1
  store %"class.WTF::StringImpl"* %1022, %"class.WTF::StringImpl"** %402, align 8
  %1023 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %1024

1024:                                             ; preds = %1019, %1017
  %1025 = phi i64 [ %1023, %1019 ], [ %1018, %1017 ]
  %1026 = phi i32 [ %1021, %1019 ], [ 0, %1017 ]
  store i32 %1026, i32* %404, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %405) #9
  store i64 %1025, i64* %406, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i64 0, i64 0), i8** %407, align 8
  store i32 10, i32* %408, align 8
  %1027 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %6, %"class.WTF::StringView"* nonnull dereferenceable(24) %7) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %405) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %399) #9
  br i1 %1027, label %1028, label %1033

1028:                                             ; preds = %1024
  %1029 = call %"class.WTF::StringImpl"* @_ZNK5blink22HTMLFormControlElement10formActionEv(%"class.blink::HTMLFormControlElement"* nonnull %409) #9
  %1030 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1030, i64* %410, align 8
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i8** %411, align 8
  store i32 11, i32* %412, align 8
  %1031 = icmp eq %"class.WTF::StringImpl"* %1029, null
  br i1 %1031, label %1032, label %1034

1032:                                             ; preds = %1028
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %394) #9
  br i1 %832, label %1051, label %1074

1033:                                             ; preds = %1004, %833, %1005, %1024
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %394) #9
  br i1 %832, label %1051, label %1074

1034:                                             ; preds = %1028
  %1035 = call zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %1029, %"class.WTF::StringView"* nonnull dereferenceable(24) %35) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %394) #9
  %1036 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1029, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1037 = load atomic i32, i32* %1036 monotonic, align 4
  %1038 = and i32 %1037, 2
  %1039 = icmp eq i32 %1038, 0
  %1040 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1029, i64 0, i32 0
  %1041 = load i32, i32* %1040, align 4
  br i1 %1039, label %1042, label %1044

1042:                                             ; preds = %1034
  %1043 = add i32 %1041, -1
  store i32 %1043, i32* %1040, align 4
  br label %1044

1044:                                             ; preds = %1042, %1034
  %1045 = phi i32 [ %1043, %1042 ], [ %1041, %1034 ]
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1047, label %1049

1047:                                             ; preds = %1044
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1029) #9
  %1048 = or i1 %1035, %832
  br i1 %1048, label %1051, label %1074

1049:                                             ; preds = %1044
  %1050 = or i1 %1035, %832
  br i1 %1050, label %1051, label %1074

1051:                                             ; preds = %1049, %1047, %1033, %989, %990, %943, %888, %1032
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %413) #9
  %1052 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 0, i32 0, i32 0, i32 0
  %1053 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1052, align 8
  %1054 = icmp eq %"class.WTF::StringImpl"* %1053, null
  br i1 %1054, label %1055, label %1057

1055:                                             ; preds = %1051
  store i8* null, i8** %415, align 8
  %1056 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1056, i64* %417, align 8
  br label %1061

1057:                                             ; preds = %1051
  store %"class.WTF::StringImpl"* %1053, %"class.WTF::StringImpl"** %414, align 8
  %1058 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1053, i64 0, i32 1
  %1059 = load i32, i32* %1058, align 4
  %1060 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1053, i64 1
  store %"class.WTF::StringImpl"* %1060, %"class.WTF::StringImpl"** %416, align 8
  br label %1061

1061:                                             ; preds = %1055, %1057
  %1062 = phi i32 [ %1059, %1057 ], [ 0, %1055 ]
  store i32 %1062, i32* %418, align 8
  %1063 = call i64 @_ZNK5blink7Element24WeakLowercaseIfNecessaryERKN3WTF10StringViewE(%"class.blink::Element"* %36, %"class.WTF::StringView"* nonnull dereferenceable(24) %18) #9
  call void @_ZN5blink7Element21RemoveAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"* %36, %"class.WTF::AtomicString"* dereferenceable(8) %458, i64 %1063) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %413) #9
  %1064 = call %"class.blink::ExecutionContext"* @_ZNK5blink14LocalDOMWindow19GetExecutionContextEv(%"class.blink::LocalDOMWindow"* %4) #9
  %1065 = icmp eq %"class.blink::ExecutionContext"* %1064, null
  %1066 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %1064, i64 0, i32 3
  %1067 = icmp eq %"class.blink::UseCounter"* %1066, null
  %1068 = or i1 %1065, %1067
  br i1 %1068, label %1074, label %1069

1069:                                             ; preds = %1061
  %1070 = bitcast %"class.blink::UseCounter"* %1066 to void (%"class.blink::UseCounter"*, i32)***
  %1071 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %1070, align 8
  %1072 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %1071, i64 3
  %1073 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %1072, align 8
  call void %1073(%"class.blink::UseCounter"* nonnull %1066, i32 3818) #9
  br label %1074

1074:                                             ; preds = %1049, %1047, %1069, %1061, %1033, %1032
  %1075 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %458, i64 1
  %1076 = icmp eq %"class.WTF::AtomicString"* %1075, %292
  br i1 %1076, label %419, label %457

1077:                                             ; preds = %455, %421, %256, %222
  %1078 = phi i8* [ %205, %222 ], [ %205, %256 ], [ %286, %421 ], [ %286, %455 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1078) #9
  br label %1079

1079:                                             ; preds = %1077, %119
  %1080 = getelementptr inbounds %"class.blink::DocumentFragment", %"class.blink::DocumentFragment"* %2, i64 0, i32 0, i32 0
  %1081 = icmp eq %"class.blink::Node"* %1, null
  br i1 %1081, label %1092, label %1082

1082:                                             ; preds = %1079
  %1083 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 1
  %1084 = load i32, i32* %1083, align 8
  %1085 = and i32 %1084, 2
  %1086 = icmp eq i32 %1085, 0
  br i1 %1086, label %1092, label %1087

1087:                                             ; preds = %1082
  %1088 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 1
  %1089 = bitcast %"class.blink::Node"* %1088 to %"class.blink::Node"**
  %1090 = load %"class.blink::Node"*, %"class.blink::Node"** %1089, align 8
  %1091 = icmp eq %"class.blink::Node"* %1090, null
  br i1 %1091, label %1092, label %1100

1092:                                             ; preds = %1087, %1082, %1079
  %1093 = icmp eq %"class.blink::Node"* %1080, %1
  br i1 %1093, label %1100, label %1094

1094:                                             ; preds = %1092
  %1095 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %1, i64 0, i32 5, i32 0, i32 0
  %1096 = load %"class.blink::Node"*, %"class.blink::Node"** %1095, align 8
  %1097 = icmp eq %"class.blink::Node"* %1096, null
  br i1 %1097, label %1098, label %1100

1098:                                             ; preds = %1094
  %1099 = call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %1, %"class.blink::Node"* %1080) #9
  br label %1100

1100:                                             ; preds = %1087, %1092, %1094, %1098
  %1101 = phi %"class.blink::Node"* [ %1099, %1098 ], [ null, %1092 ], [ %1096, %1094 ], [ %1090, %1087 ]
  ret %"class.blink::Node"* %1101
}

declare void @_ZN5blink4Node6removeEv(%"class.blink::Node"*) local_unnamed_addr #2

declare %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"*) local_unnamed_addr #2

declare %"class.blink::Node"* @_ZN5blink13ContainerNode12InsertBeforeEPNS_4NodeES2_RNS_14ExceptionStateE(%"class.blink::ContainerNode"*, %"class.blink::Node"*, %"class.blink::Node"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF7HashMapINS_6StringENS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEENS_10StringHashENS_10HashTraitsIS1_EENS6_IS4_EES3_E2atERKS1_(%"class.WTF::Vector"* noalias sret, %"class.WTF::HashMap"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %1, i64 0, i32 0
  %5 = tail call %"struct.WTF::KeyValuePair"* @_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6LookupERKS1_(%"class.WTF::HashTable.1"* %4, %"class.WTF::String"* dereferenceable(8) %2)
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.WTF::Vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  br label %62

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %12, align 8
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %13, align 8
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %24, label %15

15:                                               ; preds = %9
  %16 = zext i32 %11 to i64
  %17 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %16) #9
  %18 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %17, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = lshr i64 %17, 3
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %13, align 8
  %23 = bitcast i8* %18 to %"class.WTF::String"*
  br label %24

24:                                               ; preds = %15, %9
  %25 = phi %"class.WTF::String"* [ null, %9 ], [ %23, %15 ]
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 0, i32 1, i32 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 0, i32 1, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::String"*, %"class.WTF::String"** %29, align 8
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %30, i64 %31
  %33 = icmp eq i32 %27, 0
  br i1 %33, label %62, label %34

34:                                               ; preds = %24, %58
  %35 = phi %"class.WTF::String"* [ %59, %58 ], [ %25, %24 ]
  %36 = phi %"class.WTF::String"* [ %60, %58 ], [ %30, %24 ]
  %37 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 0, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %38, %"class.WTF::StringImpl"** %39, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %40, label %58, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %58

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i33
  %50 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %49, i33 1) #9
  %51 = extractvalue { i33, i1 } %50, 1
  %52 = extractvalue { i33, i1 } %50, 0
  %53 = icmp slt i33 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %55, label %56, !prof !2

55:                                               ; preds = %46
  tail call void @llvm.trap() #9
  unreachable

56:                                               ; preds = %46
  %57 = trunc i33 %52 to i32
  store i32 %57, i32* %47, align 4
  br label %58

58:                                               ; preds = %56, %41, %34
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 1
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 1
  %61 = icmp eq %"class.WTF::String"* %60, %32
  br i1 %61, label %62, label %34

62:                                               ; preds = %58, %24, %7
  ret void
}

declare void @_ZNK5blink7Element17getAttributeNamesEv(%"class.WTF::Vector.1591"* sret, %"class.blink::Element"*) local_unnamed_addr #2

declare void @_ZNK5blink17HTMLAnchorElement4HrefEv(%"class.blink::KURL"* sret, %"class.blink::HTMLAnchorElement"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink4KURL8ProtocolEv(%"class.blink::KURL"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink15HTMLFormElement6actionEv(%"class.blink::HTMLFormElement"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink22HTMLFormControlElement10formActionEv(%"class.blink::HTMLFormControlElement"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SanitizerConfig"* @_ZNK5blink9Sanitizer6configEv(%"class.blink::Sanitizer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::SanitizerConfig"*, %"class.blink::SanitizerConfig"** %2, align 8
  %4 = icmp eq %"class.blink::SanitizerConfig"* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call %"class.blink::SanitizerConfig"* @_ZN5blink19SanitizerConfigImpl13defaultConfigEv() #9
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi %"class.blink::SanitizerConfig"* [ %6, %5 ], [ %3, %1 ]
  %9 = tail call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_119SanitizerConfigCopyEPKNS_15SanitizerConfigE(%"class.blink::SanitizerConfig"* %8)
  ret %"class.blink::SanitizerConfig"* %9
}

declare %"class.blink::SanitizerConfig"* @_ZN5blink19SanitizerConfigImpl13defaultConfigEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SanitizerConfig"* @_ZN5blink9Sanitizer13defaultConfigEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %"class.blink::SanitizerConfig"* @_ZN5blink19SanitizerConfigImpl13defaultConfigEv() #9
  %2 = tail call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_119SanitizerConfigCopyEPKNS_15SanitizerConfigE(%"class.blink::SanitizerConfig"* %1)
  ret %"class.blink::SanitizerConfig"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9Sanitizer5TraceEPNS_7VisitorE(%"class.blink::Sanitizer"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %1) #9
  %4 = getelementptr inbounds %"class.blink::Sanitizer", %"class.blink::Sanitizer"* %0, i64 0, i32 2
  %5 = bitcast %"class.blink::Member"* %4 to i64*
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = inttoptr i64 %6 to i8*
  %10 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, i64 5
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %12, align 8
  tail call void %13(%"class.blink::Visitor"* %1, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_15SanitizerConfigEE5TraceEPNS_7VisitorEPKv) #9
  br label %14

14:                                               ; preds = %2, %8
  ret void
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #2

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink9Sanitizer18GetWrapperTypeInfoEv(%"class.blink::Sanitizer"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink9Sanitizer18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #2

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN5blink15SanitizerConfig18setAllowAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector.8"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN5blink15SanitizerConfig16setAllowElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN5blink15SanitizerConfig16setBlockElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN5blink15SanitizerConfig17setDropAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector.8"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN5blink15SanitizerConfig15setDropElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN5blink15SanitizerConfigC1Ev(%"class.blink::SanitizerConfig"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17IDLDictionaryBaseEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #3 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #9
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.139, i64 0, i64 0), i8* %21, i8* %22) #9
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.140, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #9
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !2

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #9
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.141, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZN5blink9DOMParserC1EPNS_11ScriptStateE(%"class.blink::DOMParser"*, %"class.blink::ScriptState"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15ScriptWrappableEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #9
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare void @_ZN5blink22ParseFromStringOptionsC1Ev(%"class.blink::ParseFromStringOptions"*) unnamed_addr #2

declare %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64), %"class.blink::Node"*) local_unnamed_addr #2

declare dereferenceable(16) %"class.WTF::Vector.1591"* @_ZN5blink13CustomElement26EmbedderCustomElementNamesEv() local_unnamed_addr #2

declare zeroext i1 @_ZN5blink9Character32IsPotentialCustomElementNameCharEi(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink13CustomElement27IsHyphenatedSpecElementNameERKN3WTF12AtomicStringE(%"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #8

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN5blink7Element21RemoveAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64) local_unnamed_addr #2

declare i64 @_ZNK5blink7Element24WeakLowercaseIfNecessaryERKN3WTF10StringViewE(%"class.blink::Element"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.142, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.143, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.144, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.145, i64 0, i64 0)) #9
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #9
  %30 = bitcast i8* %29 to %"class.WTF::String"*
  %31 = call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %30, i32 %17, %"class.WTF::String"* null) #9
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"*, %"class.WTF::String"*, i32, %"class.WTF::String"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable", align 8
  %6 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"class.WTF::String"* %1, %"class.WTF::String"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"class.WTF::String"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %23 = ptrtoint %"class.WTF::String"* %22 to i64
  br label %71

24:                                               ; preds = %110
  %25 = bitcast %"class.WTF::HashTable"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %111, %24 ]
  %33 = phi %"class.WTF::String"* [ null, %16 ], [ %114, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %112, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"class.WTF::String"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %67, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %62, %39
  %42 = phi i64 [ 0, %39 ], [ %63, %62 ]
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 %42
  %44 = bitcast %"class.WTF::String"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %47 = ptrtoint i8* %45 to i64
  switch i64 %47, label %48 [
    i64 -1, label %62
    i64 0, label %62
  ]

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %45, i64 8
  %50 = bitcast i8* %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = bitcast i8* %45 to i32*
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %48
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %48
  %59 = phi i32 [ %57, %56 ], [ %55, %48 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %46) #9
  br label %62

62:                                               ; preds = %61, %58, %41, %41
  %63 = add nuw nsw i64 %42, 1
  %64 = icmp eq i64 %63, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %62, %37
  %66 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #9
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %67

67:                                               ; preds = %28, %65
  %68 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, -2147483648
  store i32 %70, i32* %68, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret %"class.WTF::String"* %33

71:                                               ; preds = %21, %110
  %72 = phi i64 [ %111, %110 ], [ %23, %21 ]
  %73 = phi i32 [ %112, %110 ], [ %13, %21 ]
  %74 = phi %"class.WTF::String"* [ %113, %110 ], [ %22, %21 ]
  %75 = phi %"class.WTF::String"* [ %114, %110 ], [ null, %21 ]
  %76 = phi i32 [ %115, %110 ], [ 0, %21 ]
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %74, i64 %77
  %79 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %78, i64 0, i32 0, i32 0
  %80 = bitcast %"class.WTF::String"* %78 to i64*
  %81 = load i64, i64* %80, align 8
  switch i64 %81, label %82 [
    i64 -1, label %110
    i64 0, label %110
  ]

82:                                               ; preds = %71
  %83 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable"* nonnull %5, %"class.WTF::String"* dereferenceable(8) %78) #9
  %84 = extractvalue { %"class.WTF::String"*, i8 } %83, 0
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %84, i64 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %82
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  br i1 %92, label %95, label %97

95:                                               ; preds = %88
  %96 = add i32 %94, -1
  store i32 %96, i32* %93, align 4
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi i32 [ %96, %95 ], [ %94, %88 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #9
  br label %101

101:                                              ; preds = %82, %97, %100
  %102 = load i64, i64* %80, align 8
  %103 = bitcast %"class.WTF::String"* %84 to i64*
  store i64 %102, i64* %103, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  %104 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %104, i64 %77
  %106 = icmp eq %"class.WTF::String"* %105, %3
  %107 = select i1 %106, %"class.WTF::String"* %84, %"class.WTF::String"* %75
  %108 = load i32, i32* %12, align 8
  %109 = ptrtoint %"class.WTF::String"* %104 to i64
  br label %110

110:                                              ; preds = %71, %71, %101
  %111 = phi i64 [ %72, %71 ], [ %109, %101 ], [ %72, %71 ]
  %112 = phi i32 [ %73, %71 ], [ %108, %101 ], [ %73, %71 ]
  %113 = phi %"class.WTF::String"* [ %74, %71 ], [ %104, %101 ], [ %74, %71 ]
  %114 = phi %"class.WTF::String"* [ %75, %71 ], [ %107, %101 ], [ %75, %71 ]
  %115 = add i32 %76, 1
  %116 = icmp eq i32 %115, %112
  br i1 %116, label %24, label %71
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"class.WTF::String"*, %"class.WTF::String"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #9
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 %20
  %22 = ptrtoint %"class.WTF::String"* %21 to i64
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"class.WTF::String"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"class.WTF::String"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"class.WTF::String"* %44, null
  %46 = ptrtoint %"class.WTF::String"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"class.WTF::String"* [ null, %26 ], [ %62, %61 ]
  %50 = phi %"class.WTF::StringImpl"* [ %24, %26 ], [ %70, %61 ]
  %51 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %52 = phi %"class.WTF::String"* [ %21, %26 ], [ %67, %61 ]
  %53 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %54 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %55 = bitcast %"class.WTF::String"* %52 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = icmp eq i8* %56, inttoptr (i64 -1 to i8*)
  br i1 %57, label %61, label %58

58:                                               ; preds = %48
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %50, %"class.WTF::StringImpl"* %59) #9
  br i1 %60, label %72, label %61

61:                                               ; preds = %58, %48
  %62 = phi %"class.WTF::String"* [ %49, %58 ], [ %52, %48 ]
  %63 = icmp eq i64 %54, 0
  %64 = select i1 %63, i64 %39, i64 %54
  %65 = add i64 %64, %53
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 %66
  %68 = ptrtoint %"class.WTF::String"* %67 to i64
  %69 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %67, i64 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %58, %42
  %73 = phi i64 [ %47, %42 ], [ %51, %58 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %58 ]
  %75 = inttoptr i64 %73 to %"class.WTF::String"*
  %76 = insertvalue { %"class.WTF::String"*, i8 } undef, %"class.WTF::String"* %75, 0
  %77 = insertvalue { %"class.WTF::String"*, i8 } %76, i8 %74, 1
  ret { %"class.WTF::String"*, i8 } %77
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* null)
  %9 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::String"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #9
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %27
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %78, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"class.WTF::StringImpl"* [ %30, %32 ], [ %66, %58 ]
  %48 = phi %"class.WTF::String"* [ %28, %32 ], [ %64, %58 ]
  %49 = phi %"class.WTF::String"* [ null, %32 ], [ %59, %58 ]
  %50 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %51 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %52 = bitcast %"class.WTF::String"* %48 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, inttoptr (i64 -1 to i8*)
  br i1 %54, label %58, label %55

55:                                               ; preds = %46
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %47, %"class.WTF::StringImpl"* %56) #9
  br i1 %57, label %131, label %58

58:                                               ; preds = %46, %55
  %59 = phi %"class.WTF::String"* [ %49, %55 ], [ %48, %46 ]
  %60 = icmp eq i64 %51, 0
  %61 = select i1 %60, i64 %45, i64 %51
  %62 = add i64 %61, %50
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %63
  %65 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"class.WTF::String"* %59, null
  br i1 %69, label %78, label %70

70:                                               ; preds = %68
  %71 = bitcast %"class.WTF::String"* %59 to i64*
  store i64 0, i64* %71, align 8
  %72 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = add i32 %73, 2147483647
  %75 = and i32 %74, 2147483647
  %76 = and i32 %73, -2147483648
  %77 = or i32 %75, %76
  store i32 %77, i32* %72, align 8
  br label %78

78:                                               ; preds = %24, %68, %70
  %79 = phi %"class.WTF::String"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %100, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %100

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i33
  %92 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %91, i33 1) #9
  %93 = extractvalue { i33, i1 } %92, 1
  %94 = extractvalue { i33, i1 } %92, 0
  %95 = icmp slt i33 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %97, label %98, !prof !2

97:                                               ; preds = %88
  tail call void @llvm.trap() #9
  unreachable

98:                                               ; preds = %88
  %99 = trunc i33 %94 to i32
  store i32 %99, i32* %89, align 4
  br label %100

100:                                              ; preds = %98, %83, %78
  %101 = ptrtoint %"class.WTF::StringImpl"* %81 to i64
  %102 = bitcast %"class.WTF::String"* %79 to i64*
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %79, i64 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  store i64 %101, i64* %102, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %119, label %106

106:                                              ; preds = %100
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %104) #9
  br label %119

119:                                              ; preds = %100, %115, %118
  %120 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %121 = load i32, i32* %120, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %120, align 4
  %123 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %124 = load i32, i32* %123, align 8
  %125 = add i32 %124, %122
  %126 = shl i32 %125, 1
  %127 = load i32, i32* %12, align 8
  %128 = icmp ult i32 %126, %127
  br i1 %128, label %131, label %129

129:                                              ; preds = %119
  %130 = tail call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %79)
  br label %131

131:                                              ; preds = %55, %119, %129
  %132 = phi i8 [ 1, %119 ], [ 1, %129 ], [ 0, %55 ]
  %133 = phi %"class.WTF::String"* [ %79, %119 ], [ %130, %129 ], [ %48, %55 ]
  %134 = insertvalue { %"class.WTF::String"*, i8 } undef, %"class.WTF::String"* %133, 0
  %135 = insertvalue { %"class.WTF::String"*, i8 } %134, i8 %132, 1
  ret { %"class.WTF::String"*, i8 } %135
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"*, %"class.WTF::String"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #9
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.146, i64 0, i64 0), i8* %22, i8* %23) #9
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.144, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #9
  %36 = bitcast i8* %35 to %"class.WTF::String"*
  %37 = call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %36, i32 %32, %"class.WTF::String"* %1) #9
  ret %"class.WTF::String"* %37
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %63

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.144, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.145, i64 0, i64 0)) #9
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = mul nuw nsw i64 %27, 24
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #9
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair"*
  %31 = and i64 %27, 1
  %32 = sub nsw i64 %27, %31
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi i64 [ 0, %26 ], [ %49, %33 ]
  %35 = phi i64 [ %32, %26 ], [ %50, %33 ]
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1, i32 0, i32 0, i32 2
  %40 = bitcast %"class.WTF::Vector"* %37 to i64*
  %41 = bitcast %"struct.WTF::KeyValuePair"* %36 to i64*
  store i64 0, i64* %41, align 8
  store atomic i64 0, i64* %40 monotonic, align 8
  store i32 0, i32* %38, align 4
  store i32 0, i32* %39, align 4
  %42 = or i64 %34, 1
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42, i32 1
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42, i32 1, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42, i32 1, i32 0, i32 0, i32 2
  %47 = bitcast %"class.WTF::Vector"* %44 to i64*
  %48 = bitcast %"struct.WTF::KeyValuePair"* %43 to i64*
  store i64 0, i64* %48, align 8
  store atomic i64 0, i64* %47 monotonic, align 8
  store i32 0, i32* %45, align 4
  store i32 0, i32* %46, align 4
  %49 = add nuw nsw i64 %34, 2
  %50 = add i64 %35, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %33

52:                                               ; preds = %33
  %53 = icmp eq i64 %31, 0
  br i1 %53, label %61, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49, i32 1
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49, i32 1, i32 0, i32 0, i32 1
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49, i32 1, i32 0, i32 0, i32 2
  %59 = bitcast %"class.WTF::Vector"* %56 to i64*
  %60 = bitcast %"struct.WTF::KeyValuePair"* %55 to i64*
  store i64 0, i64* %60, align 8
  store atomic i64 0, i64* %59 monotonic, align 8
  store i32 0, i32* %57, align 4
  store i32 0, i32* %58, align 4
  br label %61

61:                                               ; preds = %52, %54
  %62 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.1"* %0, %"struct.WTF::KeyValuePair"* %30, i32 %17, %"struct.WTF::KeyValuePair"* null) #9
  br label %63

63:                                               ; preds = %61, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.1"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.1", align 8
  %6 = bitcast %"class.WTF::HashTable.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.1"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair"* %1, %"struct.WTF::KeyValuePair"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.1"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.1"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair"* %22 to i64
  br label %114

24:                                               ; preds = %134
  %25 = bitcast %"class.WTF::HashTable.1"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.1"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %135, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair"* [ null, %16 ], [ %138, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %136, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %110, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %108, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %105, %39
  %42 = phi i64 [ 0, %39 ], [ %106, %105 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42
  %44 = bitcast %"struct.WTF::KeyValuePair"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, inttoptr (i64 -1 to i8*)
  br i1 %46, label %105, label %47

47:                                               ; preds = %41
  %48 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42, i32 1
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::String"*, %"class.WTF::String"** %50, align 8
  %52 = icmp eq %"class.WTF::String"* %51, null
  br i1 %52, label %89, label %53, !prof !3

53:                                               ; preds = %47
  %54 = bitcast %"class.WTF::String"* %51 to i8*
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42, i32 1, i32 0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %85, label %58, !prof !2

58:                                               ; preds = %53
  %59 = zext i32 %56 to i64
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 %59
  br label %61

61:                                               ; preds = %79, %58
  %62 = phi %"class.WTF::String"* [ %80, %79 ], [ %51, %58 ]
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %62, i64 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #9
  br label %79

79:                                               ; preds = %78, %75, %61
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %62, i64 1
  %81 = icmp eq %"class.WTF::String"* %80, %60
  br i1 %81, label %82, label %61

82:                                               ; preds = %79
  store i32 0, i32* %55, align 4
  %83 = bitcast %"class.WTF::Vector"* %49 to i8**
  %84 = load i8*, i8** %83, align 8
  br label %85

85:                                               ; preds = %82, %53
  %86 = phi i8* [ %84, %82 ], [ %54, %53 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %86) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %50, align 8
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %43, i64 0, i32 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  br label %89

89:                                               ; preds = %85, %47
  %90 = phi %"class.WTF::StringImpl"* [ %88, %85 ], [ %48, %47 ]
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %105, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  br i1 %96, label %99, label %101

99:                                               ; preds = %92
  %100 = add i32 %98, -1
  store i32 %100, i32* %97, align 4
  br label %101

101:                                              ; preds = %99, %92
  %102 = phi i32 [ %100, %99 ], [ %98, %92 ]
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %90) #9
  br label %105

105:                                              ; preds = %104, %101, %89, %41
  %106 = add nuw nsw i64 %42, 1
  %107 = icmp eq i64 %106, %40
  br i1 %107, label %108, label %41

108:                                              ; preds = %105, %37
  %109 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %109) #9
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %110

110:                                              ; preds = %28, %108
  %111 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 3
  %112 = load i32, i32* %111, align 8
  %113 = and i32 %112, -2147483648
  store i32 %113, i32* %111, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret %"struct.WTF::KeyValuePair"* %33

114:                                              ; preds = %21, %134
  %115 = phi i64 [ %135, %134 ], [ %23, %21 ]
  %116 = phi i32 [ %136, %134 ], [ %13, %21 ]
  %117 = phi %"struct.WTF::KeyValuePair"* [ %137, %134 ], [ %22, %21 ]
  %118 = phi %"struct.WTF::KeyValuePair"* [ %138, %134 ], [ null, %21 ]
  %119 = phi i32 [ %139, %134 ], [ 0, %21 ]
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %117, i64 %120
  %122 = bitcast %"struct.WTF::KeyValuePair"* %121 to i64*
  %123 = load i64, i64* %122, align 8
  switch i64 %123, label %124 [
    i64 -1, label %134
    i64 0, label %134
  ]

124:                                              ; preds = %114
  %125 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %121, i64 0, i32 0
  %126 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E16LookupForWritingERKS1_(%"class.WTF::HashTable.1"* nonnull %5, %"class.WTF::String"* dereferenceable(8) %125) #9
  %127 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %126, 0
  call void @_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_(%"struct.WTF::KeyValuePair"* dereferenceable(24) %121, %"struct.WTF::KeyValuePair"* dereferenceable(24) %127) #9
  %128 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %129 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %128, i64 %120
  %130 = icmp eq %"struct.WTF::KeyValuePair"* %129, %3
  %131 = select i1 %130, %"struct.WTF::KeyValuePair"* %127, %"struct.WTF::KeyValuePair"* %118
  %132 = load i32, i32* %12, align 8
  %133 = ptrtoint %"struct.WTF::KeyValuePair"* %128 to i64
  br label %134

134:                                              ; preds = %114, %114, %124
  %135 = phi i64 [ %115, %114 ], [ %133, %124 ], [ %115, %114 ]
  %136 = phi i32 [ %116, %114 ], [ %132, %124 ], [ %116, %114 ]
  %137 = phi %"struct.WTF::KeyValuePair"* [ %117, %114 ], [ %128, %124 ], [ %117, %114 ]
  %138 = phi %"struct.WTF::KeyValuePair"* [ %118, %114 ], [ %131, %124 ], [ %118, %114 ]
  %139 = add i32 %119, 1
  %140 = icmp eq i32 %139, %136
  br i1 %140, label %24, label %114
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E16LookupForWritingERKS1_(%"class.WTF::HashTable.1"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #9
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %20
  %22 = ptrtoint %"struct.WTF::KeyValuePair"* %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %21, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"struct.WTF::KeyValuePair"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"struct.WTF::KeyValuePair"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"struct.WTF::KeyValuePair"* %44, null
  %46 = ptrtoint %"struct.WTF::KeyValuePair"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"struct.WTF::KeyValuePair"* [ null, %26 ], [ %62, %61 ]
  %50 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %51 = phi %"struct.WTF::KeyValuePair"* [ %21, %26 ], [ %67, %61 ]
  %52 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %53 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %54 = bitcast %"struct.WTF::KeyValuePair"* %51 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, inttoptr (i64 -1 to i8*)
  br i1 %56, label %61, label %57

57:                                               ; preds = %48
  %58 = bitcast i8* %55 to %"class.WTF::StringImpl"*
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"* %59) #9
  br i1 %60, label %72, label %61

61:                                               ; preds = %57, %48
  %62 = phi %"struct.WTF::KeyValuePair"* [ %49, %57 ], [ %51, %48 ]
  %63 = icmp eq i64 %53, 0
  %64 = select i1 %63, i64 %39, i64 %53
  %65 = add i64 %64, %52
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %66
  %68 = ptrtoint %"struct.WTF::KeyValuePair"* %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %67, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %57, %42
  %73 = phi i64 [ %47, %42 ], [ %50, %57 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %57 ]
  %75 = inttoptr i64 %73 to %"struct.WTF::KeyValuePair"*
  %76 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %75, 0
  %77 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %76, i8 %74, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %77
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_(%"struct.WTF::KeyValuePair"* dereferenceable(24), %"struct.WTF::KeyValuePair"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %41, label %7, !prof !3

7:                                                ; preds = %2
  %8 = bitcast %"class.WTF::String"* %5 to i8*
  %9 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %39, label %12, !prof !2

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %13
  br label %15

15:                                               ; preds = %33, %12
  %16 = phi %"class.WTF::String"* [ %34, %33 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %33

33:                                               ; preds = %32, %29, %15
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 1
  %35 = icmp eq %"class.WTF::String"* %34, %14
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  %37 = bitcast %"class.WTF::Vector"* %3 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi i8* [ %38, %36 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %4, align 8
  br label %41

41:                                               ; preds = %39, %2
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #9
  br label %58

58:                                               ; preds = %41, %54, %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0, i32 0, i32 0
  %60 = bitcast %"struct.WTF::KeyValuePair"* %0 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"struct.WTF::KeyValuePair"* %1 to i64*
  store i64 %61, i64* %62, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %59, align 8
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %66 = bitcast %"class.WTF::Vector"* %63 to i64*
  %67 = bitcast %"class.WTF::Vector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 16, i1 false) #9
  %68 = load i64, i64* %66, align 8
  %69 = bitcast %"class.WTF::Vector"* %3 to i64*
  store atomic i64 0, i64* %66 monotonic, align 8
  store atomic i64 %68, i64* %69 monotonic, align 8
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %71 = load i32, i32* %64, align 4
  %72 = load i32, i32* %70, align 4
  store i32 %72, i32* %64, align 4
  store i32 %71, i32* %70, align 4
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %74 = load i32, i32* %65, align 4
  %75 = load i32, i32* %73, align 4
  store i32 %75, i32* %65, align 4
  store i32 %74, i32* %73, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RKS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.1"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.1"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #9
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %82, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"struct.WTF::KeyValuePair"* [ %28, %32 ], [ %64, %58 ]
  %48 = phi %"struct.WTF::KeyValuePair"* [ null, %32 ], [ %59, %58 ]
  %49 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %50 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %51 = bitcast %"struct.WTF::KeyValuePair"* %47 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, inttoptr (i64 -1 to i8*)
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = bitcast i8* %52 to %"class.WTF::StringImpl"*
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"* %56) #9
  br i1 %57, label %136, label %58

58:                                               ; preds = %46, %54
  %59 = phi %"struct.WTF::KeyValuePair"* [ %48, %54 ], [ %47, %46 ]
  %60 = icmp eq i64 %50, 0
  %61 = select i1 %60, i64 %45, i64 %50
  %62 = add i64 %61, %49
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %69, label %82, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0, i32 0, i32 1
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0, i32 0, i32 2
  %74 = bitcast %"class.WTF::Vector"* %71 to i64*
  %75 = bitcast %"struct.WTF::KeyValuePair"* %59 to i64*
  store i64 0, i64* %75, align 8
  store atomic i64 0, i64* %74 monotonic, align 8
  store i32 0, i32* %72, align 4
  store i32 0, i32* %73, align 4
  %76 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, 2147483647
  %79 = and i32 %78, 2147483647
  %80 = and i32 %77, -2147483648
  %81 = or i32 %79, %80
  store i32 %81, i32* %76, align 8
  br label %82

82:                                               ; preds = %24, %68, %70
  %83 = phi %"struct.WTF::KeyValuePair"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %103, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %103

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i33
  %95 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %94, i33 1) #9
  %96 = extractvalue { i33, i1 } %95, 1
  %97 = extractvalue { i33, i1 } %95, 0
  %98 = icmp slt i33 %97, 0
  %99 = or i1 %96, %98
  br i1 %99, label %100, label %101, !prof !2

100:                                              ; preds = %91
  tail call void @llvm.trap() #9
  unreachable

101:                                              ; preds = %91
  %102 = trunc i33 %97 to i32
  store i32 %102, i32* %92, align 4
  br label %103

103:                                              ; preds = %101, %86, %82
  %104 = ptrtoint %"class.WTF::StringImpl"* %84 to i64
  %105 = bitcast %"struct.WTF::KeyValuePair"* %83 to i64*
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 0, i32 0, i32 0
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  store i64 %104, i64* %105, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %103
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #9
  br label %122

122:                                              ; preds = %103, %118, %121
  %123 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 1
  %124 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"* %123, %"class.WTF::Vector"* dereferenceable(16) %2) #9
  %125 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %125, align 4
  %128 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 3
  %129 = load i32, i32* %128, align 8
  %130 = add i32 %129, %127
  %131 = shl i32 %130, 1
  %132 = load i32, i32* %12, align 8
  %133 = icmp ult i32 %131, %132
  br i1 %133, label %136, label %134

134:                                              ; preds = %122
  %135 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.1"* %0, %"struct.WTF::KeyValuePair"* %83)
  br label %136

136:                                              ; preds = %54, %122, %134
  %137 = phi i8 [ 1, %122 ], [ 1, %134 ], [ 0, %54 ]
  %138 = phi %"struct.WTF::KeyValuePair"* [ %83, %122 ], [ %135, %134 ], [ %47, %54 ]
  %139 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %138, 0
  %140 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %139, i8 %137, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %140
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.1"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #9
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.146, i64 0, i64 0), i8* %22, i8* %23) #9
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.144, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 24
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #9
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %62, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %59, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %60, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0, i32 0, i32 1
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0, i32 0, i32 2
  %50 = bitcast %"class.WTF::Vector"* %47 to i64*
  %51 = bitcast %"struct.WTF::KeyValuePair"* %46 to i64*
  store i64 0, i64* %51, align 8
  store atomic i64 0, i64* %50 monotonic, align 8
  store i32 0, i32* %48, align 4
  store i32 0, i32* %49, align 4
  %52 = or i64 %44, 1
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52, i32 1
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52, i32 1, i32 0, i32 0, i32 1
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52, i32 1, i32 0, i32 0, i32 2
  %57 = bitcast %"class.WTF::Vector"* %54 to i64*
  %58 = bitcast %"struct.WTF::KeyValuePair"* %53 to i64*
  store i64 0, i64* %58, align 8
  store atomic i64 0, i64* %57 monotonic, align 8
  store i32 0, i32* %55, align 4
  store i32 0, i32* %56, align 4
  %59 = add nuw nsw i64 %44, 2
  %60 = add i64 %45, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %43

62:                                               ; preds = %43, %38
  %63 = phi i64 [ 0, %38 ], [ %59, %43 ]
  %64 = icmp eq i64 %39, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63, i32 1
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63, i32 1, i32 0, i32 0, i32 1
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63, i32 1, i32 0, i32 0, i32 2
  %70 = bitcast %"class.WTF::Vector"* %67 to i64*
  %71 = bitcast %"struct.WTF::KeyValuePair"* %66 to i64*
  store i64 0, i64* %71, align 8
  store atomic i64 0, i64* %70 monotonic, align 8
  store i32 0, i32* %68, align 4
  store i32 0, i32* %69, align 4
  br label %72

72:                                               ; preds = %65, %62, %31
  %73 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.1"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #9
  ret %"struct.WTF::KeyValuePair"* %73
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %219, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #9
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #9
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #9
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !3

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #9
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !3

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #9
  %108 = bitcast %"class.WTF::Vector"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #9
  %112 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #9
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !2

145:                                              ; preds = %136
  tail call void @llvm.trap() #9
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #9
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #9
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !2

208:                                              ; preds = %199
  tail call void @llvm.trap() #9
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_8bindings9UnionBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8bindings9UnionBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink8bindings9UnionBaseEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8bindings9UnionBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::bindings::UnionBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::bindings::UnionBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::bindings::UnionBase"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_8bindings9UnionBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::bindings::UnionBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::bindings::UnionBase"*)***
  %4 = load void (%"class.blink::bindings::UnionBase"*)**, void (%"class.blink::bindings::UnionBase"*)*** %3, align 8
  %5 = load void (%"class.blink::bindings::UnionBase"*)*, void (%"class.blink::bindings::UnionBase"*)** %4, align 8
  tail call void %5(%"class.blink::bindings::UnionBase"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_8bindings9UnionBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.141, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6LookupERKS1_(%"class.WTF::HashTable.1"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %61, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %6
  %18 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %12) #9
  br label %19

19:                                               ; preds = %17, %6
  %20 = phi i32 [ %18, %17 ], [ %15, %6 ]
  %21 = and i32 %20, %9
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %61, label %27

27:                                               ; preds = %19
  %28 = xor i32 %20, -1
  %29 = lshr i32 %20, 23
  %30 = add i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %52, %27
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %57, %52 ]
  %43 = phi i64 [ %22, %27 ], [ %56, %52 ]
  %44 = phi i64 [ 0, %27 ], [ %54, %52 ]
  %45 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, inttoptr (i64 -1 to i8*)
  br i1 %47, label %52, label %48

48:                                               ; preds = %41
  %49 = bitcast i8* %46 to %"class.WTF::StringImpl"*
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %51 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"* %50) #9
  br i1 %51, label %61, label %52

52:                                               ; preds = %48, %41
  %53 = icmp eq i64 %44, 0
  %54 = select i1 %53, i64 %40, i64 %44
  %55 = add i64 %54, %43
  %56 = and i64 %55, %10
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %56
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %61, label %41

61:                                               ; preds = %48, %52, %2, %19
  %62 = phi %"struct.WTF::KeyValuePair"* [ null, %2 ], [ null, %19 ], [ %42, %48 ], [ null, %52 ]
  ret %"struct.WTF::KeyValuePair"* %62
}

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8ContainsINS_22IdentityHashTranslatorIS8_SD_S4_EES1_EEbRKT0_(%"class.WTF::HashTable.1"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %61, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable.1", %"class.WTF::HashTable.1"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %6
  %18 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %12) #9
  br label %19

19:                                               ; preds = %17, %6
  %20 = phi i32 [ %18, %17 ], [ %15, %6 ]
  %21 = and i32 %20, %9
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %61, label %27

27:                                               ; preds = %19
  %28 = xor i32 %20, -1
  %29 = lshr i32 %20, 23
  %30 = add i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %52, %27
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %57, %52 ]
  %43 = phi i64 [ %22, %27 ], [ %56, %52 ]
  %44 = phi i64 [ 0, %27 ], [ %54, %52 ]
  %45 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, inttoptr (i64 -1 to i8*)
  br i1 %47, label %52, label %48

48:                                               ; preds = %41
  %49 = bitcast i8* %46 to %"class.WTF::StringImpl"*
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %51 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"* %50) #9
  br i1 %51, label %61, label %52

52:                                               ; preds = %48, %41
  %53 = icmp eq i64 %44, 0
  %54 = select i1 %53, i64 %40, i64 %44
  %55 = add i64 %54, %43
  %56 = and i64 %55, %10
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %56
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %61, label %41

61:                                               ; preds = %48, %52, %2, %19
  %62 = phi %"struct.WTF::KeyValuePair"* [ null, %2 ], [ null, %19 ], [ %42, %48 ], [ null, %52 ]
  %63 = icmp ne %"struct.WTF::KeyValuePair"* %62, null
  ret i1 %63
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15SanitizerConfigEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SanitizerConfig"*
  %4 = bitcast i8* %1 to void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)**, void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)*, void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)*, void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SanitizerConfig"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
