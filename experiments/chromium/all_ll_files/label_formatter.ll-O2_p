; ModuleID = '../../components/autofill/core/browser/ui/label_formatter.cc'
source_filename = "../../components/autofill/core/browser/ui/label_formatter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.autofill::LabelFormatter" = type { i32 (...)**, %"class.std::__1::vector"*, %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.65" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.autofill::AutofillProfile"**, %"class.autofill::AutofillProfile"**, %"class.std::__1::__compressed_pair.60" }
%"class.autofill::AutofillProfile" = type { %"class.autofill::AutofillDataModel", %"class.autofill::NameInfo", %"class.autofill::EmailInfo", %"class.autofill::CompanyInfo", %"class.autofill::PhoneNumber", %"class.autofill::Address", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %"class.base::Time", i32, i8, i8, %"class.std::__1::map", %"class.std::__1::map", %"class.base::WeakPtrFactory" }
%"class.autofill::AutofillDataModel" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i64, %"class.base::Time", %"class.base::Time" }
%"class.autofill::FormGroup" = type { i32 (...)** }
%"class.autofill::NameInfo" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.autofill::structured_address::AddressComponent"* }
%"class.autofill::structured_address::AddressComponent" = type <{ i32 (...)**, %"class.absl::optional", i32, i32, %"class.std::__1::vector.13", %"class.absl::optional.20", %"class.autofill::structured_address::AddressComponent"*, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.12 }
%union.anon.12 = type { %"class.std::__1::basic_string.1" }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"**, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.autofill::structured_address::AddressComponent"** }
%"class.absl::optional.20" = type { %"class.absl::optional_internal::optional_data.21" }
%"class.absl::optional_internal::optional_data.21" = type { %"class.absl::optional_internal::optional_data_base.22" }
%"class.absl::optional_internal::optional_data_base.22" = type { %"class.absl::optional_internal::optional_data_dtor_base.23" }
%"class.absl::optional_internal::optional_data_dtor_base.23" = type { i8, %union.anon.24 }
%union.anon.24 = type { %"class.std::__1::vector.25" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"*, %"class.std::__1::__compressed_pair.27" }
%"struct.autofill::structured_address::AddressToken" = type opaque
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.autofill::structured_address::AddressToken"* }
%"class.autofill::EmailInfo" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string.1" }
%"class.autofill::CompanyInfo" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string.1", %"class.autofill::AutofillProfile"* }
%"class.autofill::PhoneNumber" = type { %"class.autofill::FormGroup", %"class.std::__1::basic_string.1", %"class.autofill::AutofillProfile"*, %"class.autofill::i18n::PhoneObject" }
%"class.autofill::i18n::PhoneObject" = type { %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.33", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1" }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.i18n::phonenumbers::PhoneNumber"* }
%"class.i18n::phonenumbers::PhoneNumber" = type opaque
%"class.autofill::Address" = type { %"class.autofill::FormGroup", %"class.std::__1::vector.39", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string", %"class.autofill::structured_address::Address" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.std::__1::basic_string.1"* }
%"class.autofill::structured_address::Address" = type { %"class.autofill::structured_address::AddressComponent.base", %"class.autofill::structured_address::StreetAddress", %"class.autofill::structured_address::PostalCode", %"class.autofill::structured_address::SortingCode", %"class.autofill::structured_address::DependentLocality", %"class.autofill::structured_address::City", %"class.autofill::structured_address::State", %"class.autofill::structured_address::CountryCode" }
%"class.autofill::structured_address::AddressComponent.base" = type <{ i32 (...)**, %"class.absl::optional", i32, i32, %"class.std::__1::vector.13", %"class.absl::optional.20", %"class.autofill::structured_address::AddressComponent"*, i32 }>
%"class.autofill::structured_address::StreetAddress" = type { %"class.autofill::structured_address::AddressComponentWithRewriter.base", [4 x i8], %"class.autofill::structured_address::StreetAndDependentStreetName", %"class.autofill::structured_address::HouseNumber", %"class.autofill::structured_address::Premise", %"class.autofill::structured_address::SubPremise", %"class.std::__1::vector.39" }
%"class.autofill::structured_address::AddressComponentWithRewriter.base" = type { %"class.autofill::structured_address::AddressComponent.base" }
%"class.autofill::structured_address::StreetAndDependentStreetName" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8], %"class.autofill::structured_address::StreetName", %"class.autofill::structured_address::DependentStreetName" }
%"class.autofill::structured_address::StreetName" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::DependentStreetName" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::HouseNumber" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::Premise" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::SubPremise" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8], %"class.autofill::structured_address::Floor", %"class.autofill::structured_address::Apartment" }
%"class.autofill::structured_address::Floor" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::Apartment" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::PostalCode" = type { %"class.autofill::structured_address::AddressComponentWithRewriter.base", [4 x i8] }
%"class.autofill::structured_address::SortingCode" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::DependentLocality" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::City" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.autofill::structured_address::State" = type { %"class.autofill::structured_address::AddressComponentWithRewriter.base", [4 x i8] }
%"class.autofill::structured_address::CountryCode" = type { %"class.autofill::structured_address::AddressComponent.base", [4 x i8] }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { i64 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.55" }
%"struct.std::__1::atomic.55" = type { %"struct.std::__1::__atomic_base.56" }
%"struct.std::__1::__atomic_base.56" = type { %"struct.std::__1::__atomic_base.57" }
%"struct.std::__1::__atomic_base.57" = type { %"struct.std::__1::__cxx_atomic_impl.58" }
%"struct.std::__1::__cxx_atomic_impl.58" = type { %"struct.std::__1::__cxx_atomic_base_impl.59" }
%"struct.std::__1::__cxx_atomic_base_impl.59" = type { i8 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.autofill::AutofillProfile"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i32*, i32*, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i32* }
%"class.autofill::AutofillType" = type { i32, i32, i32 }
%"class.std::__1::back_insert_iterator" = type { %"class.std::__1::vector.65"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.5 }
%struct.anon.5 = type { %"struct.std::__1::__padding.6", i8 }
%"struct.std::__1::__padding.6" = type { [1 x i8] }
%"class.autofill::AddressContactFormLabelFormatter" = type <{ %"class.autofill::LabelFormatter", i8, i8, i8, [5 x i8] }>
%"class.autofill::AddressPhoneFormLabelFormatter" = type <{ %"class.autofill::LabelFormatter", i8, [7 x i8] }>
%"class.autofill::AddressEmailFormLabelFormatter" = type <{ %"class.autofill::LabelFormatter", i8, [7 x i8] }>
%"class.autofill::AddressFormLabelFormatter" = type <{ %"class.autofill::LabelFormatter", i8, [7 x i8] }>
%"class.autofill::ContactFormLabelFormatter" = type { %"class.autofill::LabelFormatter" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__120back_insert_iteratorINS_6vectorIN8autofill15ServerFieldTypeENS_9allocatorIS3_EEEEEaSERKS3_ = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

@_ZTVN8autofill14LabelFormatterE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::LabelFormatter"*)* @_ZN8autofill14LabelFormatterD2Ev to i8*), i8* bitcast (void (%"class.autofill::LabelFormatter"*)* @_ZN8autofill14LabelFormatterD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN8autofill14LabelFormatterD1Ev = hidden unnamed_addr alias void (%"class.autofill::LabelFormatter"*), void (%"class.autofill::LabelFormatter"*)* @_ZN8autofill14LabelFormatterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill14LabelFormatterC2ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::LabelFormatter"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i32, i32, %"class.std::__1::vector.65"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %7 = alloca %"class.autofill::AutofillType", align 4
  %8 = alloca %"class.autofill::AutofillType", align 4
  %9 = alloca %"class.autofill::AutofillType", align 4
  %10 = alloca %"class.autofill::AutofillType", align 4
  %11 = alloca %"class.std::__1::back_insert_iterator", align 8
  %12 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8autofill14LabelFormatterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 1
  store %"class.std::__1::vector"* %1, %"class.std::__1::vector"** %13, align 8
  %14 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 2
  %15 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %6
  %20 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %21 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false) #10
  br label %72

22:                                               ; preds = %6
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %14, i8* %24, i64 %26) #10
  br label %72

27:                                               ; preds = %72
  %28 = icmp sgt i32 %80, -1
  br i1 %28, label %30, label %29, !prof !2

29:                                               ; preds = %27
  call void @llvm.trap() #10
  unreachable

30:                                               ; preds = %27
  %31 = icmp ugt i32 %80, 13
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  call void @abort() #11
  unreachable

33:                                               ; preds = %30
  %34 = zext i32 %80 to i64
  %35 = shl i64 1, %34
  %36 = and i64 %35, 170
  %37 = xor i64 %36, 170
  br label %38

38:                                               ; preds = %72, %33
  %39 = phi i64 [ 170, %72 ], [ %37, %33 ]
  %40 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %5, i64 0, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %5, i64 0, i32 0, i32 1
  %43 = load i32*, i32** %42, align 8
  %44 = bitcast %"class.std::__1::back_insert_iterator"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44)
  %45 = getelementptr inbounds %"class.std::__1::back_insert_iterator", %"class.std::__1::back_insert_iterator"* %11, i64 0, i32 0
  store %"class.std::__1::vector.65"* %75, %"class.std::__1::vector.65"** %45, align 8
  %46 = icmp eq i32* %41, %43
  br i1 %46, label %71, label %47

47:                                               ; preds = %38
  %48 = bitcast %"class.autofill::AutofillType"* %9 to i8*
  %49 = bitcast %"class.autofill::AutofillType"* %10 to i8*
  br label %50

50:                                               ; preds = %68, %47
  %51 = phi i32* [ %41, %47 ], [ %69, %68 ]
  %52 = load i32, i32* %51, align 4
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %48) #10
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %49) #10
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %10, i32 %52) #10
  %53 = call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* nonnull %10) #10
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %9, i32 %53) #10
  %54 = call i32 @_ZNK8autofill12AutofillType5groupEv(%"class.autofill::AutofillType"* nonnull %9) #10
  %55 = icmp sgt i32 %54, -1
  br i1 %55, label %57, label %56, !prof !2

56:                                               ; preds = %50
  call void @llvm.trap() #10
  unreachable

57:                                               ; preds = %50
  %58 = icmp ugt i32 %54, 13
  br i1 %58, label %59, label %60

59:                                               ; preds = %57
  call void @abort() #11
  unreachable

60:                                               ; preds = %57
  %61 = zext i32 %54 to i64
  %62 = shl i64 1, %61
  %63 = and i64 %62, %39
  %64 = icmp eq i64 %63, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %49) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %48) #10
  br i1 %64, label %68, label %65

65:                                               ; preds = %60
  switch i32 %52, label %66 [
    i32 43, label %68
    i32 36, label %68
  ]

66:                                               ; preds = %65
  %67 = call dereferenceable(8) %"class.std::__1::back_insert_iterator"* @_ZNSt3__120back_insert_iteratorINS_6vectorIN8autofill15ServerFieldTypeENS_9allocatorIS3_EEEEEaSERKS3_(%"class.std::__1::back_insert_iterator"* nonnull %11, i32* dereferenceable(4) %51) #10
  br label %68

68:                                               ; preds = %66, %65, %65, %60
  %69 = getelementptr inbounds i32, i32* %51, i64 1
  %70 = icmp eq i32* %69, %43
  br i1 %70, label %71, label %50

71:                                               ; preds = %68, %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  ret void

72:                                               ; preds = %19, %22
  %73 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 3
  store i32 %3, i32* %73, align 8
  %74 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 4
  store i32 %4, i32* %74, align 4
  %75 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 5
  %76 = bitcast %"class.std::__1::vector.65"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #10
  %77 = bitcast %"class.autofill::AutofillType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %77) #10
  %78 = bitcast %"class.autofill::AutofillType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %78) #10
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %8, i32 %3) #10
  %79 = call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* nonnull %8) #10
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %7, i32 %79) #10
  %80 = call i32 @_ZNK8autofill12AutofillType5groupEv(%"class.autofill::AutofillType"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %78) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %77) #10
  %81 = icmp eq i32 %80, 5
  br i1 %81, label %38, label %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8autofill14LabelFormatter25GetFocusedNonBillingGroupEv(%"class.autofill::LabelFormatter"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.autofill::AutofillType", align 4
  %3 = alloca %"class.autofill::AutofillType", align 4
  %4 = bitcast %"class.autofill::AutofillType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %4) #10
  %5 = bitcast %"class.autofill::AutofillType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %3, i32 %7) #10
  %8 = call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* nonnull %3) #10
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %2, i32 %8) #10
  %9 = call i32 @_ZNK8autofill12AutofillType5groupEv(%"class.autofill::AutofillType"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %4) #10
  ret i32 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill14LabelFormatterD2Ev(%"class.autofill::LabelFormatter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8autofill14LabelFormatterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 5, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %0, i64 0, i32 2
  %13 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %11, %17
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN8autofill14LabelFormatterD0Ev(%"class.autofill::LabelFormatter"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill14LabelFormatter9GetLabelsEv(%"class.std::__1::vector.39"* noalias sret, %"class.autofill::LabelFormatter"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.autofill::AutofillType", align 4
  %4 = alloca %"class.autofill::AutofillType", align 4
  %5 = alloca %"class.std::__1::basic_string.1", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.39", %"class.std::__1::vector.39"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector.39", %"class.std::__1::vector.39"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast %"class.std::__1::vector.39"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #10
  %9 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %1, i64 0, i32 1
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.autofill::AutofillProfile"**, %"class.autofill::AutofillProfile"*** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %14 = load %"class.autofill::AutofillProfile"**, %"class.autofill::AutofillProfile"*** %13, align 8
  %15 = icmp eq %"class.autofill::AutofillProfile"** %12, %14
  br i1 %15, label %26, label %16

16:                                               ; preds = %2
  %17 = bitcast %"class.std::__1::basic_string.1"* %5 to i8*
  %18 = bitcast %"class.autofill::AutofillType"* %3 to i8*
  %19 = bitcast %"class.autofill::AutofillType"* %4 to i8*
  %20 = getelementptr inbounds %"class.autofill::LabelFormatter", %"class.autofill::LabelFormatter"* %1, i64 0, i32 3
  %21 = bitcast %"class.autofill::LabelFormatter"* %1 to void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)***
  %22 = bitcast %"class.std::__1::basic_string.1"** %6 to i64*
  %23 = bitcast %"class.std::__1::basic_string.1"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %23, i64 0, i32 1, i32 1
  %25 = bitcast %"class.std::__1::basic_string.1"* %5 to i8**
  br label %27

26:                                               ; preds = %48, %2
  ret void

27:                                               ; preds = %16, %48
  %28 = phi %"class.autofill::AutofillProfile"** [ %12, %16 ], [ %49, %48 ]
  %29 = load %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #10
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %18) #10
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %19) #10
  %30 = load i32, i32* %20, align 8
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %4, i32 %30) #10
  %31 = call i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"* nonnull %4) #10
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %3, i32 %31) #10
  %32 = call i32 @_ZNK8autofill12AutofillType5groupEv(%"class.autofill::AutofillType"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %19) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %18) #10
  %33 = load void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)**, void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)*** %21, align 8
  %34 = getelementptr inbounds void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)** %33, i64 2
  %35 = load void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)*, void (%"class.std::__1::basic_string.1"*, %"class.autofill::LabelFormatter"*, %"class.autofill::AutofillProfile"*, i32)** %34, align 8
  call void %35(%"class.std::__1::basic_string.1"* nonnull sret %5, %"class.autofill::LabelFormatter"* %1, %"class.autofill::AutofillProfile"* dereferenceable(2856) %29, i32 %32) #10
  %36 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %6, align 8
  %37 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %7, align 8
  %38 = icmp ult %"class.std::__1::basic_string.1"* %36, %37
  br i1 %38, label %39, label %43

39:                                               ; preds = %27
  %40 = bitcast %"class.std::__1::basic_string.1"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* nonnull align 8 %17, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 24, i1 false) #10
  %41 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %36, i64 1
  %42 = ptrtoint %"class.std::__1::basic_string.1"* %41 to i64
  store i64 %42, i64* %22, align 8
  br label %48

43:                                               ; preds = %27
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.39"* %0, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %5) #10
  %44 = load i8, i8* %24, align 1
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  %47 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %47) #12
  br label %48

48:                                               ; preds = %39, %43, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #10
  %49 = getelementptr inbounds %"class.autofill::AutofillProfile"*, %"class.autofill::AutofillProfile"** %28, i64 1
  %50 = icmp eq %"class.autofill::AutofillProfile"** %49, %14
  br i1 %50, label %26, label %27
}

declare void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"*, i32) unnamed_addr #4

declare i32 @_ZNK8autofill12AutofillType15GetStorableTypeEv(%"class.autofill::AutofillType"*) local_unnamed_addr #4

declare i32 @_ZNK8autofill12AutofillType5groupEv(%"class.autofill::AutofillType"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.autofill::LabelFormatter"* @_ZN8autofill14LabelFormatter6CreateERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeERKNS2_ISH_NS5_ISH_EEEE(%"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32, %"class.std::__1::vector.65"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = tail call i32 @_ZN8autofill9data_util15DetermineGroupsERKNSt3__16vectorINS_15ServerFieldTypeENS1_9allocatorIS3_EEEE(%"class.std::__1::vector.65"* dereferenceable(24) %3) #10
  %6 = tail call zeroext i1 @_ZN8autofill9data_util19IsSupportedFormTypeEj(i32 %5) #10
  br i1 %6, label %7, label %28

7:                                                ; preds = %4
  switch i32 %5, label %28 [
    i32 14, label %8
    i32 15, label %8
    i32 10, label %12
    i32 11, label %12
    i32 6, label %16
    i32 7, label %16
    i32 2, label %20
    i32 3, label %20
    i32 12, label %24
    i32 13, label %24
    i32 5, label %24
    i32 9, label %24
  ]

8:                                                ; preds = %7, %7
  %9 = tail call i8* @_Znwm(i64 80) #12
  %10 = bitcast i8* %9 to %"class.autofill::AddressContactFormLabelFormatter"*
  tail call void @_ZN8autofill32AddressContactFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressContactFormLabelFormatter"* nonnull %10, %"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %5, %"class.std::__1::vector.65"* dereferenceable(24) %3) #10
  %11 = ptrtoint i8* %9 to i64
  br label %28

12:                                               ; preds = %7, %7
  %13 = tail call i8* @_Znwm(i64 80) #12
  %14 = bitcast i8* %13 to %"class.autofill::AddressPhoneFormLabelFormatter"*
  tail call void @_ZN8autofill30AddressPhoneFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressPhoneFormLabelFormatter"* nonnull %14, %"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %5, %"class.std::__1::vector.65"* dereferenceable(24) %3) #10
  %15 = ptrtoint i8* %13 to i64
  br label %28

16:                                               ; preds = %7, %7
  %17 = tail call i8* @_Znwm(i64 80) #12
  %18 = bitcast i8* %17 to %"class.autofill::AddressEmailFormLabelFormatter"*
  tail call void @_ZN8autofill30AddressEmailFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressEmailFormLabelFormatter"* nonnull %18, %"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %5, %"class.std::__1::vector.65"* dereferenceable(24) %3) #10
  %19 = ptrtoint i8* %17 to i64
  br label %28

20:                                               ; preds = %7, %7
  %21 = tail call i8* @_Znwm(i64 80) #12
  %22 = bitcast i8* %21 to %"class.autofill::AddressFormLabelFormatter"*
  tail call void @_ZN8autofill25AddressFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressFormLabelFormatter"* nonnull %22, %"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %5, %"class.std::__1::vector.65"* dereferenceable(24) %3) #10
  %23 = ptrtoint i8* %21 to i64
  br label %28

24:                                               ; preds = %7, %7, %7, %7
  %25 = tail call i8* @_Znwm(i64 72) #12
  %26 = bitcast i8* %25 to %"class.autofill::ContactFormLabelFormatter"*
  tail call void @_ZN8autofill25ContactFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::ContactFormLabelFormatter"* nonnull %26, %"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %5, %"class.std::__1::vector.65"* dereferenceable(24) %3) #10
  %27 = ptrtoint i8* %25 to i64
  br label %28

28:                                               ; preds = %7, %4, %24, %20, %16, %12, %8
  %29 = phi i64 [ %27, %24 ], [ %23, %20 ], [ %19, %16 ], [ %15, %12 ], [ %11, %8 ], [ 0, %4 ], [ 0, %7 ]
  %30 = inttoptr i64 %29 to %"class.autofill::LabelFormatter"*
  ret %"class.autofill::LabelFormatter"* %30
}

declare i32 @_ZN8autofill9data_util15DetermineGroupsERKNSt3__16vectorINS_15ServerFieldTypeENS1_9allocatorIS3_EEEE(%"class.std::__1::vector.65"* dereferenceable(24)) local_unnamed_addr #4

declare zeroext i1 @_ZN8autofill9data_util19IsSupportedFormTypeEj(i32) local_unnamed_addr #4

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.std::__1::back_insert_iterator"* @_ZNSt3__120back_insert_iteratorINS_6vectorIN8autofill15ServerFieldTypeENS_9allocatorIS3_EEEEEaSERKS3_(%"class.std::__1::back_insert_iterator"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::back_insert_iterator", %"class.std::__1::back_insert_iterator"* %0, i64 0, i32 0
  %4 = load %"class.std::__1::vector.65"*, %"class.std::__1::vector.65"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %4, i64 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = icmp eq i32* %6, %8
  %10 = ptrtoint i32* %8 to i64
  br i1 %9, label %16, label %11

11:                                               ; preds = %2
  %12 = load i32, i32* %1, align 4
  store i32 %12, i32* %6, align 4
  %13 = getelementptr inbounds i32, i32* %6, i64 1
  %14 = ptrtoint i32* %13 to i64
  %15 = bitcast i32** %5 to i64*
  store i64 %14, i64* %15, align 8
  br label %73

16:                                               ; preds = %2
  %17 = ptrtoint i32* %6 to i64
  %18 = bitcast i32** %5 to i64*
  %19 = bitcast %"class.std::__1::vector.65"* %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.65"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #11
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %7 to i64*
  %29 = sub i64 %10, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #11
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #12
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  %51 = load i32, i32* %1, align 4
  store i32 %51, i32* %48, align 4
  %52 = getelementptr inbounds i32, i32* %48, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %4, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #10
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i32* [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #12
  br label %73

73:                                               ; preds = %11, %68, %71
  ret %"class.std::__1::back_insert_iterator"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.39"*, %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.39", %"class.std::__1::vector.39"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string.1"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.39"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.39"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.39", %"class.std::__1::vector.39"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string.1"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #12
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string.1"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string.1"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string.1"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string.1"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string.1"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #10
  %39 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string.1"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.39", %"class.std::__1::vector.39"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %41, align 8
  %43 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string.1"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string.1"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string.1"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string.1"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string.1"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string.1"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #10
  %54 = icmp eq %"class.std::__1::basic_string.1"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string.1"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string.1"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string.1"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string.1"*
  %64 = icmp eq %"class.std::__1::basic_string.1"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string.1"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string.1"* %67 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %68, i64 0, i32 1, i32 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = bitcast %"class.std::__1::basic_string.1"* %67 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #12
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string.1"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #12
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

declare void @_ZN8autofill32AddressContactFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressContactFormLabelFormatter"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.std::__1::vector.65"* dereferenceable(24)) unnamed_addr #4

declare void @_ZN8autofill30AddressPhoneFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressPhoneFormLabelFormatter"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.std::__1::vector.65"* dereferenceable(24)) unnamed_addr #4

declare void @_ZN8autofill30AddressEmailFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressEmailFormLabelFormatter"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.std::__1::vector.65"* dereferenceable(24)) unnamed_addr #4

declare void @_ZN8autofill25AddressFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::AddressFormLabelFormatter"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.std::__1::vector.65"* dereferenceable(24)) unnamed_addr #4

declare void @_ZN8autofill25ContactFormLabelFormatterC1ERKNSt3__16vectorIPNS_15AutofillProfileENS1_9allocatorIS4_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS5_IcEEEENS_15ServerFieldTypeEjRKNS2_ISH_NS5_ISH_EEEE(%"class.autofill::ContactFormLabelFormatter"*, %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.std::__1::vector.65"* dereferenceable(24)) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
