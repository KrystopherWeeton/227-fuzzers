; ModuleID = '../../ui/gtk/x/gtk_event_loop_x11.cc'
source_filename = "../../ui/gtk/x/gtk_event_loop_x11.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gtk::GtkEventLoopX11" = type { %struct._GdkSurface*, i64 }
%struct._GdkSurface = type opaque
%struct._GtkWidget = type { %struct._GObject, %struct._GtkWidgetPrivate* }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkWidgetPrivate = type opaque
%struct._GtkNative = type opaque
%struct._GClosure = type { i32, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)*, i8*, %struct._GClosureNotifyData* }
%struct._GValue = type { i64, [2 x %union.anon] }
%union.anon = type { i64 }
%struct._GClosureNotifyData = type { i8*, {}* }
%union._GdkEvent = type { %struct._GdkEventTouch }
%struct._GdkEventTouch = type { i32, %struct._GdkWindow*, i8, i32, double, double, double*, i32, %struct._GdkEventSequence*, i32, %struct._GdkDevice*, double, double }
%struct._GdkWindow = type opaque
%struct._GdkEventSequence = type opaque
%struct._GdkDevice = type opaque
%struct._GdkKeymapKey = type { i32, i32, i32 }
%"class.x11::Event" = type { i16, i32, void (i8*)*, i8*, i32* }
%"class.x11::Connection" = type { %"class.x11::XProto", %"class.x11::ExtensionManager", %"class.std::__1::unique_ptr.175", %struct.xcb_connection_t*, %"class.std::__1::unique_ptr.188", i8, i8, i32, %"class.std::__1::basic_string", i32, %"struct.x11::Setup", %"struct.x11::Screen"*, %"struct.x11::Depth"*, %"struct.x11::VisualType"*, %"class.base::flat_map", %"class.std::__1::unique_ptr.235", %"class.base::circular_deque", %"class.base::ObserverList.241", %"class.x11::Event"*, %"class.base::circular_deque.245", i32, %"class.absl::optional", %"struct.std::__1::array", %"class.base::RepeatingCallback", %"class.base::OnceCallback.257" }
%"class.x11::XProto" = type { %"class.x11::Connection"* }
%"class.x11::ExtensionManager" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.121", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.133", %"class.std::__1::unique_ptr.139", %"class.std::__1::unique_ptr.145", %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.157", %"class.std::__1::unique_ptr.163", %"class.std::__1::unique_ptr.169" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.x11::BigRequests"* }
%"class.x11::BigRequests" = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.x11::Composite"* }
%"class.x11::Composite" = type opaque
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.x11::Damage"* }
%"class.x11::Damage" = type opaque
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.x11::Dpms"* }
%"class.x11::Dpms" = type opaque
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.x11::Dri2"* }
%"class.x11::Dri2" = type opaque
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.x11::Dri3"* }
%"class.x11::Dri3" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.x11::GenericEvent"* }
%"class.x11::GenericEvent" = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.x11::Glx"* }
%"class.x11::Glx" = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.x11::Present"* }
%"class.x11::Present" = type opaque
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.x11::RandR"* }
%"class.x11::RandR" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.x11::Record"* }
%"class.x11::Record" = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.x11::Render"* }
%"class.x11::Render" = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.x11::Res"* }
%"class.x11::Res" = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.x11::ScreenSaver"* }
%"class.x11::ScreenSaver" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.x11::Shape"* }
%"class.x11::Shape" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.x11::Shm"* }
%"class.x11::Shm" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.x11::Sync"* }
%"class.x11::Sync" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.x11::XCMisc"* }
%"class.x11::XCMisc" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.x11::Xevie"* }
%"class.x11::Xevie" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.x11::XF86Dri"* }
%"class.x11::XF86Dri" = type opaque
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.x11::XF86VidMode"* }
%"class.x11::XF86VidMode" = type opaque
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.x11::XFixes"* }
%"class.x11::XFixes" = type opaque
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.x11::Xinerama"* }
%"class.x11::Xinerama" = type opaque
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.x11::Input"* }
%"class.x11::Input" = type opaque
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"class.x11::Xkb"* }
%"class.x11::Xkb" = type opaque
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.x11::XPrint"* }
%"class.x11::XPrint" = type opaque
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.x11::SELinux"* }
%"class.x11::SELinux" = type opaque
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"class.x11::Test"* }
%"class.x11::Test" = type opaque
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.x11::Xv"* }
%"class.x11::Xv" = type opaque
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.x11::XvMC"* }
%"class.x11::XvMC" = type opaque
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.ui::PlatformEventSource"* }
%"class.ui::PlatformEventSource" = type { i32 (...)**, %"class.base::ObserverList", %"class.ui::PlatformEventDispatcher"*, i8, [7 x i8], %"class.base::ObserverList.181" }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.178" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::PlatformEventDispatcher" = type opaque
%"class.base::ObserverList.181" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.182", i64, i32, [4 x i8] }>
%"class.base::LinkedList.182" = type { %"class.base::LinkNode.183" }
%"class.base::LinkNode.183" = type { %"class.base::internal::LinkNodeBase" }
%struct.xcb_connection_t = type opaque
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.x11::XlibDisplay"* }
%"class.x11::XlibDisplay" = type { %struct._XDisplay* }
%struct._XDisplay = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.196 }
%union.anon.196 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.x11::Setup" = type { i8, i16, i16, i16, i32, i32, i32, i32, i16, i32, i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::vector.200", %"class.std::__1::vector.207" }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"struct.x11::Format"*, %"struct.x11::Format"*, %"class.std::__1::__compressed_pair.202" }
%"struct.x11::Format" = type { i8, i8, i8 }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"struct.x11::Format"* }
%"class.std::__1::vector.207" = type { %"class.std::__1::__vector_base.208" }
%"class.std::__1::__vector_base.208" = type { %"struct.x11::Screen"*, %"struct.x11::Screen"*, %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"struct.x11::Screen"* }
%"struct.x11::Screen" = type { i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, i8, i8, %"class.std::__1::vector.209" }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.x11::Depth"*, %"struct.x11::Depth"*, %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.x11::Depth"* }
%"struct.x11::Depth" = type { i8, %"class.std::__1::vector.211" }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { %"struct.x11::VisualType"*, %"struct.x11::VisualType"*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.x11::VisualType"* }
%"struct.x11::VisualType" = type { i32, i32, i8, i16, i32, i32, i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.228" }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.230" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.x11::KeyboardState"* }
%"class.x11::KeyboardState" = type opaque
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.x11::Event"*, i64 }
%"class.base::ObserverList.241" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.242", i64, i32, [4 x i8] }>
%"class.base::LinkedList.242" = type { %"class.base::LinkNode.243" }
%"class.base::LinkNode.243" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::circular_deque.245" = type { %"class.base::internal::VectorBuffer.246", i64, i64 }
%"class.base::internal::VectorBuffer.246" = type { %"struct.x11::Connection::Request"*, i64 }
%"struct.x11::Connection::Request" = type { %"class.base::OnceCallback", i8, %class.scoped_refptr.248, %"class.std::__1::unique_ptr.250" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.247" }
%"struct.std::__1::__atomic_base.247" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.248 = type { %"class.base::RefCountedMemory"* }
%"class.base::RefCountedMemory" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.249", [4 x i8] }>
%"class.base::RefCountedThreadSafe.249" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.x11::Error"* }
%"class.x11::Error" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.256 }
%union.anon.256 = type { i32 }
%"struct.std::__1::array" = type { [256 x %"class.x11::Error"* (%"class.base::RefCountedMemory"*)*] }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.257" = type { %"class.base::internal::CallbackBase" }
%struct._GdkEventKey = type { i32, %struct._GdkWindow*, i8, i32, i32, i32, i32, i8*, i16, i8, i8 }
%struct._GdkDisplay = type opaque

$_ZN3gtk15GtkEventLoopX1112OnEventThunkEP9_GdkEventPv = comdat any

$_ZZN3x115EventC1INS_8KeyEventEEEOT_ENUlPvE_8__invokeES5_ = comdat any

@.str = private unnamed_addr constant [6 x i8] c"event\00", align 1

@_ZN3gtk15GtkEventLoopX11C1EP10_GtkWidget = hidden unnamed_addr alias void (%"class.gtk::GtkEventLoopX11"*, %struct._GtkWidget*), void (%"class.gtk::GtkEventLoopX11"*, %struct._GtkWidget*)* @_ZN3gtk15GtkEventLoopX11C2EP10_GtkWidget
@_ZN3gtk15GtkEventLoopX11D1Ev = hidden unnamed_addr alias void (%"class.gtk::GtkEventLoopX11"*), void (%"class.gtk::GtkEventLoopX11"*)* @_ZN3gtk15GtkEventLoopX11D2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gtk15GtkEventLoopX11C2EP10_GtkWidget(%"class.gtk::GtkEventLoopX11"*, %struct._GtkWidget*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gtk::GtkEventLoopX11"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  %4 = tail call zeroext i1 @_ZN3gtk15GtkCheckVersionEiii(i32 4, i32 0, i32 0) #7
  br i1 %4, label %5, label %13

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.gtk::GtkEventLoopX11", %"class.gtk::GtkEventLoopX11"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.gtk::GtkEventLoopX11", %"class.gtk::GtkEventLoopX11"* %0, i64 0, i32 1
  %8 = tail call %struct._GtkNative* @gtk_widget_get_native(%struct._GtkWidget* %1) #7
  %9 = tail call %struct._GdkSurface* @gtk_native_get_surface(%struct._GtkNative* %8) #7
  store %struct._GdkSurface* %9, %struct._GdkSurface** %6, align 8
  %10 = bitcast %struct._GdkSurface* %9 to i8*
  %11 = bitcast %"class.gtk::GtkEventLoopX11"* %0 to i8*
  %12 = tail call i64 @g_signal_connect_data(i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), void ()* bitcast (i32 (%union._GdkEvent*, i8*)* @_ZN3gtk15GtkEventLoopX1112OnEventThunkEP9_GdkEventPv to void ()*), i8* %11, void (i8*, %struct._GClosure*)* null, i32 0) #7
  store i64 %12, i64* %7, align 8
  br label %14

13:                                               ; preds = %2
  tail call void @gdk_event_handler_set(void (%union._GdkEvent*, i8*)* nonnull @_ZN3gtk15GtkEventLoopX1116DispatchGdkEventEP9_GdkEventPv, i8* null, void (i8*)* null) #7
  br label %14

14:                                               ; preds = %13, %5
  ret void
}

declare zeroext i1 @_ZN3gtk15GtkCheckVersionEiii(i32, i32, i32) local_unnamed_addr #1

declare %struct._GdkSurface* @gtk_native_get_surface(%struct._GtkNative*) local_unnamed_addr #1

declare %struct._GtkNative* @gtk_widget_get_native(%struct._GtkWidget*) local_unnamed_addr #1

declare i64 @g_signal_connect_data(i8*, i8*, void ()*, i8*, void (i8*, %struct._GClosure*)*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3gtk15GtkEventLoopX1112OnEventThunkEP9_GdkEventPv(%union._GdkEvent*, i8*) #0 comdat align 2 {
  tail call fastcc void @_ZN3gtk12_GLOBAL__N_115ProcessGdkEventEP9_GdkEvent(%union._GdkEvent* %0) #7
  ret i32 0
}

declare void @gdk_event_handler_set(void (%union._GdkEvent*, i8*)*, i8*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gtk15GtkEventLoopX1116DispatchGdkEventEP9_GdkEventPv(%union._GdkEvent*, i8* nocapture readnone) #0 align 2 {
  tail call fastcc void @_ZN3gtk12_GLOBAL__N_115ProcessGdkEventEP9_GdkEvent(%union._GdkEvent* %0)
  tail call void @gtk_main_do_event(%union._GdkEvent* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gtk15GtkEventLoopX11D2Ev(%"class.gtk::GtkEventLoopX11"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZN3gtk15GtkCheckVersionEiii(i32 4, i32 0, i32 0) #7
  br i1 %2, label %3, label %8

3:                                                ; preds = %1
  %4 = bitcast %"class.gtk::GtkEventLoopX11"* %0 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.gtk::GtkEventLoopX11", %"class.gtk::GtkEventLoopX11"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  tail call void @g_signal_handler_disconnect(i8* %5, i64 %7) #7
  br label %9

8:                                                ; preds = %1
  tail call void @gdk_event_handler_set(void (%union._GdkEvent*, i8*)* bitcast (void (%union._GdkEvent*)* @gtk_main_do_event to void (%union._GdkEvent*, i8*)*), i8* null, void (i8*)* null) #7
  br label %9

9:                                                ; preds = %8, %3
  ret void
}

declare void @g_signal_handler_disconnect(i8*, i64) local_unnamed_addr #1

declare void @gtk_main_do_event(%union._GdkEvent*) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3gtk15GtkEventLoopX117OnEventEP9_GdkEvent(%"class.gtk::GtkEventLoopX11"* nocapture readnone, %union._GdkEvent*) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZN3gtk12_GLOBAL__N_115ProcessGdkEventEP9_GdkEvent(%union._GdkEvent* %1)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3gtk12_GLOBAL__N_115ProcessGdkEventEP9_GdkEvent(%union._GdkEvent*) unnamed_addr #0 {
  %2 = alloca %struct._GdkKeymapKey*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %"class.x11::Event", align 8
  %6 = alloca [12 x i8], align 4
  %7 = alloca [3 x i8], align 1
  %8 = getelementptr inbounds [12 x i8], [12 x i8]* %6, i64 0, i64 0
  %9 = tail call zeroext i1 @_ZN3gtk15GtkCheckVersionEiii(i32 4, i32 0, i32 0) #7
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = tail call i32 @_ZN3gtk20GdkEventGetEventTypeEP9_GdkEvent(%union._GdkEvent* %0) #7
  br label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %12, %10
  %16 = phi i32 [ %11, %10 ], [ %14, %12 ]
  %17 = tail call i32 @_ZN3gtk11GdkKeyPressEv() #7
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = tail call i32 @_ZN3gtk13GdkKeyReleaseEv() #7
  %21 = icmp eq i32 %16, %20
  br i1 %21, label %22, label %141

22:                                               ; preds = %19, %15
  %23 = tail call %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() #7
  %24 = bitcast %"class.x11::Event"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #7
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %8)
  %25 = getelementptr inbounds [3 x i8], [3 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %25)
  %26 = tail call zeroext i1 @_ZN3gtk15GtkCheckVersionEiii(i32 4, i32 0, i32 0) #7, !noalias !2
  br i1 %26, label %57, label %27

27:                                               ; preds = %22
  %28 = bitcast %union._GdkEvent* %0 to %struct._GdkEventKey*
  %29 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 8, !noalias !2
  %31 = tail call i32 @_ZN3gtk11GdkKeyPressEv() #7, !noalias !2
  %32 = icmp eq i32 %30, %31
  %33 = select i1 %32, i32 2, i32 3
  %34 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 2
  %35 = load i8, i8* %34, align 8, !noalias !2
  %36 = icmp ne i8 %35, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 7
  %39 = bitcast i32* %38 to i16*
  %40 = load i16, i16* %39, align 8, !noalias !2
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 3
  %43 = load i32, i32* %42, align 4, !noalias !2
  %44 = tail call i32 @_ZN2ui16GetX11RootWindowEv() #7, !noalias !2
  %45 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 1
  %46 = load %struct._GdkWindow*, %struct._GdkWindow** %45, align 8, !noalias !2
  %47 = tail call i64 @gdk_x11_window_get_xid(%struct._GdkWindow* %46) #7, !noalias !2
  %48 = getelementptr inbounds %union._GdkEvent, %union._GdkEvent* %0, i64 0, i32 0, i32 4
  %49 = bitcast double* %48 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %8, i8 0, i64 12, i1 false), !alias.scope !2
  %50 = load i32, i32* %49, align 8, !noalias !2
  %51 = getelementptr inbounds %struct._GdkEventKey, %struct._GdkEventKey* %28, i64 0, i32 9
  %52 = load i8, i8* %51, align 2, !noalias !2
  %53 = and i8 %52, 3
  %54 = zext i8 %53 to i32
  %55 = shl nuw nsw i32 %54, 13
  %56 = or i32 %55, %50
  br label %109

57:                                               ; preds = %22
  %58 = bitcast %struct._GdkKeymapKey** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #7, !noalias !2
  store %struct._GdkKeymapKey* null, %struct._GdkKeymapKey** %2, align 8, !noalias !2
  %59 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #7, !noalias !2
  store i32* null, i32** %3, align 8, !noalias !2
  %60 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #7, !noalias !2
  store i32 0, i32* %4, align 4, !noalias !2
  %61 = tail call %struct._GdkDisplay* @gdk_display_get_default() #7, !noalias !2
  %62 = tail call i32 @gdk_key_event_get_keycode(%union._GdkEvent* %0) #7, !noalias !2
  %63 = call i32 @gdk_display_map_keycode(%struct._GdkDisplay* %61, i32 %62, %struct._GdkKeymapKey** nonnull %2, i32** nonnull %3, i32* nonnull %4) #7, !noalias !2
  %64 = call i32 @gdk_key_event_get_keyval(%union._GdkEvent* %0) #7, !noalias !2
  %65 = load %struct._GdkKeymapKey*, %struct._GdkKeymapKey** %2, align 8, !noalias !2
  %66 = icmp eq %struct._GdkKeymapKey* %65, null
  %67 = bitcast %struct._GdkKeymapKey* %65 to i8*
  br i1 %66, label %93, label %68

68:                                               ; preds = %57
  %69 = load i32, i32* %4, align 4, !noalias !2
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %88

71:                                               ; preds = %68
  %72 = load i32*, i32** %3, align 8, !noalias !2
  %73 = sext i32 %69 to i64
  br label %76

74:                                               ; preds = %76
  %75 = icmp eq i64 %81, %73
  br i1 %75, label %88, label %76

76:                                               ; preds = %74, %71
  %77 = phi i64 [ 0, %71 ], [ %81, %74 ]
  %78 = getelementptr inbounds i32, i32* %72, i64 %77
  %79 = load i32, i32* %78, align 4, !noalias !2
  %80 = icmp eq i32 %79, %64
  %81 = add nuw nsw i64 %77, 1
  br i1 %80, label %82, label %74

82:                                               ; preds = %76
  %83 = and i64 %77, 4294967295
  %84 = getelementptr inbounds %struct._GdkKeymapKey, %struct._GdkKeymapKey* %65, i64 %83, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !2
  %86 = getelementptr inbounds %struct._GdkKeymapKey, %struct._GdkKeymapKey* %65, i64 %83, i32 1
  %87 = load i32, i32* %86, align 4, !noalias !2
  br label %88

88:                                               ; preds = %74, %82, %68
  %89 = phi i32 [ %85, %82 ], [ 0, %68 ], [ 0, %74 ]
  %90 = phi i32 [ %87, %82 ], [ 0, %68 ], [ 0, %74 ]
  call void @g_free(i8* nonnull %67) #7, !noalias !2
  %91 = bitcast i32** %3 to i8**
  %92 = load i8*, i8** %91, align 8, !noalias !2
  call void @g_free(i8* %92) #7, !noalias !2
  br label %93

93:                                               ; preds = %88, %57
  %94 = phi i32 [ %89, %88 ], [ 0, %57 ]
  %95 = phi i32 [ %90, %88 ], [ 0, %57 ]
  %96 = call i32 @_ZN3gtk20GdkEventGetEventTypeEP9_GdkEvent(%union._GdkEvent* %0) #7, !noalias !2
  %97 = call i32 @_ZN3gtk11GdkKeyPressEv() #7, !noalias !2
  %98 = icmp eq i32 %96, %97
  %99 = select i1 %98, i32 2, i32 3
  %100 = trunc i32 %94 to i8
  %101 = call i32 @_ZN3gtk15GdkEventGetTimeEP9_GdkEvent(%union._GdkEvent* %0) #7, !noalias !2
  %102 = call i32 @_ZN2ui16GetX11RootWindowEv() #7, !noalias !2
  %103 = call %struct._GdkSurface* @gdk_event_get_surface(%union._GdkEvent* %0) #7, !noalias !2
  %104 = call i64 @gdk_x11_surface_get_xid(%struct._GdkSurface* %103) #7, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %8, i8 0, i64 12, i1 false), !alias.scope !2
  %105 = call i32 @gdk_event_get_modifier_state(%union._GdkEvent* %0) #7, !noalias !2
  %106 = shl i32 %95, 13
  %107 = and i32 %106, 24576
  %108 = or i32 %105, %107
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #7, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #7, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #7, !noalias !2
  br label %109

109:                                              ; preds = %27, %93
  %110 = phi i32 [ %108, %93 ], [ %56, %27 ]
  %111 = phi i64 [ %104, %93 ], [ %47, %27 ]
  %112 = phi i32 [ %102, %93 ], [ %44, %27 ]
  %113 = phi i32 [ %101, %93 ], [ %43, %27 ]
  %114 = phi i8 [ %100, %93 ], [ %41, %27 ]
  %115 = phi i8 [ 0, %93 ], [ %37, %27 ]
  %116 = phi i32 [ %99, %93 ], [ %33, %27 ]
  %117 = trunc i64 %111 to i32
  %118 = getelementptr inbounds %"class.x11::Event", %"class.x11::Event"* %5, i64 0, i32 0
  %119 = getelementptr inbounds %"class.x11::Event", %"class.x11::Event"* %5, i64 0, i32 1
  %120 = getelementptr inbounds %"class.x11::Event", %"class.x11::Event"* %5, i64 0, i32 2
  %121 = getelementptr inbounds %"class.x11::Event", %"class.x11::Event"* %5, i64 0, i32 3
  %122 = getelementptr inbounds %"class.x11::Event", %"class.x11::Event"* %5, i64 0, i32 4
  store i16 0, i16* %118, align 8
  store i32 52, i32* %119, align 4
  store void (i8*)* @_ZZN3x115EventC1INS_8KeyEventEEEOT_ENUlPvE_8__invokeES5_, void (i8*)** %120, align 8
  %123 = call i8* @_Znwm(i64 40) #8
  %124 = bitcast i8* %123 to i32*
  store i32 %116, i32* %124, align 16
  %125 = getelementptr inbounds i8, i8* %123, i64 4
  store i8 %115, i8* %125, align 4
  %126 = getelementptr inbounds i8, i8* %123, i64 5
  store i8 %114, i8* %126, align 1
  %127 = getelementptr inbounds i8, i8* %123, i64 6
  %128 = bitcast i8* %127 to i16*
  store i16 0, i16* %128, align 2
  %129 = getelementptr inbounds i8, i8* %123, i64 8
  %130 = bitcast i8* %129 to i32*
  store i32 %113, i32* %130, align 8
  %131 = getelementptr inbounds i8, i8* %123, i64 12
  %132 = bitcast i8* %131 to i32*
  store i32 %112, i32* %132, align 4
  %133 = getelementptr inbounds i8, i8* %123, i64 16
  %134 = bitcast i8* %133 to i32*
  store i32 %117, i32* %134, align 16
  %135 = getelementptr inbounds i8, i8* %123, i64 20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %135, i8* nonnull align 4 %8, i64 12, i1 false)
  %136 = getelementptr inbounds i8, i8* %123, i64 32
  %137 = bitcast i8* %136 to i32*
  store i32 %110, i32* %137, align 16
  %138 = getelementptr inbounds i8, i8* %123, i64 36
  store i8 1, i8* %138, align 4
  %139 = getelementptr inbounds i8, i8* %123, i64 37
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* nonnull align 1 %25, i64 3, i1 false)
  store i8* %123, i8** %121, align 8
  %140 = bitcast i32** %122 to i8**
  store i8* %133, i8** %140, align 8
  call void @_ZN3x1110Connection13DispatchEventERKNS_5EventE(%"class.x11::Connection"* %23, %"class.x11::Event"* nonnull dereferenceable(32) %5) #7
  call void @_ZN3x115EventD1Ev(%"class.x11::Event"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %25)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #7
  br label %141

141:                                              ; preds = %19, %109
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZN3gtk20GdkEventGetEventTypeEP9_GdkEvent(%union._GdkEvent*) local_unnamed_addr #1

declare i32 @_ZN3gtk11GdkKeyPressEv() local_unnamed_addr #1

declare i32 @_ZN3gtk13GdkKeyReleaseEv() local_unnamed_addr #1

declare %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() local_unnamed_addr #1

declare void @_ZN3x1110Connection13DispatchEventERKNS_5EventE(%"class.x11::Connection"*, %"class.x11::Event"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3x115EventD1Ev(%"class.x11::Event"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZN2ui16GetX11RootWindowEv() local_unnamed_addr #1

declare i64 @gdk_x11_window_get_xid(%struct._GdkWindow*) local_unnamed_addr #1

declare i32 @gdk_display_map_keycode(%struct._GdkDisplay*, i32, %struct._GdkKeymapKey**, i32**, i32*) local_unnamed_addr #1

declare %struct._GdkDisplay* @gdk_display_get_default() local_unnamed_addr #1

declare i32 @gdk_key_event_get_keycode(%union._GdkEvent*) local_unnamed_addr #1

declare i32 @gdk_key_event_get_keyval(%union._GdkEvent*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @g_free(i8*) local_unnamed_addr #1

declare i32 @_ZN3gtk15GdkEventGetTimeEP9_GdkEvent(%union._GdkEvent*) local_unnamed_addr #1

declare i64 @gdk_x11_surface_get_xid(%struct._GdkSurface*) local_unnamed_addr #1

declare %struct._GdkSurface* @gdk_event_get_surface(%union._GdkEvent*) local_unnamed_addr #1

declare i32 @gdk_event_get_modifier_state(%union._GdkEvent*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3x115EventC1INS_8KeyEventEEEOT_ENUlPvE_8__invokeES5_(i8*) #5 comdat align 2 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @_ZdlPv(i8* nonnull %0) #8
  br label %4

4:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3gtk12_GLOBAL__N_125ConvertGdkEventToKeyEventEP9_GdkEvent: argument 0"}
!4 = distinct !{!4, !"_ZN3gtk12_GLOBAL__N_125ConvertGdkEventToKeyEventEP9_GdkEvent"}
