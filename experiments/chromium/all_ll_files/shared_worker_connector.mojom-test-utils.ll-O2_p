; ModuleID = 'gen/third_party/blink/public/mojom/worker/shared_worker_connector.mojom-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/worker/shared_worker_connector.mojom-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter" = type { %"class.blink::mojom::SharedWorkerConnector"* }
%"class.blink::mojom::SharedWorkerConnector" = type { i32 (...)** }
%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting" = type { %"class.blink::mojom::SharedWorkerConnector" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::SharedWorkerInfo"* }
%"class.blink::mojom::SharedWorkerInfo" = type { %class.GURL, %"class.mojo::InlinedStructPtr", %"class.std::__1::vector", i32, %"class.mojo::StructPtr.59" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.3" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.GURL* }
%"class.mojo::InlinedStructPtr" = type <{ %"class.blink::mojom::WorkerOptions", i32, [4 x i8] }>
%"class.blink::mojom::WorkerOptions" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::StructPtr.7"*, %"class.mojo::StructPtr.7"*, %"class.std::__1::__compressed_pair.54" }
%"class.mojo::StructPtr.7" = type { %"class.std::__1::unique_ptr.8" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.network::mojom::ContentSecurityPolicy"* }
%"class.network::mojom::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.11", %"class.base::flat_map", %"class.base::flat_map.25", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr.35", i8, %"class.std::__1::vector.37", i32, %"class.mojo::StructPtr.44", %"class.std::__1::vector.37" }
%"class.mojo::StructPtr.11" = type { %"class.std::__1::unique_ptr.12" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.network::mojom::CSPSource"* }
%"class.network::mojom::CSPSource" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8] }>
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.18" }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.20" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::pair"* }
%"class.base::flat_map.25" = type { %"class.base::internal::flat_tree.26" }
%"class.base::internal::flat_tree.26" = type { %"class.std::__1::vector.27" }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.std::__1::pair.29"*, %"struct.std::__1::pair.29"*, %"class.std::__1::__compressed_pair.30" }
%"struct.std::__1::pair.29" = type opaque
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::pair.29"* }
%"class.mojo::InlinedStructPtr.35" = type <{ %"class.network::mojom::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::ContentSecurityPolicyHeader" = type { %"class.std::__1::basic_string", i32, i32 }
%"class.mojo::StructPtr.44" = type { %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.network::mojom::CSPTrustedTypes"* }
%"class.network::mojom::CSPTrustedTypes" = type <{ %"class.std::__1::vector.37", i8, i8, [6 x i8] }>
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.mojo::StructPtr.7"* }
%"class.mojo::StructPtr.59" = type { %"class.std::__1::unique_ptr.60" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::mojom::FetchClientSettingsObject"* }
%"class.blink::mojom::FetchClientSettingsObject" = type <{ i32, [4 x i8], %class.GURL, i32, [4 x i8] }>
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.blink::MessagePortDescriptor" = type { %"class.mojo::ScopedHandleBase", %"class.base::UnguessableToken", i64 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.mojo::PendingRemote.69" = type { %"struct.mojo::internal::PendingRemoteState" }

$_ZN5blink5mojom21SharedWorkerConnectorD2Ev = comdat any

$_ZN5blink5mojom42SharedWorkerConnectorInterceptorForTestingD0Ev = comdat any

@_ZTVN5blink5mojom42SharedWorkerConnectorInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::SharedWorkerConnector"*)* @_ZN5blink5mojom21SharedWorkerConnectorD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)* @_ZN5blink5mojom42SharedWorkerConnectorInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)* @_ZN5blink5mojom42SharedWorkerConnectorInterceptorForTesting7ConnectEN4mojo9StructPtrINS0_16SharedWorkerInfoEEENS2_13PendingRemoteINS0_18SharedWorkerClientEEENS0_31SharedWorkerCreationContextTypeENS_21MessagePortDescriptorENS6_INS0_12BlobURLTokenEEEl to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5blink5mojom32SharedWorkerConnectorAsyncWaiterC1EPNS0_21SharedWorkerConnectorE = hidden unnamed_addr alias void (%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"*, %"class.blink::mojom::SharedWorkerConnector"*), void (%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"*, %"class.blink::mojom::SharedWorkerConnector"*)* @_ZN5blink5mojom32SharedWorkerConnectorAsyncWaiterC2EPNS0_21SharedWorkerConnectorE
@_ZN5blink5mojom32SharedWorkerConnectorAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"*), void (%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"*)* @_ZN5blink5mojom32SharedWorkerConnectorAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom42SharedWorkerConnectorInterceptorForTesting7ConnectEN4mojo9StructPtrINS0_16SharedWorkerInfoEEENS2_13PendingRemoteINS0_18SharedWorkerClientEEENS0_31SharedWorkerCreationContextTypeENS_21MessagePortDescriptorENS6_INS0_12BlobURLTokenEEEl(%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*, %"class.mojo::StructPtr"* nocapture, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64) unnamed_addr #0 align 2 {
  %8 = alloca %"class.mojo::StructPtr", align 8
  %9 = alloca %"class.mojo::PendingRemote", align 4
  %10 = alloca %"class.blink::MessagePortDescriptor", align 8
  %11 = alloca %"class.mojo::PendingRemote.69", align 4
  %12 = bitcast %"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"* %0 to %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)***
  %13 = load %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)**, %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)*, %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)** %13, i64 3
  %15 = load %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)*, %"class.blink::mojom::SharedWorkerConnector"* (%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*)** %14, align 8
  %16 = tail call %"class.blink::mojom::SharedWorkerConnector"* %15(%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"* %0) #8
  %17 = bitcast %"class.mojo::StructPtr"* %8 to i64*
  %18 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.mojo::StructPtr"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %17, align 8
  store i64 0, i64* %19, align 8
  %21 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %9, i64 0, i32 0
  %22 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %2, i64 0, i32 0
  call void @_ZN4mojo8internal18PendingRemoteStateC1EOS1_(%"struct.mojo::internal::PendingRemoteState"* nonnull %21, %"struct.mojo::internal::PendingRemoteState"* dereferenceable(8) %22) #8
  call void @_ZN5blink21MessagePortDescriptorC1EOS0_(%"class.blink::MessagePortDescriptor"* nonnull %10, %"class.blink::MessagePortDescriptor"* dereferenceable(32) %4) #8
  %23 = getelementptr inbounds %"class.mojo::PendingRemote.69", %"class.mojo::PendingRemote.69"* %11, i64 0, i32 0
  %24 = getelementptr inbounds %"class.mojo::PendingRemote.69", %"class.mojo::PendingRemote.69"* %5, i64 0, i32 0
  call void @_ZN4mojo8internal18PendingRemoteStateC1EOS1_(%"struct.mojo::internal::PendingRemoteState"* nonnull %23, %"struct.mojo::internal::PendingRemoteState"* dereferenceable(8) %24) #8
  %25 = bitcast %"class.blink::mojom::SharedWorkerConnector"* %16 to void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)***
  %26 = load void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)**, void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)*, void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)** %26, i64 2
  %28 = load void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)*, void (%"class.blink::mojom::SharedWorkerConnector"*, %"class.mojo::StructPtr"*, %"class.mojo::PendingRemote"*, i32, %"class.blink::MessagePortDescriptor"*, %"class.mojo::PendingRemote.69"*, i64)** %27, align 8
  call void %28(%"class.blink::mojom::SharedWorkerConnector"* %16, %"class.mojo::StructPtr"* nonnull %8, %"class.mojo::PendingRemote"* nonnull %9, i32 %3, %"class.blink::MessagePortDescriptor"* nonnull %10, %"class.mojo::PendingRemote.69"* nonnull %11, i64 %6) #8
  call void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"* nonnull %23) #8
  call void @_ZN5blink21MessagePortDescriptorD1Ev(%"class.blink::MessagePortDescriptor"* nonnull %10) #8
  call void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"* nonnull %21) #8
  %29 = load %"class.blink::mojom::SharedWorkerInfo"*, %"class.blink::mojom::SharedWorkerInfo"** %18, align 8
  store %"class.blink::mojom::SharedWorkerInfo"* null, %"class.blink::mojom::SharedWorkerInfo"** %18, align 8
  %30 = icmp eq %"class.blink::mojom::SharedWorkerInfo"* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %7
  call void @_ZN5blink5mojom16SharedWorkerInfoD1Ev(%"class.blink::mojom::SharedWorkerInfo"* nonnull %29) #8
  %32 = bitcast %"class.blink::mojom::SharedWorkerInfo"* %29 to i8*
  call void @_ZdlPv(i8* %32) #9
  br label %33

33:                                               ; preds = %7, %31
  ret void
}

declare void @_ZN5blink21MessagePortDescriptorC1EOS0_(%"class.blink::MessagePortDescriptor"*, %"class.blink::MessagePortDescriptor"* dereferenceable(32)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink21MessagePortDescriptorD1Ev(%"class.blink::MessagePortDescriptor"*) unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom32SharedWorkerConnectorAsyncWaiterC2EPNS0_21SharedWorkerConnectorE(%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"* nocapture, %"class.blink::mojom::SharedWorkerConnector"*) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::SharedWorkerConnectorAsyncWaiter", %"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::SharedWorkerConnector"* %1, %"class.blink::mojom::SharedWorkerConnector"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom32SharedWorkerConnectorAsyncWaiterD2Ev(%"class.blink::mojom::SharedWorkerConnectorAsyncWaiter"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom21SharedWorkerConnectorD2Ev(%"class.blink::mojom::SharedWorkerConnector"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom42SharedWorkerConnectorInterceptorForTestingD0Ev(%"class.blink::mojom::SharedWorkerConnectorInterceptorForTesting"*) unnamed_addr #5 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN4mojo8internal18PendingRemoteStateC1EOS1_(%"struct.mojo::internal::PendingRemoteState"*, %"struct.mojo::internal::PendingRemoteState"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink5mojom16SharedWorkerInfoD1Ev(%"class.blink::mojom::SharedWorkerInfo"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
