; ModuleID = '../../third_party/blink/renderer/platform/text/text_encoding_detector.cc'
source_filename = "../../third_party/blink/renderer/platform/text/text_encoding_detector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.WTF::TextEncoding" = type { i8* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [5 x i8] c"file\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink18DetectTextEncodingEPKcjS1_RKNS_4KURLES1_PN3WTF12TextEncodingE(i8*, i32, i8*, %"class.blink::KURL"* dereferenceable(112), i8*, %"class.WTF::TextEncoding"* nocapture) local_unnamed_addr #0 {
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8, align 1
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"class.WTF::TextEncoding", align 8
  %16 = bitcast %"class.WTF::TextEncoding"* %5 to i64*
  store i64 0, i64* %16, align 8
  %17 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #4
  store i32 26, i32* %11, align 4
  %18 = tail call %"class.WTF::StringImpl"* @_ZNK5blink4KURL8ProtocolEv(%"class.blink::KURL"* %3) #4
  %19 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #4
  %20 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %20, label %21, label %25

21:                                               ; preds = %6
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* null, i8** %22, align 8
  %23 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %24 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %23, i64* %24, align 8
  br label %33

25:                                               ; preds = %6
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %26, align 8
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %31 = bitcast i8** %30 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %29, %"class.WTF::StringImpl"** %31, align 8
  %32 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %33

33:                                               ; preds = %25, %21
  %34 = phi i64 [ %32, %25 ], [ %23, %21 ]
  %35 = phi i32 [ %28, %25 ], [ 0, %21 ]
  %36 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %35, i32* %36, align 8
  %37 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #4
  %38 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %34, i64* %38, align 8
  %39 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %39, align 8
  %40 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 4, i32* %40, align 8
  %41 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %9, %"class.WTF::StringView"* nonnull dereferenceable(24) %10) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #4
  br i1 %20, label %55, label %42

42:                                               ; preds = %33
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #4
  br label %55

55:                                               ; preds = %33, %51, %54
  br i1 %41, label %56, label %58

56:                                               ; preds = %55
  %57 = call zeroext i1 @_Z16LanguageFromCodePKcP8Language(i8* %4, i32* nonnull %11) #4
  br label %58

58:                                               ; preds = %56, %55
  %59 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #4
  store i32 -1431655766, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #4
  store i8 -86, i8* %13, align 1
  %60 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %60) #4
  %61 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %3, i64 0, i32 4
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %14, %"class.WTF::String"* %61) #4
  %62 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %63 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %62, i64 0, i32 1, i32 0
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %64, 0
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = select i1 %65, i8* %67, i8* %60
  %69 = call i32 @_Z27EncodingNameAliasToEncodingPKc(i8* %2) #4
  %70 = load i32, i32* %11, align 4
  %71 = call i32 @_ZN13CompactEncDet14DetectEncodingEPKciS1_S1_S1_i8LanguageNS_14TextCorpusTypeEbPiPb(i8* %0, i32 %1, i8* %68, i8* null, i8* null, i32 %69, i32 %70, i32 0, i1 zeroext false, i32* nonnull %12, i8* nonnull %13) #4
  %72 = load i8, i8* %63, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %58
  %75 = load i8*, i8** %66, align 8
  call void @_ZdlPv(i8* %75) #5
  br label %76

76:                                               ; preds = %58, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %60) #4
  %77 = icmp eq i32 %71, 23
  br i1 %77, label %109, label %78

78:                                               ; preds = %76
  %79 = bitcast %"class.WTF::TextEncoding"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #4
  %80 = call i8* @_Z16MimeEncodingName8Encoding(i32 %71) #4
  call void @_ZN3WTF12TextEncodingC1EPKc(%"class.WTF::TextEncoding"* nonnull %15, i8* %80) #4
  %81 = bitcast %"class.WTF::TextEncoding"* %15 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #4
  %83 = call %"class.WTF::StringImpl"* @_ZNK5blink4KURL8ProtocolEv(%"class.blink::KURL"* %3) #4
  %84 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %84) #4
  %85 = icmp eq %"class.WTF::StringImpl"* %83, null
  br i1 %85, label %86, label %90

86:                                               ; preds = %78
  %87 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* null, i8** %87, align 8
  %88 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %89 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %88, i64* %89, align 8
  br label %98

90:                                               ; preds = %78
  %91 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %83, %"class.WTF::StringImpl"** %91, align 8
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 1
  %95 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %96 = bitcast i8** %95 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %94, %"class.WTF::StringImpl"** %96, align 8
  %97 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %98

98:                                               ; preds = %90, %86
  %99 = phi i64 [ %97, %90 ], [ %88, %86 ]
  %100 = phi i32 [ %93, %90 ], [ 0, %86 ]
  %101 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %100, i32* %101, align 8
  %102 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %102) #4
  %103 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %99, i64* %103, align 8
  %104 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %104, align 8
  %105 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 4, i32* %105, align 8
  %106 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %7, %"class.WTF::StringView"* nonnull dereferenceable(24) %8) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %102) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %84) #4
  %107 = icmp ne i32 %71, 22
  %108 = or i1 %107, %106
  br i1 %85, label %126, label %113

109:                                              ; preds = %76
  %110 = call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF15UnknownEncodingEv() #4
  %111 = bitcast %"class.WTF::TextEncoding"* %110 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %16, align 8
  br label %126

113:                                              ; preds = %98
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %122

120:                                              ; preds = %113
  %121 = add i32 %119, -1
  store i32 %121, i32* %118, align 4
  br label %122

122:                                              ; preds = %120, %113
  %123 = phi i32 [ %121, %120 ], [ %119, %113 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %122
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %83) #4
  br label %126

126:                                              ; preds = %125, %122, %98, %109
  %127 = phi i1 [ false, %109 ], [ %108, %98 ], [ %108, %122 ], [ %108, %125 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #4
  ret i1 %127
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::StringImpl"* @_ZNK5blink4KURL8ProtocolEv(%"class.blink::KURL"*) local_unnamed_addr #2

declare zeroext i1 @_Z16LanguageFromCodePKcP8Language(i8*, i32*) local_unnamed_addr #2

declare i32 @_ZN13CompactEncDet14DetectEncodingEPKciS1_S1_S1_i8LanguageNS_14TextCorpusTypeEbPiPb(i8*, i32, i8*, i8*, i8*, i32, i32, i32, i1 zeroext, i32*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #2

declare i32 @_Z27EncodingNameAliasToEncodingPKc(i8*) local_unnamed_addr #2

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF15UnknownEncodingEv() local_unnamed_addr #2

declare i8* @_Z16MimeEncodingName8Encoding(i32) local_unnamed_addr #2

declare void @_ZN3WTF12TextEncodingC1EPKc(%"class.WTF::TextEncoding"*, i8*) unnamed_addr #2

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
