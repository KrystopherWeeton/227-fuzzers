; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/activations.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/activations.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { {}*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.Eigen::internal::variable_if_dynamic.22" = type { i8 }
%"class.Eigen::internal::variable_if_dynamic" = type { i64 }
%"class.Eigen::Matrix" = type { %"class.Eigen::PlainObjectBase.170" }
%"class.Eigen::PlainObjectBase.170" = type { %"class.Eigen::DenseStorage" }
%"class.Eigen::DenseStorage" = type { float*, i64 }
%"struct.Eigen::internal::evaluator.177" = type { %"struct.Eigen::internal::evaluator.178" }
%"struct.Eigen::internal::evaluator.178" = type { %"class.Eigen::internal::plainobjectbase_evaluator_data" }
%"class.Eigen::internal::plainobjectbase_evaluator_data" = type { float* }
%"struct.Eigen::internal::evaluator.181" = type { %"struct.Eigen::internal::evaluator.base.185", [3 x i8] }
%"struct.Eigen::internal::evaluator.base.185" = type <{ %"struct.Eigen::internal::scalar_constant_op", %"struct.Eigen::internal::nullary_wrapper" }>
%"struct.Eigen::internal::scalar_constant_op" = type { float }
%"struct.Eigen::internal::nullary_wrapper" = type { i8 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.tflite::ops::builtin::activations::ReluOpData" = type { %"struct.tflite::ops::builtin::activations::OpData", i32, i32 }
%"struct.tflite::ops::builtin::activations::OpData" = type { i32, i32, i32, i32, [256 x i8] }
%"struct.tflite::ops::builtin::activations::HardSwishData" = type { %"struct.tflite::HardSwishParams" }
%"struct.tflite::HardSwishParams" = type { i16, i16, i16, i32, i16, i32 }
%"struct.tflite::ops::builtin::activations::LeakyReluOpData" = type { %"struct.tflite::ops::builtin::activations::OpData", i32, i32, i32, i32 }
%struct.TfLiteLeakyReluParams = type { float }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { double (%"union.std::__1::__function::__policy_storage"*, double)* }
%struct.TfLiteSoftmaxParams = type { float }
%"struct.tflite::ops::builtin::activations::SoftmaxOpData" = type <{ %"struct.tflite::SoftmaxParams", [256 x float], [513 x i16], [513 x i16], [4 x i8] }>
%"struct.tflite::SoftmaxParams" = type { double, i32, i32, i32, i32, i32, i32, float, float*, i16*, i16*, i8*, i8* }
%"struct.tflite::ops::builtin::activations::LogSoftmaxOpData" = type { %"struct.tflite::ops::builtin::activations::OpData", i32, i32, %"struct.tflite::SoftmaxParams", [256 x float] }
%"struct.tflite::ops::builtin::activations::PreluOpData" = type <{ %"struct.tflite::ops::builtin::activations::OpData", i32, i32, i32, i32, i8, [3 x i8] }>
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"class.tflite::CpuBackendContext" = type <{ %"class.tflite::TfLiteInternalBackendContext", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.4", i32, i8, [3 x i8] }>
%"class.tflite::TfLiteInternalBackendContext" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ruy::Context"* }
%"class.ruy::Context" = type { %"class.ruy::CtxImpl"* }
%"class.ruy::CtxImpl" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.gemmlowp::GemmContext"* }
%"class.gemmlowp::GemmContext" = type { %"class.gemmlowp::MultiThreadGemmContext" }
%"class.gemmlowp::MultiThreadGemmContext" = type { %"class.gemmlowp::MultiThreadGemmContextBase", %"class.gemmlowp::WorkersPool" }
%"class.gemmlowp::MultiThreadGemmContextBase" = type { %"class.gemmlowp::SingleThreadGemmContext.base", i32 }
%"class.gemmlowp::SingleThreadGemmContext.base" = type <{ %"class.gemmlowp::Allocator", i32, i32, float }>
%"class.gemmlowp::Allocator" = type { i8, i64, i8*, i64, i64, [5 x i64], i64 }
%"class.gemmlowp::WorkersPool" = type { %"class.std::__1::vector", %"class.gemmlowp::BlockingCounter", %"class.gemmlowp::Allocator" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"**, %"class.std::__1::__compressed_pair.15" }
%"class.gemmlowp::Worker" = type { i64, %"struct.gemmlowp::Task"*, %union.pthread_cond_t, %union.pthread_mutex_t, %"struct.std::__1::atomic", %"class.gemmlowp::Allocator", %"class.gemmlowp::BlockingCounter"* }
%"struct.gemmlowp::Task" = type { i32 (...)**, %"class.gemmlowp::Allocator"* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.7, %union.anon.8, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.7 = type { i64 }
%union.anon.8 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.gemmlowp::Worker"** }
%"class.gemmlowp::BlockingCounter" = type { %"struct.std::__1::atomic.10" }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"class.std::__1::__compressed_pair.61" }
%"struct.tflite::optimized_ops::SoftmaxWorkerTask" = type { %"struct.gemmlowp::Task", %"struct.tflite::SoftmaxParams"*, %"class.tflite::RuntimeShape"*, float*, %"class.tflite::RuntimeShape"*, float*, i32, i32 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* }
%"class.std::__1::vector.274" = type { %"class.std::__1::__vector_base.275" }
%"class.std::__1::__vector_base.275" = type { i16*, i16*, %"class.std::__1::__compressed_pair.276" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.277" }
%"struct.std::__1::__compressed_pair_elem.277" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.tflite::PreluParams" = type { i32, i32, i32, i32, i32, i32, i32 }
%"struct.tflite::NdArrayDesc" = type { [4 x i32], [4 x i32] }
%"struct.tflite::LeakyReluParams" = type { float, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::function.285" = type { %"class.std::__1::__function::__policy_func.289" }
%"class.std::__1::__function::__policy_func.289" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.290", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.290" = type { float (%"union.std::__1::__function::__policy_storage"*, float)* }
%"struct.Eigen::internal::evaluator.327" = type { %"struct.Eigen::internal::unary_evaluator.328" }
%"struct.Eigen::internal::unary_evaluator.328" = type { %"class.Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_tanh_op<float>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, float>::Data" }
%"class.Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_tanh_op<float>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, float>::Data" = type { %"struct.Eigen::internal::evaluator.331" }
%"struct.Eigen::internal::evaluator.331" = type { %"struct.Eigen::internal::evaluator.332" }
%"struct.Eigen::internal::evaluator.332" = type { %"struct.Eigen::internal::unary_evaluator.333" }
%"struct.Eigen::internal::unary_evaluator.333" = type { %"struct.Eigen::internal::evaluator_wrapper_base.334" }
%"struct.Eigen::internal::evaluator_wrapper_base.334" = type { %"struct.Eigen::internal::evaluator.46" }
%"struct.Eigen::internal::evaluator.46" = type { %"struct.Eigen::internal::mapbase_evaluator" }
%"struct.Eigen::internal::mapbase_evaluator" = type { float*, %"class.Eigen::internal::variable_if_dynamic.22", %"class.Eigen::internal::variable_if_dynamic" }
%"struct.Eigen::internal::evaluator.337" = type { %"struct.Eigen::internal::unary_evaluator.338" }
%"struct.Eigen::internal::unary_evaluator.338" = type { %"struct.Eigen::internal::evaluator_wrapper_base.339" }
%"struct.Eigen::internal::evaluator_wrapper_base.339" = type { %"struct.Eigen::internal::evaluator.54" }
%"struct.Eigen::internal::evaluator.54" = type { %"struct.Eigen::internal::mapbase_evaluator.55" }
%"struct.Eigen::internal::mapbase_evaluator.55" = type { float*, %"class.Eigen::internal::variable_if_dynamic.22", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::generic_dense_assignment_kernel.342" = type { %"struct.Eigen::internal::evaluator.337"*, %"struct.Eigen::internal::evaluator.327"*, %"struct.Eigen::internal::assign_op"*, %"class.Eigen::ArrayWrapper.320"* }
%"struct.Eigen::internal::assign_op" = type { i8 }
%"class.Eigen::ArrayWrapper.320" = type { %"class.Eigen::Map.25" }
%"class.Eigen::Map.25" = type { %"class.Eigen::MapBase.base.35", %"class.Eigen::Stride", [5 x i8] }
%"class.Eigen::MapBase.base.35" = type { %"class.Eigen::MapBase.base.34" }
%"class.Eigen::MapBase.base.34" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.22" }>
%"class.Eigen::Stride" = type { %"class.Eigen::internal::variable_if_dynamic.23", %"class.Eigen::internal::variable_if_dynamic.23" }
%"class.Eigen::internal::variable_if_dynamic.23" = type { i8 }
%"class.Eigen::CwiseUnaryOp.363" = type { %"class.Eigen::ArrayWrapper.313", %"struct.Eigen::internal::scalar_logistic_op", [7 x i8] }
%"class.Eigen::ArrayWrapper.313" = type { %"class.Eigen::Map" }
%"class.Eigen::Map" = type { %"class.Eigen::MapBase.base", %"class.Eigen::Stride", [5 x i8] }
%"class.Eigen::MapBase.base" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.22" }>
%"struct.Eigen::internal::scalar_logistic_op" = type { i8 }
%"struct.Eigen::internal::evaluator.148" = type { %"struct.Eigen::internal::binary_evaluator.149" }
%"struct.Eigen::internal::binary_evaluator.149" = type { %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::ArrayWrapper<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Array<float, -1, -1, 0, -1, -1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" }
%"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::ArrayWrapper<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Array<float, -1, -1, 0, -1, -1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" = type { [8 x i8], %"struct.Eigen::internal::evaluator.152", %"struct.Eigen::internal::evaluator.181" }
%"struct.Eigen::internal::evaluator.152" = type { %"struct.Eigen::internal::evaluator.153" }
%"struct.Eigen::internal::evaluator.153" = type { %"struct.Eigen::internal::unary_evaluator" }
%"struct.Eigen::internal::unary_evaluator" = type { %"struct.Eigen::internal::evaluator_wrapper_base" }
%"struct.Eigen::internal::evaluator_wrapper_base" = type { %"struct.Eigen::internal::evaluator.156" }
%"struct.Eigen::internal::evaluator.156" = type { %"struct.Eigen::internal::binary_evaluator.157" }
%"struct.Eigen::internal::binary_evaluator.157" = type { %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" }
%"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data" = type { %"struct.Eigen::internal::evaluator.160", %"struct.Eigen::internal::evaluator.165" }
%"struct.Eigen::internal::evaluator.160" = type { %"struct.Eigen::internal::evaluator.161" }
%"struct.Eigen::internal::evaluator.161" = type { %"struct.Eigen::internal::mapbase_evaluator.162" }
%"struct.Eigen::internal::mapbase_evaluator.162" = type { float*, %"class.Eigen::internal::variable_if_dynamic.22", %"class.Eigen::internal::variable_if_dynamic" }
%"struct.Eigen::internal::evaluator.165" = type { %"struct.Eigen::internal::evaluator.166" }
%"struct.Eigen::internal::evaluator.166" = type { %"struct.Eigen::internal::unary_evaluator.167" }
%"struct.Eigen::internal::unary_evaluator.167" = type { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::CwiseBinaryOp.85" = type { [8 x i8], %"class.Eigen::ArrayWrapper", %"class.Eigen::CwiseNullaryOp.109", %"struct.Eigen::internal::scalar_product_op", [7 x i8] }
%"class.Eigen::ArrayWrapper" = type { %"class.Eigen::CwiseBinaryOp.94" }
%"class.Eigen::CwiseBinaryOp.94" = type { %"class.Eigen::Map.67", %"class.Eigen::Replicate", %"struct.Eigen::internal::scalar_difference_op", [7 x i8] }
%"class.Eigen::Map.67" = type <{ %"class.Eigen::MapBase.68", %"class.Eigen::Stride", [6 x i8] }>
%"class.Eigen::MapBase.68" = type { float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::Replicate" = type <{ %"class.Eigen::PartialReduxExpr", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8] }>
%"class.Eigen::PartialReduxExpr" = type { %"class.Eigen::Map.67", %"struct.Eigen::internal::member_maxCoeff", [7 x i8] }
%"struct.Eigen::internal::member_maxCoeff" = type { i8 }
%"struct.Eigen::internal::scalar_difference_op" = type { i8 }
%"class.Eigen::CwiseNullaryOp.109" = type <{ %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", %"struct.Eigen::internal::scalar_constant_op", [4 x i8] }>
%"struct.Eigen::internal::scalar_product_op" = type { i8 }
%"class.Eigen::internal::redux_evaluator" = type { %"struct.Eigen::internal::evaluator.204" }
%"struct.Eigen::internal::evaluator.204" = type { %"struct.Eigen::internal::block_evaluator" }
%"struct.Eigen::internal::block_evaluator" = type { %"struct.Eigen::internal::mapbase_evaluator.205" }
%"struct.Eigen::internal::mapbase_evaluator.205" = type { float*, %"class.Eigen::internal::variable_if_dynamic.22", %"class.Eigen::internal::variable_if_dynamic" }
%"struct.Eigen::internal::scalar_max_op" = type { i8 }
%"class.Eigen::Block" = type { %"class.Eigen::BlockImpl" }
%"class.Eigen::BlockImpl" = type { %"class.Eigen::internal::BlockImpl_dense" }
%"class.Eigen::internal::BlockImpl_dense" = type { %"class.Eigen::MapBase.base.203", [7 x i8], %"class.Eigen::Map.67", %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic", i64 }
%"class.Eigen::MapBase.base.203" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.22" }>
%"class.std::__1::chrono::duration.268" = type { i64 }
%union.pthread_condattr_t = type { i32 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }
%"struct.Eigen::EigenBase.326" = type { i8 }

$_ZN6tflite13optimized_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_PfPNS_17CpuBackendContextE = comdat any

$_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps = comdat any

$_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIhsEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE = comdat any

$_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIasEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE = comdat any

$_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIfffEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E = comdat any

$_ZN6tflite3ops7builtin11activations10ApplyPreluIfEET_S4_S4_ = comdat any

$_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ = comdat any

$_ZN6tflite13reference_ops5PreluIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ = comdat any

$_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ = comdat any

$_ZN6tflite13reference_ops5PreluIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ = comdat any

$_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIhEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE = comdat any

$_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIaEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE = comdat any

$_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIsEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE = comdat any

$_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations13HardSwishEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin11activations13HardSwishEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite13optimized_ops11SoftmaxImplERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pfii = comdat any

$_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_9ReplicateINS_16PartialReduxExprISC_NS0_15member_maxCoeffIffEELi0EEELin1ELi1EEEEENS0_10IndexBasedESL_ffE4DataC2ERKSK_ = comdat any

$_ZN5Eigen8internal10redux_implINS0_13scalar_max_opIffLi0EEENS0_15redux_evaluatorINS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEEEELi3ELi0EE3runISE_EEfRKSF_RKS3_RKT_ = comdat any

$_ZN6tflite13optimized_ops17SoftmaxWorkerTaskD0Ev = comdat any

$_ZN6tflite13optimized_ops17SoftmaxWorkerTask3RunEv = comdat any

$_ZN8gemmlowp4TaskD2Ev = comdat any

$_ZN8gemmlowp4TaskD0Ev = comdat any

$_ZNSt3__16vectorIN6tflite13optimized_ops17SoftmaxWorkerTaskENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRKNS1_13SoftmaxParamsERKNS1_12RuntimeShapeERPKfSD_RPfRiSJ_EEEvDpOT_ = comdat any

$_ZN8gemmlowp11WorkersPool7ExecuteIN6tflite13optimized_ops17SoftmaxWorkerTaskEEEviPT_ = comdat any

$_ZN8gemmlowp11WorkersPool13CreateWorkersEm = comdat any

$_ZN8gemmlowp6Worker10ThreadFuncEPv = comdat any

$_ZN8gemmlowp6Worker10ThreadFuncEv = comdat any

$_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_ = comdat any

$_ZN6tflite13reference_ops17QuantizeLeakyReluIhEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ = comdat any

$_ZN6tflite13reference_ops17QuantizeLeakyReluIaEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ = comdat any

$_ZN6tflite13reference_ops17QuantizeLeakyReluIsEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKNS4_INS5_IKS7_Li0ES9_EEEEEEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSO_ = comdat any

$_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_ = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf = comdat any

$_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKNS2_INS3_IKS5_Li0ES7_EEEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_ = comdat any

$_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_ = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN6tflite13reference_ops10LogSoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN6tflite13reference_ops10LogSoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite21reference_integer_ops10LogSoftmaxEiiiiiiiPKaPa = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_ = comdat any

$_ZN6tflite43log_x_for_x_greater_than_or_equal_to_1_implILi5ELi12EEEN8gemmlowp10FixedPointIiXT_EEENS2_IiXT0_EEE = comdat any

$_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_ = comdat any

$_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ = comdat any

$_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_ = comdat any

$_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE = comdat any

$_ZTVN8gemmlowp4TaskE = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/activations.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"output->type\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"params->output_multiplier_exponent <= 0\00", align 1
@.str.12 = private unnamed_addr constant [89 x i8] c"input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 || input->type == kTfLiteInt16\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"NumDimensions(input) >= 1\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"output->params.zero_point\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"output->params.scale\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"16.0 / 256\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"255\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"127\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"alpha->type\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"HaveSameShapes(input, output)\00", align 1
@.str.23 = private unnamed_addr constant [58 x i8] c"Only float32 & int8/uint8 is supported currently, got %s.\00", align 1
@.str.24 = private unnamed_addr constant [55 x i8] c"Only float32, uint8, int8 supported currently, got %s.\00", align 1
@.str.25 = private unnamed_addr constant [62 x i8] c"Only float32, uint8 and int8 are supported currently, got %s.\00", align 1
@.str.26 = private unnamed_addr constant [85 x i8] c"Only 1D, 2D, 3D and 4D tensors supported for int16 input with int16 output, got %dD.\00", align 1
@.str.27 = private unnamed_addr constant [86 x i8] c"Only uint8_t and int16_t outputs are supported with uint8_t inputs currently, got %s.\00", align 1
@.str.28 = private unnamed_addr constant [84 x i8] c"Only int8_t and int16_t outputs are supported with int8_t inputs currently, got %s.\00", align 1
@.str.29 = private unnamed_addr constant [72 x i8] c"Only float32, uint8_t, Int8_t, Int16_t are supported currently, got %s.\00", align 1
@.str.30 = private unnamed_addr constant [65 x i8] c"Only float32 and uint8 and int8 are supported currently, got %d.\00", align 1
@.str.31 = private unnamed_addr constant [68 x i8] c"Only float32, int8, int16 and uint8 is supported currently, got %s.\00", align 1
@.str.32 = private unnamed_addr constant [45 x i8] c"Only float32 is supported currently, got %s.\00", align 1
@_ZZN6tflite3ops7builtin12Register_ELUEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14GenericPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations7EluEvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin13Register_RELUEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations8ReluInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations8ReluFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations8ReluEvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin21Register_RELU_N1_TO_1EvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations8ReluInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations8ReluFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations9Relu1EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin14Register_RELU6EvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations8ReluInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations8ReluFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin17Register_TANH_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin25Register_TANH_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin29Register_TANH_FIXED_POINT_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin21Register_LOGISTIC_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin29Register_LOGISTIC_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin33Register_LOGISTIC_FIXED_POINT_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin16Register_SOFTMAXEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations11SoftmaxInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations11SoftmaxFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin24Register_LOG_SOFTMAX_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations14LogSoftmaxInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations14LogSoftmaxFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations17LogSoftmaxPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin20Register_LOG_SOFTMAXEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations14LogSoftmaxInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations14LogSoftmaxFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations17LogSoftmaxPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin14Register_PRELUEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations9PreluInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations9PreluFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations9PreluEvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin19Register_LEAKY_RELUEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations13LeakyReluInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations13LeakyReluFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations16LeakyReluPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations13LeakyReluEvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin19Register_HARD_SWISHEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations13HardSwishInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations13HardSwishFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations16HardSwishPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations13HardSwishEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin23Register_HARD_SWISH_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin11activations13HardSwishInitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin11activations13HardSwishFreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations16HardSwishPrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11activations13HardSwishEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@__const._ZN5Eigen8internal26call_dense_assignment_loopINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_12ArrayWrapperINS8_INS0_20scalar_difference_opIffEEKNS2_IKS4_Li0ES6_EEKNS_9ReplicateINS_16PartialReduxExprISG_NS0_15member_maxCoeffIffEELi0EEELin1ELi1EEEEEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLin1ELin1ELi0ELin1ELin1EEEEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_.srcEvaluator = private unnamed_addr constant { { { [8 x i8], { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } }, %"struct.Eigen::internal::evaluator.181" } } } { { { [8 x i8], { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } }, %"struct.Eigen::internal::evaluator.181" } } { { [8 x i8], { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } }, %"struct.Eigen::internal::evaluator.181" } { [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } } { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } { float* inttoptr (i64 -6148914691236517206 to float*), %"class.Eigen::internal::variable_if_dynamic.22" { i8 -86 }, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.Eigen::internal::variable_if_dynamic" { i64 -6148914691236517206 } } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } { %"class.Eigen::Matrix" { %"class.Eigen::PlainObjectBase.170" { %"class.Eigen::DenseStorage" { float* inttoptr (i64 -6148914691236517206 to float*), i64 -6148914691236517206 } } }, %"struct.Eigen::internal::evaluator.177" { %"struct.Eigen::internal::evaluator.178" { %"class.Eigen::internal::plainobjectbase_evaluator_data" { float* inttoptr (i64 -6148914691236517206 to float*) } } }, %"class.Eigen::internal::variable_if_dynamic.22" { i8 -86 }, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.Eigen::internal::variable_if_dynamic" { i64 -6148914691236517206 } } } } } } } } } } }, %"struct.Eigen::internal::evaluator.181" { %"struct.Eigen::internal::evaluator.base.185" <{ %"struct.Eigen::internal::scalar_constant_op" { float 0xFFFFFFFFE0000000 }, %"struct.Eigen::internal::nullary_wrapper" { i8 -86 } }>, [3 x i8] c"\AA\AA\AA" } } } }, align 8
@_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.gemmlowp::Task"*)* @_ZN8gemmlowp4TaskD2Ev to i8*), i8* bitcast (void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)* @_ZN6tflite13optimized_ops17SoftmaxWorkerTaskD0Ev to i8*), i8* bitcast (void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)* @_ZN6tflite13optimized_ops17SoftmaxWorkerTask3RunEv to i8*)] }, comdat, align 8
@_ZTVN8gemmlowp4TaskE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.gemmlowp::Task"*)* @_ZN8gemmlowp4TaskD2Ev to i8*), i8* bitcast (void (%"struct.gemmlowp::Task"*)* @_ZN8gemmlowp4TaskD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_0FddEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_1FddEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@.str.45 = private unnamed_addr constant [25 x i8] c"input->params.zero_point\00", align 1
@.str.46 = private unnamed_addr constant [62 x i8] c"CheckedLog2(output->params.scale, &output_scale_log2_rounded)\00", align 1
@.str.47 = private unnamed_addr constant [26 x i8] c"output_scale_log2_rounded\00", align 1
@.str.48 = private unnamed_addr constant [23 x i8] c"-kOutputFractionalBits\00", align 1
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@.str.49 = private unnamed_addr constant [69 x i8] c"Only float32, uint8, int16 and int8 are supported currently, got %s.\00", align 1
@_ZN6tfliteL20sigmoid_table_uint16E = internal unnamed_addr constant [256 x i16] [i16 -32768, i16 -32085, i16 -31403, i16 -30723, i16 -30043, i16 -29367, i16 -28693, i16 -28023, i16 -27356, i16 -26695, i16 -26038, i16 -25387, i16 -24742, i16 -24104, i16 -23472, i16 -22848, i16 -22232, i16 -21624, i16 -21025, i16 -20434, i16 -19853, i16 -19281, i16 -18719, i16 -18167, i16 -17625, i16 -17093, i16 -16572, i16 -16061, i16 -15561, i16 -15072, i16 -14594, i16 -14127, i16 -13671, i16 -13225, i16 -12791, i16 -12367, i16 -11955, i16 -11553, i16 -11162, i16 -10781, i16 -10411, i16 -10051, i16 -9702, i16 -9362, i16 -9033, i16 -8713, i16 -8403, i16 -8103, i16 -7812, i16 -7529, i16 -7256, i16 -6992, i16 -6736, i16 -6488, i16 -6248, i16 -6017, i16 -5793, i16 -5577, i16 -5368, i16 -5166, i16 -4971, i16 -4783, i16 -4601, i16 -4426, i16 -4257, i16 -4095, i16 -3937, i16 -3786, i16 -3640, i16 -3500, i16 -3364, i16 -3234, i16 -3108, i16 -2987, i16 -2870, i16 -2758, i16 -2650, i16 -2546, i16 -2446, i16 -2350, i16 -2257, i16 -2168, i16 -2082, i16 -2000, i16 -1921, i16 -1845, i16 -1771, i16 -1701, i16 -1633, i16 -1568, i16 -1506, i16 -1446, i16 -1388, i16 -1332, i16 -1279, i16 -1228, i16 -1179, i16 -1131, i16 -1086, i16 -1042, i16 -1000, i16 -960, i16 -922, i16 -884, i16 -849, i16 -815, i16 -782, i16 -750, i16 -720, i16 -691, i16 -663, i16 -636, i16 -610, i16 -586, i16 -562, i16 -539, i16 -517, i16 -497, i16 -476, i16 -457, i16 -439, i16 -421, i16 -404, i16 -387, i16 -372, i16 -357, i16 -342, i16 -328, i16 -315, i16 -302, i16 -290, i16 -278, i16 -267, i16 -256, i16 -245, i16 -235, i16 -226, i16 -217, i16 -208, i16 -199, i16 -191, i16 -184, i16 -176, i16 -169, i16 -162, i16 -155, i16 -149, i16 -143, i16 -137, i16 -132, i16 -126, i16 -121, i16 -116, i16 -111, i16 -107, i16 -103, i16 -98, i16 -94, i16 -91, i16 -87, i16 -83, i16 -80, i16 -77, i16 -74, i16 -71, i16 -68, i16 -65, i16 -62, i16 -60, i16 -57, i16 -55, i16 -53, i16 -51, i16 -48, i16 -47, i16 -45, i16 -43, i16 -41, i16 -39, i16 -38, i16 -36, i16 -35, i16 -33, i16 -32, i16 -31, i16 -29, i16 -28, i16 -27, i16 -26, i16 -25, i16 -24, i16 -23, i16 -22, i16 -21, i16 -20, i16 -19, i16 -19, i16 -18, i16 -17, i16 -16, i16 -16, i16 -15, i16 -14, i16 -14, i16 -13, i16 -13, i16 -12, i16 -12, i16 -11, i16 -11, i16 -10, i16 -10, i16 -10, i16 -9, i16 -9, i16 -8, i16 -8, i16 -8, i16 -7, i16 -7, i16 -7, i16 -7, i16 -6, i16 -6, i16 -6, i16 -6, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -4, i16 -4, i16 -4, i16 -4, i16 -4, i16 -4, i16 -3, i16 -3, i16 -3, i16 -3, i16 -3, i16 -3, i16 -3, i16 -3, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -1], align 16
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@.str.54 = private unnamed_addr constant [33 x i8] c"output->params.scale == 1. / 256\00", align 1
@.str.55 = private unnamed_addr constant [35 x i8] c"output->params.scale == 1. / 32768\00", align 1
@.str.56 = private unnamed_addr constant [31 x i8] c"output->params.zero_point == 0\00", align 1
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@.str.59 = private unnamed_addr constant [36 x i8] c"std::numeric_limits<uint8_t>::min()\00", align 1
@.str.60 = private unnamed_addr constant [35 x i8] c"std::numeric_limits<int8_t>::min()\00", align 1
@__const._ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode.op_params = private unnamed_addr constant { double, i32, i32, i32, i32, i32, i32, float, [4 x i8], float*, i16*, i16*, i8*, i8* } { double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*), i16* inttoptr (i64 -6148914691236517206 to i16*), i16* inttoptr (i64 -6148914691236517206 to i16*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 272) #18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %4, i8 0, i64 272, i1 false) #19
  ret i8* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations11SoftmaxInitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 3160) #18
  %5 = getelementptr inbounds i8, i8* %4, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 36, i1 false) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false) #19
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations11SoftmaxFreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations14LogSoftmaxInitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 1384) #18
  %5 = getelementptr inbounds i8, i8* %4, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %4, i8 0, i64 316, i1 false) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false) #19
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations9PreluInitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 292) #18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %4, i8 0, i64 288, i1 false) #19
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations14LogSoftmaxFreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations9PreluFreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations13HardSwishInitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #3 {
  %4 = tail call i8* @_Znwm(i64 20) #18
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations14GenericPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 253, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #19
  br label %59

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 254, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #19
  br label %59

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %52, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  %49 = tail call i8* @TfLiteTypeGetName(i32 %42) #19
  %50 = load i32, i32* %43, align 8
  %51 = tail call i8* @TfLiteTypeGetName(i32 %50) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 257, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %49, i8* %51) #19
  br label %59

52:                                               ; preds = %39
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %54 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %53, align 8
  %55 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %56 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %55, align 8
  %57 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %56) #19
  %58 = tail call i32 %54(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %40, %struct.TfLiteIntArray* %57) #19
  br label %59

59:                                               ; preds = %46, %52, %17, %8
  %60 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %46 ], [ %58, %52 ]
  ret i32 %60
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #5

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations8ReluInitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 280) #18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %4, i8 0, i64 280, i1 false) #19
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations8ReluFreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %4 = bitcast i8** %3 to %"struct.tflite::ops::builtin::activations::ReluOpData"**
  %5 = load %"struct.tflite::ops::builtin::activations::ReluOpData"*, %"struct.tflite::ops::builtin::activations::ReluOpData"** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %13 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %12, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %13(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %9, i32 1) #19
  br label %72

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 274, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %18, i32 1) #19
  br label %72

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %23, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %23 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %55, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  %52 = tail call i8* @TfLiteTypeGetName(i32 %45) #19
  %53 = load i32, i32* %46, align 8
  %54 = tail call i8* @TfLiteTypeGetName(i32 %53) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 277, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %52, i8* %54) #19
  br label %72

55:                                               ; preds = %42
  switch i32 %45, label %65 [
    i32 9, label %56
    i32 3, label %56
  ]

56:                                               ; preds = %55, %55
  %57 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 3, i32 0
  %58 = load float, float* %57, align 8
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 0
  %60 = load float, float* %59, align 8
  %61 = fdiv float %58, %60
  %62 = fpext float %61 to double
  %63 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::ReluOpData", %"struct.tflite::ops::builtin::activations::ReluOpData"* %5, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::ReluOpData", %"struct.tflite::ops::builtin::activations::ReluOpData"* %5, i64 0, i32 2
  tail call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %62, i32* %63, i32* %64) #19
  br label %65

65:                                               ; preds = %55, %56
  %66 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %67 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %66, align 8
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %69 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %68, align 8
  %70 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %69) #19
  %71 = tail call i32 %67(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %43, %struct.TfLiteIntArray* %70) #19
  br label %72

72:                                               ; preds = %49, %65, %20, %11
  %73 = phi i32 [ 1, %11 ], [ 1, %20 ], [ 1, %49 ], [ %71, %65 ]
  ret i32 %73
}

declare void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double, i32*, i32*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin11activations13LeakyReluInitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 288) #18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %4, i8 0, i64 288, i1 false) #19
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations13LeakyReluFreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11activations13HardSwishFreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #18
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6tflite3ops7builtin11activations31DownScaleInt32ToInt16MultiplierEiPs(i32, i16* nocapture) local_unnamed_addr #6 {
  %3 = icmp slt i32 %0, 2147450879
  %4 = add nsw i32 %0, 32768
  %5 = lshr i32 %4, 16
  %6 = trunc i32 %5 to i16
  %7 = select i1 %3, i16 %6, i16 32767
  store i16 %7, i16* %1, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations16HardSwishPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = tail call i32 @_ZN6tflite3ops7builtin11activations14GenericPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %9 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 1, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %15 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 %16
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi %struct.TfLiteTensor* [ %17, %13 ], [ null, %7 ]
  %20 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  switch i32 %21, label %79 [
    i32 3, label %22
    i32 9, label %22
  ]

22:                                               ; preds = %18, %18
  %23 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %24 = bitcast i8** %23 to %"struct.tflite::ops::builtin::activations::HardSwishData"**
  %25 = load %"struct.tflite::ops::builtin::activations::HardSwishData"*, %"struct.tflite::ops::builtin::activations::HardSwishData"** %24, align 8
  %26 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %22, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %22 ]
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = trunc i32 %39 to i16
  %41 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %25, i64 0, i32 0, i32 0
  store i16 %40, i16* %41, align 4
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = trunc i32 %43 to i16
  %45 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %25, i64 0, i32 0, i32 1
  store i16 %44, i16* %45, align 2
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %47 = load float, float* %46, align 8
  %48 = fmul float %47, 7.812500e-03
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 0
  %50 = load float, float* %49, align 8
  %51 = fdiv float %48, %50
  %52 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #19
  store i32 -1431655766, i32* %3, align 4
  %53 = fpext float %51 to double
  %54 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %25, i64 0, i32 0, i32 5
  call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %53, i32* nonnull %3, i32* %54) #19
  %55 = load i32, i32* %3, align 4
  %56 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %25, i64 0, i32 0, i32 4
  %57 = icmp slt i32 %55, 2147450879
  %58 = add nsw i32 %55, 32768
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i16
  %61 = select i1 %57, i16 %60, i16 32767
  store i16 %61, i16* %56, align 2
  %62 = load i32, i32* %54, align 4
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %64, label %76

64:                                               ; preds = %36
  %65 = fdiv float %48, 0x3F18000000000000
  %66 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #19
  store i32 -1431655766, i32* %4, align 4
  %67 = fpext float %65 to double
  %68 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %25, i64 0, i32 0, i32 3
  call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %67, i32* nonnull %4, i32* %68) #19
  %69 = load i32, i32* %4, align 4
  %70 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %25, i64 0, i32 0, i32 2
  %71 = icmp slt i32 %69, 2147450879
  %72 = add nsw i32 %69, 32768
  %73 = lshr i32 %72, 16
  %74 = trunc i32 %73 to i16
  %75 = select i1 %71, i16 %74, i16 32767
  store i16 %75, i16* %70, align 2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #19
  br label %79

76:                                               ; preds = %36
  %77 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %78 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %77, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %78(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 340, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #19
  br label %79

79:                                               ; preds = %18, %64, %76, %2
  %80 = phi i32 [ %5, %2 ], [ 1, %76 ], [ 0, %64 ], [ 0, %18 ]
  ret i32 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations16LeakyReluPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #19
  br label %84

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 355, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #19
  br label %84

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %52, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  %49 = tail call i8* @TfLiteTypeGetName(i32 %42) #19
  %50 = load i32, i32* %43, align 8
  %51 = tail call i8* @TfLiteTypeGetName(i32 %50) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 358, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %49, i8* %51) #19
  br label %84

52:                                               ; preds = %39
  %53 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %54 = bitcast i8** %53 to %"struct.tflite::ops::builtin::activations::LeakyReluOpData"**
  %55 = load %"struct.tflite::ops::builtin::activations::LeakyReluOpData"*, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"** %54, align 8
  switch i32 %42, label %77 [
    i32 3, label %56
    i32 9, label %56
    i32 7, label %56
  ]

56:                                               ; preds = %52, %52, %52
  %57 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %58 = bitcast i8** %57 to %struct.TfLiteLeakyReluParams**
  %59 = load %struct.TfLiteLeakyReluParams*, %struct.TfLiteLeakyReluParams** %58, align 8
  %60 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 3, i32 0
  %61 = load float, float* %60, align 8
  %62 = getelementptr inbounds %struct.TfLiteLeakyReluParams, %struct.TfLiteLeakyReluParams* %59, i64 0, i32 0
  %63 = load float, float* %62, align 4
  %64 = fmul float %61, %63
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 3, i32 0
  %66 = load float, float* %65, align 8
  %67 = fdiv float %64, %66
  %68 = fpext float %67 to double
  %69 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %55, i64 0, i32 1
  %70 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %55, i64 0, i32 2
  tail call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %68, i32* %69, i32* %70) #19
  %71 = load float, float* %60, align 8
  %72 = load float, float* %65, align 8
  %73 = fdiv float %71, %72
  %74 = fpext float %73 to double
  %75 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %55, i64 0, i32 3
  %76 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %55, i64 0, i32 4
  tail call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %74, i32* %75, i32* %76) #19
  br label %77

77:                                               ; preds = %52, %56
  %78 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %79 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %78, align 8
  %80 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %81 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %80, align 8
  %82 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %81) #19
  %83 = tail call i32 %79(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %40, %struct.TfLiteIntArray* %82) #19
  br label %84

84:                                               ; preds = %46, %77, %17, %8
  %85 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %46 ], [ %83, %77 ]
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = alloca %"class.std::__1::function", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %6 = bitcast i8** %5 to %struct.TfLiteSoftmaxParams**
  %7 = load %struct.TfLiteSoftmaxParams*, %struct.TfLiteSoftmaxParams** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %9 = bitcast i8** %8 to %"struct.tflite::ops::builtin::activations::SoftmaxOpData"**
  %10 = load %"struct.tflite::ops::builtin::activations::SoftmaxOpData"*, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %12 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %11, align 8
  %13 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %18 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %17, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %18(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 563, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %14, i32 1) #19
  br label %271

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %21 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %20, align 8
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %28, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %27 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %26, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %27(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 564, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %23, i32 1) #19
  br label %271

28:                                               ; preds = %19
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 1, i64 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %34 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %33, align 8
  %35 = sext i32 %30 to i64
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 %35
  br label %37

37:                                               ; preds = %28, %32
  %38 = phi %struct.TfLiteTensor* [ %36, %32 ], [ null, %28 ]
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 1, i64 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %44 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %43, align 8
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 %45
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi %struct.TfLiteTensor* [ %46, %42 ], [ null, %37 ]
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 7
  %52 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  br i1 %51, label %54, label %58

54:                                               ; preds = %47
  switch i32 %53, label %55 [
    i32 9, label %66
    i32 3, label %66
    i32 7, label %66
  ]

55:                                               ; preds = %54
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %57 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %56, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %57(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 570, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.12, i64 0, i64 0)) #19
  br label %271

58:                                               ; preds = %47
  %59 = icmp eq i32 %53, %50
  br i1 %59, label %66, label %60

60:                                               ; preds = %58
  %61 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %62 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %61, align 8
  %63 = tail call i8* @TfLiteTypeGetName(i32 %53) #19
  %64 = load i32, i32* %49, align 8
  %65 = tail call i8* @TfLiteTypeGetName(i32 %64) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %62(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 572, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %63, i8* %65) #19
  br label %271

66:                                               ; preds = %54, %54, %54, %58
  %67 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 2
  %68 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %67, align 8
  %69 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %68, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %75, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %74 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %73, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %74(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 575, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0)) #19
  br label %271

75:                                               ; preds = %66
  switch i32 %53, label %106 [
    i32 3, label %76
    i32 9, label %76
  ]

76:                                               ; preds = %75, %75
  %77 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 1, i64 0
  %78 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 8
  store float* %77, float** %78, align 8
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 3, i32 0
  %80 = load float, float* %79, align 8
  %81 = getelementptr inbounds %struct.TfLiteSoftmaxParams, %struct.TfLiteSoftmaxParams* %7, i64 0, i32 0
  %82 = load float, float* %81, align 4
  %83 = fmul float %80, %82
  br label %84

84:                                               ; preds = %84, %76
  %85 = phi i64 [ 0, %76 ], [ %94, %84 ]
  %86 = trunc i64 %85 to i32
  %87 = sitofp i32 %86 to float
  %88 = fmul float %83, %87
  %89 = fsub float -0.000000e+00, %88
  %90 = tail call float @expf(float %89) #19
  %91 = load float*, float** %78, align 8
  %92 = sub nuw nsw i64 255, %85
  %93 = getelementptr inbounds float, float* %91, i64 %92
  store float %90, float* %93, align 4
  %94 = add nuw nsw i64 %85, 1
  %95 = icmp eq i64 %94, 256
  br i1 %95, label %96, label %84

96:                                               ; preds = %84
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 3, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 6
  store i32 %98, i32* %99, align 4
  %100 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 3, i32 0
  %101 = bitcast float* %100 to i32*
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 7
  %104 = bitcast float* %103 to i32*
  store i32 %102, i32* %104, align 8
  %105 = load i32, i32* %52, align 8
  br label %106

106:                                              ; preds = %75, %96
  %107 = phi i32 [ %53, %75 ], [ %105, %96 ]
  %108 = icmp eq i32 %107, 7
  br i1 %108, label %109, label %265

109:                                              ; preds = %106
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 3, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %115 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %114, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %115(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 603, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %111, i32 0) #19
  br label %271

116:                                              ; preds = %109
  %117 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 2, i64 0
  %118 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 9
  store i16* %117, i16** %118, align 8
  %119 = bitcast %"class.std::__1::function"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %119) #19
  %120 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1, i32 0
  %121 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  store double (%"union.std::__1::__function::__policy_storage"*, double)* @"_ZNSt3__110__function16__policy_invokerIFddEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_0S2_EEEEdPKNS0_16__policy_storageEd", double (%"union.std::__1::__function::__policy_storage"*, double)** %120, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_0FddEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %121, align 8
  %122 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0
  br label %123

123:                                              ; preds = %123, %116
  %124 = phi double (%"union.std::__1::__function::__policy_storage"*, double)* [ @"_ZNSt3__110__function16__policy_invokerIFddEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_0S2_EEEEdPKNS0_16__policy_storageEd", %116 ], [ %164, %123 ]
  %125 = phi i64 [ 0, %116 ], [ %133, %123 ]
  %126 = trunc i64 %125 to i32
  %127 = sitofp i32 %126 to double
  %128 = fmul double %127, 0x3F94000000000000
  %129 = fadd double %128, -1.000000e+01
  %130 = call double %124(%"union.std::__1::__function::__policy_storage"* nonnull %122, double %129) #19
  %131 = fmul double %130, 3.276800e+04
  %132 = call double @llvm.round.f64(double %131) #19
  %133 = add nuw nsw i64 %125, 1
  %134 = trunc i64 %133 to i32
  %135 = sitofp i32 %134 to double
  %136 = fmul double %135, 0x3F94000000000000
  %137 = fadd double %136, -1.000000e+01
  %138 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %120, align 8
  %139 = call double %138(%"union.std::__1::__function::__policy_storage"* nonnull %122, double %137) #19
  %140 = fmul double %139, 3.276800e+04
  %141 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %120, align 8
  %142 = call double %141(%"union.std::__1::__function::__policy_storage"* nonnull %122, double %129) #19
  %143 = fmul double %142, 3.276800e+04
  %144 = call double @llvm.round.f64(double %143) #19
  %145 = fadd double %140, %144
  %146 = fmul double %145, 5.000000e-01
  %147 = call double @llvm.round.f64(double %146) #19
  %148 = fadd double %129, 0x3F84000000000000
  %149 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %120, align 8
  %150 = call double %149(%"union.std::__1::__function::__policy_storage"* nonnull %122, double %148) #19
  %151 = fmul double %150, 3.276800e+04
  %152 = call double @llvm.round.f64(double %151) #19
  %153 = fsub double %147, %152
  %154 = fmul double %153, 5.000000e-01
  %155 = call double @llvm.round.f64(double %154) #19
  %156 = fsub double %132, %155
  %157 = fcmp olt double %156, -3.276800e+04
  %158 = select i1 %157, double -3.276800e+04, double %156
  %159 = fcmp ogt double %158, 3.276700e+04
  %160 = select i1 %159, double 3.276700e+04, double %158
  %161 = fptosi double %160 to i16
  %162 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 2, i64 %125
  store i16 %161, i16* %162, align 2
  %163 = icmp eq i64 %133, 512
  %164 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %120, align 8
  br i1 %163, label %165, label %123

165:                                              ; preds = %123
  %166 = call double %164(%"union.std::__1::__function::__policy_storage"* nonnull %122, double 0.000000e+00) #19
  %167 = fmul double %166, 3.276800e+04
  %168 = call double @llvm.round.f64(double %167) #19
  %169 = fcmp olt double %168, -3.276800e+04
  %170 = select i1 %169, double -3.276800e+04, double %168
  %171 = fcmp ogt double %170, 3.276700e+04
  %172 = select i1 %171, double 3.276700e+04, double %170
  %173 = fptosi double %172 to i16
  %174 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 2, i64 512
  store i16 %173, i16* %174, align 2
  %175 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %121, align 8
  %176 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %175, i64 0, i32 1
  %177 = load void (i8*)*, void (i8*)** %176, align 8
  %178 = icmp eq void (i8*)* %177, null
  br i1 %178, label %182, label %179

179:                                              ; preds = %165
  %180 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  call void %177(i8* %181) #19
  br label %182

182:                                              ; preds = %165, %179
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %119) #19
  %183 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 3, i64 0
  %184 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 10
  store i16* %183, i16** %184, align 8
  %185 = bitcast %"class.std::__1::function"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %185) #19
  %186 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1, i32 0
  %187 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store double (%"union.std::__1::__function::__policy_storage"*, double)* @"_ZNSt3__110__function16__policy_invokerIFddEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_1S2_EEEEdPKNS0_16__policy_storageEd", double (%"union.std::__1::__function::__policy_storage"*, double)** %186, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_1FddEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0
  br label %189

189:                                              ; preds = %189, %182
  %190 = phi double (%"union.std::__1::__function::__policy_storage"*, double)* [ @"_ZNSt3__110__function16__policy_invokerIFddEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_1S2_EEEEdPKNS0_16__policy_storageEd", %182 ], [ %230, %189 ]
  %191 = phi i64 [ 0, %182 ], [ %199, %189 ]
  %192 = trunc i64 %191 to i32
  %193 = sitofp i32 %192 to double
  %194 = fmul double %193, 0x3F60000000000000
  %195 = fadd double %194, 0.000000e+00
  %196 = call double %190(%"union.std::__1::__function::__policy_storage"* nonnull %188, double %195) #19
  %197 = fmul double %196, 3.276800e+04
  %198 = call double @llvm.round.f64(double %197) #19
  %199 = add nuw nsw i64 %191, 1
  %200 = trunc i64 %199 to i32
  %201 = sitofp i32 %200 to double
  %202 = fmul double %201, 0x3F60000000000000
  %203 = fadd double %202, 0.000000e+00
  %204 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %186, align 8
  %205 = call double %204(%"union.std::__1::__function::__policy_storage"* nonnull %188, double %203) #19
  %206 = fmul double %205, 3.276800e+04
  %207 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %186, align 8
  %208 = call double %207(%"union.std::__1::__function::__policy_storage"* nonnull %188, double %195) #19
  %209 = fmul double %208, 3.276800e+04
  %210 = call double @llvm.round.f64(double %209) #19
  %211 = fadd double %206, %210
  %212 = fmul double %211, 5.000000e-01
  %213 = call double @llvm.round.f64(double %212) #19
  %214 = fadd double %195, 0x3F50000000000000
  %215 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %186, align 8
  %216 = call double %215(%"union.std::__1::__function::__policy_storage"* nonnull %188, double %214) #19
  %217 = fmul double %216, 3.276800e+04
  %218 = call double @llvm.round.f64(double %217) #19
  %219 = fsub double %213, %218
  %220 = fmul double %219, 5.000000e-01
  %221 = call double @llvm.round.f64(double %220) #19
  %222 = fsub double %198, %221
  %223 = fcmp olt double %222, -3.276800e+04
  %224 = select i1 %223, double -3.276800e+04, double %222
  %225 = fcmp ogt double %224, 3.276700e+04
  %226 = select i1 %225, double 3.276700e+04, double %224
  %227 = fptosi double %226 to i16
  %228 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 3, i64 %191
  store i16 %227, i16* %228, align 2
  %229 = icmp eq i64 %199, 512
  %230 = load double (%"union.std::__1::__function::__policy_storage"*, double)*, double (%"union.std::__1::__function::__policy_storage"*, double)** %186, align 8
  br i1 %229, label %231, label %189

231:                                              ; preds = %189
  %232 = call double %230(%"union.std::__1::__function::__policy_storage"* nonnull %188, double 1.000000e+00) #19
  %233 = fmul double %232, 3.276800e+04
  %234 = call double @llvm.round.f64(double %233) #19
  %235 = fcmp olt double %234, -3.276800e+04
  %236 = select i1 %235, double -3.276800e+04, double %234
  %237 = fcmp ogt double %236, 3.276700e+04
  %238 = select i1 %237, double 3.276700e+04, double %236
  %239 = fptosi double %238 to i16
  %240 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 3, i64 512
  store i16 %239, i16* %240, align 2
  %241 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %187, align 8
  %242 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %241, i64 0, i32 1
  %243 = load void (i8*)*, void (i8*)** %242, align 8
  %244 = icmp eq void (i8*)* %243, null
  br i1 %244, label %248, label %245

245:                                              ; preds = %231
  %246 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  call void %243(i8* %247) #19
  br label %248

248:                                              ; preds = %231, %245
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %185) #19
  %249 = load i32, i32* %110, align 4
  %250 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 6
  store i32 %249, i32* %250, align 4
  %251 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 3, i32 0
  %252 = bitcast float* %251 to i32*
  %253 = load i32, i32* %252, align 8
  %254 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 7
  %255 = bitcast float* %254 to i32*
  store i32 %253, i32* %255, align 8
  %256 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 3, i32 0
  %257 = load float, float* %256, align 8
  %258 = getelementptr inbounds %struct.TfLiteSoftmaxParams, %struct.TfLiteSoftmaxParams* %7, i64 0, i32 0
  %259 = load float, float* %258, align 4
  %260 = fmul float %257, %259
  %261 = fpext float %260 to double
  %262 = fdiv double %261, 0x3F24001400140014
  %263 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 1
  %264 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %10, i64 0, i32 0, i32 2
  call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %262, i32* %263, i32* %264) #19
  br label %265

265:                                              ; preds = %248, %106
  %266 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %267 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %266, align 8
  %268 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %67, align 8
  %269 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %268) #19
  %270 = call i32 %267(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %48, %struct.TfLiteIntArray* %269) #19
  br label %271

271:                                              ; preds = %55, %60, %72, %113, %265, %25, %16
  %272 = phi i32 [ 1, %16 ], [ 1, %25 ], [ 1, %113 ], [ %270, %265 ], [ 1, %72 ], [ 1, %55 ], [ 1, %60 ]
  ret i32 %272
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations17LogSoftmaxPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %4 = bitcast i8** %3 to %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"**
  %5 = load %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"*, %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %13 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %12, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %13(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 631, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %9, i32 1) #19
  br label %131

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 632, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %18, i32 1) #19
  br label %131

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %23, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %23 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %55, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  %52 = tail call i8* @TfLiteTypeGetName(i32 %45) #19
  %53 = load i32, i32* %46, align 8
  %54 = tail call i8* @TfLiteTypeGetName(i32 %53) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 635, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %52, i8* %54) #19
  br label %131

55:                                               ; preds = %42
  switch i32 %45, label %124 [
    i32 3, label %56
    i32 9, label %56
  ]

56:                                               ; preds = %55, %55
  %57 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 0
  %58 = load float, float* %57, align 8
  %59 = fcmp une float %58, 6.250000e-02
  br i1 %59, label %60, label %64

60:                                               ; preds = %56
  %61 = fpext float %58 to double
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %63 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %62, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %63(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 638, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), double %61, double 6.250000e-02) #19
  br label %131

64:                                               ; preds = %56
  %65 = icmp eq i32 %45, 3
  br i1 %65, label %66, label %98

66:                                               ; preds = %64
  %67 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 255
  br i1 %69, label %73, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %72 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %71, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %72(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 641, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i32 %68, i32 255) #19
  br label %131

73:                                               ; preds = %66
  %74 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 4, i64 0
  %75 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 3, i32 8
  store float* %74, float** %75, align 8
  %76 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 3, i32 0
  %77 = load float, float* %76, align 8
  br label %78

78:                                               ; preds = %78, %73
  %79 = phi i64 [ 0, %73 ], [ %88, %78 ]
  %80 = trunc i64 %79 to i32
  %81 = sitofp i32 %80 to float
  %82 = fmul float %77, %81
  %83 = fsub float -0.000000e+00, %82
  %84 = tail call float @expf(float %83) #19
  %85 = load float*, float** %75, align 8
  %86 = sub nuw nsw i64 255, %79
  %87 = getelementptr inbounds float, float* %85, i64 %86
  store float %84, float* %87, align 4
  %88 = add nuw nsw i64 %79, 1
  %89 = icmp eq i64 %88, 256
  br i1 %89, label %90, label %78

90:                                               ; preds = %78
  %91 = load i32, i32* %67, align 4
  %92 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 3, i32 6
  store i32 %91, i32* %92, align 4
  %93 = bitcast float* %57 to i32*
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 3, i32 7
  %96 = bitcast float* %95 to i32*
  store i32 %94, i32* %96, align 8
  %97 = load i32, i32* %44, align 8
  br label %98

98:                                               ; preds = %90, %64
  %99 = phi i32 [ %97, %90 ], [ %45, %64 ]
  %100 = icmp eq i32 %99, 9
  br i1 %100, label %101, label %124

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 127
  br i1 %104, label %108, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %107 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %106, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %107(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 649, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0), i32 %103, i32 127) #19
  br label %131

108:                                              ; preds = %101
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 3, i32 0
  %110 = load float, float* %109, align 8
  %111 = fpext float %110 to double
  %112 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 0, i32 0
  %113 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 0, i32 1
  %114 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 1
  %115 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 2
  tail call void @_ZN6tflite30PreprocessLogSoftmaxScalingExpEddiPiS0_S0_S0_(double 1.000000e+00, double %111, i32 5, i32* %112, i32* %113, i32* %114, i32* %115) #19
  %116 = load i32, i32* %115, align 4
  %117 = sub nsw i32 0, %116
  store i32 %117, i32* %115, align 4
  %118 = load i32, i32* %113, align 4
  %119 = tail call i32 @_ZN6tflite20CalculateInputRadiusEiii(i32 5, i32 %118, i32 31) #19
  %120 = sitofp i32 %119 to double
  %121 = fsub double -0.000000e+00, %120
  %122 = fptosi double %121 to i32
  %123 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %5, i64 0, i32 0, i32 3
  store i32 %122, i32* %123, align 4
  br label %124

124:                                              ; preds = %55, %98, %108
  %125 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %126 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %125, align 8
  %127 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %128 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %127, align 8
  %129 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %128) #19
  %130 = tail call i32 %126(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %43, %struct.TfLiteIntArray* %129) #19
  br label %131

131:                                              ; preds = %49, %60, %70, %105, %124, %20, %11
  %132 = phi i32 [ 1, %11 ], [ 1, %20 ], [ 1, %49 ], [ 1, %60 ], [ 1, %70 ], [ 1, %105 ], [ %130, %124 ]
  ret i32 %132
}

declare void @_ZN6tflite30PreprocessLogSoftmaxScalingExpEddiPiS0_S0_S0_(double, double, i32, i32*, i32*, i32*, i32*) local_unnamed_addr #5

declare i32 @_ZN6tflite20CalculateInputRadiusEiii(i32, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %struct.TfLiteIntArray*, align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %5 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %11 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %10, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %11(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 667, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0), i32 %7, i32 2) #19
  br label %105

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %14 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %13, align 8
  %15 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %20 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %19, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %20(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 668, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %16, i32 1) #19
  br label %105

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %27 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 %28
  br label %30

30:                                               ; preds = %21, %25
  %31 = phi %struct.TfLiteTensor* [ %29, %25 ], [ null, %21 ]
  %32 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 1, i64 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %37 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %36, align 8
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 %38
  br label %40

40:                                               ; preds = %30, %35
  %41 = phi %struct.TfLiteTensor* [ %39, %35 ], [ null, %30 ]
  %42 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %47 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %46, align 8
  %48 = sext i32 %43 to i64
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 %48
  br label %50

50:                                               ; preds = %40, %45
  %51 = phi %struct.TfLiteTensor* [ %49, %45 ], [ null, %40 ]
  %52 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %53 = bitcast i8** %52 to %"struct.tflite::ops::builtin::activations::PreluOpData"**
  %54 = load %"struct.tflite::ops::builtin::activations::PreluOpData"*, %"struct.tflite::ops::builtin::activations::PreluOpData"** %53, align 8
  %55 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %51, i64 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %66, label %60

60:                                               ; preds = %50
  %61 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %62 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %61, align 8
  %63 = tail call i8* @TfLiteTypeGetName(i32 %56) #19
  %64 = load i32, i32* %57, align 8
  %65 = tail call i8* @TfLiteTypeGetName(i32 %64) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %62(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 674, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0), i8* %63, i8* %65) #19
  br label %105

66:                                               ; preds = %50
  %67 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 0
  store i32 %56, i32* %67, align 8
  switch i32 %56, label %84 [
    i32 3, label %68
    i32 9, label %68
    i32 7, label %68
  ]

68:                                               ; preds = %66, %66, %66
  %69 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 0
  %70 = load float, float* %69, align 8
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 3, i32 0
  %72 = load float, float* %71, align 8
  %73 = fdiv float %70, %72
  %74 = fpext float %73 to double
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %51, i64 0, i32 3, i32 0
  %76 = load float, float* %75, align 8
  %77 = fmul float %70, %76
  %78 = fdiv float %77, %72
  %79 = fpext float %78 to double
  %80 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %54, i64 0, i32 1
  %81 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %54, i64 0, i32 2
  tail call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %74, i32* %80, i32* %81) #19
  %82 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %54, i64 0, i32 3
  %83 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %54, i64 0, i32 4
  tail call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %79, i32* %82, i32* %83) #19
  br label %84

84:                                               ; preds = %66, %68
  %85 = tail call zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor* %31, %struct.TfLiteTensor* %51) #19
  %86 = xor i1 %85, true
  %87 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %54, i64 0, i32 5
  %88 = zext i1 %86 to i8
  store i8 %88, i8* %87, align 4
  %89 = bitcast %struct.TfLiteIntArray** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #19
  store %struct.TfLiteIntArray* null, %struct.TfLiteIntArray** %3, align 8
  %90 = call i32 @_ZN6tflite26CalculateShapeForBroadcastEP13TfLiteContextPK12TfLiteTensorS4_PP14TfLiteIntArray(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %31, %struct.TfLiteTensor* %51, %struct.TfLiteIntArray** nonnull %3) #19
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %103

92:                                               ; preds = %84
  %93 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %94 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %93, align 8
  %95 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %96 = call i32 %94(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %41, %struct.TfLiteIntArray* %95) #19
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %103

98:                                               ; preds = %92
  %99 = call zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor* %31, %struct.TfLiteTensor* %41) #19
  br i1 %99, label %103, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %102 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %101, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %102(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 717, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0)) #19
  br label %103

103:                                              ; preds = %98, %92, %84, %100
  %104 = phi i32 [ 1, %100 ], [ %96, %92 ], [ %90, %84 ], [ 0, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #19
  br label %105

105:                                              ; preds = %60, %103, %18, %9
  %106 = phi i32 [ 1, %9 ], [ 1, %18 ], [ 1, %60 ], [ %104, %103 ]
  ret i32 %106
}

declare zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #5

declare i32 @_ZN6tflite26CalculateShapeForBroadcastEP13TfLiteContextPK12TfLiteTensorS4_PP14TfLiteIntArray(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteIntArray**) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations8ReluEvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #7 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %30 = bitcast i8** %29 to %"struct.tflite::ops::builtin::activations::ReluOpData"**
  %31 = load %"struct.tflite::ops::builtin::activations::ReluOpData"*, %"struct.tflite::ops::builtin::activations::ReluOpData"** %30, align 8
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  switch i32 %33, label %514 [
    i32 1, label %34
    i32 3, label %512
    i32 9, label %513
  ]

34:                                               ; preds = %27
  %35 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #19
  %36 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %38, align 8, !alias.scope !2
  br label %68

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %41 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %40, align 8, !noalias !2
  %42 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 4, !noalias !2
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %41, i64 0, i32 1, i64 0
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %43, i32* %45, align 8, !alias.scope !2
  %46 = icmp sgt i32 %43, 5
  br i1 %46, label %47, label %54

47:                                               ; preds = %39
  %48 = sext i32 %43 to i64
  %49 = shl nsw i64 %48, 2
  %50 = tail call i8* @_Znam(i64 %49) #18, !noalias !2
  %51 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %52 = bitcast i32** %51 to i8**
  store i8* %50, i8** %52, align 8, !alias.scope !2
  %53 = bitcast i8* %50 to i32*
  br label %59

54:                                               ; preds = %39
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %56 = bitcast %union.anon* %55 to i32*
  %57 = sext i32 %43 to i64
  %58 = shl nsw i64 %57, 2
  br label %59

59:                                               ; preds = %54, %47
  %60 = phi i64 [ %49, %47 ], [ %58, %54 ]
  %61 = phi i32* [ %53, %47 ], [ %56, %54 ]
  %62 = bitcast i32* %61 to i8*
  %63 = bitcast i32* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 %63, i64 %60, i1 false) #19
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %65 = bitcast %union.TfLitePtrUnion* %64 to float**
  %66 = load float*, float** %65, align 8
  %67 = bitcast float* %66 to i8*
  br label %68

68:                                               ; preds = %37, %59
  %69 = phi i32 [ %43, %59 ], [ 0, %37 ]
  %70 = phi i8* [ %67, %59 ], [ null, %37 ]
  %71 = phi float* [ %66, %59 ], [ null, %37 ]
  %72 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #19
  %73 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !5
  br label %213

76:                                               ; preds = %68
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %77, align 8, !noalias !5
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4, !noalias !5
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 0
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %80, i32* %82, align 8, !alias.scope !5
  %83 = icmp sgt i32 %80, 5
  br i1 %83, label %84, label %96

84:                                               ; preds = %76
  %85 = sext i32 %80 to i64
  %86 = shl nsw i64 %85, 2
  %87 = tail call i8* @_Znam(i64 %86) #18, !noalias !5
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = bitcast i32** %88 to i8**
  store i8* %87, i8** %89, align 8, !alias.scope !5
  %90 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %87, i8* align 4 %90, i64 %86, i1 false) #19
  %91 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %92 = bitcast %union.TfLitePtrUnion* %91 to float**
  %93 = load float*, float** %92, align 8
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %95 = load i32*, i32** %94, align 8, !noalias !8
  br label %108

96:                                               ; preds = %76
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %98 = sext i32 %80 to i64
  %99 = shl nsw i64 %98, 2
  %100 = bitcast %union.anon* %97 to i8*
  %101 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 4 %101, i64 %99, i1 false) #19
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %103 = bitcast %union.TfLitePtrUnion* %102 to float**
  %104 = load float*, float** %103, align 8
  %105 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %106 = bitcast %union.anon* %105 to i32*
  %107 = icmp sgt i32 %80, 0
  br i1 %107, label %108, label %213

108:                                              ; preds = %96, %84
  %109 = phi i1 [ true, %84 ], [ false, %96 ]
  %110 = phi float* [ %93, %84 ], [ %104, %96 ]
  %111 = phi i32* [ %95, %84 ], [ %106, %96 ]
  %112 = zext i32 %80 to i64
  %113 = icmp ult i32 %80, 8
  br i1 %113, label %199, label %114

114:                                              ; preds = %108
  %115 = and i64 %112, 4294967288
  %116 = add nsw i64 %115, -8
  %117 = lshr exact i64 %116, 3
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 3
  %120 = icmp ult i64 %116, 24
  br i1 %120, label %166, label %121

121:                                              ; preds = %114
  %122 = sub nsw i64 %118, %119
  br label %123

123:                                              ; preds = %123, %121
  %124 = phi i64 [ 0, %121 ], [ %163, %123 ]
  %125 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %121 ], [ %161, %123 ]
  %126 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %121 ], [ %162, %123 ]
  %127 = phi i64 [ %122, %121 ], [ %164, %123 ]
  %128 = getelementptr inbounds i32, i32* %111, i64 %124
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !noalias !8
  %131 = getelementptr inbounds i32, i32* %128, i64 4
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !noalias !8
  %134 = mul nsw <4 x i32> %130, %125
  %135 = mul nsw <4 x i32> %133, %126
  %136 = or i64 %124, 8
  %137 = getelementptr inbounds i32, i32* %111, i64 %136
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4, !noalias !8
  %140 = getelementptr inbounds i32, i32* %137, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !noalias !8
  %143 = mul nsw <4 x i32> %139, %134
  %144 = mul nsw <4 x i32> %142, %135
  %145 = or i64 %124, 16
  %146 = getelementptr inbounds i32, i32* %111, i64 %145
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 4, !noalias !8
  %149 = getelementptr inbounds i32, i32* %146, i64 4
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !noalias !8
  %152 = mul nsw <4 x i32> %148, %143
  %153 = mul nsw <4 x i32> %151, %144
  %154 = or i64 %124, 24
  %155 = getelementptr inbounds i32, i32* %111, i64 %154
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !noalias !8
  %158 = getelementptr inbounds i32, i32* %155, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4, !noalias !8
  %161 = mul nsw <4 x i32> %157, %152
  %162 = mul nsw <4 x i32> %160, %153
  %163 = add i64 %124, 32
  %164 = add i64 %127, -4
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %123, !llvm.loop !11

166:                                              ; preds = %123, %114
  %167 = phi <4 x i32> [ undef, %114 ], [ %161, %123 ]
  %168 = phi <4 x i32> [ undef, %114 ], [ %162, %123 ]
  %169 = phi i64 [ 0, %114 ], [ %163, %123 ]
  %170 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %114 ], [ %161, %123 ]
  %171 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %114 ], [ %162, %123 ]
  %172 = icmp eq i64 %119, 0
  br i1 %172, label %189, label %173

173:                                              ; preds = %166, %173
  %174 = phi i64 [ %186, %173 ], [ %169, %166 ]
  %175 = phi <4 x i32> [ %184, %173 ], [ %170, %166 ]
  %176 = phi <4 x i32> [ %185, %173 ], [ %171, %166 ]
  %177 = phi i64 [ %187, %173 ], [ %119, %166 ]
  %178 = getelementptr inbounds i32, i32* %111, i64 %174
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4, !noalias !8
  %181 = getelementptr inbounds i32, i32* %178, i64 4
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4, !noalias !8
  %184 = mul nsw <4 x i32> %180, %175
  %185 = mul nsw <4 x i32> %183, %176
  %186 = add i64 %174, 8
  %187 = add i64 %177, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %173, !llvm.loop !13

189:                                              ; preds = %173, %166
  %190 = phi <4 x i32> [ %167, %166 ], [ %184, %173 ]
  %191 = phi <4 x i32> [ %168, %166 ], [ %185, %173 ]
  %192 = mul <4 x i32> %191, %190
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %194 = mul <4 x i32> %192, %193
  %195 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %196 = mul <4 x i32> %194, %195
  %197 = extractelement <4 x i32> %196, i32 0
  %198 = icmp eq i64 %115, %112
  br i1 %198, label %210, label %199

199:                                              ; preds = %189, %108
  %200 = phi i64 [ 0, %108 ], [ %115, %189 ]
  %201 = phi i32 [ 1, %108 ], [ %197, %189 ]
  br label %202

202:                                              ; preds = %199, %202
  %203 = phi i64 [ %208, %202 ], [ %200, %199 ]
  %204 = phi i32 [ %207, %202 ], [ %201, %199 ]
  %205 = getelementptr inbounds i32, i32* %111, i64 %203
  %206 = load i32, i32* %205, align 4, !noalias !8
  %207 = mul nsw i32 %206, %204
  %208 = add nuw nsw i64 %203, 1
  %209 = icmp eq i64 %208, %112
  br i1 %209, label %210, label %202, !llvm.loop !15

210:                                              ; preds = %202, %189
  %211 = phi i32 [ %197, %189 ], [ %207, %202 ]
  %212 = sext i32 %211 to i64
  br label %213

213:                                              ; preds = %74, %210, %96
  %214 = phi i1 [ false, %96 ], [ %109, %210 ], [ false, %74 ]
  %215 = phi float* [ %104, %96 ], [ %110, %210 ], [ null, %74 ]
  %216 = phi i64 [ 1, %96 ], [ %212, %210 ], [ 1, %74 ]
  %217 = ptrtoint float* %215 to i64
  %218 = and i64 %217, 3
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %226

220:                                              ; preds = %213
  %221 = lshr i64 %217, 2
  %222 = sub nsw i64 0, %221
  %223 = and i64 %222, 3
  %224 = icmp slt i64 %223, %216
  %225 = select i1 %224, i64 %223, i64 %216
  br label %226

226:                                              ; preds = %220, %213
  %227 = phi i64 [ %225, %220 ], [ %216, %213 ]
  %228 = sub nsw i64 %216, %227
  %229 = sdiv i64 %228, 4
  %230 = shl nsw i64 %229, 2
  %231 = add nsw i64 %230, %227
  %232 = icmp sgt i64 %227, 0
  br i1 %232, label %233, label %353

233:                                              ; preds = %226
  %234 = icmp ult i64 %227, 8
  br i1 %234, label %306, label %235

235:                                              ; preds = %233
  %236 = getelementptr float, float* %215, i64 %227
  %237 = bitcast float* %236 to i8*
  %238 = getelementptr float, float* %71, i64 %227
  %239 = icmp ult float* %215, %238
  %240 = icmp ult i8* %70, %237
  %241 = and i1 %239, %240
  br i1 %241, label %306, label %242

242:                                              ; preds = %235
  %243 = and i64 %227, -8
  %244 = add nsw i64 %243, -8
  %245 = lshr exact i64 %244, 3
  %246 = add nuw nsw i64 %245, 1
  %247 = and i64 %246, 1
  %248 = icmp eq i64 %244, 0
  br i1 %248, label %286, label %249

249:                                              ; preds = %242
  %250 = sub nuw nsw i64 %246, %247
  br label %251

251:                                              ; preds = %251, %249
  %252 = phi i64 [ 0, %249 ], [ %283, %251 ]
  %253 = phi i64 [ %250, %249 ], [ %284, %251 ]
  %254 = getelementptr inbounds float, float* %215, i64 %252
  %255 = getelementptr inbounds float, float* %71, i64 %252
  %256 = bitcast float* %255 to <4 x float>*
  %257 = load <4 x float>, <4 x float>* %256, align 4, !alias.scope !17
  %258 = getelementptr inbounds float, float* %255, i64 4
  %259 = bitcast float* %258 to <4 x float>*
  %260 = load <4 x float>, <4 x float>* %259, align 4, !alias.scope !17
  %261 = fcmp olt <4 x float> %257, zeroinitializer
  %262 = fcmp olt <4 x float> %260, zeroinitializer
  %263 = select <4 x i1> %261, <4 x float> zeroinitializer, <4 x float> %257
  %264 = select <4 x i1> %262, <4 x float> zeroinitializer, <4 x float> %260
  %265 = bitcast float* %254 to <4 x float>*
  store <4 x float> %263, <4 x float>* %265, align 4, !alias.scope !20, !noalias !17
  %266 = getelementptr inbounds float, float* %254, i64 4
  %267 = bitcast float* %266 to <4 x float>*
  store <4 x float> %264, <4 x float>* %267, align 4, !alias.scope !20, !noalias !17
  %268 = or i64 %252, 8
  %269 = getelementptr inbounds float, float* %215, i64 %268
  %270 = getelementptr inbounds float, float* %71, i64 %268
  %271 = bitcast float* %270 to <4 x float>*
  %272 = load <4 x float>, <4 x float>* %271, align 4, !alias.scope !17
  %273 = getelementptr inbounds float, float* %270, i64 4
  %274 = bitcast float* %273 to <4 x float>*
  %275 = load <4 x float>, <4 x float>* %274, align 4, !alias.scope !17
  %276 = fcmp olt <4 x float> %272, zeroinitializer
  %277 = fcmp olt <4 x float> %275, zeroinitializer
  %278 = select <4 x i1> %276, <4 x float> zeroinitializer, <4 x float> %272
  %279 = select <4 x i1> %277, <4 x float> zeroinitializer, <4 x float> %275
  %280 = bitcast float* %269 to <4 x float>*
  store <4 x float> %278, <4 x float>* %280, align 4, !alias.scope !20, !noalias !17
  %281 = getelementptr inbounds float, float* %269, i64 4
  %282 = bitcast float* %281 to <4 x float>*
  store <4 x float> %279, <4 x float>* %282, align 4, !alias.scope !20, !noalias !17
  %283 = add i64 %252, 16
  %284 = add i64 %253, -2
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %251, !llvm.loop !22

286:                                              ; preds = %251, %242
  %287 = phi i64 [ 0, %242 ], [ %283, %251 ]
  %288 = icmp eq i64 %247, 0
  br i1 %288, label %304, label %289

289:                                              ; preds = %286
  %290 = getelementptr inbounds float, float* %215, i64 %287
  %291 = getelementptr inbounds float, float* %71, i64 %287
  %292 = bitcast float* %291 to <4 x float>*
  %293 = load <4 x float>, <4 x float>* %292, align 4, !alias.scope !17
  %294 = getelementptr inbounds float, float* %291, i64 4
  %295 = bitcast float* %294 to <4 x float>*
  %296 = load <4 x float>, <4 x float>* %295, align 4, !alias.scope !17
  %297 = fcmp olt <4 x float> %293, zeroinitializer
  %298 = fcmp olt <4 x float> %296, zeroinitializer
  %299 = select <4 x i1> %297, <4 x float> zeroinitializer, <4 x float> %293
  %300 = select <4 x i1> %298, <4 x float> zeroinitializer, <4 x float> %296
  %301 = bitcast float* %290 to <4 x float>*
  store <4 x float> %299, <4 x float>* %301, align 4, !alias.scope !20, !noalias !17
  %302 = getelementptr inbounds float, float* %290, i64 4
  %303 = bitcast float* %302 to <4 x float>*
  store <4 x float> %300, <4 x float>* %303, align 4, !alias.scope !20, !noalias !17
  br label %304

304:                                              ; preds = %286, %289
  %305 = icmp eq i64 %227, %243
  br i1 %305, label %353, label %306

306:                                              ; preds = %304, %235, %233
  %307 = phi i64 [ 0, %235 ], [ 0, %233 ], [ %243, %304 ]
  %308 = xor i64 %307, -1
  %309 = add i64 %227, %308
  %310 = and i64 %227, 3
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %323, label %312

312:                                              ; preds = %306, %312
  %313 = phi i64 [ %320, %312 ], [ %307, %306 ]
  %314 = phi i64 [ %321, %312 ], [ %310, %306 ]
  %315 = getelementptr inbounds float, float* %215, i64 %313
  %316 = getelementptr inbounds float, float* %71, i64 %313
  %317 = load float, float* %316, align 4
  %318 = fcmp olt float %317, 0.000000e+00
  %319 = select i1 %318, float 0.000000e+00, float %317
  store float %319, float* %315, align 4
  %320 = add nuw nsw i64 %313, 1
  %321 = add i64 %314, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %312, !llvm.loop !23

323:                                              ; preds = %312, %306
  %324 = phi i64 [ %307, %306 ], [ %320, %312 ]
  %325 = icmp ult i64 %309, 3
  br i1 %325, label %353, label %326

326:                                              ; preds = %323, %326
  %327 = phi i64 [ %351, %326 ], [ %324, %323 ]
  %328 = getelementptr inbounds float, float* %215, i64 %327
  %329 = getelementptr inbounds float, float* %71, i64 %327
  %330 = load float, float* %329, align 4
  %331 = fcmp olt float %330, 0.000000e+00
  %332 = select i1 %331, float 0.000000e+00, float %330
  store float %332, float* %328, align 4
  %333 = add nuw nsw i64 %327, 1
  %334 = getelementptr inbounds float, float* %215, i64 %333
  %335 = getelementptr inbounds float, float* %71, i64 %333
  %336 = load float, float* %335, align 4
  %337 = fcmp olt float %336, 0.000000e+00
  %338 = select i1 %337, float 0.000000e+00, float %336
  store float %338, float* %334, align 4
  %339 = add nuw nsw i64 %327, 2
  %340 = getelementptr inbounds float, float* %215, i64 %339
  %341 = getelementptr inbounds float, float* %71, i64 %339
  %342 = load float, float* %341, align 4
  %343 = fcmp olt float %342, 0.000000e+00
  %344 = select i1 %343, float 0.000000e+00, float %342
  store float %344, float* %340, align 4
  %345 = add nuw nsw i64 %327, 3
  %346 = getelementptr inbounds float, float* %215, i64 %345
  %347 = getelementptr inbounds float, float* %71, i64 %345
  %348 = load float, float* %347, align 4
  %349 = fcmp olt float %348, 0.000000e+00
  %350 = select i1 %349, float 0.000000e+00, float %348
  store float %350, float* %346, align 4
  %351 = add nuw nsw i64 %327, 4
  %352 = icmp eq i64 %351, %227
  br i1 %352, label %353, label %326, !llvm.loop !24

353:                                              ; preds = %323, %326, %304, %226
  %354 = icmp sgt i64 %228, 3
  br i1 %354, label %486, label %355

355:                                              ; preds = %486, %353
  %356 = icmp slt i64 %231, %216
  br i1 %356, label %357, label %496

357:                                              ; preds = %355
  %358 = sub nsw i64 %216, %227
  %359 = sub i64 %358, %230
  %360 = icmp ult i64 %359, 8
  br i1 %360, label %438, label %361

361:                                              ; preds = %357
  %362 = add i64 %227, %230
  %363 = getelementptr float, float* %215, i64 %362
  %364 = getelementptr float, float* %215, i64 %216
  %365 = getelementptr float, float* %71, i64 %362
  %366 = getelementptr float, float* %71, i64 %216
  %367 = icmp ult float* %363, %366
  %368 = icmp ult float* %365, %364
  %369 = and i1 %367, %368
  br i1 %369, label %438, label %370

370:                                              ; preds = %361
  %371 = and i64 %359, -8
  %372 = add i64 %231, %371
  %373 = add i64 %371, -8
  %374 = lshr exact i64 %373, 3
  %375 = add nuw nsw i64 %374, 1
  %376 = and i64 %375, 1
  %377 = icmp eq i64 %373, 0
  br i1 %377, label %417, label %378

378:                                              ; preds = %370
  %379 = sub nuw nsw i64 %375, %376
  br label %380

380:                                              ; preds = %380, %378
  %381 = phi i64 [ 0, %378 ], [ %414, %380 ]
  %382 = phi i64 [ %379, %378 ], [ %415, %380 ]
  %383 = add i64 %231, %381
  %384 = getelementptr inbounds float, float* %215, i64 %383
  %385 = getelementptr inbounds float, float* %71, i64 %383
  %386 = bitcast float* %385 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 4, !alias.scope !25
  %388 = getelementptr inbounds float, float* %385, i64 4
  %389 = bitcast float* %388 to <4 x float>*
  %390 = load <4 x float>, <4 x float>* %389, align 4, !alias.scope !25
  %391 = fcmp olt <4 x float> %387, zeroinitializer
  %392 = fcmp olt <4 x float> %390, zeroinitializer
  %393 = select <4 x i1> %391, <4 x float> zeroinitializer, <4 x float> %387
  %394 = select <4 x i1> %392, <4 x float> zeroinitializer, <4 x float> %390
  %395 = bitcast float* %384 to <4 x float>*
  store <4 x float> %393, <4 x float>* %395, align 4, !alias.scope !28, !noalias !25
  %396 = getelementptr inbounds float, float* %384, i64 4
  %397 = bitcast float* %396 to <4 x float>*
  store <4 x float> %394, <4 x float>* %397, align 4, !alias.scope !28, !noalias !25
  %398 = or i64 %381, 8
  %399 = add i64 %231, %398
  %400 = getelementptr inbounds float, float* %215, i64 %399
  %401 = getelementptr inbounds float, float* %71, i64 %399
  %402 = bitcast float* %401 to <4 x float>*
  %403 = load <4 x float>, <4 x float>* %402, align 4, !alias.scope !25
  %404 = getelementptr inbounds float, float* %401, i64 4
  %405 = bitcast float* %404 to <4 x float>*
  %406 = load <4 x float>, <4 x float>* %405, align 4, !alias.scope !25
  %407 = fcmp olt <4 x float> %403, zeroinitializer
  %408 = fcmp olt <4 x float> %406, zeroinitializer
  %409 = select <4 x i1> %407, <4 x float> zeroinitializer, <4 x float> %403
  %410 = select <4 x i1> %408, <4 x float> zeroinitializer, <4 x float> %406
  %411 = bitcast float* %400 to <4 x float>*
  store <4 x float> %409, <4 x float>* %411, align 4, !alias.scope !28, !noalias !25
  %412 = getelementptr inbounds float, float* %400, i64 4
  %413 = bitcast float* %412 to <4 x float>*
  store <4 x float> %410, <4 x float>* %413, align 4, !alias.scope !28, !noalias !25
  %414 = add i64 %381, 16
  %415 = add i64 %382, -2
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %380, !llvm.loop !30

417:                                              ; preds = %380, %370
  %418 = phi i64 [ 0, %370 ], [ %414, %380 ]
  %419 = icmp eq i64 %376, 0
  br i1 %419, label %436, label %420

420:                                              ; preds = %417
  %421 = add i64 %231, %418
  %422 = getelementptr inbounds float, float* %215, i64 %421
  %423 = getelementptr inbounds float, float* %71, i64 %421
  %424 = bitcast float* %423 to <4 x float>*
  %425 = load <4 x float>, <4 x float>* %424, align 4, !alias.scope !25
  %426 = getelementptr inbounds float, float* %423, i64 4
  %427 = bitcast float* %426 to <4 x float>*
  %428 = load <4 x float>, <4 x float>* %427, align 4, !alias.scope !25
  %429 = fcmp olt <4 x float> %425, zeroinitializer
  %430 = fcmp olt <4 x float> %428, zeroinitializer
  %431 = select <4 x i1> %429, <4 x float> zeroinitializer, <4 x float> %425
  %432 = select <4 x i1> %430, <4 x float> zeroinitializer, <4 x float> %428
  %433 = bitcast float* %422 to <4 x float>*
  store <4 x float> %431, <4 x float>* %433, align 4, !alias.scope !28, !noalias !25
  %434 = getelementptr inbounds float, float* %422, i64 4
  %435 = bitcast float* %434 to <4 x float>*
  store <4 x float> %432, <4 x float>* %435, align 4, !alias.scope !28, !noalias !25
  br label %436

436:                                              ; preds = %417, %420
  %437 = icmp eq i64 %359, %371
  br i1 %437, label %496, label %438

438:                                              ; preds = %436, %361, %357
  %439 = phi i64 [ %231, %361 ], [ %231, %357 ], [ %372, %436 ]
  %440 = sub i64 %216, %439
  %441 = xor i64 %439, -1
  %442 = add i64 %216, %441
  %443 = and i64 %440, 3
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %456, label %445

445:                                              ; preds = %438, %445
  %446 = phi i64 [ %453, %445 ], [ %439, %438 ]
  %447 = phi i64 [ %454, %445 ], [ %443, %438 ]
  %448 = getelementptr inbounds float, float* %215, i64 %446
  %449 = getelementptr inbounds float, float* %71, i64 %446
  %450 = load float, float* %449, align 4
  %451 = fcmp olt float %450, 0.000000e+00
  %452 = select i1 %451, float 0.000000e+00, float %450
  store float %452, float* %448, align 4
  %453 = add nsw i64 %446, 1
  %454 = add i64 %447, -1
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %445, !llvm.loop !31

456:                                              ; preds = %445, %438
  %457 = phi i64 [ %439, %438 ], [ %453, %445 ]
  %458 = icmp ult i64 %442, 3
  br i1 %458, label %496, label %459

459:                                              ; preds = %456, %459
  %460 = phi i64 [ %484, %459 ], [ %457, %456 ]
  %461 = getelementptr inbounds float, float* %215, i64 %460
  %462 = getelementptr inbounds float, float* %71, i64 %460
  %463 = load float, float* %462, align 4
  %464 = fcmp olt float %463, 0.000000e+00
  %465 = select i1 %464, float 0.000000e+00, float %463
  store float %465, float* %461, align 4
  %466 = add nsw i64 %460, 1
  %467 = getelementptr inbounds float, float* %215, i64 %466
  %468 = getelementptr inbounds float, float* %71, i64 %466
  %469 = load float, float* %468, align 4
  %470 = fcmp olt float %469, 0.000000e+00
  %471 = select i1 %470, float 0.000000e+00, float %469
  store float %471, float* %467, align 4
  %472 = add nsw i64 %460, 2
  %473 = getelementptr inbounds float, float* %215, i64 %472
  %474 = getelementptr inbounds float, float* %71, i64 %472
  %475 = load float, float* %474, align 4
  %476 = fcmp olt float %475, 0.000000e+00
  %477 = select i1 %476, float 0.000000e+00, float %475
  store float %477, float* %473, align 4
  %478 = add nsw i64 %460, 3
  %479 = getelementptr inbounds float, float* %215, i64 %478
  %480 = getelementptr inbounds float, float* %71, i64 %478
  %481 = load float, float* %480, align 4
  %482 = fcmp olt float %481, 0.000000e+00
  %483 = select i1 %482, float 0.000000e+00, float %481
  store float %483, float* %479, align 4
  %484 = add nsw i64 %460, 4
  %485 = icmp eq i64 %484, %216
  br i1 %485, label %496, label %459, !llvm.loop !32

486:                                              ; preds = %353, %486
  %487 = phi i64 [ %494, %486 ], [ %227, %353 ]
  %488 = getelementptr inbounds float, float* %215, i64 %487
  %489 = getelementptr inbounds float, float* %71, i64 %487
  %490 = bitcast float* %489 to <4 x float>*
  %491 = load <4 x float>, <4 x float>* %490, align 1
  %492 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %491, <4 x float> zeroinitializer) #14, !srcloc !33
  %493 = bitcast float* %488 to <4 x float>*
  store <4 x float> %492, <4 x float>* %493, align 16
  %494 = add nsw i64 %487, 4
  %495 = icmp slt i64 %494, %231
  br i1 %495, label %486, label %355

496:                                              ; preds = %456, %459, %436, %355
  br i1 %214, label %497, label %503

497:                                              ; preds = %496
  %498 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %499 = load i32*, i32** %498, align 8
  %500 = icmp eq i32* %499, null
  br i1 %500, label %503, label %501

501:                                              ; preds = %497
  %502 = bitcast i32* %499 to i8*
  tail call void @_ZdaPv(i8* %502) #18
  br label %503

503:                                              ; preds = %496, %497, %501
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #19
  %504 = icmp sgt i32 %69, 5
  br i1 %504, label %505, label %511

505:                                              ; preds = %503
  %506 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %507 = load i32*, i32** %506, align 8
  %508 = icmp eq i32* %507, null
  br i1 %508, label %511, label %509

509:                                              ; preds = %505
  %510 = bitcast i32* %507 to i8*
  tail call void @_ZdaPv(i8* %510) #18
  br label %511

511:                                              ; preds = %503, %505, %509
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #19
  br label %518

512:                                              ; preds = %27
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIhEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float 0.000000e+00, float 0x7FF0000000000000, %struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::ReluOpData"* %31)
  br label %518

513:                                              ; preds = %27
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIaEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float 0.000000e+00, float 0x7FF0000000000000, %struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::ReluOpData"* %31)
  br label %518

514:                                              ; preds = %27
  %515 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %516 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %515, align 8
  %517 = tail call i8* @TfLiteTypeGetName(i32 %33) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %516(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.23, i64 0, i64 0), i8* %517) #19
  br label %518

518:                                              ; preds = %511, %512, %513, %514
  %519 = phi i32 [ 1, %514 ], [ 0, %513 ], [ 0, %512 ], [ 0, %511 ]
  ret i32 %519
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIhEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float, float, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"struct.tflite::ops::builtin::activations::ReluOpData"* nocapture readonly) unnamed_addr #0 {
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 3, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 3, i32 0
  %11 = load float, float* %10, align 8
  %12 = fdiv float %0, %11
  %13 = tail call float @llvm.round.f32(float %12)
  %14 = fptosi float %13 to i32
  %15 = add nsw i32 %9, %14
  %16 = icmp sgt i32 %15, 0
  %17 = select i1 %16, i32 %15, i32 0
  %18 = fcmp oeq float %1, 0x7FF0000000000000
  br i1 %18, label %26, label %19

19:                                               ; preds = %5
  %20 = fdiv float %1, %11
  %21 = tail call float @llvm.round.f32(float %20)
  %22 = fptosi float %21 to i32
  %23 = add nsw i32 %9, %22
  %24 = icmp slt i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  br label %26

26:                                               ; preds = %5, %19
  %27 = phi i32 [ %25, %19 ], [ 255, %5 ]
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::ReluOpData", %"struct.tflite::ops::builtin::activations::ReluOpData"* %4, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::ReluOpData", %"struct.tflite::ops::builtin::activations::ReluOpData"* %4, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #19
  %35 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %37, align 8, !alias.scope !34
  br label %66

38:                                               ; preds = %26
  %39 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %40 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %39, align 8, !noalias !34
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %40, i64 0, i32 0
  %42 = load i32, i32* %41, align 4, !noalias !34
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %40, i64 0, i32 1, i64 0
  %44 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %42, i32* %44, align 8, !alias.scope !34
  %45 = icmp sgt i32 %42, 5
  br i1 %45, label %46, label %53

46:                                               ; preds = %38
  %47 = sext i32 %42 to i64
  %48 = shl nsw i64 %47, 2
  %49 = tail call i8* @_Znam(i64 %48) #18, !noalias !34
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %51 = bitcast i32** %50 to i8**
  store i8* %49, i8** %51, align 8, !alias.scope !34
  %52 = bitcast i8* %49 to i32*
  br label %58

53:                                               ; preds = %38
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %55 = bitcast %union.anon* %54 to i32*
  %56 = sext i32 %42 to i64
  %57 = shl nsw i64 %56, 2
  br label %58

58:                                               ; preds = %53, %46
  %59 = phi i64 [ %48, %46 ], [ %57, %53 ]
  %60 = phi i32* [ %52, %46 ], [ %55, %53 ]
  %61 = bitcast i32* %60 to i8*
  %62 = bitcast i32* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64 %59, i1 false) #19
  %63 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %64 = bitcast %union.TfLitePtrUnion* %63 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %36, %58
  %67 = phi i32 [ %42, %58 ], [ 0, %36 ]
  %68 = phi i8* [ %65, %58 ], [ null, %36 ]
  %69 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #19
  %70 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %70, label %71, label %73

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %72, align 8, !alias.scope !37
  br label %101

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %75 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %74, align 8, !noalias !37
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %75, i64 0, i32 0
  %77 = load i32, i32* %76, align 4, !noalias !37
  %78 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %75, i64 0, i32 1, i64 0
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %77, i32* %79, align 8, !alias.scope !37
  %80 = icmp sgt i32 %77, 5
  br i1 %80, label %81, label %88

81:                                               ; preds = %73
  %82 = sext i32 %77 to i64
  %83 = shl nsw i64 %82, 2
  %84 = tail call i8* @_Znam(i64 %83) #18, !noalias !37
  %85 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %86 = bitcast i32** %85 to i8**
  store i8* %84, i8** %86, align 8, !alias.scope !37
  %87 = bitcast i8* %84 to i32*
  br label %93

88:                                               ; preds = %73
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %90 = bitcast %union.anon* %89 to i32*
  %91 = sext i32 %77 to i64
  %92 = shl nsw i64 %91, 2
  br label %93

93:                                               ; preds = %88, %81
  %94 = phi i64 [ %83, %81 ], [ %92, %88 ]
  %95 = phi i32* [ %87, %81 ], [ %90, %88 ]
  %96 = bitcast i32* %95 to i8*
  %97 = bitcast i32* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %96, i8* align 4 %97, i64 %94, i1 false) #19
  %98 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %99 = bitcast %union.TfLitePtrUnion* %98 to i8**
  %100 = load i8*, i8** %99, align 8
  br label %101

101:                                              ; preds = %71, %93
  %102 = phi i32 [ %77, %93 ], [ 0, %71 ]
  %103 = phi i8* [ %100, %93 ], [ null, %71 ]
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %105 = icmp sgt i32 %67, 5
  br i1 %105, label %106, label %109

106:                                              ; preds = %101
  %107 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %108 = load i32*, i32** %107, align 8
  br label %112

109:                                              ; preds = %101
  %110 = bitcast %union.anon* %104 to i32*
  %111 = icmp sgt i32 %67, 0
  br i1 %111, label %112, label %215

112:                                              ; preds = %109, %106
  %113 = phi i32* [ %108, %106 ], [ %110, %109 ]
  %114 = zext i32 %67 to i64
  %115 = icmp ult i32 %67, 8
  br i1 %115, label %201, label %116

116:                                              ; preds = %112
  %117 = and i64 %114, 4294967288
  %118 = add nsw i64 %117, -8
  %119 = lshr exact i64 %118, 3
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 24
  br i1 %122, label %168, label %123

123:                                              ; preds = %116
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %165, %125 ]
  %127 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %123 ], [ %163, %125 ]
  %128 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %123 ], [ %164, %125 ]
  %129 = phi i64 [ %124, %123 ], [ %166, %125 ]
  %130 = getelementptr inbounds i32, i32* %113, i64 %126
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = getelementptr inbounds i32, i32* %130, i64 4
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = mul nsw <4 x i32> %132, %127
  %137 = mul nsw <4 x i32> %135, %128
  %138 = or i64 %126, 8
  %139 = getelementptr inbounds i32, i32* %113, i64 %138
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = getelementptr inbounds i32, i32* %139, i64 4
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = mul nsw <4 x i32> %141, %136
  %146 = mul nsw <4 x i32> %144, %137
  %147 = or i64 %126, 16
  %148 = getelementptr inbounds i32, i32* %113, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, %145
  %155 = mul nsw <4 x i32> %153, %146
  %156 = or i64 %126, 24
  %157 = getelementptr inbounds i32, i32* %113, i64 %156
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = add i64 %126, 32
  %166 = add i64 %129, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %125, !llvm.loop !40

168:                                              ; preds = %125, %116
  %169 = phi <4 x i32> [ undef, %116 ], [ %163, %125 ]
  %170 = phi <4 x i32> [ undef, %116 ], [ %164, %125 ]
  %171 = phi i64 [ 0, %116 ], [ %165, %125 ]
  %172 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %116 ], [ %163, %125 ]
  %173 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %116 ], [ %164, %125 ]
  %174 = icmp eq i64 %121, 0
  br i1 %174, label %191, label %175

175:                                              ; preds = %168, %175
  %176 = phi i64 [ %188, %175 ], [ %171, %168 ]
  %177 = phi <4 x i32> [ %186, %175 ], [ %172, %168 ]
  %178 = phi <4 x i32> [ %187, %175 ], [ %173, %168 ]
  %179 = phi i64 [ %189, %175 ], [ %121, %168 ]
  %180 = getelementptr inbounds i32, i32* %113, i64 %176
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4
  %183 = getelementptr inbounds i32, i32* %180, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = mul nsw <4 x i32> %182, %177
  %187 = mul nsw <4 x i32> %185, %178
  %188 = add i64 %176, 8
  %189 = add i64 %179, -1
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %175, !llvm.loop !41

191:                                              ; preds = %175, %168
  %192 = phi <4 x i32> [ %169, %168 ], [ %186, %175 ]
  %193 = phi <4 x i32> [ %170, %168 ], [ %187, %175 ]
  %194 = mul <4 x i32> %193, %192
  %195 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %196 = mul <4 x i32> %194, %195
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %198 = mul <4 x i32> %196, %197
  %199 = extractelement <4 x i32> %198, i32 0
  %200 = icmp eq i64 %117, %114
  br i1 %200, label %212, label %201

201:                                              ; preds = %191, %112
  %202 = phi i64 [ 0, %112 ], [ %117, %191 ]
  %203 = phi i32 [ 1, %112 ], [ %199, %191 ]
  br label %204

204:                                              ; preds = %201, %204
  %205 = phi i64 [ %210, %204 ], [ %202, %201 ]
  %206 = phi i32 [ %209, %204 ], [ %203, %201 ]
  %207 = getelementptr inbounds i32, i32* %113, i64 %205
  %208 = load i32, i32* %207, align 4
  %209 = mul nsw i32 %208, %206
  %210 = add nuw nsw i64 %205, 1
  %211 = icmp eq i64 %210, %114
  br i1 %211, label %212, label %204, !llvm.loop !42

212:                                              ; preds = %204, %191
  %213 = phi i32 [ %199, %191 ], [ %209, %204 ]
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %215, label %267

215:                                              ; preds = %212, %109
  %216 = phi i32 [ %213, %212 ], [ 1, %109 ]
  %217 = zext i32 %216 to i64
  %218 = icmp sgt i32 %33, 0
  %219 = sub nsw i32 0, %33
  %220 = select i1 %218, i32 0, i32 %219
  %221 = shl i32 1, %33
  %222 = select i1 %218, i32 %221, i32 1
  %223 = sext i32 %31 to i64
  %224 = icmp eq i32 %31, -2147483648
  %225 = zext i32 %220 to i64
  %226 = shl nsw i64 -1, %225
  %227 = trunc i64 %226 to i32
  %228 = xor i32 %227, -1
  %229 = ashr i32 %228, 1
  br label %230

230:                                              ; preds = %249, %215
  %231 = phi i64 [ 0, %215 ], [ %265, %249 ]
  %232 = getelementptr inbounds i8, i8* %68, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = sub nsw i32 %234, %29
  %236 = mul nsw i32 %235, %222
  %237 = icmp eq i32 %236, %31
  br i1 %237, label %240, label %238

238:                                              ; preds = %230
  %239 = sext i32 %236 to i64
  br label %241

240:                                              ; preds = %230
  br i1 %224, label %249, label %241

241:                                              ; preds = %240, %238
  %242 = phi i64 [ %239, %238 ], [ %223, %240 ]
  %243 = mul nsw i64 %242, %223
  %244 = icmp sgt i64 %243, -1
  %245 = select i1 %244, i64 1073741824, i64 -1073741823
  %246 = add nsw i64 %245, %243
  %247 = sdiv i64 %246, 2147483648
  %248 = trunc i64 %247 to i32
  br label %249

249:                                              ; preds = %241, %240
  %250 = phi i32 [ %248, %241 ], [ 2147483647, %240 ]
  %251 = and i32 %250, %228
  %252 = lshr i32 %250, 31
  %253 = add nsw i32 %252, %229
  %254 = ashr i32 %250, %220
  %255 = icmp sgt i32 %251, %253
  %256 = zext i1 %255 to i32
  %257 = add i32 %254, %9
  %258 = add i32 %257, %256
  %259 = icmp slt i32 %17, %258
  %260 = select i1 %259, i32 %258, i32 %17
  %261 = icmp slt i32 %260, %27
  %262 = select i1 %261, i32 %260, i32 %27
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %103, i64 %231
  store i8 %263, i8* %264, align 1
  %265 = add nuw nsw i64 %231, 1
  %266 = icmp eq i64 %265, %217
  br i1 %266, label %267, label %230

267:                                              ; preds = %249, %212
  %268 = icmp sgt i32 %102, 5
  br i1 %268, label %269, label %275

269:                                              ; preds = %267
  %270 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %271 = load i32*, i32** %270, align 8
  %272 = icmp eq i32* %271, null
  br i1 %272, label %275, label %273

273:                                              ; preds = %269
  %274 = bitcast i32* %271 to i8*
  tail call void @_ZdaPv(i8* %274) #18
  br label %275

275:                                              ; preds = %267, %269, %273
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #19
  br i1 %105, label %276, label %282

276:                                              ; preds = %275
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %278 = load i32*, i32** %277, align 8
  %279 = icmp eq i32* %278, null
  br i1 %279, label %282, label %280

280:                                              ; preds = %276
  %281 = bitcast i32* %278 to i8*
  tail call void @_ZdaPv(i8* %281) #18
  br label %282

282:                                              ; preds = %275, %276, %280
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIaEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float, float, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"struct.tflite::ops::builtin::activations::ReluOpData"* nocapture readonly) unnamed_addr #0 {
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 3, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 3, i32 0
  %11 = load float, float* %10, align 8
  %12 = fdiv float %0, %11
  %13 = tail call float @llvm.round.f32(float %12)
  %14 = fptosi float %13 to i32
  %15 = add nsw i32 %9, %14
  %16 = icmp sgt i32 %15, -128
  %17 = select i1 %16, i32 %15, i32 -128
  %18 = fcmp oeq float %1, 0x7FF0000000000000
  br i1 %18, label %26, label %19

19:                                               ; preds = %5
  %20 = fdiv float %1, %11
  %21 = tail call float @llvm.round.f32(float %20)
  %22 = fptosi float %21 to i32
  %23 = add nsw i32 %9, %22
  %24 = icmp slt i32 %23, 127
  %25 = select i1 %24, i32 %23, i32 127
  br label %26

26:                                               ; preds = %5, %19
  %27 = phi i32 [ %25, %19 ], [ 127, %5 ]
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::ReluOpData", %"struct.tflite::ops::builtin::activations::ReluOpData"* %4, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::ReluOpData", %"struct.tflite::ops::builtin::activations::ReluOpData"* %4, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #19
  %35 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %37, align 8, !alias.scope !43
  br label %66

38:                                               ; preds = %26
  %39 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %40 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %39, align 8, !noalias !43
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %40, i64 0, i32 0
  %42 = load i32, i32* %41, align 4, !noalias !43
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %40, i64 0, i32 1, i64 0
  %44 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %42, i32* %44, align 8, !alias.scope !43
  %45 = icmp sgt i32 %42, 5
  br i1 %45, label %46, label %53

46:                                               ; preds = %38
  %47 = sext i32 %42 to i64
  %48 = shl nsw i64 %47, 2
  %49 = tail call i8* @_Znam(i64 %48) #18, !noalias !43
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %51 = bitcast i32** %50 to i8**
  store i8* %49, i8** %51, align 8, !alias.scope !43
  %52 = bitcast i8* %49 to i32*
  br label %58

53:                                               ; preds = %38
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %55 = bitcast %union.anon* %54 to i32*
  %56 = sext i32 %42 to i64
  %57 = shl nsw i64 %56, 2
  br label %58

58:                                               ; preds = %53, %46
  %59 = phi i64 [ %48, %46 ], [ %57, %53 ]
  %60 = phi i32* [ %52, %46 ], [ %55, %53 ]
  %61 = bitcast i32* %60 to i8*
  %62 = bitcast i32* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64 %59, i1 false) #19
  %63 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %64 = bitcast %union.TfLitePtrUnion* %63 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %36, %58
  %67 = phi i32 [ %42, %58 ], [ 0, %36 ]
  %68 = phi i8* [ %65, %58 ], [ null, %36 ]
  %69 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #19
  %70 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %70, label %71, label %73

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %72, align 8, !alias.scope !46
  br label %101

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %75 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %74, align 8, !noalias !46
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %75, i64 0, i32 0
  %77 = load i32, i32* %76, align 4, !noalias !46
  %78 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %75, i64 0, i32 1, i64 0
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %77, i32* %79, align 8, !alias.scope !46
  %80 = icmp sgt i32 %77, 5
  br i1 %80, label %81, label %88

81:                                               ; preds = %73
  %82 = sext i32 %77 to i64
  %83 = shl nsw i64 %82, 2
  %84 = tail call i8* @_Znam(i64 %83) #18, !noalias !46
  %85 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %86 = bitcast i32** %85 to i8**
  store i8* %84, i8** %86, align 8, !alias.scope !46
  %87 = bitcast i8* %84 to i32*
  br label %93

88:                                               ; preds = %73
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %90 = bitcast %union.anon* %89 to i32*
  %91 = sext i32 %77 to i64
  %92 = shl nsw i64 %91, 2
  br label %93

93:                                               ; preds = %88, %81
  %94 = phi i64 [ %83, %81 ], [ %92, %88 ]
  %95 = phi i32* [ %87, %81 ], [ %90, %88 ]
  %96 = bitcast i32* %95 to i8*
  %97 = bitcast i32* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %96, i8* align 4 %97, i64 %94, i1 false) #19
  %98 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %99 = bitcast %union.TfLitePtrUnion* %98 to i8**
  %100 = load i8*, i8** %99, align 8
  br label %101

101:                                              ; preds = %71, %93
  %102 = phi i32 [ %77, %93 ], [ 0, %71 ]
  %103 = phi i8* [ %100, %93 ], [ null, %71 ]
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %105 = icmp sgt i32 %67, 5
  br i1 %105, label %106, label %109

106:                                              ; preds = %101
  %107 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %108 = load i32*, i32** %107, align 8
  br label %112

109:                                              ; preds = %101
  %110 = bitcast %union.anon* %104 to i32*
  %111 = icmp sgt i32 %67, 0
  br i1 %111, label %112, label %215

112:                                              ; preds = %109, %106
  %113 = phi i32* [ %108, %106 ], [ %110, %109 ]
  %114 = zext i32 %67 to i64
  %115 = icmp ult i32 %67, 8
  br i1 %115, label %201, label %116

116:                                              ; preds = %112
  %117 = and i64 %114, 4294967288
  %118 = add nsw i64 %117, -8
  %119 = lshr exact i64 %118, 3
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 24
  br i1 %122, label %168, label %123

123:                                              ; preds = %116
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %165, %125 ]
  %127 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %123 ], [ %163, %125 ]
  %128 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %123 ], [ %164, %125 ]
  %129 = phi i64 [ %124, %123 ], [ %166, %125 ]
  %130 = getelementptr inbounds i32, i32* %113, i64 %126
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = getelementptr inbounds i32, i32* %130, i64 4
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = mul nsw <4 x i32> %132, %127
  %137 = mul nsw <4 x i32> %135, %128
  %138 = or i64 %126, 8
  %139 = getelementptr inbounds i32, i32* %113, i64 %138
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = getelementptr inbounds i32, i32* %139, i64 4
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = mul nsw <4 x i32> %141, %136
  %146 = mul nsw <4 x i32> %144, %137
  %147 = or i64 %126, 16
  %148 = getelementptr inbounds i32, i32* %113, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, %145
  %155 = mul nsw <4 x i32> %153, %146
  %156 = or i64 %126, 24
  %157 = getelementptr inbounds i32, i32* %113, i64 %156
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = add i64 %126, 32
  %166 = add i64 %129, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %125, !llvm.loop !49

168:                                              ; preds = %125, %116
  %169 = phi <4 x i32> [ undef, %116 ], [ %163, %125 ]
  %170 = phi <4 x i32> [ undef, %116 ], [ %164, %125 ]
  %171 = phi i64 [ 0, %116 ], [ %165, %125 ]
  %172 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %116 ], [ %163, %125 ]
  %173 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %116 ], [ %164, %125 ]
  %174 = icmp eq i64 %121, 0
  br i1 %174, label %191, label %175

175:                                              ; preds = %168, %175
  %176 = phi i64 [ %188, %175 ], [ %171, %168 ]
  %177 = phi <4 x i32> [ %186, %175 ], [ %172, %168 ]
  %178 = phi <4 x i32> [ %187, %175 ], [ %173, %168 ]
  %179 = phi i64 [ %189, %175 ], [ %121, %168 ]
  %180 = getelementptr inbounds i32, i32* %113, i64 %176
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4
  %183 = getelementptr inbounds i32, i32* %180, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = mul nsw <4 x i32> %182, %177
  %187 = mul nsw <4 x i32> %185, %178
  %188 = add i64 %176, 8
  %189 = add i64 %179, -1
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %175, !llvm.loop !50

191:                                              ; preds = %175, %168
  %192 = phi <4 x i32> [ %169, %168 ], [ %186, %175 ]
  %193 = phi <4 x i32> [ %170, %168 ], [ %187, %175 ]
  %194 = mul <4 x i32> %193, %192
  %195 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %196 = mul <4 x i32> %194, %195
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %198 = mul <4 x i32> %196, %197
  %199 = extractelement <4 x i32> %198, i32 0
  %200 = icmp eq i64 %117, %114
  br i1 %200, label %212, label %201

201:                                              ; preds = %191, %112
  %202 = phi i64 [ 0, %112 ], [ %117, %191 ]
  %203 = phi i32 [ 1, %112 ], [ %199, %191 ]
  br label %204

204:                                              ; preds = %201, %204
  %205 = phi i64 [ %210, %204 ], [ %202, %201 ]
  %206 = phi i32 [ %209, %204 ], [ %203, %201 ]
  %207 = getelementptr inbounds i32, i32* %113, i64 %205
  %208 = load i32, i32* %207, align 4
  %209 = mul nsw i32 %208, %206
  %210 = add nuw nsw i64 %205, 1
  %211 = icmp eq i64 %210, %114
  br i1 %211, label %212, label %204, !llvm.loop !51

212:                                              ; preds = %204, %191
  %213 = phi i32 [ %199, %191 ], [ %209, %204 ]
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %215, label %267

215:                                              ; preds = %212, %109
  %216 = phi i32 [ %213, %212 ], [ 1, %109 ]
  %217 = zext i32 %216 to i64
  %218 = icmp sgt i32 %33, 0
  %219 = sub nsw i32 0, %33
  %220 = select i1 %218, i32 0, i32 %219
  %221 = shl i32 1, %33
  %222 = select i1 %218, i32 %221, i32 1
  %223 = sext i32 %31 to i64
  %224 = icmp eq i32 %31, -2147483648
  %225 = zext i32 %220 to i64
  %226 = shl nsw i64 -1, %225
  %227 = trunc i64 %226 to i32
  %228 = xor i32 %227, -1
  %229 = ashr i32 %228, 1
  br label %230

230:                                              ; preds = %249, %215
  %231 = phi i64 [ 0, %215 ], [ %265, %249 ]
  %232 = getelementptr inbounds i8, i8* %68, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = sext i8 %233 to i32
  %235 = sub nsw i32 %234, %29
  %236 = mul nsw i32 %235, %222
  %237 = icmp eq i32 %236, %31
  br i1 %237, label %240, label %238

238:                                              ; preds = %230
  %239 = sext i32 %236 to i64
  br label %241

240:                                              ; preds = %230
  br i1 %224, label %249, label %241

241:                                              ; preds = %240, %238
  %242 = phi i64 [ %239, %238 ], [ %223, %240 ]
  %243 = mul nsw i64 %242, %223
  %244 = icmp sgt i64 %243, -1
  %245 = select i1 %244, i64 1073741824, i64 -1073741823
  %246 = add nsw i64 %245, %243
  %247 = sdiv i64 %246, 2147483648
  %248 = trunc i64 %247 to i32
  br label %249

249:                                              ; preds = %241, %240
  %250 = phi i32 [ %248, %241 ], [ 2147483647, %240 ]
  %251 = and i32 %250, %228
  %252 = lshr i32 %250, 31
  %253 = add nsw i32 %252, %229
  %254 = ashr i32 %250, %220
  %255 = icmp sgt i32 %251, %253
  %256 = zext i1 %255 to i32
  %257 = add i32 %254, %9
  %258 = add i32 %257, %256
  %259 = icmp slt i32 %17, %258
  %260 = select i1 %259, i32 %258, i32 %17
  %261 = icmp slt i32 %260, %27
  %262 = select i1 %261, i32 %260, i32 %27
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %103, i64 %231
  store i8 %263, i8* %264, align 1
  %265 = add nuw nsw i64 %231, 1
  %266 = icmp eq i64 %265, %217
  br i1 %266, label %267, label %230

267:                                              ; preds = %249, %212
  %268 = icmp sgt i32 %102, 5
  br i1 %268, label %269, label %275

269:                                              ; preds = %267
  %270 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %271 = load i32*, i32** %270, align 8
  %272 = icmp eq i32* %271, null
  br i1 %272, label %275, label %273

273:                                              ; preds = %269
  %274 = bitcast i32* %271 to i8*
  tail call void @_ZdaPv(i8* %274) #18
  br label %275

275:                                              ; preds = %267, %269, %273
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #19
  br i1 %105, label %276, label %282

276:                                              ; preds = %275
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %278 = load i32*, i32** %277, align 8
  %279 = icmp eq i32* %278, null
  br i1 %279, label %282, label %280

280:                                              ; preds = %276
  %281 = bitcast i32* %278 to i8*
  tail call void @_ZdaPv(i8* %281) #18
  br label %282

282:                                              ; preds = %275, %276, %280
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations9Relu1EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %30 = bitcast i8** %29 to %"struct.tflite::ops::builtin::activations::ReluOpData"**
  %31 = load %"struct.tflite::ops::builtin::activations::ReluOpData"*, %"struct.tflite::ops::builtin::activations::ReluOpData"** %30, align 8
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  switch i32 %33, label %363 [
    i32 1, label %34
    i32 3, label %361
    i32 9, label %362
  ]

34:                                               ; preds = %27
  %35 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #19
  %36 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %38, align 8, !alias.scope !52
  br label %68

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %41 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %40, align 8, !noalias !52
  %42 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 4, !noalias !52
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %41, i64 0, i32 1, i64 0
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %43, i32* %45, align 8, !alias.scope !52
  %46 = icmp sgt i32 %43, 5
  br i1 %46, label %47, label %54

47:                                               ; preds = %39
  %48 = sext i32 %43 to i64
  %49 = shl nsw i64 %48, 2
  %50 = tail call i8* @_Znam(i64 %49) #18, !noalias !52
  %51 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %52 = bitcast i32** %51 to i8**
  store i8* %50, i8** %52, align 8, !alias.scope !52
  %53 = bitcast i8* %50 to i32*
  br label %59

54:                                               ; preds = %39
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %56 = bitcast %union.anon* %55 to i32*
  %57 = sext i32 %43 to i64
  %58 = shl nsw i64 %57, 2
  br label %59

59:                                               ; preds = %54, %47
  %60 = phi i64 [ %49, %47 ], [ %58, %54 ]
  %61 = phi i32* [ %53, %47 ], [ %56, %54 ]
  %62 = bitcast i32* %61 to i8*
  %63 = bitcast i32* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 %63, i64 %60, i1 false) #19
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %65 = bitcast %union.TfLitePtrUnion* %64 to float**
  %66 = load float*, float** %65, align 8
  %67 = bitcast float* %66 to i8*
  br label %68

68:                                               ; preds = %37, %59
  %69 = phi i32 [ %43, %59 ], [ 0, %37 ]
  %70 = phi i8* [ %67, %59 ], [ null, %37 ]
  %71 = phi float* [ %66, %59 ], [ null, %37 ]
  %72 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #19
  %73 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !55
  br label %105

76:                                               ; preds = %68
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %77, align 8, !noalias !55
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4, !noalias !55
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 0
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %80, i32* %82, align 8, !alias.scope !55
  %83 = icmp sgt i32 %80, 5
  br i1 %83, label %84, label %91

84:                                               ; preds = %76
  %85 = sext i32 %80 to i64
  %86 = shl nsw i64 %85, 2
  %87 = tail call i8* @_Znam(i64 %86) #18, !noalias !55
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = bitcast i32** %88 to i8**
  store i8* %87, i8** %89, align 8, !alias.scope !55
  %90 = bitcast i8* %87 to i32*
  br label %96

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %93 = bitcast %union.anon* %92 to i32*
  %94 = sext i32 %80 to i64
  %95 = shl nsw i64 %94, 2
  br label %96

96:                                               ; preds = %91, %84
  %97 = phi i64 [ %86, %84 ], [ %95, %91 ]
  %98 = phi i32* [ %90, %84 ], [ %93, %91 ]
  %99 = bitcast i32* %98 to i8*
  %100 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %100, i64 %97, i1 false) #19
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %102 = bitcast %union.TfLitePtrUnion* %101 to float**
  %103 = load float*, float** %102, align 8
  %104 = bitcast float* %103 to i8*
  br label %105

105:                                              ; preds = %74, %96
  %106 = phi i32 [ %80, %96 ], [ 0, %74 ]
  %107 = phi i8* [ %104, %96 ], [ null, %74 ]
  %108 = phi float* [ %103, %96 ], [ null, %74 ]
  %109 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %110 = icmp sgt i32 %69, 5
  br i1 %110, label %111, label %114

111:                                              ; preds = %105
  %112 = getelementptr inbounds %union.anon, %union.anon* %109, i64 0, i32 0
  %113 = load i32*, i32** %112, align 8
  br label %117

114:                                              ; preds = %105
  %115 = bitcast %union.anon* %109 to i32*
  %116 = icmp sgt i32 %69, 0
  br i1 %116, label %117, label %220

117:                                              ; preds = %114, %111
  %118 = phi i32* [ %113, %111 ], [ %115, %114 ]
  %119 = zext i32 %69 to i64
  %120 = icmp ult i32 %69, 8
  br i1 %120, label %206, label %121

121:                                              ; preds = %117
  %122 = and i64 %119, 4294967288
  %123 = add nsw i64 %122, -8
  %124 = lshr exact i64 %123, 3
  %125 = add nuw nsw i64 %124, 1
  %126 = and i64 %125, 3
  %127 = icmp ult i64 %123, 24
  br i1 %127, label %173, label %128

128:                                              ; preds = %121
  %129 = sub nsw i64 %125, %126
  br label %130

130:                                              ; preds = %130, %128
  %131 = phi i64 [ 0, %128 ], [ %170, %130 ]
  %132 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %168, %130 ]
  %133 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %169, %130 ]
  %134 = phi i64 [ %129, %128 ], [ %171, %130 ]
  %135 = getelementptr inbounds i32, i32* %118, i64 %131
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = mul nsw <4 x i32> %137, %132
  %142 = mul nsw <4 x i32> %140, %133
  %143 = or i64 %131, 8
  %144 = getelementptr inbounds i32, i32* %118, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = or i64 %131, 16
  %153 = getelementptr inbounds i32, i32* %118, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4
  %156 = getelementptr inbounds i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = mul nsw <4 x i32> %155, %150
  %160 = mul nsw <4 x i32> %158, %151
  %161 = or i64 %131, 24
  %162 = getelementptr inbounds i32, i32* %118, i64 %161
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = getelementptr inbounds i32, i32* %162, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = mul nsw <4 x i32> %164, %159
  %169 = mul nsw <4 x i32> %167, %160
  %170 = add i64 %131, 32
  %171 = add i64 %134, -4
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %130, !llvm.loop !58

173:                                              ; preds = %130, %121
  %174 = phi <4 x i32> [ undef, %121 ], [ %168, %130 ]
  %175 = phi <4 x i32> [ undef, %121 ], [ %169, %130 ]
  %176 = phi i64 [ 0, %121 ], [ %170, %130 ]
  %177 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %121 ], [ %168, %130 ]
  %178 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %121 ], [ %169, %130 ]
  %179 = icmp eq i64 %126, 0
  br i1 %179, label %196, label %180

180:                                              ; preds = %173, %180
  %181 = phi i64 [ %193, %180 ], [ %176, %173 ]
  %182 = phi <4 x i32> [ %191, %180 ], [ %177, %173 ]
  %183 = phi <4 x i32> [ %192, %180 ], [ %178, %173 ]
  %184 = phi i64 [ %194, %180 ], [ %126, %173 ]
  %185 = getelementptr inbounds i32, i32* %118, i64 %181
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4
  %188 = getelementptr inbounds i32, i32* %185, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4
  %191 = mul nsw <4 x i32> %187, %182
  %192 = mul nsw <4 x i32> %190, %183
  %193 = add i64 %181, 8
  %194 = add i64 %184, -1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %180, !llvm.loop !59

196:                                              ; preds = %180, %173
  %197 = phi <4 x i32> [ %174, %173 ], [ %191, %180 ]
  %198 = phi <4 x i32> [ %175, %173 ], [ %192, %180 ]
  %199 = mul <4 x i32> %198, %197
  %200 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %201 = mul <4 x i32> %199, %200
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %203 = mul <4 x i32> %201, %202
  %204 = extractelement <4 x i32> %203, i32 0
  %205 = icmp eq i64 %122, %119
  br i1 %205, label %217, label %206

206:                                              ; preds = %196, %117
  %207 = phi i64 [ 0, %117 ], [ %122, %196 ]
  %208 = phi i32 [ 1, %117 ], [ %204, %196 ]
  br label %209

209:                                              ; preds = %206, %209
  %210 = phi i64 [ %215, %209 ], [ %207, %206 ]
  %211 = phi i32 [ %214, %209 ], [ %208, %206 ]
  %212 = getelementptr inbounds i32, i32* %118, i64 %210
  %213 = load i32, i32* %212, align 4
  %214 = mul nsw i32 %213, %211
  %215 = add nuw nsw i64 %210, 1
  %216 = icmp eq i64 %215, %119
  br i1 %216, label %217, label %209, !llvm.loop !60

217:                                              ; preds = %209, %196
  %218 = phi i32 [ %204, %196 ], [ %214, %209 ]
  %219 = icmp sgt i32 %218, 0
  br i1 %219, label %220, label %345

220:                                              ; preds = %217, %114
  %221 = phi i32 [ %218, %217 ], [ 1, %114 ]
  %222 = zext i32 %221 to i64
  %223 = icmp ult i32 %221, 8
  br i1 %223, label %308, label %224

224:                                              ; preds = %220
  %225 = getelementptr float, float* %108, i64 %222
  %226 = bitcast float* %225 to i8*
  %227 = getelementptr float, float* %71, i64 %222
  %228 = bitcast float* %227 to i8*
  %229 = icmp ult i8* %107, %228
  %230 = icmp ult i8* %70, %226
  %231 = and i1 %229, %230
  br i1 %231, label %308, label %232

232:                                              ; preds = %224
  %233 = and i64 %222, 4294967288
  %234 = add nsw i64 %233, -8
  %235 = lshr exact i64 %234, 3
  %236 = add nuw nsw i64 %235, 1
  %237 = and i64 %236, 1
  %238 = icmp eq i64 %234, 0
  br i1 %238, label %284, label %239

239:                                              ; preds = %232
  %240 = sub nuw nsw i64 %236, %237
  br label %241

241:                                              ; preds = %241, %239
  %242 = phi i64 [ 0, %239 ], [ %281, %241 ]
  %243 = phi i64 [ %240, %239 ], [ %282, %241 ]
  %244 = getelementptr inbounds float, float* %71, i64 %242
  %245 = bitcast float* %244 to <4 x float>*
  %246 = load <4 x float>, <4 x float>* %245, align 4, !alias.scope !61
  %247 = getelementptr inbounds float, float* %244, i64 4
  %248 = bitcast float* %247 to <4 x float>*
  %249 = load <4 x float>, <4 x float>* %248, align 4, !alias.scope !61
  %250 = fcmp ogt <4 x float> %246, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %251 = fcmp ogt <4 x float> %249, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %252 = fcmp olt <4 x float> %246, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %253 = fcmp olt <4 x float> %249, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %254 = select <4 x i1> %252, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %246
  %255 = select <4 x i1> %253, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %249
  %256 = select <4 x i1> %250, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %254
  %257 = select <4 x i1> %251, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %255
  %258 = getelementptr inbounds float, float* %108, i64 %242
  %259 = bitcast float* %258 to <4 x float>*
  store <4 x float> %256, <4 x float>* %259, align 4, !alias.scope !64, !noalias !61
  %260 = getelementptr inbounds float, float* %258, i64 4
  %261 = bitcast float* %260 to <4 x float>*
  store <4 x float> %257, <4 x float>* %261, align 4, !alias.scope !64, !noalias !61
  %262 = or i64 %242, 8
  %263 = getelementptr inbounds float, float* %71, i64 %262
  %264 = bitcast float* %263 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4, !alias.scope !61
  %266 = getelementptr inbounds float, float* %263, i64 4
  %267 = bitcast float* %266 to <4 x float>*
  %268 = load <4 x float>, <4 x float>* %267, align 4, !alias.scope !61
  %269 = fcmp ogt <4 x float> %265, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %270 = fcmp ogt <4 x float> %268, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %271 = fcmp olt <4 x float> %265, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %272 = fcmp olt <4 x float> %268, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %273 = select <4 x i1> %271, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %265
  %274 = select <4 x i1> %272, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %268
  %275 = select <4 x i1> %269, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %273
  %276 = select <4 x i1> %270, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %274
  %277 = getelementptr inbounds float, float* %108, i64 %262
  %278 = bitcast float* %277 to <4 x float>*
  store <4 x float> %275, <4 x float>* %278, align 4, !alias.scope !64, !noalias !61
  %279 = getelementptr inbounds float, float* %277, i64 4
  %280 = bitcast float* %279 to <4 x float>*
  store <4 x float> %276, <4 x float>* %280, align 4, !alias.scope !64, !noalias !61
  %281 = add i64 %242, 16
  %282 = add i64 %243, -2
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %241, !llvm.loop !66

284:                                              ; preds = %241, %232
  %285 = phi i64 [ 0, %232 ], [ %281, %241 ]
  %286 = icmp eq i64 %237, 0
  br i1 %286, label %306, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds float, float* %71, i64 %285
  %289 = bitcast float* %288 to <4 x float>*
  %290 = load <4 x float>, <4 x float>* %289, align 4, !alias.scope !61
  %291 = getelementptr inbounds float, float* %288, i64 4
  %292 = bitcast float* %291 to <4 x float>*
  %293 = load <4 x float>, <4 x float>* %292, align 4, !alias.scope !61
  %294 = fcmp ogt <4 x float> %290, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %295 = fcmp ogt <4 x float> %293, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %296 = fcmp olt <4 x float> %290, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %297 = fcmp olt <4 x float> %293, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %298 = select <4 x i1> %296, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %290
  %299 = select <4 x i1> %297, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %293
  %300 = select <4 x i1> %294, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %298
  %301 = select <4 x i1> %295, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %299
  %302 = getelementptr inbounds float, float* %108, i64 %285
  %303 = bitcast float* %302 to <4 x float>*
  store <4 x float> %300, <4 x float>* %303, align 4, !alias.scope !64, !noalias !61
  %304 = getelementptr inbounds float, float* %302, i64 4
  %305 = bitcast float* %304 to <4 x float>*
  store <4 x float> %301, <4 x float>* %305, align 4, !alias.scope !64, !noalias !61
  br label %306

306:                                              ; preds = %284, %287
  %307 = icmp eq i64 %233, %222
  br i1 %307, label %345, label %308

308:                                              ; preds = %306, %224, %220
  %309 = phi i64 [ 0, %224 ], [ 0, %220 ], [ %233, %306 ]
  %310 = xor i64 %309, -1
  %311 = and i64 %222, 1
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %322, label %313

313:                                              ; preds = %308
  %314 = getelementptr inbounds float, float* %71, i64 %309
  %315 = load float, float* %314, align 4
  %316 = fcmp ogt float %315, 1.000000e+00
  %317 = fcmp olt float %315, -1.000000e+00
  %318 = select i1 %317, float -1.000000e+00, float %315
  %319 = select i1 %316, float 1.000000e+00, float %318
  %320 = getelementptr inbounds float, float* %108, i64 %309
  store float %319, float* %320, align 4
  %321 = or i64 %309, 1
  br label %322

322:                                              ; preds = %308, %313
  %323 = phi i64 [ %309, %308 ], [ %321, %313 ]
  %324 = sub nsw i64 0, %222
  %325 = icmp eq i64 %310, %324
  br i1 %325, label %345, label %326

326:                                              ; preds = %322, %326
  %327 = phi i64 [ %343, %326 ], [ %323, %322 ]
  %328 = getelementptr inbounds float, float* %71, i64 %327
  %329 = load float, float* %328, align 4
  %330 = fcmp ogt float %329, 1.000000e+00
  %331 = fcmp olt float %329, -1.000000e+00
  %332 = select i1 %331, float -1.000000e+00, float %329
  %333 = select i1 %330, float 1.000000e+00, float %332
  %334 = getelementptr inbounds float, float* %108, i64 %327
  store float %333, float* %334, align 4
  %335 = add nuw nsw i64 %327, 1
  %336 = getelementptr inbounds float, float* %71, i64 %335
  %337 = load float, float* %336, align 4
  %338 = fcmp ogt float %337, 1.000000e+00
  %339 = fcmp olt float %337, -1.000000e+00
  %340 = select i1 %339, float -1.000000e+00, float %337
  %341 = select i1 %338, float 1.000000e+00, float %340
  %342 = getelementptr inbounds float, float* %108, i64 %335
  store float %341, float* %342, align 4
  %343 = add nuw nsw i64 %327, 2
  %344 = icmp eq i64 %343, %222
  br i1 %344, label %345, label %326, !llvm.loop !67

345:                                              ; preds = %322, %326, %306, %217
  %346 = icmp sgt i32 %106, 5
  br i1 %346, label %347, label %353

347:                                              ; preds = %345
  %348 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %349 = load i32*, i32** %348, align 8
  %350 = icmp eq i32* %349, null
  br i1 %350, label %353, label %351

351:                                              ; preds = %347
  %352 = bitcast i32* %349 to i8*
  tail call void @_ZdaPv(i8* %352) #18
  br label %353

353:                                              ; preds = %345, %347, %351
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #19
  br i1 %110, label %354, label %360

354:                                              ; preds = %353
  %355 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %356 = load i32*, i32** %355, align 8
  %357 = icmp eq i32* %356, null
  br i1 %357, label %360, label %358

358:                                              ; preds = %354
  %359 = bitcast i32* %356 to i8*
  tail call void @_ZdaPv(i8* %359) #18
  br label %360

360:                                              ; preds = %353, %354, %358
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #19
  br label %367

361:                                              ; preds = %27
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIhEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float -1.000000e+00, float 1.000000e+00, %struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::ReluOpData"* %31)
  br label %367

362:                                              ; preds = %27
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIaEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float -1.000000e+00, float 1.000000e+00, %struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::ReluOpData"* %31)
  br label %367

363:                                              ; preds = %27
  %364 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %365 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %364, align 8
  %366 = tail call i8* @TfLiteTypeGetName(i32 %33) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %365(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.24, i64 0, i64 0), i8* %366) #19
  br label %367

367:                                              ; preds = %363, %362, %361, %360
  %368 = phi i32 [ 1, %363 ], [ 0, %362 ], [ 0, %361 ], [ 0, %360 ]
  ret i32 %368
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %30 = bitcast i8** %29 to %"struct.tflite::ops::builtin::activations::ReluOpData"**
  %31 = load %"struct.tflite::ops::builtin::activations::ReluOpData"*, %"struct.tflite::ops::builtin::activations::ReluOpData"** %30, align 8
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  switch i32 %33, label %74 [
    i32 1, label %34
    i32 3, label %72
    i32 9, label %73
  ]

34:                                               ; preds = %27
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 5
  %36 = load i64, i64* %35, align 8
  %37 = lshr i64 %36, 2
  %38 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %41 = bitcast %union.TfLitePtrUnion* %40 to float**
  %42 = load float*, float** %41, align 8
  br label %43

43:                                               ; preds = %34, %39
  %44 = phi float* [ %42, %39 ], [ null, %34 ]
  %45 = getelementptr inbounds float, float* %44, i64 %37
  %46 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %49 = bitcast %union.TfLitePtrUnion* %48 to float**
  %50 = load float*, float** %49, align 8
  br label %51

51:                                               ; preds = %43, %47
  %52 = phi float* [ %50, %47 ], [ null, %43 ]
  %53 = icmp eq i64 %37, 0
  br i1 %53, label %78, label %54

54:                                               ; preds = %51
  %55 = bitcast float* %3 to i8*
  %56 = bitcast float* %4 to i8*
  br label %57

57:                                               ; preds = %54, %57
  %58 = phi float* [ %52, %54 ], [ %70, %57 ]
  %59 = phi float* [ %44, %54 ], [ %69, %57 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 0.000000e+00, float* %3, align 4
  %60 = load float, float* %59, align 4
  %61 = fcmp ogt float %60, 0.000000e+00
  %62 = select i1 %61, float* %59, float* %3
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56)
  store float 6.000000e+00, float* %4, align 4
  %63 = load float, float* %62, align 4
  %64 = fcmp ogt float %63, 6.000000e+00
  %65 = select i1 %64, float* %4, float* %62
  %66 = bitcast float* %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = bitcast float* %58 to i32*
  store i32 %67, i32* %68, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  %69 = getelementptr inbounds float, float* %59, i64 1
  %70 = getelementptr inbounds float, float* %58, i64 1
  %71 = icmp ult float* %69, %45
  br i1 %71, label %57, label %78

72:                                               ; preds = %27
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIhEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float 0.000000e+00, float 6.000000e+00, %struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::ReluOpData"* %31)
  br label %78

73:                                               ; preds = %27
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_114QuantizedReluXIaEEvffPK12TfLiteTensorPS5_PKNS2_10ReluOpDataE(float 0.000000e+00, float 6.000000e+00, %struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::ReluOpData"* %31)
  br label %78

74:                                               ; preds = %27
  %75 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %76 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %75, align 8
  %77 = tail call i8* @TfLiteTypeGetName(i32 %33) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %76(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.25, i64 0, i64 0), i8* %77) #19
  br label %78

78:                                               ; preds = %57, %51, %74, %73, %72
  %79 = phi i32 [ 1, %74 ], [ 0, %73 ], [ 0, %72 ], [ 0, %51 ], [ 0, %57 ]
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations12SoftmaxFloatEP13TfLiteContextPK12TfLiteTensorPS5_P19TfLiteSoftmaxParams(%struct.TfLiteContext*, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteSoftmaxParams* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca %"struct.tflite::SoftmaxParams", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = bitcast %"struct.tflite::SoftmaxParams"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %8) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 bitcast ({ double, i32, i32, i32, i32, i32, i32, float, [4 x i8], float*, i16*, i16*, i8*, i8* }* @__const._ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode.op_params to i8*), i64 80, i1 false)
  %9 = getelementptr inbounds %struct.TfLiteSoftmaxParams, %struct.TfLiteSoftmaxParams* %3, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %5, i64 0, i32 0
  store double %11, double* %12, align 8
  %13 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #19
  %14 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %16, align 8, !alias.scope !68
  br label %45

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8, !noalias !68
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 4, !noalias !68
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %21, i32* %23, align 8, !alias.scope !68
  %24 = icmp sgt i32 %21, 5
  br i1 %24, label %25, label %32

25:                                               ; preds = %17
  %26 = sext i32 %21 to i64
  %27 = shl nsw i64 %26, 2
  %28 = tail call i8* @_Znam(i64 %27) #18, !noalias !68
  %29 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %30 = bitcast i32** %29 to i8**
  store i8* %28, i8** %30, align 8, !alias.scope !68
  %31 = bitcast i8* %28 to i32*
  br label %37

32:                                               ; preds = %17
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %34 = bitcast %union.anon* %33 to i32*
  %35 = sext i32 %21 to i64
  %36 = shl nsw i64 %35, 2
  br label %37

37:                                               ; preds = %32, %25
  %38 = phi i64 [ %27, %25 ], [ %36, %32 ]
  %39 = phi i32* [ %31, %25 ], [ %34, %32 ]
  %40 = bitcast i32* %39 to i8*
  %41 = bitcast i32* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %38, i1 false) #19
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %43 = bitcast %union.TfLitePtrUnion* %42 to float**
  %44 = load float*, float** %43, align 8
  br label %45

45:                                               ; preds = %15, %37
  %46 = phi float* [ %44, %37 ], [ null, %15 ]
  %47 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #19
  %48 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %50, align 8, !alias.scope !71
  br label %79

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %53 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %52, align 8, !noalias !71
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4, !noalias !71
  %56 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 0
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %55, i32* %57, align 8, !alias.scope !71
  %58 = icmp sgt i32 %55, 5
  br i1 %58, label %59, label %66

59:                                               ; preds = %51
  %60 = sext i32 %55 to i64
  %61 = shl nsw i64 %60, 2
  %62 = tail call i8* @_Znam(i64 %61) #18, !noalias !71
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %64 = bitcast i32** %63 to i8**
  store i8* %62, i8** %64, align 8, !alias.scope !71
  %65 = bitcast i8* %62 to i32*
  br label %71

66:                                               ; preds = %51
  %67 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %68 = bitcast %union.anon* %67 to i32*
  %69 = sext i32 %55 to i64
  %70 = shl nsw i64 %69, 2
  br label %71

71:                                               ; preds = %66, %59
  %72 = phi i64 [ %61, %59 ], [ %70, %66 ]
  %73 = phi i32* [ %65, %59 ], [ %68, %66 ]
  %74 = bitcast i32* %73 to i8*
  %75 = bitcast i32* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 %72, i1 false) #19
  %76 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %77 = bitcast %union.TfLitePtrUnion* %76 to float**
  %78 = load float*, float** %77, align 8
  br label %79

79:                                               ; preds = %49, %71
  %80 = phi float* [ %78, %71 ], [ null, %49 ]
  %81 = tail call %"class.tflite::CpuBackendContext"* @_ZN6tflite17CpuBackendContext14GetFromContextEP13TfLiteContext(%struct.TfLiteContext* %0) #19
  call void @_ZN6tflite13optimized_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_PfPNS_17CpuBackendContextE(%"struct.tflite::SoftmaxParams"* nonnull dereferenceable(80) %5, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, float* %46, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %7, float* %80, %"class.tflite::CpuBackendContext"* %81)
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = icmp sgt i32 %83, 5
  br i1 %84, label %85, label %91

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %87 = load i32*, i32** %86, align 8
  %88 = icmp eq i32* %87, null
  br i1 %88, label %91, label %89

89:                                               ; preds = %85
  %90 = bitcast i32* %87 to i8*
  call void @_ZdaPv(i8* %90) #18
  br label %91

91:                                               ; preds = %79, %85, %89
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #19
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %93 = load i32, i32* %92, align 8
  %94 = icmp sgt i32 %93, 5
  br i1 %94, label %95, label %101

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %97 = load i32*, i32** %96, align 8
  %98 = icmp eq i32* %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = bitcast i32* %97 to i8*
  call void @_ZdaPv(i8* %100) #18
  br label %101

101:                                              ; preds = %91, %95, %99
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #19
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %8) #19
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_PfPNS_17CpuBackendContextE(%"struct.tflite::SoftmaxParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #8 comdat {
  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca %"class.std::__1::vector.59", align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store float* %2, float** %7, align 8
  store float* %4, float** %8, align 8
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %15 to i32*
  %19 = select i1 %14, i32* %17, i32* %18
  %20 = icmp sgt i32 %13, 0
  br i1 %20, label %21, label %67

21:                                               ; preds = %6
  %22 = add nsw i32 %13, -1
  %23 = zext i32 %22 to i64
  %24 = zext i32 %13 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %43, label %28

28:                                               ; preds = %21
  %29 = sub nsw i64 %24, %26
  br label %30

30:                                               ; preds = %193, %28
  %31 = phi i64 [ 0, %28 ], [ %196, %193 ]
  %32 = phi i32 [ 1, %28 ], [ %195, %193 ]
  %33 = phi i64 [ %29, %28 ], [ %197, %193 ]
  %34 = icmp eq i64 %31, %23
  br i1 %34, label %38, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds i32, i32* %19, i64 %31
  %37 = load i32, i32* %36, align 4
  br label %38

38:                                               ; preds = %35, %30
  %39 = phi i32 [ %37, %35 ], [ 1, %30 ]
  %40 = mul nsw i32 %39, %32
  %41 = or i64 %31, 1
  %42 = icmp eq i64 %41, %23
  br i1 %42, label %177, label %174

43:                                               ; preds = %193, %21
  %44 = phi i32 [ undef, %21 ], [ %195, %193 ]
  %45 = phi i64 [ 0, %21 ], [ %196, %193 ]
  %46 = phi i32 [ 1, %21 ], [ %195, %193 ]
  %47 = icmp eq i64 %26, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %43, %56
  %49 = phi i64 [ %59, %56 ], [ %45, %43 ]
  %50 = phi i32 [ %58, %56 ], [ %46, %43 ]
  %51 = phi i64 [ %60, %56 ], [ %26, %43 ]
  %52 = icmp eq i64 %49, %23
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds i32, i32* %19, i64 %49
  %55 = load i32, i32* %54, align 4
  br label %56

56:                                               ; preds = %53, %48
  %57 = phi i32 [ %55, %53 ], [ 1, %48 ]
  %58 = mul nsw i32 %57, %50
  %59 = add nuw nsw i64 %49, 1
  %60 = add i64 %51, -1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %48, !llvm.loop !74

62:                                               ; preds = %56, %43
  %63 = phi i32 [ %44, %43 ], [ %58, %56 ]
  %64 = sdiv i32 %63, 8
  %65 = icmp sgt i32 %63, 7
  %66 = select i1 %65, i32 %64, i32 1
  br label %67

67:                                               ; preds = %62, %6
  %68 = phi i32 [ 1, %6 ], [ %63, %62 ]
  %69 = phi i32 [ 1, %6 ], [ %66, %62 ]
  %70 = icmp eq %"class.tflite::CpuBackendContext"* %5, null
  br i1 %70, label %77, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.tflite::CpuBackendContext", %"class.tflite::CpuBackendContext"* %5, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = icmp slt i32 %73, %69
  %75 = select i1 %74, i32 %73, i32 %69
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %78

77:                                               ; preds = %67, %71
  tail call void @_ZN6tflite13optimized_ops11SoftmaxImplERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pfii(%"struct.tflite::SoftmaxParams"* dereferenceable(80) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %1, float* %2, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, float* %4, i32 0, i32 %68)
  br label %173

78:                                               ; preds = %71
  %79 = bitcast %"class.std::__1::vector.59"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #19
  %80 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %9, i64 0, i32 0, i32 0
  %81 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %9, i64 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 24, i1 false) #19
  %83 = sext i32 %75 to i64
  %84 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %82 to i64*
  %85 = bitcast %"class.std::__1::vector.59"* %9 to i64*
  %86 = icmp eq i32 %75, 0
  br i1 %86, label %90, label %87

87:                                               ; preds = %78
  %88 = icmp slt i32 %75, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %87
  tail call void @abort() #20
  unreachable

90:                                               ; preds = %78
  %91 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91) #19
  store i32 0, i32* %10, align 4
  br label %108

92:                                               ; preds = %87
  %93 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %81 to i64*
  %94 = shl nsw i64 %83, 6
  %95 = tail call i8* @_Znwm(i64 %94) #18
  %96 = bitcast i8* %95 to %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*
  %97 = ptrtoint i8* %95 to i64
  %98 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %96, i64 %83
  %99 = ptrtoint %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %98 to i64
  store i64 %97, i64* %85, align 8
  store i64 %97, i64* %93, align 8
  store i64 %99, i64* %84, align 8
  %100 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %100) #19
  store i32 0, i32* %10, align 4
  %101 = bitcast i32* %11 to i8*
  %102 = bitcast float** %7 to i64*
  %103 = bitcast float** %8 to i64*
  %104 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %81 to i64*
  br label %138

105:                                              ; preds = %166
  %106 = load i64, i64* %104, align 8
  %107 = load i64, i64* %85, align 8
  br label %108

108:                                              ; preds = %90, %105
  %109 = phi i8* [ %100, %105 ], [ %91, %90 ]
  %110 = phi i64 [ %107, %105 ], [ 0, %90 ]
  %111 = phi i64 [ %106, %105 ], [ 0, %90 ]
  %112 = sub i64 %111, %110
  %113 = lshr exact i64 %112, 6
  %114 = trunc i64 %113 to i32
  %115 = inttoptr i64 %110 to %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*
  %116 = getelementptr inbounds %"class.tflite::CpuBackendContext", %"class.tflite::CpuBackendContext"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %117 = load %"class.gemmlowp::GemmContext"*, %"class.gemmlowp::GemmContext"** %116, align 8
  %118 = getelementptr inbounds %"class.gemmlowp::GemmContext", %"class.gemmlowp::GemmContext"* %117, i64 0, i32 0, i32 1
  call void @_ZN8gemmlowp11WorkersPool7ExecuteIN6tflite13optimized_ops17SoftmaxWorkerTaskEEEviPT_(%"class.gemmlowp::WorkersPool"* %118, i32 %114, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %115) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %109) #19
  %119 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %80, align 8
  %120 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %119, null
  br i1 %120, label %137, label %121

121:                                              ; preds = %108
  %122 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %119 to i8*
  %123 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %81, align 8
  %124 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %123, %119
  br i1 %124, label %135, label %125

125:                                              ; preds = %121, %125
  %126 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %127, %125 ], [ %123, %121 ]
  %127 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %126, i64 -1
  %128 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %127 to void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)***
  %129 = load void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)**, void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)*** %128, align 8
  %130 = load void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)*, void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)** %129, align 8
  call void %130(%"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %127) #19
  %131 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %127, %119
  br i1 %131, label %132, label %125

132:                                              ; preds = %125
  %133 = bitcast %"class.std::__1::vector.59"* %9 to i8**
  %134 = load i8*, i8** %133, align 8
  br label %135

135:                                              ; preds = %132, %121
  %136 = phi i8* [ %134, %132 ], [ %122, %121 ]
  store %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %119, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %81, align 8
  call void @_ZdlPv(i8* %136) #18
  br label %137

137:                                              ; preds = %108, %135
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #19
  br label %173

138:                                              ; preds = %170, %92
  %139 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %98, %92 ], [ %172, %170 ]
  %140 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %96, %92 ], [ %171, %170 ]
  %141 = phi i32 [ 0, %92 ], [ %167, %170 ]
  %142 = phi i32 [ 0, %92 ], [ %168, %170 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %101) #19
  %143 = sub nsw i32 %68, %141
  %144 = sub nsw i32 %75, %142
  %145 = sdiv i32 %143, %144
  %146 = add nsw i32 %145, %141
  store i32 %146, i32* %11, align 4
  %147 = icmp ult %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, %139
  br i1 %147, label %148, label %164

148:                                              ; preds = %138
  %149 = load i64, i64* %102, align 8
  %150 = load i64, i64* %103, align 8
  %151 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 0, i32 0
  %152 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 0, i32 1
  store %"class.gemmlowp::Allocator"* null, %"class.gemmlowp::Allocator"** %152, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %151, align 8
  %153 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 1
  store %"struct.tflite::SoftmaxParams"* %0, %"struct.tflite::SoftmaxParams"** %153, align 8
  %154 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 2
  store %"class.tflite::RuntimeShape"* %1, %"class.tflite::RuntimeShape"** %154, align 8
  %155 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 3
  %156 = bitcast float** %155 to i64*
  store i64 %149, i64* %156, align 8
  %157 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 4
  store %"class.tflite::RuntimeShape"* %3, %"class.tflite::RuntimeShape"** %157, align 8
  %158 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 5
  %159 = bitcast float** %158 to i64*
  store i64 %150, i64* %159, align 8
  %160 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 6
  store i32 %141, i32* %160, align 8
  %161 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 0, i32 7
  store i32 %146, i32* %161, align 4
  %162 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %140, i64 1
  %163 = ptrtoint %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %162 to i64
  store i64 %163, i64* %104, align 8
  br label %166

164:                                              ; preds = %138
  call void @_ZNSt3__16vectorIN6tflite13optimized_ops17SoftmaxWorkerTaskENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRKNS1_13SoftmaxParamsERKNS1_12RuntimeShapeERPKfSD_RPfRiSJ_EEEvDpOT_(%"class.std::__1::vector.59"* nonnull %9, %"struct.tflite::SoftmaxParams"* dereferenceable(80) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %1, float** nonnull dereferenceable(8) %7, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, float** nonnull dereferenceable(8) %8, i32* nonnull dereferenceable(4) %10, i32* nonnull dereferenceable(4) %11) #19
  %165 = load i32, i32* %11, align 4
  br label %166

166:                                              ; preds = %148, %164
  %167 = phi i32 [ %146, %148 ], [ %165, %164 ]
  store i32 %167, i32* %10, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %101) #19
  %168 = add nuw nsw i32 %142, 1
  %169 = icmp sgt i32 %75, %168
  br i1 %169, label %170, label %105

170:                                              ; preds = %166
  %171 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %81, align 8
  %172 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %82, align 8
  br label %138

173:                                              ; preds = %137, %77
  ret void

174:                                              ; preds = %38
  %175 = getelementptr inbounds i32, i32* %19, i64 %41
  %176 = load i32, i32* %175, align 4
  br label %177

177:                                              ; preds = %174, %38
  %178 = phi i32 [ %176, %174 ], [ 1, %38 ]
  %179 = mul nsw i32 %178, %40
  %180 = or i64 %31, 2
  %181 = icmp eq i64 %180, %23
  br i1 %181, label %185, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds i32, i32* %19, i64 %180
  %184 = load i32, i32* %183, align 4
  br label %185

185:                                              ; preds = %182, %177
  %186 = phi i32 [ %184, %182 ], [ 1, %177 ]
  %187 = mul nsw i32 %186, %179
  %188 = or i64 %31, 3
  %189 = icmp eq i64 %188, %23
  br i1 %189, label %193, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds i32, i32* %19, i64 %188
  %192 = load i32, i32* %191, align 4
  br label %193

193:                                              ; preds = %190, %185
  %194 = phi i32 [ %192, %190 ], [ 1, %185 ]
  %195 = mul nsw i32 %194, %187
  %196 = add nuw nsw i64 %31, 4
  %197 = add i64 %33, -4
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %43, label %30
}

declare %"class.tflite::CpuBackendContext"* @_ZN6tflite17CpuBackendContext14GetFromContextEP13TfLiteContext(%struct.TfLiteContext*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIaaEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* nocapture readnone, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #19
  %8 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !75
  br label %39

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !75
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !75
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !75
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #18, !noalias !75
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !75
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #19
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %37 = bitcast %union.TfLitePtrUnion* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %9, %31
  %40 = phi i32 [ %15, %31 ], [ 0, %9 ]
  %41 = phi i8* [ %38, %31 ], [ null, %9 ]
  %42 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #19
  %43 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %45, align 8, !alias.scope !78
  br label %74

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8, !noalias !78
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !noalias !78
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %50, i32* %52, align 8, !alias.scope !78
  %53 = icmp sgt i32 %50, 5
  br i1 %53, label %54, label %61

54:                                               ; preds = %46
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call i8* @_Znam(i64 %56) #18, !noalias !78
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !78
  %60 = bitcast i8* %57 to i32*
  br label %66

61:                                               ; preds = %46
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i32*
  %64 = sext i32 %50 to i64
  %65 = shl nsw i64 %64, 2
  br label %66

66:                                               ; preds = %61, %54
  %67 = phi i64 [ %56, %54 ], [ %65, %61 ]
  %68 = phi i32* [ %60, %54 ], [ %63, %61 ]
  %69 = bitcast i32* %68 to i8*
  %70 = bitcast i32* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %67, i1 false) #19
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to i8**
  %73 = load i8*, i8** %72, align 8
  br label %74

74:                                               ; preds = %44, %66
  %75 = phi i32 [ %50, %66 ], [ 0, %44 ]
  %76 = phi i8* [ %73, %66 ], [ null, %44 ]
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %78 = add nsw i32 %40, -1
  %79 = icmp sgt i32 %40, 5
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %81 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = bitcast %union.anon* %80 to i32*
  %84 = select i1 %79, i32* %82, i32* %83
  %85 = icmp sgt i32 %40, 0
  br i1 %85, label %86, label %126

86:                                               ; preds = %74
  %87 = zext i32 %78 to i64
  %88 = zext i32 %40 to i64
  %89 = add nsw i64 %88, -1
  %90 = and i64 %88, 3
  %91 = icmp ult i64 %89, 3
  br i1 %91, label %107, label %92

92:                                               ; preds = %86
  %93 = sub nsw i64 %88, %90
  br label %94

94:                                               ; preds = %332, %92
  %95 = phi i64 [ 0, %92 ], [ %335, %332 ]
  %96 = phi i32 [ 1, %92 ], [ %334, %332 ]
  %97 = phi i64 [ %93, %92 ], [ %336, %332 ]
  %98 = icmp eq i64 %95, %87
  br i1 %98, label %102, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds i32, i32* %84, i64 %95
  %101 = load i32, i32* %100, align 4
  br label %102

102:                                              ; preds = %99, %94
  %103 = phi i32 [ %101, %99 ], [ 1, %94 ]
  %104 = mul nsw i32 %103, %96
  %105 = or i64 %95, 1
  %106 = icmp eq i64 %105, %87
  br i1 %106, label %316, label %313

107:                                              ; preds = %332, %86
  %108 = phi i32 [ undef, %86 ], [ %334, %332 ]
  %109 = phi i64 [ 0, %86 ], [ %335, %332 ]
  %110 = phi i32 [ 1, %86 ], [ %334, %332 ]
  %111 = icmp eq i64 %90, 0
  br i1 %111, label %126, label %112

112:                                              ; preds = %107, %120
  %113 = phi i64 [ %123, %120 ], [ %109, %107 ]
  %114 = phi i32 [ %122, %120 ], [ %110, %107 ]
  %115 = phi i64 [ %124, %120 ], [ %90, %107 ]
  %116 = icmp eq i64 %113, %87
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i32, i32* %84, i64 %113
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %117, %112
  %121 = phi i32 [ %119, %117 ], [ 1, %112 ]
  %122 = mul nsw i32 %121, %114
  %123 = add nuw nsw i64 %113, 1
  %124 = add i64 %115, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %112, !llvm.loop !81

126:                                              ; preds = %107, %120, %74
  %127 = phi i32 [ 1, %74 ], [ %108, %107 ], [ %122, %120 ]
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %129 = icmp sgt i32 %75, 5
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %131 = sext i32 %78 to i64
  %132 = getelementptr inbounds i32, i32* %82, i64 %131
  %133 = bitcast %union.anon* %80 to [5 x i32]*
  %134 = getelementptr inbounds [5 x i32], [5 x i32]* %133, i64 0, i64 %131
  %135 = select i1 %79, i32* %132, i32* %134
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %union.anon, %union.anon* %130, i64 0, i32 0
  %138 = load i32*, i32** %137, align 8
  %139 = getelementptr inbounds i32, i32* %138, i64 %131
  %140 = bitcast %union.anon* %130 to [5 x i32]*
  %141 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i64 0, i64 %131
  %142 = select i1 %129, i32* %139, i32* %141
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, %136
  %145 = select i1 %144, i32 %143, i32 %136
  %146 = icmp sgt i32 %127, 0
  br i1 %146, label %147, label %294

147:                                              ; preds = %126
  %148 = icmp sgt i32 %145, 0
  %149 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 8
  %150 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 7
  %151 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 6
  %152 = sext i32 %145 to i64
  %153 = add nsw i64 %152, -8
  %154 = lshr i64 %153, 3
  %155 = add nuw nsw i64 %154, 1
  %156 = icmp ult i32 %145, 8
  %157 = and i64 %152, -8
  %158 = and i64 %155, 1
  %159 = icmp eq i64 %154, 0
  %160 = sub nuw nsw i64 %155, %158
  %161 = icmp eq i64 %158, 0
  %162 = icmp eq i64 %157, %152
  br label %163

163:                                              ; preds = %267, %147
  %164 = phi i8* [ %41, %147 ], [ %268, %267 ]
  %165 = phi i8* [ %76, %147 ], [ %269, %267 ]
  %166 = phi i32 [ 0, %147 ], [ %270, %267 ]
  br i1 %148, label %167, label %267

167:                                              ; preds = %163
  br i1 %156, label %168, label %171

168:                                              ; preds = %224, %167
  %169 = phi i64 [ 0, %167 ], [ %157, %224 ]
  %170 = phi i32 [ -128, %167 ], [ %235, %224 ]
  br label %242

171:                                              ; preds = %167
  br i1 %159, label %205, label %172

172:                                              ; preds = %171, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %171 ]
  %174 = phi <4 x i32> [ %200, %172 ], [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ]
  %175 = phi <4 x i32> [ %201, %172 ], [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ]
  %176 = phi i64 [ %203, %172 ], [ %160, %171 ]
  %177 = getelementptr inbounds i8, i8* %164, i64 %173
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = getelementptr inbounds i8, i8* %177, i64 4
  %181 = bitcast i8* %180 to <4 x i8>*
  %182 = load <4 x i8>, <4 x i8>* %181, align 1
  %183 = sext <4 x i8> %179 to <4 x i32>
  %184 = sext <4 x i8> %182 to <4 x i32>
  %185 = icmp slt <4 x i32> %174, %183
  %186 = icmp slt <4 x i32> %175, %184
  %187 = select <4 x i1> %185, <4 x i32> %183, <4 x i32> %174
  %188 = select <4 x i1> %186, <4 x i32> %184, <4 x i32> %175
  %189 = or i64 %173, 8
  %190 = getelementptr inbounds i8, i8* %164, i64 %189
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 4
  %194 = bitcast i8* %193 to <4 x i8>*
  %195 = load <4 x i8>, <4 x i8>* %194, align 1
  %196 = sext <4 x i8> %192 to <4 x i32>
  %197 = sext <4 x i8> %195 to <4 x i32>
  %198 = icmp slt <4 x i32> %187, %196
  %199 = icmp slt <4 x i32> %188, %197
  %200 = select <4 x i1> %198, <4 x i32> %196, <4 x i32> %187
  %201 = select <4 x i1> %199, <4 x i32> %197, <4 x i32> %188
  %202 = add i64 %173, 16
  %203 = add i64 %176, -2
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %172, !llvm.loop !82

205:                                              ; preds = %172, %171
  %206 = phi <4 x i32> [ undef, %171 ], [ %200, %172 ]
  %207 = phi <4 x i32> [ undef, %171 ], [ %201, %172 ]
  %208 = phi i64 [ 0, %171 ], [ %202, %172 ]
  %209 = phi <4 x i32> [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ], [ %200, %172 ]
  %210 = phi <4 x i32> [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ], [ %201, %172 ]
  br i1 %161, label %224, label %211

211:                                              ; preds = %205
  %212 = getelementptr inbounds i8, i8* %164, i64 %208
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = getelementptr inbounds i8, i8* %212, i64 4
  %216 = bitcast i8* %215 to <4 x i8>*
  %217 = load <4 x i8>, <4 x i8>* %216, align 1
  %218 = sext <4 x i8> %214 to <4 x i32>
  %219 = sext <4 x i8> %217 to <4 x i32>
  %220 = icmp slt <4 x i32> %210, %219
  %221 = select <4 x i1> %220, <4 x i32> %219, <4 x i32> %210
  %222 = icmp slt <4 x i32> %209, %218
  %223 = select <4 x i1> %222, <4 x i32> %218, <4 x i32> %209
  br label %224

224:                                              ; preds = %205, %211
  %225 = phi <4 x i32> [ %206, %205 ], [ %223, %211 ]
  %226 = phi <4 x i32> [ %207, %205 ], [ %221, %211 ]
  %227 = icmp sgt <4 x i32> %225, %226
  %228 = select <4 x i1> %227, <4 x i32> %225, <4 x i32> %226
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %230 = icmp sgt <4 x i32> %228, %229
  %231 = select <4 x i1> %230, <4 x i32> %228, <4 x i32> %229
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %233 = icmp sgt <4 x i32> %231, %232
  %234 = select <4 x i1> %233, <4 x i32> %231, <4 x i32> %232
  %235 = extractelement <4 x i32> %234, i32 0
  br i1 %162, label %236, label %168

236:                                              ; preds = %242, %224
  %237 = phi i32 [ %235, %224 ], [ %249, %242 ]
  %238 = load float*, float** %149, align 8
  %239 = sub nsw i32 255, %237
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds float, float* %238, i64 %240
  br label %256

242:                                              ; preds = %168, %242
  %243 = phi i64 [ %250, %242 ], [ %169, %168 ]
  %244 = phi i32 [ %249, %242 ], [ %170, %168 ]
  %245 = getelementptr inbounds i8, i8* %164, i64 %243
  %246 = load i8, i8* %245, align 1
  %247 = sext i8 %246 to i32
  %248 = icmp slt i32 %244, %247
  %249 = select i1 %248, i32 %247, i32 %244
  %250 = add nuw nsw i64 %243, 1
  %251 = icmp slt i64 %250, %152
  br i1 %251, label %242, label %236, !llvm.loop !83

252:                                              ; preds = %256
  %253 = load float, float* %150, align 8
  %254 = fmul float %264, %253
  %255 = fdiv float 1.000000e+00, %254
  br label %272

256:                                              ; preds = %236, %256
  %257 = phi i64 [ %265, %256 ], [ 0, %236 ]
  %258 = phi float [ %264, %256 ], [ 0.000000e+00, %236 ]
  %259 = getelementptr inbounds i8, i8* %164, i64 %257
  %260 = load i8, i8* %259, align 1
  %261 = sext i8 %260 to i64
  %262 = getelementptr inbounds float, float* %241, i64 %261
  %263 = load float, float* %262, align 4
  %264 = fadd float %258, %263
  %265 = add nuw nsw i64 %257, 1
  %266 = icmp slt i64 %265, %152
  br i1 %266, label %256, label %252

267:                                              ; preds = %272, %163
  %268 = getelementptr inbounds i8, i8* %164, i64 %152
  %269 = getelementptr inbounds i8, i8* %165, i64 %152
  %270 = add nuw nsw i32 %166, 1
  %271 = icmp eq i32 %270, %127
  br i1 %271, label %292, label %163

272:                                              ; preds = %252, %272
  %273 = phi i64 [ %290, %272 ], [ 0, %252 ]
  %274 = getelementptr inbounds i8, i8* %164, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = sext i8 %275 to i64
  %277 = getelementptr inbounds float, float* %241, i64 %276
  %278 = load float, float* %277, align 4
  %279 = fmul float %255, %278
  %280 = load i32, i32* %151, align 4
  %281 = tail call float @llvm.round.f32(float %279) #19
  %282 = fptosi float %281 to i32
  %283 = add nsw i32 %280, %282
  %284 = icmp slt i32 %283, 127
  %285 = select i1 %284, i32 %283, i32 127
  %286 = icmp sgt i32 %285, -128
  %287 = select i1 %286, i32 %285, i32 -128
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds i8, i8* %165, i64 %273
  store i8 %288, i8* %289, align 1
  %290 = add nuw nsw i64 %273, 1
  %291 = icmp slt i64 %290, %152
  br i1 %291, label %272, label %267

292:                                              ; preds = %267
  %293 = load i32, i32* %128, align 8
  br label %294

294:                                              ; preds = %292, %126
  %295 = phi i32 [ %293, %292 ], [ %75, %126 ]
  %296 = icmp sgt i32 %295, 5
  br i1 %296, label %297, label %303

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %299 = load i32*, i32** %298, align 8
  %300 = icmp eq i32* %299, null
  br i1 %300, label %303, label %301

301:                                              ; preds = %297
  %302 = bitcast i32* %299 to i8*
  tail call void @_ZdaPv(i8* %302) #18
  br label %303

303:                                              ; preds = %294, %297, %301
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #19
  %304 = load i32, i32* %77, align 8
  %305 = icmp sgt i32 %304, 5
  br i1 %305, label %306, label %312

306:                                              ; preds = %303
  %307 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %308 = load i32*, i32** %307, align 8
  %309 = icmp eq i32* %308, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %306
  %311 = bitcast i32* %308 to i8*
  tail call void @_ZdaPv(i8* %311) #18
  br label %312

312:                                              ; preds = %303, %306, %310
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #19
  ret i32 0

313:                                              ; preds = %102
  %314 = getelementptr inbounds i32, i32* %84, i64 %105
  %315 = load i32, i32* %314, align 4
  br label %316

316:                                              ; preds = %313, %102
  %317 = phi i32 [ %315, %313 ], [ 1, %102 ]
  %318 = mul nsw i32 %317, %104
  %319 = or i64 %95, 2
  %320 = icmp eq i64 %319, %87
  br i1 %320, label %324, label %321

321:                                              ; preds = %316
  %322 = getelementptr inbounds i32, i32* %84, i64 %319
  %323 = load i32, i32* %322, align 4
  br label %324

324:                                              ; preds = %321, %316
  %325 = phi i32 [ %323, %321 ], [ 1, %316 ]
  %326 = mul nsw i32 %325, %318
  %327 = or i64 %95, 3
  %328 = icmp eq i64 %327, %87
  br i1 %328, label %332, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds i32, i32* %84, i64 %327
  %331 = load i32, i32* %330, align 4
  br label %332

332:                                              ; preds = %329, %324
  %333 = phi i32 [ %331, %329 ], [ 1, %324 ]
  %334 = mul nsw i32 %333, %326
  %335 = add nuw nsw i64 %95, 4
  %336 = add i64 %97, -4
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %107, label %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIhhEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* nocapture readnone, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #19
  %8 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !84
  br label %39

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !84
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !84
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !84
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #18, !noalias !84
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !84
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #19
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %37 = bitcast %union.TfLitePtrUnion* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %9, %31
  %40 = phi i32 [ %15, %31 ], [ 0, %9 ]
  %41 = phi i8* [ %38, %31 ], [ null, %9 ]
  %42 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #19
  %43 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %45, align 8, !alias.scope !87
  br label %74

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8, !noalias !87
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !noalias !87
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %50, i32* %52, align 8, !alias.scope !87
  %53 = icmp sgt i32 %50, 5
  br i1 %53, label %54, label %61

54:                                               ; preds = %46
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call i8* @_Znam(i64 %56) #18, !noalias !87
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !87
  %60 = bitcast i8* %57 to i32*
  br label %66

61:                                               ; preds = %46
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i32*
  %64 = sext i32 %50 to i64
  %65 = shl nsw i64 %64, 2
  br label %66

66:                                               ; preds = %61, %54
  %67 = phi i64 [ %56, %54 ], [ %65, %61 ]
  %68 = phi i32* [ %60, %54 ], [ %63, %61 ]
  %69 = bitcast i32* %68 to i8*
  %70 = bitcast i32* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %67, i1 false) #19
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to i8**
  %73 = load i8*, i8** %72, align 8
  br label %74

74:                                               ; preds = %44, %66
  %75 = phi i32 [ %50, %66 ], [ 0, %44 ]
  %76 = phi i8* [ %73, %66 ], [ null, %44 ]
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %78 = add nsw i32 %40, -1
  %79 = icmp sgt i32 %40, 5
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %81 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = bitcast %union.anon* %80 to i32*
  %84 = select i1 %79, i32* %82, i32* %83
  %85 = icmp sgt i32 %40, 0
  br i1 %85, label %86, label %126

86:                                               ; preds = %74
  %87 = zext i32 %78 to i64
  %88 = zext i32 %40 to i64
  %89 = add nsw i64 %88, -1
  %90 = and i64 %88, 3
  %91 = icmp ult i64 %89, 3
  br i1 %91, label %107, label %92

92:                                               ; preds = %86
  %93 = sub nsw i64 %88, %90
  br label %94

94:                                               ; preds = %329, %92
  %95 = phi i64 [ 0, %92 ], [ %332, %329 ]
  %96 = phi i32 [ 1, %92 ], [ %331, %329 ]
  %97 = phi i64 [ %93, %92 ], [ %333, %329 ]
  %98 = icmp eq i64 %95, %87
  br i1 %98, label %102, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds i32, i32* %84, i64 %95
  %101 = load i32, i32* %100, align 4
  br label %102

102:                                              ; preds = %99, %94
  %103 = phi i32 [ %101, %99 ], [ 1, %94 ]
  %104 = mul nsw i32 %103, %96
  %105 = or i64 %95, 1
  %106 = icmp eq i64 %105, %87
  br i1 %106, label %313, label %310

107:                                              ; preds = %329, %86
  %108 = phi i32 [ undef, %86 ], [ %331, %329 ]
  %109 = phi i64 [ 0, %86 ], [ %332, %329 ]
  %110 = phi i32 [ 1, %86 ], [ %331, %329 ]
  %111 = icmp eq i64 %90, 0
  br i1 %111, label %126, label %112

112:                                              ; preds = %107, %120
  %113 = phi i64 [ %123, %120 ], [ %109, %107 ]
  %114 = phi i32 [ %122, %120 ], [ %110, %107 ]
  %115 = phi i64 [ %124, %120 ], [ %90, %107 ]
  %116 = icmp eq i64 %113, %87
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i32, i32* %84, i64 %113
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %117, %112
  %121 = phi i32 [ %119, %117 ], [ 1, %112 ]
  %122 = mul nsw i32 %121, %114
  %123 = add nuw nsw i64 %113, 1
  %124 = add i64 %115, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %112, !llvm.loop !90

126:                                              ; preds = %107, %120, %74
  %127 = phi i32 [ 1, %74 ], [ %108, %107 ], [ %122, %120 ]
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %129 = icmp sgt i32 %75, 5
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %131 = sext i32 %78 to i64
  %132 = getelementptr inbounds i32, i32* %82, i64 %131
  %133 = bitcast %union.anon* %80 to [5 x i32]*
  %134 = getelementptr inbounds [5 x i32], [5 x i32]* %133, i64 0, i64 %131
  %135 = select i1 %79, i32* %132, i32* %134
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %union.anon, %union.anon* %130, i64 0, i32 0
  %138 = load i32*, i32** %137, align 8
  %139 = getelementptr inbounds i32, i32* %138, i64 %131
  %140 = bitcast %union.anon* %130 to [5 x i32]*
  %141 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i64 0, i64 %131
  %142 = select i1 %129, i32* %139, i32* %141
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, %136
  %145 = select i1 %144, i32 %143, i32 %136
  %146 = icmp sgt i32 %127, 0
  br i1 %146, label %147, label %291

147:                                              ; preds = %126
  %148 = icmp sgt i32 %145, 0
  %149 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 8
  %150 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 7
  %151 = sext i32 %145 to i64
  %152 = add nsw i64 %151, -8
  %153 = lshr i64 %152, 3
  %154 = add nuw nsw i64 %153, 1
  %155 = icmp ult i32 %145, 8
  %156 = and i64 %151, -8
  %157 = and i64 %154, 1
  %158 = icmp eq i64 %153, 0
  %159 = sub nuw nsw i64 %154, %157
  %160 = icmp eq i64 %157, 0
  %161 = icmp eq i64 %156, %151
  br label %162

162:                                              ; preds = %266, %147
  %163 = phi i8* [ %41, %147 ], [ %267, %266 ]
  %164 = phi i8* [ %76, %147 ], [ %268, %266 ]
  %165 = phi i32 [ 0, %147 ], [ %269, %266 ]
  br i1 %148, label %166, label %266

166:                                              ; preds = %162
  br i1 %155, label %167, label %170

167:                                              ; preds = %223, %166
  %168 = phi i64 [ 0, %166 ], [ %156, %223 ]
  %169 = phi i32 [ 0, %166 ], [ %234, %223 ]
  br label %241

170:                                              ; preds = %166
  br i1 %158, label %204, label %171

171:                                              ; preds = %170, %171
  %172 = phi i64 [ %201, %171 ], [ 0, %170 ]
  %173 = phi <4 x i32> [ %199, %171 ], [ zeroinitializer, %170 ]
  %174 = phi <4 x i32> [ %200, %171 ], [ zeroinitializer, %170 ]
  %175 = phi i64 [ %202, %171 ], [ %159, %170 ]
  %176 = getelementptr inbounds i8, i8* %163, i64 %172
  %177 = bitcast i8* %176 to <4 x i8>*
  %178 = load <4 x i8>, <4 x i8>* %177, align 1
  %179 = getelementptr inbounds i8, i8* %176, i64 4
  %180 = bitcast i8* %179 to <4 x i8>*
  %181 = load <4 x i8>, <4 x i8>* %180, align 1
  %182 = zext <4 x i8> %178 to <4 x i32>
  %183 = zext <4 x i8> %181 to <4 x i32>
  %184 = icmp ult <4 x i32> %173, %182
  %185 = icmp ult <4 x i32> %174, %183
  %186 = select <4 x i1> %184, <4 x i32> %182, <4 x i32> %173
  %187 = select <4 x i1> %185, <4 x i32> %183, <4 x i32> %174
  %188 = or i64 %172, 8
  %189 = getelementptr inbounds i8, i8* %163, i64 %188
  %190 = bitcast i8* %189 to <4 x i8>*
  %191 = load <4 x i8>, <4 x i8>* %190, align 1
  %192 = getelementptr inbounds i8, i8* %189, i64 4
  %193 = bitcast i8* %192 to <4 x i8>*
  %194 = load <4 x i8>, <4 x i8>* %193, align 1
  %195 = zext <4 x i8> %191 to <4 x i32>
  %196 = zext <4 x i8> %194 to <4 x i32>
  %197 = icmp ult <4 x i32> %186, %195
  %198 = icmp ult <4 x i32> %187, %196
  %199 = select <4 x i1> %197, <4 x i32> %195, <4 x i32> %186
  %200 = select <4 x i1> %198, <4 x i32> %196, <4 x i32> %187
  %201 = add i64 %172, 16
  %202 = add i64 %175, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %171, !llvm.loop !91

204:                                              ; preds = %171, %170
  %205 = phi <4 x i32> [ undef, %170 ], [ %199, %171 ]
  %206 = phi <4 x i32> [ undef, %170 ], [ %200, %171 ]
  %207 = phi i64 [ 0, %170 ], [ %201, %171 ]
  %208 = phi <4 x i32> [ zeroinitializer, %170 ], [ %199, %171 ]
  %209 = phi <4 x i32> [ zeroinitializer, %170 ], [ %200, %171 ]
  br i1 %160, label %223, label %210

210:                                              ; preds = %204
  %211 = getelementptr inbounds i8, i8* %163, i64 %207
  %212 = bitcast i8* %211 to <4 x i8>*
  %213 = load <4 x i8>, <4 x i8>* %212, align 1
  %214 = getelementptr inbounds i8, i8* %211, i64 4
  %215 = bitcast i8* %214 to <4 x i8>*
  %216 = load <4 x i8>, <4 x i8>* %215, align 1
  %217 = zext <4 x i8> %213 to <4 x i32>
  %218 = zext <4 x i8> %216 to <4 x i32>
  %219 = icmp ult <4 x i32> %209, %218
  %220 = select <4 x i1> %219, <4 x i32> %218, <4 x i32> %209
  %221 = icmp ult <4 x i32> %208, %217
  %222 = select <4 x i1> %221, <4 x i32> %217, <4 x i32> %208
  br label %223

223:                                              ; preds = %204, %210
  %224 = phi <4 x i32> [ %205, %204 ], [ %222, %210 ]
  %225 = phi <4 x i32> [ %206, %204 ], [ %220, %210 ]
  %226 = icmp ugt <4 x i32> %224, %225
  %227 = select <4 x i1> %226, <4 x i32> %224, <4 x i32> %225
  %228 = shufflevector <4 x i32> %227, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %229 = icmp ugt <4 x i32> %227, %228
  %230 = select <4 x i1> %229, <4 x i32> %227, <4 x i32> %228
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %232 = icmp ugt <4 x i32> %230, %231
  %233 = select <4 x i1> %232, <4 x i32> %230, <4 x i32> %231
  %234 = extractelement <4 x i32> %233, i32 0
  br i1 %161, label %235, label %167

235:                                              ; preds = %241, %223
  %236 = phi i32 [ %234, %223 ], [ %248, %241 ]
  %237 = load float*, float** %149, align 8
  %238 = sub nsw i32 255, %236
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds float, float* %237, i64 %239
  br label %255

241:                                              ; preds = %167, %241
  %242 = phi i64 [ %249, %241 ], [ %168, %167 ]
  %243 = phi i32 [ %248, %241 ], [ %169, %167 ]
  %244 = getelementptr inbounds i8, i8* %163, i64 %242
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = icmp ult i32 %243, %246
  %248 = select i1 %247, i32 %246, i32 %243
  %249 = add nuw nsw i64 %242, 1
  %250 = icmp slt i64 %249, %151
  br i1 %250, label %241, label %235, !llvm.loop !92

251:                                              ; preds = %255
  %252 = load float, float* %150, align 8
  %253 = fmul float %263, %252
  %254 = fdiv float 1.000000e+00, %253
  br label %271

255:                                              ; preds = %235, %255
  %256 = phi i64 [ %264, %255 ], [ 0, %235 ]
  %257 = phi float [ %263, %255 ], [ 0.000000e+00, %235 ]
  %258 = getelementptr inbounds i8, i8* %163, i64 %256
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i64
  %261 = getelementptr inbounds float, float* %240, i64 %260
  %262 = load float, float* %261, align 4
  %263 = fadd float %257, %262
  %264 = add nuw nsw i64 %256, 1
  %265 = icmp slt i64 %264, %151
  br i1 %265, label %255, label %251

266:                                              ; preds = %271, %162
  %267 = getelementptr inbounds i8, i8* %163, i64 %151
  %268 = getelementptr inbounds i8, i8* %164, i64 %151
  %269 = add nuw nsw i32 %165, 1
  %270 = icmp eq i32 %269, %127
  br i1 %270, label %289, label %162

271:                                              ; preds = %251, %271
  %272 = phi i64 [ %287, %271 ], [ 0, %251 ]
  %273 = getelementptr inbounds i8, i8* %163, i64 %272
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i64
  %276 = getelementptr inbounds float, float* %240, i64 %275
  %277 = load float, float* %276, align 4
  %278 = fmul float %254, %277
  %279 = fadd float %278, 5.000000e-01
  %280 = fptosi float %279 to i32
  %281 = icmp slt i32 %280, 255
  %282 = select i1 %281, i32 %280, i32 255
  %283 = icmp sgt i32 %282, 0
  %284 = select i1 %283, i32 %282, i32 0
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds i8, i8* %164, i64 %272
  store i8 %285, i8* %286, align 1
  %287 = add nuw nsw i64 %272, 1
  %288 = icmp slt i64 %287, %151
  br i1 %288, label %271, label %266

289:                                              ; preds = %266
  %290 = load i32, i32* %128, align 8
  br label %291

291:                                              ; preds = %289, %126
  %292 = phi i32 [ %290, %289 ], [ %75, %126 ]
  %293 = icmp sgt i32 %292, 5
  br i1 %293, label %294, label %300

294:                                              ; preds = %291
  %295 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %296 = load i32*, i32** %295, align 8
  %297 = icmp eq i32* %296, null
  br i1 %297, label %300, label %298

298:                                              ; preds = %294
  %299 = bitcast i32* %296 to i8*
  tail call void @_ZdaPv(i8* %299) #18
  br label %300

300:                                              ; preds = %291, %294, %298
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #19
  %301 = load i32, i32* %77, align 8
  %302 = icmp sgt i32 %301, 5
  br i1 %302, label %303, label %309

303:                                              ; preds = %300
  %304 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %305 = load i32*, i32** %304, align 8
  %306 = icmp eq i32* %305, null
  br i1 %306, label %309, label %307

307:                                              ; preds = %303
  %308 = bitcast i32* %305 to i8*
  tail call void @_ZdaPv(i8* %308) #18
  br label %309

309:                                              ; preds = %300, %303, %307
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #19
  ret i32 0

310:                                              ; preds = %102
  %311 = getelementptr inbounds i32, i32* %84, i64 %105
  %312 = load i32, i32* %311, align 4
  br label %313

313:                                              ; preds = %310, %102
  %314 = phi i32 [ %312, %310 ], [ 1, %102 ]
  %315 = mul nsw i32 %314, %104
  %316 = or i64 %95, 2
  %317 = icmp eq i64 %316, %87
  br i1 %317, label %321, label %318

318:                                              ; preds = %313
  %319 = getelementptr inbounds i32, i32* %84, i64 %316
  %320 = load i32, i32* %319, align 4
  br label %321

321:                                              ; preds = %318, %313
  %322 = phi i32 [ %320, %318 ], [ 1, %313 ]
  %323 = mul nsw i32 %322, %315
  %324 = or i64 %95, 3
  %325 = icmp eq i64 %324, %87
  br i1 %325, label %329, label %326

326:                                              ; preds = %321
  %327 = getelementptr inbounds i32, i32* %84, i64 %324
  %328 = load i32, i32* %327, align 4
  br label %329

329:                                              ; preds = %326, %321
  %330 = phi i32 [ %328, %326 ], [ 1, %321 ]
  %331 = mul nsw i32 %330, %323
  %332 = add nuw nsw i64 %95, 4
  %333 = add i64 %97, -4
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %107, label %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIssEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext*, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"*) local_unnamed_addr #0 {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %8 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, -1
  %12 = icmp ult i32 %11, 4
  br i1 %12, label %13, label %86

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0
  %15 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #19
  %16 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %18, align 8, !alias.scope !93
  br label %30

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %10, i32* %21, align 8, !alias.scope !93
  %22 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %23 = sext i32 %10 to i64
  %24 = shl nsw i64 %23, 2
  %25 = bitcast %union.anon* %22 to i8*
  %26 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 4 %26, i64 %24, i1 false) #19
  %27 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %28 = bitcast %union.TfLitePtrUnion* %27 to i16**
  %29 = load i16*, i16** %28, align 8
  br label %30

30:                                               ; preds = %17, %19
  %31 = phi i16* [ %29, %19 ], [ null, %17 ]
  %32 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %32) #19
  %33 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %35, align 8, !alias.scope !96
  br label %64

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8, !noalias !96
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4, !noalias !96
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %40, i32* %42, align 8, !alias.scope !96
  %43 = icmp sgt i32 %40, 5
  br i1 %43, label %44, label %51

44:                                               ; preds = %36
  %45 = sext i32 %40 to i64
  %46 = shl nsw i64 %45, 2
  %47 = tail call i8* @_Znam(i64 %46) #18, !noalias !96
  %48 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %49 = bitcast i32** %48 to i8**
  store i8* %47, i8** %49, align 8, !alias.scope !96
  %50 = bitcast i8* %47 to i32*
  br label %56

51:                                               ; preds = %36
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %53 = bitcast %union.anon* %52 to i32*
  %54 = sext i32 %40 to i64
  %55 = shl nsw i64 %54, 2
  br label %56

56:                                               ; preds = %51, %44
  %57 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %58 = phi i32* [ %50, %44 ], [ %53, %51 ]
  %59 = bitcast i32* %58 to i8*
  %60 = bitcast i32* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %57, i1 false) #19
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %62 = bitcast %union.TfLitePtrUnion* %61 to i16**
  %63 = load i16*, i16** %62, align 8
  br label %64

64:                                               ; preds = %34, %56
  %65 = phi i16* [ %63, %56 ], [ null, %34 ]
  call void @_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::SoftmaxParams"* dereferenceable(80) %14, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i16* %31, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i16* %65)
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp sgt i32 %67, 5
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %71 = load i32*, i32** %70, align 8
  %72 = icmp eq i32* %71, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %69
  %74 = bitcast i32* %71 to i8*
  call void @_ZdaPv(i8* %74) #18
  br label %75

75:                                               ; preds = %64, %69, %73
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32) #19
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = icmp sgt i32 %77, 5
  br i1 %78, label %79, label %85

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %81 = load i32*, i32** %80, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %79
  %84 = bitcast i32* %81 to i8*
  call void @_ZdaPv(i8* %84) #18
  br label %85

85:                                               ; preds = %75, %79, %83
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #19
  br label %89

86:                                               ; preds = %4
  %87 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %88 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %87, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %88(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.26, i64 0, i64 0), i32 %10) #19
  br label %89

89:                                               ; preds = %86, %85
  %90 = phi i32 [ 0, %85 ], [ 1, %86 ]
  ret i32 %90
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::SoftmaxParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i16*, %"class.tflite::RuntimeShape"* dereferenceable(32), i16*) local_unnamed_addr #8 comdat {
  %6 = alloca %"class.std::__1::vector.274", align 8
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, -1
  %10 = icmp sgt i32 %8, 5
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %12 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = bitcast %union.anon* %11 to i32*
  %15 = select i1 %10, i32* %13, i32* %14
  %16 = icmp sgt i32 %8, 0
  br i1 %16, label %17, label %57

17:                                               ; preds = %5
  %18 = zext i32 %9 to i64
  %19 = zext i32 %8 to i64
  %20 = add nsw i64 %19, -1
  %21 = and i64 %19, 3
  %22 = icmp ult i64 %20, 3
  br i1 %22, label %38, label %23

23:                                               ; preds = %17
  %24 = sub nsw i64 %19, %21
  br label %25

25:                                               ; preds = %492, %23
  %26 = phi i64 [ 0, %23 ], [ %495, %492 ]
  %27 = phi i32 [ 1, %23 ], [ %494, %492 ]
  %28 = phi i64 [ %24, %23 ], [ %496, %492 ]
  %29 = icmp eq i64 %26, %18
  br i1 %29, label %33, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds i32, i32* %15, i64 %26
  %32 = load i32, i32* %31, align 4
  br label %33

33:                                               ; preds = %30, %25
  %34 = phi i32 [ %32, %30 ], [ 1, %25 ]
  %35 = mul nsw i32 %34, %27
  %36 = or i64 %26, 1
  %37 = icmp eq i64 %36, %18
  br i1 %37, label %476, label %473

38:                                               ; preds = %492, %17
  %39 = phi i32 [ undef, %17 ], [ %494, %492 ]
  %40 = phi i64 [ 0, %17 ], [ %495, %492 ]
  %41 = phi i32 [ 1, %17 ], [ %494, %492 ]
  %42 = icmp eq i64 %21, 0
  br i1 %42, label %57, label %43

43:                                               ; preds = %38, %51
  %44 = phi i64 [ %54, %51 ], [ %40, %38 ]
  %45 = phi i32 [ %53, %51 ], [ %41, %38 ]
  %46 = phi i64 [ %55, %51 ], [ %21, %38 ]
  %47 = icmp eq i64 %44, %18
  br i1 %47, label %51, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i32, i32* %15, i64 %44
  %50 = load i32, i32* %49, align 4
  br label %51

51:                                               ; preds = %48, %43
  %52 = phi i32 [ %50, %48 ], [ 1, %43 ]
  %53 = mul nsw i32 %52, %45
  %54 = add nuw nsw i64 %44, 1
  %55 = add i64 %46, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %43, !llvm.loop !99

57:                                               ; preds = %38, %51, %5
  %58 = phi i32 [ 1, %5 ], [ %39, %38 ], [ %53, %51 ]
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp sgt i32 %60, 5
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %63 = sext i32 %9 to i64
  %64 = getelementptr inbounds i32, i32* %13, i64 %63
  %65 = bitcast %union.anon* %11 to [5 x i32]*
  %66 = getelementptr inbounds [5 x i32], [5 x i32]* %65, i64 0, i64 %63
  %67 = select i1 %10, i32* %64, i32* %66
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %union.anon, %union.anon* %62, i64 0, i32 0
  %70 = load i32*, i32** %69, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 %63
  %72 = bitcast %union.anon* %62 to [5 x i32]*
  %73 = getelementptr inbounds [5 x i32], [5 x i32]* %72, i64 0, i64 %63
  %74 = select i1 %61, i32* %71, i32* %73
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %75, %68
  %77 = select i1 %76, i32 %75, i32 %68
  %78 = icmp sgt i32 %58, 0
  br i1 %78, label %79, label %193

79:                                               ; preds = %57
  %80 = icmp sgt i32 %77, 0
  %81 = bitcast %"class.std::__1::vector.274"* %6 to i8*
  %82 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %6, i64 0, i32 0, i32 0
  %83 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %6, i64 0, i32 0, i32 1
  %84 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %85 = sext i32 %77 to i64
  %86 = icmp eq i32 %77, 0
  %87 = icmp slt i32 %77, 0
  %88 = shl nsw i64 %85, 1
  %89 = bitcast %"class.std::__1::vector.274"* %6 to i8**
  %90 = bitcast i16** %83 to i64*
  %91 = add nsw i64 %85, -1
  %92 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 1
  %93 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 2
  %94 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 9
  %95 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 10
  %96 = zext i32 %58 to i64
  %97 = add nsw i64 %85, -16
  %98 = lshr i64 %97, 4
  %99 = add nuw nsw i64 %98, 1
  %100 = add nsw i64 %85, -8
  %101 = lshr i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = icmp ult i32 %77, 16
  %104 = and i64 %85, -16
  %105 = and i64 %99, 1
  %106 = icmp eq i64 %98, 0
  %107 = sub nuw nsw i64 %99, %105
  %108 = icmp eq i64 %105, 0
  %109 = icmp eq i64 %104, %85
  %110 = icmp ult i32 %77, 8
  %111 = and i64 %85, -8
  %112 = and i64 %102, 1
  %113 = icmp eq i64 %101, 0
  %114 = sub nuw nsw i64 %102, %112
  %115 = icmp eq i64 %112, 0
  %116 = icmp eq i64 %111, %85
  %117 = and i64 %85, 1
  %118 = icmp eq i32 %77, 1
  %119 = sub nsw i64 %85, %117
  %120 = icmp eq i64 %117, 0
  br label %121

121:                                              ; preds = %435, %79
  %122 = phi i64 [ 0, %79 ], [ %436, %435 ]
  br i1 %80, label %123, label %194

123:                                              ; preds = %121
  %124 = mul nsw i64 %122, %85
  br i1 %103, label %125, label %128

125:                                              ; preds = %178, %123
  %126 = phi i64 [ 0, %123 ], [ %104, %178 ]
  %127 = phi i16 [ -32768, %123 ], [ %192, %178 ]
  br label %214

128:                                              ; preds = %123
  br i1 %106, label %160, label %129

129:                                              ; preds = %128, %129
  %130 = phi i64 [ %157, %129 ], [ 0, %128 ]
  %131 = phi <8 x i16> [ %155, %129 ], [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %128 ]
  %132 = phi <8 x i16> [ %156, %129 ], [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %128 ]
  %133 = phi i64 [ %158, %129 ], [ %107, %128 ]
  %134 = add nsw i64 %130, %124
  %135 = getelementptr inbounds i16, i16* %2, i64 %134
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2
  %138 = getelementptr inbounds i16, i16* %135, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = icmp slt <8 x i16> %131, %137
  %142 = icmp slt <8 x i16> %132, %140
  %143 = select <8 x i1> %141, <8 x i16> %137, <8 x i16> %131
  %144 = select <8 x i1> %142, <8 x i16> %140, <8 x i16> %132
  %145 = or i64 %130, 16
  %146 = add nsw i64 %145, %124
  %147 = getelementptr inbounds i16, i16* %2, i64 %146
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2
  %150 = getelementptr inbounds i16, i16* %147, i64 8
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 2
  %153 = icmp slt <8 x i16> %143, %149
  %154 = icmp slt <8 x i16> %144, %152
  %155 = select <8 x i1> %153, <8 x i16> %149, <8 x i16> %143
  %156 = select <8 x i1> %154, <8 x i16> %152, <8 x i16> %144
  %157 = add i64 %130, 32
  %158 = add i64 %133, -2
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %129, !llvm.loop !100

160:                                              ; preds = %129, %128
  %161 = phi <8 x i16> [ undef, %128 ], [ %155, %129 ]
  %162 = phi <8 x i16> [ undef, %128 ], [ %156, %129 ]
  %163 = phi i64 [ 0, %128 ], [ %157, %129 ]
  %164 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %128 ], [ %155, %129 ]
  %165 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %128 ], [ %156, %129 ]
  br i1 %108, label %178, label %166

166:                                              ; preds = %160
  %167 = add nsw i64 %163, %124
  %168 = getelementptr inbounds i16, i16* %2, i64 %167
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = getelementptr inbounds i16, i16* %168, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2
  %174 = icmp slt <8 x i16> %165, %173
  %175 = select <8 x i1> %174, <8 x i16> %173, <8 x i16> %165
  %176 = icmp slt <8 x i16> %164, %170
  %177 = select <8 x i1> %176, <8 x i16> %170, <8 x i16> %164
  br label %178

178:                                              ; preds = %160, %166
  %179 = phi <8 x i16> [ %161, %160 ], [ %177, %166 ]
  %180 = phi <8 x i16> [ %162, %160 ], [ %175, %166 ]
  %181 = icmp sgt <8 x i16> %179, %180
  %182 = select <8 x i1> %181, <8 x i16> %179, <8 x i16> %180
  %183 = shufflevector <8 x i16> %182, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %184 = icmp sgt <8 x i16> %182, %183
  %185 = select <8 x i1> %184, <8 x i16> %182, <8 x i16> %183
  %186 = shufflevector <8 x i16> %185, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = icmp sgt <8 x i16> %185, %186
  %188 = select <8 x i1> %187, <8 x i16> %185, <8 x i16> %186
  %189 = shufflevector <8 x i16> %188, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %190 = icmp sgt <8 x i16> %188, %189
  %191 = select <8 x i1> %190, <8 x i16> %188, <8 x i16> %189
  %192 = extractelement <8 x i16> %191, i32 0
  br i1 %109, label %194, label %125

193:                                              ; preds = %435, %57
  ret void

194:                                              ; preds = %214, %178, %121
  %195 = phi i16 [ -32768, %121 ], [ %192, %178 ], [ %221, %214 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 0, i64 24, i1 false) #19
  br i1 %86, label %210, label %196

196:                                              ; preds = %194
  br i1 %87, label %197, label %199

197:                                              ; preds = %196
  %198 = bitcast %"class.std::__1::vector.274"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %198) #20
  unreachable

199:                                              ; preds = %196
  %200 = tail call i8* @_Znwm(i64 %88) #18
  %201 = bitcast i8* %200 to i16*
  store i8* %200, i8** %89, align 8
  %202 = getelementptr inbounds i16, i16* %201, i64 %85
  store i16* %202, i16** %84, align 8
  %203 = ptrtoint i8* %200 to i64
  %204 = getelementptr i16, i16* %201, i64 %91
  %205 = ptrtoint i16* %204 to i64
  %206 = sub i64 2, %203
  %207 = add i64 %206, %205
  %208 = and i64 %207, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %200, i8 0, i64 %208, i1 false) #19
  %209 = ptrtoint i16* %202 to i64
  store i64 %209, i64* %90, align 8
  br label %210

210:                                              ; preds = %194, %199
  br i1 %80, label %211, label %358

211:                                              ; preds = %210
  %212 = mul nsw i64 %122, %85
  %213 = sext i16 %195 to i32
  br label %286

214:                                              ; preds = %125, %214
  %215 = phi i64 [ %222, %214 ], [ %126, %125 ]
  %216 = phi i16 [ %221, %214 ], [ %127, %125 ]
  %217 = add nsw i64 %215, %124
  %218 = getelementptr inbounds i16, i16* %2, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = icmp slt i16 %216, %219
  %221 = select i1 %220, i16 %219, i16 %216
  %222 = add nuw nsw i64 %215, 1
  %223 = icmp slt i64 %222, %85
  br i1 %223, label %214, label %194, !llvm.loop !101

224:                                              ; preds = %317
  br i1 %80, label %225, label %358

225:                                              ; preds = %224
  %226 = load i16*, i16** %82, align 8
  br i1 %110, label %227, label %230

227:                                              ; preds = %277, %225
  %228 = phi i64 [ 0, %225 ], [ %111, %277 ]
  %229 = phi i32 [ 0, %225 ], [ %285, %277 ]
  br label %403

230:                                              ; preds = %225
  br i1 %113, label %260, label %231

231:                                              ; preds = %230, %231
  %232 = phi i64 [ %257, %231 ], [ 0, %230 ]
  %233 = phi <4 x i32> [ %255, %231 ], [ zeroinitializer, %230 ]
  %234 = phi <4 x i32> [ %256, %231 ], [ zeroinitializer, %230 ]
  %235 = phi i64 [ %258, %231 ], [ %114, %230 ]
  %236 = getelementptr inbounds i16, i16* %226, i64 %232
  %237 = bitcast i16* %236 to <4 x i16>*
  %238 = load <4 x i16>, <4 x i16>* %237, align 2
  %239 = getelementptr inbounds i16, i16* %236, i64 4
  %240 = bitcast i16* %239 to <4 x i16>*
  %241 = load <4 x i16>, <4 x i16>* %240, align 2
  %242 = sext <4 x i16> %238 to <4 x i32>
  %243 = sext <4 x i16> %241 to <4 x i32>
  %244 = add nsw <4 x i32> %233, %242
  %245 = add nsw <4 x i32> %234, %243
  %246 = or i64 %232, 8
  %247 = getelementptr inbounds i16, i16* %226, i64 %246
  %248 = bitcast i16* %247 to <4 x i16>*
  %249 = load <4 x i16>, <4 x i16>* %248, align 2
  %250 = getelementptr inbounds i16, i16* %247, i64 4
  %251 = bitcast i16* %250 to <4 x i16>*
  %252 = load <4 x i16>, <4 x i16>* %251, align 2
  %253 = sext <4 x i16> %249 to <4 x i32>
  %254 = sext <4 x i16> %252 to <4 x i32>
  %255 = add nsw <4 x i32> %244, %253
  %256 = add nsw <4 x i32> %245, %254
  %257 = add i64 %232, 16
  %258 = add i64 %235, -2
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %231, !llvm.loop !102

260:                                              ; preds = %231, %230
  %261 = phi <4 x i32> [ undef, %230 ], [ %255, %231 ]
  %262 = phi <4 x i32> [ undef, %230 ], [ %256, %231 ]
  %263 = phi i64 [ 0, %230 ], [ %257, %231 ]
  %264 = phi <4 x i32> [ zeroinitializer, %230 ], [ %255, %231 ]
  %265 = phi <4 x i32> [ zeroinitializer, %230 ], [ %256, %231 ]
  br i1 %115, label %277, label %266

266:                                              ; preds = %260
  %267 = getelementptr inbounds i16, i16* %226, i64 %263
  %268 = getelementptr inbounds i16, i16* %267, i64 4
  %269 = bitcast i16* %268 to <4 x i16>*
  %270 = load <4 x i16>, <4 x i16>* %269, align 2
  %271 = sext <4 x i16> %270 to <4 x i32>
  %272 = add nsw <4 x i32> %265, %271
  %273 = bitcast i16* %267 to <4 x i16>*
  %274 = load <4 x i16>, <4 x i16>* %273, align 2
  %275 = sext <4 x i16> %274 to <4 x i32>
  %276 = add nsw <4 x i32> %264, %275
  br label %277

277:                                              ; preds = %260, %266
  %278 = phi <4 x i32> [ %261, %260 ], [ %276, %266 ]
  %279 = phi <4 x i32> [ %262, %260 ], [ %272, %266 ]
  %280 = add <4 x i32> %279, %278
  %281 = shufflevector <4 x i32> %280, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %282 = add <4 x i32> %280, %281
  %283 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %284 = add <4 x i32> %282, %283
  %285 = extractelement <4 x i32> %284, i32 0
  br i1 %116, label %358, label %227

286:                                              ; preds = %211, %317
  %287 = phi i64 [ 0, %211 ], [ %356, %317 ]
  %288 = add nsw i64 %287, %212
  %289 = getelementptr inbounds i16, i16* %2, i64 %288
  %290 = load i16, i16* %289, align 2
  %291 = sext i16 %290 to i32
  %292 = sub nsw i32 %291, %213
  %293 = load i32, i32* %92, align 8
  %294 = load i32, i32* %93, align 4
  %295 = icmp sgt i32 %294, 0
  %296 = sub nsw i32 0, %294
  %297 = select i1 %295, i32 0, i32 %296
  %298 = shl i32 1, %294
  %299 = select i1 %295, i32 %298, i32 1
  %300 = mul nsw i32 %299, %292
  %301 = icmp eq i32 %300, %293
  br i1 %301, label %306, label %302

302:                                              ; preds = %286
  %303 = sext i32 %300 to i64
  %304 = sext i32 %293 to i64
  %305 = mul nsw i64 %303, %304
  br label %310

306:                                              ; preds = %286
  %307 = icmp eq i32 %293, -2147483648
  %308 = sext i32 %293 to i64
  %309 = mul nsw i64 %308, %308
  br i1 %307, label %317, label %310

310:                                              ; preds = %306, %302
  %311 = phi i64 [ %305, %302 ], [ %309, %306 ]
  %312 = icmp sgt i64 %311, -1
  %313 = select i1 %312, i64 1073741824, i64 -1073741823
  %314 = add nsw i64 %313, %311
  %315 = sdiv i64 %314, 2147483648
  %316 = trunc i64 %315 to i32
  br label %317

317:                                              ; preds = %306, %310
  %318 = phi i32 [ %316, %310 ], [ 2147483647, %306 ]
  %319 = zext i32 %297 to i64
  %320 = shl nsw i64 -1, %319
  %321 = trunc i64 %320 to i32
  %322 = xor i32 %321, -1
  %323 = and i32 %318, %322
  %324 = ashr i32 %322, 1
  %325 = lshr i32 %318, 31
  %326 = add nsw i32 %325, %324
  %327 = ashr i32 %318, %297
  %328 = icmp sgt i32 %323, %326
  %329 = zext i1 %328 to i32
  %330 = add nsw i32 %327, %329
  %331 = icmp sgt i32 %330, -65535
  %332 = select i1 %331, i32 %330, i32 -65535
  %333 = icmp slt i32 %332, 0
  %334 = select i1 %333, i32 %332, i32 0
  %335 = add nsw i32 %334, 32767
  %336 = trunc i32 %335 to i16
  %337 = load i16*, i16** %94, align 8
  %338 = ashr i16 %336, 7
  %339 = add nsw i16 %338, 256
  %340 = and i32 %335, 127
  %341 = zext i16 %339 to i64
  %342 = getelementptr inbounds i16, i16* %337, i64 %341
  %343 = load i16, i16* %342, align 2
  %344 = add nuw nsw i64 %341, 1
  %345 = getelementptr inbounds i16, i16* %337, i64 %344
  %346 = load i16, i16* %345, align 2
  %347 = sub i16 %346, %343
  %348 = sext i16 %347 to i32
  %349 = mul nsw i32 %340, %348
  %350 = add nsw i32 %349, 64
  %351 = lshr i32 %350, 7
  %352 = trunc i32 %351 to i16
  %353 = add i16 %343, %352
  %354 = load i16*, i16** %82, align 8
  %355 = getelementptr inbounds i16, i16* %354, i64 %287
  store i16 %353, i16* %355, align 2
  %356 = add nuw nsw i64 %287, 1
  %357 = icmp slt i64 %356, %85
  br i1 %357, label %286, label %224

358:                                              ; preds = %403, %277, %210, %224
  %359 = phi i32 [ 0, %224 ], [ 0, %210 ], [ %285, %277 ], [ %409, %403 ]
  %360 = tail call i32 @llvm.ctlz.i32(i32 %359, i1 false) #19, !range !103
  %361 = sext i32 %359 to i64
  %362 = add nsw i32 %360, -1
  %363 = zext i32 %362 to i64
  %364 = shl i64 %361, %363
  %365 = add nsw i64 %364, 8192
  %366 = lshr i64 %365, 14
  %367 = trunc i64 %366 to i32
  %368 = icmp sgt i32 %367, 65536
  %369 = select i1 %368, i32 %367, i32 65536
  %370 = icmp slt i32 %369, 131071
  %371 = select i1 %370, i32 %369, i32 131071
  %372 = add nsw i32 %371, -98304
  %373 = trunc i32 %372 to i16
  %374 = load i16*, i16** %95, align 8
  %375 = ashr i16 %373, 7
  %376 = add nsw i16 %375, 256
  %377 = zext i16 %376 to i64
  %378 = getelementptr inbounds i16, i16* %374, i64 %377
  %379 = load i16, i16* %378, align 2
  br i1 %80, label %382, label %380

380:                                              ; preds = %358
  %381 = load i16*, i16** %82, align 8
  br label %429

382:                                              ; preds = %358
  %383 = and i32 %372, 127
  %384 = add nuw nsw i64 %377, 1
  %385 = getelementptr inbounds i16, i16* %374, i64 %384
  %386 = load i16, i16* %385, align 2
  %387 = sub i16 %386, %379
  %388 = sext i16 %387 to i32
  %389 = mul nsw i32 %383, %388
  %390 = add nsw i32 %389, 64
  %391 = lshr i32 %390, 7
  %392 = trunc i32 %391 to i16
  %393 = add i16 %379, %392
  %394 = sub nsw i32 31, %360
  %395 = and i32 %394, 255
  %396 = add nsw i32 %395, -1
  %397 = shl i32 1, %396
  %398 = sext i32 %397 to i64
  %399 = sext i16 %393 to i64
  %400 = zext i32 %395 to i64
  %401 = mul nsw i64 %122, %85
  %402 = load i16*, i16** %82, align 8
  br i1 %118, label %412, label %438

403:                                              ; preds = %227, %403
  %404 = phi i64 [ %410, %403 ], [ %228, %227 ]
  %405 = phi i32 [ %409, %403 ], [ %229, %227 ]
  %406 = getelementptr inbounds i16, i16* %226, i64 %404
  %407 = load i16, i16* %406, align 2
  %408 = sext i16 %407 to i32
  %409 = add nsw i32 %405, %408
  %410 = add nuw nsw i64 %404, 1
  %411 = icmp slt i64 %410, %85
  br i1 %411, label %403, label %358, !llvm.loop !104

412:                                              ; preds = %438, %382
  %413 = phi i64 [ 0, %382 ], [ %470, %438 ]
  br i1 %120, label %429, label %414

414:                                              ; preds = %412
  %415 = getelementptr inbounds i16, i16* %402, i64 %413
  %416 = load i16, i16* %415, align 2
  %417 = sext i16 %416 to i64
  %418 = mul nsw i64 %417, %399
  %419 = add nsw i64 %418, %398
  %420 = ashr i64 %419, %400
  %421 = trunc i64 %420 to i32
  %422 = icmp sgt i32 %421, 0
  %423 = select i1 %422, i32 %421, i32 0
  %424 = icmp slt i32 %423, 32767
  %425 = select i1 %424, i32 %423, i32 32767
  %426 = trunc i32 %425 to i16
  %427 = add nsw i64 %413, %401
  %428 = getelementptr inbounds i16, i16* %4, i64 %427
  store i16 %426, i16* %428, align 2
  br label %429

429:                                              ; preds = %414, %412, %380
  %430 = phi i16* [ %381, %380 ], [ %402, %412 ], [ %402, %414 ]
  %431 = icmp eq i16* %430, null
  br i1 %431, label %435, label %432

432:                                              ; preds = %429
  %433 = ptrtoint i16* %430 to i64
  store i64 %433, i64* %90, align 8
  %434 = bitcast i16* %430 to i8*
  tail call void @_ZdlPv(i8* %434) #18
  br label %435

435:                                              ; preds = %429, %432
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #19
  %436 = add nuw nsw i64 %122, 1
  %437 = icmp eq i64 %436, %96
  br i1 %437, label %193, label %121

438:                                              ; preds = %382, %438
  %439 = phi i64 [ %470, %438 ], [ 0, %382 ]
  %440 = phi i64 [ %471, %438 ], [ %119, %382 ]
  %441 = getelementptr inbounds i16, i16* %402, i64 %439
  %442 = load i16, i16* %441, align 2
  %443 = sext i16 %442 to i64
  %444 = mul nsw i64 %443, %399
  %445 = add nsw i64 %444, %398
  %446 = ashr i64 %445, %400
  %447 = trunc i64 %446 to i32
  %448 = icmp sgt i32 %447, 0
  %449 = select i1 %448, i32 %447, i32 0
  %450 = icmp slt i32 %449, 32767
  %451 = select i1 %450, i32 %449, i32 32767
  %452 = trunc i32 %451 to i16
  %453 = add nsw i64 %439, %401
  %454 = getelementptr inbounds i16, i16* %4, i64 %453
  store i16 %452, i16* %454, align 2
  %455 = or i64 %439, 1
  %456 = getelementptr inbounds i16, i16* %402, i64 %455
  %457 = load i16, i16* %456, align 2
  %458 = sext i16 %457 to i64
  %459 = mul nsw i64 %458, %399
  %460 = add nsw i64 %459, %398
  %461 = ashr i64 %460, %400
  %462 = trunc i64 %461 to i32
  %463 = icmp sgt i32 %462, 0
  %464 = select i1 %463, i32 %462, i32 0
  %465 = icmp slt i32 %464, 32767
  %466 = select i1 %465, i32 %464, i32 32767
  %467 = trunc i32 %466 to i16
  %468 = add nsw i64 %455, %401
  %469 = getelementptr inbounds i16, i16* %4, i64 %468
  store i16 %467, i16* %469, align 2
  %470 = add nuw nsw i64 %439, 2
  %471 = add i64 %440, -2
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %412, label %438

473:                                              ; preds = %33
  %474 = getelementptr inbounds i32, i32* %15, i64 %36
  %475 = load i32, i32* %474, align 4
  br label %476

476:                                              ; preds = %473, %33
  %477 = phi i32 [ %475, %473 ], [ 1, %33 ]
  %478 = mul nsw i32 %477, %35
  %479 = or i64 %26, 2
  %480 = icmp eq i64 %479, %18
  br i1 %480, label %484, label %481

481:                                              ; preds = %476
  %482 = getelementptr inbounds i32, i32* %15, i64 %479
  %483 = load i32, i32* %482, align 4
  br label %484

484:                                              ; preds = %481, %476
  %485 = phi i32 [ %483, %481 ], [ 1, %476 ]
  %486 = mul nsw i32 %485, %478
  %487 = or i64 %26, 3
  %488 = icmp eq i64 %487, %18
  br i1 %488, label %492, label %489

489:                                              ; preds = %484
  %490 = getelementptr inbounds i32, i32* %15, i64 %487
  %491 = load i32, i32* %490, align 4
  br label %492

492:                                              ; preds = %489, %484
  %493 = phi i32 [ %491, %489 ], [ 1, %484 ]
  %494 = mul nsw i32 %493, %486
  %495 = add nuw nsw i64 %26, 4
  %496 = add i64 %28, -4
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %38, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLiteSoftmaxParams**
  %5 = load %struct.TfLiteSoftmaxParams*, %struct.TfLiteSoftmaxParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::activations::SoftmaxOpData"**
  %8 = load %"struct.tflite::ops::builtin::activations::SoftmaxOpData"*, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  switch i32 %34, label %61 [
    i32 1, label %35
    i32 3, label %37
    i32 9, label %48
    i32 7, label %59
  ]

35:                                               ; preds = %31
  %36 = tail call i32 @_ZN6tflite3ops7builtin11activations12SoftmaxFloatEP13TfLiteContextPK12TfLiteTensorPS5_P19TfLiteSoftmaxParams(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %32, %struct.TfLiteSoftmaxParams* %5)
  br label %65

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %44 [
    i32 3, label %40
    i32 7, label %42
  ]

40:                                               ; preds = %37
  %41 = tail call i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIhhEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* undef, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %32, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %8)
  br label %65

42:                                               ; preds = %37
  %43 = tail call i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIhsEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %32, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %8)
  br label %65

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %46 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %45, align 8
  %47 = tail call i8* @TfLiteTypeGetName(i32 %39) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %46(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.27, i64 0, i64 0), i8* %47) #19
  br label %65

48:                                               ; preds = %31
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  switch i32 %50, label %55 [
    i32 9, label %51
    i32 7, label %53
  ]

51:                                               ; preds = %48
  %52 = tail call i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIaaEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* undef, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %32, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %8)
  br label %65

53:                                               ; preds = %48
  %54 = tail call i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIasEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %32, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %8)
  br label %65

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %57 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %56, align 8
  %58 = tail call i8* @TfLiteTypeGetName(i32 %50) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %57(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.28, i64 0, i64 0), i8* %58) #19
  br label %65

59:                                               ; preds = %31
  %60 = tail call i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIssEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %32, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %8)
  br label %65

61:                                               ; preds = %31
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %63 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %62, align 8
  %64 = tail call i8* @TfLiteTypeGetName(i32 %34) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %63(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.29, i64 0, i64 0), i8* %64) #19
  br label %65

65:                                               ; preds = %61, %59, %55, %53, %51, %44, %42, %40, %35
  %66 = phi i32 [ 1, %61 ], [ %60, %59 ], [ 1, %55 ], [ %54, %53 ], [ 0, %51 ], [ 1, %44 ], [ %43, %42 ], [ 0, %40 ], [ 0, %35 ]
  ret i32 %66
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIhsEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #19
  %8 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !105
  br label %39

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !105
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !105
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !105
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #18, !noalias !105
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !105
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #19
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %37 = bitcast %union.TfLitePtrUnion* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %9, %31
  %40 = phi i32 [ %15, %31 ], [ 0, %9 ]
  %41 = phi i8* [ %38, %31 ], [ null, %9 ]
  %42 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #19
  %43 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %45, align 8, !alias.scope !108
  br label %74

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8, !noalias !108
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !noalias !108
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %50, i32* %52, align 8, !alias.scope !108
  %53 = icmp sgt i32 %50, 5
  br i1 %53, label %54, label %61

54:                                               ; preds = %46
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call i8* @_Znam(i64 %56) #18, !noalias !108
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !108
  %60 = bitcast i8* %57 to i32*
  br label %66

61:                                               ; preds = %46
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i32*
  %64 = sext i32 %50 to i64
  %65 = shl nsw i64 %64, 2
  br label %66

66:                                               ; preds = %61, %54
  %67 = phi i64 [ %56, %54 ], [ %65, %61 ]
  %68 = phi i32* [ %60, %54 ], [ %63, %61 ]
  %69 = bitcast i32* %68 to i8*
  %70 = bitcast i32* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %67, i1 false) #19
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to i16**
  %73 = load i16*, i16** %72, align 8
  br label %74

74:                                               ; preds = %44, %66
  %75 = phi i32 [ %50, %66 ], [ 0, %44 ]
  %76 = phi i16* [ %73, %66 ], [ null, %44 ]
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %78 = add nsw i32 %40, -1
  %79 = icmp sgt i32 %40, 5
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %81 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = bitcast %union.anon* %80 to i32*
  %84 = select i1 %79, i32* %82, i32* %83
  %85 = icmp sgt i32 %40, 0
  br i1 %85, label %86, label %126

86:                                               ; preds = %74
  %87 = zext i32 %78 to i64
  %88 = zext i32 %40 to i64
  %89 = add nsw i64 %88, -1
  %90 = and i64 %88, 3
  %91 = icmp ult i64 %89, 3
  br i1 %91, label %107, label %92

92:                                               ; preds = %86
  %93 = sub nsw i64 %88, %90
  br label %94

94:                                               ; preds = %332, %92
  %95 = phi i64 [ 0, %92 ], [ %335, %332 ]
  %96 = phi i32 [ 1, %92 ], [ %334, %332 ]
  %97 = phi i64 [ %93, %92 ], [ %336, %332 ]
  %98 = icmp eq i64 %95, %87
  br i1 %98, label %102, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds i32, i32* %84, i64 %95
  %101 = load i32, i32* %100, align 4
  br label %102

102:                                              ; preds = %99, %94
  %103 = phi i32 [ %101, %99 ], [ 1, %94 ]
  %104 = mul nsw i32 %103, %96
  %105 = or i64 %95, 1
  %106 = icmp eq i64 %105, %87
  br i1 %106, label %316, label %313

107:                                              ; preds = %332, %86
  %108 = phi i32 [ undef, %86 ], [ %334, %332 ]
  %109 = phi i64 [ 0, %86 ], [ %335, %332 ]
  %110 = phi i32 [ 1, %86 ], [ %334, %332 ]
  %111 = icmp eq i64 %90, 0
  br i1 %111, label %126, label %112

112:                                              ; preds = %107, %120
  %113 = phi i64 [ %123, %120 ], [ %109, %107 ]
  %114 = phi i32 [ %122, %120 ], [ %110, %107 ]
  %115 = phi i64 [ %124, %120 ], [ %90, %107 ]
  %116 = icmp eq i64 %113, %87
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i32, i32* %84, i64 %113
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %117, %112
  %121 = phi i32 [ %119, %117 ], [ 1, %112 ]
  %122 = mul nsw i32 %121, %114
  %123 = add nuw nsw i64 %113, 1
  %124 = add i64 %115, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %112, !llvm.loop !111

126:                                              ; preds = %107, %120, %74
  %127 = phi i32 [ 1, %74 ], [ %108, %107 ], [ %122, %120 ]
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %129 = icmp sgt i32 %75, 5
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %131 = sext i32 %78 to i64
  %132 = getelementptr inbounds i32, i32* %82, i64 %131
  %133 = bitcast %union.anon* %80 to [5 x i32]*
  %134 = getelementptr inbounds [5 x i32], [5 x i32]* %133, i64 0, i64 %131
  %135 = select i1 %79, i32* %132, i32* %134
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %union.anon, %union.anon* %130, i64 0, i32 0
  %138 = load i32*, i32** %137, align 8
  %139 = getelementptr inbounds i32, i32* %138, i64 %131
  %140 = bitcast %union.anon* %130 to [5 x i32]*
  %141 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i64 0, i64 %131
  %142 = select i1 %129, i32* %139, i32* %141
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, %136
  %145 = select i1 %144, i32 %143, i32 %136
  %146 = icmp sgt i32 %127, 0
  br i1 %146, label %147, label %294

147:                                              ; preds = %126
  %148 = icmp sgt i32 %145, 0
  %149 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 8
  %150 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 7
  %151 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 6
  %152 = sext i32 %145 to i64
  %153 = add nsw i64 %152, -8
  %154 = lshr i64 %153, 3
  %155 = add nuw nsw i64 %154, 1
  %156 = icmp ult i32 %145, 8
  %157 = and i64 %152, -8
  %158 = and i64 %155, 1
  %159 = icmp eq i64 %154, 0
  %160 = sub nuw nsw i64 %155, %158
  %161 = icmp eq i64 %158, 0
  %162 = icmp eq i64 %157, %152
  br label %163

163:                                              ; preds = %267, %147
  %164 = phi i8* [ %41, %147 ], [ %268, %267 ]
  %165 = phi i16* [ %76, %147 ], [ %269, %267 ]
  %166 = phi i32 [ 0, %147 ], [ %270, %267 ]
  br i1 %148, label %167, label %267

167:                                              ; preds = %163
  br i1 %156, label %168, label %171

168:                                              ; preds = %224, %167
  %169 = phi i64 [ 0, %167 ], [ %157, %224 ]
  %170 = phi i32 [ 0, %167 ], [ %235, %224 ]
  br label %242

171:                                              ; preds = %167
  br i1 %159, label %205, label %172

172:                                              ; preds = %171, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %171 ]
  %174 = phi <4 x i32> [ %200, %172 ], [ zeroinitializer, %171 ]
  %175 = phi <4 x i32> [ %201, %172 ], [ zeroinitializer, %171 ]
  %176 = phi i64 [ %203, %172 ], [ %160, %171 ]
  %177 = getelementptr inbounds i8, i8* %164, i64 %173
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = getelementptr inbounds i8, i8* %177, i64 4
  %181 = bitcast i8* %180 to <4 x i8>*
  %182 = load <4 x i8>, <4 x i8>* %181, align 1
  %183 = zext <4 x i8> %179 to <4 x i32>
  %184 = zext <4 x i8> %182 to <4 x i32>
  %185 = icmp ult <4 x i32> %174, %183
  %186 = icmp ult <4 x i32> %175, %184
  %187 = select <4 x i1> %185, <4 x i32> %183, <4 x i32> %174
  %188 = select <4 x i1> %186, <4 x i32> %184, <4 x i32> %175
  %189 = or i64 %173, 8
  %190 = getelementptr inbounds i8, i8* %164, i64 %189
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 4
  %194 = bitcast i8* %193 to <4 x i8>*
  %195 = load <4 x i8>, <4 x i8>* %194, align 1
  %196 = zext <4 x i8> %192 to <4 x i32>
  %197 = zext <4 x i8> %195 to <4 x i32>
  %198 = icmp ult <4 x i32> %187, %196
  %199 = icmp ult <4 x i32> %188, %197
  %200 = select <4 x i1> %198, <4 x i32> %196, <4 x i32> %187
  %201 = select <4 x i1> %199, <4 x i32> %197, <4 x i32> %188
  %202 = add i64 %173, 16
  %203 = add i64 %176, -2
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %172, !llvm.loop !112

205:                                              ; preds = %172, %171
  %206 = phi <4 x i32> [ undef, %171 ], [ %200, %172 ]
  %207 = phi <4 x i32> [ undef, %171 ], [ %201, %172 ]
  %208 = phi i64 [ 0, %171 ], [ %202, %172 ]
  %209 = phi <4 x i32> [ zeroinitializer, %171 ], [ %200, %172 ]
  %210 = phi <4 x i32> [ zeroinitializer, %171 ], [ %201, %172 ]
  br i1 %161, label %224, label %211

211:                                              ; preds = %205
  %212 = getelementptr inbounds i8, i8* %164, i64 %208
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = getelementptr inbounds i8, i8* %212, i64 4
  %216 = bitcast i8* %215 to <4 x i8>*
  %217 = load <4 x i8>, <4 x i8>* %216, align 1
  %218 = zext <4 x i8> %214 to <4 x i32>
  %219 = zext <4 x i8> %217 to <4 x i32>
  %220 = icmp ult <4 x i32> %210, %219
  %221 = select <4 x i1> %220, <4 x i32> %219, <4 x i32> %210
  %222 = icmp ult <4 x i32> %209, %218
  %223 = select <4 x i1> %222, <4 x i32> %218, <4 x i32> %209
  br label %224

224:                                              ; preds = %205, %211
  %225 = phi <4 x i32> [ %206, %205 ], [ %223, %211 ]
  %226 = phi <4 x i32> [ %207, %205 ], [ %221, %211 ]
  %227 = icmp ugt <4 x i32> %225, %226
  %228 = select <4 x i1> %227, <4 x i32> %225, <4 x i32> %226
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %230 = icmp ugt <4 x i32> %228, %229
  %231 = select <4 x i1> %230, <4 x i32> %228, <4 x i32> %229
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %233 = icmp ugt <4 x i32> %231, %232
  %234 = select <4 x i1> %233, <4 x i32> %231, <4 x i32> %232
  %235 = extractelement <4 x i32> %234, i32 0
  br i1 %162, label %236, label %168

236:                                              ; preds = %242, %224
  %237 = phi i32 [ %235, %224 ], [ %249, %242 ]
  %238 = load float*, float** %149, align 8
  %239 = sub nsw i32 255, %237
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds float, float* %238, i64 %240
  br label %256

242:                                              ; preds = %168, %242
  %243 = phi i64 [ %250, %242 ], [ %169, %168 ]
  %244 = phi i32 [ %249, %242 ], [ %170, %168 ]
  %245 = getelementptr inbounds i8, i8* %164, i64 %243
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = icmp ult i32 %244, %247
  %249 = select i1 %248, i32 %247, i32 %244
  %250 = add nuw nsw i64 %243, 1
  %251 = icmp slt i64 %250, %152
  br i1 %251, label %242, label %236, !llvm.loop !113

252:                                              ; preds = %256
  %253 = load float, float* %150, align 8
  %254 = fmul float %264, %253
  %255 = fdiv float 1.000000e+00, %254
  br label %272

256:                                              ; preds = %236, %256
  %257 = phi i64 [ %265, %256 ], [ 0, %236 ]
  %258 = phi float [ %264, %256 ], [ 0.000000e+00, %236 ]
  %259 = getelementptr inbounds i8, i8* %164, i64 %257
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i64
  %262 = getelementptr inbounds float, float* %241, i64 %261
  %263 = load float, float* %262, align 4
  %264 = fadd float %258, %263
  %265 = add nuw nsw i64 %257, 1
  %266 = icmp slt i64 %265, %152
  br i1 %266, label %256, label %252

267:                                              ; preds = %272, %163
  %268 = getelementptr inbounds i8, i8* %164, i64 %152
  %269 = getelementptr inbounds i16, i16* %165, i64 %152
  %270 = add nuw nsw i32 %166, 1
  %271 = icmp eq i32 %270, %127
  br i1 %271, label %292, label %163

272:                                              ; preds = %252, %272
  %273 = phi i64 [ %290, %272 ], [ 0, %252 ]
  %274 = getelementptr inbounds i8, i8* %164, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i64
  %277 = getelementptr inbounds float, float* %241, i64 %276
  %278 = load float, float* %277, align 4
  %279 = fmul float %255, %278
  %280 = load i32, i32* %151, align 4
  %281 = tail call float @llvm.round.f32(float %279) #19
  %282 = fptosi float %281 to i32
  %283 = add nsw i32 %280, %282
  %284 = icmp slt i32 %283, 32767
  %285 = select i1 %284, i32 %283, i32 32767
  %286 = icmp sgt i32 %285, -32768
  %287 = select i1 %286, i32 %285, i32 -32768
  %288 = trunc i32 %287 to i16
  %289 = getelementptr inbounds i16, i16* %165, i64 %273
  store i16 %288, i16* %289, align 2
  %290 = add nuw nsw i64 %273, 1
  %291 = icmp slt i64 %290, %152
  br i1 %291, label %272, label %267

292:                                              ; preds = %267
  %293 = load i32, i32* %128, align 8
  br label %294

294:                                              ; preds = %292, %126
  %295 = phi i32 [ %293, %292 ], [ %75, %126 ]
  %296 = icmp sgt i32 %295, 5
  br i1 %296, label %297, label %303

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %299 = load i32*, i32** %298, align 8
  %300 = icmp eq i32* %299, null
  br i1 %300, label %303, label %301

301:                                              ; preds = %297
  %302 = bitcast i32* %299 to i8*
  tail call void @_ZdaPv(i8* %302) #18
  br label %303

303:                                              ; preds = %294, %297, %301
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #19
  %304 = load i32, i32* %77, align 8
  %305 = icmp sgt i32 %304, 5
  br i1 %305, label %306, label %312

306:                                              ; preds = %303
  %307 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %308 = load i32*, i32** %307, align 8
  %309 = icmp eq i32* %308, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %306
  %311 = bitcast i32* %308 to i8*
  tail call void @_ZdaPv(i8* %311) #18
  br label %312

312:                                              ; preds = %303, %306, %310
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #19
  ret i32 0

313:                                              ; preds = %102
  %314 = getelementptr inbounds i32, i32* %84, i64 %105
  %315 = load i32, i32* %314, align 4
  br label %316

316:                                              ; preds = %313, %102
  %317 = phi i32 [ %315, %313 ], [ 1, %102 ]
  %318 = mul nsw i32 %317, %104
  %319 = or i64 %95, 2
  %320 = icmp eq i64 %319, %87
  br i1 %320, label %324, label %321

321:                                              ; preds = %316
  %322 = getelementptr inbounds i32, i32* %84, i64 %319
  %323 = load i32, i32* %322, align 4
  br label %324

324:                                              ; preds = %321, %316
  %325 = phi i32 [ %323, %321 ], [ 1, %316 ]
  %326 = mul nsw i32 %325, %318
  %327 = or i64 %95, 3
  %328 = icmp eq i64 %327, %87
  br i1 %328, label %332, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds i32, i32* %84, i64 %327
  %331 = load i32, i32* %330, align 4
  br label %332

332:                                              ; preds = %329, %324
  %333 = phi i32 [ %331, %329 ], [ 1, %324 ]
  %334 = mul nsw i32 %333, %326
  %335 = add nuw nsw i64 %95, 4
  %336 = add i64 %97, -4
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %107, label %94
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations16SoftmaxQuantizedIasEE12TfLiteStatusP13TfLiteContextPK12TfLiteTensorPS7_PNS2_13SoftmaxOpDataE(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %"struct.tflite::ops::builtin::activations::SoftmaxOpData"*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #19
  %8 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %10, align 8, !alias.scope !114
  br label %39

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8, !noalias !114
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4, !noalias !114
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %15, i32* %17, align 8, !alias.scope !114
  %18 = icmp sgt i32 %15, 5
  br i1 %18, label %19, label %26

19:                                               ; preds = %11
  %20 = sext i32 %15 to i64
  %21 = shl nsw i64 %20, 2
  %22 = tail call i8* @_Znam(i64 %21) #18, !noalias !114
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %24 = bitcast i32** %23 to i8**
  store i8* %22, i8** %24, align 8, !alias.scope !114
  %25 = bitcast i8* %22 to i32*
  br label %31

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %28 = bitcast %union.anon* %27 to i32*
  %29 = sext i32 %15 to i64
  %30 = shl nsw i64 %29, 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %21, %19 ], [ %30, %26 ]
  %33 = phi i32* [ %25, %19 ], [ %28, %26 ]
  %34 = bitcast i32* %33 to i8*
  %35 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %32, i1 false) #19
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %37 = bitcast %union.TfLitePtrUnion* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %9, %31
  %40 = phi i32 [ %15, %31 ], [ 0, %9 ]
  %41 = phi i8* [ %38, %31 ], [ null, %9 ]
  %42 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #19
  %43 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %45, align 8, !alias.scope !117
  br label %74

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8, !noalias !117
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !noalias !117
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %50, i32* %52, align 8, !alias.scope !117
  %53 = icmp sgt i32 %50, 5
  br i1 %53, label %54, label %61

54:                                               ; preds = %46
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call i8* @_Znam(i64 %56) #18, !noalias !117
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !117
  %60 = bitcast i8* %57 to i32*
  br label %66

61:                                               ; preds = %46
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i32*
  %64 = sext i32 %50 to i64
  %65 = shl nsw i64 %64, 2
  br label %66

66:                                               ; preds = %61, %54
  %67 = phi i64 [ %56, %54 ], [ %65, %61 ]
  %68 = phi i32* [ %60, %54 ], [ %63, %61 ]
  %69 = bitcast i32* %68 to i8*
  %70 = bitcast i32* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %67, i1 false) #19
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to i16**
  %73 = load i16*, i16** %72, align 8
  br label %74

74:                                               ; preds = %44, %66
  %75 = phi i32 [ %50, %66 ], [ 0, %44 ]
  %76 = phi i16* [ %73, %66 ], [ null, %44 ]
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %78 = add nsw i32 %40, -1
  %79 = icmp sgt i32 %40, 5
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %81 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = bitcast %union.anon* %80 to i32*
  %84 = select i1 %79, i32* %82, i32* %83
  %85 = icmp sgt i32 %40, 0
  br i1 %85, label %86, label %126

86:                                               ; preds = %74
  %87 = zext i32 %78 to i64
  %88 = zext i32 %40 to i64
  %89 = add nsw i64 %88, -1
  %90 = and i64 %88, 3
  %91 = icmp ult i64 %89, 3
  br i1 %91, label %107, label %92

92:                                               ; preds = %86
  %93 = sub nsw i64 %88, %90
  br label %94

94:                                               ; preds = %332, %92
  %95 = phi i64 [ 0, %92 ], [ %335, %332 ]
  %96 = phi i32 [ 1, %92 ], [ %334, %332 ]
  %97 = phi i64 [ %93, %92 ], [ %336, %332 ]
  %98 = icmp eq i64 %95, %87
  br i1 %98, label %102, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds i32, i32* %84, i64 %95
  %101 = load i32, i32* %100, align 4
  br label %102

102:                                              ; preds = %99, %94
  %103 = phi i32 [ %101, %99 ], [ 1, %94 ]
  %104 = mul nsw i32 %103, %96
  %105 = or i64 %95, 1
  %106 = icmp eq i64 %105, %87
  br i1 %106, label %316, label %313

107:                                              ; preds = %332, %86
  %108 = phi i32 [ undef, %86 ], [ %334, %332 ]
  %109 = phi i64 [ 0, %86 ], [ %335, %332 ]
  %110 = phi i32 [ 1, %86 ], [ %334, %332 ]
  %111 = icmp eq i64 %90, 0
  br i1 %111, label %126, label %112

112:                                              ; preds = %107, %120
  %113 = phi i64 [ %123, %120 ], [ %109, %107 ]
  %114 = phi i32 [ %122, %120 ], [ %110, %107 ]
  %115 = phi i64 [ %124, %120 ], [ %90, %107 ]
  %116 = icmp eq i64 %113, %87
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i32, i32* %84, i64 %113
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %117, %112
  %121 = phi i32 [ %119, %117 ], [ 1, %112 ]
  %122 = mul nsw i32 %121, %114
  %123 = add nuw nsw i64 %113, 1
  %124 = add i64 %115, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %112, !llvm.loop !120

126:                                              ; preds = %107, %120, %74
  %127 = phi i32 [ 1, %74 ], [ %108, %107 ], [ %122, %120 ]
  %128 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %129 = icmp sgt i32 %75, 5
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %131 = sext i32 %78 to i64
  %132 = getelementptr inbounds i32, i32* %82, i64 %131
  %133 = bitcast %union.anon* %80 to [5 x i32]*
  %134 = getelementptr inbounds [5 x i32], [5 x i32]* %133, i64 0, i64 %131
  %135 = select i1 %79, i32* %132, i32* %134
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %union.anon, %union.anon* %130, i64 0, i32 0
  %138 = load i32*, i32** %137, align 8
  %139 = getelementptr inbounds i32, i32* %138, i64 %131
  %140 = bitcast %union.anon* %130 to [5 x i32]*
  %141 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i64 0, i64 %131
  %142 = select i1 %129, i32* %139, i32* %141
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, %136
  %145 = select i1 %144, i32 %143, i32 %136
  %146 = icmp sgt i32 %127, 0
  br i1 %146, label %147, label %294

147:                                              ; preds = %126
  %148 = icmp sgt i32 %145, 0
  %149 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 8
  %150 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 7
  %151 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::SoftmaxOpData", %"struct.tflite::ops::builtin::activations::SoftmaxOpData"* %3, i64 0, i32 0, i32 6
  %152 = sext i32 %145 to i64
  %153 = add nsw i64 %152, -8
  %154 = lshr i64 %153, 3
  %155 = add nuw nsw i64 %154, 1
  %156 = icmp ult i32 %145, 8
  %157 = and i64 %152, -8
  %158 = and i64 %155, 1
  %159 = icmp eq i64 %154, 0
  %160 = sub nuw nsw i64 %155, %158
  %161 = icmp eq i64 %158, 0
  %162 = icmp eq i64 %157, %152
  br label %163

163:                                              ; preds = %267, %147
  %164 = phi i8* [ %41, %147 ], [ %268, %267 ]
  %165 = phi i16* [ %76, %147 ], [ %269, %267 ]
  %166 = phi i32 [ 0, %147 ], [ %270, %267 ]
  br i1 %148, label %167, label %267

167:                                              ; preds = %163
  br i1 %156, label %168, label %171

168:                                              ; preds = %224, %167
  %169 = phi i64 [ 0, %167 ], [ %157, %224 ]
  %170 = phi i32 [ -128, %167 ], [ %235, %224 ]
  br label %242

171:                                              ; preds = %167
  br i1 %159, label %205, label %172

172:                                              ; preds = %171, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %171 ]
  %174 = phi <4 x i32> [ %200, %172 ], [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ]
  %175 = phi <4 x i32> [ %201, %172 ], [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ]
  %176 = phi i64 [ %203, %172 ], [ %160, %171 ]
  %177 = getelementptr inbounds i8, i8* %164, i64 %173
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = getelementptr inbounds i8, i8* %177, i64 4
  %181 = bitcast i8* %180 to <4 x i8>*
  %182 = load <4 x i8>, <4 x i8>* %181, align 1
  %183 = sext <4 x i8> %179 to <4 x i32>
  %184 = sext <4 x i8> %182 to <4 x i32>
  %185 = icmp slt <4 x i32> %174, %183
  %186 = icmp slt <4 x i32> %175, %184
  %187 = select <4 x i1> %185, <4 x i32> %183, <4 x i32> %174
  %188 = select <4 x i1> %186, <4 x i32> %184, <4 x i32> %175
  %189 = or i64 %173, 8
  %190 = getelementptr inbounds i8, i8* %164, i64 %189
  %191 = bitcast i8* %190 to <4 x i8>*
  %192 = load <4 x i8>, <4 x i8>* %191, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 4
  %194 = bitcast i8* %193 to <4 x i8>*
  %195 = load <4 x i8>, <4 x i8>* %194, align 1
  %196 = sext <4 x i8> %192 to <4 x i32>
  %197 = sext <4 x i8> %195 to <4 x i32>
  %198 = icmp slt <4 x i32> %187, %196
  %199 = icmp slt <4 x i32> %188, %197
  %200 = select <4 x i1> %198, <4 x i32> %196, <4 x i32> %187
  %201 = select <4 x i1> %199, <4 x i32> %197, <4 x i32> %188
  %202 = add i64 %173, 16
  %203 = add i64 %176, -2
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %172, !llvm.loop !121

205:                                              ; preds = %172, %171
  %206 = phi <4 x i32> [ undef, %171 ], [ %200, %172 ]
  %207 = phi <4 x i32> [ undef, %171 ], [ %201, %172 ]
  %208 = phi i64 [ 0, %171 ], [ %202, %172 ]
  %209 = phi <4 x i32> [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ], [ %200, %172 ]
  %210 = phi <4 x i32> [ <i32 -128, i32 -128, i32 -128, i32 -128>, %171 ], [ %201, %172 ]
  br i1 %161, label %224, label %211

211:                                              ; preds = %205
  %212 = getelementptr inbounds i8, i8* %164, i64 %208
  %213 = bitcast i8* %212 to <4 x i8>*
  %214 = load <4 x i8>, <4 x i8>* %213, align 1
  %215 = getelementptr inbounds i8, i8* %212, i64 4
  %216 = bitcast i8* %215 to <4 x i8>*
  %217 = load <4 x i8>, <4 x i8>* %216, align 1
  %218 = sext <4 x i8> %214 to <4 x i32>
  %219 = sext <4 x i8> %217 to <4 x i32>
  %220 = icmp slt <4 x i32> %210, %219
  %221 = select <4 x i1> %220, <4 x i32> %219, <4 x i32> %210
  %222 = icmp slt <4 x i32> %209, %218
  %223 = select <4 x i1> %222, <4 x i32> %218, <4 x i32> %209
  br label %224

224:                                              ; preds = %205, %211
  %225 = phi <4 x i32> [ %206, %205 ], [ %223, %211 ]
  %226 = phi <4 x i32> [ %207, %205 ], [ %221, %211 ]
  %227 = icmp sgt <4 x i32> %225, %226
  %228 = select <4 x i1> %227, <4 x i32> %225, <4 x i32> %226
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %230 = icmp sgt <4 x i32> %228, %229
  %231 = select <4 x i1> %230, <4 x i32> %228, <4 x i32> %229
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %233 = icmp sgt <4 x i32> %231, %232
  %234 = select <4 x i1> %233, <4 x i32> %231, <4 x i32> %232
  %235 = extractelement <4 x i32> %234, i32 0
  br i1 %162, label %236, label %168

236:                                              ; preds = %242, %224
  %237 = phi i32 [ %235, %224 ], [ %249, %242 ]
  %238 = load float*, float** %149, align 8
  %239 = sub nsw i32 255, %237
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds float, float* %238, i64 %240
  br label %256

242:                                              ; preds = %168, %242
  %243 = phi i64 [ %250, %242 ], [ %169, %168 ]
  %244 = phi i32 [ %249, %242 ], [ %170, %168 ]
  %245 = getelementptr inbounds i8, i8* %164, i64 %243
  %246 = load i8, i8* %245, align 1
  %247 = sext i8 %246 to i32
  %248 = icmp slt i32 %244, %247
  %249 = select i1 %248, i32 %247, i32 %244
  %250 = add nuw nsw i64 %243, 1
  %251 = icmp slt i64 %250, %152
  br i1 %251, label %242, label %236, !llvm.loop !122

252:                                              ; preds = %256
  %253 = load float, float* %150, align 8
  %254 = fmul float %264, %253
  %255 = fdiv float 1.000000e+00, %254
  br label %272

256:                                              ; preds = %236, %256
  %257 = phi i64 [ %265, %256 ], [ 0, %236 ]
  %258 = phi float [ %264, %256 ], [ 0.000000e+00, %236 ]
  %259 = getelementptr inbounds i8, i8* %164, i64 %257
  %260 = load i8, i8* %259, align 1
  %261 = sext i8 %260 to i64
  %262 = getelementptr inbounds float, float* %241, i64 %261
  %263 = load float, float* %262, align 4
  %264 = fadd float %258, %263
  %265 = add nuw nsw i64 %257, 1
  %266 = icmp slt i64 %265, %152
  br i1 %266, label %256, label %252

267:                                              ; preds = %272, %163
  %268 = getelementptr inbounds i8, i8* %164, i64 %152
  %269 = getelementptr inbounds i16, i16* %165, i64 %152
  %270 = add nuw nsw i32 %166, 1
  %271 = icmp eq i32 %270, %127
  br i1 %271, label %292, label %163

272:                                              ; preds = %252, %272
  %273 = phi i64 [ %290, %272 ], [ 0, %252 ]
  %274 = getelementptr inbounds i8, i8* %164, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = sext i8 %275 to i64
  %277 = getelementptr inbounds float, float* %241, i64 %276
  %278 = load float, float* %277, align 4
  %279 = fmul float %255, %278
  %280 = load i32, i32* %151, align 4
  %281 = tail call float @llvm.round.f32(float %279) #19
  %282 = fptosi float %281 to i32
  %283 = add nsw i32 %280, %282
  %284 = icmp slt i32 %283, 32767
  %285 = select i1 %284, i32 %283, i32 32767
  %286 = icmp sgt i32 %285, -32768
  %287 = select i1 %286, i32 %285, i32 -32768
  %288 = trunc i32 %287 to i16
  %289 = getelementptr inbounds i16, i16* %165, i64 %273
  store i16 %288, i16* %289, align 2
  %290 = add nuw nsw i64 %273, 1
  %291 = icmp slt i64 %290, %152
  br i1 %291, label %272, label %267

292:                                              ; preds = %267
  %293 = load i32, i32* %128, align 8
  br label %294

294:                                              ; preds = %292, %126
  %295 = phi i32 [ %293, %292 ], [ %75, %126 ]
  %296 = icmp sgt i32 %295, 5
  br i1 %296, label %297, label %303

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %299 = load i32*, i32** %298, align 8
  %300 = icmp eq i32* %299, null
  br i1 %300, label %303, label %301

301:                                              ; preds = %297
  %302 = bitcast i32* %299 to i8*
  tail call void @_ZdaPv(i8* %302) #18
  br label %303

303:                                              ; preds = %294, %297, %301
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #19
  %304 = load i32, i32* %77, align 8
  %305 = icmp sgt i32 %304, 5
  br i1 %305, label %306, label %312

306:                                              ; preds = %303
  %307 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %308 = load i32*, i32** %307, align 8
  %309 = icmp eq i32* %308, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %306
  %311 = bitcast i32* %308 to i8*
  tail call void @_ZdaPv(i8* %311) #18
  br label %312

312:                                              ; preds = %303, %306, %310
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #19
  ret i32 0

313:                                              ; preds = %102
  %314 = getelementptr inbounds i32, i32* %84, i64 %105
  %315 = load i32, i32* %314, align 4
  br label %316

316:                                              ; preds = %313, %102
  %317 = phi i32 [ %315, %313 ], [ 1, %102 ]
  %318 = mul nsw i32 %317, %104
  %319 = or i64 %95, 2
  %320 = icmp eq i64 %319, %87
  br i1 %320, label %324, label %321

321:                                              ; preds = %316
  %322 = getelementptr inbounds i32, i32* %84, i64 %319
  %323 = load i32, i32* %322, align 4
  br label %324

324:                                              ; preds = %321, %316
  %325 = phi i32 [ %323, %321 ], [ 1, %316 ]
  %326 = mul nsw i32 %325, %318
  %327 = or i64 %95, 3
  %328 = icmp eq i64 %327, %87
  br i1 %328, label %332, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds i32, i32* %84, i64 %327
  %331 = load i32, i32* %330, align 4
  br label %332

332:                                              ; preds = %329, %324
  %333 = phi i32 [ %331, %329 ], [ 1, %324 ]
  %334 = mul nsw i32 %333, %326
  %335 = add nuw nsw i64 %95, 4
  %336 = add i64 %97, -4
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %107, label %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations9PreluEvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"struct.tflite::PreluParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"struct.tflite::PreluParams", align 4
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %24 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %23, align 8
  %25 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %2
  %29 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %30 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %29, align 8
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31
  br label %33

33:                                               ; preds = %2, %28
  %34 = phi %struct.TfLiteTensor* [ %32, %28 ], [ null, %2 ]
  %35 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %40 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %39, align 8
  %41 = sext i32 %36 to i64
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 %41
  br label %43

43:                                               ; preds = %33, %38
  %44 = phi %struct.TfLiteTensor* [ %42, %38 ], [ null, %33 ]
  %45 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %46 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %45, align 8
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %46, i64 0, i32 1, i64 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %55, label %50

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %52 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %51, align 8
  %53 = sext i32 %48 to i64
  %54 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %52, i64 %53
  br label %55

55:                                               ; preds = %43, %50
  %56 = phi %struct.TfLiteTensor* [ %54, %50 ], [ null, %43 ]
  %57 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %58 = bitcast i8** %57 to %"struct.tflite::ops::builtin::activations::PreluOpData"**
  %59 = load %"struct.tflite::ops::builtin::activations::PreluOpData"*, %"struct.tflite::ops::builtin::activations::PreluOpData"** %58, align 8
  %60 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 0
  %61 = load i32, i32* %60, align 8
  switch i32 %61, label %1166 [
    i32 1, label %62
    i32 3, label %592
    i32 9, label %879
  ]

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %59, i64 0, i32 5
  %64 = load i8, i8* %63, align 4, !range !123
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %199, label %66

66:                                               ; preds = %62
  %67 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %67) #19
  %68 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %70, align 8, !alias.scope !124
  br label %99

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %73 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %72, align 8, !noalias !124
  %74 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %73, i64 0, i32 0
  %75 = load i32, i32* %74, align 4, !noalias !124
  %76 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %73, i64 0, i32 1, i64 0
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %75, i32* %77, align 8, !alias.scope !124
  %78 = icmp sgt i32 %75, 5
  br i1 %78, label %79, label %86

79:                                               ; preds = %71
  %80 = sext i32 %75 to i64
  %81 = shl nsw i64 %80, 2
  %82 = tail call i8* @_Znam(i64 %81) #18, !noalias !124
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %84 = bitcast i32** %83 to i8**
  store i8* %82, i8** %84, align 8, !alias.scope !124
  %85 = bitcast i8* %82 to i32*
  br label %91

86:                                               ; preds = %71
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %88 = bitcast %union.anon* %87 to i32*
  %89 = sext i32 %75 to i64
  %90 = shl nsw i64 %89, 2
  br label %91

91:                                               ; preds = %86, %79
  %92 = phi i64 [ %81, %79 ], [ %90, %86 ]
  %93 = phi i32* [ %85, %79 ], [ %88, %86 ]
  %94 = bitcast i32* %93 to i8*
  %95 = bitcast i32* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %95, i64 %92, i1 false) #19
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %97 = bitcast %union.TfLitePtrUnion* %96 to float**
  %98 = load float*, float** %97, align 8
  br label %99

99:                                               ; preds = %69, %91
  %100 = phi float* [ %98, %91 ], [ null, %69 ]
  %101 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %101) #19
  %102 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %104, align 8, !alias.scope !127
  br label %133

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %107 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %106, align 8, !noalias !127
  %108 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %107, i64 0, i32 0
  %109 = load i32, i32* %108, align 4, !noalias !127
  %110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %107, i64 0, i32 1, i64 0
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %109, i32* %111, align 8, !alias.scope !127
  %112 = icmp sgt i32 %109, 5
  br i1 %112, label %113, label %120

113:                                              ; preds = %105
  %114 = sext i32 %109 to i64
  %115 = shl nsw i64 %114, 2
  %116 = tail call i8* @_Znam(i64 %115) #18, !noalias !127
  %117 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %118 = bitcast i32** %117 to i8**
  store i8* %116, i8** %118, align 8, !alias.scope !127
  %119 = bitcast i8* %116 to i32*
  br label %125

120:                                              ; preds = %105
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %122 = bitcast %union.anon* %121 to i32*
  %123 = sext i32 %109 to i64
  %124 = shl nsw i64 %123, 2
  br label %125

125:                                              ; preds = %120, %113
  %126 = phi i64 [ %115, %113 ], [ %124, %120 ]
  %127 = phi i32* [ %119, %113 ], [ %122, %120 ]
  %128 = bitcast i32* %127 to i8*
  %129 = bitcast i32* %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %128, i8* align 4 %129, i64 %126, i1 false) #19
  %130 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %131 = bitcast %union.TfLitePtrUnion* %130 to float**
  %132 = load float*, float** %131, align 8
  br label %133

133:                                              ; preds = %103, %125
  %134 = phi float* [ %132, %125 ], [ null, %103 ]
  %135 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %135) #19
  %136 = icmp eq %struct.TfLiteTensor* %56, null
  br i1 %136, label %137, label %139

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %138, align 8, !alias.scope !130
  br label %167

139:                                              ; preds = %133
  %140 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 2
  %141 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %140, align 8, !noalias !130
  %142 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %141, i64 0, i32 0
  %143 = load i32, i32* %142, align 4, !noalias !130
  %144 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %141, i64 0, i32 1, i64 0
  %145 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %143, i32* %145, align 8, !alias.scope !130
  %146 = icmp sgt i32 %143, 5
  br i1 %146, label %147, label %154

147:                                              ; preds = %139
  %148 = sext i32 %143 to i64
  %149 = shl nsw i64 %148, 2
  %150 = tail call i8* @_Znam(i64 %149) #18, !noalias !130
  %151 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %152 = bitcast i32** %151 to i8**
  store i8* %150, i8** %152, align 8, !alias.scope !130
  %153 = bitcast i8* %150 to i32*
  br label %159

154:                                              ; preds = %139
  %155 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %156 = bitcast %union.anon* %155 to i32*
  %157 = sext i32 %143 to i64
  %158 = shl nsw i64 %157, 2
  br label %159

159:                                              ; preds = %154, %147
  %160 = phi i64 [ %149, %147 ], [ %158, %154 ]
  %161 = phi i32* [ %153, %147 ], [ %156, %154 ]
  %162 = bitcast i32* %161 to i8*
  %163 = bitcast i32* %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %162, i8* align 4 %163, i64 %160, i1 false) #19
  %164 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 1
  %165 = bitcast %union.TfLitePtrUnion* %164 to float**
  %166 = load float*, float** %165, align 8
  br label %167

167:                                              ; preds = %137, %159
  %168 = phi float* [ %166, %159 ], [ null, %137 ]
  call void @_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIfffEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %3, float* %100, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, float* %134, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, float* %168, float (float, float)* nonnull @_ZN6tflite3ops7builtin11activations10ApplyPreluIfEET_S4_S4_)
  %169 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = icmp sgt i32 %170, 5
  br i1 %171, label %172, label %178

172:                                              ; preds = %167
  %173 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %174 = load i32*, i32** %173, align 8
  %175 = icmp eq i32* %174, null
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = bitcast i32* %174 to i8*
  call void @_ZdaPv(i8* %177) #18
  br label %178

178:                                              ; preds = %167, %172, %176
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %135) #19
  %179 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %180 = load i32, i32* %179, align 8
  %181 = icmp sgt i32 %180, 5
  br i1 %181, label %182, label %188

182:                                              ; preds = %178
  %183 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %184 = load i32*, i32** %183, align 8
  %185 = icmp eq i32* %184, null
  br i1 %185, label %188, label %186

186:                                              ; preds = %182
  %187 = bitcast i32* %184 to i8*
  call void @_ZdaPv(i8* %187) #18
  br label %188

188:                                              ; preds = %178, %182, %186
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %101) #19
  %189 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %190 = load i32, i32* %189, align 8
  %191 = icmp sgt i32 %190, 5
  br i1 %191, label %192, label %198

192:                                              ; preds = %188
  %193 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %194 = load i32*, i32** %193, align 8
  %195 = icmp eq i32* %194, null
  br i1 %195, label %198, label %196

196:                                              ; preds = %192
  %197 = bitcast i32* %194 to i8*
  call void @_ZdaPv(i8* %197) #18
  br label %198

198:                                              ; preds = %188, %192, %196
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #19
  br label %1170

199:                                              ; preds = %62
  %200 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %200) #19
  %201 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %201, label %202, label %204

202:                                              ; preds = %199
  %203 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %203, align 8, !alias.scope !133
  br label %233

204:                                              ; preds = %199
  %205 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %206 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %205, align 8, !noalias !133
  %207 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %206, i64 0, i32 0
  %208 = load i32, i32* %207, align 4, !noalias !133
  %209 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %206, i64 0, i32 1, i64 0
  %210 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %208, i32* %210, align 8, !alias.scope !133
  %211 = icmp sgt i32 %208, 5
  br i1 %211, label %212, label %219

212:                                              ; preds = %204
  %213 = sext i32 %208 to i64
  %214 = shl nsw i64 %213, 2
  %215 = tail call i8* @_Znam(i64 %214) #18, !noalias !133
  %216 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %217 = bitcast i32** %216 to i8**
  store i8* %215, i8** %217, align 8, !alias.scope !133
  %218 = bitcast i8* %215 to i32*
  br label %224

219:                                              ; preds = %204
  %220 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %221 = bitcast %union.anon* %220 to i32*
  %222 = sext i32 %208 to i64
  %223 = shl nsw i64 %222, 2
  br label %224

224:                                              ; preds = %219, %212
  %225 = phi i64 [ %214, %212 ], [ %223, %219 ]
  %226 = phi i32* [ %218, %212 ], [ %221, %219 ]
  %227 = bitcast i32* %226 to i8*
  %228 = bitcast i32* %209 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %227, i8* align 4 %228, i64 %225, i1 false) #19
  %229 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %230 = bitcast %union.TfLitePtrUnion* %229 to float**
  %231 = load float*, float** %230, align 8
  %232 = bitcast float* %231 to i8*
  br label %233

233:                                              ; preds = %202, %224
  %234 = phi i32 [ %208, %224 ], [ 0, %202 ]
  %235 = phi i8* [ %232, %224 ], [ null, %202 ]
  %236 = phi float* [ %231, %224 ], [ null, %202 ]
  %237 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %237) #19
  %238 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %238, label %239, label %241

239:                                              ; preds = %233
  %240 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %240, align 8, !alias.scope !136
  br label %270

241:                                              ; preds = %233
  %242 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %243 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %242, align 8, !noalias !136
  %244 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %243, i64 0, i32 0
  %245 = load i32, i32* %244, align 4, !noalias !136
  %246 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %243, i64 0, i32 1, i64 0
  %247 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %245, i32* %247, align 8, !alias.scope !136
  %248 = icmp sgt i32 %245, 5
  br i1 %248, label %249, label %256

249:                                              ; preds = %241
  %250 = sext i32 %245 to i64
  %251 = shl nsw i64 %250, 2
  %252 = tail call i8* @_Znam(i64 %251) #18, !noalias !136
  %253 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %254 = bitcast i32** %253 to i8**
  store i8* %252, i8** %254, align 8, !alias.scope !136
  %255 = bitcast i8* %252 to i32*
  br label %261

256:                                              ; preds = %241
  %257 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %258 = bitcast %union.anon* %257 to i32*
  %259 = sext i32 %245 to i64
  %260 = shl nsw i64 %259, 2
  br label %261

261:                                              ; preds = %256, %249
  %262 = phi i64 [ %251, %249 ], [ %260, %256 ]
  %263 = phi i32* [ %255, %249 ], [ %258, %256 ]
  %264 = bitcast i32* %263 to i8*
  %265 = bitcast i32* %246 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %264, i8* align 4 %265, i64 %262, i1 false) #19
  %266 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %267 = bitcast %union.TfLitePtrUnion* %266 to float**
  %268 = load float*, float** %267, align 8
  %269 = bitcast float* %268 to i8*
  br label %270

270:                                              ; preds = %239, %261
  %271 = phi i32 [ %245, %261 ], [ 0, %239 ]
  %272 = phi i8* [ %269, %261 ], [ null, %239 ]
  %273 = phi float* [ %268, %261 ], [ null, %239 ]
  %274 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %274) #19
  %275 = icmp eq %struct.TfLiteTensor* %56, null
  br i1 %275, label %276, label %278

276:                                              ; preds = %270
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %277, align 8, !alias.scope !139
  br label %307

278:                                              ; preds = %270
  %279 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 2
  %280 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %279, align 8, !noalias !139
  %281 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %280, i64 0, i32 0
  %282 = load i32, i32* %281, align 4, !noalias !139
  %283 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %280, i64 0, i32 1, i64 0
  %284 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %282, i32* %284, align 8, !alias.scope !139
  %285 = icmp sgt i32 %282, 5
  br i1 %285, label %286, label %293

286:                                              ; preds = %278
  %287 = sext i32 %282 to i64
  %288 = shl nsw i64 %287, 2
  %289 = tail call i8* @_Znam(i64 %288) #18, !noalias !139
  %290 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %291 = bitcast i32** %290 to i8**
  store i8* %289, i8** %291, align 8, !alias.scope !139
  %292 = bitcast i8* %289 to i32*
  br label %298

293:                                              ; preds = %278
  %294 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %295 = bitcast %union.anon* %294 to i32*
  %296 = sext i32 %282 to i64
  %297 = shl nsw i64 %296, 2
  br label %298

298:                                              ; preds = %293, %286
  %299 = phi i64 [ %288, %286 ], [ %297, %293 ]
  %300 = phi i32* [ %292, %286 ], [ %295, %293 ]
  %301 = bitcast i32* %300 to i8*
  %302 = bitcast i32* %283 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %301, i8* align 4 %302, i64 %299, i1 false) #19
  %303 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 1
  %304 = bitcast %union.TfLitePtrUnion* %303 to float**
  %305 = load float*, float** %304, align 8
  %306 = bitcast float* %305 to i8*
  br label %307

307:                                              ; preds = %276, %298
  %308 = phi i32 [ %282, %298 ], [ 0, %276 ]
  %309 = phi i8* [ %306, %298 ], [ null, %276 ]
  %310 = phi float* [ %305, %298 ], [ null, %276 ]
  %311 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %312 = icmp sgt i32 %234, 5
  br i1 %312, label %313, label %316

313:                                              ; preds = %307
  %314 = getelementptr inbounds %union.anon, %union.anon* %311, i64 0, i32 0
  %315 = load i32*, i32** %314, align 8
  br label %319

316:                                              ; preds = %307
  %317 = bitcast %union.anon* %311 to i32*
  %318 = icmp sgt i32 %234, 0
  br i1 %318, label %319, label %422

319:                                              ; preds = %316, %313
  %320 = phi i32* [ %315, %313 ], [ %317, %316 ]
  %321 = zext i32 %234 to i64
  %322 = icmp ult i32 %234, 8
  br i1 %322, label %408, label %323

323:                                              ; preds = %319
  %324 = and i64 %321, 4294967288
  %325 = add nsw i64 %324, -8
  %326 = lshr exact i64 %325, 3
  %327 = add nuw nsw i64 %326, 1
  %328 = and i64 %327, 3
  %329 = icmp ult i64 %325, 24
  br i1 %329, label %375, label %330

330:                                              ; preds = %323
  %331 = sub nsw i64 %327, %328
  br label %332

332:                                              ; preds = %332, %330
  %333 = phi i64 [ 0, %330 ], [ %372, %332 ]
  %334 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %330 ], [ %370, %332 ]
  %335 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %330 ], [ %371, %332 ]
  %336 = phi i64 [ %331, %330 ], [ %373, %332 ]
  %337 = getelementptr inbounds i32, i32* %320, i64 %333
  %338 = bitcast i32* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 4
  %340 = getelementptr inbounds i32, i32* %337, i64 4
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 4
  %343 = mul nsw <4 x i32> %339, %334
  %344 = mul nsw <4 x i32> %342, %335
  %345 = or i64 %333, 8
  %346 = getelementptr inbounds i32, i32* %320, i64 %345
  %347 = bitcast i32* %346 to <4 x i32>*
  %348 = load <4 x i32>, <4 x i32>* %347, align 4
  %349 = getelementptr inbounds i32, i32* %346, i64 4
  %350 = bitcast i32* %349 to <4 x i32>*
  %351 = load <4 x i32>, <4 x i32>* %350, align 4
  %352 = mul nsw <4 x i32> %348, %343
  %353 = mul nsw <4 x i32> %351, %344
  %354 = or i64 %333, 16
  %355 = getelementptr inbounds i32, i32* %320, i64 %354
  %356 = bitcast i32* %355 to <4 x i32>*
  %357 = load <4 x i32>, <4 x i32>* %356, align 4
  %358 = getelementptr inbounds i32, i32* %355, i64 4
  %359 = bitcast i32* %358 to <4 x i32>*
  %360 = load <4 x i32>, <4 x i32>* %359, align 4
  %361 = mul nsw <4 x i32> %357, %352
  %362 = mul nsw <4 x i32> %360, %353
  %363 = or i64 %333, 24
  %364 = getelementptr inbounds i32, i32* %320, i64 %363
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4
  %367 = getelementptr inbounds i32, i32* %364, i64 4
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4
  %370 = mul nsw <4 x i32> %366, %361
  %371 = mul nsw <4 x i32> %369, %362
  %372 = add i64 %333, 32
  %373 = add i64 %336, -4
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %375, label %332, !llvm.loop !142

375:                                              ; preds = %332, %323
  %376 = phi <4 x i32> [ undef, %323 ], [ %370, %332 ]
  %377 = phi <4 x i32> [ undef, %323 ], [ %371, %332 ]
  %378 = phi i64 [ 0, %323 ], [ %372, %332 ]
  %379 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %323 ], [ %370, %332 ]
  %380 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %323 ], [ %371, %332 ]
  %381 = icmp eq i64 %328, 0
  br i1 %381, label %398, label %382

382:                                              ; preds = %375, %382
  %383 = phi i64 [ %395, %382 ], [ %378, %375 ]
  %384 = phi <4 x i32> [ %393, %382 ], [ %379, %375 ]
  %385 = phi <4 x i32> [ %394, %382 ], [ %380, %375 ]
  %386 = phi i64 [ %396, %382 ], [ %328, %375 ]
  %387 = getelementptr inbounds i32, i32* %320, i64 %383
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = getelementptr inbounds i32, i32* %387, i64 4
  %391 = bitcast i32* %390 to <4 x i32>*
  %392 = load <4 x i32>, <4 x i32>* %391, align 4
  %393 = mul nsw <4 x i32> %389, %384
  %394 = mul nsw <4 x i32> %392, %385
  %395 = add i64 %383, 8
  %396 = add i64 %386, -1
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %398, label %382, !llvm.loop !143

398:                                              ; preds = %382, %375
  %399 = phi <4 x i32> [ %376, %375 ], [ %393, %382 ]
  %400 = phi <4 x i32> [ %377, %375 ], [ %394, %382 ]
  %401 = mul <4 x i32> %400, %399
  %402 = shufflevector <4 x i32> %401, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %403 = mul <4 x i32> %401, %402
  %404 = shufflevector <4 x i32> %403, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %405 = mul <4 x i32> %403, %404
  %406 = extractelement <4 x i32> %405, i32 0
  %407 = icmp eq i64 %324, %321
  br i1 %407, label %419, label %408

408:                                              ; preds = %398, %319
  %409 = phi i64 [ 0, %319 ], [ %324, %398 ]
  %410 = phi i32 [ 1, %319 ], [ %406, %398 ]
  br label %411

411:                                              ; preds = %408, %411
  %412 = phi i64 [ %417, %411 ], [ %409, %408 ]
  %413 = phi i32 [ %416, %411 ], [ %410, %408 ]
  %414 = getelementptr inbounds i32, i32* %320, i64 %412
  %415 = load i32, i32* %414, align 4
  %416 = mul nsw i32 %415, %413
  %417 = add nuw nsw i64 %412, 1
  %418 = icmp eq i64 %417, %321
  br i1 %418, label %419, label %411, !llvm.loop !144

419:                                              ; preds = %411, %398
  %420 = phi i32 [ %406, %398 ], [ %416, %411 ]
  %421 = icmp sgt i32 %420, 0
  br i1 %421, label %422, label %568

422:                                              ; preds = %419, %316
  %423 = phi i32 [ %420, %419 ], [ 1, %316 ]
  %424 = zext i32 %423 to i64
  %425 = icmp ult i32 %423, 8
  br i1 %425, label %528, label %426

426:                                              ; preds = %422
  %427 = getelementptr float, float* %310, i64 %424
  %428 = bitcast float* %427 to i8*
  %429 = getelementptr float, float* %236, i64 %424
  %430 = bitcast float* %429 to i8*
  %431 = getelementptr float, float* %273, i64 %424
  %432 = bitcast float* %431 to i8*
  %433 = icmp ult i8* %309, %430
  %434 = icmp ult i8* %235, %428
  %435 = and i1 %433, %434
  %436 = icmp ult i8* %309, %432
  %437 = icmp ult i8* %272, %428
  %438 = and i1 %436, %437
  %439 = or i1 %435, %438
  br i1 %439, label %528, label %440

440:                                              ; preds = %426
  %441 = and i64 %424, 4294967288
  %442 = add nsw i64 %441, -8
  %443 = lshr exact i64 %442, 3
  %444 = add nuw nsw i64 %443, 1
  %445 = and i64 %444, 1
  %446 = icmp eq i64 %442, 0
  br i1 %446, label %500, label %447

447:                                              ; preds = %440
  %448 = sub nuw nsw i64 %444, %445
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ 0, %447 ], [ %497, %449 ]
  %451 = phi i64 [ %448, %447 ], [ %498, %449 ]
  %452 = getelementptr inbounds float, float* %236, i64 %450
  %453 = bitcast float* %452 to <4 x float>*
  %454 = load <4 x float>, <4 x float>* %453, align 4, !alias.scope !145
  %455 = getelementptr inbounds float, float* %452, i64 4
  %456 = bitcast float* %455 to <4 x float>*
  %457 = load <4 x float>, <4 x float>* %456, align 4, !alias.scope !145
  %458 = getelementptr inbounds float, float* %273, i64 %450
  %459 = bitcast float* %458 to <4 x float>*
  %460 = load <4 x float>, <4 x float>* %459, align 4, !alias.scope !148
  %461 = getelementptr inbounds float, float* %458, i64 4
  %462 = bitcast float* %461 to <4 x float>*
  %463 = load <4 x float>, <4 x float>* %462, align 4, !alias.scope !148
  %464 = fcmp oge <4 x float> %454, zeroinitializer
  %465 = fcmp oge <4 x float> %457, zeroinitializer
  %466 = fmul <4 x float> %454, %460
  %467 = fmul <4 x float> %457, %463
  %468 = select <4 x i1> %464, <4 x float> %454, <4 x float> %466
  %469 = select <4 x i1> %465, <4 x float> %457, <4 x float> %467
  %470 = getelementptr inbounds float, float* %310, i64 %450
  %471 = bitcast float* %470 to <4 x float>*
  store <4 x float> %468, <4 x float>* %471, align 4, !alias.scope !150, !noalias !152
  %472 = getelementptr inbounds float, float* %470, i64 4
  %473 = bitcast float* %472 to <4 x float>*
  store <4 x float> %469, <4 x float>* %473, align 4, !alias.scope !150, !noalias !152
  %474 = or i64 %450, 8
  %475 = getelementptr inbounds float, float* %236, i64 %474
  %476 = bitcast float* %475 to <4 x float>*
  %477 = load <4 x float>, <4 x float>* %476, align 4, !alias.scope !145
  %478 = getelementptr inbounds float, float* %475, i64 4
  %479 = bitcast float* %478 to <4 x float>*
  %480 = load <4 x float>, <4 x float>* %479, align 4, !alias.scope !145
  %481 = getelementptr inbounds float, float* %273, i64 %474
  %482 = bitcast float* %481 to <4 x float>*
  %483 = load <4 x float>, <4 x float>* %482, align 4, !alias.scope !148
  %484 = getelementptr inbounds float, float* %481, i64 4
  %485 = bitcast float* %484 to <4 x float>*
  %486 = load <4 x float>, <4 x float>* %485, align 4, !alias.scope !148
  %487 = fcmp oge <4 x float> %477, zeroinitializer
  %488 = fcmp oge <4 x float> %480, zeroinitializer
  %489 = fmul <4 x float> %477, %483
  %490 = fmul <4 x float> %480, %486
  %491 = select <4 x i1> %487, <4 x float> %477, <4 x float> %489
  %492 = select <4 x i1> %488, <4 x float> %480, <4 x float> %490
  %493 = getelementptr inbounds float, float* %310, i64 %474
  %494 = bitcast float* %493 to <4 x float>*
  store <4 x float> %491, <4 x float>* %494, align 4, !alias.scope !150, !noalias !152
  %495 = getelementptr inbounds float, float* %493, i64 4
  %496 = bitcast float* %495 to <4 x float>*
  store <4 x float> %492, <4 x float>* %496, align 4, !alias.scope !150, !noalias !152
  %497 = add i64 %450, 16
  %498 = add i64 %451, -2
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %449, !llvm.loop !153

500:                                              ; preds = %449, %440
  %501 = phi i64 [ 0, %440 ], [ %497, %449 ]
  %502 = icmp eq i64 %445, 0
  br i1 %502, label %526, label %503

503:                                              ; preds = %500
  %504 = getelementptr inbounds float, float* %236, i64 %501
  %505 = bitcast float* %504 to <4 x float>*
  %506 = load <4 x float>, <4 x float>* %505, align 4, !alias.scope !145
  %507 = getelementptr inbounds float, float* %504, i64 4
  %508 = bitcast float* %507 to <4 x float>*
  %509 = load <4 x float>, <4 x float>* %508, align 4, !alias.scope !145
  %510 = getelementptr inbounds float, float* %273, i64 %501
  %511 = bitcast float* %510 to <4 x float>*
  %512 = load <4 x float>, <4 x float>* %511, align 4, !alias.scope !148
  %513 = getelementptr inbounds float, float* %510, i64 4
  %514 = bitcast float* %513 to <4 x float>*
  %515 = load <4 x float>, <4 x float>* %514, align 4, !alias.scope !148
  %516 = fcmp oge <4 x float> %506, zeroinitializer
  %517 = fcmp oge <4 x float> %509, zeroinitializer
  %518 = fmul <4 x float> %506, %512
  %519 = fmul <4 x float> %509, %515
  %520 = select <4 x i1> %516, <4 x float> %506, <4 x float> %518
  %521 = select <4 x i1> %517, <4 x float> %509, <4 x float> %519
  %522 = getelementptr inbounds float, float* %310, i64 %501
  %523 = bitcast float* %522 to <4 x float>*
  store <4 x float> %520, <4 x float>* %523, align 4, !alias.scope !150, !noalias !152
  %524 = getelementptr inbounds float, float* %522, i64 4
  %525 = bitcast float* %524 to <4 x float>*
  store <4 x float> %521, <4 x float>* %525, align 4, !alias.scope !150, !noalias !152
  br label %526

526:                                              ; preds = %500, %503
  %527 = icmp eq i64 %441, %424
  br i1 %527, label %568, label %528

528:                                              ; preds = %526, %426, %422
  %529 = phi i64 [ 0, %426 ], [ 0, %422 ], [ %441, %526 ]
  %530 = xor i64 %529, -1
  %531 = and i64 %424, 1
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %543, label %533

533:                                              ; preds = %528
  %534 = getelementptr inbounds float, float* %236, i64 %529
  %535 = load float, float* %534, align 4
  %536 = getelementptr inbounds float, float* %273, i64 %529
  %537 = load float, float* %536, align 4
  %538 = fcmp oge float %535, 0.000000e+00
  %539 = fmul float %535, %537
  %540 = select i1 %538, float %535, float %539
  %541 = getelementptr inbounds float, float* %310, i64 %529
  store float %540, float* %541, align 4
  %542 = or i64 %529, 1
  br label %543

543:                                              ; preds = %528, %533
  %544 = phi i64 [ %529, %528 ], [ %542, %533 ]
  %545 = sub nsw i64 0, %424
  %546 = icmp eq i64 %530, %545
  br i1 %546, label %568, label %547

547:                                              ; preds = %543, %547
  %548 = phi i64 [ %566, %547 ], [ %544, %543 ]
  %549 = getelementptr inbounds float, float* %236, i64 %548
  %550 = load float, float* %549, align 4
  %551 = getelementptr inbounds float, float* %273, i64 %548
  %552 = load float, float* %551, align 4
  %553 = fcmp oge float %550, 0.000000e+00
  %554 = fmul float %550, %552
  %555 = select i1 %553, float %550, float %554
  %556 = getelementptr inbounds float, float* %310, i64 %548
  store float %555, float* %556, align 4
  %557 = add nuw nsw i64 %548, 1
  %558 = getelementptr inbounds float, float* %236, i64 %557
  %559 = load float, float* %558, align 4
  %560 = getelementptr inbounds float, float* %273, i64 %557
  %561 = load float, float* %560, align 4
  %562 = fcmp oge float %559, 0.000000e+00
  %563 = fmul float %559, %561
  %564 = select i1 %562, float %559, float %563
  %565 = getelementptr inbounds float, float* %310, i64 %557
  store float %564, float* %565, align 4
  %566 = add nuw nsw i64 %548, 2
  %567 = icmp eq i64 %566, %424
  br i1 %567, label %568, label %547, !llvm.loop !154

568:                                              ; preds = %543, %547, %526, %419
  %569 = icmp sgt i32 %308, 5
  br i1 %569, label %570, label %576

570:                                              ; preds = %568
  %571 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %572 = load i32*, i32** %571, align 8
  %573 = icmp eq i32* %572, null
  br i1 %573, label %576, label %574

574:                                              ; preds = %570
  %575 = bitcast i32* %572 to i8*
  tail call void @_ZdaPv(i8* %575) #18
  br label %576

576:                                              ; preds = %568, %570, %574
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %274) #19
  %577 = icmp sgt i32 %271, 5
  br i1 %577, label %578, label %584

578:                                              ; preds = %576
  %579 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %580 = load i32*, i32** %579, align 8
  %581 = icmp eq i32* %580, null
  br i1 %581, label %584, label %582

582:                                              ; preds = %578
  %583 = bitcast i32* %580 to i8*
  tail call void @_ZdaPv(i8* %583) #18
  br label %584

584:                                              ; preds = %576, %578, %582
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %237) #19
  br i1 %312, label %585, label %591

585:                                              ; preds = %584
  %586 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %587 = load i32*, i32** %586, align 8
  %588 = icmp eq i32* %587, null
  br i1 %588, label %591, label %589

589:                                              ; preds = %585
  %590 = bitcast i32* %587 to i8*
  tail call void @_ZdaPv(i8* %590) #18
  br label %591

591:                                              ; preds = %584, %585, %589
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %200) #19
  br label %1170

592:                                              ; preds = %55
  %593 = bitcast %"struct.tflite::PreluParams"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %593) #19
  %594 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %9, i64 0, i32 0
  %595 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %9, i64 0, i32 1
  %596 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %9, i64 0, i32 2
  %597 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %9, i64 0, i32 3
  %598 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 3, i32 1
  %599 = load i32, i32* %598, align 4
  %600 = sub nsw i32 0, %599
  store i32 %600, i32* %594, align 4
  %601 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 3, i32 1
  %602 = load i32, i32* %601, align 4
  %603 = sub nsw i32 0, %602
  store i32 %603, i32* %595, align 4
  %604 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 3, i32 1
  %605 = load i32, i32* %604, align 4
  store i32 %605, i32* %596, align 4
  %606 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %59, i64 0, i32 1
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 4
  %609 = bitcast i32* %597 to <4 x i32>*
  store <4 x i32> %608, <4 x i32>* %609, align 4
  %610 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %59, i64 0, i32 5
  %611 = load i8, i8* %610, align 4, !range !123
  %612 = icmp eq i8 %611, 0
  br i1 %612, label %745, label %613

613:                                              ; preds = %592
  %614 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %614) #19
  %615 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %615, label %616, label %618

616:                                              ; preds = %613
  %617 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %617, align 8, !alias.scope !155
  br label %646

618:                                              ; preds = %613
  %619 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %620 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %619, align 8, !noalias !155
  %621 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %620, i64 0, i32 0
  %622 = load i32, i32* %621, align 4, !noalias !155
  %623 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %620, i64 0, i32 1, i64 0
  %624 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %622, i32* %624, align 8, !alias.scope !155
  %625 = icmp sgt i32 %622, 5
  br i1 %625, label %626, label %633

626:                                              ; preds = %618
  %627 = sext i32 %622 to i64
  %628 = shl nsw i64 %627, 2
  %629 = tail call i8* @_Znam(i64 %628) #18, !noalias !155
  %630 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %631 = bitcast i32** %630 to i8**
  store i8* %629, i8** %631, align 8, !alias.scope !155
  %632 = bitcast i8* %629 to i32*
  br label %638

633:                                              ; preds = %618
  %634 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %635 = bitcast %union.anon* %634 to i32*
  %636 = sext i32 %622 to i64
  %637 = shl nsw i64 %636, 2
  br label %638

638:                                              ; preds = %633, %626
  %639 = phi i64 [ %628, %626 ], [ %637, %633 ]
  %640 = phi i32* [ %632, %626 ], [ %635, %633 ]
  %641 = bitcast i32* %640 to i8*
  %642 = bitcast i32* %623 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %641, i8* align 4 %642, i64 %639, i1 false) #19
  %643 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %644 = bitcast %union.TfLitePtrUnion* %643 to i8**
  %645 = load i8*, i8** %644, align 8
  br label %646

646:                                              ; preds = %616, %638
  %647 = phi i8* [ %645, %638 ], [ null, %616 ]
  %648 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %648) #19
  %649 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %649, label %650, label %652

650:                                              ; preds = %646
  %651 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %651, align 8, !alias.scope !158
  br label %680

652:                                              ; preds = %646
  %653 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %654 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %653, align 8, !noalias !158
  %655 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %654, i64 0, i32 0
  %656 = load i32, i32* %655, align 4, !noalias !158
  %657 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %654, i64 0, i32 1, i64 0
  %658 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %656, i32* %658, align 8, !alias.scope !158
  %659 = icmp sgt i32 %656, 5
  br i1 %659, label %660, label %667

660:                                              ; preds = %652
  %661 = sext i32 %656 to i64
  %662 = shl nsw i64 %661, 2
  %663 = tail call i8* @_Znam(i64 %662) #18, !noalias !158
  %664 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %665 = bitcast i32** %664 to i8**
  store i8* %663, i8** %665, align 8, !alias.scope !158
  %666 = bitcast i8* %663 to i32*
  br label %672

667:                                              ; preds = %652
  %668 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %669 = bitcast %union.anon* %668 to i32*
  %670 = sext i32 %656 to i64
  %671 = shl nsw i64 %670, 2
  br label %672

672:                                              ; preds = %667, %660
  %673 = phi i64 [ %662, %660 ], [ %671, %667 ]
  %674 = phi i32* [ %666, %660 ], [ %669, %667 ]
  %675 = bitcast i32* %674 to i8*
  %676 = bitcast i32* %657 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %675, i8* align 4 %676, i64 %673, i1 false) #19
  %677 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %678 = bitcast %union.TfLitePtrUnion* %677 to i8**
  %679 = load i8*, i8** %678, align 8
  br label %680

680:                                              ; preds = %650, %672
  %681 = phi i8* [ %679, %672 ], [ null, %650 ]
  %682 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %682) #19
  %683 = icmp eq %struct.TfLiteTensor* %56, null
  br i1 %683, label %684, label %686

684:                                              ; preds = %680
  %685 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %685, align 8, !alias.scope !161
  br label %714

686:                                              ; preds = %680
  %687 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 2
  %688 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %687, align 8, !noalias !161
  %689 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %688, i64 0, i32 0
  %690 = load i32, i32* %689, align 4, !noalias !161
  %691 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %688, i64 0, i32 1, i64 0
  %692 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %690, i32* %692, align 8, !alias.scope !161
  %693 = icmp sgt i32 %690, 5
  br i1 %693, label %694, label %701

694:                                              ; preds = %686
  %695 = sext i32 %690 to i64
  %696 = shl nsw i64 %695, 2
  %697 = tail call i8* @_Znam(i64 %696) #18, !noalias !161
  %698 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %699 = bitcast i32** %698 to i8**
  store i8* %697, i8** %699, align 8, !alias.scope !161
  %700 = bitcast i8* %697 to i32*
  br label %706

701:                                              ; preds = %686
  %702 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %703 = bitcast %union.anon* %702 to i32*
  %704 = sext i32 %690 to i64
  %705 = shl nsw i64 %704, 2
  br label %706

706:                                              ; preds = %701, %694
  %707 = phi i64 [ %696, %694 ], [ %705, %701 ]
  %708 = phi i32* [ %700, %694 ], [ %703, %701 ]
  %709 = bitcast i32* %708 to i8*
  %710 = bitcast i32* %691 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %709, i8* align 4 %710, i64 %707, i1 false) #19
  %711 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 1
  %712 = bitcast %union.TfLitePtrUnion* %711 to i8**
  %713 = load i8*, i8** %712, align 8
  br label %714

714:                                              ; preds = %684, %706
  %715 = phi i8* [ %713, %706 ], [ null, %684 ]
  call void @_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* nonnull dereferenceable(28) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %647, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %681, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, i8* %715)
  %716 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %717 = load i32, i32* %716, align 8
  %718 = icmp sgt i32 %717, 5
  br i1 %718, label %719, label %725

719:                                              ; preds = %714
  %720 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %721 = load i32*, i32** %720, align 8
  %722 = icmp eq i32* %721, null
  br i1 %722, label %725, label %723

723:                                              ; preds = %719
  %724 = bitcast i32* %721 to i8*
  call void @_ZdaPv(i8* %724) #18
  br label %725

725:                                              ; preds = %714, %719, %723
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %682) #19
  %726 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %727 = load i32, i32* %726, align 8
  %728 = icmp sgt i32 %727, 5
  br i1 %728, label %729, label %735

729:                                              ; preds = %725
  %730 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %731 = load i32*, i32** %730, align 8
  %732 = icmp eq i32* %731, null
  br i1 %732, label %735, label %733

733:                                              ; preds = %729
  %734 = bitcast i32* %731 to i8*
  call void @_ZdaPv(i8* %734) #18
  br label %735

735:                                              ; preds = %725, %729, %733
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %648) #19
  %736 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %737 = load i32, i32* %736, align 8
  %738 = icmp sgt i32 %737, 5
  br i1 %738, label %739, label %877

739:                                              ; preds = %735
  %740 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %741 = load i32*, i32** %740, align 8
  %742 = icmp eq i32* %741, null
  br i1 %742, label %877, label %743

743:                                              ; preds = %739
  %744 = bitcast i32* %741 to i8*
  call void @_ZdaPv(i8* %744) #18
  br label %877

745:                                              ; preds = %592
  %746 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %746) #19
  %747 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %747, label %748, label %750

748:                                              ; preds = %745
  %749 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %749, align 8, !alias.scope !164
  br label %778

750:                                              ; preds = %745
  %751 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %752 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %751, align 8, !noalias !164
  %753 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 0
  %754 = load i32, i32* %753, align 4, !noalias !164
  %755 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 1, i64 0
  %756 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %754, i32* %756, align 8, !alias.scope !164
  %757 = icmp sgt i32 %754, 5
  br i1 %757, label %758, label %765

758:                                              ; preds = %750
  %759 = sext i32 %754 to i64
  %760 = shl nsw i64 %759, 2
  %761 = tail call i8* @_Znam(i64 %760) #18, !noalias !164
  %762 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %763 = bitcast i32** %762 to i8**
  store i8* %761, i8** %763, align 8, !alias.scope !164
  %764 = bitcast i8* %761 to i32*
  br label %770

765:                                              ; preds = %750
  %766 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %767 = bitcast %union.anon* %766 to i32*
  %768 = sext i32 %754 to i64
  %769 = shl nsw i64 %768, 2
  br label %770

770:                                              ; preds = %765, %758
  %771 = phi i64 [ %760, %758 ], [ %769, %765 ]
  %772 = phi i32* [ %764, %758 ], [ %767, %765 ]
  %773 = bitcast i32* %772 to i8*
  %774 = bitcast i32* %755 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %773, i8* align 4 %774, i64 %771, i1 false) #19
  %775 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %776 = bitcast %union.TfLitePtrUnion* %775 to i8**
  %777 = load i8*, i8** %776, align 8
  br label %778

778:                                              ; preds = %748, %770
  %779 = phi i8* [ %777, %770 ], [ null, %748 ]
  %780 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %780) #19
  %781 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %781, label %782, label %784

782:                                              ; preds = %778
  %783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %783, align 8, !alias.scope !167
  br label %812

784:                                              ; preds = %778
  %785 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %786 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %785, align 8, !noalias !167
  %787 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 0
  %788 = load i32, i32* %787, align 4, !noalias !167
  %789 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 1, i64 0
  %790 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %788, i32* %790, align 8, !alias.scope !167
  %791 = icmp sgt i32 %788, 5
  br i1 %791, label %792, label %799

792:                                              ; preds = %784
  %793 = sext i32 %788 to i64
  %794 = shl nsw i64 %793, 2
  %795 = tail call i8* @_Znam(i64 %794) #18, !noalias !167
  %796 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %797 = bitcast i32** %796 to i8**
  store i8* %795, i8** %797, align 8, !alias.scope !167
  %798 = bitcast i8* %795 to i32*
  br label %804

799:                                              ; preds = %784
  %800 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %801 = bitcast %union.anon* %800 to i32*
  %802 = sext i32 %788 to i64
  %803 = shl nsw i64 %802, 2
  br label %804

804:                                              ; preds = %799, %792
  %805 = phi i64 [ %794, %792 ], [ %803, %799 ]
  %806 = phi i32* [ %798, %792 ], [ %801, %799 ]
  %807 = bitcast i32* %806 to i8*
  %808 = bitcast i32* %789 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %807, i8* align 4 %808, i64 %805, i1 false) #19
  %809 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %810 = bitcast %union.TfLitePtrUnion* %809 to i8**
  %811 = load i8*, i8** %810, align 8
  br label %812

812:                                              ; preds = %782, %804
  %813 = phi i8* [ %811, %804 ], [ null, %782 ]
  %814 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %814) #19
  %815 = icmp eq %struct.TfLiteTensor* %56, null
  br i1 %815, label %816, label %818

816:                                              ; preds = %812
  %817 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %817, align 8, !alias.scope !170
  br label %846

818:                                              ; preds = %812
  %819 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 2
  %820 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %819, align 8, !noalias !170
  %821 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %820, i64 0, i32 0
  %822 = load i32, i32* %821, align 4, !noalias !170
  %823 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %820, i64 0, i32 1, i64 0
  %824 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %822, i32* %824, align 8, !alias.scope !170
  %825 = icmp sgt i32 %822, 5
  br i1 %825, label %826, label %833

826:                                              ; preds = %818
  %827 = sext i32 %822 to i64
  %828 = shl nsw i64 %827, 2
  %829 = tail call i8* @_Znam(i64 %828) #18, !noalias !170
  %830 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %831 = bitcast i32** %830 to i8**
  store i8* %829, i8** %831, align 8, !alias.scope !170
  %832 = bitcast i8* %829 to i32*
  br label %838

833:                                              ; preds = %818
  %834 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %835 = bitcast %union.anon* %834 to i32*
  %836 = sext i32 %822 to i64
  %837 = shl nsw i64 %836, 2
  br label %838

838:                                              ; preds = %833, %826
  %839 = phi i64 [ %828, %826 ], [ %837, %833 ]
  %840 = phi i32* [ %832, %826 ], [ %835, %833 ]
  %841 = bitcast i32* %840 to i8*
  %842 = bitcast i32* %823 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %841, i8* align 4 %842, i64 %839, i1 false) #19
  %843 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 1
  %844 = bitcast %union.TfLitePtrUnion* %843 to i8**
  %845 = load i8*, i8** %844, align 8
  br label %846

846:                                              ; preds = %816, %838
  %847 = phi i8* [ %845, %838 ], [ null, %816 ]
  call void @_ZN6tflite13reference_ops5PreluIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* nonnull dereferenceable(28) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i8* %779, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %14, i8* %813, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %15, i8* %847)
  %848 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  %849 = load i32, i32* %848, align 8
  %850 = icmp sgt i32 %849, 5
  br i1 %850, label %851, label %857

851:                                              ; preds = %846
  %852 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %853 = load i32*, i32** %852, align 8
  %854 = icmp eq i32* %853, null
  br i1 %854, label %857, label %855

855:                                              ; preds = %851
  %856 = bitcast i32* %853 to i8*
  call void @_ZdaPv(i8* %856) #18
  br label %857

857:                                              ; preds = %846, %851, %855
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %814) #19
  %858 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  %859 = load i32, i32* %858, align 8
  %860 = icmp sgt i32 %859, 5
  br i1 %860, label %861, label %867

861:                                              ; preds = %857
  %862 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %863 = load i32*, i32** %862, align 8
  %864 = icmp eq i32* %863, null
  br i1 %864, label %867, label %865

865:                                              ; preds = %861
  %866 = bitcast i32* %863 to i8*
  call void @_ZdaPv(i8* %866) #18
  br label %867

867:                                              ; preds = %857, %861, %865
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %780) #19
  %868 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %869 = load i32, i32* %868, align 8
  %870 = icmp sgt i32 %869, 5
  br i1 %870, label %871, label %877

871:                                              ; preds = %867
  %872 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %873 = load i32*, i32** %872, align 8
  %874 = icmp eq i32* %873, null
  br i1 %874, label %877, label %875

875:                                              ; preds = %871
  %876 = bitcast i32* %873 to i8*
  call void @_ZdaPv(i8* %876) #18
  br label %877

877:                                              ; preds = %875, %871, %867, %743, %739, %735
  %878 = phi i8* [ %614, %735 ], [ %614, %739 ], [ %614, %743 ], [ %746, %867 ], [ %746, %871 ], [ %746, %875 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %878) #19
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %593) #19
  br label %1170

879:                                              ; preds = %55
  %880 = bitcast %"struct.tflite::PreluParams"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %880) #19
  %881 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %16, i64 0, i32 0
  %882 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %16, i64 0, i32 1
  %883 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %16, i64 0, i32 2
  %884 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %16, i64 0, i32 3
  %885 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 3, i32 1
  %886 = load i32, i32* %885, align 4
  %887 = sub nsw i32 0, %886
  store i32 %887, i32* %881, align 4
  %888 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 3, i32 1
  %889 = load i32, i32* %888, align 4
  %890 = sub nsw i32 0, %889
  store i32 %890, i32* %882, align 4
  %891 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 3, i32 1
  %892 = load i32, i32* %891, align 4
  store i32 %892, i32* %883, align 4
  %893 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %59, i64 0, i32 1
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 4
  %896 = bitcast i32* %884 to <4 x i32>*
  store <4 x i32> %895, <4 x i32>* %896, align 4
  %897 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::PreluOpData", %"struct.tflite::ops::builtin::activations::PreluOpData"* %59, i64 0, i32 5
  %898 = load i8, i8* %897, align 4, !range !123
  %899 = icmp eq i8 %898, 0
  br i1 %899, label %1032, label %900

900:                                              ; preds = %879
  %901 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %901) #19
  %902 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %902, label %903, label %905

903:                                              ; preds = %900
  %904 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %904, align 8, !alias.scope !173
  br label %933

905:                                              ; preds = %900
  %906 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %907 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %906, align 8, !noalias !173
  %908 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %907, i64 0, i32 0
  %909 = load i32, i32* %908, align 4, !noalias !173
  %910 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %907, i64 0, i32 1, i64 0
  %911 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %909, i32* %911, align 8, !alias.scope !173
  %912 = icmp sgt i32 %909, 5
  br i1 %912, label %913, label %920

913:                                              ; preds = %905
  %914 = sext i32 %909 to i64
  %915 = shl nsw i64 %914, 2
  %916 = tail call i8* @_Znam(i64 %915) #18, !noalias !173
  %917 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %918 = bitcast i32** %917 to i8**
  store i8* %916, i8** %918, align 8, !alias.scope !173
  %919 = bitcast i8* %916 to i32*
  br label %925

920:                                              ; preds = %905
  %921 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %922 = bitcast %union.anon* %921 to i32*
  %923 = sext i32 %909 to i64
  %924 = shl nsw i64 %923, 2
  br label %925

925:                                              ; preds = %920, %913
  %926 = phi i64 [ %915, %913 ], [ %924, %920 ]
  %927 = phi i32* [ %919, %913 ], [ %922, %920 ]
  %928 = bitcast i32* %927 to i8*
  %929 = bitcast i32* %910 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %928, i8* align 4 %929, i64 %926, i1 false) #19
  %930 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %931 = bitcast %union.TfLitePtrUnion* %930 to i8**
  %932 = load i8*, i8** %931, align 8
  br label %933

933:                                              ; preds = %903, %925
  %934 = phi i8* [ %932, %925 ], [ null, %903 ]
  %935 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %935) #19
  %936 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %936, label %937, label %939

937:                                              ; preds = %933
  %938 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %938, align 8, !alias.scope !176
  br label %967

939:                                              ; preds = %933
  %940 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %941 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %940, align 8, !noalias !176
  %942 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %941, i64 0, i32 0
  %943 = load i32, i32* %942, align 4, !noalias !176
  %944 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %941, i64 0, i32 1, i64 0
  %945 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %943, i32* %945, align 8, !alias.scope !176
  %946 = icmp sgt i32 %943, 5
  br i1 %946, label %947, label %954

947:                                              ; preds = %939
  %948 = sext i32 %943 to i64
  %949 = shl nsw i64 %948, 2
  %950 = tail call i8* @_Znam(i64 %949) #18, !noalias !176
  %951 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %952 = bitcast i32** %951 to i8**
  store i8* %950, i8** %952, align 8, !alias.scope !176
  %953 = bitcast i8* %950 to i32*
  br label %959

954:                                              ; preds = %939
  %955 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %956 = bitcast %union.anon* %955 to i32*
  %957 = sext i32 %943 to i64
  %958 = shl nsw i64 %957, 2
  br label %959

959:                                              ; preds = %954, %947
  %960 = phi i64 [ %949, %947 ], [ %958, %954 ]
  %961 = phi i32* [ %953, %947 ], [ %956, %954 ]
  %962 = bitcast i32* %961 to i8*
  %963 = bitcast i32* %944 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %962, i8* align 4 %963, i64 %960, i1 false) #19
  %964 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %965 = bitcast %union.TfLitePtrUnion* %964 to i8**
  %966 = load i8*, i8** %965, align 8
  br label %967

967:                                              ; preds = %937, %959
  %968 = phi i8* [ %966, %959 ], [ null, %937 ]
  %969 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %969) #19
  %970 = icmp eq %struct.TfLiteTensor* %56, null
  br i1 %970, label %971, label %973

971:                                              ; preds = %967
  %972 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %972, align 8, !alias.scope !179
  br label %1001

973:                                              ; preds = %967
  %974 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 2
  %975 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %974, align 8, !noalias !179
  %976 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %975, i64 0, i32 0
  %977 = load i32, i32* %976, align 4, !noalias !179
  %978 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %975, i64 0, i32 1, i64 0
  %979 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %977, i32* %979, align 8, !alias.scope !179
  %980 = icmp sgt i32 %977, 5
  br i1 %980, label %981, label %988

981:                                              ; preds = %973
  %982 = sext i32 %977 to i64
  %983 = shl nsw i64 %982, 2
  %984 = tail call i8* @_Znam(i64 %983) #18, !noalias !179
  %985 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %986 = bitcast i32** %985 to i8**
  store i8* %984, i8** %986, align 8, !alias.scope !179
  %987 = bitcast i8* %984 to i32*
  br label %993

988:                                              ; preds = %973
  %989 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %990 = bitcast %union.anon* %989 to i32*
  %991 = sext i32 %977 to i64
  %992 = shl nsw i64 %991, 2
  br label %993

993:                                              ; preds = %988, %981
  %994 = phi i64 [ %983, %981 ], [ %992, %988 ]
  %995 = phi i32* [ %987, %981 ], [ %990, %988 ]
  %996 = bitcast i32* %995 to i8*
  %997 = bitcast i32* %978 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %996, i8* align 4 %997, i64 %994, i1 false) #19
  %998 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 1
  %999 = bitcast %union.TfLitePtrUnion* %998 to i8**
  %1000 = load i8*, i8** %999, align 8
  br label %1001

1001:                                             ; preds = %971, %993
  %1002 = phi i8* [ %1000, %993 ], [ null, %971 ]
  call void @_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* nonnull dereferenceable(28) %16, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %17, i8* %934, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %18, i8* %968, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, i8* %1002)
  %1003 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %1004 = load i32, i32* %1003, align 8
  %1005 = icmp sgt i32 %1004, 5
  br i1 %1005, label %1006, label %1012

1006:                                             ; preds = %1001
  %1007 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %1008 = load i32*, i32** %1007, align 8
  %1009 = icmp eq i32* %1008, null
  br i1 %1009, label %1012, label %1010

1010:                                             ; preds = %1006
  %1011 = bitcast i32* %1008 to i8*
  call void @_ZdaPv(i8* %1011) #18
  br label %1012

1012:                                             ; preds = %1001, %1006, %1010
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %969) #19
  %1013 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  %1014 = load i32, i32* %1013, align 8
  %1015 = icmp sgt i32 %1014, 5
  br i1 %1015, label %1016, label %1022

1016:                                             ; preds = %1012
  %1017 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %1018 = load i32*, i32** %1017, align 8
  %1019 = icmp eq i32* %1018, null
  br i1 %1019, label %1022, label %1020

1020:                                             ; preds = %1016
  %1021 = bitcast i32* %1018 to i8*
  call void @_ZdaPv(i8* %1021) #18
  br label %1022

1022:                                             ; preds = %1012, %1016, %1020
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %935) #19
  %1023 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  %1024 = load i32, i32* %1023, align 8
  %1025 = icmp sgt i32 %1024, 5
  br i1 %1025, label %1026, label %1164

1026:                                             ; preds = %1022
  %1027 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %1028 = load i32*, i32** %1027, align 8
  %1029 = icmp eq i32* %1028, null
  br i1 %1029, label %1164, label %1030

1030:                                             ; preds = %1026
  %1031 = bitcast i32* %1028 to i8*
  call void @_ZdaPv(i8* %1031) #18
  br label %1164

1032:                                             ; preds = %879
  %1033 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1033) #19
  %1034 = icmp eq %struct.TfLiteTensor* %34, null
  br i1 %1034, label %1035, label %1037

1035:                                             ; preds = %1032
  %1036 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %1036, align 8, !alias.scope !182
  br label %1065

1037:                                             ; preds = %1032
  %1038 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %1039 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1038, align 8, !noalias !182
  %1040 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1039, i64 0, i32 0
  %1041 = load i32, i32* %1040, align 4, !noalias !182
  %1042 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1039, i64 0, i32 1, i64 0
  %1043 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %1041, i32* %1043, align 8, !alias.scope !182
  %1044 = icmp sgt i32 %1041, 5
  br i1 %1044, label %1045, label %1052

1045:                                             ; preds = %1037
  %1046 = sext i32 %1041 to i64
  %1047 = shl nsw i64 %1046, 2
  %1048 = tail call i8* @_Znam(i64 %1047) #18, !noalias !182
  %1049 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1050 = bitcast i32** %1049 to i8**
  store i8* %1048, i8** %1050, align 8, !alias.scope !182
  %1051 = bitcast i8* %1048 to i32*
  br label %1057

1052:                                             ; preds = %1037
  %1053 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %1054 = bitcast %union.anon* %1053 to i32*
  %1055 = sext i32 %1041 to i64
  %1056 = shl nsw i64 %1055, 2
  br label %1057

1057:                                             ; preds = %1052, %1045
  %1058 = phi i64 [ %1047, %1045 ], [ %1056, %1052 ]
  %1059 = phi i32* [ %1051, %1045 ], [ %1054, %1052 ]
  %1060 = bitcast i32* %1059 to i8*
  %1061 = bitcast i32* %1042 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1060, i8* align 4 %1061, i64 %1058, i1 false) #19
  %1062 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 1
  %1063 = bitcast %union.TfLitePtrUnion* %1062 to i8**
  %1064 = load i8*, i8** %1063, align 8
  br label %1065

1065:                                             ; preds = %1035, %1057
  %1066 = phi i8* [ %1064, %1057 ], [ null, %1035 ]
  %1067 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1067) #19
  %1068 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %1068, label %1069, label %1071

1069:                                             ; preds = %1065
  %1070 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %1070, align 8, !alias.scope !185
  br label %1099

1071:                                             ; preds = %1065
  %1072 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %1073 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1072, align 8, !noalias !185
  %1074 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1073, i64 0, i32 0
  %1075 = load i32, i32* %1074, align 4, !noalias !185
  %1076 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1073, i64 0, i32 1, i64 0
  %1077 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %1075, i32* %1077, align 8, !alias.scope !185
  %1078 = icmp sgt i32 %1075, 5
  br i1 %1078, label %1079, label %1086

1079:                                             ; preds = %1071
  %1080 = sext i32 %1075 to i64
  %1081 = shl nsw i64 %1080, 2
  %1082 = tail call i8* @_Znam(i64 %1081) #18, !noalias !185
  %1083 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1084 = bitcast i32** %1083 to i8**
  store i8* %1082, i8** %1084, align 8, !alias.scope !185
  %1085 = bitcast i8* %1082 to i32*
  br label %1091

1086:                                             ; preds = %1071
  %1087 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %1088 = bitcast %union.anon* %1087 to i32*
  %1089 = sext i32 %1075 to i64
  %1090 = shl nsw i64 %1089, 2
  br label %1091

1091:                                             ; preds = %1086, %1079
  %1092 = phi i64 [ %1081, %1079 ], [ %1090, %1086 ]
  %1093 = phi i32* [ %1085, %1079 ], [ %1088, %1086 ]
  %1094 = bitcast i32* %1093 to i8*
  %1095 = bitcast i32* %1076 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1094, i8* align 4 %1095, i64 %1092, i1 false) #19
  %1096 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %1097 = bitcast %union.TfLitePtrUnion* %1096 to i8**
  %1098 = load i8*, i8** %1097, align 8
  br label %1099

1099:                                             ; preds = %1069, %1091
  %1100 = phi i8* [ %1098, %1091 ], [ null, %1069 ]
  %1101 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1101) #19
  %1102 = icmp eq %struct.TfLiteTensor* %56, null
  br i1 %1102, label %1103, label %1105

1103:                                             ; preds = %1099
  %1104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %1104, align 8, !alias.scope !188
  br label %1133

1105:                                             ; preds = %1099
  %1106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 2
  %1107 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1106, align 8, !noalias !188
  %1108 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1107, i64 0, i32 0
  %1109 = load i32, i32* %1108, align 4, !noalias !188
  %1110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1107, i64 0, i32 1, i64 0
  %1111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %1109, i32* %1111, align 8, !alias.scope !188
  %1112 = icmp sgt i32 %1109, 5
  br i1 %1112, label %1113, label %1120

1113:                                             ; preds = %1105
  %1114 = sext i32 %1109 to i64
  %1115 = shl nsw i64 %1114, 2
  %1116 = tail call i8* @_Znam(i64 %1115) #18, !noalias !188
  %1117 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1118 = bitcast i32** %1117 to i8**
  store i8* %1116, i8** %1118, align 8, !alias.scope !188
  %1119 = bitcast i8* %1116 to i32*
  br label %1125

1120:                                             ; preds = %1105
  %1121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %1122 = bitcast %union.anon* %1121 to i32*
  %1123 = sext i32 %1109 to i64
  %1124 = shl nsw i64 %1123, 2
  br label %1125

1125:                                             ; preds = %1120, %1113
  %1126 = phi i64 [ %1115, %1113 ], [ %1124, %1120 ]
  %1127 = phi i32* [ %1119, %1113 ], [ %1122, %1120 ]
  %1128 = bitcast i32* %1127 to i8*
  %1129 = bitcast i32* %1110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1128, i8* align 4 %1129, i64 %1126, i1 false) #19
  %1130 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 0, i32 1
  %1131 = bitcast %union.TfLitePtrUnion* %1130 to i8**
  %1132 = load i8*, i8** %1131, align 8
  br label %1133

1133:                                             ; preds = %1103, %1125
  %1134 = phi i8* [ %1132, %1125 ], [ null, %1103 ]
  call void @_ZN6tflite13reference_ops5PreluIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* nonnull dereferenceable(28) %16, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %20, i8* %1066, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %21, i8* %1100, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %22, i8* %1134)
  %1135 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  %1136 = load i32, i32* %1135, align 8
  %1137 = icmp sgt i32 %1136, 5
  br i1 %1137, label %1138, label %1144

1138:                                             ; preds = %1133
  %1139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1140 = load i32*, i32** %1139, align 8
  %1141 = icmp eq i32* %1140, null
  br i1 %1141, label %1144, label %1142

1142:                                             ; preds = %1138
  %1143 = bitcast i32* %1140 to i8*
  call void @_ZdaPv(i8* %1143) #18
  br label %1144

1144:                                             ; preds = %1133, %1138, %1142
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1101) #19
  %1145 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  %1146 = load i32, i32* %1145, align 8
  %1147 = icmp sgt i32 %1146, 5
  br i1 %1147, label %1148, label %1154

1148:                                             ; preds = %1144
  %1149 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1150 = load i32*, i32** %1149, align 8
  %1151 = icmp eq i32* %1150, null
  br i1 %1151, label %1154, label %1152

1152:                                             ; preds = %1148
  %1153 = bitcast i32* %1150 to i8*
  call void @_ZdaPv(i8* %1153) #18
  br label %1154

1154:                                             ; preds = %1144, %1148, %1152
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1067) #19
  %1155 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  %1156 = load i32, i32* %1155, align 8
  %1157 = icmp sgt i32 %1156, 5
  br i1 %1157, label %1158, label %1164

1158:                                             ; preds = %1154
  %1159 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1160 = load i32*, i32** %1159, align 8
  %1161 = icmp eq i32* %1160, null
  br i1 %1161, label %1164, label %1162

1162:                                             ; preds = %1158
  %1163 = bitcast i32* %1160 to i8*
  call void @_ZdaPv(i8* %1163) #18
  br label %1164

1164:                                             ; preds = %1162, %1158, %1154, %1030, %1026, %1022
  %1165 = phi i8* [ %901, %1022 ], [ %901, %1026 ], [ %901, %1030 ], [ %1033, %1154 ], [ %1033, %1158 ], [ %1033, %1162 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1165) #19
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %880) #19
  br label %1170

1166:                                             ; preds = %55
  %1167 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1168 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1167, align 8
  %1169 = tail call i8* @TfLiteTypeGetName(i32 %61) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %1168(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.30, i64 0, i64 0), i8* %1169) #19
  br label %1170

1170:                                             ; preds = %198, %591, %1166, %1164, %877
  %1171 = phi i32 [ 1, %1166 ], [ 0, %1164 ], [ 0, %877 ], [ 0, %591 ], [ 0, %198 ]
  ret i32 %1171
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIfffEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E(%"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, float (float, float)*) local_unnamed_addr #8 comdat {
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"struct.tflite::NdArrayDesc", align 4
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %12 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %13, align 8, !alias.scope !191
  %14 = load i32, i32* %11, align 8, !noalias !191
  %15 = icmp sgt i32 %14, 4
  br i1 %15, label %16, label %17

16:                                               ; preds = %7
  tail call void @abort() #20, !noalias !191
  unreachable

17:                                               ; preds = %7
  store i32 4, i32* %13, align 8, !alias.scope !191
  %18 = sub i32 4, %14
  %19 = icmp sgt i32 %18, 0
  %20 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  br i1 %19, label %21, label %101

21:                                               ; preds = %17
  %22 = bitcast %union.anon* %20 to [5 x i32]*
  %23 = zext i32 %18 to i64
  %24 = icmp ult i32 %18, 8
  br i1 %24, label %94, label %25

25:                                               ; preds = %21
  %26 = and i64 %23, 4294967288
  %27 = add nsw i64 %26, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 7
  %31 = icmp ult i64 %27, 56
  br i1 %31, label %79, label %32

32:                                               ; preds = %25
  %33 = sub nsw i64 %29, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %76, %34 ]
  %36 = phi i64 [ %33, %32 ], [ %77, %34 ]
  %37 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %35
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %38, align 8, !alias.scope !191
  %39 = getelementptr inbounds i32, i32* %37, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %40, align 8, !alias.scope !191
  %41 = or i64 %35, 8
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %41
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %43, align 8, !alias.scope !191
  %44 = getelementptr inbounds i32, i32* %42, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %45, align 8, !alias.scope !191
  %46 = or i64 %35, 16
  %47 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %46
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %48, align 8, !alias.scope !191
  %49 = getelementptr inbounds i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !191
  %51 = or i64 %35, 24
  %52 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %53, align 8, !alias.scope !191
  %54 = getelementptr inbounds i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !191
  %56 = or i64 %35, 32
  %57 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %58, align 8, !alias.scope !191
  %59 = getelementptr inbounds i32, i32* %57, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !191
  %61 = or i64 %35, 40
  %62 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %63, align 8, !alias.scope !191
  %64 = getelementptr inbounds i32, i32* %62, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !191
  %66 = or i64 %35, 48
  %67 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %68, align 8, !alias.scope !191
  %69 = getelementptr inbounds i32, i32* %67, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !191
  %71 = or i64 %35, 56
  %72 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %73, align 8, !alias.scope !191
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !191
  %76 = add i64 %35, 64
  %77 = add i64 %36, -8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %34, !llvm.loop !194

79:                                               ; preds = %34, %25
  %80 = phi i64 [ 0, %25 ], [ %76, %34 ]
  %81 = icmp eq i64 %30, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %79, %82
  %83 = phi i64 [ %89, %82 ], [ %80, %79 ]
  %84 = phi i64 [ %90, %82 ], [ %30, %79 ]
  %85 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %83
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %86, align 8, !alias.scope !191
  %87 = getelementptr inbounds i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %88, align 8, !alias.scope !191
  %89 = add i64 %83, 8
  %90 = add i64 %84, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %82, !llvm.loop !195

92:                                               ; preds = %82, %79
  %93 = icmp eq i64 %26, %23
  br i1 %93, label %101, label %94

94:                                               ; preds = %92, %21
  %95 = phi i64 [ 0, %21 ], [ %26, %92 ]
  br label %96

96:                                               ; preds = %94, %96
  %97 = phi i64 [ %99, %96 ], [ %95, %94 ]
  %98 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %97
  store i32 1, i32* %98, align 4, !alias.scope !191
  %99 = add nuw nsw i64 %97, 1
  %100 = icmp eq i64 %99, %23
  br i1 %100, label %101, label %96, !llvm.loop !196

101:                                              ; preds = %96, %92, %17
  %102 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %103 = bitcast %union.anon* %20 to i32*
  %104 = sext i32 %18 to i64
  %105 = getelementptr inbounds i32, i32* %103, i64 %104
  %106 = bitcast i32* %105 to i8*
  %107 = icmp sgt i32 %14, 5
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %109 = getelementptr inbounds %union.anon, %union.anon* %108, i64 0, i32 0
  %110 = load i32*, i32** %109, align 8, !noalias !191
  %111 = bitcast %union.anon* %108 to i32*
  %112 = select i1 %107, i32* %110, i32* %111
  %113 = bitcast i32* %112 to i8*
  %114 = sext i32 %14 to i64
  %115 = shl nsw i64 %114, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %113, i64 %115, i1 false) #19
  %116 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #19
  %117 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %118 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %119 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %120 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %121 = bitcast %"struct.tflite::NdArrayDesc"* %10 to i8*
  %122 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %122, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %121) #19
  %123 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 0
  %124 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 1
  %125 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 2
  %126 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 3
  %127 = bitcast %"struct.tflite::NdArrayDesc"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %127, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %2, %"struct.tflite::NdArrayDesc"* nonnull %9, %"struct.tflite::NdArrayDesc"* nonnull %10)
  %128 = load i32, i32* %13, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %102, align 8
  %131 = select i1 %129, i32* %130, i32* %103
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %153

134:                                              ; preds = %101
  %135 = bitcast %union.anon* %20 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds i32, i32* %103, i64 1
  %142 = getelementptr inbounds i32, i32* %130, i64 1
  %143 = select i1 %129, i32* %142, i32* %136
  %144 = getelementptr inbounds i32, i32* %130, i64 2
  %145 = select i1 %129, i32* %144, i32* %138
  %146 = getelementptr inbounds i32, i32* %130, i64 3
  %147 = select i1 %129, i32* %146, i32* %140
  br label %148

148:                                              ; preds = %134, %172
  %149 = phi i32 [ %132, %134 ], [ %173, %172 ]
  %150 = phi i32 [ 0, %134 ], [ %174, %172 ]
  %151 = load i32, i32* %143, align 4
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %160, label %172

153:                                              ; preds = %172, %101
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %121) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #19
  %154 = xor i1 %129, true
  %155 = icmp eq i32* %130, null
  %156 = or i1 %155, %154
  br i1 %156, label %159, label %157

157:                                              ; preds = %153
  %158 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %158) #18
  br label %159

159:                                              ; preds = %153, %157
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #19
  ret void

160:                                              ; preds = %148, %189
  %161 = phi i32 [ %190, %189 ], [ %151, %148 ]
  %162 = phi i32 [ %191, %189 ], [ 0, %148 ]
  %163 = load i32, i32* %145, align 4
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %189

165:                                              ; preds = %160
  %166 = load i32, i32* %141, align 4
  %167 = mul nsw i32 %166, %150
  %168 = add nsw i32 %167, %162
  %169 = load i32, i32* %147, align 4
  br label %176

170:                                              ; preds = %189
  %171 = load i32, i32* %131, align 4
  br label %172

172:                                              ; preds = %170, %148
  %173 = phi i32 [ %171, %170 ], [ %149, %148 ]
  %174 = add nuw nsw i32 %150, 1
  %175 = icmp slt i32 %174, %173
  br i1 %175, label %148, label %153

176:                                              ; preds = %165, %195
  %177 = phi i32 [ %163, %165 ], [ %196, %195 ]
  %178 = phi i32 [ %169, %165 ], [ %197, %195 ]
  %179 = phi i32 [ 0, %165 ], [ %198, %195 ]
  %180 = icmp sgt i32 %178, 0
  br i1 %180, label %181, label %195

181:                                              ; preds = %176
  %182 = load i32, i32* %138, align 8
  %183 = mul nsw i32 %168, %182
  %184 = add nsw i32 %183, %179
  %185 = load i32, i32* %140, align 4
  %186 = mul nsw i32 %184, %185
  br label %200

187:                                              ; preds = %195
  %188 = load i32, i32* %143, align 4
  br label %189

189:                                              ; preds = %187, %160
  %190 = phi i32 [ %188, %187 ], [ %161, %160 ]
  %191 = add nuw nsw i32 %162, 1
  %192 = icmp slt i32 %191, %190
  br i1 %192, label %160, label %170

193:                                              ; preds = %200
  %194 = load i32, i32* %145, align 4
  br label %195

195:                                              ; preds = %193, %176
  %196 = phi i32 [ %194, %193 ], [ %177, %176 ]
  %197 = phi i32 [ %235, %193 ], [ %178, %176 ]
  %198 = add nuw nsw i32 %179, 1
  %199 = icmp slt i32 %198, %196
  br i1 %199, label %176, label %187

200:                                              ; preds = %181, %200
  %201 = phi i32 [ 0, %181 ], [ %234, %200 ]
  %202 = add nsw i32 %186, %201
  %203 = load i32, i32* %117, align 4
  %204 = mul nsw i32 %203, %150
  %205 = load i32, i32* %118, align 4
  %206 = mul nsw i32 %205, %162
  %207 = add nsw i32 %206, %204
  %208 = load i32, i32* %119, align 4
  %209 = mul nsw i32 %208, %179
  %210 = add nsw i32 %207, %209
  %211 = load i32, i32* %120, align 4
  %212 = mul nsw i32 %211, %201
  %213 = add nsw i32 %210, %212
  %214 = load i32, i32* %123, align 4
  %215 = mul nsw i32 %214, %150
  %216 = load i32, i32* %124, align 4
  %217 = mul nsw i32 %216, %162
  %218 = add nsw i32 %217, %215
  %219 = load i32, i32* %125, align 4
  %220 = mul nsw i32 %219, %179
  %221 = add nsw i32 %218, %220
  %222 = load i32, i32* %126, align 4
  %223 = mul nsw i32 %222, %201
  %224 = add nsw i32 %221, %223
  %225 = sext i32 %213 to i64
  %226 = getelementptr inbounds float, float* %1, i64 %225
  %227 = load float, float* %226, align 4
  %228 = sext i32 %224 to i64
  %229 = getelementptr inbounds float, float* %3, i64 %228
  %230 = load float, float* %229, align 4
  %231 = call float %6(float %227, float %230) #19
  %232 = sext i32 %202 to i64
  %233 = getelementptr inbounds float, float* %5, i64 %232
  store float %231, float* %233, align 4
  %234 = add nuw nsw i32 %201, 1
  %235 = load i32, i32* %147, align 4
  %236 = icmp slt i32 %234, %235
  br i1 %236, label %200, label %193
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZN6tflite3ops7builtin11activations10ApplyPreluIfEET_S4_S4_(float, float) #0 comdat {
  %3 = fcmp oge float %0, 0.000000e+00
  %4 = fmul float %0, %1
  %5 = select i1 %3, float %0, float %4
  ret float %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"struct.tflite::NdArrayDesc", align 4
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %12 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %13, align 8, !alias.scope !197
  %14 = load i32, i32* %11, align 8, !noalias !197
  %15 = icmp sgt i32 %14, 4
  br i1 %15, label %16, label %17

16:                                               ; preds = %7
  tail call void @abort() #20, !noalias !197
  unreachable

17:                                               ; preds = %7
  store i32 4, i32* %13, align 8, !alias.scope !197
  %18 = sub i32 4, %14
  %19 = icmp sgt i32 %18, 0
  %20 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  br i1 %19, label %21, label %101

21:                                               ; preds = %17
  %22 = bitcast %union.anon* %20 to [5 x i32]*
  %23 = zext i32 %18 to i64
  %24 = icmp ult i32 %18, 8
  br i1 %24, label %94, label %25

25:                                               ; preds = %21
  %26 = and i64 %23, 4294967288
  %27 = add nsw i64 %26, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 7
  %31 = icmp ult i64 %27, 56
  br i1 %31, label %79, label %32

32:                                               ; preds = %25
  %33 = sub nsw i64 %29, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %76, %34 ]
  %36 = phi i64 [ %33, %32 ], [ %77, %34 ]
  %37 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %35
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %38, align 8, !alias.scope !197
  %39 = getelementptr inbounds i32, i32* %37, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %40, align 8, !alias.scope !197
  %41 = or i64 %35, 8
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %41
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %43, align 8, !alias.scope !197
  %44 = getelementptr inbounds i32, i32* %42, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %45, align 8, !alias.scope !197
  %46 = or i64 %35, 16
  %47 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %46
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %48, align 8, !alias.scope !197
  %49 = getelementptr inbounds i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !197
  %51 = or i64 %35, 24
  %52 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %53, align 8, !alias.scope !197
  %54 = getelementptr inbounds i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !197
  %56 = or i64 %35, 32
  %57 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %58, align 8, !alias.scope !197
  %59 = getelementptr inbounds i32, i32* %57, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !197
  %61 = or i64 %35, 40
  %62 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %63, align 8, !alias.scope !197
  %64 = getelementptr inbounds i32, i32* %62, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !197
  %66 = or i64 %35, 48
  %67 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %68, align 8, !alias.scope !197
  %69 = getelementptr inbounds i32, i32* %67, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !197
  %71 = or i64 %35, 56
  %72 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %73, align 8, !alias.scope !197
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !197
  %76 = add i64 %35, 64
  %77 = add i64 %36, -8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %34, !llvm.loop !200

79:                                               ; preds = %34, %25
  %80 = phi i64 [ 0, %25 ], [ %76, %34 ]
  %81 = icmp eq i64 %30, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %79, %82
  %83 = phi i64 [ %89, %82 ], [ %80, %79 ]
  %84 = phi i64 [ %90, %82 ], [ %30, %79 ]
  %85 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %83
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %86, align 8, !alias.scope !197
  %87 = getelementptr inbounds i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %88, align 8, !alias.scope !197
  %89 = add i64 %83, 8
  %90 = add i64 %84, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %82, !llvm.loop !201

92:                                               ; preds = %82, %79
  %93 = icmp eq i64 %26, %23
  br i1 %93, label %101, label %94

94:                                               ; preds = %92, %21
  %95 = phi i64 [ 0, %21 ], [ %26, %92 ]
  br label %96

96:                                               ; preds = %94, %96
  %97 = phi i64 [ %99, %96 ], [ %95, %94 ]
  %98 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %97
  store i32 1, i32* %98, align 4, !alias.scope !197
  %99 = add nuw nsw i64 %97, 1
  %100 = icmp eq i64 %99, %23
  br i1 %100, label %101, label %96, !llvm.loop !202

101:                                              ; preds = %96, %92, %17
  %102 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %103 = bitcast %union.anon* %20 to i32*
  %104 = sext i32 %18 to i64
  %105 = getelementptr inbounds i32, i32* %103, i64 %104
  %106 = bitcast i32* %105 to i8*
  %107 = icmp sgt i32 %14, 5
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %109 = getelementptr inbounds %union.anon, %union.anon* %108, i64 0, i32 0
  %110 = load i32*, i32** %109, align 8, !noalias !197
  %111 = bitcast %union.anon* %108 to i32*
  %112 = select i1 %107, i32* %110, i32* %111
  %113 = bitcast i32* %112 to i8*
  %114 = sext i32 %14 to i64
  %115 = shl nsw i64 %114, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %113, i64 %115, i1 false) #19
  %116 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #19
  %117 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %118 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %119 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %120 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %121 = bitcast %"struct.tflite::NdArrayDesc"* %10 to i8*
  %122 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %122, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %121) #19
  %123 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 0
  %124 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 1
  %125 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 2
  %126 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 3
  %127 = bitcast %"struct.tflite::NdArrayDesc"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %127, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %1, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, %"struct.tflite::NdArrayDesc"* nonnull %9, %"struct.tflite::NdArrayDesc"* nonnull %10)
  %128 = load i32, i32* %13, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %102, align 8
  %131 = select i1 %129, i32* %130, i32* %103
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %160

134:                                              ; preds = %101
  %135 = bitcast %union.anon* %20 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds i32, i32* %103, i64 1
  %142 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 0
  %143 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 1
  %144 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 5
  %145 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 6
  %146 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 3
  %147 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 4
  %148 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 2
  %149 = getelementptr inbounds i32, i32* %130, i64 1
  %150 = select i1 %129, i32* %149, i32* %136
  %151 = getelementptr inbounds i32, i32* %130, i64 2
  %152 = select i1 %129, i32* %151, i32* %138
  %153 = getelementptr inbounds i32, i32* %130, i64 3
  %154 = select i1 %129, i32* %153, i32* %140
  br label %155

155:                                              ; preds = %134, %179
  %156 = phi i32 [ %132, %134 ], [ %180, %179 ]
  %157 = phi i32 [ 0, %134 ], [ %181, %179 ]
  %158 = load i32, i32* %150, align 4
  %159 = icmp sgt i32 %158, 0
  br i1 %159, label %167, label %179

160:                                              ; preds = %179, %101
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %121) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #19
  %161 = xor i1 %129, true
  %162 = icmp eq i32* %130, null
  %163 = or i1 %162, %161
  br i1 %163, label %166, label %164

164:                                              ; preds = %160
  %165 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %165) #18
  br label %166

166:                                              ; preds = %160, %164
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #19
  ret void

167:                                              ; preds = %155, %205
  %168 = phi i32 [ %206, %205 ], [ %158, %155 ]
  %169 = phi i32 [ %207, %205 ], [ 0, %155 ]
  %170 = load i32, i32* %152, align 4
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %205

172:                                              ; preds = %167
  %173 = load i32, i32* %141, align 4
  %174 = mul nsw i32 %173, %157
  %175 = add nsw i32 %174, %169
  %176 = load i32, i32* %154, align 4
  br label %183

177:                                              ; preds = %205
  %178 = load i32, i32* %131, align 4
  br label %179

179:                                              ; preds = %177, %155
  %180 = phi i32 [ %178, %177 ], [ %156, %155 ]
  %181 = add nuw nsw i32 %157, 1
  %182 = icmp slt i32 %181, %180
  br i1 %182, label %155, label %160

183:                                              ; preds = %172, %211
  %184 = phi i32 [ %170, %172 ], [ %212, %211 ]
  %185 = phi i32 [ %176, %172 ], [ %213, %211 ]
  %186 = phi i32 [ 0, %172 ], [ %214, %211 ]
  %187 = icmp sgt i32 %185, 0
  br i1 %187, label %188, label %211

188:                                              ; preds = %183
  %189 = load i32, i32* %138, align 8
  %190 = mul nsw i32 %175, %189
  %191 = add nsw i32 %190, %186
  %192 = load i32, i32* %140, align 4
  %193 = load i32, i32* %117, align 4
  %194 = load i32, i32* %118, align 4
  %195 = load i32, i32* %119, align 4
  %196 = load i32, i32* %120, align 4
  %197 = mul nsw i32 %191, %192
  %198 = mul nsw i32 %193, %157
  %199 = mul nsw i32 %194, %169
  %200 = add nsw i32 %199, %198
  %201 = mul nsw i32 %195, %186
  %202 = add nsw i32 %200, %201
  br label %216

203:                                              ; preds = %211
  %204 = load i32, i32* %150, align 4
  br label %205

205:                                              ; preds = %203, %167
  %206 = phi i32 [ %204, %203 ], [ %168, %167 ]
  %207 = add nuw nsw i32 %169, 1
  %208 = icmp slt i32 %207, %206
  br i1 %208, label %167, label %177

209:                                              ; preds = %318
  %210 = load i32, i32* %152, align 4
  br label %211

211:                                              ; preds = %209, %183
  %212 = phi i32 [ %210, %209 ], [ %184, %183 ]
  %213 = phi i32 [ %335, %209 ], [ %185, %183 ]
  %214 = add nuw nsw i32 %186, 1
  %215 = icmp slt i32 %214, %212
  br i1 %215, label %183, label %203

216:                                              ; preds = %188, %318
  %217 = phi i32 [ 0, %188 ], [ %334, %318 ]
  %218 = add nsw i32 %197, %217
  %219 = mul nsw i32 %196, %217
  %220 = add nsw i32 %202, %219
  %221 = load i32, i32* %142, align 4
  %222 = sext i32 %220 to i64
  %223 = getelementptr inbounds i8, i8* %2, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = add nsw i32 %221, %225
  %227 = icmp sgt i32 %226, -1
  br i1 %227, label %228, label %264

228:                                              ; preds = %216
  %229 = load i32, i32* %146, align 4
  %230 = load i32, i32* %147, align 4
  %231 = icmp sgt i32 %230, 0
  %232 = sub nsw i32 0, %230
  %233 = select i1 %231, i32 0, i32 %232
  %234 = shl i32 1, %230
  %235 = select i1 %231, i32 %234, i32 1
  %236 = mul nsw i32 %235, %226
  %237 = icmp eq i32 %236, %229
  br i1 %237, label %242, label %238

238:                                              ; preds = %228
  %239 = sext i32 %236 to i64
  %240 = sext i32 %229 to i64
  %241 = mul nsw i64 %239, %240
  br label %246

242:                                              ; preds = %228
  %243 = icmp eq i32 %229, -2147483648
  %244 = sext i32 %229 to i64
  %245 = mul nsw i64 %244, %244
  br i1 %243, label %253, label %246

246:                                              ; preds = %242, %238
  %247 = phi i64 [ %241, %238 ], [ %245, %242 ]
  %248 = icmp sgt i64 %247, -1
  %249 = select i1 %248, i64 1073741824, i64 -1073741823
  %250 = add nsw i64 %249, %247
  %251 = sdiv i64 %250, 2147483648
  %252 = trunc i64 %251 to i32
  br label %253

253:                                              ; preds = %242, %246
  %254 = phi i32 [ %252, %246 ], [ 2147483647, %242 ]
  %255 = zext i32 %233 to i64
  %256 = shl nsw i64 -1, %255
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, -1
  %259 = and i32 %254, %258
  %260 = ashr i32 %258, 1
  %261 = lshr i32 %254, 31
  %262 = add nsw i32 %261, %260
  %263 = ashr i32 %254, %233
  br label %318

264:                                              ; preds = %216
  %265 = load i32, i32* %123, align 4
  %266 = mul nsw i32 %265, %157
  %267 = load i32, i32* %124, align 4
  %268 = mul nsw i32 %267, %169
  %269 = add nsw i32 %268, %266
  %270 = load i32, i32* %125, align 4
  %271 = mul nsw i32 %270, %186
  %272 = add nsw i32 %269, %271
  %273 = load i32, i32* %126, align 4
  %274 = mul nsw i32 %273, %217
  %275 = add nsw i32 %272, %274
  %276 = load i32, i32* %143, align 4
  %277 = sext i32 %275 to i64
  %278 = getelementptr inbounds i8, i8* %4, i64 %277
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = add nsw i32 %276, %280
  %282 = mul nsw i32 %281, %226
  %283 = load i32, i32* %144, align 4
  %284 = load i32, i32* %145, align 4
  %285 = icmp sgt i32 %284, 0
  %286 = sub nsw i32 0, %284
  %287 = select i1 %285, i32 0, i32 %286
  %288 = shl i32 1, %284
  %289 = select i1 %285, i32 %288, i32 1
  %290 = mul nsw i32 %282, %289
  %291 = icmp eq i32 %290, %283
  br i1 %291, label %296, label %292

292:                                              ; preds = %264
  %293 = sext i32 %290 to i64
  %294 = sext i32 %283 to i64
  %295 = mul nsw i64 %293, %294
  br label %300

296:                                              ; preds = %264
  %297 = icmp eq i32 %283, -2147483648
  %298 = sext i32 %283 to i64
  %299 = mul nsw i64 %298, %298
  br i1 %297, label %307, label %300

300:                                              ; preds = %296, %292
  %301 = phi i64 [ %295, %292 ], [ %299, %296 ]
  %302 = icmp sgt i64 %301, -1
  %303 = select i1 %302, i64 1073741824, i64 -1073741823
  %304 = add nsw i64 %303, %301
  %305 = sdiv i64 %304, 2147483648
  %306 = trunc i64 %305 to i32
  br label %307

307:                                              ; preds = %296, %300
  %308 = phi i32 [ %306, %300 ], [ 2147483647, %296 ]
  %309 = zext i32 %287 to i64
  %310 = shl nsw i64 -1, %309
  %311 = trunc i64 %310 to i32
  %312 = xor i32 %311, -1
  %313 = and i32 %308, %312
  %314 = ashr i32 %312, 1
  %315 = lshr i32 %308, 31
  %316 = add nsw i32 %315, %314
  %317 = ashr i32 %308, %287
  br label %318

318:                                              ; preds = %307, %253
  %319 = phi i32 [ %316, %307 ], [ %262, %253 ]
  %320 = phi i32 [ %313, %307 ], [ %259, %253 ]
  %321 = phi i32 [ %317, %307 ], [ %263, %253 ]
  %322 = icmp sgt i32 %320, %319
  %323 = zext i1 %322 to i32
  %324 = add nsw i32 %321, %323
  %325 = load i32, i32* %148, align 4
  %326 = add nsw i32 %325, %324
  %327 = icmp sgt i32 %326, 0
  %328 = select i1 %327, i32 %326, i32 0
  %329 = icmp slt i32 %328, 255
  %330 = select i1 %329, i32 %328, i32 255
  %331 = trunc i32 %330 to i8
  %332 = sext i32 %218 to i64
  %333 = getelementptr inbounds i8, i8* %6, i64 %332
  store i8 %331, i8* %333, align 1
  %334 = add nuw nsw i32 %217, 1
  %335 = load i32, i32* %154, align 4
  %336 = icmp slt i32 %334, %335
  br i1 %336, label %216, label %209
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops5PreluIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 5
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  br i1 %10, label %12, label %15

12:                                               ; preds = %7
  %13 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  br label %18

15:                                               ; preds = %7
  %16 = bitcast %union.anon* %11 to i32*
  %17 = icmp sgt i32 %9, 0
  br i1 %17, label %18, label %118

18:                                               ; preds = %15, %12
  %19 = phi i32* [ %14, %12 ], [ %16, %15 ]
  %20 = zext i32 %9 to i64
  %21 = icmp ult i32 %9, 8
  br i1 %21, label %107, label %22

22:                                               ; preds = %18
  %23 = and i64 %20, 4294967288
  %24 = add nsw i64 %23, -8
  %25 = lshr exact i64 %24, 3
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 3
  %28 = icmp ult i64 %24, 24
  br i1 %28, label %74, label %29

29:                                               ; preds = %22
  %30 = sub nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %71, %31 ]
  %33 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %29 ], [ %69, %31 ]
  %34 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %29 ], [ %70, %31 ]
  %35 = phi i64 [ %30, %29 ], [ %72, %31 ]
  %36 = getelementptr inbounds i32, i32* %19, i64 %32
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = mul nsw <4 x i32> %38, %33
  %43 = mul nsw <4 x i32> %41, %34
  %44 = or i64 %32, 8
  %45 = getelementptr inbounds i32, i32* %19, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = mul nsw <4 x i32> %47, %42
  %52 = mul nsw <4 x i32> %50, %43
  %53 = or i64 %32, 16
  %54 = getelementptr inbounds i32, i32* %19, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = getelementptr inbounds i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = mul nsw <4 x i32> %56, %51
  %61 = mul nsw <4 x i32> %59, %52
  %62 = or i64 %32, 24
  %63 = getelementptr inbounds i32, i32* %19, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = mul nsw <4 x i32> %65, %60
  %70 = mul nsw <4 x i32> %68, %61
  %71 = add i64 %32, 32
  %72 = add i64 %35, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %31, !llvm.loop !203

74:                                               ; preds = %31, %22
  %75 = phi <4 x i32> [ undef, %22 ], [ %69, %31 ]
  %76 = phi <4 x i32> [ undef, %22 ], [ %70, %31 ]
  %77 = phi i64 [ 0, %22 ], [ %71, %31 ]
  %78 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %69, %31 ]
  %79 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %70, %31 ]
  %80 = icmp eq i64 %27, 0
  br i1 %80, label %97, label %81

81:                                               ; preds = %74, %81
  %82 = phi i64 [ %94, %81 ], [ %77, %74 ]
  %83 = phi <4 x i32> [ %92, %81 ], [ %78, %74 ]
  %84 = phi <4 x i32> [ %93, %81 ], [ %79, %74 ]
  %85 = phi i64 [ %95, %81 ], [ %27, %74 ]
  %86 = getelementptr inbounds i32, i32* %19, i64 %82
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4
  %89 = getelementptr inbounds i32, i32* %86, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4
  %92 = mul nsw <4 x i32> %88, %83
  %93 = mul nsw <4 x i32> %91, %84
  %94 = add i64 %82, 8
  %95 = add i64 %85, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %81, !llvm.loop !204

97:                                               ; preds = %81, %74
  %98 = phi <4 x i32> [ %75, %74 ], [ %92, %81 ]
  %99 = phi <4 x i32> [ %76, %74 ], [ %93, %81 ]
  %100 = mul <4 x i32> %99, %98
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %104 = mul <4 x i32> %102, %103
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = icmp eq i64 %23, %20
  br i1 %106, label %118, label %107

107:                                              ; preds = %97, %18
  %108 = phi i64 [ 0, %18 ], [ %23, %97 ]
  %109 = phi i32 [ 1, %18 ], [ %105, %97 ]
  br label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %116, %110 ], [ %108, %107 ]
  %112 = phi i32 [ %115, %110 ], [ %109, %107 ]
  %113 = getelementptr inbounds i32, i32* %19, i64 %111
  %114 = load i32, i32* %113, align 4
  %115 = mul nsw i32 %114, %112
  %116 = add nuw nsw i64 %111, 1
  %117 = icmp eq i64 %116, %20
  br i1 %117, label %118, label %110, !llvm.loop !205

118:                                              ; preds = %110, %97, %15
  %119 = phi i32 [ 1, %15 ], [ %105, %97 ], [ %115, %110 ]
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %121 = load i32, i32* %120, align 8
  %122 = icmp sgt i32 %121, 5
  %123 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  br i1 %122, label %124, label %127

124:                                              ; preds = %118
  %125 = getelementptr inbounds %union.anon, %union.anon* %123, i64 0, i32 0
  %126 = load i32*, i32** %125, align 8
  br label %130

127:                                              ; preds = %118
  %128 = bitcast %union.anon* %123 to i32*
  %129 = icmp sgt i32 %121, 0
  br i1 %129, label %130, label %230

130:                                              ; preds = %127, %124
  %131 = phi i32* [ %126, %124 ], [ %128, %127 ]
  %132 = zext i32 %121 to i64
  %133 = icmp ult i32 %121, 8
  br i1 %133, label %219, label %134

134:                                              ; preds = %130
  %135 = and i64 %132, 4294967288
  %136 = add nsw i64 %135, -8
  %137 = lshr exact i64 %136, 3
  %138 = add nuw nsw i64 %137, 1
  %139 = and i64 %138, 3
  %140 = icmp ult i64 %136, 24
  br i1 %140, label %186, label %141

141:                                              ; preds = %134
  %142 = sub nsw i64 %138, %139
  br label %143

143:                                              ; preds = %143, %141
  %144 = phi i64 [ 0, %141 ], [ %183, %143 ]
  %145 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %141 ], [ %181, %143 ]
  %146 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %141 ], [ %182, %143 ]
  %147 = phi i64 [ %142, %141 ], [ %184, %143 ]
  %148 = getelementptr inbounds i32, i32* %131, i64 %144
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, %145
  %155 = mul nsw <4 x i32> %153, %146
  %156 = or i64 %144, 8
  %157 = getelementptr inbounds i32, i32* %131, i64 %156
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %144, 16
  %166 = getelementptr inbounds i32, i32* %131, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %144, 24
  %175 = getelementptr inbounds i32, i32* %131, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = add i64 %144, 32
  %184 = add i64 %147, -4
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %143, !llvm.loop !206

186:                                              ; preds = %143, %134
  %187 = phi <4 x i32> [ undef, %134 ], [ %181, %143 ]
  %188 = phi <4 x i32> [ undef, %134 ], [ %182, %143 ]
  %189 = phi i64 [ 0, %134 ], [ %183, %143 ]
  %190 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %134 ], [ %181, %143 ]
  %191 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %134 ], [ %182, %143 ]
  %192 = icmp eq i64 %139, 0
  br i1 %192, label %209, label %193

193:                                              ; preds = %186, %193
  %194 = phi i64 [ %206, %193 ], [ %189, %186 ]
  %195 = phi <4 x i32> [ %204, %193 ], [ %190, %186 ]
  %196 = phi <4 x i32> [ %205, %193 ], [ %191, %186 ]
  %197 = phi i64 [ %207, %193 ], [ %139, %186 ]
  %198 = getelementptr inbounds i32, i32* %131, i64 %194
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4
  %201 = getelementptr inbounds i32, i32* %198, i64 4
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4
  %204 = mul nsw <4 x i32> %200, %195
  %205 = mul nsw <4 x i32> %203, %196
  %206 = add i64 %194, 8
  %207 = add i64 %197, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %193, !llvm.loop !207

209:                                              ; preds = %193, %186
  %210 = phi <4 x i32> [ %187, %186 ], [ %204, %193 ]
  %211 = phi <4 x i32> [ %188, %186 ], [ %205, %193 ]
  %212 = mul <4 x i32> %211, %210
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %214 = mul <4 x i32> %212, %213
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %216 = mul <4 x i32> %214, %215
  %217 = extractelement <4 x i32> %216, i32 0
  %218 = icmp eq i64 %135, %132
  br i1 %218, label %230, label %219

219:                                              ; preds = %209, %130
  %220 = phi i64 [ 0, %130 ], [ %135, %209 ]
  %221 = phi i32 [ 1, %130 ], [ %217, %209 ]
  br label %222

222:                                              ; preds = %219, %222
  %223 = phi i64 [ %228, %222 ], [ %220, %219 ]
  %224 = phi i32 [ %227, %222 ], [ %221, %219 ]
  %225 = getelementptr inbounds i32, i32* %131, i64 %223
  %226 = load i32, i32* %225, align 4
  %227 = mul nsw i32 %226, %224
  %228 = add nuw nsw i64 %223, 1
  %229 = icmp eq i64 %228, %132
  br i1 %229, label %230, label %222, !llvm.loop !208

230:                                              ; preds = %222, %209, %127
  %231 = phi i32 [ 1, %127 ], [ %217, %209 ], [ %227, %222 ]
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %233 = load i32, i32* %232, align 8
  %234 = icmp sgt i32 %233, 5
  %235 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %234, label %236, label %239

236:                                              ; preds = %230
  %237 = getelementptr inbounds %union.anon, %union.anon* %235, i64 0, i32 0
  %238 = load i32*, i32** %237, align 8
  br label %242

239:                                              ; preds = %230
  %240 = bitcast %union.anon* %235 to i32*
  %241 = icmp sgt i32 %233, 0
  br i1 %241, label %242, label %342

242:                                              ; preds = %239, %236
  %243 = phi i32* [ %238, %236 ], [ %240, %239 ]
  %244 = zext i32 %233 to i64
  %245 = icmp ult i32 %233, 8
  br i1 %245, label %331, label %246

246:                                              ; preds = %242
  %247 = and i64 %244, 4294967288
  %248 = add nsw i64 %247, -8
  %249 = lshr exact i64 %248, 3
  %250 = add nuw nsw i64 %249, 1
  %251 = and i64 %250, 3
  %252 = icmp ult i64 %248, 24
  br i1 %252, label %298, label %253

253:                                              ; preds = %246
  %254 = sub nsw i64 %250, %251
  br label %255

255:                                              ; preds = %255, %253
  %256 = phi i64 [ 0, %253 ], [ %295, %255 ]
  %257 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %253 ], [ %293, %255 ]
  %258 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %253 ], [ %294, %255 ]
  %259 = phi i64 [ %254, %253 ], [ %296, %255 ]
  %260 = getelementptr inbounds i32, i32* %243, i64 %256
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 4
  %263 = getelementptr inbounds i32, i32* %260, i64 4
  %264 = bitcast i32* %263 to <4 x i32>*
  %265 = load <4 x i32>, <4 x i32>* %264, align 4
  %266 = mul nsw <4 x i32> %262, %257
  %267 = mul nsw <4 x i32> %265, %258
  %268 = or i64 %256, 8
  %269 = getelementptr inbounds i32, i32* %243, i64 %268
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4
  %272 = getelementptr inbounds i32, i32* %269, i64 4
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4
  %275 = mul nsw <4 x i32> %271, %266
  %276 = mul nsw <4 x i32> %274, %267
  %277 = or i64 %256, 16
  %278 = getelementptr inbounds i32, i32* %243, i64 %277
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4
  %281 = getelementptr inbounds i32, i32* %278, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4
  %284 = mul nsw <4 x i32> %280, %275
  %285 = mul nsw <4 x i32> %283, %276
  %286 = or i64 %256, 24
  %287 = getelementptr inbounds i32, i32* %243, i64 %286
  %288 = bitcast i32* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 4
  %290 = getelementptr inbounds i32, i32* %287, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 4
  %293 = mul nsw <4 x i32> %289, %284
  %294 = mul nsw <4 x i32> %292, %285
  %295 = add i64 %256, 32
  %296 = add i64 %259, -4
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %255, !llvm.loop !209

298:                                              ; preds = %255, %246
  %299 = phi <4 x i32> [ undef, %246 ], [ %293, %255 ]
  %300 = phi <4 x i32> [ undef, %246 ], [ %294, %255 ]
  %301 = phi i64 [ 0, %246 ], [ %295, %255 ]
  %302 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %246 ], [ %293, %255 ]
  %303 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %246 ], [ %294, %255 ]
  %304 = icmp eq i64 %251, 0
  br i1 %304, label %321, label %305

305:                                              ; preds = %298, %305
  %306 = phi i64 [ %318, %305 ], [ %301, %298 ]
  %307 = phi <4 x i32> [ %316, %305 ], [ %302, %298 ]
  %308 = phi <4 x i32> [ %317, %305 ], [ %303, %298 ]
  %309 = phi i64 [ %319, %305 ], [ %251, %298 ]
  %310 = getelementptr inbounds i32, i32* %243, i64 %306
  %311 = bitcast i32* %310 to <4 x i32>*
  %312 = load <4 x i32>, <4 x i32>* %311, align 4
  %313 = getelementptr inbounds i32, i32* %310, i64 4
  %314 = bitcast i32* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 4
  %316 = mul nsw <4 x i32> %312, %307
  %317 = mul nsw <4 x i32> %315, %308
  %318 = add i64 %306, 8
  %319 = add i64 %309, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %305, !llvm.loop !210

321:                                              ; preds = %305, %298
  %322 = phi <4 x i32> [ %299, %298 ], [ %316, %305 ]
  %323 = phi <4 x i32> [ %300, %298 ], [ %317, %305 ]
  %324 = mul <4 x i32> %323, %322
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %326 = mul <4 x i32> %324, %325
  %327 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %328 = mul <4 x i32> %326, %327
  %329 = extractelement <4 x i32> %328, i32 0
  %330 = icmp eq i64 %247, %244
  br i1 %330, label %342, label %331

331:                                              ; preds = %321, %242
  %332 = phi i64 [ 0, %242 ], [ %247, %321 ]
  %333 = phi i32 [ 1, %242 ], [ %329, %321 ]
  br label %334

334:                                              ; preds = %331, %334
  %335 = phi i64 [ %340, %334 ], [ %332, %331 ]
  %336 = phi i32 [ %339, %334 ], [ %333, %331 ]
  %337 = getelementptr inbounds i32, i32* %243, i64 %335
  %338 = load i32, i32* %337, align 4
  %339 = mul nsw i32 %338, %336
  %340 = add nuw nsw i64 %335, 1
  %341 = icmp eq i64 %340, %244
  br i1 %341, label %342, label %334, !llvm.loop !211

342:                                              ; preds = %334, %321, %239
  %343 = phi i32 [ 1, %239 ], [ %329, %321 ], [ %339, %334 ]
  %344 = icmp eq i32 %119, %231
  br i1 %344, label %346, label %345

345:                                              ; preds = %342
  tail call void @abort() #20
  unreachable

346:                                              ; preds = %342
  %347 = icmp eq i32 %119, %343
  br i1 %347, label %348, label %359

348:                                              ; preds = %346
  %349 = icmp sgt i32 %119, 0
  br i1 %349, label %350, label %360

350:                                              ; preds = %348
  %351 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 0
  %352 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 1
  %353 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 5
  %354 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 6
  %355 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 3
  %356 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 4
  %357 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 2
  %358 = zext i32 %119 to i64
  br label %361

359:                                              ; preds = %346
  tail call void @abort() #20
  unreachable

360:                                              ; preds = %447, %348
  ret void

361:                                              ; preds = %447, %350
  %362 = phi i64 [ 0, %350 ], [ %462, %447 ]
  %363 = load i32, i32* %351, align 4
  %364 = getelementptr inbounds i8, i8* %2, i64 %362
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = add nsw i32 %363, %366
  %368 = icmp sgt i32 %367, -1
  br i1 %368, label %369, label %405

369:                                              ; preds = %361
  %370 = load i32, i32* %355, align 4
  %371 = load i32, i32* %356, align 4
  %372 = icmp sgt i32 %371, 0
  %373 = sub nsw i32 0, %371
  %374 = select i1 %372, i32 0, i32 %373
  %375 = shl i32 1, %371
  %376 = select i1 %372, i32 %375, i32 1
  %377 = mul nsw i32 %376, %367
  %378 = icmp eq i32 %377, %370
  br i1 %378, label %383, label %379

379:                                              ; preds = %369
  %380 = sext i32 %377 to i64
  %381 = sext i32 %370 to i64
  %382 = mul nsw i64 %380, %381
  br label %387

383:                                              ; preds = %369
  %384 = icmp eq i32 %370, -2147483648
  %385 = sext i32 %370 to i64
  %386 = mul nsw i64 %385, %385
  br i1 %384, label %394, label %387

387:                                              ; preds = %383, %379
  %388 = phi i64 [ %382, %379 ], [ %386, %383 ]
  %389 = icmp sgt i64 %388, -1
  %390 = select i1 %389, i64 1073741824, i64 -1073741823
  %391 = add nsw i64 %390, %388
  %392 = sdiv i64 %391, 2147483648
  %393 = trunc i64 %392 to i32
  br label %394

394:                                              ; preds = %383, %387
  %395 = phi i32 [ %393, %387 ], [ 2147483647, %383 ]
  %396 = zext i32 %374 to i64
  %397 = shl nsw i64 -1, %396
  %398 = trunc i64 %397 to i32
  %399 = xor i32 %398, -1
  %400 = and i32 %395, %399
  %401 = ashr i32 %399, 1
  %402 = lshr i32 %395, 31
  %403 = add nsw i32 %402, %401
  %404 = ashr i32 %395, %374
  br label %447

405:                                              ; preds = %361
  %406 = load i32, i32* %352, align 4
  %407 = getelementptr inbounds i8, i8* %4, i64 %362
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = add nsw i32 %406, %409
  %411 = mul nsw i32 %410, %367
  %412 = load i32, i32* %353, align 4
  %413 = load i32, i32* %354, align 4
  %414 = icmp sgt i32 %413, 0
  %415 = sub nsw i32 0, %413
  %416 = select i1 %414, i32 0, i32 %415
  %417 = shl i32 1, %413
  %418 = select i1 %414, i32 %417, i32 1
  %419 = mul nsw i32 %411, %418
  %420 = icmp eq i32 %419, %412
  br i1 %420, label %425, label %421

421:                                              ; preds = %405
  %422 = sext i32 %419 to i64
  %423 = sext i32 %412 to i64
  %424 = mul nsw i64 %422, %423
  br label %429

425:                                              ; preds = %405
  %426 = icmp eq i32 %412, -2147483648
  %427 = sext i32 %412 to i64
  %428 = mul nsw i64 %427, %427
  br i1 %426, label %436, label %429

429:                                              ; preds = %425, %421
  %430 = phi i64 [ %424, %421 ], [ %428, %425 ]
  %431 = icmp sgt i64 %430, -1
  %432 = select i1 %431, i64 1073741824, i64 -1073741823
  %433 = add nsw i64 %432, %430
  %434 = sdiv i64 %433, 2147483648
  %435 = trunc i64 %434 to i32
  br label %436

436:                                              ; preds = %425, %429
  %437 = phi i32 [ %435, %429 ], [ 2147483647, %425 ]
  %438 = zext i32 %416 to i64
  %439 = shl nsw i64 -1, %438
  %440 = trunc i64 %439 to i32
  %441 = xor i32 %440, -1
  %442 = and i32 %437, %441
  %443 = ashr i32 %441, 1
  %444 = lshr i32 %437, 31
  %445 = add nsw i32 %444, %443
  %446 = ashr i32 %437, %416
  br label %447

447:                                              ; preds = %436, %394
  %448 = phi i32 [ %445, %436 ], [ %403, %394 ]
  %449 = phi i32 [ %442, %436 ], [ %400, %394 ]
  %450 = phi i32 [ %446, %436 ], [ %404, %394 ]
  %451 = icmp sgt i32 %449, %448
  %452 = zext i1 %451 to i32
  %453 = add nsw i32 %450, %452
  %454 = load i32, i32* %357, align 4
  %455 = add nsw i32 %454, %453
  %456 = icmp sgt i32 %455, 0
  %457 = select i1 %456, i32 %455, i32 0
  %458 = icmp slt i32 %457, 255
  %459 = select i1 %458, i32 %457, i32 255
  %460 = trunc i32 %459 to i8
  %461 = getelementptr inbounds i8, i8* %6, i64 %362
  store i8 %460, i8* %461, align 1
  %462 = add nuw nsw i64 %362, 1
  %463 = icmp eq i64 %462, %358
  br i1 %463, label %360, label %361
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"struct.tflite::NdArrayDesc", align 4
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %12 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %13, align 8, !alias.scope !212
  %14 = load i32, i32* %11, align 8, !noalias !212
  %15 = icmp sgt i32 %14, 4
  br i1 %15, label %16, label %17

16:                                               ; preds = %7
  tail call void @abort() #20, !noalias !212
  unreachable

17:                                               ; preds = %7
  store i32 4, i32* %13, align 8, !alias.scope !212
  %18 = sub i32 4, %14
  %19 = icmp sgt i32 %18, 0
  %20 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  br i1 %19, label %21, label %101

21:                                               ; preds = %17
  %22 = bitcast %union.anon* %20 to [5 x i32]*
  %23 = zext i32 %18 to i64
  %24 = icmp ult i32 %18, 8
  br i1 %24, label %94, label %25

25:                                               ; preds = %21
  %26 = and i64 %23, 4294967288
  %27 = add nsw i64 %26, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 7
  %31 = icmp ult i64 %27, 56
  br i1 %31, label %79, label %32

32:                                               ; preds = %25
  %33 = sub nsw i64 %29, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %76, %34 ]
  %36 = phi i64 [ %33, %32 ], [ %77, %34 ]
  %37 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %35
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %38, align 8, !alias.scope !212
  %39 = getelementptr inbounds i32, i32* %37, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %40, align 8, !alias.scope !212
  %41 = or i64 %35, 8
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %41
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %43, align 8, !alias.scope !212
  %44 = getelementptr inbounds i32, i32* %42, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %45, align 8, !alias.scope !212
  %46 = or i64 %35, 16
  %47 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %46
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %48, align 8, !alias.scope !212
  %49 = getelementptr inbounds i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !212
  %51 = or i64 %35, 24
  %52 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %53, align 8, !alias.scope !212
  %54 = getelementptr inbounds i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !212
  %56 = or i64 %35, 32
  %57 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %58, align 8, !alias.scope !212
  %59 = getelementptr inbounds i32, i32* %57, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !212
  %61 = or i64 %35, 40
  %62 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %63, align 8, !alias.scope !212
  %64 = getelementptr inbounds i32, i32* %62, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !212
  %66 = or i64 %35, 48
  %67 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %68, align 8, !alias.scope !212
  %69 = getelementptr inbounds i32, i32* %67, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !212
  %71 = or i64 %35, 56
  %72 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %73, align 8, !alias.scope !212
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !212
  %76 = add i64 %35, 64
  %77 = add i64 %36, -8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %34, !llvm.loop !215

79:                                               ; preds = %34, %25
  %80 = phi i64 [ 0, %25 ], [ %76, %34 ]
  %81 = icmp eq i64 %30, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %79, %82
  %83 = phi i64 [ %89, %82 ], [ %80, %79 ]
  %84 = phi i64 [ %90, %82 ], [ %30, %79 ]
  %85 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %83
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %86, align 8, !alias.scope !212
  %87 = getelementptr inbounds i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %88, align 8, !alias.scope !212
  %89 = add i64 %83, 8
  %90 = add i64 %84, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %82, !llvm.loop !216

92:                                               ; preds = %82, %79
  %93 = icmp eq i64 %26, %23
  br i1 %93, label %101, label %94

94:                                               ; preds = %92, %21
  %95 = phi i64 [ 0, %21 ], [ %26, %92 ]
  br label %96

96:                                               ; preds = %94, %96
  %97 = phi i64 [ %99, %96 ], [ %95, %94 ]
  %98 = getelementptr inbounds [5 x i32], [5 x i32]* %22, i64 0, i64 %97
  store i32 1, i32* %98, align 4, !alias.scope !212
  %99 = add nuw nsw i64 %97, 1
  %100 = icmp eq i64 %99, %23
  br i1 %100, label %101, label %96, !llvm.loop !217

101:                                              ; preds = %96, %92, %17
  %102 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %103 = bitcast %union.anon* %20 to i32*
  %104 = sext i32 %18 to i64
  %105 = getelementptr inbounds i32, i32* %103, i64 %104
  %106 = bitcast i32* %105 to i8*
  %107 = icmp sgt i32 %14, 5
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %109 = getelementptr inbounds %union.anon, %union.anon* %108, i64 0, i32 0
  %110 = load i32*, i32** %109, align 8, !noalias !212
  %111 = bitcast %union.anon* %108 to i32*
  %112 = select i1 %107, i32* %110, i32* %111
  %113 = bitcast i32* %112 to i8*
  %114 = sext i32 %14 to i64
  %115 = shl nsw i64 %114, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %113, i64 %115, i1 false) #19
  %116 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #19
  %117 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %118 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %119 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %120 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %121 = bitcast %"struct.tflite::NdArrayDesc"* %10 to i8*
  %122 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %122, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %121) #19
  %123 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 0
  %124 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 1
  %125 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 2
  %126 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %10, i64 0, i32 1, i64 3
  %127 = bitcast %"struct.tflite::NdArrayDesc"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %127, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %1, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, %"struct.tflite::NdArrayDesc"* nonnull %9, %"struct.tflite::NdArrayDesc"* nonnull %10)
  %128 = load i32, i32* %13, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %102, align 8
  %131 = select i1 %129, i32* %130, i32* %103
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %160

134:                                              ; preds = %101
  %135 = bitcast %union.anon* %20 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds i32, i32* %103, i64 1
  %142 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 0
  %143 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 1
  %144 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 5
  %145 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 6
  %146 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 3
  %147 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 4
  %148 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 2
  %149 = getelementptr inbounds i32, i32* %130, i64 1
  %150 = select i1 %129, i32* %149, i32* %136
  %151 = getelementptr inbounds i32, i32* %130, i64 2
  %152 = select i1 %129, i32* %151, i32* %138
  %153 = getelementptr inbounds i32, i32* %130, i64 3
  %154 = select i1 %129, i32* %153, i32* %140
  br label %155

155:                                              ; preds = %134, %179
  %156 = phi i32 [ %132, %134 ], [ %180, %179 ]
  %157 = phi i32 [ 0, %134 ], [ %181, %179 ]
  %158 = load i32, i32* %150, align 4
  %159 = icmp sgt i32 %158, 0
  br i1 %159, label %167, label %179

160:                                              ; preds = %179, %101
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %121) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #19
  %161 = xor i1 %129, true
  %162 = icmp eq i32* %130, null
  %163 = or i1 %162, %161
  br i1 %163, label %166, label %164

164:                                              ; preds = %160
  %165 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %165) #18
  br label %166

166:                                              ; preds = %160, %164
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #19
  ret void

167:                                              ; preds = %155, %205
  %168 = phi i32 [ %206, %205 ], [ %158, %155 ]
  %169 = phi i32 [ %207, %205 ], [ 0, %155 ]
  %170 = load i32, i32* %152, align 4
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %205

172:                                              ; preds = %167
  %173 = load i32, i32* %141, align 4
  %174 = mul nsw i32 %173, %157
  %175 = add nsw i32 %174, %169
  %176 = load i32, i32* %154, align 4
  br label %183

177:                                              ; preds = %205
  %178 = load i32, i32* %131, align 4
  br label %179

179:                                              ; preds = %177, %155
  %180 = phi i32 [ %178, %177 ], [ %156, %155 ]
  %181 = add nuw nsw i32 %157, 1
  %182 = icmp slt i32 %181, %180
  br i1 %182, label %155, label %160

183:                                              ; preds = %172, %211
  %184 = phi i32 [ %170, %172 ], [ %212, %211 ]
  %185 = phi i32 [ %176, %172 ], [ %213, %211 ]
  %186 = phi i32 [ 0, %172 ], [ %214, %211 ]
  %187 = icmp sgt i32 %185, 0
  br i1 %187, label %188, label %211

188:                                              ; preds = %183
  %189 = load i32, i32* %138, align 8
  %190 = mul nsw i32 %175, %189
  %191 = add nsw i32 %190, %186
  %192 = load i32, i32* %140, align 4
  %193 = load i32, i32* %117, align 4
  %194 = load i32, i32* %118, align 4
  %195 = load i32, i32* %119, align 4
  %196 = load i32, i32* %120, align 4
  %197 = mul nsw i32 %191, %192
  %198 = mul nsw i32 %193, %157
  %199 = mul nsw i32 %194, %169
  %200 = add nsw i32 %199, %198
  %201 = mul nsw i32 %195, %186
  %202 = add nsw i32 %200, %201
  br label %216

203:                                              ; preds = %211
  %204 = load i32, i32* %150, align 4
  br label %205

205:                                              ; preds = %203, %167
  %206 = phi i32 [ %204, %203 ], [ %168, %167 ]
  %207 = add nuw nsw i32 %169, 1
  %208 = icmp slt i32 %207, %206
  br i1 %208, label %167, label %177

209:                                              ; preds = %318
  %210 = load i32, i32* %152, align 4
  br label %211

211:                                              ; preds = %209, %183
  %212 = phi i32 [ %210, %209 ], [ %184, %183 ]
  %213 = phi i32 [ %335, %209 ], [ %185, %183 ]
  %214 = add nuw nsw i32 %186, 1
  %215 = icmp slt i32 %214, %212
  br i1 %215, label %183, label %203

216:                                              ; preds = %188, %318
  %217 = phi i32 [ 0, %188 ], [ %334, %318 ]
  %218 = add nsw i32 %197, %217
  %219 = mul nsw i32 %196, %217
  %220 = add nsw i32 %202, %219
  %221 = load i32, i32* %142, align 4
  %222 = sext i32 %220 to i64
  %223 = getelementptr inbounds i8, i8* %2, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = sext i8 %224 to i32
  %226 = add nsw i32 %221, %225
  %227 = icmp sgt i32 %226, -1
  br i1 %227, label %228, label %264

228:                                              ; preds = %216
  %229 = load i32, i32* %146, align 4
  %230 = load i32, i32* %147, align 4
  %231 = icmp sgt i32 %230, 0
  %232 = sub nsw i32 0, %230
  %233 = select i1 %231, i32 0, i32 %232
  %234 = shl i32 1, %230
  %235 = select i1 %231, i32 %234, i32 1
  %236 = mul nsw i32 %235, %226
  %237 = icmp eq i32 %236, %229
  br i1 %237, label %242, label %238

238:                                              ; preds = %228
  %239 = sext i32 %236 to i64
  %240 = sext i32 %229 to i64
  %241 = mul nsw i64 %239, %240
  br label %246

242:                                              ; preds = %228
  %243 = icmp eq i32 %229, -2147483648
  %244 = sext i32 %229 to i64
  %245 = mul nsw i64 %244, %244
  br i1 %243, label %253, label %246

246:                                              ; preds = %242, %238
  %247 = phi i64 [ %241, %238 ], [ %245, %242 ]
  %248 = icmp sgt i64 %247, -1
  %249 = select i1 %248, i64 1073741824, i64 -1073741823
  %250 = add nsw i64 %249, %247
  %251 = sdiv i64 %250, 2147483648
  %252 = trunc i64 %251 to i32
  br label %253

253:                                              ; preds = %242, %246
  %254 = phi i32 [ %252, %246 ], [ 2147483647, %242 ]
  %255 = zext i32 %233 to i64
  %256 = shl nsw i64 -1, %255
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, -1
  %259 = and i32 %254, %258
  %260 = ashr i32 %258, 1
  %261 = lshr i32 %254, 31
  %262 = add nsw i32 %261, %260
  %263 = ashr i32 %254, %233
  br label %318

264:                                              ; preds = %216
  %265 = load i32, i32* %123, align 4
  %266 = mul nsw i32 %265, %157
  %267 = load i32, i32* %124, align 4
  %268 = mul nsw i32 %267, %169
  %269 = add nsw i32 %268, %266
  %270 = load i32, i32* %125, align 4
  %271 = mul nsw i32 %270, %186
  %272 = add nsw i32 %269, %271
  %273 = load i32, i32* %126, align 4
  %274 = mul nsw i32 %273, %217
  %275 = add nsw i32 %272, %274
  %276 = load i32, i32* %143, align 4
  %277 = sext i32 %275 to i64
  %278 = getelementptr inbounds i8, i8* %4, i64 %277
  %279 = load i8, i8* %278, align 1
  %280 = sext i8 %279 to i32
  %281 = add nsw i32 %276, %280
  %282 = mul nsw i32 %281, %226
  %283 = load i32, i32* %144, align 4
  %284 = load i32, i32* %145, align 4
  %285 = icmp sgt i32 %284, 0
  %286 = sub nsw i32 0, %284
  %287 = select i1 %285, i32 0, i32 %286
  %288 = shl i32 1, %284
  %289 = select i1 %285, i32 %288, i32 1
  %290 = mul nsw i32 %282, %289
  %291 = icmp eq i32 %290, %283
  br i1 %291, label %296, label %292

292:                                              ; preds = %264
  %293 = sext i32 %290 to i64
  %294 = sext i32 %283 to i64
  %295 = mul nsw i64 %293, %294
  br label %300

296:                                              ; preds = %264
  %297 = icmp eq i32 %283, -2147483648
  %298 = sext i32 %283 to i64
  %299 = mul nsw i64 %298, %298
  br i1 %297, label %307, label %300

300:                                              ; preds = %296, %292
  %301 = phi i64 [ %295, %292 ], [ %299, %296 ]
  %302 = icmp sgt i64 %301, -1
  %303 = select i1 %302, i64 1073741824, i64 -1073741823
  %304 = add nsw i64 %303, %301
  %305 = sdiv i64 %304, 2147483648
  %306 = trunc i64 %305 to i32
  br label %307

307:                                              ; preds = %296, %300
  %308 = phi i32 [ %306, %300 ], [ 2147483647, %296 ]
  %309 = zext i32 %287 to i64
  %310 = shl nsw i64 -1, %309
  %311 = trunc i64 %310 to i32
  %312 = xor i32 %311, -1
  %313 = and i32 %308, %312
  %314 = ashr i32 %312, 1
  %315 = lshr i32 %308, 31
  %316 = add nsw i32 %315, %314
  %317 = ashr i32 %308, %287
  br label %318

318:                                              ; preds = %307, %253
  %319 = phi i32 [ %316, %307 ], [ %262, %253 ]
  %320 = phi i32 [ %313, %307 ], [ %259, %253 ]
  %321 = phi i32 [ %317, %307 ], [ %263, %253 ]
  %322 = icmp sgt i32 %320, %319
  %323 = zext i1 %322 to i32
  %324 = add nsw i32 %321, %323
  %325 = load i32, i32* %148, align 4
  %326 = add nsw i32 %325, %324
  %327 = icmp sgt i32 %326, -128
  %328 = select i1 %327, i32 %326, i32 -128
  %329 = icmp slt i32 %328, 127
  %330 = select i1 %329, i32 %328, i32 127
  %331 = trunc i32 %330 to i8
  %332 = sext i32 %218 to i64
  %333 = getelementptr inbounds i8, i8* %6, i64 %332
  store i8 %331, i8* %333, align 1
  %334 = add nuw nsw i32 %217, 1
  %335 = load i32, i32* %154, align 4
  %336 = icmp slt i32 %334, %335
  br i1 %336, label %216, label %209
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops5PreluIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::PreluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 5
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  br i1 %10, label %12, label %15

12:                                               ; preds = %7
  %13 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  br label %18

15:                                               ; preds = %7
  %16 = bitcast %union.anon* %11 to i32*
  %17 = icmp sgt i32 %9, 0
  br i1 %17, label %18, label %118

18:                                               ; preds = %15, %12
  %19 = phi i32* [ %14, %12 ], [ %16, %15 ]
  %20 = zext i32 %9 to i64
  %21 = icmp ult i32 %9, 8
  br i1 %21, label %107, label %22

22:                                               ; preds = %18
  %23 = and i64 %20, 4294967288
  %24 = add nsw i64 %23, -8
  %25 = lshr exact i64 %24, 3
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 3
  %28 = icmp ult i64 %24, 24
  br i1 %28, label %74, label %29

29:                                               ; preds = %22
  %30 = sub nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %71, %31 ]
  %33 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %29 ], [ %69, %31 ]
  %34 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %29 ], [ %70, %31 ]
  %35 = phi i64 [ %30, %29 ], [ %72, %31 ]
  %36 = getelementptr inbounds i32, i32* %19, i64 %32
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = mul nsw <4 x i32> %38, %33
  %43 = mul nsw <4 x i32> %41, %34
  %44 = or i64 %32, 8
  %45 = getelementptr inbounds i32, i32* %19, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr inbounds i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = mul nsw <4 x i32> %47, %42
  %52 = mul nsw <4 x i32> %50, %43
  %53 = or i64 %32, 16
  %54 = getelementptr inbounds i32, i32* %19, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = getelementptr inbounds i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = mul nsw <4 x i32> %56, %51
  %61 = mul nsw <4 x i32> %59, %52
  %62 = or i64 %32, 24
  %63 = getelementptr inbounds i32, i32* %19, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = mul nsw <4 x i32> %65, %60
  %70 = mul nsw <4 x i32> %68, %61
  %71 = add i64 %32, 32
  %72 = add i64 %35, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %31, !llvm.loop !218

74:                                               ; preds = %31, %22
  %75 = phi <4 x i32> [ undef, %22 ], [ %69, %31 ]
  %76 = phi <4 x i32> [ undef, %22 ], [ %70, %31 ]
  %77 = phi i64 [ 0, %22 ], [ %71, %31 ]
  %78 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %69, %31 ]
  %79 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %70, %31 ]
  %80 = icmp eq i64 %27, 0
  br i1 %80, label %97, label %81

81:                                               ; preds = %74, %81
  %82 = phi i64 [ %94, %81 ], [ %77, %74 ]
  %83 = phi <4 x i32> [ %92, %81 ], [ %78, %74 ]
  %84 = phi <4 x i32> [ %93, %81 ], [ %79, %74 ]
  %85 = phi i64 [ %95, %81 ], [ %27, %74 ]
  %86 = getelementptr inbounds i32, i32* %19, i64 %82
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4
  %89 = getelementptr inbounds i32, i32* %86, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4
  %92 = mul nsw <4 x i32> %88, %83
  %93 = mul nsw <4 x i32> %91, %84
  %94 = add i64 %82, 8
  %95 = add i64 %85, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %81, !llvm.loop !219

97:                                               ; preds = %81, %74
  %98 = phi <4 x i32> [ %75, %74 ], [ %92, %81 ]
  %99 = phi <4 x i32> [ %76, %74 ], [ %93, %81 ]
  %100 = mul <4 x i32> %99, %98
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %104 = mul <4 x i32> %102, %103
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = icmp eq i64 %23, %20
  br i1 %106, label %118, label %107

107:                                              ; preds = %97, %18
  %108 = phi i64 [ 0, %18 ], [ %23, %97 ]
  %109 = phi i32 [ 1, %18 ], [ %105, %97 ]
  br label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %116, %110 ], [ %108, %107 ]
  %112 = phi i32 [ %115, %110 ], [ %109, %107 ]
  %113 = getelementptr inbounds i32, i32* %19, i64 %111
  %114 = load i32, i32* %113, align 4
  %115 = mul nsw i32 %114, %112
  %116 = add nuw nsw i64 %111, 1
  %117 = icmp eq i64 %116, %20
  br i1 %117, label %118, label %110, !llvm.loop !220

118:                                              ; preds = %110, %97, %15
  %119 = phi i32 [ 1, %15 ], [ %105, %97 ], [ %115, %110 ]
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %121 = load i32, i32* %120, align 8
  %122 = icmp sgt i32 %121, 5
  %123 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  br i1 %122, label %124, label %127

124:                                              ; preds = %118
  %125 = getelementptr inbounds %union.anon, %union.anon* %123, i64 0, i32 0
  %126 = load i32*, i32** %125, align 8
  br label %130

127:                                              ; preds = %118
  %128 = bitcast %union.anon* %123 to i32*
  %129 = icmp sgt i32 %121, 0
  br i1 %129, label %130, label %230

130:                                              ; preds = %127, %124
  %131 = phi i32* [ %126, %124 ], [ %128, %127 ]
  %132 = zext i32 %121 to i64
  %133 = icmp ult i32 %121, 8
  br i1 %133, label %219, label %134

134:                                              ; preds = %130
  %135 = and i64 %132, 4294967288
  %136 = add nsw i64 %135, -8
  %137 = lshr exact i64 %136, 3
  %138 = add nuw nsw i64 %137, 1
  %139 = and i64 %138, 3
  %140 = icmp ult i64 %136, 24
  br i1 %140, label %186, label %141

141:                                              ; preds = %134
  %142 = sub nsw i64 %138, %139
  br label %143

143:                                              ; preds = %143, %141
  %144 = phi i64 [ 0, %141 ], [ %183, %143 ]
  %145 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %141 ], [ %181, %143 ]
  %146 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %141 ], [ %182, %143 ]
  %147 = phi i64 [ %142, %141 ], [ %184, %143 ]
  %148 = getelementptr inbounds i32, i32* %131, i64 %144
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, %145
  %155 = mul nsw <4 x i32> %153, %146
  %156 = or i64 %144, 8
  %157 = getelementptr inbounds i32, i32* %131, i64 %156
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %144, 16
  %166 = getelementptr inbounds i32, i32* %131, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = or i64 %144, 24
  %175 = getelementptr inbounds i32, i32* %131, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = mul nsw <4 x i32> %177, %172
  %182 = mul nsw <4 x i32> %180, %173
  %183 = add i64 %144, 32
  %184 = add i64 %147, -4
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %143, !llvm.loop !221

186:                                              ; preds = %143, %134
  %187 = phi <4 x i32> [ undef, %134 ], [ %181, %143 ]
  %188 = phi <4 x i32> [ undef, %134 ], [ %182, %143 ]
  %189 = phi i64 [ 0, %134 ], [ %183, %143 ]
  %190 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %134 ], [ %181, %143 ]
  %191 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %134 ], [ %182, %143 ]
  %192 = icmp eq i64 %139, 0
  br i1 %192, label %209, label %193

193:                                              ; preds = %186, %193
  %194 = phi i64 [ %206, %193 ], [ %189, %186 ]
  %195 = phi <4 x i32> [ %204, %193 ], [ %190, %186 ]
  %196 = phi <4 x i32> [ %205, %193 ], [ %191, %186 ]
  %197 = phi i64 [ %207, %193 ], [ %139, %186 ]
  %198 = getelementptr inbounds i32, i32* %131, i64 %194
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4
  %201 = getelementptr inbounds i32, i32* %198, i64 4
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4
  %204 = mul nsw <4 x i32> %200, %195
  %205 = mul nsw <4 x i32> %203, %196
  %206 = add i64 %194, 8
  %207 = add i64 %197, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %193, !llvm.loop !222

209:                                              ; preds = %193, %186
  %210 = phi <4 x i32> [ %187, %186 ], [ %204, %193 ]
  %211 = phi <4 x i32> [ %188, %186 ], [ %205, %193 ]
  %212 = mul <4 x i32> %211, %210
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %214 = mul <4 x i32> %212, %213
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %216 = mul <4 x i32> %214, %215
  %217 = extractelement <4 x i32> %216, i32 0
  %218 = icmp eq i64 %135, %132
  br i1 %218, label %230, label %219

219:                                              ; preds = %209, %130
  %220 = phi i64 [ 0, %130 ], [ %135, %209 ]
  %221 = phi i32 [ 1, %130 ], [ %217, %209 ]
  br label %222

222:                                              ; preds = %219, %222
  %223 = phi i64 [ %228, %222 ], [ %220, %219 ]
  %224 = phi i32 [ %227, %222 ], [ %221, %219 ]
  %225 = getelementptr inbounds i32, i32* %131, i64 %223
  %226 = load i32, i32* %225, align 4
  %227 = mul nsw i32 %226, %224
  %228 = add nuw nsw i64 %223, 1
  %229 = icmp eq i64 %228, %132
  br i1 %229, label %230, label %222, !llvm.loop !223

230:                                              ; preds = %222, %209, %127
  %231 = phi i32 [ 1, %127 ], [ %217, %209 ], [ %227, %222 ]
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %233 = load i32, i32* %232, align 8
  %234 = icmp sgt i32 %233, 5
  %235 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %234, label %236, label %239

236:                                              ; preds = %230
  %237 = getelementptr inbounds %union.anon, %union.anon* %235, i64 0, i32 0
  %238 = load i32*, i32** %237, align 8
  br label %242

239:                                              ; preds = %230
  %240 = bitcast %union.anon* %235 to i32*
  %241 = icmp sgt i32 %233, 0
  br i1 %241, label %242, label %342

242:                                              ; preds = %239, %236
  %243 = phi i32* [ %238, %236 ], [ %240, %239 ]
  %244 = zext i32 %233 to i64
  %245 = icmp ult i32 %233, 8
  br i1 %245, label %331, label %246

246:                                              ; preds = %242
  %247 = and i64 %244, 4294967288
  %248 = add nsw i64 %247, -8
  %249 = lshr exact i64 %248, 3
  %250 = add nuw nsw i64 %249, 1
  %251 = and i64 %250, 3
  %252 = icmp ult i64 %248, 24
  br i1 %252, label %298, label %253

253:                                              ; preds = %246
  %254 = sub nsw i64 %250, %251
  br label %255

255:                                              ; preds = %255, %253
  %256 = phi i64 [ 0, %253 ], [ %295, %255 ]
  %257 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %253 ], [ %293, %255 ]
  %258 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %253 ], [ %294, %255 ]
  %259 = phi i64 [ %254, %253 ], [ %296, %255 ]
  %260 = getelementptr inbounds i32, i32* %243, i64 %256
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 4
  %263 = getelementptr inbounds i32, i32* %260, i64 4
  %264 = bitcast i32* %263 to <4 x i32>*
  %265 = load <4 x i32>, <4 x i32>* %264, align 4
  %266 = mul nsw <4 x i32> %262, %257
  %267 = mul nsw <4 x i32> %265, %258
  %268 = or i64 %256, 8
  %269 = getelementptr inbounds i32, i32* %243, i64 %268
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4
  %272 = getelementptr inbounds i32, i32* %269, i64 4
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4
  %275 = mul nsw <4 x i32> %271, %266
  %276 = mul nsw <4 x i32> %274, %267
  %277 = or i64 %256, 16
  %278 = getelementptr inbounds i32, i32* %243, i64 %277
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4
  %281 = getelementptr inbounds i32, i32* %278, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4
  %284 = mul nsw <4 x i32> %280, %275
  %285 = mul nsw <4 x i32> %283, %276
  %286 = or i64 %256, 24
  %287 = getelementptr inbounds i32, i32* %243, i64 %286
  %288 = bitcast i32* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 4
  %290 = getelementptr inbounds i32, i32* %287, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 4
  %293 = mul nsw <4 x i32> %289, %284
  %294 = mul nsw <4 x i32> %292, %285
  %295 = add i64 %256, 32
  %296 = add i64 %259, -4
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %255, !llvm.loop !224

298:                                              ; preds = %255, %246
  %299 = phi <4 x i32> [ undef, %246 ], [ %293, %255 ]
  %300 = phi <4 x i32> [ undef, %246 ], [ %294, %255 ]
  %301 = phi i64 [ 0, %246 ], [ %295, %255 ]
  %302 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %246 ], [ %293, %255 ]
  %303 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %246 ], [ %294, %255 ]
  %304 = icmp eq i64 %251, 0
  br i1 %304, label %321, label %305

305:                                              ; preds = %298, %305
  %306 = phi i64 [ %318, %305 ], [ %301, %298 ]
  %307 = phi <4 x i32> [ %316, %305 ], [ %302, %298 ]
  %308 = phi <4 x i32> [ %317, %305 ], [ %303, %298 ]
  %309 = phi i64 [ %319, %305 ], [ %251, %298 ]
  %310 = getelementptr inbounds i32, i32* %243, i64 %306
  %311 = bitcast i32* %310 to <4 x i32>*
  %312 = load <4 x i32>, <4 x i32>* %311, align 4
  %313 = getelementptr inbounds i32, i32* %310, i64 4
  %314 = bitcast i32* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 4
  %316 = mul nsw <4 x i32> %312, %307
  %317 = mul nsw <4 x i32> %315, %308
  %318 = add i64 %306, 8
  %319 = add i64 %309, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %305, !llvm.loop !225

321:                                              ; preds = %305, %298
  %322 = phi <4 x i32> [ %299, %298 ], [ %316, %305 ]
  %323 = phi <4 x i32> [ %300, %298 ], [ %317, %305 ]
  %324 = mul <4 x i32> %323, %322
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %326 = mul <4 x i32> %324, %325
  %327 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %328 = mul <4 x i32> %326, %327
  %329 = extractelement <4 x i32> %328, i32 0
  %330 = icmp eq i64 %247, %244
  br i1 %330, label %342, label %331

331:                                              ; preds = %321, %242
  %332 = phi i64 [ 0, %242 ], [ %247, %321 ]
  %333 = phi i32 [ 1, %242 ], [ %329, %321 ]
  br label %334

334:                                              ; preds = %331, %334
  %335 = phi i64 [ %340, %334 ], [ %332, %331 ]
  %336 = phi i32 [ %339, %334 ], [ %333, %331 ]
  %337 = getelementptr inbounds i32, i32* %243, i64 %335
  %338 = load i32, i32* %337, align 4
  %339 = mul nsw i32 %338, %336
  %340 = add nuw nsw i64 %335, 1
  %341 = icmp eq i64 %340, %244
  br i1 %341, label %342, label %334, !llvm.loop !226

342:                                              ; preds = %334, %321, %239
  %343 = phi i32 [ 1, %239 ], [ %329, %321 ], [ %339, %334 ]
  %344 = icmp eq i32 %119, %231
  br i1 %344, label %346, label %345

345:                                              ; preds = %342
  tail call void @abort() #20
  unreachable

346:                                              ; preds = %342
  %347 = icmp eq i32 %119, %343
  br i1 %347, label %348, label %359

348:                                              ; preds = %346
  %349 = icmp sgt i32 %119, 0
  br i1 %349, label %350, label %360

350:                                              ; preds = %348
  %351 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 0
  %352 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 1
  %353 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 5
  %354 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 6
  %355 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 3
  %356 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 4
  %357 = getelementptr inbounds %"struct.tflite::PreluParams", %"struct.tflite::PreluParams"* %0, i64 0, i32 2
  %358 = zext i32 %119 to i64
  br label %361

359:                                              ; preds = %346
  tail call void @abort() #20
  unreachable

360:                                              ; preds = %447, %348
  ret void

361:                                              ; preds = %447, %350
  %362 = phi i64 [ 0, %350 ], [ %462, %447 ]
  %363 = load i32, i32* %351, align 4
  %364 = getelementptr inbounds i8, i8* %2, i64 %362
  %365 = load i8, i8* %364, align 1
  %366 = sext i8 %365 to i32
  %367 = add nsw i32 %363, %366
  %368 = icmp sgt i32 %367, -1
  br i1 %368, label %369, label %405

369:                                              ; preds = %361
  %370 = load i32, i32* %355, align 4
  %371 = load i32, i32* %356, align 4
  %372 = icmp sgt i32 %371, 0
  %373 = sub nsw i32 0, %371
  %374 = select i1 %372, i32 0, i32 %373
  %375 = shl i32 1, %371
  %376 = select i1 %372, i32 %375, i32 1
  %377 = mul nsw i32 %376, %367
  %378 = icmp eq i32 %377, %370
  br i1 %378, label %383, label %379

379:                                              ; preds = %369
  %380 = sext i32 %377 to i64
  %381 = sext i32 %370 to i64
  %382 = mul nsw i64 %380, %381
  br label %387

383:                                              ; preds = %369
  %384 = icmp eq i32 %370, -2147483648
  %385 = sext i32 %370 to i64
  %386 = mul nsw i64 %385, %385
  br i1 %384, label %394, label %387

387:                                              ; preds = %383, %379
  %388 = phi i64 [ %382, %379 ], [ %386, %383 ]
  %389 = icmp sgt i64 %388, -1
  %390 = select i1 %389, i64 1073741824, i64 -1073741823
  %391 = add nsw i64 %390, %388
  %392 = sdiv i64 %391, 2147483648
  %393 = trunc i64 %392 to i32
  br label %394

394:                                              ; preds = %383, %387
  %395 = phi i32 [ %393, %387 ], [ 2147483647, %383 ]
  %396 = zext i32 %374 to i64
  %397 = shl nsw i64 -1, %396
  %398 = trunc i64 %397 to i32
  %399 = xor i32 %398, -1
  %400 = and i32 %395, %399
  %401 = ashr i32 %399, 1
  %402 = lshr i32 %395, 31
  %403 = add nsw i32 %402, %401
  %404 = ashr i32 %395, %374
  br label %447

405:                                              ; preds = %361
  %406 = load i32, i32* %352, align 4
  %407 = getelementptr inbounds i8, i8* %4, i64 %362
  %408 = load i8, i8* %407, align 1
  %409 = sext i8 %408 to i32
  %410 = add nsw i32 %406, %409
  %411 = mul nsw i32 %410, %367
  %412 = load i32, i32* %353, align 4
  %413 = load i32, i32* %354, align 4
  %414 = icmp sgt i32 %413, 0
  %415 = sub nsw i32 0, %413
  %416 = select i1 %414, i32 0, i32 %415
  %417 = shl i32 1, %413
  %418 = select i1 %414, i32 %417, i32 1
  %419 = mul nsw i32 %411, %418
  %420 = icmp eq i32 %419, %412
  br i1 %420, label %425, label %421

421:                                              ; preds = %405
  %422 = sext i32 %419 to i64
  %423 = sext i32 %412 to i64
  %424 = mul nsw i64 %422, %423
  br label %429

425:                                              ; preds = %405
  %426 = icmp eq i32 %412, -2147483648
  %427 = sext i32 %412 to i64
  %428 = mul nsw i64 %427, %427
  br i1 %426, label %436, label %429

429:                                              ; preds = %425, %421
  %430 = phi i64 [ %424, %421 ], [ %428, %425 ]
  %431 = icmp sgt i64 %430, -1
  %432 = select i1 %431, i64 1073741824, i64 -1073741823
  %433 = add nsw i64 %432, %430
  %434 = sdiv i64 %433, 2147483648
  %435 = trunc i64 %434 to i32
  br label %436

436:                                              ; preds = %425, %429
  %437 = phi i32 [ %435, %429 ], [ 2147483647, %425 ]
  %438 = zext i32 %416 to i64
  %439 = shl nsw i64 -1, %438
  %440 = trunc i64 %439 to i32
  %441 = xor i32 %440, -1
  %442 = and i32 %437, %441
  %443 = ashr i32 %441, 1
  %444 = lshr i32 %437, 31
  %445 = add nsw i32 %444, %443
  %446 = ashr i32 %437, %416
  br label %447

447:                                              ; preds = %436, %394
  %448 = phi i32 [ %445, %436 ], [ %403, %394 ]
  %449 = phi i32 [ %442, %436 ], [ %400, %394 ]
  %450 = phi i32 [ %446, %436 ], [ %404, %394 ]
  %451 = icmp sgt i32 %449, %448
  %452 = zext i1 %451 to i32
  %453 = add nsw i32 %450, %452
  %454 = load i32, i32* %357, align 4
  %455 = add nsw i32 %454, %453
  %456 = icmp sgt i32 %455, -128
  %457 = select i1 %456, i32 %455, i32 -128
  %458 = icmp slt i32 %457, 127
  %459 = select i1 %458, i32 %457, i32 127
  %460 = trunc i32 %459 to i8
  %461 = getelementptr inbounds i8, i8* %6, i64 %362
  store i8 %460, i8* %461, align 1
  %462 = add nuw nsw i64 %362, 1
  %463 = icmp eq i64 %462, %358
  br i1 %463, label %360, label %361
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations13LeakyReluEvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %30 = bitcast i8** %29 to %"struct.tflite::ops::builtin::activations::LeakyReluOpData"**
  %31 = load %"struct.tflite::ops::builtin::activations::LeakyReluOpData"*, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"** %30, align 8
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  switch i32 %33, label %363 [
    i32 1, label %34
    i32 3, label %360
    i32 9, label %361
    i32 7, label %362
  ]

34:                                               ; preds = %27
  %35 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %36 = bitcast i8** %35 to float**
  %37 = load float*, float** %36, align 8
  %38 = load float, float* %37, align 4
  %39 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %39) #19
  %40 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %42, align 8, !alias.scope !227
  br label %72

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %45 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %44, align 8, !noalias !227
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 4, !noalias !227
  %48 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 1, i64 0
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %47, i32* %49, align 8, !alias.scope !227
  %50 = icmp sgt i32 %47, 5
  br i1 %50, label %51, label %58

51:                                               ; preds = %43
  %52 = sext i32 %47 to i64
  %53 = shl nsw i64 %52, 2
  %54 = tail call i8* @_Znam(i64 %53) #18, !noalias !227
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %56 = bitcast i32** %55 to i8**
  store i8* %54, i8** %56, align 8, !alias.scope !227
  %57 = bitcast i8* %54 to i32*
  br label %63

58:                                               ; preds = %43
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %60 = bitcast %union.anon* %59 to i32*
  %61 = sext i32 %47 to i64
  %62 = shl nsw i64 %61, 2
  br label %63

63:                                               ; preds = %58, %51
  %64 = phi i64 [ %53, %51 ], [ %62, %58 ]
  %65 = phi i32* [ %57, %51 ], [ %60, %58 ]
  %66 = bitcast i32* %65 to i8*
  %67 = bitcast i32* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %64, i1 false) #19
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %69 = bitcast %union.TfLitePtrUnion* %68 to float**
  %70 = load float*, float** %69, align 8
  %71 = bitcast float* %70 to i8*
  br label %72

72:                                               ; preds = %41, %63
  %73 = phi i32 [ %47, %63 ], [ 0, %41 ]
  %74 = phi i8* [ %71, %63 ], [ null, %41 ]
  %75 = phi float* [ %70, %63 ], [ null, %41 ]
  %76 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %76) #19
  %77 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %77, label %78, label %80

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %79, align 8, !alias.scope !230
  br label %109

80:                                               ; preds = %72
  %81 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %82 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %81, align 8, !noalias !230
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %82, i64 0, i32 0
  %84 = load i32, i32* %83, align 4, !noalias !230
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %82, i64 0, i32 1, i64 0
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %84, i32* %86, align 8, !alias.scope !230
  %87 = icmp sgt i32 %84, 5
  br i1 %87, label %88, label %95

88:                                               ; preds = %80
  %89 = sext i32 %84 to i64
  %90 = shl nsw i64 %89, 2
  %91 = tail call i8* @_Znam(i64 %90) #18, !noalias !230
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %93 = bitcast i32** %92 to i8**
  store i8* %91, i8** %93, align 8, !alias.scope !230
  %94 = bitcast i8* %91 to i32*
  br label %100

95:                                               ; preds = %80
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %97 = bitcast %union.anon* %96 to i32*
  %98 = sext i32 %84 to i64
  %99 = shl nsw i64 %98, 2
  br label %100

100:                                              ; preds = %95, %88
  %101 = phi i64 [ %90, %88 ], [ %99, %95 ]
  %102 = phi i32* [ %94, %88 ], [ %97, %95 ]
  %103 = bitcast i32* %102 to i8*
  %104 = bitcast i32* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* align 4 %104, i64 %101, i1 false) #19
  %105 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %106 = bitcast %union.TfLitePtrUnion* %105 to float**
  %107 = load float*, float** %106, align 8
  %108 = bitcast float* %107 to i8*
  br label %109

109:                                              ; preds = %78, %100
  %110 = phi i32 [ %84, %100 ], [ 0, %78 ]
  %111 = phi i8* [ %108, %100 ], [ null, %78 ]
  %112 = phi float* [ %107, %100 ], [ null, %78 ]
  %113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %114 = icmp sgt i32 %73, 5
  br i1 %114, label %115, label %118

115:                                              ; preds = %109
  %116 = getelementptr inbounds %union.anon, %union.anon* %113, i64 0, i32 0
  %117 = load i32*, i32** %116, align 8
  br label %121

118:                                              ; preds = %109
  %119 = bitcast %union.anon* %113 to i32*
  %120 = icmp sgt i32 %73, 0
  br i1 %120, label %121, label %224

121:                                              ; preds = %118, %115
  %122 = phi i32* [ %117, %115 ], [ %119, %118 ]
  %123 = zext i32 %73 to i64
  %124 = icmp ult i32 %73, 8
  br i1 %124, label %210, label %125

125:                                              ; preds = %121
  %126 = and i64 %123, 4294967288
  %127 = add nsw i64 %126, -8
  %128 = lshr exact i64 %127, 3
  %129 = add nuw nsw i64 %128, 1
  %130 = and i64 %129, 3
  %131 = icmp ult i64 %127, 24
  br i1 %131, label %177, label %132

132:                                              ; preds = %125
  %133 = sub nsw i64 %129, %130
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i64 [ 0, %132 ], [ %174, %134 ]
  %136 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %132 ], [ %172, %134 ]
  %137 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %132 ], [ %173, %134 ]
  %138 = phi i64 [ %133, %132 ], [ %175, %134 ]
  %139 = getelementptr inbounds i32, i32* %122, i64 %135
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = getelementptr inbounds i32, i32* %139, i64 4
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = mul nsw <4 x i32> %141, %136
  %146 = mul nsw <4 x i32> %144, %137
  %147 = or i64 %135, 8
  %148 = getelementptr inbounds i32, i32* %122, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, %145
  %155 = mul nsw <4 x i32> %153, %146
  %156 = or i64 %135, 16
  %157 = getelementptr inbounds i32, i32* %122, i64 %156
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = getelementptr inbounds i32, i32* %157, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = mul nsw <4 x i32> %159, %154
  %164 = mul nsw <4 x i32> %162, %155
  %165 = or i64 %135, 24
  %166 = getelementptr inbounds i32, i32* %122, i64 %165
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = mul nsw <4 x i32> %168, %163
  %173 = mul nsw <4 x i32> %171, %164
  %174 = add i64 %135, 32
  %175 = add i64 %138, -4
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %134, !llvm.loop !233

177:                                              ; preds = %134, %125
  %178 = phi <4 x i32> [ undef, %125 ], [ %172, %134 ]
  %179 = phi <4 x i32> [ undef, %125 ], [ %173, %134 ]
  %180 = phi i64 [ 0, %125 ], [ %174, %134 ]
  %181 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %125 ], [ %172, %134 ]
  %182 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %125 ], [ %173, %134 ]
  %183 = icmp eq i64 %130, 0
  br i1 %183, label %200, label %184

184:                                              ; preds = %177, %184
  %185 = phi i64 [ %197, %184 ], [ %180, %177 ]
  %186 = phi <4 x i32> [ %195, %184 ], [ %181, %177 ]
  %187 = phi <4 x i32> [ %196, %184 ], [ %182, %177 ]
  %188 = phi i64 [ %198, %184 ], [ %130, %177 ]
  %189 = getelementptr inbounds i32, i32* %122, i64 %185
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 4
  %192 = getelementptr inbounds i32, i32* %189, i64 4
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4
  %195 = mul nsw <4 x i32> %191, %186
  %196 = mul nsw <4 x i32> %194, %187
  %197 = add i64 %185, 8
  %198 = add i64 %188, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %184, !llvm.loop !234

200:                                              ; preds = %184, %177
  %201 = phi <4 x i32> [ %178, %177 ], [ %195, %184 ]
  %202 = phi <4 x i32> [ %179, %177 ], [ %196, %184 ]
  %203 = mul <4 x i32> %202, %201
  %204 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %205 = mul <4 x i32> %203, %204
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %207 = mul <4 x i32> %205, %206
  %208 = extractelement <4 x i32> %207, i32 0
  %209 = icmp eq i64 %126, %123
  br i1 %209, label %221, label %210

210:                                              ; preds = %200, %121
  %211 = phi i64 [ 0, %121 ], [ %126, %200 ]
  %212 = phi i32 [ 1, %121 ], [ %208, %200 ]
  br label %213

213:                                              ; preds = %210, %213
  %214 = phi i64 [ %219, %213 ], [ %211, %210 ]
  %215 = phi i32 [ %218, %213 ], [ %212, %210 ]
  %216 = getelementptr inbounds i32, i32* %122, i64 %214
  %217 = load i32, i32* %216, align 4
  %218 = mul nsw i32 %217, %215
  %219 = add nuw nsw i64 %214, 1
  %220 = icmp eq i64 %219, %123
  br i1 %220, label %221, label %213, !llvm.loop !235

221:                                              ; preds = %213, %200
  %222 = phi i32 [ %208, %200 ], [ %218, %213 ]
  %223 = icmp sgt i32 %222, 0
  br i1 %223, label %224, label %344

224:                                              ; preds = %221, %118
  %225 = phi i32 [ %222, %221 ], [ 1, %118 ]
  %226 = zext i32 %225 to i64
  %227 = icmp ult i32 %225, 8
  br i1 %227, label %310, label %228

228:                                              ; preds = %224
  %229 = getelementptr float, float* %112, i64 %226
  %230 = bitcast float* %229 to i8*
  %231 = getelementptr float, float* %75, i64 %226
  %232 = bitcast float* %231 to i8*
  %233 = icmp ult i8* %111, %232
  %234 = icmp ult i8* %74, %230
  %235 = and i1 %233, %234
  br i1 %235, label %310, label %236

236:                                              ; preds = %228
  %237 = and i64 %226, 4294967288
  %238 = insertelement <4 x float> undef, float %38, i32 0
  %239 = shufflevector <4 x float> %238, <4 x float> undef, <4 x i32> zeroinitializer
  %240 = insertelement <4 x float> undef, float %38, i32 0
  %241 = shufflevector <4 x float> %240, <4 x float> undef, <4 x i32> zeroinitializer
  %242 = add nsw i64 %237, -8
  %243 = lshr exact i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = and i64 %244, 1
  %246 = icmp eq i64 %242, 0
  br i1 %246, label %288, label %247

247:                                              ; preds = %236
  %248 = sub nuw nsw i64 %244, %245
  br label %249

249:                                              ; preds = %249, %247
  %250 = phi i64 [ 0, %247 ], [ %285, %249 ]
  %251 = phi i64 [ %248, %247 ], [ %286, %249 ]
  %252 = getelementptr inbounds float, float* %75, i64 %250
  %253 = bitcast float* %252 to <4 x float>*
  %254 = load <4 x float>, <4 x float>* %253, align 4, !alias.scope !236
  %255 = getelementptr inbounds float, float* %252, i64 4
  %256 = bitcast float* %255 to <4 x float>*
  %257 = load <4 x float>, <4 x float>* %256, align 4, !alias.scope !236
  %258 = fcmp ogt <4 x float> %254, zeroinitializer
  %259 = fcmp ogt <4 x float> %257, zeroinitializer
  %260 = fmul <4 x float> %239, %254
  %261 = fmul <4 x float> %241, %257
  %262 = select <4 x i1> %258, <4 x float> %254, <4 x float> %260
  %263 = select <4 x i1> %259, <4 x float> %257, <4 x float> %261
  %264 = getelementptr inbounds float, float* %112, i64 %250
  %265 = bitcast float* %264 to <4 x float>*
  store <4 x float> %262, <4 x float>* %265, align 4, !alias.scope !239, !noalias !236
  %266 = getelementptr inbounds float, float* %264, i64 4
  %267 = bitcast float* %266 to <4 x float>*
  store <4 x float> %263, <4 x float>* %267, align 4, !alias.scope !239, !noalias !236
  %268 = or i64 %250, 8
  %269 = getelementptr inbounds float, float* %75, i64 %268
  %270 = bitcast float* %269 to <4 x float>*
  %271 = load <4 x float>, <4 x float>* %270, align 4, !alias.scope !236
  %272 = getelementptr inbounds float, float* %269, i64 4
  %273 = bitcast float* %272 to <4 x float>*
  %274 = load <4 x float>, <4 x float>* %273, align 4, !alias.scope !236
  %275 = fcmp ogt <4 x float> %271, zeroinitializer
  %276 = fcmp ogt <4 x float> %274, zeroinitializer
  %277 = fmul <4 x float> %239, %271
  %278 = fmul <4 x float> %241, %274
  %279 = select <4 x i1> %275, <4 x float> %271, <4 x float> %277
  %280 = select <4 x i1> %276, <4 x float> %274, <4 x float> %278
  %281 = getelementptr inbounds float, float* %112, i64 %268
  %282 = bitcast float* %281 to <4 x float>*
  store <4 x float> %279, <4 x float>* %282, align 4, !alias.scope !239, !noalias !236
  %283 = getelementptr inbounds float, float* %281, i64 4
  %284 = bitcast float* %283 to <4 x float>*
  store <4 x float> %280, <4 x float>* %284, align 4, !alias.scope !239, !noalias !236
  %285 = add i64 %250, 16
  %286 = add i64 %251, -2
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %288, label %249, !llvm.loop !241

288:                                              ; preds = %249, %236
  %289 = phi i64 [ 0, %236 ], [ %285, %249 ]
  %290 = icmp eq i64 %245, 0
  br i1 %290, label %308, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds float, float* %75, i64 %289
  %293 = bitcast float* %292 to <4 x float>*
  %294 = load <4 x float>, <4 x float>* %293, align 4, !alias.scope !236
  %295 = getelementptr inbounds float, float* %292, i64 4
  %296 = bitcast float* %295 to <4 x float>*
  %297 = load <4 x float>, <4 x float>* %296, align 4, !alias.scope !236
  %298 = fcmp ogt <4 x float> %294, zeroinitializer
  %299 = fcmp ogt <4 x float> %297, zeroinitializer
  %300 = fmul <4 x float> %239, %294
  %301 = fmul <4 x float> %241, %297
  %302 = select <4 x i1> %298, <4 x float> %294, <4 x float> %300
  %303 = select <4 x i1> %299, <4 x float> %297, <4 x float> %301
  %304 = getelementptr inbounds float, float* %112, i64 %289
  %305 = bitcast float* %304 to <4 x float>*
  store <4 x float> %302, <4 x float>* %305, align 4, !alias.scope !239, !noalias !236
  %306 = getelementptr inbounds float, float* %304, i64 4
  %307 = bitcast float* %306 to <4 x float>*
  store <4 x float> %303, <4 x float>* %307, align 4, !alias.scope !239, !noalias !236
  br label %308

308:                                              ; preds = %288, %291
  %309 = icmp eq i64 %237, %226
  br i1 %309, label %344, label %310

310:                                              ; preds = %308, %228, %224
  %311 = phi i64 [ 0, %228 ], [ 0, %224 ], [ %237, %308 ]
  %312 = xor i64 %311, -1
  %313 = and i64 %226, 1
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %323, label %315

315:                                              ; preds = %310
  %316 = getelementptr inbounds float, float* %75, i64 %311
  %317 = load float, float* %316, align 4
  %318 = fcmp ogt float %317, 0.000000e+00
  %319 = fmul float %38, %317
  %320 = select i1 %318, float %317, float %319
  %321 = getelementptr inbounds float, float* %112, i64 %311
  store float %320, float* %321, align 4
  %322 = or i64 %311, 1
  br label %323

323:                                              ; preds = %310, %315
  %324 = phi i64 [ %311, %310 ], [ %322, %315 ]
  %325 = sub nsw i64 0, %226
  %326 = icmp eq i64 %312, %325
  br i1 %326, label %344, label %327

327:                                              ; preds = %323, %327
  %328 = phi i64 [ %342, %327 ], [ %324, %323 ]
  %329 = getelementptr inbounds float, float* %75, i64 %328
  %330 = load float, float* %329, align 4
  %331 = fcmp ogt float %330, 0.000000e+00
  %332 = fmul float %38, %330
  %333 = select i1 %331, float %330, float %332
  %334 = getelementptr inbounds float, float* %112, i64 %328
  store float %333, float* %334, align 4
  %335 = add nuw nsw i64 %328, 1
  %336 = getelementptr inbounds float, float* %75, i64 %335
  %337 = load float, float* %336, align 4
  %338 = fcmp ogt float %337, 0.000000e+00
  %339 = fmul float %38, %337
  %340 = select i1 %338, float %337, float %339
  %341 = getelementptr inbounds float, float* %112, i64 %335
  store float %340, float* %341, align 4
  %342 = add nuw nsw i64 %328, 2
  %343 = icmp eq i64 %342, %226
  br i1 %343, label %344, label %327, !llvm.loop !242

344:                                              ; preds = %323, %327, %308, %221
  %345 = icmp sgt i32 %110, 5
  br i1 %345, label %346, label %352

346:                                              ; preds = %344
  %347 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %348 = load i32*, i32** %347, align 8
  %349 = icmp eq i32* %348, null
  br i1 %349, label %352, label %350

350:                                              ; preds = %346
  %351 = bitcast i32* %348 to i8*
  tail call void @_ZdaPv(i8* %351) #18
  br label %352

352:                                              ; preds = %344, %346, %350
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %76) #19
  br i1 %114, label %353, label %359

353:                                              ; preds = %352
  %354 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %355 = load i32*, i32** %354, align 8
  %356 = icmp eq i32* %355, null
  br i1 %356, label %359, label %357

357:                                              ; preds = %353
  %358 = bitcast i32* %355 to i8*
  tail call void @_ZdaPv(i8* %358) #18
  br label %359

359:                                              ; preds = %352, %353, %357
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #19
  br label %367

360:                                              ; preds = %27
  tail call void @_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIhEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE(%struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %31)
  br label %367

361:                                              ; preds = %27
  tail call void @_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIaEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE(%struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %31)
  br label %367

362:                                              ; preds = %27
  tail call void @_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIsEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE(%struct.TfLiteTensor* %16, %struct.TfLiteTensor* %28, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %31)
  br label %367

363:                                              ; preds = %27
  %364 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %365 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %364, align 8
  %366 = tail call i8* @TfLiteTypeGetName(i32 %33) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %365(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.31, i64 0, i64 0), i8* %366) #19
  br label %367

367:                                              ; preds = %363, %362, %361, %360, %359
  %368 = phi i32 [ 1, %363 ], [ 0, %362 ], [ 0, %361 ], [ 0, %360 ], [ 0, %359 ]
  ret i32 %368
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIhEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.tflite::LeakyReluParams", align 4
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"struct.tflite::LeakyReluParams"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %7) #19
  %8 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 3, i32 1
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %9, align 4
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 3, i32 1
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %10, align 4
  %16 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %2, i64 0, i32 1
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> %18, <4 x i32>* %19, align 4
  %20 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #19
  %21 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %23, align 8, !alias.scope !243
  br label %52

24:                                               ; preds = %3
  %25 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %26 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %25, align 8, !noalias !243
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 4, !noalias !243
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %26, i64 0, i32 1, i64 0
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %28, i32* %30, align 8, !alias.scope !243
  %31 = icmp sgt i32 %28, 5
  br i1 %31, label %32, label %39

32:                                               ; preds = %24
  %33 = sext i32 %28 to i64
  %34 = shl nsw i64 %33, 2
  %35 = tail call i8* @_Znam(i64 %34) #18, !noalias !243
  %36 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %37 = bitcast i32** %36 to i8**
  store i8* %35, i8** %37, align 8, !alias.scope !243
  %38 = bitcast i8* %35 to i32*
  br label %44

39:                                               ; preds = %24
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %41 = bitcast %union.anon* %40 to i32*
  %42 = sext i32 %28 to i64
  %43 = shl nsw i64 %42, 2
  br label %44

44:                                               ; preds = %39, %32
  %45 = phi i64 [ %34, %32 ], [ %43, %39 ]
  %46 = phi i32* [ %38, %32 ], [ %41, %39 ]
  %47 = bitcast i32* %46 to i8*
  %48 = bitcast i32* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 %45, i1 false) #19
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %50 = bitcast %union.TfLitePtrUnion* %49 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %22, %44
  %53 = phi i8* [ %51, %44 ], [ null, %22 ]
  %54 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #19
  %55 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %57, align 8, !alias.scope !246
  br label %86

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %60 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %59, align 8, !noalias !246
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !246
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 1, i64 0
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %62, i32* %64, align 8, !alias.scope !246
  %65 = icmp sgt i32 %62, 5
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = sext i32 %62 to i64
  %68 = shl nsw i64 %67, 2
  %69 = tail call i8* @_Znam(i64 %68) #18, !noalias !246
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %71 = bitcast i32** %70 to i8**
  store i8* %69, i8** %71, align 8, !alias.scope !246
  %72 = bitcast i8* %69 to i32*
  br label %78

73:                                               ; preds = %58
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i32*
  %76 = sext i32 %62 to i64
  %77 = shl nsw i64 %76, 2
  br label %78

78:                                               ; preds = %73, %66
  %79 = phi i64 [ %68, %66 ], [ %77, %73 ]
  %80 = phi i32* [ %72, %66 ], [ %75, %73 ]
  %81 = bitcast i32* %80 to i8*
  %82 = bitcast i32* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 %79, i1 false) #19
  %83 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %84 = bitcast %union.TfLitePtrUnion* %83 to i8**
  %85 = load i8*, i8** %84, align 8
  br label %86

86:                                               ; preds = %56, %78
  %87 = phi i8* [ %85, %78 ], [ null, %56 ]
  call void @_ZN6tflite13reference_ops17QuantizeLeakyReluIhEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::LeakyReluParams"* nonnull dereferenceable(28) %4, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i8* %53, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %87)
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = icmp sgt i32 %89, 5
  br i1 %90, label %91, label %97

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %93 = load i32*, i32** %92, align 8
  %94 = icmp eq i32* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %91
  %96 = bitcast i32* %93 to i8*
  call void @_ZdaPv(i8* %96) #18
  br label %97

97:                                               ; preds = %86, %91, %95
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #19
  %98 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = icmp sgt i32 %99, 5
  br i1 %100, label %101, label %107

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %101
  %106 = bitcast i32* %103 to i8*
  call void @_ZdaPv(i8* %106) #18
  br label %107

107:                                              ; preds = %97, %101, %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #19
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %7) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIaEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.tflite::LeakyReluParams", align 4
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"struct.tflite::LeakyReluParams"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %7) #19
  %8 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 3, i32 1
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %9, align 4
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 3, i32 1
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %10, align 4
  %16 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %2, i64 0, i32 1
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> %18, <4 x i32>* %19, align 4
  %20 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #19
  %21 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %23, align 8, !alias.scope !249
  br label %52

24:                                               ; preds = %3
  %25 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %26 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %25, align 8, !noalias !249
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 4, !noalias !249
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %26, i64 0, i32 1, i64 0
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %28, i32* %30, align 8, !alias.scope !249
  %31 = icmp sgt i32 %28, 5
  br i1 %31, label %32, label %39

32:                                               ; preds = %24
  %33 = sext i32 %28 to i64
  %34 = shl nsw i64 %33, 2
  %35 = tail call i8* @_Znam(i64 %34) #18, !noalias !249
  %36 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %37 = bitcast i32** %36 to i8**
  store i8* %35, i8** %37, align 8, !alias.scope !249
  %38 = bitcast i8* %35 to i32*
  br label %44

39:                                               ; preds = %24
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %41 = bitcast %union.anon* %40 to i32*
  %42 = sext i32 %28 to i64
  %43 = shl nsw i64 %42, 2
  br label %44

44:                                               ; preds = %39, %32
  %45 = phi i64 [ %34, %32 ], [ %43, %39 ]
  %46 = phi i32* [ %38, %32 ], [ %41, %39 ]
  %47 = bitcast i32* %46 to i8*
  %48 = bitcast i32* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 %45, i1 false) #19
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %50 = bitcast %union.TfLitePtrUnion* %49 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %22, %44
  %53 = phi i8* [ %51, %44 ], [ null, %22 ]
  %54 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #19
  %55 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %57, align 8, !alias.scope !252
  br label %86

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %60 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %59, align 8, !noalias !252
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !252
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 1, i64 0
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %62, i32* %64, align 8, !alias.scope !252
  %65 = icmp sgt i32 %62, 5
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = sext i32 %62 to i64
  %68 = shl nsw i64 %67, 2
  %69 = tail call i8* @_Znam(i64 %68) #18, !noalias !252
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %71 = bitcast i32** %70 to i8**
  store i8* %69, i8** %71, align 8, !alias.scope !252
  %72 = bitcast i8* %69 to i32*
  br label %78

73:                                               ; preds = %58
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i32*
  %76 = sext i32 %62 to i64
  %77 = shl nsw i64 %76, 2
  br label %78

78:                                               ; preds = %73, %66
  %79 = phi i64 [ %68, %66 ], [ %77, %73 ]
  %80 = phi i32* [ %72, %66 ], [ %75, %73 ]
  %81 = bitcast i32* %80 to i8*
  %82 = bitcast i32* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 %79, i1 false) #19
  %83 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %84 = bitcast %union.TfLitePtrUnion* %83 to i8**
  %85 = load i8*, i8** %84, align 8
  br label %86

86:                                               ; preds = %56, %78
  %87 = phi i8* [ %85, %78 ], [ null, %56 ]
  call void @_ZN6tflite13reference_ops17QuantizeLeakyReluIaEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::LeakyReluParams"* nonnull dereferenceable(28) %4, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i8* %53, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %87)
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = icmp sgt i32 %89, 5
  br i1 %90, label %91, label %97

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %93 = load i32*, i32** %92, align 8
  %94 = icmp eq i32* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %91
  %96 = bitcast i32* %93 to i8*
  call void @_ZdaPv(i8* %96) #18
  br label %97

97:                                               ; preds = %86, %91, %95
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #19
  %98 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = icmp sgt i32 %99, 5
  br i1 %100, label %101, label %107

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %101
  %106 = bitcast i32* %103 to i8*
  call void @_ZdaPv(i8* %106) #18
  br label %107

107:                                              ; preds = %97, %101, %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #19
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %7) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin11activations17QuantizeLeakyReluIsEEvPK12TfLiteTensorPS4_PKNS2_15LeakyReluOpDataE(%struct.TfLiteTensor*, %struct.TfLiteTensor*, %"struct.tflite::ops::builtin::activations::LeakyReluOpData"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.tflite::LeakyReluParams", align 4
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"struct.tflite::LeakyReluParams"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %7) #19
  %8 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %4, i64 0, i32 3
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 3, i32 1
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %9, align 4
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 3, i32 1
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %10, align 4
  %16 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LeakyReluOpData", %"struct.tflite::ops::builtin::activations::LeakyReluOpData"* %2, i64 0, i32 1
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> %18, <4 x i32>* %19, align 4
  %20 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #19
  %21 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %23, align 8, !alias.scope !255
  br label %52

24:                                               ; preds = %3
  %25 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 2
  %26 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %25, align 8, !noalias !255
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 4, !noalias !255
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %26, i64 0, i32 1, i64 0
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %28, i32* %30, align 8, !alias.scope !255
  %31 = icmp sgt i32 %28, 5
  br i1 %31, label %32, label %39

32:                                               ; preds = %24
  %33 = sext i32 %28 to i64
  %34 = shl nsw i64 %33, 2
  %35 = tail call i8* @_Znam(i64 %34) #18, !noalias !255
  %36 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %37 = bitcast i32** %36 to i8**
  store i8* %35, i8** %37, align 8, !alias.scope !255
  %38 = bitcast i8* %35 to i32*
  br label %44

39:                                               ; preds = %24
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %41 = bitcast %union.anon* %40 to i32*
  %42 = sext i32 %28 to i64
  %43 = shl nsw i64 %42, 2
  br label %44

44:                                               ; preds = %39, %32
  %45 = phi i64 [ %34, %32 ], [ %43, %39 ]
  %46 = phi i32* [ %38, %32 ], [ %41, %39 ]
  %47 = bitcast i32* %46 to i8*
  %48 = bitcast i32* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 %45, i1 false) #19
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %50 = bitcast %union.TfLitePtrUnion* %49 to i16**
  %51 = load i16*, i16** %50, align 8
  br label %52

52:                                               ; preds = %22, %44
  %53 = phi i16* [ %51, %44 ], [ null, %22 ]
  %54 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #19
  %55 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %57, align 8, !alias.scope !258
  br label %86

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %60 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %59, align 8, !noalias !258
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !258
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 1, i64 0
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %62, i32* %64, align 8, !alias.scope !258
  %65 = icmp sgt i32 %62, 5
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = sext i32 %62 to i64
  %68 = shl nsw i64 %67, 2
  %69 = tail call i8* @_Znam(i64 %68) #18, !noalias !258
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %71 = bitcast i32** %70 to i8**
  store i8* %69, i8** %71, align 8, !alias.scope !258
  %72 = bitcast i8* %69 to i32*
  br label %78

73:                                               ; preds = %58
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i32*
  %76 = sext i32 %62 to i64
  %77 = shl nsw i64 %76, 2
  br label %78

78:                                               ; preds = %73, %66
  %79 = phi i64 [ %68, %66 ], [ %77, %73 ]
  %80 = phi i32* [ %72, %66 ], [ %75, %73 ]
  %81 = bitcast i32* %80 to i8*
  %82 = bitcast i32* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 %79, i1 false) #19
  %83 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %84 = bitcast %union.TfLitePtrUnion* %83 to i16**
  %85 = load i16*, i16** %84, align 8
  br label %86

86:                                               ; preds = %56, %78
  %87 = phi i16* [ %85, %78 ], [ null, %56 ]
  call void @_ZN6tflite13reference_ops17QuantizeLeakyReluIsEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::LeakyReluParams"* nonnull dereferenceable(28) %4, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i16* %53, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i16* %87)
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = icmp sgt i32 %89, 5
  br i1 %90, label %91, label %97

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %93 = load i32*, i32** %92, align 8
  %94 = icmp eq i32* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %91
  %96 = bitcast i32* %93 to i8*
  call void @_ZdaPv(i8* %96) #18
  br label %97

97:                                               ; preds = %86, %91, %95
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #19
  %98 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = icmp sgt i32 %99, 5
  br i1 %100, label %101, label %107

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %101
  %106 = bitcast i32* %103 to i8*
  call void @_ZdaPv(i8* %106) #18
  br label %107

107:                                              ; preds = %97, %101, %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #19
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %7) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11activations7EluEvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %246

32:                                               ; preds = %27
  %33 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #19
  %34 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %36, align 8, !alias.scope !261
  br label %65

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %39 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %38, align 8, !noalias !261
  %40 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %39, i64 0, i32 0
  %41 = load i32, i32* %40, align 4, !noalias !261
  %42 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %39, i64 0, i32 1, i64 0
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %41, i32* %43, align 8, !alias.scope !261
  %44 = icmp sgt i32 %41, 5
  br i1 %44, label %45, label %52

45:                                               ; preds = %37
  %46 = sext i32 %41 to i64
  %47 = shl nsw i64 %46, 2
  %48 = tail call i8* @_Znam(i64 %47) #18, !noalias !261
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %50 = bitcast i32** %49 to i8**
  store i8* %48, i8** %50, align 8, !alias.scope !261
  %51 = bitcast i8* %48 to i32*
  br label %57

52:                                               ; preds = %37
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %54 = bitcast %union.anon* %53 to i32*
  %55 = sext i32 %41 to i64
  %56 = shl nsw i64 %55, 2
  br label %57

57:                                               ; preds = %52, %45
  %58 = phi i64 [ %47, %45 ], [ %56, %52 ]
  %59 = phi i32* [ %51, %45 ], [ %54, %52 ]
  %60 = bitcast i32* %59 to i8*
  %61 = bitcast i32* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %61, i64 %58, i1 false) #19
  %62 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %63 = bitcast %union.TfLitePtrUnion* %62 to float**
  %64 = load float*, float** %63, align 8
  br label %65

65:                                               ; preds = %35, %57
  %66 = phi i32 [ %41, %57 ], [ 0, %35 ]
  %67 = phi float* [ %64, %57 ], [ null, %35 ]
  %68 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #19
  %69 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %71, align 8, !alias.scope !264
  br label %100

72:                                               ; preds = %65
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %74 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %73, align 8, !noalias !264
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 4, !noalias !264
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 1, i64 0
  %78 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %76, i32* %78, align 8, !alias.scope !264
  %79 = icmp sgt i32 %76, 5
  br i1 %79, label %80, label %87

80:                                               ; preds = %72
  %81 = sext i32 %76 to i64
  %82 = shl nsw i64 %81, 2
  %83 = tail call i8* @_Znam(i64 %82) #18, !noalias !264
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %85 = bitcast i32** %84 to i8**
  store i8* %83, i8** %85, align 8, !alias.scope !264
  %86 = bitcast i8* %83 to i32*
  br label %92

87:                                               ; preds = %72
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %89 = bitcast %union.anon* %88 to i32*
  %90 = sext i32 %76 to i64
  %91 = shl nsw i64 %90, 2
  br label %92

92:                                               ; preds = %87, %80
  %93 = phi i64 [ %82, %80 ], [ %91, %87 ]
  %94 = phi i32* [ %86, %80 ], [ %89, %87 ]
  %95 = bitcast i32* %94 to i8*
  %96 = bitcast i32* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %96, i64 %93, i1 false) #19
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %98 = bitcast %union.TfLitePtrUnion* %97 to float**
  %99 = load float*, float** %98, align 8
  br label %100

100:                                              ; preds = %70, %92
  %101 = phi i32 [ %76, %92 ], [ 0, %70 ]
  %102 = phi float* [ %99, %92 ], [ null, %70 ]
  %103 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %104 = icmp sgt i32 %66, 5
  br i1 %104, label %105, label %108

105:                                              ; preds = %100
  %106 = getelementptr inbounds %union.anon, %union.anon* %103, i64 0, i32 0
  %107 = load i32*, i32** %106, align 8
  br label %111

108:                                              ; preds = %100
  %109 = bitcast %union.anon* %103 to i32*
  %110 = icmp sgt i32 %66, 0
  br i1 %110, label %111, label %214

111:                                              ; preds = %108, %105
  %112 = phi i32* [ %107, %105 ], [ %109, %108 ]
  %113 = zext i32 %66 to i64
  %114 = icmp ult i32 %66, 8
  br i1 %114, label %200, label %115

115:                                              ; preds = %111
  %116 = and i64 %113, 4294967288
  %117 = add nsw i64 %116, -8
  %118 = lshr exact i64 %117, 3
  %119 = add nuw nsw i64 %118, 1
  %120 = and i64 %119, 3
  %121 = icmp ult i64 %117, 24
  br i1 %121, label %167, label %122

122:                                              ; preds = %115
  %123 = sub nsw i64 %119, %120
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ 0, %122 ], [ %164, %124 ]
  %126 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %162, %124 ]
  %127 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %163, %124 ]
  %128 = phi i64 [ %123, %122 ], [ %165, %124 ]
  %129 = getelementptr inbounds i32, i32* %112, i64 %125
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = mul nsw <4 x i32> %131, %126
  %136 = mul nsw <4 x i32> %134, %127
  %137 = or i64 %125, 8
  %138 = getelementptr inbounds i32, i32* %112, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = getelementptr inbounds i32, i32* %138, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = mul nsw <4 x i32> %140, %135
  %145 = mul nsw <4 x i32> %143, %136
  %146 = or i64 %125, 16
  %147 = getelementptr inbounds i32, i32* %112, i64 %146
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = getelementptr inbounds i32, i32* %147, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = mul nsw <4 x i32> %149, %144
  %154 = mul nsw <4 x i32> %152, %145
  %155 = or i64 %125, 24
  %156 = getelementptr inbounds i32, i32* %112, i64 %155
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = add i64 %125, 32
  %165 = add i64 %128, -4
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %124, !llvm.loop !267

167:                                              ; preds = %124, %115
  %168 = phi <4 x i32> [ undef, %115 ], [ %162, %124 ]
  %169 = phi <4 x i32> [ undef, %115 ], [ %163, %124 ]
  %170 = phi i64 [ 0, %115 ], [ %164, %124 ]
  %171 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %162, %124 ]
  %172 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %163, %124 ]
  %173 = icmp eq i64 %120, 0
  br i1 %173, label %190, label %174

174:                                              ; preds = %167, %174
  %175 = phi i64 [ %187, %174 ], [ %170, %167 ]
  %176 = phi <4 x i32> [ %185, %174 ], [ %171, %167 ]
  %177 = phi <4 x i32> [ %186, %174 ], [ %172, %167 ]
  %178 = phi i64 [ %188, %174 ], [ %120, %167 ]
  %179 = getelementptr inbounds i32, i32* %112, i64 %175
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4
  %182 = getelementptr inbounds i32, i32* %179, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4
  %185 = mul nsw <4 x i32> %181, %176
  %186 = mul nsw <4 x i32> %184, %177
  %187 = add i64 %175, 8
  %188 = add i64 %178, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %174, !llvm.loop !268

190:                                              ; preds = %174, %167
  %191 = phi <4 x i32> [ %168, %167 ], [ %185, %174 ]
  %192 = phi <4 x i32> [ %169, %167 ], [ %186, %174 ]
  %193 = mul <4 x i32> %192, %191
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %195 = mul <4 x i32> %193, %194
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %197 = mul <4 x i32> %195, %196
  %198 = extractelement <4 x i32> %197, i32 0
  %199 = icmp eq i64 %116, %113
  br i1 %199, label %211, label %200

200:                                              ; preds = %190, %111
  %201 = phi i64 [ 0, %111 ], [ %116, %190 ]
  %202 = phi i32 [ 1, %111 ], [ %198, %190 ]
  br label %203

203:                                              ; preds = %200, %203
  %204 = phi i64 [ %209, %203 ], [ %201, %200 ]
  %205 = phi i32 [ %208, %203 ], [ %202, %200 ]
  %206 = getelementptr inbounds i32, i32* %112, i64 %204
  %207 = load i32, i32* %206, align 4
  %208 = mul nsw i32 %207, %205
  %209 = add nuw nsw i64 %204, 1
  %210 = icmp eq i64 %209, %113
  br i1 %210, label %211, label %203, !llvm.loop !269

211:                                              ; preds = %203, %190
  %212 = phi i32 [ %198, %190 ], [ %208, %203 ]
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %230

214:                                              ; preds = %211, %108
  %215 = phi i32 [ %212, %211 ], [ 1, %108 ]
  %216 = zext i32 %215 to i64
  br label %217

217:                                              ; preds = %225, %214
  %218 = phi i64 [ 0, %214 ], [ %228, %225 ]
  %219 = getelementptr inbounds float, float* %67, i64 %218
  %220 = load float, float* %219, align 4
  %221 = fcmp olt float %220, 0.000000e+00
  br i1 %221, label %222, label %225

222:                                              ; preds = %217
  %223 = tail call float @expf(float %220) #19
  %224 = fadd float %223, -1.000000e+00
  br label %225

225:                                              ; preds = %222, %217
  %226 = phi float [ %224, %222 ], [ %220, %217 ]
  %227 = getelementptr inbounds float, float* %102, i64 %218
  store float %226, float* %227, align 4
  %228 = add nuw nsw i64 %218, 1
  %229 = icmp eq i64 %228, %216
  br i1 %229, label %230, label %217

230:                                              ; preds = %225, %211
  %231 = icmp sgt i32 %101, 5
  br i1 %231, label %232, label %238

232:                                              ; preds = %230
  %233 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %234 = load i32*, i32** %233, align 8
  %235 = icmp eq i32* %234, null
  br i1 %235, label %238, label %236

236:                                              ; preds = %232
  %237 = bitcast i32* %234 to i8*
  tail call void @_ZdaPv(i8* %237) #18
  br label %238

238:                                              ; preds = %230, %232, %236
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #19
  br i1 %104, label %239, label %245

239:                                              ; preds = %238
  %240 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %241 = load i32*, i32** %240, align 8
  %242 = icmp eq i32* %241, null
  br i1 %242, label %245, label %243

243:                                              ; preds = %239
  %244 = bitcast i32* %241 to i8*
  tail call void @_ZdaPv(i8* %244) #18
  br label %245

245:                                              ; preds = %238, %239, %243
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #19
  br label %250

246:                                              ; preds = %27
  %247 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %248 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %247, align 8
  %249 = tail call i8* @TfLiteTypeGetName(i32 %30) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %248(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.32, i64 0, i64 0), i8* %249) #19
  br label %250

250:                                              ; preds = %246, %245
  %251 = phi i32 [ 0, %245 ], [ 1, %246 ]
  ret i32 %251
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin12Register_ELUEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin12Register_ELUEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin13Register_RELUEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin13Register_RELUEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin21Register_RELU_N1_TO_1Ev() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_RELU_N1_TO_1EvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin14Register_RELU6Ev() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin14Register_RELU6EvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin17Register_TANH_REFEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin17Register_TANH_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.std::__1::function.285", align 8
  %4 = alloca %"class.std::__1::function.285", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %8 = bitcast i8** %7 to %"struct.tflite::ops::builtin::activations::OpData"**
  %9 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %17 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %16, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %17(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 383, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %13, i32 1) #19
  br label %208

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %20 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %19, align 8
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %26 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %25, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %26(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 384, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %22, i32 1) #19
  br label %208

27:                                               ; preds = %18
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %27, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %27 ]
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 1, i64 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %43 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %42, align 8
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 %44
  br label %46

46:                                               ; preds = %36, %41
  %47 = phi %struct.TfLiteTensor* [ %45, %41 ], [ null, %36 ]
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %49, %51
  br i1 %52, label %59, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %55 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %54, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %49) #19
  %57 = load i32, i32* %50, align 8
  %58 = tail call i8* @TfLiteTypeGetName(i32 %57) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %55(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 387, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %56, i8* %58) #19
  br label %208

59:                                               ; preds = %46
  switch i32 %49, label %154 [
    i32 3, label %60
    i32 9, label %105
  ]

60:                                               ; preds = %59
  %61 = bitcast %"class.std::__1::function.285"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61) #19
  %62 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 1, i32 0
  %63 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %62, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %63, align 8
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %65 = load float, float* %64, align 8
  %66 = fdiv float 1.000000e+00, %65
  %67 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %69 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %71

71:                                               ; preds = %95, %60
  %72 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, %60 ], [ %96, %95 ]
  %73 = phi i64 [ 0, %60 ], [ %93, %95 ]
  %74 = load float, float* %67, align 8
  %75 = load i32, i32* %68, align 4
  %76 = trunc i64 %73 to i32
  %77 = sub nsw i32 %76, %75
  %78 = sitofp i32 %77 to float
  %79 = fmul float %74, %78
  %80 = call float %72(%"union.std::__1::__function::__policy_storage"* nonnull %69, float %79) #19
  %81 = fmul float %66, %80
  %82 = call float @llvm.round.f32(float %81) #19
  %83 = load i32, i32* %70, align 4
  %84 = sitofp i32 %83 to float
  %85 = fadd float %82, %84
  %86 = fptosi float %85 to i32
  %87 = icmp slt i32 %86, 255
  %88 = select i1 %87, i32 %86, i32 255
  %89 = icmp sgt i32 %88, 0
  %90 = select i1 %89, i32 %88, i32 0
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %73
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %73, 1
  %94 = icmp eq i64 %93, 256
  br i1 %94, label %97, label %95

95:                                               ; preds = %71
  %96 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %62, align 8
  br label %71

97:                                               ; preds = %71
  %98 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %63, align 8
  %99 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %98, i64 0, i32 1
  %100 = load void (i8*)*, void (i8*)** %99, align 8
  %101 = icmp eq void (i8*)* %100, null
  br i1 %101, label %151, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  call void %100(i8* %104) #19
  br label %151

105:                                              ; preds = %59
  %106 = bitcast %"class.std::__1::function.285"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %106) #19
  %107 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 1, i32 0
  %108 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %107, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %108, align 8
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %110 = load float, float* %109, align 8
  %111 = fdiv float 1.000000e+00, %110
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %113 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %114 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0
  %115 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %116

116:                                              ; preds = %141, %105
  %117 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, %105 ], [ %142, %141 ]
  %118 = phi i32 [ -128, %105 ], [ %139, %141 ]
  %119 = load float, float* %112, align 8
  %120 = load i32, i32* %113, align 4
  %121 = sub nsw i32 %118, %120
  %122 = sitofp i32 %121 to float
  %123 = fmul float %119, %122
  %124 = call float %117(%"union.std::__1::__function::__policy_storage"* nonnull %114, float %123) #19
  %125 = fmul float %111, %124
  %126 = call float @llvm.round.f32(float %125) #19
  %127 = load i32, i32* %115, align 4
  %128 = sitofp i32 %127 to float
  %129 = fadd float %126, %128
  %130 = fptosi float %129 to i32
  %131 = icmp slt i32 %130, 127
  %132 = select i1 %131, i32 %130, i32 127
  %133 = icmp sgt i32 %132, -128
  %134 = select i1 %133, i32 %132, i32 -128
  %135 = trunc i32 %134 to i8
  %136 = and i32 %118, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %137
  store i8 %135, i8* %138, align 1
  %139 = add nsw i32 %118, 1
  %140 = icmp eq i32 %139, 128
  br i1 %140, label %143, label %141

141:                                              ; preds = %116
  %142 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %107, align 8
  br label %116

143:                                              ; preds = %116
  %144 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %108, align 8
  %145 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %144, i64 0, i32 1
  %146 = load void (i8*)*, void (i8*)** %145, align 8
  %147 = icmp eq void (i8*)* %146, null
  br i1 %147, label %151, label %148

148:                                              ; preds = %143
  %149 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  call void %146(i8* %150) #19
  br label %151

151:                                              ; preds = %148, %143, %102, %97
  %152 = phi i8* [ %61, %97 ], [ %61, %102 ], [ %106, %143 ], [ %106, %148 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %152) #19
  %153 = load i32, i32* %48, align 8
  br label %154

154:                                              ; preds = %151, %59
  %155 = phi i32 [ %153, %151 ], [ %49, %59 ]
  %156 = icmp eq i32 %155, 7
  br i1 %156, label %157, label %201

157:                                              ; preds = %154
  %158 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %157
  %162 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %163 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %162, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %163(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 431, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %159, i32 0) #19
  br label %208

164:                                              ; preds = %157
  %165 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %171, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %170 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %169, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %170(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 432, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %166, i32 0) #19
  br label %208

171:                                              ; preds = %164
  %172 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172) #19
  store i32 -1431655766, i32* %5, align 4
  %173 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %174 = load float, float* %173, align 8
  %175 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %174, i32* nonnull %5) #19
  %176 = load i32, i32* %5, align 4
  %177 = add nsw i32 %176, 12
  %178 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 1
  store i32 %177, i32* %178, align 4
  %179 = icmp ult i32 %177, 2
  %180 = and i1 %175, %179
  br i1 %180, label %186, label %181

181:                                              ; preds = %171
  %182 = load float, float* %173, align 8
  %183 = fmul float %182, 4.096000e+03
  %184 = fptosi float %183 to i32
  %185 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 0
  store i32 %184, i32* %185, align 4
  br label %186

186:                                              ; preds = %171, %181
  %187 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %187) #19
  store i32 -1431655766, i32* %6, align 4
  %188 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %189 = load float, float* %188, align 8
  %190 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %189, i32* nonnull %6) #19
  br i1 %190, label %194, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %193 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %192, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %193(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 455, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #19
  br label %208

194:                                              ; preds = %186
  %195 = load i32, i32* %6, align 4
  %196 = icmp eq i32 %195, -15
  br i1 %196, label %200, label %197

197:                                              ; preds = %194
  %198 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %199 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %198, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %199(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 457, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.48, i64 0, i64 0), i32 %195, i32 -15) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #19
  br label %208

200:                                              ; preds = %194
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #19
  br label %201

201:                                              ; preds = %200, %154
  %202 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %203 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %202, align 8
  %204 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %205 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %204, align 8
  %206 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %205) #19
  %207 = call i32 %203(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %47, %struct.TfLiteIntArray* %206) #19
  br label %208

208:                                              ; preds = %53, %161, %168, %201, %197, %191, %24, %15
  %209 = phi i32 [ 1, %15 ], [ 1, %24 ], [ 1, %53 ], [ 1, %161 ], [ 1, %168 ], [ %207, %201 ], [ 1, %197 ], [ 1, %191 ]
  ret i32 %209
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %8 = bitcast i8** %7 to %"struct.tflite::ops::builtin::activations::OpData"**
  %9 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %17 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 %18
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi %struct.TfLiteTensor* [ %19, %15 ], [ null, %2 ]
  %22 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %23 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %23, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %20 ]
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  switch i32 %35, label %498 [
    i32 1, label %36
    i32 7, label %245
    i32 3, label %496
    i32 9, label %497
  ]

36:                                               ; preds = %32
  %37 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #19
  %38 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %40, align 8, !alias.scope !270
  br label %69

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8, !noalias !270
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4, !noalias !270
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %47 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %45, i32* %47, align 8, !alias.scope !270
  %48 = icmp sgt i32 %45, 5
  br i1 %48, label %49, label %56

49:                                               ; preds = %41
  %50 = sext i32 %45 to i64
  %51 = shl nsw i64 %50, 2
  %52 = tail call i8* @_Znam(i64 %51) #18, !noalias !270
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8, !alias.scope !270
  %55 = bitcast i8* %52 to i32*
  br label %61

56:                                               ; preds = %41
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i32*
  %59 = sext i32 %45 to i64
  %60 = shl nsw i64 %59, 2
  br label %61

61:                                               ; preds = %56, %49
  %62 = phi i64 [ %51, %49 ], [ %60, %56 ]
  %63 = phi i32* [ %55, %49 ], [ %58, %56 ]
  %64 = bitcast i32* %63 to i8*
  %65 = bitcast i32* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %62, i1 false) #19
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %67 = bitcast %union.TfLitePtrUnion* %66 to float**
  %68 = load float*, float** %67, align 8
  br label %69

69:                                               ; preds = %39, %61
  %70 = phi i32 [ %45, %61 ], [ 0, %39 ]
  %71 = phi float* [ %68, %61 ], [ null, %39 ]
  %72 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #19
  %73 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !273
  br label %104

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %77, align 8, !noalias !273
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4, !noalias !273
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 0
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %80, i32* %82, align 8, !alias.scope !273
  %83 = icmp sgt i32 %80, 5
  br i1 %83, label %84, label %91

84:                                               ; preds = %76
  %85 = sext i32 %80 to i64
  %86 = shl nsw i64 %85, 2
  %87 = tail call i8* @_Znam(i64 %86) #18, !noalias !273
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = bitcast i32** %88 to i8**
  store i8* %87, i8** %89, align 8, !alias.scope !273
  %90 = bitcast i8* %87 to i32*
  br label %96

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %93 = bitcast %union.anon* %92 to i32*
  %94 = sext i32 %80 to i64
  %95 = shl nsw i64 %94, 2
  br label %96

96:                                               ; preds = %91, %84
  %97 = phi i64 [ %86, %84 ], [ %95, %91 ]
  %98 = phi i32* [ %90, %84 ], [ %93, %91 ]
  %99 = bitcast i32* %98 to i8*
  %100 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %100, i64 %97, i1 false) #19
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %102 = bitcast %union.TfLitePtrUnion* %101 to float**
  %103 = load float*, float** %102, align 8
  br label %104

104:                                              ; preds = %74, %96
  %105 = phi i32 [ %80, %96 ], [ 0, %74 ]
  %106 = phi float* [ %103, %96 ], [ null, %74 ]
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %108 = icmp sgt i32 %70, 5
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = getelementptr inbounds %union.anon, %union.anon* %107, i64 0, i32 0
  %111 = load i32*, i32** %110, align 8
  br label %115

112:                                              ; preds = %104
  %113 = bitcast %union.anon* %107 to i32*
  %114 = icmp sgt i32 %70, 0
  br i1 %114, label %115, label %218

115:                                              ; preds = %112, %109
  %116 = phi i32* [ %111, %109 ], [ %113, %112 ]
  %117 = zext i32 %70 to i64
  %118 = icmp ult i32 %70, 8
  br i1 %118, label %204, label %119

119:                                              ; preds = %115
  %120 = and i64 %117, 4294967288
  %121 = add nsw i64 %120, -8
  %122 = lshr exact i64 %121, 3
  %123 = add nuw nsw i64 %122, 1
  %124 = and i64 %123, 3
  %125 = icmp ult i64 %121, 24
  br i1 %125, label %171, label %126

126:                                              ; preds = %119
  %127 = sub nsw i64 %123, %124
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %168, %128 ]
  %130 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %126 ], [ %166, %128 ]
  %131 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %126 ], [ %167, %128 ]
  %132 = phi i64 [ %127, %126 ], [ %169, %128 ]
  %133 = getelementptr inbounds i32, i32* %116, i64 %129
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr inbounds i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = mul nsw <4 x i32> %135, %130
  %140 = mul nsw <4 x i32> %138, %131
  %141 = or i64 %129, 8
  %142 = getelementptr inbounds i32, i32* %116, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = mul nsw <4 x i32> %144, %139
  %149 = mul nsw <4 x i32> %147, %140
  %150 = or i64 %129, 16
  %151 = getelementptr inbounds i32, i32* %116, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = mul nsw <4 x i32> %153, %148
  %158 = mul nsw <4 x i32> %156, %149
  %159 = or i64 %129, 24
  %160 = getelementptr inbounds i32, i32* %116, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = mul nsw <4 x i32> %162, %157
  %167 = mul nsw <4 x i32> %165, %158
  %168 = add i64 %129, 32
  %169 = add i64 %132, -4
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %128, !llvm.loop !276

171:                                              ; preds = %128, %119
  %172 = phi <4 x i32> [ undef, %119 ], [ %166, %128 ]
  %173 = phi <4 x i32> [ undef, %119 ], [ %167, %128 ]
  %174 = phi i64 [ 0, %119 ], [ %168, %128 ]
  %175 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %119 ], [ %166, %128 ]
  %176 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %119 ], [ %167, %128 ]
  %177 = icmp eq i64 %124, 0
  br i1 %177, label %194, label %178

178:                                              ; preds = %171, %178
  %179 = phi i64 [ %191, %178 ], [ %174, %171 ]
  %180 = phi <4 x i32> [ %189, %178 ], [ %175, %171 ]
  %181 = phi <4 x i32> [ %190, %178 ], [ %176, %171 ]
  %182 = phi i64 [ %192, %178 ], [ %124, %171 ]
  %183 = getelementptr inbounds i32, i32* %116, i64 %179
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %179, 8
  %192 = add i64 %182, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %178, !llvm.loop !277

194:                                              ; preds = %178, %171
  %195 = phi <4 x i32> [ %172, %171 ], [ %189, %178 ]
  %196 = phi <4 x i32> [ %173, %171 ], [ %190, %178 ]
  %197 = mul <4 x i32> %196, %195
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %199 = mul <4 x i32> %197, %198
  %200 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %201 = mul <4 x i32> %199, %200
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = icmp eq i64 %120, %117
  br i1 %203, label %215, label %204

204:                                              ; preds = %194, %115
  %205 = phi i64 [ 0, %115 ], [ %120, %194 ]
  %206 = phi i32 [ 1, %115 ], [ %202, %194 ]
  br label %207

207:                                              ; preds = %204, %207
  %208 = phi i64 [ %213, %207 ], [ %205, %204 ]
  %209 = phi i32 [ %212, %207 ], [ %206, %204 ]
  %210 = getelementptr inbounds i32, i32* %116, i64 %208
  %211 = load i32, i32* %210, align 4
  %212 = mul nsw i32 %211, %209
  %213 = add nuw nsw i64 %208, 1
  %214 = icmp eq i64 %213, %117
  br i1 %214, label %215, label %207, !llvm.loop !278

215:                                              ; preds = %207, %194
  %216 = phi i32 [ %202, %194 ], [ %212, %207 ]
  %217 = icmp sgt i32 %216, 0
  br i1 %217, label %218, label %229

218:                                              ; preds = %215, %112
  %219 = phi i32 [ %216, %215 ], [ 1, %112 ]
  %220 = zext i32 %219 to i64
  br label %221

221:                                              ; preds = %221, %218
  %222 = phi i64 [ 0, %218 ], [ %227, %221 ]
  %223 = getelementptr inbounds float, float* %71, i64 %222
  %224 = load float, float* %223, align 4
  %225 = tail call float @tanhf(float %224) #19
  %226 = getelementptr inbounds float, float* %106, i64 %222
  store float %225, float* %226, align 4
  %227 = add nuw nsw i64 %222, 1
  %228 = icmp eq i64 %227, %220
  br i1 %228, label %229, label %221

229:                                              ; preds = %221, %215
  %230 = icmp sgt i32 %105, 5
  br i1 %230, label %231, label %237

231:                                              ; preds = %229
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %233 = load i32*, i32** %232, align 8
  %234 = icmp eq i32* %233, null
  br i1 %234, label %237, label %235

235:                                              ; preds = %231
  %236 = bitcast i32* %233 to i8*
  tail call void @_ZdaPv(i8* %236) #18
  br label %237

237:                                              ; preds = %229, %231, %235
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #19
  br i1 %108, label %238, label %244

238:                                              ; preds = %237
  %239 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %240 = load i32*, i32** %239, align 8
  %241 = icmp eq i32* %240, null
  br i1 %241, label %244, label %242

242:                                              ; preds = %238
  %243 = bitcast i32* %240 to i8*
  tail call void @_ZdaPv(i8* %243) #18
  br label %244

244:                                              ; preds = %237, %238, %242
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #19
  br label %502

245:                                              ; preds = %32
  %246 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 1
  %247 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %247) #19
  %248 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %248, label %249, label %251

249:                                              ; preds = %245
  %250 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %250, align 8, !alias.scope !279
  br label %276

251:                                              ; preds = %245
  %252 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %253 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %252, align 8, !noalias !279
  %254 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %253, i64 0, i32 0
  %255 = load i32, i32* %254, align 4, !noalias !279
  %256 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %253, i64 0, i32 1, i64 0
  %257 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %255, i32* %257, align 8, !alias.scope !279
  %258 = icmp sgt i32 %255, 5
  br i1 %258, label %259, label %266

259:                                              ; preds = %251
  %260 = sext i32 %255 to i64
  %261 = shl nsw i64 %260, 2
  %262 = tail call i8* @_Znam(i64 %261) #18, !noalias !279
  %263 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %264 = bitcast i32** %263 to i8**
  store i8* %262, i8** %264, align 8, !alias.scope !279
  %265 = bitcast i8* %262 to i32*
  br label %271

266:                                              ; preds = %251
  %267 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %268 = bitcast %union.anon* %267 to i32*
  %269 = sext i32 %255 to i64
  %270 = shl nsw i64 %269, 2
  br label %271

271:                                              ; preds = %266, %259
  %272 = phi i64 [ %261, %259 ], [ %270, %266 ]
  %273 = phi i32* [ %265, %259 ], [ %268, %266 ]
  %274 = bitcast i32* %273 to i8*
  %275 = bitcast i32* %256 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %274, i8* align 4 %275, i64 %272, i1 false) #19
  br label %276

276:                                              ; preds = %249, %271
  %277 = phi i32 [ 0, %249 ], [ %255, %271 ]
  %278 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %278) #19
  %279 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %279, label %280, label %282

280:                                              ; preds = %276
  %281 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %281, align 8, !alias.scope !282
  br label %307

282:                                              ; preds = %276
  %283 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %284 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %283, align 8, !noalias !282
  %285 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %284, i64 0, i32 0
  %286 = load i32, i32* %285, align 4, !noalias !282
  %287 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %284, i64 0, i32 1, i64 0
  %288 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %286, i32* %288, align 8, !alias.scope !282
  %289 = icmp sgt i32 %286, 5
  br i1 %289, label %290, label %297

290:                                              ; preds = %282
  %291 = sext i32 %286 to i64
  %292 = shl nsw i64 %291, 2
  %293 = tail call i8* @_Znam(i64 %292) #18, !noalias !282
  %294 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %295 = bitcast i32** %294 to i8**
  store i8* %293, i8** %295, align 8, !alias.scope !282
  %296 = bitcast i8* %293 to i32*
  br label %302

297:                                              ; preds = %282
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %299 = bitcast %union.anon* %298 to i32*
  %300 = sext i32 %286 to i64
  %301 = shl nsw i64 %300, 2
  br label %302

302:                                              ; preds = %297, %290
  %303 = phi i64 [ %292, %290 ], [ %301, %297 ]
  %304 = phi i32* [ %296, %290 ], [ %299, %297 ]
  %305 = bitcast i32* %304 to i8*
  %306 = bitcast i32* %287 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %305, i8* align 4 %306, i64 %303, i1 false) #19
  br label %307

307:                                              ; preds = %280, %302
  %308 = phi i32 [ 0, %280 ], [ %286, %302 ]
  %309 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %310 = icmp sgt i32 %277, 5
  br i1 %310, label %311, label %314

311:                                              ; preds = %307
  %312 = getelementptr inbounds %union.anon, %union.anon* %309, i64 0, i32 0
  %313 = load i32*, i32** %312, align 8
  br label %317

314:                                              ; preds = %307
  %315 = bitcast %union.anon* %309 to i32*
  %316 = icmp sgt i32 %277, 0
  br i1 %316, label %317, label %417

317:                                              ; preds = %314, %311
  %318 = phi i32* [ %313, %311 ], [ %315, %314 ]
  %319 = zext i32 %277 to i64
  %320 = icmp ult i32 %277, 8
  br i1 %320, label %406, label %321

321:                                              ; preds = %317
  %322 = and i64 %319, 4294967288
  %323 = add nsw i64 %322, -8
  %324 = lshr exact i64 %323, 3
  %325 = add nuw nsw i64 %324, 1
  %326 = and i64 %325, 3
  %327 = icmp ult i64 %323, 24
  br i1 %327, label %373, label %328

328:                                              ; preds = %321
  %329 = sub nsw i64 %325, %326
  br label %330

330:                                              ; preds = %330, %328
  %331 = phi i64 [ 0, %328 ], [ %370, %330 ]
  %332 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %328 ], [ %368, %330 ]
  %333 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %328 ], [ %369, %330 ]
  %334 = phi i64 [ %329, %328 ], [ %371, %330 ]
  %335 = getelementptr inbounds i32, i32* %318, i64 %331
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = getelementptr inbounds i32, i32* %335, i64 4
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = mul nsw <4 x i32> %337, %332
  %342 = mul nsw <4 x i32> %340, %333
  %343 = or i64 %331, 8
  %344 = getelementptr inbounds i32, i32* %318, i64 %343
  %345 = bitcast i32* %344 to <4 x i32>*
  %346 = load <4 x i32>, <4 x i32>* %345, align 4
  %347 = getelementptr inbounds i32, i32* %344, i64 4
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 4
  %350 = mul nsw <4 x i32> %346, %341
  %351 = mul nsw <4 x i32> %349, %342
  %352 = or i64 %331, 16
  %353 = getelementptr inbounds i32, i32* %318, i64 %352
  %354 = bitcast i32* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 4
  %356 = getelementptr inbounds i32, i32* %353, i64 4
  %357 = bitcast i32* %356 to <4 x i32>*
  %358 = load <4 x i32>, <4 x i32>* %357, align 4
  %359 = mul nsw <4 x i32> %355, %350
  %360 = mul nsw <4 x i32> %358, %351
  %361 = or i64 %331, 24
  %362 = getelementptr inbounds i32, i32* %318, i64 %361
  %363 = bitcast i32* %362 to <4 x i32>*
  %364 = load <4 x i32>, <4 x i32>* %363, align 4
  %365 = getelementptr inbounds i32, i32* %362, i64 4
  %366 = bitcast i32* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 4
  %368 = mul nsw <4 x i32> %364, %359
  %369 = mul nsw <4 x i32> %367, %360
  %370 = add i64 %331, 32
  %371 = add i64 %334, -4
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %330, !llvm.loop !285

373:                                              ; preds = %330, %321
  %374 = phi <4 x i32> [ undef, %321 ], [ %368, %330 ]
  %375 = phi <4 x i32> [ undef, %321 ], [ %369, %330 ]
  %376 = phi i64 [ 0, %321 ], [ %370, %330 ]
  %377 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %321 ], [ %368, %330 ]
  %378 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %321 ], [ %369, %330 ]
  %379 = icmp eq i64 %326, 0
  br i1 %379, label %396, label %380

380:                                              ; preds = %373, %380
  %381 = phi i64 [ %393, %380 ], [ %376, %373 ]
  %382 = phi <4 x i32> [ %391, %380 ], [ %377, %373 ]
  %383 = phi <4 x i32> [ %392, %380 ], [ %378, %373 ]
  %384 = phi i64 [ %394, %380 ], [ %326, %373 ]
  %385 = getelementptr inbounds i32, i32* %318, i64 %381
  %386 = bitcast i32* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 4
  %388 = getelementptr inbounds i32, i32* %385, i64 4
  %389 = bitcast i32* %388 to <4 x i32>*
  %390 = load <4 x i32>, <4 x i32>* %389, align 4
  %391 = mul nsw <4 x i32> %387, %382
  %392 = mul nsw <4 x i32> %390, %383
  %393 = add i64 %381, 8
  %394 = add i64 %384, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %380, !llvm.loop !286

396:                                              ; preds = %380, %373
  %397 = phi <4 x i32> [ %374, %373 ], [ %391, %380 ]
  %398 = phi <4 x i32> [ %375, %373 ], [ %392, %380 ]
  %399 = mul <4 x i32> %398, %397
  %400 = shufflevector <4 x i32> %399, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %401 = mul <4 x i32> %399, %400
  %402 = shufflevector <4 x i32> %401, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %403 = mul <4 x i32> %401, %402
  %404 = extractelement <4 x i32> %403, i32 0
  %405 = icmp eq i64 %322, %319
  br i1 %405, label %417, label %406

406:                                              ; preds = %396, %317
  %407 = phi i64 [ 0, %317 ], [ %322, %396 ]
  %408 = phi i32 [ 1, %317 ], [ %404, %396 ]
  br label %409

409:                                              ; preds = %406, %409
  %410 = phi i64 [ %415, %409 ], [ %407, %406 ]
  %411 = phi i32 [ %414, %409 ], [ %408, %406 ]
  %412 = getelementptr inbounds i32, i32* %318, i64 %410
  %413 = load i32, i32* %412, align 4
  %414 = mul nsw i32 %413, %411
  %415 = add nuw nsw i64 %410, 1
  %416 = icmp eq i64 %415, %319
  br i1 %416, label %417, label %409, !llvm.loop !287

417:                                              ; preds = %409, %396, %314
  %418 = phi i32 [ 1, %314 ], [ %404, %396 ], [ %414, %409 ]
  %419 = icmp sgt i32 %308, 5
  br i1 %419, label %420, label %426

420:                                              ; preds = %417
  %421 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %422 = load i32*, i32** %421, align 8
  %423 = icmp eq i32* %422, null
  br i1 %423, label %426, label %424

424:                                              ; preds = %420
  %425 = bitcast i32* %422 to i8*
  tail call void @_ZdaPv(i8* %425) #18
  br label %426

426:                                              ; preds = %417, %420, %424
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %278) #19
  br i1 %310, label %427, label %433

427:                                              ; preds = %426
  %428 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %429 = load i32*, i32** %428, align 8
  %430 = icmp eq i32* %429, null
  br i1 %430, label %433, label %431

431:                                              ; preds = %427
  %432 = bitcast i32* %429 to i8*
  tail call void @_ZdaPv(i8* %432) #18
  br label %433

433:                                              ; preds = %426, %427, %431
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %247) #19
  %434 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 0
  %435 = load i32, i32* %434, align 4
  %436 = load i32, i32* %246, align 4
  br i1 %248, label %441, label %437

437:                                              ; preds = %433
  %438 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %439 = bitcast %union.TfLitePtrUnion* %438 to i16**
  %440 = load i16*, i16** %439, align 8
  br label %441

441:                                              ; preds = %433, %437
  %442 = phi i16* [ %440, %437 ], [ null, %433 ]
  br i1 %279, label %447, label %443

443:                                              ; preds = %441
  %444 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %445 = bitcast %union.TfLitePtrUnion* %444 to i16**
  %446 = load i16*, i16** %445, align 8
  br label %447

447:                                              ; preds = %441, %443
  %448 = phi i16* [ %446, %443 ], [ null, %441 ]
  %449 = icmp sgt i32 %435, 1
  %450 = select i1 %449, i32 %435, i32 1
  %451 = icmp sgt i32 %418, 0
  br i1 %451, label %452, label %502

452:                                              ; preds = %447
  %453 = icmp eq i32 %436, 1
  %454 = zext i1 %453 to i32
  br label %455

455:                                              ; preds = %484, %452
  %456 = phi i16* [ %442, %452 ], [ %493, %484 ]
  %457 = phi i16* [ %448, %452 ], [ %494, %484 ]
  %458 = phi i32 [ 0, %452 ], [ %492, %484 ]
  %459 = load i16, i16* %456, align 2
  %460 = sext i16 %459 to i32
  %461 = mul nsw i32 %450, %460
  %462 = shl i32 %461, %454
  %463 = icmp slt i32 %462, 0
  %464 = sub nsw i32 0, %462
  %465 = select i1 %463, i32 %464, i32 %462
  %466 = mul nsw i32 %465, 3
  %467 = lshr i32 %466, 8
  %468 = icmp ugt i32 %466, 65279
  br i1 %468, label %484, label %469

469:                                              ; preds = %455
  %470 = zext i32 %467 to i64
  %471 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %470
  %472 = load i16, i16* %471, align 2
  %473 = zext i16 %472 to i32
  %474 = add nuw nsw i32 %467, 1
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %475
  %477 = load i16, i16* %476, align 2
  %478 = zext i16 %477 to i32
  %479 = shl nuw nsw i32 %473, 8
  %480 = and i32 %466, 255
  %481 = sub nsw i32 %478, %473
  %482 = mul nsw i32 %481, %480
  %483 = add nsw i32 %482, %479
  br label %484

484:                                              ; preds = %469, %455
  %485 = phi i32 [ %483, %469 ], [ 16776960, %455 ]
  %486 = icmp sgt i32 %462, -1
  %487 = add nsw i32 %485, 8388736
  %488 = sub nsw i32 8388735, %485
  %489 = select i1 %486, i32 %487, i32 %488
  %490 = lshr i32 %489, 8
  %491 = trunc i32 %490 to i16
  store i16 %491, i16* %457, align 2
  %492 = add nuw nsw i32 %458, 1
  %493 = getelementptr inbounds i16, i16* %456, i64 1
  %494 = getelementptr inbounds i16, i16* %457, i64 1
  %495 = icmp eq i32 %492, %418
  br i1 %495, label %502, label %455

496:                                              ; preds = %32
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %9, %struct.TfLiteTensor* %21, %struct.TfLiteTensor* %33)
  br label %502

497:                                              ; preds = %32
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %9, %struct.TfLiteTensor* %21, %struct.TfLiteTensor* %33)
  br label %502

498:                                              ; preds = %32
  %499 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %500 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %499, align 8
  %501 = tail call i8* @TfLiteTypeGetName(i32 %35) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %500(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.49, i64 0, i64 0), i8* %501) #19
  br label %502

502:                                              ; preds = %484, %447, %498, %497, %496, %244
  %503 = phi i32 [ 1, %498 ], [ 0, %497 ], [ 0, %496 ], [ 0, %244 ], [ 0, %447 ], [ 0, %484 ]
  ret i32 %503
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin25Register_TANH_GENERIC_OPTEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin25Register_TANH_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.std::__1::function.285", align 8
  %4 = alloca %"class.std::__1::function.285", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %8 = bitcast i8** %7 to %"struct.tflite::ops::builtin::activations::OpData"**
  %9 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %17 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %16, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %17(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 383, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %13, i32 1) #19
  br label %208

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %20 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %19, align 8
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %26 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %25, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %26(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 384, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %22, i32 1) #19
  br label %208

27:                                               ; preds = %18
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %27, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %27 ]
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 1, i64 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %43 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %42, align 8
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 %44
  br label %46

46:                                               ; preds = %36, %41
  %47 = phi %struct.TfLiteTensor* [ %45, %41 ], [ null, %36 ]
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %49, %51
  br i1 %52, label %59, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %55 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %54, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %49) #19
  %57 = load i32, i32* %50, align 8
  %58 = tail call i8* @TfLiteTypeGetName(i32 %57) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %55(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 387, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %56, i8* %58) #19
  br label %208

59:                                               ; preds = %46
  switch i32 %49, label %154 [
    i32 3, label %60
    i32 9, label %105
  ]

60:                                               ; preds = %59
  %61 = bitcast %"class.std::__1::function.285"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61) #19
  %62 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 1, i32 0
  %63 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %62, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %63, align 8
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %65 = load float, float* %64, align 8
  %66 = fdiv float 1.000000e+00, %65
  %67 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %69 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %71

71:                                               ; preds = %95, %60
  %72 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, %60 ], [ %96, %95 ]
  %73 = phi i64 [ 0, %60 ], [ %93, %95 ]
  %74 = load float, float* %67, align 8
  %75 = load i32, i32* %68, align 4
  %76 = trunc i64 %73 to i32
  %77 = sub nsw i32 %76, %75
  %78 = sitofp i32 %77 to float
  %79 = fmul float %74, %78
  %80 = call float %72(%"union.std::__1::__function::__policy_storage"* nonnull %69, float %79) #19
  %81 = fmul float %66, %80
  %82 = call float @llvm.round.f32(float %81) #19
  %83 = load i32, i32* %70, align 4
  %84 = sitofp i32 %83 to float
  %85 = fadd float %82, %84
  %86 = fptosi float %85 to i32
  %87 = icmp slt i32 %86, 255
  %88 = select i1 %87, i32 %86, i32 255
  %89 = icmp sgt i32 %88, 0
  %90 = select i1 %89, i32 %88, i32 0
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %73
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %73, 1
  %94 = icmp eq i64 %93, 256
  br i1 %94, label %97, label %95

95:                                               ; preds = %71
  %96 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %62, align 8
  br label %71

97:                                               ; preds = %71
  %98 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %63, align 8
  %99 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %98, i64 0, i32 1
  %100 = load void (i8*)*, void (i8*)** %99, align 8
  %101 = icmp eq void (i8*)* %100, null
  br i1 %101, label %151, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  call void %100(i8* %104) #19
  br label %151

105:                                              ; preds = %59
  %106 = bitcast %"class.std::__1::function.285"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %106) #19
  %107 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 1, i32 0
  %108 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %107, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %108, align 8
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %110 = load float, float* %109, align 8
  %111 = fdiv float 1.000000e+00, %110
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %113 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %114 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0
  %115 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %116

116:                                              ; preds = %141, %105
  %117 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, %105 ], [ %142, %141 ]
  %118 = phi i32 [ -128, %105 ], [ %139, %141 ]
  %119 = load float, float* %112, align 8
  %120 = load i32, i32* %113, align 4
  %121 = sub nsw i32 %118, %120
  %122 = sitofp i32 %121 to float
  %123 = fmul float %119, %122
  %124 = call float %117(%"union.std::__1::__function::__policy_storage"* nonnull %114, float %123) #19
  %125 = fmul float %111, %124
  %126 = call float @llvm.round.f32(float %125) #19
  %127 = load i32, i32* %115, align 4
  %128 = sitofp i32 %127 to float
  %129 = fadd float %126, %128
  %130 = fptosi float %129 to i32
  %131 = icmp slt i32 %130, 127
  %132 = select i1 %131, i32 %130, i32 127
  %133 = icmp sgt i32 %132, -128
  %134 = select i1 %133, i32 %132, i32 -128
  %135 = trunc i32 %134 to i8
  %136 = and i32 %118, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %137
  store i8 %135, i8* %138, align 1
  %139 = add nsw i32 %118, 1
  %140 = icmp eq i32 %139, 128
  br i1 %140, label %143, label %141

141:                                              ; preds = %116
  %142 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %107, align 8
  br label %116

143:                                              ; preds = %116
  %144 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %108, align 8
  %145 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %144, i64 0, i32 1
  %146 = load void (i8*)*, void (i8*)** %145, align 8
  %147 = icmp eq void (i8*)* %146, null
  br i1 %147, label %151, label %148

148:                                              ; preds = %143
  %149 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  call void %146(i8* %150) #19
  br label %151

151:                                              ; preds = %148, %143, %102, %97
  %152 = phi i8* [ %61, %97 ], [ %61, %102 ], [ %106, %143 ], [ %106, %148 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %152) #19
  %153 = load i32, i32* %48, align 8
  br label %154

154:                                              ; preds = %151, %59
  %155 = phi i32 [ %153, %151 ], [ %49, %59 ]
  %156 = icmp eq i32 %155, 7
  br i1 %156, label %157, label %201

157:                                              ; preds = %154
  %158 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %157
  %162 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %163 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %162, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %163(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 431, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %159, i32 0) #19
  br label %208

164:                                              ; preds = %157
  %165 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %171, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %170 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %169, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %170(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 432, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %166, i32 0) #19
  br label %208

171:                                              ; preds = %164
  %172 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172) #19
  store i32 -1431655766, i32* %5, align 4
  %173 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %174 = load float, float* %173, align 8
  %175 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %174, i32* nonnull %5) #19
  %176 = load i32, i32* %5, align 4
  %177 = add nsw i32 %176, 12
  %178 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 1
  store i32 %177, i32* %178, align 4
  %179 = icmp ult i32 %177, 2
  %180 = and i1 %175, %179
  br i1 %180, label %186, label %181

181:                                              ; preds = %171
  %182 = load float, float* %173, align 8
  %183 = fmul float %182, 4.096000e+03
  %184 = fptosi float %183 to i32
  %185 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 0
  store i32 %184, i32* %185, align 4
  br label %186

186:                                              ; preds = %171, %181
  %187 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %187) #19
  store i32 -1431655766, i32* %6, align 4
  %188 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %189 = load float, float* %188, align 8
  %190 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %189, i32* nonnull %6) #19
  br i1 %190, label %194, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %193 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %192, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %193(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 455, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #19
  br label %208

194:                                              ; preds = %186
  %195 = load i32, i32* %6, align 4
  %196 = icmp eq i32 %195, -15
  br i1 %196, label %200, label %197

197:                                              ; preds = %194
  %198 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %199 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %198, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %199(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 457, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.48, i64 0, i64 0), i32 %195, i32 -15) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #19
  br label %208

200:                                              ; preds = %194
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #19
  br label %201

201:                                              ; preds = %200, %154
  %202 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %203 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %202, align 8
  %204 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %205 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %204, align 8
  %206 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %205) #19
  %207 = call i32 %203(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %47, %struct.TfLiteIntArray* %206) #19
  br label %208

208:                                              ; preds = %53, %161, %168, %201, %197, %191, %24, %15
  %209 = phi i32 [ 1, %15 ], [ 1, %24 ], [ 1, %53 ], [ 1, %161 ], [ 1, %168 ], [ %207, %201 ], [ 1, %197 ], [ 1, %191 ]
  ret i32 %209
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"struct.Eigen::internal::evaluator.327", align 8
  %4 = alloca %"struct.Eigen::internal::evaluator.337", align 8
  %5 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.342", align 8
  %6 = alloca %"struct.Eigen::internal::assign_op", align 1
  %7 = alloca %"class.Eigen::ArrayWrapper.320", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %15 = bitcast i8** %14 to %"struct.tflite::ops::builtin::activations::OpData"**
  %16 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %2, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %2 ]
  %29 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %30 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %29, align 8
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %27
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %27, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %27 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  switch i32 %42, label %883 [
    i32 1, label %43
    i32 7, label %374
    i32 3, label %881
    i32 9, label %882
  ]

43:                                               ; preds = %39
  %44 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %44) #19
  %45 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %47, align 8, !alias.scope !288
  br label %76

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %50 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %49, align 8, !noalias !288
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %50, i64 0, i32 0
  %52 = load i32, i32* %51, align 4, !noalias !288
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %50, i64 0, i32 1, i64 0
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %52, i32* %54, align 8, !alias.scope !288
  %55 = icmp sgt i32 %52, 5
  br i1 %55, label %56, label %63

56:                                               ; preds = %48
  %57 = sext i32 %52 to i64
  %58 = shl nsw i64 %57, 2
  %59 = tail call i8* @_Znam(i64 %58) #18, !noalias !288
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %61 = bitcast i32** %60 to i8**
  store i8* %59, i8** %61, align 8, !alias.scope !288
  %62 = bitcast i8* %59 to i32*
  br label %68

63:                                               ; preds = %48
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %65 = bitcast %union.anon* %64 to i32*
  %66 = sext i32 %52 to i64
  %67 = shl nsw i64 %66, 2
  br label %68

68:                                               ; preds = %63, %56
  %69 = phi i64 [ %58, %56 ], [ %67, %63 ]
  %70 = phi i32* [ %62, %56 ], [ %65, %63 ]
  %71 = bitcast i32* %70 to i8*
  %72 = bitcast i32* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %72, i64 %69, i1 false) #19
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %74 = bitcast %union.TfLitePtrUnion* %73 to i64*
  %75 = load i64, i64* %74, align 8
  br label %76

76:                                               ; preds = %46, %68
  %77 = phi i32 [ %52, %68 ], [ 0, %46 ]
  %78 = phi i64 [ %75, %68 ], [ 0, %46 ]
  %79 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %79) #19
  %80 = icmp eq %struct.TfLiteTensor* %40, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %82, align 8, !alias.scope !291
  br label %111

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 2
  %85 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %84, align 8, !noalias !291
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %85, i64 0, i32 0
  %87 = load i32, i32* %86, align 4, !noalias !291
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %85, i64 0, i32 1, i64 0
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %87, i32* %89, align 8, !alias.scope !291
  %90 = icmp sgt i32 %87, 5
  br i1 %90, label %91, label %98

91:                                               ; preds = %83
  %92 = sext i32 %87 to i64
  %93 = shl nsw i64 %92, 2
  %94 = tail call i8* @_Znam(i64 %93) #18, !noalias !291
  %95 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %96 = bitcast i32** %95 to i8**
  store i8* %94, i8** %96, align 8, !alias.scope !291
  %97 = bitcast i8* %94 to i32*
  br label %103

98:                                               ; preds = %83
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %100 = bitcast %union.anon* %99 to i32*
  %101 = sext i32 %87 to i64
  %102 = shl nsw i64 %101, 2
  br label %103

103:                                              ; preds = %98, %91
  %104 = phi i64 [ %93, %91 ], [ %102, %98 ]
  %105 = phi i32* [ %97, %91 ], [ %100, %98 ]
  %106 = bitcast i32* %105 to i8*
  %107 = bitcast i32* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %107, i64 %104, i1 false) #19
  %108 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 1
  %109 = bitcast %union.TfLitePtrUnion* %108 to float**
  %110 = load float*, float** %109, align 8
  br label %111

111:                                              ; preds = %81, %103
  %112 = phi i32 [ %87, %103 ], [ 0, %81 ]
  %113 = phi float* [ %110, %103 ], [ null, %81 ]
  %114 = icmp sgt i32 %77, 5
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  br i1 %114, label %116, label %119

116:                                              ; preds = %111
  %117 = getelementptr inbounds %union.anon, %union.anon* %115, i64 0, i32 0
  %118 = load i32*, i32** %117, align 8, !noalias !294
  br label %122

119:                                              ; preds = %111
  %120 = bitcast %union.anon* %115 to i32*
  %121 = icmp sgt i32 %77, 0
  br i1 %121, label %122, label %225

122:                                              ; preds = %119, %116
  %123 = phi i32* [ %118, %116 ], [ %120, %119 ]
  %124 = zext i32 %77 to i64
  %125 = icmp ult i32 %77, 8
  br i1 %125, label %211, label %126

126:                                              ; preds = %122
  %127 = and i64 %124, 4294967288
  %128 = add nsw i64 %127, -8
  %129 = lshr exact i64 %128, 3
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 3
  %132 = icmp ult i64 %128, 24
  br i1 %132, label %178, label %133

133:                                              ; preds = %126
  %134 = sub nsw i64 %130, %131
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ 0, %133 ], [ %175, %135 ]
  %137 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %133 ], [ %173, %135 ]
  %138 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %133 ], [ %174, %135 ]
  %139 = phi i64 [ %134, %133 ], [ %176, %135 ]
  %140 = getelementptr inbounds i32, i32* %123, i64 %136
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !noalias !294
  %143 = getelementptr inbounds i32, i32* %140, i64 4
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !noalias !294
  %146 = mul nsw <4 x i32> %142, %137
  %147 = mul nsw <4 x i32> %145, %138
  %148 = or i64 %136, 8
  %149 = getelementptr inbounds i32, i32* %123, i64 %148
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !noalias !294
  %152 = getelementptr inbounds i32, i32* %149, i64 4
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4, !noalias !294
  %155 = mul nsw <4 x i32> %151, %146
  %156 = mul nsw <4 x i32> %154, %147
  %157 = or i64 %136, 16
  %158 = getelementptr inbounds i32, i32* %123, i64 %157
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4, !noalias !294
  %161 = getelementptr inbounds i32, i32* %158, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4, !noalias !294
  %164 = mul nsw <4 x i32> %160, %155
  %165 = mul nsw <4 x i32> %163, %156
  %166 = or i64 %136, 24
  %167 = getelementptr inbounds i32, i32* %123, i64 %166
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4, !noalias !294
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4, !noalias !294
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = add i64 %136, 32
  %176 = add i64 %139, -4
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %135, !llvm.loop !297

178:                                              ; preds = %135, %126
  %179 = phi <4 x i32> [ undef, %126 ], [ %173, %135 ]
  %180 = phi <4 x i32> [ undef, %126 ], [ %174, %135 ]
  %181 = phi i64 [ 0, %126 ], [ %175, %135 ]
  %182 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %126 ], [ %173, %135 ]
  %183 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %126 ], [ %174, %135 ]
  %184 = icmp eq i64 %131, 0
  br i1 %184, label %201, label %185

185:                                              ; preds = %178, %185
  %186 = phi i64 [ %198, %185 ], [ %181, %178 ]
  %187 = phi <4 x i32> [ %196, %185 ], [ %182, %178 ]
  %188 = phi <4 x i32> [ %197, %185 ], [ %183, %178 ]
  %189 = phi i64 [ %199, %185 ], [ %131, %178 ]
  %190 = getelementptr inbounds i32, i32* %123, i64 %186
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 4, !noalias !294
  %193 = getelementptr inbounds i32, i32* %190, i64 4
  %194 = bitcast i32* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 4, !noalias !294
  %196 = mul nsw <4 x i32> %192, %187
  %197 = mul nsw <4 x i32> %195, %188
  %198 = add i64 %186, 8
  %199 = add i64 %189, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %185, !llvm.loop !298

201:                                              ; preds = %185, %178
  %202 = phi <4 x i32> [ %179, %178 ], [ %196, %185 ]
  %203 = phi <4 x i32> [ %180, %178 ], [ %197, %185 ]
  %204 = mul <4 x i32> %203, %202
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %206 = mul <4 x i32> %204, %205
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %208 = mul <4 x i32> %206, %207
  %209 = extractelement <4 x i32> %208, i32 0
  %210 = icmp eq i64 %127, %124
  br i1 %210, label %222, label %211

211:                                              ; preds = %201, %122
  %212 = phi i64 [ 0, %122 ], [ %127, %201 ]
  %213 = phi i32 [ 1, %122 ], [ %209, %201 ]
  br label %214

214:                                              ; preds = %211, %214
  %215 = phi i64 [ %220, %214 ], [ %212, %211 ]
  %216 = phi i32 [ %219, %214 ], [ %213, %211 ]
  %217 = getelementptr inbounds i32, i32* %123, i64 %215
  %218 = load i32, i32* %217, align 4, !noalias !294
  %219 = mul nsw i32 %218, %216
  %220 = add nuw nsw i64 %215, 1
  %221 = icmp eq i64 %220, %124
  br i1 %221, label %222, label %214, !llvm.loop !299

222:                                              ; preds = %214, %201
  %223 = phi i32 [ %209, %201 ], [ %219, %214 ]
  %224 = sext i32 %223 to i64
  br label %225

225:                                              ; preds = %222, %119
  %226 = phi i64 [ 1, %119 ], [ %224, %222 ]
  %227 = icmp sgt i32 %112, 5
  %228 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  br i1 %227, label %229, label %232

229:                                              ; preds = %225
  %230 = getelementptr inbounds %union.anon, %union.anon* %228, i64 0, i32 0
  %231 = load i32*, i32** %230, align 8, !noalias !300
  br label %235

232:                                              ; preds = %225
  %233 = bitcast %union.anon* %228 to i32*
  %234 = icmp sgt i32 %112, 0
  br i1 %234, label %235, label %338

235:                                              ; preds = %232, %229
  %236 = phi i32* [ %231, %229 ], [ %233, %232 ]
  %237 = zext i32 %112 to i64
  %238 = icmp ult i32 %112, 8
  br i1 %238, label %324, label %239

239:                                              ; preds = %235
  %240 = and i64 %237, 4294967288
  %241 = add nsw i64 %240, -8
  %242 = lshr exact i64 %241, 3
  %243 = add nuw nsw i64 %242, 1
  %244 = and i64 %243, 3
  %245 = icmp ult i64 %241, 24
  br i1 %245, label %291, label %246

246:                                              ; preds = %239
  %247 = sub nsw i64 %243, %244
  br label %248

248:                                              ; preds = %248, %246
  %249 = phi i64 [ 0, %246 ], [ %288, %248 ]
  %250 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %246 ], [ %286, %248 ]
  %251 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %246 ], [ %287, %248 ]
  %252 = phi i64 [ %247, %246 ], [ %289, %248 ]
  %253 = getelementptr inbounds i32, i32* %236, i64 %249
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !noalias !300
  %256 = getelementptr inbounds i32, i32* %253, i64 4
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 4, !noalias !300
  %259 = mul nsw <4 x i32> %255, %250
  %260 = mul nsw <4 x i32> %258, %251
  %261 = or i64 %249, 8
  %262 = getelementptr inbounds i32, i32* %236, i64 %261
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4, !noalias !300
  %265 = getelementptr inbounds i32, i32* %262, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4, !noalias !300
  %268 = mul nsw <4 x i32> %264, %259
  %269 = mul nsw <4 x i32> %267, %260
  %270 = or i64 %249, 16
  %271 = getelementptr inbounds i32, i32* %236, i64 %270
  %272 = bitcast i32* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4, !noalias !300
  %274 = getelementptr inbounds i32, i32* %271, i64 4
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4, !noalias !300
  %277 = mul nsw <4 x i32> %273, %268
  %278 = mul nsw <4 x i32> %276, %269
  %279 = or i64 %249, 24
  %280 = getelementptr inbounds i32, i32* %236, i64 %279
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 4, !noalias !300
  %283 = getelementptr inbounds i32, i32* %280, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !noalias !300
  %286 = mul nsw <4 x i32> %282, %277
  %287 = mul nsw <4 x i32> %285, %278
  %288 = add i64 %249, 32
  %289 = add i64 %252, -4
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %291, label %248, !llvm.loop !303

291:                                              ; preds = %248, %239
  %292 = phi <4 x i32> [ undef, %239 ], [ %286, %248 ]
  %293 = phi <4 x i32> [ undef, %239 ], [ %287, %248 ]
  %294 = phi i64 [ 0, %239 ], [ %288, %248 ]
  %295 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %239 ], [ %286, %248 ]
  %296 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %239 ], [ %287, %248 ]
  %297 = icmp eq i64 %244, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %291, %298
  %299 = phi i64 [ %311, %298 ], [ %294, %291 ]
  %300 = phi <4 x i32> [ %309, %298 ], [ %295, %291 ]
  %301 = phi <4 x i32> [ %310, %298 ], [ %296, %291 ]
  %302 = phi i64 [ %312, %298 ], [ %244, %291 ]
  %303 = getelementptr inbounds i32, i32* %236, i64 %299
  %304 = bitcast i32* %303 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 4, !noalias !300
  %306 = getelementptr inbounds i32, i32* %303, i64 4
  %307 = bitcast i32* %306 to <4 x i32>*
  %308 = load <4 x i32>, <4 x i32>* %307, align 4, !noalias !300
  %309 = mul nsw <4 x i32> %305, %300
  %310 = mul nsw <4 x i32> %308, %301
  %311 = add i64 %299, 8
  %312 = add i64 %302, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !304

314:                                              ; preds = %298, %291
  %315 = phi <4 x i32> [ %292, %291 ], [ %309, %298 ]
  %316 = phi <4 x i32> [ %293, %291 ], [ %310, %298 ]
  %317 = mul <4 x i32> %316, %315
  %318 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %319 = mul <4 x i32> %317, %318
  %320 = shufflevector <4 x i32> %319, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %321 = mul <4 x i32> %319, %320
  %322 = extractelement <4 x i32> %321, i32 0
  %323 = icmp eq i64 %240, %237
  br i1 %323, label %335, label %324

324:                                              ; preds = %314, %235
  %325 = phi i64 [ 0, %235 ], [ %240, %314 ]
  %326 = phi i32 [ 1, %235 ], [ %322, %314 ]
  br label %327

327:                                              ; preds = %324, %327
  %328 = phi i64 [ %333, %327 ], [ %325, %324 ]
  %329 = phi i32 [ %332, %327 ], [ %326, %324 ]
  %330 = getelementptr inbounds i32, i32* %236, i64 %328
  %331 = load i32, i32* %330, align 4, !noalias !300
  %332 = mul nsw i32 %331, %329
  %333 = add nuw nsw i64 %328, 1
  %334 = icmp eq i64 %333, %237
  br i1 %334, label %335, label %327, !llvm.loop !305

335:                                              ; preds = %327, %314
  %336 = phi i32 [ %322, %314 ], [ %332, %327 ]
  %337 = sext i32 %336 to i64
  br label %338

338:                                              ; preds = %232, %335
  %339 = phi i64 [ 1, %232 ], [ %337, %335 ]
  %340 = bitcast %"class.Eigen::ArrayWrapper.320"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %340) #19
  %341 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %113, float** %341, align 8
  %342 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %339, i64* %342, align 8
  %343 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %343) #19
  %344 = bitcast %"struct.Eigen::internal::evaluator.327"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %344) #19
  %345 = getelementptr inbounds %"struct.Eigen::internal::evaluator.327", %"struct.Eigen::internal::evaluator.327"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %346 = bitcast i8* %345 to i64*
  store i64 -6148914691236517206, i64* %346, align 8
  %347 = bitcast %"struct.Eigen::internal::evaluator.327"* %3 to i64*
  store i64 %78, i64* %347, align 8
  %348 = getelementptr inbounds %"struct.Eigen::internal::evaluator.327", %"struct.Eigen::internal::evaluator.327"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %226, i64* %348, align 8
  %349 = bitcast %"struct.Eigen::internal::evaluator.337"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %349) #19
  %350 = getelementptr inbounds %"struct.Eigen::internal::evaluator.337", %"struct.Eigen::internal::evaluator.337"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %351 = bitcast i8* %350 to i64*
  store i64 -6148914691236517206, i64* %351, align 8
  %352 = ptrtoint float* %113 to i64
  %353 = bitcast %"struct.Eigen::internal::evaluator.337"* %4 to i64*
  store i64 %352, i64* %353, align 8
  %354 = getelementptr inbounds %"struct.Eigen::internal::evaluator.337", %"struct.Eigen::internal::evaluator.337"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %339, i64* %354, align 8
  %355 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %355) #19
  %356 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 0
  %357 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 1
  %358 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 2
  %359 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 3
  store %"struct.Eigen::internal::evaluator.337"* %4, %"struct.Eigen::internal::evaluator.337"** %356, align 8
  store %"struct.Eigen::internal::evaluator.327"* %3, %"struct.Eigen::internal::evaluator.327"** %357, align 8
  store %"struct.Eigen::internal::assign_op"* %6, %"struct.Eigen::internal::assign_op"** %358, align 8
  store %"class.Eigen::ArrayWrapper.320"* %7, %"class.Eigen::ArrayWrapper.320"** %359, align 8
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKNS4_INS5_IKS7_Li0ES9_EEEEEEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSO_(%"class.Eigen::internal::generic_dense_assignment_kernel.342"* nonnull dereferenceable(32) %5) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %355) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %349) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %344) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %343) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %340) #19
  br i1 %227, label %360, label %366

360:                                              ; preds = %338
  %361 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %362 = load i32*, i32** %361, align 8
  %363 = icmp eq i32* %362, null
  br i1 %363, label %366, label %364

364:                                              ; preds = %360
  %365 = bitcast i32* %362 to i8*
  call void @_ZdaPv(i8* %365) #18
  br label %366

366:                                              ; preds = %338, %360, %364
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %79) #19
  br i1 %114, label %367, label %373

367:                                              ; preds = %366
  %368 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %369 = load i32*, i32** %368, align 8
  %370 = icmp eq i32* %369, null
  br i1 %370, label %373, label %371

371:                                              ; preds = %367
  %372 = bitcast i32* %369 to i8*
  call void @_ZdaPv(i8* %372) #18
  br label %373

373:                                              ; preds = %366, %367, %371
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #19
  br label %887

374:                                              ; preds = %39
  %375 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %16, i64 0, i32 1
  %376 = load i32, i32* %375, align 4
  %377 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %16, i64 0, i32 0
  %378 = load i32, i32* %377, align 4
  %379 = icmp sgt i32 %378, 0
  br i1 %379, label %380, label %629

380:                                              ; preds = %374
  %381 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %381) #19
  %382 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %382, label %383, label %385

383:                                              ; preds = %380
  %384 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %384, align 8, !alias.scope !306
  br label %410

385:                                              ; preds = %380
  %386 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %387 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %386, align 8, !noalias !306
  %388 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %387, i64 0, i32 0
  %389 = load i32, i32* %388, align 4, !noalias !306
  %390 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %387, i64 0, i32 1, i64 0
  %391 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %389, i32* %391, align 8, !alias.scope !306
  %392 = icmp sgt i32 %389, 5
  br i1 %392, label %393, label %400

393:                                              ; preds = %385
  %394 = sext i32 %389 to i64
  %395 = shl nsw i64 %394, 2
  %396 = tail call i8* @_Znam(i64 %395) #18, !noalias !306
  %397 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %398 = bitcast i32** %397 to i8**
  store i8* %396, i8** %398, align 8, !alias.scope !306
  %399 = bitcast i8* %396 to i32*
  br label %405

400:                                              ; preds = %385
  %401 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %402 = bitcast %union.anon* %401 to i32*
  %403 = sext i32 %389 to i64
  %404 = shl nsw i64 %403, 2
  br label %405

405:                                              ; preds = %400, %393
  %406 = phi i64 [ %395, %393 ], [ %404, %400 ]
  %407 = phi i32* [ %399, %393 ], [ %402, %400 ]
  %408 = bitcast i32* %407 to i8*
  %409 = bitcast i32* %390 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %408, i8* align 4 %409, i64 %406, i1 false) #19
  br label %410

410:                                              ; preds = %383, %405
  %411 = phi i32 [ 0, %383 ], [ %389, %405 ]
  %412 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %412) #19
  %413 = icmp eq %struct.TfLiteTensor* %40, null
  br i1 %413, label %414, label %416

414:                                              ; preds = %410
  %415 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %415, align 8, !alias.scope !309
  br label %441

416:                                              ; preds = %410
  %417 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 2
  %418 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %417, align 8, !noalias !309
  %419 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %418, i64 0, i32 0
  %420 = load i32, i32* %419, align 4, !noalias !309
  %421 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %418, i64 0, i32 1, i64 0
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %420, i32* %422, align 8, !alias.scope !309
  %423 = icmp sgt i32 %420, 5
  br i1 %423, label %424, label %431

424:                                              ; preds = %416
  %425 = sext i32 %420 to i64
  %426 = shl nsw i64 %425, 2
  %427 = tail call i8* @_Znam(i64 %426) #18, !noalias !309
  %428 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %429 = bitcast i32** %428 to i8**
  store i8* %427, i8** %429, align 8, !alias.scope !309
  %430 = bitcast i8* %427 to i32*
  br label %436

431:                                              ; preds = %416
  %432 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %433 = bitcast %union.anon* %432 to i32*
  %434 = sext i32 %420 to i64
  %435 = shl nsw i64 %434, 2
  br label %436

436:                                              ; preds = %431, %424
  %437 = phi i64 [ %426, %424 ], [ %435, %431 ]
  %438 = phi i32* [ %430, %424 ], [ %433, %431 ]
  %439 = bitcast i32* %438 to i8*
  %440 = bitcast i32* %421 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %439, i8* align 4 %440, i64 %437, i1 false) #19
  br label %441

441:                                              ; preds = %414, %436
  %442 = phi i32 [ 0, %414 ], [ %420, %436 ]
  %443 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %444 = icmp sgt i32 %411, 5
  br i1 %444, label %445, label %448

445:                                              ; preds = %441
  %446 = getelementptr inbounds %union.anon, %union.anon* %443, i64 0, i32 0
  %447 = load i32*, i32** %446, align 8
  br label %451

448:                                              ; preds = %441
  %449 = bitcast %union.anon* %443 to i32*
  %450 = icmp sgt i32 %411, 0
  br i1 %450, label %451, label %551

451:                                              ; preds = %448, %445
  %452 = phi i32* [ %447, %445 ], [ %449, %448 ]
  %453 = zext i32 %411 to i64
  %454 = icmp ult i32 %411, 8
  br i1 %454, label %540, label %455

455:                                              ; preds = %451
  %456 = and i64 %453, 4294967288
  %457 = add nsw i64 %456, -8
  %458 = lshr exact i64 %457, 3
  %459 = add nuw nsw i64 %458, 1
  %460 = and i64 %459, 3
  %461 = icmp ult i64 %457, 24
  br i1 %461, label %507, label %462

462:                                              ; preds = %455
  %463 = sub nsw i64 %459, %460
  br label %464

464:                                              ; preds = %464, %462
  %465 = phi i64 [ 0, %462 ], [ %504, %464 ]
  %466 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %462 ], [ %502, %464 ]
  %467 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %462 ], [ %503, %464 ]
  %468 = phi i64 [ %463, %462 ], [ %505, %464 ]
  %469 = getelementptr inbounds i32, i32* %452, i64 %465
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4
  %472 = getelementptr inbounds i32, i32* %469, i64 4
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4
  %475 = mul nsw <4 x i32> %471, %466
  %476 = mul nsw <4 x i32> %474, %467
  %477 = or i64 %465, 8
  %478 = getelementptr inbounds i32, i32* %452, i64 %477
  %479 = bitcast i32* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 4
  %481 = getelementptr inbounds i32, i32* %478, i64 4
  %482 = bitcast i32* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 4
  %484 = mul nsw <4 x i32> %480, %475
  %485 = mul nsw <4 x i32> %483, %476
  %486 = or i64 %465, 16
  %487 = getelementptr inbounds i32, i32* %452, i64 %486
  %488 = bitcast i32* %487 to <4 x i32>*
  %489 = load <4 x i32>, <4 x i32>* %488, align 4
  %490 = getelementptr inbounds i32, i32* %487, i64 4
  %491 = bitcast i32* %490 to <4 x i32>*
  %492 = load <4 x i32>, <4 x i32>* %491, align 4
  %493 = mul nsw <4 x i32> %489, %484
  %494 = mul nsw <4 x i32> %492, %485
  %495 = or i64 %465, 24
  %496 = getelementptr inbounds i32, i32* %452, i64 %495
  %497 = bitcast i32* %496 to <4 x i32>*
  %498 = load <4 x i32>, <4 x i32>* %497, align 4
  %499 = getelementptr inbounds i32, i32* %496, i64 4
  %500 = bitcast i32* %499 to <4 x i32>*
  %501 = load <4 x i32>, <4 x i32>* %500, align 4
  %502 = mul nsw <4 x i32> %498, %493
  %503 = mul nsw <4 x i32> %501, %494
  %504 = add i64 %465, 32
  %505 = add i64 %468, -4
  %506 = icmp eq i64 %505, 0
  br i1 %506, label %507, label %464, !llvm.loop !312

507:                                              ; preds = %464, %455
  %508 = phi <4 x i32> [ undef, %455 ], [ %502, %464 ]
  %509 = phi <4 x i32> [ undef, %455 ], [ %503, %464 ]
  %510 = phi i64 [ 0, %455 ], [ %504, %464 ]
  %511 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %455 ], [ %502, %464 ]
  %512 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %455 ], [ %503, %464 ]
  %513 = icmp eq i64 %460, 0
  br i1 %513, label %530, label %514

514:                                              ; preds = %507, %514
  %515 = phi i64 [ %527, %514 ], [ %510, %507 ]
  %516 = phi <4 x i32> [ %525, %514 ], [ %511, %507 ]
  %517 = phi <4 x i32> [ %526, %514 ], [ %512, %507 ]
  %518 = phi i64 [ %528, %514 ], [ %460, %507 ]
  %519 = getelementptr inbounds i32, i32* %452, i64 %515
  %520 = bitcast i32* %519 to <4 x i32>*
  %521 = load <4 x i32>, <4 x i32>* %520, align 4
  %522 = getelementptr inbounds i32, i32* %519, i64 4
  %523 = bitcast i32* %522 to <4 x i32>*
  %524 = load <4 x i32>, <4 x i32>* %523, align 4
  %525 = mul nsw <4 x i32> %521, %516
  %526 = mul nsw <4 x i32> %524, %517
  %527 = add i64 %515, 8
  %528 = add i64 %518, -1
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %530, label %514, !llvm.loop !313

530:                                              ; preds = %514, %507
  %531 = phi <4 x i32> [ %508, %507 ], [ %525, %514 ]
  %532 = phi <4 x i32> [ %509, %507 ], [ %526, %514 ]
  %533 = mul <4 x i32> %532, %531
  %534 = shufflevector <4 x i32> %533, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %535 = mul <4 x i32> %533, %534
  %536 = shufflevector <4 x i32> %535, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %537 = mul <4 x i32> %535, %536
  %538 = extractelement <4 x i32> %537, i32 0
  %539 = icmp eq i64 %456, %453
  br i1 %539, label %551, label %540

540:                                              ; preds = %530, %451
  %541 = phi i64 [ 0, %451 ], [ %456, %530 ]
  %542 = phi i32 [ 1, %451 ], [ %538, %530 ]
  br label %543

543:                                              ; preds = %540, %543
  %544 = phi i64 [ %549, %543 ], [ %541, %540 ]
  %545 = phi i32 [ %548, %543 ], [ %542, %540 ]
  %546 = getelementptr inbounds i32, i32* %452, i64 %544
  %547 = load i32, i32* %546, align 4
  %548 = mul nsw i32 %547, %545
  %549 = add nuw nsw i64 %544, 1
  %550 = icmp eq i64 %549, %453
  br i1 %550, label %551, label %543, !llvm.loop !314

551:                                              ; preds = %543, %530, %448
  %552 = phi i32 [ 1, %448 ], [ %538, %530 ], [ %548, %543 ]
  %553 = icmp sgt i32 %442, 5
  br i1 %553, label %554, label %560

554:                                              ; preds = %551
  %555 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %556 = load i32*, i32** %555, align 8
  %557 = icmp eq i32* %556, null
  br i1 %557, label %560, label %558

558:                                              ; preds = %554
  %559 = bitcast i32* %556 to i8*
  tail call void @_ZdaPv(i8* %559) #18
  br label %560

560:                                              ; preds = %551, %554, %558
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %412) #19
  br i1 %444, label %561, label %567

561:                                              ; preds = %560
  %562 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %563 = load i32*, i32** %562, align 8
  %564 = icmp eq i32* %563, null
  br i1 %564, label %567, label %565

565:                                              ; preds = %561
  %566 = bitcast i32* %563 to i8*
  tail call void @_ZdaPv(i8* %566) #18
  br label %567

567:                                              ; preds = %560, %561, %565
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %381) #19
  %568 = load i32, i32* %377, align 4
  %569 = load i32, i32* %375, align 4
  br i1 %382, label %574, label %570

570:                                              ; preds = %567
  %571 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %572 = bitcast %union.TfLitePtrUnion* %571 to i16**
  %573 = load i16*, i16** %572, align 8
  br label %574

574:                                              ; preds = %567, %570
  %575 = phi i16* [ %573, %570 ], [ null, %567 ]
  br i1 %413, label %580, label %576

576:                                              ; preds = %574
  %577 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 1
  %578 = bitcast %union.TfLitePtrUnion* %577 to i16**
  %579 = load i16*, i16** %578, align 8
  br label %580

580:                                              ; preds = %574, %576
  %581 = phi i16* [ %579, %576 ], [ null, %574 ]
  %582 = icmp sgt i32 %568, 1
  %583 = select i1 %582, i32 %568, i32 1
  %584 = icmp sgt i32 %552, 0
  br i1 %584, label %585, label %887

585:                                              ; preds = %580
  %586 = icmp eq i32 %569, 1
  %587 = zext i1 %586 to i32
  br label %588

588:                                              ; preds = %617, %585
  %589 = phi i16* [ %575, %585 ], [ %626, %617 ]
  %590 = phi i16* [ %581, %585 ], [ %627, %617 ]
  %591 = phi i32 [ 0, %585 ], [ %625, %617 ]
  %592 = load i16, i16* %589, align 2
  %593 = sext i16 %592 to i32
  %594 = mul nsw i32 %583, %593
  %595 = shl i32 %594, %587
  %596 = icmp slt i32 %595, 0
  %597 = sub nsw i32 0, %595
  %598 = select i1 %596, i32 %597, i32 %595
  %599 = mul nsw i32 %598, 3
  %600 = lshr i32 %599, 8
  %601 = icmp ugt i32 %599, 65279
  br i1 %601, label %617, label %602

602:                                              ; preds = %588
  %603 = zext i32 %600 to i64
  %604 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %603
  %605 = load i16, i16* %604, align 2
  %606 = zext i16 %605 to i32
  %607 = add nuw nsw i32 %600, 1
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %608
  %610 = load i16, i16* %609, align 2
  %611 = zext i16 %610 to i32
  %612 = shl nuw nsw i32 %606, 8
  %613 = and i32 %599, 255
  %614 = sub nsw i32 %611, %606
  %615 = mul nsw i32 %614, %613
  %616 = add nsw i32 %615, %612
  br label %617

617:                                              ; preds = %602, %588
  %618 = phi i32 [ %616, %602 ], [ 16776960, %588 ]
  %619 = icmp sgt i32 %595, -1
  %620 = add nsw i32 %618, 8388736
  %621 = sub nsw i32 8388735, %618
  %622 = select i1 %619, i32 %620, i32 %621
  %623 = lshr i32 %622, 8
  %624 = trunc i32 %623 to i16
  store i16 %624, i16* %590, align 2
  %625 = add nuw nsw i32 %591, 1
  %626 = getelementptr inbounds i16, i16* %589, i64 1
  %627 = getelementptr inbounds i16, i16* %590, i64 1
  %628 = icmp eq i32 %625, %552
  br i1 %628, label %887, label %588

629:                                              ; preds = %374
  %630 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %630) #19
  %631 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %631, label %632, label %634

632:                                              ; preds = %629
  %633 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %633, align 8, !alias.scope !315
  br label %662

634:                                              ; preds = %629
  %635 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %636 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %635, align 8, !noalias !315
  %637 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %636, i64 0, i32 0
  %638 = load i32, i32* %637, align 4, !noalias !315
  %639 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %636, i64 0, i32 1, i64 0
  %640 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %638, i32* %640, align 8, !alias.scope !315
  %641 = icmp sgt i32 %638, 5
  br i1 %641, label %642, label %649

642:                                              ; preds = %634
  %643 = sext i32 %638 to i64
  %644 = shl nsw i64 %643, 2
  %645 = tail call i8* @_Znam(i64 %644) #18, !noalias !315
  %646 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %647 = bitcast i32** %646 to i8**
  store i8* %645, i8** %647, align 8, !alias.scope !315
  %648 = bitcast i8* %645 to i32*
  br label %654

649:                                              ; preds = %634
  %650 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %651 = bitcast %union.anon* %650 to i32*
  %652 = sext i32 %638 to i64
  %653 = shl nsw i64 %652, 2
  br label %654

654:                                              ; preds = %649, %642
  %655 = phi i64 [ %644, %642 ], [ %653, %649 ]
  %656 = phi i32* [ %648, %642 ], [ %651, %649 ]
  %657 = bitcast i32* %656 to i8*
  %658 = bitcast i32* %639 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %657, i8* align 4 %658, i64 %655, i1 false) #19
  %659 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %660 = bitcast %union.TfLitePtrUnion* %659 to i16**
  %661 = load i16*, i16** %660, align 8
  br label %662

662:                                              ; preds = %632, %654
  %663 = phi i32 [ %638, %654 ], [ 0, %632 ]
  %664 = phi i16* [ %661, %654 ], [ null, %632 ]
  %665 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %665) #19
  %666 = icmp eq %struct.TfLiteTensor* %40, null
  br i1 %666, label %667, label %669

667:                                              ; preds = %662
  %668 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %668, align 8, !alias.scope !318
  br label %697

669:                                              ; preds = %662
  %670 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 2
  %671 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %670, align 8, !noalias !318
  %672 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %671, i64 0, i32 0
  %673 = load i32, i32* %672, align 4, !noalias !318
  %674 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %671, i64 0, i32 1, i64 0
  %675 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %673, i32* %675, align 8, !alias.scope !318
  %676 = icmp sgt i32 %673, 5
  br i1 %676, label %677, label %684

677:                                              ; preds = %669
  %678 = sext i32 %673 to i64
  %679 = shl nsw i64 %678, 2
  %680 = tail call i8* @_Znam(i64 %679) #18, !noalias !318
  %681 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %682 = bitcast i32** %681 to i8**
  store i8* %680, i8** %682, align 8, !alias.scope !318
  %683 = bitcast i8* %680 to i32*
  br label %689

684:                                              ; preds = %669
  %685 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %686 = bitcast %union.anon* %685 to i32*
  %687 = sext i32 %673 to i64
  %688 = shl nsw i64 %687, 2
  br label %689

689:                                              ; preds = %684, %677
  %690 = phi i64 [ %679, %677 ], [ %688, %684 ]
  %691 = phi i32* [ %683, %677 ], [ %686, %684 ]
  %692 = bitcast i32* %691 to i8*
  %693 = bitcast i32* %674 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %692, i8* align 4 %693, i64 %690, i1 false) #19
  %694 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 1
  %695 = bitcast %union.TfLitePtrUnion* %694 to i16**
  %696 = load i16*, i16** %695, align 8
  br label %697

697:                                              ; preds = %667, %689
  %698 = phi i16* [ %696, %689 ], [ null, %667 ]
  %699 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %700 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %701 = icmp sgt i32 %663, 5
  br i1 %701, label %702, label %705

702:                                              ; preds = %697
  %703 = getelementptr inbounds %union.anon, %union.anon* %700, i64 0, i32 0
  %704 = load i32*, i32** %703, align 8
  br label %708

705:                                              ; preds = %697
  %706 = bitcast %union.anon* %700 to i32*
  %707 = icmp sgt i32 %663, 0
  br i1 %707, label %708, label %808

708:                                              ; preds = %705, %702
  %709 = phi i32* [ %704, %702 ], [ %706, %705 ]
  %710 = zext i32 %663 to i64
  %711 = icmp ult i32 %663, 8
  br i1 %711, label %797, label %712

712:                                              ; preds = %708
  %713 = and i64 %710, 4294967288
  %714 = add nsw i64 %713, -8
  %715 = lshr exact i64 %714, 3
  %716 = add nuw nsw i64 %715, 1
  %717 = and i64 %716, 3
  %718 = icmp ult i64 %714, 24
  br i1 %718, label %764, label %719

719:                                              ; preds = %712
  %720 = sub nsw i64 %716, %717
  br label %721

721:                                              ; preds = %721, %719
  %722 = phi i64 [ 0, %719 ], [ %761, %721 ]
  %723 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %719 ], [ %759, %721 ]
  %724 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %719 ], [ %760, %721 ]
  %725 = phi i64 [ %720, %719 ], [ %762, %721 ]
  %726 = getelementptr inbounds i32, i32* %709, i64 %722
  %727 = bitcast i32* %726 to <4 x i32>*
  %728 = load <4 x i32>, <4 x i32>* %727, align 4
  %729 = getelementptr inbounds i32, i32* %726, i64 4
  %730 = bitcast i32* %729 to <4 x i32>*
  %731 = load <4 x i32>, <4 x i32>* %730, align 4
  %732 = mul nsw <4 x i32> %728, %723
  %733 = mul nsw <4 x i32> %731, %724
  %734 = or i64 %722, 8
  %735 = getelementptr inbounds i32, i32* %709, i64 %734
  %736 = bitcast i32* %735 to <4 x i32>*
  %737 = load <4 x i32>, <4 x i32>* %736, align 4
  %738 = getelementptr inbounds i32, i32* %735, i64 4
  %739 = bitcast i32* %738 to <4 x i32>*
  %740 = load <4 x i32>, <4 x i32>* %739, align 4
  %741 = mul nsw <4 x i32> %737, %732
  %742 = mul nsw <4 x i32> %740, %733
  %743 = or i64 %722, 16
  %744 = getelementptr inbounds i32, i32* %709, i64 %743
  %745 = bitcast i32* %744 to <4 x i32>*
  %746 = load <4 x i32>, <4 x i32>* %745, align 4
  %747 = getelementptr inbounds i32, i32* %744, i64 4
  %748 = bitcast i32* %747 to <4 x i32>*
  %749 = load <4 x i32>, <4 x i32>* %748, align 4
  %750 = mul nsw <4 x i32> %746, %741
  %751 = mul nsw <4 x i32> %749, %742
  %752 = or i64 %722, 24
  %753 = getelementptr inbounds i32, i32* %709, i64 %752
  %754 = bitcast i32* %753 to <4 x i32>*
  %755 = load <4 x i32>, <4 x i32>* %754, align 4
  %756 = getelementptr inbounds i32, i32* %753, i64 4
  %757 = bitcast i32* %756 to <4 x i32>*
  %758 = load <4 x i32>, <4 x i32>* %757, align 4
  %759 = mul nsw <4 x i32> %755, %750
  %760 = mul nsw <4 x i32> %758, %751
  %761 = add i64 %722, 32
  %762 = add i64 %725, -4
  %763 = icmp eq i64 %762, 0
  br i1 %763, label %764, label %721, !llvm.loop !321

764:                                              ; preds = %721, %712
  %765 = phi <4 x i32> [ undef, %712 ], [ %759, %721 ]
  %766 = phi <4 x i32> [ undef, %712 ], [ %760, %721 ]
  %767 = phi i64 [ 0, %712 ], [ %761, %721 ]
  %768 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %712 ], [ %759, %721 ]
  %769 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %712 ], [ %760, %721 ]
  %770 = icmp eq i64 %717, 0
  br i1 %770, label %787, label %771

771:                                              ; preds = %764, %771
  %772 = phi i64 [ %784, %771 ], [ %767, %764 ]
  %773 = phi <4 x i32> [ %782, %771 ], [ %768, %764 ]
  %774 = phi <4 x i32> [ %783, %771 ], [ %769, %764 ]
  %775 = phi i64 [ %785, %771 ], [ %717, %764 ]
  %776 = getelementptr inbounds i32, i32* %709, i64 %772
  %777 = bitcast i32* %776 to <4 x i32>*
  %778 = load <4 x i32>, <4 x i32>* %777, align 4
  %779 = getelementptr inbounds i32, i32* %776, i64 4
  %780 = bitcast i32* %779 to <4 x i32>*
  %781 = load <4 x i32>, <4 x i32>* %780, align 4
  %782 = mul nsw <4 x i32> %778, %773
  %783 = mul nsw <4 x i32> %781, %774
  %784 = add i64 %772, 8
  %785 = add i64 %775, -1
  %786 = icmp eq i64 %785, 0
  br i1 %786, label %787, label %771, !llvm.loop !322

787:                                              ; preds = %771, %764
  %788 = phi <4 x i32> [ %765, %764 ], [ %782, %771 ]
  %789 = phi <4 x i32> [ %766, %764 ], [ %783, %771 ]
  %790 = mul <4 x i32> %789, %788
  %791 = shufflevector <4 x i32> %790, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %792 = mul <4 x i32> %790, %791
  %793 = shufflevector <4 x i32> %792, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %794 = mul <4 x i32> %792, %793
  %795 = extractelement <4 x i32> %794, i32 0
  %796 = icmp eq i64 %713, %710
  br i1 %796, label %808, label %797

797:                                              ; preds = %787, %708
  %798 = phi i64 [ 0, %708 ], [ %713, %787 ]
  %799 = phi i32 [ 1, %708 ], [ %795, %787 ]
  br label %800

800:                                              ; preds = %797, %800
  %801 = phi i64 [ %806, %800 ], [ %798, %797 ]
  %802 = phi i32 [ %805, %800 ], [ %799, %797 ]
  %803 = getelementptr inbounds i32, i32* %709, i64 %801
  %804 = load i32, i32* %803, align 4
  %805 = mul nsw i32 %804, %802
  %806 = add nuw nsw i64 %801, 1
  %807 = icmp eq i64 %806, %710
  br i1 %807, label %808, label %800, !llvm.loop !323

808:                                              ; preds = %800, %787, %705
  %809 = phi i32 [ 1, %705 ], [ %795, %787 ], [ %805, %800 ]
  %810 = icmp eq i32 %376, 0
  %811 = icmp sgt i32 %809, 0
  br i1 %810, label %813, label %812

812:                                              ; preds = %808
  br i1 %811, label %832, label %861

813:                                              ; preds = %808
  br i1 %811, label %814, label %861

814:                                              ; preds = %813, %814
  %815 = phi i32 [ %830, %814 ], [ 0, %813 ]
  %816 = phi i16* [ %828, %814 ], [ %664, %813 ]
  %817 = phi i16* [ %829, %814 ], [ %698, %813 ]
  %818 = load i16, i16* %816, align 2
  %819 = icmp eq i16 %818, 0
  %820 = sub i16 0, %818
  %821 = icmp slt i16 %818, 0
  %822 = select i1 %821, i16 %818, i16 %820
  %823 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %822) #19
  %824 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %823) #19
  %825 = sub i16 0, %824
  %826 = select i1 %821, i16 %825, i16 %824
  %827 = select i1 %819, i16 0, i16 %826
  store i16 %827, i16* %817, align 2
  %828 = getelementptr inbounds i16, i16* %816, i64 1
  %829 = getelementptr inbounds i16, i16* %817, i64 1
  %830 = add nuw nsw i32 %815, 1
  %831 = icmp eq i32 %830, %809
  br i1 %831, label %861, label %814

832:                                              ; preds = %812, %832
  %833 = phi i32 [ %859, %832 ], [ 0, %812 ]
  %834 = phi i16* [ %857, %832 ], [ %664, %812 ]
  %835 = phi i16* [ %858, %832 ], [ %698, %812 ]
  %836 = load i16, i16* %834, align 2
  %837 = icmp slt i16 %836, 16384
  %838 = icmp sgt i16 %836, -16384
  %839 = sext i16 %836 to i64
  %840 = shl nsw i64 %839, 1
  %841 = icmp slt i64 %840, 32767
  %842 = select i1 %841, i64 %840, i64 32767
  %843 = icmp sgt i64 %842, -32768
  %844 = select i1 %843, i64 %842, i64 -32768
  %845 = trunc i64 %844 to i16
  %846 = select i1 %837, i16 %845, i16 32767
  %847 = select i1 %838, i16 %846, i16 -32768
  %848 = icmp eq i16 %847, 0
  %849 = sub i16 0, %847
  %850 = icmp slt i16 %847, 0
  %851 = select i1 %850, i16 %847, i16 %849
  %852 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %851) #19
  %853 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %852) #19
  %854 = sub i16 0, %853
  %855 = select i1 %850, i16 %854, i16 %853
  %856 = select i1 %848, i16 0, i16 %855
  store i16 %856, i16* %835, align 2
  %857 = getelementptr inbounds i16, i16* %834, i64 1
  %858 = getelementptr inbounds i16, i16* %835, i64 1
  %859 = add nuw nsw i32 %833, 1
  %860 = icmp eq i32 %859, %809
  br i1 %860, label %861, label %832

861:                                              ; preds = %832, %814, %812, %813
  %862 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %863 = load i32, i32* %862, align 8
  %864 = icmp sgt i32 %863, 5
  br i1 %864, label %865, label %871

865:                                              ; preds = %861
  %866 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %867 = load i32*, i32** %866, align 8
  %868 = icmp eq i32* %867, null
  br i1 %868, label %871, label %869

869:                                              ; preds = %865
  %870 = bitcast i32* %867 to i8*
  tail call void @_ZdaPv(i8* %870) #18
  br label %871

871:                                              ; preds = %861, %865, %869
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %665) #19
  %872 = load i32, i32* %699, align 8
  %873 = icmp sgt i32 %872, 5
  br i1 %873, label %874, label %880

874:                                              ; preds = %871
  %875 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %876 = load i32*, i32** %875, align 8
  %877 = icmp eq i32* %876, null
  br i1 %877, label %880, label %878

878:                                              ; preds = %874
  %879 = bitcast i32* %876 to i8*
  tail call void @_ZdaPv(i8* %879) #18
  br label %880

880:                                              ; preds = %871, %874, %878
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %630) #19
  br label %887

881:                                              ; preds = %39
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %16, %struct.TfLiteTensor* %28, %struct.TfLiteTensor* %40)
  br label %887

882:                                              ; preds = %39
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %16, %struct.TfLiteTensor* %28, %struct.TfLiteTensor* %40)
  br label %887

883:                                              ; preds = %39
  %884 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %885 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %884, align 8
  %886 = tail call i8* @TfLiteTypeGetName(i32 %42) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %885(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.49, i64 0, i64 0), i8* %886) #19
  br label %887

887:                                              ; preds = %617, %880, %580, %883, %882, %881, %373
  %888 = phi i32 [ 1, %883 ], [ 0, %882 ], [ 0, %881 ], [ 0, %373 ], [ 0, %580 ], [ 0, %880 ], [ 0, %617 ]
  ret i32 %888
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin29Register_TANH_FIXED_POINT_OPTEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin29Register_TANH_FIXED_POINT_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations11TanhPrepareILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %6 = bitcast i8** %5 to %"struct.tflite::ops::builtin::activations::OpData"**
  %7 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %9 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %15 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %14, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %15(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 383, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %11, i32 1) #19
  br label %131

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %24 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %23, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %24(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 384, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %20, i32 1) #19
  br label %131

25:                                               ; preds = %16
  %26 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 1, i64 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %31 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %30, align 8
  %32 = sext i32 %27 to i64
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 %32
  br label %34

34:                                               ; preds = %25, %29
  %35 = phi %struct.TfLiteTensor* [ %33, %29 ], [ null, %25 ]
  %36 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %41 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %40, align 8
  %42 = sext i32 %37 to i64
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 %42
  br label %44

44:                                               ; preds = %34, %39
  %45 = phi %struct.TfLiteTensor* [ %43, %39 ], [ null, %34 ]
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %57, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %53 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %52, align 8
  %54 = tail call i8* @TfLiteTypeGetName(i32 %47) #19
  %55 = load i32, i32* %48, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %55) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %53(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 387, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %54, i8* %56) #19
  br label %131

57:                                               ; preds = %44
  switch i32 %47, label %77 [
    i32 3, label %58
    i32 9, label %58
  ]

58:                                               ; preds = %57, %57
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 3, i32 0
  %60 = load float, float* %59, align 8
  %61 = fpext float %60 to double
  %62 = fmul double %61, 2.048000e+03
  %63 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 1
  %64 = tail call double @frexp(double %62, i32* %63) #19
  %65 = fmul double %64, 3.276800e+04
  %66 = tail call double @llvm.round.f64(double %65) #19
  %67 = fptosi double %66 to i32
  %68 = shl i32 %67, 16
  %69 = ashr exact i32 %68, 16
  %70 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 0
  store i32 %69, i32* %70, align 4
  %71 = load i32, i32* %63, align 4
  %72 = tail call i32 @_ZN6tflite20CalculateInputRadiusEiii(i32 4, i32 %71, i32 15) #19
  %73 = shl i32 %72, 16
  %74 = ashr exact i32 %73, 16
  %75 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 2
  store i32 %74, i32* %75, align 4
  %76 = load i32, i32* %46, align 8
  br label %77

77:                                               ; preds = %57, %58
  %78 = phi i32 [ %47, %57 ], [ %76, %58 ]
  %79 = icmp eq i32 %78, 7
  br i1 %79, label %80, label %124

80:                                               ; preds = %77
  %81 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 3, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %86 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %85, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %86(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 431, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %82, i32 0) #19
  br label %131

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %93 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %92, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %93(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 432, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %89, i32 0) #19
  br label %131

94:                                               ; preds = %87
  %95 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %95) #19
  store i32 -1431655766, i32* %3, align 4
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 3, i32 0
  %97 = load float, float* %96, align 8
  %98 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %97, i32* nonnull %3) #19
  %99 = load i32, i32* %3, align 4
  %100 = add nsw i32 %99, 12
  %101 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 1
  store i32 %100, i32* %101, align 4
  %102 = icmp ult i32 %100, 2
  %103 = and i1 %98, %102
  br i1 %103, label %109, label %104

104:                                              ; preds = %94
  %105 = load float, float* %96, align 8
  %106 = fmul float %105, 4.096000e+03
  %107 = fptosi float %106 to i32
  %108 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 0
  store i32 %107, i32* %108, align 4
  br label %109

109:                                              ; preds = %94, %104
  %110 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110) #19
  store i32 -1431655766, i32* %4, align 4
  %111 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 0
  %112 = load float, float* %111, align 8
  %113 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %112, i32* nonnull %4) #19
  br i1 %113, label %117, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %116 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %115, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %116(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 455, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %95) #19
  br label %131

117:                                              ; preds = %109
  %118 = load i32, i32* %4, align 4
  %119 = icmp eq i32 %118, -15
  br i1 %119, label %123, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %122 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %121, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %122(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 457, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.48, i64 0, i64 0), i32 %118, i32 -15) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %95) #19
  br label %131

123:                                              ; preds = %117
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %95) #19
  br label %124

124:                                              ; preds = %123, %77
  %125 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %126 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %125, align 8
  %127 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %128 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %127, align 8
  %129 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %128) #19
  %130 = call i32 %126(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %45, %struct.TfLiteIntArray* %129) #19
  br label %131

131:                                              ; preds = %51, %84, %91, %124, %120, %114, %22, %13
  %132 = phi i32 [ 1, %13 ], [ 1, %22 ], [ 1, %51 ], [ 1, %84 ], [ 1, %91 ], [ %130, %124 ], [ 1, %120 ], [ 1, %114 ]
  ret i32 %132
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations8TanhEvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"struct.Eigen::internal::evaluator.327", align 8
  %4 = alloca %"struct.Eigen::internal::evaluator.337", align 8
  %5 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel.342", align 8
  %6 = alloca %"struct.Eigen::internal::assign_op", align 1
  %7 = alloca %"class.Eigen::ArrayWrapper.320", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %19 = bitcast i8** %18 to %"struct.tflite::ops::builtin::activations::OpData"**
  %20 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %19, align 8
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %2
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %2, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %2 ]
  %33 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %34 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %33, align 8
  %35 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %34, i64 0, i32 1, i64 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %40 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %39, align 8
  %41 = sext i32 %36 to i64
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 %41
  br label %43

43:                                               ; preds = %31, %38
  %44 = phi %struct.TfLiteTensor* [ %42, %38 ], [ null, %31 ]
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %46 = load i32, i32* %45, align 8
  switch i32 %46, label %1420 [
    i32 1, label %47
    i32 7, label %378
    i32 3, label %885
    i32 9, label %1153
  ]

47:                                               ; preds = %43
  %48 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %48) #19
  %49 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %49, label %50, label %52

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %51, align 8, !alias.scope !324
  br label %80

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %54 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %53, align 8, !noalias !324
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 4, !noalias !324
  %57 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %54, i64 0, i32 1, i64 0
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %56, i32* %58, align 8, !alias.scope !324
  %59 = icmp sgt i32 %56, 5
  br i1 %59, label %60, label %67

60:                                               ; preds = %52
  %61 = sext i32 %56 to i64
  %62 = shl nsw i64 %61, 2
  %63 = tail call i8* @_Znam(i64 %62) #18, !noalias !324
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %65 = bitcast i32** %64 to i8**
  store i8* %63, i8** %65, align 8, !alias.scope !324
  %66 = bitcast i8* %63 to i32*
  br label %72

67:                                               ; preds = %52
  %68 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %69 = bitcast %union.anon* %68 to i32*
  %70 = sext i32 %56 to i64
  %71 = shl nsw i64 %70, 2
  br label %72

72:                                               ; preds = %67, %60
  %73 = phi i64 [ %62, %60 ], [ %71, %67 ]
  %74 = phi i32* [ %66, %60 ], [ %69, %67 ]
  %75 = bitcast i32* %74 to i8*
  %76 = bitcast i32* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %76, i64 %73, i1 false) #19
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %78 = bitcast %union.TfLitePtrUnion* %77 to i64*
  %79 = load i64, i64* %78, align 8
  br label %80

80:                                               ; preds = %50, %72
  %81 = phi i32 [ %56, %72 ], [ 0, %50 ]
  %82 = phi i64 [ %79, %72 ], [ 0, %50 ]
  %83 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #19
  %84 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %86, align 8, !alias.scope !327
  br label %115

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %89 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %88, align 8, !noalias !327
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %89, i64 0, i32 0
  %91 = load i32, i32* %90, align 4, !noalias !327
  %92 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %89, i64 0, i32 1, i64 0
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %91, i32* %93, align 8, !alias.scope !327
  %94 = icmp sgt i32 %91, 5
  br i1 %94, label %95, label %102

95:                                               ; preds = %87
  %96 = sext i32 %91 to i64
  %97 = shl nsw i64 %96, 2
  %98 = tail call i8* @_Znam(i64 %97) #18, !noalias !327
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %100 = bitcast i32** %99 to i8**
  store i8* %98, i8** %100, align 8, !alias.scope !327
  %101 = bitcast i8* %98 to i32*
  br label %107

102:                                              ; preds = %87
  %103 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %104 = bitcast %union.anon* %103 to i32*
  %105 = sext i32 %91 to i64
  %106 = shl nsw i64 %105, 2
  br label %107

107:                                              ; preds = %102, %95
  %108 = phi i64 [ %97, %95 ], [ %106, %102 ]
  %109 = phi i32* [ %101, %95 ], [ %104, %102 ]
  %110 = bitcast i32* %109 to i8*
  %111 = bitcast i32* %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %110, i8* align 4 %111, i64 %108, i1 false) #19
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %113 = bitcast %union.TfLitePtrUnion* %112 to float**
  %114 = load float*, float** %113, align 8
  br label %115

115:                                              ; preds = %85, %107
  %116 = phi i32 [ %91, %107 ], [ 0, %85 ]
  %117 = phi float* [ %114, %107 ], [ null, %85 ]
  %118 = icmp sgt i32 %81, 5
  %119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  br i1 %118, label %120, label %123

120:                                              ; preds = %115
  %121 = getelementptr inbounds %union.anon, %union.anon* %119, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8, !noalias !330
  br label %126

123:                                              ; preds = %115
  %124 = bitcast %union.anon* %119 to i32*
  %125 = icmp sgt i32 %81, 0
  br i1 %125, label %126, label %229

126:                                              ; preds = %123, %120
  %127 = phi i32* [ %122, %120 ], [ %124, %123 ]
  %128 = zext i32 %81 to i64
  %129 = icmp ult i32 %81, 8
  br i1 %129, label %215, label %130

130:                                              ; preds = %126
  %131 = and i64 %128, 4294967288
  %132 = add nsw i64 %131, -8
  %133 = lshr exact i64 %132, 3
  %134 = add nuw nsw i64 %133, 1
  %135 = and i64 %134, 3
  %136 = icmp ult i64 %132, 24
  br i1 %136, label %182, label %137

137:                                              ; preds = %130
  %138 = sub nsw i64 %134, %135
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i64 [ 0, %137 ], [ %179, %139 ]
  %141 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %137 ], [ %177, %139 ]
  %142 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %137 ], [ %178, %139 ]
  %143 = phi i64 [ %138, %137 ], [ %180, %139 ]
  %144 = getelementptr inbounds i32, i32* %127, i64 %140
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4, !noalias !330
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4, !noalias !330
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = or i64 %140, 8
  %153 = getelementptr inbounds i32, i32* %127, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !noalias !330
  %156 = getelementptr inbounds i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !noalias !330
  %159 = mul nsw <4 x i32> %155, %150
  %160 = mul nsw <4 x i32> %158, %151
  %161 = or i64 %140, 16
  %162 = getelementptr inbounds i32, i32* %127, i64 %161
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4, !noalias !330
  %165 = getelementptr inbounds i32, i32* %162, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4, !noalias !330
  %168 = mul nsw <4 x i32> %164, %159
  %169 = mul nsw <4 x i32> %167, %160
  %170 = or i64 %140, 24
  %171 = getelementptr inbounds i32, i32* %127, i64 %170
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4, !noalias !330
  %174 = getelementptr inbounds i32, i32* %171, i64 4
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4, !noalias !330
  %177 = mul nsw <4 x i32> %173, %168
  %178 = mul nsw <4 x i32> %176, %169
  %179 = add i64 %140, 32
  %180 = add i64 %143, -4
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %139, !llvm.loop !333

182:                                              ; preds = %139, %130
  %183 = phi <4 x i32> [ undef, %130 ], [ %177, %139 ]
  %184 = phi <4 x i32> [ undef, %130 ], [ %178, %139 ]
  %185 = phi i64 [ 0, %130 ], [ %179, %139 ]
  %186 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %130 ], [ %177, %139 ]
  %187 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %130 ], [ %178, %139 ]
  %188 = icmp eq i64 %135, 0
  br i1 %188, label %205, label %189

189:                                              ; preds = %182, %189
  %190 = phi i64 [ %202, %189 ], [ %185, %182 ]
  %191 = phi <4 x i32> [ %200, %189 ], [ %186, %182 ]
  %192 = phi <4 x i32> [ %201, %189 ], [ %187, %182 ]
  %193 = phi i64 [ %203, %189 ], [ %135, %182 ]
  %194 = getelementptr inbounds i32, i32* %127, i64 %190
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4, !noalias !330
  %197 = getelementptr inbounds i32, i32* %194, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4, !noalias !330
  %200 = mul nsw <4 x i32> %196, %191
  %201 = mul nsw <4 x i32> %199, %192
  %202 = add i64 %190, 8
  %203 = add i64 %193, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %189, !llvm.loop !334

205:                                              ; preds = %189, %182
  %206 = phi <4 x i32> [ %183, %182 ], [ %200, %189 ]
  %207 = phi <4 x i32> [ %184, %182 ], [ %201, %189 ]
  %208 = mul <4 x i32> %207, %206
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %210 = mul <4 x i32> %208, %209
  %211 = shufflevector <4 x i32> %210, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %212 = mul <4 x i32> %210, %211
  %213 = extractelement <4 x i32> %212, i32 0
  %214 = icmp eq i64 %131, %128
  br i1 %214, label %226, label %215

215:                                              ; preds = %205, %126
  %216 = phi i64 [ 0, %126 ], [ %131, %205 ]
  %217 = phi i32 [ 1, %126 ], [ %213, %205 ]
  br label %218

218:                                              ; preds = %215, %218
  %219 = phi i64 [ %224, %218 ], [ %216, %215 ]
  %220 = phi i32 [ %223, %218 ], [ %217, %215 ]
  %221 = getelementptr inbounds i32, i32* %127, i64 %219
  %222 = load i32, i32* %221, align 4, !noalias !330
  %223 = mul nsw i32 %222, %220
  %224 = add nuw nsw i64 %219, 1
  %225 = icmp eq i64 %224, %128
  br i1 %225, label %226, label %218, !llvm.loop !335

226:                                              ; preds = %218, %205
  %227 = phi i32 [ %213, %205 ], [ %223, %218 ]
  %228 = sext i32 %227 to i64
  br label %229

229:                                              ; preds = %226, %123
  %230 = phi i64 [ 1, %123 ], [ %228, %226 ]
  %231 = icmp sgt i32 %116, 5
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  br i1 %231, label %233, label %236

233:                                              ; preds = %229
  %234 = getelementptr inbounds %union.anon, %union.anon* %232, i64 0, i32 0
  %235 = load i32*, i32** %234, align 8, !noalias !336
  br label %239

236:                                              ; preds = %229
  %237 = bitcast %union.anon* %232 to i32*
  %238 = icmp sgt i32 %116, 0
  br i1 %238, label %239, label %342

239:                                              ; preds = %236, %233
  %240 = phi i32* [ %235, %233 ], [ %237, %236 ]
  %241 = zext i32 %116 to i64
  %242 = icmp ult i32 %116, 8
  br i1 %242, label %328, label %243

243:                                              ; preds = %239
  %244 = and i64 %241, 4294967288
  %245 = add nsw i64 %244, -8
  %246 = lshr exact i64 %245, 3
  %247 = add nuw nsw i64 %246, 1
  %248 = and i64 %247, 3
  %249 = icmp ult i64 %245, 24
  br i1 %249, label %295, label %250

250:                                              ; preds = %243
  %251 = sub nsw i64 %247, %248
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ 0, %250 ], [ %292, %252 ]
  %254 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %250 ], [ %290, %252 ]
  %255 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %250 ], [ %291, %252 ]
  %256 = phi i64 [ %251, %250 ], [ %293, %252 ]
  %257 = getelementptr inbounds i32, i32* %240, i64 %253
  %258 = bitcast i32* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 4, !noalias !336
  %260 = getelementptr inbounds i32, i32* %257, i64 4
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 4, !noalias !336
  %263 = mul nsw <4 x i32> %259, %254
  %264 = mul nsw <4 x i32> %262, %255
  %265 = or i64 %253, 8
  %266 = getelementptr inbounds i32, i32* %240, i64 %265
  %267 = bitcast i32* %266 to <4 x i32>*
  %268 = load <4 x i32>, <4 x i32>* %267, align 4, !noalias !336
  %269 = getelementptr inbounds i32, i32* %266, i64 4
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4, !noalias !336
  %272 = mul nsw <4 x i32> %268, %263
  %273 = mul nsw <4 x i32> %271, %264
  %274 = or i64 %253, 16
  %275 = getelementptr inbounds i32, i32* %240, i64 %274
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !noalias !336
  %278 = getelementptr inbounds i32, i32* %275, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4, !noalias !336
  %281 = mul nsw <4 x i32> %277, %272
  %282 = mul nsw <4 x i32> %280, %273
  %283 = or i64 %253, 24
  %284 = getelementptr inbounds i32, i32* %240, i64 %283
  %285 = bitcast i32* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4, !noalias !336
  %287 = getelementptr inbounds i32, i32* %284, i64 4
  %288 = bitcast i32* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 4, !noalias !336
  %290 = mul nsw <4 x i32> %286, %281
  %291 = mul nsw <4 x i32> %289, %282
  %292 = add i64 %253, 32
  %293 = add i64 %256, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %252, !llvm.loop !339

295:                                              ; preds = %252, %243
  %296 = phi <4 x i32> [ undef, %243 ], [ %290, %252 ]
  %297 = phi <4 x i32> [ undef, %243 ], [ %291, %252 ]
  %298 = phi i64 [ 0, %243 ], [ %292, %252 ]
  %299 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %243 ], [ %290, %252 ]
  %300 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %243 ], [ %291, %252 ]
  %301 = icmp eq i64 %248, 0
  br i1 %301, label %318, label %302

302:                                              ; preds = %295, %302
  %303 = phi i64 [ %315, %302 ], [ %298, %295 ]
  %304 = phi <4 x i32> [ %313, %302 ], [ %299, %295 ]
  %305 = phi <4 x i32> [ %314, %302 ], [ %300, %295 ]
  %306 = phi i64 [ %316, %302 ], [ %248, %295 ]
  %307 = getelementptr inbounds i32, i32* %240, i64 %303
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 4, !noalias !336
  %310 = getelementptr inbounds i32, i32* %307, i64 4
  %311 = bitcast i32* %310 to <4 x i32>*
  %312 = load <4 x i32>, <4 x i32>* %311, align 4, !noalias !336
  %313 = mul nsw <4 x i32> %309, %304
  %314 = mul nsw <4 x i32> %312, %305
  %315 = add i64 %303, 8
  %316 = add i64 %306, -1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %302, !llvm.loop !340

318:                                              ; preds = %302, %295
  %319 = phi <4 x i32> [ %296, %295 ], [ %313, %302 ]
  %320 = phi <4 x i32> [ %297, %295 ], [ %314, %302 ]
  %321 = mul <4 x i32> %320, %319
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %323 = mul <4 x i32> %321, %322
  %324 = shufflevector <4 x i32> %323, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %325 = mul <4 x i32> %323, %324
  %326 = extractelement <4 x i32> %325, i32 0
  %327 = icmp eq i64 %244, %241
  br i1 %327, label %339, label %328

328:                                              ; preds = %318, %239
  %329 = phi i64 [ 0, %239 ], [ %244, %318 ]
  %330 = phi i32 [ 1, %239 ], [ %326, %318 ]
  br label %331

331:                                              ; preds = %328, %331
  %332 = phi i64 [ %337, %331 ], [ %329, %328 ]
  %333 = phi i32 [ %336, %331 ], [ %330, %328 ]
  %334 = getelementptr inbounds i32, i32* %240, i64 %332
  %335 = load i32, i32* %334, align 4, !noalias !336
  %336 = mul nsw i32 %335, %333
  %337 = add nuw nsw i64 %332, 1
  %338 = icmp eq i64 %337, %241
  br i1 %338, label %339, label %331, !llvm.loop !341

339:                                              ; preds = %331, %318
  %340 = phi i32 [ %326, %318 ], [ %336, %331 ]
  %341 = sext i32 %340 to i64
  br label %342

342:                                              ; preds = %236, %339
  %343 = phi i64 [ 1, %236 ], [ %341, %339 ]
  %344 = bitcast %"class.Eigen::ArrayWrapper.320"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %344) #19
  %345 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %117, float** %345, align 8
  %346 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %343, i64* %346, align 8
  %347 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %347) #19
  %348 = bitcast %"struct.Eigen::internal::evaluator.327"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %348) #19
  %349 = getelementptr inbounds %"struct.Eigen::internal::evaluator.327", %"struct.Eigen::internal::evaluator.327"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %350 = bitcast i8* %349 to i64*
  store i64 -6148914691236517206, i64* %350, align 8
  %351 = bitcast %"struct.Eigen::internal::evaluator.327"* %3 to i64*
  store i64 %82, i64* %351, align 8
  %352 = getelementptr inbounds %"struct.Eigen::internal::evaluator.327", %"struct.Eigen::internal::evaluator.327"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %230, i64* %352, align 8
  %353 = bitcast %"struct.Eigen::internal::evaluator.337"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %353) #19
  %354 = getelementptr inbounds %"struct.Eigen::internal::evaluator.337", %"struct.Eigen::internal::evaluator.337"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %355 = bitcast i8* %354 to i64*
  store i64 -6148914691236517206, i64* %355, align 8
  %356 = ptrtoint float* %117 to i64
  %357 = bitcast %"struct.Eigen::internal::evaluator.337"* %4 to i64*
  store i64 %356, i64* %357, align 8
  %358 = getelementptr inbounds %"struct.Eigen::internal::evaluator.337", %"struct.Eigen::internal::evaluator.337"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %343, i64* %358, align 8
  %359 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %359) #19
  %360 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 0
  %361 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 1
  %362 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 2
  %363 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %5, i64 0, i32 3
  store %"struct.Eigen::internal::evaluator.337"* %4, %"struct.Eigen::internal::evaluator.337"** %360, align 8
  store %"struct.Eigen::internal::evaluator.327"* %3, %"struct.Eigen::internal::evaluator.327"** %361, align 8
  store %"struct.Eigen::internal::assign_op"* %6, %"struct.Eigen::internal::assign_op"** %362, align 8
  store %"class.Eigen::ArrayWrapper.320"* %7, %"class.Eigen::ArrayWrapper.320"** %363, align 8
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKNS4_INS5_IKS7_Li0ES9_EEEEEEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSO_(%"class.Eigen::internal::generic_dense_assignment_kernel.342"* nonnull dereferenceable(32) %5) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %359) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %353) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %348) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %347) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %344) #19
  br i1 %231, label %364, label %370

364:                                              ; preds = %342
  %365 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %366 = load i32*, i32** %365, align 8
  %367 = icmp eq i32* %366, null
  br i1 %367, label %370, label %368

368:                                              ; preds = %364
  %369 = bitcast i32* %366 to i8*
  call void @_ZdaPv(i8* %369) #18
  br label %370

370:                                              ; preds = %342, %364, %368
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #19
  br i1 %118, label %371, label %377

371:                                              ; preds = %370
  %372 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %373 = load i32*, i32** %372, align 8
  %374 = icmp eq i32* %373, null
  br i1 %374, label %377, label %375

375:                                              ; preds = %371
  %376 = bitcast i32* %373 to i8*
  call void @_ZdaPv(i8* %376) #18
  br label %377

377:                                              ; preds = %370, %371, %375
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #19
  br label %1424

378:                                              ; preds = %43
  %379 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 1
  %380 = load i32, i32* %379, align 4
  %381 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 0
  %382 = load i32, i32* %381, align 4
  %383 = icmp sgt i32 %382, 0
  br i1 %383, label %384, label %633

384:                                              ; preds = %378
  %385 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %385) #19
  %386 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %386, label %387, label %389

387:                                              ; preds = %384
  %388 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %388, align 8, !alias.scope !342
  br label %414

389:                                              ; preds = %384
  %390 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %391 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %390, align 8, !noalias !342
  %392 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %391, i64 0, i32 0
  %393 = load i32, i32* %392, align 4, !noalias !342
  %394 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %391, i64 0, i32 1, i64 0
  %395 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %393, i32* %395, align 8, !alias.scope !342
  %396 = icmp sgt i32 %393, 5
  br i1 %396, label %397, label %404

397:                                              ; preds = %389
  %398 = sext i32 %393 to i64
  %399 = shl nsw i64 %398, 2
  %400 = tail call i8* @_Znam(i64 %399) #18, !noalias !342
  %401 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %402 = bitcast i32** %401 to i8**
  store i8* %400, i8** %402, align 8, !alias.scope !342
  %403 = bitcast i8* %400 to i32*
  br label %409

404:                                              ; preds = %389
  %405 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %406 = bitcast %union.anon* %405 to i32*
  %407 = sext i32 %393 to i64
  %408 = shl nsw i64 %407, 2
  br label %409

409:                                              ; preds = %404, %397
  %410 = phi i64 [ %399, %397 ], [ %408, %404 ]
  %411 = phi i32* [ %403, %397 ], [ %406, %404 ]
  %412 = bitcast i32* %411 to i8*
  %413 = bitcast i32* %394 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %412, i8* align 4 %413, i64 %410, i1 false) #19
  br label %414

414:                                              ; preds = %387, %409
  %415 = phi i32 [ 0, %387 ], [ %393, %409 ]
  %416 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %416) #19
  %417 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %417, label %418, label %420

418:                                              ; preds = %414
  %419 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %419, align 8, !alias.scope !345
  br label %445

420:                                              ; preds = %414
  %421 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %422 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %421, align 8, !noalias !345
  %423 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %422, i64 0, i32 0
  %424 = load i32, i32* %423, align 4, !noalias !345
  %425 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %422, i64 0, i32 1, i64 0
  %426 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %424, i32* %426, align 8, !alias.scope !345
  %427 = icmp sgt i32 %424, 5
  br i1 %427, label %428, label %435

428:                                              ; preds = %420
  %429 = sext i32 %424 to i64
  %430 = shl nsw i64 %429, 2
  %431 = tail call i8* @_Znam(i64 %430) #18, !noalias !345
  %432 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %433 = bitcast i32** %432 to i8**
  store i8* %431, i8** %433, align 8, !alias.scope !345
  %434 = bitcast i8* %431 to i32*
  br label %440

435:                                              ; preds = %420
  %436 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %437 = bitcast %union.anon* %436 to i32*
  %438 = sext i32 %424 to i64
  %439 = shl nsw i64 %438, 2
  br label %440

440:                                              ; preds = %435, %428
  %441 = phi i64 [ %430, %428 ], [ %439, %435 ]
  %442 = phi i32* [ %434, %428 ], [ %437, %435 ]
  %443 = bitcast i32* %442 to i8*
  %444 = bitcast i32* %425 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %443, i8* align 4 %444, i64 %441, i1 false) #19
  br label %445

445:                                              ; preds = %418, %440
  %446 = phi i32 [ 0, %418 ], [ %424, %440 ]
  %447 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %448 = icmp sgt i32 %415, 5
  br i1 %448, label %449, label %452

449:                                              ; preds = %445
  %450 = getelementptr inbounds %union.anon, %union.anon* %447, i64 0, i32 0
  %451 = load i32*, i32** %450, align 8
  br label %455

452:                                              ; preds = %445
  %453 = bitcast %union.anon* %447 to i32*
  %454 = icmp sgt i32 %415, 0
  br i1 %454, label %455, label %555

455:                                              ; preds = %452, %449
  %456 = phi i32* [ %451, %449 ], [ %453, %452 ]
  %457 = zext i32 %415 to i64
  %458 = icmp ult i32 %415, 8
  br i1 %458, label %544, label %459

459:                                              ; preds = %455
  %460 = and i64 %457, 4294967288
  %461 = add nsw i64 %460, -8
  %462 = lshr exact i64 %461, 3
  %463 = add nuw nsw i64 %462, 1
  %464 = and i64 %463, 3
  %465 = icmp ult i64 %461, 24
  br i1 %465, label %511, label %466

466:                                              ; preds = %459
  %467 = sub nsw i64 %463, %464
  br label %468

468:                                              ; preds = %468, %466
  %469 = phi i64 [ 0, %466 ], [ %508, %468 ]
  %470 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %466 ], [ %506, %468 ]
  %471 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %466 ], [ %507, %468 ]
  %472 = phi i64 [ %467, %466 ], [ %509, %468 ]
  %473 = getelementptr inbounds i32, i32* %456, i64 %469
  %474 = bitcast i32* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 4
  %476 = getelementptr inbounds i32, i32* %473, i64 4
  %477 = bitcast i32* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 4
  %479 = mul nsw <4 x i32> %475, %470
  %480 = mul nsw <4 x i32> %478, %471
  %481 = or i64 %469, 8
  %482 = getelementptr inbounds i32, i32* %456, i64 %481
  %483 = bitcast i32* %482 to <4 x i32>*
  %484 = load <4 x i32>, <4 x i32>* %483, align 4
  %485 = getelementptr inbounds i32, i32* %482, i64 4
  %486 = bitcast i32* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 4
  %488 = mul nsw <4 x i32> %484, %479
  %489 = mul nsw <4 x i32> %487, %480
  %490 = or i64 %469, 16
  %491 = getelementptr inbounds i32, i32* %456, i64 %490
  %492 = bitcast i32* %491 to <4 x i32>*
  %493 = load <4 x i32>, <4 x i32>* %492, align 4
  %494 = getelementptr inbounds i32, i32* %491, i64 4
  %495 = bitcast i32* %494 to <4 x i32>*
  %496 = load <4 x i32>, <4 x i32>* %495, align 4
  %497 = mul nsw <4 x i32> %493, %488
  %498 = mul nsw <4 x i32> %496, %489
  %499 = or i64 %469, 24
  %500 = getelementptr inbounds i32, i32* %456, i64 %499
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = getelementptr inbounds i32, i32* %500, i64 4
  %504 = bitcast i32* %503 to <4 x i32>*
  %505 = load <4 x i32>, <4 x i32>* %504, align 4
  %506 = mul nsw <4 x i32> %502, %497
  %507 = mul nsw <4 x i32> %505, %498
  %508 = add i64 %469, 32
  %509 = add i64 %472, -4
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %511, label %468, !llvm.loop !348

511:                                              ; preds = %468, %459
  %512 = phi <4 x i32> [ undef, %459 ], [ %506, %468 ]
  %513 = phi <4 x i32> [ undef, %459 ], [ %507, %468 ]
  %514 = phi i64 [ 0, %459 ], [ %508, %468 ]
  %515 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %459 ], [ %506, %468 ]
  %516 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %459 ], [ %507, %468 ]
  %517 = icmp eq i64 %464, 0
  br i1 %517, label %534, label %518

518:                                              ; preds = %511, %518
  %519 = phi i64 [ %531, %518 ], [ %514, %511 ]
  %520 = phi <4 x i32> [ %529, %518 ], [ %515, %511 ]
  %521 = phi <4 x i32> [ %530, %518 ], [ %516, %511 ]
  %522 = phi i64 [ %532, %518 ], [ %464, %511 ]
  %523 = getelementptr inbounds i32, i32* %456, i64 %519
  %524 = bitcast i32* %523 to <4 x i32>*
  %525 = load <4 x i32>, <4 x i32>* %524, align 4
  %526 = getelementptr inbounds i32, i32* %523, i64 4
  %527 = bitcast i32* %526 to <4 x i32>*
  %528 = load <4 x i32>, <4 x i32>* %527, align 4
  %529 = mul nsw <4 x i32> %525, %520
  %530 = mul nsw <4 x i32> %528, %521
  %531 = add i64 %519, 8
  %532 = add i64 %522, -1
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %534, label %518, !llvm.loop !349

534:                                              ; preds = %518, %511
  %535 = phi <4 x i32> [ %512, %511 ], [ %529, %518 ]
  %536 = phi <4 x i32> [ %513, %511 ], [ %530, %518 ]
  %537 = mul <4 x i32> %536, %535
  %538 = shufflevector <4 x i32> %537, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %539 = mul <4 x i32> %537, %538
  %540 = shufflevector <4 x i32> %539, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %541 = mul <4 x i32> %539, %540
  %542 = extractelement <4 x i32> %541, i32 0
  %543 = icmp eq i64 %460, %457
  br i1 %543, label %555, label %544

544:                                              ; preds = %534, %455
  %545 = phi i64 [ 0, %455 ], [ %460, %534 ]
  %546 = phi i32 [ 1, %455 ], [ %542, %534 ]
  br label %547

547:                                              ; preds = %544, %547
  %548 = phi i64 [ %553, %547 ], [ %545, %544 ]
  %549 = phi i32 [ %552, %547 ], [ %546, %544 ]
  %550 = getelementptr inbounds i32, i32* %456, i64 %548
  %551 = load i32, i32* %550, align 4
  %552 = mul nsw i32 %551, %549
  %553 = add nuw nsw i64 %548, 1
  %554 = icmp eq i64 %553, %457
  br i1 %554, label %555, label %547, !llvm.loop !350

555:                                              ; preds = %547, %534, %452
  %556 = phi i32 [ 1, %452 ], [ %542, %534 ], [ %552, %547 ]
  %557 = icmp sgt i32 %446, 5
  br i1 %557, label %558, label %564

558:                                              ; preds = %555
  %559 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %560 = load i32*, i32** %559, align 8
  %561 = icmp eq i32* %560, null
  br i1 %561, label %564, label %562

562:                                              ; preds = %558
  %563 = bitcast i32* %560 to i8*
  tail call void @_ZdaPv(i8* %563) #18
  br label %564

564:                                              ; preds = %555, %558, %562
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %416) #19
  br i1 %448, label %565, label %571

565:                                              ; preds = %564
  %566 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %567 = load i32*, i32** %566, align 8
  %568 = icmp eq i32* %567, null
  br i1 %568, label %571, label %569

569:                                              ; preds = %565
  %570 = bitcast i32* %567 to i8*
  tail call void @_ZdaPv(i8* %570) #18
  br label %571

571:                                              ; preds = %564, %565, %569
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %385) #19
  %572 = load i32, i32* %381, align 4
  %573 = load i32, i32* %379, align 4
  br i1 %386, label %578, label %574

574:                                              ; preds = %571
  %575 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %576 = bitcast %union.TfLitePtrUnion* %575 to i16**
  %577 = load i16*, i16** %576, align 8
  br label %578

578:                                              ; preds = %571, %574
  %579 = phi i16* [ %577, %574 ], [ null, %571 ]
  br i1 %417, label %584, label %580

580:                                              ; preds = %578
  %581 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %582 = bitcast %union.TfLitePtrUnion* %581 to i16**
  %583 = load i16*, i16** %582, align 8
  br label %584

584:                                              ; preds = %578, %580
  %585 = phi i16* [ %583, %580 ], [ null, %578 ]
  %586 = icmp sgt i32 %572, 1
  %587 = select i1 %586, i32 %572, i32 1
  %588 = icmp sgt i32 %556, 0
  br i1 %588, label %589, label %1424

589:                                              ; preds = %584
  %590 = icmp eq i32 %573, 1
  %591 = zext i1 %590 to i32
  br label %592

592:                                              ; preds = %621, %589
  %593 = phi i16* [ %579, %589 ], [ %630, %621 ]
  %594 = phi i16* [ %585, %589 ], [ %631, %621 ]
  %595 = phi i32 [ 0, %589 ], [ %629, %621 ]
  %596 = load i16, i16* %593, align 2
  %597 = sext i16 %596 to i32
  %598 = mul nsw i32 %587, %597
  %599 = shl i32 %598, %591
  %600 = icmp slt i32 %599, 0
  %601 = sub nsw i32 0, %599
  %602 = select i1 %600, i32 %601, i32 %599
  %603 = mul nsw i32 %602, 3
  %604 = lshr i32 %603, 8
  %605 = icmp ugt i32 %603, 65279
  br i1 %605, label %621, label %606

606:                                              ; preds = %592
  %607 = zext i32 %604 to i64
  %608 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %607
  %609 = load i16, i16* %608, align 2
  %610 = zext i16 %609 to i32
  %611 = add nuw nsw i32 %604, 1
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %612
  %614 = load i16, i16* %613, align 2
  %615 = zext i16 %614 to i32
  %616 = shl nuw nsw i32 %610, 8
  %617 = and i32 %603, 255
  %618 = sub nsw i32 %615, %610
  %619 = mul nsw i32 %618, %617
  %620 = add nsw i32 %619, %616
  br label %621

621:                                              ; preds = %606, %592
  %622 = phi i32 [ %620, %606 ], [ 16776960, %592 ]
  %623 = icmp sgt i32 %599, -1
  %624 = add nsw i32 %622, 8388736
  %625 = sub nsw i32 8388735, %622
  %626 = select i1 %623, i32 %624, i32 %625
  %627 = lshr i32 %626, 8
  %628 = trunc i32 %627 to i16
  store i16 %628, i16* %594, align 2
  %629 = add nuw nsw i32 %595, 1
  %630 = getelementptr inbounds i16, i16* %593, i64 1
  %631 = getelementptr inbounds i16, i16* %594, i64 1
  %632 = icmp eq i32 %629, %556
  br i1 %632, label %1424, label %592

633:                                              ; preds = %378
  %634 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %634) #19
  %635 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %635, label %636, label %638

636:                                              ; preds = %633
  %637 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %637, align 8, !alias.scope !351
  br label %666

638:                                              ; preds = %633
  %639 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %640 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %639, align 8, !noalias !351
  %641 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %640, i64 0, i32 0
  %642 = load i32, i32* %641, align 4, !noalias !351
  %643 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %640, i64 0, i32 1, i64 0
  %644 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %642, i32* %644, align 8, !alias.scope !351
  %645 = icmp sgt i32 %642, 5
  br i1 %645, label %646, label %653

646:                                              ; preds = %638
  %647 = sext i32 %642 to i64
  %648 = shl nsw i64 %647, 2
  %649 = tail call i8* @_Znam(i64 %648) #18, !noalias !351
  %650 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %651 = bitcast i32** %650 to i8**
  store i8* %649, i8** %651, align 8, !alias.scope !351
  %652 = bitcast i8* %649 to i32*
  br label %658

653:                                              ; preds = %638
  %654 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %655 = bitcast %union.anon* %654 to i32*
  %656 = sext i32 %642 to i64
  %657 = shl nsw i64 %656, 2
  br label %658

658:                                              ; preds = %653, %646
  %659 = phi i64 [ %648, %646 ], [ %657, %653 ]
  %660 = phi i32* [ %652, %646 ], [ %655, %653 ]
  %661 = bitcast i32* %660 to i8*
  %662 = bitcast i32* %643 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %661, i8* align 4 %662, i64 %659, i1 false) #19
  %663 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %664 = bitcast %union.TfLitePtrUnion* %663 to i16**
  %665 = load i16*, i16** %664, align 8
  br label %666

666:                                              ; preds = %636, %658
  %667 = phi i32 [ %642, %658 ], [ 0, %636 ]
  %668 = phi i16* [ %665, %658 ], [ null, %636 ]
  %669 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %669) #19
  %670 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %670, label %671, label %673

671:                                              ; preds = %666
  %672 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %672, align 8, !alias.scope !354
  br label %701

673:                                              ; preds = %666
  %674 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %675 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %674, align 8, !noalias !354
  %676 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %675, i64 0, i32 0
  %677 = load i32, i32* %676, align 4, !noalias !354
  %678 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %675, i64 0, i32 1, i64 0
  %679 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %677, i32* %679, align 8, !alias.scope !354
  %680 = icmp sgt i32 %677, 5
  br i1 %680, label %681, label %688

681:                                              ; preds = %673
  %682 = sext i32 %677 to i64
  %683 = shl nsw i64 %682, 2
  %684 = tail call i8* @_Znam(i64 %683) #18, !noalias !354
  %685 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %686 = bitcast i32** %685 to i8**
  store i8* %684, i8** %686, align 8, !alias.scope !354
  %687 = bitcast i8* %684 to i32*
  br label %693

688:                                              ; preds = %673
  %689 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %690 = bitcast %union.anon* %689 to i32*
  %691 = sext i32 %677 to i64
  %692 = shl nsw i64 %691, 2
  br label %693

693:                                              ; preds = %688, %681
  %694 = phi i64 [ %683, %681 ], [ %692, %688 ]
  %695 = phi i32* [ %687, %681 ], [ %690, %688 ]
  %696 = bitcast i32* %695 to i8*
  %697 = bitcast i32* %678 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %696, i8* align 4 %697, i64 %694, i1 false) #19
  %698 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %699 = bitcast %union.TfLitePtrUnion* %698 to i16**
  %700 = load i16*, i16** %699, align 8
  br label %701

701:                                              ; preds = %671, %693
  %702 = phi i16* [ %700, %693 ], [ null, %671 ]
  %703 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %704 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %705 = icmp sgt i32 %667, 5
  br i1 %705, label %706, label %709

706:                                              ; preds = %701
  %707 = getelementptr inbounds %union.anon, %union.anon* %704, i64 0, i32 0
  %708 = load i32*, i32** %707, align 8
  br label %712

709:                                              ; preds = %701
  %710 = bitcast %union.anon* %704 to i32*
  %711 = icmp sgt i32 %667, 0
  br i1 %711, label %712, label %812

712:                                              ; preds = %709, %706
  %713 = phi i32* [ %708, %706 ], [ %710, %709 ]
  %714 = zext i32 %667 to i64
  %715 = icmp ult i32 %667, 8
  br i1 %715, label %801, label %716

716:                                              ; preds = %712
  %717 = and i64 %714, 4294967288
  %718 = add nsw i64 %717, -8
  %719 = lshr exact i64 %718, 3
  %720 = add nuw nsw i64 %719, 1
  %721 = and i64 %720, 3
  %722 = icmp ult i64 %718, 24
  br i1 %722, label %768, label %723

723:                                              ; preds = %716
  %724 = sub nsw i64 %720, %721
  br label %725

725:                                              ; preds = %725, %723
  %726 = phi i64 [ 0, %723 ], [ %765, %725 ]
  %727 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %723 ], [ %763, %725 ]
  %728 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %723 ], [ %764, %725 ]
  %729 = phi i64 [ %724, %723 ], [ %766, %725 ]
  %730 = getelementptr inbounds i32, i32* %713, i64 %726
  %731 = bitcast i32* %730 to <4 x i32>*
  %732 = load <4 x i32>, <4 x i32>* %731, align 4
  %733 = getelementptr inbounds i32, i32* %730, i64 4
  %734 = bitcast i32* %733 to <4 x i32>*
  %735 = load <4 x i32>, <4 x i32>* %734, align 4
  %736 = mul nsw <4 x i32> %732, %727
  %737 = mul nsw <4 x i32> %735, %728
  %738 = or i64 %726, 8
  %739 = getelementptr inbounds i32, i32* %713, i64 %738
  %740 = bitcast i32* %739 to <4 x i32>*
  %741 = load <4 x i32>, <4 x i32>* %740, align 4
  %742 = getelementptr inbounds i32, i32* %739, i64 4
  %743 = bitcast i32* %742 to <4 x i32>*
  %744 = load <4 x i32>, <4 x i32>* %743, align 4
  %745 = mul nsw <4 x i32> %741, %736
  %746 = mul nsw <4 x i32> %744, %737
  %747 = or i64 %726, 16
  %748 = getelementptr inbounds i32, i32* %713, i64 %747
  %749 = bitcast i32* %748 to <4 x i32>*
  %750 = load <4 x i32>, <4 x i32>* %749, align 4
  %751 = getelementptr inbounds i32, i32* %748, i64 4
  %752 = bitcast i32* %751 to <4 x i32>*
  %753 = load <4 x i32>, <4 x i32>* %752, align 4
  %754 = mul nsw <4 x i32> %750, %745
  %755 = mul nsw <4 x i32> %753, %746
  %756 = or i64 %726, 24
  %757 = getelementptr inbounds i32, i32* %713, i64 %756
  %758 = bitcast i32* %757 to <4 x i32>*
  %759 = load <4 x i32>, <4 x i32>* %758, align 4
  %760 = getelementptr inbounds i32, i32* %757, i64 4
  %761 = bitcast i32* %760 to <4 x i32>*
  %762 = load <4 x i32>, <4 x i32>* %761, align 4
  %763 = mul nsw <4 x i32> %759, %754
  %764 = mul nsw <4 x i32> %762, %755
  %765 = add i64 %726, 32
  %766 = add i64 %729, -4
  %767 = icmp eq i64 %766, 0
  br i1 %767, label %768, label %725, !llvm.loop !357

768:                                              ; preds = %725, %716
  %769 = phi <4 x i32> [ undef, %716 ], [ %763, %725 ]
  %770 = phi <4 x i32> [ undef, %716 ], [ %764, %725 ]
  %771 = phi i64 [ 0, %716 ], [ %765, %725 ]
  %772 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %716 ], [ %763, %725 ]
  %773 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %716 ], [ %764, %725 ]
  %774 = icmp eq i64 %721, 0
  br i1 %774, label %791, label %775

775:                                              ; preds = %768, %775
  %776 = phi i64 [ %788, %775 ], [ %771, %768 ]
  %777 = phi <4 x i32> [ %786, %775 ], [ %772, %768 ]
  %778 = phi <4 x i32> [ %787, %775 ], [ %773, %768 ]
  %779 = phi i64 [ %789, %775 ], [ %721, %768 ]
  %780 = getelementptr inbounds i32, i32* %713, i64 %776
  %781 = bitcast i32* %780 to <4 x i32>*
  %782 = load <4 x i32>, <4 x i32>* %781, align 4
  %783 = getelementptr inbounds i32, i32* %780, i64 4
  %784 = bitcast i32* %783 to <4 x i32>*
  %785 = load <4 x i32>, <4 x i32>* %784, align 4
  %786 = mul nsw <4 x i32> %782, %777
  %787 = mul nsw <4 x i32> %785, %778
  %788 = add i64 %776, 8
  %789 = add i64 %779, -1
  %790 = icmp eq i64 %789, 0
  br i1 %790, label %791, label %775, !llvm.loop !358

791:                                              ; preds = %775, %768
  %792 = phi <4 x i32> [ %769, %768 ], [ %786, %775 ]
  %793 = phi <4 x i32> [ %770, %768 ], [ %787, %775 ]
  %794 = mul <4 x i32> %793, %792
  %795 = shufflevector <4 x i32> %794, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %796 = mul <4 x i32> %794, %795
  %797 = shufflevector <4 x i32> %796, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %798 = mul <4 x i32> %796, %797
  %799 = extractelement <4 x i32> %798, i32 0
  %800 = icmp eq i64 %717, %714
  br i1 %800, label %812, label %801

801:                                              ; preds = %791, %712
  %802 = phi i64 [ 0, %712 ], [ %717, %791 ]
  %803 = phi i32 [ 1, %712 ], [ %799, %791 ]
  br label %804

804:                                              ; preds = %801, %804
  %805 = phi i64 [ %810, %804 ], [ %802, %801 ]
  %806 = phi i32 [ %809, %804 ], [ %803, %801 ]
  %807 = getelementptr inbounds i32, i32* %713, i64 %805
  %808 = load i32, i32* %807, align 4
  %809 = mul nsw i32 %808, %806
  %810 = add nuw nsw i64 %805, 1
  %811 = icmp eq i64 %810, %714
  br i1 %811, label %812, label %804, !llvm.loop !359

812:                                              ; preds = %804, %791, %709
  %813 = phi i32 [ 1, %709 ], [ %799, %791 ], [ %809, %804 ]
  %814 = icmp eq i32 %380, 0
  %815 = icmp sgt i32 %813, 0
  br i1 %814, label %817, label %816

816:                                              ; preds = %812
  br i1 %815, label %836, label %865

817:                                              ; preds = %812
  br i1 %815, label %818, label %865

818:                                              ; preds = %817, %818
  %819 = phi i32 [ %834, %818 ], [ 0, %817 ]
  %820 = phi i16* [ %832, %818 ], [ %668, %817 ]
  %821 = phi i16* [ %833, %818 ], [ %702, %817 ]
  %822 = load i16, i16* %820, align 2
  %823 = icmp eq i16 %822, 0
  %824 = sub i16 0, %822
  %825 = icmp slt i16 %822, 0
  %826 = select i1 %825, i16 %822, i16 %824
  %827 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %826) #19
  %828 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %827) #19
  %829 = sub i16 0, %828
  %830 = select i1 %825, i16 %829, i16 %828
  %831 = select i1 %823, i16 0, i16 %830
  store i16 %831, i16* %821, align 2
  %832 = getelementptr inbounds i16, i16* %820, i64 1
  %833 = getelementptr inbounds i16, i16* %821, i64 1
  %834 = add nuw nsw i32 %819, 1
  %835 = icmp eq i32 %834, %813
  br i1 %835, label %865, label %818

836:                                              ; preds = %816, %836
  %837 = phi i32 [ %863, %836 ], [ 0, %816 ]
  %838 = phi i16* [ %861, %836 ], [ %668, %816 ]
  %839 = phi i16* [ %862, %836 ], [ %702, %816 ]
  %840 = load i16, i16* %838, align 2
  %841 = icmp slt i16 %840, 16384
  %842 = icmp sgt i16 %840, -16384
  %843 = sext i16 %840 to i64
  %844 = shl nsw i64 %843, 1
  %845 = icmp slt i64 %844, 32767
  %846 = select i1 %845, i64 %844, i64 32767
  %847 = icmp sgt i64 %846, -32768
  %848 = select i1 %847, i64 %846, i64 -32768
  %849 = trunc i64 %848 to i16
  %850 = select i1 %841, i16 %849, i16 32767
  %851 = select i1 %842, i16 %850, i16 -32768
  %852 = icmp eq i16 %851, 0
  %853 = sub i16 0, %851
  %854 = icmp slt i16 %851, 0
  %855 = select i1 %854, i16 %851, i16 %853
  %856 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %855) #19
  %857 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %856) #19
  %858 = sub i16 0, %857
  %859 = select i1 %854, i16 %858, i16 %857
  %860 = select i1 %852, i16 0, i16 %859
  store i16 %860, i16* %839, align 2
  %861 = getelementptr inbounds i16, i16* %838, i64 1
  %862 = getelementptr inbounds i16, i16* %839, i64 1
  %863 = add nuw nsw i32 %837, 1
  %864 = icmp eq i32 %863, %813
  br i1 %864, label %865, label %836

865:                                              ; preds = %836, %818, %816, %817
  %866 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %867 = load i32, i32* %866, align 8
  %868 = icmp sgt i32 %867, 5
  br i1 %868, label %869, label %875

869:                                              ; preds = %865
  %870 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %871 = load i32*, i32** %870, align 8
  %872 = icmp eq i32* %871, null
  br i1 %872, label %875, label %873

873:                                              ; preds = %869
  %874 = bitcast i32* %871 to i8*
  tail call void @_ZdaPv(i8* %874) #18
  br label %875

875:                                              ; preds = %865, %869, %873
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %669) #19
  %876 = load i32, i32* %703, align 8
  %877 = icmp sgt i32 %876, 5
  br i1 %877, label %878, label %884

878:                                              ; preds = %875
  %879 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %880 = load i32*, i32** %879, align 8
  %881 = icmp eq i32* %880, null
  br i1 %881, label %884, label %882

882:                                              ; preds = %878
  %883 = bitcast i32* %880 to i8*
  tail call void @_ZdaPv(i8* %883) #18
  br label %884

884:                                              ; preds = %875, %878, %882
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %634) #19
  br label %1424

885:                                              ; preds = %43
  %886 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 3, i32 1
  %887 = load i32, i32* %886, align 4
  %888 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 2
  %889 = load i32, i32* %888, align 4
  %890 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 0
  %891 = load i32, i32* %890, align 4
  %892 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 1
  %893 = load i32, i32* %892, align 4
  %894 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %894) #19
  %895 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %895, label %896, label %898

896:                                              ; preds = %885
  %897 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %897, align 8, !alias.scope !360
  br label %926

898:                                              ; preds = %885
  %899 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %900 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %899, align 8, !noalias !360
  %901 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %900, i64 0, i32 0
  %902 = load i32, i32* %901, align 4, !noalias !360
  %903 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %900, i64 0, i32 1, i64 0
  %904 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %902, i32* %904, align 8, !alias.scope !360
  %905 = icmp sgt i32 %902, 5
  br i1 %905, label %906, label %913

906:                                              ; preds = %898
  %907 = sext i32 %902 to i64
  %908 = shl nsw i64 %907, 2
  %909 = tail call i8* @_Znam(i64 %908) #18, !noalias !360
  %910 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %911 = bitcast i32** %910 to i8**
  store i8* %909, i8** %911, align 8, !alias.scope !360
  %912 = bitcast i8* %909 to i32*
  br label %918

913:                                              ; preds = %898
  %914 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %915 = bitcast %union.anon* %914 to i32*
  %916 = sext i32 %902 to i64
  %917 = shl nsw i64 %916, 2
  br label %918

918:                                              ; preds = %913, %906
  %919 = phi i64 [ %908, %906 ], [ %917, %913 ]
  %920 = phi i32* [ %912, %906 ], [ %915, %913 ]
  %921 = bitcast i32* %920 to i8*
  %922 = bitcast i32* %903 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %921, i8* align 4 %922, i64 %919, i1 false) #19
  %923 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %924 = bitcast %union.TfLitePtrUnion* %923 to i8**
  %925 = load i8*, i8** %924, align 8
  br label %926

926:                                              ; preds = %896, %918
  %927 = phi i32 [ %902, %918 ], [ 0, %896 ]
  %928 = phi i8* [ %925, %918 ], [ null, %896 ]
  %929 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %929) #19
  %930 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %930, label %931, label %933

931:                                              ; preds = %926
  %932 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %932, align 8, !alias.scope !363
  br label %961

933:                                              ; preds = %926
  %934 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %935 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %934, align 8, !noalias !363
  %936 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %935, i64 0, i32 0
  %937 = load i32, i32* %936, align 4, !noalias !363
  %938 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %935, i64 0, i32 1, i64 0
  %939 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %937, i32* %939, align 8, !alias.scope !363
  %940 = icmp sgt i32 %937, 5
  br i1 %940, label %941, label %948

941:                                              ; preds = %933
  %942 = sext i32 %937 to i64
  %943 = shl nsw i64 %942, 2
  %944 = tail call i8* @_Znam(i64 %943) #18, !noalias !363
  %945 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %946 = bitcast i32** %945 to i8**
  store i8* %944, i8** %946, align 8, !alias.scope !363
  %947 = bitcast i8* %944 to i32*
  br label %953

948:                                              ; preds = %933
  %949 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %950 = bitcast %union.anon* %949 to i32*
  %951 = sext i32 %937 to i64
  %952 = shl nsw i64 %951, 2
  br label %953

953:                                              ; preds = %948, %941
  %954 = phi i64 [ %943, %941 ], [ %952, %948 ]
  %955 = phi i32* [ %947, %941 ], [ %950, %948 ]
  %956 = bitcast i32* %955 to i8*
  %957 = bitcast i32* %938 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %956, i8* align 4 %957, i64 %954, i1 false) #19
  %958 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %959 = bitcast %union.TfLitePtrUnion* %958 to i8**
  %960 = load i8*, i8** %959, align 8
  br label %961

961:                                              ; preds = %931, %953
  %962 = phi i32 [ %937, %953 ], [ 0, %931 ]
  %963 = phi i8* [ %960, %953 ], [ null, %931 ]
  %964 = trunc i32 %891 to i16
  %965 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %966 = icmp sgt i32 %927, 5
  br i1 %966, label %967, label %970

967:                                              ; preds = %961
  %968 = getelementptr inbounds %union.anon, %union.anon* %965, i64 0, i32 0
  %969 = load i32*, i32** %968, align 8
  br label %973

970:                                              ; preds = %961
  %971 = bitcast %union.anon* %965 to i32*
  %972 = icmp sgt i32 %927, 0
  br i1 %972, label %973, label %1076

973:                                              ; preds = %970, %967
  %974 = phi i32* [ %969, %967 ], [ %971, %970 ]
  %975 = zext i32 %927 to i64
  %976 = icmp ult i32 %927, 8
  br i1 %976, label %1062, label %977

977:                                              ; preds = %973
  %978 = and i64 %975, 4294967288
  %979 = add nsw i64 %978, -8
  %980 = lshr exact i64 %979, 3
  %981 = add nuw nsw i64 %980, 1
  %982 = and i64 %981, 3
  %983 = icmp ult i64 %979, 24
  br i1 %983, label %1029, label %984

984:                                              ; preds = %977
  %985 = sub nsw i64 %981, %982
  br label %986

986:                                              ; preds = %986, %984
  %987 = phi i64 [ 0, %984 ], [ %1026, %986 ]
  %988 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %984 ], [ %1024, %986 ]
  %989 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %984 ], [ %1025, %986 ]
  %990 = phi i64 [ %985, %984 ], [ %1027, %986 ]
  %991 = getelementptr inbounds i32, i32* %974, i64 %987
  %992 = bitcast i32* %991 to <4 x i32>*
  %993 = load <4 x i32>, <4 x i32>* %992, align 4
  %994 = getelementptr inbounds i32, i32* %991, i64 4
  %995 = bitcast i32* %994 to <4 x i32>*
  %996 = load <4 x i32>, <4 x i32>* %995, align 4
  %997 = mul nsw <4 x i32> %993, %988
  %998 = mul nsw <4 x i32> %996, %989
  %999 = or i64 %987, 8
  %1000 = getelementptr inbounds i32, i32* %974, i64 %999
  %1001 = bitcast i32* %1000 to <4 x i32>*
  %1002 = load <4 x i32>, <4 x i32>* %1001, align 4
  %1003 = getelementptr inbounds i32, i32* %1000, i64 4
  %1004 = bitcast i32* %1003 to <4 x i32>*
  %1005 = load <4 x i32>, <4 x i32>* %1004, align 4
  %1006 = mul nsw <4 x i32> %1002, %997
  %1007 = mul nsw <4 x i32> %1005, %998
  %1008 = or i64 %987, 16
  %1009 = getelementptr inbounds i32, i32* %974, i64 %1008
  %1010 = bitcast i32* %1009 to <4 x i32>*
  %1011 = load <4 x i32>, <4 x i32>* %1010, align 4
  %1012 = getelementptr inbounds i32, i32* %1009, i64 4
  %1013 = bitcast i32* %1012 to <4 x i32>*
  %1014 = load <4 x i32>, <4 x i32>* %1013, align 4
  %1015 = mul nsw <4 x i32> %1011, %1006
  %1016 = mul nsw <4 x i32> %1014, %1007
  %1017 = or i64 %987, 24
  %1018 = getelementptr inbounds i32, i32* %974, i64 %1017
  %1019 = bitcast i32* %1018 to <4 x i32>*
  %1020 = load <4 x i32>, <4 x i32>* %1019, align 4
  %1021 = getelementptr inbounds i32, i32* %1018, i64 4
  %1022 = bitcast i32* %1021 to <4 x i32>*
  %1023 = load <4 x i32>, <4 x i32>* %1022, align 4
  %1024 = mul nsw <4 x i32> %1020, %1015
  %1025 = mul nsw <4 x i32> %1023, %1016
  %1026 = add i64 %987, 32
  %1027 = add i64 %990, -4
  %1028 = icmp eq i64 %1027, 0
  br i1 %1028, label %1029, label %986, !llvm.loop !366

1029:                                             ; preds = %986, %977
  %1030 = phi <4 x i32> [ undef, %977 ], [ %1024, %986 ]
  %1031 = phi <4 x i32> [ undef, %977 ], [ %1025, %986 ]
  %1032 = phi i64 [ 0, %977 ], [ %1026, %986 ]
  %1033 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %977 ], [ %1024, %986 ]
  %1034 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %977 ], [ %1025, %986 ]
  %1035 = icmp eq i64 %982, 0
  br i1 %1035, label %1052, label %1036

1036:                                             ; preds = %1029, %1036
  %1037 = phi i64 [ %1049, %1036 ], [ %1032, %1029 ]
  %1038 = phi <4 x i32> [ %1047, %1036 ], [ %1033, %1029 ]
  %1039 = phi <4 x i32> [ %1048, %1036 ], [ %1034, %1029 ]
  %1040 = phi i64 [ %1050, %1036 ], [ %982, %1029 ]
  %1041 = getelementptr inbounds i32, i32* %974, i64 %1037
  %1042 = bitcast i32* %1041 to <4 x i32>*
  %1043 = load <4 x i32>, <4 x i32>* %1042, align 4
  %1044 = getelementptr inbounds i32, i32* %1041, i64 4
  %1045 = bitcast i32* %1044 to <4 x i32>*
  %1046 = load <4 x i32>, <4 x i32>* %1045, align 4
  %1047 = mul nsw <4 x i32> %1043, %1038
  %1048 = mul nsw <4 x i32> %1046, %1039
  %1049 = add i64 %1037, 8
  %1050 = add i64 %1040, -1
  %1051 = icmp eq i64 %1050, 0
  br i1 %1051, label %1052, label %1036, !llvm.loop !367

1052:                                             ; preds = %1036, %1029
  %1053 = phi <4 x i32> [ %1030, %1029 ], [ %1047, %1036 ]
  %1054 = phi <4 x i32> [ %1031, %1029 ], [ %1048, %1036 ]
  %1055 = mul <4 x i32> %1054, %1053
  %1056 = shufflevector <4 x i32> %1055, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1057 = mul <4 x i32> %1055, %1056
  %1058 = shufflevector <4 x i32> %1057, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1059 = mul <4 x i32> %1057, %1058
  %1060 = extractelement <4 x i32> %1059, i32 0
  %1061 = icmp eq i64 %978, %975
  br i1 %1061, label %1073, label %1062

1062:                                             ; preds = %1052, %973
  %1063 = phi i64 [ 0, %973 ], [ %978, %1052 ]
  %1064 = phi i32 [ 1, %973 ], [ %1060, %1052 ]
  br label %1065

1065:                                             ; preds = %1062, %1065
  %1066 = phi i64 [ %1071, %1065 ], [ %1063, %1062 ]
  %1067 = phi i32 [ %1070, %1065 ], [ %1064, %1062 ]
  %1068 = getelementptr inbounds i32, i32* %974, i64 %1066
  %1069 = load i32, i32* %1068, align 4
  %1070 = mul nsw i32 %1069, %1067
  %1071 = add nuw nsw i64 %1066, 1
  %1072 = icmp eq i64 %1071, %975
  br i1 %1072, label %1073, label %1065, !llvm.loop !368

1073:                                             ; preds = %1065, %1052
  %1074 = phi i32 [ %1060, %1052 ], [ %1070, %1065 ]
  %1075 = icmp sgt i32 %1074, 0
  br i1 %1075, label %1076, label %1137

1076:                                             ; preds = %1073, %970
  %1077 = phi i32 [ %1074, %1073 ], [ 1, %970 ]
  %1078 = sub nsw i32 0, %889
  %1079 = shl i32 %893, 16
  %1080 = ashr exact i32 %1079, 16
  %1081 = shl i32 %891, 16
  %1082 = ashr exact i32 %1081, 16
  %1083 = zext i32 %1077 to i64
  br label %1084

1084:                                             ; preds = %1132, %1076
  %1085 = phi i64 [ 0, %1076 ], [ %1135, %1132 ]
  %1086 = getelementptr inbounds i8, i8* %928, i64 %1085
  %1087 = load i8, i8* %1086, align 1
  %1088 = zext i8 %1087 to i32
  %1089 = sub nsw i32 %1088, %887
  %1090 = shl i32 %1089, 16
  %1091 = ashr exact i32 %1090, 16
  %1092 = icmp slt i32 %1091, %1078
  br i1 %1092, label %1132, label %1093

1093:                                             ; preds = %1084
  %1094 = icmp sgt i32 %1091, %889
  br i1 %1094, label %1132, label %1095

1095:                                             ; preds = %1093
  %1096 = shl i32 %1091, %1080
  %1097 = trunc i32 %1096 to i16
  %1098 = icmp eq i16 %1097, %964
  %1099 = icmp eq i16 %1097, -32768
  %1100 = and i1 %1099, %1098
  br i1 %1100, label %1110, label %1101

1101:                                             ; preds = %1095
  %1102 = shl i32 %1096, 16
  %1103 = ashr exact i32 %1102, 16
  %1104 = mul nsw i32 %1103, %1082
  %1105 = icmp sgt i32 %1104, -1
  %1106 = select i1 %1105, i32 16384, i32 -16383
  %1107 = add nsw i32 %1106, %1104
  %1108 = sdiv i32 %1107, 32768
  %1109 = trunc i32 %1108 to i16
  br label %1110

1110:                                             ; preds = %1101, %1095
  %1111 = phi i16 [ %1109, %1101 ], [ 32767, %1095 ]
  %1112 = icmp eq i16 %1111, 0
  %1113 = sub i16 0, %1111
  %1114 = icmp slt i16 %1111, 0
  %1115 = select i1 %1114, i16 %1111, i16 %1113
  %1116 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %1115) #19
  %1117 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %1116) #19
  %1118 = sub i16 0, %1117
  %1119 = select i1 %1114, i16 %1118, i16 %1117
  %1120 = select i1 %1112, i16 0, i16 %1119
  %1121 = and i16 %1120, 255
  %1122 = lshr i16 %1120, 15
  %1123 = add nuw nsw i16 %1122, 127
  %1124 = ashr i16 %1120, 8
  %1125 = icmp ugt i16 %1121, %1123
  %1126 = zext i1 %1125 to i16
  %1127 = add nsw i16 %1124, 128
  %1128 = add nuw nsw i16 %1127, %1126
  %1129 = icmp eq i16 %1128, 256
  %1130 = select i1 %1129, i16 255, i16 %1128
  %1131 = trunc i16 %1130 to i8
  br label %1132

1132:                                             ; preds = %1110, %1093, %1084
  %1133 = phi i8 [ %1131, %1110 ], [ 0, %1084 ], [ -1, %1093 ]
  %1134 = getelementptr inbounds i8, i8* %963, i64 %1085
  store i8 %1133, i8* %1134, align 1
  %1135 = add nuw nsw i64 %1085, 1
  %1136 = icmp eq i64 %1135, %1083
  br i1 %1136, label %1137, label %1084

1137:                                             ; preds = %1132, %1073
  %1138 = icmp sgt i32 %962, 5
  br i1 %1138, label %1139, label %1145

1139:                                             ; preds = %1137
  %1140 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %1141 = load i32*, i32** %1140, align 8
  %1142 = icmp eq i32* %1141, null
  br i1 %1142, label %1145, label %1143

1143:                                             ; preds = %1139
  %1144 = bitcast i32* %1141 to i8*
  tail call void @_ZdaPv(i8* %1144) #18
  br label %1145

1145:                                             ; preds = %1137, %1139, %1143
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %929) #19
  br i1 %966, label %1146, label %1152

1146:                                             ; preds = %1145
  %1147 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %1148 = load i32*, i32** %1147, align 8
  %1149 = icmp eq i32* %1148, null
  br i1 %1149, label %1152, label %1150

1150:                                             ; preds = %1146
  %1151 = bitcast i32* %1148 to i8*
  tail call void @_ZdaPv(i8* %1151) #18
  br label %1152

1152:                                             ; preds = %1145, %1146, %1150
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %894) #19
  br label %1424

1153:                                             ; preds = %43
  %1154 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 3, i32 1
  %1155 = load i32, i32* %1154, align 4
  %1156 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 2
  %1157 = load i32, i32* %1156, align 4
  %1158 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 0
  %1159 = load i32, i32* %1158, align 4
  %1160 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %20, i64 0, i32 1
  %1161 = load i32, i32* %1160, align 4
  %1162 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1162) #19
  %1163 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %1163, label %1164, label %1166

1164:                                             ; preds = %1153
  %1165 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %1165, align 8, !alias.scope !369
  br label %1194

1166:                                             ; preds = %1153
  %1167 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %1168 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1167, align 8, !noalias !369
  %1169 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1168, i64 0, i32 0
  %1170 = load i32, i32* %1169, align 4, !noalias !369
  %1171 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1168, i64 0, i32 1, i64 0
  %1172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %1170, i32* %1172, align 8, !alias.scope !369
  %1173 = icmp sgt i32 %1170, 5
  br i1 %1173, label %1174, label %1181

1174:                                             ; preds = %1166
  %1175 = sext i32 %1170 to i64
  %1176 = shl nsw i64 %1175, 2
  %1177 = tail call i8* @_Znam(i64 %1176) #18, !noalias !369
  %1178 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %1179 = bitcast i32** %1178 to i8**
  store i8* %1177, i8** %1179, align 8, !alias.scope !369
  %1180 = bitcast i8* %1177 to i32*
  br label %1186

1181:                                             ; preds = %1166
  %1182 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %1183 = bitcast %union.anon* %1182 to i32*
  %1184 = sext i32 %1170 to i64
  %1185 = shl nsw i64 %1184, 2
  br label %1186

1186:                                             ; preds = %1181, %1174
  %1187 = phi i64 [ %1176, %1174 ], [ %1185, %1181 ]
  %1188 = phi i32* [ %1180, %1174 ], [ %1183, %1181 ]
  %1189 = bitcast i32* %1188 to i8*
  %1190 = bitcast i32* %1171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1189, i8* align 4 %1190, i64 %1187, i1 false) #19
  %1191 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %1192 = bitcast %union.TfLitePtrUnion* %1191 to i8**
  %1193 = load i8*, i8** %1192, align 8
  br label %1194

1194:                                             ; preds = %1164, %1186
  %1195 = phi i32 [ %1170, %1186 ], [ 0, %1164 ]
  %1196 = phi i8* [ %1193, %1186 ], [ null, %1164 ]
  %1197 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1197) #19
  %1198 = icmp eq %struct.TfLiteTensor* %44, null
  br i1 %1198, label %1199, label %1201

1199:                                             ; preds = %1194
  %1200 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %1200, align 8, !alias.scope !372
  br label %1229

1201:                                             ; preds = %1194
  %1202 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 2
  %1203 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1202, align 8, !noalias !372
  %1204 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1203, i64 0, i32 0
  %1205 = load i32, i32* %1204, align 4, !noalias !372
  %1206 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1203, i64 0, i32 1, i64 0
  %1207 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %1205, i32* %1207, align 8, !alias.scope !372
  %1208 = icmp sgt i32 %1205, 5
  br i1 %1208, label %1209, label %1216

1209:                                             ; preds = %1201
  %1210 = sext i32 %1205 to i64
  %1211 = shl nsw i64 %1210, 2
  %1212 = tail call i8* @_Znam(i64 %1211) #18, !noalias !372
  %1213 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %1214 = bitcast i32** %1213 to i8**
  store i8* %1212, i8** %1214, align 8, !alias.scope !372
  %1215 = bitcast i8* %1212 to i32*
  br label %1221

1216:                                             ; preds = %1201
  %1217 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %1218 = bitcast %union.anon* %1217 to i32*
  %1219 = sext i32 %1205 to i64
  %1220 = shl nsw i64 %1219, 2
  br label %1221

1221:                                             ; preds = %1216, %1209
  %1222 = phi i64 [ %1211, %1209 ], [ %1220, %1216 ]
  %1223 = phi i32* [ %1215, %1209 ], [ %1218, %1216 ]
  %1224 = bitcast i32* %1223 to i8*
  %1225 = bitcast i32* %1206 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1224, i8* align 4 %1225, i64 %1222, i1 false) #19
  %1226 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 1
  %1227 = bitcast %union.TfLitePtrUnion* %1226 to i8**
  %1228 = load i8*, i8** %1227, align 8
  br label %1229

1229:                                             ; preds = %1199, %1221
  %1230 = phi i32 [ %1205, %1221 ], [ 0, %1199 ]
  %1231 = phi i8* [ %1228, %1221 ], [ null, %1199 ]
  %1232 = trunc i32 %1159 to i16
  %1233 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %1234 = icmp sgt i32 %1195, 5
  br i1 %1234, label %1235, label %1238

1235:                                             ; preds = %1229
  %1236 = getelementptr inbounds %union.anon, %union.anon* %1233, i64 0, i32 0
  %1237 = load i32*, i32** %1236, align 8
  br label %1241

1238:                                             ; preds = %1229
  %1239 = bitcast %union.anon* %1233 to i32*
  %1240 = icmp sgt i32 %1195, 0
  br i1 %1240, label %1241, label %1344

1241:                                             ; preds = %1238, %1235
  %1242 = phi i32* [ %1237, %1235 ], [ %1239, %1238 ]
  %1243 = zext i32 %1195 to i64
  %1244 = icmp ult i32 %1195, 8
  br i1 %1244, label %1330, label %1245

1245:                                             ; preds = %1241
  %1246 = and i64 %1243, 4294967288
  %1247 = add nsw i64 %1246, -8
  %1248 = lshr exact i64 %1247, 3
  %1249 = add nuw nsw i64 %1248, 1
  %1250 = and i64 %1249, 3
  %1251 = icmp ult i64 %1247, 24
  br i1 %1251, label %1297, label %1252

1252:                                             ; preds = %1245
  %1253 = sub nsw i64 %1249, %1250
  br label %1254

1254:                                             ; preds = %1254, %1252
  %1255 = phi i64 [ 0, %1252 ], [ %1294, %1254 ]
  %1256 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1252 ], [ %1292, %1254 ]
  %1257 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1252 ], [ %1293, %1254 ]
  %1258 = phi i64 [ %1253, %1252 ], [ %1295, %1254 ]
  %1259 = getelementptr inbounds i32, i32* %1242, i64 %1255
  %1260 = bitcast i32* %1259 to <4 x i32>*
  %1261 = load <4 x i32>, <4 x i32>* %1260, align 4
  %1262 = getelementptr inbounds i32, i32* %1259, i64 4
  %1263 = bitcast i32* %1262 to <4 x i32>*
  %1264 = load <4 x i32>, <4 x i32>* %1263, align 4
  %1265 = mul nsw <4 x i32> %1261, %1256
  %1266 = mul nsw <4 x i32> %1264, %1257
  %1267 = or i64 %1255, 8
  %1268 = getelementptr inbounds i32, i32* %1242, i64 %1267
  %1269 = bitcast i32* %1268 to <4 x i32>*
  %1270 = load <4 x i32>, <4 x i32>* %1269, align 4
  %1271 = getelementptr inbounds i32, i32* %1268, i64 4
  %1272 = bitcast i32* %1271 to <4 x i32>*
  %1273 = load <4 x i32>, <4 x i32>* %1272, align 4
  %1274 = mul nsw <4 x i32> %1270, %1265
  %1275 = mul nsw <4 x i32> %1273, %1266
  %1276 = or i64 %1255, 16
  %1277 = getelementptr inbounds i32, i32* %1242, i64 %1276
  %1278 = bitcast i32* %1277 to <4 x i32>*
  %1279 = load <4 x i32>, <4 x i32>* %1278, align 4
  %1280 = getelementptr inbounds i32, i32* %1277, i64 4
  %1281 = bitcast i32* %1280 to <4 x i32>*
  %1282 = load <4 x i32>, <4 x i32>* %1281, align 4
  %1283 = mul nsw <4 x i32> %1279, %1274
  %1284 = mul nsw <4 x i32> %1282, %1275
  %1285 = or i64 %1255, 24
  %1286 = getelementptr inbounds i32, i32* %1242, i64 %1285
  %1287 = bitcast i32* %1286 to <4 x i32>*
  %1288 = load <4 x i32>, <4 x i32>* %1287, align 4
  %1289 = getelementptr inbounds i32, i32* %1286, i64 4
  %1290 = bitcast i32* %1289 to <4 x i32>*
  %1291 = load <4 x i32>, <4 x i32>* %1290, align 4
  %1292 = mul nsw <4 x i32> %1288, %1283
  %1293 = mul nsw <4 x i32> %1291, %1284
  %1294 = add i64 %1255, 32
  %1295 = add i64 %1258, -4
  %1296 = icmp eq i64 %1295, 0
  br i1 %1296, label %1297, label %1254, !llvm.loop !375

1297:                                             ; preds = %1254, %1245
  %1298 = phi <4 x i32> [ undef, %1245 ], [ %1292, %1254 ]
  %1299 = phi <4 x i32> [ undef, %1245 ], [ %1293, %1254 ]
  %1300 = phi i64 [ 0, %1245 ], [ %1294, %1254 ]
  %1301 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1245 ], [ %1292, %1254 ]
  %1302 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1245 ], [ %1293, %1254 ]
  %1303 = icmp eq i64 %1250, 0
  br i1 %1303, label %1320, label %1304

1304:                                             ; preds = %1297, %1304
  %1305 = phi i64 [ %1317, %1304 ], [ %1300, %1297 ]
  %1306 = phi <4 x i32> [ %1315, %1304 ], [ %1301, %1297 ]
  %1307 = phi <4 x i32> [ %1316, %1304 ], [ %1302, %1297 ]
  %1308 = phi i64 [ %1318, %1304 ], [ %1250, %1297 ]
  %1309 = getelementptr inbounds i32, i32* %1242, i64 %1305
  %1310 = bitcast i32* %1309 to <4 x i32>*
  %1311 = load <4 x i32>, <4 x i32>* %1310, align 4
  %1312 = getelementptr inbounds i32, i32* %1309, i64 4
  %1313 = bitcast i32* %1312 to <4 x i32>*
  %1314 = load <4 x i32>, <4 x i32>* %1313, align 4
  %1315 = mul nsw <4 x i32> %1311, %1306
  %1316 = mul nsw <4 x i32> %1314, %1307
  %1317 = add i64 %1305, 8
  %1318 = add i64 %1308, -1
  %1319 = icmp eq i64 %1318, 0
  br i1 %1319, label %1320, label %1304, !llvm.loop !376

1320:                                             ; preds = %1304, %1297
  %1321 = phi <4 x i32> [ %1298, %1297 ], [ %1315, %1304 ]
  %1322 = phi <4 x i32> [ %1299, %1297 ], [ %1316, %1304 ]
  %1323 = mul <4 x i32> %1322, %1321
  %1324 = shufflevector <4 x i32> %1323, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1325 = mul <4 x i32> %1323, %1324
  %1326 = shufflevector <4 x i32> %1325, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1327 = mul <4 x i32> %1325, %1326
  %1328 = extractelement <4 x i32> %1327, i32 0
  %1329 = icmp eq i64 %1246, %1243
  br i1 %1329, label %1341, label %1330

1330:                                             ; preds = %1320, %1241
  %1331 = phi i64 [ 0, %1241 ], [ %1246, %1320 ]
  %1332 = phi i32 [ 1, %1241 ], [ %1328, %1320 ]
  br label %1333

1333:                                             ; preds = %1330, %1333
  %1334 = phi i64 [ %1339, %1333 ], [ %1331, %1330 ]
  %1335 = phi i32 [ %1338, %1333 ], [ %1332, %1330 ]
  %1336 = getelementptr inbounds i32, i32* %1242, i64 %1334
  %1337 = load i32, i32* %1336, align 4
  %1338 = mul nsw i32 %1337, %1335
  %1339 = add nuw nsw i64 %1334, 1
  %1340 = icmp eq i64 %1339, %1243
  br i1 %1340, label %1341, label %1333, !llvm.loop !377

1341:                                             ; preds = %1333, %1320
  %1342 = phi i32 [ %1328, %1320 ], [ %1338, %1333 ]
  %1343 = icmp sgt i32 %1342, 0
  br i1 %1343, label %1344, label %1404

1344:                                             ; preds = %1341, %1238
  %1345 = phi i32 [ %1342, %1341 ], [ 1, %1238 ]
  %1346 = sub nsw i32 0, %1157
  %1347 = shl i32 %1161, 16
  %1348 = ashr exact i32 %1347, 16
  %1349 = shl i32 %1159, 16
  %1350 = ashr exact i32 %1349, 16
  %1351 = zext i32 %1345 to i64
  br label %1352

1352:                                             ; preds = %1399, %1344
  %1353 = phi i64 [ 0, %1344 ], [ %1402, %1399 ]
  %1354 = getelementptr inbounds i8, i8* %1196, i64 %1353
  %1355 = load i8, i8* %1354, align 1
  %1356 = sext i8 %1355 to i32
  %1357 = sub nsw i32 %1356, %1155
  %1358 = shl i32 %1357, 16
  %1359 = ashr exact i32 %1358, 16
  %1360 = icmp sgt i32 %1359, %1346
  br i1 %1360, label %1361, label %1399

1361:                                             ; preds = %1352
  %1362 = icmp slt i32 %1359, %1157
  br i1 %1362, label %1363, label %1399

1363:                                             ; preds = %1361
  %1364 = shl i32 %1359, %1348
  %1365 = trunc i32 %1364 to i16
  %1366 = icmp eq i16 %1365, %1232
  %1367 = icmp eq i16 %1365, -32768
  %1368 = and i1 %1367, %1366
  br i1 %1368, label %1378, label %1369

1369:                                             ; preds = %1363
  %1370 = shl i32 %1364, 16
  %1371 = ashr exact i32 %1370, 16
  %1372 = mul nsw i32 %1371, %1350
  %1373 = icmp sgt i32 %1372, -1
  %1374 = select i1 %1373, i32 16384, i32 -16383
  %1375 = add nsw i32 %1374, %1372
  %1376 = sdiv i32 %1375, 32768
  %1377 = trunc i32 %1376 to i16
  br label %1378

1378:                                             ; preds = %1369, %1363
  %1379 = phi i16 [ %1377, %1369 ], [ 32767, %1363 ]
  %1380 = icmp eq i16 %1379, 0
  %1381 = sub i16 0, %1379
  %1382 = icmp slt i16 %1379, 0
  %1383 = select i1 %1382, i16 %1379, i16 %1381
  %1384 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %1383) #19
  %1385 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %1384) #19
  %1386 = sub i16 0, %1385
  %1387 = select i1 %1382, i16 %1386, i16 %1385
  %1388 = select i1 %1380, i16 0, i16 %1387
  %1389 = and i16 %1388, 255
  %1390 = lshr i16 %1388, 15
  %1391 = add nuw nsw i16 %1390, 127
  %1392 = ashr i16 %1388, 8
  %1393 = icmp ugt i16 %1389, %1391
  %1394 = zext i1 %1393 to i16
  %1395 = add nsw i16 %1392, %1394
  %1396 = icmp eq i16 %1395, 128
  %1397 = select i1 %1396, i16 127, i16 %1395
  %1398 = trunc i16 %1397 to i8
  br label %1399

1399:                                             ; preds = %1378, %1361, %1352
  %1400 = phi i8 [ %1398, %1378 ], [ -128, %1352 ], [ 127, %1361 ]
  %1401 = getelementptr inbounds i8, i8* %1231, i64 %1353
  store i8 %1400, i8* %1401, align 1
  %1402 = add nuw nsw i64 %1353, 1
  %1403 = icmp eq i64 %1402, %1351
  br i1 %1403, label %1404, label %1352

1404:                                             ; preds = %1399, %1341
  %1405 = icmp sgt i32 %1230, 5
  br i1 %1405, label %1406, label %1412

1406:                                             ; preds = %1404
  %1407 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %1408 = load i32*, i32** %1407, align 8
  %1409 = icmp eq i32* %1408, null
  br i1 %1409, label %1412, label %1410

1410:                                             ; preds = %1406
  %1411 = bitcast i32* %1408 to i8*
  tail call void @_ZdaPv(i8* %1411) #18
  br label %1412

1412:                                             ; preds = %1404, %1406, %1410
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1197) #19
  br i1 %1234, label %1413, label %1419

1413:                                             ; preds = %1412
  %1414 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %1415 = load i32*, i32** %1414, align 8
  %1416 = icmp eq i32* %1415, null
  br i1 %1416, label %1419, label %1417

1417:                                             ; preds = %1413
  %1418 = bitcast i32* %1415 to i8*
  tail call void @_ZdaPv(i8* %1418) #18
  br label %1419

1419:                                             ; preds = %1412, %1413, %1417
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1162) #19
  br label %1424

1420:                                             ; preds = %43
  %1421 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1422 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1421, align 8
  %1423 = tail call i8* @TfLiteTypeGetName(i32 %46) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %1422(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.49, i64 0, i64 0), i8* %1423) #19
  br label %1424

1424:                                             ; preds = %621, %884, %584, %1420, %1419, %1152, %377
  %1425 = phi i32 [ 1, %1420 ], [ 0, %1419 ], [ 0, %1152 ], [ 0, %377 ], [ 0, %584 ], [ 0, %884 ], [ 0, %621 ]
  ret i32 %1425
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin13Register_TANHEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin25Register_TANH_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin21Register_LOGISTIC_REFEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_LOGISTIC_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.std::__1::function.285", align 8
  %4 = alloca %"class.std::__1::function.285", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %8 = bitcast i8** %7 to %"struct.tflite::ops::builtin::activations::OpData"**
  %9 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %17 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %16, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %17(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 468, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %13, i32 1) #19
  br label %233

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %20 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %19, align 8
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %26 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %25, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %26(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 469, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %22, i32 1) #19
  br label %233

27:                                               ; preds = %18
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %27, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %27 ]
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 1, i64 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %43 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %42, align 8
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 %44
  br label %46

46:                                               ; preds = %36, %41
  %47 = phi %struct.TfLiteTensor* [ %45, %41 ], [ null, %36 ]
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %49, %51
  br i1 %52, label %59, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %55 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %54, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %49) #19
  %57 = load i32, i32* %50, align 8
  %58 = tail call i8* @TfLiteTypeGetName(i32 %57) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %55(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 472, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %56, i8* %58) #19
  br label %233

59:                                               ; preds = %46
  switch i32 %49, label %226 [
    i32 3, label %60
    i32 9, label %111
    i32 7, label %163
  ]

60:                                               ; preds = %59
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %62 = load float, float* %61, align 8
  %63 = fcmp oeq float %62, 3.906250e-03
  br i1 %63, label %67, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %66 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %65, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %66(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 505, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.54, i64 0, i64 0)) #19
  br label %233

67:                                               ; preds = %60
  %68 = bitcast %"class.std::__1::function.285"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #19
  %69 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 1, i32 0
  %70 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %69, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %70, align 8
  %71 = load float, float* %61, align 8
  %72 = fdiv float 1.000000e+00, %71
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %75 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0
  %76 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %77

77:                                               ; preds = %101, %67
  %78 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, %67 ], [ %102, %101 ]
  %79 = phi i64 [ 0, %67 ], [ %99, %101 ]
  %80 = load float, float* %73, align 8
  %81 = load i32, i32* %74, align 4
  %82 = trunc i64 %79 to i32
  %83 = sub nsw i32 %82, %81
  %84 = sitofp i32 %83 to float
  %85 = fmul float %80, %84
  %86 = call float %78(%"union.std::__1::__function::__policy_storage"* nonnull %75, float %85) #19
  %87 = fmul float %72, %86
  %88 = call float @llvm.round.f32(float %87) #19
  %89 = load i32, i32* %76, align 4
  %90 = sitofp i32 %89 to float
  %91 = fadd float %88, %90
  %92 = fptosi float %91 to i32
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %79
  store i8 %97, i8* %98, align 1
  %99 = add nuw nsw i64 %79, 1
  %100 = icmp eq i64 %99, 256
  br i1 %100, label %103, label %101

101:                                              ; preds = %77
  %102 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %69, align 8
  br label %77

103:                                              ; preds = %77
  %104 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %70, align 8
  %105 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %104, i64 0, i32 1
  %106 = load void (i8*)*, void (i8*)** %105, align 8
  %107 = icmp eq void (i8*)* %106, null
  br i1 %107, label %177, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  call void %106(i8* %110) #19
  br label %177

111:                                              ; preds = %59
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %113 = load float, float* %112, align 8
  %114 = fcmp oeq float %113, 3.906250e-03
  br i1 %114, label %118, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %117 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %116, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %117(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.54, i64 0, i64 0)) #19
  br label %233

118:                                              ; preds = %111
  %119 = bitcast %"class.std::__1::function.285"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %119) #19
  %120 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 1, i32 0
  %121 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %120, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %121, align 8
  %122 = load float, float* %112, align 8
  %123 = fdiv float 1.000000e+00, %122
  %124 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %125 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %126 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0
  %127 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %128

128:                                              ; preds = %153, %118
  %129 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, %118 ], [ %154, %153 ]
  %130 = phi i32 [ -128, %118 ], [ %151, %153 ]
  %131 = load float, float* %124, align 8
  %132 = load i32, i32* %125, align 4
  %133 = sub nsw i32 %130, %132
  %134 = sitofp i32 %133 to float
  %135 = fmul float %131, %134
  %136 = call float %129(%"union.std::__1::__function::__policy_storage"* nonnull %126, float %135) #19
  %137 = fmul float %123, %136
  %138 = call float @llvm.round.f32(float %137) #19
  %139 = load i32, i32* %127, align 4
  %140 = sitofp i32 %139 to float
  %141 = fadd float %138, %140
  %142 = fptosi float %141 to i32
  %143 = icmp slt i32 %142, 127
  %144 = select i1 %143, i32 %142, i32 127
  %145 = icmp sgt i32 %144, -128
  %146 = select i1 %145, i32 %144, i32 -128
  %147 = trunc i32 %146 to i8
  %148 = and i32 %130, 255
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %149
  store i8 %147, i8* %150, align 1
  %151 = add nsw i32 %130, 1
  %152 = icmp eq i32 %151, 128
  br i1 %152, label %155, label %153

153:                                              ; preds = %128
  %154 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %120, align 8
  br label %128

155:                                              ; preds = %128
  %156 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %121, align 8
  %157 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %156, i64 0, i32 1
  %158 = load void (i8*)*, void (i8*)** %157, align 8
  %159 = icmp eq void (i8*)* %158, null
  br i1 %159, label %177, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  call void %158(i8* %162) #19
  br label %177

163:                                              ; preds = %59
  %164 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %165 = load float, float* %164, align 8
  %166 = fcmp oeq float %165, 0x3F00000000000000
  br i1 %166, label %170, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %169 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %168, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %169(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 515, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.55, i64 0, i64 0)) #19
  br label %233

170:                                              ; preds = %163
  %171 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %179, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %176 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %175, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %176(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 516, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.56, i64 0, i64 0)) #19
  br label %233

177:                                              ; preds = %160, %155, %108, %103
  %178 = phi i8* [ %68, %103 ], [ %68, %108 ], [ %119, %155 ], [ %119, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %178) #19
  br label %179

179:                                              ; preds = %177, %170
  %180 = load i32, i32* %48, align 8
  %181 = icmp eq i32 %180, 7
  br i1 %181, label %182, label %226

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %189, label %186

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %188 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %187, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %188(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 527, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %184, i32 0) #19
  br label %233

189:                                              ; preds = %182
  %190 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %196, label %193

193:                                              ; preds = %189
  %194 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %195 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %194, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %195(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 528, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %191, i32 0) #19
  br label %233

196:                                              ; preds = %189
  %197 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %197) #19
  store i32 -1431655766, i32* %5, align 4
  %198 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %199 = load float, float* %198, align 8
  %200 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %199, i32* nonnull %5) #19
  %201 = load i32, i32* %5, align 4
  %202 = add nsw i32 %201, 12
  %203 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 1
  store i32 %202, i32* %203, align 4
  %204 = icmp eq i32 %202, 0
  %205 = and i1 %200, %204
  br i1 %205, label %211, label %206

206:                                              ; preds = %196
  %207 = load float, float* %198, align 8
  %208 = fmul float %207, 4.096000e+03
  %209 = fptosi float %208 to i32
  %210 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 0
  store i32 %209, i32* %210, align 4
  br label %211

211:                                              ; preds = %206, %196
  %212 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %212) #19
  store i32 -1431655766, i32* %6, align 4
  %213 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %214 = load float, float* %213, align 8
  %215 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %214, i32* nonnull %6) #19
  br i1 %215, label %219, label %216

216:                                              ; preds = %211
  %217 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %218 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %217, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %218(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 550, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %197) #19
  br label %233

219:                                              ; preds = %211
  %220 = load i32, i32* %6, align 4
  %221 = icmp eq i32 %220, -15
  br i1 %221, label %225, label %222

222:                                              ; preds = %219
  %223 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %224 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %223, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %224(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 552, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.48, i64 0, i64 0), i32 %220, i32 -15) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %197) #19
  br label %233

225:                                              ; preds = %219
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %197) #19
  br label %226

226:                                              ; preds = %59, %225, %179
  %227 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %228 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %227, align 8
  %229 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %230 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %229, align 8
  %231 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %230) #19
  %232 = call i32 %228(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %47, %struct.TfLiteIntArray* %231) #19
  br label %233

233:                                              ; preds = %53, %64, %115, %167, %174, %186, %193, %226, %222, %216, %24, %15
  %234 = phi i32 [ 1, %15 ], [ 1, %24 ], [ 1, %53 ], [ 1, %186 ], [ 1, %193 ], [ %232, %226 ], [ 1, %64 ], [ 1, %115 ], [ 1, %174 ], [ 1, %167 ], [ 1, %222 ], [ 1, %216 ]
  ret i32 %234
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %8 = bitcast i8** %7 to %"struct.tflite::ops::builtin::activations::OpData"**
  %9 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %17 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 %18
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi %struct.TfLiteTensor* [ %19, %15 ], [ null, %2 ]
  %22 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %23 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %23, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %20 ]
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  switch i32 %35, label %500 [
    i32 1, label %36
    i32 7, label %256
    i32 3, label %498
    i32 9, label %499
  ]

36:                                               ; preds = %32
  %37 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #19
  %38 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %40, align 8, !alias.scope !378
  br label %69

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8, !noalias !378
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4, !noalias !378
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %47 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %45, i32* %47, align 8, !alias.scope !378
  %48 = icmp sgt i32 %45, 5
  br i1 %48, label %49, label %56

49:                                               ; preds = %41
  %50 = sext i32 %45 to i64
  %51 = shl nsw i64 %50, 2
  %52 = tail call i8* @_Znam(i64 %51) #18, !noalias !378
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8, !alias.scope !378
  %55 = bitcast i8* %52 to i32*
  br label %61

56:                                               ; preds = %41
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i32*
  %59 = sext i32 %45 to i64
  %60 = shl nsw i64 %59, 2
  br label %61

61:                                               ; preds = %56, %49
  %62 = phi i64 [ %51, %49 ], [ %60, %56 ]
  %63 = phi i32* [ %55, %49 ], [ %58, %56 ]
  %64 = bitcast i32* %63 to i8*
  %65 = bitcast i32* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %62, i1 false) #19
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %67 = bitcast %union.TfLitePtrUnion* %66 to float**
  %68 = load float*, float** %67, align 8
  br label %69

69:                                               ; preds = %39, %61
  %70 = phi i32 [ %45, %61 ], [ 0, %39 ]
  %71 = phi float* [ %68, %61 ], [ null, %39 ]
  %72 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #19
  %73 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !381
  br label %104

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %77, align 8, !noalias !381
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4, !noalias !381
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 0
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %80, i32* %82, align 8, !alias.scope !381
  %83 = icmp sgt i32 %80, 5
  br i1 %83, label %84, label %91

84:                                               ; preds = %76
  %85 = sext i32 %80 to i64
  %86 = shl nsw i64 %85, 2
  %87 = tail call i8* @_Znam(i64 %86) #18, !noalias !381
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = bitcast i32** %88 to i8**
  store i8* %87, i8** %89, align 8, !alias.scope !381
  %90 = bitcast i8* %87 to i32*
  br label %96

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %93 = bitcast %union.anon* %92 to i32*
  %94 = sext i32 %80 to i64
  %95 = shl nsw i64 %94, 2
  br label %96

96:                                               ; preds = %91, %84
  %97 = phi i64 [ %86, %84 ], [ %95, %91 ]
  %98 = phi i32* [ %90, %84 ], [ %93, %91 ]
  %99 = bitcast i32* %98 to i8*
  %100 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %100, i64 %97, i1 false) #19
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %102 = bitcast %union.TfLitePtrUnion* %101 to float**
  %103 = load float*, float** %102, align 8
  br label %104

104:                                              ; preds = %74, %96
  %105 = phi i32 [ %80, %96 ], [ 0, %74 ]
  %106 = phi float* [ %103, %96 ], [ null, %74 ]
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %108 = icmp sgt i32 %70, 5
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = getelementptr inbounds %union.anon, %union.anon* %107, i64 0, i32 0
  %111 = load i32*, i32** %110, align 8
  br label %115

112:                                              ; preds = %104
  %113 = bitcast %union.anon* %107 to i32*
  %114 = icmp sgt i32 %70, 0
  br i1 %114, label %115, label %218

115:                                              ; preds = %112, %109
  %116 = phi i32* [ %111, %109 ], [ %113, %112 ]
  %117 = zext i32 %70 to i64
  %118 = icmp ult i32 %70, 8
  br i1 %118, label %204, label %119

119:                                              ; preds = %115
  %120 = and i64 %117, 4294967288
  %121 = add nsw i64 %120, -8
  %122 = lshr exact i64 %121, 3
  %123 = add nuw nsw i64 %122, 1
  %124 = and i64 %123, 3
  %125 = icmp ult i64 %121, 24
  br i1 %125, label %171, label %126

126:                                              ; preds = %119
  %127 = sub nsw i64 %123, %124
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %168, %128 ]
  %130 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %126 ], [ %166, %128 ]
  %131 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %126 ], [ %167, %128 ]
  %132 = phi i64 [ %127, %126 ], [ %169, %128 ]
  %133 = getelementptr inbounds i32, i32* %116, i64 %129
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr inbounds i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = mul nsw <4 x i32> %135, %130
  %140 = mul nsw <4 x i32> %138, %131
  %141 = or i64 %129, 8
  %142 = getelementptr inbounds i32, i32* %116, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = mul nsw <4 x i32> %144, %139
  %149 = mul nsw <4 x i32> %147, %140
  %150 = or i64 %129, 16
  %151 = getelementptr inbounds i32, i32* %116, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = mul nsw <4 x i32> %153, %148
  %158 = mul nsw <4 x i32> %156, %149
  %159 = or i64 %129, 24
  %160 = getelementptr inbounds i32, i32* %116, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = mul nsw <4 x i32> %162, %157
  %167 = mul nsw <4 x i32> %165, %158
  %168 = add i64 %129, 32
  %169 = add i64 %132, -4
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %128, !llvm.loop !384

171:                                              ; preds = %128, %119
  %172 = phi <4 x i32> [ undef, %119 ], [ %166, %128 ]
  %173 = phi <4 x i32> [ undef, %119 ], [ %167, %128 ]
  %174 = phi i64 [ 0, %119 ], [ %168, %128 ]
  %175 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %119 ], [ %166, %128 ]
  %176 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %119 ], [ %167, %128 ]
  %177 = icmp eq i64 %124, 0
  br i1 %177, label %194, label %178

178:                                              ; preds = %171, %178
  %179 = phi i64 [ %191, %178 ], [ %174, %171 ]
  %180 = phi <4 x i32> [ %189, %178 ], [ %175, %171 ]
  %181 = phi <4 x i32> [ %190, %178 ], [ %176, %171 ]
  %182 = phi i64 [ %192, %178 ], [ %124, %171 ]
  %183 = getelementptr inbounds i32, i32* %116, i64 %179
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = getelementptr inbounds i32, i32* %183, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = mul nsw <4 x i32> %185, %180
  %190 = mul nsw <4 x i32> %188, %181
  %191 = add i64 %179, 8
  %192 = add i64 %182, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %178, !llvm.loop !385

194:                                              ; preds = %178, %171
  %195 = phi <4 x i32> [ %172, %171 ], [ %189, %178 ]
  %196 = phi <4 x i32> [ %173, %171 ], [ %190, %178 ]
  %197 = mul <4 x i32> %196, %195
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %199 = mul <4 x i32> %197, %198
  %200 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %201 = mul <4 x i32> %199, %200
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = icmp eq i64 %120, %117
  br i1 %203, label %215, label %204

204:                                              ; preds = %194, %115
  %205 = phi i64 [ 0, %115 ], [ %120, %194 ]
  %206 = phi i32 [ 1, %115 ], [ %202, %194 ]
  br label %207

207:                                              ; preds = %204, %207
  %208 = phi i64 [ %213, %207 ], [ %205, %204 ]
  %209 = phi i32 [ %212, %207 ], [ %206, %204 ]
  %210 = getelementptr inbounds i32, i32* %116, i64 %208
  %211 = load i32, i32* %210, align 4
  %212 = mul nsw i32 %211, %209
  %213 = add nuw nsw i64 %208, 1
  %214 = icmp eq i64 %213, %117
  br i1 %214, label %215, label %207, !llvm.loop !386

215:                                              ; preds = %207, %194
  %216 = phi i32 [ %202, %194 ], [ %212, %207 ]
  %217 = icmp sgt i32 %216, 0
  br i1 %217, label %218, label %240

218:                                              ; preds = %215, %112
  %219 = phi i32 [ %216, %215 ], [ 1, %112 ]
  %220 = zext i32 %219 to i64
  br label %221

221:                                              ; preds = %235, %218
  %222 = phi i64 [ 0, %218 ], [ %238, %235 ]
  %223 = getelementptr inbounds float, float* %71, i64 %222
  %224 = load float, float* %223, align 4
  %225 = fcmp ogt float %224, 0x40309E79E0000000
  br i1 %225, label %235, label %226

226:                                              ; preds = %221
  %227 = fcmp olt float %224, -9.000000e+00
  br i1 %227, label %228, label %230

228:                                              ; preds = %226
  %229 = tail call float @expf(float %224) #19
  br label %235

230:                                              ; preds = %226
  %231 = fsub float -0.000000e+00, %224
  %232 = tail call float @expf(float %231) #19
  %233 = fadd float %232, 1.000000e+00
  %234 = fdiv float 1.000000e+00, %233
  br label %235

235:                                              ; preds = %230, %228, %221
  %236 = phi float [ %229, %228 ], [ %234, %230 ], [ 1.000000e+00, %221 ]
  %237 = getelementptr inbounds float, float* %106, i64 %222
  store float %236, float* %237, align 4
  %238 = add nuw nsw i64 %222, 1
  %239 = icmp eq i64 %238, %220
  br i1 %239, label %240, label %221

240:                                              ; preds = %235, %215
  %241 = icmp sgt i32 %105, 5
  br i1 %241, label %242, label %248

242:                                              ; preds = %240
  %243 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %244 = load i32*, i32** %243, align 8
  %245 = icmp eq i32* %244, null
  br i1 %245, label %248, label %246

246:                                              ; preds = %242
  %247 = bitcast i32* %244 to i8*
  tail call void @_ZdaPv(i8* %247) #18
  br label %248

248:                                              ; preds = %240, %242, %246
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #19
  br i1 %108, label %249, label %255

249:                                              ; preds = %248
  %250 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %251 = load i32*, i32** %250, align 8
  %252 = icmp eq i32* %251, null
  br i1 %252, label %255, label %253

253:                                              ; preds = %249
  %254 = bitcast i32* %251 to i8*
  tail call void @_ZdaPv(i8* %254) #18
  br label %255

255:                                              ; preds = %248, %249, %253
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #19
  br label %504

256:                                              ; preds = %32
  %257 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %257) #19
  %258 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %258, label %259, label %261

259:                                              ; preds = %256
  %260 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %260, align 8, !alias.scope !387
  br label %286

261:                                              ; preds = %256
  %262 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %263 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %262, align 8, !noalias !387
  %264 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %263, i64 0, i32 0
  %265 = load i32, i32* %264, align 4, !noalias !387
  %266 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %263, i64 0, i32 1, i64 0
  %267 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %265, i32* %267, align 8, !alias.scope !387
  %268 = icmp sgt i32 %265, 5
  br i1 %268, label %269, label %276

269:                                              ; preds = %261
  %270 = sext i32 %265 to i64
  %271 = shl nsw i64 %270, 2
  %272 = tail call i8* @_Znam(i64 %271) #18, !noalias !387
  %273 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %274 = bitcast i32** %273 to i8**
  store i8* %272, i8** %274, align 8, !alias.scope !387
  %275 = bitcast i8* %272 to i32*
  br label %281

276:                                              ; preds = %261
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %278 = bitcast %union.anon* %277 to i32*
  %279 = sext i32 %265 to i64
  %280 = shl nsw i64 %279, 2
  br label %281

281:                                              ; preds = %276, %269
  %282 = phi i64 [ %271, %269 ], [ %280, %276 ]
  %283 = phi i32* [ %275, %269 ], [ %278, %276 ]
  %284 = bitcast i32* %283 to i8*
  %285 = bitcast i32* %266 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %282, i1 false) #19
  br label %286

286:                                              ; preds = %259, %281
  %287 = phi i32 [ 0, %259 ], [ %265, %281 ]
  %288 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %288) #19
  %289 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %289, label %290, label %292

290:                                              ; preds = %286
  %291 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %291, align 8, !alias.scope !390
  br label %317

292:                                              ; preds = %286
  %293 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %294 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %293, align 8, !noalias !390
  %295 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %294, i64 0, i32 0
  %296 = load i32, i32* %295, align 4, !noalias !390
  %297 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %294, i64 0, i32 1, i64 0
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %296, i32* %298, align 8, !alias.scope !390
  %299 = icmp sgt i32 %296, 5
  br i1 %299, label %300, label %307

300:                                              ; preds = %292
  %301 = sext i32 %296 to i64
  %302 = shl nsw i64 %301, 2
  %303 = tail call i8* @_Znam(i64 %302) #18, !noalias !390
  %304 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %305 = bitcast i32** %304 to i8**
  store i8* %303, i8** %305, align 8, !alias.scope !390
  %306 = bitcast i8* %303 to i32*
  br label %312

307:                                              ; preds = %292
  %308 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %309 = bitcast %union.anon* %308 to i32*
  %310 = sext i32 %296 to i64
  %311 = shl nsw i64 %310, 2
  br label %312

312:                                              ; preds = %307, %300
  %313 = phi i64 [ %302, %300 ], [ %311, %307 ]
  %314 = phi i32* [ %306, %300 ], [ %309, %307 ]
  %315 = bitcast i32* %314 to i8*
  %316 = bitcast i32* %297 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %315, i8* align 4 %316, i64 %313, i1 false) #19
  br label %317

317:                                              ; preds = %290, %312
  %318 = phi i32 [ 0, %290 ], [ %296, %312 ]
  %319 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %320 = icmp sgt i32 %287, 5
  br i1 %320, label %321, label %324

321:                                              ; preds = %317
  %322 = getelementptr inbounds %union.anon, %union.anon* %319, i64 0, i32 0
  %323 = load i32*, i32** %322, align 8
  br label %327

324:                                              ; preds = %317
  %325 = bitcast %union.anon* %319 to i32*
  %326 = icmp sgt i32 %287, 0
  br i1 %326, label %327, label %427

327:                                              ; preds = %324, %321
  %328 = phi i32* [ %323, %321 ], [ %325, %324 ]
  %329 = zext i32 %287 to i64
  %330 = icmp ult i32 %287, 8
  br i1 %330, label %416, label %331

331:                                              ; preds = %327
  %332 = and i64 %329, 4294967288
  %333 = add nsw i64 %332, -8
  %334 = lshr exact i64 %333, 3
  %335 = add nuw nsw i64 %334, 1
  %336 = and i64 %335, 3
  %337 = icmp ult i64 %333, 24
  br i1 %337, label %383, label %338

338:                                              ; preds = %331
  %339 = sub nsw i64 %335, %336
  br label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ 0, %338 ], [ %380, %340 ]
  %342 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %338 ], [ %378, %340 ]
  %343 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %338 ], [ %379, %340 ]
  %344 = phi i64 [ %339, %338 ], [ %381, %340 ]
  %345 = getelementptr inbounds i32, i32* %328, i64 %341
  %346 = bitcast i32* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 4
  %348 = getelementptr inbounds i32, i32* %345, i64 4
  %349 = bitcast i32* %348 to <4 x i32>*
  %350 = load <4 x i32>, <4 x i32>* %349, align 4
  %351 = mul nsw <4 x i32> %347, %342
  %352 = mul nsw <4 x i32> %350, %343
  %353 = or i64 %341, 8
  %354 = getelementptr inbounds i32, i32* %328, i64 %353
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 4
  %357 = getelementptr inbounds i32, i32* %354, i64 4
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 4
  %360 = mul nsw <4 x i32> %356, %351
  %361 = mul nsw <4 x i32> %359, %352
  %362 = or i64 %341, 16
  %363 = getelementptr inbounds i32, i32* %328, i64 %362
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4
  %366 = getelementptr inbounds i32, i32* %363, i64 4
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = mul nsw <4 x i32> %365, %360
  %370 = mul nsw <4 x i32> %368, %361
  %371 = or i64 %341, 24
  %372 = getelementptr inbounds i32, i32* %328, i64 %371
  %373 = bitcast i32* %372 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 4
  %375 = getelementptr inbounds i32, i32* %372, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4
  %378 = mul nsw <4 x i32> %374, %369
  %379 = mul nsw <4 x i32> %377, %370
  %380 = add i64 %341, 32
  %381 = add i64 %344, -4
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %340, !llvm.loop !393

383:                                              ; preds = %340, %331
  %384 = phi <4 x i32> [ undef, %331 ], [ %378, %340 ]
  %385 = phi <4 x i32> [ undef, %331 ], [ %379, %340 ]
  %386 = phi i64 [ 0, %331 ], [ %380, %340 ]
  %387 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %331 ], [ %378, %340 ]
  %388 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %331 ], [ %379, %340 ]
  %389 = icmp eq i64 %336, 0
  br i1 %389, label %406, label %390

390:                                              ; preds = %383, %390
  %391 = phi i64 [ %403, %390 ], [ %386, %383 ]
  %392 = phi <4 x i32> [ %401, %390 ], [ %387, %383 ]
  %393 = phi <4 x i32> [ %402, %390 ], [ %388, %383 ]
  %394 = phi i64 [ %404, %390 ], [ %336, %383 ]
  %395 = getelementptr inbounds i32, i32* %328, i64 %391
  %396 = bitcast i32* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 4
  %398 = getelementptr inbounds i32, i32* %395, i64 4
  %399 = bitcast i32* %398 to <4 x i32>*
  %400 = load <4 x i32>, <4 x i32>* %399, align 4
  %401 = mul nsw <4 x i32> %397, %392
  %402 = mul nsw <4 x i32> %400, %393
  %403 = add i64 %391, 8
  %404 = add i64 %394, -1
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %390, !llvm.loop !394

406:                                              ; preds = %390, %383
  %407 = phi <4 x i32> [ %384, %383 ], [ %401, %390 ]
  %408 = phi <4 x i32> [ %385, %383 ], [ %402, %390 ]
  %409 = mul <4 x i32> %408, %407
  %410 = shufflevector <4 x i32> %409, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %411 = mul <4 x i32> %409, %410
  %412 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %413 = mul <4 x i32> %411, %412
  %414 = extractelement <4 x i32> %413, i32 0
  %415 = icmp eq i64 %332, %329
  br i1 %415, label %427, label %416

416:                                              ; preds = %406, %327
  %417 = phi i64 [ 0, %327 ], [ %332, %406 ]
  %418 = phi i32 [ 1, %327 ], [ %414, %406 ]
  br label %419

419:                                              ; preds = %416, %419
  %420 = phi i64 [ %425, %419 ], [ %417, %416 ]
  %421 = phi i32 [ %424, %419 ], [ %418, %416 ]
  %422 = getelementptr inbounds i32, i32* %328, i64 %420
  %423 = load i32, i32* %422, align 4
  %424 = mul nsw i32 %423, %421
  %425 = add nuw nsw i64 %420, 1
  %426 = icmp eq i64 %425, %329
  br i1 %426, label %427, label %419, !llvm.loop !395

427:                                              ; preds = %419, %406, %324
  %428 = phi i32 [ 1, %324 ], [ %414, %406 ], [ %424, %419 ]
  %429 = icmp sgt i32 %318, 5
  br i1 %429, label %430, label %436

430:                                              ; preds = %427
  %431 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %432 = load i32*, i32** %431, align 8
  %433 = icmp eq i32* %432, null
  br i1 %433, label %436, label %434

434:                                              ; preds = %430
  %435 = bitcast i32* %432 to i8*
  tail call void @_ZdaPv(i8* %435) #18
  br label %436

436:                                              ; preds = %427, %430, %434
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %288) #19
  br i1 %320, label %437, label %443

437:                                              ; preds = %436
  %438 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %439 = load i32*, i32** %438, align 8
  %440 = icmp eq i32* %439, null
  br i1 %440, label %443, label %441

441:                                              ; preds = %437
  %442 = bitcast i32* %439 to i8*
  tail call void @_ZdaPv(i8* %442) #18
  br label %443

443:                                              ; preds = %436, %437, %441
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %257) #19
  %444 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 0
  %445 = load i32, i32* %444, align 4
  br i1 %258, label %450, label %446

446:                                              ; preds = %443
  %447 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %448 = bitcast %union.TfLitePtrUnion* %447 to i16**
  %449 = load i16*, i16** %448, align 8
  br label %450

450:                                              ; preds = %443, %446
  %451 = phi i16* [ %449, %446 ], [ null, %443 ]
  br i1 %289, label %456, label %452

452:                                              ; preds = %450
  %453 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %454 = bitcast %union.TfLitePtrUnion* %453 to i16**
  %455 = load i16*, i16** %454, align 8
  br label %456

456:                                              ; preds = %450, %452
  %457 = phi i16* [ %455, %452 ], [ null, %450 ]
  %458 = icmp sgt i32 %445, 1
  %459 = select i1 %458, i32 %445, i32 1
  %460 = icmp sgt i32 %428, 0
  br i1 %460, label %461, label %504

461:                                              ; preds = %456, %461
  %462 = phi i16* [ %495, %461 ], [ %451, %456 ]
  %463 = phi i16* [ %496, %461 ], [ %457, %456 ]
  %464 = phi i32 [ %494, %461 ], [ 0, %456 ]
  %465 = load i16, i16* %462, align 2
  %466 = sext i16 %465 to i32
  %467 = mul nsw i32 %459, %466
  %468 = icmp slt i32 %467, 0
  %469 = sub nsw i32 0, %467
  %470 = select i1 %468, i32 %469, i32 %467
  %471 = mul nsw i32 %470, 3
  %472 = lshr i32 %471, 9
  %473 = and i32 %472, 255
  %474 = zext i32 %473 to i64
  %475 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %474
  %476 = load i16, i16* %475, align 2
  %477 = zext i16 %476 to i32
  %478 = add nuw nsw i32 %473, 1
  %479 = zext i32 %478 to i64
  %480 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %479
  %481 = load i16, i16* %480, align 2
  %482 = zext i16 %481 to i32
  %483 = and i32 %471, 511
  %484 = shl nuw nsw i32 %477, 9
  %485 = sub nsw i32 %482, %477
  %486 = mul nsw i32 %483, %485
  %487 = add nsw i32 %486, %484
  %488 = icmp sgt i32 %467, -1
  %489 = add nsw i32 %487, 512
  %490 = sub nsw i32 33554943, %487
  %491 = select i1 %488, i32 %489, i32 %490
  %492 = lshr i32 %491, 10
  %493 = trunc i32 %492 to i16
  store i16 %493, i16* %463, align 2
  %494 = add nuw nsw i32 %464, 1
  %495 = getelementptr inbounds i16, i16* %462, i64 1
  %496 = getelementptr inbounds i16, i16* %463, i64 1
  %497 = icmp eq i32 %494, %428
  br i1 %497, label %504, label %461

498:                                              ; preds = %32
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %9, %struct.TfLiteTensor* %21, %struct.TfLiteTensor* %33)
  br label %504

499:                                              ; preds = %32
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %9, %struct.TfLiteTensor* %21, %struct.TfLiteTensor* %33)
  br label %504

500:                                              ; preds = %32
  %501 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %502 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %501, align 8
  %503 = tail call i8* @TfLiteTypeGetName(i32 %35) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %502(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.49, i64 0, i64 0), i8* %503) #19
  br label %504

504:                                              ; preds = %461, %456, %255, %498, %499, %500
  %505 = phi i32 [ 1, %500 ], [ 0, %499 ], [ 0, %498 ], [ 0, %255 ], [ 0, %456 ], [ 0, %461 ]
  ret i32 %505
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin29Register_LOGISTIC_GENERIC_OPTEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin29Register_LOGISTIC_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.std::__1::function.285", align 8
  %4 = alloca %"class.std::__1::function.285", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %8 = bitcast i8** %7 to %"struct.tflite::ops::builtin::activations::OpData"**
  %9 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %17 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %16, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %17(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 468, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %13, i32 1) #19
  br label %233

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %20 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %19, align 8
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %26 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %25, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %26(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 469, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %22, i32 1) #19
  br label %233

27:                                               ; preds = %18
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %27, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %27 ]
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 1, i64 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %43 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %42, align 8
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 %44
  br label %46

46:                                               ; preds = %36, %41
  %47 = phi %struct.TfLiteTensor* [ %45, %41 ], [ null, %36 ]
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %49, %51
  br i1 %52, label %59, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %55 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %54, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %49) #19
  %57 = load i32, i32* %50, align 8
  %58 = tail call i8* @TfLiteTypeGetName(i32 %57) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %55(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 472, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %56, i8* %58) #19
  br label %233

59:                                               ; preds = %46
  switch i32 %49, label %226 [
    i32 3, label %60
    i32 9, label %111
    i32 7, label %163
  ]

60:                                               ; preds = %59
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %62 = load float, float* %61, align 8
  %63 = fcmp oeq float %62, 3.906250e-03
  br i1 %63, label %67, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %66 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %65, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %66(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 505, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.54, i64 0, i64 0)) #19
  br label %233

67:                                               ; preds = %60
  %68 = bitcast %"class.std::__1::function.285"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #19
  %69 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 1, i32 0
  %70 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %69, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %70, align 8
  %71 = load float, float* %61, align 8
  %72 = fdiv float 1.000000e+00, %71
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %75 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0
  %76 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %77

77:                                               ; preds = %101, %67
  %78 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf, %67 ], [ %102, %101 ]
  %79 = phi i64 [ 0, %67 ], [ %99, %101 ]
  %80 = load float, float* %73, align 8
  %81 = load i32, i32* %74, align 4
  %82 = trunc i64 %79 to i32
  %83 = sub nsw i32 %82, %81
  %84 = sitofp i32 %83 to float
  %85 = fmul float %80, %84
  %86 = call float %78(%"union.std::__1::__function::__policy_storage"* nonnull %75, float %85) #19
  %87 = fmul float %72, %86
  %88 = call float @llvm.round.f32(float %87) #19
  %89 = load i32, i32* %76, align 4
  %90 = sitofp i32 %89 to float
  %91 = fadd float %88, %90
  %92 = fptosi float %91 to i32
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %79
  store i8 %97, i8* %98, align 1
  %99 = add nuw nsw i64 %79, 1
  %100 = icmp eq i64 %99, 256
  br i1 %100, label %103, label %101

101:                                              ; preds = %77
  %102 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %69, align 8
  br label %77

103:                                              ; preds = %77
  %104 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %70, align 8
  %105 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %104, i64 0, i32 1
  %106 = load void (i8*)*, void (i8*)** %105, align 8
  %107 = icmp eq void (i8*)* %106, null
  br i1 %107, label %177, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %3, i64 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  call void %106(i8* %110) #19
  br label %177

111:                                              ; preds = %59
  %112 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %113 = load float, float* %112, align 8
  %114 = fcmp oeq float %113, 3.906250e-03
  br i1 %114, label %118, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %117 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %116, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %117(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.54, i64 0, i64 0)) #19
  br label %233

118:                                              ; preds = %111
  %119 = bitcast %"class.std::__1::function.285"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %119) #19
  %120 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 1, i32 0
  %121 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 2
  store float (%"union.std::__1::__function::__policy_storage"*, float)* @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, float (%"union.std::__1::__function::__policy_storage"*, float)** %120, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS7_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_FffEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %121, align 8
  %122 = load float, float* %112, align 8
  %123 = fdiv float 1.000000e+00, %122
  %124 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %125 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %126 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0
  %127 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  br label %128

128:                                              ; preds = %153, %118
  %129 = phi float (%"union.std::__1::__function::__policy_storage"*, float)* [ @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf, %118 ], [ %154, %153 ]
  %130 = phi i32 [ -128, %118 ], [ %151, %153 ]
  %131 = load float, float* %124, align 8
  %132 = load i32, i32* %125, align 4
  %133 = sub nsw i32 %130, %132
  %134 = sitofp i32 %133 to float
  %135 = fmul float %131, %134
  %136 = call float %129(%"union.std::__1::__function::__policy_storage"* nonnull %126, float %135) #19
  %137 = fmul float %123, %136
  %138 = call float @llvm.round.f32(float %137) #19
  %139 = load i32, i32* %127, align 4
  %140 = sitofp i32 %139 to float
  %141 = fadd float %138, %140
  %142 = fptosi float %141 to i32
  %143 = icmp slt i32 %142, 127
  %144 = select i1 %143, i32 %142, i32 127
  %145 = icmp sgt i32 %144, -128
  %146 = select i1 %145, i32 %144, i32 -128
  %147 = trunc i32 %146 to i8
  %148 = and i32 %130, 255
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 4, i64 %149
  store i8 %147, i8* %150, align 1
  %151 = add nsw i32 %130, 1
  %152 = icmp eq i32 %151, 128
  br i1 %152, label %155, label %153

153:                                              ; preds = %128
  %154 = load float (%"union.std::__1::__function::__policy_storage"*, float)*, float (%"union.std::__1::__function::__policy_storage"*, float)** %120, align 8
  br label %128

155:                                              ; preds = %128
  %156 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %121, align 8
  %157 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %156, i64 0, i32 1
  %158 = load void (i8*)*, void (i8*)** %157, align 8
  %159 = icmp eq void (i8*)* %158, null
  br i1 %159, label %177, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.std::__1::function.285", %"class.std::__1::function.285"* %4, i64 0, i32 0, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  call void %158(i8* %162) #19
  br label %177

163:                                              ; preds = %59
  %164 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %165 = load float, float* %164, align 8
  %166 = fcmp oeq float %165, 0x3F00000000000000
  br i1 %166, label %170, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %169 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %168, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %169(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 515, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.55, i64 0, i64 0)) #19
  br label %233

170:                                              ; preds = %163
  %171 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %179, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %176 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %175, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %176(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 516, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.56, i64 0, i64 0)) #19
  br label %233

177:                                              ; preds = %160, %155, %108, %103
  %178 = phi i8* [ %68, %103 ], [ %68, %108 ], [ %119, %155 ], [ %119, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %178) #19
  br label %179

179:                                              ; preds = %177, %170
  %180 = load i32, i32* %48, align 8
  %181 = icmp eq i32 %180, 7
  br i1 %181, label %182, label %226

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %189, label %186

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %188 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %187, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %188(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 527, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %184, i32 0) #19
  br label %233

189:                                              ; preds = %182
  %190 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %196, label %193

193:                                              ; preds = %189
  %194 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %195 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %194, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %195(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 528, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %191, i32 0) #19
  br label %233

196:                                              ; preds = %189
  %197 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %197) #19
  store i32 -1431655766, i32* %5, align 4
  %198 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 3, i32 0
  %199 = load float, float* %198, align 8
  %200 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %199, i32* nonnull %5) #19
  %201 = load i32, i32* %5, align 4
  %202 = add nsw i32 %201, 12
  %203 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 1
  store i32 %202, i32* %203, align 4
  %204 = icmp eq i32 %202, 0
  %205 = and i1 %200, %204
  br i1 %205, label %211, label %206

206:                                              ; preds = %196
  %207 = load float, float* %198, align 8
  %208 = fmul float %207, 4.096000e+03
  %209 = fptosi float %208 to i32
  %210 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %9, i64 0, i32 0
  store i32 %209, i32* %210, align 4
  br label %211

211:                                              ; preds = %206, %196
  %212 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %212) #19
  store i32 -1431655766, i32* %6, align 4
  %213 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %47, i64 0, i32 3, i32 0
  %214 = load float, float* %213, align 8
  %215 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %214, i32* nonnull %6) #19
  br i1 %215, label %219, label %216

216:                                              ; preds = %211
  %217 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %218 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %217, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %218(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 550, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %197) #19
  br label %233

219:                                              ; preds = %211
  %220 = load i32, i32* %6, align 4
  %221 = icmp eq i32 %220, -15
  br i1 %221, label %225, label %222

222:                                              ; preds = %219
  %223 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %224 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %223, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %224(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 552, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.48, i64 0, i64 0), i32 %220, i32 -15) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %197) #19
  br label %233

225:                                              ; preds = %219
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %197) #19
  br label %226

226:                                              ; preds = %59, %225, %179
  %227 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %228 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %227, align 8
  %229 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %230 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %229, align 8
  %231 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %230) #19
  %232 = call i32 %228(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %47, %struct.TfLiteIntArray* %231) #19
  br label %233

233:                                              ; preds = %53, %64, %115, %167, %174, %186, %193, %226, %222, %216, %24, %15
  %234 = phi i32 [ 1, %15 ], [ 1, %24 ], [ 1, %53 ], [ 1, %186 ], [ 1, %193 ], [ %232, %226 ], [ 1, %64 ], [ 1, %115 ], [ 1, %174 ], [ 1, %167 ], [ 1, %222 ], [ 1, %216 ]
  ret i32 %234
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"struct.Eigen::internal::assign_op", align 1
  %4 = alloca %"class.Eigen::CwiseUnaryOp.363", align 8
  %5 = alloca %"class.Eigen::ArrayWrapper.320", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %13 = bitcast i8** %12 to %"struct.tflite::ops::builtin::activations::OpData"**
  %14 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %13, align 8
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %22 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %21, align 8
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 %23
  br label %25

25:                                               ; preds = %2, %20
  %26 = phi %struct.TfLiteTensor* [ %24, %20 ], [ null, %2 ]
  %27 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %28 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %27, align 8
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %28, i64 0, i32 1, i64 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %34 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %33, align 8
  %35 = sext i32 %30 to i64
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 %35
  br label %37

37:                                               ; preds = %25, %32
  %38 = phi %struct.TfLiteTensor* [ %36, %32 ], [ null, %25 ]
  %39 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 0
  %40 = load i32, i32* %39, align 8
  switch i32 %40, label %831 [
    i32 1, label %41
    i32 7, label %359
    i32 3, label %829
    i32 9, label %830
  ]

41:                                               ; preds = %37
  %42 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #19
  %43 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %45, align 8, !alias.scope !396
  br label %74

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8, !noalias !396
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !noalias !396
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %50, i32* %52, align 8, !alias.scope !396
  %53 = icmp sgt i32 %50, 5
  br i1 %53, label %54, label %61

54:                                               ; preds = %46
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call i8* @_Znam(i64 %56) #18, !noalias !396
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !396
  %60 = bitcast i8* %57 to i32*
  br label %66

61:                                               ; preds = %46
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i32*
  %64 = sext i32 %50 to i64
  %65 = shl nsw i64 %64, 2
  br label %66

66:                                               ; preds = %61, %54
  %67 = phi i64 [ %56, %54 ], [ %65, %61 ]
  %68 = phi i32* [ %60, %54 ], [ %63, %61 ]
  %69 = bitcast i32* %68 to i8*
  %70 = bitcast i32* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %67, i1 false) #19
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to float**
  %73 = load float*, float** %72, align 8
  br label %74

74:                                               ; preds = %44, %66
  %75 = phi i32 [ %50, %66 ], [ 0, %44 ]
  %76 = phi float* [ %73, %66 ], [ null, %44 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #19
  %78 = icmp eq %struct.TfLiteTensor* %38, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !399
  br label %109

81:                                               ; preds = %74
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !399
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !399
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !399
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #18, !noalias !399
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !399
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #19
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi i32 [ %85, %101 ], [ 0, %79 ]
  %111 = phi float* [ %108, %101 ], [ null, %79 ]
  %112 = icmp sgt i32 %75, 5
  %113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %112, label %114, label %117

114:                                              ; preds = %109
  %115 = getelementptr inbounds %union.anon, %union.anon* %113, i64 0, i32 0
  %116 = load i32*, i32** %115, align 8, !noalias !402
  br label %120

117:                                              ; preds = %109
  %118 = bitcast %union.anon* %113 to i32*
  %119 = icmp sgt i32 %75, 0
  br i1 %119, label %120, label %223

120:                                              ; preds = %117, %114
  %121 = phi i32* [ %116, %114 ], [ %118, %117 ]
  %122 = zext i32 %75 to i64
  %123 = icmp ult i32 %75, 8
  br i1 %123, label %209, label %124

124:                                              ; preds = %120
  %125 = and i64 %122, 4294967288
  %126 = add nsw i64 %125, -8
  %127 = lshr exact i64 %126, 3
  %128 = add nuw nsw i64 %127, 1
  %129 = and i64 %128, 3
  %130 = icmp ult i64 %126, 24
  br i1 %130, label %176, label %131

131:                                              ; preds = %124
  %132 = sub nsw i64 %128, %129
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi i64 [ 0, %131 ], [ %173, %133 ]
  %135 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %131 ], [ %171, %133 ]
  %136 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %131 ], [ %172, %133 ]
  %137 = phi i64 [ %132, %131 ], [ %174, %133 ]
  %138 = getelementptr inbounds i32, i32* %121, i64 %134
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4, !noalias !402
  %141 = getelementptr inbounds i32, i32* %138, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4, !noalias !402
  %144 = mul nsw <4 x i32> %140, %135
  %145 = mul nsw <4 x i32> %143, %136
  %146 = or i64 %134, 8
  %147 = getelementptr inbounds i32, i32* %121, i64 %146
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4, !noalias !402
  %150 = getelementptr inbounds i32, i32* %147, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4, !noalias !402
  %153 = mul nsw <4 x i32> %149, %144
  %154 = mul nsw <4 x i32> %152, %145
  %155 = or i64 %134, 16
  %156 = getelementptr inbounds i32, i32* %121, i64 %155
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !noalias !402
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !noalias !402
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = or i64 %134, 24
  %165 = getelementptr inbounds i32, i32* %121, i64 %164
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4, !noalias !402
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !noalias !402
  %171 = mul nsw <4 x i32> %167, %162
  %172 = mul nsw <4 x i32> %170, %163
  %173 = add i64 %134, 32
  %174 = add i64 %137, -4
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %133, !llvm.loop !405

176:                                              ; preds = %133, %124
  %177 = phi <4 x i32> [ undef, %124 ], [ %171, %133 ]
  %178 = phi <4 x i32> [ undef, %124 ], [ %172, %133 ]
  %179 = phi i64 [ 0, %124 ], [ %173, %133 ]
  %180 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %124 ], [ %171, %133 ]
  %181 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %124 ], [ %172, %133 ]
  %182 = icmp eq i64 %129, 0
  br i1 %182, label %199, label %183

183:                                              ; preds = %176, %183
  %184 = phi i64 [ %196, %183 ], [ %179, %176 ]
  %185 = phi <4 x i32> [ %194, %183 ], [ %180, %176 ]
  %186 = phi <4 x i32> [ %195, %183 ], [ %181, %176 ]
  %187 = phi i64 [ %197, %183 ], [ %129, %176 ]
  %188 = getelementptr inbounds i32, i32* %121, i64 %184
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !noalias !402
  %191 = getelementptr inbounds i32, i32* %188, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4, !noalias !402
  %194 = mul nsw <4 x i32> %190, %185
  %195 = mul nsw <4 x i32> %193, %186
  %196 = add i64 %184, 8
  %197 = add i64 %187, -1
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %183, !llvm.loop !406

199:                                              ; preds = %183, %176
  %200 = phi <4 x i32> [ %177, %176 ], [ %194, %183 ]
  %201 = phi <4 x i32> [ %178, %176 ], [ %195, %183 ]
  %202 = mul <4 x i32> %201, %200
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %204 = mul <4 x i32> %202, %203
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %206 = mul <4 x i32> %204, %205
  %207 = extractelement <4 x i32> %206, i32 0
  %208 = icmp eq i64 %125, %122
  br i1 %208, label %220, label %209

209:                                              ; preds = %199, %120
  %210 = phi i64 [ 0, %120 ], [ %125, %199 ]
  %211 = phi i32 [ 1, %120 ], [ %207, %199 ]
  br label %212

212:                                              ; preds = %209, %212
  %213 = phi i64 [ %218, %212 ], [ %210, %209 ]
  %214 = phi i32 [ %217, %212 ], [ %211, %209 ]
  %215 = getelementptr inbounds i32, i32* %121, i64 %213
  %216 = load i32, i32* %215, align 4, !noalias !402
  %217 = mul nsw i32 %216, %214
  %218 = add nuw nsw i64 %213, 1
  %219 = icmp eq i64 %218, %122
  br i1 %219, label %220, label %212, !llvm.loop !407

220:                                              ; preds = %212, %199
  %221 = phi i32 [ %207, %199 ], [ %217, %212 ]
  %222 = sext i32 %221 to i64
  br label %223

223:                                              ; preds = %220, %117
  %224 = phi i64 [ 1, %117 ], [ %222, %220 ]
  %225 = icmp sgt i32 %110, 5
  %226 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  br i1 %225, label %227, label %230

227:                                              ; preds = %223
  %228 = getelementptr inbounds %union.anon, %union.anon* %226, i64 0, i32 0
  %229 = load i32*, i32** %228, align 8, !noalias !408
  br label %233

230:                                              ; preds = %223
  %231 = bitcast %union.anon* %226 to i32*
  %232 = icmp sgt i32 %110, 0
  br i1 %232, label %233, label %336

233:                                              ; preds = %230, %227
  %234 = phi i32* [ %229, %227 ], [ %231, %230 ]
  %235 = zext i32 %110 to i64
  %236 = icmp ult i32 %110, 8
  br i1 %236, label %322, label %237

237:                                              ; preds = %233
  %238 = and i64 %235, 4294967288
  %239 = add nsw i64 %238, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %289, label %244

244:                                              ; preds = %237
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %286, %246 ]
  %248 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %244 ], [ %284, %246 ]
  %249 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %244 ], [ %285, %246 ]
  %250 = phi i64 [ %245, %244 ], [ %287, %246 ]
  %251 = getelementptr inbounds i32, i32* %234, i64 %247
  %252 = bitcast i32* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 4, !noalias !408
  %254 = getelementptr inbounds i32, i32* %251, i64 4
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 4, !noalias !408
  %257 = mul nsw <4 x i32> %253, %248
  %258 = mul nsw <4 x i32> %256, %249
  %259 = or i64 %247, 8
  %260 = getelementptr inbounds i32, i32* %234, i64 %259
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 4, !noalias !408
  %263 = getelementptr inbounds i32, i32* %260, i64 4
  %264 = bitcast i32* %263 to <4 x i32>*
  %265 = load <4 x i32>, <4 x i32>* %264, align 4, !noalias !408
  %266 = mul nsw <4 x i32> %262, %257
  %267 = mul nsw <4 x i32> %265, %258
  %268 = or i64 %247, 16
  %269 = getelementptr inbounds i32, i32* %234, i64 %268
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4, !noalias !408
  %272 = getelementptr inbounds i32, i32* %269, i64 4
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !noalias !408
  %275 = mul nsw <4 x i32> %271, %266
  %276 = mul nsw <4 x i32> %274, %267
  %277 = or i64 %247, 24
  %278 = getelementptr inbounds i32, i32* %234, i64 %277
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4, !noalias !408
  %281 = getelementptr inbounds i32, i32* %278, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4, !noalias !408
  %284 = mul nsw <4 x i32> %280, %275
  %285 = mul nsw <4 x i32> %283, %276
  %286 = add i64 %247, 32
  %287 = add i64 %250, -4
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %289, label %246, !llvm.loop !411

289:                                              ; preds = %246, %237
  %290 = phi <4 x i32> [ undef, %237 ], [ %284, %246 ]
  %291 = phi <4 x i32> [ undef, %237 ], [ %285, %246 ]
  %292 = phi i64 [ 0, %237 ], [ %286, %246 ]
  %293 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %237 ], [ %284, %246 ]
  %294 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %237 ], [ %285, %246 ]
  %295 = icmp eq i64 %242, 0
  br i1 %295, label %312, label %296

296:                                              ; preds = %289, %296
  %297 = phi i64 [ %309, %296 ], [ %292, %289 ]
  %298 = phi <4 x i32> [ %307, %296 ], [ %293, %289 ]
  %299 = phi <4 x i32> [ %308, %296 ], [ %294, %289 ]
  %300 = phi i64 [ %310, %296 ], [ %242, %289 ]
  %301 = getelementptr inbounds i32, i32* %234, i64 %297
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 4, !noalias !408
  %304 = getelementptr inbounds i32, i32* %301, i64 4
  %305 = bitcast i32* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 4, !noalias !408
  %307 = mul nsw <4 x i32> %303, %298
  %308 = mul nsw <4 x i32> %306, %299
  %309 = add i64 %297, 8
  %310 = add i64 %300, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %296, !llvm.loop !412

312:                                              ; preds = %296, %289
  %313 = phi <4 x i32> [ %290, %289 ], [ %307, %296 ]
  %314 = phi <4 x i32> [ %291, %289 ], [ %308, %296 ]
  %315 = mul <4 x i32> %314, %313
  %316 = shufflevector <4 x i32> %315, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %317 = mul <4 x i32> %315, %316
  %318 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %319 = mul <4 x i32> %317, %318
  %320 = extractelement <4 x i32> %319, i32 0
  %321 = icmp eq i64 %238, %235
  br i1 %321, label %333, label %322

322:                                              ; preds = %312, %233
  %323 = phi i64 [ 0, %233 ], [ %238, %312 ]
  %324 = phi i32 [ 1, %233 ], [ %320, %312 ]
  br label %325

325:                                              ; preds = %322, %325
  %326 = phi i64 [ %331, %325 ], [ %323, %322 ]
  %327 = phi i32 [ %330, %325 ], [ %324, %322 ]
  %328 = getelementptr inbounds i32, i32* %234, i64 %326
  %329 = load i32, i32* %328, align 4, !noalias !408
  %330 = mul nsw i32 %329, %327
  %331 = add nuw nsw i64 %326, 1
  %332 = icmp eq i64 %331, %235
  br i1 %332, label %333, label %325, !llvm.loop !413

333:                                              ; preds = %325, %312
  %334 = phi i32 [ %320, %312 ], [ %330, %325 ]
  %335 = sext i32 %334 to i64
  br label %336

336:                                              ; preds = %230, %333
  %337 = phi i64 [ 1, %230 ], [ %335, %333 ]
  %338 = bitcast %"class.Eigen::CwiseUnaryOp.363"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %338) #19
  %339 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp.363", %"class.Eigen::CwiseUnaryOp.363"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %76, float** %339, align 8
  %340 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp.363", %"class.Eigen::CwiseUnaryOp.363"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %224, i64* %340, align 8
  %341 = bitcast %"class.Eigen::ArrayWrapper.320"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %341) #19
  %342 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %111, float** %342, align 8
  %343 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %337, i64* %343, align 8
  %344 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %344) #19
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKNS2_INS3_IKS5_Li0ES7_EEEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper.320"* nonnull dereferenceable(24) %5, %"class.Eigen::CwiseUnaryOp.363"* nonnull dereferenceable(32) %4, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %3) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %344) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %341) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %338) #19
  br i1 %225, label %345, label %351

345:                                              ; preds = %336
  %346 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %347 = load i32*, i32** %346, align 8
  %348 = icmp eq i32* %347, null
  br i1 %348, label %351, label %349

349:                                              ; preds = %345
  %350 = bitcast i32* %347 to i8*
  call void @_ZdaPv(i8* %350) #18
  br label %351

351:                                              ; preds = %336, %345, %349
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #19
  br i1 %112, label %352, label %358

352:                                              ; preds = %351
  %353 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %354 = load i32*, i32** %353, align 8
  %355 = icmp eq i32* %354, null
  br i1 %355, label %358, label %356

356:                                              ; preds = %352
  %357 = bitcast i32* %354 to i8*
  call void @_ZdaPv(i8* %357) #18
  br label %358

358:                                              ; preds = %351, %352, %356
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #19
  br label %835

359:                                              ; preds = %37
  %360 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %14, i64 0, i32 0
  %361 = load i32, i32* %360, align 4
  %362 = icmp sgt i32 %361, 0
  br i1 %362, label %363, label %604

363:                                              ; preds = %359
  %364 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %364) #19
  %365 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %365, label %366, label %368

366:                                              ; preds = %363
  %367 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %367, align 8, !alias.scope !414
  br label %393

368:                                              ; preds = %363
  %369 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 2
  %370 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %369, align 8, !noalias !414
  %371 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %370, i64 0, i32 0
  %372 = load i32, i32* %371, align 4, !noalias !414
  %373 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %370, i64 0, i32 1, i64 0
  %374 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %372, i32* %374, align 8, !alias.scope !414
  %375 = icmp sgt i32 %372, 5
  br i1 %375, label %376, label %383

376:                                              ; preds = %368
  %377 = sext i32 %372 to i64
  %378 = shl nsw i64 %377, 2
  %379 = tail call i8* @_Znam(i64 %378) #18, !noalias !414
  %380 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %381 = bitcast i32** %380 to i8**
  store i8* %379, i8** %381, align 8, !alias.scope !414
  %382 = bitcast i8* %379 to i32*
  br label %388

383:                                              ; preds = %368
  %384 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %385 = bitcast %union.anon* %384 to i32*
  %386 = sext i32 %372 to i64
  %387 = shl nsw i64 %386, 2
  br label %388

388:                                              ; preds = %383, %376
  %389 = phi i64 [ %378, %376 ], [ %387, %383 ]
  %390 = phi i32* [ %382, %376 ], [ %385, %383 ]
  %391 = bitcast i32* %390 to i8*
  %392 = bitcast i32* %373 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %391, i8* align 4 %392, i64 %389, i1 false) #19
  br label %393

393:                                              ; preds = %366, %388
  %394 = phi i32 [ 0, %366 ], [ %372, %388 ]
  %395 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %395) #19
  %396 = icmp eq %struct.TfLiteTensor* %38, null
  br i1 %396, label %397, label %399

397:                                              ; preds = %393
  %398 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %398, align 8, !alias.scope !417
  br label %424

399:                                              ; preds = %393
  %400 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 2
  %401 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %400, align 8, !noalias !417
  %402 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %401, i64 0, i32 0
  %403 = load i32, i32* %402, align 4, !noalias !417
  %404 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %401, i64 0, i32 1, i64 0
  %405 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %403, i32* %405, align 8, !alias.scope !417
  %406 = icmp sgt i32 %403, 5
  br i1 %406, label %407, label %414

407:                                              ; preds = %399
  %408 = sext i32 %403 to i64
  %409 = shl nsw i64 %408, 2
  %410 = tail call i8* @_Znam(i64 %409) #18, !noalias !417
  %411 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %412 = bitcast i32** %411 to i8**
  store i8* %410, i8** %412, align 8, !alias.scope !417
  %413 = bitcast i8* %410 to i32*
  br label %419

414:                                              ; preds = %399
  %415 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %416 = bitcast %union.anon* %415 to i32*
  %417 = sext i32 %403 to i64
  %418 = shl nsw i64 %417, 2
  br label %419

419:                                              ; preds = %414, %407
  %420 = phi i64 [ %409, %407 ], [ %418, %414 ]
  %421 = phi i32* [ %413, %407 ], [ %416, %414 ]
  %422 = bitcast i32* %421 to i8*
  %423 = bitcast i32* %404 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %422, i8* align 4 %423, i64 %420, i1 false) #19
  br label %424

424:                                              ; preds = %397, %419
  %425 = phi i32 [ 0, %397 ], [ %403, %419 ]
  %426 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %427 = icmp sgt i32 %394, 5
  br i1 %427, label %428, label %431

428:                                              ; preds = %424
  %429 = getelementptr inbounds %union.anon, %union.anon* %426, i64 0, i32 0
  %430 = load i32*, i32** %429, align 8
  br label %434

431:                                              ; preds = %424
  %432 = bitcast %union.anon* %426 to i32*
  %433 = icmp sgt i32 %394, 0
  br i1 %433, label %434, label %534

434:                                              ; preds = %431, %428
  %435 = phi i32* [ %430, %428 ], [ %432, %431 ]
  %436 = zext i32 %394 to i64
  %437 = icmp ult i32 %394, 8
  br i1 %437, label %523, label %438

438:                                              ; preds = %434
  %439 = and i64 %436, 4294967288
  %440 = add nsw i64 %439, -8
  %441 = lshr exact i64 %440, 3
  %442 = add nuw nsw i64 %441, 1
  %443 = and i64 %442, 3
  %444 = icmp ult i64 %440, 24
  br i1 %444, label %490, label %445

445:                                              ; preds = %438
  %446 = sub nsw i64 %442, %443
  br label %447

447:                                              ; preds = %447, %445
  %448 = phi i64 [ 0, %445 ], [ %487, %447 ]
  %449 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %445 ], [ %485, %447 ]
  %450 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %445 ], [ %486, %447 ]
  %451 = phi i64 [ %446, %445 ], [ %488, %447 ]
  %452 = getelementptr inbounds i32, i32* %435, i64 %448
  %453 = bitcast i32* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 4
  %455 = getelementptr inbounds i32, i32* %452, i64 4
  %456 = bitcast i32* %455 to <4 x i32>*
  %457 = load <4 x i32>, <4 x i32>* %456, align 4
  %458 = mul nsw <4 x i32> %454, %449
  %459 = mul nsw <4 x i32> %457, %450
  %460 = or i64 %448, 8
  %461 = getelementptr inbounds i32, i32* %435, i64 %460
  %462 = bitcast i32* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4
  %464 = getelementptr inbounds i32, i32* %461, i64 4
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 4
  %467 = mul nsw <4 x i32> %463, %458
  %468 = mul nsw <4 x i32> %466, %459
  %469 = or i64 %448, 16
  %470 = getelementptr inbounds i32, i32* %435, i64 %469
  %471 = bitcast i32* %470 to <4 x i32>*
  %472 = load <4 x i32>, <4 x i32>* %471, align 4
  %473 = getelementptr inbounds i32, i32* %470, i64 4
  %474 = bitcast i32* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 4
  %476 = mul nsw <4 x i32> %472, %467
  %477 = mul nsw <4 x i32> %475, %468
  %478 = or i64 %448, 24
  %479 = getelementptr inbounds i32, i32* %435, i64 %478
  %480 = bitcast i32* %479 to <4 x i32>*
  %481 = load <4 x i32>, <4 x i32>* %480, align 4
  %482 = getelementptr inbounds i32, i32* %479, i64 4
  %483 = bitcast i32* %482 to <4 x i32>*
  %484 = load <4 x i32>, <4 x i32>* %483, align 4
  %485 = mul nsw <4 x i32> %481, %476
  %486 = mul nsw <4 x i32> %484, %477
  %487 = add i64 %448, 32
  %488 = add i64 %451, -4
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %447, !llvm.loop !420

490:                                              ; preds = %447, %438
  %491 = phi <4 x i32> [ undef, %438 ], [ %485, %447 ]
  %492 = phi <4 x i32> [ undef, %438 ], [ %486, %447 ]
  %493 = phi i64 [ 0, %438 ], [ %487, %447 ]
  %494 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %438 ], [ %485, %447 ]
  %495 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %438 ], [ %486, %447 ]
  %496 = icmp eq i64 %443, 0
  br i1 %496, label %513, label %497

497:                                              ; preds = %490, %497
  %498 = phi i64 [ %510, %497 ], [ %493, %490 ]
  %499 = phi <4 x i32> [ %508, %497 ], [ %494, %490 ]
  %500 = phi <4 x i32> [ %509, %497 ], [ %495, %490 ]
  %501 = phi i64 [ %511, %497 ], [ %443, %490 ]
  %502 = getelementptr inbounds i32, i32* %435, i64 %498
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 4
  %506 = bitcast i32* %505 to <4 x i32>*
  %507 = load <4 x i32>, <4 x i32>* %506, align 4
  %508 = mul nsw <4 x i32> %504, %499
  %509 = mul nsw <4 x i32> %507, %500
  %510 = add i64 %498, 8
  %511 = add i64 %501, -1
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %513, label %497, !llvm.loop !421

513:                                              ; preds = %497, %490
  %514 = phi <4 x i32> [ %491, %490 ], [ %508, %497 ]
  %515 = phi <4 x i32> [ %492, %490 ], [ %509, %497 ]
  %516 = mul <4 x i32> %515, %514
  %517 = shufflevector <4 x i32> %516, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %518 = mul <4 x i32> %516, %517
  %519 = shufflevector <4 x i32> %518, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %520 = mul <4 x i32> %518, %519
  %521 = extractelement <4 x i32> %520, i32 0
  %522 = icmp eq i64 %439, %436
  br i1 %522, label %534, label %523

523:                                              ; preds = %513, %434
  %524 = phi i64 [ 0, %434 ], [ %439, %513 ]
  %525 = phi i32 [ 1, %434 ], [ %521, %513 ]
  br label %526

526:                                              ; preds = %523, %526
  %527 = phi i64 [ %532, %526 ], [ %524, %523 ]
  %528 = phi i32 [ %531, %526 ], [ %525, %523 ]
  %529 = getelementptr inbounds i32, i32* %435, i64 %527
  %530 = load i32, i32* %529, align 4
  %531 = mul nsw i32 %530, %528
  %532 = add nuw nsw i64 %527, 1
  %533 = icmp eq i64 %532, %436
  br i1 %533, label %534, label %526, !llvm.loop !422

534:                                              ; preds = %526, %513, %431
  %535 = phi i32 [ 1, %431 ], [ %521, %513 ], [ %531, %526 ]
  %536 = icmp sgt i32 %425, 5
  br i1 %536, label %537, label %543

537:                                              ; preds = %534
  %538 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %539 = load i32*, i32** %538, align 8
  %540 = icmp eq i32* %539, null
  br i1 %540, label %543, label %541

541:                                              ; preds = %537
  %542 = bitcast i32* %539 to i8*
  tail call void @_ZdaPv(i8* %542) #18
  br label %543

543:                                              ; preds = %534, %537, %541
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %395) #19
  br i1 %427, label %544, label %550

544:                                              ; preds = %543
  %545 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %546 = load i32*, i32** %545, align 8
  %547 = icmp eq i32* %546, null
  br i1 %547, label %550, label %548

548:                                              ; preds = %544
  %549 = bitcast i32* %546 to i8*
  tail call void @_ZdaPv(i8* %549) #18
  br label %550

550:                                              ; preds = %543, %544, %548
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %364) #19
  %551 = load i32, i32* %360, align 4
  br i1 %365, label %556, label %552

552:                                              ; preds = %550
  %553 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %554 = bitcast %union.TfLitePtrUnion* %553 to i16**
  %555 = load i16*, i16** %554, align 8
  br label %556

556:                                              ; preds = %550, %552
  %557 = phi i16* [ %555, %552 ], [ null, %550 ]
  br i1 %396, label %562, label %558

558:                                              ; preds = %556
  %559 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 1
  %560 = bitcast %union.TfLitePtrUnion* %559 to i16**
  %561 = load i16*, i16** %560, align 8
  br label %562

562:                                              ; preds = %556, %558
  %563 = phi i16* [ %561, %558 ], [ null, %556 ]
  %564 = icmp sgt i32 %551, 1
  %565 = select i1 %564, i32 %551, i32 1
  %566 = icmp sgt i32 %535, 0
  br i1 %566, label %567, label %835

567:                                              ; preds = %562, %567
  %568 = phi i16* [ %601, %567 ], [ %557, %562 ]
  %569 = phi i16* [ %602, %567 ], [ %563, %562 ]
  %570 = phi i32 [ %600, %567 ], [ 0, %562 ]
  %571 = load i16, i16* %568, align 2
  %572 = sext i16 %571 to i32
  %573 = mul nsw i32 %565, %572
  %574 = icmp slt i32 %573, 0
  %575 = sub nsw i32 0, %573
  %576 = select i1 %574, i32 %575, i32 %573
  %577 = mul nsw i32 %576, 3
  %578 = lshr i32 %577, 9
  %579 = and i32 %578, 255
  %580 = zext i32 %579 to i64
  %581 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %580
  %582 = load i16, i16* %581, align 2
  %583 = zext i16 %582 to i32
  %584 = add nuw nsw i32 %579, 1
  %585 = zext i32 %584 to i64
  %586 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %585
  %587 = load i16, i16* %586, align 2
  %588 = zext i16 %587 to i32
  %589 = and i32 %577, 511
  %590 = shl nuw nsw i32 %583, 9
  %591 = sub nsw i32 %588, %583
  %592 = mul nsw i32 %589, %591
  %593 = add nsw i32 %592, %590
  %594 = icmp sgt i32 %573, -1
  %595 = add nsw i32 %593, 512
  %596 = sub nsw i32 33554943, %593
  %597 = select i1 %594, i32 %595, i32 %596
  %598 = lshr i32 %597, 10
  %599 = trunc i32 %598 to i16
  store i16 %599, i16* %569, align 2
  %600 = add nuw nsw i32 %570, 1
  %601 = getelementptr inbounds i16, i16* %568, i64 1
  %602 = getelementptr inbounds i16, i16* %569, i64 1
  %603 = icmp eq i32 %600, %535
  br i1 %603, label %835, label %567

604:                                              ; preds = %359
  %605 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %605) #19
  %606 = icmp eq %struct.TfLiteTensor* %26, null
  br i1 %606, label %607, label %609

607:                                              ; preds = %604
  %608 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %608, align 8, !alias.scope !423
  br label %637

609:                                              ; preds = %604
  %610 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 2
  %611 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %610, align 8, !noalias !423
  %612 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %611, i64 0, i32 0
  %613 = load i32, i32* %612, align 4, !noalias !423
  %614 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %611, i64 0, i32 1, i64 0
  %615 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %613, i32* %615, align 8, !alias.scope !423
  %616 = icmp sgt i32 %613, 5
  br i1 %616, label %617, label %624

617:                                              ; preds = %609
  %618 = sext i32 %613 to i64
  %619 = shl nsw i64 %618, 2
  %620 = tail call i8* @_Znam(i64 %619) #18, !noalias !423
  %621 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %622 = bitcast i32** %621 to i8**
  store i8* %620, i8** %622, align 8, !alias.scope !423
  %623 = bitcast i8* %620 to i32*
  br label %629

624:                                              ; preds = %609
  %625 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %626 = bitcast %union.anon* %625 to i32*
  %627 = sext i32 %613 to i64
  %628 = shl nsw i64 %627, 2
  br label %629

629:                                              ; preds = %624, %617
  %630 = phi i64 [ %619, %617 ], [ %628, %624 ]
  %631 = phi i32* [ %623, %617 ], [ %626, %624 ]
  %632 = bitcast i32* %631 to i8*
  %633 = bitcast i32* %614 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %632, i8* align 4 %633, i64 %630, i1 false) #19
  %634 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 1
  %635 = bitcast %union.TfLitePtrUnion* %634 to i16**
  %636 = load i16*, i16** %635, align 8
  br label %637

637:                                              ; preds = %607, %629
  %638 = phi i32 [ %613, %629 ], [ 0, %607 ]
  %639 = phi i16* [ %636, %629 ], [ null, %607 ]
  %640 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %640) #19
  %641 = icmp eq %struct.TfLiteTensor* %38, null
  br i1 %641, label %642, label %644

642:                                              ; preds = %637
  %643 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %643, align 8, !alias.scope !426
  br label %672

644:                                              ; preds = %637
  %645 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 2
  %646 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %645, align 8, !noalias !426
  %647 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %646, i64 0, i32 0
  %648 = load i32, i32* %647, align 4, !noalias !426
  %649 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %646, i64 0, i32 1, i64 0
  %650 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %648, i32* %650, align 8, !alias.scope !426
  %651 = icmp sgt i32 %648, 5
  br i1 %651, label %652, label %659

652:                                              ; preds = %644
  %653 = sext i32 %648 to i64
  %654 = shl nsw i64 %653, 2
  %655 = tail call i8* @_Znam(i64 %654) #18, !noalias !426
  %656 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %657 = bitcast i32** %656 to i8**
  store i8* %655, i8** %657, align 8, !alias.scope !426
  %658 = bitcast i8* %655 to i32*
  br label %664

659:                                              ; preds = %644
  %660 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %661 = bitcast %union.anon* %660 to i32*
  %662 = sext i32 %648 to i64
  %663 = shl nsw i64 %662, 2
  br label %664

664:                                              ; preds = %659, %652
  %665 = phi i64 [ %654, %652 ], [ %663, %659 ]
  %666 = phi i32* [ %658, %652 ], [ %661, %659 ]
  %667 = bitcast i32* %666 to i8*
  %668 = bitcast i32* %649 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %667, i8* align 4 %668, i64 %665, i1 false) #19
  %669 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 0, i32 1
  %670 = bitcast %union.TfLitePtrUnion* %669 to i16**
  %671 = load i16*, i16** %670, align 8
  br label %672

672:                                              ; preds = %642, %664
  %673 = phi i32 [ %648, %664 ], [ 0, %642 ]
  %674 = phi i16* [ %671, %664 ], [ null, %642 ]
  %675 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %676 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %677 = icmp sgt i32 %638, 5
  br i1 %677, label %678, label %681

678:                                              ; preds = %672
  %679 = getelementptr inbounds %union.anon, %union.anon* %676, i64 0, i32 0
  %680 = load i32*, i32** %679, align 8
  br label %684

681:                                              ; preds = %672
  %682 = bitcast %union.anon* %676 to i32*
  %683 = icmp sgt i32 %638, 0
  br i1 %683, label %684, label %787

684:                                              ; preds = %681, %678
  %685 = phi i32* [ %680, %678 ], [ %682, %681 ]
  %686 = zext i32 %638 to i64
  %687 = icmp ult i32 %638, 8
  br i1 %687, label %773, label %688

688:                                              ; preds = %684
  %689 = and i64 %686, 4294967288
  %690 = add nsw i64 %689, -8
  %691 = lshr exact i64 %690, 3
  %692 = add nuw nsw i64 %691, 1
  %693 = and i64 %692, 3
  %694 = icmp ult i64 %690, 24
  br i1 %694, label %740, label %695

695:                                              ; preds = %688
  %696 = sub nsw i64 %692, %693
  br label %697

697:                                              ; preds = %697, %695
  %698 = phi i64 [ 0, %695 ], [ %737, %697 ]
  %699 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %695 ], [ %735, %697 ]
  %700 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %695 ], [ %736, %697 ]
  %701 = phi i64 [ %696, %695 ], [ %738, %697 ]
  %702 = getelementptr inbounds i32, i32* %685, i64 %698
  %703 = bitcast i32* %702 to <4 x i32>*
  %704 = load <4 x i32>, <4 x i32>* %703, align 4
  %705 = getelementptr inbounds i32, i32* %702, i64 4
  %706 = bitcast i32* %705 to <4 x i32>*
  %707 = load <4 x i32>, <4 x i32>* %706, align 4
  %708 = mul nsw <4 x i32> %704, %699
  %709 = mul nsw <4 x i32> %707, %700
  %710 = or i64 %698, 8
  %711 = getelementptr inbounds i32, i32* %685, i64 %710
  %712 = bitcast i32* %711 to <4 x i32>*
  %713 = load <4 x i32>, <4 x i32>* %712, align 4
  %714 = getelementptr inbounds i32, i32* %711, i64 4
  %715 = bitcast i32* %714 to <4 x i32>*
  %716 = load <4 x i32>, <4 x i32>* %715, align 4
  %717 = mul nsw <4 x i32> %713, %708
  %718 = mul nsw <4 x i32> %716, %709
  %719 = or i64 %698, 16
  %720 = getelementptr inbounds i32, i32* %685, i64 %719
  %721 = bitcast i32* %720 to <4 x i32>*
  %722 = load <4 x i32>, <4 x i32>* %721, align 4
  %723 = getelementptr inbounds i32, i32* %720, i64 4
  %724 = bitcast i32* %723 to <4 x i32>*
  %725 = load <4 x i32>, <4 x i32>* %724, align 4
  %726 = mul nsw <4 x i32> %722, %717
  %727 = mul nsw <4 x i32> %725, %718
  %728 = or i64 %698, 24
  %729 = getelementptr inbounds i32, i32* %685, i64 %728
  %730 = bitcast i32* %729 to <4 x i32>*
  %731 = load <4 x i32>, <4 x i32>* %730, align 4
  %732 = getelementptr inbounds i32, i32* %729, i64 4
  %733 = bitcast i32* %732 to <4 x i32>*
  %734 = load <4 x i32>, <4 x i32>* %733, align 4
  %735 = mul nsw <4 x i32> %731, %726
  %736 = mul nsw <4 x i32> %734, %727
  %737 = add i64 %698, 32
  %738 = add i64 %701, -4
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %740, label %697, !llvm.loop !429

740:                                              ; preds = %697, %688
  %741 = phi <4 x i32> [ undef, %688 ], [ %735, %697 ]
  %742 = phi <4 x i32> [ undef, %688 ], [ %736, %697 ]
  %743 = phi i64 [ 0, %688 ], [ %737, %697 ]
  %744 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %688 ], [ %735, %697 ]
  %745 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %688 ], [ %736, %697 ]
  %746 = icmp eq i64 %693, 0
  br i1 %746, label %763, label %747

747:                                              ; preds = %740, %747
  %748 = phi i64 [ %760, %747 ], [ %743, %740 ]
  %749 = phi <4 x i32> [ %758, %747 ], [ %744, %740 ]
  %750 = phi <4 x i32> [ %759, %747 ], [ %745, %740 ]
  %751 = phi i64 [ %761, %747 ], [ %693, %740 ]
  %752 = getelementptr inbounds i32, i32* %685, i64 %748
  %753 = bitcast i32* %752 to <4 x i32>*
  %754 = load <4 x i32>, <4 x i32>* %753, align 4
  %755 = getelementptr inbounds i32, i32* %752, i64 4
  %756 = bitcast i32* %755 to <4 x i32>*
  %757 = load <4 x i32>, <4 x i32>* %756, align 4
  %758 = mul nsw <4 x i32> %754, %749
  %759 = mul nsw <4 x i32> %757, %750
  %760 = add i64 %748, 8
  %761 = add i64 %751, -1
  %762 = icmp eq i64 %761, 0
  br i1 %762, label %763, label %747, !llvm.loop !430

763:                                              ; preds = %747, %740
  %764 = phi <4 x i32> [ %741, %740 ], [ %758, %747 ]
  %765 = phi <4 x i32> [ %742, %740 ], [ %759, %747 ]
  %766 = mul <4 x i32> %765, %764
  %767 = shufflevector <4 x i32> %766, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %768 = mul <4 x i32> %766, %767
  %769 = shufflevector <4 x i32> %768, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %770 = mul <4 x i32> %768, %769
  %771 = extractelement <4 x i32> %770, i32 0
  %772 = icmp eq i64 %689, %686
  br i1 %772, label %784, label %773

773:                                              ; preds = %763, %684
  %774 = phi i64 [ 0, %684 ], [ %689, %763 ]
  %775 = phi i32 [ 1, %684 ], [ %771, %763 ]
  br label %776

776:                                              ; preds = %773, %776
  %777 = phi i64 [ %782, %776 ], [ %774, %773 ]
  %778 = phi i32 [ %781, %776 ], [ %775, %773 ]
  %779 = getelementptr inbounds i32, i32* %685, i64 %777
  %780 = load i32, i32* %779, align 4
  %781 = mul nsw i32 %780, %778
  %782 = add nuw nsw i64 %777, 1
  %783 = icmp eq i64 %782, %686
  br i1 %783, label %784, label %776, !llvm.loop !431

784:                                              ; preds = %776, %763
  %785 = phi i32 [ %771, %763 ], [ %781, %776 ]
  %786 = icmp sgt i32 %785, 0
  br i1 %786, label %787, label %810

787:                                              ; preds = %784, %681
  %788 = phi i32 [ %785, %784 ], [ 1, %681 ]
  br label %789

789:                                              ; preds = %789, %787
  %790 = phi i16* [ %804, %789 ], [ %674, %787 ]
  %791 = phi i16* [ %803, %789 ], [ %639, %787 ]
  %792 = phi i32 [ %805, %789 ], [ 0, %787 ]
  %793 = load i16, i16* %791, align 2
  %794 = icmp slt i16 %793, 1
  %795 = icmp eq i16 %793, 0
  %796 = sub i16 0, %793
  %797 = select i1 %794, i16 %793, i16 %796
  %798 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %797) #19
  %799 = tail call i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %798) #19
  %800 = sub i16 32767, %799
  %801 = select i1 %794, i16 %800, i16 %799
  %802 = select i1 %795, i16 16384, i16 %801
  store i16 %802, i16* %790, align 2
  %803 = getelementptr inbounds i16, i16* %791, i64 1
  %804 = getelementptr inbounds i16, i16* %790, i64 1
  %805 = add nuw nsw i32 %792, 1
  %806 = icmp eq i32 %805, %788
  br i1 %806, label %807, label %789

807:                                              ; preds = %789
  %808 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %809 = load i32, i32* %808, align 8
  br label %810

810:                                              ; preds = %807, %784
  %811 = phi i32 [ %809, %807 ], [ %673, %784 ]
  %812 = icmp sgt i32 %811, 5
  br i1 %812, label %813, label %819

813:                                              ; preds = %810
  %814 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %815 = load i32*, i32** %814, align 8
  %816 = icmp eq i32* %815, null
  br i1 %816, label %819, label %817

817:                                              ; preds = %813
  %818 = bitcast i32* %815 to i8*
  tail call void @_ZdaPv(i8* %818) #18
  br label %819

819:                                              ; preds = %810, %813, %817
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %640) #19
  %820 = load i32, i32* %675, align 8
  %821 = icmp sgt i32 %820, 5
  br i1 %821, label %822, label %828

822:                                              ; preds = %819
  %823 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %824 = load i32*, i32** %823, align 8
  %825 = icmp eq i32* %824, null
  br i1 %825, label %828, label %826

826:                                              ; preds = %822
  %827 = bitcast i32* %824 to i8*
  tail call void @_ZdaPv(i8* %827) #18
  br label %828

828:                                              ; preds = %819, %822, %826
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %605) #19
  br label %835

829:                                              ; preds = %37
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %14, %struct.TfLiteTensor* %26, %struct.TfLiteTensor* %38)
  br label %835

830:                                              ; preds = %37
  tail call fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* %14, %struct.TfLiteTensor* %26, %struct.TfLiteTensor* %38)
  br label %835

831:                                              ; preds = %37
  %832 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %833 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %832, align 8
  %834 = tail call i8* @TfLiteTypeGetName(i32 %40) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %833(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.49, i64 0, i64 0), i8* %834) #19
  br label %835

835:                                              ; preds = %567, %828, %562, %358, %829, %830, %831
  %836 = phi i32 [ 1, %831 ], [ 0, %830 ], [ 0, %829 ], [ 0, %358 ], [ 0, %562 ], [ 0, %828 ], [ 0, %567 ]
  ret i32 %836
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin33Register_LOGISTIC_FIXED_POINT_OPTEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin33Register_LOGISTIC_FIXED_POINT_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations14SigmoidPrepareILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %6 = bitcast i8** %5 to %"struct.tflite::ops::builtin::activations::OpData"**
  %7 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %9 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %15 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %14, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %15(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 468, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %11, i32 1) #19
  br label %152

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %24 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %23, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %24(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 469, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %20, i32 1) #19
  br label %152

25:                                               ; preds = %16
  %26 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 1, i64 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %31 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %30, align 8
  %32 = sext i32 %27 to i64
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 %32
  br label %34

34:                                               ; preds = %25, %29
  %35 = phi %struct.TfLiteTensor* [ %33, %29 ], [ null, %25 ]
  %36 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %41 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %40, align 8
  %42 = sext i32 %37 to i64
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 %42
  br label %44

44:                                               ; preds = %34, %39
  %45 = phi %struct.TfLiteTensor* [ %43, %39 ], [ null, %34 ]
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %57, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %53 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %52, align 8
  %54 = tail call i8* @TfLiteTypeGetName(i32 %47) #19
  %55 = load i32, i32* %48, align 8
  %56 = tail call i8* @TfLiteTypeGetName(i32 %55) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %53(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 472, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %54, i8* %56) #19
  br label %152

57:                                               ; preds = %44
  switch i32 %47, label %98 [
    i32 3, label %58
    i32 9, label %65
  ]

58:                                               ; preds = %57
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %72, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %64 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %63, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %64(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 478, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.59, i64 0, i64 0), i32 %60, i32 0) #19
  br label %152

65:                                               ; preds = %57
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, -128
  br i1 %68, label %72, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %71 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %70, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %71(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 482, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.60, i64 0, i64 0), i32 %67, i32 -128) #19
  br label %152

72:                                               ; preds = %58, %65
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 0
  %74 = load float, float* %73, align 8
  %75 = fcmp oeq float %74, 3.906250e-03
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %78 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %77, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %78(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 484, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.54, i64 0, i64 0)) #19
  br label %152

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 3, i32 0
  %81 = load float, float* %80, align 8
  %82 = fpext float %81 to double
  %83 = fmul double %82, 2.048000e+03
  %84 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 1
  %85 = tail call double @frexp(double %83, i32* %84) #19
  %86 = fmul double %85, 3.276800e+04
  %87 = tail call double @llvm.round.f64(double %86) #19
  %88 = fptosi double %87 to i32
  %89 = shl i32 %88, 16
  %90 = ashr exact i32 %89, 16
  %91 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 0
  store i32 %90, i32* %91, align 4
  %92 = load i32, i32* %84, align 4
  %93 = tail call i32 @_ZN6tflite20CalculateInputRadiusEiii(i32 4, i32 %92, i32 15) #19
  %94 = shl i32 %93, 16
  %95 = ashr exact i32 %94, 16
  %96 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 2
  store i32 %95, i32* %96, align 4
  %97 = load i32, i32* %46, align 8
  br label %98

98:                                               ; preds = %57, %79
  %99 = phi i32 [ %47, %57 ], [ %97, %79 ]
  %100 = icmp eq i32 %99, 7
  br i1 %100, label %101, label %145

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 3, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %108, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %107 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %106, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %107(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 527, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %103, i32 0) #19
  br label %152

108:                                              ; preds = %101
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %114 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %113, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %114(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 528, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i32 %110, i32 0) #19
  br label %152

115:                                              ; preds = %108
  %116 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %116) #19
  store i32 -1431655766, i32* %3, align 4
  %117 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 3, i32 0
  %118 = load float, float* %117, align 8
  %119 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %118, i32* nonnull %3) #19
  %120 = load i32, i32* %3, align 4
  %121 = add nsw i32 %120, 12
  %122 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 1
  store i32 %121, i32* %122, align 4
  %123 = icmp eq i32 %121, 0
  %124 = and i1 %119, %123
  br i1 %124, label %130, label %125

125:                                              ; preds = %115
  %126 = load float, float* %117, align 8
  %127 = fmul float %126, 4.096000e+03
  %128 = fptosi float %127 to i32
  %129 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %7, i64 0, i32 0
  store i32 %128, i32* %129, align 4
  br label %130

130:                                              ; preds = %125, %115
  %131 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %131) #19
  store i32 -1431655766, i32* %4, align 4
  %132 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 0, i32 3, i32 0
  %133 = load float, float* %132, align 8
  %134 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %133, i32* nonnull %4) #19
  br i1 %134, label %138, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %137 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %136, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %137(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 550, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.46, i64 0, i64 0)) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %116) #19
  br label %152

138:                                              ; preds = %130
  %139 = load i32, i32* %4, align 4
  %140 = icmp eq i32 %139, -15
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %143 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %142, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %143(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 552, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.48, i64 0, i64 0), i32 %139, i32 -15) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %116) #19
  br label %152

144:                                              ; preds = %138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %116) #19
  br label %145

145:                                              ; preds = %144, %98
  %146 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %147 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %146, align 8
  %148 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %149 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %148, align 8
  %150 = call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %149) #19
  %151 = call i32 %147(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %45, %struct.TfLiteIntArray* %150) #19
  br label %152

152:                                              ; preds = %51, %62, %69, %76, %105, %112, %145, %141, %135, %22, %13
  %153 = phi i32 [ 1, %13 ], [ 1, %22 ], [ 1, %51 ], [ 1, %62 ], [ 1, %69 ], [ 1, %105 ], [ 1, %112 ], [ %151, %145 ], [ 1, %76 ], [ 1, %141 ], [ 1, %135 ]
  ret i32 %153
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations11SigmoidEvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"struct.Eigen::internal::assign_op", align 1
  %4 = alloca %"class.Eigen::CwiseUnaryOp.363", align 8
  %5 = alloca %"class.Eigen::ArrayWrapper.320", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %17 = bitcast i8** %16 to %"struct.tflite::ops::builtin::activations::OpData"**
  %18 = load %"struct.tflite::ops::builtin::activations::OpData"*, %"struct.tflite::ops::builtin::activations::OpData"** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %20 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %19, align 8
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %20, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %2
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %2, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %2 ]
  %31 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %38 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %37, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 %39
  br label %41

41:                                               ; preds = %29, %36
  %42 = phi %struct.TfLiteTensor* [ %40, %36 ], [ null, %29 ]
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  switch i32 %44, label %1368 [
    i32 1, label %45
    i32 7, label %363
    i32 3, label %833
    i32 9, label %1100
  ]

45:                                               ; preds = %41
  %46 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #19
  %47 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %49, align 8, !alias.scope !432
  br label %78

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8, !noalias !432
  %53 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4, !noalias !432
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %52, i64 0, i32 1, i64 0
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %54, i32* %56, align 8, !alias.scope !432
  %57 = icmp sgt i32 %54, 5
  br i1 %57, label %58, label %65

58:                                               ; preds = %50
  %59 = sext i32 %54 to i64
  %60 = shl nsw i64 %59, 2
  %61 = tail call i8* @_Znam(i64 %60) #18, !noalias !432
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %63 = bitcast i32** %62 to i8**
  store i8* %61, i8** %63, align 8, !alias.scope !432
  %64 = bitcast i8* %61 to i32*
  br label %70

65:                                               ; preds = %50
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %67 = bitcast %union.anon* %66 to i32*
  %68 = sext i32 %54 to i64
  %69 = shl nsw i64 %68, 2
  br label %70

70:                                               ; preds = %65, %58
  %71 = phi i64 [ %60, %58 ], [ %69, %65 ]
  %72 = phi i32* [ %64, %58 ], [ %67, %65 ]
  %73 = bitcast i32* %72 to i8*
  %74 = bitcast i32* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 %71, i1 false) #19
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %76 = bitcast %union.TfLitePtrUnion* %75 to float**
  %77 = load float*, float** %76, align 8
  br label %78

78:                                               ; preds = %48, %70
  %79 = phi i32 [ %54, %70 ], [ 0, %48 ]
  %80 = phi float* [ %77, %70 ], [ null, %48 ]
  %81 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #19
  %82 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !435
  br label %113

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %87 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %86, align 8, !noalias !435
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 0
  %89 = load i32, i32* %88, align 4, !noalias !435
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %87, i64 0, i32 1, i64 0
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %89, i32* %91, align 8, !alias.scope !435
  %92 = icmp sgt i32 %89, 5
  br i1 %92, label %93, label %100

93:                                               ; preds = %85
  %94 = sext i32 %89 to i64
  %95 = shl nsw i64 %94, 2
  %96 = tail call i8* @_Znam(i64 %95) #18, !noalias !435
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %98 = bitcast i32** %97 to i8**
  store i8* %96, i8** %98, align 8, !alias.scope !435
  %99 = bitcast i8* %96 to i32*
  br label %105

100:                                              ; preds = %85
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %102 = bitcast %union.anon* %101 to i32*
  %103 = sext i32 %89 to i64
  %104 = shl nsw i64 %103, 2
  br label %105

105:                                              ; preds = %100, %93
  %106 = phi i64 [ %95, %93 ], [ %104, %100 ]
  %107 = phi i32* [ %99, %93 ], [ %102, %100 ]
  %108 = bitcast i32* %107 to i8*
  %109 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 %106, i1 false) #19
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %111 = bitcast %union.TfLitePtrUnion* %110 to float**
  %112 = load float*, float** %111, align 8
  br label %113

113:                                              ; preds = %83, %105
  %114 = phi i32 [ %89, %105 ], [ 0, %83 ]
  %115 = phi float* [ %112, %105 ], [ null, %83 ]
  %116 = icmp sgt i32 %79, 5
  %117 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %116, label %118, label %121

118:                                              ; preds = %113
  %119 = getelementptr inbounds %union.anon, %union.anon* %117, i64 0, i32 0
  %120 = load i32*, i32** %119, align 8, !noalias !438
  br label %124

121:                                              ; preds = %113
  %122 = bitcast %union.anon* %117 to i32*
  %123 = icmp sgt i32 %79, 0
  br i1 %123, label %124, label %227

124:                                              ; preds = %121, %118
  %125 = phi i32* [ %120, %118 ], [ %122, %121 ]
  %126 = zext i32 %79 to i64
  %127 = icmp ult i32 %79, 8
  br i1 %127, label %213, label %128

128:                                              ; preds = %124
  %129 = and i64 %126, 4294967288
  %130 = add nsw i64 %129, -8
  %131 = lshr exact i64 %130, 3
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 3
  %134 = icmp ult i64 %130, 24
  br i1 %134, label %180, label %135

135:                                              ; preds = %128
  %136 = sub nsw i64 %132, %133
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 0, %135 ], [ %177, %137 ]
  %139 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %135 ], [ %175, %137 ]
  %140 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %135 ], [ %176, %137 ]
  %141 = phi i64 [ %136, %135 ], [ %178, %137 ]
  %142 = getelementptr inbounds i32, i32* %125, i64 %138
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4, !noalias !438
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4, !noalias !438
  %148 = mul nsw <4 x i32> %144, %139
  %149 = mul nsw <4 x i32> %147, %140
  %150 = or i64 %138, 8
  %151 = getelementptr inbounds i32, i32* %125, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !noalias !438
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !noalias !438
  %157 = mul nsw <4 x i32> %153, %148
  %158 = mul nsw <4 x i32> %156, %149
  %159 = or i64 %138, 16
  %160 = getelementptr inbounds i32, i32* %125, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4, !noalias !438
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4, !noalias !438
  %166 = mul nsw <4 x i32> %162, %157
  %167 = mul nsw <4 x i32> %165, %158
  %168 = or i64 %138, 24
  %169 = getelementptr inbounds i32, i32* %125, i64 %168
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4, !noalias !438
  %172 = getelementptr inbounds i32, i32* %169, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !noalias !438
  %175 = mul nsw <4 x i32> %171, %166
  %176 = mul nsw <4 x i32> %174, %167
  %177 = add i64 %138, 32
  %178 = add i64 %141, -4
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %137, !llvm.loop !441

180:                                              ; preds = %137, %128
  %181 = phi <4 x i32> [ undef, %128 ], [ %175, %137 ]
  %182 = phi <4 x i32> [ undef, %128 ], [ %176, %137 ]
  %183 = phi i64 [ 0, %128 ], [ %177, %137 ]
  %184 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %175, %137 ]
  %185 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %176, %137 ]
  %186 = icmp eq i64 %133, 0
  br i1 %186, label %203, label %187

187:                                              ; preds = %180, %187
  %188 = phi i64 [ %200, %187 ], [ %183, %180 ]
  %189 = phi <4 x i32> [ %198, %187 ], [ %184, %180 ]
  %190 = phi <4 x i32> [ %199, %187 ], [ %185, %180 ]
  %191 = phi i64 [ %201, %187 ], [ %133, %180 ]
  %192 = getelementptr inbounds i32, i32* %125, i64 %188
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4, !noalias !438
  %195 = getelementptr inbounds i32, i32* %192, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4, !noalias !438
  %198 = mul nsw <4 x i32> %194, %189
  %199 = mul nsw <4 x i32> %197, %190
  %200 = add i64 %188, 8
  %201 = add i64 %191, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %187, !llvm.loop !442

203:                                              ; preds = %187, %180
  %204 = phi <4 x i32> [ %181, %180 ], [ %198, %187 ]
  %205 = phi <4 x i32> [ %182, %180 ], [ %199, %187 ]
  %206 = mul <4 x i32> %205, %204
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %208 = mul <4 x i32> %206, %207
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %210 = mul <4 x i32> %208, %209
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = icmp eq i64 %129, %126
  br i1 %212, label %224, label %213

213:                                              ; preds = %203, %124
  %214 = phi i64 [ 0, %124 ], [ %129, %203 ]
  %215 = phi i32 [ 1, %124 ], [ %211, %203 ]
  br label %216

216:                                              ; preds = %213, %216
  %217 = phi i64 [ %222, %216 ], [ %214, %213 ]
  %218 = phi i32 [ %221, %216 ], [ %215, %213 ]
  %219 = getelementptr inbounds i32, i32* %125, i64 %217
  %220 = load i32, i32* %219, align 4, !noalias !438
  %221 = mul nsw i32 %220, %218
  %222 = add nuw nsw i64 %217, 1
  %223 = icmp eq i64 %222, %126
  br i1 %223, label %224, label %216, !llvm.loop !443

224:                                              ; preds = %216, %203
  %225 = phi i32 [ %211, %203 ], [ %221, %216 ]
  %226 = sext i32 %225 to i64
  br label %227

227:                                              ; preds = %224, %121
  %228 = phi i64 [ 1, %121 ], [ %226, %224 ]
  %229 = icmp sgt i32 %114, 5
  %230 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  br i1 %229, label %231, label %234

231:                                              ; preds = %227
  %232 = getelementptr inbounds %union.anon, %union.anon* %230, i64 0, i32 0
  %233 = load i32*, i32** %232, align 8, !noalias !444
  br label %237

234:                                              ; preds = %227
  %235 = bitcast %union.anon* %230 to i32*
  %236 = icmp sgt i32 %114, 0
  br i1 %236, label %237, label %340

237:                                              ; preds = %234, %231
  %238 = phi i32* [ %233, %231 ], [ %235, %234 ]
  %239 = zext i32 %114 to i64
  %240 = icmp ult i32 %114, 8
  br i1 %240, label %326, label %241

241:                                              ; preds = %237
  %242 = and i64 %239, 4294967288
  %243 = add nsw i64 %242, -8
  %244 = lshr exact i64 %243, 3
  %245 = add nuw nsw i64 %244, 1
  %246 = and i64 %245, 3
  %247 = icmp ult i64 %243, 24
  br i1 %247, label %293, label %248

248:                                              ; preds = %241
  %249 = sub nsw i64 %245, %246
  br label %250

250:                                              ; preds = %250, %248
  %251 = phi i64 [ 0, %248 ], [ %290, %250 ]
  %252 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %248 ], [ %288, %250 ]
  %253 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %248 ], [ %289, %250 ]
  %254 = phi i64 [ %249, %248 ], [ %291, %250 ]
  %255 = getelementptr inbounds i32, i32* %238, i64 %251
  %256 = bitcast i32* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !noalias !444
  %258 = getelementptr inbounds i32, i32* %255, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !noalias !444
  %261 = mul nsw <4 x i32> %257, %252
  %262 = mul nsw <4 x i32> %260, %253
  %263 = or i64 %251, 8
  %264 = getelementptr inbounds i32, i32* %238, i64 %263
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !noalias !444
  %267 = getelementptr inbounds i32, i32* %264, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4, !noalias !444
  %270 = mul nsw <4 x i32> %266, %261
  %271 = mul nsw <4 x i32> %269, %262
  %272 = or i64 %251, 16
  %273 = getelementptr inbounds i32, i32* %238, i64 %272
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4, !noalias !444
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4, !noalias !444
  %279 = mul nsw <4 x i32> %275, %270
  %280 = mul nsw <4 x i32> %278, %271
  %281 = or i64 %251, 24
  %282 = getelementptr inbounds i32, i32* %238, i64 %281
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4, !noalias !444
  %285 = getelementptr inbounds i32, i32* %282, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 4, !noalias !444
  %288 = mul nsw <4 x i32> %284, %279
  %289 = mul nsw <4 x i32> %287, %280
  %290 = add i64 %251, 32
  %291 = add i64 %254, -4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %250, !llvm.loop !447

293:                                              ; preds = %250, %241
  %294 = phi <4 x i32> [ undef, %241 ], [ %288, %250 ]
  %295 = phi <4 x i32> [ undef, %241 ], [ %289, %250 ]
  %296 = phi i64 [ 0, %241 ], [ %290, %250 ]
  %297 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %241 ], [ %288, %250 ]
  %298 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %241 ], [ %289, %250 ]
  %299 = icmp eq i64 %246, 0
  br i1 %299, label %316, label %300

300:                                              ; preds = %293, %300
  %301 = phi i64 [ %313, %300 ], [ %296, %293 ]
  %302 = phi <4 x i32> [ %311, %300 ], [ %297, %293 ]
  %303 = phi <4 x i32> [ %312, %300 ], [ %298, %293 ]
  %304 = phi i64 [ %314, %300 ], [ %246, %293 ]
  %305 = getelementptr inbounds i32, i32* %238, i64 %301
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !noalias !444
  %308 = getelementptr inbounds i32, i32* %305, i64 4
  %309 = bitcast i32* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 4, !noalias !444
  %311 = mul nsw <4 x i32> %307, %302
  %312 = mul nsw <4 x i32> %310, %303
  %313 = add i64 %301, 8
  %314 = add i64 %304, -1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %300, !llvm.loop !448

316:                                              ; preds = %300, %293
  %317 = phi <4 x i32> [ %294, %293 ], [ %311, %300 ]
  %318 = phi <4 x i32> [ %295, %293 ], [ %312, %300 ]
  %319 = mul <4 x i32> %318, %317
  %320 = shufflevector <4 x i32> %319, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %321 = mul <4 x i32> %319, %320
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %323 = mul <4 x i32> %321, %322
  %324 = extractelement <4 x i32> %323, i32 0
  %325 = icmp eq i64 %242, %239
  br i1 %325, label %337, label %326

326:                                              ; preds = %316, %237
  %327 = phi i64 [ 0, %237 ], [ %242, %316 ]
  %328 = phi i32 [ 1, %237 ], [ %324, %316 ]
  br label %329

329:                                              ; preds = %326, %329
  %330 = phi i64 [ %335, %329 ], [ %327, %326 ]
  %331 = phi i32 [ %334, %329 ], [ %328, %326 ]
  %332 = getelementptr inbounds i32, i32* %238, i64 %330
  %333 = load i32, i32* %332, align 4, !noalias !444
  %334 = mul nsw i32 %333, %331
  %335 = add nuw nsw i64 %330, 1
  %336 = icmp eq i64 %335, %239
  br i1 %336, label %337, label %329, !llvm.loop !449

337:                                              ; preds = %329, %316
  %338 = phi i32 [ %324, %316 ], [ %334, %329 ]
  %339 = sext i32 %338 to i64
  br label %340

340:                                              ; preds = %234, %337
  %341 = phi i64 [ 1, %234 ], [ %339, %337 ]
  %342 = bitcast %"class.Eigen::CwiseUnaryOp.363"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %342) #19
  %343 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp.363", %"class.Eigen::CwiseUnaryOp.363"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %80, float** %343, align 8
  %344 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp.363", %"class.Eigen::CwiseUnaryOp.363"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %228, i64* %344, align 8
  %345 = bitcast %"class.Eigen::ArrayWrapper.320"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %345) #19
  %346 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %115, float** %346, align 8
  %347 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %341, i64* %347, align 8
  %348 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %348) #19
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKNS2_INS3_IKS5_Li0ES7_EEEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper.320"* nonnull dereferenceable(24) %5, %"class.Eigen::CwiseUnaryOp.363"* nonnull dereferenceable(32) %4, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %3) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %348) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %345) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %342) #19
  br i1 %229, label %349, label %355

349:                                              ; preds = %340
  %350 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %351 = load i32*, i32** %350, align 8
  %352 = icmp eq i32* %351, null
  br i1 %352, label %355, label %353

353:                                              ; preds = %349
  %354 = bitcast i32* %351 to i8*
  call void @_ZdaPv(i8* %354) #18
  br label %355

355:                                              ; preds = %340, %349, %353
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #19
  br i1 %116, label %356, label %362

356:                                              ; preds = %355
  %357 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %358 = load i32*, i32** %357, align 8
  %359 = icmp eq i32* %358, null
  br i1 %359, label %362, label %360

360:                                              ; preds = %356
  %361 = bitcast i32* %358 to i8*
  call void @_ZdaPv(i8* %361) #18
  br label %362

362:                                              ; preds = %355, %356, %360
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #19
  br label %1372

363:                                              ; preds = %41
  %364 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 0
  %365 = load i32, i32* %364, align 4
  %366 = icmp sgt i32 %365, 0
  br i1 %366, label %367, label %608

367:                                              ; preds = %363
  %368 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %368) #19
  %369 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %369, label %370, label %372

370:                                              ; preds = %367
  %371 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %371, align 8, !alias.scope !450
  br label %397

372:                                              ; preds = %367
  %373 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %374 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %373, align 8, !noalias !450
  %375 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %374, i64 0, i32 0
  %376 = load i32, i32* %375, align 4, !noalias !450
  %377 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %374, i64 0, i32 1, i64 0
  %378 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %376, i32* %378, align 8, !alias.scope !450
  %379 = icmp sgt i32 %376, 5
  br i1 %379, label %380, label %387

380:                                              ; preds = %372
  %381 = sext i32 %376 to i64
  %382 = shl nsw i64 %381, 2
  %383 = tail call i8* @_Znam(i64 %382) #18, !noalias !450
  %384 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %385 = bitcast i32** %384 to i8**
  store i8* %383, i8** %385, align 8, !alias.scope !450
  %386 = bitcast i8* %383 to i32*
  br label %392

387:                                              ; preds = %372
  %388 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %389 = bitcast %union.anon* %388 to i32*
  %390 = sext i32 %376 to i64
  %391 = shl nsw i64 %390, 2
  br label %392

392:                                              ; preds = %387, %380
  %393 = phi i64 [ %382, %380 ], [ %391, %387 ]
  %394 = phi i32* [ %386, %380 ], [ %389, %387 ]
  %395 = bitcast i32* %394 to i8*
  %396 = bitcast i32* %377 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %395, i8* align 4 %396, i64 %393, i1 false) #19
  br label %397

397:                                              ; preds = %370, %392
  %398 = phi i32 [ 0, %370 ], [ %376, %392 ]
  %399 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %399) #19
  %400 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %400, label %401, label %403

401:                                              ; preds = %397
  %402 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %402, align 8, !alias.scope !453
  br label %428

403:                                              ; preds = %397
  %404 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %405 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %404, align 8, !noalias !453
  %406 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %405, i64 0, i32 0
  %407 = load i32, i32* %406, align 4, !noalias !453
  %408 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %405, i64 0, i32 1, i64 0
  %409 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %407, i32* %409, align 8, !alias.scope !453
  %410 = icmp sgt i32 %407, 5
  br i1 %410, label %411, label %418

411:                                              ; preds = %403
  %412 = sext i32 %407 to i64
  %413 = shl nsw i64 %412, 2
  %414 = tail call i8* @_Znam(i64 %413) #18, !noalias !453
  %415 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %416 = bitcast i32** %415 to i8**
  store i8* %414, i8** %416, align 8, !alias.scope !453
  %417 = bitcast i8* %414 to i32*
  br label %423

418:                                              ; preds = %403
  %419 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %420 = bitcast %union.anon* %419 to i32*
  %421 = sext i32 %407 to i64
  %422 = shl nsw i64 %421, 2
  br label %423

423:                                              ; preds = %418, %411
  %424 = phi i64 [ %413, %411 ], [ %422, %418 ]
  %425 = phi i32* [ %417, %411 ], [ %420, %418 ]
  %426 = bitcast i32* %425 to i8*
  %427 = bitcast i32* %408 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %426, i8* align 4 %427, i64 %424, i1 false) #19
  br label %428

428:                                              ; preds = %401, %423
  %429 = phi i32 [ 0, %401 ], [ %407, %423 ]
  %430 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %431 = icmp sgt i32 %398, 5
  br i1 %431, label %432, label %435

432:                                              ; preds = %428
  %433 = getelementptr inbounds %union.anon, %union.anon* %430, i64 0, i32 0
  %434 = load i32*, i32** %433, align 8
  br label %438

435:                                              ; preds = %428
  %436 = bitcast %union.anon* %430 to i32*
  %437 = icmp sgt i32 %398, 0
  br i1 %437, label %438, label %538

438:                                              ; preds = %435, %432
  %439 = phi i32* [ %434, %432 ], [ %436, %435 ]
  %440 = zext i32 %398 to i64
  %441 = icmp ult i32 %398, 8
  br i1 %441, label %527, label %442

442:                                              ; preds = %438
  %443 = and i64 %440, 4294967288
  %444 = add nsw i64 %443, -8
  %445 = lshr exact i64 %444, 3
  %446 = add nuw nsw i64 %445, 1
  %447 = and i64 %446, 3
  %448 = icmp ult i64 %444, 24
  br i1 %448, label %494, label %449

449:                                              ; preds = %442
  %450 = sub nsw i64 %446, %447
  br label %451

451:                                              ; preds = %451, %449
  %452 = phi i64 [ 0, %449 ], [ %491, %451 ]
  %453 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %449 ], [ %489, %451 ]
  %454 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %449 ], [ %490, %451 ]
  %455 = phi i64 [ %450, %449 ], [ %492, %451 ]
  %456 = getelementptr inbounds i32, i32* %439, i64 %452
  %457 = bitcast i32* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 4
  %459 = getelementptr inbounds i32, i32* %456, i64 4
  %460 = bitcast i32* %459 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 4
  %462 = mul nsw <4 x i32> %458, %453
  %463 = mul nsw <4 x i32> %461, %454
  %464 = or i64 %452, 8
  %465 = getelementptr inbounds i32, i32* %439, i64 %464
  %466 = bitcast i32* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 4
  %468 = getelementptr inbounds i32, i32* %465, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 4
  %471 = mul nsw <4 x i32> %467, %462
  %472 = mul nsw <4 x i32> %470, %463
  %473 = or i64 %452, 16
  %474 = getelementptr inbounds i32, i32* %439, i64 %473
  %475 = bitcast i32* %474 to <4 x i32>*
  %476 = load <4 x i32>, <4 x i32>* %475, align 4
  %477 = getelementptr inbounds i32, i32* %474, i64 4
  %478 = bitcast i32* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 4
  %480 = mul nsw <4 x i32> %476, %471
  %481 = mul nsw <4 x i32> %479, %472
  %482 = or i64 %452, 24
  %483 = getelementptr inbounds i32, i32* %439, i64 %482
  %484 = bitcast i32* %483 to <4 x i32>*
  %485 = load <4 x i32>, <4 x i32>* %484, align 4
  %486 = getelementptr inbounds i32, i32* %483, i64 4
  %487 = bitcast i32* %486 to <4 x i32>*
  %488 = load <4 x i32>, <4 x i32>* %487, align 4
  %489 = mul nsw <4 x i32> %485, %480
  %490 = mul nsw <4 x i32> %488, %481
  %491 = add i64 %452, 32
  %492 = add i64 %455, -4
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %451, !llvm.loop !456

494:                                              ; preds = %451, %442
  %495 = phi <4 x i32> [ undef, %442 ], [ %489, %451 ]
  %496 = phi <4 x i32> [ undef, %442 ], [ %490, %451 ]
  %497 = phi i64 [ 0, %442 ], [ %491, %451 ]
  %498 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %442 ], [ %489, %451 ]
  %499 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %442 ], [ %490, %451 ]
  %500 = icmp eq i64 %447, 0
  br i1 %500, label %517, label %501

501:                                              ; preds = %494, %501
  %502 = phi i64 [ %514, %501 ], [ %497, %494 ]
  %503 = phi <4 x i32> [ %512, %501 ], [ %498, %494 ]
  %504 = phi <4 x i32> [ %513, %501 ], [ %499, %494 ]
  %505 = phi i64 [ %515, %501 ], [ %447, %494 ]
  %506 = getelementptr inbounds i32, i32* %439, i64 %502
  %507 = bitcast i32* %506 to <4 x i32>*
  %508 = load <4 x i32>, <4 x i32>* %507, align 4
  %509 = getelementptr inbounds i32, i32* %506, i64 4
  %510 = bitcast i32* %509 to <4 x i32>*
  %511 = load <4 x i32>, <4 x i32>* %510, align 4
  %512 = mul nsw <4 x i32> %508, %503
  %513 = mul nsw <4 x i32> %511, %504
  %514 = add i64 %502, 8
  %515 = add i64 %505, -1
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %517, label %501, !llvm.loop !457

517:                                              ; preds = %501, %494
  %518 = phi <4 x i32> [ %495, %494 ], [ %512, %501 ]
  %519 = phi <4 x i32> [ %496, %494 ], [ %513, %501 ]
  %520 = mul <4 x i32> %519, %518
  %521 = shufflevector <4 x i32> %520, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %522 = mul <4 x i32> %520, %521
  %523 = shufflevector <4 x i32> %522, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %524 = mul <4 x i32> %522, %523
  %525 = extractelement <4 x i32> %524, i32 0
  %526 = icmp eq i64 %443, %440
  br i1 %526, label %538, label %527

527:                                              ; preds = %517, %438
  %528 = phi i64 [ 0, %438 ], [ %443, %517 ]
  %529 = phi i32 [ 1, %438 ], [ %525, %517 ]
  br label %530

530:                                              ; preds = %527, %530
  %531 = phi i64 [ %536, %530 ], [ %528, %527 ]
  %532 = phi i32 [ %535, %530 ], [ %529, %527 ]
  %533 = getelementptr inbounds i32, i32* %439, i64 %531
  %534 = load i32, i32* %533, align 4
  %535 = mul nsw i32 %534, %532
  %536 = add nuw nsw i64 %531, 1
  %537 = icmp eq i64 %536, %440
  br i1 %537, label %538, label %530, !llvm.loop !458

538:                                              ; preds = %530, %517, %435
  %539 = phi i32 [ 1, %435 ], [ %525, %517 ], [ %535, %530 ]
  %540 = icmp sgt i32 %429, 5
  br i1 %540, label %541, label %547

541:                                              ; preds = %538
  %542 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %543 = load i32*, i32** %542, align 8
  %544 = icmp eq i32* %543, null
  br i1 %544, label %547, label %545

545:                                              ; preds = %541
  %546 = bitcast i32* %543 to i8*
  tail call void @_ZdaPv(i8* %546) #18
  br label %547

547:                                              ; preds = %538, %541, %545
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %399) #19
  br i1 %431, label %548, label %554

548:                                              ; preds = %547
  %549 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %550 = load i32*, i32** %549, align 8
  %551 = icmp eq i32* %550, null
  br i1 %551, label %554, label %552

552:                                              ; preds = %548
  %553 = bitcast i32* %550 to i8*
  tail call void @_ZdaPv(i8* %553) #18
  br label %554

554:                                              ; preds = %547, %548, %552
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %368) #19
  %555 = load i32, i32* %364, align 4
  br i1 %369, label %560, label %556

556:                                              ; preds = %554
  %557 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %558 = bitcast %union.TfLitePtrUnion* %557 to i16**
  %559 = load i16*, i16** %558, align 8
  br label %560

560:                                              ; preds = %554, %556
  %561 = phi i16* [ %559, %556 ], [ null, %554 ]
  br i1 %400, label %566, label %562

562:                                              ; preds = %560
  %563 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %564 = bitcast %union.TfLitePtrUnion* %563 to i16**
  %565 = load i16*, i16** %564, align 8
  br label %566

566:                                              ; preds = %560, %562
  %567 = phi i16* [ %565, %562 ], [ null, %560 ]
  %568 = icmp sgt i32 %555, 1
  %569 = select i1 %568, i32 %555, i32 1
  %570 = icmp sgt i32 %539, 0
  br i1 %570, label %571, label %1372

571:                                              ; preds = %566, %571
  %572 = phi i16* [ %605, %571 ], [ %561, %566 ]
  %573 = phi i16* [ %606, %571 ], [ %567, %566 ]
  %574 = phi i32 [ %604, %571 ], [ 0, %566 ]
  %575 = load i16, i16* %572, align 2
  %576 = sext i16 %575 to i32
  %577 = mul nsw i32 %569, %576
  %578 = icmp slt i32 %577, 0
  %579 = sub nsw i32 0, %577
  %580 = select i1 %578, i32 %579, i32 %577
  %581 = mul nsw i32 %580, 3
  %582 = lshr i32 %581, 9
  %583 = and i32 %582, 255
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %584
  %586 = load i16, i16* %585, align 2
  %587 = zext i16 %586 to i32
  %588 = add nuw nsw i32 %583, 1
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN6tfliteL20sigmoid_table_uint16E, i64 0, i64 %589
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = and i32 %581, 511
  %594 = shl nuw nsw i32 %587, 9
  %595 = sub nsw i32 %592, %587
  %596 = mul nsw i32 %593, %595
  %597 = add nsw i32 %596, %594
  %598 = icmp sgt i32 %577, -1
  %599 = add nsw i32 %597, 512
  %600 = sub nsw i32 33554943, %597
  %601 = select i1 %598, i32 %599, i32 %600
  %602 = lshr i32 %601, 10
  %603 = trunc i32 %602 to i16
  store i16 %603, i16* %573, align 2
  %604 = add nuw nsw i32 %574, 1
  %605 = getelementptr inbounds i16, i16* %572, i64 1
  %606 = getelementptr inbounds i16, i16* %573, i64 1
  %607 = icmp eq i32 %604, %539
  br i1 %607, label %1372, label %571

608:                                              ; preds = %363
  %609 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %609) #19
  %610 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %610, label %611, label %613

611:                                              ; preds = %608
  %612 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %612, align 8, !alias.scope !459
  br label %641

613:                                              ; preds = %608
  %614 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %615 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %614, align 8, !noalias !459
  %616 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %615, i64 0, i32 0
  %617 = load i32, i32* %616, align 4, !noalias !459
  %618 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %615, i64 0, i32 1, i64 0
  %619 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %617, i32* %619, align 8, !alias.scope !459
  %620 = icmp sgt i32 %617, 5
  br i1 %620, label %621, label %628

621:                                              ; preds = %613
  %622 = sext i32 %617 to i64
  %623 = shl nsw i64 %622, 2
  %624 = tail call i8* @_Znam(i64 %623) #18, !noalias !459
  %625 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %626 = bitcast i32** %625 to i8**
  store i8* %624, i8** %626, align 8, !alias.scope !459
  %627 = bitcast i8* %624 to i32*
  br label %633

628:                                              ; preds = %613
  %629 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %630 = bitcast %union.anon* %629 to i32*
  %631 = sext i32 %617 to i64
  %632 = shl nsw i64 %631, 2
  br label %633

633:                                              ; preds = %628, %621
  %634 = phi i64 [ %623, %621 ], [ %632, %628 ]
  %635 = phi i32* [ %627, %621 ], [ %630, %628 ]
  %636 = bitcast i32* %635 to i8*
  %637 = bitcast i32* %618 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %636, i8* align 4 %637, i64 %634, i1 false) #19
  %638 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %639 = bitcast %union.TfLitePtrUnion* %638 to i16**
  %640 = load i16*, i16** %639, align 8
  br label %641

641:                                              ; preds = %611, %633
  %642 = phi i32 [ %617, %633 ], [ 0, %611 ]
  %643 = phi i16* [ %640, %633 ], [ null, %611 ]
  %644 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %644) #19
  %645 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %645, label %646, label %648

646:                                              ; preds = %641
  %647 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %647, align 8, !alias.scope !462
  br label %676

648:                                              ; preds = %641
  %649 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %650 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %649, align 8, !noalias !462
  %651 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %650, i64 0, i32 0
  %652 = load i32, i32* %651, align 4, !noalias !462
  %653 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %650, i64 0, i32 1, i64 0
  %654 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %652, i32* %654, align 8, !alias.scope !462
  %655 = icmp sgt i32 %652, 5
  br i1 %655, label %656, label %663

656:                                              ; preds = %648
  %657 = sext i32 %652 to i64
  %658 = shl nsw i64 %657, 2
  %659 = tail call i8* @_Znam(i64 %658) #18, !noalias !462
  %660 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %661 = bitcast i32** %660 to i8**
  store i8* %659, i8** %661, align 8, !alias.scope !462
  %662 = bitcast i8* %659 to i32*
  br label %668

663:                                              ; preds = %648
  %664 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %665 = bitcast %union.anon* %664 to i32*
  %666 = sext i32 %652 to i64
  %667 = shl nsw i64 %666, 2
  br label %668

668:                                              ; preds = %663, %656
  %669 = phi i64 [ %658, %656 ], [ %667, %663 ]
  %670 = phi i32* [ %662, %656 ], [ %665, %663 ]
  %671 = bitcast i32* %670 to i8*
  %672 = bitcast i32* %653 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %671, i8* align 4 %672, i64 %669, i1 false) #19
  %673 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %674 = bitcast %union.TfLitePtrUnion* %673 to i16**
  %675 = load i16*, i16** %674, align 8
  br label %676

676:                                              ; preds = %646, %668
  %677 = phi i32 [ %652, %668 ], [ 0, %646 ]
  %678 = phi i16* [ %675, %668 ], [ null, %646 ]
  %679 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %680 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %681 = icmp sgt i32 %642, 5
  br i1 %681, label %682, label %685

682:                                              ; preds = %676
  %683 = getelementptr inbounds %union.anon, %union.anon* %680, i64 0, i32 0
  %684 = load i32*, i32** %683, align 8
  br label %688

685:                                              ; preds = %676
  %686 = bitcast %union.anon* %680 to i32*
  %687 = icmp sgt i32 %642, 0
  br i1 %687, label %688, label %791

688:                                              ; preds = %685, %682
  %689 = phi i32* [ %684, %682 ], [ %686, %685 ]
  %690 = zext i32 %642 to i64
  %691 = icmp ult i32 %642, 8
  br i1 %691, label %777, label %692

692:                                              ; preds = %688
  %693 = and i64 %690, 4294967288
  %694 = add nsw i64 %693, -8
  %695 = lshr exact i64 %694, 3
  %696 = add nuw nsw i64 %695, 1
  %697 = and i64 %696, 3
  %698 = icmp ult i64 %694, 24
  br i1 %698, label %744, label %699

699:                                              ; preds = %692
  %700 = sub nsw i64 %696, %697
  br label %701

701:                                              ; preds = %701, %699
  %702 = phi i64 [ 0, %699 ], [ %741, %701 ]
  %703 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %699 ], [ %739, %701 ]
  %704 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %699 ], [ %740, %701 ]
  %705 = phi i64 [ %700, %699 ], [ %742, %701 ]
  %706 = getelementptr inbounds i32, i32* %689, i64 %702
  %707 = bitcast i32* %706 to <4 x i32>*
  %708 = load <4 x i32>, <4 x i32>* %707, align 4
  %709 = getelementptr inbounds i32, i32* %706, i64 4
  %710 = bitcast i32* %709 to <4 x i32>*
  %711 = load <4 x i32>, <4 x i32>* %710, align 4
  %712 = mul nsw <4 x i32> %708, %703
  %713 = mul nsw <4 x i32> %711, %704
  %714 = or i64 %702, 8
  %715 = getelementptr inbounds i32, i32* %689, i64 %714
  %716 = bitcast i32* %715 to <4 x i32>*
  %717 = load <4 x i32>, <4 x i32>* %716, align 4
  %718 = getelementptr inbounds i32, i32* %715, i64 4
  %719 = bitcast i32* %718 to <4 x i32>*
  %720 = load <4 x i32>, <4 x i32>* %719, align 4
  %721 = mul nsw <4 x i32> %717, %712
  %722 = mul nsw <4 x i32> %720, %713
  %723 = or i64 %702, 16
  %724 = getelementptr inbounds i32, i32* %689, i64 %723
  %725 = bitcast i32* %724 to <4 x i32>*
  %726 = load <4 x i32>, <4 x i32>* %725, align 4
  %727 = getelementptr inbounds i32, i32* %724, i64 4
  %728 = bitcast i32* %727 to <4 x i32>*
  %729 = load <4 x i32>, <4 x i32>* %728, align 4
  %730 = mul nsw <4 x i32> %726, %721
  %731 = mul nsw <4 x i32> %729, %722
  %732 = or i64 %702, 24
  %733 = getelementptr inbounds i32, i32* %689, i64 %732
  %734 = bitcast i32* %733 to <4 x i32>*
  %735 = load <4 x i32>, <4 x i32>* %734, align 4
  %736 = getelementptr inbounds i32, i32* %733, i64 4
  %737 = bitcast i32* %736 to <4 x i32>*
  %738 = load <4 x i32>, <4 x i32>* %737, align 4
  %739 = mul nsw <4 x i32> %735, %730
  %740 = mul nsw <4 x i32> %738, %731
  %741 = add i64 %702, 32
  %742 = add i64 %705, -4
  %743 = icmp eq i64 %742, 0
  br i1 %743, label %744, label %701, !llvm.loop !465

744:                                              ; preds = %701, %692
  %745 = phi <4 x i32> [ undef, %692 ], [ %739, %701 ]
  %746 = phi <4 x i32> [ undef, %692 ], [ %740, %701 ]
  %747 = phi i64 [ 0, %692 ], [ %741, %701 ]
  %748 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %692 ], [ %739, %701 ]
  %749 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %692 ], [ %740, %701 ]
  %750 = icmp eq i64 %697, 0
  br i1 %750, label %767, label %751

751:                                              ; preds = %744, %751
  %752 = phi i64 [ %764, %751 ], [ %747, %744 ]
  %753 = phi <4 x i32> [ %762, %751 ], [ %748, %744 ]
  %754 = phi <4 x i32> [ %763, %751 ], [ %749, %744 ]
  %755 = phi i64 [ %765, %751 ], [ %697, %744 ]
  %756 = getelementptr inbounds i32, i32* %689, i64 %752
  %757 = bitcast i32* %756 to <4 x i32>*
  %758 = load <4 x i32>, <4 x i32>* %757, align 4
  %759 = getelementptr inbounds i32, i32* %756, i64 4
  %760 = bitcast i32* %759 to <4 x i32>*
  %761 = load <4 x i32>, <4 x i32>* %760, align 4
  %762 = mul nsw <4 x i32> %758, %753
  %763 = mul nsw <4 x i32> %761, %754
  %764 = add i64 %752, 8
  %765 = add i64 %755, -1
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %767, label %751, !llvm.loop !466

767:                                              ; preds = %751, %744
  %768 = phi <4 x i32> [ %745, %744 ], [ %762, %751 ]
  %769 = phi <4 x i32> [ %746, %744 ], [ %763, %751 ]
  %770 = mul <4 x i32> %769, %768
  %771 = shufflevector <4 x i32> %770, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %772 = mul <4 x i32> %770, %771
  %773 = shufflevector <4 x i32> %772, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %774 = mul <4 x i32> %772, %773
  %775 = extractelement <4 x i32> %774, i32 0
  %776 = icmp eq i64 %693, %690
  br i1 %776, label %788, label %777

777:                                              ; preds = %767, %688
  %778 = phi i64 [ 0, %688 ], [ %693, %767 ]
  %779 = phi i32 [ 1, %688 ], [ %775, %767 ]
  br label %780

780:                                              ; preds = %777, %780
  %781 = phi i64 [ %786, %780 ], [ %778, %777 ]
  %782 = phi i32 [ %785, %780 ], [ %779, %777 ]
  %783 = getelementptr inbounds i32, i32* %689, i64 %781
  %784 = load i32, i32* %783, align 4
  %785 = mul nsw i32 %784, %782
  %786 = add nuw nsw i64 %781, 1
  %787 = icmp eq i64 %786, %690
  br i1 %787, label %788, label %780, !llvm.loop !467

788:                                              ; preds = %780, %767
  %789 = phi i32 [ %775, %767 ], [ %785, %780 ]
  %790 = icmp sgt i32 %789, 0
  br i1 %790, label %791, label %814

791:                                              ; preds = %788, %685
  %792 = phi i32 [ %789, %788 ], [ 1, %685 ]
  br label %793

793:                                              ; preds = %793, %791
  %794 = phi i16* [ %808, %793 ], [ %678, %791 ]
  %795 = phi i16* [ %807, %793 ], [ %643, %791 ]
  %796 = phi i32 [ %809, %793 ], [ 0, %791 ]
  %797 = load i16, i16* %795, align 2
  %798 = icmp slt i16 %797, 1
  %799 = icmp eq i16 %797, 0
  %800 = sub i16 0, %797
  %801 = select i1 %798, i16 %797, i16 %800
  %802 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %801) #19
  %803 = tail call i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %802) #19
  %804 = sub i16 32767, %803
  %805 = select i1 %798, i16 %804, i16 %803
  %806 = select i1 %799, i16 16384, i16 %805
  store i16 %806, i16* %794, align 2
  %807 = getelementptr inbounds i16, i16* %795, i64 1
  %808 = getelementptr inbounds i16, i16* %794, i64 1
  %809 = add nuw nsw i32 %796, 1
  %810 = icmp eq i32 %809, %792
  br i1 %810, label %811, label %793

811:                                              ; preds = %793
  %812 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %813 = load i32, i32* %812, align 8
  br label %814

814:                                              ; preds = %811, %788
  %815 = phi i32 [ %813, %811 ], [ %677, %788 ]
  %816 = icmp sgt i32 %815, 5
  br i1 %816, label %817, label %823

817:                                              ; preds = %814
  %818 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %819 = load i32*, i32** %818, align 8
  %820 = icmp eq i32* %819, null
  br i1 %820, label %823, label %821

821:                                              ; preds = %817
  %822 = bitcast i32* %819 to i8*
  tail call void @_ZdaPv(i8* %822) #18
  br label %823

823:                                              ; preds = %814, %817, %821
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %644) #19
  %824 = load i32, i32* %679, align 8
  %825 = icmp sgt i32 %824, 5
  br i1 %825, label %826, label %832

826:                                              ; preds = %823
  %827 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %828 = load i32*, i32** %827, align 8
  %829 = icmp eq i32* %828, null
  br i1 %829, label %832, label %830

830:                                              ; preds = %826
  %831 = bitcast i32* %828 to i8*
  tail call void @_ZdaPv(i8* %831) #18
  br label %832

832:                                              ; preds = %823, %826, %830
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %609) #19
  br label %1372

833:                                              ; preds = %41
  %834 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 3, i32 1
  %835 = load i32, i32* %834, align 4
  %836 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 2
  %837 = load i32, i32* %836, align 4
  %838 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 0
  %839 = load i32, i32* %838, align 4
  %840 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 1
  %841 = load i32, i32* %840, align 4
  %842 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %842) #19
  %843 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %843, label %844, label %846

844:                                              ; preds = %833
  %845 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %845, align 8, !alias.scope !468
  br label %874

846:                                              ; preds = %833
  %847 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %848 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %847, align 8, !noalias !468
  %849 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %848, i64 0, i32 0
  %850 = load i32, i32* %849, align 4, !noalias !468
  %851 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %848, i64 0, i32 1, i64 0
  %852 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %850, i32* %852, align 8, !alias.scope !468
  %853 = icmp sgt i32 %850, 5
  br i1 %853, label %854, label %861

854:                                              ; preds = %846
  %855 = sext i32 %850 to i64
  %856 = shl nsw i64 %855, 2
  %857 = tail call i8* @_Znam(i64 %856) #18, !noalias !468
  %858 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %859 = bitcast i32** %858 to i8**
  store i8* %857, i8** %859, align 8, !alias.scope !468
  %860 = bitcast i8* %857 to i32*
  br label %866

861:                                              ; preds = %846
  %862 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %863 = bitcast %union.anon* %862 to i32*
  %864 = sext i32 %850 to i64
  %865 = shl nsw i64 %864, 2
  br label %866

866:                                              ; preds = %861, %854
  %867 = phi i64 [ %856, %854 ], [ %865, %861 ]
  %868 = phi i32* [ %860, %854 ], [ %863, %861 ]
  %869 = bitcast i32* %868 to i8*
  %870 = bitcast i32* %851 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %869, i8* align 4 %870, i64 %867, i1 false) #19
  %871 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %872 = bitcast %union.TfLitePtrUnion* %871 to i8**
  %873 = load i8*, i8** %872, align 8
  br label %874

874:                                              ; preds = %844, %866
  %875 = phi i32 [ %850, %866 ], [ 0, %844 ]
  %876 = phi i8* [ %873, %866 ], [ null, %844 ]
  %877 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %877) #19
  %878 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %878, label %879, label %881

879:                                              ; preds = %874
  %880 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %880, align 8, !alias.scope !471
  br label %909

881:                                              ; preds = %874
  %882 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %883 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %882, align 8, !noalias !471
  %884 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %883, i64 0, i32 0
  %885 = load i32, i32* %884, align 4, !noalias !471
  %886 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %883, i64 0, i32 1, i64 0
  %887 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %885, i32* %887, align 8, !alias.scope !471
  %888 = icmp sgt i32 %885, 5
  br i1 %888, label %889, label %896

889:                                              ; preds = %881
  %890 = sext i32 %885 to i64
  %891 = shl nsw i64 %890, 2
  %892 = tail call i8* @_Znam(i64 %891) #18, !noalias !471
  %893 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %894 = bitcast i32** %893 to i8**
  store i8* %892, i8** %894, align 8, !alias.scope !471
  %895 = bitcast i8* %892 to i32*
  br label %901

896:                                              ; preds = %881
  %897 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %898 = bitcast %union.anon* %897 to i32*
  %899 = sext i32 %885 to i64
  %900 = shl nsw i64 %899, 2
  br label %901

901:                                              ; preds = %896, %889
  %902 = phi i64 [ %891, %889 ], [ %900, %896 ]
  %903 = phi i32* [ %895, %889 ], [ %898, %896 ]
  %904 = bitcast i32* %903 to i8*
  %905 = bitcast i32* %886 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %904, i8* align 4 %905, i64 %902, i1 false) #19
  %906 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %907 = bitcast %union.TfLitePtrUnion* %906 to i8**
  %908 = load i8*, i8** %907, align 8
  br label %909

909:                                              ; preds = %879, %901
  %910 = phi i32 [ %885, %901 ], [ 0, %879 ]
  %911 = phi i8* [ %908, %901 ], [ null, %879 ]
  %912 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %913 = icmp sgt i32 %875, 5
  br i1 %913, label %914, label %917

914:                                              ; preds = %909
  %915 = getelementptr inbounds %union.anon, %union.anon* %912, i64 0, i32 0
  %916 = load i32*, i32** %915, align 8
  br label %920

917:                                              ; preds = %909
  %918 = bitcast %union.anon* %912 to i32*
  %919 = icmp sgt i32 %875, 0
  br i1 %919, label %920, label %1023

920:                                              ; preds = %917, %914
  %921 = phi i32* [ %916, %914 ], [ %918, %917 ]
  %922 = zext i32 %875 to i64
  %923 = icmp ult i32 %875, 8
  br i1 %923, label %1009, label %924

924:                                              ; preds = %920
  %925 = and i64 %922, 4294967288
  %926 = add nsw i64 %925, -8
  %927 = lshr exact i64 %926, 3
  %928 = add nuw nsw i64 %927, 1
  %929 = and i64 %928, 3
  %930 = icmp ult i64 %926, 24
  br i1 %930, label %976, label %931

931:                                              ; preds = %924
  %932 = sub nsw i64 %928, %929
  br label %933

933:                                              ; preds = %933, %931
  %934 = phi i64 [ 0, %931 ], [ %973, %933 ]
  %935 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %931 ], [ %971, %933 ]
  %936 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %931 ], [ %972, %933 ]
  %937 = phi i64 [ %932, %931 ], [ %974, %933 ]
  %938 = getelementptr inbounds i32, i32* %921, i64 %934
  %939 = bitcast i32* %938 to <4 x i32>*
  %940 = load <4 x i32>, <4 x i32>* %939, align 4
  %941 = getelementptr inbounds i32, i32* %938, i64 4
  %942 = bitcast i32* %941 to <4 x i32>*
  %943 = load <4 x i32>, <4 x i32>* %942, align 4
  %944 = mul nsw <4 x i32> %940, %935
  %945 = mul nsw <4 x i32> %943, %936
  %946 = or i64 %934, 8
  %947 = getelementptr inbounds i32, i32* %921, i64 %946
  %948 = bitcast i32* %947 to <4 x i32>*
  %949 = load <4 x i32>, <4 x i32>* %948, align 4
  %950 = getelementptr inbounds i32, i32* %947, i64 4
  %951 = bitcast i32* %950 to <4 x i32>*
  %952 = load <4 x i32>, <4 x i32>* %951, align 4
  %953 = mul nsw <4 x i32> %949, %944
  %954 = mul nsw <4 x i32> %952, %945
  %955 = or i64 %934, 16
  %956 = getelementptr inbounds i32, i32* %921, i64 %955
  %957 = bitcast i32* %956 to <4 x i32>*
  %958 = load <4 x i32>, <4 x i32>* %957, align 4
  %959 = getelementptr inbounds i32, i32* %956, i64 4
  %960 = bitcast i32* %959 to <4 x i32>*
  %961 = load <4 x i32>, <4 x i32>* %960, align 4
  %962 = mul nsw <4 x i32> %958, %953
  %963 = mul nsw <4 x i32> %961, %954
  %964 = or i64 %934, 24
  %965 = getelementptr inbounds i32, i32* %921, i64 %964
  %966 = bitcast i32* %965 to <4 x i32>*
  %967 = load <4 x i32>, <4 x i32>* %966, align 4
  %968 = getelementptr inbounds i32, i32* %965, i64 4
  %969 = bitcast i32* %968 to <4 x i32>*
  %970 = load <4 x i32>, <4 x i32>* %969, align 4
  %971 = mul nsw <4 x i32> %967, %962
  %972 = mul nsw <4 x i32> %970, %963
  %973 = add i64 %934, 32
  %974 = add i64 %937, -4
  %975 = icmp eq i64 %974, 0
  br i1 %975, label %976, label %933, !llvm.loop !474

976:                                              ; preds = %933, %924
  %977 = phi <4 x i32> [ undef, %924 ], [ %971, %933 ]
  %978 = phi <4 x i32> [ undef, %924 ], [ %972, %933 ]
  %979 = phi i64 [ 0, %924 ], [ %973, %933 ]
  %980 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %924 ], [ %971, %933 ]
  %981 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %924 ], [ %972, %933 ]
  %982 = icmp eq i64 %929, 0
  br i1 %982, label %999, label %983

983:                                              ; preds = %976, %983
  %984 = phi i64 [ %996, %983 ], [ %979, %976 ]
  %985 = phi <4 x i32> [ %994, %983 ], [ %980, %976 ]
  %986 = phi <4 x i32> [ %995, %983 ], [ %981, %976 ]
  %987 = phi i64 [ %997, %983 ], [ %929, %976 ]
  %988 = getelementptr inbounds i32, i32* %921, i64 %984
  %989 = bitcast i32* %988 to <4 x i32>*
  %990 = load <4 x i32>, <4 x i32>* %989, align 4
  %991 = getelementptr inbounds i32, i32* %988, i64 4
  %992 = bitcast i32* %991 to <4 x i32>*
  %993 = load <4 x i32>, <4 x i32>* %992, align 4
  %994 = mul nsw <4 x i32> %990, %985
  %995 = mul nsw <4 x i32> %993, %986
  %996 = add i64 %984, 8
  %997 = add i64 %987, -1
  %998 = icmp eq i64 %997, 0
  br i1 %998, label %999, label %983, !llvm.loop !475

999:                                              ; preds = %983, %976
  %1000 = phi <4 x i32> [ %977, %976 ], [ %994, %983 ]
  %1001 = phi <4 x i32> [ %978, %976 ], [ %995, %983 ]
  %1002 = mul <4 x i32> %1001, %1000
  %1003 = shufflevector <4 x i32> %1002, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1004 = mul <4 x i32> %1002, %1003
  %1005 = shufflevector <4 x i32> %1004, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1006 = mul <4 x i32> %1004, %1005
  %1007 = extractelement <4 x i32> %1006, i32 0
  %1008 = icmp eq i64 %925, %922
  br i1 %1008, label %1020, label %1009

1009:                                             ; preds = %999, %920
  %1010 = phi i64 [ 0, %920 ], [ %925, %999 ]
  %1011 = phi i32 [ 1, %920 ], [ %1007, %999 ]
  br label %1012

1012:                                             ; preds = %1009, %1012
  %1013 = phi i64 [ %1018, %1012 ], [ %1010, %1009 ]
  %1014 = phi i32 [ %1017, %1012 ], [ %1011, %1009 ]
  %1015 = getelementptr inbounds i32, i32* %921, i64 %1013
  %1016 = load i32, i32* %1015, align 4
  %1017 = mul nsw i32 %1016, %1014
  %1018 = add nuw nsw i64 %1013, 1
  %1019 = icmp eq i64 %1018, %922
  br i1 %1019, label %1020, label %1012, !llvm.loop !476

1020:                                             ; preds = %1012, %999
  %1021 = phi i32 [ %1007, %999 ], [ %1017, %1012 ]
  %1022 = icmp sgt i32 %1021, 0
  br i1 %1022, label %1023, label %1084

1023:                                             ; preds = %1020, %917
  %1024 = phi i32 [ %1021, %1020 ], [ 1, %917 ]
  %1025 = sub nsw i32 0, %837
  %1026 = shl i32 %841, 16
  %1027 = ashr exact i32 %1026, 16
  %1028 = trunc i32 %839 to i16
  %1029 = shl i32 %839, 16
  %1030 = ashr exact i32 %1029, 16
  %1031 = zext i32 %1024 to i64
  br label %1032

1032:                                             ; preds = %1079, %1023
  %1033 = phi i64 [ 0, %1023 ], [ %1082, %1079 ]
  %1034 = getelementptr inbounds i8, i8* %876, i64 %1033
  %1035 = load i8, i8* %1034, align 1
  %1036 = zext i8 %1035 to i32
  %1037 = sub nsw i32 %1036, %835
  %1038 = shl i32 %1037, 16
  %1039 = ashr exact i32 %1038, 16
  %1040 = icmp slt i32 %1039, %1025
  br i1 %1040, label %1079, label %1041

1041:                                             ; preds = %1032
  %1042 = icmp sgt i32 %1039, %837
  br i1 %1042, label %1079, label %1043

1043:                                             ; preds = %1041
  %1044 = shl i32 %1039, %1027
  %1045 = trunc i32 %1044 to i16
  %1046 = icmp eq i16 %1045, %1028
  %1047 = icmp eq i16 %1045, -32768
  %1048 = and i1 %1047, %1046
  br i1 %1048, label %1058, label %1049

1049:                                             ; preds = %1043
  %1050 = shl i32 %1044, 16
  %1051 = ashr exact i32 %1050, 16
  %1052 = mul nsw i32 %1051, %1030
  %1053 = icmp sgt i32 %1052, -1
  %1054 = select i1 %1053, i32 16384, i32 -16383
  %1055 = add nsw i32 %1054, %1052
  %1056 = sdiv i32 %1055, 32768
  %1057 = trunc i32 %1056 to i16
  br label %1058

1058:                                             ; preds = %1049, %1043
  %1059 = phi i16 [ %1057, %1049 ], [ 32767, %1043 ]
  %1060 = icmp slt i16 %1059, 1
  %1061 = icmp eq i16 %1059, 0
  %1062 = sub i16 0, %1059
  %1063 = select i1 %1060, i16 %1059, i16 %1062
  %1064 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %1063) #19
  %1065 = tail call i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %1064) #19
  %1066 = sub i16 32767, %1065
  %1067 = select i1 %1060, i16 %1066, i16 %1065
  %1068 = select i1 %1061, i16 16384, i16 %1067
  %1069 = and i16 %1068, 127
  %1070 = lshr i16 %1068, 15
  %1071 = add nuw nsw i16 %1070, 63
  %1072 = ashr i16 %1068, 7
  %1073 = icmp ugt i16 %1069, %1071
  %1074 = zext i1 %1073 to i16
  %1075 = add nsw i16 %1072, %1074
  %1076 = icmp eq i16 %1075, 256
  %1077 = select i1 %1076, i16 255, i16 %1075
  %1078 = trunc i16 %1077 to i8
  br label %1079

1079:                                             ; preds = %1058, %1041, %1032
  %1080 = phi i8 [ %1078, %1058 ], [ 0, %1032 ], [ -1, %1041 ]
  %1081 = getelementptr inbounds i8, i8* %911, i64 %1033
  store i8 %1080, i8* %1081, align 1
  %1082 = add nuw nsw i64 %1033, 1
  %1083 = icmp eq i64 %1082, %1031
  br i1 %1083, label %1084, label %1032

1084:                                             ; preds = %1079, %1020
  %1085 = icmp sgt i32 %910, 5
  br i1 %1085, label %1086, label %1092

1086:                                             ; preds = %1084
  %1087 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %1088 = load i32*, i32** %1087, align 8
  %1089 = icmp eq i32* %1088, null
  br i1 %1089, label %1092, label %1090

1090:                                             ; preds = %1086
  %1091 = bitcast i32* %1088 to i8*
  tail call void @_ZdaPv(i8* %1091) #18
  br label %1092

1092:                                             ; preds = %1084, %1086, %1090
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %877) #19
  br i1 %913, label %1093, label %1099

1093:                                             ; preds = %1092
  %1094 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1095 = load i32*, i32** %1094, align 8
  %1096 = icmp eq i32* %1095, null
  br i1 %1096, label %1099, label %1097

1097:                                             ; preds = %1093
  %1098 = bitcast i32* %1095 to i8*
  tail call void @_ZdaPv(i8* %1098) #18
  br label %1099

1099:                                             ; preds = %1092, %1093, %1097
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %842) #19
  br label %1372

1100:                                             ; preds = %41
  %1101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 3, i32 1
  %1102 = load i32, i32* %1101, align 4
  %1103 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 2
  %1104 = load i32, i32* %1103, align 4
  %1105 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 0
  %1106 = load i32, i32* %1105, align 4
  %1107 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %18, i64 0, i32 1
  %1108 = load i32, i32* %1107, align 4
  %1109 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1109) #19
  %1110 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %1110, label %1111, label %1113

1111:                                             ; preds = %1100
  %1112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %1112, align 8, !alias.scope !477
  br label %1141

1113:                                             ; preds = %1100
  %1114 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %1115 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1114, align 8, !noalias !477
  %1116 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1115, i64 0, i32 0
  %1117 = load i32, i32* %1116, align 4, !noalias !477
  %1118 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1115, i64 0, i32 1, i64 0
  %1119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %1117, i32* %1119, align 8, !alias.scope !477
  %1120 = icmp sgt i32 %1117, 5
  br i1 %1120, label %1121, label %1128

1121:                                             ; preds = %1113
  %1122 = sext i32 %1117 to i64
  %1123 = shl nsw i64 %1122, 2
  %1124 = tail call i8* @_Znam(i64 %1123) #18, !noalias !477
  %1125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %1126 = bitcast i32** %1125 to i8**
  store i8* %1124, i8** %1126, align 8, !alias.scope !477
  %1127 = bitcast i8* %1124 to i32*
  br label %1133

1128:                                             ; preds = %1113
  %1129 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %1130 = bitcast %union.anon* %1129 to i32*
  %1131 = sext i32 %1117 to i64
  %1132 = shl nsw i64 %1131, 2
  br label %1133

1133:                                             ; preds = %1128, %1121
  %1134 = phi i64 [ %1123, %1121 ], [ %1132, %1128 ]
  %1135 = phi i32* [ %1127, %1121 ], [ %1130, %1128 ]
  %1136 = bitcast i32* %1135 to i8*
  %1137 = bitcast i32* %1118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1136, i8* align 4 %1137, i64 %1134, i1 false) #19
  %1138 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1
  %1139 = bitcast %union.TfLitePtrUnion* %1138 to i8**
  %1140 = load i8*, i8** %1139, align 8
  br label %1141

1141:                                             ; preds = %1111, %1133
  %1142 = phi i32 [ %1117, %1133 ], [ 0, %1111 ]
  %1143 = phi i8* [ %1140, %1133 ], [ null, %1111 ]
  %1144 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1144) #19
  %1145 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %1145, label %1146, label %1148

1146:                                             ; preds = %1141
  %1147 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %1147, align 8, !alias.scope !480
  br label %1176

1148:                                             ; preds = %1141
  %1149 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %1150 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1149, align 8, !noalias !480
  %1151 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1150, i64 0, i32 0
  %1152 = load i32, i32* %1151, align 4, !noalias !480
  %1153 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1150, i64 0, i32 1, i64 0
  %1154 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %1152, i32* %1154, align 8, !alias.scope !480
  %1155 = icmp sgt i32 %1152, 5
  br i1 %1155, label %1156, label %1163

1156:                                             ; preds = %1148
  %1157 = sext i32 %1152 to i64
  %1158 = shl nsw i64 %1157, 2
  %1159 = tail call i8* @_Znam(i64 %1158) #18, !noalias !480
  %1160 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %1161 = bitcast i32** %1160 to i8**
  store i8* %1159, i8** %1161, align 8, !alias.scope !480
  %1162 = bitcast i8* %1159 to i32*
  br label %1168

1163:                                             ; preds = %1148
  %1164 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %1165 = bitcast %union.anon* %1164 to i32*
  %1166 = sext i32 %1152 to i64
  %1167 = shl nsw i64 %1166, 2
  br label %1168

1168:                                             ; preds = %1163, %1156
  %1169 = phi i64 [ %1158, %1156 ], [ %1167, %1163 ]
  %1170 = phi i32* [ %1162, %1156 ], [ %1165, %1163 ]
  %1171 = bitcast i32* %1170 to i8*
  %1172 = bitcast i32* %1153 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1171, i8* align 4 %1172, i64 %1169, i1 false) #19
  %1173 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %1174 = bitcast %union.TfLitePtrUnion* %1173 to i8**
  %1175 = load i8*, i8** %1174, align 8
  br label %1176

1176:                                             ; preds = %1146, %1168
  %1177 = phi i32 [ %1152, %1168 ], [ 0, %1146 ]
  %1178 = phi i8* [ %1175, %1168 ], [ null, %1146 ]
  %1179 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %1180 = icmp sgt i32 %1142, 5
  br i1 %1180, label %1181, label %1184

1181:                                             ; preds = %1176
  %1182 = getelementptr inbounds %union.anon, %union.anon* %1179, i64 0, i32 0
  %1183 = load i32*, i32** %1182, align 8
  br label %1187

1184:                                             ; preds = %1176
  %1185 = bitcast %union.anon* %1179 to i32*
  %1186 = icmp sgt i32 %1142, 0
  br i1 %1186, label %1187, label %1290

1187:                                             ; preds = %1184, %1181
  %1188 = phi i32* [ %1183, %1181 ], [ %1185, %1184 ]
  %1189 = zext i32 %1142 to i64
  %1190 = icmp ult i32 %1142, 8
  br i1 %1190, label %1276, label %1191

1191:                                             ; preds = %1187
  %1192 = and i64 %1189, 4294967288
  %1193 = add nsw i64 %1192, -8
  %1194 = lshr exact i64 %1193, 3
  %1195 = add nuw nsw i64 %1194, 1
  %1196 = and i64 %1195, 3
  %1197 = icmp ult i64 %1193, 24
  br i1 %1197, label %1243, label %1198

1198:                                             ; preds = %1191
  %1199 = sub nsw i64 %1195, %1196
  br label %1200

1200:                                             ; preds = %1200, %1198
  %1201 = phi i64 [ 0, %1198 ], [ %1240, %1200 ]
  %1202 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1198 ], [ %1238, %1200 ]
  %1203 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1198 ], [ %1239, %1200 ]
  %1204 = phi i64 [ %1199, %1198 ], [ %1241, %1200 ]
  %1205 = getelementptr inbounds i32, i32* %1188, i64 %1201
  %1206 = bitcast i32* %1205 to <4 x i32>*
  %1207 = load <4 x i32>, <4 x i32>* %1206, align 4
  %1208 = getelementptr inbounds i32, i32* %1205, i64 4
  %1209 = bitcast i32* %1208 to <4 x i32>*
  %1210 = load <4 x i32>, <4 x i32>* %1209, align 4
  %1211 = mul nsw <4 x i32> %1207, %1202
  %1212 = mul nsw <4 x i32> %1210, %1203
  %1213 = or i64 %1201, 8
  %1214 = getelementptr inbounds i32, i32* %1188, i64 %1213
  %1215 = bitcast i32* %1214 to <4 x i32>*
  %1216 = load <4 x i32>, <4 x i32>* %1215, align 4
  %1217 = getelementptr inbounds i32, i32* %1214, i64 4
  %1218 = bitcast i32* %1217 to <4 x i32>*
  %1219 = load <4 x i32>, <4 x i32>* %1218, align 4
  %1220 = mul nsw <4 x i32> %1216, %1211
  %1221 = mul nsw <4 x i32> %1219, %1212
  %1222 = or i64 %1201, 16
  %1223 = getelementptr inbounds i32, i32* %1188, i64 %1222
  %1224 = bitcast i32* %1223 to <4 x i32>*
  %1225 = load <4 x i32>, <4 x i32>* %1224, align 4
  %1226 = getelementptr inbounds i32, i32* %1223, i64 4
  %1227 = bitcast i32* %1226 to <4 x i32>*
  %1228 = load <4 x i32>, <4 x i32>* %1227, align 4
  %1229 = mul nsw <4 x i32> %1225, %1220
  %1230 = mul nsw <4 x i32> %1228, %1221
  %1231 = or i64 %1201, 24
  %1232 = getelementptr inbounds i32, i32* %1188, i64 %1231
  %1233 = bitcast i32* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 4
  %1235 = getelementptr inbounds i32, i32* %1232, i64 4
  %1236 = bitcast i32* %1235 to <4 x i32>*
  %1237 = load <4 x i32>, <4 x i32>* %1236, align 4
  %1238 = mul nsw <4 x i32> %1234, %1229
  %1239 = mul nsw <4 x i32> %1237, %1230
  %1240 = add i64 %1201, 32
  %1241 = add i64 %1204, -4
  %1242 = icmp eq i64 %1241, 0
  br i1 %1242, label %1243, label %1200, !llvm.loop !483

1243:                                             ; preds = %1200, %1191
  %1244 = phi <4 x i32> [ undef, %1191 ], [ %1238, %1200 ]
  %1245 = phi <4 x i32> [ undef, %1191 ], [ %1239, %1200 ]
  %1246 = phi i64 [ 0, %1191 ], [ %1240, %1200 ]
  %1247 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1191 ], [ %1238, %1200 ]
  %1248 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1191 ], [ %1239, %1200 ]
  %1249 = icmp eq i64 %1196, 0
  br i1 %1249, label %1266, label %1250

1250:                                             ; preds = %1243, %1250
  %1251 = phi i64 [ %1263, %1250 ], [ %1246, %1243 ]
  %1252 = phi <4 x i32> [ %1261, %1250 ], [ %1247, %1243 ]
  %1253 = phi <4 x i32> [ %1262, %1250 ], [ %1248, %1243 ]
  %1254 = phi i64 [ %1264, %1250 ], [ %1196, %1243 ]
  %1255 = getelementptr inbounds i32, i32* %1188, i64 %1251
  %1256 = bitcast i32* %1255 to <4 x i32>*
  %1257 = load <4 x i32>, <4 x i32>* %1256, align 4
  %1258 = getelementptr inbounds i32, i32* %1255, i64 4
  %1259 = bitcast i32* %1258 to <4 x i32>*
  %1260 = load <4 x i32>, <4 x i32>* %1259, align 4
  %1261 = mul nsw <4 x i32> %1257, %1252
  %1262 = mul nsw <4 x i32> %1260, %1253
  %1263 = add i64 %1251, 8
  %1264 = add i64 %1254, -1
  %1265 = icmp eq i64 %1264, 0
  br i1 %1265, label %1266, label %1250, !llvm.loop !484

1266:                                             ; preds = %1250, %1243
  %1267 = phi <4 x i32> [ %1244, %1243 ], [ %1261, %1250 ]
  %1268 = phi <4 x i32> [ %1245, %1243 ], [ %1262, %1250 ]
  %1269 = mul <4 x i32> %1268, %1267
  %1270 = shufflevector <4 x i32> %1269, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1271 = mul <4 x i32> %1269, %1270
  %1272 = shufflevector <4 x i32> %1271, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1273 = mul <4 x i32> %1271, %1272
  %1274 = extractelement <4 x i32> %1273, i32 0
  %1275 = icmp eq i64 %1192, %1189
  br i1 %1275, label %1287, label %1276

1276:                                             ; preds = %1266, %1187
  %1277 = phi i64 [ 0, %1187 ], [ %1192, %1266 ]
  %1278 = phi i32 [ 1, %1187 ], [ %1274, %1266 ]
  br label %1279

1279:                                             ; preds = %1276, %1279
  %1280 = phi i64 [ %1285, %1279 ], [ %1277, %1276 ]
  %1281 = phi i32 [ %1284, %1279 ], [ %1278, %1276 ]
  %1282 = getelementptr inbounds i32, i32* %1188, i64 %1280
  %1283 = load i32, i32* %1282, align 4
  %1284 = mul nsw i32 %1283, %1281
  %1285 = add nuw nsw i64 %1280, 1
  %1286 = icmp eq i64 %1285, %1189
  br i1 %1286, label %1287, label %1279, !llvm.loop !485

1287:                                             ; preds = %1279, %1266
  %1288 = phi i32 [ %1274, %1266 ], [ %1284, %1279 ]
  %1289 = icmp sgt i32 %1288, 0
  br i1 %1289, label %1290, label %1352

1290:                                             ; preds = %1287, %1184
  %1291 = phi i32 [ %1288, %1287 ], [ 1, %1184 ]
  %1292 = sub nsw i32 0, %1104
  %1293 = shl i32 %1108, 16
  %1294 = ashr exact i32 %1293, 16
  %1295 = trunc i32 %1106 to i16
  %1296 = shl i32 %1106, 16
  %1297 = ashr exact i32 %1296, 16
  %1298 = zext i32 %1291 to i64
  br label %1299

1299:                                             ; preds = %1347, %1290
  %1300 = phi i64 [ 0, %1290 ], [ %1350, %1347 ]
  %1301 = getelementptr inbounds i8, i8* %1143, i64 %1300
  %1302 = load i8, i8* %1301, align 1
  %1303 = sext i8 %1302 to i32
  %1304 = sub nsw i32 %1303, %1102
  %1305 = shl i32 %1304, 16
  %1306 = ashr exact i32 %1305, 16
  %1307 = icmp slt i32 %1306, %1292
  br i1 %1307, label %1347, label %1308

1308:                                             ; preds = %1299
  %1309 = icmp sgt i32 %1306, %1104
  br i1 %1309, label %1347, label %1310

1310:                                             ; preds = %1308
  %1311 = shl i32 %1306, %1294
  %1312 = trunc i32 %1311 to i16
  %1313 = icmp eq i16 %1312, %1295
  %1314 = icmp eq i16 %1312, -32768
  %1315 = and i1 %1314, %1313
  br i1 %1315, label %1325, label %1316

1316:                                             ; preds = %1310
  %1317 = shl i32 %1311, 16
  %1318 = ashr exact i32 %1317, 16
  %1319 = mul nsw i32 %1318, %1297
  %1320 = icmp sgt i32 %1319, -1
  %1321 = select i1 %1320, i32 16384, i32 -16383
  %1322 = add nsw i32 %1321, %1319
  %1323 = sdiv i32 %1322, 32768
  %1324 = trunc i32 %1323 to i16
  br label %1325

1325:                                             ; preds = %1316, %1310
  %1326 = phi i16 [ %1324, %1316 ], [ 32767, %1310 ]
  %1327 = icmp slt i16 %1326, 1
  %1328 = icmp eq i16 %1326, 0
  %1329 = sub i16 0, %1326
  %1330 = select i1 %1327, i16 %1326, i16 %1329
  %1331 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %1330) #19
  %1332 = tail call i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %1331) #19
  %1333 = sub i16 32767, %1332
  %1334 = select i1 %1327, i16 %1333, i16 %1332
  %1335 = select i1 %1328, i16 16384, i16 %1334
  %1336 = and i16 %1335, 127
  %1337 = lshr i16 %1335, 15
  %1338 = add nuw nsw i16 %1337, 63
  %1339 = ashr i16 %1335, 7
  %1340 = icmp ugt i16 %1336, %1338
  %1341 = zext i1 %1340 to i16
  %1342 = add nsw i16 %1339, -128
  %1343 = add nsw i16 %1342, %1341
  %1344 = icmp eq i16 %1343, 128
  %1345 = select i1 %1344, i16 127, i16 %1343
  %1346 = trunc i16 %1345 to i8
  br label %1347

1347:                                             ; preds = %1325, %1308, %1299
  %1348 = phi i8 [ %1346, %1325 ], [ -128, %1299 ], [ 127, %1308 ]
  %1349 = getelementptr inbounds i8, i8* %1178, i64 %1300
  store i8 %1348, i8* %1349, align 1
  %1350 = add nuw nsw i64 %1300, 1
  %1351 = icmp eq i64 %1350, %1298
  br i1 %1351, label %1352, label %1299

1352:                                             ; preds = %1347, %1287
  %1353 = icmp sgt i32 %1177, 5
  br i1 %1353, label %1354, label %1360

1354:                                             ; preds = %1352
  %1355 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %1356 = load i32*, i32** %1355, align 8
  %1357 = icmp eq i32* %1356, null
  br i1 %1357, label %1360, label %1358

1358:                                             ; preds = %1354
  %1359 = bitcast i32* %1356 to i8*
  tail call void @_ZdaPv(i8* %1359) #18
  br label %1360

1360:                                             ; preds = %1352, %1354, %1358
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1144) #19
  br i1 %1180, label %1361, label %1367

1361:                                             ; preds = %1360
  %1362 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %1363 = load i32*, i32** %1362, align 8
  %1364 = icmp eq i32* %1363, null
  br i1 %1364, label %1367, label %1365

1365:                                             ; preds = %1361
  %1366 = bitcast i32* %1363 to i8*
  tail call void @_ZdaPv(i8* %1366) #18
  br label %1367

1367:                                             ; preds = %1360, %1361, %1365
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1109) #19
  br label %1372

1368:                                             ; preds = %41
  %1369 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1370 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1369, align 8
  %1371 = tail call i8* @TfLiteTypeGetName(i32 %44) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %1370(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.49, i64 0, i64 0), i8* %1371) #19
  br label %1372

1372:                                             ; preds = %571, %832, %566, %362, %1099, %1367, %1368
  %1373 = phi i32 [ 1, %1368 ], [ 0, %1367 ], [ 0, %1099 ], [ 0, %362 ], [ 0, %566 ], [ 0, %832 ], [ 0, %571 ]
  ret i32 %1373
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin17Register_LOGISTICEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin29Register_LOGISTIC_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin16Register_SOFTMAXEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin16Register_SOFTMAXEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin24Register_LOG_SOFTMAX_REFEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin24Register_LOG_SOFTMAX_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"struct.tflite::SoftmaxParams", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"struct.tflite::SoftmaxParams", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %12 = bitcast i8** %11 to %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"**
  %13 = load %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"*, %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %15 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %14, align 8
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %15, i64 0, i32 1, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %21 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %20, align 8
  %22 = sext i32 %17 to i64
  %23 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 %22
  br label %24

24:                                               ; preds = %2, %19
  %25 = phi %struct.TfLiteTensor* [ %23, %19 ], [ null, %2 ]
  %26 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %24, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %24 ]
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %386 [
    i32 1, label %40
    i32 3, label %130
    i32 9, label %222
  ]

40:                                               ; preds = %36
  %41 = bitcast %"struct.tflite::SoftmaxParams"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %41) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %41, i8* align 8 bitcast ({ double, i32, i32, i32, i32, i32, i32, float, [4 x i8], float*, i16*, i16*, i8*, i8* }* @__const._ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode.op_params to i8*), i64 80, i1 false)
  %42 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #19
  %43 = icmp eq %struct.TfLiteTensor* %25, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %45, align 8, !alias.scope !486
  br label %74

46:                                               ; preds = %40
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8, !noalias !486
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !noalias !486
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %50, i32* %52, align 8, !alias.scope !486
  %53 = icmp sgt i32 %50, 5
  br i1 %53, label %54, label %61

54:                                               ; preds = %46
  %55 = sext i32 %50 to i64
  %56 = shl nsw i64 %55, 2
  %57 = tail call i8* @_Znam(i64 %56) #18, !noalias !486
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %59 = bitcast i32** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !486
  %60 = bitcast i8* %57 to i32*
  br label %66

61:                                               ; preds = %46
  %62 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %63 = bitcast %union.anon* %62 to i32*
  %64 = sext i32 %50 to i64
  %65 = shl nsw i64 %64, 2
  br label %66

66:                                               ; preds = %61, %54
  %67 = phi i64 [ %56, %54 ], [ %65, %61 ]
  %68 = phi i32* [ %60, %54 ], [ %63, %61 ]
  %69 = bitcast i32* %68 to i8*
  %70 = bitcast i32* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %67, i1 false) #19
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to float**
  %73 = load float*, float** %72, align 8
  br label %74

74:                                               ; preds = %44, %66
  %75 = phi float* [ %73, %66 ], [ null, %44 ]
  %76 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %76) #19
  %77 = icmp eq %struct.TfLiteTensor* %37, null
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %79, align 8, !alias.scope !489
  br label %108

80:                                               ; preds = %74
  %81 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %82 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %81, align 8, !noalias !489
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %82, i64 0, i32 0
  %84 = load i32, i32* %83, align 4, !noalias !489
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %82, i64 0, i32 1, i64 0
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %84, i32* %86, align 8, !alias.scope !489
  %87 = icmp sgt i32 %84, 5
  br i1 %87, label %88, label %95

88:                                               ; preds = %80
  %89 = sext i32 %84 to i64
  %90 = shl nsw i64 %89, 2
  %91 = tail call i8* @_Znam(i64 %90) #18, !noalias !489
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %93 = bitcast i32** %92 to i8**
  store i8* %91, i8** %93, align 8, !alias.scope !489
  %94 = bitcast i8* %91 to i32*
  br label %100

95:                                               ; preds = %80
  %96 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %97 = bitcast %union.anon* %96 to i32*
  %98 = sext i32 %84 to i64
  %99 = shl nsw i64 %98, 2
  br label %100

100:                                              ; preds = %95, %88
  %101 = phi i64 [ %90, %88 ], [ %99, %95 ]
  %102 = phi i32* [ %94, %88 ], [ %97, %95 ]
  %103 = bitcast i32* %102 to i8*
  %104 = bitcast i32* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* align 4 %104, i64 %101, i1 false) #19
  %105 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %106 = bitcast %union.TfLitePtrUnion* %105 to float**
  %107 = load float*, float** %106, align 8
  br label %108

108:                                              ; preds = %78, %100
  %109 = phi float* [ %107, %100 ], [ null, %78 ]
  call void @_ZN6tflite13reference_ops10LogSoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::SoftmaxParams"* nonnull dereferenceable(80) %3, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, float* %75, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, float* %109)
  %110 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %111 = load i32, i32* %110, align 8
  %112 = icmp sgt i32 %111, 5
  br i1 %112, label %113, label %119

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %115 = load i32*, i32** %114, align 8
  %116 = icmp eq i32* %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = bitcast i32* %115 to i8*
  call void @_ZdaPv(i8* %118) #18
  br label %119

119:                                              ; preds = %108, %113, %117
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %76) #19
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %121 = load i32, i32* %120, align 8
  %122 = icmp sgt i32 %121, 5
  br i1 %122, label %123, label %129

123:                                              ; preds = %119
  %124 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %125 = load i32*, i32** %124, align 8
  %126 = icmp eq i32* %125, null
  br i1 %126, label %129, label %127

127:                                              ; preds = %123
  %128 = bitcast i32* %125 to i8*
  call void @_ZdaPv(i8* %128) #18
  br label %129

129:                                              ; preds = %119, %123, %127
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #19
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %41) #19
  br label %390

130:                                              ; preds = %36
  %131 = bitcast %"struct.tflite::SoftmaxParams"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %131) #19
  %132 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %13, i64 0, i32 3
  %133 = bitcast %"struct.tflite::SoftmaxParams"* %132 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %131, i8* align 8 %133, i64 80, i1 false)
  %134 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %134) #19
  %135 = icmp eq %struct.TfLiteTensor* %25, null
  br i1 %135, label %136, label %138

136:                                              ; preds = %130
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %137, align 8, !alias.scope !492
  br label %166

138:                                              ; preds = %130
  %139 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %140 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %139, align 8, !noalias !492
  %141 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %140, i64 0, i32 0
  %142 = load i32, i32* %141, align 4, !noalias !492
  %143 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %140, i64 0, i32 1, i64 0
  %144 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %142, i32* %144, align 8, !alias.scope !492
  %145 = icmp sgt i32 %142, 5
  br i1 %145, label %146, label %153

146:                                              ; preds = %138
  %147 = sext i32 %142 to i64
  %148 = shl nsw i64 %147, 2
  %149 = tail call i8* @_Znam(i64 %148) #18, !noalias !492
  %150 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %151 = bitcast i32** %150 to i8**
  store i8* %149, i8** %151, align 8, !alias.scope !492
  %152 = bitcast i8* %149 to i32*
  br label %158

153:                                              ; preds = %138
  %154 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %155 = bitcast %union.anon* %154 to i32*
  %156 = sext i32 %142 to i64
  %157 = shl nsw i64 %156, 2
  br label %158

158:                                              ; preds = %153, %146
  %159 = phi i64 [ %148, %146 ], [ %157, %153 ]
  %160 = phi i32* [ %152, %146 ], [ %155, %153 ]
  %161 = bitcast i32* %160 to i8*
  %162 = bitcast i32* %143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %161, i8* align 4 %162, i64 %159, i1 false) #19
  %163 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %164 = bitcast %union.TfLitePtrUnion* %163 to i8**
  %165 = load i8*, i8** %164, align 8
  br label %166

166:                                              ; preds = %136, %158
  %167 = phi i8* [ %165, %158 ], [ null, %136 ]
  %168 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %168) #19
  %169 = icmp eq %struct.TfLiteTensor* %37, null
  br i1 %169, label %170, label %172

170:                                              ; preds = %166
  %171 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %171, align 8, !alias.scope !495
  br label %200

172:                                              ; preds = %166
  %173 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %174 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %173, align 8, !noalias !495
  %175 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %174, i64 0, i32 0
  %176 = load i32, i32* %175, align 4, !noalias !495
  %177 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %174, i64 0, i32 1, i64 0
  %178 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %176, i32* %178, align 8, !alias.scope !495
  %179 = icmp sgt i32 %176, 5
  br i1 %179, label %180, label %187

180:                                              ; preds = %172
  %181 = sext i32 %176 to i64
  %182 = shl nsw i64 %181, 2
  %183 = tail call i8* @_Znam(i64 %182) #18, !noalias !495
  %184 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %185 = bitcast i32** %184 to i8**
  store i8* %183, i8** %185, align 8, !alias.scope !495
  %186 = bitcast i8* %183 to i32*
  br label %192

187:                                              ; preds = %172
  %188 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %189 = bitcast %union.anon* %188 to i32*
  %190 = sext i32 %176 to i64
  %191 = shl nsw i64 %190, 2
  br label %192

192:                                              ; preds = %187, %180
  %193 = phi i64 [ %182, %180 ], [ %191, %187 ]
  %194 = phi i32* [ %186, %180 ], [ %189, %187 ]
  %195 = bitcast i32* %194 to i8*
  %196 = bitcast i32* %177 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %195, i8* align 4 %196, i64 %193, i1 false) #19
  %197 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %198 = bitcast %union.TfLitePtrUnion* %197 to i8**
  %199 = load i8*, i8** %198, align 8
  br label %200

200:                                              ; preds = %170, %192
  %201 = phi i8* [ %199, %192 ], [ null, %170 ]
  call void @_ZN6tflite13reference_ops10LogSoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::SoftmaxParams"* nonnull dereferenceable(80) %6, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %7, i8* %167, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, i8* %201)
  %202 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %203 = load i32, i32* %202, align 8
  %204 = icmp sgt i32 %203, 5
  br i1 %204, label %205, label %211

205:                                              ; preds = %200
  %206 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %207 = load i32*, i32** %206, align 8
  %208 = icmp eq i32* %207, null
  br i1 %208, label %211, label %209

209:                                              ; preds = %205
  %210 = bitcast i32* %207 to i8*
  call void @_ZdaPv(i8* %210) #18
  br label %211

211:                                              ; preds = %200, %205, %209
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %168) #19
  %212 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  %213 = load i32, i32* %212, align 8
  %214 = icmp sgt i32 %213, 5
  br i1 %214, label %215, label %221

215:                                              ; preds = %211
  %216 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %217 = load i32*, i32** %216, align 8
  %218 = icmp eq i32* %217, null
  br i1 %218, label %221, label %219

219:                                              ; preds = %215
  %220 = bitcast i32* %217 to i8*
  call void @_ZdaPv(i8* %220) #18
  br label %221

221:                                              ; preds = %211, %215, %219
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %134) #19
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %131) #19
  br label %390

222:                                              ; preds = %36
  %223 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %223) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %223, i8 -86, i64 32, i1 false)
  %224 = icmp eq %struct.TfLiteTensor* %25, null
  br i1 %224, label %225, label %227

225:                                              ; preds = %222
  %226 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %226, align 8, !alias.scope !498
  br label %252

227:                                              ; preds = %222
  %228 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %229 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %228, align 8, !noalias !498
  %230 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %229, i64 0, i32 0
  %231 = load i32, i32* %230, align 4, !noalias !498
  %232 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %229, i64 0, i32 1, i64 0
  %233 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %231, i32* %233, align 8, !alias.scope !498
  %234 = icmp sgt i32 %231, 5
  br i1 %234, label %235, label %242

235:                                              ; preds = %227
  %236 = sext i32 %231 to i64
  %237 = shl nsw i64 %236, 2
  %238 = tail call i8* @_Znam(i64 %237) #18, !noalias !498
  %239 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %240 = bitcast i32** %239 to i8**
  store i8* %238, i8** %240, align 8, !alias.scope !498
  %241 = bitcast i8* %238 to i32*
  br label %247

242:                                              ; preds = %227
  %243 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %244 = bitcast %union.anon* %243 to i32*
  %245 = sext i32 %231 to i64
  %246 = shl nsw i64 %245, 2
  br label %247

247:                                              ; preds = %242, %235
  %248 = phi i64 [ %237, %235 ], [ %246, %242 ]
  %249 = phi i32* [ %241, %235 ], [ %244, %242 ]
  %250 = bitcast i32* %249 to i8*
  %251 = bitcast i32* %232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %250, i8* align 4 %251, i64 %248, i1 false) #19
  br label %252

252:                                              ; preds = %225, %247
  %253 = phi i32 [ 0, %225 ], [ %231, %247 ]
  %254 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %254) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %254, i8 -86, i64 32, i1 false)
  %255 = icmp eq %struct.TfLiteTensor* %37, null
  br i1 %255, label %256, label %258

256:                                              ; preds = %252
  %257 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %257, align 8, !alias.scope !501
  br label %283

258:                                              ; preds = %252
  %259 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %260 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %259, align 8, !noalias !501
  %261 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %260, i64 0, i32 0
  %262 = load i32, i32* %261, align 4, !noalias !501
  %263 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %260, i64 0, i32 1, i64 0
  %264 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %262, i32* %264, align 8, !alias.scope !501
  %265 = icmp sgt i32 %262, 5
  br i1 %265, label %266, label %273

266:                                              ; preds = %258
  %267 = sext i32 %262 to i64
  %268 = shl nsw i64 %267, 2
  %269 = tail call i8* @_Znam(i64 %268) #18, !noalias !501
  %270 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %271 = bitcast i32** %270 to i8**
  store i8* %269, i8** %271, align 8, !alias.scope !501
  %272 = bitcast i8* %269 to i32*
  br label %278

273:                                              ; preds = %258
  %274 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %275 = bitcast %union.anon* %274 to i32*
  %276 = sext i32 %262 to i64
  %277 = shl nsw i64 %276, 2
  br label %278

278:                                              ; preds = %273, %266
  %279 = phi i64 [ %268, %266 ], [ %277, %273 ]
  %280 = phi i32* [ %272, %266 ], [ %275, %273 ]
  %281 = bitcast i32* %280 to i8*
  %282 = bitcast i32* %263 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %281, i8* align 4 %282, i64 %279, i1 false) #19
  br label %283

283:                                              ; preds = %256, %278
  %284 = phi i32 [ 0, %256 ], [ %262, %278 ]
  %285 = add nsw i32 %253, -1
  %286 = icmp sgt i32 %253, 5
  %287 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %288 = getelementptr inbounds %union.anon, %union.anon* %287, i64 0, i32 0
  %289 = load i32*, i32** %288, align 8
  %290 = bitcast %union.anon* %287 to i32*
  %291 = select i1 %286, i32* %289, i32* %290
  %292 = icmp sgt i32 %253, 0
  br i1 %292, label %293, label %333

293:                                              ; preds = %283
  %294 = zext i32 %285 to i64
  %295 = zext i32 %253 to i64
  %296 = add nsw i64 %295, -1
  %297 = and i64 %295, 3
  %298 = icmp ult i64 %296, 3
  br i1 %298, label %314, label %299

299:                                              ; preds = %293
  %300 = sub nsw i64 %295, %297
  br label %301

301:                                              ; preds = %411, %299
  %302 = phi i64 [ 0, %299 ], [ %414, %411 ]
  %303 = phi i32 [ 1, %299 ], [ %413, %411 ]
  %304 = phi i64 [ %300, %299 ], [ %415, %411 ]
  %305 = icmp eq i64 %302, %294
  br i1 %305, label %309, label %306

306:                                              ; preds = %301
  %307 = getelementptr inbounds i32, i32* %291, i64 %302
  %308 = load i32, i32* %307, align 4
  br label %309

309:                                              ; preds = %306, %301
  %310 = phi i32 [ %308, %306 ], [ 1, %301 ]
  %311 = mul nsw i32 %310, %303
  %312 = or i64 %302, 1
  %313 = icmp eq i64 %312, %294
  br i1 %313, label %395, label %392

314:                                              ; preds = %411, %293
  %315 = phi i32 [ undef, %293 ], [ %413, %411 ]
  %316 = phi i64 [ 0, %293 ], [ %414, %411 ]
  %317 = phi i32 [ 1, %293 ], [ %413, %411 ]
  %318 = icmp eq i64 %297, 0
  br i1 %318, label %333, label %319

319:                                              ; preds = %314, %327
  %320 = phi i64 [ %330, %327 ], [ %316, %314 ]
  %321 = phi i32 [ %329, %327 ], [ %317, %314 ]
  %322 = phi i64 [ %331, %327 ], [ %297, %314 ]
  %323 = icmp eq i64 %320, %294
  br i1 %323, label %327, label %324

324:                                              ; preds = %319
  %325 = getelementptr inbounds i32, i32* %291, i64 %320
  %326 = load i32, i32* %325, align 4
  br label %327

327:                                              ; preds = %324, %319
  %328 = phi i32 [ %326, %324 ], [ 1, %319 ]
  %329 = mul nsw i32 %328, %321
  %330 = add nuw nsw i64 %320, 1
  %331 = add i64 %322, -1
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %319, !llvm.loop !504

333:                                              ; preds = %314, %327, %283
  %334 = phi i32 [ 1, %283 ], [ %315, %314 ], [ %329, %327 ]
  %335 = icmp sgt i32 %284, 5
  %336 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %337 = sext i32 %285 to i64
  %338 = getelementptr inbounds i32, i32* %289, i64 %337
  %339 = bitcast %union.anon* %287 to [5 x i32]*
  %340 = getelementptr inbounds [5 x i32], [5 x i32]* %339, i64 0, i64 %337
  %341 = select i1 %286, i32* %338, i32* %340
  %342 = load i32, i32* %341, align 4
  %343 = getelementptr inbounds %union.anon, %union.anon* %336, i64 0, i32 0
  %344 = load i32*, i32** %343, align 8
  %345 = getelementptr inbounds i32, i32* %344, i64 %337
  %346 = bitcast %union.anon* %336 to [5 x i32]*
  %347 = getelementptr inbounds [5 x i32], [5 x i32]* %346, i64 0, i64 %337
  %348 = select i1 %335, i32* %345, i32* %347
  %349 = load i32, i32* %348, align 4
  %350 = icmp slt i32 %349, %342
  %351 = select i1 %350, i32 %349, i32 %342
  %352 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %13, i64 0, i32 0, i32 0
  %353 = load i32, i32* %352, align 8
  %354 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %13, i64 0, i32 0, i32 1
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %13, i64 0, i32 1
  %357 = load i32, i32* %356, align 8
  %358 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %13, i64 0, i32 2
  %359 = load i32, i32* %358, align 4
  %360 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %13, i64 0, i32 0, i32 3
  %361 = load i32, i32* %360, align 4
  br i1 %224, label %366, label %362

362:                                              ; preds = %333
  %363 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %364 = bitcast %union.TfLitePtrUnion* %363 to i8**
  %365 = load i8*, i8** %364, align 8
  br label %366

366:                                              ; preds = %333, %362
  %367 = phi i8* [ %365, %362 ], [ null, %333 ]
  br i1 %255, label %372, label %368

368:                                              ; preds = %366
  %369 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %370 = bitcast %union.TfLitePtrUnion* %369 to i8**
  %371 = load i8*, i8** %370, align 8
  br label %372

372:                                              ; preds = %366, %368
  %373 = phi i8* [ %371, %368 ], [ null, %366 ]
  tail call void @_ZN6tflite21reference_integer_ops10LogSoftmaxEiiiiiiiPKaPa(i32 %353, i32 %355, i32 %357, i32 %359, i32 %361, i32 %334, i32 %351, i8* %367, i8* %373)
  %374 = xor i1 %335, true
  %375 = icmp eq i32* %344, null
  %376 = or i1 %375, %374
  br i1 %376, label %379, label %377

377:                                              ; preds = %372
  %378 = bitcast i32* %344 to i8*
  tail call void @_ZdaPv(i8* %378) #18
  br label %379

379:                                              ; preds = %372, %377
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %254) #19
  %380 = xor i1 %286, true
  %381 = icmp eq i32* %289, null
  %382 = or i1 %381, %380
  br i1 %382, label %385, label %383

383:                                              ; preds = %379
  %384 = bitcast i32* %289 to i8*
  tail call void @_ZdaPv(i8* %384) #18
  br label %385

385:                                              ; preds = %379, %383
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %223) #19
  br label %390

386:                                              ; preds = %36
  %387 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %388 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %387, align 8
  %389 = tail call i8* @TfLiteTypeGetName(i32 %39) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %388(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.25, i64 0, i64 0), i8* %389) #19
  br label %390

390:                                              ; preds = %386, %385, %221, %129
  %391 = phi i32 [ 1, %386 ], [ 0, %385 ], [ 0, %221 ], [ 0, %129 ]
  ret i32 %391

392:                                              ; preds = %309
  %393 = getelementptr inbounds i32, i32* %291, i64 %312
  %394 = load i32, i32* %393, align 4
  br label %395

395:                                              ; preds = %392, %309
  %396 = phi i32 [ %394, %392 ], [ 1, %309 ]
  %397 = mul nsw i32 %396, %311
  %398 = or i64 %302, 2
  %399 = icmp eq i64 %398, %294
  br i1 %399, label %403, label %400

400:                                              ; preds = %395
  %401 = getelementptr inbounds i32, i32* %291, i64 %398
  %402 = load i32, i32* %401, align 4
  br label %403

403:                                              ; preds = %400, %395
  %404 = phi i32 [ %402, %400 ], [ 1, %395 ]
  %405 = mul nsw i32 %404, %397
  %406 = or i64 %302, 3
  %407 = icmp eq i64 %406, %294
  br i1 %407, label %411, label %408

408:                                              ; preds = %403
  %409 = getelementptr inbounds i32, i32* %291, i64 %406
  %410 = load i32, i32* %409, align 4
  br label %411

411:                                              ; preds = %408, %403
  %412 = phi i32 [ %410, %408 ], [ 1, %403 ]
  %413 = mul nsw i32 %412, %405
  %414 = add nuw nsw i64 %302, 4
  %415 = add i64 %304, -4
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %314, label %301
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin20Register_LOG_SOFTMAXEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin20Register_LOG_SOFTMAXEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations14LogSoftmaxEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %10 = bitcast i8** %9 to %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"**
  %11 = load %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"*, %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %19 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %18, align 8
  %20 = sext i32 %15 to i64
  %21 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 %20
  br label %22

22:                                               ; preds = %2, %17
  %23 = phi %struct.TfLiteTensor* [ %21, %17 ], [ null, %2 ]
  %24 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %25 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %24, align 8
  %26 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %25, i64 0, i32 1, i64 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %31 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %30, align 8
  %32 = sext i32 %27 to i64
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 %32
  br label %34

34:                                               ; preds = %22, %29
  %35 = phi %struct.TfLiteTensor* [ %33, %29 ], [ null, %22 ]
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  switch i32 %37, label %882 [
    i32 1, label %38
    i32 3, label %358
    i32 9, label %718
  ]

38:                                               ; preds = %34
  %39 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %39) #19
  %40 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %42, align 8, !alias.scope !505
  br label %71

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 2
  %45 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %44, align 8, !noalias !505
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 4, !noalias !505
  %48 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 1, i64 0
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %47, i32* %49, align 8, !alias.scope !505
  %50 = icmp sgt i32 %47, 5
  br i1 %50, label %51, label %58

51:                                               ; preds = %43
  %52 = sext i32 %47 to i64
  %53 = shl nsw i64 %52, 2
  %54 = tail call i8* @_Znam(i64 %53) #18, !noalias !505
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %56 = bitcast i32** %55 to i8**
  store i8* %54, i8** %56, align 8, !alias.scope !505
  %57 = bitcast i8* %54 to i32*
  br label %63

58:                                               ; preds = %43
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %60 = bitcast %union.anon* %59 to i32*
  %61 = sext i32 %47 to i64
  %62 = shl nsw i64 %61, 2
  br label %63

63:                                               ; preds = %58, %51
  %64 = phi i64 [ %53, %51 ], [ %62, %58 ]
  %65 = phi i32* [ %57, %51 ], [ %60, %58 ]
  %66 = bitcast i32* %65 to i8*
  %67 = bitcast i32* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %64, i1 false) #19
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %69 = bitcast %union.TfLitePtrUnion* %68 to float**
  %70 = load float*, float** %69, align 8
  br label %71

71:                                               ; preds = %41, %63
  %72 = phi i32 [ %47, %63 ], [ 0, %41 ]
  %73 = phi float* [ %70, %63 ], [ null, %41 ]
  %74 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #19
  %75 = icmp eq %struct.TfLiteTensor* %35, null
  br i1 %75, label %76, label %78

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %77, align 8, !alias.scope !508
  br label %106

78:                                               ; preds = %71
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %80 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %79, align 8, !noalias !508
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4, !noalias !508
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 0
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %82, i32* %84, align 8, !alias.scope !508
  %85 = icmp sgt i32 %82, 5
  br i1 %85, label %86, label %93

86:                                               ; preds = %78
  %87 = sext i32 %82 to i64
  %88 = shl nsw i64 %87, 2
  %89 = tail call i8* @_Znam(i64 %88) #18, !noalias !508
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %91 = bitcast i32** %90 to i8**
  store i8* %89, i8** %91, align 8, !alias.scope !508
  %92 = bitcast i8* %89 to i32*
  br label %98

93:                                               ; preds = %78
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %95 = bitcast %union.anon* %94 to i32*
  %96 = sext i32 %82 to i64
  %97 = shl nsw i64 %96, 2
  br label %98

98:                                               ; preds = %93, %86
  %99 = phi i64 [ %88, %86 ], [ %97, %93 ]
  %100 = phi i32* [ %92, %86 ], [ %95, %93 ]
  %101 = bitcast i32* %100 to i8*
  %102 = bitcast i32* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %99, i1 false) #19
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %104 = bitcast %union.TfLitePtrUnion* %103 to float**
  %105 = load float*, float** %104, align 8
  br label %106

106:                                              ; preds = %76, %98
  %107 = phi i32 [ %82, %98 ], [ 0, %76 ]
  %108 = phi float* [ %105, %98 ], [ null, %76 ]
  %109 = add nsw i32 %72, -1
  %110 = icmp sgt i32 %72, 5
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %112 = getelementptr inbounds %union.anon, %union.anon* %111, i64 0, i32 0
  %113 = load i32*, i32** %112, align 8
  %114 = bitcast %union.anon* %111 to i32*
  %115 = select i1 %110, i32* %113, i32* %114
  %116 = icmp sgt i32 %72, 0
  br i1 %116, label %117, label %157

117:                                              ; preds = %106
  %118 = zext i32 %109 to i64
  %119 = zext i32 %72 to i64
  %120 = add nsw i64 %119, -1
  %121 = and i64 %119, 3
  %122 = icmp ult i64 %120, 3
  br i1 %122, label %138, label %123

123:                                              ; preds = %117
  %124 = sub nsw i64 %119, %121
  br label %125

125:                                              ; preds = %907, %123
  %126 = phi i64 [ 0, %123 ], [ %910, %907 ]
  %127 = phi i32 [ 1, %123 ], [ %909, %907 ]
  %128 = phi i64 [ %124, %123 ], [ %911, %907 ]
  %129 = icmp eq i64 %126, %118
  br i1 %129, label %133, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds i32, i32* %115, i64 %126
  %132 = load i32, i32* %131, align 4
  br label %133

133:                                              ; preds = %130, %125
  %134 = phi i32 [ %132, %130 ], [ 1, %125 ]
  %135 = mul nsw i32 %134, %127
  %136 = or i64 %126, 1
  %137 = icmp eq i64 %136, %118
  br i1 %137, label %891, label %888

138:                                              ; preds = %907, %117
  %139 = phi i32 [ undef, %117 ], [ %909, %907 ]
  %140 = phi i64 [ 0, %117 ], [ %910, %907 ]
  %141 = phi i32 [ 1, %117 ], [ %909, %907 ]
  %142 = icmp eq i64 %121, 0
  br i1 %142, label %157, label %143

143:                                              ; preds = %138, %151
  %144 = phi i64 [ %154, %151 ], [ %140, %138 ]
  %145 = phi i32 [ %153, %151 ], [ %141, %138 ]
  %146 = phi i64 [ %155, %151 ], [ %121, %138 ]
  %147 = icmp eq i64 %144, %118
  br i1 %147, label %151, label %148

148:                                              ; preds = %143
  %149 = getelementptr inbounds i32, i32* %115, i64 %144
  %150 = load i32, i32* %149, align 4
  br label %151

151:                                              ; preds = %148, %143
  %152 = phi i32 [ %150, %148 ], [ 1, %143 ]
  %153 = mul nsw i32 %152, %145
  %154 = add nuw nsw i64 %144, 1
  %155 = add i64 %146, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %143, !llvm.loop !511

157:                                              ; preds = %138, %151, %106
  %158 = phi i32 [ 1, %106 ], [ %139, %138 ], [ %153, %151 ]
  %159 = icmp sgt i32 %107, 5
  %160 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %161 = sext i32 %109 to i64
  %162 = getelementptr inbounds i32, i32* %113, i64 %161
  %163 = bitcast %union.anon* %111 to [5 x i32]*
  %164 = getelementptr inbounds [5 x i32], [5 x i32]* %163, i64 0, i64 %161
  %165 = select i1 %110, i32* %162, i32* %164
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds %union.anon, %union.anon* %160, i64 0, i32 0
  %168 = load i32*, i32** %167, align 8
  %169 = getelementptr inbounds i32, i32* %168, i64 %161
  %170 = bitcast %union.anon* %160 to [5 x i32]*
  %171 = getelementptr inbounds [5 x i32], [5 x i32]* %170, i64 0, i64 %161
  %172 = select i1 %159, i32* %169, i32* %171
  %173 = load i32, i32* %172, align 4
  %174 = icmp slt i32 %173, %166
  %175 = select i1 %174, i32 %173, i32 %166
  %176 = icmp sgt i32 %158, 0
  br i1 %176, label %177, label %345

177:                                              ; preds = %157
  %178 = icmp sgt i32 %175, 0
  %179 = sext i32 %175 to i64
  %180 = zext i32 %158 to i64
  %181 = add nsw i64 %179, -1
  %182 = add nsw i64 %179, -8
  %183 = lshr i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %179, 3
  %186 = icmp ult i64 %181, 3
  %187 = sub nsw i64 %179, %185
  %188 = icmp eq i64 %185, 0
  %189 = icmp ult i32 %175, 8
  %190 = and i64 %179, -8
  %191 = and i64 %184, 1
  %192 = icmp eq i64 %183, 0
  %193 = sub nuw nsw i64 %184, %191
  %194 = icmp eq i64 %191, 0
  %195 = icmp eq i64 %190, %179
  br label %196

196:                                              ; preds = %333, %177
  %197 = phi i64 [ 0, %177 ], [ %334, %333 ]
  %198 = mul i64 %197, %179
  %199 = getelementptr float, float* %108, i64 %198
  %200 = add i64 %198, %179
  %201 = getelementptr float, float* %108, i64 %200
  %202 = getelementptr float, float* %73, i64 %198
  %203 = getelementptr float, float* %73, i64 %200
  %204 = mul nsw i64 %197, %179
  %205 = getelementptr inbounds float, float* %73, i64 %204
  %206 = getelementptr inbounds float, float* %108, i64 %204
  br i1 %178, label %207, label %251

207:                                              ; preds = %196
  br i1 %186, label %234, label %208

208:                                              ; preds = %207, %208
  %209 = phi i64 [ %231, %208 ], [ 0, %207 ]
  %210 = phi float [ %230, %208 ], [ 0xC7EFFFFFE0000000, %207 ]
  %211 = phi i64 [ %232, %208 ], [ %187, %207 ]
  %212 = getelementptr inbounds float, float* %205, i64 %209
  %213 = load float, float* %212, align 4
  %214 = fcmp olt float %210, %213
  %215 = select i1 %214, float %213, float %210
  %216 = or i64 %209, 1
  %217 = getelementptr inbounds float, float* %205, i64 %216
  %218 = load float, float* %217, align 4
  %219 = fcmp olt float %215, %218
  %220 = select i1 %219, float %218, float %215
  %221 = or i64 %209, 2
  %222 = getelementptr inbounds float, float* %205, i64 %221
  %223 = load float, float* %222, align 4
  %224 = fcmp olt float %220, %223
  %225 = select i1 %224, float %223, float %220
  %226 = or i64 %209, 3
  %227 = getelementptr inbounds float, float* %205, i64 %226
  %228 = load float, float* %227, align 4
  %229 = fcmp olt float %225, %228
  %230 = select i1 %229, float %228, float %225
  %231 = add nuw nsw i64 %209, 4
  %232 = add i64 %211, -4
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %208

234:                                              ; preds = %208, %207
  %235 = phi float [ undef, %207 ], [ %230, %208 ]
  %236 = phi i64 [ 0, %207 ], [ %231, %208 ]
  %237 = phi float [ 0xC7EFFFFFE0000000, %207 ], [ %230, %208 ]
  br i1 %188, label %249, label %238

238:                                              ; preds = %234, %238
  %239 = phi i64 [ %246, %238 ], [ %236, %234 ]
  %240 = phi float [ %245, %238 ], [ %237, %234 ]
  %241 = phi i64 [ %247, %238 ], [ %185, %234 ]
  %242 = getelementptr inbounds float, float* %205, i64 %239
  %243 = load float, float* %242, align 4
  %244 = fcmp olt float %240, %243
  %245 = select i1 %244, float %243, float %240
  %246 = add nuw nsw i64 %239, 1
  %247 = add i64 %241, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %238, !llvm.loop !512

249:                                              ; preds = %238, %234
  %250 = phi float [ %235, %234 ], [ %245, %238 ]
  br label %323

251:                                              ; preds = %196
  %252 = tail call float @logf(float 0.000000e+00) #19
  br label %333

253:                                              ; preds = %323
  %254 = tail call float @logf(float %330) #19
  br i1 %189, label %255, label %257

255:                                              ; preds = %322, %257, %253
  %256 = phi i64 [ 0, %257 ], [ 0, %253 ], [ %190, %322 ]
  br label %336

257:                                              ; preds = %253
  %258 = icmp ult float* %199, %203
  %259 = icmp ult float* %202, %201
  %260 = and i1 %258, %259
  br i1 %260, label %255, label %261

261:                                              ; preds = %257
  %262 = insertelement <4 x float> undef, float %250, i32 0
  %263 = shufflevector <4 x float> %262, <4 x float> undef, <4 x i32> zeroinitializer
  %264 = insertelement <4 x float> undef, float %250, i32 0
  %265 = shufflevector <4 x float> %264, <4 x float> undef, <4 x i32> zeroinitializer
  %266 = insertelement <4 x float> undef, float %254, i32 0
  %267 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> zeroinitializer
  %268 = insertelement <4 x float> undef, float %254, i32 0
  %269 = shufflevector <4 x float> %268, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %192, label %305, label %270

270:                                              ; preds = %261, %270
  %271 = phi i64 [ %302, %270 ], [ 0, %261 ]
  %272 = phi i64 [ %303, %270 ], [ %193, %261 ]
  %273 = getelementptr inbounds float, float* %205, i64 %271
  %274 = bitcast float* %273 to <4 x float>*
  %275 = load <4 x float>, <4 x float>* %274, align 4, !alias.scope !513
  %276 = getelementptr inbounds float, float* %273, i64 4
  %277 = bitcast float* %276 to <4 x float>*
  %278 = load <4 x float>, <4 x float>* %277, align 4, !alias.scope !513
  %279 = fsub <4 x float> %275, %263
  %280 = fsub <4 x float> %278, %265
  %281 = fsub <4 x float> %279, %267
  %282 = fsub <4 x float> %280, %269
  %283 = getelementptr inbounds float, float* %206, i64 %271
  %284 = bitcast float* %283 to <4 x float>*
  store <4 x float> %281, <4 x float>* %284, align 4, !alias.scope !516, !noalias !513
  %285 = getelementptr inbounds float, float* %283, i64 4
  %286 = bitcast float* %285 to <4 x float>*
  store <4 x float> %282, <4 x float>* %286, align 4, !alias.scope !516, !noalias !513
  %287 = or i64 %271, 8
  %288 = getelementptr inbounds float, float* %205, i64 %287
  %289 = bitcast float* %288 to <4 x float>*
  %290 = load <4 x float>, <4 x float>* %289, align 4, !alias.scope !513
  %291 = getelementptr inbounds float, float* %288, i64 4
  %292 = bitcast float* %291 to <4 x float>*
  %293 = load <4 x float>, <4 x float>* %292, align 4, !alias.scope !513
  %294 = fsub <4 x float> %290, %263
  %295 = fsub <4 x float> %293, %265
  %296 = fsub <4 x float> %294, %267
  %297 = fsub <4 x float> %295, %269
  %298 = getelementptr inbounds float, float* %206, i64 %287
  %299 = bitcast float* %298 to <4 x float>*
  store <4 x float> %296, <4 x float>* %299, align 4, !alias.scope !516, !noalias !513
  %300 = getelementptr inbounds float, float* %298, i64 4
  %301 = bitcast float* %300 to <4 x float>*
  store <4 x float> %297, <4 x float>* %301, align 4, !alias.scope !516, !noalias !513
  %302 = add i64 %271, 16
  %303 = add i64 %272, -2
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %270, !llvm.loop !518

305:                                              ; preds = %270, %261
  %306 = phi i64 [ 0, %261 ], [ %302, %270 ]
  br i1 %194, label %322, label %307

307:                                              ; preds = %305
  %308 = getelementptr inbounds float, float* %205, i64 %306
  %309 = bitcast float* %308 to <4 x float>*
  %310 = load <4 x float>, <4 x float>* %309, align 4, !alias.scope !513
  %311 = getelementptr inbounds float, float* %308, i64 4
  %312 = bitcast float* %311 to <4 x float>*
  %313 = load <4 x float>, <4 x float>* %312, align 4, !alias.scope !513
  %314 = fsub <4 x float> %310, %263
  %315 = fsub <4 x float> %313, %265
  %316 = fsub <4 x float> %314, %267
  %317 = fsub <4 x float> %315, %269
  %318 = getelementptr inbounds float, float* %206, i64 %306
  %319 = bitcast float* %318 to <4 x float>*
  store <4 x float> %316, <4 x float>* %319, align 4, !alias.scope !516, !noalias !513
  %320 = getelementptr inbounds float, float* %318, i64 4
  %321 = bitcast float* %320 to <4 x float>*
  store <4 x float> %317, <4 x float>* %321, align 4, !alias.scope !516, !noalias !513
  br label %322

322:                                              ; preds = %305, %307
  br i1 %195, label %333, label %255

323:                                              ; preds = %249, %323
  %324 = phi i64 [ %331, %323 ], [ 0, %249 ]
  %325 = phi float [ %330, %323 ], [ 0.000000e+00, %249 ]
  %326 = getelementptr inbounds float, float* %205, i64 %324
  %327 = load float, float* %326, align 4
  %328 = fsub float %327, %250
  %329 = tail call float @expf(float %328) #19
  %330 = fadd float %325, %329
  %331 = add nuw nsw i64 %324, 1
  %332 = icmp slt i64 %331, %179
  br i1 %332, label %323, label %253

333:                                              ; preds = %336, %322, %251
  %334 = add nuw nsw i64 %197, 1
  %335 = icmp eq i64 %334, %180
  br i1 %335, label %345, label %196

336:                                              ; preds = %255, %336
  %337 = phi i64 [ %343, %336 ], [ %256, %255 ]
  %338 = getelementptr inbounds float, float* %205, i64 %337
  %339 = load float, float* %338, align 4
  %340 = fsub float %339, %250
  %341 = fsub float %340, %254
  %342 = getelementptr inbounds float, float* %206, i64 %337
  store float %341, float* %342, align 4
  %343 = add nuw nsw i64 %337, 1
  %344 = icmp slt i64 %343, %179
  br i1 %344, label %336, label %333, !llvm.loop !519

345:                                              ; preds = %333, %157
  %346 = xor i1 %159, true
  %347 = icmp eq i32* %168, null
  %348 = or i1 %347, %346
  br i1 %348, label %351, label %349

349:                                              ; preds = %345
  %350 = bitcast i32* %168 to i8*
  tail call void @_ZdaPv(i8* %350) #18
  br label %351

351:                                              ; preds = %345, %349
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #19
  %352 = xor i1 %110, true
  %353 = icmp eq i32* %113, null
  %354 = or i1 %353, %352
  br i1 %354, label %357, label %355

355:                                              ; preds = %351
  %356 = bitcast i32* %113 to i8*
  tail call void @_ZdaPv(i8* %356) #18
  br label %357

357:                                              ; preds = %351, %355
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #19
  br label %886

358:                                              ; preds = %34
  %359 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 3, i32 6
  %360 = load i32, i32* %359, align 4
  %361 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 3, i32 7
  %362 = load float, float* %361, align 8
  %363 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 3, i32 8
  %364 = load float*, float** %363, align 8
  %365 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 3, i32 0
  %366 = load float, float* %365, align 8
  %367 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %367) #19
  %368 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %368, label %369, label %371

369:                                              ; preds = %358
  %370 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %370, align 8, !alias.scope !520
  br label %399

371:                                              ; preds = %358
  %372 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 2
  %373 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %372, align 8, !noalias !520
  %374 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %373, i64 0, i32 0
  %375 = load i32, i32* %374, align 4, !noalias !520
  %376 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %373, i64 0, i32 1, i64 0
  %377 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %375, i32* %377, align 8, !alias.scope !520
  %378 = icmp sgt i32 %375, 5
  br i1 %378, label %379, label %386

379:                                              ; preds = %371
  %380 = sext i32 %375 to i64
  %381 = shl nsw i64 %380, 2
  %382 = tail call i8* @_Znam(i64 %381) #18, !noalias !520
  %383 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %384 = bitcast i32** %383 to i8**
  store i8* %382, i8** %384, align 8, !alias.scope !520
  %385 = bitcast i8* %382 to i32*
  br label %391

386:                                              ; preds = %371
  %387 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %388 = bitcast %union.anon* %387 to i32*
  %389 = sext i32 %375 to i64
  %390 = shl nsw i64 %389, 2
  br label %391

391:                                              ; preds = %386, %379
  %392 = phi i64 [ %381, %379 ], [ %390, %386 ]
  %393 = phi i32* [ %385, %379 ], [ %388, %386 ]
  %394 = bitcast i32* %393 to i8*
  %395 = bitcast i32* %376 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %394, i8* align 4 %395, i64 %392, i1 false) #19
  %396 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %397 = bitcast %union.TfLitePtrUnion* %396 to i8**
  %398 = load i8*, i8** %397, align 8
  br label %399

399:                                              ; preds = %369, %391
  %400 = phi i32 [ %375, %391 ], [ 0, %369 ]
  %401 = phi i8* [ %398, %391 ], [ null, %369 ]
  %402 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %402) #19
  %403 = icmp eq %struct.TfLiteTensor* %35, null
  br i1 %403, label %404, label %406

404:                                              ; preds = %399
  %405 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %405, align 8, !alias.scope !523
  br label %434

406:                                              ; preds = %399
  %407 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %408 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %407, align 8, !noalias !523
  %409 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %408, i64 0, i32 0
  %410 = load i32, i32* %409, align 4, !noalias !523
  %411 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %408, i64 0, i32 1, i64 0
  %412 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %410, i32* %412, align 8, !alias.scope !523
  %413 = icmp sgt i32 %410, 5
  br i1 %413, label %414, label %421

414:                                              ; preds = %406
  %415 = sext i32 %410 to i64
  %416 = shl nsw i64 %415, 2
  %417 = tail call i8* @_Znam(i64 %416) #18, !noalias !523
  %418 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %419 = bitcast i32** %418 to i8**
  store i8* %417, i8** %419, align 8, !alias.scope !523
  %420 = bitcast i8* %417 to i32*
  br label %426

421:                                              ; preds = %406
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %423 = bitcast %union.anon* %422 to i32*
  %424 = sext i32 %410 to i64
  %425 = shl nsw i64 %424, 2
  br label %426

426:                                              ; preds = %421, %414
  %427 = phi i64 [ %416, %414 ], [ %425, %421 ]
  %428 = phi i32* [ %420, %414 ], [ %423, %421 ]
  %429 = bitcast i32* %428 to i8*
  %430 = bitcast i32* %411 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %429, i8* align 4 %430, i64 %427, i1 false) #19
  %431 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %432 = bitcast %union.TfLitePtrUnion* %431 to i8**
  %433 = load i8*, i8** %432, align 8
  br label %434

434:                                              ; preds = %404, %426
  %435 = phi i32 [ %410, %426 ], [ 0, %404 ]
  %436 = phi i8* [ %433, %426 ], [ null, %404 ]
  %437 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %438 = add nsw i32 %400, -1
  %439 = icmp sgt i32 %400, 5
  %440 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %441 = getelementptr inbounds %union.anon, %union.anon* %440, i64 0, i32 0
  %442 = load i32*, i32** %441, align 8
  %443 = bitcast %union.anon* %440 to i32*
  %444 = select i1 %439, i32* %442, i32* %443
  %445 = icmp sgt i32 %400, 0
  br i1 %445, label %446, label %486

446:                                              ; preds = %434
  %447 = zext i32 %438 to i64
  %448 = zext i32 %400 to i64
  %449 = add nsw i64 %448, -1
  %450 = and i64 %448, 3
  %451 = icmp ult i64 %449, 3
  br i1 %451, label %467, label %452

452:                                              ; preds = %446
  %453 = sub nsw i64 %448, %450
  br label %454

454:                                              ; preds = %932, %452
  %455 = phi i64 [ 0, %452 ], [ %935, %932 ]
  %456 = phi i32 [ 1, %452 ], [ %934, %932 ]
  %457 = phi i64 [ %453, %452 ], [ %936, %932 ]
  %458 = icmp eq i64 %455, %447
  br i1 %458, label %462, label %459

459:                                              ; preds = %454
  %460 = getelementptr inbounds i32, i32* %444, i64 %455
  %461 = load i32, i32* %460, align 4
  br label %462

462:                                              ; preds = %459, %454
  %463 = phi i32 [ %461, %459 ], [ 1, %454 ]
  %464 = mul nsw i32 %463, %456
  %465 = or i64 %455, 1
  %466 = icmp eq i64 %465, %447
  br i1 %466, label %916, label %913

467:                                              ; preds = %932, %446
  %468 = phi i32 [ undef, %446 ], [ %934, %932 ]
  %469 = phi i64 [ 0, %446 ], [ %935, %932 ]
  %470 = phi i32 [ 1, %446 ], [ %934, %932 ]
  %471 = icmp eq i64 %450, 0
  br i1 %471, label %486, label %472

472:                                              ; preds = %467, %480
  %473 = phi i64 [ %483, %480 ], [ %469, %467 ]
  %474 = phi i32 [ %482, %480 ], [ %470, %467 ]
  %475 = phi i64 [ %484, %480 ], [ %450, %467 ]
  %476 = icmp eq i64 %473, %447
  br i1 %476, label %480, label %477

477:                                              ; preds = %472
  %478 = getelementptr inbounds i32, i32* %444, i64 %473
  %479 = load i32, i32* %478, align 4
  br label %480

480:                                              ; preds = %477, %472
  %481 = phi i32 [ %479, %477 ], [ 1, %472 ]
  %482 = mul nsw i32 %481, %474
  %483 = add nuw nsw i64 %473, 1
  %484 = add i64 %475, -1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %472, !llvm.loop !526

486:                                              ; preds = %467, %480, %434
  %487 = phi i32 [ 1, %434 ], [ %468, %467 ], [ %482, %480 ]
  %488 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %489 = icmp sgt i32 %435, 5
  %490 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %491 = sext i32 %438 to i64
  %492 = getelementptr inbounds i32, i32* %442, i64 %491
  %493 = bitcast %union.anon* %440 to [5 x i32]*
  %494 = getelementptr inbounds [5 x i32], [5 x i32]* %493, i64 0, i64 %491
  %495 = select i1 %439, i32* %492, i32* %494
  %496 = load i32, i32* %495, align 4
  %497 = getelementptr inbounds %union.anon, %union.anon* %490, i64 0, i32 0
  %498 = load i32*, i32** %497, align 8
  %499 = getelementptr inbounds i32, i32* %498, i64 %491
  %500 = bitcast %union.anon* %490 to [5 x i32]*
  %501 = getelementptr inbounds [5 x i32], [5 x i32]* %500, i64 0, i64 %491
  %502 = select i1 %489, i32* %499, i32* %501
  %503 = load i32, i32* %502, align 4
  %504 = icmp slt i32 %503, %496
  %505 = select i1 %504, i32 %503, i32 %496
  %506 = icmp sgt i32 %487, 0
  br i1 %506, label %507, label %699

507:                                              ; preds = %486
  %508 = icmp sgt i32 %505, 0
  %509 = sext i32 %505 to i64
  %510 = fdiv float %366, %362
  %511 = sitofp i32 %360 to float
  %512 = add nsw i64 %509, -32
  %513 = lshr i64 %512, 5
  %514 = add nuw nsw i64 %513, 1
  %515 = icmp ult i32 %505, 32
  %516 = and i64 %509, -32
  %517 = and i64 %514, 1
  %518 = icmp eq i64 %513, 0
  %519 = sub nuw nsw i64 %514, %517
  %520 = icmp eq i64 %517, 0
  %521 = icmp eq i64 %516, %509
  %522 = icmp ult i32 %505, 16
  %523 = and i64 %509, -16
  %524 = insertelement <16 x float> undef, float %510, i32 0
  %525 = shufflevector <16 x float> %524, <16 x float> undef, <16 x i32> zeroinitializer
  %526 = insertelement <16 x float> undef, float %511, i32 0
  %527 = shufflevector <16 x float> %526, <16 x float> undef, <16 x i32> zeroinitializer
  %528 = icmp eq i64 %523, %509
  br label %529

529:                                              ; preds = %673, %507
  %530 = phi i64 [ %678, %673 ], [ 0, %507 ]
  %531 = phi i8* [ %674, %673 ], [ %401, %507 ]
  %532 = phi i8* [ %675, %673 ], [ %436, %507 ]
  %533 = phi i32 [ %676, %673 ], [ 0, %507 ]
  %534 = mul i64 %530, %509
  %535 = getelementptr i8, i8* %436, i64 %534
  %536 = add i64 %534, %509
  %537 = getelementptr i8, i8* %436, i64 %536
  %538 = getelementptr i8, i8* %401, i64 %534
  %539 = getelementptr i8, i8* %401, i64 %536
  br i1 %508, label %540, label %623

540:                                              ; preds = %529
  br i1 %515, label %541, label %544

541:                                              ; preds = %591, %540
  %542 = phi i64 [ 0, %540 ], [ %516, %591 ]
  %543 = phi i8 [ 0, %540 ], [ %608, %591 ]
  br label %614

544:                                              ; preds = %540
  br i1 %518, label %574, label %545

545:                                              ; preds = %544, %545
  %546 = phi i64 [ %571, %545 ], [ 0, %544 ]
  %547 = phi <16 x i8> [ %569, %545 ], [ zeroinitializer, %544 ]
  %548 = phi <16 x i8> [ %570, %545 ], [ zeroinitializer, %544 ]
  %549 = phi i64 [ %572, %545 ], [ %519, %544 ]
  %550 = getelementptr inbounds i8, i8* %531, i64 %546
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1
  %553 = getelementptr inbounds i8, i8* %550, i64 16
  %554 = bitcast i8* %553 to <16 x i8>*
  %555 = load <16 x i8>, <16 x i8>* %554, align 1
  %556 = icmp ult <16 x i8> %547, %552
  %557 = icmp ult <16 x i8> %548, %555
  %558 = select <16 x i1> %556, <16 x i8> %552, <16 x i8> %547
  %559 = select <16 x i1> %557, <16 x i8> %555, <16 x i8> %548
  %560 = or i64 %546, 32
  %561 = getelementptr inbounds i8, i8* %531, i64 %560
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1
  %564 = getelementptr inbounds i8, i8* %561, i64 16
  %565 = bitcast i8* %564 to <16 x i8>*
  %566 = load <16 x i8>, <16 x i8>* %565, align 1
  %567 = icmp ult <16 x i8> %558, %563
  %568 = icmp ult <16 x i8> %559, %566
  %569 = select <16 x i1> %567, <16 x i8> %563, <16 x i8> %558
  %570 = select <16 x i1> %568, <16 x i8> %566, <16 x i8> %559
  %571 = add i64 %546, 64
  %572 = add i64 %549, -2
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %545, !llvm.loop !527

574:                                              ; preds = %545, %544
  %575 = phi <16 x i8> [ undef, %544 ], [ %569, %545 ]
  %576 = phi <16 x i8> [ undef, %544 ], [ %570, %545 ]
  %577 = phi i64 [ 0, %544 ], [ %571, %545 ]
  %578 = phi <16 x i8> [ zeroinitializer, %544 ], [ %569, %545 ]
  %579 = phi <16 x i8> [ zeroinitializer, %544 ], [ %570, %545 ]
  br i1 %520, label %591, label %580

580:                                              ; preds = %574
  %581 = getelementptr inbounds i8, i8* %531, i64 %577
  %582 = bitcast i8* %581 to <16 x i8>*
  %583 = load <16 x i8>, <16 x i8>* %582, align 1
  %584 = getelementptr inbounds i8, i8* %581, i64 16
  %585 = bitcast i8* %584 to <16 x i8>*
  %586 = load <16 x i8>, <16 x i8>* %585, align 1
  %587 = icmp ult <16 x i8> %579, %586
  %588 = select <16 x i1> %587, <16 x i8> %586, <16 x i8> %579
  %589 = icmp ult <16 x i8> %578, %583
  %590 = select <16 x i1> %589, <16 x i8> %583, <16 x i8> %578
  br label %591

591:                                              ; preds = %574, %580
  %592 = phi <16 x i8> [ %575, %574 ], [ %590, %580 ]
  %593 = phi <16 x i8> [ %576, %574 ], [ %588, %580 ]
  %594 = icmp ugt <16 x i8> %592, %593
  %595 = select <16 x i1> %594, <16 x i8> %592, <16 x i8> %593
  %596 = shufflevector <16 x i8> %595, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %597 = icmp ugt <16 x i8> %595, %596
  %598 = select <16 x i1> %597, <16 x i8> %595, <16 x i8> %596
  %599 = shufflevector <16 x i8> %598, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %600 = icmp ugt <16 x i8> %598, %599
  %601 = select <16 x i1> %600, <16 x i8> %598, <16 x i8> %599
  %602 = shufflevector <16 x i8> %601, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %603 = icmp ugt <16 x i8> %601, %602
  %604 = select <16 x i1> %603, <16 x i8> %601, <16 x i8> %602
  %605 = shufflevector <16 x i8> %604, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %606 = icmp ugt <16 x i8> %604, %605
  %607 = select <16 x i1> %606, <16 x i8> %604, <16 x i8> %605
  %608 = extractelement <16 x i8> %607, i32 0
  br i1 %521, label %609, label %541

609:                                              ; preds = %614, %591
  %610 = phi i8 [ %608, %591 ], [ %620, %614 ]
  %611 = xor i8 %610, -1
  %612 = zext i8 %611 to i64
  %613 = getelementptr inbounds float, float* %364, i64 %612
  br label %662

614:                                              ; preds = %541, %614
  %615 = phi i64 [ %621, %614 ], [ %542, %541 ]
  %616 = phi i8 [ %620, %614 ], [ %543, %541 ]
  %617 = getelementptr inbounds i8, i8* %531, i64 %615
  %618 = load i8, i8* %617, align 1
  %619 = icmp ult i8 %616, %618
  %620 = select i1 %619, i8 %618, i8 %616
  %621 = add nuw nsw i64 %615, 1
  %622 = icmp slt i64 %621, %509
  br i1 %622, label %614, label %609, !llvm.loop !528

623:                                              ; preds = %662, %529
  %624 = phi i8 [ 0, %529 ], [ %610, %662 ]
  %625 = phi float [ 0.000000e+00, %529 ], [ %670, %662 ]
  %626 = tail call float @logf(float %625) #19
  %627 = uitofp i8 %624 to float
  %628 = fmul float %366, %627
  %629 = fadd float %628, %626
  %630 = fdiv float %629, %362
  br i1 %508, label %631, label %673

631:                                              ; preds = %623
  br i1 %522, label %632, label %634

632:                                              ; preds = %661, %634, %631
  %633 = phi i64 [ 0, %634 ], [ 0, %631 ], [ %523, %661 ]
  br label %679

634:                                              ; preds = %631
  %635 = icmp ult i8* %535, %539
  %636 = icmp ult i8* %538, %537
  %637 = and i1 %635, %636
  br i1 %637, label %632, label %638

638:                                              ; preds = %634
  %639 = insertelement <16 x float> undef, float %630, i32 0
  %640 = shufflevector <16 x float> %639, <16 x float> undef, <16 x i32> zeroinitializer
  br label %641

641:                                              ; preds = %641, %638
  %642 = phi i64 [ 0, %638 ], [ %659, %641 ]
  %643 = getelementptr inbounds i8, i8* %531, i64 %642
  %644 = bitcast i8* %643 to <16 x i8>*
  %645 = load <16 x i8>, <16 x i8>* %644, align 1, !alias.scope !529
  %646 = uitofp <16 x i8> %645 to <16 x float>
  %647 = fmul <16 x float> %525, %646
  %648 = fsub <16 x float> %647, %640
  %649 = call <16 x float> @llvm.rint.v16f32(<16 x float> %648)
  %650 = fadd <16 x float> %649, %527
  %651 = fptosi <16 x float> %650 to <16 x i32>
  %652 = icmp slt <16 x i32> %651, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %653 = select <16 x i1> %652, <16 x i32> %651, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %654 = icmp sgt <16 x i32> %653, zeroinitializer
  %655 = select <16 x i1> %654, <16 x i32> %653, <16 x i32> zeroinitializer
  %656 = trunc <16 x i32> %655 to <16 x i8>
  %657 = getelementptr inbounds i8, i8* %532, i64 %642
  %658 = bitcast i8* %657 to <16 x i8>*
  store <16 x i8> %656, <16 x i8>* %658, align 1, !alias.scope !532, !noalias !529
  %659 = add i64 %642, 16
  %660 = icmp eq i64 %659, %523
  br i1 %660, label %661, label %641, !llvm.loop !534

661:                                              ; preds = %641
  br i1 %528, label %673, label %632

662:                                              ; preds = %609, %662
  %663 = phi i64 [ %671, %662 ], [ 0, %609 ]
  %664 = phi float [ %670, %662 ], [ 0.000000e+00, %609 ]
  %665 = getelementptr inbounds i8, i8* %531, i64 %663
  %666 = load i8, i8* %665, align 1
  %667 = zext i8 %666 to i64
  %668 = getelementptr inbounds float, float* %613, i64 %667
  %669 = load float, float* %668, align 4
  %670 = fadd float %664, %669
  %671 = add nuw nsw i64 %663, 1
  %672 = icmp slt i64 %671, %509
  br i1 %672, label %662, label %623

673:                                              ; preds = %679, %661, %623
  %674 = getelementptr inbounds i8, i8* %531, i64 %509
  %675 = getelementptr inbounds i8, i8* %532, i64 %509
  %676 = add nuw nsw i32 %533, 1
  %677 = icmp eq i32 %676, %487
  %678 = add i64 %530, 1
  br i1 %677, label %697, label %529

679:                                              ; preds = %632, %679
  %680 = phi i64 [ %695, %679 ], [ %633, %632 ]
  %681 = getelementptr inbounds i8, i8* %531, i64 %680
  %682 = load i8, i8* %681, align 1
  %683 = uitofp i8 %682 to float
  %684 = fmul float %510, %683
  %685 = fsub float %684, %630
  %686 = tail call float @llvm.rint.f32(float %685) #19
  %687 = fadd float %686, %511
  %688 = fptosi float %687 to i32
  %689 = icmp slt i32 %688, 255
  %690 = select i1 %689, i32 %688, i32 255
  %691 = icmp sgt i32 %690, 0
  %692 = select i1 %691, i32 %690, i32 0
  %693 = trunc i32 %692 to i8
  %694 = getelementptr inbounds i8, i8* %532, i64 %680
  store i8 %693, i8* %694, align 1
  %695 = add nuw nsw i64 %680, 1
  %696 = icmp slt i64 %695, %509
  br i1 %696, label %679, label %673, !llvm.loop !535

697:                                              ; preds = %673
  %698 = load i32, i32* %488, align 8
  br label %699

699:                                              ; preds = %697, %486
  %700 = phi i32 [ %698, %697 ], [ %435, %486 ]
  %701 = icmp sgt i32 %700, 5
  br i1 %701, label %702, label %708

702:                                              ; preds = %699
  %703 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %704 = load i32*, i32** %703, align 8
  %705 = icmp eq i32* %704, null
  br i1 %705, label %708, label %706

706:                                              ; preds = %702
  %707 = bitcast i32* %704 to i8*
  tail call void @_ZdaPv(i8* %707) #18
  br label %708

708:                                              ; preds = %699, %702, %706
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %402) #19
  %709 = load i32, i32* %437, align 8
  %710 = icmp sgt i32 %709, 5
  br i1 %710, label %711, label %717

711:                                              ; preds = %708
  %712 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %713 = load i32*, i32** %712, align 8
  %714 = icmp eq i32* %713, null
  br i1 %714, label %717, label %715

715:                                              ; preds = %711
  %716 = bitcast i32* %713 to i8*
  tail call void @_ZdaPv(i8* %716) #18
  br label %717

717:                                              ; preds = %708, %711, %715
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %367) #19
  br label %886

718:                                              ; preds = %34
  %719 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %719) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %719, i8 -86, i64 32, i1 false)
  %720 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %720, label %721, label %723

721:                                              ; preds = %718
  %722 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %722, align 8, !alias.scope !536
  br label %748

723:                                              ; preds = %718
  %724 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 2
  %725 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %724, align 8, !noalias !536
  %726 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %725, i64 0, i32 0
  %727 = load i32, i32* %726, align 4, !noalias !536
  %728 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %725, i64 0, i32 1, i64 0
  %729 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %727, i32* %729, align 8, !alias.scope !536
  %730 = icmp sgt i32 %727, 5
  br i1 %730, label %731, label %738

731:                                              ; preds = %723
  %732 = sext i32 %727 to i64
  %733 = shl nsw i64 %732, 2
  %734 = tail call i8* @_Znam(i64 %733) #18, !noalias !536
  %735 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %736 = bitcast i32** %735 to i8**
  store i8* %734, i8** %736, align 8, !alias.scope !536
  %737 = bitcast i8* %734 to i32*
  br label %743

738:                                              ; preds = %723
  %739 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %740 = bitcast %union.anon* %739 to i32*
  %741 = sext i32 %727 to i64
  %742 = shl nsw i64 %741, 2
  br label %743

743:                                              ; preds = %738, %731
  %744 = phi i64 [ %733, %731 ], [ %742, %738 ]
  %745 = phi i32* [ %737, %731 ], [ %740, %738 ]
  %746 = bitcast i32* %745 to i8*
  %747 = bitcast i32* %728 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %746, i8* align 4 %747, i64 %744, i1 false) #19
  br label %748

748:                                              ; preds = %721, %743
  %749 = phi i32 [ 0, %721 ], [ %727, %743 ]
  %750 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %750, i8 -86, i64 32, i1 false)
  %751 = icmp eq %struct.TfLiteTensor* %35, null
  br i1 %751, label %752, label %754

752:                                              ; preds = %748
  %753 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %753, align 8, !alias.scope !539
  br label %779

754:                                              ; preds = %748
  %755 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %756 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %755, align 8, !noalias !539
  %757 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %756, i64 0, i32 0
  %758 = load i32, i32* %757, align 4, !noalias !539
  %759 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %756, i64 0, i32 1, i64 0
  %760 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %758, i32* %760, align 8, !alias.scope !539
  %761 = icmp sgt i32 %758, 5
  br i1 %761, label %762, label %769

762:                                              ; preds = %754
  %763 = sext i32 %758 to i64
  %764 = shl nsw i64 %763, 2
  %765 = tail call i8* @_Znam(i64 %764) #18, !noalias !539
  %766 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %767 = bitcast i32** %766 to i8**
  store i8* %765, i8** %767, align 8, !alias.scope !539
  %768 = bitcast i8* %765 to i32*
  br label %774

769:                                              ; preds = %754
  %770 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %771 = bitcast %union.anon* %770 to i32*
  %772 = sext i32 %758 to i64
  %773 = shl nsw i64 %772, 2
  br label %774

774:                                              ; preds = %769, %762
  %775 = phi i64 [ %764, %762 ], [ %773, %769 ]
  %776 = phi i32* [ %768, %762 ], [ %771, %769 ]
  %777 = bitcast i32* %776 to i8*
  %778 = bitcast i32* %759 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %777, i8* align 4 %778, i64 %775, i1 false) #19
  br label %779

779:                                              ; preds = %752, %774
  %780 = phi i32 [ 0, %752 ], [ %758, %774 ]
  %781 = add nsw i32 %749, -1
  %782 = icmp sgt i32 %749, 5
  %783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %784 = getelementptr inbounds %union.anon, %union.anon* %783, i64 0, i32 0
  %785 = load i32*, i32** %784, align 8
  %786 = bitcast %union.anon* %783 to i32*
  %787 = select i1 %782, i32* %785, i32* %786
  %788 = icmp sgt i32 %749, 0
  br i1 %788, label %789, label %829

789:                                              ; preds = %779
  %790 = zext i32 %781 to i64
  %791 = zext i32 %749 to i64
  %792 = add nsw i64 %791, -1
  %793 = and i64 %791, 3
  %794 = icmp ult i64 %792, 3
  br i1 %794, label %810, label %795

795:                                              ; preds = %789
  %796 = sub nsw i64 %791, %793
  br label %797

797:                                              ; preds = %957, %795
  %798 = phi i64 [ 0, %795 ], [ %960, %957 ]
  %799 = phi i32 [ 1, %795 ], [ %959, %957 ]
  %800 = phi i64 [ %796, %795 ], [ %961, %957 ]
  %801 = icmp eq i64 %798, %790
  br i1 %801, label %805, label %802

802:                                              ; preds = %797
  %803 = getelementptr inbounds i32, i32* %787, i64 %798
  %804 = load i32, i32* %803, align 4
  br label %805

805:                                              ; preds = %802, %797
  %806 = phi i32 [ %804, %802 ], [ 1, %797 ]
  %807 = mul nsw i32 %806, %799
  %808 = or i64 %798, 1
  %809 = icmp eq i64 %808, %790
  br i1 %809, label %941, label %938

810:                                              ; preds = %957, %789
  %811 = phi i32 [ undef, %789 ], [ %959, %957 ]
  %812 = phi i64 [ 0, %789 ], [ %960, %957 ]
  %813 = phi i32 [ 1, %789 ], [ %959, %957 ]
  %814 = icmp eq i64 %793, 0
  br i1 %814, label %829, label %815

815:                                              ; preds = %810, %823
  %816 = phi i64 [ %826, %823 ], [ %812, %810 ]
  %817 = phi i32 [ %825, %823 ], [ %813, %810 ]
  %818 = phi i64 [ %827, %823 ], [ %793, %810 ]
  %819 = icmp eq i64 %816, %790
  br i1 %819, label %823, label %820

820:                                              ; preds = %815
  %821 = getelementptr inbounds i32, i32* %787, i64 %816
  %822 = load i32, i32* %821, align 4
  br label %823

823:                                              ; preds = %820, %815
  %824 = phi i32 [ %822, %820 ], [ 1, %815 ]
  %825 = mul nsw i32 %824, %817
  %826 = add nuw nsw i64 %816, 1
  %827 = add i64 %818, -1
  %828 = icmp eq i64 %827, 0
  br i1 %828, label %829, label %815, !llvm.loop !542

829:                                              ; preds = %810, %823, %779
  %830 = phi i32 [ 1, %779 ], [ %811, %810 ], [ %825, %823 ]
  %831 = icmp sgt i32 %780, 5
  %832 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %833 = sext i32 %781 to i64
  %834 = getelementptr inbounds i32, i32* %785, i64 %833
  %835 = bitcast %union.anon* %783 to [5 x i32]*
  %836 = getelementptr inbounds [5 x i32], [5 x i32]* %835, i64 0, i64 %833
  %837 = select i1 %782, i32* %834, i32* %836
  %838 = load i32, i32* %837, align 4
  %839 = getelementptr inbounds %union.anon, %union.anon* %832, i64 0, i32 0
  %840 = load i32*, i32** %839, align 8
  %841 = getelementptr inbounds i32, i32* %840, i64 %833
  %842 = bitcast %union.anon* %832 to [5 x i32]*
  %843 = getelementptr inbounds [5 x i32], [5 x i32]* %842, i64 0, i64 %833
  %844 = select i1 %831, i32* %841, i32* %843
  %845 = load i32, i32* %844, align 4
  %846 = icmp slt i32 %845, %838
  %847 = select i1 %846, i32 %845, i32 %838
  %848 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 0, i32 0
  %849 = load i32, i32* %848, align 8
  %850 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 0, i32 1
  %851 = load i32, i32* %850, align 4
  %852 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 1
  %853 = load i32, i32* %852, align 8
  %854 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 2
  %855 = load i32, i32* %854, align 4
  %856 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData", %"struct.tflite::ops::builtin::activations::LogSoftmaxOpData"* %11, i64 0, i32 0, i32 3
  %857 = load i32, i32* %856, align 4
  br i1 %720, label %862, label %858

858:                                              ; preds = %829
  %859 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %860 = bitcast %union.TfLitePtrUnion* %859 to i8**
  %861 = load i8*, i8** %860, align 8
  br label %862

862:                                              ; preds = %829, %858
  %863 = phi i8* [ %861, %858 ], [ null, %829 ]
  br i1 %751, label %868, label %864

864:                                              ; preds = %862
  %865 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %866 = bitcast %union.TfLitePtrUnion* %865 to i8**
  %867 = load i8*, i8** %866, align 8
  br label %868

868:                                              ; preds = %862, %864
  %869 = phi i8* [ %867, %864 ], [ null, %862 ]
  tail call void @_ZN6tflite21reference_integer_ops10LogSoftmaxEiiiiiiiPKaPa(i32 %849, i32 %851, i32 %853, i32 %855, i32 %857, i32 %830, i32 %847, i8* %863, i8* %869)
  %870 = xor i1 %831, true
  %871 = icmp eq i32* %840, null
  %872 = or i1 %871, %870
  br i1 %872, label %875, label %873

873:                                              ; preds = %868
  %874 = bitcast i32* %840 to i8*
  tail call void @_ZdaPv(i8* %874) #18
  br label %875

875:                                              ; preds = %868, %873
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %750) #19
  %876 = xor i1 %782, true
  %877 = icmp eq i32* %785, null
  %878 = or i1 %877, %876
  br i1 %878, label %881, label %879

879:                                              ; preds = %875
  %880 = bitcast i32* %785 to i8*
  tail call void @_ZdaPv(i8* %880) #18
  br label %881

881:                                              ; preds = %875, %879
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %719) #19
  br label %886

882:                                              ; preds = %34
  %883 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %884 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %883, align 8
  %885 = tail call i8* @TfLiteTypeGetName(i32 %37) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %884(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.25, i64 0, i64 0), i8* %885) #19
  br label %886

886:                                              ; preds = %882, %881, %717, %357
  %887 = phi i32 [ 1, %882 ], [ 0, %881 ], [ 0, %717 ], [ 0, %357 ]
  ret i32 %887

888:                                              ; preds = %133
  %889 = getelementptr inbounds i32, i32* %115, i64 %136
  %890 = load i32, i32* %889, align 4
  br label %891

891:                                              ; preds = %888, %133
  %892 = phi i32 [ %890, %888 ], [ 1, %133 ]
  %893 = mul nsw i32 %892, %135
  %894 = or i64 %126, 2
  %895 = icmp eq i64 %894, %118
  br i1 %895, label %899, label %896

896:                                              ; preds = %891
  %897 = getelementptr inbounds i32, i32* %115, i64 %894
  %898 = load i32, i32* %897, align 4
  br label %899

899:                                              ; preds = %896, %891
  %900 = phi i32 [ %898, %896 ], [ 1, %891 ]
  %901 = mul nsw i32 %900, %893
  %902 = or i64 %126, 3
  %903 = icmp eq i64 %902, %118
  br i1 %903, label %907, label %904

904:                                              ; preds = %899
  %905 = getelementptr inbounds i32, i32* %115, i64 %902
  %906 = load i32, i32* %905, align 4
  br label %907

907:                                              ; preds = %904, %899
  %908 = phi i32 [ %906, %904 ], [ 1, %899 ]
  %909 = mul nsw i32 %908, %901
  %910 = add nuw nsw i64 %126, 4
  %911 = add i64 %128, -4
  %912 = icmp eq i64 %911, 0
  br i1 %912, label %138, label %125

913:                                              ; preds = %462
  %914 = getelementptr inbounds i32, i32* %444, i64 %465
  %915 = load i32, i32* %914, align 4
  br label %916

916:                                              ; preds = %913, %462
  %917 = phi i32 [ %915, %913 ], [ 1, %462 ]
  %918 = mul nsw i32 %917, %464
  %919 = or i64 %455, 2
  %920 = icmp eq i64 %919, %447
  br i1 %920, label %924, label %921

921:                                              ; preds = %916
  %922 = getelementptr inbounds i32, i32* %444, i64 %919
  %923 = load i32, i32* %922, align 4
  br label %924

924:                                              ; preds = %921, %916
  %925 = phi i32 [ %923, %921 ], [ 1, %916 ]
  %926 = mul nsw i32 %925, %918
  %927 = or i64 %455, 3
  %928 = icmp eq i64 %927, %447
  br i1 %928, label %932, label %929

929:                                              ; preds = %924
  %930 = getelementptr inbounds i32, i32* %444, i64 %927
  %931 = load i32, i32* %930, align 4
  br label %932

932:                                              ; preds = %929, %924
  %933 = phi i32 [ %931, %929 ], [ 1, %924 ]
  %934 = mul nsw i32 %933, %926
  %935 = add nuw nsw i64 %455, 4
  %936 = add i64 %457, -4
  %937 = icmp eq i64 %936, 0
  br i1 %937, label %467, label %454

938:                                              ; preds = %805
  %939 = getelementptr inbounds i32, i32* %787, i64 %808
  %940 = load i32, i32* %939, align 4
  br label %941

941:                                              ; preds = %938, %805
  %942 = phi i32 [ %940, %938 ], [ 1, %805 ]
  %943 = mul nsw i32 %942, %807
  %944 = or i64 %798, 2
  %945 = icmp eq i64 %944, %790
  br i1 %945, label %949, label %946

946:                                              ; preds = %941
  %947 = getelementptr inbounds i32, i32* %787, i64 %944
  %948 = load i32, i32* %947, align 4
  br label %949

949:                                              ; preds = %946, %941
  %950 = phi i32 [ %948, %946 ], [ 1, %941 ]
  %951 = mul nsw i32 %950, %943
  %952 = or i64 %798, 3
  %953 = icmp eq i64 %952, %790
  br i1 %953, label %957, label %954

954:                                              ; preds = %949
  %955 = getelementptr inbounds i32, i32* %787, i64 %952
  %956 = load i32, i32* %955, align 4
  br label %957

957:                                              ; preds = %954, %949
  %958 = phi i32 [ %956, %954 ], [ 1, %949 ]
  %959 = mul nsw i32 %958, %951
  %960 = add nuw nsw i64 %798, 4
  %961 = add i64 %800, -4
  %962 = icmp eq i64 %961, 0
  br i1 %962, label %810, label %797
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin14Register_PRELUEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin14Register_PRELUEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_LEAKY_RELUEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin19Register_LEAKY_RELUEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_HARD_SWISHEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin19Register_HARD_SWISHEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations13HardSwishEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %12 = bitcast i8** %11 to %"struct.tflite::ops::builtin::activations::HardSwishData"**
  %13 = load %"struct.tflite::ops::builtin::activations::HardSwishData"*, %"struct.tflite::ops::builtin::activations::HardSwishData"** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %15 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %14, align 8
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %15, i64 0, i32 1, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %21 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %20, align 8
  %22 = sext i32 %17 to i64
  %23 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 %22
  br label %24

24:                                               ; preds = %2, %19
  %25 = phi %struct.TfLiteTensor* [ %23, %19 ], [ null, %2 ]
  %26 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %33 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %32, align 8
  %34 = sext i32 %29 to i64
  %35 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 %34
  br label %36

36:                                               ; preds = %24, %31
  %37 = phi %struct.TfLiteTensor* [ %35, %31 ], [ null, %24 ]
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %786 [
    i32 1, label %40
    i32 3, label %358
    i32 9, label %572
  ]

40:                                               ; preds = %36
  %41 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %41) #19
  %42 = icmp eq %struct.TfLiteTensor* %25, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %44, align 8, !alias.scope !543
  br label %74

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %47 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %46, align 8, !noalias !543
  %48 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %47, i64 0, i32 0
  %49 = load i32, i32* %48, align 4, !noalias !543
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %47, i64 0, i32 1, i64 0
  %51 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %49, i32* %51, align 8, !alias.scope !543
  %52 = icmp sgt i32 %49, 5
  br i1 %52, label %53, label %60

53:                                               ; preds = %45
  %54 = sext i32 %49 to i64
  %55 = shl nsw i64 %54, 2
  %56 = tail call i8* @_Znam(i64 %55) #18, !noalias !543
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %58 = bitcast i32** %57 to i8**
  store i8* %56, i8** %58, align 8, !alias.scope !543
  %59 = bitcast i8* %56 to i32*
  br label %65

60:                                               ; preds = %45
  %61 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %62 = bitcast %union.anon* %61 to i32*
  %63 = sext i32 %49 to i64
  %64 = shl nsw i64 %63, 2
  br label %65

65:                                               ; preds = %60, %53
  %66 = phi i64 [ %55, %53 ], [ %64, %60 ]
  %67 = phi i32* [ %59, %53 ], [ %62, %60 ]
  %68 = bitcast i32* %67 to i8*
  %69 = bitcast i32* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %69, i64 %66, i1 false) #19
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %71 = bitcast %union.TfLitePtrUnion* %70 to float**
  %72 = load float*, float** %71, align 8
  %73 = bitcast float* %72 to i8*
  br label %74

74:                                               ; preds = %43, %65
  %75 = phi i32 [ %49, %65 ], [ 0, %43 ]
  %76 = phi i8* [ %73, %65 ], [ null, %43 ]
  %77 = phi float* [ %72, %65 ], [ null, %43 ]
  %78 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %78) #19
  %79 = icmp eq %struct.TfLiteTensor* %37, null
  br i1 %79, label %80, label %82

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %81, align 8, !alias.scope !546
  br label %111

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %84 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %83, align 8, !noalias !546
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %84, i64 0, i32 0
  %86 = load i32, i32* %85, align 4, !noalias !546
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %84, i64 0, i32 1, i64 0
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %86, i32* %88, align 8, !alias.scope !546
  %89 = icmp sgt i32 %86, 5
  br i1 %89, label %90, label %97

90:                                               ; preds = %82
  %91 = sext i32 %86 to i64
  %92 = shl nsw i64 %91, 2
  %93 = tail call i8* @_Znam(i64 %92) #18, !noalias !546
  %94 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %95 = bitcast i32** %94 to i8**
  store i8* %93, i8** %95, align 8, !alias.scope !546
  %96 = bitcast i8* %93 to i32*
  br label %102

97:                                               ; preds = %82
  %98 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %99 = bitcast %union.anon* %98 to i32*
  %100 = sext i32 %86 to i64
  %101 = shl nsw i64 %100, 2
  br label %102

102:                                              ; preds = %97, %90
  %103 = phi i64 [ %92, %90 ], [ %101, %97 ]
  %104 = phi i32* [ %96, %90 ], [ %99, %97 ]
  %105 = bitcast i32* %104 to i8*
  %106 = bitcast i32* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %106, i64 %103, i1 false) #19
  %107 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %108 = bitcast %union.TfLitePtrUnion* %107 to float**
  %109 = load float*, float** %108, align 8
  %110 = bitcast float* %109 to i8*
  br label %111

111:                                              ; preds = %80, %102
  %112 = phi i32 [ %86, %102 ], [ 0, %80 ]
  %113 = phi i8* [ %110, %102 ], [ null, %80 ]
  %114 = phi float* [ %109, %102 ], [ null, %80 ]
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %116 = icmp sgt i32 %75, 5
  br i1 %116, label %117, label %120

117:                                              ; preds = %111
  %118 = getelementptr inbounds %union.anon, %union.anon* %115, i64 0, i32 0
  %119 = load i32*, i32** %118, align 8
  br label %123

120:                                              ; preds = %111
  %121 = bitcast %union.anon* %115 to i32*
  %122 = icmp sgt i32 %75, 0
  br i1 %122, label %123, label %226

123:                                              ; preds = %120, %117
  %124 = phi i32* [ %119, %117 ], [ %121, %120 ]
  %125 = zext i32 %75 to i64
  %126 = icmp ult i32 %75, 8
  br i1 %126, label %212, label %127

127:                                              ; preds = %123
  %128 = and i64 %125, 4294967288
  %129 = add nsw i64 %128, -8
  %130 = lshr exact i64 %129, 3
  %131 = add nuw nsw i64 %130, 1
  %132 = and i64 %131, 3
  %133 = icmp ult i64 %129, 24
  br i1 %133, label %179, label %134

134:                                              ; preds = %127
  %135 = sub nsw i64 %131, %132
  br label %136

136:                                              ; preds = %136, %134
  %137 = phi i64 [ 0, %134 ], [ %176, %136 ]
  %138 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %134 ], [ %174, %136 ]
  %139 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %134 ], [ %175, %136 ]
  %140 = phi i64 [ %135, %134 ], [ %177, %136 ]
  %141 = getelementptr inbounds i32, i32* %124, i64 %137
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = getelementptr inbounds i32, i32* %141, i64 4
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = mul nsw <4 x i32> %143, %138
  %148 = mul nsw <4 x i32> %146, %139
  %149 = or i64 %137, 8
  %150 = getelementptr inbounds i32, i32* %124, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = getelementptr inbounds i32, i32* %150, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4
  %156 = mul nsw <4 x i32> %152, %147
  %157 = mul nsw <4 x i32> %155, %148
  %158 = or i64 %137, 16
  %159 = getelementptr inbounds i32, i32* %124, i64 %158
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = getelementptr inbounds i32, i32* %159, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = mul nsw <4 x i32> %161, %156
  %166 = mul nsw <4 x i32> %164, %157
  %167 = or i64 %137, 24
  %168 = getelementptr inbounds i32, i32* %124, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, %165
  %175 = mul nsw <4 x i32> %173, %166
  %176 = add i64 %137, 32
  %177 = add i64 %140, -4
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %136, !llvm.loop !549

179:                                              ; preds = %136, %127
  %180 = phi <4 x i32> [ undef, %127 ], [ %174, %136 ]
  %181 = phi <4 x i32> [ undef, %127 ], [ %175, %136 ]
  %182 = phi i64 [ 0, %127 ], [ %176, %136 ]
  %183 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %127 ], [ %174, %136 ]
  %184 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %127 ], [ %175, %136 ]
  %185 = icmp eq i64 %132, 0
  br i1 %185, label %202, label %186

186:                                              ; preds = %179, %186
  %187 = phi i64 [ %199, %186 ], [ %182, %179 ]
  %188 = phi <4 x i32> [ %197, %186 ], [ %183, %179 ]
  %189 = phi <4 x i32> [ %198, %186 ], [ %184, %179 ]
  %190 = phi i64 [ %200, %186 ], [ %132, %179 ]
  %191 = getelementptr inbounds i32, i32* %124, i64 %187
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4
  %194 = getelementptr inbounds i32, i32* %191, i64 4
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4
  %197 = mul nsw <4 x i32> %193, %188
  %198 = mul nsw <4 x i32> %196, %189
  %199 = add i64 %187, 8
  %200 = add i64 %190, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %186, !llvm.loop !550

202:                                              ; preds = %186, %179
  %203 = phi <4 x i32> [ %180, %179 ], [ %197, %186 ]
  %204 = phi <4 x i32> [ %181, %179 ], [ %198, %186 ]
  %205 = mul <4 x i32> %204, %203
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %207 = mul <4 x i32> %205, %206
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %209 = mul <4 x i32> %207, %208
  %210 = extractelement <4 x i32> %209, i32 0
  %211 = icmp eq i64 %128, %125
  br i1 %211, label %223, label %212

212:                                              ; preds = %202, %123
  %213 = phi i64 [ 0, %123 ], [ %128, %202 ]
  %214 = phi i32 [ 1, %123 ], [ %210, %202 ]
  br label %215

215:                                              ; preds = %212, %215
  %216 = phi i64 [ %221, %215 ], [ %213, %212 ]
  %217 = phi i32 [ %220, %215 ], [ %214, %212 ]
  %218 = getelementptr inbounds i32, i32* %124, i64 %216
  %219 = load i32, i32* %218, align 4
  %220 = mul nsw i32 %219, %217
  %221 = add nuw nsw i64 %216, 1
  %222 = icmp eq i64 %221, %125
  br i1 %222, label %223, label %215, !llvm.loop !551

223:                                              ; preds = %215, %202
  %224 = phi i32 [ %210, %202 ], [ %220, %215 ]
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %342

226:                                              ; preds = %223, %120
  %227 = phi i32 [ %224, %223 ], [ 1, %120 ]
  %228 = zext i32 %227 to i64
  %229 = icmp ult i32 %227, 4
  br i1 %229, label %296, label %230

230:                                              ; preds = %226
  %231 = getelementptr float, float* %114, i64 %228
  %232 = bitcast float* %231 to i8*
  %233 = getelementptr float, float* %77, i64 %228
  %234 = bitcast float* %233 to i8*
  %235 = icmp ult i8* %113, %234
  %236 = icmp ult i8* %76, %232
  %237 = and i1 %235, %236
  br i1 %237, label %296, label %238

238:                                              ; preds = %230
  %239 = and i64 %228, 4294967292
  %240 = add nsw i64 %239, -4
  %241 = lshr exact i64 %240, 2
  %242 = add nuw nsw i64 %241, 1
  %243 = and i64 %242, 1
  %244 = icmp eq i64 %240, 0
  br i1 %244, label %278, label %245

245:                                              ; preds = %238
  %246 = sub nuw nsw i64 %242, %243
  br label %247

247:                                              ; preds = %247, %245
  %248 = phi i64 [ 0, %245 ], [ %275, %247 ]
  %249 = phi i64 [ %246, %245 ], [ %276, %247 ]
  %250 = getelementptr inbounds float, float* %77, i64 %248
  %251 = bitcast float* %250 to <4 x float>*
  %252 = load <4 x float>, <4 x float>* %251, align 4, !alias.scope !552
  %253 = fadd <4 x float> %252, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %254 = fcmp ogt <4 x float> %253, zeroinitializer
  %255 = select <4 x i1> %254, <4 x float> %253, <4 x float> zeroinitializer
  %256 = fcmp olt <4 x float> %255, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %257 = select <4 x i1> %256, <4 x float> %255, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %258 = fmul <4 x float> %252, %257
  %259 = fmul <4 x float> %258, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %260 = getelementptr inbounds float, float* %114, i64 %248
  %261 = bitcast float* %260 to <4 x float>*
  store <4 x float> %259, <4 x float>* %261, align 4, !alias.scope !555, !noalias !552
  %262 = or i64 %248, 4
  %263 = getelementptr inbounds float, float* %77, i64 %262
  %264 = bitcast float* %263 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4, !alias.scope !552
  %266 = fadd <4 x float> %265, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %267 = fcmp ogt <4 x float> %266, zeroinitializer
  %268 = select <4 x i1> %267, <4 x float> %266, <4 x float> zeroinitializer
  %269 = fcmp olt <4 x float> %268, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %270 = select <4 x i1> %269, <4 x float> %268, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %271 = fmul <4 x float> %265, %270
  %272 = fmul <4 x float> %271, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %273 = getelementptr inbounds float, float* %114, i64 %262
  %274 = bitcast float* %273 to <4 x float>*
  store <4 x float> %272, <4 x float>* %274, align 4, !alias.scope !555, !noalias !552
  %275 = add i64 %248, 8
  %276 = add i64 %249, -2
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %247, !llvm.loop !557

278:                                              ; preds = %247, %238
  %279 = phi i64 [ 0, %238 ], [ %275, %247 ]
  %280 = icmp eq i64 %243, 0
  br i1 %280, label %294, label %281

281:                                              ; preds = %278
  %282 = getelementptr inbounds float, float* %77, i64 %279
  %283 = bitcast float* %282 to <4 x float>*
  %284 = load <4 x float>, <4 x float>* %283, align 4, !alias.scope !552
  %285 = fadd <4 x float> %284, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %286 = fcmp ogt <4 x float> %285, zeroinitializer
  %287 = select <4 x i1> %286, <4 x float> %285, <4 x float> zeroinitializer
  %288 = fcmp olt <4 x float> %287, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %289 = select <4 x i1> %288, <4 x float> %287, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %290 = fmul <4 x float> %284, %289
  %291 = fmul <4 x float> %290, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %292 = getelementptr inbounds float, float* %114, i64 %279
  %293 = bitcast float* %292 to <4 x float>*
  store <4 x float> %291, <4 x float>* %293, align 4, !alias.scope !555, !noalias !552
  br label %294

294:                                              ; preds = %278, %281
  %295 = icmp eq i64 %239, %228
  br i1 %295, label %342, label %296

296:                                              ; preds = %294, %230, %226
  %297 = phi i64 [ 0, %230 ], [ 0, %226 ], [ %239, %294 ]
  %298 = xor i64 %297, -1
  %299 = and i64 %228, 1
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %313, label %301

301:                                              ; preds = %296
  %302 = getelementptr inbounds float, float* %77, i64 %297
  %303 = load float, float* %302, align 4
  %304 = fadd float %303, 3.000000e+00
  %305 = fcmp ogt float %304, 0.000000e+00
  %306 = select i1 %305, float %304, float 0.000000e+00
  %307 = fcmp olt float %306, 6.000000e+00
  %308 = select i1 %307, float %306, float 6.000000e+00
  %309 = fmul float %303, %308
  %310 = fmul float %309, 0x3FC5555560000000
  %311 = getelementptr inbounds float, float* %114, i64 %297
  store float %310, float* %311, align 4
  %312 = or i64 %297, 1
  br label %313

313:                                              ; preds = %296, %301
  %314 = phi i64 [ %297, %296 ], [ %312, %301 ]
  %315 = sub nsw i64 0, %228
  %316 = icmp eq i64 %298, %315
  br i1 %316, label %342, label %317

317:                                              ; preds = %313, %317
  %318 = phi i64 [ %340, %317 ], [ %314, %313 ]
  %319 = getelementptr inbounds float, float* %77, i64 %318
  %320 = load float, float* %319, align 4
  %321 = fadd float %320, 3.000000e+00
  %322 = fcmp ogt float %321, 0.000000e+00
  %323 = select i1 %322, float %321, float 0.000000e+00
  %324 = fcmp olt float %323, 6.000000e+00
  %325 = select i1 %324, float %323, float 6.000000e+00
  %326 = fmul float %320, %325
  %327 = fmul float %326, 0x3FC5555560000000
  %328 = getelementptr inbounds float, float* %114, i64 %318
  store float %327, float* %328, align 4
  %329 = add nuw nsw i64 %318, 1
  %330 = getelementptr inbounds float, float* %77, i64 %329
  %331 = load float, float* %330, align 4
  %332 = fadd float %331, 3.000000e+00
  %333 = fcmp ogt float %332, 0.000000e+00
  %334 = select i1 %333, float %332, float 0.000000e+00
  %335 = fcmp olt float %334, 6.000000e+00
  %336 = select i1 %335, float %334, float 6.000000e+00
  %337 = fmul float %331, %336
  %338 = fmul float %337, 0x3FC5555560000000
  %339 = getelementptr inbounds float, float* %114, i64 %329
  store float %338, float* %339, align 4
  %340 = add nuw nsw i64 %318, 2
  %341 = icmp eq i64 %340, %228
  br i1 %341, label %342, label %317, !llvm.loop !558

342:                                              ; preds = %313, %317, %294, %223
  %343 = icmp sgt i32 %112, 5
  br i1 %343, label %344, label %350

344:                                              ; preds = %342
  %345 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %346 = load i32*, i32** %345, align 8
  %347 = icmp eq i32* %346, null
  br i1 %347, label %350, label %348

348:                                              ; preds = %344
  %349 = bitcast i32* %346 to i8*
  tail call void @_ZdaPv(i8* %349) #18
  br label %350

350:                                              ; preds = %342, %344, %348
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %78) #19
  br i1 %116, label %351, label %357

351:                                              ; preds = %350
  %352 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %353 = load i32*, i32** %352, align 8
  %354 = icmp eq i32* %353, null
  br i1 %354, label %357, label %355

355:                                              ; preds = %351
  %356 = bitcast i32* %353 to i8*
  tail call void @_ZdaPv(i8* %356) #18
  br label %357

357:                                              ; preds = %350, %351, %355
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #19
  br label %790

358:                                              ; preds = %36
  %359 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %13, i64 0, i32 0
  %360 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %360) #19
  %361 = icmp eq %struct.TfLiteTensor* %25, null
  br i1 %361, label %362, label %364

362:                                              ; preds = %358
  %363 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %363, align 8, !alias.scope !559
  br label %392

364:                                              ; preds = %358
  %365 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %366 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %365, align 8, !noalias !559
  %367 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %366, i64 0, i32 0
  %368 = load i32, i32* %367, align 4, !noalias !559
  %369 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %366, i64 0, i32 1, i64 0
  %370 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %368, i32* %370, align 8, !alias.scope !559
  %371 = icmp sgt i32 %368, 5
  br i1 %371, label %372, label %379

372:                                              ; preds = %364
  %373 = sext i32 %368 to i64
  %374 = shl nsw i64 %373, 2
  %375 = tail call i8* @_Znam(i64 %374) #18, !noalias !559
  %376 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %377 = bitcast i32** %376 to i8**
  store i8* %375, i8** %377, align 8, !alias.scope !559
  %378 = bitcast i8* %375 to i32*
  br label %384

379:                                              ; preds = %364
  %380 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %381 = bitcast %union.anon* %380 to i32*
  %382 = sext i32 %368 to i64
  %383 = shl nsw i64 %382, 2
  br label %384

384:                                              ; preds = %379, %372
  %385 = phi i64 [ %374, %372 ], [ %383, %379 ]
  %386 = phi i32* [ %378, %372 ], [ %381, %379 ]
  %387 = bitcast i32* %386 to i8*
  %388 = bitcast i32* %369 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %387, i8* align 4 %388, i64 %385, i1 false) #19
  %389 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %390 = bitcast %union.TfLitePtrUnion* %389 to i8**
  %391 = load i8*, i8** %390, align 8
  br label %392

392:                                              ; preds = %362, %384
  %393 = phi i32 [ %368, %384 ], [ 0, %362 ]
  %394 = phi i8* [ %391, %384 ], [ null, %362 ]
  %395 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %395) #19
  %396 = icmp eq %struct.TfLiteTensor* %37, null
  br i1 %396, label %397, label %399

397:                                              ; preds = %392
  %398 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %398, align 8, !alias.scope !562
  br label %427

399:                                              ; preds = %392
  %400 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %401 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %400, align 8, !noalias !562
  %402 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %401, i64 0, i32 0
  %403 = load i32, i32* %402, align 4, !noalias !562
  %404 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %401, i64 0, i32 1, i64 0
  %405 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %403, i32* %405, align 8, !alias.scope !562
  %406 = icmp sgt i32 %403, 5
  br i1 %406, label %407, label %414

407:                                              ; preds = %399
  %408 = sext i32 %403 to i64
  %409 = shl nsw i64 %408, 2
  %410 = tail call i8* @_Znam(i64 %409) #18, !noalias !562
  %411 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %412 = bitcast i32** %411 to i8**
  store i8* %410, i8** %412, align 8, !alias.scope !562
  %413 = bitcast i8* %410 to i32*
  br label %419

414:                                              ; preds = %399
  %415 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %416 = bitcast %union.anon* %415 to i32*
  %417 = sext i32 %403 to i64
  %418 = shl nsw i64 %417, 2
  br label %419

419:                                              ; preds = %414, %407
  %420 = phi i64 [ %409, %407 ], [ %418, %414 ]
  %421 = phi i32* [ %413, %407 ], [ %416, %414 ]
  %422 = bitcast i32* %421 to i8*
  %423 = bitcast i32* %404 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %422, i8* align 4 %423, i64 %420, i1 false) #19
  %424 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %425 = bitcast %union.TfLitePtrUnion* %424 to i8**
  %426 = load i8*, i8** %425, align 8
  br label %427

427:                                              ; preds = %397, %419
  %428 = phi i32 [ %403, %419 ], [ 0, %397 ]
  %429 = phi i8* [ %426, %419 ], [ null, %397 ]
  %430 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %431 = icmp sgt i32 %393, 5
  br i1 %431, label %432, label %435

432:                                              ; preds = %427
  %433 = getelementptr inbounds %union.anon, %union.anon* %430, i64 0, i32 0
  %434 = load i32*, i32** %433, align 8
  br label %438

435:                                              ; preds = %427
  %436 = bitcast %union.anon* %430 to i32*
  %437 = icmp sgt i32 %393, 0
  br i1 %437, label %438, label %541

438:                                              ; preds = %435, %432
  %439 = phi i32* [ %434, %432 ], [ %436, %435 ]
  %440 = zext i32 %393 to i64
  %441 = icmp ult i32 %393, 8
  br i1 %441, label %527, label %442

442:                                              ; preds = %438
  %443 = and i64 %440, 4294967288
  %444 = add nsw i64 %443, -8
  %445 = lshr exact i64 %444, 3
  %446 = add nuw nsw i64 %445, 1
  %447 = and i64 %446, 3
  %448 = icmp ult i64 %444, 24
  br i1 %448, label %494, label %449

449:                                              ; preds = %442
  %450 = sub nsw i64 %446, %447
  br label %451

451:                                              ; preds = %451, %449
  %452 = phi i64 [ 0, %449 ], [ %491, %451 ]
  %453 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %449 ], [ %489, %451 ]
  %454 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %449 ], [ %490, %451 ]
  %455 = phi i64 [ %450, %449 ], [ %492, %451 ]
  %456 = getelementptr inbounds i32, i32* %439, i64 %452
  %457 = bitcast i32* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 4
  %459 = getelementptr inbounds i32, i32* %456, i64 4
  %460 = bitcast i32* %459 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 4
  %462 = mul nsw <4 x i32> %458, %453
  %463 = mul nsw <4 x i32> %461, %454
  %464 = or i64 %452, 8
  %465 = getelementptr inbounds i32, i32* %439, i64 %464
  %466 = bitcast i32* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 4
  %468 = getelementptr inbounds i32, i32* %465, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 4
  %471 = mul nsw <4 x i32> %467, %462
  %472 = mul nsw <4 x i32> %470, %463
  %473 = or i64 %452, 16
  %474 = getelementptr inbounds i32, i32* %439, i64 %473
  %475 = bitcast i32* %474 to <4 x i32>*
  %476 = load <4 x i32>, <4 x i32>* %475, align 4
  %477 = getelementptr inbounds i32, i32* %474, i64 4
  %478 = bitcast i32* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 4
  %480 = mul nsw <4 x i32> %476, %471
  %481 = mul nsw <4 x i32> %479, %472
  %482 = or i64 %452, 24
  %483 = getelementptr inbounds i32, i32* %439, i64 %482
  %484 = bitcast i32* %483 to <4 x i32>*
  %485 = load <4 x i32>, <4 x i32>* %484, align 4
  %486 = getelementptr inbounds i32, i32* %483, i64 4
  %487 = bitcast i32* %486 to <4 x i32>*
  %488 = load <4 x i32>, <4 x i32>* %487, align 4
  %489 = mul nsw <4 x i32> %485, %480
  %490 = mul nsw <4 x i32> %488, %481
  %491 = add i64 %452, 32
  %492 = add i64 %455, -4
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %451, !llvm.loop !565

494:                                              ; preds = %451, %442
  %495 = phi <4 x i32> [ undef, %442 ], [ %489, %451 ]
  %496 = phi <4 x i32> [ undef, %442 ], [ %490, %451 ]
  %497 = phi i64 [ 0, %442 ], [ %491, %451 ]
  %498 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %442 ], [ %489, %451 ]
  %499 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %442 ], [ %490, %451 ]
  %500 = icmp eq i64 %447, 0
  br i1 %500, label %517, label %501

501:                                              ; preds = %494, %501
  %502 = phi i64 [ %514, %501 ], [ %497, %494 ]
  %503 = phi <4 x i32> [ %512, %501 ], [ %498, %494 ]
  %504 = phi <4 x i32> [ %513, %501 ], [ %499, %494 ]
  %505 = phi i64 [ %515, %501 ], [ %447, %494 ]
  %506 = getelementptr inbounds i32, i32* %439, i64 %502
  %507 = bitcast i32* %506 to <4 x i32>*
  %508 = load <4 x i32>, <4 x i32>* %507, align 4
  %509 = getelementptr inbounds i32, i32* %506, i64 4
  %510 = bitcast i32* %509 to <4 x i32>*
  %511 = load <4 x i32>, <4 x i32>* %510, align 4
  %512 = mul nsw <4 x i32> %508, %503
  %513 = mul nsw <4 x i32> %511, %504
  %514 = add i64 %502, 8
  %515 = add i64 %505, -1
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %517, label %501, !llvm.loop !566

517:                                              ; preds = %501, %494
  %518 = phi <4 x i32> [ %495, %494 ], [ %512, %501 ]
  %519 = phi <4 x i32> [ %496, %494 ], [ %513, %501 ]
  %520 = mul <4 x i32> %519, %518
  %521 = shufflevector <4 x i32> %520, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %522 = mul <4 x i32> %520, %521
  %523 = shufflevector <4 x i32> %522, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %524 = mul <4 x i32> %522, %523
  %525 = extractelement <4 x i32> %524, i32 0
  %526 = icmp eq i64 %443, %440
  br i1 %526, label %538, label %527

527:                                              ; preds = %517, %438
  %528 = phi i64 [ 0, %438 ], [ %443, %517 ]
  %529 = phi i32 [ 1, %438 ], [ %525, %517 ]
  br label %530

530:                                              ; preds = %527, %530
  %531 = phi i64 [ %536, %530 ], [ %528, %527 ]
  %532 = phi i32 [ %535, %530 ], [ %529, %527 ]
  %533 = getelementptr inbounds i32, i32* %439, i64 %531
  %534 = load i32, i32* %533, align 4
  %535 = mul nsw i32 %534, %532
  %536 = add nuw nsw i64 %531, 1
  %537 = icmp eq i64 %536, %440
  br i1 %537, label %538, label %530, !llvm.loop !567

538:                                              ; preds = %530, %517
  %539 = phi i32 [ %525, %517 ], [ %535, %530 ]
  %540 = icmp sgt i32 %539, 0
  br i1 %540, label %541, label %556

541:                                              ; preds = %538, %435
  %542 = phi i32 [ %539, %538 ], [ 1, %435 ]
  %543 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %543) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %543, i8 -86, i64 32, i1 false) #19
  %544 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 1, i32* %544, align 8
  %545 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %546 = bitcast %union.anon* %545 to i32*
  store i32 %542, i32* %546, align 8
  call void @_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::HardSwishParams"* dereferenceable(20) %359, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %3, i8* %394, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %3, i8* %429) #19
  %547 = load i32, i32* %544, align 8
  %548 = icmp sgt i32 %547, 5
  br i1 %548, label %549, label %555

549:                                              ; preds = %541
  %550 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %551 = load i32*, i32** %550, align 8
  %552 = icmp eq i32* %551, null
  br i1 %552, label %555, label %553

553:                                              ; preds = %549
  %554 = bitcast i32* %551 to i8*
  call void @_ZdaPv(i8* %554) #18
  br label %555

555:                                              ; preds = %553, %549, %541
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %543) #19
  br label %556

556:                                              ; preds = %538, %555
  %557 = icmp sgt i32 %428, 5
  br i1 %557, label %558, label %564

558:                                              ; preds = %556
  %559 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %560 = load i32*, i32** %559, align 8
  %561 = icmp eq i32* %560, null
  br i1 %561, label %564, label %562

562:                                              ; preds = %558
  %563 = bitcast i32* %560 to i8*
  call void @_ZdaPv(i8* %563) #18
  br label %564

564:                                              ; preds = %556, %558, %562
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %395) #19
  br i1 %431, label %565, label %571

565:                                              ; preds = %564
  %566 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %567 = load i32*, i32** %566, align 8
  %568 = icmp eq i32* %567, null
  br i1 %568, label %571, label %569

569:                                              ; preds = %565
  %570 = bitcast i32* %567 to i8*
  call void @_ZdaPv(i8* %570) #18
  br label %571

571:                                              ; preds = %564, %565, %569
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %360) #19
  br label %790

572:                                              ; preds = %36
  %573 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %13, i64 0, i32 0
  %574 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %574) #19
  %575 = icmp eq %struct.TfLiteTensor* %25, null
  br i1 %575, label %576, label %578

576:                                              ; preds = %572
  %577 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %577, align 8, !alias.scope !568
  br label %606

578:                                              ; preds = %572
  %579 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 2
  %580 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %579, align 8, !noalias !568
  %581 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %580, i64 0, i32 0
  %582 = load i32, i32* %581, align 4, !noalias !568
  %583 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %580, i64 0, i32 1, i64 0
  %584 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %582, i32* %584, align 8, !alias.scope !568
  %585 = icmp sgt i32 %582, 5
  br i1 %585, label %586, label %593

586:                                              ; preds = %578
  %587 = sext i32 %582 to i64
  %588 = shl nsw i64 %587, 2
  %589 = tail call i8* @_Znam(i64 %588) #18, !noalias !568
  %590 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %591 = bitcast i32** %590 to i8**
  store i8* %589, i8** %591, align 8, !alias.scope !568
  %592 = bitcast i8* %589 to i32*
  br label %598

593:                                              ; preds = %578
  %594 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %595 = bitcast %union.anon* %594 to i32*
  %596 = sext i32 %582 to i64
  %597 = shl nsw i64 %596, 2
  br label %598

598:                                              ; preds = %593, %586
  %599 = phi i64 [ %588, %586 ], [ %597, %593 ]
  %600 = phi i32* [ %592, %586 ], [ %595, %593 ]
  %601 = bitcast i32* %600 to i8*
  %602 = bitcast i32* %583 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %601, i8* align 4 %602, i64 %599, i1 false) #19
  %603 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %25, i64 0, i32 1
  %604 = bitcast %union.TfLitePtrUnion* %603 to i8**
  %605 = load i8*, i8** %604, align 8
  br label %606

606:                                              ; preds = %576, %598
  %607 = phi i32 [ %582, %598 ], [ 0, %576 ]
  %608 = phi i8* [ %605, %598 ], [ null, %576 ]
  %609 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %609) #19
  %610 = icmp eq %struct.TfLiteTensor* %37, null
  br i1 %610, label %611, label %613

611:                                              ; preds = %606
  %612 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %612, align 8, !alias.scope !571
  br label %641

613:                                              ; preds = %606
  %614 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 2
  %615 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %614, align 8, !noalias !571
  %616 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %615, i64 0, i32 0
  %617 = load i32, i32* %616, align 4, !noalias !571
  %618 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %615, i64 0, i32 1, i64 0
  %619 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %617, i32* %619, align 8, !alias.scope !571
  %620 = icmp sgt i32 %617, 5
  br i1 %620, label %621, label %628

621:                                              ; preds = %613
  %622 = sext i32 %617 to i64
  %623 = shl nsw i64 %622, 2
  %624 = tail call i8* @_Znam(i64 %623) #18, !noalias !571
  %625 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %626 = bitcast i32** %625 to i8**
  store i8* %624, i8** %626, align 8, !alias.scope !571
  %627 = bitcast i8* %624 to i32*
  br label %633

628:                                              ; preds = %613
  %629 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %630 = bitcast %union.anon* %629 to i32*
  %631 = sext i32 %617 to i64
  %632 = shl nsw i64 %631, 2
  br label %633

633:                                              ; preds = %628, %621
  %634 = phi i64 [ %623, %621 ], [ %632, %628 ]
  %635 = phi i32* [ %627, %621 ], [ %630, %628 ]
  %636 = bitcast i32* %635 to i8*
  %637 = bitcast i32* %618 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %636, i8* align 4 %637, i64 %634, i1 false) #19
  %638 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 0, i32 1
  %639 = bitcast %union.TfLitePtrUnion* %638 to i8**
  %640 = load i8*, i8** %639, align 8
  br label %641

641:                                              ; preds = %611, %633
  %642 = phi i32 [ %617, %633 ], [ 0, %611 ]
  %643 = phi i8* [ %640, %633 ], [ null, %611 ]
  %644 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %645 = icmp sgt i32 %607, 5
  br i1 %645, label %646, label %649

646:                                              ; preds = %641
  %647 = getelementptr inbounds %union.anon, %union.anon* %644, i64 0, i32 0
  %648 = load i32*, i32** %647, align 8
  br label %652

649:                                              ; preds = %641
  %650 = bitcast %union.anon* %644 to i32*
  %651 = icmp sgt i32 %607, 0
  br i1 %651, label %652, label %755

652:                                              ; preds = %649, %646
  %653 = phi i32* [ %648, %646 ], [ %650, %649 ]
  %654 = zext i32 %607 to i64
  %655 = icmp ult i32 %607, 8
  br i1 %655, label %741, label %656

656:                                              ; preds = %652
  %657 = and i64 %654, 4294967288
  %658 = add nsw i64 %657, -8
  %659 = lshr exact i64 %658, 3
  %660 = add nuw nsw i64 %659, 1
  %661 = and i64 %660, 3
  %662 = icmp ult i64 %658, 24
  br i1 %662, label %708, label %663

663:                                              ; preds = %656
  %664 = sub nsw i64 %660, %661
  br label %665

665:                                              ; preds = %665, %663
  %666 = phi i64 [ 0, %663 ], [ %705, %665 ]
  %667 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %663 ], [ %703, %665 ]
  %668 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %663 ], [ %704, %665 ]
  %669 = phi i64 [ %664, %663 ], [ %706, %665 ]
  %670 = getelementptr inbounds i32, i32* %653, i64 %666
  %671 = bitcast i32* %670 to <4 x i32>*
  %672 = load <4 x i32>, <4 x i32>* %671, align 4
  %673 = getelementptr inbounds i32, i32* %670, i64 4
  %674 = bitcast i32* %673 to <4 x i32>*
  %675 = load <4 x i32>, <4 x i32>* %674, align 4
  %676 = mul nsw <4 x i32> %672, %667
  %677 = mul nsw <4 x i32> %675, %668
  %678 = or i64 %666, 8
  %679 = getelementptr inbounds i32, i32* %653, i64 %678
  %680 = bitcast i32* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4
  %682 = getelementptr inbounds i32, i32* %679, i64 4
  %683 = bitcast i32* %682 to <4 x i32>*
  %684 = load <4 x i32>, <4 x i32>* %683, align 4
  %685 = mul nsw <4 x i32> %681, %676
  %686 = mul nsw <4 x i32> %684, %677
  %687 = or i64 %666, 16
  %688 = getelementptr inbounds i32, i32* %653, i64 %687
  %689 = bitcast i32* %688 to <4 x i32>*
  %690 = load <4 x i32>, <4 x i32>* %689, align 4
  %691 = getelementptr inbounds i32, i32* %688, i64 4
  %692 = bitcast i32* %691 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 4
  %694 = mul nsw <4 x i32> %690, %685
  %695 = mul nsw <4 x i32> %693, %686
  %696 = or i64 %666, 24
  %697 = getelementptr inbounds i32, i32* %653, i64 %696
  %698 = bitcast i32* %697 to <4 x i32>*
  %699 = load <4 x i32>, <4 x i32>* %698, align 4
  %700 = getelementptr inbounds i32, i32* %697, i64 4
  %701 = bitcast i32* %700 to <4 x i32>*
  %702 = load <4 x i32>, <4 x i32>* %701, align 4
  %703 = mul nsw <4 x i32> %699, %694
  %704 = mul nsw <4 x i32> %702, %695
  %705 = add i64 %666, 32
  %706 = add i64 %669, -4
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %708, label %665, !llvm.loop !574

708:                                              ; preds = %665, %656
  %709 = phi <4 x i32> [ undef, %656 ], [ %703, %665 ]
  %710 = phi <4 x i32> [ undef, %656 ], [ %704, %665 ]
  %711 = phi i64 [ 0, %656 ], [ %705, %665 ]
  %712 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %656 ], [ %703, %665 ]
  %713 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %656 ], [ %704, %665 ]
  %714 = icmp eq i64 %661, 0
  br i1 %714, label %731, label %715

715:                                              ; preds = %708, %715
  %716 = phi i64 [ %728, %715 ], [ %711, %708 ]
  %717 = phi <4 x i32> [ %726, %715 ], [ %712, %708 ]
  %718 = phi <4 x i32> [ %727, %715 ], [ %713, %708 ]
  %719 = phi i64 [ %729, %715 ], [ %661, %708 ]
  %720 = getelementptr inbounds i32, i32* %653, i64 %716
  %721 = bitcast i32* %720 to <4 x i32>*
  %722 = load <4 x i32>, <4 x i32>* %721, align 4
  %723 = getelementptr inbounds i32, i32* %720, i64 4
  %724 = bitcast i32* %723 to <4 x i32>*
  %725 = load <4 x i32>, <4 x i32>* %724, align 4
  %726 = mul nsw <4 x i32> %722, %717
  %727 = mul nsw <4 x i32> %725, %718
  %728 = add i64 %716, 8
  %729 = add i64 %719, -1
  %730 = icmp eq i64 %729, 0
  br i1 %730, label %731, label %715, !llvm.loop !575

731:                                              ; preds = %715, %708
  %732 = phi <4 x i32> [ %709, %708 ], [ %726, %715 ]
  %733 = phi <4 x i32> [ %710, %708 ], [ %727, %715 ]
  %734 = mul <4 x i32> %733, %732
  %735 = shufflevector <4 x i32> %734, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %736 = mul <4 x i32> %734, %735
  %737 = shufflevector <4 x i32> %736, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %738 = mul <4 x i32> %736, %737
  %739 = extractelement <4 x i32> %738, i32 0
  %740 = icmp eq i64 %657, %654
  br i1 %740, label %752, label %741

741:                                              ; preds = %731, %652
  %742 = phi i64 [ 0, %652 ], [ %657, %731 ]
  %743 = phi i32 [ 1, %652 ], [ %739, %731 ]
  br label %744

744:                                              ; preds = %741, %744
  %745 = phi i64 [ %750, %744 ], [ %742, %741 ]
  %746 = phi i32 [ %749, %744 ], [ %743, %741 ]
  %747 = getelementptr inbounds i32, i32* %653, i64 %745
  %748 = load i32, i32* %747, align 4
  %749 = mul nsw i32 %748, %746
  %750 = add nuw nsw i64 %745, 1
  %751 = icmp eq i64 %750, %654
  br i1 %751, label %752, label %744, !llvm.loop !576

752:                                              ; preds = %744, %731
  %753 = phi i32 [ %739, %731 ], [ %749, %744 ]
  %754 = icmp sgt i32 %753, 0
  br i1 %754, label %755, label %770

755:                                              ; preds = %752, %649
  %756 = phi i32 [ %753, %752 ], [ 1, %649 ]
  %757 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %757) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %757, i8 -86, i64 32, i1 false) #19
  %758 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 1, i32* %758, align 8
  %759 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %760 = bitcast %union.anon* %759 to i32*
  store i32 %756, i32* %760, align 8
  call void @_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::HardSwishParams"* dereferenceable(20) %573, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i8* %608, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i8* %643) #19
  %761 = load i32, i32* %758, align 8
  %762 = icmp sgt i32 %761, 5
  br i1 %762, label %763, label %769

763:                                              ; preds = %755
  %764 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %765 = load i32*, i32** %764, align 8
  %766 = icmp eq i32* %765, null
  br i1 %766, label %769, label %767

767:                                              ; preds = %763
  %768 = bitcast i32* %765 to i8*
  call void @_ZdaPv(i8* %768) #18
  br label %769

769:                                              ; preds = %767, %763, %755
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %757) #19
  br label %770

770:                                              ; preds = %752, %769
  %771 = icmp sgt i32 %642, 5
  br i1 %771, label %772, label %778

772:                                              ; preds = %770
  %773 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %774 = load i32*, i32** %773, align 8
  %775 = icmp eq i32* %774, null
  br i1 %775, label %778, label %776

776:                                              ; preds = %772
  %777 = bitcast i32* %774 to i8*
  call void @_ZdaPv(i8* %777) #18
  br label %778

778:                                              ; preds = %770, %772, %776
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %609) #19
  br i1 %645, label %779, label %785

779:                                              ; preds = %778
  %780 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %781 = load i32*, i32** %780, align 8
  %782 = icmp eq i32* %781, null
  br i1 %782, label %785, label %783

783:                                              ; preds = %779
  %784 = bitcast i32* %781 to i8*
  call void @_ZdaPv(i8* %784) #18
  br label %785

785:                                              ; preds = %778, %779, %783
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %574) #19
  br label %790

786:                                              ; preds = %36
  %787 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %788 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %787, align 8
  %789 = tail call i8* @TfLiteTypeGetName(i32 %39) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %788(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.25, i64 0, i64 0), i8* %789) #19
  br label %790

790:                                              ; preds = %786, %785, %571, %357
  %791 = phi i32 [ 1, %786 ], [ 0, %785 ], [ 0, %571 ], [ 0, %357 ]
  ret i32 %791
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin23Register_HARD_SWISH_REFEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin23Register_HARD_SWISH_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin11activations13HardSwishEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %10 = bitcast i8** %9 to %"struct.tflite::ops::builtin::activations::HardSwishData"**
  %11 = load %"struct.tflite::ops::builtin::activations::HardSwishData"*, %"struct.tflite::ops::builtin::activations::HardSwishData"** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %19 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %18, align 8
  %20 = sext i32 %15 to i64
  %21 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 %20
  br label %22

22:                                               ; preds = %2, %17
  %23 = phi %struct.TfLiteTensor* [ %21, %17 ], [ null, %2 ]
  %24 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %25 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %24, align 8
  %26 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %25, i64 0, i32 1, i64 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %31 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %30, align 8
  %32 = sext i32 %27 to i64
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 %32
  br label %34

34:                                               ; preds = %22, %29
  %35 = phi %struct.TfLiteTensor* [ %33, %29 ], [ null, %22 ]
  %36 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  switch i32 %37, label %531 [
    i32 1, label %38
    i32 3, label %351
    i32 9, label %441
  ]

38:                                               ; preds = %34
  %39 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %39) #19
  %40 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %42, align 8, !alias.scope !577
  br label %72

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 2
  %45 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %44, align 8, !noalias !577
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 4, !noalias !577
  %48 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 1, i64 0
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %47, i32* %49, align 8, !alias.scope !577
  %50 = icmp sgt i32 %47, 5
  br i1 %50, label %51, label %58

51:                                               ; preds = %43
  %52 = sext i32 %47 to i64
  %53 = shl nsw i64 %52, 2
  %54 = tail call i8* @_Znam(i64 %53) #18, !noalias !577
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %56 = bitcast i32** %55 to i8**
  store i8* %54, i8** %56, align 8, !alias.scope !577
  %57 = bitcast i8* %54 to i32*
  br label %63

58:                                               ; preds = %43
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %60 = bitcast %union.anon* %59 to i32*
  %61 = sext i32 %47 to i64
  %62 = shl nsw i64 %61, 2
  br label %63

63:                                               ; preds = %58, %51
  %64 = phi i64 [ %53, %51 ], [ %62, %58 ]
  %65 = phi i32* [ %57, %51 ], [ %60, %58 ]
  %66 = bitcast i32* %65 to i8*
  %67 = bitcast i32* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %64, i1 false) #19
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %69 = bitcast %union.TfLitePtrUnion* %68 to float**
  %70 = load float*, float** %69, align 8
  %71 = bitcast float* %70 to i8*
  br label %72

72:                                               ; preds = %41, %63
  %73 = phi i32 [ %47, %63 ], [ 0, %41 ]
  %74 = phi i8* [ %71, %63 ], [ null, %41 ]
  %75 = phi float* [ %70, %63 ], [ null, %41 ]
  %76 = ptrtoint float* %75 to i64
  %77 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #19
  %78 = icmp eq %struct.TfLiteTensor* %35, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %72
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !580
  br label %110

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !580
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !580
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !580
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #18, !noalias !580
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !580
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #19
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  %109 = bitcast float* %108 to i8*
  br label %110

110:                                              ; preds = %79, %101
  %111 = phi i32 [ %85, %101 ], [ 0, %79 ]
  %112 = phi i8* [ %109, %101 ], [ null, %79 ]
  %113 = phi float* [ %108, %101 ], [ null, %79 ]
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %115 = icmp sgt i32 %73, 5
  br i1 %115, label %116, label %119

116:                                              ; preds = %110
  %117 = getelementptr inbounds %union.anon, %union.anon* %114, i64 0, i32 0
  %118 = load i32*, i32** %117, align 8
  br label %124

119:                                              ; preds = %110
  %120 = bitcast %union.anon* %114 to i32*
  %121 = icmp sgt i32 %73, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds float, float* %75, i64 1
  br label %229

124:                                              ; preds = %119, %116
  %125 = phi i32* [ %118, %116 ], [ %120, %119 ]
  %126 = zext i32 %73 to i64
  %127 = icmp ult i32 %73, 8
  br i1 %127, label %213, label %128

128:                                              ; preds = %124
  %129 = and i64 %126, 4294967288
  %130 = add nsw i64 %129, -8
  %131 = lshr exact i64 %130, 3
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 3
  %134 = icmp ult i64 %130, 24
  br i1 %134, label %180, label %135

135:                                              ; preds = %128
  %136 = sub nsw i64 %132, %133
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 0, %135 ], [ %177, %137 ]
  %139 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %135 ], [ %175, %137 ]
  %140 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %135 ], [ %176, %137 ]
  %141 = phi i64 [ %136, %135 ], [ %178, %137 ]
  %142 = getelementptr inbounds i32, i32* %125, i64 %138
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = mul nsw <4 x i32> %144, %139
  %149 = mul nsw <4 x i32> %147, %140
  %150 = or i64 %138, 8
  %151 = getelementptr inbounds i32, i32* %125, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = mul nsw <4 x i32> %153, %148
  %158 = mul nsw <4 x i32> %156, %149
  %159 = or i64 %138, 16
  %160 = getelementptr inbounds i32, i32* %125, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = mul nsw <4 x i32> %162, %157
  %167 = mul nsw <4 x i32> %165, %158
  %168 = or i64 %138, 24
  %169 = getelementptr inbounds i32, i32* %125, i64 %168
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4
  %172 = getelementptr inbounds i32, i32* %169, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = mul nsw <4 x i32> %171, %166
  %176 = mul nsw <4 x i32> %174, %167
  %177 = add i64 %138, 32
  %178 = add i64 %141, -4
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %137, !llvm.loop !583

180:                                              ; preds = %137, %128
  %181 = phi <4 x i32> [ undef, %128 ], [ %175, %137 ]
  %182 = phi <4 x i32> [ undef, %128 ], [ %176, %137 ]
  %183 = phi i64 [ 0, %128 ], [ %177, %137 ]
  %184 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %175, %137 ]
  %185 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %128 ], [ %176, %137 ]
  %186 = icmp eq i64 %133, 0
  br i1 %186, label %203, label %187

187:                                              ; preds = %180, %187
  %188 = phi i64 [ %200, %187 ], [ %183, %180 ]
  %189 = phi <4 x i32> [ %198, %187 ], [ %184, %180 ]
  %190 = phi <4 x i32> [ %199, %187 ], [ %185, %180 ]
  %191 = phi i64 [ %201, %187 ], [ %133, %180 ]
  %192 = getelementptr inbounds i32, i32* %125, i64 %188
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4
  %195 = getelementptr inbounds i32, i32* %192, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4
  %198 = mul nsw <4 x i32> %194, %189
  %199 = mul nsw <4 x i32> %197, %190
  %200 = add i64 %188, 8
  %201 = add i64 %191, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %187, !llvm.loop !584

203:                                              ; preds = %187, %180
  %204 = phi <4 x i32> [ %181, %180 ], [ %198, %187 ]
  %205 = phi <4 x i32> [ %182, %180 ], [ %199, %187 ]
  %206 = mul <4 x i32> %205, %204
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %208 = mul <4 x i32> %206, %207
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %210 = mul <4 x i32> %208, %209
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = icmp eq i64 %129, %126
  br i1 %212, label %224, label %213

213:                                              ; preds = %203, %124
  %214 = phi i64 [ 0, %124 ], [ %129, %203 ]
  %215 = phi i32 [ 1, %124 ], [ %211, %203 ]
  br label %216

216:                                              ; preds = %213, %216
  %217 = phi i64 [ %222, %216 ], [ %214, %213 ]
  %218 = phi i32 [ %221, %216 ], [ %215, %213 ]
  %219 = getelementptr inbounds i32, i32* %125, i64 %217
  %220 = load i32, i32* %219, align 4
  %221 = mul nsw i32 %220, %218
  %222 = add nuw nsw i64 %217, 1
  %223 = icmp eq i64 %222, %126
  br i1 %223, label %224, label %216, !llvm.loop !585

224:                                              ; preds = %216, %203
  %225 = phi i32 [ %211, %203 ], [ %221, %216 ]
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds float, float* %75, i64 %226
  %228 = icmp sgt i32 %225, 0
  br i1 %228, label %229, label %335

229:                                              ; preds = %224, %122
  %230 = phi float* [ %123, %122 ], [ %227, %224 ]
  %231 = getelementptr float, float* %75, i64 1
  %232 = icmp ugt float* %230, %231
  %233 = select i1 %232, float* %230, float* %231
  %234 = bitcast float* %233 to i8*
  %235 = xor i64 %76, -1
  %236 = getelementptr i8, i8* %234, i64 %235
  %237 = ptrtoint i8* %236 to i64
  %238 = lshr i64 %237, 2
  %239 = add nuw nsw i64 %238, 1
  %240 = icmp ult i64 %239, 4
  br i1 %240, label %318, label %241

241:                                              ; preds = %229
  %242 = getelementptr float, float* %75, i64 1
  %243 = icmp ugt float* %230, %242
  %244 = select i1 %243, float* %230, float* %242
  %245 = bitcast float* %244 to i8*
  %246 = xor i64 %76, -1
  %247 = getelementptr i8, i8* %245, i64 %246
  %248 = ptrtoint i8* %247 to i64
  %249 = lshr i64 %248, 2
  %250 = add nuw nsw i64 %249, 1
  %251 = getelementptr float, float* %113, i64 %250
  %252 = bitcast float* %251 to i8*
  %253 = getelementptr float, float* %75, i64 %250
  %254 = bitcast float* %253 to i8*
  %255 = icmp ult i8* %112, %254
  %256 = icmp ult i8* %74, %252
  %257 = and i1 %255, %256
  br i1 %257, label %318, label %258

258:                                              ; preds = %241
  %259 = and i64 %239, 9223372036854775804
  %260 = getelementptr float, float* %75, i64 %259
  %261 = getelementptr float, float* %113, i64 %259
  %262 = add nsw i64 %259, -4
  %263 = lshr exact i64 %262, 2
  %264 = add nuw nsw i64 %263, 1
  %265 = and i64 %264, 1
  %266 = icmp eq i64 %262, 0
  br i1 %266, label %300, label %267

267:                                              ; preds = %258
  %268 = sub nuw nsw i64 %264, %265
  br label %269

269:                                              ; preds = %269, %267
  %270 = phi i64 [ 0, %267 ], [ %297, %269 ]
  %271 = phi i64 [ %268, %267 ], [ %298, %269 ]
  %272 = getelementptr float, float* %75, i64 %270
  %273 = getelementptr float, float* %113, i64 %270
  %274 = bitcast float* %272 to <4 x float>*
  %275 = load <4 x float>, <4 x float>* %274, align 4, !alias.scope !586
  %276 = fadd <4 x float> %275, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %277 = fcmp ogt <4 x float> %276, zeroinitializer
  %278 = select <4 x i1> %277, <4 x float> %276, <4 x float> zeroinitializer
  %279 = fcmp olt <4 x float> %278, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %280 = select <4 x i1> %279, <4 x float> %278, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %281 = fmul <4 x float> %275, %280
  %282 = fdiv <4 x float> %281, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %283 = bitcast float* %273 to <4 x float>*
  store <4 x float> %282, <4 x float>* %283, align 4, !alias.scope !589, !noalias !586
  %284 = or i64 %270, 4
  %285 = getelementptr float, float* %75, i64 %284
  %286 = getelementptr float, float* %113, i64 %284
  %287 = bitcast float* %285 to <4 x float>*
  %288 = load <4 x float>, <4 x float>* %287, align 4, !alias.scope !586
  %289 = fadd <4 x float> %288, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %290 = fcmp ogt <4 x float> %289, zeroinitializer
  %291 = select <4 x i1> %290, <4 x float> %289, <4 x float> zeroinitializer
  %292 = fcmp olt <4 x float> %291, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %293 = select <4 x i1> %292, <4 x float> %291, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %294 = fmul <4 x float> %288, %293
  %295 = fdiv <4 x float> %294, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %296 = bitcast float* %286 to <4 x float>*
  store <4 x float> %295, <4 x float>* %296, align 4, !alias.scope !589, !noalias !586
  %297 = add i64 %270, 8
  %298 = add i64 %271, -2
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %269, !llvm.loop !591

300:                                              ; preds = %269, %258
  %301 = phi i64 [ 0, %258 ], [ %297, %269 ]
  %302 = icmp eq i64 %265, 0
  br i1 %302, label %316, label %303

303:                                              ; preds = %300
  %304 = getelementptr float, float* %75, i64 %301
  %305 = getelementptr float, float* %113, i64 %301
  %306 = bitcast float* %304 to <4 x float>*
  %307 = load <4 x float>, <4 x float>* %306, align 4, !alias.scope !586
  %308 = fadd <4 x float> %307, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %309 = fcmp ogt <4 x float> %308, zeroinitializer
  %310 = select <4 x i1> %309, <4 x float> %308, <4 x float> zeroinitializer
  %311 = fcmp olt <4 x float> %310, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %312 = select <4 x i1> %311, <4 x float> %310, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %313 = fmul <4 x float> %307, %312
  %314 = fdiv <4 x float> %313, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %315 = bitcast float* %305 to <4 x float>*
  store <4 x float> %314, <4 x float>* %315, align 4, !alias.scope !589, !noalias !586
  br label %316

316:                                              ; preds = %300, %303
  %317 = icmp eq i64 %239, %259
  br i1 %317, label %335, label %318

318:                                              ; preds = %316, %241, %229
  %319 = phi float* [ %75, %241 ], [ %75, %229 ], [ %260, %316 ]
  %320 = phi float* [ %113, %241 ], [ %113, %229 ], [ %261, %316 ]
  br label %321

321:                                              ; preds = %318, %321
  %322 = phi float* [ %332, %321 ], [ %319, %318 ]
  %323 = phi float* [ %333, %321 ], [ %320, %318 ]
  %324 = load float, float* %322, align 4
  %325 = fadd float %324, 3.000000e+00
  %326 = fcmp ogt float %325, 0.000000e+00
  %327 = select i1 %326, float %325, float 0.000000e+00
  %328 = fcmp olt float %327, 6.000000e+00
  %329 = select i1 %328, float %327, float 6.000000e+00
  %330 = fmul float %324, %329
  %331 = fdiv float %330, 6.000000e+00
  store float %331, float* %323, align 4
  %332 = getelementptr inbounds float, float* %322, i64 1
  %333 = getelementptr inbounds float, float* %323, i64 1
  %334 = icmp ult float* %332, %230
  br i1 %334, label %321, label %335, !llvm.loop !592

335:                                              ; preds = %321, %316, %224
  %336 = icmp sgt i32 %111, 5
  br i1 %336, label %337, label %343

337:                                              ; preds = %335
  %338 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %339 = load i32*, i32** %338, align 8
  %340 = icmp eq i32* %339, null
  br i1 %340, label %343, label %341

341:                                              ; preds = %337
  %342 = bitcast i32* %339 to i8*
  tail call void @_ZdaPv(i8* %342) #18
  br label %343

343:                                              ; preds = %335, %337, %341
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #19
  br i1 %115, label %344, label %350

344:                                              ; preds = %343
  %345 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %346 = load i32*, i32** %345, align 8
  %347 = icmp eq i32* %346, null
  br i1 %347, label %350, label %348

348:                                              ; preds = %344
  %349 = bitcast i32* %346 to i8*
  tail call void @_ZdaPv(i8* %349) #18
  br label %350

350:                                              ; preds = %343, %344, %348
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %39) #19
  br label %535

351:                                              ; preds = %34
  %352 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %11, i64 0, i32 0
  %353 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %353) #19
  %354 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %354, label %355, label %357

355:                                              ; preds = %351
  %356 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %356, align 8, !alias.scope !593
  br label %385

357:                                              ; preds = %351
  %358 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 2
  %359 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %358, align 8, !noalias !593
  %360 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %359, i64 0, i32 0
  %361 = load i32, i32* %360, align 4, !noalias !593
  %362 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %359, i64 0, i32 1, i64 0
  %363 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %361, i32* %363, align 8, !alias.scope !593
  %364 = icmp sgt i32 %361, 5
  br i1 %364, label %365, label %372

365:                                              ; preds = %357
  %366 = sext i32 %361 to i64
  %367 = shl nsw i64 %366, 2
  %368 = tail call i8* @_Znam(i64 %367) #18, !noalias !593
  %369 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %370 = bitcast i32** %369 to i8**
  store i8* %368, i8** %370, align 8, !alias.scope !593
  %371 = bitcast i8* %368 to i32*
  br label %377

372:                                              ; preds = %357
  %373 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %374 = bitcast %union.anon* %373 to i32*
  %375 = sext i32 %361 to i64
  %376 = shl nsw i64 %375, 2
  br label %377

377:                                              ; preds = %372, %365
  %378 = phi i64 [ %367, %365 ], [ %376, %372 ]
  %379 = phi i32* [ %371, %365 ], [ %374, %372 ]
  %380 = bitcast i32* %379 to i8*
  %381 = bitcast i32* %362 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %380, i8* align 4 %381, i64 %378, i1 false) #19
  %382 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %383 = bitcast %union.TfLitePtrUnion* %382 to i8**
  %384 = load i8*, i8** %383, align 8
  br label %385

385:                                              ; preds = %355, %377
  %386 = phi i8* [ %384, %377 ], [ null, %355 ]
  %387 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %387) #19
  %388 = icmp eq %struct.TfLiteTensor* %35, null
  br i1 %388, label %389, label %391

389:                                              ; preds = %385
  %390 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %390, align 8, !alias.scope !596
  br label %419

391:                                              ; preds = %385
  %392 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %393 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %392, align 8, !noalias !596
  %394 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %393, i64 0, i32 0
  %395 = load i32, i32* %394, align 4, !noalias !596
  %396 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %393, i64 0, i32 1, i64 0
  %397 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %395, i32* %397, align 8, !alias.scope !596
  %398 = icmp sgt i32 %395, 5
  br i1 %398, label %399, label %406

399:                                              ; preds = %391
  %400 = sext i32 %395 to i64
  %401 = shl nsw i64 %400, 2
  %402 = tail call i8* @_Znam(i64 %401) #18, !noalias !596
  %403 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %404 = bitcast i32** %403 to i8**
  store i8* %402, i8** %404, align 8, !alias.scope !596
  %405 = bitcast i8* %402 to i32*
  br label %411

406:                                              ; preds = %391
  %407 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %408 = bitcast %union.anon* %407 to i32*
  %409 = sext i32 %395 to i64
  %410 = shl nsw i64 %409, 2
  br label %411

411:                                              ; preds = %406, %399
  %412 = phi i64 [ %401, %399 ], [ %410, %406 ]
  %413 = phi i32* [ %405, %399 ], [ %408, %406 ]
  %414 = bitcast i32* %413 to i8*
  %415 = bitcast i32* %396 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %414, i8* align 4 %415, i64 %412, i1 false) #19
  %416 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %417 = bitcast %union.TfLitePtrUnion* %416 to i8**
  %418 = load i8*, i8** %417, align 8
  br label %419

419:                                              ; preds = %389, %411
  %420 = phi i8* [ %418, %411 ], [ null, %389 ]
  call void @_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::HardSwishParams"* dereferenceable(20) %352, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i8* %386, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %420)
  %421 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %422 = load i32, i32* %421, align 8
  %423 = icmp sgt i32 %422, 5
  br i1 %423, label %424, label %430

424:                                              ; preds = %419
  %425 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %426 = load i32*, i32** %425, align 8
  %427 = icmp eq i32* %426, null
  br i1 %427, label %430, label %428

428:                                              ; preds = %424
  %429 = bitcast i32* %426 to i8*
  call void @_ZdaPv(i8* %429) #18
  br label %430

430:                                              ; preds = %419, %424, %428
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %387) #19
  %431 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %432 = load i32, i32* %431, align 8
  %433 = icmp sgt i32 %432, 5
  br i1 %433, label %434, label %440

434:                                              ; preds = %430
  %435 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %436 = load i32*, i32** %435, align 8
  %437 = icmp eq i32* %436, null
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = bitcast i32* %436 to i8*
  call void @_ZdaPv(i8* %439) #18
  br label %440

440:                                              ; preds = %430, %434, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %353) #19
  br label %535

441:                                              ; preds = %34
  %442 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::HardSwishData", %"struct.tflite::ops::builtin::activations::HardSwishData"* %11, i64 0, i32 0
  %443 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %443) #19
  %444 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %444, label %445, label %447

445:                                              ; preds = %441
  %446 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %446, align 8, !alias.scope !599
  br label %475

447:                                              ; preds = %441
  %448 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 2
  %449 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %448, align 8, !noalias !599
  %450 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %449, i64 0, i32 0
  %451 = load i32, i32* %450, align 4, !noalias !599
  %452 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %449, i64 0, i32 1, i64 0
  %453 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %451, i32* %453, align 8, !alias.scope !599
  %454 = icmp sgt i32 %451, 5
  br i1 %454, label %455, label %462

455:                                              ; preds = %447
  %456 = sext i32 %451 to i64
  %457 = shl nsw i64 %456, 2
  %458 = tail call i8* @_Znam(i64 %457) #18, !noalias !599
  %459 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %460 = bitcast i32** %459 to i8**
  store i8* %458, i8** %460, align 8, !alias.scope !599
  %461 = bitcast i8* %458 to i32*
  br label %467

462:                                              ; preds = %447
  %463 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %464 = bitcast %union.anon* %463 to i32*
  %465 = sext i32 %451 to i64
  %466 = shl nsw i64 %465, 2
  br label %467

467:                                              ; preds = %462, %455
  %468 = phi i64 [ %457, %455 ], [ %466, %462 ]
  %469 = phi i32* [ %461, %455 ], [ %464, %462 ]
  %470 = bitcast i32* %469 to i8*
  %471 = bitcast i32* %452 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %470, i8* align 4 %471, i64 %468, i1 false) #19
  %472 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 0, i32 1
  %473 = bitcast %union.TfLitePtrUnion* %472 to i8**
  %474 = load i8*, i8** %473, align 8
  br label %475

475:                                              ; preds = %445, %467
  %476 = phi i8* [ %474, %467 ], [ null, %445 ]
  %477 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %477) #19
  %478 = icmp eq %struct.TfLiteTensor* %35, null
  br i1 %478, label %479, label %481

479:                                              ; preds = %475
  %480 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %480, align 8, !alias.scope !602
  br label %509

481:                                              ; preds = %475
  %482 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 2
  %483 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %482, align 8, !noalias !602
  %484 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %483, i64 0, i32 0
  %485 = load i32, i32* %484, align 4, !noalias !602
  %486 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %483, i64 0, i32 1, i64 0
  %487 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %485, i32* %487, align 8, !alias.scope !602
  %488 = icmp sgt i32 %485, 5
  br i1 %488, label %489, label %496

489:                                              ; preds = %481
  %490 = sext i32 %485 to i64
  %491 = shl nsw i64 %490, 2
  %492 = tail call i8* @_Znam(i64 %491) #18, !noalias !602
  %493 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %494 = bitcast i32** %493 to i8**
  store i8* %492, i8** %494, align 8, !alias.scope !602
  %495 = bitcast i8* %492 to i32*
  br label %501

496:                                              ; preds = %481
  %497 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %498 = bitcast %union.anon* %497 to i32*
  %499 = sext i32 %485 to i64
  %500 = shl nsw i64 %499, 2
  br label %501

501:                                              ; preds = %496, %489
  %502 = phi i64 [ %491, %489 ], [ %500, %496 ]
  %503 = phi i32* [ %495, %489 ], [ %498, %496 ]
  %504 = bitcast i32* %503 to i8*
  %505 = bitcast i32* %486 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %504, i8* align 4 %505, i64 %502, i1 false) #19
  %506 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %35, i64 0, i32 1
  %507 = bitcast %union.TfLitePtrUnion* %506 to i8**
  %508 = load i8*, i8** %507, align 8
  br label %509

509:                                              ; preds = %479, %501
  %510 = phi i8* [ %508, %501 ], [ null, %479 ]
  call void @_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::HardSwishParams"* dereferenceable(20) %442, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %7, i8* %476, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, i8* %510)
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %512 = load i32, i32* %511, align 8
  %513 = icmp sgt i32 %512, 5
  br i1 %513, label %514, label %520

514:                                              ; preds = %509
  %515 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %516 = load i32*, i32** %515, align 8
  %517 = icmp eq i32* %516, null
  br i1 %517, label %520, label %518

518:                                              ; preds = %514
  %519 = bitcast i32* %516 to i8*
  call void @_ZdaPv(i8* %519) #18
  br label %520

520:                                              ; preds = %509, %514, %518
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %477) #19
  %521 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  %522 = load i32, i32* %521, align 8
  %523 = icmp sgt i32 %522, 5
  br i1 %523, label %524, label %530

524:                                              ; preds = %520
  %525 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %526 = load i32*, i32** %525, align 8
  %527 = icmp eq i32* %526, null
  br i1 %527, label %530, label %528

528:                                              ; preds = %524
  %529 = bitcast i32* %526 to i8*
  call void @_ZdaPv(i8* %529) #18
  br label %530

530:                                              ; preds = %520, %524, %528
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %443) #19
  br label %535

531:                                              ; preds = %34
  %532 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %533 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %532, align 8
  %534 = tail call i8* @TfLiteTypeGetName(i32 %37) #19
  tail call void (%struct.TfLiteContext*, i8*, ...) %533(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.25, i64 0, i64 0), i8* %534) #19
  br label %535

535:                                              ; preds = %531, %530, %440, %350
  %536 = phi i32 [ 1, %531 ], [ 0, %530 ], [ 0, %440 ], [ 0, %350 ]
  ret i32 %536
}

; Function Attrs: nofree nounwind
declare float @expf(float) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops11SoftmaxImplERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pfii(%"struct.tflite::SoftmaxParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, i32, i32) local_unnamed_addr #12 comdat {
  %8 = alloca %"struct.Eigen::internal::evaluator.148", align 8
  %9 = alloca %"class.Eigen::CwiseBinaryOp.85", align 8
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = icmp sgt i32 %11, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %7
  %15 = add nsw i32 %11, -1
  br label %24

16:                                               ; preds = %7
  %17 = icmp sgt i32 %11, 5
  %18 = add nsw i32 %11, -1
  br i1 %17, label %19, label %24

19:                                               ; preds = %16
  %20 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %21 = load i32*, i32** %20, align 8
  %22 = sext i32 %18 to i64
  %23 = getelementptr inbounds i32, i32* %21, i64 %22
  br label %29

24:                                               ; preds = %14, %16
  %25 = phi i32 [ %15, %14 ], [ %18, %16 ]
  %26 = bitcast %union.anon* %12 to [5 x i32]*
  %27 = sext i32 %25 to i64
  %28 = getelementptr inbounds [5 x i32], [5 x i32]* %26, i64 0, i64 %27
  br label %29

29:                                               ; preds = %19, %24
  %30 = phi i32* [ %23, %19 ], [ %28, %24 ]
  %31 = load i32, i32* %30, align 4
  %32 = mul nsw i32 %31, %5
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %2, i64 %33
  %35 = sext i32 %31 to i64
  %36 = sub nsw i32 %6, %5
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %4, i64 %33
  %39 = ptrtoint float* %38 to i64
  %40 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %40) #19
  %41 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 0
  %42 = load double, double* %41, align 8, !noalias !605
  %43 = fptrunc double %42 to float
  %44 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store float* %34, float** %44, align 8
  %45 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %35, i64* %45, align 8
  %46 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %37, i64* %46, align 8
  %47 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store float* %34, float** %47, align 8
  %48 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %35, i64* %48, align 8
  %49 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %37, i64* %49, align 8
  %50 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0, i32 1, i32 1, i32 0
  store i64 %35, i64* %50, align 8, !alias.scope !605
  %51 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 2, i32 0, i32 0
  store i64 %35, i64* %51, align 8, !alias.scope !605
  %52 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 2, i32 1, i32 0
  store i64 %37, i64* %52, align 8, !alias.scope !605
  %53 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 2, i32 2, i32 0
  store float %43, float* %53, align 8, !alias.scope !605
  %54 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %54) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %54, i8* align 8 getelementptr inbounds ({ { { [8 x i8], { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } }, %"struct.Eigen::internal::evaluator.181" } } }, { { { [8 x i8], { { { { { { { { { { float*, %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } }, { { { %"class.Eigen::Matrix", %"struct.Eigen::internal::evaluator.177", %"class.Eigen::internal::variable_if_dynamic.22", [7 x i8], %"class.Eigen::internal::variable_if_dynamic" } } } } } } } } } }, %"struct.Eigen::internal::evaluator.181" } } }* @__const._ZN5Eigen8internal26call_dense_assignment_loopINS_3MapINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEENS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_12ArrayWrapperINS8_INS0_20scalar_difference_opIffEEKNS2_IKS4_Li0ES6_EEKNS_9ReplicateINS_16PartialReduxExprISG_NS0_15member_maxCoeffIffEELi0EEELin1ELi1EEEEEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLin1ELin1ELi0ELin1ELin1EEEEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_.srcEvaluator, i64 0, i32 0, i32 0, i32 0, i64 0), i64 80, i1 false) #19
  %55 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 1, i32 0
  %56 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_9ReplicateINS_16PartialReduxExprISC_NS0_15member_maxCoeffIffEELi0EEELin1ELi1EEEEENS0_10IndexBasedESL_ffE4DataC2ERKSK_(%"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %56, %"class.Eigen::CwiseBinaryOp.94"* dereferenceable(96) %55) #19
  %57 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 2
  %58 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.85", %"class.Eigen::CwiseBinaryOp.85"* %9, i64 0, i32 2, i32 2
  %59 = bitcast %"struct.Eigen::internal::scalar_constant_op"* %58 to i32*
  %60 = load i32, i32* %59, align 8
  %61 = bitcast %"struct.Eigen::internal::evaluator.181"* %57 to i32*
  store i32 %60, i32* %61, align 8
  %62 = icmp sgt i32 %36, 0
  %63 = bitcast i32 %60 to float
  br i1 %62, label %64, label %181

64:                                               ; preds = %29
  %65 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %67 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %68 = icmp sgt i32 %31, 0
  %69 = add nsw i64 %35, %33
  %70 = icmp ult i32 %31, 8
  %71 = and i64 %35, -8
  %72 = insertelement <4 x float> undef, float %63, i32 0
  %73 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> zeroinitializer
  %74 = insertelement <4 x float> undef, float %63, i32 0
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <4 x i32> zeroinitializer
  %76 = icmp eq i64 %71, %35
  %77 = and i64 %35, 1
  %78 = icmp eq i64 %77, 0
  %79 = sub nsw i64 0, %35
  br label %80

80:                                               ; preds = %157, %64
  %81 = phi i64 [ %158, %157 ], [ 0, %64 ]
  %82 = mul i64 %81, %35
  %83 = add i64 %82, %33
  %84 = getelementptr float, float* %4, i64 %83
  %85 = bitcast float* %84 to i8*
  %86 = add i64 %69, %82
  %87 = getelementptr float, float* %4, i64 %86
  %88 = bitcast float* %87 to i8*
  %89 = shl nuw nsw i64 %81, 2
  br i1 %68, label %90, label %157

90:                                               ; preds = %80
  %91 = mul nsw i64 %81, %35
  %92 = load float*, float** %65, align 8
  %93 = load i64, i64* %66, align 8
  %94 = load float*, float** %67, align 8
  %95 = mul nsw i64 %93, %81
  %96 = getelementptr inbounds float, float* %94, i64 %81
  br i1 %70, label %97, label %113

97:                                               ; preds = %156, %113, %90
  %98 = phi i64 [ 0, %113 ], [ 0, %90 ], [ %71, %156 ]
  %99 = xor i64 %98, -1
  br i1 %78, label %110, label %100

100:                                              ; preds = %97
  %101 = add nsw i64 %98, %91
  %102 = getelementptr inbounds float, float* %38, i64 %101
  %103 = add nsw i64 %95, %98
  %104 = getelementptr inbounds float, float* %92, i64 %103
  %105 = load float, float* %104, align 4
  %106 = load float, float* %96, align 4
  %107 = fsub float %105, %106
  %108 = fmul float %107, %63
  store float %108, float* %102, align 4
  %109 = or i64 %98, 1
  br label %110

110:                                              ; preds = %100, %97
  %111 = phi i64 [ %109, %100 ], [ %98, %97 ]
  %112 = icmp eq i64 %99, %79
  br i1 %112, label %157, label %160

113:                                              ; preds = %90
  %114 = bitcast float* %92 to i8*
  %115 = mul i64 %93, %89
  %116 = getelementptr i8, i8* %114, i64 %115
  %117 = getelementptr float, float* %92, i64 %35
  %118 = bitcast float* %117 to i8*
  %119 = getelementptr i8, i8* %118, i64 %115
  %120 = getelementptr float, float* %94, i64 %81
  %121 = bitcast float* %120 to i8*
  %122 = getelementptr i8, i8* %121, i64 1
  %123 = icmp ugt i8* %119, %85
  %124 = icmp ult i8* %116, %88
  %125 = and i1 %123, %124
  %126 = icmp ugt i8* %122, %85
  %127 = icmp ult float* %96, %87
  %128 = and i1 %126, %127
  %129 = or i1 %125, %128
  br i1 %129, label %97, label %130

130:                                              ; preds = %113
  %131 = load float, float* %96, align 4, !alias.scope !608
  %132 = insertelement <4 x float> undef, float %131, i32 0
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> zeroinitializer
  %134 = insertelement <4 x float> undef, float %131, i32 0
  %135 = shufflevector <4 x float> %134, <4 x float> undef, <4 x i32> zeroinitializer
  br label %136

136:                                              ; preds = %136, %130
  %137 = phi i64 [ 0, %130 ], [ %154, %136 ]
  %138 = add nsw i64 %137, %91
  %139 = getelementptr inbounds float, float* %38, i64 %138
  %140 = add nsw i64 %95, %137
  %141 = getelementptr inbounds float, float* %92, i64 %140
  %142 = bitcast float* %141 to <4 x float>*
  %143 = load <4 x float>, <4 x float>* %142, align 4, !alias.scope !611
  %144 = getelementptr inbounds float, float* %141, i64 4
  %145 = bitcast float* %144 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 4, !alias.scope !611
  %147 = fsub <4 x float> %143, %133
  %148 = fsub <4 x float> %146, %135
  %149 = fmul <4 x float> %147, %73
  %150 = fmul <4 x float> %148, %75
  %151 = bitcast float* %139 to <4 x float>*
  store <4 x float> %149, <4 x float>* %151, align 4, !alias.scope !613, !noalias !615
  %152 = getelementptr inbounds float, float* %139, i64 4
  %153 = bitcast float* %152 to <4 x float>*
  store <4 x float> %150, <4 x float>* %153, align 4, !alias.scope !613, !noalias !615
  %154 = add i64 %137, 8
  %155 = icmp eq i64 %154, %71
  br i1 %155, label %156, label %136, !llvm.loop !616

156:                                              ; preds = %136
  br i1 %76, label %157, label %97

157:                                              ; preds = %110, %160, %156, %80
  %158 = add nuw nsw i64 %81, 1
  %159 = icmp slt i64 %158, %37
  br i1 %159, label %80, label %181

160:                                              ; preds = %110, %160
  %161 = phi i64 [ %179, %160 ], [ %111, %110 ]
  %162 = add nsw i64 %161, %91
  %163 = getelementptr inbounds float, float* %38, i64 %162
  %164 = add nsw i64 %95, %161
  %165 = getelementptr inbounds float, float* %92, i64 %164
  %166 = load float, float* %165, align 4
  %167 = load float, float* %96, align 4
  %168 = fsub float %166, %167
  %169 = fmul float %168, %63
  store float %169, float* %163, align 4
  %170 = add nuw nsw i64 %161, 1
  %171 = add nsw i64 %170, %91
  %172 = getelementptr inbounds float, float* %38, i64 %171
  %173 = add nsw i64 %95, %170
  %174 = getelementptr inbounds float, float* %92, i64 %173
  %175 = load float, float* %174, align 4
  %176 = load float, float* %96, align 4
  %177 = fsub float %175, %176
  %178 = fmul float %177, %63
  store float %178, float* %172, align 4
  %179 = add nuw nsw i64 %161, 2
  %180 = icmp eq i64 %179, %35
  br i1 %180, label %157, label %160, !llvm.loop !617

181:                                              ; preds = %157, %29
  %182 = getelementptr inbounds %"struct.Eigen::internal::evaluator.148", %"struct.Eigen::internal::evaluator.148"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load float*, float** %182, align 8
  %184 = icmp eq float* %183, null
  br i1 %184, label %189, label %185

185:                                              ; preds = %181
  %186 = getelementptr inbounds float, float* %183, i64 -2
  %187 = bitcast float* %186 to i8**
  %188 = load i8*, i8** %187, align 8
  call void @free(i8* %188) #19
  br label %189

189:                                              ; preds = %181, %185
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %54) #19
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %40) #19
  %190 = mul nsw i64 %35, %37
  %191 = and i64 %39, 3
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %199

193:                                              ; preds = %189
  %194 = lshr i64 %39, 2
  %195 = sub nsw i64 0, %194
  %196 = and i64 %195, 3
  %197 = icmp slt i64 %196, %190
  %198 = select i1 %197, i64 %196, i64 %190
  br label %199

199:                                              ; preds = %193, %189
  %200 = phi i64 [ %198, %193 ], [ %190, %189 ]
  %201 = sub nsw i64 %190, %200
  %202 = sdiv i64 %201, 4
  %203 = shl nsw i64 %202, 2
  %204 = add nsw i64 %203, %200
  %205 = icmp sgt i64 %200, 0
  br i1 %205, label %206, label %213

206:                                              ; preds = %199, %206
  %207 = phi i64 [ %211, %206 ], [ 0, %199 ]
  %208 = getelementptr inbounds float, float* %38, i64 %207
  %209 = load float, float* %208, align 4
  %210 = call float @expf(float %209) #19
  store float %210, float* %208, align 4
  %211 = add nuw i64 %207, 1
  %212 = icmp eq i64 %211, %200
  br i1 %212, label %213, label %206

213:                                              ; preds = %206, %199
  %214 = icmp sgt i64 %201, 3
  br i1 %214, label %224, label %215

215:                                              ; preds = %224, %213
  %216 = icmp slt i64 %204, %190
  br i1 %216, label %217, label %264

217:                                              ; preds = %215, %217
  %218 = phi i64 [ %222, %217 ], [ %204, %215 ]
  %219 = getelementptr inbounds float, float* %38, i64 %218
  %220 = load float, float* %219, align 4
  %221 = call float @expf(float %220) #19
  store float %221, float* %219, align 4
  %222 = add i64 %218, 1
  %223 = icmp eq i64 %222, %190
  br i1 %223, label %264, label %217

224:                                              ; preds = %213, %224
  %225 = phi i64 [ %262, %224 ], [ %200, %213 ]
  %226 = getelementptr inbounds float, float* %38, i64 %225
  %227 = bitcast float* %226 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 1
  %229 = call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %228, <4 x float> <float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000>) #14, !srcloc !618
  %230 = call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %229, <4 x float> <float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000>) #14, !srcloc !33
  %231 = fmul <4 x float> %230, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %232 = fadd <4 x float> %231, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %233 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %232) #19
  %234 = sitofp <4 x i32> %233 to <4 x float>
  %235 = fcmp olt <4 x float> %232, %234
  %236 = select <4 x i1> %235, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %237 = fsub <4 x float> %234, %236
  %238 = fmul <4 x float> %237, <float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000>
  %239 = fsub <4 x float> %230, %238
  %240 = fmul <4 x float> %237, <float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000>
  %241 = fsub <4 x float> %239, %240
  %242 = fmul <4 x float> %241, %241
  %243 = fmul <4 x float> %241, <float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000>
  %244 = fadd <4 x float> %243, <float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000>
  %245 = fmul <4 x float> %241, %244
  %246 = fadd <4 x float> %245, <float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000>
  %247 = fmul <4 x float> %241, %246
  %248 = fadd <4 x float> %247, <float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000>
  %249 = fmul <4 x float> %241, %248
  %250 = fadd <4 x float> %249, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %251 = fmul <4 x float> %241, %250
  %252 = fadd <4 x float> %251, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %253 = fmul <4 x float> %242, %252
  %254 = fadd <4 x float> %241, %253
  %255 = fadd <4 x float> %254, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %256 = fadd <4 x float> %237, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %257 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %256) #19
  %258 = shl <4 x i32> %257, <i32 23, i32 23, i32 23, i32 23>
  %259 = bitcast <4 x i32> %258 to <4 x float>
  %260 = fmul <4 x float> %255, %259
  %261 = call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %260, <4 x float> %228) #14, !srcloc !33
  store <4 x float> %261, <4 x float>* %227, align 16
  %262 = add nsw i64 %225, 4
  %263 = icmp slt i64 %262, %204
  br i1 %263, label %224, label %215

264:                                              ; preds = %217, %215
  %265 = icmp eq i32 %36, 0
  br i1 %265, label %615, label %266

266:                                              ; preds = %264
  %267 = sdiv i64 9223372036854775807, %37
  %268 = icmp slt i64 %267, 1
  br i1 %268, label %269, label %272

269:                                              ; preds = %266
  %270 = call i8* @_Znwm(i64 -1) #19
  %271 = call i8* @_Znwm(i64 -1) #19
  br label %272

272:                                              ; preds = %266, %269
  br i1 %62, label %273, label %615

273:                                              ; preds = %272
  %274 = shl nsw i64 %37, 2
  %275 = add nsw i64 %274, 64
  %276 = call noalias i8* @malloc(i64 %275) #19
  %277 = icmp eq i8* %276, null
  br i1 %277, label %286, label %278

278:                                              ; preds = %273
  %279 = ptrtoint i8* %276 to i64
  %280 = add i64 %279, 64
  %281 = and i64 %280, -64
  %282 = inttoptr i64 %281 to i8*
  %283 = inttoptr i64 %281 to i8**
  %284 = getelementptr inbounds i8*, i8** %283, i64 -1
  store i8* %276, i8** %284, align 8
  %285 = icmp eq i64 %281, 0
  br i1 %285, label %286, label %288

286:                                              ; preds = %273, %278
  %287 = call i8* @_Znwm(i64 -1) #19
  br label %288

288:                                              ; preds = %278, %286
  %289 = phi i8* [ null, %286 ], [ %282, %278 ]
  %290 = ptrtoint i8* %289 to i64
  %291 = bitcast i8* %289 to float*
  %292 = icmp eq i32 %31, 0
  %293 = icmp sgt i32 %31, 1
  %294 = add nsw i64 %35, -1
  %295 = add nsw i64 %35, -2
  %296 = and i64 %294, 7
  %297 = icmp ult i64 %295, 7
  %298 = sub nsw i64 %294, %296
  %299 = icmp eq i64 %296, 0
  br label %300

300:                                              ; preds = %288, %610
  %301 = phi i64 [ %613, %610 ], [ 0, %288 ]
  %302 = getelementptr inbounds float, float* %291, i64 %301
  %303 = mul nsw i64 %301, %35
  %304 = getelementptr inbounds float, float* %38, i64 %303
  %305 = ptrtoint float* %304 to i64
  br i1 %292, label %610, label %306

306:                                              ; preds = %300
  %307 = and i64 %305, 3
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %309, label %315

309:                                              ; preds = %306
  %310 = lshr i64 %305, 2
  %311 = sub nsw i64 0, %310
  %312 = and i64 %311, 3
  %313 = icmp slt i64 %312, %35
  %314 = select i1 %313, i64 %312, i64 %35
  br label %315

315:                                              ; preds = %309, %306
  %316 = phi i64 [ %314, %309 ], [ %35, %306 ]
  %317 = sub nsw i64 %35, %316
  %318 = sdiv i64 %317, 8
  %319 = shl nsw i64 %318, 3
  %320 = sdiv i64 %317, 4
  %321 = shl nsw i64 %320, 2
  %322 = add nsw i64 %319, %316
  %323 = add nsw i64 %321, %316
  %324 = add nsw i64 %317, 3
  %325 = icmp ugt i64 %324, 6
  br i1 %325, label %326, label %555

326:                                              ; preds = %315
  %327 = getelementptr inbounds float, float* %304, i64 %316
  %328 = bitcast float* %327 to <4 x float>*
  %329 = load <4 x float>, <4 x float>* %328, align 1
  %330 = icmp sgt i64 %317, 7
  br i1 %330, label %331, label %426

331:                                              ; preds = %326
  %332 = add nsw i64 %316, 4
  %333 = getelementptr inbounds float, float* %304, i64 %332
  %334 = bitcast float* %333 to <4 x float>*
  %335 = load <4 x float>, <4 x float>* %334, align 1
  %336 = add nsw i64 %316, 8
  %337 = icmp slt i64 %336, %322
  br i1 %337, label %338, label %370

338:                                              ; preds = %331
  %339 = add nsw i64 %319, -9
  %340 = lshr i64 %339, 3
  %341 = add nuw nsw i64 %340, 1
  %342 = and i64 %341, 3
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %362, label %344

344:                                              ; preds = %338, %344
  %345 = phi i64 [ %359, %344 ], [ %336, %338 ]
  %346 = phi i64 [ %345, %344 ], [ %316, %338 ]
  %347 = phi <4 x float> [ %353, %344 ], [ %329, %338 ]
  %348 = phi <4 x float> [ %358, %344 ], [ %335, %338 ]
  %349 = phi i64 [ %360, %344 ], [ %342, %338 ]
  %350 = getelementptr inbounds float, float* %304, i64 %345
  %351 = bitcast float* %350 to <4 x float>*
  %352 = load <4 x float>, <4 x float>* %351, align 1
  %353 = fadd <4 x float> %347, %352
  %354 = add nsw i64 %346, 12
  %355 = getelementptr inbounds float, float* %304, i64 %354
  %356 = bitcast float* %355 to <4 x float>*
  %357 = load <4 x float>, <4 x float>* %356, align 1
  %358 = fadd <4 x float> %348, %357
  %359 = add nsw i64 %345, 8
  %360 = add i64 %349, -1
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %344, !llvm.loop !619

362:                                              ; preds = %344, %338
  %363 = phi i64 [ %336, %338 ], [ %359, %344 ]
  %364 = phi i64 [ %316, %338 ], [ %345, %344 ]
  %365 = phi <4 x float> [ %329, %338 ], [ %353, %344 ]
  %366 = phi <4 x float> [ %335, %338 ], [ %358, %344 ]
  %367 = phi <4 x float> [ undef, %338 ], [ %353, %344 ]
  %368 = phi <4 x float> [ undef, %338 ], [ %358, %344 ]
  %369 = icmp ult i64 %339, 24
  br i1 %369, label %370, label %375

370:                                              ; preds = %362, %375, %331
  %371 = phi <4 x float> [ %335, %331 ], [ %368, %362 ], [ %418, %375 ]
  %372 = phi <4 x float> [ %329, %331 ], [ %367, %362 ], [ %413, %375 ]
  %373 = fadd <4 x float> %371, %372
  %374 = icmp sgt i64 %323, %322
  br i1 %374, label %421, label %426

375:                                              ; preds = %362, %375
  %376 = phi i64 [ %419, %375 ], [ %363, %362 ]
  %377 = phi i64 [ %409, %375 ], [ %364, %362 ]
  %378 = phi <4 x float> [ %413, %375 ], [ %365, %362 ]
  %379 = phi <4 x float> [ %418, %375 ], [ %366, %362 ]
  %380 = getelementptr inbounds float, float* %304, i64 %376
  %381 = bitcast float* %380 to <4 x float>*
  %382 = load <4 x float>, <4 x float>* %381, align 1
  %383 = fadd <4 x float> %378, %382
  %384 = add nsw i64 %377, 12
  %385 = getelementptr inbounds float, float* %304, i64 %384
  %386 = bitcast float* %385 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 1
  %388 = fadd <4 x float> %379, %387
  %389 = add nsw i64 %376, 8
  %390 = getelementptr inbounds float, float* %304, i64 %389
  %391 = bitcast float* %390 to <4 x float>*
  %392 = load <4 x float>, <4 x float>* %391, align 1
  %393 = fadd <4 x float> %383, %392
  %394 = add nsw i64 %376, 12
  %395 = getelementptr inbounds float, float* %304, i64 %394
  %396 = bitcast float* %395 to <4 x float>*
  %397 = load <4 x float>, <4 x float>* %396, align 1
  %398 = fadd <4 x float> %388, %397
  %399 = add nsw i64 %376, 16
  %400 = getelementptr inbounds float, float* %304, i64 %399
  %401 = bitcast float* %400 to <4 x float>*
  %402 = load <4 x float>, <4 x float>* %401, align 1
  %403 = fadd <4 x float> %393, %402
  %404 = add nsw i64 %376, 20
  %405 = getelementptr inbounds float, float* %304, i64 %404
  %406 = bitcast float* %405 to <4 x float>*
  %407 = load <4 x float>, <4 x float>* %406, align 1
  %408 = fadd <4 x float> %398, %407
  %409 = add nsw i64 %376, 24
  %410 = getelementptr inbounds float, float* %304, i64 %409
  %411 = bitcast float* %410 to <4 x float>*
  %412 = load <4 x float>, <4 x float>* %411, align 1
  %413 = fadd <4 x float> %403, %412
  %414 = add nsw i64 %376, 28
  %415 = getelementptr inbounds float, float* %304, i64 %414
  %416 = bitcast float* %415 to <4 x float>*
  %417 = load <4 x float>, <4 x float>* %416, align 1
  %418 = fadd <4 x float> %408, %417
  %419 = add nsw i64 %376, 32
  %420 = icmp slt i64 %419, %322
  br i1 %420, label %375, label %370

421:                                              ; preds = %370
  %422 = getelementptr inbounds float, float* %304, i64 %322
  %423 = bitcast float* %422 to <4 x float>*
  %424 = load <4 x float>, <4 x float>* %423, align 1
  %425 = fadd <4 x float> %373, %424
  br label %426

426:                                              ; preds = %421, %370, %326
  %427 = phi <4 x float> [ %329, %326 ], [ %425, %421 ], [ %373, %370 ]
  %428 = shufflevector <4 x float> %427, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %429 = fadd <4 x float> %427, %428
  %430 = extractelement <4 x float> %429, i32 1
  %431 = extractelement <4 x float> %429, i32 0
  %432 = fadd float %431, %430
  %433 = icmp sgt i64 %316, 0
  br i1 %433, label %434, label %455

434:                                              ; preds = %426
  %435 = add nsw i64 %316, -1
  %436 = and i64 %316, 7
  %437 = icmp ult i64 %435, 7
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = sub nsw i64 %316, %436
  br label %481

440:                                              ; preds = %481, %434
  %441 = phi float [ undef, %434 ], [ %515, %481 ]
  %442 = phi i64 [ 0, %434 ], [ %516, %481 ]
  %443 = phi float [ %432, %434 ], [ %515, %481 ]
  %444 = icmp eq i64 %436, 0
  br i1 %444, label %455, label %445

445:                                              ; preds = %440, %445
  %446 = phi i64 [ %452, %445 ], [ %442, %440 ]
  %447 = phi float [ %451, %445 ], [ %443, %440 ]
  %448 = phi i64 [ %453, %445 ], [ %436, %440 ]
  %449 = getelementptr inbounds float, float* %304, i64 %446
  %450 = load float, float* %449, align 4
  %451 = fadd float %447, %450
  %452 = add nuw nsw i64 %446, 1
  %453 = add i64 %448, -1
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %445, !llvm.loop !620

455:                                              ; preds = %440, %445, %426
  %456 = phi float [ %432, %426 ], [ %441, %440 ], [ %451, %445 ]
  %457 = icmp slt i64 %323, %35
  br i1 %457, label %458, label %610

458:                                              ; preds = %455
  %459 = sub nsw i64 %35, %316
  %460 = sub nsw i64 %459, %321
  %461 = xor i64 %316, -1
  %462 = add nsw i64 %461, %35
  %463 = sub nsw i64 %462, %321
  %464 = and i64 %460, 7
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %476, label %466

466:                                              ; preds = %458, %466
  %467 = phi i64 [ %473, %466 ], [ %323, %458 ]
  %468 = phi float [ %472, %466 ], [ %456, %458 ]
  %469 = phi i64 [ %474, %466 ], [ %464, %458 ]
  %470 = getelementptr inbounds float, float* %304, i64 %467
  %471 = load float, float* %470, align 4
  %472 = fadd float %468, %471
  %473 = add nsw i64 %467, 1
  %474 = add i64 %469, -1
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %466, !llvm.loop !621

476:                                              ; preds = %466, %458
  %477 = phi float [ undef, %458 ], [ %472, %466 ]
  %478 = phi i64 [ %323, %458 ], [ %473, %466 ]
  %479 = phi float [ %456, %458 ], [ %472, %466 ]
  %480 = icmp ult i64 %463, 7
  br i1 %480, label %610, label %519

481:                                              ; preds = %481, %438
  %482 = phi i64 [ 0, %438 ], [ %516, %481 ]
  %483 = phi float [ %432, %438 ], [ %515, %481 ]
  %484 = phi i64 [ %439, %438 ], [ %517, %481 ]
  %485 = getelementptr inbounds float, float* %304, i64 %482
  %486 = load float, float* %485, align 4
  %487 = fadd float %483, %486
  %488 = or i64 %482, 1
  %489 = getelementptr inbounds float, float* %304, i64 %488
  %490 = load float, float* %489, align 4
  %491 = fadd float %487, %490
  %492 = or i64 %482, 2
  %493 = getelementptr inbounds float, float* %304, i64 %492
  %494 = load float, float* %493, align 4
  %495 = fadd float %491, %494
  %496 = or i64 %482, 3
  %497 = getelementptr inbounds float, float* %304, i64 %496
  %498 = load float, float* %497, align 4
  %499 = fadd float %495, %498
  %500 = or i64 %482, 4
  %501 = getelementptr inbounds float, float* %304, i64 %500
  %502 = load float, float* %501, align 4
  %503 = fadd float %499, %502
  %504 = or i64 %482, 5
  %505 = getelementptr inbounds float, float* %304, i64 %504
  %506 = load float, float* %505, align 4
  %507 = fadd float %503, %506
  %508 = or i64 %482, 6
  %509 = getelementptr inbounds float, float* %304, i64 %508
  %510 = load float, float* %509, align 4
  %511 = fadd float %507, %510
  %512 = or i64 %482, 7
  %513 = getelementptr inbounds float, float* %304, i64 %512
  %514 = load float, float* %513, align 4
  %515 = fadd float %511, %514
  %516 = add nuw nsw i64 %482, 8
  %517 = add i64 %484, -8
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %440, label %481

519:                                              ; preds = %476, %519
  %520 = phi i64 [ %553, %519 ], [ %478, %476 ]
  %521 = phi float [ %552, %519 ], [ %479, %476 ]
  %522 = getelementptr inbounds float, float* %304, i64 %520
  %523 = load float, float* %522, align 4
  %524 = fadd float %521, %523
  %525 = add nsw i64 %520, 1
  %526 = getelementptr inbounds float, float* %304, i64 %525
  %527 = load float, float* %526, align 4
  %528 = fadd float %524, %527
  %529 = add nsw i64 %520, 2
  %530 = getelementptr inbounds float, float* %304, i64 %529
  %531 = load float, float* %530, align 4
  %532 = fadd float %528, %531
  %533 = add nsw i64 %520, 3
  %534 = getelementptr inbounds float, float* %304, i64 %533
  %535 = load float, float* %534, align 4
  %536 = fadd float %532, %535
  %537 = add nsw i64 %520, 4
  %538 = getelementptr inbounds float, float* %304, i64 %537
  %539 = load float, float* %538, align 4
  %540 = fadd float %536, %539
  %541 = add nsw i64 %520, 5
  %542 = getelementptr inbounds float, float* %304, i64 %541
  %543 = load float, float* %542, align 4
  %544 = fadd float %540, %543
  %545 = add nsw i64 %520, 6
  %546 = getelementptr inbounds float, float* %304, i64 %545
  %547 = load float, float* %546, align 4
  %548 = fadd float %544, %547
  %549 = add nsw i64 %520, 7
  %550 = getelementptr inbounds float, float* %304, i64 %549
  %551 = load float, float* %550, align 4
  %552 = fadd float %548, %551
  %553 = add nsw i64 %520, 8
  %554 = icmp eq i64 %553, %35
  br i1 %554, label %610, label %519

555:                                              ; preds = %315
  %556 = load float, float* %304, align 4
  br i1 %293, label %557, label %610

557:                                              ; preds = %555
  br i1 %297, label %596, label %558

558:                                              ; preds = %557, %558
  %559 = phi i64 [ %593, %558 ], [ 1, %557 ]
  %560 = phi float [ %592, %558 ], [ %556, %557 ]
  %561 = phi i64 [ %594, %558 ], [ %298, %557 ]
  %562 = getelementptr inbounds float, float* %304, i64 %559
  %563 = load float, float* %562, align 4
  %564 = fadd float %560, %563
  %565 = add nuw nsw i64 %559, 1
  %566 = getelementptr inbounds float, float* %304, i64 %565
  %567 = load float, float* %566, align 4
  %568 = fadd float %564, %567
  %569 = add nuw nsw i64 %559, 2
  %570 = getelementptr inbounds float, float* %304, i64 %569
  %571 = load float, float* %570, align 4
  %572 = fadd float %568, %571
  %573 = add nuw nsw i64 %559, 3
  %574 = getelementptr inbounds float, float* %304, i64 %573
  %575 = load float, float* %574, align 4
  %576 = fadd float %572, %575
  %577 = add nuw nsw i64 %559, 4
  %578 = getelementptr inbounds float, float* %304, i64 %577
  %579 = load float, float* %578, align 4
  %580 = fadd float %576, %579
  %581 = add nuw nsw i64 %559, 5
  %582 = getelementptr inbounds float, float* %304, i64 %581
  %583 = load float, float* %582, align 4
  %584 = fadd float %580, %583
  %585 = add nuw nsw i64 %559, 6
  %586 = getelementptr inbounds float, float* %304, i64 %585
  %587 = load float, float* %586, align 4
  %588 = fadd float %584, %587
  %589 = add nuw nsw i64 %559, 7
  %590 = getelementptr inbounds float, float* %304, i64 %589
  %591 = load float, float* %590, align 4
  %592 = fadd float %588, %591
  %593 = add nuw nsw i64 %559, 8
  %594 = add i64 %561, -8
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %596, label %558

596:                                              ; preds = %558, %557
  %597 = phi float [ undef, %557 ], [ %592, %558 ]
  %598 = phi i64 [ 1, %557 ], [ %593, %558 ]
  %599 = phi float [ %556, %557 ], [ %592, %558 ]
  br i1 %299, label %610, label %600

600:                                              ; preds = %596, %600
  %601 = phi i64 [ %607, %600 ], [ %598, %596 ]
  %602 = phi float [ %606, %600 ], [ %599, %596 ]
  %603 = phi i64 [ %608, %600 ], [ %296, %596 ]
  %604 = getelementptr inbounds float, float* %304, i64 %601
  %605 = load float, float* %604, align 4
  %606 = fadd float %602, %605
  %607 = add nuw nsw i64 %601, 1
  %608 = add i64 %603, -1
  %609 = icmp eq i64 %608, 0
  br i1 %609, label %610, label %600, !llvm.loop !622

610:                                              ; preds = %596, %600, %476, %519, %300, %455, %555
  %611 = phi float [ 0.000000e+00, %300 ], [ %456, %455 ], [ %556, %555 ], [ %477, %476 ], [ %552, %519 ], [ %597, %596 ], [ %606, %600 ]
  %612 = fdiv float 1.000000e+00, %611
  store float %612, float* %302, align 4
  %613 = add nuw nsw i64 %301, 1
  %614 = icmp eq i64 %613, %37
  br i1 %614, label %615, label %300

615:                                              ; preds = %610, %272, %264
  %616 = phi i64 [ 0, %264 ], [ 0, %272 ], [ %290, %610 ]
  %617 = phi float* [ null, %264 ], [ null, %272 ], [ %291, %610 ]
  br i1 %62, label %618, label %744

618:                                              ; preds = %615
  %619 = icmp sgt i32 %31, 0
  %620 = add nsw i64 %35, %33
  %621 = add nsw i64 %35, -8
  %622 = lshr i64 %621, 3
  %623 = add nuw nsw i64 %622, 1
  %624 = icmp ult i32 %31, 8
  %625 = and i64 %35, -8
  %626 = and i64 %623, 1
  %627 = icmp eq i64 %622, 0
  %628 = sub nuw nsw i64 %623, %626
  %629 = icmp eq i64 %626, 0
  %630 = icmp eq i64 %625, %35
  %631 = and i64 %35, 1
  %632 = icmp eq i64 %631, 0
  %633 = sub nsw i64 0, %35
  br label %634

634:                                              ; preds = %618, %726
  %635 = phi i64 [ %727, %726 ], [ 0, %618 ]
  %636 = mul i64 %635, %35
  %637 = add i64 %636, %33
  %638 = getelementptr float, float* %4, i64 %637
  %639 = bitcast float* %638 to i8*
  %640 = add i64 %620, %636
  %641 = getelementptr float, float* %4, i64 %640
  %642 = getelementptr float, float* %617, i64 %635
  %643 = bitcast float* %642 to i8*
  %644 = getelementptr i8, i8* %643, i64 1
  br i1 %619, label %645, label %726

645:                                              ; preds = %634
  %646 = mul nsw i64 %635, %35
  %647 = getelementptr inbounds float, float* %617, i64 %635
  br i1 %624, label %648, label %661

648:                                              ; preds = %725, %661, %645
  %649 = phi i64 [ 0, %661 ], [ 0, %645 ], [ %625, %725 ]
  %650 = xor i64 %649, -1
  br i1 %632, label %658, label %651

651:                                              ; preds = %648
  %652 = add nsw i64 %649, %646
  %653 = getelementptr inbounds float, float* %38, i64 %652
  %654 = load float, float* %647, align 4
  %655 = load float, float* %653, align 4
  %656 = fmul float %654, %655
  store float %656, float* %653, align 4
  %657 = or i64 %649, 1
  br label %658

658:                                              ; preds = %651, %648
  %659 = phi i64 [ %657, %651 ], [ %649, %648 ]
  %660 = icmp eq i64 %650, %633
  br i1 %660, label %726, label %729

661:                                              ; preds = %645
  %662 = icmp ugt i8* %644, %639
  %663 = icmp ult float* %647, %641
  %664 = and i1 %662, %663
  br i1 %664, label %648, label %665

665:                                              ; preds = %661
  br i1 %627, label %706, label %666

666:                                              ; preds = %665
  %667 = load float, float* %647, align 4, !alias.scope !623
  %668 = insertelement <4 x float> undef, float %667, i32 0
  %669 = shufflevector <4 x float> %668, <4 x float> undef, <4 x i32> zeroinitializer
  %670 = insertelement <4 x float> undef, float %667, i32 0
  %671 = shufflevector <4 x float> %670, <4 x float> undef, <4 x i32> zeroinitializer
  %672 = load float, float* %647, align 4, !alias.scope !623
  %673 = insertelement <4 x float> undef, float %672, i32 0
  %674 = shufflevector <4 x float> %673, <4 x float> undef, <4 x i32> zeroinitializer
  %675 = insertelement <4 x float> undef, float %672, i32 0
  %676 = shufflevector <4 x float> %675, <4 x float> undef, <4 x i32> zeroinitializer
  br label %677

677:                                              ; preds = %677, %666
  %678 = phi i64 [ 0, %666 ], [ %703, %677 ]
  %679 = phi i64 [ %628, %666 ], [ %704, %677 ]
  %680 = add nsw i64 %678, %646
  %681 = getelementptr inbounds float, float* %38, i64 %680
  %682 = bitcast float* %681 to <4 x float>*
  %683 = load <4 x float>, <4 x float>* %682, align 4, !alias.scope !626, !noalias !623
  %684 = getelementptr inbounds float, float* %681, i64 4
  %685 = bitcast float* %684 to <4 x float>*
  %686 = load <4 x float>, <4 x float>* %685, align 4, !alias.scope !626, !noalias !623
  %687 = fmul <4 x float> %669, %683
  %688 = fmul <4 x float> %671, %686
  %689 = bitcast float* %681 to <4 x float>*
  store <4 x float> %687, <4 x float>* %689, align 4, !alias.scope !626, !noalias !623
  %690 = bitcast float* %684 to <4 x float>*
  store <4 x float> %688, <4 x float>* %690, align 4, !alias.scope !626, !noalias !623
  %691 = or i64 %678, 8
  %692 = add nsw i64 %691, %646
  %693 = getelementptr inbounds float, float* %38, i64 %692
  %694 = bitcast float* %693 to <4 x float>*
  %695 = load <4 x float>, <4 x float>* %694, align 4, !alias.scope !626, !noalias !623
  %696 = getelementptr inbounds float, float* %693, i64 4
  %697 = bitcast float* %696 to <4 x float>*
  %698 = load <4 x float>, <4 x float>* %697, align 4, !alias.scope !626, !noalias !623
  %699 = fmul <4 x float> %674, %695
  %700 = fmul <4 x float> %676, %698
  %701 = bitcast float* %693 to <4 x float>*
  store <4 x float> %699, <4 x float>* %701, align 4, !alias.scope !626, !noalias !623
  %702 = bitcast float* %696 to <4 x float>*
  store <4 x float> %700, <4 x float>* %702, align 4, !alias.scope !626, !noalias !623
  %703 = add i64 %678, 16
  %704 = add i64 %679, -2
  %705 = icmp eq i64 %704, 0
  br i1 %705, label %706, label %677, !llvm.loop !628

706:                                              ; preds = %677, %665
  %707 = phi i64 [ 0, %665 ], [ %703, %677 ]
  br i1 %629, label %725, label %708

708:                                              ; preds = %706
  %709 = add nsw i64 %707, %646
  %710 = getelementptr inbounds float, float* %38, i64 %709
  %711 = load float, float* %647, align 4, !alias.scope !623
  %712 = insertelement <4 x float> undef, float %711, i32 0
  %713 = shufflevector <4 x float> %712, <4 x float> undef, <4 x i32> zeroinitializer
  %714 = insertelement <4 x float> undef, float %711, i32 0
  %715 = shufflevector <4 x float> %714, <4 x float> undef, <4 x i32> zeroinitializer
  %716 = bitcast float* %710 to <4 x float>*
  %717 = load <4 x float>, <4 x float>* %716, align 4, !alias.scope !626, !noalias !623
  %718 = getelementptr inbounds float, float* %710, i64 4
  %719 = bitcast float* %718 to <4 x float>*
  %720 = load <4 x float>, <4 x float>* %719, align 4, !alias.scope !626, !noalias !623
  %721 = fmul <4 x float> %713, %717
  %722 = fmul <4 x float> %715, %720
  %723 = bitcast float* %710 to <4 x float>*
  store <4 x float> %721, <4 x float>* %723, align 4, !alias.scope !626, !noalias !623
  %724 = bitcast float* %718 to <4 x float>*
  store <4 x float> %722, <4 x float>* %724, align 4, !alias.scope !626, !noalias !623
  br label %725

725:                                              ; preds = %706, %708
  br i1 %630, label %726, label %648

726:                                              ; preds = %658, %729, %725, %634
  %727 = add nuw nsw i64 %635, 1
  %728 = icmp slt i64 %727, %37
  br i1 %728, label %634, label %744

729:                                              ; preds = %658, %729
  %730 = phi i64 [ %742, %729 ], [ %659, %658 ]
  %731 = add nsw i64 %730, %646
  %732 = getelementptr inbounds float, float* %38, i64 %731
  %733 = load float, float* %647, align 4
  %734 = load float, float* %732, align 4
  %735 = fmul float %733, %734
  store float %735, float* %732, align 4
  %736 = add nuw nsw i64 %730, 1
  %737 = add nsw i64 %736, %646
  %738 = getelementptr inbounds float, float* %38, i64 %737
  %739 = load float, float* %647, align 4
  %740 = load float, float* %738, align 4
  %741 = fmul float %739, %740
  store float %741, float* %738, align 4
  %742 = add nuw nsw i64 %730, 2
  %743 = icmp eq i64 %742, %35
  br i1 %743, label %726, label %729, !llvm.loop !629

744:                                              ; preds = %726, %615
  %745 = icmp eq i64 %616, 0
  br i1 %745, label %750, label %746

746:                                              ; preds = %744
  %747 = getelementptr inbounds float, float* %617, i64 -2
  %748 = bitcast float* %747 to i8**
  %749 = load i8*, i8** %748, align 8
  call void @free(i8* %749) #19
  br label %750

750:                                              ; preds = %744, %746
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_9ReplicateINS_16PartialReduxExprISC_NS0_15member_maxCoeffIffEELi0EEELin1ELi1EEEEENS0_10IndexBasedESL_ffE4DataC2ERKSK_(%"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"*, %"class.Eigen::CwiseBinaryOp.94"* dereferenceable(96)) unnamed_addr #8 comdat align 2 {
  %3 = alloca %"class.Eigen::internal::redux_evaluator", align 8
  %4 = alloca %"struct.Eigen::internal::scalar_max_op", align 1
  %5 = alloca %"class.Eigen::Block", align 8
  %6 = bitcast %"class.Eigen::CwiseBinaryOp.94"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %0 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.94", %"class.Eigen::CwiseBinaryOp.94"* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data", %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data", %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %0, i64 0, i32 1
  %13 = bitcast %"struct.Eigen::internal::evaluator.165"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #19
  %14 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.94", %"class.Eigen::CwiseBinaryOp.94"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.94", %"class.Eigen::CwiseBinaryOp.94"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.Eigen::CwiseBinaryOp.94", %"class.Eigen::CwiseBinaryOp.94"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data", %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = icmp eq i64 %19, 0
  br i1 %21, label %70, label %22

22:                                               ; preds = %2
  %23 = sdiv i64 9223372036854775807, %19
  %24 = icmp slt i64 %23, 1
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = tail call i8* @_Znwm(i64 -1) #19
  %27 = load i64, i64* %20, align 8
  br label %28

28:                                               ; preds = %25, %22
  %29 = phi i64 [ %27, %25 ], [ 0, %22 ]
  %30 = icmp eq i64 %29, %19
  %31 = getelementptr inbounds %"struct.Eigen::internal::evaluator.165", %"struct.Eigen::internal::evaluator.165"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load float*, float** %31, align 8
  br i1 %30, label %68, label %33

33:                                               ; preds = %28
  %34 = icmp eq float* %32, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds float, float* %32, i64 -2
  %37 = bitcast float* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  tail call void @free(i8* %38) #19
  br label %39

39:                                               ; preds = %35, %33
  %40 = icmp sgt i64 %19, 0
  br i1 %40, label %41, label %67

41:                                               ; preds = %39
  %42 = icmp ugt i64 %19, 4611686018427387903
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = tail call i8* @_Znwm(i64 -1) #19
  br label %45

45:                                               ; preds = %43, %41
  %46 = shl i64 %19, 2
  %47 = add i64 %46, 64
  %48 = tail call noalias i8* @malloc(i64 %47) #19
  %49 = icmp eq i8* %48, null
  br i1 %49, label %57, label %50

50:                                               ; preds = %45
  %51 = ptrtoint i8* %48 to i64
  %52 = add i64 %51, 64
  %53 = and i64 %52, -64
  %54 = inttoptr i64 %53 to i8*
  %55 = inttoptr i64 %53 to i8**
  %56 = getelementptr inbounds i8*, i8** %55, i64 -1
  store i8* %48, i8** %56, align 8
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i8* [ %54, %50 ], [ null, %45 ]
  %59 = icmp eq i8* %58, null
  %60 = icmp ne i64 %46, 0
  %61 = and i1 %60, %59
  br i1 %61, label %62, label %64

62:                                               ; preds = %57
  %63 = tail call i8* @_Znwm(i64 -1) #19
  br label %64

64:                                               ; preds = %57, %62
  %65 = bitcast %"struct.Eigen::internal::evaluator.165"* %12 to i8**
  store i8* %58, i8** %65, align 8
  %66 = bitcast i8* %58 to float*
  store i64 %19, i64* %20, align 8
  br label %73

67:                                               ; preds = %39
  store float* null, float** %31, align 8
  store i64 %19, i64* %20, align 8
  br label %70

68:                                               ; preds = %28
  store i64 %19, i64* %20, align 8
  %69 = icmp sgt i64 %19, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %2, %67, %68
  %71 = phi float* [ %32, %68 ], [ null, %67 ], [ null, %2 ]
  %72 = ptrtoint float* %71 to i64
  br label %102

73:                                               ; preds = %64, %68
  %74 = phi float* [ %66, %64 ], [ %32, %68 ]
  %75 = bitcast %"class.Eigen::Block"* %5 to i8*
  %76 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %78 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 3, i32 0
  %79 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 4, i32 0
  %80 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  %81 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 5
  %82 = getelementptr inbounds %"struct.Eigen::internal::scalar_max_op", %"struct.Eigen::internal::scalar_max_op"* %4, i64 0, i32 0
  %83 = bitcast %"class.Eigen::internal::redux_evaluator"* %3 to i8*
  %84 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %85 = bitcast i8* %84 to i64*
  %86 = bitcast %"class.Eigen::internal::redux_evaluator"* %3 to i64*
  %87 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %3, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0
  %88 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %89 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0
  br label %90

90:                                               ; preds = %90, %73
  %91 = phi i64 [ 0, %73 ], [ %97, %90 ]
  %92 = getelementptr inbounds float, float* %74, i64 %91
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %75) #19
  %93 = mul nsw i64 %91, %17
  %94 = getelementptr inbounds float, float* %15, i64 %93
  store float* %94, float** %76, align 8, !alias.scope !630
  store i64 %17, i64* %77, align 8, !alias.scope !630
  store float* %15, float** %88, align 8
  store i64 %17, i64* %80, align 8
  store i64 %19, i64* %89, align 8
  store i64 0, i64* %78, align 8, !alias.scope !630
  store i64 %91, i64* %79, align 8, !alias.scope !630
  store i64 %17, i64* %81, align 8, !alias.scope !630
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %82) #19
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #19
  store i64 -6148914691236517206, i64* %85, align 8
  %95 = ptrtoint float* %94 to i64
  store i64 %95, i64* %86, align 8
  store i64 %17, i64* %87, align 8
  %96 = call float @_ZN5Eigen8internal10redux_implINS0_13scalar_max_opIffLi0EEENS0_15redux_evaluatorINS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEEEELi3ELi0EE3runISE_EEfRKSF_RKS3_RKT_(%"class.Eigen::internal::redux_evaluator"* nonnull dereferenceable(24) %3, %"struct.Eigen::internal::scalar_max_op"* nonnull dereferenceable(1) %4, %"class.Eigen::Block"* nonnull dereferenceable(80) %5) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #19
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %82) #19
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %75) #19
  store float %96, float* %92, align 4
  %97 = add nuw nsw i64 %91, 1
  %98 = icmp eq i64 %97, %19
  br i1 %98, label %99, label %90

99:                                               ; preds = %90
  %100 = bitcast %"struct.Eigen::internal::evaluator.165"* %12 to i64*
  %101 = load i64, i64* %100, align 8
  br label %102

102:                                              ; preds = %70, %99
  %103 = phi i64 [ %101, %99 ], [ %72, %70 ]
  %104 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data", %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %105 = bitcast %"struct.Eigen::internal::evaluator.177"* %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = load i64, i64* %18, align 8
  %107 = getelementptr inbounds %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data", %"struct.Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, const Eigen::Replicate<Eigen::PartialReduxExpr<const Eigen::Map<const Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, Eigen::internal::member_maxCoeff<float, float>, 0>, -1, 1> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, float, float>::Data"* %0, i64 0, i32 1, i32 0, i32 0, i32 3, i32 0
  store i64 %106, i64* %107, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZN5Eigen8internal10redux_implINS0_13scalar_max_opIffLi0EEENS0_15redux_evaluatorINS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb1EEEEELi3ELi0EE3runISE_EEfRKSF_RKS3_RKT_(%"class.Eigen::internal::redux_evaluator"* dereferenceable(24), %"struct.Eigen::internal::scalar_max_op"* dereferenceable(1), %"class.Eigen::Block"* dereferenceable(80)) local_unnamed_addr #7 comdat align 2 {
  %4 = getelementptr inbounds %"class.Eigen::Block", %"class.Eigen::Block"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.Eigen::Block"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %3
  %11 = lshr i64 %7, 2
  %12 = sub nsw i64 0, %11
  %13 = and i64 %12, 3
  %14 = icmp slt i64 %13, %5
  %15 = select i1 %14, i64 %13, i64 %5
  br label %16

16:                                               ; preds = %3, %10
  %17 = phi i64 [ %15, %10 ], [ %5, %3 ]
  %18 = sub nsw i64 %5, %17
  %19 = sdiv i64 %18, 8
  %20 = shl nsw i64 %19, 3
  %21 = sdiv i64 %18, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %20, %17
  %24 = add nsw i64 %22, %17
  %25 = add i64 %18, 3
  %26 = icmp ugt i64 %25, 6
  %27 = getelementptr inbounds %"class.Eigen::internal::redux_evaluator", %"class.Eigen::internal::redux_evaluator"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load float*, float** %27, align 8
  br i1 %26, label %29, label %195

29:                                               ; preds = %16
  %30 = getelementptr inbounds float, float* %28, i64 %17
  %31 = bitcast float* %30 to i128*
  %32 = load i128, i128* %31, align 1
  %33 = icmp sgt i64 %18, 7
  %34 = lshr i128 %32, 32
  %35 = lshr i128 %32, 64
  %36 = lshr i128 %32, 96
  %37 = insertelement <4 x i128> undef, i128 %32, i32 0
  %38 = insertelement <4 x i128> %37, i128 %34, i32 1
  %39 = insertelement <4 x i128> %38, i128 %35, i32 2
  %40 = insertelement <4 x i128> %39, i128 %36, i32 3
  %41 = trunc <4 x i128> %40 to <4 x i32>
  br i1 %33, label %42, label %80

42:                                               ; preds = %29
  %43 = add nsw i64 %17, 4
  %44 = getelementptr inbounds float, float* %28, i64 %43
  %45 = bitcast float* %44 to <4 x float>*
  %46 = load <4 x float>, <4 x float>* %45, align 1
  %47 = add nsw i64 %17, 8
  %48 = icmp slt i64 %47, %23
  br i1 %48, label %56, label %49

49:                                               ; preds = %56, %42
  %50 = phi <4 x float> [ %46, %42 ], [ %71, %56 ]
  %51 = phi i128 [ %32, %42 ], [ %66, %56 ]
  %52 = bitcast i128 %51 to <4 x float>
  %53 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %52, <4 x float> %50) #14, !srcloc !33
  %54 = icmp sgt i64 %24, %23
  %55 = bitcast <4 x float> %53 to <4 x i32>
  br i1 %54, label %74, label %80

56:                                               ; preds = %42, %56
  %57 = phi i64 [ %72, %56 ], [ %47, %42 ]
  %58 = phi i64 [ %57, %56 ], [ %17, %42 ]
  %59 = phi i128 [ %66, %56 ], [ %32, %42 ]
  %60 = phi <4 x float> [ %71, %56 ], [ %46, %42 ]
  %61 = getelementptr inbounds float, float* %28, i64 %57
  %62 = bitcast float* %61 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 1
  %64 = bitcast i128 %59 to <4 x float>
  %65 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %64, <4 x float> %63) #14, !srcloc !33
  %66 = bitcast <4 x float> %65 to i128
  %67 = add nsw i64 %58, 12
  %68 = getelementptr inbounds float, float* %28, i64 %67
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 1
  %71 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %60, <4 x float> %70) #14, !srcloc !33
  %72 = add nsw i64 %57, 8
  %73 = icmp slt i64 %72, %23
  br i1 %73, label %56, label %49

74:                                               ; preds = %49
  %75 = getelementptr inbounds float, float* %28, i64 %23
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 1
  %78 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %53, <4 x float> %77) #14, !srcloc !33
  %79 = bitcast <4 x float> %78 to <4 x i32>
  br label %80

80:                                               ; preds = %49, %74, %29
  %81 = phi <4 x i32> [ %41, %29 ], [ %79, %74 ], [ %55, %49 ]
  %82 = bitcast <4 x i32> %81 to <4 x float>
  %83 = extractelement <4 x float> %82, i32 0
  %84 = bitcast <4 x i32> %81 to <4 x float>
  %85 = extractelement <4 x float> %84, i32 2
  %86 = fcmp olt float %83, %85
  %87 = select i1 %86, float %85, float %83
  %88 = bitcast <4 x i32> %81 to <4 x float>
  %89 = extractelement <4 x float> %88, i32 1
  %90 = bitcast <4 x i32> %81 to <4 x float>
  %91 = extractelement <4 x float> %90, i32 3
  %92 = fcmp olt float %89, %91
  %93 = select i1 %92, float %91, float %89
  %94 = fcmp olt float %87, %93
  %95 = select i1 %94, float %93, float %87
  %96 = icmp sgt i64 %17, 0
  br i1 %96, label %97, label %119

97:                                               ; preds = %80
  %98 = add i64 %17, -1
  %99 = and i64 %17, 3
  %100 = icmp ult i64 %98, 3
  br i1 %100, label %103, label %101

101:                                              ; preds = %97
  %102 = sub i64 %17, %99
  br label %145

103:                                              ; preds = %145, %97
  %104 = phi float [ undef, %97 ], [ %167, %145 ]
  %105 = phi i64 [ 0, %97 ], [ %168, %145 ]
  %106 = phi float [ %95, %97 ], [ %167, %145 ]
  %107 = icmp eq i64 %99, 0
  br i1 %107, label %119, label %108

108:                                              ; preds = %103, %108
  %109 = phi i64 [ %116, %108 ], [ %105, %103 ]
  %110 = phi float [ %115, %108 ], [ %106, %103 ]
  %111 = phi i64 [ %117, %108 ], [ %99, %103 ]
  %112 = getelementptr inbounds float, float* %28, i64 %109
  %113 = load float, float* %112, align 4
  %114 = fcmp olt float %110, %113
  %115 = select i1 %114, float %113, float %110
  %116 = add nuw nsw i64 %109, 1
  %117 = add i64 %111, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %108, !llvm.loop !633

119:                                              ; preds = %103, %108, %80
  %120 = phi float [ %95, %80 ], [ %104, %103 ], [ %115, %108 ]
  %121 = icmp slt i64 %24, %5
  br i1 %121, label %122, label %247

122:                                              ; preds = %119
  %123 = sub i64 %5, %17
  %124 = xor i64 %17, -1
  %125 = add i64 %5, %124
  %126 = sub i64 %125, %22
  %127 = and i64 %123, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %140, label %129

129:                                              ; preds = %122, %129
  %130 = phi i64 [ %137, %129 ], [ %24, %122 ]
  %131 = phi float [ %136, %129 ], [ %120, %122 ]
  %132 = phi i64 [ %138, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds float, float* %28, i64 %130
  %134 = load float, float* %133, align 4
  %135 = fcmp olt float %131, %134
  %136 = select i1 %135, float %134, float %131
  %137 = add nsw i64 %130, 1
  %138 = add i64 %132, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %129, !llvm.loop !634

140:                                              ; preds = %129, %122
  %141 = phi float [ undef, %122 ], [ %136, %129 ]
  %142 = phi i64 [ %24, %122 ], [ %137, %129 ]
  %143 = phi float [ %120, %122 ], [ %136, %129 ]
  %144 = icmp ult i64 %126, 3
  br i1 %144, label %247, label %171

145:                                              ; preds = %145, %101
  %146 = phi i64 [ 0, %101 ], [ %168, %145 ]
  %147 = phi float [ %95, %101 ], [ %167, %145 ]
  %148 = phi i64 [ %102, %101 ], [ %169, %145 ]
  %149 = getelementptr inbounds float, float* %28, i64 %146
  %150 = load float, float* %149, align 4
  %151 = fcmp olt float %147, %150
  %152 = select i1 %151, float %150, float %147
  %153 = or i64 %146, 1
  %154 = getelementptr inbounds float, float* %28, i64 %153
  %155 = load float, float* %154, align 4
  %156 = fcmp olt float %152, %155
  %157 = select i1 %156, float %155, float %152
  %158 = or i64 %146, 2
  %159 = getelementptr inbounds float, float* %28, i64 %158
  %160 = load float, float* %159, align 4
  %161 = fcmp olt float %157, %160
  %162 = select i1 %161, float %160, float %157
  %163 = or i64 %146, 3
  %164 = getelementptr inbounds float, float* %28, i64 %163
  %165 = load float, float* %164, align 4
  %166 = fcmp olt float %162, %165
  %167 = select i1 %166, float %165, float %162
  %168 = add nuw nsw i64 %146, 4
  %169 = add i64 %148, -4
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %103, label %145

171:                                              ; preds = %140, %171
  %172 = phi i64 [ %193, %171 ], [ %142, %140 ]
  %173 = phi float [ %192, %171 ], [ %143, %140 ]
  %174 = getelementptr inbounds float, float* %28, i64 %172
  %175 = load float, float* %174, align 4
  %176 = fcmp olt float %173, %175
  %177 = select i1 %176, float %175, float %173
  %178 = add nsw i64 %172, 1
  %179 = getelementptr inbounds float, float* %28, i64 %178
  %180 = load float, float* %179, align 4
  %181 = fcmp olt float %177, %180
  %182 = select i1 %181, float %180, float %177
  %183 = add nsw i64 %172, 2
  %184 = getelementptr inbounds float, float* %28, i64 %183
  %185 = load float, float* %184, align 4
  %186 = fcmp olt float %182, %185
  %187 = select i1 %186, float %185, float %182
  %188 = add nsw i64 %172, 3
  %189 = getelementptr inbounds float, float* %28, i64 %188
  %190 = load float, float* %189, align 4
  %191 = fcmp olt float %187, %190
  %192 = select i1 %191, float %190, float %187
  %193 = add nsw i64 %172, 4
  %194 = icmp eq i64 %193, %5
  br i1 %194, label %247, label %171

195:                                              ; preds = %16
  %196 = load float, float* %28, align 4
  %197 = icmp sgt i64 %5, 1
  br i1 %197, label %198, label %247

198:                                              ; preds = %195
  %199 = add i64 %5, -1
  %200 = add i64 %5, -2
  %201 = and i64 %199, 3
  %202 = icmp ult i64 %200, 3
  br i1 %202, label %231, label %203

203:                                              ; preds = %198
  %204 = sub i64 %199, %201
  br label %205

205:                                              ; preds = %205, %203
  %206 = phi i64 [ 1, %203 ], [ %228, %205 ]
  %207 = phi float [ %196, %203 ], [ %227, %205 ]
  %208 = phi i64 [ %204, %203 ], [ %229, %205 ]
  %209 = getelementptr inbounds float, float* %28, i64 %206
  %210 = load float, float* %209, align 4
  %211 = fcmp olt float %207, %210
  %212 = select i1 %211, float %210, float %207
  %213 = add nuw nsw i64 %206, 1
  %214 = getelementptr inbounds float, float* %28, i64 %213
  %215 = load float, float* %214, align 4
  %216 = fcmp olt float %212, %215
  %217 = select i1 %216, float %215, float %212
  %218 = add nuw nsw i64 %206, 2
  %219 = getelementptr inbounds float, float* %28, i64 %218
  %220 = load float, float* %219, align 4
  %221 = fcmp olt float %217, %220
  %222 = select i1 %221, float %220, float %217
  %223 = add nuw nsw i64 %206, 3
  %224 = getelementptr inbounds float, float* %28, i64 %223
  %225 = load float, float* %224, align 4
  %226 = fcmp olt float %222, %225
  %227 = select i1 %226, float %225, float %222
  %228 = add nuw nsw i64 %206, 4
  %229 = add i64 %208, -4
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %205

231:                                              ; preds = %205, %198
  %232 = phi float [ undef, %198 ], [ %227, %205 ]
  %233 = phi i64 [ 1, %198 ], [ %228, %205 ]
  %234 = phi float [ %196, %198 ], [ %227, %205 ]
  %235 = icmp eq i64 %201, 0
  br i1 %235, label %247, label %236

236:                                              ; preds = %231, %236
  %237 = phi i64 [ %244, %236 ], [ %233, %231 ]
  %238 = phi float [ %243, %236 ], [ %234, %231 ]
  %239 = phi i64 [ %245, %236 ], [ %201, %231 ]
  %240 = getelementptr inbounds float, float* %28, i64 %237
  %241 = load float, float* %240, align 4
  %242 = fcmp olt float %238, %241
  %243 = select i1 %242, float %241, float %238
  %244 = add nuw nsw i64 %237, 1
  %245 = add i64 %239, -1
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %236, !llvm.loop !635

247:                                              ; preds = %231, %236, %140, %171, %195, %119
  %248 = phi float [ %120, %119 ], [ %196, %195 ], [ %141, %140 ], [ %192, %171 ], [ %232, %231 ], [ %243, %236 ]
  ret float %248
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #14

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #15

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops17SoftmaxWorkerTaskD0Ev(%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops17SoftmaxWorkerTask3RunEv(%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 1
  %3 = load %"struct.tflite::SoftmaxParams"*, %"struct.tflite::SoftmaxParams"** %2, align 8
  %4 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 2
  %5 = load %"class.tflite::RuntimeShape"*, %"class.tflite::RuntimeShape"** %4, align 8
  %6 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 3
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 4
  %9 = load %"class.tflite::RuntimeShape"*, %"class.tflite::RuntimeShape"** %8, align 8
  %10 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 5
  %11 = load float*, float** %10, align 8
  %12 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 6
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %0, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  tail call void @_ZN6tflite13optimized_ops11SoftmaxImplERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pfii(%"struct.tflite::SoftmaxParams"* dereferenceable(80) %3, %"class.tflite::RuntimeShape"* dereferenceable(32) %5, float* %7, %"class.tflite::RuntimeShape"* dereferenceable(32) %9, float* %11, i32 %13, i32 %15)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8gemmlowp4TaskD2Ev(%"struct.gemmlowp::Task"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8gemmlowp4TaskD0Ev(%"struct.gemmlowp::Task"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #20
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #16

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6tflite13optimized_ops17SoftmaxWorkerTaskENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRKNS1_13SoftmaxParamsERKNS1_12RuntimeShapeERPKfSD_RPfRiSJ_EEEvDpOT_(%"class.std::__1::vector.59"*, %"struct.tflite::SoftmaxParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float** dereferenceable(8), %"class.tflite::RuntimeShape"* dereferenceable(32), float** dereferenceable(8), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #8 comdat align 2 {
  %9 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 6
  %16 = add nsw i64 %15, 1
  %17 = icmp ugt i64 %16, 288230376151711743
  br i1 %17, label %18, label %20

18:                                               ; preds = %8
  %19 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #20
  unreachable

20:                                               ; preds = %8
  %21 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %13
  %25 = ashr exact i64 %24, 6
  %26 = icmp ult i64 %25, 144115188075855871
  br i1 %26, label %27, label %35

27:                                               ; preds = %20
  %28 = ashr exact i64 %24, 5
  %29 = icmp ult i64 %28, %16
  %30 = select i1 %29, i64 %16, i64 %28
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %27
  %33 = icmp ugt i64 %30, 288230376151711743
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  tail call void @abort() #20
  unreachable

35:                                               ; preds = %20, %32
  %36 = phi i64 [ %30, %32 ], [ 288230376151711743, %20 ]
  %37 = shl i64 %36, 6
  %38 = tail call i8* @_Znwm(i64 %37) #18
  %39 = bitcast i8* %38 to %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*
  br label %40

40:                                               ; preds = %27, %35
  %41 = phi i64 [ %36, %35 ], [ 0, %27 ]
  %42 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %39, %35 ], [ null, %27 ]
  %43 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15
  %44 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %41
  %45 = ptrtoint %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %44 to i64
  %46 = bitcast float** %3 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast float** %5 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = load i32, i32* %6, align 4
  %51 = load i32, i32* %7, align 4
  %52 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %43, i64 0, i32 0, i32 0
  %53 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 0, i32 1
  store %"class.gemmlowp::Allocator"* null, %"class.gemmlowp::Allocator"** %53, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %52, align 8
  %54 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 1
  store %"struct.tflite::SoftmaxParams"* %1, %"struct.tflite::SoftmaxParams"** %54, align 8
  %55 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 2
  store %"class.tflite::RuntimeShape"* %2, %"class.tflite::RuntimeShape"** %55, align 8
  %56 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 3
  %57 = bitcast float** %56 to i64*
  store i64 %47, i64* %57, align 8
  %58 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 4
  store %"class.tflite::RuntimeShape"* %4, %"class.tflite::RuntimeShape"** %58, align 8
  %59 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 5
  %60 = bitcast float** %59 to i64*
  store i64 %49, i64* %60, align 8
  %61 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 6
  store i32 %50, i32* %61, align 8
  %62 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %42, i64 %15, i32 7
  store i32 %51, i32* %62, align 4
  %63 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %43, i64 1
  %64 = ptrtoint %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %63 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %65, align 8
  %67 = ptrtoint %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %66 to i64
  %68 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %9, align 8
  %69 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %68, %66
  br i1 %69, label %124, label %70

70:                                               ; preds = %40
  %71 = getelementptr %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %68, i64 -1, i32 0, i32 0
  %72 = ptrtoint i32 (...)*** %71 to i64
  %73 = sub i64 %72, %67
  %74 = and i64 %73, 64
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %89

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %68, i64 -1
  %78 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %43, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8gemmlowp4TaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %78, align 8
  %79 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %43, i64 -1, i32 0, i32 1
  %80 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %68, i64 -1, i32 0, i32 1
  %81 = bitcast %"class.gemmlowp::Allocator"** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.gemmlowp::Allocator"** %79 to i64*
  store i64 %82, i64* %83, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %78, align 8
  %84 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %43, i64 -1, i32 1
  %85 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %68, i64 -1, i32 1
  %86 = bitcast %"struct.tflite::SoftmaxParams"** %84 to i8*
  %87 = bitcast %"struct.tflite::SoftmaxParams"** %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 48, i1 false) #19
  %88 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %43, i64 -1
  br label %89

89:                                               ; preds = %76, %70
  %90 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ undef, %70 ], [ %88, %76 ]
  %91 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %43, %70 ], [ %88, %76 ]
  %92 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %68, %70 ], [ %77, %76 ]
  %93 = icmp ult i64 %73, 64
  br i1 %93, label %120, label %94

94:                                               ; preds = %89, %94
  %95 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %118, %94 ], [ %91, %89 ]
  %96 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %107, %94 ], [ %92, %89 ]
  %97 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8gemmlowp4TaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %97, align 8
  %98 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -1, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %96, i64 -1, i32 0, i32 1
  %100 = bitcast %"class.gemmlowp::Allocator"** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.gemmlowp::Allocator"** %98 to i64*
  store i64 %101, i64* %102, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %97, align 8
  %103 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -1, i32 1
  %104 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %96, i64 -1, i32 1
  %105 = bitcast %"struct.tflite::SoftmaxParams"** %103 to i8*
  %106 = bitcast %"struct.tflite::SoftmaxParams"** %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 48, i1 false) #19
  %107 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %96, i64 -2
  %108 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8gemmlowp4TaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %108, align 8
  %109 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -2, i32 0, i32 1
  %110 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %96, i64 -2, i32 0, i32 1
  %111 = bitcast %"class.gemmlowp::Allocator"** %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"class.gemmlowp::Allocator"** %109 to i64*
  store i64 %112, i64* %113, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6tflite13optimized_ops17SoftmaxWorkerTaskE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %108, align 8
  %114 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -2, i32 1
  %115 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %96, i64 -2, i32 1
  %116 = bitcast %"struct.tflite::SoftmaxParams"** %114 to i8*
  %117 = bitcast %"struct.tflite::SoftmaxParams"** %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 48, i1 false) #19
  %118 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %95, i64 -2
  %119 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %107, %66
  br i1 %119, label %120, label %94

120:                                              ; preds = %94, %89
  %121 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %90, %89 ], [ %118, %94 ]
  %122 = load i64, i64* %12, align 8
  %123 = load %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"** %9, align 8
  br label %124

124:                                              ; preds = %40, %120
  %125 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %123, %120 ], [ %66, %40 ]
  %126 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %121, %120 ], [ %43, %40 ]
  %127 = phi i64 [ %122, %120 ], [ %67, %40 ]
  %128 = ptrtoint %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %126 to i64
  store i64 %128, i64* %12, align 8
  store i64 %64, i64* %10, align 8
  store i64 %45, i64* %22, align 8
  %129 = inttoptr i64 %127 to %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*
  %130 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %125, %129
  br i1 %130, label %138, label %131

131:                                              ; preds = %124, %131
  %132 = phi %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* [ %133, %131 ], [ %125, %124 ]
  %133 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %132, i64 -1
  %134 = bitcast %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %133 to void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)***
  %135 = load void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)**, void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)*** %134, align 8
  %136 = load void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)*, void (%"struct.tflite::optimized_ops::SoftmaxWorkerTask"*)** %135, align 8
  tail call void %136(%"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %133) #19
  %137 = icmp eq %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %133, %129
  br i1 %137, label %138, label %131

138:                                              ; preds = %131, %124
  %139 = icmp eq i64 %127, 0
  br i1 %139, label %142, label %140

140:                                              ; preds = %138
  %141 = inttoptr i64 %127 to i8*
  tail call void @_ZdlPv(i8* %141) #18
  br label %142

142:                                              ; preds = %138, %140
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #17

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8gemmlowp11WorkersPool7ExecuteIN6tflite13optimized_ops17SoftmaxWorkerTaskEEEviPT_(%"class.gemmlowp::WorkersPool"*, i32, %"struct.tflite::optimized_ops::SoftmaxWorkerTask"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::chrono::duration.268", align 8
  %5 = add nsw i32 %1, -1
  %6 = sext i32 %5 to i64
  tail call void @_ZN8gemmlowp11WorkersPool13CreateWorkersEm(%"class.gemmlowp::WorkersPool"* %0, i64 %6)
  %7 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i64, i64* %7 monotonic, align 8
  store atomic i64 %6, i64* %7 release, align 8
  %9 = icmp eq i32 %5, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 0, i32 0, i32 0
  br label %35

12:                                               ; preds = %46, %3
  %13 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %2, i64 %6, i32 0
  %14 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %2, i64 %6, i32 0, i32 1
  store %"class.gemmlowp::Allocator"* %14, %"class.gemmlowp::Allocator"** %15, align 8
  %16 = bitcast %"struct.gemmlowp::Task"* %13 to void (%"struct.gemmlowp::Task"*)***
  %17 = load void (%"struct.gemmlowp::Task"*)**, void (%"struct.gemmlowp::Task"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"struct.gemmlowp::Task"*)*, void (%"struct.gemmlowp::Task"*)** %17, i64 2
  %19 = load void (%"struct.gemmlowp::Task"*)*, void (%"struct.gemmlowp::Task"*)** %18, align 8
  tail call void %19(%"struct.gemmlowp::Task"* %13) #19
  %20 = load atomic i64, i64* %7 acquire, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %12
  %23 = bitcast %"class.std::__1::chrono::duration.268"* %4 to i8*
  %24 = getelementptr inbounds %"class.std::__1::chrono::duration.268", %"class.std::__1::chrono::duration.268"* %4, i64 0, i32 0
  br label %25

25:                                               ; preds = %30, %22
  %26 = phi i32 [ 0, %22 ], [ %31, %30 ]
  call void asm sideeffect "nop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0A", "~{dirflag},~{fpsr},~{flags}"() #19, !srcloc !636
  %27 = add nsw i32 %26, 64
  %28 = icmp sgt i32 %27, 4000000
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #19
  store i64 1000000, i64* %24, align 8
  call void @_ZNSt3__111this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILl1ELl1000000000EEEEE(%"class.std::__1::chrono::duration.268"* nonnull dereferenceable(8) %4) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #19
  br label %30

30:                                               ; preds = %29, %25
  %31 = phi i32 [ 0, %29 ], [ %27, %25 ]
  %32 = load atomic i64, i64* %7 acquire, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %25

34:                                               ; preds = %30, %12
  ret void

35:                                               ; preds = %10, %46
  %36 = phi i64 [ 0, %10 ], [ %54, %46 ]
  %37 = load %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"*** %11, align 8
  %38 = getelementptr inbounds %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %37, i64 %36
  %39 = load %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %38, align 8
  %40 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %39, i64 0, i32 3
  %41 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %40) #19
  %42 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %39, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = icmp ult i32 %43, 3
  br i1 %44, label %46, label %45

45:                                               ; preds = %35
  tail call void @abort() #20
  unreachable

46:                                               ; preds = %35
  %47 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %2, i64 %36, i32 0
  %48 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %39, i64 0, i32 5
  %49 = getelementptr inbounds %"struct.tflite::optimized_ops::SoftmaxWorkerTask", %"struct.tflite::optimized_ops::SoftmaxWorkerTask"* %2, i64 %36, i32 0, i32 1
  store %"class.gemmlowp::Allocator"* %48, %"class.gemmlowp::Allocator"** %49, align 8
  %50 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %39, i64 0, i32 1
  store %"struct.gemmlowp::Task"* %47, %"struct.gemmlowp::Task"** %50, align 8
  store atomic i32 2, i32* %42 monotonic, align 4
  %51 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %39, i64 0, i32 2
  %52 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %51) #19
  %53 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %40) #19
  %54 = add nuw i64 %36, 1
  %55 = icmp ult i64 %54, %6
  br i1 %55, label %35, label %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8gemmlowp11WorkersPool13CreateWorkersEm(%"class.gemmlowp::WorkersPool"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::chrono::duration.268", align 8
  %4 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.gemmlowp::Worker"*** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.gemmlowp::WorkersPool"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %12, label %130

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 1
  %14 = sub i64 %1, %10
  %15 = getelementptr inbounds %"class.gemmlowp::BlockingCounter", %"class.gemmlowp::BlockingCounter"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i64, i64* %15 monotonic, align 8
  store atomic i64 %14, i64* %15 release, align 8
  %17 = load i64, i64* %5, align 8
  %18 = load i64, i64* %7, align 8
  %19 = sub i64 %17, %18
  %20 = ashr exact i64 %19, 3
  %21 = icmp ult i64 %20, %1
  br i1 %21, label %22, label %115

22:                                               ; preds = %12
  %23 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast %"class.gemmlowp::Worker"*** %23 to i64*
  %25 = getelementptr inbounds %"class.gemmlowp::WorkersPool", %"class.gemmlowp::WorkersPool"* %0, i64 0, i32 0, i32 0, i32 0
  br label %26

26:                                               ; preds = %22, %109
  %27 = tail call i8* @_Znwm(i64 208) #18
  %28 = getelementptr inbounds i8, i8* %27, i64 8
  %29 = bitcast i8* %28 to %"struct.gemmlowp::Task"**
  store %"struct.gemmlowp::Task"* null, %"struct.gemmlowp::Task"** %29, align 8
  %30 = getelementptr inbounds i8, i8* %27, i64 104
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %27, i64 112
  store i8 0, i8* %32, align 8
  %33 = getelementptr inbounds i8, i8* %27, i64 120
  %34 = getelementptr inbounds i8, i8* %27, i64 192
  %35 = bitcast i8* %34 to i64*
  store i64 0, i64* %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 32, i1 false) #19
  %36 = getelementptr inbounds i8, i8* %27, i64 200
  %37 = bitcast i8* %36 to %"class.gemmlowp::BlockingCounter"**
  store %"class.gemmlowp::BlockingCounter"* %13, %"class.gemmlowp::BlockingCounter"** %37, align 8
  %38 = getelementptr inbounds i8, i8* %27, i64 16
  %39 = bitcast i8* %38 to %union.pthread_cond_t*
  %40 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %39, %union.pthread_condattr_t* null) #19
  %41 = getelementptr inbounds i8, i8* %27, i64 64
  %42 = bitcast i8* %41 to %union.pthread_mutex_t*
  %43 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %42, %union.pthread_mutexattr_t* null) #19
  %44 = bitcast i8* %27 to i64*
  %45 = tail call i32 @pthread_create(i64* nonnull %44, %union.pthread_attr_t* null, i8* (i8*)* nonnull @_ZN8gemmlowp6Worker10ThreadFuncEPv, i8* nonnull %27) #19
  %46 = ptrtoint i8* %27 to i64
  %47 = load %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"*** %4, align 8
  %48 = load %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"*** %23, align 8
  %49 = icmp ult %"class.gemmlowp::Worker"** %47, %48
  %50 = ptrtoint %"class.gemmlowp::Worker"** %48 to i64
  br i1 %49, label %51, label %55

51:                                               ; preds = %26
  %52 = bitcast %"class.gemmlowp::Worker"** %47 to i64*
  store i64 %46, i64* %52, align 8
  %53 = getelementptr inbounds %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %47, i64 1
  %54 = ptrtoint %"class.gemmlowp::Worker"** %53 to i64
  store i64 %54, i64* %5, align 8
  br label %109

55:                                               ; preds = %26
  %56 = ptrtoint %"class.gemmlowp::Worker"** %47 to i64
  %57 = load i64, i64* %7, align 8
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 3
  %60 = add nsw i64 %59, 1
  %61 = icmp ugt i64 %60, 2305843009213693951
  br i1 %61, label %62, label %64

62:                                               ; preds = %55
  %63 = bitcast %"class.gemmlowp::WorkersPool"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %63) #20
  unreachable

64:                                               ; preds = %55
  %65 = sub i64 %50, %57
  %66 = ashr exact i64 %65, 3
  %67 = icmp ult i64 %66, 1152921504606846975
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = ashr exact i64 %65, 2
  %70 = icmp ult i64 %69, %60
  %71 = select i1 %70, i64 %60, i64 %69
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %81, label %73

73:                                               ; preds = %68
  %74 = icmp ugt i64 %71, 2305843009213693951
  br i1 %74, label %75, label %76

75:                                               ; preds = %73
  tail call void @abort() #20
  unreachable

76:                                               ; preds = %73, %64
  %77 = phi i64 [ %71, %73 ], [ 2305843009213693951, %64 ]
  %78 = shl i64 %77, 3
  %79 = tail call i8* @_Znwm(i64 %78) #18
  %80 = bitcast i8* %79 to %"class.gemmlowp::Worker"**
  br label %81

81:                                               ; preds = %76, %68
  %82 = phi i64 [ %77, %76 ], [ 0, %68 ]
  %83 = phi %"class.gemmlowp::Worker"** [ %80, %76 ], [ null, %68 ]
  %84 = getelementptr inbounds %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %83, i64 %59
  %85 = getelementptr inbounds %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %83, i64 %82
  %86 = ptrtoint %"class.gemmlowp::Worker"** %85 to i64
  %87 = bitcast %"class.gemmlowp::Worker"** %84 to i64*
  store i64 %46, i64* %87, align 8
  %88 = getelementptr inbounds %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %84, i64 1
  %89 = ptrtoint %"class.gemmlowp::Worker"** %88 to i64
  %90 = load %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"*** %25, align 8
  %91 = load i64, i64* %5, align 8
  %92 = ptrtoint %"class.gemmlowp::Worker"** %90 to i64
  %93 = sub i64 %91, %92
  %94 = ashr exact i64 %93, 3
  %95 = sub nsw i64 0, %94
  %96 = getelementptr inbounds %"class.gemmlowp::Worker"*, %"class.gemmlowp::Worker"** %84, i64 %95
  %97 = ptrtoint %"class.gemmlowp::Worker"** %96 to i64
  %98 = icmp sgt i64 %93, 0
  br i1 %98, label %99, label %103

99:                                               ; preds = %81
  %100 = bitcast %"class.gemmlowp::Worker"** %96 to i8*
  %101 = bitcast %"class.gemmlowp::Worker"** %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 %93, i1 false) #19
  %102 = load %"class.gemmlowp::Worker"**, %"class.gemmlowp::Worker"*** %25, align 8
  br label %103

103:                                              ; preds = %99, %81
  %104 = phi %"class.gemmlowp::Worker"** [ %90, %81 ], [ %102, %99 ]
  store i64 %97, i64* %7, align 8
  store i64 %89, i64* %5, align 8
  store i64 %86, i64* %24, align 8
  %105 = icmp eq %"class.gemmlowp::Worker"** %104, null
  br i1 %105, label %109, label %106

106:                                              ; preds = %103
  %107 = bitcast %"class.gemmlowp::Worker"** %104 to i8*
  tail call void @_ZdlPv(i8* %107) #18
  %108 = load i64, i64* %5, align 8
  br label %109

109:                                              ; preds = %51, %103, %106
  %110 = phi i64 [ %54, %51 ], [ %89, %103 ], [ %108, %106 ]
  %111 = load i64, i64* %7, align 8
  %112 = sub i64 %110, %111
  %113 = ashr exact i64 %112, 3
  %114 = icmp ult i64 %113, %1
  br i1 %114, label %26, label %115

115:                                              ; preds = %109, %12
  %116 = load atomic i64, i64* %15 acquire, align 8
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %130, label %118

118:                                              ; preds = %115
  %119 = bitcast %"class.std::__1::chrono::duration.268"* %3 to i8*
  %120 = getelementptr inbounds %"class.std::__1::chrono::duration.268", %"class.std::__1::chrono::duration.268"* %3, i64 0, i32 0
  br label %121

121:                                              ; preds = %126, %118
  %122 = phi i32 [ 0, %118 ], [ %127, %126 ]
  call void asm sideeffect "nop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0A", "~{dirflag},~{fpsr},~{flags}"() #19, !srcloc !636
  %123 = add nsw i32 %122, 64
  %124 = icmp sgt i32 %123, 4000000
  br i1 %124, label %125, label %126

125:                                              ; preds = %121
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #19
  store i64 1000000, i64* %120, align 8
  call void @_ZNSt3__111this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILl1ELl1000000000EEEEE(%"class.std::__1::chrono::duration.268"* nonnull dereferenceable(8) %3) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #19
  br label %126

126:                                              ; preds = %125, %121
  %127 = phi i32 [ 0, %125 ], [ %123, %121 ]
  %128 = load atomic i64, i64* %15 acquire, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %121

130:                                              ; preds = %126, %115, %2
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #13

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #13

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN8gemmlowp6Worker10ThreadFuncEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.gemmlowp::Worker"*
  tail call void @_ZN8gemmlowp6Worker10ThreadFuncEv(%"class.gemmlowp::Worker"* %2)
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8gemmlowp6Worker10ThreadFuncEv(%"class.gemmlowp::Worker"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %0, i64 0, i32 3
  %3 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2) #19
  %4 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @abort() #20
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %0, i64 0, i32 1
  %10 = load %"struct.gemmlowp::Task"*, %"struct.gemmlowp::Task"** %9, align 8
  %11 = icmp eq %"struct.gemmlowp::Task"* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = bitcast %"struct.gemmlowp::Task"* %10 to void (%"struct.gemmlowp::Task"*)***
  %14 = load void (%"struct.gemmlowp::Task"*)**, void (%"struct.gemmlowp::Task"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"struct.gemmlowp::Task"*)*, void (%"struct.gemmlowp::Task"*)** %14, i64 2
  %16 = load void (%"struct.gemmlowp::Task"*)*, void (%"struct.gemmlowp::Task"*)** %15, align 8
  tail call void %16(%"struct.gemmlowp::Task"* nonnull %10) #19
  store %"struct.gemmlowp::Task"* null, %"struct.gemmlowp::Task"** %9, align 8
  br label %17

17:                                               ; preds = %8, %12
  store atomic i32 1, i32* %4 monotonic, align 4
  %18 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %0, i64 0, i32 2
  %19 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %18) #19
  %20 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #19
  %21 = getelementptr inbounds %"class.gemmlowp::Worker", %"class.gemmlowp::Worker"* %0, i64 0, i32 6
  br label %22

22:                                               ; preds = %61, %17
  %23 = load %"class.gemmlowp::BlockingCounter"*, %"class.gemmlowp::BlockingCounter"** %21, align 8
  %24 = getelementptr inbounds %"class.gemmlowp::BlockingCounter", %"class.gemmlowp::BlockingCounter"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i64* %24, i64 1 acq_rel
  %26 = load atomic i32, i32* %4 acquire, align 4
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %46

28:                                               ; preds = %22, %31
  %29 = phi i32 [ %32, %31 ], [ 0, %22 ]
  %30 = icmp ult i32 %29, 4000000
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  tail call void asm sideeffect "nop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0Anop\0A", "~{dirflag},~{fpsr},~{flags}"() #19, !srcloc !636
  %32 = add nuw nsw i32 %29, 64
  %33 = load atomic i32, i32* %4 acquire, align 4
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %28, label %46

35:                                               ; preds = %28
  %36 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2) #19
  %37 = load atomic i32, i32* %4 acquire, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %43

39:                                               ; preds = %35, %39
  %40 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %18, %union.pthread_mutex_t* %2) #19
  %41 = load atomic i32, i32* %4 acquire, align 4
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %39, label %43

43:                                               ; preds = %39, %35
  %44 = phi i32 [ %37, %35 ], [ %41, %39 ]
  %45 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #19
  br label %46

46:                                               ; preds = %31, %22, %43
  %47 = phi i32 [ %26, %22 ], [ %44, %43 ], [ %33, %31 ]
  switch i32 %47, label %64 [
    i32 2, label %48
    i32 3, label %65
  ]

48:                                               ; preds = %46
  %49 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %2) #19
  %50 = load atomic i32, i32* %4 monotonic, align 4
  %51 = icmp ult i32 %50, 3
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  tail call void @abort() #20
  unreachable

53:                                               ; preds = %48
  %54 = load %"struct.gemmlowp::Task"*, %"struct.gemmlowp::Task"** %9, align 8
  %55 = icmp eq %"struct.gemmlowp::Task"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %53
  %57 = bitcast %"struct.gemmlowp::Task"* %54 to void (%"struct.gemmlowp::Task"*)***
  %58 = load void (%"struct.gemmlowp::Task"*)**, void (%"struct.gemmlowp::Task"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"struct.gemmlowp::Task"*)*, void (%"struct.gemmlowp::Task"*)** %58, i64 2
  %60 = load void (%"struct.gemmlowp::Task"*)*, void (%"struct.gemmlowp::Task"*)** %59, align 8
  tail call void %60(%"struct.gemmlowp::Task"* nonnull %54) #19
  store %"struct.gemmlowp::Task"* null, %"struct.gemmlowp::Task"** %9, align 8
  br label %61

61:                                               ; preds = %53, %56
  store atomic i32 1, i32* %4 monotonic, align 4
  %62 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %18) #19
  %63 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %2) #19
  br label %22

64:                                               ; preds = %46
  tail call void @abort() #20
  unreachable

65:                                               ; preds = %46
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #13

; Function Attrs: nounwind
declare i32 @pthread_cond_broadcast(%union.pthread_cond_t*) local_unnamed_addr #13

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #13

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #5

declare void @_ZNSt3__111this_thread9sleep_forERKNS_6chrono8durationIxNS_5ratioILl1ELl1000000000EEEEE(%"class.std::__1::chrono::duration.268"* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #11

; Function Attrs: nofree nounwind ssp uwtable
define internal double @"_ZNSt3__110__function16__policy_invokerIFddEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_0S2_EEEEdPKNS0_16__policy_storageEd"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, double) #3 align 2 {
  %3 = tail call double @exp(double %1) #19
  ret double %3
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #10

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal double @"_ZNSt3__110__function16__policy_invokerIFddEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeE3$_1S2_EEEEdPKNS0_16__policy_storageEd"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, double) #9 align 2 {
  %3 = fadd double %1, 1.000000e+00
  %4 = fdiv double 1.000000e+00, %3
  ret double %4
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), %"struct.tflite::NdArrayDesc"*, %"struct.tflite::NdArrayDesc"*) local_unnamed_addr #8 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %8, align 8, !alias.scope !637
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8, !noalias !637
  %11 = icmp sgt i32 %10, 4
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @abort() #20, !noalias !637
  unreachable

13:                                               ; preds = %4
  store i32 4, i32* %8, align 8, !alias.scope !637
  %14 = sub i32 4, %10
  %15 = icmp sgt i32 %14, 0
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %15, label %17, label %97

17:                                               ; preds = %13
  %18 = bitcast %union.anon* %16 to [5 x i32]*
  %19 = zext i32 %14 to i64
  %20 = icmp ult i32 %14, 8
  br i1 %20, label %90, label %21

21:                                               ; preds = %17
  %22 = and i64 %19, 4294967288
  %23 = add nsw i64 %22, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 7
  %27 = icmp ult i64 %23, 56
  br i1 %27, label %75, label %28

28:                                               ; preds = %21
  %29 = sub nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %72, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %73, %30 ]
  %33 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %31
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %34, align 8, !alias.scope !637
  %35 = getelementptr inbounds i32, i32* %33, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %36, align 8, !alias.scope !637
  %37 = or i64 %31, 8
  %38 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %39, align 8, !alias.scope !637
  %40 = getelementptr inbounds i32, i32* %38, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %41, align 8, !alias.scope !637
  %42 = or i64 %31, 16
  %43 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 8, !alias.scope !637
  %45 = getelementptr inbounds i32, i32* %43, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %46, align 8, !alias.scope !637
  %47 = or i64 %31, 24
  %48 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %47
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %49, align 8, !alias.scope !637
  %50 = getelementptr inbounds i32, i32* %48, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 8, !alias.scope !637
  %52 = or i64 %31, 32
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %54, align 8, !alias.scope !637
  %55 = getelementptr inbounds i32, i32* %53, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %56, align 8, !alias.scope !637
  %57 = or i64 %31, 40
  %58 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %57
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %59, align 8, !alias.scope !637
  %60 = getelementptr inbounds i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %61, align 8, !alias.scope !637
  %62 = or i64 %31, 48
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %64, align 8, !alias.scope !637
  %65 = getelementptr inbounds i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %66, align 8, !alias.scope !637
  %67 = or i64 %31, 56
  %68 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %69, align 8, !alias.scope !637
  %70 = getelementptr inbounds i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %71, align 8, !alias.scope !637
  %72 = add i64 %31, 64
  %73 = add i64 %32, -8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %30, !llvm.loop !640

75:                                               ; preds = %30, %21
  %76 = phi i64 [ 0, %21 ], [ %72, %30 ]
  %77 = icmp eq i64 %26, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %85, %78 ], [ %76, %75 ]
  %80 = phi i64 [ %86, %78 ], [ %26, %75 ]
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %79
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !637
  %83 = getelementptr inbounds i32, i32* %81, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %84, align 8, !alias.scope !637
  %85 = add i64 %79, 8
  %86 = add i64 %80, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %78, !llvm.loop !641

88:                                               ; preds = %78, %75
  %89 = icmp eq i64 %22, %19
  br i1 %89, label %97, label %90

90:                                               ; preds = %88, %17
  %91 = phi i64 [ 0, %17 ], [ %22, %88 ]
  br label %92

92:                                               ; preds = %90, %92
  %93 = phi i64 [ %95, %92 ], [ %91, %90 ]
  %94 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %93
  store i32 1, i32* %94, align 4, !alias.scope !637
  %95 = add nuw nsw i64 %93, 1
  %96 = icmp eq i64 %95, %19
  br i1 %96, label %97, label %92, !llvm.loop !642

97:                                               ; preds = %92, %88, %13
  %98 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %99 = bitcast %union.anon* %16 to i32*
  %100 = sext i32 %14 to i64
  %101 = getelementptr inbounds i32, i32* %99, i64 %100
  %102 = bitcast i32* %101 to i8*
  %103 = icmp sgt i32 %10, 5
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %105 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8, !noalias !637
  %107 = bitcast %union.anon* %104 to i32*
  %108 = select i1 %103, i32* %106, i32* %107
  %109 = bitcast i32* %108 to i8*
  %110 = sext i32 %10 to i64
  %111 = shl nsw i64 %110, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %109, i64 %111, i1 false) #19
  %112 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 -86, i64 32, i1 false)
  %113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %113, align 8, !alias.scope !643
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %115 = load i32, i32* %114, align 8, !noalias !643
  %116 = icmp sgt i32 %115, 4
  br i1 %116, label %117, label %118

117:                                              ; preds = %97
  tail call void @abort() #20, !noalias !643
  unreachable

118:                                              ; preds = %97
  store i32 4, i32* %113, align 8, !alias.scope !643
  %119 = sub i32 4, %115
  %120 = icmp sgt i32 %119, 0
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %122 = bitcast %union.anon* %121 to [5 x i32]*
  br i1 %120, label %123, label %202

123:                                              ; preds = %118
  %124 = zext i32 %119 to i64
  %125 = icmp ult i32 %119, 8
  br i1 %125, label %195, label %126

126:                                              ; preds = %123
  %127 = and i64 %124, 4294967288
  %128 = add nsw i64 %127, -8
  %129 = lshr exact i64 %128, 3
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 7
  %132 = icmp ult i64 %128, 56
  br i1 %132, label %180, label %133

133:                                              ; preds = %126
  %134 = sub nsw i64 %130, %131
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ 0, %133 ], [ %177, %135 ]
  %137 = phi i64 [ %134, %133 ], [ %178, %135 ]
  %138 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %136
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %139, align 8, !alias.scope !643
  %140 = getelementptr inbounds i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %141, align 8, !alias.scope !643
  %142 = or i64 %136, 8
  %143 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %142
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %144, align 8, !alias.scope !643
  %145 = getelementptr inbounds i32, i32* %143, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %146, align 8, !alias.scope !643
  %147 = or i64 %136, 16
  %148 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %149, align 8, !alias.scope !643
  %150 = getelementptr inbounds i32, i32* %148, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %151, align 8, !alias.scope !643
  %152 = or i64 %136, 24
  %153 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %154, align 8, !alias.scope !643
  %155 = getelementptr inbounds i32, i32* %153, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %156, align 8, !alias.scope !643
  %157 = or i64 %136, 32
  %158 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %157
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %159, align 8, !alias.scope !643
  %160 = getelementptr inbounds i32, i32* %158, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %161, align 8, !alias.scope !643
  %162 = or i64 %136, 40
  %163 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %164, align 8, !alias.scope !643
  %165 = getelementptr inbounds i32, i32* %163, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %166, align 8, !alias.scope !643
  %167 = or i64 %136, 48
  %168 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %169, align 8, !alias.scope !643
  %170 = getelementptr inbounds i32, i32* %168, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %171, align 8, !alias.scope !643
  %172 = or i64 %136, 56
  %173 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %172
  %174 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %174, align 8, !alias.scope !643
  %175 = getelementptr inbounds i32, i32* %173, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %176, align 8, !alias.scope !643
  %177 = add i64 %136, 64
  %178 = add i64 %137, -8
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %135, !llvm.loop !646

180:                                              ; preds = %135, %126
  %181 = phi i64 [ 0, %126 ], [ %177, %135 ]
  %182 = icmp eq i64 %131, 0
  br i1 %182, label %193, label %183

183:                                              ; preds = %180, %183
  %184 = phi i64 [ %190, %183 ], [ %181, %180 ]
  %185 = phi i64 [ %191, %183 ], [ %131, %180 ]
  %186 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %184
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %187, align 8, !alias.scope !643
  %188 = getelementptr inbounds i32, i32* %186, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %189, align 8, !alias.scope !643
  %190 = add i64 %184, 8
  %191 = add i64 %185, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %183, !llvm.loop !647

193:                                              ; preds = %183, %180
  %194 = icmp eq i64 %127, %124
  br i1 %194, label %202, label %195

195:                                              ; preds = %193, %123
  %196 = phi i64 [ 0, %123 ], [ %127, %193 ]
  br label %197

197:                                              ; preds = %195, %197
  %198 = phi i64 [ %200, %197 ], [ %196, %195 ]
  %199 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %198
  store i32 1, i32* %199, align 4, !alias.scope !643
  %200 = add nuw nsw i64 %198, 1
  %201 = icmp eq i64 %200, %124
  br i1 %201, label %202, label %197, !llvm.loop !648

202:                                              ; preds = %197, %193, %118
  %203 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %204 = bitcast %union.anon* %121 to i32*
  %205 = sext i32 %119 to i64
  %206 = getelementptr inbounds i32, i32* %204, i64 %205
  %207 = bitcast i32* %206 to i8*
  %208 = icmp sgt i32 %115, 5
  %209 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %210 = getelementptr inbounds %union.anon, %union.anon* %209, i64 0, i32 0
  %211 = load i32*, i32** %210, align 8, !noalias !643
  %212 = bitcast %union.anon* %209 to i32*
  %213 = select i1 %208, i32* %211, i32* %212
  %214 = bitcast i32* %213 to i8*
  %215 = sext i32 %115 to i64
  %216 = shl nsw i64 %215, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %207, i8* align 4 %214, i64 %216, i1 false) #19
  %217 = bitcast %union.anon* %16 to [5 x i32]*
  %218 = load i32, i32* %8, align 8
  %219 = icmp sgt i32 %218, 5
  %220 = load i32*, i32** %98, align 8
  %221 = getelementptr inbounds i32, i32* %220, i64 3
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1, i64 4
  %223 = bitcast i8* %222 to i32*
  %224 = select i1 %219, i32* %221, i32* %223
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 3
  store i32 %225, i32* %226, align 4
  %227 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 3
  store i32 1, i32* %227, align 4
  %228 = load i32, i32* %224, align 4
  %229 = getelementptr inbounds i32, i32* %220, i64 2
  %230 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1
  %231 = bitcast [16 x i8]* %230 to i32*
  %232 = select i1 %219, i32* %229, i32* %231
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 2
  store i32 %233, i32* %234, align 4
  %235 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 2
  store i32 %228, i32* %235, align 4
  %236 = load i32, i32* %232, align 4
  %237 = mul nsw i32 %236, %228
  %238 = getelementptr inbounds i32, i32* %220, i64 1
  %239 = getelementptr inbounds [5 x i32], [5 x i32]* %217, i64 0, i64 1
  %240 = select i1 %219, i32* %238, i32* %239
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 1
  store i32 %241, i32* %242, align 4
  %243 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 1
  store i32 %237, i32* %243, align 4
  %244 = load i32, i32* %240, align 4
  %245 = mul nsw i32 %244, %237
  %246 = select i1 %219, i32* %220, i32* %99
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 0
  store i32 %247, i32* %248, align 4
  %249 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 0
  store i32 %245, i32* %249, align 4
  %250 = load i32, i32* %113, align 8
  %251 = icmp sgt i32 %250, 5
  %252 = load i32*, i32** %203, align 8
  %253 = getelementptr inbounds i32, i32* %252, i64 3
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1, i64 4
  %255 = bitcast i8* %254 to i32*
  %256 = select i1 %251, i32* %253, i32* %255
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 3
  store i32 %257, i32* %258, align 4
  %259 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 3
  store i32 1, i32* %259, align 4
  %260 = load i32, i32* %256, align 4
  %261 = getelementptr inbounds i32, i32* %252, i64 2
  %262 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1
  %263 = bitcast [16 x i8]* %262 to i32*
  %264 = select i1 %251, i32* %261, i32* %263
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 2
  store i32 %265, i32* %266, align 4
  %267 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 2
  store i32 %260, i32* %267, align 4
  %268 = load i32, i32* %264, align 4
  %269 = mul nsw i32 %268, %260
  %270 = getelementptr inbounds i32, i32* %252, i64 1
  %271 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 1
  %272 = select i1 %251, i32* %270, i32* %271
  %273 = load i32, i32* %272, align 4
  %274 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 1
  store i32 %273, i32* %274, align 4
  %275 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 1
  store i32 %269, i32* %275, align 4
  %276 = load i32, i32* %272, align 4
  %277 = mul nsw i32 %276, %269
  %278 = select i1 %251, i32* %252, i32* %204
  %279 = load i32, i32* %278, align 4
  %280 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 0
  store i32 %279, i32* %280, align 4
  %281 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 0
  store i32 %277, i32* %281, align 4
  %282 = bitcast %union.anon* %16 to i32*
  %283 = select i1 %219, i32* %220, i32* %282
  %284 = load i32, i32* %283, align 4
  %285 = bitcast %union.anon* %121 to i32*
  %286 = select i1 %251, i32* %252, i32* %285
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %284, %287
  br i1 %288, label %302, label %298

289:                                              ; preds = %338
  %290 = bitcast i32* %252 to i8*
  tail call void @_ZdaPv(i8* %290) #18
  br label %291

291:                                              ; preds = %338, %289
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #19
  %292 = xor i1 %219, true
  %293 = icmp eq i32* %220, null
  %294 = or i1 %293, %292
  br i1 %294, label %297, label %295

295:                                              ; preds = %291
  %296 = bitcast i32* %220 to i8*
  tail call void @_ZdaPv(i8* %296) #18
  br label %297

297:                                              ; preds = %291, %295
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #19
  ret void

298:                                              ; preds = %202
  %299 = icmp eq i32 %284, 1
  br i1 %299, label %300, label %301

300:                                              ; preds = %298
  store i32 0, i32* %249, align 4
  store i32 %287, i32* %248, align 4
  br label %302

301:                                              ; preds = %298
  store i32 0, i32* %281, align 4
  store i32 %284, i32* %280, align 4
  br label %302

302:                                              ; preds = %202, %300, %301
  %303 = load i32, i32* %240, align 4
  %304 = load i32, i32* %272, align 4
  %305 = icmp eq i32 %303, %304
  br i1 %305, label %310, label %306

306:                                              ; preds = %302
  %307 = icmp eq i32 %303, 1
  br i1 %307, label %309, label %308

308:                                              ; preds = %306
  store i32 0, i32* %275, align 4
  store i32 %303, i32* %274, align 4
  br label %310

309:                                              ; preds = %306
  store i32 0, i32* %243, align 4
  store i32 %304, i32* %242, align 4
  br label %310

310:                                              ; preds = %309, %308, %302
  %311 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1
  %312 = bitcast [16 x i8]* %311 to i32*
  %313 = select i1 %219, i32* %229, i32* %312
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1
  %316 = bitcast [16 x i8]* %315 to i32*
  %317 = select i1 %251, i32* %261, i32* %316
  %318 = load i32, i32* %317, align 4
  %319 = icmp eq i32 %314, %318
  br i1 %319, label %324, label %320

320:                                              ; preds = %310
  %321 = icmp eq i32 %314, 1
  br i1 %321, label %323, label %322

322:                                              ; preds = %320
  store i32 0, i32* %267, align 4
  store i32 %314, i32* %266, align 4
  br label %324

323:                                              ; preds = %320
  store i32 0, i32* %235, align 4
  store i32 %318, i32* %234, align 4
  br label %324

324:                                              ; preds = %323, %322, %310
  %325 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1, i64 4
  %326 = bitcast i8* %325 to i32*
  %327 = select i1 %219, i32* %221, i32* %326
  %328 = load i32, i32* %327, align 4
  %329 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1, i64 4
  %330 = bitcast i8* %329 to i32*
  %331 = select i1 %251, i32* %253, i32* %330
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %328, %332
  br i1 %333, label %338, label %334

334:                                              ; preds = %324
  %335 = icmp eq i32 %328, 1
  br i1 %335, label %337, label %336

336:                                              ; preds = %334
  store i32 0, i32* %259, align 4
  store i32 %328, i32* %258, align 4
  br label %338

337:                                              ; preds = %334
  store i32 0, i32* %227, align 4
  store i32 %332, i32* %226, align 4
  br label %338

338:                                              ; preds = %337, %336, %324
  %339 = xor i1 %251, true
  %340 = icmp eq i32* %252, null
  %341 = or i1 %340, %339
  br i1 %341, label %291, label %289
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops17QuantizeLeakyReluIhEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::LeakyReluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %9 = icmp sgt i32 %7, 5
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  br label %16

13:                                               ; preds = %5
  %14 = bitcast %union.anon* %8 to i32*
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %119

16:                                               ; preds = %13, %10
  %17 = phi i32* [ %12, %10 ], [ %14, %13 ]
  %18 = zext i32 %7 to i64
  %19 = icmp ult i32 %7, 8
  br i1 %19, label %105, label %20

20:                                               ; preds = %16
  %21 = and i64 %18, 4294967288
  %22 = add nsw i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 3
  %26 = icmp ult i64 %22, 24
  br i1 %26, label %72, label %27

27:                                               ; preds = %20
  %28 = sub nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %69, %29 ]
  %31 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %67, %29 ]
  %32 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %68, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %70, %29 ]
  %34 = getelementptr inbounds i32, i32* %17, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = mul nsw <4 x i32> %36, %31
  %41 = mul nsw <4 x i32> %39, %32
  %42 = or i64 %30, 8
  %43 = getelementptr inbounds i32, i32* %17, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = mul nsw <4 x i32> %45, %40
  %50 = mul nsw <4 x i32> %48, %41
  %51 = or i64 %30, 16
  %52 = getelementptr inbounds i32, i32* %17, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = mul nsw <4 x i32> %54, %49
  %59 = mul nsw <4 x i32> %57, %50
  %60 = or i64 %30, 24
  %61 = getelementptr inbounds i32, i32* %17, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = mul nsw <4 x i32> %63, %58
  %68 = mul nsw <4 x i32> %66, %59
  %69 = add i64 %30, 32
  %70 = add i64 %33, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %29, !llvm.loop !649

72:                                               ; preds = %29, %20
  %73 = phi <4 x i32> [ undef, %20 ], [ %67, %29 ]
  %74 = phi <4 x i32> [ undef, %20 ], [ %68, %29 ]
  %75 = phi i64 [ 0, %20 ], [ %69, %29 ]
  %76 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %67, %29 ]
  %77 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %68, %29 ]
  %78 = icmp eq i64 %25, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %72, %79
  %80 = phi i64 [ %92, %79 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %90, %79 ], [ %76, %72 ]
  %82 = phi <4 x i32> [ %91, %79 ], [ %77, %72 ]
  %83 = phi i64 [ %93, %79 ], [ %25, %72 ]
  %84 = getelementptr inbounds i32, i32* %17, i64 %80
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = mul nsw <4 x i32> %86, %81
  %91 = mul nsw <4 x i32> %89, %82
  %92 = add i64 %80, 8
  %93 = add i64 %83, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !650

95:                                               ; preds = %79, %72
  %96 = phi <4 x i32> [ %73, %72 ], [ %90, %79 ]
  %97 = phi <4 x i32> [ %74, %72 ], [ %91, %79 ]
  %98 = mul <4 x i32> %97, %96
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %100 = mul <4 x i32> %98, %99
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = extractelement <4 x i32> %102, i32 0
  %104 = icmp eq i64 %21, %18
  br i1 %104, label %116, label %105

105:                                              ; preds = %95, %16
  %106 = phi i64 [ 0, %16 ], [ %21, %95 ]
  %107 = phi i32 [ 1, %16 ], [ %103, %95 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %114, %108 ], [ %106, %105 ]
  %110 = phi i32 [ %113, %108 ], [ %107, %105 ]
  %111 = getelementptr inbounds i32, i32* %17, i64 %109
  %112 = load i32, i32* %111, align 4
  %113 = mul nsw i32 %112, %110
  %114 = add nuw nsw i64 %109, 1
  %115 = icmp eq i64 %114, %18
  br i1 %115, label %116, label %108, !llvm.loop !651

116:                                              ; preds = %108, %95
  %117 = phi i32 [ %103, %95 ], [ %113, %108 ]
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %128

119:                                              ; preds = %13, %116
  %120 = phi i32 [ %117, %116 ], [ 1, %13 ]
  %121 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 1
  %122 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 2
  %123 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 3
  %124 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 4
  %125 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 5
  %126 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 6
  %127 = zext i32 %120 to i64
  br label %129

128:                                              ; preds = %210, %116
  ret void

129:                                              ; preds = %210, %119
  %130 = phi i64 [ 0, %119 ], [ %224, %210 ]
  %131 = getelementptr inbounds i8, i8* %2, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = load i32, i32* %121, align 4
  %135 = sub nsw i32 %133, %134
  %136 = icmp sgt i32 %135, -1
  %137 = load i32, i32* %122, align 4
  br i1 %136, label %138, label %174

138:                                              ; preds = %129
  %139 = load i32, i32* %125, align 4
  %140 = load i32, i32* %126, align 4
  %141 = icmp sgt i32 %140, 0
  %142 = sub nsw i32 0, %140
  %143 = select i1 %141, i32 0, i32 %142
  %144 = shl i32 1, %140
  %145 = select i1 %141, i32 %144, i32 1
  %146 = mul nsw i32 %145, %135
  %147 = icmp eq i32 %146, %139
  br i1 %147, label %152, label %148

148:                                              ; preds = %138
  %149 = sext i32 %146 to i64
  %150 = sext i32 %139 to i64
  %151 = mul nsw i64 %149, %150
  br label %156

152:                                              ; preds = %138
  %153 = icmp eq i32 %139, -2147483648
  %154 = sext i32 %139 to i64
  %155 = mul nsw i64 %154, %154
  br i1 %153, label %163, label %156

156:                                              ; preds = %152, %148
  %157 = phi i64 [ %151, %148 ], [ %155, %152 ]
  %158 = icmp sgt i64 %157, -1
  %159 = select i1 %158, i64 1073741824, i64 -1073741823
  %160 = add nsw i64 %159, %157
  %161 = sdiv i64 %160, 2147483648
  %162 = trunc i64 %161 to i32
  br label %163

163:                                              ; preds = %152, %156
  %164 = phi i32 [ %162, %156 ], [ 2147483647, %152 ]
  %165 = zext i32 %143 to i64
  %166 = shl nsw i64 -1, %165
  %167 = trunc i64 %166 to i32
  %168 = xor i32 %167, -1
  %169 = and i32 %164, %168
  %170 = ashr i32 %168, 1
  %171 = lshr i32 %164, 31
  %172 = add nsw i32 %171, %170
  %173 = ashr i32 %164, %143
  br label %210

174:                                              ; preds = %129
  %175 = load i32, i32* %123, align 4
  %176 = load i32, i32* %124, align 4
  %177 = icmp sgt i32 %176, 0
  %178 = sub nsw i32 0, %176
  %179 = select i1 %177, i32 0, i32 %178
  %180 = shl i32 1, %176
  %181 = select i1 %177, i32 %180, i32 1
  %182 = mul nsw i32 %181, %135
  %183 = icmp eq i32 %182, %175
  br i1 %183, label %188, label %184

184:                                              ; preds = %174
  %185 = sext i32 %182 to i64
  %186 = sext i32 %175 to i64
  %187 = mul nsw i64 %185, %186
  br label %192

188:                                              ; preds = %174
  %189 = icmp eq i32 %175, -2147483648
  %190 = sext i32 %175 to i64
  %191 = mul nsw i64 %190, %190
  br i1 %189, label %199, label %192

192:                                              ; preds = %188, %184
  %193 = phi i64 [ %187, %184 ], [ %191, %188 ]
  %194 = icmp sgt i64 %193, -1
  %195 = select i1 %194, i64 1073741824, i64 -1073741823
  %196 = add nsw i64 %195, %193
  %197 = sdiv i64 %196, 2147483648
  %198 = trunc i64 %197 to i32
  br label %199

199:                                              ; preds = %188, %192
  %200 = phi i32 [ %198, %192 ], [ 2147483647, %188 ]
  %201 = zext i32 %179 to i64
  %202 = shl nsw i64 -1, %201
  %203 = trunc i64 %202 to i32
  %204 = xor i32 %203, -1
  %205 = and i32 %200, %204
  %206 = ashr i32 %204, 1
  %207 = lshr i32 %200, 31
  %208 = add nsw i32 %207, %206
  %209 = ashr i32 %200, %179
  br label %210

210:                                              ; preds = %199, %163
  %211 = phi i32 [ %208, %199 ], [ %172, %163 ]
  %212 = phi i32 [ %205, %199 ], [ %169, %163 ]
  %213 = phi i32 [ %209, %199 ], [ %173, %163 ]
  %214 = icmp sgt i32 %212, %211
  %215 = zext i1 %214 to i32
  %216 = add nsw i32 %213, %215
  %217 = add nsw i32 %216, %137
  %218 = icmp sgt i32 %217, 0
  %219 = select i1 %218, i32 %217, i32 0
  %220 = icmp slt i32 %219, 255
  %221 = select i1 %220, i32 %219, i32 255
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %4, i64 %130
  store i8 %222, i8* %223, align 1
  %224 = add nuw nsw i64 %130, 1
  %225 = icmp eq i64 %224, %127
  br i1 %225, label %128, label %129
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops17QuantizeLeakyReluIaEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::LeakyReluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %9 = icmp sgt i32 %7, 5
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  br label %16

13:                                               ; preds = %5
  %14 = bitcast %union.anon* %8 to i32*
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %119

16:                                               ; preds = %13, %10
  %17 = phi i32* [ %12, %10 ], [ %14, %13 ]
  %18 = zext i32 %7 to i64
  %19 = icmp ult i32 %7, 8
  br i1 %19, label %105, label %20

20:                                               ; preds = %16
  %21 = and i64 %18, 4294967288
  %22 = add nsw i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 3
  %26 = icmp ult i64 %22, 24
  br i1 %26, label %72, label %27

27:                                               ; preds = %20
  %28 = sub nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %69, %29 ]
  %31 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %67, %29 ]
  %32 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %68, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %70, %29 ]
  %34 = getelementptr inbounds i32, i32* %17, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = mul nsw <4 x i32> %36, %31
  %41 = mul nsw <4 x i32> %39, %32
  %42 = or i64 %30, 8
  %43 = getelementptr inbounds i32, i32* %17, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = mul nsw <4 x i32> %45, %40
  %50 = mul nsw <4 x i32> %48, %41
  %51 = or i64 %30, 16
  %52 = getelementptr inbounds i32, i32* %17, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = mul nsw <4 x i32> %54, %49
  %59 = mul nsw <4 x i32> %57, %50
  %60 = or i64 %30, 24
  %61 = getelementptr inbounds i32, i32* %17, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = mul nsw <4 x i32> %63, %58
  %68 = mul nsw <4 x i32> %66, %59
  %69 = add i64 %30, 32
  %70 = add i64 %33, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %29, !llvm.loop !652

72:                                               ; preds = %29, %20
  %73 = phi <4 x i32> [ undef, %20 ], [ %67, %29 ]
  %74 = phi <4 x i32> [ undef, %20 ], [ %68, %29 ]
  %75 = phi i64 [ 0, %20 ], [ %69, %29 ]
  %76 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %67, %29 ]
  %77 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %68, %29 ]
  %78 = icmp eq i64 %25, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %72, %79
  %80 = phi i64 [ %92, %79 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %90, %79 ], [ %76, %72 ]
  %82 = phi <4 x i32> [ %91, %79 ], [ %77, %72 ]
  %83 = phi i64 [ %93, %79 ], [ %25, %72 ]
  %84 = getelementptr inbounds i32, i32* %17, i64 %80
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = mul nsw <4 x i32> %86, %81
  %91 = mul nsw <4 x i32> %89, %82
  %92 = add i64 %80, 8
  %93 = add i64 %83, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !653

95:                                               ; preds = %79, %72
  %96 = phi <4 x i32> [ %73, %72 ], [ %90, %79 ]
  %97 = phi <4 x i32> [ %74, %72 ], [ %91, %79 ]
  %98 = mul <4 x i32> %97, %96
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %100 = mul <4 x i32> %98, %99
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = extractelement <4 x i32> %102, i32 0
  %104 = icmp eq i64 %21, %18
  br i1 %104, label %116, label %105

105:                                              ; preds = %95, %16
  %106 = phi i64 [ 0, %16 ], [ %21, %95 ]
  %107 = phi i32 [ 1, %16 ], [ %103, %95 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %114, %108 ], [ %106, %105 ]
  %110 = phi i32 [ %113, %108 ], [ %107, %105 ]
  %111 = getelementptr inbounds i32, i32* %17, i64 %109
  %112 = load i32, i32* %111, align 4
  %113 = mul nsw i32 %112, %110
  %114 = add nuw nsw i64 %109, 1
  %115 = icmp eq i64 %114, %18
  br i1 %115, label %116, label %108, !llvm.loop !654

116:                                              ; preds = %108, %95
  %117 = phi i32 [ %103, %95 ], [ %113, %108 ]
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %128

119:                                              ; preds = %13, %116
  %120 = phi i32 [ %117, %116 ], [ 1, %13 ]
  %121 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 1
  %122 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 2
  %123 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 3
  %124 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 4
  %125 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 5
  %126 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 6
  %127 = zext i32 %120 to i64
  br label %129

128:                                              ; preds = %210, %116
  ret void

129:                                              ; preds = %210, %119
  %130 = phi i64 [ 0, %119 ], [ %224, %210 ]
  %131 = getelementptr inbounds i8, i8* %2, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = sext i8 %132 to i32
  %134 = load i32, i32* %121, align 4
  %135 = sub nsw i32 %133, %134
  %136 = icmp sgt i32 %135, -1
  %137 = load i32, i32* %122, align 4
  br i1 %136, label %138, label %174

138:                                              ; preds = %129
  %139 = load i32, i32* %125, align 4
  %140 = load i32, i32* %126, align 4
  %141 = icmp sgt i32 %140, 0
  %142 = sub nsw i32 0, %140
  %143 = select i1 %141, i32 0, i32 %142
  %144 = shl i32 1, %140
  %145 = select i1 %141, i32 %144, i32 1
  %146 = mul nsw i32 %145, %135
  %147 = icmp eq i32 %146, %139
  br i1 %147, label %152, label %148

148:                                              ; preds = %138
  %149 = sext i32 %146 to i64
  %150 = sext i32 %139 to i64
  %151 = mul nsw i64 %149, %150
  br label %156

152:                                              ; preds = %138
  %153 = icmp eq i32 %139, -2147483648
  %154 = sext i32 %139 to i64
  %155 = mul nsw i64 %154, %154
  br i1 %153, label %163, label %156

156:                                              ; preds = %152, %148
  %157 = phi i64 [ %151, %148 ], [ %155, %152 ]
  %158 = icmp sgt i64 %157, -1
  %159 = select i1 %158, i64 1073741824, i64 -1073741823
  %160 = add nsw i64 %159, %157
  %161 = sdiv i64 %160, 2147483648
  %162 = trunc i64 %161 to i32
  br label %163

163:                                              ; preds = %152, %156
  %164 = phi i32 [ %162, %156 ], [ 2147483647, %152 ]
  %165 = zext i32 %143 to i64
  %166 = shl nsw i64 -1, %165
  %167 = trunc i64 %166 to i32
  %168 = xor i32 %167, -1
  %169 = and i32 %164, %168
  %170 = ashr i32 %168, 1
  %171 = lshr i32 %164, 31
  %172 = add nsw i32 %171, %170
  %173 = ashr i32 %164, %143
  br label %210

174:                                              ; preds = %129
  %175 = load i32, i32* %123, align 4
  %176 = load i32, i32* %124, align 4
  %177 = icmp sgt i32 %176, 0
  %178 = sub nsw i32 0, %176
  %179 = select i1 %177, i32 0, i32 %178
  %180 = shl i32 1, %176
  %181 = select i1 %177, i32 %180, i32 1
  %182 = mul nsw i32 %181, %135
  %183 = icmp eq i32 %182, %175
  br i1 %183, label %188, label %184

184:                                              ; preds = %174
  %185 = sext i32 %182 to i64
  %186 = sext i32 %175 to i64
  %187 = mul nsw i64 %185, %186
  br label %192

188:                                              ; preds = %174
  %189 = icmp eq i32 %175, -2147483648
  %190 = sext i32 %175 to i64
  %191 = mul nsw i64 %190, %190
  br i1 %189, label %199, label %192

192:                                              ; preds = %188, %184
  %193 = phi i64 [ %187, %184 ], [ %191, %188 ]
  %194 = icmp sgt i64 %193, -1
  %195 = select i1 %194, i64 1073741824, i64 -1073741823
  %196 = add nsw i64 %195, %193
  %197 = sdiv i64 %196, 2147483648
  %198 = trunc i64 %197 to i32
  br label %199

199:                                              ; preds = %188, %192
  %200 = phi i32 [ %198, %192 ], [ 2147483647, %188 ]
  %201 = zext i32 %179 to i64
  %202 = shl nsw i64 -1, %201
  %203 = trunc i64 %202 to i32
  %204 = xor i32 %203, -1
  %205 = and i32 %200, %204
  %206 = ashr i32 %204, 1
  %207 = lshr i32 %200, 31
  %208 = add nsw i32 %207, %206
  %209 = ashr i32 %200, %179
  br label %210

210:                                              ; preds = %199, %163
  %211 = phi i32 [ %208, %199 ], [ %172, %163 ]
  %212 = phi i32 [ %205, %199 ], [ %169, %163 ]
  %213 = phi i32 [ %209, %199 ], [ %173, %163 ]
  %214 = icmp sgt i32 %212, %211
  %215 = zext i1 %214 to i32
  %216 = add nsw i32 %213, %215
  %217 = add nsw i32 %216, %137
  %218 = icmp sgt i32 %217, -128
  %219 = select i1 %218, i32 %217, i32 -128
  %220 = icmp slt i32 %219, 127
  %221 = select i1 %220, i32 %219, i32 127
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %4, i64 %130
  store i8 %222, i8* %223, align 1
  %224 = add nuw nsw i64 %130, 1
  %225 = icmp eq i64 %224, %127
  br i1 %225, label %128, label %129
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops17QuantizeLeakyReluIsEEvRKNS_15LeakyReluParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::LeakyReluParams"* dereferenceable(28), %"class.tflite::RuntimeShape"* dereferenceable(32), i16*, %"class.tflite::RuntimeShape"* dereferenceable(32), i16*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %9 = icmp sgt i32 %7, 5
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  br label %16

13:                                               ; preds = %5
  %14 = bitcast %union.anon* %8 to i32*
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %119

16:                                               ; preds = %13, %10
  %17 = phi i32* [ %12, %10 ], [ %14, %13 ]
  %18 = zext i32 %7 to i64
  %19 = icmp ult i32 %7, 8
  br i1 %19, label %105, label %20

20:                                               ; preds = %16
  %21 = and i64 %18, 4294967288
  %22 = add nsw i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 3
  %26 = icmp ult i64 %22, 24
  br i1 %26, label %72, label %27

27:                                               ; preds = %20
  %28 = sub nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %69, %29 ]
  %31 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %67, %29 ]
  %32 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %68, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %70, %29 ]
  %34 = getelementptr inbounds i32, i32* %17, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = mul nsw <4 x i32> %36, %31
  %41 = mul nsw <4 x i32> %39, %32
  %42 = or i64 %30, 8
  %43 = getelementptr inbounds i32, i32* %17, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = mul nsw <4 x i32> %45, %40
  %50 = mul nsw <4 x i32> %48, %41
  %51 = or i64 %30, 16
  %52 = getelementptr inbounds i32, i32* %17, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = mul nsw <4 x i32> %54, %49
  %59 = mul nsw <4 x i32> %57, %50
  %60 = or i64 %30, 24
  %61 = getelementptr inbounds i32, i32* %17, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = mul nsw <4 x i32> %63, %58
  %68 = mul nsw <4 x i32> %66, %59
  %69 = add i64 %30, 32
  %70 = add i64 %33, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %29, !llvm.loop !655

72:                                               ; preds = %29, %20
  %73 = phi <4 x i32> [ undef, %20 ], [ %67, %29 ]
  %74 = phi <4 x i32> [ undef, %20 ], [ %68, %29 ]
  %75 = phi i64 [ 0, %20 ], [ %69, %29 ]
  %76 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %67, %29 ]
  %77 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %68, %29 ]
  %78 = icmp eq i64 %25, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %72, %79
  %80 = phi i64 [ %92, %79 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %90, %79 ], [ %76, %72 ]
  %82 = phi <4 x i32> [ %91, %79 ], [ %77, %72 ]
  %83 = phi i64 [ %93, %79 ], [ %25, %72 ]
  %84 = getelementptr inbounds i32, i32* %17, i64 %80
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = mul nsw <4 x i32> %86, %81
  %91 = mul nsw <4 x i32> %89, %82
  %92 = add i64 %80, 8
  %93 = add i64 %83, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !656

95:                                               ; preds = %79, %72
  %96 = phi <4 x i32> [ %73, %72 ], [ %90, %79 ]
  %97 = phi <4 x i32> [ %74, %72 ], [ %91, %79 ]
  %98 = mul <4 x i32> %97, %96
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %100 = mul <4 x i32> %98, %99
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = extractelement <4 x i32> %102, i32 0
  %104 = icmp eq i64 %21, %18
  br i1 %104, label %116, label %105

105:                                              ; preds = %95, %16
  %106 = phi i64 [ 0, %16 ], [ %21, %95 ]
  %107 = phi i32 [ 1, %16 ], [ %103, %95 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %114, %108 ], [ %106, %105 ]
  %110 = phi i32 [ %113, %108 ], [ %107, %105 ]
  %111 = getelementptr inbounds i32, i32* %17, i64 %109
  %112 = load i32, i32* %111, align 4
  %113 = mul nsw i32 %112, %110
  %114 = add nuw nsw i64 %109, 1
  %115 = icmp eq i64 %114, %18
  br i1 %115, label %116, label %108, !llvm.loop !657

116:                                              ; preds = %108, %95
  %117 = phi i32 [ %103, %95 ], [ %113, %108 ]
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %128

119:                                              ; preds = %13, %116
  %120 = phi i32 [ %117, %116 ], [ 1, %13 ]
  %121 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 1
  %122 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 2
  %123 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 3
  %124 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 4
  %125 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 5
  %126 = getelementptr inbounds %"struct.tflite::LeakyReluParams", %"struct.tflite::LeakyReluParams"* %0, i64 0, i32 6
  %127 = zext i32 %120 to i64
  br label %129

128:                                              ; preds = %210, %116
  ret void

129:                                              ; preds = %210, %119
  %130 = phi i64 [ 0, %119 ], [ %224, %210 ]
  %131 = getelementptr inbounds i16, i16* %2, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i32
  %134 = load i32, i32* %121, align 4
  %135 = sub nsw i32 %133, %134
  %136 = icmp sgt i32 %135, -1
  %137 = load i32, i32* %122, align 4
  br i1 %136, label %138, label %174

138:                                              ; preds = %129
  %139 = load i32, i32* %125, align 4
  %140 = load i32, i32* %126, align 4
  %141 = icmp sgt i32 %140, 0
  %142 = sub nsw i32 0, %140
  %143 = select i1 %141, i32 0, i32 %142
  %144 = shl i32 1, %140
  %145 = select i1 %141, i32 %144, i32 1
  %146 = mul nsw i32 %145, %135
  %147 = icmp eq i32 %146, %139
  br i1 %147, label %152, label %148

148:                                              ; preds = %138
  %149 = sext i32 %146 to i64
  %150 = sext i32 %139 to i64
  %151 = mul nsw i64 %149, %150
  br label %156

152:                                              ; preds = %138
  %153 = icmp eq i32 %139, -2147483648
  %154 = sext i32 %139 to i64
  %155 = mul nsw i64 %154, %154
  br i1 %153, label %163, label %156

156:                                              ; preds = %152, %148
  %157 = phi i64 [ %151, %148 ], [ %155, %152 ]
  %158 = icmp sgt i64 %157, -1
  %159 = select i1 %158, i64 1073741824, i64 -1073741823
  %160 = add nsw i64 %159, %157
  %161 = sdiv i64 %160, 2147483648
  %162 = trunc i64 %161 to i32
  br label %163

163:                                              ; preds = %152, %156
  %164 = phi i32 [ %162, %156 ], [ 2147483647, %152 ]
  %165 = zext i32 %143 to i64
  %166 = shl nsw i64 -1, %165
  %167 = trunc i64 %166 to i32
  %168 = xor i32 %167, -1
  %169 = and i32 %164, %168
  %170 = ashr i32 %168, 1
  %171 = lshr i32 %164, 31
  %172 = add nsw i32 %171, %170
  %173 = ashr i32 %164, %143
  br label %210

174:                                              ; preds = %129
  %175 = load i32, i32* %123, align 4
  %176 = load i32, i32* %124, align 4
  %177 = icmp sgt i32 %176, 0
  %178 = sub nsw i32 0, %176
  %179 = select i1 %177, i32 0, i32 %178
  %180 = shl i32 1, %176
  %181 = select i1 %177, i32 %180, i32 1
  %182 = mul nsw i32 %181, %135
  %183 = icmp eq i32 %182, %175
  br i1 %183, label %188, label %184

184:                                              ; preds = %174
  %185 = sext i32 %182 to i64
  %186 = sext i32 %175 to i64
  %187 = mul nsw i64 %185, %186
  br label %192

188:                                              ; preds = %174
  %189 = icmp eq i32 %175, -2147483648
  %190 = sext i32 %175 to i64
  %191 = mul nsw i64 %190, %190
  br i1 %189, label %199, label %192

192:                                              ; preds = %188, %184
  %193 = phi i64 [ %187, %184 ], [ %191, %188 ]
  %194 = icmp sgt i64 %193, -1
  %195 = select i1 %194, i64 1073741824, i64 -1073741823
  %196 = add nsw i64 %195, %193
  %197 = sdiv i64 %196, 2147483648
  %198 = trunc i64 %197 to i32
  br label %199

199:                                              ; preds = %188, %192
  %200 = phi i32 [ %198, %192 ], [ 2147483647, %188 ]
  %201 = zext i32 %179 to i64
  %202 = shl nsw i64 -1, %201
  %203 = trunc i64 %202 to i32
  %204 = xor i32 %203, -1
  %205 = and i32 %200, %204
  %206 = ashr i32 %204, 1
  %207 = lshr i32 %200, 31
  %208 = add nsw i32 %207, %206
  %209 = ashr i32 %200, %179
  br label %210

210:                                              ; preds = %199, %163
  %211 = phi i32 [ %208, %199 ], [ %172, %163 ]
  %212 = phi i32 [ %205, %199 ], [ %169, %163 ]
  %213 = phi i32 [ %209, %199 ], [ %173, %163 ]
  %214 = icmp sgt i32 %212, %211
  %215 = zext i1 %214 to i32
  %216 = add nsw i32 %213, %215
  %217 = add nsw i32 %216, %137
  %218 = icmp sgt i32 %217, -32768
  %219 = select i1 %218, i32 %217, i32 -32768
  %220 = icmp slt i32 %219, 32767
  %221 = select i1 %220, i32 %219, i32 32767
  %222 = trunc i32 %221 to i16
  %223 = getelementptr inbounds i16, i16* %4, i64 %130
  store i16 %222, i16* %223, align 2
  %224 = add nuw nsw i64 %130, 1
  %225 = icmp eq i64 %224, %127
  br i1 %225, label %128, label %129
}

declare zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float, i32*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = tail call float @tanhf(float %1) #19
  ret float %3
}

; Function Attrs: nofree nounwind
declare float @tanhf(float) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = tail call float @tanhf(float %1) #19
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6tflite3ops7builtin11activations12_GLOBAL__N_120EvalUsingLookupTableEPNS2_6OpDataEPK12TfLiteTensorPS6_(%"struct.tflite::ops::builtin::activations::OpData"* nocapture readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly) unnamed_addr #0 {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #19
  %7 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %9, align 8, !alias.scope !658
  br label %35

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %12 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %11, align 8, !noalias !658
  %13 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 4, !noalias !658
  %15 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %12, i64 0, i32 1, i64 0
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %14, i32* %16, align 8, !alias.scope !658
  %17 = icmp sgt i32 %14, 5
  br i1 %17, label %18, label %25

18:                                               ; preds = %10
  %19 = sext i32 %14 to i64
  %20 = shl nsw i64 %19, 2
  %21 = tail call i8* @_Znam(i64 %20) #18, !noalias !658
  %22 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %21, i8** %23, align 8, !alias.scope !658
  %24 = bitcast i8* %21 to i32*
  br label %30

25:                                               ; preds = %10
  %26 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %27 = bitcast %union.anon* %26 to i32*
  %28 = sext i32 %14 to i64
  %29 = shl nsw i64 %28, 2
  br label %30

30:                                               ; preds = %25, %18
  %31 = phi i64 [ %20, %18 ], [ %29, %25 ]
  %32 = phi i32* [ %24, %18 ], [ %27, %25 ]
  %33 = bitcast i32* %32 to i8*
  %34 = bitcast i32* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 %31, i1 false) #19
  br label %35

35:                                               ; preds = %8, %30
  %36 = phi i32 [ 0, %8 ], [ %14, %30 ]
  %37 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #19
  %38 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %40, align 8, !alias.scope !661
  br label %66

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8, !noalias !661
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4, !noalias !661
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %47 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %45, i32* %47, align 8, !alias.scope !661
  %48 = icmp sgt i32 %45, 5
  br i1 %48, label %49, label %56

49:                                               ; preds = %41
  %50 = sext i32 %45 to i64
  %51 = shl nsw i64 %50, 2
  %52 = tail call i8* @_Znam(i64 %51) #18, !noalias !661
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8, !alias.scope !661
  %55 = bitcast i8* %52 to i32*
  br label %61

56:                                               ; preds = %41
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i32*
  %59 = sext i32 %45 to i64
  %60 = shl nsw i64 %59, 2
  br label %61

61:                                               ; preds = %56, %49
  %62 = phi i64 [ %51, %49 ], [ %60, %56 ]
  %63 = phi i32* [ %55, %49 ], [ %58, %56 ]
  %64 = bitcast i32* %63 to i8*
  %65 = bitcast i32* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %62, i1 false) #19
  br label %66

66:                                               ; preds = %39, %61
  %67 = phi i32 [ 0, %39 ], [ %45, %61 ]
  %68 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %69 = icmp sgt i32 %36, 5
  br i1 %69, label %70, label %73

70:                                               ; preds = %66
  %71 = getelementptr inbounds %union.anon, %union.anon* %68, i64 0, i32 0
  %72 = load i32*, i32** %71, align 8
  br label %76

73:                                               ; preds = %66
  %74 = bitcast %union.anon* %68 to i32*
  %75 = icmp sgt i32 %36, 0
  br i1 %75, label %76, label %176

76:                                               ; preds = %73, %70
  %77 = phi i32* [ %72, %70 ], [ %74, %73 ]
  %78 = zext i32 %36 to i64
  %79 = icmp ult i32 %36, 8
  br i1 %79, label %165, label %80

80:                                               ; preds = %76
  %81 = and i64 %78, 4294967288
  %82 = add nsw i64 %81, -8
  %83 = lshr exact i64 %82, 3
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 3
  %86 = icmp ult i64 %82, 24
  br i1 %86, label %132, label %87

87:                                               ; preds = %80
  %88 = sub nsw i64 %84, %85
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i64 [ 0, %87 ], [ %129, %89 ]
  %91 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %87 ], [ %127, %89 ]
  %92 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %87 ], [ %128, %89 ]
  %93 = phi i64 [ %88, %87 ], [ %130, %89 ]
  %94 = getelementptr inbounds i32, i32* %77, i64 %90
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4
  %97 = getelementptr inbounds i32, i32* %94, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4
  %100 = mul nsw <4 x i32> %96, %91
  %101 = mul nsw <4 x i32> %99, %92
  %102 = or i64 %90, 8
  %103 = getelementptr inbounds i32, i32* %77, i64 %102
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4
  %106 = getelementptr inbounds i32, i32* %103, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = mul nsw <4 x i32> %105, %100
  %110 = mul nsw <4 x i32> %108, %101
  %111 = or i64 %90, 16
  %112 = getelementptr inbounds i32, i32* %77, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4
  %115 = getelementptr inbounds i32, i32* %112, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4
  %118 = mul nsw <4 x i32> %114, %109
  %119 = mul nsw <4 x i32> %117, %110
  %120 = or i64 %90, 24
  %121 = getelementptr inbounds i32, i32* %77, i64 %120
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = getelementptr inbounds i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4
  %127 = mul nsw <4 x i32> %123, %118
  %128 = mul nsw <4 x i32> %126, %119
  %129 = add i64 %90, 32
  %130 = add i64 %93, -4
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %89, !llvm.loop !664

132:                                              ; preds = %89, %80
  %133 = phi <4 x i32> [ undef, %80 ], [ %127, %89 ]
  %134 = phi <4 x i32> [ undef, %80 ], [ %128, %89 ]
  %135 = phi i64 [ 0, %80 ], [ %129, %89 ]
  %136 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %80 ], [ %127, %89 ]
  %137 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %80 ], [ %128, %89 ]
  %138 = icmp eq i64 %85, 0
  br i1 %138, label %155, label %139

139:                                              ; preds = %132, %139
  %140 = phi i64 [ %152, %139 ], [ %135, %132 ]
  %141 = phi <4 x i32> [ %150, %139 ], [ %136, %132 ]
  %142 = phi <4 x i32> [ %151, %139 ], [ %137, %132 ]
  %143 = phi i64 [ %153, %139 ], [ %85, %132 ]
  %144 = getelementptr inbounds i32, i32* %77, i64 %140
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = add i64 %140, 8
  %153 = add i64 %143, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %139, !llvm.loop !665

155:                                              ; preds = %139, %132
  %156 = phi <4 x i32> [ %133, %132 ], [ %150, %139 ]
  %157 = phi <4 x i32> [ %134, %132 ], [ %151, %139 ]
  %158 = mul <4 x i32> %157, %156
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %160 = mul <4 x i32> %158, %159
  %161 = shufflevector <4 x i32> %160, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %162 = mul <4 x i32> %160, %161
  %163 = extractelement <4 x i32> %162, i32 0
  %164 = icmp eq i64 %81, %78
  br i1 %164, label %176, label %165

165:                                              ; preds = %155, %76
  %166 = phi i64 [ 0, %76 ], [ %81, %155 ]
  %167 = phi i32 [ 1, %76 ], [ %163, %155 ]
  br label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %174, %168 ], [ %166, %165 ]
  %170 = phi i32 [ %173, %168 ], [ %167, %165 ]
  %171 = getelementptr inbounds i32, i32* %77, i64 %169
  %172 = load i32, i32* %171, align 4
  %173 = mul nsw i32 %172, %170
  %174 = add nuw nsw i64 %169, 1
  %175 = icmp eq i64 %174, %78
  br i1 %175, label %176, label %168, !llvm.loop !666

176:                                              ; preds = %168, %155, %73
  %177 = phi i32 [ 1, %73 ], [ %163, %155 ], [ %173, %168 ]
  %178 = icmp sgt i32 %67, 5
  br i1 %178, label %179, label %185

179:                                              ; preds = %176
  %180 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %181 = load i32*, i32** %180, align 8
  %182 = icmp eq i32* %181, null
  br i1 %182, label %185, label %183

183:                                              ; preds = %179
  %184 = bitcast i32* %181 to i8*
  tail call void @_ZdaPv(i8* %184) #18
  br label %185

185:                                              ; preds = %176, %179, %183
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #19
  br i1 %69, label %186, label %192

186:                                              ; preds = %185
  %187 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %188 = load i32*, i32** %187, align 8
  %189 = icmp eq i32* %188, null
  br i1 %189, label %192, label %190

190:                                              ; preds = %186
  %191 = bitcast i32* %188 to i8*
  tail call void @_ZdaPv(i8* %191) #18
  br label %192

192:                                              ; preds = %185, %186, %190
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #19
  br i1 %38, label %197, label %193

193:                                              ; preds = %192
  %194 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %195 = bitcast %union.TfLitePtrUnion* %194 to i8**
  %196 = load i8*, i8** %195, align 8
  br label %197

197:                                              ; preds = %192, %193
  %198 = phi i8* [ %196, %193 ], [ null, %192 ]
  br i1 %7, label %203, label %199

199:                                              ; preds = %197
  %200 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %201 = bitcast %union.TfLitePtrUnion* %200 to i8**
  %202 = load i8*, i8** %201, align 8
  br label %203

203:                                              ; preds = %197, %199
  %204 = phi i8* [ %202, %199 ], [ null, %197 ]
  %205 = icmp sgt i32 %177, 0
  br i1 %205, label %206, label %261

206:                                              ; preds = %203
  %207 = zext i32 %177 to i64
  %208 = add nsw i64 %207, -1
  %209 = and i64 %207, 3
  %210 = icmp ult i64 %208, 3
  br i1 %210, label %246, label %211

211:                                              ; preds = %206
  %212 = sub nsw i64 %207, %209
  br label %213

213:                                              ; preds = %213, %211
  %214 = phi i64 [ 0, %211 ], [ %243, %213 ]
  %215 = phi i64 [ %212, %211 ], [ %244, %213 ]
  %216 = getelementptr inbounds i8, i8* %204, i64 %214
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i64
  %219 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %0, i64 0, i32 4, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = getelementptr inbounds i8, i8* %198, i64 %214
  store i8 %220, i8* %221, align 1
  %222 = or i64 %214, 1
  %223 = getelementptr inbounds i8, i8* %204, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i64
  %226 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %0, i64 0, i32 4, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = getelementptr inbounds i8, i8* %198, i64 %222
  store i8 %227, i8* %228, align 1
  %229 = or i64 %214, 2
  %230 = getelementptr inbounds i8, i8* %204, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i64
  %233 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %0, i64 0, i32 4, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = getelementptr inbounds i8, i8* %198, i64 %229
  store i8 %234, i8* %235, align 1
  %236 = or i64 %214, 3
  %237 = getelementptr inbounds i8, i8* %204, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i64
  %240 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %0, i64 0, i32 4, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = getelementptr inbounds i8, i8* %198, i64 %236
  store i8 %241, i8* %242, align 1
  %243 = add nuw nsw i64 %214, 4
  %244 = add i64 %215, -4
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %213

246:                                              ; preds = %213, %206
  %247 = phi i64 [ 0, %206 ], [ %243, %213 ]
  %248 = icmp eq i64 %209, 0
  br i1 %248, label %261, label %249

249:                                              ; preds = %246, %249
  %250 = phi i64 [ %258, %249 ], [ %247, %246 ]
  %251 = phi i64 [ %259, %249 ], [ %209, %246 ]
  %252 = getelementptr inbounds i8, i8* %204, i64 %250
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds %"struct.tflite::ops::builtin::activations::OpData", %"struct.tflite::ops::builtin::activations::OpData"* %0, i64 0, i32 4, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = getelementptr inbounds i8, i8* %198, i64 %250
  store i8 %256, i8* %257, align 1
  %258 = add nuw nsw i64 %250, 1
  %259 = add i64 %251, -1
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %249, !llvm.loop !667

261:                                              ; preds = %246, %249, %203
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = tail call float @tanhf(float %1) #19
  ret float %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations11TanhPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = tail call float @tanhf(float %1) #19
  ret float %3
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKNS4_INS5_IKS7_Li0ES9_EEEEEEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSO_(%"class.Eigen::internal::generic_dense_assignment_kernel.342"* dereferenceable(32)) local_unnamed_addr #12 comdat align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::ArrayWrapper.320"** %2 to %"struct.Eigen::EigenBase.326"**
  %4 = load %"struct.Eigen::EigenBase.326"*, %"struct.Eigen::EigenBase.326"** %3, align 8
  %5 = getelementptr inbounds %"struct.Eigen::EigenBase.326", %"struct.Eigen::EigenBase.326"* %4, i64 8
  %6 = bitcast %"struct.Eigen::EigenBase.326"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"struct.Eigen::EigenBase.326"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %1
  %13 = lshr i64 %9, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 3
  %16 = icmp slt i64 %15, %7
  %17 = select i1 %16, i64 %15, i64 %7
  br label %18

18:                                               ; preds = %1, %12
  %19 = phi i64 [ %17, %12 ], [ %7, %1 ]
  %20 = sub nsw i64 %7, %19
  %21 = sdiv i64 %20, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %22, %19
  %24 = icmp sgt i64 %19, 0
  br i1 %24, label %25, label %72

25:                                               ; preds = %18
  %26 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base.339"**
  %27 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0, i64 0, i32 1
  %28 = bitcast %"struct.Eigen::internal::evaluator.327"** %27 to %"struct.Eigen::internal::unary_evaluator.328"**
  br label %29

29:                                               ; preds = %29, %25
  %30 = phi i64 [ 0, %25 ], [ %70, %29 ]
  %31 = load %"struct.Eigen::internal::evaluator_wrapper_base.339"*, %"struct.Eigen::internal::evaluator_wrapper_base.339"** %26, align 8
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base.339", %"struct.Eigen::internal::evaluator_wrapper_base.339"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load float*, float** %32, align 8
  %34 = getelementptr inbounds float, float* %33, i64 %30
  %35 = load %"struct.Eigen::internal::unary_evaluator.328"*, %"struct.Eigen::internal::unary_evaluator.328"** %28, align 8
  %36 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator.328", %"struct.Eigen::internal::unary_evaluator.328"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load float*, float** %36, align 8
  %38 = getelementptr inbounds float, float* %37, i64 %30
  %39 = load float, float* %38, align 4
  %40 = fcmp ogt float %39, 0x401F9F09E0000000
  %41 = select i1 %40, float 0x401F9F09E0000000, float %39
  %42 = fcmp olt float %41, 0xC01F9F09E0000000
  %43 = select i1 %42, float 0xC01F9F09E0000000, float %41
  %44 = tail call float @llvm.fabs.f32(float %39) #19
  %45 = fcmp olt float %44, 0x3F3A36E2E0000000
  %46 = select i1 %45, float 0xFFFFFFFFE0000000, float 0.000000e+00
  %47 = fmul float %43, %43
  %48 = fmul float %47, 0x3CB3E4B800000000
  %49 = fsub float 0x3D4C266FC0000000, %48
  %50 = fmul float %47, %49
  %51 = fadd float %50, 0xBDD7A6FFE0000000
  %52 = fmul float %47, %51
  %53 = fadd float %52, 0x3E6B800820000000
  %54 = fmul float %47, %53
  %55 = fadd float %54, 0x3EEF286940000000
  %56 = fmul float %47, %55
  %57 = fadd float %56, 0x3F44E1BDA0000000
  %58 = fmul float %47, %57
  %59 = fadd float %58, 0x3F740B3B80000000
  %60 = fmul float %43, %59
  %61 = fmul float %47, 0x3EB41A7B00000000
  %62 = fadd float %61, 0x3F1F12BAC0000000
  %63 = fmul float %47, %62
  %64 = fadd float %63, 0x3F629540A0000000
  %65 = fmul float %47, %64
  %66 = fadd float %65, 0x3F740B3BA0000000
  %67 = fdiv float %60, %66
  %68 = fcmp oeq float %46, 0.000000e+00
  %69 = select i1 %68, float %67, float %43
  store float %69, float* %34, align 4
  %70 = add nuw nsw i64 %30, 1
  %71 = icmp eq i64 %70, %19
  br i1 %71, label %72, label %29

72:                                               ; preds = %29, %18
  %73 = icmp sgt i64 %20, 3
  br i1 %73, label %74, label %78

74:                                               ; preds = %72
  %75 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base.339"**
  %76 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0, i64 0, i32 1
  %77 = bitcast %"struct.Eigen::internal::evaluator.327"** %76 to %"struct.Eigen::internal::unary_evaluator.328"**
  br label %128

78:                                               ; preds = %128, %72
  %79 = icmp slt i64 %23, %7
  br i1 %79, label %80, label %127

80:                                               ; preds = %78
  %81 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base.339"**
  %82 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel.342", %"class.Eigen::internal::generic_dense_assignment_kernel.342"* %0, i64 0, i32 1
  %83 = bitcast %"struct.Eigen::internal::evaluator.327"** %82 to %"struct.Eigen::internal::unary_evaluator.328"**
  br label %84

84:                                               ; preds = %84, %80
  %85 = phi i64 [ %23, %80 ], [ %125, %84 ]
  %86 = load %"struct.Eigen::internal::evaluator_wrapper_base.339"*, %"struct.Eigen::internal::evaluator_wrapper_base.339"** %81, align 8
  %87 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base.339", %"struct.Eigen::internal::evaluator_wrapper_base.339"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = load float*, float** %87, align 8
  %89 = getelementptr inbounds float, float* %88, i64 %85
  %90 = load %"struct.Eigen::internal::unary_evaluator.328"*, %"struct.Eigen::internal::unary_evaluator.328"** %83, align 8
  %91 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator.328", %"struct.Eigen::internal::unary_evaluator.328"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load float*, float** %91, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %85
  %94 = load float, float* %93, align 4
  %95 = fcmp ogt float %94, 0x401F9F09E0000000
  %96 = select i1 %95, float 0x401F9F09E0000000, float %94
  %97 = fcmp olt float %96, 0xC01F9F09E0000000
  %98 = select i1 %97, float 0xC01F9F09E0000000, float %96
  %99 = tail call float @llvm.fabs.f32(float %94) #19
  %100 = fcmp olt float %99, 0x3F3A36E2E0000000
  %101 = select i1 %100, float 0xFFFFFFFFE0000000, float 0.000000e+00
  %102 = fmul float %98, %98
  %103 = fmul float %102, 0x3CB3E4B800000000
  %104 = fsub float 0x3D4C266FC0000000, %103
  %105 = fmul float %102, %104
  %106 = fadd float %105, 0xBDD7A6FFE0000000
  %107 = fmul float %102, %106
  %108 = fadd float %107, 0x3E6B800820000000
  %109 = fmul float %102, %108
  %110 = fadd float %109, 0x3EEF286940000000
  %111 = fmul float %102, %110
  %112 = fadd float %111, 0x3F44E1BDA0000000
  %113 = fmul float %102, %112
  %114 = fadd float %113, 0x3F740B3B80000000
  %115 = fmul float %98, %114
  %116 = fmul float %102, 0x3EB41A7B00000000
  %117 = fadd float %116, 0x3F1F12BAC0000000
  %118 = fmul float %102, %117
  %119 = fadd float %118, 0x3F629540A0000000
  %120 = fmul float %102, %119
  %121 = fadd float %120, 0x3F740B3BA0000000
  %122 = fdiv float %115, %121
  %123 = fcmp oeq float %101, 0.000000e+00
  %124 = select i1 %123, float %122, float %98
  store float %124, float* %89, align 4
  %125 = add nsw i64 %85, 1
  %126 = icmp eq i64 %125, %7
  br i1 %126, label %127, label %84

127:                                              ; preds = %84, %78
  ret void

128:                                              ; preds = %74, %128
  %129 = phi i64 [ %19, %74 ], [ %169, %128 ]
  %130 = load %"struct.Eigen::internal::evaluator_wrapper_base.339"*, %"struct.Eigen::internal::evaluator_wrapper_base.339"** %75, align 8
  %131 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base.339", %"struct.Eigen::internal::evaluator_wrapper_base.339"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load float*, float** %131, align 8
  %133 = getelementptr inbounds float, float* %132, i64 %129
  %134 = load %"struct.Eigen::internal::unary_evaluator.328"*, %"struct.Eigen::internal::unary_evaluator.328"** %77, align 8
  %135 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator.328", %"struct.Eigen::internal::unary_evaluator.328"* %134, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load float*, float** %135, align 8
  %137 = getelementptr inbounds float, float* %136, i64 %129
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 1
  %140 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %139, <4 x float> <float 0x401F9F09E0000000, float 0x401F9F09E0000000, float 0x401F9F09E0000000, float 0x401F9F09E0000000>) #14, !srcloc !618
  %141 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %140, <4 x float> <float 0xC01F9F09E0000000, float 0xC01F9F09E0000000, float 0xC01F9F09E0000000, float 0xC01F9F09E0000000>) #14, !srcloc !33
  %142 = bitcast <4 x float> %139 to <4 x i32>
  %143 = and <4 x i32> %142, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fcmp uge <4 x float> %144, <float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000>
  %146 = fmul <4 x float> %141, %141
  %147 = fmul <4 x float> %146, <float 0xBCB3E4B800000000, float 0xBCB3E4B800000000, float 0xBCB3E4B800000000, float 0xBCB3E4B800000000>
  %148 = fadd <4 x float> %147, <float 0x3D4C266FC0000000, float 0x3D4C266FC0000000, float 0x3D4C266FC0000000, float 0x3D4C266FC0000000>
  %149 = fmul <4 x float> %146, %148
  %150 = fadd <4 x float> %149, <float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000>
  %151 = fmul <4 x float> %146, %150
  %152 = fadd <4 x float> %151, <float 0x3E6B800820000000, float 0x3E6B800820000000, float 0x3E6B800820000000, float 0x3E6B800820000000>
  %153 = fmul <4 x float> %146, %152
  %154 = fadd <4 x float> %153, <float 0x3EEF286940000000, float 0x3EEF286940000000, float 0x3EEF286940000000, float 0x3EEF286940000000>
  %155 = fmul <4 x float> %146, %154
  %156 = fadd <4 x float> %155, <float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000>
  %157 = fmul <4 x float> %146, %156
  %158 = fadd <4 x float> %157, <float 0x3F740B3B80000000, float 0x3F740B3B80000000, float 0x3F740B3B80000000, float 0x3F740B3B80000000>
  %159 = fmul <4 x float> %141, %158
  %160 = fmul <4 x float> %146, <float 0x3EB41A7B00000000, float 0x3EB41A7B00000000, float 0x3EB41A7B00000000, float 0x3EB41A7B00000000>
  %161 = fadd <4 x float> %160, <float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000>
  %162 = fmul <4 x float> %146, %161
  %163 = fadd <4 x float> %162, <float 0x3F629540A0000000, float 0x3F629540A0000000, float 0x3F629540A0000000, float 0x3F629540A0000000>
  %164 = fmul <4 x float> %146, %163
  %165 = fadd <4 x float> %164, <float 0x3F740B3BA0000000, float 0x3F740B3BA0000000, float 0x3F740B3BA0000000, float 0x3F740B3BA0000000>
  %166 = fdiv <4 x float> %159, %165
  %167 = select <4 x i1> %145, <4 x float> %166, <4 x float> %141
  %168 = bitcast float* %133 to <4 x float>*
  store <4 x float> %167, <4 x float>* %168, align 16
  %169 = add nsw i64 %129, 4
  %170 = icmp slt i64 %169, %23
  br i1 %170, label %128, label %78
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16) local_unnamed_addr #0 comdat {
  %2 = sext i16 %0 to i32
  %3 = add nsw i32 %2, 32767
  %4 = icmp sgt i32 %3, -1
  %5 = select i1 %4, i32 1, i32 -1
  %6 = add nsw i32 %5, %3
  %7 = sdiv i32 %6, 2
  %8 = trunc i32 %7 to i16
  %9 = icmp eq i16 %8, -32768
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, -15420
  %13 = icmp slt i32 %10, 65536
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = add nsw i16 %17, 23130
  %19 = icmp eq i16 %18, %8
  %20 = and i1 %9, %19
  br i1 %20, label %31, label %21

21:                                               ; preds = %1
  %22 = sext i16 %18 to i32
  %23 = mul nsw i32 %11, %22
  %24 = icmp sgt i32 %23, -1
  %25 = select i1 %24, i32 16384, i32 -16383
  %26 = add nsw i32 %25, %23
  %27 = sdiv i32 %26, 32768
  %28 = shl i32 %27, 16
  %29 = sub i32 536870912, %28
  %30 = ashr exact i32 %29, 16
  br label %31

31:                                               ; preds = %1, %21
  %32 = phi i32 [ %30, %21 ], [ -24575, %1 ]
  %33 = sext i16 %18 to i32
  %34 = mul nsw i32 %32, %33
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 16384, i32 -16383
  %37 = add nsw i32 %36, %34
  %38 = sdiv i32 %37, 32768
  %39 = trunc i32 %38 to i16
  %40 = icmp slt i16 %39, 8192
  %41 = icmp sgt i16 %39, -8192
  %42 = sext i16 %39 to i64
  %43 = shl nsw i64 %42, 2
  %44 = icmp slt i64 %43, 32767
  %45 = select i1 %44, i64 %43, i64 32767
  %46 = icmp sgt i64 %45, -32768
  %47 = select i1 %46, i64 %45, i64 -32768
  %48 = trunc i64 %47 to i16
  %49 = select i1 %40, i16 %48, i16 32767
  %50 = select i1 %41, i16 %49, i16 -32768
  %51 = add i16 %50, %18
  %52 = icmp eq i16 %51, %8
  %53 = and i1 %9, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %31
  %55 = sext i16 %51 to i32
  %56 = mul nsw i32 %11, %55
  %57 = icmp sgt i32 %56, -1
  %58 = select i1 %57, i32 16384, i32 -16383
  %59 = add nsw i32 %58, %56
  %60 = sdiv i32 %59, 32768
  %61 = trunc i32 %60 to i16
  %62 = sub i16 8192, %61
  br label %63

63:                                               ; preds = %54, %31
  %64 = phi i16 [ %62, %54 ], [ -24575, %31 ]
  %65 = icmp eq i16 %51, %64
  %66 = icmp eq i16 %51, -32768
  %67 = and i1 %66, %65
  br i1 %67, label %77, label %68

68:                                               ; preds = %63
  %69 = sext i16 %64 to i32
  %70 = sext i16 %51 to i32
  %71 = mul nsw i32 %69, %70
  %72 = icmp sgt i32 %71, -1
  %73 = select i1 %72, i32 16384, i32 -16383
  %74 = add nsw i32 %73, %71
  %75 = sdiv i32 %74, 32768
  %76 = trunc i32 %75 to i16
  br label %77

77:                                               ; preds = %68, %63
  %78 = phi i16 [ %76, %68 ], [ 32767, %63 ]
  %79 = icmp slt i16 %78, 8192
  %80 = icmp sgt i16 %78, -8192
  %81 = sext i16 %78 to i64
  %82 = shl nsw i64 %81, 2
  %83 = icmp slt i64 %82, 32767
  %84 = select i1 %83, i64 %82, i64 32767
  %85 = icmp sgt i64 %84, -32768
  %86 = select i1 %85, i64 %84, i64 -32768
  %87 = trunc i64 %86 to i16
  %88 = select i1 %79, i16 %87, i16 32767
  %89 = select i1 %80, i16 %88, i16 -32768
  %90 = add i16 %89, %51
  %91 = icmp eq i16 %90, %8
  %92 = and i1 %9, %91
  br i1 %92, label %102, label %93

93:                                               ; preds = %77
  %94 = sext i16 %90 to i32
  %95 = mul nsw i32 %11, %94
  %96 = icmp sgt i32 %95, -1
  %97 = select i1 %96, i32 16384, i32 -16383
  %98 = add nsw i32 %97, %95
  %99 = sdiv i32 %98, 32768
  %100 = trunc i32 %99 to i16
  %101 = sub i16 8192, %100
  br label %102

102:                                              ; preds = %93, %77
  %103 = phi i16 [ %101, %93 ], [ -24575, %77 ]
  %104 = icmp eq i16 %90, %103
  %105 = icmp eq i16 %90, -32768
  %106 = and i1 %105, %104
  br i1 %106, label %116, label %107

107:                                              ; preds = %102
  %108 = sext i16 %103 to i32
  %109 = sext i16 %90 to i32
  %110 = mul nsw i32 %108, %109
  %111 = icmp sgt i32 %110, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  br label %116

116:                                              ; preds = %107, %102
  %117 = phi i16 [ %115, %107 ], [ 32767, %102 ]
  %118 = icmp slt i16 %117, 8192
  %119 = icmp sgt i16 %117, -8192
  %120 = sext i16 %117 to i64
  %121 = shl nsw i64 %120, 2
  %122 = icmp slt i64 %121, 32767
  %123 = select i1 %122, i64 %121, i64 32767
  %124 = icmp sgt i64 %123, -32768
  %125 = select i1 %124, i64 %123, i64 -32768
  %126 = trunc i64 %125 to i16
  %127 = select i1 %118, i16 %126, i16 32767
  %128 = select i1 %119, i16 %127, i16 -32768
  %129 = add i16 %128, %90
  %130 = add i16 %129, -8192
  %131 = icmp slt i16 %130, 8192
  %132 = icmp sgt i16 %130, -8192
  %133 = sext i16 %130 to i64
  %134 = shl nsw i64 %133, 2
  %135 = icmp slt i64 %134, 32767
  %136 = select i1 %135, i64 %134, i64 32767
  %137 = icmp sgt i64 %136, -32768
  %138 = select i1 %137, i64 %136, i64 -32768
  %139 = trunc i64 %138 to i16
  %140 = select i1 %131, i16 %139, i16 32767
  %141 = select i1 %132, i16 %140, i16 -32768
  ret i16 %141
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -512
  %3 = shl nsw i16 %2, 4
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 512
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 1024
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 2048
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 4096
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 8192
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %109, 11
  %111 = icmp sgt i16 %108, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  %116 = and i16 %58, 16384
  %117 = icmp eq i16 %116, 0
  %118 = select i1 %117, i16 %108, i16 %115
  %119 = icmp eq i16 %0, 0
  %120 = select i1 %119, i16 32767, i16 %118
  ret i16 %120
}

; Function Attrs: nofree nounwind
declare double @frexp(double, i32* nocapture) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -256
  %3 = shl nsw i16 %2, 5
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 256
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 512
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 1024
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 2048
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 4096
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %109, 11
  %111 = icmp sgt i16 %108, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  %116 = and i16 %58, 8192
  %117 = icmp eq i16 %116, 0
  %118 = select i1 %117, i16 %108, i16 %115
  %119 = shl i16 %58, 1
  %120 = ashr i16 %119, 15
  %121 = xor i16 %120, -1
  %122 = and i16 %118, %121
  %123 = icmp eq i16 %0, 0
  %124 = select i1 %123, i16 32767, i16 %122
  ret i16 %124
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = fsub float -0.000000e+00, %1
  %4 = tail call float @expf(float %3) #19
  %5 = fadd float %4, 1.000000e+00
  %6 = fdiv float 1.000000e+00, %5
  ret float %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = fsub float -0.000000e+00, %1
  %4 = tail call float @expf(float %3) #19
  %5 = fadd float %4, 1.000000e+00
  %6 = fdiv float 1.000000e+00, %5
  ret float %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = fsub float -0.000000e+00, %1
  %4 = tail call float @expf(float %3) #19
  %5 = fadd float %4, 1.000000e+00
  %6 = fdiv float 1.000000e+00, %5
  ret float %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNSt3__110__function16__policy_invokerIFffEE11__call_implINS0_20__default_alloc_funcIZN6tflite3ops7builtin11activations14SigmoidPrepareILNS9_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeEUlfE0_S2_EEEEfPKNS0_16__policy_storageEf(%"union.std::__1::__function::__policy_storage"*, float) #0 comdat align 2 {
  %3 = fsub float -0.000000e+00, %1
  %4 = tail call float @expf(float %3) #19
  %5 = fadd float %4, 1.000000e+00
  %6 = fdiv float 1.000000e+00, %5
  ret float %6
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKNS2_INS3_IKS5_Li0ES7_EEEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper.320"* dereferenceable(24), %"class.Eigen::CwiseUnaryOp.363"* dereferenceable(32), %"struct.Eigen::internal::assign_op"* dereferenceable(1)) local_unnamed_addr #12 comdat {
  %4 = bitcast %"class.Eigen::CwiseUnaryOp.363"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.Eigen::ArrayWrapper.320"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.Eigen::ArrayWrapper.320", %"class.Eigen::ArrayWrapper.320"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %7, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = lshr i64 %7, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 3
  %16 = icmp slt i64 %15, %9
  %17 = select i1 %16, i64 %15, i64 %9
  br label %18

18:                                               ; preds = %12, %3
  %19 = phi i64 [ %17, %12 ], [ %9, %3 ]
  %20 = sub nsw i64 %9, %19
  %21 = sdiv i64 %20, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %22, %19
  %24 = icmp sgt i64 %19, 0
  br i1 %24, label %25, label %92

25:                                               ; preds = %18
  %26 = inttoptr i64 %7 to float*
  %27 = inttoptr i64 %5 to float*
  br label %28

28:                                               ; preds = %25, %88
  %29 = phi i64 [ %90, %88 ], [ 0, %25 ]
  %30 = getelementptr inbounds float, float* %26, i64 %29
  %31 = getelementptr inbounds float, float* %27, i64 %29
  %32 = load float, float* %31, align 4
  %33 = fcmp olt float %32, -9.000000e+00
  %34 = fcmp ogt float %32, 0x402F499C60000000
  %35 = select i1 %34, float 0x402F499C60000000, float %32
  %36 = fmul float %35, %35
  %37 = fmul float %36, 0x3DC806AA20000000
  %38 = fadd float %37, 0x3E7F09D960000000
  %39 = fmul float %36, %38
  %40 = fadd float %39, 0x3F0FE82760000000
  %41 = fmul float %36, %40
  %42 = fadd float %41, 0x3F816FAB00000000
  %43 = fmul float %36, %42
  %44 = fadd float %43, 0x3FCFC7E640000000
  %45 = fmul float %35, %44
  %46 = fmul float %36, 0x3D65789EA0000000
  %47 = fadd float %46, 0x3E38BE4F60000000
  %48 = fmul float %36, %47
  %49 = fadd float %48, 0x3EDA62FBA0000000
  %50 = fmul float %36, %49
  %51 = fadd float %50, 0x3F5BE2A7E0000000
  %52 = fmul float %36, %51
  %53 = fadd float %52, 0x3FBDE7C300000000
  %54 = fmul float %36, %53
  %55 = fadd float %54, 0x3FEFC7E680000000
  %56 = fdiv float %45, %55
  %57 = fadd float %56, 5.000000e-01
  br i1 %33, label %58, label %88, !prof !668

58:                                               ; preds = %28
  %59 = fcmp ogt float %32, 0x40561814C0000000
  %60 = select i1 %59, float 0x40561814C0000000, float %32
  %61 = fcmp olt float %60, 0xC0561814A0000000
  %62 = select i1 %61, float 0xC0561814A0000000, float %60
  %63 = fmul float %62, 0x3FF7154760000000
  %64 = fadd float %63, 5.000000e-01
  %65 = tail call float @llvm.floor.f32(float %64) #19
  %66 = fmul float %65, 0x3FE6300000000000
  %67 = fsub float %62, %66
  %68 = fmul float %65, 0x3F2BD01060000000
  %69 = fadd float %68, %67
  %70 = fmul float %69, %69
  %71 = fmul float %69, 0x3F2A0D2CE0000000
  %72 = fadd float %71, 0x3F56E879C0000000
  %73 = fmul float %69, %72
  %74 = fadd float %73, 0x3F81112100000000
  %75 = fmul float %69, %74
  %76 = fadd float %75, 0x3FA5553820000000
  %77 = fmul float %69, %76
  %78 = fadd float %77, 0x3FC5555540000000
  %79 = fmul float %69, %78
  %80 = fadd float %79, 5.000000e-01
  %81 = fmul float %70, %80
  %82 = fadd float %69, %81
  %83 = fadd float %82, 1.000000e+00
  %84 = fptosi float %65 to i32
  %85 = tail call float @ldexpf(float %83, i32 %84) #19
  %86 = fcmp olt float %85, %32
  %87 = select i1 %86, float %32, float %85
  br label %88

88:                                               ; preds = %58, %28
  %89 = phi float [ %87, %58 ], [ %57, %28 ]
  store float %89, float* %30, align 4
  %90 = add nuw i64 %29, 1
  %91 = icmp eq i64 %90, %19
  br i1 %91, label %92, label %28

92:                                               ; preds = %88, %18
  %93 = icmp sgt i64 %20, 3
  br i1 %93, label %94, label %169

94:                                               ; preds = %92
  %95 = inttoptr i64 %7 to float*
  %96 = inttoptr i64 %5 to float*
  br label %97

97:                                               ; preds = %94, %164
  %98 = phi i64 [ %167, %164 ], [ %19, %94 ]
  %99 = getelementptr inbounds float, float* %95, i64 %98
  %100 = getelementptr inbounds float, float* %96, i64 %98
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 1
  %103 = fcmp olt <4 x float> %102, <float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00>
  %104 = bitcast <4 x i1> %103 to i4
  %105 = icmp eq i4 %104, 0
  %106 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %102, <4 x float> <float 0x402F499C60000000, float 0x402F499C60000000, float 0x402F499C60000000, float 0x402F499C60000000>) #14, !srcloc !618
  %107 = fmul <4 x float> %106, %106
  %108 = fmul <4 x float> %107, <float 0x3DC806AA20000000, float 0x3DC806AA20000000, float 0x3DC806AA20000000, float 0x3DC806AA20000000>
  %109 = fadd <4 x float> %108, <float 0x3E7F09D960000000, float 0x3E7F09D960000000, float 0x3E7F09D960000000, float 0x3E7F09D960000000>
  %110 = fmul <4 x float> %107, %109
  %111 = fadd <4 x float> %110, <float 0x3F0FE82760000000, float 0x3F0FE82760000000, float 0x3F0FE82760000000, float 0x3F0FE82760000000>
  %112 = fmul <4 x float> %107, %111
  %113 = fadd <4 x float> %112, <float 0x3F816FAB00000000, float 0x3F816FAB00000000, float 0x3F816FAB00000000, float 0x3F816FAB00000000>
  %114 = fmul <4 x float> %107, %113
  %115 = fadd <4 x float> %114, <float 0x3FCFC7E640000000, float 0x3FCFC7E640000000, float 0x3FCFC7E640000000, float 0x3FCFC7E640000000>
  %116 = fmul <4 x float> %106, %115
  %117 = fmul <4 x float> %107, <float 0x3D65789EA0000000, float 0x3D65789EA0000000, float 0x3D65789EA0000000, float 0x3D65789EA0000000>
  %118 = fadd <4 x float> %117, <float 0x3E38BE4F60000000, float 0x3E38BE4F60000000, float 0x3E38BE4F60000000, float 0x3E38BE4F60000000>
  %119 = fmul <4 x float> %107, %118
  %120 = fadd <4 x float> %119, <float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000>
  %121 = fmul <4 x float> %107, %120
  %122 = fadd <4 x float> %121, <float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000>
  %123 = fmul <4 x float> %107, %122
  %124 = fadd <4 x float> %123, <float 0x3FBDE7C300000000, float 0x3FBDE7C300000000, float 0x3FBDE7C300000000, float 0x3FBDE7C300000000>
  %125 = fmul <4 x float> %107, %124
  %126 = fadd <4 x float> %125, <float 0x3FEFC7E680000000, float 0x3FEFC7E680000000, float 0x3FEFC7E680000000, float 0x3FEFC7E680000000>
  %127 = fdiv <4 x float> %116, %126
  %128 = fadd <4 x float> %127, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  br i1 %105, label %164, label %129, !prof !669

129:                                              ; preds = %97
  %130 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %102, <4 x float> <float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000>) #14, !srcloc !618
  %131 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %130, <4 x float> <float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000>) #14, !srcloc !33
  %132 = fmul <4 x float> %131, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %133 = fadd <4 x float> %132, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %134 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %133) #19
  %135 = sitofp <4 x i32> %134 to <4 x float>
  %136 = fcmp olt <4 x float> %133, %135
  %137 = select <4 x i1> %136, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %138 = fsub <4 x float> %135, %137
  %139 = fmul <4 x float> %138, <float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000>
  %140 = fsub <4 x float> %131, %139
  %141 = fmul <4 x float> %138, <float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000>
  %142 = fsub <4 x float> %140, %141
  %143 = fmul <4 x float> %142, %142
  %144 = fmul <4 x float> %142, <float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000>
  %145 = fadd <4 x float> %144, <float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000>
  %146 = fmul <4 x float> %142, %145
  %147 = fadd <4 x float> %146, <float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000>
  %148 = fmul <4 x float> %142, %147
  %149 = fadd <4 x float> %148, <float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000>
  %150 = fmul <4 x float> %142, %149
  %151 = fadd <4 x float> %150, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %152 = fmul <4 x float> %142, %151
  %153 = fadd <4 x float> %152, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %154 = fmul <4 x float> %143, %153
  %155 = fadd <4 x float> %142, %154
  %156 = fadd <4 x float> %155, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %157 = fadd <4 x float> %138, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %158 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %157) #19
  %159 = shl <4 x i32> %158, <i32 23, i32 23, i32 23, i32 23>
  %160 = bitcast <4 x i32> %159 to <4 x float>
  %161 = fmul <4 x float> %156, %160
  %162 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %161, <4 x float> %102) #14, !srcloc !33
  %163 = select <4 x i1> %103, <4 x float> %162, <4 x float> %128
  br label %164

164:                                              ; preds = %97, %129
  %165 = phi <4 x float> [ %163, %129 ], [ %128, %97 ]
  %166 = bitcast float* %99 to <4 x float>*
  store <4 x float> %165, <4 x float>* %166, align 16
  %167 = add nsw i64 %98, 4
  %168 = icmp slt i64 %167, %23
  br i1 %168, label %97, label %169

169:                                              ; preds = %164, %92
  %170 = icmp slt i64 %23, %9
  br i1 %170, label %171, label %238

171:                                              ; preds = %169
  %172 = inttoptr i64 %7 to float*
  %173 = inttoptr i64 %5 to float*
  br label %174

174:                                              ; preds = %171, %234
  %175 = phi i64 [ %236, %234 ], [ %23, %171 ]
  %176 = getelementptr inbounds float, float* %172, i64 %175
  %177 = getelementptr inbounds float, float* %173, i64 %175
  %178 = load float, float* %177, align 4
  %179 = fcmp olt float %178, -9.000000e+00
  %180 = fcmp ogt float %178, 0x402F499C60000000
  %181 = select i1 %180, float 0x402F499C60000000, float %178
  %182 = fmul float %181, %181
  %183 = fmul float %182, 0x3DC806AA20000000
  %184 = fadd float %183, 0x3E7F09D960000000
  %185 = fmul float %182, %184
  %186 = fadd float %185, 0x3F0FE82760000000
  %187 = fmul float %182, %186
  %188 = fadd float %187, 0x3F816FAB00000000
  %189 = fmul float %182, %188
  %190 = fadd float %189, 0x3FCFC7E640000000
  %191 = fmul float %181, %190
  %192 = fmul float %182, 0x3D65789EA0000000
  %193 = fadd float %192, 0x3E38BE4F60000000
  %194 = fmul float %182, %193
  %195 = fadd float %194, 0x3EDA62FBA0000000
  %196 = fmul float %182, %195
  %197 = fadd float %196, 0x3F5BE2A7E0000000
  %198 = fmul float %182, %197
  %199 = fadd float %198, 0x3FBDE7C300000000
  %200 = fmul float %182, %199
  %201 = fadd float %200, 0x3FEFC7E680000000
  %202 = fdiv float %191, %201
  %203 = fadd float %202, 5.000000e-01
  br i1 %179, label %204, label %234, !prof !668

204:                                              ; preds = %174
  %205 = fcmp ogt float %178, 0x40561814C0000000
  %206 = select i1 %205, float 0x40561814C0000000, float %178
  %207 = fcmp olt float %206, 0xC0561814A0000000
  %208 = select i1 %207, float 0xC0561814A0000000, float %206
  %209 = fmul float %208, 0x3FF7154760000000
  %210 = fadd float %209, 5.000000e-01
  %211 = tail call float @llvm.floor.f32(float %210) #19
  %212 = fmul float %211, 0x3FE6300000000000
  %213 = fsub float %208, %212
  %214 = fmul float %211, 0x3F2BD01060000000
  %215 = fadd float %214, %213
  %216 = fmul float %215, %215
  %217 = fmul float %215, 0x3F2A0D2CE0000000
  %218 = fadd float %217, 0x3F56E879C0000000
  %219 = fmul float %215, %218
  %220 = fadd float %219, 0x3F81112100000000
  %221 = fmul float %215, %220
  %222 = fadd float %221, 0x3FA5553820000000
  %223 = fmul float %215, %222
  %224 = fadd float %223, 0x3FC5555540000000
  %225 = fmul float %215, %224
  %226 = fadd float %225, 5.000000e-01
  %227 = fmul float %216, %226
  %228 = fadd float %215, %227
  %229 = fadd float %228, 1.000000e+00
  %230 = fptosi float %211 to i32
  %231 = tail call float @ldexpf(float %229, i32 %230) #19
  %232 = fcmp olt float %231, %178
  %233 = select i1 %232, float %178, float %231
  br label %234

234:                                              ; preds = %204, %174
  %235 = phi float [ %233, %204 ], [ %203, %174 ]
  store float %235, float* %176, align 4
  %236 = add i64 %175, 1
  %237 = icmp eq i64 %236, %9
  br i1 %237, label %238, label %174

238:                                              ; preds = %234, %169
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #11

; Function Attrs: nofree nounwind
declare float @ldexpf(float, i32) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16) local_unnamed_addr #0 comdat {
  %2 = sext i16 %0 to i32
  %3 = add nsw i32 %2, 32767
  %4 = icmp sgt i32 %3, -1
  %5 = select i1 %4, i32 1, i32 -1
  %6 = add nsw i32 %5, %3
  %7 = sdiv i32 %6, 2
  %8 = trunc i32 %7 to i16
  %9 = icmp eq i16 %8, -32768
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, -15420
  %13 = icmp slt i32 %10, 65536
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = add nsw i16 %17, 23130
  %19 = icmp eq i16 %18, %8
  %20 = and i1 %9, %19
  br i1 %20, label %31, label %21

21:                                               ; preds = %1
  %22 = sext i16 %18 to i32
  %23 = mul nsw i32 %11, %22
  %24 = icmp sgt i32 %23, -1
  %25 = select i1 %24, i32 16384, i32 -16383
  %26 = add nsw i32 %25, %23
  %27 = sdiv i32 %26, 32768
  %28 = shl i32 %27, 16
  %29 = sub i32 536870912, %28
  %30 = ashr exact i32 %29, 16
  br label %31

31:                                               ; preds = %1, %21
  %32 = phi i32 [ %30, %21 ], [ -24575, %1 ]
  %33 = sext i16 %18 to i32
  %34 = mul nsw i32 %32, %33
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 16384, i32 -16383
  %37 = add nsw i32 %36, %34
  %38 = sdiv i32 %37, 32768
  %39 = trunc i32 %38 to i16
  %40 = icmp slt i16 %39, 8192
  %41 = icmp sgt i16 %39, -8192
  %42 = sext i16 %39 to i64
  %43 = shl nsw i64 %42, 2
  %44 = icmp slt i64 %43, 32767
  %45 = select i1 %44, i64 %43, i64 32767
  %46 = icmp sgt i64 %45, -32768
  %47 = select i1 %46, i64 %45, i64 -32768
  %48 = trunc i64 %47 to i16
  %49 = select i1 %40, i16 %48, i16 32767
  %50 = select i1 %41, i16 %49, i16 -32768
  %51 = add i16 %50, %18
  %52 = icmp eq i16 %51, %8
  %53 = and i1 %9, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %31
  %55 = sext i16 %51 to i32
  %56 = mul nsw i32 %11, %55
  %57 = icmp sgt i32 %56, -1
  %58 = select i1 %57, i32 16384, i32 -16383
  %59 = add nsw i32 %58, %56
  %60 = sdiv i32 %59, 32768
  %61 = trunc i32 %60 to i16
  %62 = sub i16 8192, %61
  br label %63

63:                                               ; preds = %54, %31
  %64 = phi i16 [ %62, %54 ], [ -24575, %31 ]
  %65 = icmp eq i16 %51, %64
  %66 = icmp eq i16 %51, -32768
  %67 = and i1 %66, %65
  br i1 %67, label %77, label %68

68:                                               ; preds = %63
  %69 = sext i16 %64 to i32
  %70 = sext i16 %51 to i32
  %71 = mul nsw i32 %69, %70
  %72 = icmp sgt i32 %71, -1
  %73 = select i1 %72, i32 16384, i32 -16383
  %74 = add nsw i32 %73, %71
  %75 = sdiv i32 %74, 32768
  %76 = trunc i32 %75 to i16
  br label %77

77:                                               ; preds = %68, %63
  %78 = phi i16 [ %76, %68 ], [ 32767, %63 ]
  %79 = icmp slt i16 %78, 8192
  %80 = icmp sgt i16 %78, -8192
  %81 = sext i16 %78 to i64
  %82 = shl nsw i64 %81, 2
  %83 = icmp slt i64 %82, 32767
  %84 = select i1 %83, i64 %82, i64 32767
  %85 = icmp sgt i64 %84, -32768
  %86 = select i1 %85, i64 %84, i64 -32768
  %87 = trunc i64 %86 to i16
  %88 = select i1 %79, i16 %87, i16 32767
  %89 = select i1 %80, i16 %88, i16 -32768
  %90 = add i16 %89, %51
  %91 = icmp eq i16 %90, %8
  %92 = and i1 %9, %91
  br i1 %92, label %102, label %93

93:                                               ; preds = %77
  %94 = sext i16 %90 to i32
  %95 = mul nsw i32 %11, %94
  %96 = icmp sgt i32 %95, -1
  %97 = select i1 %96, i32 16384, i32 -16383
  %98 = add nsw i32 %97, %95
  %99 = sdiv i32 %98, 32768
  %100 = trunc i32 %99 to i16
  %101 = sub i16 8192, %100
  br label %102

102:                                              ; preds = %93, %77
  %103 = phi i16 [ %101, %93 ], [ -24575, %77 ]
  %104 = icmp eq i16 %90, %103
  %105 = icmp eq i16 %90, -32768
  %106 = and i1 %105, %104
  br i1 %106, label %116, label %107

107:                                              ; preds = %102
  %108 = sext i16 %103 to i32
  %109 = sext i16 %90 to i32
  %110 = mul nsw i32 %108, %109
  %111 = icmp sgt i32 %110, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  br label %116

116:                                              ; preds = %107, %102
  %117 = phi i16 [ %115, %107 ], [ 32767, %102 ]
  %118 = icmp slt i16 %117, 8192
  %119 = icmp sgt i16 %117, -8192
  %120 = sext i16 %117 to i64
  %121 = shl nsw i64 %120, 2
  %122 = icmp slt i64 %121, 32767
  %123 = select i1 %122, i64 %121, i64 32767
  %124 = icmp sgt i64 %123, -32768
  %125 = select i1 %124, i64 %123, i64 -32768
  %126 = trunc i64 %125 to i16
  %127 = select i1 %118, i16 %126, i16 32767
  %128 = select i1 %119, i16 %127, i16 -32768
  %129 = add i16 %128, %90
  %130 = icmp slt i16 %129, 16384
  %131 = icmp sgt i16 %129, -16384
  %132 = sext i16 %129 to i64
  %133 = shl nsw i64 %132, 1
  %134 = icmp slt i64 %133, 32767
  %135 = select i1 %134, i64 %133, i64 32767
  %136 = icmp sgt i64 %135, -32768
  %137 = select i1 %136, i64 %135, i64 -32768
  %138 = trunc i64 %137 to i16
  %139 = select i1 %130, i16 %138, i16 32767
  %140 = select i1 %131, i16 %139, i16 -32768
  ret i16 %140
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -1024
  %3 = shl nsw i16 %2, 3
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 1024
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 2048
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 4096
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 8192
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 16384
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = icmp eq i16 %0, 0
  %110 = select i1 %109, i16 32767, i16 %108
  ret i16 %110
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops10LogSoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::SoftmaxParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, -1
  %9 = icmp sgt i32 %7, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = bitcast %union.anon* %10 to i32*
  %14 = select i1 %9, i32* %12, i32* %13
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %56

16:                                               ; preds = %5
  %17 = zext i32 %8 to i64
  %18 = zext i32 %7 to i64
  %19 = add nsw i64 %18, -1
  %20 = and i64 %18, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %37, label %22

22:                                               ; preds = %16
  %23 = sub nsw i64 %18, %20
  br label %24

24:                                               ; preds = %278, %22
  %25 = phi i64 [ 0, %22 ], [ %281, %278 ]
  %26 = phi i32 [ 1, %22 ], [ %280, %278 ]
  %27 = phi i64 [ %23, %22 ], [ %282, %278 ]
  %28 = icmp eq i64 %25, %17
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds i32, i32* %14, i64 %25
  %31 = load i32, i32* %30, align 4
  br label %32

32:                                               ; preds = %29, %24
  %33 = phi i32 [ %31, %29 ], [ 1, %24 ]
  %34 = mul nsw i32 %33, %26
  %35 = or i64 %25, 1
  %36 = icmp eq i64 %35, %17
  br i1 %36, label %262, label %259

37:                                               ; preds = %278, %16
  %38 = phi i32 [ undef, %16 ], [ %280, %278 ]
  %39 = phi i64 [ 0, %16 ], [ %281, %278 ]
  %40 = phi i32 [ 1, %16 ], [ %280, %278 ]
  %41 = icmp eq i64 %20, 0
  br i1 %41, label %56, label %42

42:                                               ; preds = %37, %50
  %43 = phi i64 [ %53, %50 ], [ %39, %37 ]
  %44 = phi i32 [ %52, %50 ], [ %40, %37 ]
  %45 = phi i64 [ %54, %50 ], [ %20, %37 ]
  %46 = icmp eq i64 %43, %17
  br i1 %46, label %50, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds i32, i32* %14, i64 %43
  %49 = load i32, i32* %48, align 4
  br label %50

50:                                               ; preds = %47, %42
  %51 = phi i32 [ %49, %47 ], [ 1, %42 ]
  %52 = mul nsw i32 %51, %44
  %53 = add nuw nsw i64 %43, 1
  %54 = add i64 %45, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %42, !llvm.loop !670

56:                                               ; preds = %37, %50, %5
  %57 = phi i32 [ 1, %5 ], [ %38, %37 ], [ %52, %50 ]
  %58 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = icmp sgt i32 %59, 5
  %61 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %62 = sext i32 %8 to i64
  %63 = getelementptr inbounds i32, i32* %12, i64 %62
  %64 = bitcast %union.anon* %10 to [5 x i32]*
  %65 = getelementptr inbounds [5 x i32], [5 x i32]* %64, i64 0, i64 %62
  %66 = select i1 %9, i32* %63, i32* %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %union.anon, %union.anon* %61, i64 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 %62
  %71 = bitcast %union.anon* %61 to [5 x i32]*
  %72 = getelementptr inbounds [5 x i32], [5 x i32]* %71, i64 0, i64 %62
  %73 = select i1 %60, i32* %70, i32* %72
  %74 = load i32, i32* %73, align 4
  %75 = icmp slt i32 %74, %67
  %76 = select i1 %75, i32 %74, i32 %67
  %77 = icmp sgt i32 %57, 0
  br i1 %77, label %78, label %97

78:                                               ; preds = %56
  %79 = icmp sgt i32 %76, 0
  %80 = sext i32 %76 to i64
  %81 = zext i32 %57 to i64
  %82 = add nsw i64 %80, -1
  %83 = add nsw i64 %80, -8
  %84 = lshr i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %80, 3
  %87 = icmp ult i64 %82, 3
  %88 = sub nsw i64 %80, %86
  %89 = icmp eq i64 %86, 0
  %90 = icmp ult i32 %76, 8
  %91 = and i64 %80, -8
  %92 = and i64 %85, 1
  %93 = icmp eq i64 %84, 0
  %94 = sub nuw nsw i64 %85, %92
  %95 = icmp eq i64 %92, 0
  %96 = icmp eq i64 %91, %80
  br label %98

97:                                               ; preds = %246, %56
  ret void

98:                                               ; preds = %246, %78
  %99 = phi i64 [ 0, %78 ], [ %247, %246 ]
  %100 = mul i64 %99, %80
  %101 = getelementptr float, float* %4, i64 %100
  %102 = add i64 %100, %80
  %103 = getelementptr float, float* %4, i64 %102
  %104 = getelementptr float, float* %2, i64 %100
  %105 = getelementptr float, float* %2, i64 %102
  br i1 %79, label %106, label %158

106:                                              ; preds = %98
  %107 = mul nsw i64 %99, %80
  br i1 %87, label %108, label %128

108:                                              ; preds = %128, %106
  %109 = phi float [ undef, %106 ], [ %154, %128 ]
  %110 = phi i64 [ 0, %106 ], [ %155, %128 ]
  %111 = phi float [ 0xC7EFFFFFE0000000, %106 ], [ %154, %128 ]
  br i1 %89, label %124, label %112

112:                                              ; preds = %108, %112
  %113 = phi i64 [ %121, %112 ], [ %110, %108 ]
  %114 = phi float [ %120, %112 ], [ %111, %108 ]
  %115 = phi i64 [ %122, %112 ], [ %86, %108 ]
  %116 = add nsw i64 %113, %107
  %117 = getelementptr inbounds float, float* %2, i64 %116
  %118 = load float, float* %117, align 4
  %119 = fcmp olt float %114, %118
  %120 = select i1 %119, float %118, float %114
  %121 = add nuw nsw i64 %113, 1
  %122 = add i64 %115, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %112, !llvm.loop !671

124:                                              ; preds = %112, %108
  %125 = phi float [ %109, %108 ], [ %120, %112 ]
  br i1 %79, label %126, label %158

126:                                              ; preds = %124
  %127 = mul nsw i64 %99, %80
  br label %235

128:                                              ; preds = %106, %128
  %129 = phi i64 [ %155, %128 ], [ 0, %106 ]
  %130 = phi float [ %154, %128 ], [ 0xC7EFFFFFE0000000, %106 ]
  %131 = phi i64 [ %156, %128 ], [ %88, %106 ]
  %132 = add nsw i64 %129, %107
  %133 = getelementptr inbounds float, float* %2, i64 %132
  %134 = load float, float* %133, align 4
  %135 = fcmp olt float %130, %134
  %136 = select i1 %135, float %134, float %130
  %137 = or i64 %129, 1
  %138 = add nsw i64 %137, %107
  %139 = getelementptr inbounds float, float* %2, i64 %138
  %140 = load float, float* %139, align 4
  %141 = fcmp olt float %136, %140
  %142 = select i1 %141, float %140, float %136
  %143 = or i64 %129, 2
  %144 = add nsw i64 %143, %107
  %145 = getelementptr inbounds float, float* %2, i64 %144
  %146 = load float, float* %145, align 4
  %147 = fcmp olt float %142, %146
  %148 = select i1 %147, float %146, float %142
  %149 = or i64 %129, 3
  %150 = add nsw i64 %149, %107
  %151 = getelementptr inbounds float, float* %2, i64 %150
  %152 = load float, float* %151, align 4
  %153 = fcmp olt float %148, %152
  %154 = select i1 %153, float %152, float %148
  %155 = add nuw nsw i64 %129, 4
  %156 = add i64 %131, -4
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %108, label %128

158:                                              ; preds = %124, %98
  %159 = tail call float @logf(float 0.000000e+00) #19
  br label %246

160:                                              ; preds = %235
  %161 = tail call float @logf(float %243) #19
  br i1 %79, label %162, label %246

162:                                              ; preds = %160
  %163 = mul nsw i64 %99, %80
  br i1 %90, label %164, label %166

164:                                              ; preds = %234, %166, %162
  %165 = phi i64 [ 0, %166 ], [ 0, %162 ], [ %91, %234 ]
  br label %249

166:                                              ; preds = %162
  %167 = icmp ult float* %101, %105
  %168 = icmp ult float* %104, %103
  %169 = and i1 %167, %168
  br i1 %169, label %164, label %170

170:                                              ; preds = %166
  %171 = insertelement <4 x float> undef, float %125, i32 0
  %172 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> zeroinitializer
  %173 = insertelement <4 x float> undef, float %125, i32 0
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <4 x i32> zeroinitializer
  %175 = insertelement <4 x float> undef, float %161, i32 0
  %176 = shufflevector <4 x float> %175, <4 x float> undef, <4 x i32> zeroinitializer
  %177 = insertelement <4 x float> undef, float %161, i32 0
  %178 = shufflevector <4 x float> %177, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %93, label %216, label %179

179:                                              ; preds = %170, %179
  %180 = phi i64 [ %213, %179 ], [ 0, %170 ]
  %181 = phi i64 [ %214, %179 ], [ %94, %170 ]
  %182 = add nsw i64 %180, %163
  %183 = getelementptr inbounds float, float* %2, i64 %182
  %184 = bitcast float* %183 to <4 x float>*
  %185 = load <4 x float>, <4 x float>* %184, align 4, !alias.scope !672
  %186 = getelementptr inbounds float, float* %183, i64 4
  %187 = bitcast float* %186 to <4 x float>*
  %188 = load <4 x float>, <4 x float>* %187, align 4, !alias.scope !672
  %189 = fsub <4 x float> %185, %172
  %190 = fsub <4 x float> %188, %174
  %191 = fsub <4 x float> %189, %176
  %192 = fsub <4 x float> %190, %178
  %193 = getelementptr inbounds float, float* %4, i64 %182
  %194 = bitcast float* %193 to <4 x float>*
  store <4 x float> %191, <4 x float>* %194, align 4, !alias.scope !675, !noalias !672
  %195 = getelementptr inbounds float, float* %193, i64 4
  %196 = bitcast float* %195 to <4 x float>*
  store <4 x float> %192, <4 x float>* %196, align 4, !alias.scope !675, !noalias !672
  %197 = or i64 %180, 8
  %198 = add nsw i64 %197, %163
  %199 = getelementptr inbounds float, float* %2, i64 %198
  %200 = bitcast float* %199 to <4 x float>*
  %201 = load <4 x float>, <4 x float>* %200, align 4, !alias.scope !672
  %202 = getelementptr inbounds float, float* %199, i64 4
  %203 = bitcast float* %202 to <4 x float>*
  %204 = load <4 x float>, <4 x float>* %203, align 4, !alias.scope !672
  %205 = fsub <4 x float> %201, %172
  %206 = fsub <4 x float> %204, %174
  %207 = fsub <4 x float> %205, %176
  %208 = fsub <4 x float> %206, %178
  %209 = getelementptr inbounds float, float* %4, i64 %198
  %210 = bitcast float* %209 to <4 x float>*
  store <4 x float> %207, <4 x float>* %210, align 4, !alias.scope !675, !noalias !672
  %211 = getelementptr inbounds float, float* %209, i64 4
  %212 = bitcast float* %211 to <4 x float>*
  store <4 x float> %208, <4 x float>* %212, align 4, !alias.scope !675, !noalias !672
  %213 = add i64 %180, 16
  %214 = add i64 %181, -2
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %179, !llvm.loop !677

216:                                              ; preds = %179, %170
  %217 = phi i64 [ 0, %170 ], [ %213, %179 ]
  br i1 %95, label %234, label %218

218:                                              ; preds = %216
  %219 = add nsw i64 %217, %163
  %220 = getelementptr inbounds float, float* %2, i64 %219
  %221 = bitcast float* %220 to <4 x float>*
  %222 = load <4 x float>, <4 x float>* %221, align 4, !alias.scope !672
  %223 = getelementptr inbounds float, float* %220, i64 4
  %224 = bitcast float* %223 to <4 x float>*
  %225 = load <4 x float>, <4 x float>* %224, align 4, !alias.scope !672
  %226 = fsub <4 x float> %222, %172
  %227 = fsub <4 x float> %225, %174
  %228 = fsub <4 x float> %226, %176
  %229 = fsub <4 x float> %227, %178
  %230 = getelementptr inbounds float, float* %4, i64 %219
  %231 = bitcast float* %230 to <4 x float>*
  store <4 x float> %228, <4 x float>* %231, align 4, !alias.scope !675, !noalias !672
  %232 = getelementptr inbounds float, float* %230, i64 4
  %233 = bitcast float* %232 to <4 x float>*
  store <4 x float> %229, <4 x float>* %233, align 4, !alias.scope !675, !noalias !672
  br label %234

234:                                              ; preds = %216, %218
  br i1 %96, label %246, label %164

235:                                              ; preds = %126, %235
  %236 = phi i64 [ 0, %126 ], [ %244, %235 ]
  %237 = phi float [ 0.000000e+00, %126 ], [ %243, %235 ]
  %238 = add nsw i64 %236, %127
  %239 = getelementptr inbounds float, float* %2, i64 %238
  %240 = load float, float* %239, align 4
  %241 = fsub float %240, %125
  %242 = tail call float @expf(float %241) #19
  %243 = fadd float %237, %242
  %244 = add nuw nsw i64 %236, 1
  %245 = icmp slt i64 %244, %80
  br i1 %245, label %235, label %160

246:                                              ; preds = %249, %234, %158, %160
  %247 = add nuw nsw i64 %99, 1
  %248 = icmp eq i64 %247, %81
  br i1 %248, label %97, label %98

249:                                              ; preds = %164, %249
  %250 = phi i64 [ %257, %249 ], [ %165, %164 ]
  %251 = add nsw i64 %250, %163
  %252 = getelementptr inbounds float, float* %2, i64 %251
  %253 = load float, float* %252, align 4
  %254 = fsub float %253, %125
  %255 = fsub float %254, %161
  %256 = getelementptr inbounds float, float* %4, i64 %251
  store float %255, float* %256, align 4
  %257 = add nuw nsw i64 %250, 1
  %258 = icmp slt i64 %257, %80
  br i1 %258, label %249, label %246, !llvm.loop !678

259:                                              ; preds = %32
  %260 = getelementptr inbounds i32, i32* %14, i64 %35
  %261 = load i32, i32* %260, align 4
  br label %262

262:                                              ; preds = %259, %32
  %263 = phi i32 [ %261, %259 ], [ 1, %32 ]
  %264 = mul nsw i32 %263, %34
  %265 = or i64 %25, 2
  %266 = icmp eq i64 %265, %17
  br i1 %266, label %270, label %267

267:                                              ; preds = %262
  %268 = getelementptr inbounds i32, i32* %14, i64 %265
  %269 = load i32, i32* %268, align 4
  br label %270

270:                                              ; preds = %267, %262
  %271 = phi i32 [ %269, %267 ], [ 1, %262 ]
  %272 = mul nsw i32 %271, %264
  %273 = or i64 %25, 3
  %274 = icmp eq i64 %273, %17
  br i1 %274, label %278, label %275

275:                                              ; preds = %270
  %276 = getelementptr inbounds i32, i32* %14, i64 %273
  %277 = load i32, i32* %276, align 4
  br label %278

278:                                              ; preds = %275, %270
  %279 = phi i32 [ %277, %275 ], [ 1, %270 ]
  %280 = mul nsw i32 %279, %272
  %281 = add nuw nsw i64 %25, 4
  %282 = add i64 %27, -4
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %37, label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops10LogSoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::SoftmaxParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.tflite::SoftmaxParams", %"struct.tflite::SoftmaxParams"* %0, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = add nsw i32 %17, -1
  %19 = icmp sgt i32 %17, 5
  %20 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %21 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %20 to i32*
  %24 = select i1 %19, i32* %22, i32* %23
  %25 = icmp sgt i32 %17, 0
  br i1 %25, label %26, label %66

26:                                               ; preds = %5
  %27 = zext i32 %18 to i64
  %28 = zext i32 %17 to i64
  %29 = add nsw i64 %28, -1
  %30 = and i64 %28, 3
  %31 = icmp ult i64 %29, 3
  br i1 %31, label %47, label %32

32:                                               ; preds = %26
  %33 = sub nsw i64 %28, %30
  br label %34

34:                                               ; preds = %338, %32
  %35 = phi i64 [ 0, %32 ], [ %341, %338 ]
  %36 = phi i32 [ 1, %32 ], [ %340, %338 ]
  %37 = phi i64 [ %33, %32 ], [ %342, %338 ]
  %38 = icmp eq i64 %35, %27
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds i32, i32* %24, i64 %35
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %39, %34
  %43 = phi i32 [ %41, %39 ], [ 1, %34 ]
  %44 = mul nsw i32 %43, %36
  %45 = or i64 %35, 1
  %46 = icmp eq i64 %45, %27
  br i1 %46, label %322, label %319

47:                                               ; preds = %338, %26
  %48 = phi i32 [ undef, %26 ], [ %340, %338 ]
  %49 = phi i64 [ 0, %26 ], [ %341, %338 ]
  %50 = phi i32 [ 1, %26 ], [ %340, %338 ]
  %51 = icmp eq i64 %30, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %47, %60
  %53 = phi i64 [ %63, %60 ], [ %49, %47 ]
  %54 = phi i32 [ %62, %60 ], [ %50, %47 ]
  %55 = phi i64 [ %64, %60 ], [ %30, %47 ]
  %56 = icmp eq i64 %53, %27
  br i1 %56, label %60, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds i32, i32* %24, i64 %53
  %59 = load i32, i32* %58, align 4
  br label %60

60:                                               ; preds = %57, %52
  %61 = phi i32 [ %59, %57 ], [ 1, %52 ]
  %62 = mul nsw i32 %61, %54
  %63 = add nuw nsw i64 %53, 1
  %64 = add i64 %55, -1
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %52, !llvm.loop !679

66:                                               ; preds = %47, %60, %5
  %67 = phi i32 [ 1, %5 ], [ %48, %47 ], [ %62, %60 ]
  %68 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp sgt i32 %69, 5
  %71 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %72 = sext i32 %18 to i64
  %73 = getelementptr inbounds i32, i32* %22, i64 %72
  %74 = bitcast %union.anon* %20 to [5 x i32]*
  %75 = getelementptr inbounds [5 x i32], [5 x i32]* %74, i64 0, i64 %72
  %76 = select i1 %19, i32* %73, i32* %75
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %union.anon, %union.anon* %71, i64 0, i32 0
  %79 = load i32*, i32** %78, align 8
  %80 = getelementptr inbounds i32, i32* %79, i64 %72
  %81 = bitcast %union.anon* %71 to [5 x i32]*
  %82 = getelementptr inbounds [5 x i32], [5 x i32]* %81, i64 0, i64 %72
  %83 = select i1 %70, i32* %80, i32* %82
  %84 = load i32, i32* %83, align 4
  %85 = icmp slt i32 %84, %77
  %86 = select i1 %85, i32 %84, i32 %77
  %87 = icmp sgt i32 %67, 0
  br i1 %87, label %88, label %188

88:                                               ; preds = %66
  %89 = icmp sgt i32 %86, 0
  %90 = sext i32 %7 to i64
  %91 = icmp eq i32 %7, -2147483648
  %92 = mul nsw i64 %90, %90
  %93 = add nsw i32 %15, -1
  %94 = sext i32 %11 to i64
  %95 = zext i32 %13 to i64
  %96 = shl nsw i64 -1, %95
  %97 = trunc i64 %96 to i32
  %98 = xor i32 %97, -1
  %99 = ashr i32 %98, 1
  %100 = sext i32 %86 to i64
  %101 = zext i32 %67 to i64
  %102 = icmp eq i32 %11, -2147483648
  %103 = add nsw i64 %100, -32
  %104 = lshr i64 %103, 5
  %105 = add nuw nsw i64 %104, 1
  %106 = icmp ult i32 %86, 32
  %107 = and i64 %100, -32
  %108 = and i64 %105, 1
  %109 = icmp eq i64 %104, 0
  %110 = sub nuw nsw i64 %105, %108
  %111 = icmp eq i64 %108, 0
  %112 = icmp eq i64 %107, %100
  br label %113

113:                                              ; preds = %273, %88
  %114 = phi i64 [ 0, %88 ], [ %274, %273 ]
  br i1 %89, label %115, label %204

115:                                              ; preds = %113
  %116 = mul nsw i64 %114, %100
  br i1 %106, label %117, label %120

117:                                              ; preds = %170, %115
  %118 = phi i64 [ 0, %115 ], [ %107, %170 ]
  %119 = phi i8 [ 0, %115 ], [ %187, %170 ]
  br label %194

120:                                              ; preds = %115
  br i1 %109, label %152, label %121

121:                                              ; preds = %120, %121
  %122 = phi i64 [ %149, %121 ], [ 0, %120 ]
  %123 = phi <16 x i8> [ %147, %121 ], [ zeroinitializer, %120 ]
  %124 = phi <16 x i8> [ %148, %121 ], [ zeroinitializer, %120 ]
  %125 = phi i64 [ %150, %121 ], [ %110, %120 ]
  %126 = add nsw i64 %122, %116
  %127 = getelementptr inbounds i8, i8* %2, i64 %126
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1
  %130 = getelementptr inbounds i8, i8* %127, i64 16
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1
  %133 = icmp ult <16 x i8> %123, %129
  %134 = icmp ult <16 x i8> %124, %132
  %135 = select <16 x i1> %133, <16 x i8> %129, <16 x i8> %123
  %136 = select <16 x i1> %134, <16 x i8> %132, <16 x i8> %124
  %137 = or i64 %122, 32
  %138 = add nsw i64 %137, %116
  %139 = getelementptr inbounds i8, i8* %2, i64 %138
  %140 = bitcast i8* %139 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1
  %142 = getelementptr inbounds i8, i8* %139, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1
  %145 = icmp ult <16 x i8> %135, %141
  %146 = icmp ult <16 x i8> %136, %144
  %147 = select <16 x i1> %145, <16 x i8> %141, <16 x i8> %135
  %148 = select <16 x i1> %146, <16 x i8> %144, <16 x i8> %136
  %149 = add i64 %122, 64
  %150 = add i64 %125, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %121, !llvm.loop !680

152:                                              ; preds = %121, %120
  %153 = phi <16 x i8> [ undef, %120 ], [ %147, %121 ]
  %154 = phi <16 x i8> [ undef, %120 ], [ %148, %121 ]
  %155 = phi i64 [ 0, %120 ], [ %149, %121 ]
  %156 = phi <16 x i8> [ zeroinitializer, %120 ], [ %147, %121 ]
  %157 = phi <16 x i8> [ zeroinitializer, %120 ], [ %148, %121 ]
  br i1 %111, label %170, label %158

158:                                              ; preds = %152
  %159 = add nsw i64 %155, %116
  %160 = getelementptr inbounds i8, i8* %2, i64 %159
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = getelementptr inbounds i8, i8* %160, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1
  %166 = icmp ult <16 x i8> %157, %165
  %167 = select <16 x i1> %166, <16 x i8> %165, <16 x i8> %157
  %168 = icmp ult <16 x i8> %156, %162
  %169 = select <16 x i1> %168, <16 x i8> %162, <16 x i8> %156
  br label %170

170:                                              ; preds = %152, %158
  %171 = phi <16 x i8> [ %153, %152 ], [ %169, %158 ]
  %172 = phi <16 x i8> [ %154, %152 ], [ %167, %158 ]
  %173 = icmp ugt <16 x i8> %171, %172
  %174 = select <16 x i1> %173, <16 x i8> %171, <16 x i8> %172
  %175 = shufflevector <16 x i8> %174, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = icmp ugt <16 x i8> %174, %175
  %177 = select <16 x i1> %176, <16 x i8> %174, <16 x i8> %175
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = icmp ugt <16 x i8> %177, %178
  %180 = select <16 x i1> %179, <16 x i8> %177, <16 x i8> %178
  %181 = shufflevector <16 x i8> %180, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = icmp ugt <16 x i8> %180, %181
  %183 = select <16 x i1> %182, <16 x i8> %180, <16 x i8> %181
  %184 = shufflevector <16 x i8> %183, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = icmp ugt <16 x i8> %183, %184
  %186 = select <16 x i1> %185, <16 x i8> %183, <16 x i8> %184
  %187 = extractelement <16 x i8> %186, i32 0
  br i1 %112, label %189, label %117

188:                                              ; preds = %273, %66
  ret void

189:                                              ; preds = %194, %170
  %190 = phi i8 [ %187, %170 ], [ %201, %194 ]
  br i1 %89, label %191, label %204

191:                                              ; preds = %189
  %192 = mul nsw i64 %114, %100
  %193 = zext i8 %190 to i32
  br label %235

194:                                              ; preds = %117, %194
  %195 = phi i64 [ %202, %194 ], [ %118, %117 ]
  %196 = phi i8 [ %201, %194 ], [ %119, %117 ]
  %197 = add nsw i64 %195, %116
  %198 = getelementptr inbounds i8, i8* %2, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = icmp ult i8 %196, %199
  %201 = select i1 %200, i8 %199, i8 %196
  %202 = add nuw nsw i64 %195, 1
  %203 = icmp slt i64 %202, %100
  br i1 %203, label %194, label %189, !llvm.loop !681

204:                                              ; preds = %269, %113, %189
  %205 = phi i8 [ %190, %189 ], [ 0, %113 ], [ %190, %269 ]
  %206 = phi i32 [ 0, %189 ], [ 0, %113 ], [ %270, %269 ]
  %207 = tail call i32 @_ZN6tflite43log_x_for_x_greater_than_or_equal_to_1_implILi5ELi12EEEN8gemmlowp10FixedPointIiXT_EEENS2_IiXT0_EEE(i32 %206) #19
  %208 = or i32 %207, -2147483648
  %209 = icmp eq i32 %208, %11
  br i1 %209, label %212, label %210

210:                                              ; preds = %204
  %211 = sext i32 %208 to i64
  br label %213

212:                                              ; preds = %204
  br i1 %102, label %221, label %213

213:                                              ; preds = %212, %210
  %214 = phi i64 [ %211, %210 ], [ %94, %212 ]
  %215 = mul nsw i64 %214, %94
  %216 = icmp sgt i64 %215, -1
  %217 = select i1 %216, i64 1073741824, i64 -1073741823
  %218 = add nsw i64 %217, %215
  %219 = sdiv i64 %218, 2147483648
  %220 = trunc i64 %219 to i32
  br label %221

221:                                              ; preds = %212, %213
  %222 = phi i32 [ %220, %213 ], [ 2147483647, %212 ]
  %223 = and i32 %222, %98
  %224 = lshr i32 %222, 31
  %225 = add nsw i32 %224, %99
  %226 = ashr i32 %222, %13
  %227 = icmp sgt i32 %223, %225
  %228 = zext i1 %227 to i32
  %229 = add nsw i32 %226, %228
  %230 = icmp slt i32 %93, %229
  %231 = select i1 %230, i32 %229, i32 %93
  br i1 %89, label %232, label %273

232:                                              ; preds = %221
  %233 = mul nsw i64 %114, %100
  %234 = zext i8 %205 to i32
  br label %276

235:                                              ; preds = %191, %269
  %236 = phi i64 [ 0, %191 ], [ %271, %269 ]
  %237 = phi i32 [ 0, %191 ], [ %270, %269 ]
  %238 = add nsw i64 %236, %192
  %239 = getelementptr inbounds i8, i8* %2, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = sub nsw i32 %241, %193
  %243 = icmp slt i32 %242, %15
  br i1 %243, label %269, label %244

244:                                              ; preds = %235
  %245 = shl i32 %242, %9
  %246 = icmp eq i32 %245, %7
  br i1 %246, label %250, label %247

247:                                              ; preds = %244
  %248 = sext i32 %245 to i64
  %249 = mul nsw i64 %248, %90
  br label %251

250:                                              ; preds = %244
  br i1 %91, label %258, label %251

251:                                              ; preds = %250, %247
  %252 = phi i64 [ %249, %247 ], [ %92, %250 ]
  %253 = icmp sgt i64 %252, -1
  %254 = select i1 %253, i64 1073741824, i64 -1073741823
  %255 = add nsw i64 %254, %252
  %256 = sdiv i64 %255, 2147483648
  %257 = trunc i64 %256 to i32
  br label %258

258:                                              ; preds = %250, %251
  %259 = phi i32 [ %257, %251 ], [ 2147483647, %250 ]
  %260 = tail call i32 @_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i32 %259)
  %261 = and i32 %260, 4095
  %262 = lshr i32 %260, 31
  %263 = add nuw nsw i32 %262, 2047
  %264 = ashr i32 %260, 12
  %265 = icmp ugt i32 %261, %263
  %266 = zext i1 %265 to i32
  %267 = add i32 %264, %237
  %268 = add i32 %267, %266
  br label %269

269:                                              ; preds = %235, %258
  %270 = phi i32 [ %268, %258 ], [ %237, %235 ]
  %271 = add nuw nsw i64 %236, 1
  %272 = icmp slt i64 %271, %100
  br i1 %272, label %235, label %204

273:                                              ; preds = %314, %221
  %274 = add nuw nsw i64 %114, 1
  %275 = icmp eq i64 %274, %101
  br i1 %275, label %188, label %113

276:                                              ; preds = %232, %314
  %277 = phi i64 [ 0, %232 ], [ %317, %314 ]
  %278 = add nsw i64 %277, %233
  %279 = getelementptr inbounds i8, i8* %2, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = sub nsw i32 %281, %234
  %283 = icmp sgt i32 %282, %231
  br i1 %283, label %284, label %314

284:                                              ; preds = %276
  %285 = shl i32 %282, %9
  %286 = icmp eq i32 %285, %7
  br i1 %286, label %290, label %287

287:                                              ; preds = %284
  %288 = sext i32 %285 to i64
  %289 = mul nsw i64 %288, %90
  br label %291

290:                                              ; preds = %284
  br i1 %91, label %298, label %291

291:                                              ; preds = %290, %287
  %292 = phi i64 [ %289, %287 ], [ %92, %290 ]
  %293 = icmp sgt i64 %292, -1
  %294 = select i1 %293, i64 1073741824, i64 -1073741823
  %295 = add nsw i64 %294, %292
  %296 = sdiv i64 %295, 2147483648
  %297 = trunc i64 %296 to i32
  br label %298

298:                                              ; preds = %290, %291
  %299 = phi i32 [ %297, %291 ], [ 2147483647, %290 ]
  %300 = sub nsw i32 %299, %207
  %301 = and i32 %300, 4194303
  %302 = lshr i32 %300, 31
  %303 = add nuw nsw i32 %302, 2097151
  %304 = ashr i32 %300, 22
  %305 = icmp ugt i32 %301, %303
  %306 = zext i1 %305 to i32
  %307 = add nsw i32 %304, %306
  %308 = icmp slt i32 %307, 0
  %309 = select i1 %308, i32 %307, i32 0
  %310 = icmp sgt i32 %309, -255
  %311 = select i1 %310, i32 %309, i32 -255
  %312 = trunc i32 %311 to i8
  %313 = add i8 %312, -1
  br label %314

314:                                              ; preds = %276, %298
  %315 = phi i8 [ %313, %298 ], [ 0, %276 ]
  %316 = getelementptr inbounds i8, i8* %4, i64 %278
  store i8 %315, i8* %316, align 1
  %317 = add nuw nsw i64 %277, 1
  %318 = icmp slt i64 %317, %100
  br i1 %318, label %276, label %273

319:                                              ; preds = %42
  %320 = getelementptr inbounds i32, i32* %24, i64 %45
  %321 = load i32, i32* %320, align 4
  br label %322

322:                                              ; preds = %319, %42
  %323 = phi i32 [ %321, %319 ], [ 1, %42 ]
  %324 = mul nsw i32 %323, %44
  %325 = or i64 %35, 2
  %326 = icmp eq i64 %325, %27
  br i1 %326, label %330, label %327

327:                                              ; preds = %322
  %328 = getelementptr inbounds i32, i32* %24, i64 %325
  %329 = load i32, i32* %328, align 4
  br label %330

330:                                              ; preds = %327, %322
  %331 = phi i32 [ %329, %327 ], [ 1, %322 ]
  %332 = mul nsw i32 %331, %324
  %333 = or i64 %35, 3
  %334 = icmp eq i64 %333, %27
  br i1 %334, label %338, label %335

335:                                              ; preds = %330
  %336 = getelementptr inbounds i32, i32* %24, i64 %333
  %337 = load i32, i32* %336, align 4
  br label %338

338:                                              ; preds = %335, %330
  %339 = phi i32 [ %337, %335 ], [ 1, %330 ]
  %340 = mul nsw i32 %339, %332
  %341 = add nuw nsw i64 %35, 4
  %342 = add i64 %37, -4
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %47, label %34
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops10LogSoftmaxEiiiiiiiPKaPa(i32, i32, i32, i32, i32, i32, i32, i8*, i8*) local_unnamed_addr #8 comdat {
  %10 = icmp sgt i32 %5, 0
  br i1 %10, label %11, label %130

11:                                               ; preds = %9
  %12 = icmp sgt i32 %6, 0
  %13 = icmp sgt i32 %1, 0
  %14 = sub nsw i32 0, %1
  %15 = select i1 %13, i32 0, i32 %14
  %16 = shl i32 1, %1
  %17 = select i1 %13, i32 %16, i32 1
  %18 = sext i32 %0 to i64
  %19 = icmp eq i32 %0, -2147483648
  %20 = mul nsw i64 %18, %18
  %21 = zext i32 %15 to i64
  %22 = shl nsw i64 -1, %21
  %23 = trunc i64 %22 to i32
  %24 = xor i32 %23, -1
  %25 = ashr i32 %24, 1
  %26 = add nsw i32 %4, -1
  %27 = sub nsw i32 0, %3
  %28 = icmp slt i32 %3, 0
  %29 = select i1 %28, i32 0, i32 %3
  %30 = shl i32 1, %27
  %31 = select i1 %28, i32 %30, i32 1
  %32 = sext i32 %2 to i64
  %33 = icmp eq i32 %2, -2147483648
  %34 = zext i32 %29 to i64
  %35 = shl nsw i64 -1, %34
  %36 = trunc i64 %35 to i32
  %37 = xor i32 %36, -1
  %38 = ashr i32 %37, 1
  %39 = sext i32 %6 to i64
  %40 = zext i32 %5 to i64
  %41 = zext i32 %6 to i64
  %42 = zext i32 %6 to i64
  %43 = zext i32 %6 to i64
  %44 = and i64 %43, 4294967264
  %45 = add nsw i64 %44, -32
  %46 = lshr exact i64 %45, 5
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i32 %6, 32
  %49 = and i64 %43, 4294967264
  %50 = and i64 %47, 1
  %51 = icmp eq i64 %45, 0
  %52 = sub nuw nsw i64 %47, %50
  %53 = icmp eq i64 %50, 0
  %54 = icmp eq i64 %49, %43
  br label %55

55:                                               ; preds = %223, %11
  %56 = phi i64 [ 0, %11 ], [ %224, %223 ]
  br i1 %12, label %57, label %146

57:                                               ; preds = %55
  %58 = mul nsw i64 %56, %39
  br i1 %48, label %59, label %62

59:                                               ; preds = %112, %57
  %60 = phi i64 [ 0, %57 ], [ %49, %112 ]
  %61 = phi i8 [ -128, %57 ], [ %129, %112 ]
  br label %136

62:                                               ; preds = %57
  br i1 %51, label %94, label %63

63:                                               ; preds = %62, %63
  %64 = phi i64 [ %91, %63 ], [ 0, %62 ]
  %65 = phi <16 x i8> [ %89, %63 ], [ <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>, %62 ]
  %66 = phi <16 x i8> [ %90, %63 ], [ <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>, %62 ]
  %67 = phi i64 [ %92, %63 ], [ %52, %62 ]
  %68 = add nsw i64 %64, %58
  %69 = getelementptr inbounds i8, i8* %7, i64 %68
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = getelementptr inbounds i8, i8* %69, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = icmp slt <16 x i8> %65, %71
  %76 = icmp slt <16 x i8> %66, %74
  %77 = select <16 x i1> %75, <16 x i8> %71, <16 x i8> %65
  %78 = select <16 x i1> %76, <16 x i8> %74, <16 x i8> %66
  %79 = or i64 %64, 32
  %80 = add nsw i64 %79, %58
  %81 = getelementptr inbounds i8, i8* %7, i64 %80
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = getelementptr inbounds i8, i8* %81, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = icmp slt <16 x i8> %77, %83
  %88 = icmp slt <16 x i8> %78, %86
  %89 = select <16 x i1> %87, <16 x i8> %83, <16 x i8> %77
  %90 = select <16 x i1> %88, <16 x i8> %86, <16 x i8> %78
  %91 = add i64 %64, 64
  %92 = add i64 %67, -2
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %63, !llvm.loop !682

94:                                               ; preds = %63, %62
  %95 = phi <16 x i8> [ undef, %62 ], [ %89, %63 ]
  %96 = phi <16 x i8> [ undef, %62 ], [ %90, %63 ]
  %97 = phi i64 [ 0, %62 ], [ %91, %63 ]
  %98 = phi <16 x i8> [ <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>, %62 ], [ %89, %63 ]
  %99 = phi <16 x i8> [ <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>, %62 ], [ %90, %63 ]
  br i1 %53, label %112, label %100

100:                                              ; preds = %94
  %101 = add nsw i64 %97, %58
  %102 = getelementptr inbounds i8, i8* %7, i64 %101
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1
  %105 = getelementptr inbounds i8, i8* %102, i64 16
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1
  %108 = icmp slt <16 x i8> %99, %107
  %109 = select <16 x i1> %108, <16 x i8> %107, <16 x i8> %99
  %110 = icmp slt <16 x i8> %98, %104
  %111 = select <16 x i1> %110, <16 x i8> %104, <16 x i8> %98
  br label %112

112:                                              ; preds = %94, %100
  %113 = phi <16 x i8> [ %95, %94 ], [ %111, %100 ]
  %114 = phi <16 x i8> [ %96, %94 ], [ %109, %100 ]
  %115 = icmp sgt <16 x i8> %113, %114
  %116 = select <16 x i1> %115, <16 x i8> %113, <16 x i8> %114
  %117 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = icmp sgt <16 x i8> %116, %117
  %119 = select <16 x i1> %118, <16 x i8> %116, <16 x i8> %117
  %120 = shufflevector <16 x i8> %119, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %121 = icmp sgt <16 x i8> %119, %120
  %122 = select <16 x i1> %121, <16 x i8> %119, <16 x i8> %120
  %123 = shufflevector <16 x i8> %122, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %124 = icmp sgt <16 x i8> %122, %123
  %125 = select <16 x i1> %124, <16 x i8> %122, <16 x i8> %123
  %126 = shufflevector <16 x i8> %125, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %127 = icmp sgt <16 x i8> %125, %126
  %128 = select <16 x i1> %127, <16 x i8> %125, <16 x i8> %126
  %129 = extractelement <16 x i8> %128, i32 0
  br i1 %54, label %131, label %59

130:                                              ; preds = %223, %9
  ret void

131:                                              ; preds = %136, %112
  %132 = phi i8 [ %129, %112 ], [ %143, %136 ]
  br i1 %12, label %133, label %146

133:                                              ; preds = %131
  %134 = mul nsw i64 %56, %39
  %135 = sext i8 %132 to i32
  br label %178

136:                                              ; preds = %59, %136
  %137 = phi i64 [ %144, %136 ], [ %60, %59 ]
  %138 = phi i8 [ %143, %136 ], [ %61, %59 ]
  %139 = add nsw i64 %137, %58
  %140 = getelementptr inbounds i8, i8* %7, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = icmp slt i8 %138, %141
  %143 = select i1 %142, i8 %141, i8 %138
  %144 = add nuw nsw i64 %137, 1
  %145 = icmp eq i64 %144, %41
  br i1 %145, label %131, label %136, !llvm.loop !683

146:                                              ; preds = %219, %55, %131
  %147 = phi i8 [ %132, %131 ], [ -128, %55 ], [ %132, %219 ]
  %148 = phi i32 [ 0, %131 ], [ 0, %55 ], [ %220, %219 ]
  %149 = tail call i32 @_ZN6tflite43log_x_for_x_greater_than_or_equal_to_1_implILi5ELi12EEEN8gemmlowp10FixedPointIiXT_EEENS2_IiXT0_EEE(i32 %148) #19
  %150 = or i32 %149, -2147483648
  %151 = mul nsw i32 %150, %31
  %152 = icmp eq i32 %151, %2
  br i1 %152, label %155, label %153

153:                                              ; preds = %146
  %154 = sext i32 %151 to i64
  br label %156

155:                                              ; preds = %146
  br i1 %33, label %164, label %156

156:                                              ; preds = %155, %153
  %157 = phi i64 [ %154, %153 ], [ %32, %155 ]
  %158 = mul nsw i64 %157, %32
  %159 = icmp sgt i64 %158, -1
  %160 = select i1 %159, i64 1073741824, i64 -1073741823
  %161 = add nsw i64 %160, %158
  %162 = sdiv i64 %161, 2147483648
  %163 = trunc i64 %162 to i32
  br label %164

164:                                              ; preds = %155, %156
  %165 = phi i32 [ %163, %156 ], [ 2147483647, %155 ]
  %166 = and i32 %165, %37
  %167 = lshr i32 %165, 31
  %168 = add nsw i32 %167, %38
  %169 = ashr i32 %165, %29
  %170 = icmp sgt i32 %166, %168
  %171 = zext i1 %170 to i32
  %172 = add nsw i32 %169, %171
  %173 = icmp slt i32 %26, %172
  %174 = select i1 %173, i32 %172, i32 %26
  br i1 %12, label %175, label %223

175:                                              ; preds = %164
  %176 = mul nsw i64 %56, %39
  %177 = sext i8 %147 to i32
  br label %226

178:                                              ; preds = %219, %133
  %179 = phi i64 [ 0, %133 ], [ %221, %219 ]
  %180 = phi i32 [ 0, %133 ], [ %220, %219 ]
  %181 = add nsw i64 %179, %134
  %182 = getelementptr inbounds i8, i8* %7, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = sext i8 %183 to i32
  %185 = sub nsw i32 %184, %135
  %186 = icmp slt i32 %185, %4
  br i1 %186, label %219, label %187

187:                                              ; preds = %178
  %188 = mul nsw i32 %185, %17
  %189 = icmp eq i32 %188, %0
  br i1 %189, label %193, label %190

190:                                              ; preds = %187
  %191 = sext i32 %188 to i64
  %192 = mul nsw i64 %191, %18
  br label %194

193:                                              ; preds = %187
  br i1 %19, label %201, label %194

194:                                              ; preds = %193, %190
  %195 = phi i64 [ %192, %190 ], [ %20, %193 ]
  %196 = icmp sgt i64 %195, -1
  %197 = select i1 %196, i64 1073741824, i64 -1073741823
  %198 = add nsw i64 %197, %195
  %199 = sdiv i64 %198, 2147483648
  %200 = trunc i64 %199 to i32
  br label %201

201:                                              ; preds = %193, %194
  %202 = phi i32 [ %200, %194 ], [ 2147483647, %193 ]
  %203 = and i32 %202, %24
  %204 = lshr i32 %202, 31
  %205 = add nsw i32 %204, %25
  %206 = ashr i32 %202, %15
  %207 = icmp sgt i32 %203, %205
  %208 = zext i1 %207 to i32
  %209 = add nsw i32 %206, %208
  %210 = tail call i32 @_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i32 %209)
  %211 = and i32 %210, 4095
  %212 = lshr i32 %210, 31
  %213 = add nuw nsw i32 %212, 2047
  %214 = ashr i32 %210, 12
  %215 = icmp ugt i32 %211, %213
  %216 = zext i1 %215 to i32
  %217 = add i32 %214, %180
  %218 = add i32 %217, %216
  br label %219

219:                                              ; preds = %178, %201
  %220 = phi i32 [ %218, %201 ], [ %180, %178 ]
  %221 = add nuw nsw i64 %179, 1
  %222 = icmp eq i64 %221, %42
  br i1 %222, label %146, label %178

223:                                              ; preds = %271, %164
  %224 = add nuw nsw i64 %56, 1
  %225 = icmp eq i64 %224, %40
  br i1 %225, label %130, label %55

226:                                              ; preds = %271, %175
  %227 = phi i64 [ 0, %175 ], [ %274, %271 ]
  %228 = add nsw i64 %227, %176
  %229 = getelementptr inbounds i8, i8* %7, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = sext i8 %230 to i32
  %232 = sub nsw i32 %231, %177
  %233 = icmp sgt i32 %232, %174
  br i1 %233, label %234, label %271

234:                                              ; preds = %226
  %235 = mul nsw i32 %232, %17
  %236 = icmp eq i32 %235, %0
  br i1 %236, label %240, label %237

237:                                              ; preds = %234
  %238 = sext i32 %235 to i64
  %239 = mul nsw i64 %238, %18
  br label %241

240:                                              ; preds = %234
  br i1 %19, label %248, label %241

241:                                              ; preds = %240, %237
  %242 = phi i64 [ %239, %237 ], [ %20, %240 ]
  %243 = icmp sgt i64 %242, -1
  %244 = select i1 %243, i64 1073741824, i64 -1073741823
  %245 = add nsw i64 %244, %242
  %246 = sdiv i64 %245, 2147483648
  %247 = trunc i64 %246 to i32
  br label %248

248:                                              ; preds = %240, %241
  %249 = phi i32 [ %247, %241 ], [ 2147483647, %240 ]
  %250 = and i32 %249, %24
  %251 = lshr i32 %249, 31
  %252 = add nsw i32 %251, %25
  %253 = ashr i32 %249, %15
  %254 = icmp sgt i32 %250, %252
  %255 = zext i1 %254 to i32
  %256 = sub i32 %253, %149
  %257 = add i32 %256, %255
  %258 = and i32 %257, 4194303
  %259 = lshr i32 %257, 31
  %260 = add nuw nsw i32 %259, 2097151
  %261 = ashr i32 %257, 22
  %262 = icmp ugt i32 %258, %260
  %263 = zext i1 %262 to i32
  %264 = add nsw i32 %261, %263
  %265 = icmp slt i32 %264, 0
  %266 = select i1 %265, i32 %264, i32 0
  %267 = icmp sgt i32 %266, -255
  %268 = select i1 %267, i32 %266, i32 -255
  %269 = trunc i32 %268 to i8
  %270 = add i8 %269, 127
  br label %271

271:                                              ; preds = %226, %248
  %272 = phi i8 [ %270, %248 ], [ -128, %226 ]
  %273 = getelementptr inbounds i8, i8* %8, i64 %228
  store i8 %272, i8* %273, align 1
  %274 = add nuw nsw i64 %227, 1
  %275 = icmp eq i64 %274, %43
  br i1 %275, label %223, label %226
}

; Function Attrs: nofree nounwind
declare float @logf(float) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i32) local_unnamed_addr #0 comdat {
  %2 = or i32 %0, -16777216
  %3 = shl nsw i32 %2, 5
  %4 = tail call i32 @_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_(i32 %3)
  %5 = sub nsw i32 %2, %0
  %6 = icmp eq i32 %4, 1672461947
  %7 = sext i32 %4 to i64
  %8 = mul nsw i64 %7, 1672461947
  %9 = select i1 %6, i64 2797128964163030809, i64 %8
  %10 = icmp sgt i64 %9, -1
  %11 = select i1 %10, i64 1073741824, i64 -1073741823
  %12 = add nsw i64 %11, %9
  %13 = sdiv i64 %12, 2147483648
  %14 = trunc i64 %13 to i32
  %15 = and i32 %5, 16777216
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 %4, i32 %14
  %18 = icmp eq i32 %17, 1302514674
  %19 = sext i32 %17 to i64
  %20 = mul nsw i64 %19, 1302514674
  %21 = select i1 %18, i64 1696544475985326276, i64 %20
  %22 = icmp sgt i64 %21, -1
  %23 = select i1 %22, i64 1073741824, i64 -1073741823
  %24 = add nsw i64 %23, %21
  %25 = sdiv i64 %24, 2147483648
  %26 = trunc i64 %25 to i32
  %27 = and i32 %5, 33554432
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 %17, i32 %26
  %30 = icmp eq i32 %29, 790015084
  %31 = sext i32 %29 to i64
  %32 = mul nsw i64 %31, 790015084
  %33 = select i1 %30, i64 624123832947527056, i64 %32
  %34 = icmp sgt i64 %33, -1
  %35 = select i1 %34, i64 1073741824, i64 -1073741823
  %36 = add nsw i64 %35, %33
  %37 = sdiv i64 %36, 2147483648
  %38 = trunc i64 %37 to i32
  %39 = and i32 %5, 67108864
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i32 %29, i32 %38
  %42 = icmp eq i32 %41, 290630308
  %43 = sext i32 %41 to i64
  %44 = mul nsw i64 %43, 290630308
  %45 = select i1 %42, i64 84465975928174864, i64 %44
  %46 = icmp sgt i64 %45, -1
  %47 = select i1 %46, i64 1073741824, i64 -1073741823
  %48 = add nsw i64 %47, %45
  %49 = sdiv i64 %48, 2147483648
  %50 = trunc i64 %49 to i32
  %51 = and i32 %5, 134217728
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i32 %41, i32 %50
  %54 = icmp eq i32 %53, 39332535
  %55 = sext i32 %53 to i64
  %56 = mul nsw i64 %55, 39332535
  %57 = select i1 %54, i64 1547048309526225, i64 %56
  %58 = icmp sgt i64 %57, -1
  %59 = select i1 %58, i64 1073741824, i64 -1073741823
  %60 = add nsw i64 %59, %57
  %61 = sdiv i64 %60, 2147483648
  %62 = trunc i64 %61 to i32
  %63 = and i32 %5, 268435456
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i32 %53, i32 %62
  %66 = icmp eq i32 %65, 720401
  %67 = sext i32 %65 to i64
  %68 = mul nsw i64 %67, 720401
  %69 = select i1 %66, i64 518977600801, i64 %68
  %70 = icmp sgt i64 %69, -1
  %71 = select i1 %70, i64 1073741824, i64 -1073741823
  %72 = add nsw i64 %71, %69
  %73 = sdiv i64 %72, 2147483648
  %74 = trunc i64 %73 to i32
  %75 = and i32 %5, 536870912
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, i32 %65, i32 %74
  %78 = icmp eq i32 %77, 242
  %79 = sext i32 %77 to i64
  %80 = mul nsw i64 %79, 242
  %81 = select i1 %78, i64 58564, i64 %80
  %82 = icmp sgt i64 %81, -1
  %83 = select i1 %82, i64 1073741824, i64 -1073741823
  %84 = add nsw i64 %83, %81
  %85 = sdiv i64 %84, 2147483648
  %86 = trunc i64 %85 to i32
  %87 = and i32 %5, 1073741824
  %88 = icmp eq i32 %87, 0
  %89 = select i1 %88, i32 %77, i32 %86
  %90 = icmp eq i32 %0, 0
  %91 = select i1 %90, i32 2147483647, i32 %89
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_(i32) local_unnamed_addr #0 comdat {
  %2 = add nsw i32 %0, 268435456
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, %3
  %5 = add nuw nsw i64 %4, 1073741824
  %6 = lshr i64 %5, 31
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %2, %7
  %9 = shl nuw i64 %6, 32
  %10 = ashr exact i64 %9, 32
  %11 = mul nsw i64 %10, %3
  %12 = mul nsw i64 %10, %10
  %13 = select i1 %8, i64 %12, i64 %11
  %14 = icmp sgt i64 %13, -1
  %15 = select i1 %14, i64 1073741824, i64 -1073741823
  %16 = add nsw i64 %15, %13
  %17 = sdiv i64 %16, 2147483648
  %18 = trunc i64 %17 to i32
  %19 = icmp eq i32 %7, -2147483648
  %20 = add nuw nsw i64 %12, 1073741824
  %21 = lshr i64 %20, 31
  %22 = trunc i64 %21 to i32
  %23 = select i1 %19, i32 2147483647, i32 %22
  %24 = and i32 %23, 3
  %25 = lshr i32 %23, 31
  %26 = add nuw nsw i32 %25, 1
  %27 = ashr i32 %23, 2
  %28 = icmp ugt i32 %24, %26
  %29 = zext i1 %28 to i32
  %30 = add i32 %27, %18
  %31 = add i32 %30, %29
  %32 = icmp eq i32 %31, 715827883
  %33 = sext i32 %31 to i64
  %34 = mul nsw i64 %33, 715827883
  %35 = select i1 %32, i64 512409558080261689, i64 %34
  %36 = icmp sgt i64 %35, -1
  %37 = select i1 %36, i64 1073741824, i64 -1073741823
  %38 = add nsw i64 %37, %35
  %39 = sdiv i64 %38, 2147483648
  %40 = trunc i64 %39 to i32
  %41 = add nsw i32 %40, %7
  %42 = and i32 %41, 1
  %43 = lshr i32 %41, 31
  %44 = ashr i32 %41, 1
  %45 = icmp ugt i32 %42, %43
  %46 = zext i1 %45 to i32
  %47 = add i32 %44, %2
  %48 = add i32 %47, %46
  %49 = icmp eq i32 %48, 1895147668
  br i1 %49, label %54, label %50

50:                                               ; preds = %1
  %51 = sext i32 %48 to i64
  %52 = mul nsw i64 %51, 1895147668
  %53 = icmp sgt i32 %48, -1
  br i1 %53, label %54, label %56

54:                                               ; preds = %1, %50
  %55 = phi i64 [ %52, %50 ], [ 3591584683525838224, %1 ]
  br label %56

56:                                               ; preds = %54, %50
  %57 = phi i64 [ %55, %54 ], [ %52, %50 ]
  %58 = phi i64 [ 1073741824, %54 ], [ -1073741823, %50 ]
  %59 = add nsw i64 %58, %57
  %60 = sdiv i64 %59, 2147483648
  %61 = trunc i64 %60 to i32
  %62 = add nsw i32 %61, 1895147668
  ret i32 %62
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite43log_x_for_x_greater_than_or_equal_to_1_implILi5ELi12EEEN8gemmlowp10FixedPointIiXT_EEENS2_IiXT0_EEE(i32) local_unnamed_addr #8 comdat {
  %2 = tail call i32 @llvm.ctlz.i32(i32 %0, i1 false) #19, !range !103
  %3 = add nsw i32 %2, -1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %20, label %5

5:                                                ; preds = %1
  %6 = lshr i32 -2147483648, %3
  %7 = icmp sgt i32 %6, %0
  %8 = sub nsw i32 1, %6
  %9 = icmp sgt i32 %8, %0
  %10 = sext i32 %0 to i64
  %11 = shl i32 1, %3
  %12 = sext i32 %11 to i64
  %13 = mul nsw i64 %12, %10
  %14 = icmp slt i64 %13, 2147483647
  %15 = select i1 %14, i64 %13, i64 2147483647
  %16 = icmp sgt i64 %15, -2147483648
  %17 = select i1 %16, i64 %15, i64 -2147483648
  %18 = trunc i64 %17 to i32
  %19 = select i1 %7, i32 %18, i32 2147483647
  br i1 %9, label %29, label %20

20:                                               ; preds = %5, %1
  %21 = phi i32 [ %19, %5 ], [ %0, %1 ]
  %22 = icmp eq i32 %21, 1518500250
  br i1 %22, label %27, label %23

23:                                               ; preds = %20
  %24 = sext i32 %21 to i64
  %25 = mul nsw i64 %24, 1518500250
  %26 = icmp sgt i32 %21, -1
  br i1 %26, label %27, label %29

27:                                               ; preds = %20, %23
  %28 = phi i64 [ %25, %23 ], [ 2305843009250062500, %20 ]
  br label %29

29:                                               ; preds = %5, %23, %27
  %30 = phi i64 [ %28, %27 ], [ %25, %23 ], [ -3260954456358912000, %5 ]
  %31 = phi i64 [ 1073741824, %27 ], [ -1073741823, %23 ], [ -1073741823, %5 ]
  %32 = add nsw i64 %31, %30
  %33 = sdiv i64 %32, 2147483648
  %34 = trunc i64 %33 to i32
  %35 = icmp slt i32 %34, 1073741824
  %36 = icmp slt i32 %34, -1073741823
  %37 = shl i64 %33, 32
  %38 = ashr exact i64 %37, 31
  %39 = icmp slt i64 %38, 2147483647
  %40 = select i1 %39, i64 %38, i64 2147483647
  %41 = icmp sgt i64 %40, -2147483648
  %42 = select i1 %41, i64 %40, i64 -2147483648
  %43 = trunc i64 %42 to i32
  %44 = select i1 %35, i32 %43, i32 2147483647
  %45 = select i1 %36, i32 -2147483648, i32 %44
  %46 = sub nsw i32 12, %2
  %47 = sext i32 %46 to i64
  %48 = shl nsw i64 %47, 25
  %49 = icmp slt i64 %48, 2147483647
  %50 = select i1 %49, i64 %48, i64 2147483647
  %51 = icmp sgt i64 %50, -2147483648
  %52 = select i1 %51, i64 %50, i64 -2147483648
  %53 = icmp slt i64 %52, 2139095039
  %54 = select i1 %53, i64 %52, i64 2139095039
  %55 = trunc i64 %54 to i32
  %56 = add nsw i32 %55, 8388608
  %57 = icmp eq i32 %0, 1518500250
  %58 = sext i32 %0 to i64
  %59 = mul nsw i64 %58, 1518500250
  %60 = select i1 %57, i64 2305843009250062500, i64 %59
  %61 = icmp sgt i64 %60, -1
  %62 = select i1 %61, i64 1073741824, i64 -1073741823
  %63 = add nsw i64 %62, %60
  %64 = sdiv i64 %63, 2147483648
  %65 = trunc i64 %64 to i32
  %66 = tail call i32 @llvm.ctlz.i32(i32 %65, i1 false) #19, !range !103
  %67 = add nsw i32 %66, -1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %29
  %70 = lshr i32 -2147483648, %67
  %71 = icmp sgt i32 %70, %0
  %72 = sub nsw i32 1, %70
  %73 = icmp sgt i32 %72, %0
  %74 = shl i32 1, %67
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %75, %58
  %77 = icmp slt i64 %76, 2147483647
  %78 = select i1 %77, i64 %76, i64 2147483647
  %79 = icmp sgt i64 %78, -2147483648
  %80 = select i1 %79, i64 %78, i64 -2147483648
  %81 = trunc i64 %80 to i32
  %82 = select i1 %71, i32 %81, i32 2147483647
  %83 = select i1 %73, i32 -2147483648, i32 %82
  br label %84

84:                                               ; preds = %29, %69
  %85 = phi i32 [ %83, %69 ], [ %0, %29 ]
  %86 = sub nsw i32 13, %66
  %87 = sext i32 %86 to i64
  %88 = shl nsw i64 %87, 25
  %89 = icmp slt i64 %88, 2147483647
  %90 = select i1 %89, i64 %88, i64 2147483647
  %91 = icmp sgt i64 %90, -2139095040
  %92 = add nsw i64 %90, -8388608
  %93 = select i1 %91, i64 %92, i64 -2147483648
  %94 = icmp slt i64 %93, 2147483647
  %95 = select i1 %94, i64 %93, i64 2147483647
  %96 = trunc i64 %95 to i32
  %97 = icmp slt i32 %85, %45
  %98 = select i1 %97, i32 %85, i32 %45
  %99 = icmp slt i32 %56, %96
  %100 = select i1 %99, i32 %96, i32 %56
  %101 = sext i32 %98 to i64
  %102 = add nsw i64 %101, 1805811301
  %103 = icmp sgt i64 %102, -1
  %104 = select i1 %103, i64 1, i64 -1
  %105 = add nsw i64 %104, %102
  %106 = sdiv i64 %105, 2
  %107 = trunc i64 %106 to i32
  %108 = shl i32 %98, 1
  %109 = add i32 %108, 683344694
  %110 = icmp eq i32 %109, -2147483648
  %111 = sext i32 %109 to i64
  %112 = mul nsw i64 %111, %111
  %113 = add nuw nsw i64 %112, 1073741824
  %114 = lshr i64 %113, 31
  %115 = trunc i64 %114 to i32
  %116 = select i1 %110, i32 2147483647, i32 %115
  %117 = icmp eq i32 %109, %98
  br i1 %117, label %120, label %118

118:                                              ; preds = %84
  %119 = mul nsw i64 %111, %101
  br label %121

120:                                              ; preds = %84
  br i1 %110, label %128, label %121

121:                                              ; preds = %120, %118
  %122 = phi i64 [ %119, %118 ], [ %112, %120 ]
  %123 = icmp sgt i64 %122, -1
  %124 = select i1 %123, i64 1073741824, i64 -1073741823
  %125 = add nsw i64 %124, %122
  %126 = sdiv i64 %125, 2147483648
  %127 = trunc i64 %126 to i32
  br label %128

128:                                              ; preds = %120, %121
  %129 = phi i32 [ %127, %121 ], [ 2147483647, %120 ]
  %130 = icmp eq i32 %109, %116
  br i1 %130, label %134, label %131

131:                                              ; preds = %128
  %132 = sext i32 %116 to i64
  %133 = mul nsw i64 %132, %111
  br label %135

134:                                              ; preds = %128
  br i1 %110, label %148, label %135

135:                                              ; preds = %131, %134
  %136 = phi i64 [ %133, %131 ], [ %112, %134 ]
  %137 = icmp sgt i64 %136, -1
  %138 = select i1 %137, i64 1073741824, i64 -1073741823
  %139 = add nsw i64 %138, %136
  %140 = sdiv i64 %139, 2147483648
  %141 = trunc i64 %140 to i32
  %142 = icmp eq i32 %141, 117049297
  br i1 %142, label %148, label %143

143:                                              ; preds = %135
  %144 = shl i64 %140, 32
  %145 = ashr exact i64 %144, 32
  %146 = mul nsw i64 %145, 117049297
  %147 = icmp sgt i64 %144, -4294967296
  br i1 %147, label %148, label %150

148:                                              ; preds = %135, %134, %143
  %149 = phi i64 [ %146, %143 ], [ 251361451200346159, %134 ], [ 13700537928194209, %135 ]
  br label %150

150:                                              ; preds = %143, %148
  %151 = phi i64 [ %149, %148 ], [ %146, %143 ]
  %152 = phi i64 [ 1073741824, %148 ], [ -1073741823, %143 ]
  %153 = add nsw i64 %152, %151
  %154 = sdiv i64 %153, 2147483648
  %155 = trunc i64 %154 to i32
  %156 = add nsw i32 %129, %155
  %157 = add i32 %108, 1741164463
  %158 = icmp eq i32 %116, 127690142
  br i1 %158, label %163, label %159

159:                                              ; preds = %150
  %160 = sext i32 %116 to i64
  %161 = mul nsw i64 %160, 127690142
  %162 = icmp sgt i32 %116, -1
  br i1 %162, label %163, label %165

163:                                              ; preds = %150, %159
  %164 = phi i64 [ %161, %159 ], [ 16304772363980164, %150 ]
  br label %165

165:                                              ; preds = %163, %159
  %166 = phi i64 [ %164, %163 ], [ %161, %159 ]
  %167 = phi i64 [ 1073741824, %163 ], [ -1073741823, %159 ]
  %168 = add nsw i64 %167, %166
  %169 = sdiv i64 %168, 2147483648
  %170 = trunc i64 %169 to i32
  %171 = add nsw i32 %157, %170
  %172 = icmp eq i32 %171, %107
  %173 = shl i64 %106, 32
  %174 = ashr exact i64 %173, 32
  %175 = sext i32 %171 to i64
  %176 = select i1 %172, i64 %174, i64 %175
  %177 = mul nsw i64 %176, %174
  %178 = icmp sgt i64 %177, -1
  %179 = select i1 %178, i64 1073741824, i64 -1073741823
  %180 = add nsw i64 %179, %177
  %181 = sdiv i64 %180, 2147483648
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %109, 638450708
  br i1 %183, label %187, label %184

184:                                              ; preds = %165
  %185 = mul nsw i64 %111, 638450708
  %186 = icmp sgt i32 %109, -1
  br i1 %186, label %187, label %189

187:                                              ; preds = %165, %184
  %188 = phi i64 [ %185, %184 ], [ 407619306545701264, %165 ]
  br label %189

189:                                              ; preds = %187, %184
  %190 = phi i64 [ %188, %187 ], [ %185, %184 ]
  %191 = phi i64 [ 1073741824, %187 ], [ -1073741823, %184 ]
  %192 = add nsw i64 %191, %190
  %193 = sdiv i64 %192, 2147483648
  %194 = trunc i64 %193 to i32
  %195 = add nsw i32 %194, %182
  %196 = tail call i32 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_(i32 %195)
  %197 = and i32 %156, 63
  %198 = lshr i32 %156, 31
  %199 = add nuw nsw i32 %198, 31
  %200 = ashr i32 %156, 6
  %201 = icmp ugt i32 %197, %199
  %202 = zext i1 %201 to i32
  %203 = add nsw i32 %200, %202
  %204 = icmp eq i32 %100, 1488522236
  %205 = sext i32 %100 to i64
  %206 = mul nsw i64 %205, 1488522236
  %207 = select i1 %204, i64 2215698447066439696, i64 %206
  %208 = icmp sgt i64 %207, -1
  %209 = select i1 %208, i64 1073741824, i64 -1073741823
  %210 = add nsw i64 %209, %207
  %211 = sdiv i64 %210, 2147483648
  %212 = trunc i64 %211 to i32
  %213 = icmp eq i32 %203, %196
  %214 = sext i32 %203 to i64
  %215 = sext i32 %196 to i64
  %216 = select i1 %213, i64 %214, i64 %215
  %217 = mul nsw i64 %216, %214
  %218 = icmp sgt i64 %217, -1
  %219 = select i1 %218, i64 1073741824, i64 -1073741823
  %220 = add nsw i64 %219, %217
  %221 = sdiv i64 %220, 2147483648
  %222 = trunc i64 %221 to i32
  %223 = add nsw i32 %222, %212
  %224 = icmp slt i32 %223, 1073741824
  %225 = icmp sgt i32 %223, -1073741824
  %226 = sext i32 %223 to i64
  %227 = shl nsw i64 %226, 1
  %228 = icmp slt i64 %227, 2147483647
  %229 = select i1 %228, i64 %227, i64 2147483647
  %230 = icmp sgt i64 %229, -2147483648
  %231 = select i1 %230, i64 %229, i64 -2147483648
  %232 = trunc i64 %231 to i32
  %233 = select i1 %224, i32 %232, i32 2147483647
  %234 = select i1 %225, i32 %233, i32 -2147483648
  ret i32 %234
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_(i32) local_unnamed_addr #0 comdat {
  %2 = sext i32 %0 to i64
  %3 = add nsw i64 %2, 2147483647
  %4 = icmp sgt i64 %3, -1
  %5 = select i1 %4, i64 1, i64 -1
  %6 = add nsw i64 %5, %3
  %7 = sdiv i64 %6, 2
  %8 = trunc i64 %7 to i32
  %9 = icmp eq i32 %8, -1010580540
  %10 = shl i64 %7, 32
  %11 = ashr exact i64 %10, 32
  br i1 %9, label %15, label %12

12:                                               ; preds = %1
  %13 = mul nsw i64 %11, -1010580540
  %14 = icmp slt i64 %10, 4294967296
  br i1 %14, label %15, label %17

15:                                               ; preds = %1, %12
  %16 = phi i64 [ %13, %12 ], [ 1021273027826691600, %1 ]
  br label %17

17:                                               ; preds = %12, %15
  %18 = phi i64 [ %16, %15 ], [ %13, %12 ]
  %19 = phi i64 [ 1073741824, %15 ], [ -1073741823, %12 ]
  %20 = add nsw i64 %19, %18
  %21 = sdiv i64 %20, 2147483648
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %22, 1515870810
  %24 = mul nsw i64 %11, %11
  %25 = icmp eq i32 %23, %8
  %26 = sext i32 %23 to i64
  %27 = mul nsw i64 %11, %26
  %28 = select i1 %25, i64 %24, i64 %27
  %29 = icmp sgt i64 %28, -1
  %30 = select i1 %29, i64 1073741824, i64 -1073741823
  %31 = add nsw i64 %30, %28
  %32 = sdiv i64 %31, 2147483648
  %33 = trunc i64 %32 to i32
  %34 = sub i32 536870912, %33
  %35 = icmp eq i32 %23, %34
  %36 = sext i32 %23 to i64
  %37 = sext i32 %34 to i64
  %38 = select i1 %35, i64 %36, i64 %37
  %39 = mul nsw i64 %38, %36
  %40 = icmp sgt i64 %39, -1
  %41 = select i1 %40, i64 1073741824, i64 -1073741823
  %42 = add nsw i64 %41, %39
  %43 = sdiv i64 %42, 2147483648
  %44 = trunc i64 %43 to i32
  %45 = icmp slt i32 %44, 536870912
  %46 = icmp sgt i32 %44, -536870912
  %47 = shl i64 %43, 32
  %48 = ashr exact i64 %47, 30
  %49 = icmp slt i64 %48, 2147483647
  %50 = select i1 %49, i64 %48, i64 2147483647
  %51 = icmp sgt i64 %50, -2147483648
  %52 = select i1 %51, i64 %50, i64 -2147483648
  %53 = trunc i64 %52 to i32
  %54 = select i1 %45, i32 %53, i32 2147483647
  %55 = select i1 %46, i32 %54, i32 -2147483648
  %56 = add nsw i32 %55, %23
  %57 = icmp eq i32 %56, %8
  %58 = sext i32 %56 to i64
  %59 = mul nsw i64 %11, %58
  %60 = select i1 %57, i64 %24, i64 %59
  %61 = icmp sgt i64 %60, -1
  %62 = select i1 %61, i64 1073741824, i64 -1073741823
  %63 = add nsw i64 %62, %60
  %64 = sdiv i64 %63, 2147483648
  %65 = trunc i64 %64 to i32
  %66 = sub i32 536870912, %65
  %67 = icmp eq i32 %56, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %17
  %69 = sext i32 %56 to i64
  %70 = sext i32 %66 to i64
  %71 = mul nsw i64 %70, %69
  br label %76

72:                                               ; preds = %17
  %73 = icmp eq i32 %56, -2147483648
  %74 = sext i32 %56 to i64
  %75 = mul nsw i64 %74, %74
  br i1 %73, label %83, label %76

76:                                               ; preds = %72, %68
  %77 = phi i64 [ %71, %68 ], [ %75, %72 ]
  %78 = icmp sgt i64 %77, -1
  %79 = select i1 %78, i64 1073741824, i64 -1073741823
  %80 = add nsw i64 %79, %77
  %81 = sdiv i64 %80, 2147483648
  %82 = trunc i64 %81 to i32
  br label %83

83:                                               ; preds = %76, %72
  %84 = phi i32 [ %82, %76 ], [ 2147483647, %72 ]
  %85 = icmp slt i32 %84, 536870912
  %86 = icmp sgt i32 %84, -536870912
  %87 = sext i32 %84 to i64
  %88 = shl nsw i64 %87, 2
  %89 = icmp slt i64 %88, 2147483647
  %90 = select i1 %89, i64 %88, i64 2147483647
  %91 = icmp sgt i64 %90, -2147483648
  %92 = select i1 %91, i64 %90, i64 -2147483648
  %93 = trunc i64 %92 to i32
  %94 = select i1 %85, i32 %93, i32 2147483647
  %95 = select i1 %86, i32 %94, i32 -2147483648
  %96 = add nsw i32 %95, %56
  %97 = icmp eq i32 %96, %8
  %98 = sext i32 %96 to i64
  %99 = mul nsw i64 %11, %98
  %100 = select i1 %97, i64 %24, i64 %99
  %101 = icmp sgt i64 %100, -1
  %102 = select i1 %101, i64 1073741824, i64 -1073741823
  %103 = add nsw i64 %102, %100
  %104 = sdiv i64 %103, 2147483648
  %105 = trunc i64 %104 to i32
  %106 = sub i32 536870912, %105
  %107 = icmp eq i32 %96, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %83
  %109 = sext i32 %96 to i64
  %110 = sext i32 %106 to i64
  %111 = mul nsw i64 %110, %109
  br label %116

112:                                              ; preds = %83
  %113 = icmp eq i32 %96, -2147483648
  %114 = sext i32 %96 to i64
  %115 = mul nsw i64 %114, %114
  br i1 %113, label %123, label %116

116:                                              ; preds = %112, %108
  %117 = phi i64 [ %111, %108 ], [ %115, %112 ]
  %118 = icmp sgt i64 %117, -1
  %119 = select i1 %118, i64 1073741824, i64 -1073741823
  %120 = add nsw i64 %119, %117
  %121 = sdiv i64 %120, 2147483648
  %122 = trunc i64 %121 to i32
  br label %123

123:                                              ; preds = %116, %112
  %124 = phi i32 [ %122, %116 ], [ 2147483647, %112 ]
  %125 = icmp slt i32 %124, 536870912
  %126 = icmp sgt i32 %124, -536870912
  %127 = sext i32 %124 to i64
  %128 = shl nsw i64 %127, 2
  %129 = icmp slt i64 %128, 2147483647
  %130 = select i1 %129, i64 %128, i64 2147483647
  %131 = icmp sgt i64 %130, -2147483648
  %132 = select i1 %131, i64 %130, i64 -2147483648
  %133 = trunc i64 %132 to i32
  %134 = select i1 %125, i32 %133, i32 2147483647
  %135 = select i1 %126, i32 %134, i32 -2147483648
  %136 = add nsw i32 %135, %96
  %137 = icmp slt i32 %136, 1073741824
  %138 = icmp sgt i32 %136, -1073741824
  %139 = sext i32 %136 to i64
  %140 = shl nsw i64 %139, 1
  %141 = icmp slt i64 %140, 2147483647
  %142 = select i1 %141, i64 %140, i64 2147483647
  %143 = icmp sgt i64 %142, -2147483648
  %144 = select i1 %143, i64 %142, i64 -2147483648
  %145 = trunc i64 %144 to i32
  %146 = select i1 %137, i32 %145, i32 2147483647
  %147 = select i1 %138, i32 %146, i32 -2147483648
  ret i32 %147
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.rint.f32(float) #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::HardSwishParams"* dereferenceable(20), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %9 = icmp sgt i32 %7, 5
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  br label %16

13:                                               ; preds = %5
  %14 = bitcast %union.anon* %8 to i32*
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %119

16:                                               ; preds = %13, %10
  %17 = phi i32* [ %12, %10 ], [ %14, %13 ]
  %18 = zext i32 %7 to i64
  %19 = icmp ult i32 %7, 8
  br i1 %19, label %105, label %20

20:                                               ; preds = %16
  %21 = and i64 %18, 4294967288
  %22 = add nsw i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 3
  %26 = icmp ult i64 %22, 24
  br i1 %26, label %72, label %27

27:                                               ; preds = %20
  %28 = sub nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %69, %29 ]
  %31 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %67, %29 ]
  %32 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %68, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %70, %29 ]
  %34 = getelementptr inbounds i32, i32* %17, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = mul nsw <4 x i32> %36, %31
  %41 = mul nsw <4 x i32> %39, %32
  %42 = or i64 %30, 8
  %43 = getelementptr inbounds i32, i32* %17, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = mul nsw <4 x i32> %45, %40
  %50 = mul nsw <4 x i32> %48, %41
  %51 = or i64 %30, 16
  %52 = getelementptr inbounds i32, i32* %17, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = mul nsw <4 x i32> %54, %49
  %59 = mul nsw <4 x i32> %57, %50
  %60 = or i64 %30, 24
  %61 = getelementptr inbounds i32, i32* %17, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = mul nsw <4 x i32> %63, %58
  %68 = mul nsw <4 x i32> %66, %59
  %69 = add i64 %30, 32
  %70 = add i64 %33, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %29, !llvm.loop !684

72:                                               ; preds = %29, %20
  %73 = phi <4 x i32> [ undef, %20 ], [ %67, %29 ]
  %74 = phi <4 x i32> [ undef, %20 ], [ %68, %29 ]
  %75 = phi i64 [ 0, %20 ], [ %69, %29 ]
  %76 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %67, %29 ]
  %77 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %68, %29 ]
  %78 = icmp eq i64 %25, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %72, %79
  %80 = phi i64 [ %92, %79 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %90, %79 ], [ %76, %72 ]
  %82 = phi <4 x i32> [ %91, %79 ], [ %77, %72 ]
  %83 = phi i64 [ %93, %79 ], [ %25, %72 ]
  %84 = getelementptr inbounds i32, i32* %17, i64 %80
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = mul nsw <4 x i32> %86, %81
  %91 = mul nsw <4 x i32> %89, %82
  %92 = add i64 %80, 8
  %93 = add i64 %83, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !685

95:                                               ; preds = %79, %72
  %96 = phi <4 x i32> [ %73, %72 ], [ %90, %79 ]
  %97 = phi <4 x i32> [ %74, %72 ], [ %91, %79 ]
  %98 = mul <4 x i32> %97, %96
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %100 = mul <4 x i32> %98, %99
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = extractelement <4 x i32> %102, i32 0
  %104 = icmp eq i64 %21, %18
  br i1 %104, label %116, label %105

105:                                              ; preds = %95, %16
  %106 = phi i64 [ 0, %16 ], [ %21, %95 ]
  %107 = phi i32 [ 1, %16 ], [ %103, %95 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %114, %108 ], [ %106, %105 ]
  %110 = phi i32 [ %113, %108 ], [ %107, %105 ]
  %111 = getelementptr inbounds i32, i32* %17, i64 %109
  %112 = load i32, i32* %111, align 4
  %113 = mul nsw i32 %112, %110
  %114 = add nuw nsw i64 %109, 1
  %115 = icmp eq i64 %114, %18
  br i1 %115, label %116, label %108, !llvm.loop !686

116:                                              ; preds = %108, %95
  %117 = phi i32 [ %103, %95 ], [ %113, %108 ]
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %292

119:                                              ; preds = %13, %116
  %120 = phi i32 [ %117, %116 ], [ 1, %13 ]
  %121 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 0
  %122 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 4
  %123 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 3
  %124 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 2
  %125 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 5
  %126 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 1
  %127 = zext i32 %120 to i64
  %128 = icmp ult i32 %120, 4
  br i1 %128, label %129, label %131

129:                                              ; preds = %290, %131, %119
  %130 = phi i64 [ 0, %131 ], [ 0, %119 ], [ %146, %290 ]
  br label %293

131:                                              ; preds = %119
  %132 = getelementptr i8, i8* %4, i64 %127
  %133 = getelementptr i8, i8* %2, i64 %127
  %134 = getelementptr %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 1
  %135 = bitcast i16* %134 to i8*
  %136 = getelementptr i8, i8* %135, i64 1
  %137 = icmp ugt i8* %133, %4
  %138 = icmp ugt i8* %132, %2
  %139 = and i1 %137, %138
  %140 = bitcast i16* %126 to i8*
  %141 = icmp ugt i8* %136, %4
  %142 = icmp ugt i8* %132, %140
  %143 = and i1 %141, %142
  %144 = or i1 %139, %143
  br i1 %144, label %129, label %145

145:                                              ; preds = %131
  %146 = and i64 %127, 4294967292
  %147 = load i16, i16* %121, align 4, !alias.scope !687
  %148 = insertelement <4 x i16> undef, i16 %147, i32 0
  %149 = shufflevector <4 x i16> %148, <4 x i16> undef, <4 x i32> zeroinitializer
  %150 = load i16, i16* %122, align 4, !alias.scope !687
  %151 = insertelement <4 x i16> undef, i16 %150, i32 0
  %152 = shufflevector <4 x i16> %151, <4 x i16> undef, <4 x i32> zeroinitializer
  %153 = sext <4 x i16> %152 to <4 x i32>
  %154 = load i32, i32* %123, align 4, !alias.scope !687
  %155 = insertelement <4 x i32> undef, i32 %154, i32 0
  %156 = shufflevector <4 x i32> %155, <4 x i32> undef, <4 x i32> zeroinitializer
  %157 = icmp sgt <4 x i32> %156, zeroinitializer
  %158 = add nsw <4 x i32> %156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %159 = xor <4 x i1> %157, <i1 true, i1 true, i1 true, i1 true>
  %160 = load i16, i16* %124, align 4, !alias.scope !687
  %161 = insertelement <4 x i16> undef, i16 %160, i32 0
  %162 = shufflevector <4 x i16> %161, <4 x i16> undef, <4 x i32> zeroinitializer
  %163 = sext <4 x i16> %162 to <4 x i32>
  %164 = icmp slt <4 x i32> %156, zeroinitializer
  %165 = sub nsw <4 x i32> zeroinitializer, %156
  %166 = zext <4 x i32> %165 to <4 x i64>
  %167 = shl nsw <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, %166
  %168 = trunc <4 x i64> %167 to <4 x i16>
  %169 = xor <4 x i16> %168, <i16 -1, i16 -1, i16 -1, i16 -1>
  %170 = ashr <4 x i16> %169, <i16 1, i16 1, i16 1, i16 1>
  %171 = xor <4 x i1> %157, <i1 true, i1 true, i1 true, i1 true>
  %172 = xor <4 x i1> %164, <i1 true, i1 true, i1 true, i1 true>
  %173 = load i32, i32* %125, align 4, !alias.scope !687
  %174 = insertelement <4 x i32> undef, i32 %173, i32 0
  %175 = sub nsw <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>, %174
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> zeroinitializer
  %177 = zext <4 x i32> %176 to <4 x i64>
  %178 = shl nsw <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, %177
  %179 = trunc <4 x i64> %178 to <4 x i16>
  %180 = xor <4 x i16> %179, <i16 -1, i16 -1, i16 -1, i16 -1>
  %181 = ashr <4 x i16> %180, <i16 1, i16 1, i16 1, i16 1>
  %182 = load i16, i16* %126, align 2, !alias.scope !687
  %183 = insertelement <4 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <4 x i16> %183, <4 x i16> undef, <4 x i32> zeroinitializer
  br label %185

185:                                              ; preds = %185, %145
  %186 = phi i64 [ 0, %145 ], [ %288, %185 ]
  %187 = getelementptr inbounds i8, i8* %2, i64 %186
  %188 = bitcast i8* %187 to <4 x i8>*
  %189 = load <4 x i8>, <4 x i8>* %188, align 1, !alias.scope !690
  %190 = zext <4 x i8> %189 to <4 x i16>
  %191 = sub <4 x i16> %190, %149
  %192 = shl <4 x i16> %191, <i16 7, i16 7, i16 7, i16 7>
  %193 = icmp eq <4 x i16> %192, %152
  %194 = icmp eq <4 x i16> %192, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %195 = and <4 x i1> %194, %193
  %196 = sext <4 x i16> %192 to <4 x i32>
  %197 = mul nsw <4 x i32> %196, %153
  %198 = icmp sgt <4 x i32> %197, <i32 -1, i32 -1, i32 -1, i32 -1>
  %199 = select <4 x i1> %198, <4 x i32> <i32 16384, i32 16384, i32 16384, i32 16384>, <4 x i32> <i32 -16383, i32 -16383, i32 -16383, i32 -16383>
  %200 = add nsw <4 x i32> %199, %197
  %201 = sdiv <4 x i32> %200, <i32 32768, i32 32768, i32 32768, i32 32768>
  %202 = trunc <4 x i32> %201 to <4 x i16>
  %203 = and <4 x i1> %194, %193
  %204 = xor <4 x i1> %203, <i1 true, i1 true, i1 true, i1 true>
  %205 = select <4 x i1> %195, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %202
  %206 = sext <4 x i16> %192 to <4 x i32>
  %207 = shl <4 x i32> %206, %158
  %208 = icmp slt <4 x i32> %207, <i32 32767, i32 32767, i32 32767, i32 32767>
  %209 = select <4 x i1> %208, <4 x i32> %207, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %210 = icmp sgt <4 x i32> %209, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %211 = select <4 x i1> %210, <4 x i32> %209, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %212 = trunc <4 x i32> %211 to <4 x i16>
  %213 = or <4 x i1> %195, %204
  %214 = and <4 x i1> %213, %159
  %215 = select <4 x i1> %214, <4 x i16> %192, <4 x i16> %212
  %216 = icmp eq <4 x i16> %215, %162
  %217 = icmp eq <4 x i16> %215, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %218 = and <4 x i1> %217, %216
  %219 = sext <4 x i16> %215 to <4 x i32>
  %220 = mul nsw <4 x i32> %163, %219
  %221 = icmp sgt <4 x i32> %220, <i32 -1, i32 -1, i32 -1, i32 -1>
  %222 = select <4 x i1> %221, <4 x i32> <i32 16384, i32 16384, i32 16384, i32 16384>, <4 x i32> <i32 -16383, i32 -16383, i32 -16383, i32 -16383>
  %223 = add nsw <4 x i32> %222, %220
  %224 = sdiv <4 x i32> %223, <i32 32768, i32 32768, i32 32768, i32 32768>
  %225 = trunc <4 x i32> %224 to <4 x i16>
  %226 = and <4 x i1> %217, %216
  %227 = xor <4 x i1> %226, <i1 true, i1 true, i1 true, i1 true>
  %228 = and <4 x i1> %213, %227
  %229 = and <4 x i1> %218, %213
  %230 = select <4 x i1> %229, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %225
  %231 = and <4 x i16> %230, %169
  %232 = lshr <4 x i16> %230, <i16 15, i16 15, i16 15, i16 15>
  %233 = add nsw <4 x i16> %232, %170
  %234 = sext <4 x i16> %230 to <4 x i32>
  %235 = ashr <4 x i32> %234, %165
  %236 = trunc <4 x i32> %235 to <4 x i16>
  %237 = icmp sgt <4 x i16> %231, %233
  %238 = zext <4 x i1> %237 to <4 x i16>
  %239 = add nsw <4 x i16> %238, %236
  %240 = sext <4 x i16> %230 to <4 x i32>
  %241 = shl nsw <4 x i32> %240, <i32 1, i32 1, i32 1, i32 1>
  %242 = icmp slt <4 x i32> %241, <i32 32767, i32 32767, i32 32767, i32 32767>
  %243 = select <4 x i1> %242, <4 x i32> %241, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %244 = icmp sgt <4 x i32> %243, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %245 = select <4 x i1> %244, <4 x i32> %243, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %246 = trunc <4 x i32> %245 to <4 x i16>
  %247 = or <4 x i1> %229, %228
  %248 = and <4 x i1> %247, %171
  %249 = and <4 x i1> %247, %164
  %250 = and <4 x i1> %248, %172
  %251 = and <4 x i1> %157, %247
  %252 = select <4 x i1> %250, <4 x i16> %230, <4 x i16> %239
  %253 = select <4 x i1> %251, <4 x i16> %246, <4 x i16> %252
  %254 = sext <4 x i16> %253 to <4 x i32>
  %255 = add nsw <4 x i32> %254, <i32 32768, i32 32768, i32 32768, i32 32768>
  %256 = lshr <4 x i32> %255, <i32 1, i32 1, i32 1, i32 1>
  %257 = trunc <4 x i32> %256 to <4 x i16>
  %258 = icmp eq <4 x i16> %205, %257
  %259 = icmp eq <4 x i16> %257, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %260 = and <4 x i1> %259, %258
  %261 = sext <4 x i16> %205 to <4 x i32>
  %262 = shl <4 x i32> %256, <i32 16, i32 16, i32 16, i32 16>
  %263 = ashr exact <4 x i32> %262, <i32 16, i32 16, i32 16, i32 16>
  %264 = mul nsw <4 x i32> %263, %261
  %265 = sdiv <4 x i32> %264, <i32 32768, i32 32768, i32 32768, i32 32768>
  %266 = trunc <4 x i32> %265 to <4 x i16>
  %267 = or <4 x i1> %251, %249
  %268 = or <4 x i1> %267, %250
  %269 = and <4 x i1> %260, %268
  %270 = select <4 x i1> %269, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %266
  %271 = and <4 x i16> %270, %180
  %272 = lshr <4 x i16> %270, <i16 15, i16 15, i16 15, i16 15>
  %273 = add nsw <4 x i16> %181, %272
  %274 = sext <4 x i16> %270 to <4 x i32>
  %275 = ashr <4 x i32> %274, %176
  %276 = trunc <4 x i32> %275 to <4 x i16>
  %277 = icmp sgt <4 x i16> %271, %273
  %278 = zext <4 x i1> %277 to <4 x i16>
  %279 = add <4 x i16> %184, %276
  %280 = add <4 x i16> %279, %278
  %281 = icmp slt <4 x i16> %280, <i16 255, i16 255, i16 255, i16 255>
  %282 = select <4 x i1> %281, <4 x i16> %280, <4 x i16> <i16 255, i16 255, i16 255, i16 255>
  %283 = icmp sgt <4 x i16> %282, zeroinitializer
  %284 = select <4 x i1> %283, <4 x i16> %282, <4 x i16> zeroinitializer
  %285 = trunc <4 x i16> %284 to <4 x i8>
  %286 = getelementptr inbounds i8, i8* %4, i64 %186
  %287 = bitcast i8* %286 to <4 x i8>*
  store <4 x i8> %285, <4 x i8>* %287, align 1, !alias.scope !692, !noalias !694
  %288 = add i64 %186, 4
  %289 = icmp eq i64 %288, %146
  br i1 %289, label %290, label %185, !llvm.loop !695

290:                                              ; preds = %185
  %291 = icmp eq i64 %146, %127
  br i1 %291, label %292, label %129

292:                                              ; preds = %386, %290, %116
  ret void

293:                                              ; preds = %129, %386
  %294 = phi i64 [ %412, %386 ], [ %130, %129 ]
  %295 = getelementptr inbounds i8, i8* %2, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i16
  %298 = load i16, i16* %121, align 4
  %299 = sub i16 %297, %298
  %300 = shl i16 %299, 7
  %301 = load i16, i16* %122, align 4
  %302 = icmp eq i16 %300, %301
  %303 = icmp eq i16 %300, -32768
  %304 = and i1 %303, %302
  br i1 %304, label %314, label %305

305:                                              ; preds = %293
  %306 = sext i16 %301 to i32
  %307 = sext i16 %300 to i32
  %308 = mul nsw i32 %307, %306
  %309 = icmp sgt i32 %308, -1
  %310 = select i1 %309, i32 16384, i32 -16383
  %311 = add nsw i32 %310, %308
  %312 = sdiv i32 %311, 32768
  %313 = trunc i32 %312 to i16
  br label %314

314:                                              ; preds = %293, %305
  %315 = phi i16 [ %313, %305 ], [ 32767, %293 ]
  %316 = load i32, i32* %123, align 4
  %317 = icmp sgt i32 %316, 0
  br i1 %317, label %318, label %327

318:                                              ; preds = %314
  %319 = add nsw i32 %316, -1
  %320 = sext i16 %300 to i32
  %321 = shl i32 %320, %319
  %322 = icmp slt i32 %321, 32767
  %323 = select i1 %322, i32 %321, i32 32767
  %324 = icmp sgt i32 %323, -32768
  %325 = select i1 %324, i32 %323, i32 -32768
  %326 = trunc i32 %325 to i16
  br label %327

327:                                              ; preds = %318, %314
  %328 = phi i16 [ %326, %318 ], [ %300, %314 ]
  %329 = load i16, i16* %124, align 4
  %330 = icmp eq i16 %328, %329
  %331 = icmp eq i16 %328, -32768
  %332 = and i1 %331, %330
  br i1 %332, label %342, label %333

333:                                              ; preds = %327
  %334 = sext i16 %329 to i32
  %335 = sext i16 %328 to i32
  %336 = mul nsw i32 %334, %335
  %337 = icmp sgt i32 %336, -1
  %338 = select i1 %337, i32 16384, i32 -16383
  %339 = add nsw i32 %338, %336
  %340 = sdiv i32 %339, 32768
  %341 = trunc i32 %340 to i16
  br label %342

342:                                              ; preds = %327, %333
  %343 = phi i16 [ %341, %333 ], [ 32767, %327 ]
  br i1 %317, label %344, label %352

344:                                              ; preds = %342
  %345 = sext i16 %343 to i32
  %346 = shl nsw i32 %345, 1
  %347 = icmp slt i32 %346, 32767
  %348 = select i1 %347, i32 %346, i32 32767
  %349 = icmp sgt i32 %348, -32768
  %350 = select i1 %349, i32 %348, i32 -32768
  %351 = trunc i32 %350 to i16
  br label %370

352:                                              ; preds = %342
  %353 = icmp slt i32 %316, 0
  br i1 %353, label %354, label %370

354:                                              ; preds = %352
  %355 = sub nsw i32 0, %316
  %356 = zext i32 %355 to i64
  %357 = shl nsw i64 -1, %356
  %358 = trunc i64 %357 to i16
  %359 = xor i16 %358, -1
  %360 = and i16 %343, %359
  %361 = ashr i16 %359, 1
  %362 = lshr i16 %343, 15
  %363 = add nsw i16 %362, %361
  %364 = sext i16 %343 to i32
  %365 = ashr i32 %364, %355
  %366 = trunc i32 %365 to i16
  %367 = icmp sgt i16 %360, %363
  %368 = zext i1 %367 to i16
  %369 = add nsw i16 %368, %366
  br label %370

370:                                              ; preds = %344, %354, %352
  %371 = phi i16 [ %369, %354 ], [ %343, %352 ], [ %351, %344 ]
  %372 = sext i16 %371 to i32
  %373 = add nsw i32 %372, 32768
  %374 = lshr i32 %373, 1
  %375 = trunc i32 %374 to i16
  %376 = icmp eq i16 %315, %375
  %377 = icmp eq i16 %375, -32768
  %378 = and i1 %377, %376
  br i1 %378, label %386, label %379

379:                                              ; preds = %370
  %380 = sext i16 %315 to i32
  %381 = shl i32 %374, 16
  %382 = ashr exact i32 %381, 16
  %383 = mul nsw i32 %382, %380
  %384 = sdiv i32 %383, 32768
  %385 = trunc i32 %384 to i16
  br label %386

386:                                              ; preds = %370, %379
  %387 = phi i16 [ %385, %379 ], [ 32767, %370 ]
  %388 = load i32, i32* %125, align 4
  %389 = sub nsw i32 0, %388
  %390 = zext i32 %389 to i64
  %391 = shl nsw i64 -1, %390
  %392 = trunc i64 %391 to i16
  %393 = xor i16 %392, -1
  %394 = and i16 %387, %393
  %395 = ashr i16 %393, 1
  %396 = lshr i16 %387, 15
  %397 = add nsw i16 %395, %396
  %398 = sext i16 %387 to i32
  %399 = ashr i32 %398, %389
  %400 = trunc i32 %399 to i16
  %401 = icmp sgt i16 %394, %397
  %402 = zext i1 %401 to i16
  %403 = load i16, i16* %126, align 2
  %404 = add i16 %403, %400
  %405 = add i16 %404, %402
  %406 = icmp slt i16 %405, 255
  %407 = select i1 %406, i16 %405, i16 255
  %408 = icmp sgt i16 %407, 0
  %409 = select i1 %408, i16 %407, i16 0
  %410 = trunc i16 %409 to i8
  %411 = getelementptr inbounds i8, i8* %4, i64 %294
  store i8 %410, i8* %411, align 1
  %412 = add nuw nsw i64 %294, 1
  %413 = icmp eq i64 %412, %127
  br i1 %413, label %292, label %293, !llvm.loop !696
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_(%"struct.tflite::HardSwishParams"* dereferenceable(20), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #8 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %9 = icmp sgt i32 %7, 5
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  br label %16

13:                                               ; preds = %5
  %14 = bitcast %union.anon* %8 to i32*
  %15 = icmp sgt i32 %7, 0
  br i1 %15, label %16, label %119

16:                                               ; preds = %13, %10
  %17 = phi i32* [ %12, %10 ], [ %14, %13 ]
  %18 = zext i32 %7 to i64
  %19 = icmp ult i32 %7, 8
  br i1 %19, label %105, label %20

20:                                               ; preds = %16
  %21 = and i64 %18, 4294967288
  %22 = add nsw i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 3
  %26 = icmp ult i64 %22, 24
  br i1 %26, label %72, label %27

27:                                               ; preds = %20
  %28 = sub nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %69, %29 ]
  %31 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %67, %29 ]
  %32 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %27 ], [ %68, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %70, %29 ]
  %34 = getelementptr inbounds i32, i32* %17, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = mul nsw <4 x i32> %36, %31
  %41 = mul nsw <4 x i32> %39, %32
  %42 = or i64 %30, 8
  %43 = getelementptr inbounds i32, i32* %17, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = mul nsw <4 x i32> %45, %40
  %50 = mul nsw <4 x i32> %48, %41
  %51 = or i64 %30, 16
  %52 = getelementptr inbounds i32, i32* %17, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = mul nsw <4 x i32> %54, %49
  %59 = mul nsw <4 x i32> %57, %50
  %60 = or i64 %30, 24
  %61 = getelementptr inbounds i32, i32* %17, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = mul nsw <4 x i32> %63, %58
  %68 = mul nsw <4 x i32> %66, %59
  %69 = add i64 %30, 32
  %70 = add i64 %33, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %29, !llvm.loop !697

72:                                               ; preds = %29, %20
  %73 = phi <4 x i32> [ undef, %20 ], [ %67, %29 ]
  %74 = phi <4 x i32> [ undef, %20 ], [ %68, %29 ]
  %75 = phi i64 [ 0, %20 ], [ %69, %29 ]
  %76 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %67, %29 ]
  %77 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %20 ], [ %68, %29 ]
  %78 = icmp eq i64 %25, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %72, %79
  %80 = phi i64 [ %92, %79 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %90, %79 ], [ %76, %72 ]
  %82 = phi <4 x i32> [ %91, %79 ], [ %77, %72 ]
  %83 = phi i64 [ %93, %79 ], [ %25, %72 ]
  %84 = getelementptr inbounds i32, i32* %17, i64 %80
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = mul nsw <4 x i32> %86, %81
  %91 = mul nsw <4 x i32> %89, %82
  %92 = add i64 %80, 8
  %93 = add i64 %83, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %79, !llvm.loop !698

95:                                               ; preds = %79, %72
  %96 = phi <4 x i32> [ %73, %72 ], [ %90, %79 ]
  %97 = phi <4 x i32> [ %74, %72 ], [ %91, %79 ]
  %98 = mul <4 x i32> %97, %96
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %100 = mul <4 x i32> %98, %99
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %102 = mul <4 x i32> %100, %101
  %103 = extractelement <4 x i32> %102, i32 0
  %104 = icmp eq i64 %21, %18
  br i1 %104, label %116, label %105

105:                                              ; preds = %95, %16
  %106 = phi i64 [ 0, %16 ], [ %21, %95 ]
  %107 = phi i32 [ 1, %16 ], [ %103, %95 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %114, %108 ], [ %106, %105 ]
  %110 = phi i32 [ %113, %108 ], [ %107, %105 ]
  %111 = getelementptr inbounds i32, i32* %17, i64 %109
  %112 = load i32, i32* %111, align 4
  %113 = mul nsw i32 %112, %110
  %114 = add nuw nsw i64 %109, 1
  %115 = icmp eq i64 %114, %18
  br i1 %115, label %116, label %108, !llvm.loop !699

116:                                              ; preds = %108, %95
  %117 = phi i32 [ %103, %95 ], [ %113, %108 ]
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %292

119:                                              ; preds = %13, %116
  %120 = phi i32 [ %117, %116 ], [ 1, %13 ]
  %121 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 0
  %122 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 4
  %123 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 3
  %124 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 2
  %125 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 5
  %126 = getelementptr inbounds %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 1
  %127 = zext i32 %120 to i64
  %128 = icmp ult i32 %120, 4
  br i1 %128, label %129, label %131

129:                                              ; preds = %290, %131, %119
  %130 = phi i64 [ 0, %131 ], [ 0, %119 ], [ %146, %290 ]
  br label %293

131:                                              ; preds = %119
  %132 = getelementptr i8, i8* %4, i64 %127
  %133 = getelementptr i8, i8* %2, i64 %127
  %134 = getelementptr %"struct.tflite::HardSwishParams", %"struct.tflite::HardSwishParams"* %0, i64 0, i32 1
  %135 = bitcast i16* %134 to i8*
  %136 = getelementptr i8, i8* %135, i64 1
  %137 = icmp ugt i8* %133, %4
  %138 = icmp ugt i8* %132, %2
  %139 = and i1 %137, %138
  %140 = bitcast i16* %126 to i8*
  %141 = icmp ugt i8* %136, %4
  %142 = icmp ugt i8* %132, %140
  %143 = and i1 %141, %142
  %144 = or i1 %139, %143
  br i1 %144, label %129, label %145

145:                                              ; preds = %131
  %146 = and i64 %127, 4294967292
  %147 = load i16, i16* %121, align 4, !alias.scope !700
  %148 = insertelement <4 x i16> undef, i16 %147, i32 0
  %149 = shufflevector <4 x i16> %148, <4 x i16> undef, <4 x i32> zeroinitializer
  %150 = load i16, i16* %122, align 4, !alias.scope !700
  %151 = insertelement <4 x i16> undef, i16 %150, i32 0
  %152 = shufflevector <4 x i16> %151, <4 x i16> undef, <4 x i32> zeroinitializer
  %153 = sext <4 x i16> %152 to <4 x i32>
  %154 = load i32, i32* %123, align 4, !alias.scope !700
  %155 = insertelement <4 x i32> undef, i32 %154, i32 0
  %156 = shufflevector <4 x i32> %155, <4 x i32> undef, <4 x i32> zeroinitializer
  %157 = icmp sgt <4 x i32> %156, zeroinitializer
  %158 = add nsw <4 x i32> %156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %159 = xor <4 x i1> %157, <i1 true, i1 true, i1 true, i1 true>
  %160 = load i16, i16* %124, align 4, !alias.scope !700
  %161 = insertelement <4 x i16> undef, i16 %160, i32 0
  %162 = shufflevector <4 x i16> %161, <4 x i16> undef, <4 x i32> zeroinitializer
  %163 = sext <4 x i16> %162 to <4 x i32>
  %164 = icmp slt <4 x i32> %156, zeroinitializer
  %165 = sub nsw <4 x i32> zeroinitializer, %156
  %166 = zext <4 x i32> %165 to <4 x i64>
  %167 = shl nsw <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, %166
  %168 = trunc <4 x i64> %167 to <4 x i16>
  %169 = xor <4 x i16> %168, <i16 -1, i16 -1, i16 -1, i16 -1>
  %170 = ashr <4 x i16> %169, <i16 1, i16 1, i16 1, i16 1>
  %171 = xor <4 x i1> %157, <i1 true, i1 true, i1 true, i1 true>
  %172 = xor <4 x i1> %164, <i1 true, i1 true, i1 true, i1 true>
  %173 = load i32, i32* %125, align 4, !alias.scope !700
  %174 = insertelement <4 x i32> undef, i32 %173, i32 0
  %175 = sub nsw <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>, %174
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> zeroinitializer
  %177 = zext <4 x i32> %176 to <4 x i64>
  %178 = shl nsw <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, %177
  %179 = trunc <4 x i64> %178 to <4 x i16>
  %180 = xor <4 x i16> %179, <i16 -1, i16 -1, i16 -1, i16 -1>
  %181 = ashr <4 x i16> %180, <i16 1, i16 1, i16 1, i16 1>
  %182 = load i16, i16* %126, align 2, !alias.scope !700
  %183 = insertelement <4 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <4 x i16> %183, <4 x i16> undef, <4 x i32> zeroinitializer
  br label %185

185:                                              ; preds = %185, %145
  %186 = phi i64 [ 0, %145 ], [ %288, %185 ]
  %187 = getelementptr inbounds i8, i8* %2, i64 %186
  %188 = bitcast i8* %187 to <4 x i8>*
  %189 = load <4 x i8>, <4 x i8>* %188, align 1, !alias.scope !703
  %190 = sext <4 x i8> %189 to <4 x i16>
  %191 = sub <4 x i16> %190, %149
  %192 = shl <4 x i16> %191, <i16 7, i16 7, i16 7, i16 7>
  %193 = icmp eq <4 x i16> %192, %152
  %194 = icmp eq <4 x i16> %192, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %195 = and <4 x i1> %194, %193
  %196 = sext <4 x i16> %192 to <4 x i32>
  %197 = mul nsw <4 x i32> %196, %153
  %198 = icmp sgt <4 x i32> %197, <i32 -1, i32 -1, i32 -1, i32 -1>
  %199 = select <4 x i1> %198, <4 x i32> <i32 16384, i32 16384, i32 16384, i32 16384>, <4 x i32> <i32 -16383, i32 -16383, i32 -16383, i32 -16383>
  %200 = add nsw <4 x i32> %199, %197
  %201 = sdiv <4 x i32> %200, <i32 32768, i32 32768, i32 32768, i32 32768>
  %202 = trunc <4 x i32> %201 to <4 x i16>
  %203 = and <4 x i1> %194, %193
  %204 = xor <4 x i1> %203, <i1 true, i1 true, i1 true, i1 true>
  %205 = select <4 x i1> %195, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %202
  %206 = sext <4 x i16> %192 to <4 x i32>
  %207 = shl <4 x i32> %206, %158
  %208 = icmp slt <4 x i32> %207, <i32 32767, i32 32767, i32 32767, i32 32767>
  %209 = select <4 x i1> %208, <4 x i32> %207, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %210 = icmp sgt <4 x i32> %209, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %211 = select <4 x i1> %210, <4 x i32> %209, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %212 = trunc <4 x i32> %211 to <4 x i16>
  %213 = or <4 x i1> %195, %204
  %214 = and <4 x i1> %213, %159
  %215 = select <4 x i1> %214, <4 x i16> %192, <4 x i16> %212
  %216 = icmp eq <4 x i16> %215, %162
  %217 = icmp eq <4 x i16> %215, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %218 = and <4 x i1> %217, %216
  %219 = sext <4 x i16> %215 to <4 x i32>
  %220 = mul nsw <4 x i32> %163, %219
  %221 = icmp sgt <4 x i32> %220, <i32 -1, i32 -1, i32 -1, i32 -1>
  %222 = select <4 x i1> %221, <4 x i32> <i32 16384, i32 16384, i32 16384, i32 16384>, <4 x i32> <i32 -16383, i32 -16383, i32 -16383, i32 -16383>
  %223 = add nsw <4 x i32> %222, %220
  %224 = sdiv <4 x i32> %223, <i32 32768, i32 32768, i32 32768, i32 32768>
  %225 = trunc <4 x i32> %224 to <4 x i16>
  %226 = and <4 x i1> %217, %216
  %227 = xor <4 x i1> %226, <i1 true, i1 true, i1 true, i1 true>
  %228 = and <4 x i1> %213, %227
  %229 = and <4 x i1> %218, %213
  %230 = select <4 x i1> %229, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %225
  %231 = and <4 x i16> %230, %169
  %232 = lshr <4 x i16> %230, <i16 15, i16 15, i16 15, i16 15>
  %233 = add nsw <4 x i16> %232, %170
  %234 = sext <4 x i16> %230 to <4 x i32>
  %235 = ashr <4 x i32> %234, %165
  %236 = trunc <4 x i32> %235 to <4 x i16>
  %237 = icmp sgt <4 x i16> %231, %233
  %238 = zext <4 x i1> %237 to <4 x i16>
  %239 = add nsw <4 x i16> %238, %236
  %240 = sext <4 x i16> %230 to <4 x i32>
  %241 = shl nsw <4 x i32> %240, <i32 1, i32 1, i32 1, i32 1>
  %242 = icmp slt <4 x i32> %241, <i32 32767, i32 32767, i32 32767, i32 32767>
  %243 = select <4 x i1> %242, <4 x i32> %241, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %244 = icmp sgt <4 x i32> %243, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %245 = select <4 x i1> %244, <4 x i32> %243, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %246 = trunc <4 x i32> %245 to <4 x i16>
  %247 = or <4 x i1> %229, %228
  %248 = and <4 x i1> %247, %171
  %249 = and <4 x i1> %247, %164
  %250 = and <4 x i1> %248, %172
  %251 = and <4 x i1> %157, %247
  %252 = select <4 x i1> %250, <4 x i16> %230, <4 x i16> %239
  %253 = select <4 x i1> %251, <4 x i16> %246, <4 x i16> %252
  %254 = sext <4 x i16> %253 to <4 x i32>
  %255 = add nsw <4 x i32> %254, <i32 32768, i32 32768, i32 32768, i32 32768>
  %256 = lshr <4 x i32> %255, <i32 1, i32 1, i32 1, i32 1>
  %257 = trunc <4 x i32> %256 to <4 x i16>
  %258 = icmp eq <4 x i16> %205, %257
  %259 = icmp eq <4 x i16> %257, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %260 = and <4 x i1> %259, %258
  %261 = sext <4 x i16> %205 to <4 x i32>
  %262 = shl <4 x i32> %256, <i32 16, i32 16, i32 16, i32 16>
  %263 = ashr exact <4 x i32> %262, <i32 16, i32 16, i32 16, i32 16>
  %264 = mul nsw <4 x i32> %263, %261
  %265 = sdiv <4 x i32> %264, <i32 32768, i32 32768, i32 32768, i32 32768>
  %266 = trunc <4 x i32> %265 to <4 x i16>
  %267 = or <4 x i1> %251, %249
  %268 = or <4 x i1> %267, %250
  %269 = and <4 x i1> %260, %268
  %270 = select <4 x i1> %269, <4 x i16> <i16 32767, i16 32767, i16 32767, i16 32767>, <4 x i16> %266
  %271 = and <4 x i16> %270, %180
  %272 = lshr <4 x i16> %270, <i16 15, i16 15, i16 15, i16 15>
  %273 = add nsw <4 x i16> %181, %272
  %274 = sext <4 x i16> %270 to <4 x i32>
  %275 = ashr <4 x i32> %274, %176
  %276 = trunc <4 x i32> %275 to <4 x i16>
  %277 = icmp sgt <4 x i16> %271, %273
  %278 = zext <4 x i1> %277 to <4 x i16>
  %279 = add <4 x i16> %184, %276
  %280 = add <4 x i16> %279, %278
  %281 = icmp slt <4 x i16> %280, <i16 127, i16 127, i16 127, i16 127>
  %282 = select <4 x i1> %281, <4 x i16> %280, <4 x i16> <i16 127, i16 127, i16 127, i16 127>
  %283 = icmp sgt <4 x i16> %282, <i16 -128, i16 -128, i16 -128, i16 -128>
  %284 = select <4 x i1> %283, <4 x i16> %282, <4 x i16> <i16 -128, i16 -128, i16 -128, i16 -128>
  %285 = trunc <4 x i16> %284 to <4 x i8>
  %286 = getelementptr inbounds i8, i8* %4, i64 %186
  %287 = bitcast i8* %286 to <4 x i8>*
  store <4 x i8> %285, <4 x i8>* %287, align 1, !alias.scope !705, !noalias !707
  %288 = add i64 %186, 4
  %289 = icmp eq i64 %288, %146
  br i1 %289, label %290, label %185, !llvm.loop !708

290:                                              ; preds = %185
  %291 = icmp eq i64 %146, %127
  br i1 %291, label %292, label %129

292:                                              ; preds = %386, %290, %116
  ret void

293:                                              ; preds = %129, %386
  %294 = phi i64 [ %412, %386 ], [ %130, %129 ]
  %295 = getelementptr inbounds i8, i8* %2, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = sext i8 %296 to i16
  %298 = load i16, i16* %121, align 4
  %299 = sub i16 %297, %298
  %300 = shl i16 %299, 7
  %301 = load i16, i16* %122, align 4
  %302 = icmp eq i16 %300, %301
  %303 = icmp eq i16 %300, -32768
  %304 = and i1 %303, %302
  br i1 %304, label %314, label %305

305:                                              ; preds = %293
  %306 = sext i16 %301 to i32
  %307 = sext i16 %300 to i32
  %308 = mul nsw i32 %307, %306
  %309 = icmp sgt i32 %308, -1
  %310 = select i1 %309, i32 16384, i32 -16383
  %311 = add nsw i32 %310, %308
  %312 = sdiv i32 %311, 32768
  %313 = trunc i32 %312 to i16
  br label %314

314:                                              ; preds = %293, %305
  %315 = phi i16 [ %313, %305 ], [ 32767, %293 ]
  %316 = load i32, i32* %123, align 4
  %317 = icmp sgt i32 %316, 0
  br i1 %317, label %318, label %327

318:                                              ; preds = %314
  %319 = add nsw i32 %316, -1
  %320 = sext i16 %300 to i32
  %321 = shl i32 %320, %319
  %322 = icmp slt i32 %321, 32767
  %323 = select i1 %322, i32 %321, i32 32767
  %324 = icmp sgt i32 %323, -32768
  %325 = select i1 %324, i32 %323, i32 -32768
  %326 = trunc i32 %325 to i16
  br label %327

327:                                              ; preds = %318, %314
  %328 = phi i16 [ %326, %318 ], [ %300, %314 ]
  %329 = load i16, i16* %124, align 4
  %330 = icmp eq i16 %328, %329
  %331 = icmp eq i16 %328, -32768
  %332 = and i1 %331, %330
  br i1 %332, label %342, label %333

333:                                              ; preds = %327
  %334 = sext i16 %329 to i32
  %335 = sext i16 %328 to i32
  %336 = mul nsw i32 %334, %335
  %337 = icmp sgt i32 %336, -1
  %338 = select i1 %337, i32 16384, i32 -16383
  %339 = add nsw i32 %338, %336
  %340 = sdiv i32 %339, 32768
  %341 = trunc i32 %340 to i16
  br label %342

342:                                              ; preds = %327, %333
  %343 = phi i16 [ %341, %333 ], [ 32767, %327 ]
  br i1 %317, label %344, label %352

344:                                              ; preds = %342
  %345 = sext i16 %343 to i32
  %346 = shl nsw i32 %345, 1
  %347 = icmp slt i32 %346, 32767
  %348 = select i1 %347, i32 %346, i32 32767
  %349 = icmp sgt i32 %348, -32768
  %350 = select i1 %349, i32 %348, i32 -32768
  %351 = trunc i32 %350 to i16
  br label %370

352:                                              ; preds = %342
  %353 = icmp slt i32 %316, 0
  br i1 %353, label %354, label %370

354:                                              ; preds = %352
  %355 = sub nsw i32 0, %316
  %356 = zext i32 %355 to i64
  %357 = shl nsw i64 -1, %356
  %358 = trunc i64 %357 to i16
  %359 = xor i16 %358, -1
  %360 = and i16 %343, %359
  %361 = ashr i16 %359, 1
  %362 = lshr i16 %343, 15
  %363 = add nsw i16 %362, %361
  %364 = sext i16 %343 to i32
  %365 = ashr i32 %364, %355
  %366 = trunc i32 %365 to i16
  %367 = icmp sgt i16 %360, %363
  %368 = zext i1 %367 to i16
  %369 = add nsw i16 %368, %366
  br label %370

370:                                              ; preds = %344, %354, %352
  %371 = phi i16 [ %369, %354 ], [ %343, %352 ], [ %351, %344 ]
  %372 = sext i16 %371 to i32
  %373 = add nsw i32 %372, 32768
  %374 = lshr i32 %373, 1
  %375 = trunc i32 %374 to i16
  %376 = icmp eq i16 %315, %375
  %377 = icmp eq i16 %375, -32768
  %378 = and i1 %377, %376
  br i1 %378, label %386, label %379

379:                                              ; preds = %370
  %380 = sext i16 %315 to i32
  %381 = shl i32 %374, 16
  %382 = ashr exact i32 %381, 16
  %383 = mul nsw i32 %382, %380
  %384 = sdiv i32 %383, 32768
  %385 = trunc i32 %384 to i16
  br label %386

386:                                              ; preds = %370, %379
  %387 = phi i16 [ %385, %379 ], [ 32767, %370 ]
  %388 = load i32, i32* %125, align 4
  %389 = sub nsw i32 0, %388
  %390 = zext i32 %389 to i64
  %391 = shl nsw i64 -1, %390
  %392 = trunc i64 %391 to i16
  %393 = xor i16 %392, -1
  %394 = and i16 %387, %393
  %395 = ashr i16 %393, 1
  %396 = lshr i16 %387, 15
  %397 = add nsw i16 %395, %396
  %398 = sext i16 %387 to i32
  %399 = ashr i32 %398, %389
  %400 = trunc i32 %399 to i16
  %401 = icmp sgt i16 %394, %397
  %402 = zext i1 %401 to i16
  %403 = load i16, i16* %126, align 2
  %404 = add i16 %403, %400
  %405 = add i16 %404, %402
  %406 = icmp slt i16 %405, 127
  %407 = select i1 %406, i16 %405, i16 127
  %408 = icmp sgt i16 %407, -128
  %409 = select i1 %408, i16 %407, i16 -128
  %410 = trunc i16 %409 to i8
  %411 = getelementptr inbounds i8, i8* %4, i64 %294
  store i8 %410, i8* %411, align 1
  %412 = add nuw nsw i64 %294, 1
  %413 = icmp eq i64 %412, %127
  br i1 %413, label %292, label %293, !llvm.loop !709
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.rint.v16f32(<16 x float>) #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { cold noreturn nounwind }
attributes #17 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { builtin nounwind }
attributes #19 = { nounwind }
attributes #20 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !16, !12}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !12}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !12}
!31 = distinct !{!31, !14}
!32 = distinct !{!32, !12}
!33 = !{i32 6546695}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!36 = distinct !{!36, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!39 = distinct !{!39, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!40 = distinct !{!40, !12}
!41 = distinct !{!41, !14}
!42 = distinct !{!42, !16, !12}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!45 = distinct !{!45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!48 = distinct !{!48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!49 = distinct !{!49, !12}
!50 = distinct !{!50, !14}
!51 = distinct !{!51, !16, !12}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!54 = distinct !{!54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!57 = distinct !{!57, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!58 = distinct !{!58, !12}
!59 = distinct !{!59, !14}
!60 = distinct !{!60, !16, !12}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = distinct !{!66, !12}
!67 = distinct !{!67, !12}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!70 = distinct !{!70, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!73 = distinct !{!73, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!74 = distinct !{!74, !14}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!77 = distinct !{!77, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!80 = distinct !{!80, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!81 = distinct !{!81, !14}
!82 = distinct !{!82, !12}
!83 = distinct !{!83, !16, !12}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!86 = distinct !{!86, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!89 = distinct !{!89, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!90 = distinct !{!90, !14}
!91 = distinct !{!91, !12}
!92 = distinct !{!92, !16, !12}
!93 = !{!94}
!94 = distinct !{!94, !95, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!95 = distinct !{!95, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!98 = distinct !{!98, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!99 = distinct !{!99, !14}
!100 = distinct !{!100, !12}
!101 = distinct !{!101, !16, !12}
!102 = distinct !{!102, !12}
!103 = !{i32 0, i32 33}
!104 = distinct !{!104, !16, !12}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!107 = distinct !{!107, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!108 = !{!109}
!109 = distinct !{!109, !110, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!110 = distinct !{!110, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!111 = distinct !{!111, !14}
!112 = distinct !{!112, !12}
!113 = distinct !{!113, !16, !12}
!114 = !{!115}
!115 = distinct !{!115, !116, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!116 = distinct !{!116, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!117 = !{!118}
!118 = distinct !{!118, !119, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!119 = distinct !{!119, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!120 = distinct !{!120, !14}
!121 = distinct !{!121, !12}
!122 = distinct !{!122, !16, !12}
!123 = !{i8 0, i8 2}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!126 = distinct !{!126, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!129 = distinct !{!129, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!132 = distinct !{!132, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!135 = distinct !{!135, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!138 = distinct !{!138, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!141 = distinct !{!141, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!142 = distinct !{!142, !12}
!143 = distinct !{!143, !14}
!144 = distinct !{!144, !16, !12}
!145 = !{!146}
!146 = distinct !{!146, !147}
!147 = distinct !{!147, !"LVerDomain"}
!148 = !{!149}
!149 = distinct !{!149, !147}
!150 = !{!151}
!151 = distinct !{!151, !147}
!152 = !{!146, !149}
!153 = distinct !{!153, !12}
!154 = distinct !{!154, !12}
!155 = !{!156}
!156 = distinct !{!156, !157, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!157 = distinct !{!157, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!158 = !{!159}
!159 = distinct !{!159, !160, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!160 = distinct !{!160, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!161 = !{!162}
!162 = distinct !{!162, !163, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!163 = distinct !{!163, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!164 = !{!165}
!165 = distinct !{!165, !166, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!166 = distinct !{!166, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!169 = distinct !{!169, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!172 = distinct !{!172, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!173 = !{!174}
!174 = distinct !{!174, !175, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!175 = distinct !{!175, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!176 = !{!177}
!177 = distinct !{!177, !178, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!178 = distinct !{!178, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!181 = distinct !{!181, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!182 = !{!183}
!183 = distinct !{!183, !184, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!184 = distinct !{!184, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!185 = !{!186}
!186 = distinct !{!186, !187, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!187 = distinct !{!187, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!188 = !{!189}
!189 = distinct !{!189, !190, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!190 = distinct !{!190, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!191 = !{!192}
!192 = distinct !{!192, !193, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!193 = distinct !{!193, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!194 = distinct !{!194, !12}
!195 = distinct !{!195, !14}
!196 = distinct !{!196, !16, !12}
!197 = !{!198}
!198 = distinct !{!198, !199, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!199 = distinct !{!199, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!200 = distinct !{!200, !12}
!201 = distinct !{!201, !14}
!202 = distinct !{!202, !16, !12}
!203 = distinct !{!203, !12}
!204 = distinct !{!204, !14}
!205 = distinct !{!205, !16, !12}
!206 = distinct !{!206, !12}
!207 = distinct !{!207, !14}
!208 = distinct !{!208, !16, !12}
!209 = distinct !{!209, !12}
!210 = distinct !{!210, !14}
!211 = distinct !{!211, !16, !12}
!212 = !{!213}
!213 = distinct !{!213, !214, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!214 = distinct !{!214, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!215 = distinct !{!215, !12}
!216 = distinct !{!216, !14}
!217 = distinct !{!217, !16, !12}
!218 = distinct !{!218, !12}
!219 = distinct !{!219, !14}
!220 = distinct !{!220, !16, !12}
!221 = distinct !{!221, !12}
!222 = distinct !{!222, !14}
!223 = distinct !{!223, !16, !12}
!224 = distinct !{!224, !12}
!225 = distinct !{!225, !14}
!226 = distinct !{!226, !16, !12}
!227 = !{!228}
!228 = distinct !{!228, !229, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!229 = distinct !{!229, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!230 = !{!231}
!231 = distinct !{!231, !232, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!232 = distinct !{!232, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!233 = distinct !{!233, !12}
!234 = distinct !{!234, !14}
!235 = distinct !{!235, !16, !12}
!236 = !{!237}
!237 = distinct !{!237, !238}
!238 = distinct !{!238, !"LVerDomain"}
!239 = !{!240}
!240 = distinct !{!240, !238}
!241 = distinct !{!241, !12}
!242 = distinct !{!242, !12}
!243 = !{!244}
!244 = distinct !{!244, !245, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!245 = distinct !{!245, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!246 = !{!247}
!247 = distinct !{!247, !248, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!248 = distinct !{!248, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!249 = !{!250}
!250 = distinct !{!250, !251, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!251 = distinct !{!251, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!252 = !{!253}
!253 = distinct !{!253, !254, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!254 = distinct !{!254, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!255 = !{!256}
!256 = distinct !{!256, !257, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!257 = distinct !{!257, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!258 = !{!259}
!259 = distinct !{!259, !260, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!260 = distinct !{!260, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!261 = !{!262}
!262 = distinct !{!262, !263, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!263 = distinct !{!263, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!264 = !{!265}
!265 = distinct !{!265, !266, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!266 = distinct !{!266, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!267 = distinct !{!267, !12}
!268 = distinct !{!268, !14}
!269 = distinct !{!269, !16, !12}
!270 = !{!271}
!271 = distinct !{!271, !272, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!272 = distinct !{!272, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!273 = !{!274}
!274 = distinct !{!274, !275, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!275 = distinct !{!275, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!276 = distinct !{!276, !12}
!277 = distinct !{!277, !14}
!278 = distinct !{!278, !16, !12}
!279 = !{!280}
!280 = distinct !{!280, !281, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!281 = distinct !{!281, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!282 = !{!283}
!283 = distinct !{!283, !284, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!284 = distinct !{!284, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!285 = distinct !{!285, !12}
!286 = distinct !{!286, !14}
!287 = distinct !{!287, !16, !12}
!288 = !{!289}
!289 = distinct !{!289, !290, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!290 = distinct !{!290, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!291 = !{!292}
!292 = distinct !{!292, !293, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!293 = distinct !{!293, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!294 = !{!295}
!295 = distinct !{!295, !296, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!296 = distinct !{!296, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!297 = distinct !{!297, !12}
!298 = distinct !{!298, !14}
!299 = distinct !{!299, !16, !12}
!300 = !{!301}
!301 = distinct !{!301, !302, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!302 = distinct !{!302, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!303 = distinct !{!303, !12}
!304 = distinct !{!304, !14}
!305 = distinct !{!305, !16, !12}
!306 = !{!307}
!307 = distinct !{!307, !308, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!308 = distinct !{!308, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!309 = !{!310}
!310 = distinct !{!310, !311, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!311 = distinct !{!311, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!312 = distinct !{!312, !12}
!313 = distinct !{!313, !14}
!314 = distinct !{!314, !16, !12}
!315 = !{!316}
!316 = distinct !{!316, !317, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!317 = distinct !{!317, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!318 = !{!319}
!319 = distinct !{!319, !320, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!320 = distinct !{!320, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!321 = distinct !{!321, !12}
!322 = distinct !{!322, !14}
!323 = distinct !{!323, !16, !12}
!324 = !{!325}
!325 = distinct !{!325, !326, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!326 = distinct !{!326, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!327 = !{!328}
!328 = distinct !{!328, !329, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!329 = distinct !{!329, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!330 = !{!331}
!331 = distinct !{!331, !332, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!332 = distinct !{!332, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!333 = distinct !{!333, !12}
!334 = distinct !{!334, !14}
!335 = distinct !{!335, !16, !12}
!336 = !{!337}
!337 = distinct !{!337, !338, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!338 = distinct !{!338, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!339 = distinct !{!339, !12}
!340 = distinct !{!340, !14}
!341 = distinct !{!341, !16, !12}
!342 = !{!343}
!343 = distinct !{!343, !344, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!344 = distinct !{!344, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!345 = !{!346}
!346 = distinct !{!346, !347, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!347 = distinct !{!347, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!348 = distinct !{!348, !12}
!349 = distinct !{!349, !14}
!350 = distinct !{!350, !16, !12}
!351 = !{!352}
!352 = distinct !{!352, !353, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!353 = distinct !{!353, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!354 = !{!355}
!355 = distinct !{!355, !356, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!356 = distinct !{!356, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!357 = distinct !{!357, !12}
!358 = distinct !{!358, !14}
!359 = distinct !{!359, !16, !12}
!360 = !{!361}
!361 = distinct !{!361, !362, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!362 = distinct !{!362, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!363 = !{!364}
!364 = distinct !{!364, !365, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!365 = distinct !{!365, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!366 = distinct !{!366, !12}
!367 = distinct !{!367, !14}
!368 = distinct !{!368, !16, !12}
!369 = !{!370}
!370 = distinct !{!370, !371, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!371 = distinct !{!371, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!372 = !{!373}
!373 = distinct !{!373, !374, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!374 = distinct !{!374, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!375 = distinct !{!375, !12}
!376 = distinct !{!376, !14}
!377 = distinct !{!377, !16, !12}
!378 = !{!379}
!379 = distinct !{!379, !380, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!380 = distinct !{!380, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!381 = !{!382}
!382 = distinct !{!382, !383, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!383 = distinct !{!383, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!384 = distinct !{!384, !12}
!385 = distinct !{!385, !14}
!386 = distinct !{!386, !16, !12}
!387 = !{!388}
!388 = distinct !{!388, !389, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!389 = distinct !{!389, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!390 = !{!391}
!391 = distinct !{!391, !392, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!392 = distinct !{!392, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!393 = distinct !{!393, !12}
!394 = distinct !{!394, !14}
!395 = distinct !{!395, !16, !12}
!396 = !{!397}
!397 = distinct !{!397, !398, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!398 = distinct !{!398, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!399 = !{!400}
!400 = distinct !{!400, !401, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!401 = distinct !{!401, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!402 = !{!403}
!403 = distinct !{!403, !404, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!404 = distinct !{!404, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!405 = distinct !{!405, !12}
!406 = distinct !{!406, !14}
!407 = distinct !{!407, !16, !12}
!408 = !{!409}
!409 = distinct !{!409, !410, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!410 = distinct !{!410, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!411 = distinct !{!411, !12}
!412 = distinct !{!412, !14}
!413 = distinct !{!413, !16, !12}
!414 = !{!415}
!415 = distinct !{!415, !416, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!416 = distinct !{!416, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!417 = !{!418}
!418 = distinct !{!418, !419, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!419 = distinct !{!419, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!420 = distinct !{!420, !12}
!421 = distinct !{!421, !14}
!422 = distinct !{!422, !16, !12}
!423 = !{!424}
!424 = distinct !{!424, !425, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!425 = distinct !{!425, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!426 = !{!427}
!427 = distinct !{!427, !428, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!428 = distinct !{!428, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!429 = distinct !{!429, !12}
!430 = distinct !{!430, !14}
!431 = distinct !{!431, !16, !12}
!432 = !{!433}
!433 = distinct !{!433, !434, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!434 = distinct !{!434, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!435 = !{!436}
!436 = distinct !{!436, !437, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!437 = distinct !{!437, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!438 = !{!439}
!439 = distinct !{!439, !440, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!440 = distinct !{!440, !"_ZN6tflite13optimized_ops11MapAsVectorIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!441 = distinct !{!441, !12}
!442 = distinct !{!442, !14}
!443 = distinct !{!443, !16, !12}
!444 = !{!445}
!445 = distinct !{!445, !446, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!446 = distinct !{!446, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!447 = distinct !{!447, !12}
!448 = distinct !{!448, !14}
!449 = distinct !{!449, !16, !12}
!450 = !{!451}
!451 = distinct !{!451, !452, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!452 = distinct !{!452, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!453 = !{!454}
!454 = distinct !{!454, !455, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!455 = distinct !{!455, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!456 = distinct !{!456, !12}
!457 = distinct !{!457, !14}
!458 = distinct !{!458, !16, !12}
!459 = !{!460}
!460 = distinct !{!460, !461, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!461 = distinct !{!461, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!462 = !{!463}
!463 = distinct !{!463, !464, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!464 = distinct !{!464, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!465 = distinct !{!465, !12}
!466 = distinct !{!466, !14}
!467 = distinct !{!467, !16, !12}
!468 = !{!469}
!469 = distinct !{!469, !470, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!470 = distinct !{!470, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!471 = !{!472}
!472 = distinct !{!472, !473, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!473 = distinct !{!473, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!474 = distinct !{!474, !12}
!475 = distinct !{!475, !14}
!476 = distinct !{!476, !16, !12}
!477 = !{!478}
!478 = distinct !{!478, !479, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!479 = distinct !{!479, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!480 = !{!481}
!481 = distinct !{!481, !482, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!482 = distinct !{!482, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!483 = distinct !{!483, !12}
!484 = distinct !{!484, !14}
!485 = distinct !{!485, !16, !12}
!486 = !{!487}
!487 = distinct !{!487, !488, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!488 = distinct !{!488, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!489 = !{!490}
!490 = distinct !{!490, !491, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!491 = distinct !{!491, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!492 = !{!493}
!493 = distinct !{!493, !494, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!494 = distinct !{!494, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!495 = !{!496}
!496 = distinct !{!496, !497, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!497 = distinct !{!497, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!498 = !{!499}
!499 = distinct !{!499, !500, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!500 = distinct !{!500, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!501 = !{!502}
!502 = distinct !{!502, !503, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!503 = distinct !{!503, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!504 = distinct !{!504, !14}
!505 = !{!506}
!506 = distinct !{!506, !507, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!507 = distinct !{!507, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!508 = !{!509}
!509 = distinct !{!509, !510, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!510 = distinct !{!510, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!511 = distinct !{!511, !14}
!512 = distinct !{!512, !14}
!513 = !{!514}
!514 = distinct !{!514, !515}
!515 = distinct !{!515, !"LVerDomain"}
!516 = !{!517}
!517 = distinct !{!517, !515}
!518 = distinct !{!518, !12}
!519 = distinct !{!519, !12}
!520 = !{!521}
!521 = distinct !{!521, !522, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!522 = distinct !{!522, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!523 = !{!524}
!524 = distinct !{!524, !525, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!525 = distinct !{!525, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!526 = distinct !{!526, !14}
!527 = distinct !{!527, !12}
!528 = distinct !{!528, !16, !12}
!529 = !{!530}
!530 = distinct !{!530, !531}
!531 = distinct !{!531, !"LVerDomain"}
!532 = !{!533}
!533 = distinct !{!533, !531}
!534 = distinct !{!534, !12}
!535 = distinct !{!535, !12}
!536 = !{!537}
!537 = distinct !{!537, !538, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!538 = distinct !{!538, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!539 = !{!540}
!540 = distinct !{!540, !541, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!541 = distinct !{!541, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!542 = distinct !{!542, !14}
!543 = !{!544}
!544 = distinct !{!544, !545, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!545 = distinct !{!545, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!546 = !{!547}
!547 = distinct !{!547, !548, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!548 = distinct !{!548, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!549 = distinct !{!549, !12}
!550 = distinct !{!550, !14}
!551 = distinct !{!551, !16, !12}
!552 = !{!553}
!553 = distinct !{!553, !554}
!554 = distinct !{!554, !"LVerDomain"}
!555 = !{!556}
!556 = distinct !{!556, !554}
!557 = distinct !{!557, !12}
!558 = distinct !{!558, !12}
!559 = !{!560}
!560 = distinct !{!560, !561, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!561 = distinct !{!561, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!562 = !{!563}
!563 = distinct !{!563, !564, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!564 = distinct !{!564, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!565 = distinct !{!565, !12}
!566 = distinct !{!566, !14}
!567 = distinct !{!567, !16, !12}
!568 = !{!569}
!569 = distinct !{!569, !570, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!570 = distinct !{!570, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!571 = !{!572}
!572 = distinct !{!572, !573, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!573 = distinct !{!573, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!574 = distinct !{!574, !12}
!575 = distinct !{!575, !14}
!576 = distinct !{!576, !16, !12}
!577 = !{!578}
!578 = distinct !{!578, !579, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!579 = distinct !{!579, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!580 = !{!581}
!581 = distinct !{!581, !582, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!582 = distinct !{!582, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!583 = distinct !{!583, !12}
!584 = distinct !{!584, !14}
!585 = distinct !{!585, !16, !12}
!586 = !{!587}
!587 = distinct !{!587, !588}
!588 = distinct !{!588, !"LVerDomain"}
!589 = !{!590}
!590 = distinct !{!590, !588}
!591 = distinct !{!591, !12}
!592 = distinct !{!592, !12}
!593 = !{!594}
!594 = distinct !{!594, !595, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!595 = distinct !{!595, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!596 = !{!597}
!597 = distinct !{!597, !598, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!598 = distinct !{!598, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!599 = !{!600}
!600 = distinct !{!600, !601, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!601 = distinct !{!601, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!602 = !{!603}
!603 = distinct !{!603, !604, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!604 = distinct !{!604, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!605 = !{!606}
!606 = distinct !{!606, !607, !"_ZNK5Eigen9ArrayBaseINS_12ArrayWrapperINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_9ReplicateINS_16PartialReduxExprISD_NS3_15member_maxCoeffIffEELi0EEELin1ELi1EEEEEEEEmlIdEEKNS2_INS3_17scalar_product_opIfNS3_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSR_NSP_IfSR_EEEEEE5valueEE4typeEEEKSM_KNS3_19plain_constant_typeISM_SW_E4typeEEERKSR_: argument 0"}
!607 = distinct !{!607, !"_ZNK5Eigen9ArrayBaseINS_12ArrayWrapperINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEKNS_9ReplicateINS_16PartialReduxExprISD_NS3_15member_maxCoeffIffEELi0EEELin1ELi1EEEEEEEEmlIdEEKNS2_INS3_17scalar_product_opIfNS3_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSR_NSP_IfSR_EEEEEE5valueEE4typeEEEKSM_KNS3_19plain_constant_typeISM_SW_E4typeEEERKSR_"}
!608 = !{!609}
!609 = distinct !{!609, !610}
!610 = distinct !{!610, !"LVerDomain"}
!611 = !{!612}
!612 = distinct !{!612, !610}
!613 = !{!614}
!614 = distinct !{!614, !610}
!615 = !{!612, !609}
!616 = distinct !{!616, !12}
!617 = distinct !{!617, !12}
!618 = !{i32 6544802}
!619 = distinct !{!619, !14}
!620 = distinct !{!620, !14}
!621 = distinct !{!621, !14}
!622 = distinct !{!622, !14}
!623 = !{!624}
!624 = distinct !{!624, !625}
!625 = distinct !{!625, !"LVerDomain"}
!626 = !{!627}
!627 = distinct !{!627, !625}
!628 = distinct !{!628, !12}
!629 = distinct !{!629, !12}
!630 = !{!631}
!631 = distinct !{!631, !632, !"_ZNK5Eigen9DenseBaseINS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE9subVectorILNS_13DirectionTypeE0EEENS_8internal11conditionalIXeqT_LSA_0EEKNS_5BlockIKS7_Lin1ELi1ELb1EEEKNSD_ISE_Li1ELin1ELb0EEEE4typeEl: argument 0"}
!632 = distinct !{!632, !"_ZNK5Eigen9DenseBaseINS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEE9subVectorILNS_13DirectionTypeE0EEENS_8internal11conditionalIXeqT_LSA_0EEKNS_5BlockIKS7_Lin1ELi1ELb1EEEKNSD_ISE_Li1ELin1ELb0EEEE4typeEl"}
!633 = distinct !{!633, !14}
!634 = distinct !{!634, !14}
!635 = distinct !{!635, !14}
!636 = !{i32 -2143151153, i32 -2143151144, i32 -2143151136, i32 -2143151128, i32 -2143151120, i32 -2143151112, i32 -2143151104, i32 -2143151096, i32 -2143151088, i32 -2143151080, i32 -2143151072, i32 -2143151064, i32 -2143151056, i32 -2143151048, i32 -2143151040, i32 -2143151032, i32 -2143151024, i32 -2143151016, i32 -2143151008, i32 -2143151000, i32 -2143150992, i32 -2143150984, i32 -2143150976, i32 -2143150968, i32 -2143150960, i32 -2143150952, i32 -2143150944, i32 -2143150936, i32 -2143150928, i32 -2143150920, i32 -2143150912, i32 -2143150904, i32 -2143150896, i32 -2143150888, i32 -2143150880, i32 -2143150872, i32 -2143150864, i32 -2143150856, i32 -2143150848, i32 -2143150840, i32 -2143150832, i32 -2143150824, i32 -2143150816, i32 -2143150808, i32 -2143150800, i32 -2143150792, i32 -2143150784, i32 -2143150776, i32 -2143150768, i32 -2143150760, i32 -2143150752, i32 -2143150744, i32 -2143150736, i32 -2143150728, i32 -2143150720, i32 -2143150712, i32 -2143150704, i32 -2143150696, i32 -2143150688, i32 -2143150680, i32 -2143150672, i32 -2143150664, i32 -2143150656, i32 -2143150648}
!637 = !{!638}
!638 = distinct !{!638, !639, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!639 = distinct !{!639, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!640 = distinct !{!640, !12}
!641 = distinct !{!641, !14}
!642 = distinct !{!642, !16, !12}
!643 = !{!644}
!644 = distinct !{!644, !645, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!645 = distinct !{!645, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!646 = distinct !{!646, !12}
!647 = distinct !{!647, !14}
!648 = distinct !{!648, !16, !12}
!649 = distinct !{!649, !12}
!650 = distinct !{!650, !14}
!651 = distinct !{!651, !16, !12}
!652 = distinct !{!652, !12}
!653 = distinct !{!653, !14}
!654 = distinct !{!654, !16, !12}
!655 = distinct !{!655, !12}
!656 = distinct !{!656, !14}
!657 = distinct !{!657, !16, !12}
!658 = !{!659}
!659 = distinct !{!659, !660, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!660 = distinct !{!660, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!661 = !{!662}
!662 = distinct !{!662, !663, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!663 = distinct !{!663, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!664 = distinct !{!664, !12}
!665 = distinct !{!665, !14}
!666 = distinct !{!666, !16, !12}
!667 = distinct !{!667, !14}
!668 = !{!"branch_weights", i32 1, i32 2000}
!669 = !{!"branch_weights", i32 2000, i32 1}
!670 = distinct !{!670, !14}
!671 = distinct !{!671, !14}
!672 = !{!673}
!673 = distinct !{!673, !674}
!674 = distinct !{!674, !"LVerDomain"}
!675 = !{!676}
!676 = distinct !{!676, !674}
!677 = distinct !{!677, !12}
!678 = distinct !{!678, !12}
!679 = distinct !{!679, !14}
!680 = distinct !{!680, !12}
!681 = distinct !{!681, !16, !12}
!682 = distinct !{!682, !12}
!683 = distinct !{!683, !16, !12}
!684 = distinct !{!684, !12}
!685 = distinct !{!685, !14}
!686 = distinct !{!686, !16, !12}
!687 = !{!688}
!688 = distinct !{!688, !689}
!689 = distinct !{!689, !"LVerDomain"}
!690 = !{!691}
!691 = distinct !{!691, !689}
!692 = !{!693}
!693 = distinct !{!693, !689}
!694 = !{!691, !688}
!695 = distinct !{!695, !12}
!696 = distinct !{!696, !12}
!697 = distinct !{!697, !12}
!698 = distinct !{!698, !14}
!699 = distinct !{!699, !16, !12}
!700 = !{!701}
!701 = distinct !{!701, !702}
!702 = distinct !{!702, !"LVerDomain"}
!703 = !{!704}
!704 = distinct !{!704, !702}
!705 = !{!706}
!706 = distinct !{!706, !702}
!707 = !{!704, !701}
!708 = distinct !{!708, !12}
!709 = distinct !{!709, !12}
