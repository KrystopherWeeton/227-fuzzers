; ModuleID = '../../net/third_party/quiche/src/quic/core/crypto/proof_source.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/crypto/proof_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.quic::CryptoBuffers" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.crypto_buffer_st**, %struct.crypto_buffer_st**, %"class.std::__1::__compressed_pair" }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.crypto_buffer_st** }
%"struct.quic::ProofSource::Chain" = type { %"class.quic::QuicReferenceCounted.base", %"class.std::__1::vector.2" }
%"class.quic::QuicReferenceCounted.base" = type { %"class.quic::QuicReferenceCountedImpl.base" }
%"class.quic::QuicReferenceCountedImpl.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.crypto_buffer_pool_st = type opaque

@_ZTVN4quic11ProofSource5ChainE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.quic::ProofSource::Chain"*)* @_ZN4quic11ProofSource5ChainD2Ev to i8*), i8* bitcast (void (%"struct.quic::ProofSource::Chain"*)* @_ZN4quic11ProofSource5ChainD0Ev to i8*)] }, align 8

@_ZN4quic13CryptoBuffersD1Ev = hidden unnamed_addr alias void (%"struct.quic::CryptoBuffers"*), void (%"struct.quic::CryptoBuffers"*)* @_ZN4quic13CryptoBuffersD2Ev
@_ZN4quic11ProofSource5ChainC1ERKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE = hidden unnamed_addr alias void (%"struct.quic::ProofSource::Chain"*, %"class.std::__1::vector.2"*), void (%"struct.quic::ProofSource::Chain"*, %"class.std::__1::vector.2"*)* @_ZN4quic11ProofSource5ChainC2ERKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE
@_ZN4quic11ProofSource5ChainD1Ev = hidden unnamed_addr alias void (%"struct.quic::ProofSource::Chain"*), void (%"struct.quic::ProofSource::Chain"*)* @_ZN4quic11ProofSource5ChainD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic13CryptoBuffersD2Ev(%"struct.quic::CryptoBuffers"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.quic::CryptoBuffers", %"struct.quic::CryptoBuffers"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast %struct.crypto_buffer_st*** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"struct.quic::CryptoBuffers"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %14, %1
  %9 = phi i64 [ %4, %1 ], [ %22, %14 ]
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  store i64 %9, i64* %3, align 8
  %12 = inttoptr i64 %9 to i8*
  tail call void @_ZdlPv(i8* %12) #7
  br label %13

13:                                               ; preds = %8, %11
  ret void

14:                                               ; preds = %1, %14
  %15 = phi i64 [ %22, %14 ], [ %6, %1 ]
  %16 = phi i64 [ %20, %14 ], [ 0, %1 ]
  %17 = inttoptr i64 %15 to %struct.crypto_buffer_st**
  %18 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %17, i64 %16
  %19 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %18, align 8
  tail call void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st* %19) #8
  %20 = add nuw i64 %16, 1
  %21 = load i64, i64* %3, align 8
  %22 = load i64, i64* %5, align 8
  %23 = sub i64 %21, %22
  %24 = ashr exact i64 %23, 3
  %25 = icmp ult i64 %20, %24
  br i1 %25, label %14, label %8
}

declare void @CRYPTO_BUFFER_free(%struct.crypto_buffer_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic11ProofSource5ChainC2ERKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE(%"struct.quic::ProofSource::Chain"*, %"class.std::__1::vector.2"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic11ProofSource5ChainE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::vector.2"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #8
  %7 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::basic_string"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.2"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = sdiv exact i64 %12, 24
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %56, label %15

15:                                               ; preds = %2
  %16 = icmp ugt i64 %13, 768614336404564650
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast %"class.std::__1::vector.2"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %18) #9
  unreachable

19:                                               ; preds = %15
  %20 = tail call i8* @_Znwm(i64 %12) #7
  %21 = bitcast i8* %20 to %"class.std::__1::basic_string"*
  %22 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1, i32 0, i32 1
  %23 = bitcast %"class.std::__1::basic_string"** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = bitcast %"class.std::__1::vector.2"* %5 to i8**
  store i8* %20, i8** %24, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %21, i64 %13
  %26 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::basic_string"* %25, %"class.std::__1::basic_string"** %26, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %1, i64 0, i32 0, i32 0
  %28 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %27, align 8
  %29 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %7, align 8
  %30 = bitcast %"class.std::__1::basic_string"** %22 to i64*
  %31 = ptrtoint i8* %20 to i64
  %32 = icmp eq %"class.std::__1::basic_string"* %28, %29
  br i1 %32, label %54, label %33

33:                                               ; preds = %19, %48
  %34 = phi %"class.std::__1::basic_string"* [ %50, %48 ], [ %21, %19 ]
  %35 = phi %"class.std::__1::basic_string"* [ %49, %48 ], [ %28, %19 ]
  %36 = bitcast %"class.std::__1::basic_string"* %35 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %33
  %41 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %42 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #8
  br label %48

43:                                               ; preds = %33
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %34, i8* %45, i64 %47) #8
  br label %48

48:                                               ; preds = %43, %40
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %35, i64 1
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %51 = icmp eq %"class.std::__1::basic_string"* %49, %29
  br i1 %51, label %52, label %33

52:                                               ; preds = %48
  %53 = ptrtoint %"class.std::__1::basic_string"* %50 to i64
  br label %54

54:                                               ; preds = %52, %19
  %55 = phi i64 [ %31, %19 ], [ %53, %52 ]
  store i64 %55, i64* %30, align 8
  br label %56

56:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic11ProofSource5ChainD2Ev(%"struct.quic::ProofSource::Chain"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic11ProofSource5ChainE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %6 = icmp eq %"class.std::__1::basic_string"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %9 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %9, align 8
  %11 = icmp eq %"class.std::__1::basic_string"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"class.std::__1::basic_string"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 -1
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void @_ZdlPv(i8* %21) #7
  br label %22

22:                                               ; preds = %19, %12
  %23 = icmp eq %"class.std::__1::basic_string"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.2"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %7
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"class.std::__1::basic_string"* %5, %"class.std::__1::basic_string"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #7
  br label %29

29:                                               ; preds = %1, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic11ProofSource5ChainD0Ev(%"struct.quic::ProofSource::Chain"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic11ProofSource5ChainE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %6 = icmp eq %"class.std::__1::basic_string"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %9 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %9, align 8
  %11 = icmp eq %"class.std::__1::basic_string"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"class.std::__1::basic_string"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 -1
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void @_ZdlPv(i8* %21) #7
  br label %22

22:                                               ; preds = %19, %12
  %23 = icmp eq %"class.std::__1::basic_string"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.2"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %7
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"class.std::__1::basic_string"* %5, %"class.std::__1::basic_string"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #7
  br label %29

29:                                               ; preds = %1, %27
  %30 = bitcast %"struct.quic::ProofSource::Chain"* %0 to i8*
  tail call void @_ZdlPv(i8* %30) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4quic11ProofSource5Chain15ToCryptoBuffersEv(%"struct.quic::CryptoBuffers"* noalias sret, %"struct.quic::ProofSource::Chain"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.quic::CryptoBuffers", %"struct.quic::CryptoBuffers"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"struct.quic::CryptoBuffers", %"struct.quic::CryptoBuffers"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.quic::CryptoBuffers"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #8
  %6 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %1, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.quic::ProofSource::Chain", %"struct.quic::ProofSource::Chain"* %1, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast %"class.std::__1::basic_string"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.2"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = sdiv exact i64 %12, 24
  %14 = bitcast %struct.crypto_buffer_st*** %4 to i64*
  %15 = bitcast %"struct.quic::CryptoBuffers"* %0 to i64*
  %16 = icmp eq i64 %12, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %2
  %18 = icmp ugt i64 %13, 2305843009213693951
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  tail call void @abort() #9
  unreachable

20:                                               ; preds = %17
  %21 = shl nsw i64 %13, 3
  %22 = tail call i8* @_Znwm(i64 %21) #7
  %23 = bitcast i8* %22 to %struct.crypto_buffer_st**
  %24 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %23, i64 %13
  %25 = ptrtoint %struct.crypto_buffer_st** %24 to i64
  %26 = insertelement <2 x i8*> undef, i8* %22, i32 0
  %27 = shufflevector <2 x i8*> %26, <2 x i8*> undef, <2 x i32> zeroinitializer
  %28 = ptrtoint <2 x i8*> %27 to <2 x i64>
  %29 = bitcast %"struct.quic::CryptoBuffers"* %0 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %29, align 8
  store i64 %25, i64* %14, align 8
  br label %30

30:                                               ; preds = %20, %2
  %31 = icmp eq i64 %9, %11
  br i1 %31, label %115, label %32

32:                                               ; preds = %30
  %33 = bitcast %struct.crypto_buffer_st*** %3 to i64*
  br label %34

34:                                               ; preds = %32, %108
  %35 = phi i64 [ %11, %32 ], [ %111, %108 ]
  %36 = phi i64 [ 0, %32 ], [ %109, %108 ]
  %37 = inttoptr i64 %35 to %"class.std::__1::basic_string"*
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 %36
  %39 = bitcast %"class.std::__1::basic_string"* %38 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 %36, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  br label %51

48:                                               ; preds = %34
  %49 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  %50 = zext i8 %41 to i64
  br label %51

51:                                               ; preds = %43, %48
  %52 = phi i8* [ %45, %43 ], [ %49, %48 ]
  %53 = phi i64 [ %47, %43 ], [ %50, %48 ]
  %54 = tail call %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8* %52, i64 %53, %struct.crypto_buffer_pool_st* null) #8
  %55 = ptrtoint %struct.crypto_buffer_st* %54 to i64
  %56 = load %struct.crypto_buffer_st**, %struct.crypto_buffer_st*** %3, align 8
  %57 = load %struct.crypto_buffer_st**, %struct.crypto_buffer_st*** %4, align 8
  %58 = icmp ult %struct.crypto_buffer_st** %56, %57
  %59 = ptrtoint %struct.crypto_buffer_st** %57 to i64
  br i1 %58, label %60, label %64

60:                                               ; preds = %51
  %61 = bitcast %struct.crypto_buffer_st** %56 to i64*
  store i64 %55, i64* %61, align 8
  %62 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %56, i64 1
  %63 = ptrtoint %struct.crypto_buffer_st** %62 to i64
  store i64 %63, i64* %33, align 8
  br label %108

64:                                               ; preds = %51
  %65 = ptrtoint %struct.crypto_buffer_st** %56 to i64
  %66 = load i64, i64* %15, align 8
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 3
  %69 = add nsw i64 %68, 1
  %70 = icmp ugt i64 %69, 2305843009213693951
  br i1 %70, label %71, label %73

71:                                               ; preds = %64
  %72 = bitcast %"struct.quic::CryptoBuffers"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %72) #9
  unreachable

73:                                               ; preds = %64
  %74 = sub i64 %59, %66
  %75 = ashr exact i64 %74, 3
  %76 = icmp ult i64 %75, 1152921504606846975
  br i1 %76, label %77, label %85

77:                                               ; preds = %73
  %78 = ashr exact i64 %74, 2
  %79 = icmp ult i64 %78, %69
  %80 = select i1 %79, i64 %69, i64 %78
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %90, label %82

82:                                               ; preds = %77
  %83 = icmp ugt i64 %80, 2305843009213693951
  br i1 %83, label %84, label %85

84:                                               ; preds = %82
  tail call void @abort() #9
  unreachable

85:                                               ; preds = %82, %73
  %86 = phi i64 [ %80, %82 ], [ 2305843009213693951, %73 ]
  %87 = shl i64 %86, 3
  %88 = tail call i8* @_Znwm(i64 %87) #7
  %89 = bitcast i8* %88 to %struct.crypto_buffer_st**
  br label %90

90:                                               ; preds = %85, %77
  %91 = phi i64 [ %86, %85 ], [ 0, %77 ]
  %92 = phi i8* [ %88, %85 ], [ null, %77 ]
  %93 = phi %struct.crypto_buffer_st** [ %89, %85 ], [ null, %77 ]
  %94 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %93, i64 %68
  %95 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %93, i64 %91
  %96 = ptrtoint %struct.crypto_buffer_st** %95 to i64
  %97 = bitcast %struct.crypto_buffer_st** %94 to i64*
  store i64 %55, i64* %97, align 8
  %98 = getelementptr inbounds %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %94, i64 1
  %99 = ptrtoint %struct.crypto_buffer_st** %98 to i64
  %100 = ptrtoint %struct.crypto_buffer_st** %93 to i64
  %101 = icmp sgt i64 %67, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %90
  %103 = inttoptr i64 %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %103, i64 %67, i1 false) #8
  br label %104

104:                                              ; preds = %102, %90
  store i64 %100, i64* %15, align 8
  store i64 %99, i64* %33, align 8
  store i64 %96, i64* %14, align 8
  %105 = icmp eq i64 %66, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %104
  %107 = inttoptr i64 %66 to i8*
  tail call void @_ZdlPv(i8* %107) #7
  br label %108

108:                                              ; preds = %60, %104, %106
  %109 = add nuw i64 %36, 1
  %110 = load i64, i64* %8, align 8
  %111 = load i64, i64* %10, align 8
  %112 = sub i64 %110, %111
  %113 = sdiv exact i64 %112, 24
  %114 = icmp ult i64 %109, %113
  br i1 %114, label %34, label %115

115:                                              ; preds = %108, %30
  ret void
}

declare %struct.crypto_buffer_st* @CRYPTO_BUFFER_new(i8*, i64, %struct.crypto_buffer_pool_st*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
