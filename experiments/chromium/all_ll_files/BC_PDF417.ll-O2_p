; ModuleID = '../../third_party/pdfium/fxbarcode/pdf417/BC_PDF417.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/pdf417/BC_PDF417.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_PDF417 = type { %"class.std::__1::unique_ptr", i32, i32, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_BarcodeMatrix* }
%class.CBC_BarcodeMatrix = type { %"class.std::__1::vector", i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.CBC_BarcodeRow* }
%class.CBC_BarcodeRow = type { %"class.std::__1::vector.3", i64 }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { i8*, i8*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.0"* }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %"class.fxcrt::WideString" }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.15" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { i32*, i32*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [1 x i32] zeroinitializer, align 4
@_ZN12_GLOBAL__N_115g_CodewordTableE = internal unnamed_addr constant [3 x [929 x i16]] [[929 x i16] [i16 -10816, i16 -5392, i16 -2692, i16 -11040, i16 -5512, i16 -2754, i16 -22336, i16 -11152, i16 -22432, i16 20544, i16 -22480, i16 20512, i16 -21056, i16 -10512, i16 -5252, i16 -21280, i16 -10632, i16 -5314, i16 22720, i16 -21392, i16 22624, i16 24000, i16 -20752, i16 -10372, i16 23776, i16 -20872, i16 -10434, i16 23664, i16 -20932, i16 24304, i16 -20612, i16 24184, i16 -20674, i16 24444, i16 -2566, i16 -11552, i16 -5768, i16 -2882, i16 -23360, i16 -11664, i16 -5828, i16 -23456, i16 -11720, i16 18496, i16 -23504, i16 -11748, i16 18464, i16 -23528, i16 18448, i16 -22816, i16 -11400, i16 -5698, i16 19648, i16 -22928, i16 -11460, i16 19552, i16 -22984, i16 -11490, i16 19504, i16 -23012, i16 20192, i16 -22664, i16 -11330, i16 20080, i16 -22724, i16 20024, i16 -22754, i16 20344, i16 -22594, i16 20284, i16 20254, i16 -23872, i16 -11920, i16 -5956, i16 -23968, i16 -11976, i16 -5986, i16 17472, i16 -24016, i16 -12004, i16 17440, i16 -24040, i16 17424, i16 17416, i16 18112, i16 -23696, i16 -11844, i16 18016, i16 -23752, i16 -11874, i16 17968, i16 -23780, i16 17944, i16 17932, i16 18288, i16 -23620, i16 18232, i16 -23650, i16 18204, i16 18364, i16 -24224, i16 -12104, i16 -6050, i16 16960, i16 -24272, i16 -12132, i16 16928, i16 -24296, i16 -12146, i16 16912, i16 -24308, i16 16904, i16 -24314, i16 17248, i16 -24136, i16 -12066, i16 17200, i16 -24164, i16 17176, i16 -24178, i16 17164, i16 17158, i16 -24098, i16 17294, i16 16704, i16 -24400, i16 -12196, i16 16672, i16 -24424, i16 -12210, i16 16656, i16 -24436, i16 16648, i16 -24442, i16 16644, i16 16816, i16 16792, i16 16780, i16 16544, i16 -12242, i16 -24500, i16 -24506, i16 16514, i16 -13600, i16 -6792, i16 -3394, i16 -27456, i16 -13712, i16 -6852, i16 -27552, i16 -13768, i16 -6882, i16 10304, i16 -27600, i16 10272, i16 -26912, i16 -13448, i16 -6722, i16 11456, i16 -27024, i16 -13508, i16 11360, i16 -27080, i16 11312, i16 11288, i16 12000, i16 -26760, i16 -13378, i16 11888, i16 -26820, i16 11832, i16 11804, i16 12152, i16 -26690, i16 12092, i16 12222, i16 -9536, i16 -4752, i16 -2372, i16 -9632, i16 -4808, i16 -2402, i16 -19392, i16 -9680, i16 -4836, i16 -19424, i16 -9704, i16 -4850, i16 -19440, i16 -9716, i16 -27968, i16 -13968, i16 -6980, i16 -18752, i16 -28064, i16 -14024, i16 -7010, i16 -18848, i16 -9416, i16 -4706, i16 27712, i16 9248, i16 -28136, i16 -14066, i16 27680, i16 -18920, i16 27664, i16 9920, i16 -27792, i16 -13892, i16 28352, i16 9824, i16 -27848, i16 -13922, i16 28256, i16 -18632, i16 -9314, i16 28208, i16 9752, i16 28184, i16 10096, i16 -27716, i16 28528, i16 10040, i16 -27746, i16 28472, i16 -18530, i16 28444, i16 10172, i16 28604, i16 10142, i16 28574, i16 -9888, i16 -4936, i16 -2466, i16 -19904, i16 -9936, i16 -4964, i16 -19936, i16 -9960, i16 -4978, i16 -19952, i16 -9972, i16 -19960, i16 -19964, i16 -28320, i16 -14152, i16 -7074, i16 -19616, i16 -28368, i16 -14180, i16 26176, i16 8736, i16 -9828, i16 -14194, i16 26144, i16 8720, i16 -28404, i16 26128, i16 -19700, i16 -28410, i16 8708, i16 9056, i16 -28232, i16 -14114, i16 26464, i16 9008, i16 -28260, i16 26416, i16 -19556, i16 -28274, i16 26392, i16 8972, i16 8966, i16 9144, i16 -28194, i16 26552, i16 9116, i16 26524, i16 9102, i16 26510, i16 26590, i16 -20160, i16 -10064, i16 -5028, i16 -20192, i16 -10088, i16 -5042, i16 -20208, i16 -10100, i16 -20216, i16 -10106, i16 -20220, i16 -20222, i16 8512, i16 -28496, i16 -14244, i16 25408, i16 8480, i16 -28520, i16 -14258, i16 25376, i16 -20072, i16 -10034, i16 25360, i16 8456, i16 -28538, i16 25352, i16 -20090, i16 25348, i16 8624, i16 -28452, i16 25520, i16 8600, i16 -28466, i16 25496, i16 -20018, i16 25484, i16 8582, i16 25478, i16 25564, i16 25550, i16 -20320, i16 -10152, i16 -5074, i16 -20336, i16 -10164, i16 -20344, i16 -10170, i16 -20348, i16 -20350, i16 8352, i16 -28584, i16 -14290, i16 24992, i16 8336, i16 -28596, i16 24976, i16 -20276, i16 -28602, i16 24968, i16 8324, i16 24964, i16 8322, i16 8408, i16 25048, i16 25036, i16 25030, i16 -10196, i16 -10202, i16 -20414, i16 -28628, i16 8264, i16 24776, i16 24772, i16 24770, i16 -30016, i16 -14992, i16 -7492, i16 -30112, i16 -15048, i16 5184, i16 -30160, i16 -15076, i16 5152, i16 -30184, i16 5136, i16 5128, i16 5824, i16 -29840, i16 -14916, i16 5728, i16 -29896, i16 -14946, i16 5680, i16 -29924, i16 5656, i16 5644, i16 6000, i16 -29764, i16 5944, i16 -29794, i16 5916, i16 6076, i16 6046, i16 -12960, i16 -6472, i16 -3234, i16 -26048, i16 -13008, i16 -6500, i16 -26080, i16 -13032, i16 -6514, i16 -26096, i16 -13044, i16 -26104, i16 -13050, i16 -30368, i16 -15176, i16 -7586, i16 -25760, i16 -30416, i16 -15204, i16 13888, i16 4640, i16 -12900, i16 -15218, i16 13856, i16 -25832, i16 -30452, i16 13840, i16 4616, i16 13832, i16 4960, i16 -30280, i16 -15138, i16 14176, i16 4912, i16 -12834, i16 14128, i16 -25700, i16 -30322, i16 14104, i16 4876, i16 14092, i16 5048, i16 -30242, i16 14264, i16 5020, i16 14236, i16 5006, i16 5086, i16 14302, i16 -8896, i16 -4432, i16 -2212, i16 -8928, i16 -4456, i16 -2226, i16 -8944, i16 -4468, i16 -8952, i16 -4474, i16 -8956, i16 -26304, i16 -13136, i16 -6564, i16 -17600, i16 -26336, i16 -4388, i16 -6578, i16 -17632, i16 -8808, i16 -4402, i16 -17648, i16 -26360, i16 -13178, i16 -17656, i16 -8826, i16 -26366, i16 4416, i16 -30544, i16 -15268, i16 13120, i16 4384, i16 -30568, i16 -15282, i16 30528, i16 13088, i16 -26216, i16 -13106, i16 30496, i16 -17512, i16 -8754, i16 -30586, i16 30480, i16 13064, i16 -26234, i16 30472, i16 4354, i16 4528, i16 -30500, i16 13232, i16 4504, i16 -30514, i16 30640, i16 13208, i16 -26162, i16 30616, i16 -17458, i16 4486, i16 13190, i16 4572, i16 13276, i16 4558, i16 30684, i16 13262, i16 -9056, i16 -4520, i16 -2258, i16 -9072, i16 -4532, i16 -9080, i16 -4538, i16 -9084, i16 -9086, i16 -26464, i16 -13224, i16 -6610, i16 -18016, i16 -26480, i16 -4498, i16 -18032, i16 -9012, i16 -13242, i16 -18040, i16 -26492, i16 -18044, i16 -26494, i16 -18046, i16 4256, i16 -30632, i16 -15314, i16 12704, i16 4240, i16 -30644, i16 29600, i16 12688, i16 -26420, i16 -30650, i16 29584, i16 -17972, i16 4228, i16 29576, i16 12676, i16 4226, i16 12674, i16 4312, i16 -30610, i16 12760, i16 4300, i16 29656, i16 12748, i16 4294, i16 29644, i16 12742, i16 4334, i16 29678, i16 -9136, i16 -4564, i16 -9144, i16 -4570, i16 -9148, i16 -9150, i16 -26544, i16 -13268, i16 -18224, i16 -26552, i16 -13274, i16 -18232, i16 -9114, i16 -18236, i16 -26558, i16 -18238, i16 4176, i16 -30676, i16 12496, i16 4168, i16 -30682, i16 29136, i16 12488, i16 -26522, i16 29128, i16 -18202, i16 4162, i16 29124, i16 12482, i16 29122, i16 12524, i16 29164, i16 29158, i16 -4586, i16 -9182, i16 -13290, i16 -26588, i16 -26590, i16 4136, i16 12392, i16 28904, i16 4130, i16 12386, i16 -31392, i16 2624, i16 -31440, i16 2592, i16 -31464, i16 -15730, i16 2576, i16 -31476, i16 2568, i16 -31482, i16 2912, i16 -31304, i16 -15650, i16 2864, i16 -31332, i16 2840, i16 -31346, i16 2828, i16 2822, i16 3000, i16 -31266, i16 2972, i16 2958, i16 3038, i16 -29376, i16 -14672, i16 -7332, i16 -29408, i16 -14696, i16 -29424, i16 -14708, i16 -29432, i16 -14714, i16 -29436, i16 2368, i16 -31568, i16 -15780, i16 6976, i16 2336, i16 -14628, i16 -15794, i16 6944, i16 -29288, i16 -14642, i16 6928, i16 2312, i16 -31610, i16 6920, i16 -29306, i16 2306, i16 2480, i16 -31524, i16 7088, i16 2456, i16 -31538, i16 7064, i16 -29234, i16 7052, i16 2438, i16 2524, i16 7132, i16 2510, i16 7118, i16 -12640, i16 -6312, i16 -3154, i16 -12656, i16 -6324, i16 -12664, i16 -6330, i16 -12668, i16 -12670, i16 -29536, i16 -14760, i16 -25184, i16 -29552, i16 -14772, i16 -25200, i16 -12596, i16 -14778, i16 -25208, i16 -29564, i16 -25212, i16 -29566, i16 -25214, i16 2208, i16 -31656, i16 6560, i16 2192, i16 -14738, i16 15264, i16 6544, i16 -29492, i16 -31674, i16 15248, i16 -25140, i16 2180, i16 15240, i16 6532, i16 2178, i16 6530, i16 2264, i16 -31634, i16 6616, i16 2252, i16 15320, i16 6604, i16 2246, i16 15308, i16 6598, i16 2286, i16 6638, i16 15342, i16 -4272, i16 -2132, i16 -4280, i16 -2138, i16 -4284, i16 -4286, i16 -12720, i16 -6356, i16 -8496, i16 -4244, i16 -6362, i16 -8504, i16 -4250, i16 -8508, i16 -12734, i16 -8510, i16 -29616, i16 -14804, i16 -25392, i16 -29624, i16 -14810, i16 -16944, i16 -25400, i16 -12698, i16 -16952, i16 -8474, i16 -29630, i16 -16956, i16 -25406, i16 -16958, i16 2128, i16 -31700, i16 6352, i16 2120, i16 -31706, i16 14800, i16 6344, i16 -29594, i16 31696, i16 14792, i16 -25370, i16 2114, i16 31688, i16 -16922, i16 6338, i16 31684, i16 2156, i16 6380, i16 2150, i16 14828, i16 6374, i16 31724, i16 14822, i16 31718, i16 -4312, i16 -2154, i16 -4316, i16 -4318, i16 -12760, i16 -6378, i16 -8600, i16 -4298, i16 -8604, i16 -12766, i16 -8606, i16 -29656, i16 -14826, i16 -25496, i16 -29660, i16 -17176, i16 -25500, i16 -29662, i16 -17180, i16 -25502, i16 -17182, i16 2088, i16 -31722, i16 6248, i16 -29642, i16 14568, i16 6244, i16 2082, i16 31208, i16 14564, i16 6242, i16 31204, i16 14562, i16 31202, i16 6262, i16 31222, i16 -4334, i16 -8652, i16 -8654, i16 -25548, i16 -17292, i16 -17294, i16 6196, i16 14452, i16 30964, i16 30962, i16 1344, i16 1312, i16 -32104, i16 1296, i16 1288, i16 1284, i16 1456, i16 1432, i16 1420, i16 1414, i16 1500, i16 1486, i16 -31072, i16 -31088, i16 -15540, i16 -31096, i16 -15546, i16 -31100, i16 -31102, i16 1184, i16 -32168, i16 3488, i16 -31016, i16 -32180, i16 3472, i16 -31028, i16 3464, i16 -31034, i16 3460, i16 1154, i16 3458, i16 1240, i16 -32146, i16 3544, i16 -30994, i16 3532, i16 1222, i16 3526, i16 1262, i16 3566, i16 -14512, i16 -14520, i16 -14524, i16 -14526, i16 -31152, i16 -28976, i16 -14484, i16 -15578, i16 -28984, i16 -14490, i16 -28988, i16 -31166, i16 -28990, i16 1104, i16 3280, i16 1096, i16 -32218, i16 7632, i16 3272, i16 1092, i16 7624, i16 3268, i16 1090, i16 7620, i16 3266, i16 1132, i16 3308, i16 1126, i16 7660, i16 3302, i16 7654, i16 -6232, i16 -6236, i16 -6238, i16 -14552, i16 -12440, i16 -6218, i16 -12444, i16 -14558, i16 -12446, i16 -31192, i16 -15594, i16 -29080, i16 -14538, i16 -24856, i16 -29084, i16 -31198, i16 -24860, i16 -29086, i16 -24862, i16 1064, i16 -32234, i16 3176, i16 -31178, i16 7400, i16 3172, i16 1058, i16 15848, i16 7396, i16 3170, i16 15844, i16 7394, i16 1078, i16 3190, i16 7414, i16 15862, i16 -2092, i16 -2094, i16 -6252, i16 -4172, i16 -6254, i16 -4174, i16 -14572, i16 -12492, i16 -14574, i16 -8332, i16 -12494, i16 -8334, i16 -31212, i16 -29132, i16 -31214, i16 -24972, i16 -29134, i16 -16652], [929 x i16] [i16 -2720, i16 -1352, i16 -5568, i16 -2768, i16 -1380, i16 -5600, i16 -2792, i16 -1394, i16 -5616, i16 -2804, i16 -5624, i16 -2810, i16 -5628, i16 -5280, i16 -2632, i16 -1314, i16 -10688, i16 -5328, i16 -2660, i16 -10720, i16 -5352, i16 -2674, i16 -10736, i16 -5364, i16 -10744, i16 -5370, i16 -10748, i16 -10400, i16 -5192, i16 -2594, i16 -20928, i16 -10448, i16 -5220, i16 -20960, i16 -10472, i16 -5234, i16 -20976, i16 -10484, i16 -20984, i16 -10490, i16 -20988, i16 -20640, i16 -10312, i16 -5154, i16 24128, i16 -20688, i16 -10340, i16 24096, i16 -20712, i16 -10354, i16 24080, i16 -20724, i16 24072, i16 -20730, i16 24416, i16 -20552, i16 -10274, i16 24368, i16 -20580, i16 24344, i16 -20594, i16 24332, i16 24504, i16 -20514, i16 24476, i16 24462, i16 -5824, i16 -2896, i16 -1444, i16 -5856, i16 -2920, i16 -1458, i16 -5872, i16 -2932, i16 -5880, i16 -2938, i16 -5884, i16 -5886, i16 -11456, i16 -5712, i16 -2852, i16 -11488, i16 -5736, i16 -2866, i16 -11504, i16 -5748, i16 -11512, i16 -5754, i16 -11516, i16 -11518, i16 -22720, i16 -11344, i16 -5668, i16 -22752, i16 -11368, i16 -5682, i16 -22768, i16 -11380, i16 -22776, i16 -11386, i16 -22780, i16 -22782, i16 20288, i16 -22608, i16 -11300, i16 20256, i16 -22632, i16 -11314, i16 20240, i16 -22644, i16 20232, i16 -22650, i16 20228, i16 20400, i16 -22564, i16 20376, i16 -22578, i16 20364, i16 20358, i16 20444, i16 20430, i16 -5984, i16 -2984, i16 -1490, i16 -6000, i16 -2996, i16 -6008, i16 -3002, i16 -6012, i16 -6014, i16 -11872, i16 -5928, i16 -2962, i16 -11888, i16 -5940, i16 -11896, i16 -5946, i16 -11900, i16 -11902, i16 -23648, i16 -11816, i16 -5906, i16 -23664, i16 -11828, i16 -23672, i16 -11834, i16 -23676, i16 -23678, i16 18336, i16 -23592, i16 -11794, i16 18320, i16 -23604, i16 18312, i16 -23610, i16 18308, i16 18306, i16 18392, i16 -23570, i16 18380, i16 18374, i16 18414, i16 -6064, i16 -3028, i16 -6072, i16 -3034, i16 -6076, i16 -6078, i16 -12080, i16 -6036, i16 -12088, i16 -6042, i16 -12092, i16 -12094, i16 -24112, i16 -12052, i16 -24120, i16 -12058, i16 -24124, i16 -24126, i16 17360, i16 -24084, i16 17352, i16 -24090, i16 17348, i16 17346, i16 17388, i16 17382, i16 -6104, i16 -3050, i16 -6108, i16 -6110, i16 -12184, i16 -6090, i16 -12188, i16 -12190, i16 -24344, i16 -12170, i16 -24348, i16 -24350, i16 16872, i16 -24330, i16 16868, i16 16866, i16 -6124, i16 -6126, i16 -12236, i16 -12238, i16 -24460, i16 -24462, i16 -6848, i16 -3408, i16 -1700, i16 -6880, i16 -3432, i16 -1714, i16 -6896, i16 -3444, i16 -6904, i16 -3450, i16 -6908, i16 -6910, i16 -13504, i16 -6736, i16 -3364, i16 -13536, i16 -6760, i16 -3378, i16 -13552, i16 -6772, i16 -13560, i16 -6778, i16 -13564, i16 -13566, i16 -26816, i16 -13392, i16 -6692, i16 -26848, i16 -13416, i16 -6706, i16 -26864, i16 -13428, i16 -26872, i16 -13434, i16 -26876, i16 -26878, i16 12096, i16 -26704, i16 -13348, i16 12064, i16 -26728, i16 -13362, i16 12048, i16 -26740, i16 12040, i16 -26746, i16 12036, i16 12208, i16 -26660, i16 12184, i16 -26674, i16 12172, i16 12166, i16 12252, i16 12238, i16 -2400, i16 -1192, i16 27632, i16 -2416, i16 -1204, i16 27128, i16 -2424, i16 -1210, i16 26876, i16 -2428, i16 -2430, i16 -7008, i16 -3496, i16 -1746, i16 -4704, i16 -7024, i16 -1170, i16 -4720, i16 -2356, i16 -3514, i16 -4728, i16 -7036, i16 -4732, i16 -7038, i16 -4734, i16 -13920, i16 -6952, i16 -3474, i16 -9312, i16 -13936, i16 -6964, i16 -9328, i16 -4660, i16 -6970, i16 -9336, i16 -13948, i16 -9340, i16 -13950, i16 -9342, i16 -27744, i16 -13864, i16 -6930, i16 -18528, i16 -27760, i16 -13876, i16 -18544, i16 -9268, i16 -13882, i16 -18552, i16 -27772, i16 -18556, i16 -27774, i16 -18558, i16 10144, i16 -27688, i16 -13842, i16 28576, i16 10128, i16 -27700, i16 28560, i16 -18484, i16 -27706, i16 28552, i16 10116, i16 28548, i16 10114, i16 10200, i16 -27666, i16 28632, i16 10188, i16 28620, i16 10182, i16 28614, i16 10222, i16 -2480, i16 -1236, i16 26104, i16 -2488, i16 -1242, i16 25852, i16 -2492, i16 25726, i16 -2494, i16 -7088, i16 -3540, i16 -4912, i16 -7096, i16 -3546, i16 -4920, i16 -2458, i16 -4924, i16 -7102, i16 -4926, i16 -14128, i16 -7060, i16 -9776, i16 -14136, i16 -7066, i16 -9784, i16 -4890, i16 -9788, i16 -14142, i16 -9790, i16 -28208, i16 -14100, i16 -19504, i16 -28216, i16 -14106, i16 -19512, i16 -9754, i16 -19516, i16 -28222, i16 -19518, i16 9168, i16 -28180, i16 26576, i16 9160, i16 -28186, i16 26568, i16 -19482, i16 26564, i16 9154, i16 26562, i16 9196, i16 26604, i16 9190, i16 26598, i16 -2520, i16 -1258, i16 25340, i16 -2524, i16 25214, i16 -2526, i16 -7128, i16 -3562, i16 -5016, i16 -2506, i16 -5020, i16 -7134, i16 -5022, i16 -14232, i16 -7114, i16 -10008, i16 -14236, i16 -10012, i16 -14238, i16 -10014, i16 -28440, i16 -14218, i16 -19992, i16 -9994, i16 -19996, i16 -28446, i16 -19998, i16 8680, i16 -28426, i16 25576, i16 8676, i16 25572, i16 8674, i16 25570, i16 8694, i16 25590, i16 -2540, i16 24958, i16 -2542, i16 -7148, i16 -5068, i16 -7150, i16 -5070, i16 -14284, i16 -10124, i16 -14286, i16 -10126, i16 -28556, i16 -20236, i16 -28558, i16 -20238, i16 8436, i16 25076, i16 8434, i16 25074, i16 -2550, i16 -7158, i16 -5094, i16 -14310, i16 -10182, i16 -28614, i16 -20358, i16 -7520, i16 -3752, i16 -1874, i16 -7536, i16 -3764, i16 -7544, i16 -3770, i16 -7548, i16 -7550, i16 -14944, i16 -7464, i16 -3730, i16 -14960, i16 -7476, i16 -14968, i16 -7482, i16 -14972, i16 -14974, i16 -29792, i16 -14888, i16 -7442, i16 -29808, i16 -14900, i16 -29816, i16 -14906, i16 -29820, i16 -29822, i16 6048, i16 -29736, i16 -14866, i16 6032, i16 -29748, i16 6024, i16 -29754, i16 6020, i16 6018, i16 6104, i16 -29714, i16 6092, i16 6086, i16 6126, i16 -3248, i16 -1620, i16 13816, i16 -3256, i16 -1626, i16 13564, i16 -3260, i16 13438, i16 -3262, i16 -7600, i16 -3796, i16 -6448, i16 -7608, i16 -3802, i16 -6456, i16 -3226, i16 -6460, i16 -7614, i16 -6462, i16 -15152, i16 -7572, i16 -12848, i16 -15160, i16 -7578, i16 -12856, i16 -6426, i16 -12860, i16 -15166, i16 -12862, i16 -30256, i16 -15124, i16 -25648, i16 -30264, i16 -15130, i16 -25656, i16 -12826, i16 -25660, i16 -30270, i16 -25662, i16 5072, i16 -30228, i16 14288, i16 5064, i16 -30234, i16 14280, i16 -25626, i16 14276, i16 5058, i16 14274, i16 5100, i16 14316, i16 5094, i16 14310, i16 -1112, i16 30192, i16 -17668, i16 -1116, i16 29944, i16 -17794, i16 -1118, i16 29820, i16 29758, i16 -3288, i16 -1642, i16 13052, i16 -2200, i16 -1098, i16 30460, i16 12926, i16 -2204, i16 -3294, i16 30334, i16 -2206, i16 -7640, i16 -3818, i16 -6552, i16 -7644, i16 -4376, i16 -2186, i16 -7646, i16 -4380, i16 -6558, i16 -4382, i16 -15256, i16 -7626, i16 -13080, i16 -15260, i16 -8728, i16 -13084, i16 -15262, i16 -8732, i16 -13086, i16 -8734, i16 -30488, i16 -15242, i16 -26136, i16 -30492, i16 -17432, i16 -26140, i16 -30494, i16 -17436, i16 -26142, i16 -17438, i16 4584, i16 -30474, i16 13288, i16 4580, i16 30696, i16 13284, i16 4578, i16 30692, i16 13282, i16 30690, i16 4598, i16 13302, i16 -1132, i16 29432, i16 -18050, i16 -1134, i16 29308, i16 29246, i16 -3308, i16 12670, i16 -2252, i16 -3310, i16 29566, i16 -2254, i16 -7660, i16 -6604, i16 -7662, i16 -4492, i16 -6606, i16 -4494, i16 -15308, i16 -13196, i16 -15310, i16 -8972, i16 -13198, i16 -8974, i16 -30604, i16 -26380, i16 -30606, i16 -17932, i16 -26382, i16 -17934, i16 4340, i16 12788, i16 4338, i16 29684, i16 12786, i16 29682, i16 -1142, i16 29052, i16 28990, i16 -3318, i16 -2278, i16 -7670, i16 -6630, i16 -4550, i16 -15334, i16 -13254, i16 -9094, i16 -30662, i16 -26502, i16 -18182, i16 4218, i16 12538, i16 29178, i16 28862, i16 -7856, i16 -3924, i16 -7864, i16 -3930, i16 -7868, i16 -7870, i16 -15664, i16 -7828, i16 -15672, i16 -7834, i16 -15676, i16 -15678, i16 -31280, i16 -15636, i16 -31288, i16 -15642, i16 -31292, i16 -31294, i16 3024, i16 -31252, i16 3016, i16 -31258, i16 3012, i16 3010, i16 3052, i16 3046, i16 -3672, i16 -1834, i16 6908, i16 -3676, i16 6782, i16 -3678, i16 -7896, i16 -3946, i16 -7320, i16 -7900, i16 -7324, i16 -7902, i16 -7326, i16 -15768, i16 -7882, i16 -14616, i16 -15772, i16 -14620, i16 -15774, i16 -14622, i16 -31512, i16 -15754, i16 -29208, i16 -31516, i16 -29212, i16 -31518, i16 -29214, i16 2536, i16 -31498, i16 7144, i16 2532, i16 7140, i16 2530, i16 7138, i16 2550, i16 7158, i16 -1580, i16 15096, i16 -25218, i16 -1582, i16 14972, i16 14910, i16 -3692, i16 6526, i16 -3148, i16 -3694, i16 15230, i16 -3150, i16 -7916, i16 -7372, i16 -7918, i16 -6284, i16 -7374, i16 -6286, i16 -15820, i16 -14732, i16 -15822, i16 -12556, i16 -14734, i16 -12558, i16 -31628, i16 -29452, i16 -31630, i16 -25100, i16 -29454, i16 -25102, i16 2292, i16 6644, i16 2290, i16 15348, i16 6642, i16 15346, i16 31472, i16 -17028, i16 31352, i16 -17090, i16 31292, i16 31262, i16 -1590, i16 14716, i16 -1062, i16 31612, i16 14654, i16 31550, i16 -3702, i16 -3174, i16 -2118, i16 -7926, i16 -7398, i16 -6342, i16 -4230, i16 -15846, i16 -14790, i16 -12678, i16 -8454, i16 -31686, i16 -29574, i16 -25350, i16 -16902, i16 2170, i16 6394, i16 14842, i16 31096, i16 -17218, i16 31036, i16 31006, i16 14526, i16 31166, i16 30908, i16 30878, i16 30814, i16 -8024, i16 -8028, i16 -8030, i16 -16024, i16 -8010, i16 -16028, i16 -16030, i16 -32024, i16 -16010, i16 -32028, i16 -32030, i16 1512, i16 -32010, i16 1508, i16 1506, i16 1526, i16 -3884, i16 3454, i16 -3886, i16 -8044, i16 -7756, i16 -8046, i16 -7758, i16 -16076, i16 -15500, i16 -16078, i16 -15502, i16 -32140, i16 -30988, i16 -32142, i16 -30990, i16 1268, i16 3572, i16 1266, i16 3570, i16 -1814, i16 7548, i16 7486, i16 -3894, i16 -3622, i16 -8054, i16 -7782, i16 -7238, i16 -16102, i16 -15558, i16 -14470, i16 -32198, i16 -31110, i16 -28934, i16 1146, i16 3322, i16 7674, i16 15736, i16 -24898, i16 15676, i16 15646, i16 7358, i16 15806, i16 32112, i16 -16708, i16 32056, i16 -16738, i16 32028, i16 32014, i16 15548, i16 32188, i16 15518, i16 32158, i16 31928, i16 -16802, i16 31900, i16 31886, i16 15454, i16 31966, i16 31836, i16 31822, i16 31790, i16 -16204, i16 -16206, i16 -32396, i16 -32398, i16 756, i16 754, i16 -7974, i16 -16230, i16 -15942, i16 -32454, i16 -31878, i16 634, i16 1786, i16 3774, i16 7868, i16 7838, i16 16056, i16 -24738, i16 16028, i16 16014, i16 7774, i16 16094, i16 32432, i16 -16548, i16 32408, i16 -16562, i16 32396, i16 32390, i16 15964, i16 32476, i16 15950, i16 32462, i16 32344, i16 -16594, i16 32332, i16 32326, i16 15918, i16 32366, i16 32300, i16 32294, i16 3934, i16 8028, i16 8014, i16 16216, i16 -24658, i16 16204, i16 16198, i16 7982, i16 16238, i16 16172, i16 16166], [929 x i16] [i16 -21536, i16 -10760, i16 21440, i16 -22032, i16 -11012, i16 20960, i16 -22280, i16 -11138, i16 20720, i16 -22404, i16 20600, i16 -1328, i16 23520, i16 -21000, i16 -1336, i16 23024, i16 -21252, i16 -1340, i16 22776, i16 -21378, i16 -1342, i16 22652, i16 -2608, i16 -1300, i16 24056, i16 -2616, i16 -1306, i16 23804, i16 -2620, i16 23678, i16 -2622, i16 -5168, i16 -2580, i16 -5176, i16 -2586, i16 -5180, i16 -5182, i16 -10288, i16 -5140, i16 -10296, i16 -5146, i16 -10300, i16 -10302, i16 -20528, i16 -10260, i16 -20536, i16 -10266, i16 -20540, i16 19392, i16 -23056, i16 -11524, i16 18912, i16 -23304, i16 -11650, i16 18672, i16 -23428, i16 18552, i16 -23490, i16 18492, i16 -1432, i16 19952, i16 -22788, i16 -1436, i16 19704, i16 -22914, i16 -1438, i16 19580, i16 19518, i16 -2840, i16 -1418, i16 20220, i16 -2844, i16 20094, i16 -2846, i16 -5656, i16 -2826, i16 -5660, i16 -5662, i16 -11288, i16 -5642, i16 -11292, i16 -11294, i16 -22552, i16 -11274, i16 -22556, i16 -22558, i16 17888, i16 -23816, i16 -11906, i16 17648, i16 -23940, i16 17528, i16 -24002, i16 17468, i16 17438, i16 -1484, i16 18168, i16 -23682, i16 -1486, i16 18044, i16 17982, i16 -2956, i16 18302, i16 -2958, i16 -5900, i16 -5902, i16 -11788, i16 -11790, i16 -23564, i16 -23566, i16 17136, i16 -24196, i16 17016, i16 -24258, i16 16956, i16 16926, i16 -1510, i16 17276, i16 17214, i16 -3014, i16 -6022, i16 -12038, i16 16760, i16 -24386, i16 16700, i16 16670, i16 16830, i16 16572, i16 16542, i16 11200, i16 -27152, i16 -13572, i16 10720, i16 -27400, i16 -13698, i16 10480, i16 -27524, i16 10360, i16 -27586, i16 10300, i16 -1688, i16 11760, i16 -26884, i16 -1692, i16 11512, i16 -27010, i16 -1694, i16 11388, i16 11326, i16 -3352, i16 -1674, i16 12028, i16 -3356, i16 11902, i16 -3358, i16 -6680, i16 -3338, i16 -6684, i16 -6686, i16 -13336, i16 -6666, i16 -13340, i16 -13342, i16 -26648, i16 -13322, i16 -26652, i16 -26654, i16 -18976, i16 -9480, i16 -4738, i16 27072, i16 -19216, i16 -9604, i16 26848, i16 -19336, i16 -9666, i16 26736, i16 -19396, i16 26680, i16 -19426, i16 26652, i16 9696, i16 -27912, i16 -13954, i16 28128, i16 9456, i16 -28036, i16 27888, i16 -18820, i16 -28098, i16 27768, i16 9276, i16 27708, i16 9246, i16 27678, i16 -1740, i16 9976, i16 -27778, i16 -1164, i16 -1742, i16 28408, i16 9852, i16 -1166, i16 28284, i16 9790, i16 28222, i16 -3468, i16 10110, i16 -2316, i16 -3470, i16 28542, i16 -2318, i16 -6924, i16 -4620, i16 -6926, i16 -4622, i16 -13836, i16 -9228, i16 -13838, i16 -9230, i16 -27660, i16 -27662, i16 26048, i16 -19728, i16 -9860, i16 25824, i16 -19848, i16 -9922, i16 25712, i16 -19908, i16 25656, i16 -19938, i16 25628, i16 25614, i16 8944, i16 -28292, i16 26352, i16 8824, i16 -28354, i16 26232, i16 -19650, i16 26172, i16 8734, i16 26142, i16 -1766, i16 9084, i16 -1222, i16 26492, i16 9022, i16 26430, i16 -3526, i16 -2438, i16 -7046, i16 -4870, i16 -14086, i16 -9734, i16 -28166, i16 25312, i16 -20104, i16 -10050, i16 25200, i16 -20164, i16 25144, i16 -20194, i16 25116, i16 25102, i16 8568, i16 -28482, i16 25464, i16 8508, i16 25404, i16 8478, i16 25374, i16 8638, i16 25534, i16 24944, i16 -20292, i16 24888, i16 -20322, i16 24860, i16 24846, i16 8380, i16 25020, i16 8350, i16 24990, i16 24760, i16 -20386, i16 24732, i16 24718, i16 8286, i16 24798, i16 24668, i16 24654, i16 5600, i16 -29960, i16 -14978, i16 5360, i16 -30084, i16 5240, i16 -30146, i16 5180, i16 5150, i16 -1868, i16 5880, i16 -29826, i16 -1870, i16 5756, i16 5694, i16 -3724, i16 6014, i16 -3726, i16 -7436, i16 -7438, i16 -14860, i16 -14862, i16 -29708, i16 -29710, i16 13760, i16 -25872, i16 -12932, i16 13536, i16 -25992, i16 -12994, i16 13424, i16 -26052, i16 13368, i16 -26082, i16 13340, i16 13326, i16 4848, i16 -30340, i16 14064, i16 4728, i16 -30402, i16 13944, i16 -25794, i16 13884, i16 4638, i16 13854, i16 -1894, i16 4988, i16 -1606, i16 14204, i16 4926, i16 14142, i16 -3782, i16 -3206, i16 -7558, i16 -6406, i16 -15110, i16 -12806, i16 -30214, i16 -17696, i16 -8840, i16 -4418, i16 29888, i16 -17808, i16 -8900, i16 29792, i16 -17864, i16 -8930, i16 29744, i16 -17892, i16 29720, i16 -17906, i16 29708, i16 13024, i16 -26248, i16 -13122, i16 30432, i16 12912, i16 -26308, i16 30320, i16 -17604, i16 -26338, i16 30264, i16 12828, i16 30236, i16 12814, i16 30222, i16 4472, i16 -30530, i16 13176, i16 4412, i16 30584, i16 13116, i16 4382, i16 30524, i16 13086, i16 30494, i16 4542, i16 13246, i16 30654, i16 29376, i16 -18064, i16 -9028, i16 29280, i16 -18120, i16 -9058, i16 29232, i16 -18148, i16 29208, i16 -18162, i16 29196, i16 29190, i16 12656, i16 -26436, i16 29552, i16 12600, i16 -26466, i16 29496, i16 -18018, i16 29468, i16 12558, i16 29454, i16 4284, i16 12732, i16 4254, i16 29628, i16 12702, i16 29598, i16 29024, i16 -18248, i16 -9122, i16 28976, i16 -18276, i16 28952, i16 -18290, i16 28940, i16 28934, i16 12472, i16 -26530, i16 29112, i16 12444, i16 29084, i16 12430, i16 29070, i16 4190, i16 12510, i16 29150, i16 28848, i16 -18340, i16 28824, i16 -18354, i16 28812, i16 28806, i16 12380, i16 28892, i16 12366, i16 28878, i16 28760, i16 -18386, i16 28748, i16 28742, i16 12334, i16 28782, i16 28716, i16 28710, i16 2800, i16 -31364, i16 2680, i16 -31426, i16 2620, i16 2590, i16 2940, i16 2878, i16 -3910, i16 -7814, i16 -15622, i16 -31238, i16 6880, i16 -29320, i16 -14658, i16 6768, i16 -29380, i16 6712, i16 -29410, i16 6684, i16 6670, i16 2424, i16 -31554, i16 7032, i16 2364, i16 6972, i16 2334, i16 6942, i16 2494, i16 7102, i16 15040, i16 -25232, i16 -12612, i16 14944, i16 -25288, i16 -12642, i16 14896, i16 -25316, i16 14872, i16 -25330, i16 14860, i16 14854, i16 6512, i16 -29508, i16 15216, i16 6456, i16 -29538, i16 15160, i16 6428, i16 15132, i16 6414, i16 15118, i16 2236, i16 6588, i16 2206, i16 15292, i16 6558, i16 15262, i16 -17056, i16 -8520, i16 -4258, i16 31296, i16 -17104, i16 -8548, i16 31264, i16 -17128, i16 -8562, i16 31248, i16 -17140, i16 31240, i16 -17146, i16 31236, i16 14688, i16 -25416, i16 -12706, i16 31584, i16 14640, i16 -25444, i16 31536, i16 -16996, i16 -25458, i16 31512, i16 14604, i16 31500, i16 14598, i16 31494, i16 6328, i16 -29602, i16 14776, i16 6300, i16 31672, i16 14748, i16 6286, i16 31644, i16 14734, i16 31630, i16 2142, i16 6366, i16 14814, i16 31710, i16 31040, i16 -17232, i16 -8612, i16 31008, i16 -17256, i16 -8626, i16 30992, i16 -17268, i16 30984, i16 -17274, i16 30980, i16 30978, i16 14512, i16 -25508, i16 31152, i16 14488, i16 -25522, i16 31128, i16 -17202, i16 31116, i16 14470, i16 31110, i16 6236, i16 14556, i16 6222, i16 31196, i16 14542, i16 31182, i16 30880, i16 -17320, i16 -8658, i16 30864, i16 -17332, i16 30856, i16 -17338, i16 30852, i16 30850, i16 14424, i16 -25554, i16 30936, i16 14412, i16 30924, i16 14406, i16 30918, i16 6190, i16 14446, i16 30958, i16 30800, i16 -17364, i16 30792, i16 -17370, i16 30788, i16 30786, i16 14380, i16 30828, i16 14374, i16 30822, i16 30760, i16 -17386, i16 30756, i16 30754, i16 14358, i16 30774, i16 1400, i16 -32066, i16 1340, i16 1310, i16 1470, i16 3440, i16 -31044, i16 3384, i16 -31074, i16 3356, i16 3342, i16 1212, i16 3516, i16 1182, i16 3486, i16 7520, i16 -29000, i16 -14498, i16 7472, i16 -29028, i16 7448, i16 -29042, i16 7436, i16 7430, i16 3256, i16 -31138, i16 7608, i16 3228, i16 7580, i16 3214, i16 7566, i16 1118, i16 3294, i16 7646, i16 15680, i16 -24912, i16 -12452, i16 15648, i16 -24936, i16 -12466, i16 15632, i16 -24948, i16 15624, i16 -24954, i16 15620, i16 15618, i16 7344, i16 -29092, i16 15792, i16 7320, i16 -29106, i16 15768, i16 -24882, i16 15756, i16 7302, i16 15750, i16 3164, i16 7388, i16 3150, i16 15836, i16 7374, i16 15822, i16 -16736, i16 -8360, i16 -4178, i16 -16752, i16 -8372, i16 -16760, i16 -8378, i16 -16764, i16 -16766, i16 15520, i16 -25000, i16 -12498, i16 32160, i16 15504, i16 -25012, i16 32144, i16 -16692, i16 -25018, i16 32136, i16 15492, i16 32132, i16 15490, i16 32130, i16 7256, i16 -29138, i16 15576, i16 7244, i16 32216, i16 15564, i16 7238, i16 32204, i16 15558, i16 32198, i16 3118, i16 7278, i16 15598, i16 32238, i16 -16816, i16 -8404, i16 -16824, i16 -8410, i16 -16828, i16 -16830, i16 15440, i16 -25044, i16 31952, i16 15432, i16 -25050, i16 31944, i16 -16794, i16 31940, i16 15426, i16 31938, i16 7212, i16 15468, i16 7206, i16 31980, i16 15462, i16 31974, i16 -16856, i16 -8426, i16 -16860, i16 -16862, i16 15400, i16 -25066, i16 31848, i16 15396, i16 31844, i16 15394, i16 31842, i16 7190, i16 15414, i16 31862, i16 -16876, i16 -16878, i16 15380, i16 31796, i16 15378, i16 31794, i16 700, i16 670, i16 1720, i16 -31906, i16 1692, i16 1678, i16 606, i16 1758, i16 3760, i16 -30884, i16 3736, i16 -30898, i16 3724, i16 3718, i16 1628, i16 3804, i16 1614, i16 3790, i16 7840, i16 -28840, i16 -14418, i16 7824, i16 -28852, i16 7816, i16 -28858, i16 7812, i16 7810, i16 3672, i16 -30930, i16 7896, i16 -28818, i16 7884, i16 3654, i16 7878, i16 1582, i16 3694, i16 7918, i16 -24752, i16 -12372, i16 -24760, i16 -12378, i16 -24764, i16 -24766, i16 7760, i16 -28884, i16 16080, i16 -24724, i16 -28890, i16 16072, i16 7748, i16 16068, i16 7746, i16 16066, i16 3628, i16 7788, i16 3622, i16 16108, i16 7782, i16 16102, i16 -8280, i16 -4138, i16 -8284, i16 -8286, i16 -24792, i16 -12394, i16 -16536, i16 -24796, i16 -16540, i16 -24798, i16 -16542, i16 7720, i16 -28906, i16 15976, i16 7716, i16 32488, i16 15972, i16 7714, i16 32484, i16 15970, i16 32482, i16 3606, i16 7734, i16 15990, i16 32502, i16 -8300, i16 -8302, i16 -24812, i16 -16588, i16 -24814, i16 -16590, i16 7700, i16 15924, i16 7698, i16 32372, i16 15922, i16 32370, i16 -8310, i16 -24822, i16 -16614, i16 7690, i16 15898, i16 32314, i16 860, i16 846, i16 1880, i16 -31826, i16 1868, i16 1862, i16 814, i16 1902, i16 3920, i16 -30804, i16 3912, i16 -30810, i16 3908, i16 3906, i16 1836, i16 3948, i16 1830, i16 3942, i16 -28760, i16 -14378, i16 -28764, i16 -28766, i16 3880, i16 -30826, i16 8040, i16 -28746, i16 8036, i16 3874, i16 8034, i16 1814, i16 3894, i16 8054, i16 -12332, i16 -12334, i16 -28780, i16 -24652, i16 -28782, i16 -24654, i16 3860, i16 7988, i16 3858, i16 16244, i16 7986, i16 16242, i16 -12342, i16 -28790, i16 -24678, i16 3850, i16 7962, i16 16186, i16 940, i16 934, i16 1960, i16 -31786, i16 1956, i16 1954, i16 918, i16 1974, i16 -30764, i16 -30766, i16 1940, i16 4020, i16 1938, i16 4018, i16 -14358]], align 16

@_ZN10CBC_PDF417C1Ev = hidden unnamed_addr alias void (%class.CBC_PDF417*), void (%class.CBC_PDF417*)* @_ZN10CBC_PDF417C2Ev
@_ZN10CBC_PDF417D1Ev = hidden unnamed_addr alias void (%class.CBC_PDF417*), void (%class.CBC_PDF417*)* @_ZN10CBC_PDF417D2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10CBC_PDF417C2Ev(%class.CBC_PDF417* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CBC_PDF417* %0 to i64*
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 1
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 1, i32 30, i32 3, i32 90>, <4 x i32>* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CBC_PDF417D2Ev(%class.CBC_PDF417* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CBC_BarcodeMatrix*, %class.CBC_BarcodeMatrix** %2, align 8
  store %class.CBC_BarcodeMatrix* null, %class.CBC_BarcodeMatrix** %2, align 8
  %4 = icmp eq %class.CBC_BarcodeMatrix* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN17CBC_BarcodeMatrixD1Ev(%class.CBC_BarcodeMatrix* nonnull %3) #12
  %6 = bitcast %class.CBC_BarcodeMatrix* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #13
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.CBC_BarcodeMatrix* @_ZN10CBC_PDF41716getBarcodeMatrixEv(%class.CBC_PDF417* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CBC_BarcodeMatrix*, %class.CBC_BarcodeMatrix** %2, align 8
  ret %class.CBC_BarcodeMatrix* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10CBC_PDF41720GenerateBarcodeLogicEN5fxcrt18StringViewTemplateIwEEi(%class.CBC_PDF417* nocapture, %"class.fxcrt::StringViewTemplate"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %5 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %6 = alloca %"class.pdfium::Optional", align 8
  %7 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %8 = alloca %"class.std::__1::vector.19", align 8
  %9 = alloca %"class.fxcrt::WideString", align 8
  %10 = alloca %"class.fxcrt::WideString", align 8
  %11 = alloca %"class.pdfium::Optional", align 8
  %12 = alloca %"class.fxcrt::WideString", align 8
  %13 = alloca %"class.fxcrt::WideString", align 8
  %14 = tail call i32 @_ZN25CBC_PDF417ErrorCorrection31GetErrorCorrectionCodewordCountEi(i32 %2) #12
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %145, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  %18 = bitcast %"class.fxcrt::StringViewTemplate"* %7 to i8*
  %19 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %19, i64 16, i1 false)
  call void @_ZN26CBC_PDF417HighLevelEncoder15EncodeHighLevelEN5fxcrt18StringViewTemplateIwEE(%"class.pdfium::Optional"* nonnull sret %6, %"class.fxcrt::StringViewTemplate"* nonnull %7) #12
  %20 = load i8, i8* %17, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %143, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %24 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %24, align 8
  %26 = icmp eq %"class.fxcrt::StringDataTemplate"* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %25, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %30

30:                                               ; preds = %22, %27
  %31 = phi i64 [ %29, %27 ], [ 0, %22 ]
  %32 = bitcast %"class.std::__1::vector.19"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #12
  %33 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %8, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %8, i64 0, i32 0, i32 1
  %35 = bitcast %"class.std::__1::vector.19"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 24, i1 false)
  call void @_ZNK10CBC_PDF41719determineDimensionsEmi(%"class.std::__1::vector.19"* nonnull sret %8, %class.CBC_PDF417* %0, i64 %31, i32 %14)
  %36 = bitcast i32** %34 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.std::__1::vector.19"* %8 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = icmp eq i64 %40, 8
  %42 = inttoptr i64 %39 to i32*
  br i1 %41, label %43, label %131

43:                                               ; preds = %30
  %44 = load i32, i32* %42, align 4
  %45 = getelementptr inbounds i32, i32* %42, i64 1
  %46 = load i32, i32* %45, align 4
  %47 = trunc i64 %31 to i32
  %48 = mul nsw i32 %46, %44
  %49 = sub nsw i32 %48, %14
  %50 = add i32 %47, 1
  %51 = icmp sgt i32 %49, %50
  %52 = xor i32 %47, -1
  %53 = add i32 %49, %52
  %54 = select i1 %51, i32 %53, i32 0
  %55 = sext i32 %14 to i64
  %56 = add nuw nsw i64 %55, 1
  %57 = add i64 %56, %31
  %58 = icmp ugt i64 %57, 929
  br i1 %58, label %131, label %59

59:                                               ; preds = %43
  %60 = add i32 %50, %54
  %61 = bitcast %"class.fxcrt::WideString"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #12
  %62 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %62, align 8
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* nonnull %9) #12
  %63 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %9, i32 signext %60) #12
  %64 = load i8, i8* %17, align 8, !range !2
  %65 = icmp eq i8 %64, 1
  br i1 %65, label %67, label %66, !prof !3

66:                                               ; preds = %59
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !5
  unreachable

67:                                               ; preds = %59
  %68 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLERKS0_(%"class.fxcrt::WideString"* nonnull %9, %"class.fxcrt::WideString"* dereferenceable(8) %23) #12
  %69 = icmp sgt i32 %54, 0
  br i1 %69, label %76, label %70

70:                                               ; preds = %76, %67
  %71 = bitcast %"class.fxcrt::WideString"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #12
  %72 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %72, align 8
  call void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"* nonnull %10, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %9) #12
  %73 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -86, i64 16, i1 false)
  call void @_ZN25CBC_PDF417ErrorCorrection23GenerateErrorCorrectionERKN5fxcrt10WideStringEi(%"class.pdfium::Optional"* nonnull sret %11, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %10, i32 %2) #12
  %74 = load i8, i8* %73, align 8, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %128, label %81

76:                                               ; preds = %67, %76
  %77 = phi i32 [ %79, %76 ], [ 0, %67 ]
  %78 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %9, i32 signext 900) #12
  %79 = add nuw nsw i32 %77, 1
  %80 = icmp slt i32 %79, %54
  br i1 %80, label %76, label %70

81:                                               ; preds = %70
  %82 = bitcast %"class.fxcrt::WideString"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #12
  %83 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %83, align 8
  %84 = bitcast %"class.fxcrt::StringViewTemplate"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %84)
  %85 = bitcast %"class.fxcrt::StringViewTemplate"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85)
  %86 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %72, align 8, !noalias !6
  %87 = icmp eq %"class.fxcrt::StringDataTemplate"* %86, null
  %88 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %86, i64 0, i32 3
  %89 = select i1 %87, [1 x i32]* @.str, [1 x i32]* %88
  %90 = getelementptr inbounds [1 x i32], [1 x i32]* %89, i64 0, i64 0
  br i1 %87, label %94, label %91

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %86, i64 0, i32 1
  %93 = load i64, i64* %92, align 8, !noalias !11
  br label %94

94:                                               ; preds = %91, %81
  %95 = phi i64 [ %93, %91 ], [ 0, %81 ]
  %96 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %4, i64 0, i32 0, i32 0, i32 0
  store i32* %90, i32** %96, align 8, !alias.scope !11, !noalias !12
  %97 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %4, i64 0, i32 0, i32 1
  store i64 %95, i64* %97, align 8, !alias.scope !11, !noalias !12
  %98 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %98, align 8, !noalias !13
  %100 = icmp eq %"class.fxcrt::StringDataTemplate"* %99, null
  %101 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %99, i64 0, i32 3
  %102 = select i1 %100, [1 x i32]* @.str, [1 x i32]* %101
  %103 = getelementptr inbounds [1 x i32], [1 x i32]* %102, i64 0, i64 0
  br i1 %100, label %107, label %104

104:                                              ; preds = %94
  %105 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %99, i64 0, i32 1
  %106 = load i64, i64* %105, align 8, !noalias !16
  br label %107

107:                                              ; preds = %94, %104
  %108 = phi i64 [ %106, %104 ], [ 0, %94 ]
  %109 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %5, i64 0, i32 0, i32 0, i32 0
  store i32* %103, i32** %109, align 8, !alias.scope !16, !noalias !12
  %110 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %5, i64 0, i32 0, i32 1
  store i64 %108, i64* %110, align 8, !alias.scope !16, !noalias !12
  call void @_ZN5fxcrt10WideStringC1ENS_18StringViewTemplateIwEES2_(%"class.fxcrt::WideString"* nonnull %12, %"class.fxcrt::StringViewTemplate"* nonnull %4, %"class.fxcrt::StringViewTemplate"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %84)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85)
  %111 = call i8* @_Znwm(i64 40) #13
  %112 = bitcast i8* %111 to %class.CBC_BarcodeMatrix*
  %113 = sext i32 %44 to i64
  %114 = sext i32 %46 to i64
  call void @_ZN17CBC_BarcodeMatrixC1Emm(%class.CBC_BarcodeMatrix* nonnull %112, i64 %113, i64 %114) #12
  %115 = ptrtoint i8* %111 to i64
  %116 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %117 = load %class.CBC_BarcodeMatrix*, %class.CBC_BarcodeMatrix** %116, align 8
  %118 = bitcast %class.CBC_PDF417* %0 to i64*
  store i64 %115, i64* %118, align 8
  %119 = icmp eq %class.CBC_BarcodeMatrix* %117, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %107
  call void @_ZN17CBC_BarcodeMatrixD1Ev(%class.CBC_BarcodeMatrix* nonnull %117) #12
  %121 = bitcast %class.CBC_BarcodeMatrix* %117 to i8*
  call void @_ZdlPv(i8* %121) #13
  br label %122

122:                                              ; preds = %107, %120
  call void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"* nonnull %13, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %12) #12
  %123 = load %class.CBC_BarcodeMatrix*, %class.CBC_BarcodeMatrix** %116, align 8
  call void @_ZN10CBC_PDF41714encodeLowLevelEN5fxcrt10WideStringEiiiP17CBC_BarcodeMatrix(%class.CBC_PDF417* undef, %"class.fxcrt::WideString"* nonnull %13, i32 %44, i32 %46, i32 %2, %class.CBC_BarcodeMatrix* %123)
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %13) #12
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #12
  %124 = load i8, i8* %73, align 8, !range !2
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %127) #12
  br label %128

128:                                              ; preds = %70, %122, %126
  %129 = phi i1 [ true, %122 ], [ true, %126 ], [ false, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #12
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #12
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #12
  %130 = load i32*, i32** %33, align 8
  br label %131

131:                                              ; preds = %128, %43, %30
  %132 = phi i32* [ %42, %30 ], [ %42, %43 ], [ %130, %128 ]
  %133 = phi i1 [ false, %30 ], [ false, %43 ], [ %129, %128 ]
  %134 = icmp eq i32* %132, null
  br i1 %134, label %138, label %135

135:                                              ; preds = %131
  %136 = ptrtoint i32* %132 to i64
  store i64 %136, i64* %36, align 8
  %137 = bitcast i32* %132 to i8*
  call void @_ZdlPv(i8* %137) #13
  br label %138

138:                                              ; preds = %135, %131
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #12
  %139 = load i8, i8* %17, align 8, !range !2
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %143, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %142) #12
  br label %143

143:                                              ; preds = %16, %138, %141
  %144 = phi i1 [ %133, %138 ], [ %133, %141 ], [ false, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  br label %145

145:                                              ; preds = %3, %143
  %146 = phi i1 [ %144, %143 ], [ false, %3 ]
  ret i1 %146
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZN25CBC_PDF417ErrorCorrection31GetErrorCorrectionCodewordCountEi(i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN26CBC_PDF417HighLevelEncoder15EncodeHighLevelEN5fxcrt18StringViewTemplateIwEE(%"class.pdfium::Optional"* sret, %"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10CBC_PDF41719determineDimensionsEmi(%"class.std::__1::vector.19"* noalias sret, %class.CBC_PDF417* nocapture readonly, i64, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.19"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #12
  %8 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = trunc i64 %2 to i32
  %11 = add i32 %3, 1
  %12 = add i32 %11, %10
  %13 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %9, %14
  br i1 %15, label %83, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %1, i64 0, i32 3
  %18 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %1, i64 0, i32 4
  br label %19

19:                                               ; preds = %71, %16
  %20 = phi i32 [ %14, %16 ], [ %72, %71 ]
  %21 = phi i32 [ %9, %16 ], [ %74, %71 ]
  %22 = phi float [ 0.000000e+00, %16 ], [ %73, %71 ]
  %23 = sdiv i32 %12, %21
  %24 = add nsw i32 %23, 1
  %25 = mul nsw i32 %24, %21
  %26 = add nsw i32 %21, %12
  %27 = icmp slt i32 %25, %26
  %28 = select i1 %27, i32 %24, i32 %23
  %29 = load i32, i32* %17, align 8
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %76, label %31

31:                                               ; preds = %19
  %32 = load i32, i32* %18, align 4
  %33 = icmp sgt i32 %28, %32
  br i1 %33, label %71, label %34

34:                                               ; preds = %31
  %35 = mul nsw i32 %21, 17
  %36 = add nsw i32 %35, 69
  %37 = sitofp i32 %36 to float
  %38 = fmul float %37, 0x3FD6D91680000000
  %39 = sitofp i32 %28 to float
  %40 = fmul float %39, 2.000000e+00
  %41 = fdiv float %38, %40
  %42 = load i32*, i32** %5, align 8
  %43 = load i32*, i32** %6, align 8
  %44 = icmp eq i32* %42, %43
  %45 = ptrtoint i32* %43 to i64
  %46 = ptrtoint i32* %42 to i64
  br i1 %44, label %55, label %47

47:                                               ; preds = %34
  %48 = insertelement <2 x float> undef, float %41, i32 0
  %49 = insertelement <2 x float> %48, float %22, i32 1
  %50 = fadd <2 x float> %49, <float -3.000000e+00, float -3.000000e+00>
  %51 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %50)
  %52 = extractelement <2 x float> %51, i32 0
  %53 = extractelement <2 x float> %51, i32 1
  %54 = fcmp ogt float %52, %53
  br i1 %54, label %71, label %55

55:                                               ; preds = %47, %34
  %56 = sub i64 %45, %46
  %57 = ashr exact i64 %56, 2
  %58 = icmp ult i64 %57, 2
  br i1 %58, label %59, label %62

59:                                               ; preds = %55
  %60 = sub nuw nsw i64 2, %57
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.19"* %0, i64 %60) #12
  %61 = load i32*, i32** %5, align 8
  br label %66

62:                                               ; preds = %55
  %63 = icmp eq i64 %56, 8
  br i1 %63, label %66, label %64

64:                                               ; preds = %62
  %65 = getelementptr inbounds i32, i32* %42, i64 2
  store i32* %65, i32** %6, align 8
  br label %66

66:                                               ; preds = %62, %59, %64
  %67 = phi i32* [ %42, %62 ], [ %61, %59 ], [ %42, %64 ]
  store i32 %21, i32* %67, align 4
  %68 = load i32*, i32** %5, align 8
  %69 = getelementptr inbounds i32, i32* %68, i64 1
  store i32 %28, i32* %69, align 4
  %70 = load i32, i32* %13, align 4
  br label %71

71:                                               ; preds = %31, %66, %47
  %72 = phi i32 [ %20, %47 ], [ %70, %66 ], [ %20, %31 ]
  %73 = phi float [ %22, %47 ], [ %41, %66 ], [ %22, %31 ]
  %74 = add nsw i32 %21, 1
  %75 = icmp slt i32 %21, %72
  br i1 %75, label %19, label %76

76:                                               ; preds = %71, %19
  %77 = phi i32 [ %20, %19 ], [ %72, %71 ]
  %78 = load i32*, i32** %5, align 8
  %79 = load i32*, i32** %6, align 8
  %80 = ptrtoint i32* %79 to i64
  %81 = ptrtoint i32* %78 to i64
  %82 = icmp eq i32* %78, %79
  br i1 %82, label %83, label %137

83:                                               ; preds = %4, %76
  %84 = phi i32* [ %79, %76 ], [ null, %4 ]
  %85 = phi i32 [ %77, %76 ], [ %14, %4 ]
  %86 = phi i64 [ %80, %76 ], [ 0, %4 ]
  %87 = phi i64 [ %81, %76 ], [ 0, %4 ]
  %88 = sdiv i32 %12, %85
  %89 = add nsw i32 %88, 1
  %90 = mul nsw i32 %89, %85
  %91 = add nsw i32 %85, %12
  %92 = icmp slt i32 %90, %91
  %93 = select i1 %92, i32 %89, i32 %88
  %94 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %1, i64 0, i32 3
  %95 = load i32, i32* %94, align 8
  %96 = icmp slt i32 %93, %95
  br i1 %96, label %97, label %116

97:                                               ; preds = %83
  %98 = sub i64 %86, %87
  %99 = ashr exact i64 %98, 2
  %100 = icmp ult i64 %99, 2
  %101 = inttoptr i64 %87 to i32*
  br i1 %100, label %102, label %106

102:                                              ; preds = %97
  %103 = sub nuw nsw i64 2, %99
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.19"* %0, i64 %103) #12
  %104 = load i32, i32* %13, align 4
  %105 = load i32*, i32** %5, align 8
  br label %110

106:                                              ; preds = %97
  %107 = icmp eq i64 %98, 8
  br i1 %107, label %110, label %108

108:                                              ; preds = %106
  %109 = getelementptr inbounds i32, i32* %101, i64 2
  store i32* %109, i32** %6, align 8
  br label %110

110:                                              ; preds = %106, %102, %108
  %111 = phi i32* [ %84, %106 ], [ %105, %102 ], [ %84, %108 ]
  %112 = phi i32 [ %85, %106 ], [ %104, %102 ], [ %85, %108 ]
  store i32 %112, i32* %111, align 4
  %113 = load i32, i32* %94, align 8
  %114 = load i32*, i32** %5, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 1
  store i32 %113, i32* %115, align 4
  br label %137

116:                                              ; preds = %83
  %117 = add i32 %93, -3
  %118 = icmp ult i32 %117, 88
  br i1 %118, label %119, label %137

119:                                              ; preds = %116
  %120 = sub i64 %86, %87
  %121 = ashr exact i64 %120, 2
  %122 = icmp ult i64 %121, 2
  %123 = inttoptr i64 %87 to i32*
  br i1 %122, label %124, label %128

124:                                              ; preds = %119
  %125 = sub nuw nsw i64 2, %121
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.19"* %0, i64 %125) #12
  %126 = load i32, i32* %13, align 4
  %127 = load i32*, i32** %5, align 8
  br label %132

128:                                              ; preds = %119
  %129 = icmp eq i64 %120, 8
  br i1 %129, label %132, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds i32, i32* %123, i64 2
  store i32* %131, i32** %6, align 8
  br label %132

132:                                              ; preds = %128, %124, %130
  %133 = phi i32* [ %84, %128 ], [ %127, %124 ], [ %84, %130 ]
  %134 = phi i32 [ %85, %128 ], [ %126, %124 ], [ %85, %130 ]
  store i32 %134, i32* %133, align 4
  %135 = load i32*, i32** %5, align 8
  %136 = getelementptr inbounds i32, i32* %135, i64 1
  store i32 %93, i32* %136, align 4
  br label %137

137:                                              ; preds = %76, %116, %132, %110
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN10CBC_PDF41723getNumberOfPadCodewordsEiiii(i32, i32, i32, i32) local_unnamed_addr #5 align 2 {
  %5 = mul nsw i32 %3, %2
  %6 = sub nsw i32 %5, %1
  %7 = add nsw i32 %0, 1
  %8 = icmp sgt i32 %6, %7
  %9 = xor i32 %0, -1
  %10 = add i32 %6, %9
  %11 = select i1 %8, i32 %10, i32 0
  ret i32 %11
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #4

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #4

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLERKS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #4

declare void @_ZN25CBC_PDF417ErrorCorrection23GenerateErrorCorrectionERKN5fxcrt10WideStringEi(%"class.pdfium::Optional"* sret, %"class.fxcrt::WideString"* dereferenceable(8), i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CBC_PDF41714encodeLowLevelEN5fxcrt10WideStringEiiiP17CBC_BarcodeMatrix(%class.CBC_PDF417* nocapture readnone, %"class.fxcrt::WideString"* nocapture readonly, i32, i32, i32, %class.CBC_BarcodeMatrix* nocapture readonly) local_unnamed_addr #1 align 2 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.CBC_BarcodeMatrix, %class.CBC_BarcodeMatrix* %5, i64 0, i32 0, i32 0, i32 0
  %10 = add nsw i32 %2, -1
  %11 = mul nsw i32 %4, 3
  %12 = add nsw i32 %3, -1
  %13 = srem i32 %12, 3
  %14 = add i32 %13, %11
  %15 = sdiv i32 %12, 3
  %16 = icmp sgt i32 %2, 0
  %17 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = zext i32 %3 to i64
  br label %20

19:                                               ; preds = %161, %6
  ret void

20:                                               ; preds = %161, %8
  %21 = phi i64 [ 0, %8 ], [ %164, %161 ]
  %22 = phi i32 [ 0, %8 ], [ %108, %161 ]
  %23 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %9, align 8
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %23, i64 %21, i32 0, i32 0, i32 0
  %25 = load %class.CBC_BarcodeRow*, %class.CBC_BarcodeRow** %24, align 8
  br label %26

26:                                               ; preds = %42, %20
  %27 = phi i32 [ %46, %42 ], [ 0, %20 ]
  %28 = phi i64 [ %44, %42 ], [ 0, %20 ]
  %29 = phi i8 [ %43, %42 ], [ 1, %20 ]
  %30 = phi i32 [ %45, %42 ], [ 65536, %20 ]
  %31 = and i32 %30, 130728
  %32 = icmp ne i32 %31, 0
  %33 = and i8 %29, 1
  %34 = zext i8 %33 to i32
  %35 = zext i1 %32 to i32
  %36 = icmp eq i32 %34, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %26
  %38 = add i64 %28, 1
  br label %42

39:                                               ; preds = %26
  %40 = icmp ne i8 %33, 0
  %41 = zext i1 %32 to i8
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %40, i64 %28) #12
  br label %42

42:                                               ; preds = %39, %37
  %43 = phi i8 [ %29, %37 ], [ %41, %39 ]
  %44 = phi i64 [ %38, %37 ], [ 1, %39 ]
  %45 = ashr i32 %30, 1
  %46 = add nuw nsw i32 %27, 1
  %47 = icmp eq i32 %46, 17
  br i1 %47, label %48, label %26

48:                                               ; preds = %42
  %49 = trunc i64 %21 to i32
  %50 = urem i32 %49, 3
  %51 = udiv i32 %49, 3
  %52 = and i8 %43, 1
  %53 = icmp ne i8 %52, 0
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %53, i64 %44) #12
  %54 = icmp eq i32 %50, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %48
  %56 = udiv i32 %49, 3
  %57 = mul nsw i32 %56, 30
  %58 = add nsw i32 %57, %15
  %59 = add nsw i32 %10, %57
  br label %69

60:                                               ; preds = %48
  %61 = icmp eq i32 %50, 1
  %62 = mul nsw i32 %51, 30
  br i1 %61, label %63, label %66

63:                                               ; preds = %60
  %64 = add i32 %14, %62
  %65 = add nsw i32 %62, %15
  br label %69

66:                                               ; preds = %60
  %67 = add nsw i32 %10, %62
  %68 = add i32 %14, %62
  br label %69

69:                                               ; preds = %63, %66, %55
  %70 = phi i32 [ %58, %55 ], [ %64, %63 ], [ %67, %66 ]
  %71 = phi i32 [ %59, %55 ], [ %65, %63 ], [ %68, %66 ]
  %72 = zext i32 %50 to i64
  %73 = sext i32 %70 to i64
  %74 = getelementptr inbounds [3 x [929 x i16]], [3 x [929 x i16]]* @_ZN12_GLOBAL__N_115g_CodewordTableE, i64 0, i64 %72, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = or i32 %76, 65536
  br label %78

78:                                               ; preds = %94, %69
  %79 = phi i32 [ %98, %94 ], [ 0, %69 ]
  %80 = phi i64 [ %96, %94 ], [ 0, %69 ]
  %81 = phi i8 [ %95, %94 ], [ 1, %69 ]
  %82 = phi i32 [ %97, %94 ], [ 65536, %69 ]
  %83 = and i32 %82, %77
  %84 = icmp ne i32 %83, 0
  %85 = and i8 %81, 1
  %86 = zext i8 %85 to i32
  %87 = zext i1 %84 to i32
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %78
  %90 = add i64 %80, 1
  br label %94

91:                                               ; preds = %78
  %92 = icmp ne i8 %85, 0
  %93 = zext i1 %84 to i8
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %92, i64 %80) #12
  br label %94

94:                                               ; preds = %91, %89
  %95 = phi i8 [ %81, %89 ], [ %93, %91 ]
  %96 = phi i64 [ %90, %89 ], [ 1, %91 ]
  %97 = ashr i32 %82, 1
  %98 = add nuw nsw i32 %79, 1
  %99 = icmp eq i32 %98, 17
  br i1 %99, label %100, label %78

100:                                              ; preds = %94
  %101 = and i8 %95, 1
  %102 = icmp ne i8 %101, 0
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %102, i64 %96) #12
  br i1 %16, label %103, label %107

103:                                              ; preds = %100
  %104 = sext i32 %22 to i64
  br label %166

105:                                              ; preds = %206
  %106 = trunc i64 %209 to i32
  br label %107

107:                                              ; preds = %105, %100
  %108 = phi i32 [ %22, %100 ], [ %106, %105 ]
  %109 = sext i32 %71 to i64
  %110 = getelementptr inbounds [3 x [929 x i16]], [3 x [929 x i16]]* @_ZN12_GLOBAL__N_115g_CodewordTableE, i64 0, i64 %72, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = or i32 %112, 65536
  br label %114

114:                                              ; preds = %130, %107
  %115 = phi i32 [ %134, %130 ], [ 0, %107 ]
  %116 = phi i64 [ %132, %130 ], [ 0, %107 ]
  %117 = phi i8 [ %131, %130 ], [ 1, %107 ]
  %118 = phi i32 [ %133, %130 ], [ 65536, %107 ]
  %119 = and i32 %118, %113
  %120 = icmp ne i32 %119, 0
  %121 = and i8 %117, 1
  %122 = zext i8 %121 to i32
  %123 = zext i1 %120 to i32
  %124 = icmp eq i32 %122, %123
  br i1 %124, label %125, label %127

125:                                              ; preds = %114
  %126 = add i64 %116, 1
  br label %130

127:                                              ; preds = %114
  %128 = icmp ne i8 %121, 0
  %129 = zext i1 %120 to i8
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %128, i64 %116) #12
  br label %130

130:                                              ; preds = %127, %125
  %131 = phi i8 [ %117, %125 ], [ %129, %127 ]
  %132 = phi i64 [ %126, %125 ], [ 1, %127 ]
  %133 = ashr i32 %118, 1
  %134 = add nuw nsw i32 %115, 1
  %135 = icmp eq i32 %134, 17
  br i1 %135, label %136, label %114

136:                                              ; preds = %130
  %137 = and i8 %131, 1
  %138 = icmp ne i8 %137, 0
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %138, i64 %132) #12
  br label %139

139:                                              ; preds = %155, %136
  %140 = phi i32 [ %159, %155 ], [ 0, %136 ]
  %141 = phi i64 [ %157, %155 ], [ 0, %136 ]
  %142 = phi i8 [ %156, %155 ], [ 1, %136 ]
  %143 = phi i32 [ %158, %155 ], [ 131072, %136 ]
  %144 = and i32 %143, 260649
  %145 = icmp ne i32 %144, 0
  %146 = and i8 %142, 1
  %147 = zext i8 %146 to i32
  %148 = zext i1 %145 to i32
  %149 = icmp eq i32 %147, %148
  br i1 %149, label %150, label %152

150:                                              ; preds = %139
  %151 = add i64 %141, 1
  br label %155

152:                                              ; preds = %139
  %153 = icmp ne i8 %146, 0
  %154 = zext i1 %145 to i8
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %153, i64 %141) #12
  br label %155

155:                                              ; preds = %152, %150
  %156 = phi i8 [ %142, %150 ], [ %154, %152 ]
  %157 = phi i64 [ %151, %150 ], [ 1, %152 ]
  %158 = ashr i32 %143, 1
  %159 = add nuw nsw i32 %140, 1
  %160 = icmp eq i32 %159, 18
  br i1 %160, label %161, label %139

161:                                              ; preds = %155
  %162 = and i8 %156, 1
  %163 = icmp ne i8 %162, 0
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %163, i64 %157) #12
  %164 = add nuw nsw i64 %21, 1
  %165 = icmp eq i64 %164, %18
  br i1 %165, label %19, label %20

166:                                              ; preds = %206, %103
  %167 = phi i64 [ %104, %103 ], [ %209, %206 ]
  %168 = phi i32 [ 0, %103 ], [ %210, %206 ]
  %169 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %170 = icmp eq %"class.fxcrt::StringDataTemplate"* %169, null
  br i1 %170, label %175, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %169, i64 0, i32 1
  %173 = load i64, i64* %172, align 8
  %174 = icmp ugt i64 %173, %167
  br i1 %174, label %176, label %175, !prof !3

175:                                              ; preds = %171, %166
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !17
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !18
  unreachable

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %169, i64 0, i32 3, i64 %167
  %178 = load i32, i32* %177, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [3 x [929 x i16]], [3 x [929 x i16]]* @_ZN12_GLOBAL__N_115g_CodewordTableE, i64 0, i64 %72, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = or i32 %182, 65536
  br label %184

184:                                              ; preds = %200, %176
  %185 = phi i32 [ %204, %200 ], [ 0, %176 ]
  %186 = phi i64 [ %202, %200 ], [ 0, %176 ]
  %187 = phi i8 [ %201, %200 ], [ 1, %176 ]
  %188 = phi i32 [ %203, %200 ], [ 65536, %176 ]
  %189 = and i32 %188, %183
  %190 = icmp ne i32 %189, 0
  %191 = and i8 %187, 1
  %192 = zext i8 %191 to i32
  %193 = zext i1 %190 to i32
  %194 = icmp eq i32 %192, %193
  br i1 %194, label %195, label %197

195:                                              ; preds = %184
  %196 = add i64 %186, 1
  br label %200

197:                                              ; preds = %184
  %198 = icmp ne i8 %191, 0
  %199 = zext i1 %190 to i8
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %198, i64 %186) #12
  br label %200

200:                                              ; preds = %197, %195
  %201 = phi i8 [ %187, %195 ], [ %199, %197 ]
  %202 = phi i64 [ %196, %195 ], [ 1, %197 ]
  %203 = ashr i32 %188, 1
  %204 = add nuw nsw i32 %185, 1
  %205 = icmp eq i32 %204, 17
  br i1 %205, label %206, label %184

206:                                              ; preds = %200
  %207 = and i8 %201, 1
  %208 = icmp ne i8 %207, 0
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %25, i1 zeroext %208, i64 %202) #12
  %209 = add nsw i64 %167, 1
  %210 = add nuw nsw i32 %168, 1
  %211 = icmp eq i32 %210, %2
  br i1 %211, label %105, label %166
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10CBC_PDF41713setDimensionsEiiii(%class.CBC_PDF417* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 2
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 4
  store i32 %3, i32* %8, align 4
  %9 = getelementptr inbounds %class.CBC_PDF417, %class.CBC_PDF417* %0, i64 0, i32 3
  store i32 %4, i32* %9, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN10CBC_PDF41721calculateNumberOfRowsEiii(i32, i32, i32) local_unnamed_addr #5 align 2 {
  %4 = add nsw i32 %0, 1
  %5 = add nsw i32 %4, %1
  %6 = sdiv i32 %5, %2
  %7 = add nsw i32 %6, 1
  %8 = mul nsw i32 %7, %2
  %9 = add nsw i32 %5, %2
  %10 = icmp slt i32 %8, %9
  %11 = select i1 %10, i32 %7, i32 %6
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10CBC_PDF41710encodeCharEiiP14CBC_BarcodeRow(i32, i32, %class.CBC_BarcodeRow*) local_unnamed_addr #1 align 2 {
  %4 = add nsw i32 %1, -1
  %5 = shl i32 1, %4
  %6 = and i32 %5, %0
  %7 = icmp ne i32 %6, 0
  %8 = zext i1 %7 to i8
  %9 = icmp sgt i32 %1, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %31, %3
  %11 = phi i8 [ %8, %3 ], [ %32, %31 ]
  %12 = phi i64 [ 0, %3 ], [ %33, %31 ]
  %13 = and i8 %11, 1
  %14 = icmp ne i8 %13, 0
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %2, i1 zeroext %14, i64 %12) #12
  ret void

15:                                               ; preds = %3, %31
  %16 = phi i32 [ %35, %31 ], [ 0, %3 ]
  %17 = phi i64 [ %33, %31 ], [ 0, %3 ]
  %18 = phi i8 [ %32, %31 ], [ %8, %3 ]
  %19 = phi i32 [ %34, %31 ], [ %5, %3 ]
  %20 = and i32 %19, %0
  %21 = icmp ne i32 %20, 0
  %22 = and i8 %18, 1
  %23 = zext i8 %22 to i32
  %24 = zext i1 %21 to i32
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %15
  %27 = add i64 %17, 1
  br label %31

28:                                               ; preds = %15
  %29 = icmp ne i8 %22, 0
  %30 = zext i1 %21 to i8
  tail call void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow* %2, i1 zeroext %29, i64 %17) #12
  br label %31

31:                                               ; preds = %28, %26
  %32 = phi i8 [ %18, %26 ], [ %30, %28 ]
  %33 = phi i64 [ %27, %26 ], [ 1, %28 ]
  %34 = ashr i32 %19, 1
  %35 = add nuw nsw i32 %16, 1
  %36 = icmp eq i32 %35, %1
  br i1 %36, label %10, label %15
}

declare void @_ZN14CBC_BarcodeRow6AddBarEbm(%class.CBC_BarcodeRow*, i1 zeroext, i64) local_unnamed_addr #4

declare void @_ZN5fxcrt10WideStringC1ENS_18StringViewTemplateIwEES2_(%"class.fxcrt::WideString"*, %"class.fxcrt::StringViewTemplate"*, %"class.fxcrt::StringViewTemplate"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN17CBC_BarcodeMatrixD1Ev(%class.CBC_BarcodeMatrix*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN17CBC_BarcodeMatrixC1Emm(%class.CBC_BarcodeMatrix*, i64, i64) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.19"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.19"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.19"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #11

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i32 -2143870673}
!5 = !{i32 -2143870652}
!6 = !{!7, !9}
!7 = distinct !{!7, !8, !"_ZNK5fxcrt10WideString12AsStringViewEv: argument 0"}
!8 = distinct !{!8, !"_ZNK5fxcrt10WideString12AsStringViewEv"}
!9 = distinct !{!9, !10, !"_ZN5fxcrtplERKNS_10WideStringES2_: argument 0"}
!10 = distinct !{!10, !"_ZN5fxcrtplERKNS_10WideStringES2_"}
!11 = !{!7}
!12 = !{!9}
!13 = !{!14, !9}
!14 = distinct !{!14, !15, !"_ZNK5fxcrt10WideString12AsStringViewEv: argument 0"}
!15 = distinct !{!15, !"_ZNK5fxcrt10WideString12AsStringViewEv"}
!16 = !{!14}
!17 = !{i32 -2143805861}
!18 = !{i32 -2143805840}
