; ModuleID = '../../v8/src/heap/weak-object-worklists.cc'
source_filename = "../../v8/src/heap/weak-object-worklists.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.11", %"class.v8::internal::Worklist.13", %"class.v8::internal::Worklist.15" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.v8::internal::Worklist.1" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, i64, [64 x %"class.v8::internal::EphemeronHashTable"] }
%"class.v8::internal::EphemeronHashTable" = type { %"class.v8::internal::ObjectHashTableBase" }
%"class.v8::internal::ObjectHashTableBase" = type { %"class.v8::internal::HashTable" }
%"class.v8::internal::HashTable" = type { %"class.v8::internal::HashTableBase" }
%"class.v8::internal::HashTableBase" = type { %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.3" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, i64, [64 x %"struct.v8::internal::Ephemeron"] }
%"struct.v8::internal::Ephemeron" = type { %"class.v8::internal::HeapObject", %"class.v8::internal::HeapObject" }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.5" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, i64, [64 x %"struct.std::__1::pair"] }
%"struct.std::__1::pair" = type { %"class.v8::internal::HeapObject", %"class.v8::internal::CompressedHeapObjectSlot" }
%"class.v8::internal::CompressedHeapObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.7" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, i64, [64 x %"struct.std::__1::pair.25"] }
%"struct.std::__1::pair.25" = type { %"class.v8::internal::HeapObject", %"class.v8::internal::Code" }
%"class.v8::internal::Code" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.9" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, i64, [64 x %"class.v8::internal::JSWeakRef"] }
%"class.v8::internal::JSWeakRef" = type { %"class.v8::internal::TorqueGeneratedJSWeakRef" }
%"class.v8::internal::TorqueGeneratedJSWeakRef" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.11" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.13" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.15" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, i64, [64 x %"class.v8::internal::JSFunction"] }
%"class.v8::internal::JSFunction" = type { %"class.v8::internal::JSFunctionOrBoundFunction" }
%"class.v8::internal::JSFunctionOrBoundFunction" = type { %"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" }
%"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.45", %"struct.std::__1::atomic.620", %"class.v8::internal::VirtualMemory" }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.50", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.137", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.152", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.156", %"class.std::__1::vector.156", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.163", %"class.std::__1::unique_ptr.169", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.283", %"class.std::__1::unique_ptr.289", %"class.std::__1::unique_ptr.295", %"class.std::__1::unique_ptr.334", %"class.std::__1::unique_ptr.373", %"class.std::__1::unique_ptr.403", %"class.std::__1::unique_ptr.409", %"class.std::__1::unique_ptr.419", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.431", %"class.std::__1::unique_ptr.437", %"class.std::__1::unique_ptr.437", %"class.std::__1::unique_ptr.443", %"class.std::__1::unique_ptr.449", %"class.std::__1::shared_ptr.455", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.478", %"class.std::__1::unique_ptr.504", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.510", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.523", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.305", i8, [7 x i8], %"class.std::__1::unordered_map.529", %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.529", %"class.std::__1::unordered_map.579", %"class.std::__1::vector.607", i8, %"class.std::__1::unique_ptr.614", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.40", %"class.std::__1::__compressed_pair.42", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i64 }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.45", %"struct.std::__1::atomic.45", %"struct.std::__1::atomic.45" }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.698", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.704", %"class.std::__1::unique_ptr.730", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.740", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.860", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.873", void (i32, %"class.v8::SharedArrayBuffer"*, i64, i64, double, %"class.v8::Isolate::AtomicsWaitWakeHandle"*, i8*)*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.883", void (%"class.v8::Context"*, %"class.v8::Module"*, %"class.v8::Object"*)*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.894", %"struct.std::__1::atomic.143", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.969", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.1012"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1024", i32, i8, i8, i32, i32, %"class.std::__1::vector.1030", %"class.std::__1::vector.1030", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1037", i64, %"class.std::__1::unordered_map.1038", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.516", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.151", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1094", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1108", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, %"class.v8::Value"* (%"class.v8::Context"*, %"class.v8::Value"*, %"class.v8::Array"*)*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1142", %"class.std::__1::vector.1146", %"class.std::__1::vector.1146", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.693", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.693" = type { %"struct.std::__1::__atomic_base.694" }
%"struct.std::__1::__atomic_base.694" = type { %"struct.std::__1::__cxx_atomic_impl.695" }
%"struct.std::__1::__cxx_atomic_impl.695" = type { %"struct.std::__1::__cxx_atomic_base_impl.696" }
%"struct.std::__1::__cxx_atomic_base_impl.696" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.516" }
%"class.std::__1::shared_ptr.704" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.130", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.705", %"class.std::__1::unique_ptr.724" }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.132" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.705" = type { %"class.std::__1::__compressed_pair.706" }
%"class.std::__1::__compressed_pair.706" = type { %"struct.std::__1::__compressed_pair_elem.707" }
%"struct.std::__1::__compressed_pair_elem.707" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.708" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.130", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.std::__1::vector.708" = type { %"class.std::__1::__vector_base.709" }
%"class.std::__1::__vector_base.709" = type { %"class.std::__1::unique_ptr.710"*, %"class.std::__1::unique_ptr.710"*, %"class.std::__1::__compressed_pair.716" }
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.716" = type { %"struct.std::__1::__compressed_pair_elem.717" }
%"struct.std::__1::__compressed_pair_elem.717" = type { %"class.std::__1::unique_ptr.710"* }
%"class.std::__1::unique_ptr.724" = type { %"class.std::__1::__compressed_pair.725" }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.730" = type { %"class.std::__1::__compressed_pair.731" }
%"class.std::__1::__compressed_pair.731" = type { %"struct.std::__1::__compressed_pair_elem.732" }
%"struct.std::__1::__compressed_pair_elem.732" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.733", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.733" = type { %"struct.std::__1::__atomic_base.734" }
%"struct.std::__1::__atomic_base.734" = type { %"struct.std::__1::__cxx_atomic_impl.735" }
%"struct.std::__1::__cxx_atomic_impl.735" = type { %"struct.std::__1::__cxx_atomic_base_impl.736" }
%"struct.std::__1::__cxx_atomic_base_impl.736" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.740" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.741", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.741" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.742", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.742" = type { %"class.std::__1::__vector_base.743" }
%"class.std::__1::__vector_base.743" = type { %"class.std::__1::unique_ptr.744"*, %"class.std::__1::unique_ptr.744"*, %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::unique_ptr.744" = type opaque
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.std::__1::unique_ptr.744"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.750", %"class.std::__1::unique_ptr.756", %"struct.std::__1::atomic.143", %"class.std::__1::unique_ptr.762", %"class.std::__1::unique_ptr.768", %"class.std::__1::unique_ptr.774", %"class.std::__1::unique_ptr.780", %"class.std::__1::unique_ptr.786", %"class.std::__1::set.792", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.750" = type { %"class.std::__1::__compressed_pair.751" }
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.756" = type { %"class.std::__1::__compressed_pair.757" }
%"class.std::__1::__compressed_pair.757" = type { %"struct.std::__1::__compressed_pair_elem.758" }
%"struct.std::__1::__compressed_pair_elem.758" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.762" = type { %"class.std::__1::__compressed_pair.763" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"struct.std::__1::__compressed_pair_elem.764" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.768" = type { %"class.std::__1::__compressed_pair.769" }
%"class.std::__1::__compressed_pair.769" = type { %"struct.std::__1::__compressed_pair_elem.770" }
%"struct.std::__1::__compressed_pair_elem.770" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.774" = type { %"class.std::__1::__compressed_pair.775" }
%"class.std::__1::__compressed_pair.775" = type { %"struct.std::__1::__compressed_pair_elem.776" }
%"struct.std::__1::__compressed_pair_elem.776" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.780" = type { %"class.std::__1::__compressed_pair.781" }
%"class.std::__1::__compressed_pair.781" = type { %"struct.std::__1::__compressed_pair_elem.782" }
%"struct.std::__1::__compressed_pair_elem.782" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.786" = type { %"class.std::__1::__compressed_pair.787" }
%"class.std::__1::__compressed_pair.787" = type { %"struct.std::__1::__compressed_pair_elem.788" }
%"struct.std::__1::__compressed_pair_elem.788" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.792" = type { %"class.std::__1::__tree.793" }
%"class.std::__1::__tree.793" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.794", %"class.std::__1::__compressed_pair.798" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.794" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.798" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.801" }
%"class.v8::internal::TaggedImpl.801" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.800" }
%"class.v8::internal::TaggedImpl.800" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.637", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.637" = type { %"class.std::__1::__compressed_pair.638" }
%"class.std::__1::__compressed_pair.638" = type { %"struct.std::__1::__compressed_pair_elem.639" }
%"struct.std::__1::__compressed_pair_elem.639" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.802", %"class.v8::internal::DetachableVector.803", %"class.v8::internal::DetachableVector.802", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.803" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.802" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.631", %"class.std::__1::unique_ptr.456" }
%"class.std::__1::unique_ptr.631" = type { %"class.std::__1::__compressed_pair.632" }
%"class.std::__1::__compressed_pair.632" = type { %"struct.std::__1::__compressed_pair_elem.633" }
%"struct.std::__1::__compressed_pair_elem.633" = type { %"class.v8::internal::VirtualMemory"* }
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.466" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.459", %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::set.466" = type { %"class.std::__1::__tree.467" }
%"class.std::__1::__tree.467" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.459", %"class.std::__1::__compressed_pair.468" }
%"class.std::__1::__compressed_pair.468" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.804", %"class.std::__1::vector.810", %"class.std::__1::unique_ptr.817", %"class.std::__1::vector.824", %"class.std::__1::unique_ptr.831", i64, %"class.std::__1::vector.837", %"class.std::__1::vector.845", %"class.std::__1::vector.853", i8, i8, i32 }
%"class.std::__1::unique_ptr.804" = type { %"class.std::__1::__compressed_pair.805" }
%"class.std::__1::__compressed_pair.805" = type { %"struct.std::__1::__compressed_pair_elem.806" }
%"struct.std::__1::__compressed_pair_elem.806" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.810" = type { %"class.std::__1::__vector_base.811" }
%"class.std::__1::__vector_base.811" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.812" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.812" = type { %"struct.std::__1::__compressed_pair_elem.813" }
%"struct.std::__1::__compressed_pair_elem.813" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.817" = type { %"class.std::__1::__compressed_pair.818" }
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { %"class.v8::internal::GlobalHandles::NodeSpace.820"* }
%"class.v8::internal::GlobalHandles::NodeSpace.820" = type opaque
%"class.std::__1::vector.824" = type { %"class.std::__1::__vector_base.825" }
%"class.std::__1::__vector_base.825" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.826" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.826" = type { %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.831" = type { %"class.std::__1::__compressed_pair.832" }
%"class.std::__1::__compressed_pair.832" = type { %"struct.std::__1::__compressed_pair_elem.833" }
%"struct.std::__1::__compressed_pair_elem.833" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.837" = type { %"class.std::__1::__vector_base.838" }
%"class.std::__1::__vector_base.838" = type { %"struct.std::__1::pair.839"*, %"struct.std::__1::pair.839"*, %"class.std::__1::__compressed_pair.840" }
%"struct.std::__1::pair.839" = type opaque
%"class.std::__1::__compressed_pair.840" = type { %"struct.std::__1::__compressed_pair_elem.841" }
%"struct.std::__1::__compressed_pair_elem.841" = type { %"struct.std::__1::pair.839"* }
%"class.std::__1::vector.845" = type { %"class.std::__1::__vector_base.846" }
%"class.std::__1::__vector_base.846" = type { %"struct.std::__1::pair.847"*, %"struct.std::__1::pair.847"*, %"class.std::__1::__compressed_pair.848" }
%"struct.std::__1::pair.847" = type opaque
%"class.std::__1::__compressed_pair.848" = type { %"struct.std::__1::__compressed_pair_elem.849" }
%"struct.std::__1::__compressed_pair_elem.849" = type { %"struct.std::__1::pair.847"* }
%"class.std::__1::vector.853" = type { %"class.std::__1::__vector_base.854" }
%"class.std::__1::__vector_base.854" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.855" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.855" = type { %"struct.std::__1::__compressed_pair_elem.856" }
%"struct.std::__1::__compressed_pair_elem.856" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.643", %"class.std::__1::vector.860" }
%"class.std::__1::vector.643" = type { %"class.std::__1::__vector_base.644" }
%"class.std::__1::__vector_base.644" = type { i64**, i64**, %"class.std::__1::__compressed_pair.645" }
%"class.std::__1::__compressed_pair.645" = type { %"struct.std::__1::__compressed_pair_elem.646" }
%"struct.std::__1::__compressed_pair_elem.646" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.867" }
%"class.std::__1::unique_ptr.867" = type { %"class.std::__1::__compressed_pair.868" }
%"class.std::__1::__compressed_pair.868" = type { %"struct.std::__1::__compressed_pair_elem.869" }
%"struct.std::__1::__compressed_pair_elem.869" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.860" = type { %"class.std::__1::__vector_base.861" }
%"class.std::__1::__vector_base.861" = type { i32*, i32*, %"class.std::__1::__compressed_pair.862" }
%"class.std::__1::__compressed_pair.862" = type { %"struct.std::__1::__compressed_pair_elem.863" }
%"struct.std::__1::__compressed_pair_elem.863" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.873" = type { %"struct.std::__1::__atomic_base.874" }
%"struct.std::__1::__atomic_base.874" = type { %"struct.std::__1::__cxx_atomic_impl.875" }
%"struct.std::__1::__cxx_atomic_impl.875" = type { %"struct.std::__1::__cxx_atomic_base_impl.876" }
%"struct.std::__1::__cxx_atomic_base_impl.876" = type { i32 }
%"class.v8::SharedArrayBuffer" = type { i8 }
%"class.v8::Isolate::AtomicsWaitWakeHandle" = type { i8 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.883" = type { %"struct.std::__1::__atomic_base.884" }
%"struct.std::__1::__atomic_base.884" = type { %"struct.std::__1::__cxx_atomic_impl.885" }
%"struct.std::__1::__cxx_atomic_impl.885" = type { %"struct.std::__1::__cxx_atomic_base_impl.886" }
%"struct.std::__1::__cxx_atomic_base_impl.886" = type { i32 }
%"class.v8::Context" = type { i8 }
%"class.v8::Module" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.888" }
%"class.std::__1::__compressed_pair.888" = type { %"struct.std::__1::__compressed_pair_elem.889" }
%"struct.std::__1::__compressed_pair_elem.889" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.890 }
%union.anon.890 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.894" = type { %"class.std::__1::__hash_table.895" }
%"class.std::__1::__hash_table.895" = type <{ %"class.std::__1::unique_ptr.896", %"class.std::__1::__compressed_pair.906", %"class.std::__1::__compressed_pair.911", %"class.std::__1::__compressed_pair.914", [4 x i8] }>
%"class.std::__1::unique_ptr.896" = type { %"class.std::__1::__compressed_pair.897" }
%"class.std::__1::__compressed_pair.897" = type { %"struct.std::__1::__compressed_pair_elem.898", %"struct.std::__1::__compressed_pair_elem.900" }
%"struct.std::__1::__compressed_pair_elem.898" = type { %"struct.std::__1::__hash_node_base.899"** }
%"struct.std::__1::__hash_node_base.899" = type { %"struct.std::__1::__hash_node_base.899"* }
%"struct.std::__1::__compressed_pair_elem.900" = type { %"class.std::__1::__bucket_list_deallocator.901" }
%"class.std::__1::__bucket_list_deallocator.901" = type { %"class.std::__1::__compressed_pair.902" }
%"class.std::__1::__compressed_pair.902" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.906" = type { %"struct.std::__1::__compressed_pair_elem.907" }
%"struct.std::__1::__compressed_pair_elem.907" = type { %"struct.std::__1::__hash_node_base.899" }
%"class.std::__1::__compressed_pair.911" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.914" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::atomic.143" = type { %"struct.std::__1::__atomic_base.144" }
%"struct.std::__1::__atomic_base.144" = type { %"struct.std::__1::__cxx_atomic_impl.145" }
%"struct.std::__1::__cxx_atomic_impl.145" = type { %"struct.std::__1::__cxx_atomic_base_impl.146" }
%"struct.std::__1::__cxx_atomic_base_impl.146" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.920", %"class.v8::internal::Handle.926", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.927", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.920" = type { %"class.std::__1::__compressed_pair.921" }
%"class.std::__1::__compressed_pair.921" = type { %"struct.std::__1::__compressed_pair_elem.922" }
%"struct.std::__1::__compressed_pair_elem.922" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.926" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.927" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.928", %"class.std::__1::vector.934", %"class.std::__1::unique_ptr.942", %"class.std::__1::unique_ptr.948", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.954", %"class.std::__1::vector.960", %"struct.std::__1::pair.968" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.928" = type { %"class.std::__1::__compressed_pair.929" }
%"class.std::__1::__compressed_pair.929" = type { %"struct.std::__1::__compressed_pair_elem.930" }
%"struct.std::__1::__compressed_pair_elem.930" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.934" = type { %"class.std::__1::__vector_base.935" }
%"class.std::__1::__vector_base.935" = type { %"class.std::__1::unique_ptr.936"*, %"class.std::__1::unique_ptr.936"*, %"class.std::__1::__compressed_pair.937" }
%"class.std::__1::unique_ptr.936" = type opaque
%"class.std::__1::__compressed_pair.937" = type { %"struct.std::__1::__compressed_pair_elem.938" }
%"struct.std::__1::__compressed_pair_elem.938" = type { %"class.std::__1::unique_ptr.936"* }
%"class.std::__1::unique_ptr.942" = type { %"class.std::__1::__compressed_pair.943" }
%"class.std::__1::__compressed_pair.943" = type { %"struct.std::__1::__compressed_pair_elem.944" }
%"struct.std::__1::__compressed_pair_elem.944" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.948" = type { %"class.std::__1::__compressed_pair.949" }
%"class.std::__1::__compressed_pair.949" = type { %"struct.std::__1::__compressed_pair_elem.950" }
%"struct.std::__1::__compressed_pair_elem.950" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.954" = type { %"class.std::__1::__compressed_pair.955" }
%"class.std::__1::__compressed_pair.955" = type { %"struct.std::__1::__compressed_pair_elem.956" }
%"struct.std::__1::__compressed_pair_elem.956" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.960" = type { %"class.std::__1::__vector_base.961" }
%"class.std::__1::__vector_base.961" = type { %"struct.std::__1::pair.962"*, %"struct.std::__1::pair.962"*, %"class.std::__1::__compressed_pair.963" }
%"struct.std::__1::pair.962" = type opaque
%"class.std::__1::__compressed_pair.963" = type { %"struct.std::__1::__compressed_pair_elem.964" }
%"struct.std::__1::__compressed_pair_elem.964" = type { %"struct.std::__1::pair.962"* }
%"struct.std::__1::pair.968" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.697"*, i16, i8*)*, i8* }
%"class.v8::Local.697" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.969" = type { %"class.std::__1::__compressed_pair.970" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.972", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.972" = type { %"class.std::__1::__hash_table.973" }
%"class.std::__1::__hash_table.973" = type <{ %"class.std::__1::unique_ptr.974", %"class.std::__1::__compressed_pair.984", %"class.std::__1::__compressed_pair.989", %"class.std::__1::__compressed_pair.993", [4 x i8] }>
%"class.std::__1::unique_ptr.974" = type { %"class.std::__1::__compressed_pair.975" }
%"class.std::__1::__compressed_pair.975" = type { %"struct.std::__1::__compressed_pair_elem.976", %"struct.std::__1::__compressed_pair_elem.978" }
%"struct.std::__1::__compressed_pair_elem.976" = type { %"struct.std::__1::__hash_node_base.977"** }
%"struct.std::__1::__hash_node_base.977" = type { %"struct.std::__1::__hash_node_base.977"* }
%"struct.std::__1::__compressed_pair_elem.978" = type { %"class.std::__1::__bucket_list_deallocator.979" }
%"class.std::__1::__bucket_list_deallocator.979" = type { %"class.std::__1::__compressed_pair.980" }
%"class.std::__1::__compressed_pair.980" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.984" = type { %"struct.std::__1::__compressed_pair_elem.985" }
%"struct.std::__1::__compressed_pair_elem.985" = type { %"struct.std::__1::__hash_node_base.977" }
%"class.std::__1::__compressed_pair.989" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1007" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.1001"**, %"struct.std::__1::pair.1001"**, %"struct.std::__1::pair.1001"**, %"class.std::__1::__compressed_pair.1002" }
%"struct.std::__1::pair.1001" = type opaque
%"class.std::__1::__compressed_pair.1002" = type { %"struct.std::__1::__compressed_pair_elem.1003" }
%"struct.std::__1::__compressed_pair_elem.1003" = type { %"struct.std::__1::pair.1001"** }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.v8::String" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.1012" = type { %"class.std::__1::__vector_base.1013" }
%"class.std::__1::__vector_base.1013" = type { %"class.v8::internal::Handle.1014"*, %"class.v8::internal::Handle.1014"*, %"class.std::__1::__compressed_pair.1015" }
%"class.v8::internal::Handle.1014" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.1015" = type { %"struct.std::__1::__compressed_pair_elem.1016" }
%"struct.std::__1::__compressed_pair_elem.1016" = type { %"class.v8::internal::Handle.1014"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type { %"class.v8::MicrotaskQueue", i64, i64, i64, i64*, i64, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::MicrotaskQueue"*, i32, i32, i32, i8, %"class.std::__1::vector.1020" }
%"class.v8::MicrotaskQueue" = type { i32 (...)** }
%"class.std::__1::vector.1020" = type { %"class.std::__1::__vector_base.1021" }
%"class.std::__1::__vector_base.1021" = type { %"struct.std::__1::pair.1001"*, %"struct.std::__1::pair.1001"*, %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.1023" }
%"struct.std::__1::__compressed_pair_elem.1023" = type { %"struct.std::__1::pair.1001"* }
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.878", i32, %"class.v8::Local.697" }
%"class.v8::Local.878" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1024" = type { %"class.std::__1::__compressed_pair.1025" }
%"class.std::__1::__compressed_pair.1025" = type { %"struct.std::__1::__compressed_pair_elem.1026" }
%"struct.std::__1::__compressed_pair_elem.1026" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.643", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1030" = type { %"class.std::__1::__vector_base.1031" }
%"class.std::__1::__vector_base.1031" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1032" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.1033" }
%"struct.std::__1::__compressed_pair_elem.1033" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1037" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1038" = type { %"class.std::__1::__hash_table.1039" }
%"class.std::__1::__hash_table.1039" = type <{ %"class.std::__1::unique_ptr.1040", %"class.std::__1::__compressed_pair.1050", %"class.std::__1::__compressed_pair.1055", %"class.std::__1::__compressed_pair.1058", [4 x i8] }>
%"class.std::__1::unique_ptr.1040" = type { %"class.std::__1::__compressed_pair.1041" }
%"class.std::__1::__compressed_pair.1041" = type { %"struct.std::__1::__compressed_pair_elem.1042", %"struct.std::__1::__compressed_pair_elem.1044" }
%"struct.std::__1::__compressed_pair_elem.1042" = type { %"struct.std::__1::__hash_node_base.1043"** }
%"struct.std::__1::__hash_node_base.1043" = type { %"struct.std::__1::__hash_node_base.1043"* }
%"struct.std::__1::__compressed_pair_elem.1044" = type { %"class.std::__1::__bucket_list_deallocator.1045" }
%"class.std::__1::__bucket_list_deallocator.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1050" = type { %"struct.std::__1::__compressed_pair_elem.1051" }
%"struct.std::__1::__compressed_pair_elem.1051" = type { %"struct.std::__1::__hash_node_base.1043" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1058" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.516" = type { %"class.std::__1::__vector_base.517" }
%"class.std::__1::__vector_base.517" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.518" }
%"class.std::__1::__compressed_pair.518" = type { %"struct.std::__1::__compressed_pair_elem.519" }
%"struct.std::__1::__compressed_pair_elem.519" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.151" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1062", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1091", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1092", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1062" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1087, %union.anon.1089, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1087 = type { i64 }
%union.anon.1089 = type { i64 }
%"class.std::__1::weak_ptr.1091" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.151" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1092" = type { %"class.v8::PersistentBase.1093" }
%"class.v8::PersistentBase.1093" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1063", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1063" = type { %"class.std::__1::__hash_table.1064" }
%"class.std::__1::__hash_table.1064" = type <{ %"class.std::__1::unique_ptr.1065", %"class.std::__1::__compressed_pair.1075", %"class.std::__1::__compressed_pair.1080", %"class.std::__1::__compressed_pair.1083", [4 x i8] }>
%"class.std::__1::unique_ptr.1065" = type { %"class.std::__1::__compressed_pair.1066" }
%"class.std::__1::__compressed_pair.1066" = type { %"struct.std::__1::__compressed_pair_elem.1067", %"struct.std::__1::__compressed_pair_elem.1069" }
%"struct.std::__1::__compressed_pair_elem.1067" = type { %"struct.std::__1::__hash_node_base.1068"** }
%"struct.std::__1::__hash_node_base.1068" = type { %"struct.std::__1::__hash_node_base.1068"* }
%"struct.std::__1::__compressed_pair_elem.1069" = type { %"class.std::__1::__bucket_list_deallocator.1070" }
%"class.std::__1::__bucket_list_deallocator.1070" = type { %"class.std::__1::__compressed_pair.1071" }
%"class.std::__1::__compressed_pair.1071" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"struct.std::__1::__hash_node_base.1068" }
%"class.std::__1::__compressed_pair.1080" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1083" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1094" = type { %"class.std::__1::__compressed_pair.1095" }
%"class.std::__1::__compressed_pair.1095" = type { %"struct.std::__1::__compressed_pair_elem.1096" }
%"struct.std::__1::__compressed_pair_elem.1096" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1099", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.624", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.628", %"class.std::__1::unique_ptr.653", %"class.std::__1::unique_ptr.449", %"class.std::__1::vector.659", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.624" = type { %"struct.std::__1::__atomic_base.625" }
%"struct.std::__1::__atomic_base.625" = type { %"struct.std::__1::__cxx_atomic_impl.626" }
%"struct.std::__1::__cxx_atomic_impl.626" = type { %"struct.std::__1::__cxx_atomic_base_impl.627" }
%"struct.std::__1::__cxx_atomic_base_impl.627" = type { i32 }
%"class.std::__1::unique_ptr.628" = type { %"class.std::__1::__compressed_pair.629" }
%"class.std::__1::__compressed_pair.629" = type { %"struct.std::__1::__compressed_pair_elem.630" }
%"struct.std::__1::__compressed_pair_elem.630" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.643" }
%"class.std::__1::unique_ptr.653" = type { %"class.std::__1::__compressed_pair.654" }
%"class.std::__1::__compressed_pair.654" = type { %"struct.std::__1::__compressed_pair_elem.655" }
%"struct.std::__1::__compressed_pair_elem.655" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.659" = type { %"class.std::__1::__vector_base.660" }
%"class.std::__1::__vector_base.660" = type { %"struct.std::__1::pair.661"*, %"struct.std::__1::pair.661"*, %"class.std::__1::__compressed_pair.662" }
%"struct.std::__1::pair.661" = type opaque
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.663" }
%"struct.std::__1::__compressed_pair_elem.663" = type { %"struct.std::__1::pair.661"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.90" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.60", %"class.std::__1::vector.60", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.62" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.67" }
%"class.std::__1::__hash_table.67" = type <{ %"class.std::__1::unique_ptr.68", %"class.std::__1::__compressed_pair.78", %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.85", [4 x i8] }>
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70", %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.std::__1::__hash_node_base.71"** }
%"struct.std::__1::__hash_node_base.71" = type { %"struct.std::__1::__hash_node_base.71"* }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.std::__1::__bucket_list_deallocator.73" }
%"class.std::__1::__bucket_list_deallocator.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.std::__1::__hash_node_base.71" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.45", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set.674"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.682", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.45", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.667" }
%"class.std::__1::vector.667" = type { %"class.std::__1::__vector_base.668" }
%"class.std::__1::__vector_base.668" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.669" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set.674" = type { %"class.std::__1::__tree.675" }
%"class.std::__1::__tree.675" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.676", %"class.std::__1::__compressed_pair.680" }
%"class.std::__1::__compressed_pair.676" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"class.std::__1::__compressed_pair.680" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::atomic.682" = type { %"struct.std::__1::__atomic_base.683" }
%"struct.std::__1::__atomic_base.683" = type { %"struct.std::__1::__cxx_atomic_impl.684" }
%"struct.std::__1::__cxx_atomic_impl.684" = type { %"struct.std::__1::__cxx_atomic_base_impl.685" }
%"struct.std::__1::__cxx_atomic_base_impl.685" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.686", i8, [7 x i8] }>
%"class.std::__1::vector.686" = type { %"class.std::__1::__vector_base.687" }
%"class.std::__1::__vector_base.687" = type { i64*, i64*, %"class.std::__1::__compressed_pair.688" }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.689" }
%"struct.std::__1::__compressed_pair_elem.689" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1099" = type { %"class.std::__1::__compressed_pair.1100" }
%"class.std::__1::__compressed_pair.1100" = type { %"struct.std::__1::__compressed_pair_elem.1101" }
%"struct.std::__1::__compressed_pair_elem.1101" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1108" = type { %"class.std::__1::__compressed_pair.1109" }
%"class.std::__1::__compressed_pair.1109" = type { %"struct.std::__1::__compressed_pair_elem.1110" }
%"struct.std::__1::__compressed_pair_elem.1110" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.879", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.879" = type { %"class.v8::Context"* }
%"class.v8::Array" = type { i8 }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1116" }
%"class.std::__1::unordered_map.1116" = type { %"class.std::__1::__hash_table.1117" }
%"class.std::__1::__hash_table.1117" = type <{ %"class.std::__1::unique_ptr.1118", %"class.std::__1::__compressed_pair.1128", %"class.std::__1::__compressed_pair.1133", %"class.std::__1::__compressed_pair.1136", [4 x i8] }>
%"class.std::__1::unique_ptr.1118" = type { %"class.std::__1::__compressed_pair.1119" }
%"class.std::__1::__compressed_pair.1119" = type { %"struct.std::__1::__compressed_pair_elem.1120", %"struct.std::__1::__compressed_pair_elem.1122" }
%"struct.std::__1::__compressed_pair_elem.1120" = type { %"struct.std::__1::__hash_node_base.1121"** }
%"struct.std::__1::__hash_node_base.1121" = type { %"struct.std::__1::__hash_node_base.1121"* }
%"struct.std::__1::__compressed_pair_elem.1122" = type { %"class.std::__1::__bucket_list_deallocator.1123" }
%"class.std::__1::__bucket_list_deallocator.1123" = type { %"class.std::__1::__compressed_pair.1124" }
%"class.std::__1::__compressed_pair.1124" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1128" = type { %"struct.std::__1::__compressed_pair_elem.1129" }
%"struct.std::__1::__compressed_pair_elem.1129" = type { %"struct.std::__1::__hash_node_base.1121" }
%"class.std::__1::__compressed_pair.1133" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1136" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::atomic.1142" = type { %"struct.std::__1::__atomic_base.1143" }
%"struct.std::__1::__atomic_base.1143" = type { %"struct.std::__1::__cxx_atomic_impl.1144" }
%"struct.std::__1::__cxx_atomic_impl.1144" = type { %"struct.std::__1::__cxx_atomic_base_impl.1145" }
%"struct.std::__1::__cxx_atomic_base_impl.1145" = type { %"class.std::__1::vector.1146"* }
%"class.std::__1::vector.1146" = type { %"class.std::__1::__vector_base.1147" }
%"class.std::__1::__vector_base.1147" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1148" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1148" = type { %"struct.std::__1::__compressed_pair_elem.1149" }
%"struct.std::__1::__compressed_pair_elem.1149" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.50" = type { %"struct.std::__1::__atomic_base.51" }
%"struct.std::__1::__atomic_base.51" = type { %"struct.std::__1::__cxx_atomic_impl.52" }
%"struct.std::__1::__cxx_atomic_impl.52" = type { %"struct.std::__1::__cxx_atomic_base_impl.53" }
%"struct.std::__1::__cxx_atomic_base_impl.53" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair.54"*, %"struct.std::__1::pair.54"*, %"class.std::__1::__compressed_pair.55" }
%"struct.std::__1::pair.54" = type opaque
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.std::__1::pair.54"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.94" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { %"struct.std::__1::pair.96"*, %"struct.std::__1::pair.96"*, %"class.std::__1::__compressed_pair.97" }
%"struct.std::__1::pair.96" = type { i32, i64 }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.std::__1::pair.96"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.102" }
%"class.std::__1::unordered_map.102" = type { %"class.std::__1::__hash_table.103" }
%"class.std::__1::__hash_table.103" = type <{ %"class.std::__1::unique_ptr.104", %"class.std::__1::__compressed_pair.114", %"class.std::__1::__compressed_pair.119", %"class.std::__1::__compressed_pair.124", [4 x i8] }>
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106", %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.std::__1::__hash_node_base.107"** }
%"struct.std::__1::__hash_node_base.107" = type { %"struct.std::__1::__hash_node_base.107"* }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.std::__1::__bucket_list_deallocator.109" }
%"class.std::__1::__bucket_list_deallocator.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.107" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.143", %"struct.std::__1::atomic.147", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.147" = type { %"struct.std::__1::__atomic_base.148" }
%"struct.std::__1::__atomic_base.148" = type { %"struct.std::__1::__cxx_atomic_impl.149" }
%"struct.std::__1::__cxx_atomic_impl.149" = type { %"struct.std::__1::__cxx_atomic_base_impl.150" }
%"struct.std::__1::__cxx_atomic_base_impl.150" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.158" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.195", %"class.std::__1::unique_ptr.201", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.255", %"class.std::__1::vector.255", %"class.std::__1::vector.255", %"class.std::__1::vector.262", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.172", %"class.std::__1::vector.173", %"class.std::__1::vector.180", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.172" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.175" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.180" = type { %"class.std::__1::__vector_base.181" }
%"class.std::__1::__vector_base.181" = type { %"class.std::__1::unique_ptr.182"*, %"class.std::__1::unique_ptr.182"*, %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::unique_ptr.182" = type opaque
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.std::__1::unique_ptr.182"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.188", i8, i64 }
%"class.std::__1::vector.188" = type { %"class.std::__1::__vector_base.189" }
%"class.std::__1::__vector_base.189" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.204" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.172"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.204" = type { %"class.std::__1::__hash_table.205" }
%"class.std::__1::__hash_table.205" = type <{ %"class.std::__1::unique_ptr.206", %"class.std::__1::__compressed_pair.216", %"class.std::__1::__compressed_pair.221", %"class.std::__1::__compressed_pair.224", [4 x i8] }>
%"class.std::__1::unique_ptr.206" = type { %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208", %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"struct.std::__1::__hash_node_base.209"** }
%"struct.std::__1::__hash_node_base.209" = type { %"struct.std::__1::__hash_node_base.209"* }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.std::__1::__bucket_list_deallocator.211" }
%"class.std::__1::__bucket_list_deallocator.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"struct.std::__1::__hash_node_base.209" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.231" }
%"class.std::__1::unordered_map.231" = type { %"class.std::__1::__hash_table.232" }
%"class.std::__1::__hash_table.232" = type <{ %"class.std::__1::unique_ptr.233", %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.248", %"class.std::__1::__compressed_pair.251", [4 x i8] }>
%"class.std::__1::unique_ptr.233" = type { %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235", %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"struct.std::__1::__hash_node_base.236"** }
%"struct.std::__1::__hash_node_base.236" = type { %"struct.std::__1::__hash_node_base.236"* }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.std::__1::__bucket_list_deallocator.238" }
%"class.std::__1::__bucket_list_deallocator.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.244" }
%"struct.std::__1::__compressed_pair_elem.244" = type { %"struct.std::__1::__hash_node_base.236" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::vector.255" = type { %"class.std::__1::__vector_base.256" }
%"class.std::__1::__vector_base.256" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.262" = type { %"class.std::__1::__vector_base.263" }
%"class.std::__1::__vector_base.263" = type { %"struct.std::__1::pair.264"*, %"struct.std::__1::pair.264"*, %"class.std::__1::__compressed_pair.265" }
%"struct.std::__1::pair.264" = type opaque
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"struct.std::__1::pair.264"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.270", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.255"], [3 x %"class.std::__1::vector.255"], i8, %"struct.std::__1::atomic.143", [6 x i8], %"class.std::__1::vector.255", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.280"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.255", %"class.std::__1::vector.255", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.280" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.289" = type { %"class.std::__1::__compressed_pair.290" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.305", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.298"], %"class.std::__1::unique_ptr.270" }
%"class.std::__1::vector.298" = type { %"class.std::__1::__vector_base.299" }
%"class.std::__1::__vector_base.299" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.337", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.341", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.346" }
%"struct.std::__1::atomic.337" = type { %"struct.std::__1::__atomic_base.338" }
%"struct.std::__1::__atomic_base.338" = type { %"struct.std::__1::__cxx_atomic_impl.339" }
%"struct.std::__1::__cxx_atomic_impl.339" = type { %"struct.std::__1::__cxx_atomic_base_impl.340" }
%"struct.std::__1::__cxx_atomic_base_impl.340" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.341" = type { %"struct.std::__1::__atomic_base.342" }
%"struct.std::__1::__atomic_base.342" = type { %"struct.std::__1::__cxx_atomic_impl.343" }
%"struct.std::__1::__cxx_atomic_impl.343" = type { %"struct.std::__1::__cxx_atomic_base_impl.344" }
%"struct.std::__1::__cxx_atomic_base_impl.344" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.346" = type { %"class.std::__1::__hash_table.347" }
%"class.std::__1::__hash_table.347" = type <{ %"class.std::__1::unique_ptr.348", %"class.std::__1::__compressed_pair.358", %"class.std::__1::__compressed_pair.363", %"class.std::__1::__compressed_pair.366", [4 x i8] }>
%"class.std::__1::unique_ptr.348" = type { %"class.std::__1::__compressed_pair.349" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.350", %"struct.std::__1::__compressed_pair_elem.352" }
%"struct.std::__1::__compressed_pair_elem.350" = type { %"struct.std::__1::__hash_node_base.351"** }
%"struct.std::__1::__hash_node_base.351" = type { %"struct.std::__1::__hash_node_base.351"* }
%"struct.std::__1::__compressed_pair_elem.352" = type { %"class.std::__1::__bucket_list_deallocator.353" }
%"class.std::__1::__bucket_list_deallocator.353" = type { %"class.std::__1::__compressed_pair.354" }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.358" = type { %"struct.std::__1::__compressed_pair_elem.359" }
%"struct.std::__1::__compressed_pair_elem.359" = type { %"struct.std::__1::__hash_node_base.351" }
%"class.std::__1::__compressed_pair.363" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.270", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.143", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.376", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.376" = type { %"class.std::__1::__hash_table.377" }
%"class.std::__1::__hash_table.377" = type <{ %"class.std::__1::unique_ptr.378", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.393", %"class.std::__1::__compressed_pair.396", [4 x i8] }>
%"class.std::__1::unique_ptr.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.380", %"struct.std::__1::__compressed_pair_elem.382" }
%"struct.std::__1::__compressed_pair_elem.380" = type { %"struct.std::__1::__hash_node_base.381"** }
%"struct.std::__1::__hash_node_base.381" = type { %"struct.std::__1::__hash_node_base.381"* }
%"struct.std::__1::__compressed_pair_elem.382" = type { %"class.std::__1::__bucket_list_deallocator.383" }
%"class.std::__1::__bucket_list_deallocator.383" = type { %"class.std::__1::__compressed_pair.384" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"struct.std::__1::__hash_node_base.381" }
%"class.std::__1::__compressed_pair.393" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.396" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.411" }
%"struct.std::__1::__compressed_pair_elem.411" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.412" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::unique_ptr.419" = type { %"class.std::__1::__compressed_pair.420" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.421" }
%"struct.std::__1::__compressed_pair_elem.421" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.425" = type { %"class.std::__1::__compressed_pair.426" }
%"class.std::__1::__compressed_pair.426" = type { %"struct.std::__1::__compressed_pair_elem.427" }
%"struct.std::__1::__compressed_pair_elem.427" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.431" = type { %"class.std::__1::__compressed_pair.432" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.433" }
%"struct.std::__1::__compressed_pair_elem.433" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.437" = type { %"class.std::__1::__compressed_pair.438" }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.439" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.443" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.449" = type { %"class.std::__1::__compressed_pair.450" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.451" }
%"struct.std::__1::__compressed_pair_elem.451" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.455" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.473", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.456", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.473" = type { %"struct.std::__1::__atomic_base.474" }
%"struct.std::__1::__atomic_base.474" = type { %"struct.std::__1::__cxx_atomic_impl.475" }
%"struct.std::__1::__cxx_atomic_impl.475" = type { %"struct.std::__1::__cxx_atomic_base_impl.476" }
%"struct.std::__1::__cxx_atomic_base_impl.476" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase.477" }
%"class.v8::internal::SlotBase.477" = type { i64 }
%"class.std::__1::unordered_map.478" = type { %"class.std::__1::__hash_table.479" }
%"class.std::__1::__hash_table.479" = type <{ %"class.std::__1::unique_ptr.480", %"class.std::__1::__compressed_pair.490", %"class.std::__1::__compressed_pair.495", %"class.std::__1::__compressed_pair.498", [4 x i8] }>
%"class.std::__1::unique_ptr.480" = type { %"class.std::__1::__compressed_pair.481" }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482", %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"struct.std::__1::__hash_node_base.483"** }
%"struct.std::__1::__hash_node_base.483" = type { %"struct.std::__1::__hash_node_base.483"* }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"class.std::__1::__bucket_list_deallocator.485" }
%"class.std::__1::__bucket_list_deallocator.485" = type { %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.491" }
%"struct.std::__1::__compressed_pair_elem.491" = type { %"struct.std::__1::__hash_node_base.483" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::unique_ptr.504" = type { %"class.std::__1::__compressed_pair.505" }
%"class.std::__1::__compressed_pair.505" = type { %"struct.std::__1::__compressed_pair_elem.506" }
%"struct.std::__1::__compressed_pair_elem.506" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.512" }
%"struct.std::__1::__compressed_pair_elem.512" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.516", %"class.std::__1::vector.516" }
%"class.std::__1::unique_ptr.523" = type { %"class.std::__1::__compressed_pair.524" }
%"class.std::__1::__compressed_pair.524" = type { %"struct.std::__1::__compressed_pair_elem.525" }
%"struct.std::__1::__compressed_pair_elem.525" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.std::__1::unordered_set.305" = type { %"class.std::__1::__hash_table.306" }
%"class.std::__1::__hash_table.306" = type <{ %"class.std::__1::unique_ptr.307", %"class.std::__1::__compressed_pair.317", %"class.std::__1::__compressed_pair.322", %"class.std::__1::__compressed_pair.326", [4 x i8] }>
%"class.std::__1::unique_ptr.307" = type { %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309", %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"struct.std::__1::__hash_node_base.310"** }
%"struct.std::__1::__hash_node_base.310" = type { %"struct.std::__1::__hash_node_base.310"* }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"class.std::__1::__bucket_list_deallocator.312" }
%"class.std::__1::__bucket_list_deallocator.312" = type { %"class.std::__1::__compressed_pair.313" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.317" = type { %"struct.std::__1::__compressed_pair_elem.318" }
%"struct.std::__1::__compressed_pair_elem.318" = type { %"struct.std::__1::__hash_node_base.310" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::unordered_map.555" = type { %"class.std::__1::__hash_table.556" }
%"class.std::__1::__hash_table.556" = type <{ %"class.std::__1::unique_ptr.557", %"class.std::__1::__compressed_pair.567", %"class.std::__1::__compressed_pair.572", %"class.std::__1::__compressed_pair.575", [4 x i8] }>
%"class.std::__1::unique_ptr.557" = type { %"class.std::__1::__compressed_pair.558" }
%"class.std::__1::__compressed_pair.558" = type { %"struct.std::__1::__compressed_pair_elem.559", %"struct.std::__1::__compressed_pair_elem.561" }
%"struct.std::__1::__compressed_pair_elem.559" = type { %"struct.std::__1::__hash_node_base.560"** }
%"struct.std::__1::__hash_node_base.560" = type { %"struct.std::__1::__hash_node_base.560"* }
%"struct.std::__1::__compressed_pair_elem.561" = type { %"class.std::__1::__bucket_list_deallocator.562" }
%"class.std::__1::__bucket_list_deallocator.562" = type { %"class.std::__1::__compressed_pair.563" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.568" }
%"struct.std::__1::__compressed_pair_elem.568" = type { %"struct.std::__1::__hash_node_base.560" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.575" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::unordered_map.529" = type { %"class.std::__1::__hash_table.530" }
%"class.std::__1::__hash_table.530" = type <{ %"class.std::__1::unique_ptr.531", %"class.std::__1::__compressed_pair.541", %"class.std::__1::__compressed_pair.546", %"class.std::__1::__compressed_pair.549", [4 x i8] }>
%"class.std::__1::unique_ptr.531" = type { %"class.std::__1::__compressed_pair.532" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.533", %"struct.std::__1::__compressed_pair_elem.535" }
%"struct.std::__1::__compressed_pair_elem.533" = type { %"struct.std::__1::__hash_node_base.534"** }
%"struct.std::__1::__hash_node_base.534" = type { %"struct.std::__1::__hash_node_base.534"* }
%"struct.std::__1::__compressed_pair_elem.535" = type { %"class.std::__1::__bucket_list_deallocator.536" }
%"class.std::__1::__bucket_list_deallocator.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.541" = type { %"struct.std::__1::__compressed_pair_elem.542" }
%"struct.std::__1::__compressed_pair_elem.542" = type { %"struct.std::__1::__hash_node_base.534" }
%"class.std::__1::__compressed_pair.546" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::unordered_map.579" = type { %"class.std::__1::__hash_table.580" }
%"class.std::__1::__hash_table.580" = type <{ %"class.std::__1::unique_ptr.581", %"class.std::__1::__compressed_pair.591", %"class.std::__1::__compressed_pair.596", %"class.std::__1::__compressed_pair.601", [4 x i8] }>
%"class.std::__1::unique_ptr.581" = type { %"class.std::__1::__compressed_pair.582" }
%"class.std::__1::__compressed_pair.582" = type { %"struct.std::__1::__compressed_pair_elem.583", %"struct.std::__1::__compressed_pair_elem.585" }
%"struct.std::__1::__compressed_pair_elem.583" = type { %"struct.std::__1::__hash_node_base.584"** }
%"struct.std::__1::__hash_node_base.584" = type { %"struct.std::__1::__hash_node_base.584"* }
%"struct.std::__1::__compressed_pair_elem.585" = type { %"class.std::__1::__bucket_list_deallocator.586" }
%"class.std::__1::__bucket_list_deallocator.586" = type { %"class.std::__1::__compressed_pair.587" }
%"class.std::__1::__compressed_pair.587" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.591" = type { %"struct.std::__1::__compressed_pair_elem.592" }
%"struct.std::__1::__compressed_pair_elem.592" = type { %"struct.std::__1::__hash_node_base.584" }
%"class.std::__1::__compressed_pair.596" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.601" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::vector.607" = type { %"class.std::__1::__vector_base.608" }
%"class.std::__1::__vector_base.608" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.614" = type { %"class.std::__1::__compressed_pair.615" }
%"class.std::__1::__compressed_pair.615" = type { %"struct.std::__1::__compressed_pair_elem.616" }
%"struct.std::__1::__compressed_pair_elem.616" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.45" = type { %"struct.std::__1::__atomic_base.46" }
%"struct.std::__1::__atomic_base.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl.48" }
%"struct.std::__1::__cxx_atomic_impl.48" = type { %"struct.std::__1::__cxx_atomic_base_impl.49" }
%"struct.std::__1::__cxx_atomic_base_impl.49" = type { i64 }
%"struct.std::__1::atomic.620" = type { %"struct.std::__1::__atomic_base.621" }
%"struct.std::__1::__atomic_base.621" = type { %"struct.std::__1::__cxx_atomic_impl.622" }
%"struct.std::__1::__cxx_atomic_impl.622" = type { %"struct.std::__1::__cxx_atomic_base_impl.623" }
%"struct.std::__1::__cxx_atomic_base_impl.623" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }

$_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects19UpdateAfterScavengeEv(%"class.v8::internal::WeakObjects"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 1
  tail call void @_ZN2v88internal11WeakObjects25UpdateEphemeronHashTablesERNS0_8WorklistINS0_18EphemeronHashTableELi64EEE(%"class.v8::internal::WeakObjects"* undef, %"class.v8::internal::Worklist.1"* dereferenceable(704) %2)
  %3 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 2
  tail call void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"* %3, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)* nonnull @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_) #4
  %4 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 3
  tail call void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"* %4, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)* nonnull @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_) #4
  %5 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 4
  tail call void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"* %5, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)* nonnull @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_) #4
  %6 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 5
  tail call void @_ZN2v88internal11WeakObjects20UpdateWeakReferencesERNS0_8WorklistINSt3__14pairINS0_10HeapObjectENS0_24CompressedHeapObjectSlotEEELi64EEE(%"class.v8::internal::WeakObjects"* undef, %"class.v8::internal::Worklist.5"* dereferenceable(704) %6)
  %7 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 6
  tail call void @_ZN2v88internal11WeakObjects23UpdateWeakObjectsInCodeERNS0_8WorklistINSt3__14pairINS0_10HeapObjectENS0_4CodeEEELi64EEE(%"class.v8::internal::WeakObjects"* undef, %"class.v8::internal::Worklist.7"* dereferenceable(704) %7)
  %8 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 7
  tail call void @_ZN2v88internal11WeakObjects16UpdateJSWeakRefsERNS0_8WorklistINS0_9JSWeakRefELi64EEE(%"class.v8::internal::WeakObjects"* undef, %"class.v8::internal::Worklist.9"* dereferenceable(704) %8)
  %9 = getelementptr inbounds %"class.v8::internal::WeakObjects", %"class.v8::internal::WeakObjects"* %0, i64 0, i32 10
  tail call void @_ZN2v88internal11WeakObjects24UpdateFlushedJSFunctionsERNS0_8WorklistINS0_10JSFunctionELi64EEE(%"class.v8::internal::WeakObjects"* undef, %"class.v8::internal::Worklist.15"* dereferenceable(704) %9)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects22UpdateTransitionArraysERNS0_8WorklistINS0_15TransitionArrayELi64EEE(%"class.v8::internal::WeakObjects"* nocapture, %"class.v8::internal::Worklist"* nocapture dereferenceable(704)) local_unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects25UpdateEphemeronHashTablesERNS0_8WorklistINS0_18EphemeronHashTableELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.1"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.1"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %78, label %6

6:                                                ; preds = %166, %2
  %7 = getelementptr inbounds %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.1"* %1, i64 0, i32 1, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %7) #4
  %8 = getelementptr inbounds %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.1"* %1, i64 0, i32 1, i32 1
  %9 = load %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %9, null
  br i1 %10, label %172, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"** %8 to i64*
  br label %13

13:                                               ; preds = %73, %11
  %14 = phi %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* [ %9, %11 ], [ %74, %73 ]
  %15 = phi %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* [ null, %11 ], [ %76, %73 ]
  %16 = phi i64 [ 0, %11 ], [ %75, %73 ]
  %17 = bitcast %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14 to i64*
  %18 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i64 0, i64* %18, align 8
  br label %61

22:                                               ; preds = %13, %54
  %23 = phi i64 [ %55, %54 ], [ %19, %13 ]
  %24 = phi i64 [ %56, %54 ], [ 0, %13 ]
  %25 = phi i64 [ %57, %54 ], [ 0, %13 ]
  %26 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = and i64 %31, 3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %22
  %35 = and i64 %27, -4294967296
  %36 = or i64 %35, %31
  %37 = add i64 %36, 1
  br label %46

38:                                               ; preds = %22
  %39 = and i64 %27, -262144
  %40 = inttoptr i64 %39 to %"class.v8::internal::BasicMemoryChunk"*
  %41 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %40, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 8
  %44 = icmp eq i64 %43, 0
  %45 = select i1 %44, i64 %27, i64 0
  br label %46

46:                                               ; preds = %38, %34
  %47 = phi i64 [ %37, %34 ], [ %45, %38 ]
  %48 = trunc i64 %47 to i32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %47, i64* %51, align 8
  %52 = add i64 %24, 1
  %53 = load i64, i64* %18, align 8
  br label %54

54:                                               ; preds = %50, %46
  %55 = phi i64 [ %53, %50 ], [ %23, %46 ]
  %56 = phi i64 [ %52, %50 ], [ %24, %46 ]
  %57 = add nuw i64 %25, 1
  %58 = icmp ult i64 %57, %55
  br i1 %58, label %22, label %59

59:                                               ; preds = %54
  store i64 %56, i64* %18, align 8
  %60 = icmp eq i64 %56, 0
  br i1 %60, label %61, label %70

61:                                               ; preds = %59, %21
  %62 = add i64 %16, 1
  %63 = icmp eq %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %15, null
  %64 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14, i64 0, i32 0
  %65 = load i64, i64* %17, align 8
  %66 = bitcast %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %15 to i64*
  %67 = select i1 %63, i64* %12, i64* %66
  store i64 %65, i64* %67, align 8
  %68 = load %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"** %64, align 8
  %69 = bitcast %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14 to i8*
  tail call void @_ZdlPv(i8* %69) #5
  br label %73

70:                                               ; preds = %59
  %71 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %14, i64 0, i32 0
  %72 = load %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"** %71, align 8
  br label %73

73:                                               ; preds = %70, %61
  %74 = phi %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* [ %68, %61 ], [ %72, %70 ]
  %75 = phi i64 [ %62, %61 ], [ %16, %70 ]
  %76 = phi %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* [ %15, %61 ], [ %14, %70 ]
  %77 = icmp eq %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %74, null
  br i1 %77, label %172, label %13

78:                                               ; preds = %2, %166
  %79 = phi i64 [ %168, %166 ], [ 0, %2 ]
  %80 = getelementptr inbounds %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.1"* %1, i64 0, i32 0, i64 %79, i32 1
  %81 = load %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %81, i64 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %122, label %85

85:                                               ; preds = %78, %117
  %86 = phi i64 [ %118, %117 ], [ %83, %78 ]
  %87 = phi i64 [ %119, %117 ], [ 0, %78 ]
  %88 = phi i64 [ %120, %117 ], [ 0, %78 ]
  %89 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %81, i64 0, i32 2, i64 %88, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, -1
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = and i64 %94, 3
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %85
  %98 = and i64 %90, -4294967296
  %99 = or i64 %98, %94
  %100 = add i64 %99, 1
  br label %109

101:                                              ; preds = %85
  %102 = and i64 %90, -262144
  %103 = inttoptr i64 %102 to %"class.v8::internal::BasicMemoryChunk"*
  %104 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %103, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = and i64 %105, 8
  %107 = icmp eq i64 %106, 0
  %108 = select i1 %107, i64 %90, i64 0
  br label %109

109:                                              ; preds = %101, %97
  %110 = phi i64 [ %100, %97 ], [ %108, %101 ]
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %81, i64 0, i32 2, i64 %87, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %110, i64* %114, align 8
  %115 = add i64 %87, 1
  %116 = load i64, i64* %82, align 8
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i64 [ %116, %113 ], [ %86, %109 ]
  %119 = phi i64 [ %115, %113 ], [ %87, %109 ]
  %120 = add nuw i64 %88, 1
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %85, label %122

122:                                              ; preds = %117, %78
  %123 = phi i64 [ 0, %78 ], [ %119, %117 ]
  store i64 %123, i64* %82, align 8
  %124 = getelementptr inbounds %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.1"* %1, i64 0, i32 0, i64 %79, i32 0
  %125 = load %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"** %124, align 8
  %126 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %125, i64 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %166, label %129

129:                                              ; preds = %122, %161
  %130 = phi i64 [ %162, %161 ], [ %127, %122 ]
  %131 = phi i64 [ %163, %161 ], [ 0, %122 ]
  %132 = phi i64 [ %164, %161 ], [ 0, %122 ]
  %133 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %125, i64 0, i32 2, i64 %132, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, -1
  %136 = inttoptr i64 %135 to i32*
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = zext i32 %137 to i64
  %139 = and i64 %138, 3
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %129
  %142 = and i64 %134, -4294967296
  %143 = or i64 %142, %138
  %144 = add i64 %143, 1
  br label %153

145:                                              ; preds = %129
  %146 = and i64 %134, -262144
  %147 = inttoptr i64 %146 to %"class.v8::internal::BasicMemoryChunk"*
  %148 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %147, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = and i64 %149, 8
  %151 = icmp eq i64 %150, 0
  %152 = select i1 %151, i64 %134, i64 0
  br label %153

153:                                              ; preds = %145, %141
  %154 = phi i64 [ %144, %141 ], [ %152, %145 ]
  %155 = trunc i64 %154 to i32
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"* %125, i64 0, i32 2, i64 %131, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %154, i64* %158, align 8
  %159 = add i64 %131, 1
  %160 = load i64, i64* %126, align 8
  br label %161

161:                                              ; preds = %157, %153
  %162 = phi i64 [ %160, %157 ], [ %130, %153 ]
  %163 = phi i64 [ %159, %157 ], [ %131, %153 ]
  %164 = add nuw i64 %132, 1
  %165 = icmp ult i64 %164, %162
  br i1 %165, label %129, label %166

166:                                              ; preds = %161, %122
  %167 = phi i64 [ 0, %122 ], [ %163, %161 ]
  store i64 %167, i64* %126, align 8
  %168 = add nuw nsw i64 %79, 1
  %169 = load i32, i32* %3, align 8
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %168, %170
  br i1 %171, label %78, label %6

172:                                              ; preds = %73, %6
  %173 = phi i64 [ 0, %6 ], [ %75, %73 ]
  %174 = getelementptr inbounds %"class.v8::internal::Worklist.1", %"class.v8::internal::Worklist.1"* %1, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = atomicrmw sub i64* %174, i64 %173 monotonic
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects23UpdateCurrentEphemeronsERNS0_8WorklistINS0_9EphemeronELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.3"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"* %1, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)* nonnull @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects20UpdateNextEphemeronsERNS0_8WorklistINS0_9EphemeronELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.3"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"* %1, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)* nonnull @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects26UpdateDiscoveredEphemeronsERNS0_8WorklistINS0_9EphemeronELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.3"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"* %1, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)* nonnull @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects20UpdateWeakReferencesERNS0_8WorklistINSt3__14pairINS0_10HeapObjectENS0_24CompressedHeapObjectSlotEEELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.5"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.5"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %83, label %6

6:                                                ; preds = %181, %2
  %7 = getelementptr inbounds %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.5"* %1, i64 0, i32 1, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %7) #4
  %8 = getelementptr inbounds %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.5"* %1, i64 0, i32 1, i32 1
  %9 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %9, null
  br i1 %10, label %187, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"** %8 to i64*
  br label %13

13:                                               ; preds = %78, %11
  %14 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* [ %9, %11 ], [ %79, %78 ]
  %15 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* [ null, %11 ], [ %81, %78 ]
  %16 = phi i64 [ 0, %11 ], [ %80, %78 ]
  %17 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14 to i64*
  %18 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i64 0, i64* %18, align 8
  br label %66

22:                                               ; preds = %13, %59
  %23 = phi i64 [ %60, %59 ], [ %19, %13 ]
  %24 = phi i64 [ %61, %59 ], [ 0, %13 ]
  %25 = phi i64 [ %62, %59 ], [ 0, %13 ]
  %26 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 1, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %27, -1
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = and i64 %33, 3
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %22
  %37 = and i64 %27, -4294967296
  %38 = or i64 %37, %33
  %39 = add i64 %38, 1
  br label %48

40:                                               ; preds = %22
  %41 = and i64 %27, -262144
  %42 = inttoptr i64 %41 to %"class.v8::internal::BasicMemoryChunk"*
  %43 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %42, i64 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 8
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 %27, i64 0
  br label %48

48:                                               ; preds = %40, %36
  %49 = phi i64 [ %39, %36 ], [ %47, %40 ]
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %48
  %53 = sub i64 %29, %27
  %54 = add i64 %53, %49
  %55 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 0, i32 0, i32 0, i32 0
  store i64 %49, i64* %55, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 1, i32 0, i32 0
  store i64 %54, i64* %56, align 8
  %57 = add i64 %24, 1
  %58 = load i64, i64* %18, align 8
  br label %59

59:                                               ; preds = %52, %48
  %60 = phi i64 [ %58, %52 ], [ %23, %48 ]
  %61 = phi i64 [ %57, %52 ], [ %24, %48 ]
  %62 = add nuw i64 %25, 1
  %63 = icmp ult i64 %62, %60
  br i1 %63, label %22, label %64

64:                                               ; preds = %59
  store i64 %61, i64* %18, align 8
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %66, label %75

66:                                               ; preds = %64, %21
  %67 = add i64 %16, 1
  %68 = icmp eq %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %15, null
  %69 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 0
  %70 = load i64, i64* %17, align 8
  %71 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %15 to i64*
  %72 = select i1 %68, i64* %12, i64* %71
  store i64 %70, i64* %72, align 8
  %73 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"** %69, align 8
  %74 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14 to i8*
  tail call void @_ZdlPv(i8* %74) #5
  br label %78

75:                                               ; preds = %64
  %76 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %14, i64 0, i32 0
  %77 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"** %76, align 8
  br label %78

78:                                               ; preds = %75, %66
  %79 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* [ %73, %66 ], [ %77, %75 ]
  %80 = phi i64 [ %67, %66 ], [ %16, %75 ]
  %81 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* [ %15, %66 ], [ %14, %75 ]
  %82 = icmp eq %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %79, null
  br i1 %82, label %187, label %13

83:                                               ; preds = %2, %181
  %84 = phi i64 [ %183, %181 ], [ 0, %2 ]
  %85 = getelementptr inbounds %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.5"* %1, i64 0, i32 0, i64 %84, i32 1
  %86 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"** %85, align 8
  %87 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %86, i64 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %132, label %90

90:                                               ; preds = %83, %127
  %91 = phi i64 [ %128, %127 ], [ %88, %83 ]
  %92 = phi i64 [ %129, %127 ], [ 0, %83 ]
  %93 = phi i64 [ %130, %127 ], [ 0, %83 ]
  %94 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %86, i64 0, i32 2, i64 %93, i32 0, i32 0, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %86, i64 0, i32 2, i64 %93, i32 1, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %95, -1
  %99 = inttoptr i64 %98 to i32*
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = zext i32 %100 to i64
  %102 = and i64 %101, 3
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %108

104:                                              ; preds = %90
  %105 = and i64 %95, -4294967296
  %106 = or i64 %105, %101
  %107 = add i64 %106, 1
  br label %116

108:                                              ; preds = %90
  %109 = and i64 %95, -262144
  %110 = inttoptr i64 %109 to %"class.v8::internal::BasicMemoryChunk"*
  %111 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %110, i64 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, 8
  %114 = icmp eq i64 %113, 0
  %115 = select i1 %114, i64 %95, i64 0
  br label %116

116:                                              ; preds = %108, %104
  %117 = phi i64 [ %107, %104 ], [ %115, %108 ]
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %127, label %120

120:                                              ; preds = %116
  %121 = sub i64 %97, %95
  %122 = add i64 %121, %117
  %123 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %86, i64 0, i32 2, i64 %92, i32 0, i32 0, i32 0, i32 0
  store i64 %117, i64* %123, align 8
  %124 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %86, i64 0, i32 2, i64 %92, i32 1, i32 0, i32 0
  store i64 %122, i64* %124, align 8
  %125 = add i64 %92, 1
  %126 = load i64, i64* %87, align 8
  br label %127

127:                                              ; preds = %120, %116
  %128 = phi i64 [ %126, %120 ], [ %91, %116 ]
  %129 = phi i64 [ %125, %120 ], [ %92, %116 ]
  %130 = add nuw i64 %93, 1
  %131 = icmp ult i64 %130, %128
  br i1 %131, label %90, label %132

132:                                              ; preds = %127, %83
  %133 = phi i64 [ 0, %83 ], [ %129, %127 ]
  store i64 %133, i64* %87, align 8
  %134 = getelementptr inbounds %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.5"* %1, i64 0, i32 0, i64 %84, i32 0
  %135 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"** %134, align 8
  %136 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %135, i64 0, i32 1
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %181, label %139

139:                                              ; preds = %132, %176
  %140 = phi i64 [ %177, %176 ], [ %137, %132 ]
  %141 = phi i64 [ %178, %176 ], [ 0, %132 ]
  %142 = phi i64 [ %179, %176 ], [ 0, %132 ]
  %143 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %135, i64 0, i32 2, i64 %142, i32 0, i32 0, i32 0, i32 0
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %135, i64 0, i32 2, i64 %142, i32 1, i32 0, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %144, -1
  %148 = inttoptr i64 %147 to i32*
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = zext i32 %149 to i64
  %151 = and i64 %150, 3
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %157

153:                                              ; preds = %139
  %154 = and i64 %144, -4294967296
  %155 = or i64 %154, %150
  %156 = add i64 %155, 1
  br label %165

157:                                              ; preds = %139
  %158 = and i64 %144, -262144
  %159 = inttoptr i64 %158 to %"class.v8::internal::BasicMemoryChunk"*
  %160 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %159, i64 0, i32 1
  %161 = load i64, i64* %160, align 8
  %162 = and i64 %161, 8
  %163 = icmp eq i64 %162, 0
  %164 = select i1 %163, i64 %144, i64 0
  br label %165

165:                                              ; preds = %157, %153
  %166 = phi i64 [ %156, %153 ], [ %164, %157 ]
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %176, label %169

169:                                              ; preds = %165
  %170 = sub i64 %146, %144
  %171 = add i64 %170, %166
  %172 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %135, i64 0, i32 2, i64 %141, i32 0, i32 0, i32 0, i32 0
  store i64 %166, i64* %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"* %135, i64 0, i32 2, i64 %141, i32 1, i32 0, i32 0
  store i64 %171, i64* %173, align 8
  %174 = add i64 %141, 1
  %175 = load i64, i64* %136, align 8
  br label %176

176:                                              ; preds = %169, %165
  %177 = phi i64 [ %175, %169 ], [ %140, %165 ]
  %178 = phi i64 [ %174, %169 ], [ %141, %165 ]
  %179 = add nuw i64 %142, 1
  %180 = icmp ult i64 %179, %177
  br i1 %180, label %139, label %181

181:                                              ; preds = %176, %132
  %182 = phi i64 [ 0, %132 ], [ %178, %176 ]
  store i64 %182, i64* %136, align 8
  %183 = add nuw nsw i64 %84, 1
  %184 = load i32, i32* %3, align 8
  %185 = sext i32 %184 to i64
  %186 = icmp slt i64 %183, %185
  br i1 %186, label %83, label %6

187:                                              ; preds = %78, %6
  %188 = phi i64 [ 0, %6 ], [ %80, %78 ]
  %189 = getelementptr inbounds %"class.v8::internal::Worklist.5", %"class.v8::internal::Worklist.5"* %1, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = atomicrmw sub i64* %189, i64 %188 monotonic
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects23UpdateWeakObjectsInCodeERNS0_8WorklistINSt3__14pairINS0_10HeapObjectENS0_4CodeEEELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.7"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.7"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %175, %2
  %7 = getelementptr inbounds %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.7"* %1, i64 0, i32 1, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %7) #4
  %8 = getelementptr inbounds %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.7"* %1, i64 0, i32 1, i32 1
  %9 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %9, null
  br i1 %10, label %181, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"** %8 to i64*
  br label %13

13:                                               ; preds = %76, %11
  %14 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* [ %9, %11 ], [ %77, %76 ]
  %15 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* [ null, %11 ], [ %79, %76 ]
  %16 = phi i64 [ 0, %11 ], [ %78, %76 ]
  %17 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14 to i64*
  %18 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i64 0, i64* %18, align 8
  br label %64

22:                                               ; preds = %13, %57
  %23 = phi i64 [ %58, %57 ], [ %19, %13 ]
  %24 = phi i64 [ %59, %57 ], [ 0, %13 ]
  %25 = phi i64 [ %60, %57 ], [ 0, %13 ]
  %26 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 1, i32 0, i32 0, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %27, -1
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = and i64 %33, 3
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %22
  %37 = and i64 %27, -4294967296
  %38 = or i64 %37, %33
  %39 = add i64 %38, 1
  br label %48

40:                                               ; preds = %22
  %41 = and i64 %27, -262144
  %42 = inttoptr i64 %41 to %"class.v8::internal::BasicMemoryChunk"*
  %43 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %42, i64 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 8
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 %27, i64 0
  br label %48

48:                                               ; preds = %40, %36
  %49 = phi i64 [ %39, %36 ], [ %47, %40 ]
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 0, i32 0, i32 0, i32 0
  store i64 %49, i64* %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %29, i64* %54, align 8
  %55 = add i64 %24, 1
  %56 = load i64, i64* %18, align 8
  br label %57

57:                                               ; preds = %52, %48
  %58 = phi i64 [ %56, %52 ], [ %23, %48 ]
  %59 = phi i64 [ %55, %52 ], [ %24, %48 ]
  %60 = add nuw i64 %25, 1
  %61 = icmp ult i64 %60, %58
  br i1 %61, label %22, label %62

62:                                               ; preds = %57
  store i64 %59, i64* %18, align 8
  %63 = icmp eq i64 %59, 0
  br i1 %63, label %64, label %73

64:                                               ; preds = %62, %21
  %65 = add i64 %16, 1
  %66 = icmp eq %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %15, null
  %67 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 0
  %68 = load i64, i64* %17, align 8
  %69 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %15 to i64*
  %70 = select i1 %66, i64* %12, i64* %69
  store i64 %68, i64* %70, align 8
  %71 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"** %67, align 8
  %72 = bitcast %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14 to i8*
  tail call void @_ZdlPv(i8* %72) #5
  br label %76

73:                                               ; preds = %62
  %74 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %14, i64 0, i32 0
  %75 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"** %74, align 8
  br label %76

76:                                               ; preds = %73, %64
  %77 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* [ %71, %64 ], [ %75, %73 ]
  %78 = phi i64 [ %65, %64 ], [ %16, %73 ]
  %79 = phi %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* [ %15, %64 ], [ %14, %73 ]
  %80 = icmp eq %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %77, null
  br i1 %80, label %181, label %13

81:                                               ; preds = %2, %175
  %82 = phi i64 [ %177, %175 ], [ 0, %2 ]
  %83 = getelementptr inbounds %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.7"* %1, i64 0, i32 0, i64 %82, i32 1
  %84 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"** %83, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %84, i64 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %128, label %88

88:                                               ; preds = %81, %123
  %89 = phi i64 [ %124, %123 ], [ %86, %81 ]
  %90 = phi i64 [ %125, %123 ], [ 0, %81 ]
  %91 = phi i64 [ %126, %123 ], [ 0, %81 ]
  %92 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %84, i64 0, i32 2, i64 %91, i32 0, i32 0, i32 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %84, i64 0, i32 2, i64 %91, i32 1, i32 0, i32 0, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %93, -1
  %97 = inttoptr i64 %96 to i32*
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = zext i32 %98 to i64
  %100 = and i64 %99, 3
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %106

102:                                              ; preds = %88
  %103 = and i64 %93, -4294967296
  %104 = or i64 %103, %99
  %105 = add i64 %104, 1
  br label %114

106:                                              ; preds = %88
  %107 = and i64 %93, -262144
  %108 = inttoptr i64 %107 to %"class.v8::internal::BasicMemoryChunk"*
  %109 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %108, i64 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = and i64 %110, 8
  %112 = icmp eq i64 %111, 0
  %113 = select i1 %112, i64 %93, i64 0
  br label %114

114:                                              ; preds = %106, %102
  %115 = phi i64 [ %105, %102 ], [ %113, %106 ]
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %123, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %84, i64 0, i32 2, i64 %90, i32 0, i32 0, i32 0, i32 0
  store i64 %115, i64* %119, align 8
  %120 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %84, i64 0, i32 2, i64 %90, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %95, i64* %120, align 8
  %121 = add i64 %90, 1
  %122 = load i64, i64* %85, align 8
  br label %123

123:                                              ; preds = %118, %114
  %124 = phi i64 [ %122, %118 ], [ %89, %114 ]
  %125 = phi i64 [ %121, %118 ], [ %90, %114 ]
  %126 = add nuw i64 %91, 1
  %127 = icmp ult i64 %126, %124
  br i1 %127, label %88, label %128

128:                                              ; preds = %123, %81
  %129 = phi i64 [ 0, %81 ], [ %125, %123 ]
  store i64 %129, i64* %85, align 8
  %130 = getelementptr inbounds %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.7"* %1, i64 0, i32 0, i64 %82, i32 0
  %131 = load %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"** %130, align 8
  %132 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %131, i64 0, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %175, label %135

135:                                              ; preds = %128, %170
  %136 = phi i64 [ %171, %170 ], [ %133, %128 ]
  %137 = phi i64 [ %172, %170 ], [ 0, %128 ]
  %138 = phi i64 [ %173, %170 ], [ 0, %128 ]
  %139 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %131, i64 0, i32 2, i64 %138, i32 0, i32 0, i32 0, i32 0
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %131, i64 0, i32 2, i64 %138, i32 1, i32 0, i32 0, i32 0, i32 0
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %140, -1
  %144 = inttoptr i64 %143 to i32*
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = zext i32 %145 to i64
  %147 = and i64 %146, 3
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %153

149:                                              ; preds = %135
  %150 = and i64 %140, -4294967296
  %151 = or i64 %150, %146
  %152 = add i64 %151, 1
  br label %161

153:                                              ; preds = %135
  %154 = and i64 %140, -262144
  %155 = inttoptr i64 %154 to %"class.v8::internal::BasicMemoryChunk"*
  %156 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %155, i64 0, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = and i64 %157, 8
  %159 = icmp eq i64 %158, 0
  %160 = select i1 %159, i64 %140, i64 0
  br label %161

161:                                              ; preds = %153, %149
  %162 = phi i64 [ %152, %149 ], [ %160, %153 ]
  %163 = trunc i64 %162 to i32
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %170, label %165

165:                                              ; preds = %161
  %166 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %131, i64 0, i32 2, i64 %137, i32 0, i32 0, i32 0, i32 0
  store i64 %162, i64* %166, align 8
  %167 = getelementptr inbounds %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"* %131, i64 0, i32 2, i64 %137, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %142, i64* %167, align 8
  %168 = add i64 %137, 1
  %169 = load i64, i64* %132, align 8
  br label %170

170:                                              ; preds = %165, %161
  %171 = phi i64 [ %169, %165 ], [ %136, %161 ]
  %172 = phi i64 [ %168, %165 ], [ %137, %161 ]
  %173 = add nuw i64 %138, 1
  %174 = icmp ult i64 %173, %171
  br i1 %174, label %135, label %175

175:                                              ; preds = %170, %128
  %176 = phi i64 [ 0, %128 ], [ %172, %170 ]
  store i64 %176, i64* %132, align 8
  %177 = add nuw nsw i64 %82, 1
  %178 = load i32, i32* %3, align 8
  %179 = sext i32 %178 to i64
  %180 = icmp slt i64 %177, %179
  br i1 %180, label %81, label %6

181:                                              ; preds = %76, %6
  %182 = phi i64 [ 0, %6 ], [ %78, %76 ]
  %183 = getelementptr inbounds %"class.v8::internal::Worklist.7", %"class.v8::internal::Worklist.7"* %1, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %184 = atomicrmw sub i64* %183, i64 %182 monotonic
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects16UpdateJSWeakRefsERNS0_8WorklistINS0_9JSWeakRefELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.9"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.9"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %78, label %6

6:                                                ; preds = %166, %2
  %7 = getelementptr inbounds %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.9"* %1, i64 0, i32 1, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %7) #4
  %8 = getelementptr inbounds %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.9"* %1, i64 0, i32 1, i32 1
  %9 = load %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %9, null
  br i1 %10, label %172, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"** %8 to i64*
  br label %13

13:                                               ; preds = %73, %11
  %14 = phi %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* [ %9, %11 ], [ %74, %73 ]
  %15 = phi %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* [ null, %11 ], [ %76, %73 ]
  %16 = phi i64 [ 0, %11 ], [ %75, %73 ]
  %17 = bitcast %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14 to i64*
  %18 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i64 0, i64* %18, align 8
  br label %61

22:                                               ; preds = %13, %54
  %23 = phi i64 [ %55, %54 ], [ %19, %13 ]
  %24 = phi i64 [ %56, %54 ], [ 0, %13 ]
  %25 = phi i64 [ %57, %54 ], [ 0, %13 ]
  %26 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = and i64 %31, 3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %22
  %35 = and i64 %27, -4294967296
  %36 = or i64 %35, %31
  %37 = add i64 %36, 1
  br label %46

38:                                               ; preds = %22
  %39 = and i64 %27, -262144
  %40 = inttoptr i64 %39 to %"class.v8::internal::BasicMemoryChunk"*
  %41 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %40, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 8
  %44 = icmp eq i64 %43, 0
  %45 = select i1 %44, i64 %27, i64 0
  br label %46

46:                                               ; preds = %38, %34
  %47 = phi i64 [ %37, %34 ], [ %45, %38 ]
  %48 = trunc i64 %47 to i32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %47, i64* %51, align 8
  %52 = add i64 %24, 1
  %53 = load i64, i64* %18, align 8
  br label %54

54:                                               ; preds = %50, %46
  %55 = phi i64 [ %53, %50 ], [ %23, %46 ]
  %56 = phi i64 [ %52, %50 ], [ %24, %46 ]
  %57 = add nuw i64 %25, 1
  %58 = icmp ult i64 %57, %55
  br i1 %58, label %22, label %59

59:                                               ; preds = %54
  store i64 %56, i64* %18, align 8
  %60 = icmp eq i64 %56, 0
  br i1 %60, label %61, label %70

61:                                               ; preds = %59, %21
  %62 = add i64 %16, 1
  %63 = icmp eq %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %15, null
  %64 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14, i64 0, i32 0
  %65 = load i64, i64* %17, align 8
  %66 = bitcast %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %15 to i64*
  %67 = select i1 %63, i64* %12, i64* %66
  store i64 %65, i64* %67, align 8
  %68 = load %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"** %64, align 8
  %69 = bitcast %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14 to i8*
  tail call void @_ZdlPv(i8* %69) #5
  br label %73

70:                                               ; preds = %59
  %71 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %14, i64 0, i32 0
  %72 = load %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"** %71, align 8
  br label %73

73:                                               ; preds = %70, %61
  %74 = phi %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* [ %68, %61 ], [ %72, %70 ]
  %75 = phi i64 [ %62, %61 ], [ %16, %70 ]
  %76 = phi %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* [ %15, %61 ], [ %14, %70 ]
  %77 = icmp eq %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %74, null
  br i1 %77, label %172, label %13

78:                                               ; preds = %2, %166
  %79 = phi i64 [ %168, %166 ], [ 0, %2 ]
  %80 = getelementptr inbounds %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.9"* %1, i64 0, i32 0, i64 %79, i32 1
  %81 = load %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %81, i64 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %122, label %85

85:                                               ; preds = %78, %117
  %86 = phi i64 [ %118, %117 ], [ %83, %78 ]
  %87 = phi i64 [ %119, %117 ], [ 0, %78 ]
  %88 = phi i64 [ %120, %117 ], [ 0, %78 ]
  %89 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %81, i64 0, i32 2, i64 %88, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, -1
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = and i64 %94, 3
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %85
  %98 = and i64 %90, -4294967296
  %99 = or i64 %98, %94
  %100 = add i64 %99, 1
  br label %109

101:                                              ; preds = %85
  %102 = and i64 %90, -262144
  %103 = inttoptr i64 %102 to %"class.v8::internal::BasicMemoryChunk"*
  %104 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %103, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = and i64 %105, 8
  %107 = icmp eq i64 %106, 0
  %108 = select i1 %107, i64 %90, i64 0
  br label %109

109:                                              ; preds = %101, %97
  %110 = phi i64 [ %100, %97 ], [ %108, %101 ]
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %81, i64 0, i32 2, i64 %87, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %110, i64* %114, align 8
  %115 = add i64 %87, 1
  %116 = load i64, i64* %82, align 8
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i64 [ %116, %113 ], [ %86, %109 ]
  %119 = phi i64 [ %115, %113 ], [ %87, %109 ]
  %120 = add nuw i64 %88, 1
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %85, label %122

122:                                              ; preds = %117, %78
  %123 = phi i64 [ 0, %78 ], [ %119, %117 ]
  store i64 %123, i64* %82, align 8
  %124 = getelementptr inbounds %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.9"* %1, i64 0, i32 0, i64 %79, i32 0
  %125 = load %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"** %124, align 8
  %126 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %125, i64 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %166, label %129

129:                                              ; preds = %122, %161
  %130 = phi i64 [ %162, %161 ], [ %127, %122 ]
  %131 = phi i64 [ %163, %161 ], [ 0, %122 ]
  %132 = phi i64 [ %164, %161 ], [ 0, %122 ]
  %133 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %125, i64 0, i32 2, i64 %132, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, -1
  %136 = inttoptr i64 %135 to i32*
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = zext i32 %137 to i64
  %139 = and i64 %138, 3
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %129
  %142 = and i64 %134, -4294967296
  %143 = or i64 %142, %138
  %144 = add i64 %143, 1
  br label %153

145:                                              ; preds = %129
  %146 = and i64 %134, -262144
  %147 = inttoptr i64 %146 to %"class.v8::internal::BasicMemoryChunk"*
  %148 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %147, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = and i64 %149, 8
  %151 = icmp eq i64 %150, 0
  %152 = select i1 %151, i64 %134, i64 0
  br label %153

153:                                              ; preds = %145, %141
  %154 = phi i64 [ %144, %141 ], [ %152, %145 ]
  %155 = trunc i64 %154 to i32
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"* %125, i64 0, i32 2, i64 %131, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %154, i64* %158, align 8
  %159 = add i64 %131, 1
  %160 = load i64, i64* %126, align 8
  br label %161

161:                                              ; preds = %157, %153
  %162 = phi i64 [ %160, %157 ], [ %130, %153 ]
  %163 = phi i64 [ %159, %157 ], [ %131, %153 ]
  %164 = add nuw i64 %132, 1
  %165 = icmp ult i64 %164, %162
  br i1 %165, label %129, label %166

166:                                              ; preds = %161, %122
  %167 = phi i64 [ 0, %122 ], [ %163, %161 ]
  store i64 %167, i64* %126, align 8
  %168 = add nuw nsw i64 %79, 1
  %169 = load i32, i32* %3, align 8
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %168, %170
  br i1 %171, label %78, label %6

172:                                              ; preds = %73, %6
  %173 = phi i64 [ 0, %6 ], [ %75, %73 ]
  %174 = getelementptr inbounds %"class.v8::internal::Worklist.9", %"class.v8::internal::Worklist.9"* %1, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = atomicrmw sub i64* %174, i64 %173 monotonic
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %7) #4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects15UpdateWeakCellsERNS0_8WorklistINS0_8WeakCellELi64EEE(%"class.v8::internal::WeakObjects"* nocapture, %"class.v8::internal::Worklist.11"* nocapture dereferenceable(704)) local_unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects32UpdateBytecodeFlushingCandidatesERNS0_8WorklistINS0_18SharedFunctionInfoELi64EEE(%"class.v8::internal::WeakObjects"* nocapture, %"class.v8::internal::Worklist.13"* nocapture dereferenceable(704)) local_unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11WeakObjects24UpdateFlushedJSFunctionsERNS0_8WorklistINS0_10JSFunctionELi64EEE(%"class.v8::internal::WeakObjects"* nocapture readnone, %"class.v8::internal::Worklist.15"* dereferenceable(704)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Worklist.15", %"class.v8::internal::Worklist.15"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %78, label %6

6:                                                ; preds = %166, %2
  %7 = getelementptr inbounds %"class.v8::internal::Worklist.15", %"class.v8::internal::Worklist.15"* %1, i64 0, i32 1, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %7) #4
  %8 = getelementptr inbounds %"class.v8::internal::Worklist.15", %"class.v8::internal::Worklist.15"* %1, i64 0, i32 1, i32 1
  %9 = load %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %9, null
  br i1 %10, label %172, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"** %8 to i64*
  br label %13

13:                                               ; preds = %73, %11
  %14 = phi %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* [ %9, %11 ], [ %74, %73 ]
  %15 = phi %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* [ null, %11 ], [ %76, %73 ]
  %16 = phi i64 [ 0, %11 ], [ %75, %73 ]
  %17 = bitcast %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14 to i64*
  %18 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i64 0, i64* %18, align 8
  br label %61

22:                                               ; preds = %13, %54
  %23 = phi i64 [ %55, %54 ], [ %19, %13 ]
  %24 = phi i64 [ %56, %54 ], [ 0, %13 ]
  %25 = phi i64 [ %57, %54 ], [ 0, %13 ]
  %26 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14, i64 0, i32 2, i64 %25, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = and i64 %31, 3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %22
  %35 = and i64 %27, -4294967296
  %36 = or i64 %35, %31
  %37 = add i64 %36, 1
  br label %46

38:                                               ; preds = %22
  %39 = and i64 %27, -262144
  %40 = inttoptr i64 %39 to %"class.v8::internal::BasicMemoryChunk"*
  %41 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %40, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 8
  %44 = icmp eq i64 %43, 0
  %45 = select i1 %44, i64 %27, i64 0
  br label %46

46:                                               ; preds = %38, %34
  %47 = phi i64 [ %37, %34 ], [ %45, %38 ]
  %48 = trunc i64 %47 to i32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %47, i64* %51, align 8
  %52 = add i64 %24, 1
  %53 = load i64, i64* %18, align 8
  br label %54

54:                                               ; preds = %50, %46
  %55 = phi i64 [ %53, %50 ], [ %23, %46 ]
  %56 = phi i64 [ %52, %50 ], [ %24, %46 ]
  %57 = add nuw i64 %25, 1
  %58 = icmp ult i64 %57, %55
  br i1 %58, label %22, label %59

59:                                               ; preds = %54
  store i64 %56, i64* %18, align 8
  %60 = icmp eq i64 %56, 0
  br i1 %60, label %61, label %70

61:                                               ; preds = %59, %21
  %62 = add i64 %16, 1
  %63 = icmp eq %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %15, null
  %64 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14, i64 0, i32 0
  %65 = load i64, i64* %17, align 8
  %66 = bitcast %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %15 to i64*
  %67 = select i1 %63, i64* %12, i64* %66
  store i64 %65, i64* %67, align 8
  %68 = load %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"** %64, align 8
  %69 = bitcast %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14 to i8*
  tail call void @_ZdlPv(i8* %69) #5
  br label %73

70:                                               ; preds = %59
  %71 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %14, i64 0, i32 0
  %72 = load %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"** %71, align 8
  br label %73

73:                                               ; preds = %70, %61
  %74 = phi %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* [ %68, %61 ], [ %72, %70 ]
  %75 = phi i64 [ %62, %61 ], [ %16, %70 ]
  %76 = phi %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* [ %15, %61 ], [ %14, %70 ]
  %77 = icmp eq %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %74, null
  br i1 %77, label %172, label %13

78:                                               ; preds = %2, %166
  %79 = phi i64 [ %168, %166 ], [ 0, %2 ]
  %80 = getelementptr inbounds %"class.v8::internal::Worklist.15", %"class.v8::internal::Worklist.15"* %1, i64 0, i32 0, i64 %79, i32 1
  %81 = load %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %81, i64 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %122, label %85

85:                                               ; preds = %78, %117
  %86 = phi i64 [ %118, %117 ], [ %83, %78 ]
  %87 = phi i64 [ %119, %117 ], [ 0, %78 ]
  %88 = phi i64 [ %120, %117 ], [ 0, %78 ]
  %89 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %81, i64 0, i32 2, i64 %88, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, -1
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = and i64 %94, 3
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %85
  %98 = and i64 %90, -4294967296
  %99 = or i64 %98, %94
  %100 = add i64 %99, 1
  br label %109

101:                                              ; preds = %85
  %102 = and i64 %90, -262144
  %103 = inttoptr i64 %102 to %"class.v8::internal::BasicMemoryChunk"*
  %104 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %103, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = and i64 %105, 8
  %107 = icmp eq i64 %106, 0
  %108 = select i1 %107, i64 %90, i64 0
  br label %109

109:                                              ; preds = %101, %97
  %110 = phi i64 [ %100, %97 ], [ %108, %101 ]
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %81, i64 0, i32 2, i64 %87, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %110, i64* %114, align 8
  %115 = add i64 %87, 1
  %116 = load i64, i64* %82, align 8
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i64 [ %116, %113 ], [ %86, %109 ]
  %119 = phi i64 [ %115, %113 ], [ %87, %109 ]
  %120 = add nuw i64 %88, 1
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %85, label %122

122:                                              ; preds = %117, %78
  %123 = phi i64 [ 0, %78 ], [ %119, %117 ]
  store i64 %123, i64* %82, align 8
  %124 = getelementptr inbounds %"class.v8::internal::Worklist.15", %"class.v8::internal::Worklist.15"* %1, i64 0, i32 0, i64 %79, i32 0
  %125 = load %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"** %124, align 8
  %126 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %125, i64 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %166, label %129

129:                                              ; preds = %122, %161
  %130 = phi i64 [ %162, %161 ], [ %127, %122 ]
  %131 = phi i64 [ %163, %161 ], [ 0, %122 ]
  %132 = phi i64 [ %164, %161 ], [ 0, %122 ]
  %133 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %125, i64 0, i32 2, i64 %132, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, -1
  %136 = inttoptr i64 %135 to i32*
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = zext i32 %137 to i64
  %139 = and i64 %138, 3
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %129
  %142 = and i64 %134, -4294967296
  %143 = or i64 %142, %138
  %144 = add i64 %143, 1
  br label %153

145:                                              ; preds = %129
  %146 = and i64 %134, -262144
  %147 = inttoptr i64 %146 to %"class.v8::internal::BasicMemoryChunk"*
  %148 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %147, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = and i64 %149, 8
  %151 = icmp eq i64 %150, 0
  %152 = select i1 %151, i64 %134, i64 0
  br label %153

153:                                              ; preds = %145, %141
  %154 = phi i64 [ %144, %141 ], [ %152, %145 ]
  %155 = trunc i64 %154 to i32
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"* %125, i64 0, i32 2, i64 %131, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %154, i64* %158, align 8
  %159 = add i64 %131, 1
  %160 = load i64, i64* %126, align 8
  br label %161

161:                                              ; preds = %157, %153
  %162 = phi i64 [ %160, %157 ], [ %130, %153 ]
  %163 = phi i64 [ %159, %157 ], [ %131, %153 ]
  %164 = add nuw i64 %132, 1
  %165 = icmp ult i64 %164, %162
  br i1 %165, label %129, label %166

166:                                              ; preds = %161, %122
  %167 = phi i64 [ 0, %122 ], [ %163, %161 ]
  store i64 %167, i64* %126, align 8
  %168 = add nuw nsw i64 %79, 1
  %169 = load i32, i32* %3, align 8
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %168, %170
  br i1 %171, label %78, label %6

172:                                              ; preds = %73, %6
  %173 = phi i64 [ 0, %6 ], [ %75, %73 ]
  %174 = getelementptr inbounds %"class.v8::internal::Worklist.15", %"class.v8::internal::Worklist.15"* %1, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = atomicrmw sub i64* %174, i64 %173 monotonic
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8WorklistINS0_9EphemeronELi64EE6UpdateIPFbS2_PS2_EEEvT_(%"class.v8::internal::Worklist.3"*, i1 (i64, i64, %"struct.v8::internal::Ephemeron"*)*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %59, label %6

6:                                                ; preds = %101, %2
  %7 = getelementptr inbounds %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %7) #4
  %8 = getelementptr inbounds %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3"* %0, i64 0, i32 1, i32 1
  %9 = load %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"** %8, align 8
  %10 = icmp eq %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %9, null
  br i1 %10, label %55, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"** %8 to i64*
  br label %13

13:                                               ; preds = %50, %11
  %14 = phi %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* [ %9, %11 ], [ %51, %50 ]
  %15 = phi %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* [ null, %11 ], [ %53, %50 ]
  %16 = phi i64 [ 0, %11 ], [ %52, %50 ]
  %17 = bitcast %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14 to i64*
  %18 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i64 0, i64* %18, align 8
  br label %38

22:                                               ; preds = %13, %22
  %23 = phi i64 [ %32, %22 ], [ 0, %13 ]
  %24 = phi i64 [ %33, %22 ], [ 0, %13 ]
  %25 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 0, i32 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14, i64 0, i32 2, i64 %24, i32 1, i32 0, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14, i64 0, i32 2, i64 %23
  %30 = tail call zeroext i1 %1(i64 %26, i64 %28, %"struct.v8::internal::Ephemeron"* %29) #4
  %31 = zext i1 %30 to i64
  %32 = add i64 %23, %31
  %33 = add nuw i64 %24, 1
  %34 = load i64, i64* %18, align 8
  %35 = icmp ult i64 %33, %34
  br i1 %35, label %22, label %36

36:                                               ; preds = %22
  store i64 %32, i64* %18, align 8
  %37 = icmp eq i64 %32, 0
  br i1 %37, label %38, label %47

38:                                               ; preds = %36, %21
  %39 = add i64 %16, 1
  %40 = icmp eq %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %15, null
  %41 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14, i64 0, i32 0
  %42 = load i64, i64* %17, align 8
  %43 = bitcast %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %15 to i64*
  %44 = select i1 %40, i64* %12, i64* %43
  store i64 %42, i64* %44, align 8
  %45 = load %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"** %41, align 8
  %46 = bitcast %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14 to i8*
  tail call void @_ZdlPv(i8* %46) #5
  br label %50

47:                                               ; preds = %36
  %48 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %14, i64 0, i32 0
  %49 = load %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"** %48, align 8
  br label %50

50:                                               ; preds = %47, %38
  %51 = phi %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* [ %45, %38 ], [ %49, %47 ]
  %52 = phi i64 [ %39, %38 ], [ %16, %47 ]
  %53 = phi %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* [ %15, %38 ], [ %14, %47 ]
  %54 = icmp eq %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %51, null
  br i1 %54, label %55, label %13

55:                                               ; preds = %50, %6
  %56 = phi i64 [ 0, %6 ], [ %52, %50 ]
  %57 = getelementptr inbounds %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3"* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw sub i64* %57, i64 %56 monotonic
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %7) #4
  ret void

59:                                               ; preds = %2, %101
  %60 = phi i64 [ %103, %101 ], [ 0, %2 ]
  %61 = getelementptr inbounds %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3"* %0, i64 0, i32 0, i64 %60, i32 1
  %62 = load %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %62, i64 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %80, label %66

66:                                               ; preds = %59, %66
  %67 = phi i64 [ %76, %66 ], [ 0, %59 ]
  %68 = phi i64 [ %77, %66 ], [ 0, %59 ]
  %69 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %62, i64 0, i32 2, i64 %68, i32 0, i32 0, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %62, i64 0, i32 2, i64 %68, i32 1, i32 0, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %62, i64 0, i32 2, i64 %67
  %74 = tail call zeroext i1 %1(i64 %70, i64 %72, %"struct.v8::internal::Ephemeron"* %73) #4
  %75 = zext i1 %74 to i64
  %76 = add i64 %67, %75
  %77 = add nuw i64 %68, 1
  %78 = load i64, i64* %63, align 8
  %79 = icmp ult i64 %77, %78
  br i1 %79, label %66, label %80

80:                                               ; preds = %66, %59
  %81 = phi i64 [ 0, %59 ], [ %76, %66 ]
  store i64 %81, i64* %63, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Worklist.3", %"class.v8::internal::Worklist.3"* %0, i64 0, i32 0, i64 %60, i32 0
  %83 = load %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"** %82, align 8
  %84 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %83, i64 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %101, label %87

87:                                               ; preds = %80, %87
  %88 = phi i64 [ %97, %87 ], [ 0, %80 ]
  %89 = phi i64 [ %98, %87 ], [ 0, %80 ]
  %90 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %83, i64 0, i32 2, i64 %89, i32 0, i32 0, i32 0, i32 0
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %83, i64 0, i32 2, i64 %89, i32 1, i32 0, i32 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"* %83, i64 0, i32 2, i64 %88
  %95 = tail call zeroext i1 %1(i64 %91, i64 %93, %"struct.v8::internal::Ephemeron"* %94) #4
  %96 = zext i1 %95 to i64
  %97 = add i64 %88, %96
  %98 = add nuw i64 %89, 1
  %99 = load i64, i64* %84, align 8
  %100 = icmp ult i64 %98, %99
  br i1 %100, label %87, label %101

101:                                              ; preds = %87, %80
  %102 = phi i64 [ 0, %80 ], [ %97, %87 ]
  store i64 %102, i64* %84, align 8
  %103 = add nuw nsw i64 %60, 1
  %104 = load i32, i32* %3, align 8
  %105 = sext i32 %104 to i64
  %106 = icmp slt i64 %103, %105
  br i1 %106, label %59, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2v88internal12_GLOBAL__N_116EphemeronUpdaterENS0_9EphemeronEPS2_(i64, i64, %"struct.v8::internal::Ephemeron"* nocapture) #0 {
  %4 = add i64 %0, -1
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = zext i32 %6 to i64
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = and i64 %0, -4294967296
  %12 = or i64 %11, %7
  %13 = add i64 %12, 1
  br label %22

14:                                               ; preds = %3
  %15 = and i64 %0, -262144
  %16 = inttoptr i64 %15 to %"class.v8::internal::BasicMemoryChunk"*
  %17 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %16, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 8
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %20, i64 %0, i64 0
  br label %22

22:                                               ; preds = %14, %10
  %23 = phi i64 [ %13, %10 ], [ %21, %14 ]
  %24 = add i64 %1, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = zext i32 %26 to i64
  %28 = and i64 %27, 3
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %22
  %31 = and i64 %1, -4294967296
  %32 = or i64 %31, %27
  %33 = add i64 %32, 1
  br label %42

34:                                               ; preds = %22
  %35 = and i64 %1, -262144
  %36 = inttoptr i64 %35 to %"class.v8::internal::BasicMemoryChunk"*
  %37 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %36, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 8
  %40 = icmp eq i64 %39, 0
  %41 = select i1 %40, i64 %1, i64 0
  br label %42

42:                                               ; preds = %34, %30
  %43 = phi i64 [ %33, %30 ], [ %41, %34 ]
  %44 = trunc i64 %23 to i32
  %45 = icmp eq i32 %44, 0
  %46 = trunc i64 %43 to i32
  %47 = icmp eq i32 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %"struct.v8::internal::Ephemeron", %"struct.v8::internal::Ephemeron"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %23, i64* %50, align 8
  %51 = getelementptr inbounds %"struct.v8::internal::Ephemeron", %"struct.v8::internal::Ephemeron"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  store i64 %43, i64* %51, align 8
  br label %52

52:                                               ; preds = %42, %49
  %53 = phi i1 [ true, %49 ], [ false, %42 ]
  ret i1 %53
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

declare void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #3

declare void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
