; ModuleID = '../../components/omnibox/browser/tailored_word_break_iterator.cc'
source_filename = "../../components/omnibox/browser/tailored_word_break_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.TailoredWordBreakIterator = type { %"class.base::i18n::BreakIterator", i64, i64, %"class.base::BasicStringPiece" }
%"class.base::i18n::BreakIterator" = type { i8*, %"class.base::BasicStringPiece", %"class.std::__1::basic_string", i32, i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.base::BasicStringPiece" = type { i16*, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }

@_ZN25TailoredWordBreakIteratorC1ERKN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS0_4i18n13BreakIterator9BreakTypeE = hidden unnamed_addr alias void (%class.TailoredWordBreakIterator*, %"class.base::BasicStringPiece"*, i32), void (%class.TailoredWordBreakIterator*, %"class.base::BasicStringPiece"*, i32)* @_ZN25TailoredWordBreakIteratorC2ERKN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS0_4i18n13BreakIterator9BreakTypeE
@_ZN25TailoredWordBreakIteratorD1Ev = hidden unnamed_addr alias void (%class.TailoredWordBreakIterator*), void (%class.TailoredWordBreakIterator*)* @_ZN25TailoredWordBreakIteratorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN25TailoredWordBreakIteratorC2ERKN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS0_4i18n13BreakIterator9BreakTypeE(%class.TailoredWordBreakIterator*, %"class.base::BasicStringPiece"* dereferenceable(16), i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0
  tail call void @_ZN4base4i18n13BreakIteratorC2ERKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS1_9BreakTypeE(%"class.base::i18n::BreakIterator"* %4, %"class.base::BasicStringPiece"* dereferenceable(16) %1, i32 %2) #9
  %5 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  ret void
}

declare void @_ZN4base4i18n13BreakIteratorC2ERKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEENS1_9BreakTypeE(%"class.base::i18n::BreakIterator"*, %"class.base::BasicStringPiece"* dereferenceable(16), i32) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base4i18n13BreakIteratorD2Ev(%"class.base::i18n::BreakIterator"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN25TailoredWordBreakIteratorD2Ev(%class.TailoredWordBreakIterator*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0
  tail call void @_ZN4base4i18n13BreakIteratorD2Ev(%"class.base::i18n::BreakIterator"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN25TailoredWordBreakIterator7AdvanceEv(%class.TailoredWordBreakIterator*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::BasicStringPiece", align 8
  %3 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, %4
  br i1 %7, label %43, label %8

8:                                                ; preds = %1
  %9 = icmp ugt i64 %6, %4
  br i1 %9, label %10, label %28

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = sub i64 %6, %4
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds i16, i16* %12, i64 %4
  br label %17

17:                                               ; preds = %22, %15
  %18 = phi i64 [ %23, %22 ], [ %13, %15 ]
  %19 = phi i16* [ %24, %22 ], [ %16, %15 ]
  %20 = load i16, i16* %19, align 2
  %21 = icmp eq i16 %20, 95
  br i1 %21, label %26, label %22

22:                                               ; preds = %17
  %23 = add i64 %18, -1
  %24 = getelementptr inbounds i16, i16* %19, i64 1
  %25 = icmp eq i64 %23, 0
  br i1 %25, label %28, label %17

26:                                               ; preds = %17
  %27 = icmp eq i16* %19, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %22, %26, %10, %8
  %29 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  store i64 %4, i64* %29, align 8
  br label %41

30:                                               ; preds = %26
  %31 = ptrtoint i16* %19 to i64
  %32 = ptrtoint i16* %12 to i64
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 1
  %35 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  store i64 %4, i64* %35, align 8
  %36 = icmp eq i64 %33, -2
  br i1 %36, label %41, label %37

37:                                               ; preds = %30
  %38 = icmp eq i64 %4, %34
  %39 = add i64 %4, 1
  %40 = select i1 %38, i64 %39, i64 %34
  br label %41

41:                                               ; preds = %28, %30, %37
  %42 = phi i64 [ %40, %37 ], [ %6, %28 ], [ %6, %30 ]
  store i64 %42, i64* %3, align 8
  br label %121

43:                                               ; preds = %1
  %44 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0
  %45 = tail call zeroext i1 @_ZN4base4i18n13BreakIterator7AdvanceEv(%"class.base::i18n::BreakIterator"* %44) #9
  br i1 %45, label %46, label %121

46:                                               ; preds = %43
  %47 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  %48 = bitcast i64* %47 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false)
  %49 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3
  %50 = bitcast %"class.base::BasicStringPiece"* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 16, i1 false)
  %51 = load i64, i64* %5, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %62, label %53

53:                                               ; preds = %46
  %54 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54) #9
  %55 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 0
  %56 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 1
  %57 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"* %49, i64 0, i64 0) #9
  %58 = extractvalue { i16*, i64 } %57, 0
  %59 = extractvalue { i16*, i64 } %57, 1
  store i16* %58, i16** %55, align 8
  store i64 %59, i64* %56, align 8
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %53
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54) #9
  br label %62

62:                                               ; preds = %61, %46
  %63 = tail call zeroext i1 @_ZNK4base4i18n13BreakIterator6IsWordEv(%"class.base::i18n::BreakIterator"* %44) #9
  br i1 %63, label %68, label %121

64:                                               ; preds = %53
  %65 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* nonnull %2, i64 0) #9
  %66 = load i16, i16* %65, align 2
  %67 = icmp eq i16 %66, 95
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54) #9
  br i1 %67, label %121, label %68

68:                                               ; preds = %64, %62
  %69 = call { i16*, i64 } @_ZNK4base4i18n13BreakIterator14GetStringPieceEv(%"class.base::i18n::BreakIterator"* %44) #9
  %70 = extractvalue { i16*, i64 } %69, 0
  %71 = extractvalue { i16*, i64 } %69, 1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %121, label %73

73:                                               ; preds = %68, %78
  %74 = phi i64 [ %79, %78 ], [ %71, %68 ]
  %75 = phi i16* [ %80, %78 ], [ %70, %68 ]
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 95
  br i1 %77, label %82, label %78

78:                                               ; preds = %73
  %79 = add i64 %74, -1
  %80 = getelementptr inbounds i16, i16* %75, i64 1
  %81 = icmp eq i64 %79, 0
  br i1 %81, label %121, label %73

82:                                               ; preds = %73
  %83 = icmp eq i16* %75, null
  br i1 %83, label %121, label %84

84:                                               ; preds = %82
  %85 = ptrtoint i16* %75 to i64
  %86 = ptrtoint i16* %70 to i64
  %87 = sub i64 %85, %86
  %88 = icmp eq i64 %87, -2
  br i1 %88, label %121, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 0
  store i16* %70, i16** %90, align 8
  store i64 %71, i64* %5, align 8
  %91 = load i64, i64* %3, align 8
  %92 = icmp ugt i64 %71, %91
  br i1 %92, label %93, label %109

93:                                               ; preds = %89
  %94 = sub i64 %71, %91
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %109, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds i16, i16* %70, i64 %91
  br label %98

98:                                               ; preds = %103, %96
  %99 = phi i64 [ %104, %103 ], [ %94, %96 ]
  %100 = phi i16* [ %105, %103 ], [ %97, %96 ]
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 95
  br i1 %102, label %107, label %103

103:                                              ; preds = %98
  %104 = add i64 %99, -1
  %105 = getelementptr inbounds i16, i16* %100, i64 1
  %106 = icmp eq i64 %104, 0
  br i1 %106, label %109, label %98

107:                                              ; preds = %98
  %108 = icmp eq i16* %100, null
  br i1 %108, label %109, label %110

109:                                              ; preds = %103, %107, %93, %89
  store i64 %91, i64* %47, align 8
  br label %119

110:                                              ; preds = %107
  %111 = ptrtoint i16* %100 to i64
  %112 = sub i64 %111, %86
  %113 = ashr exact i64 %112, 1
  store i64 %91, i64* %47, align 8
  %114 = icmp eq i64 %112, -2
  br i1 %114, label %119, label %115

115:                                              ; preds = %110
  %116 = icmp eq i64 %91, %113
  %117 = add i64 %91, 1
  %118 = select i1 %116, i64 %117, i64 %113
  br label %119

119:                                              ; preds = %109, %110, %115
  %120 = phi i64 [ %118, %115 ], [ %71, %109 ], [ %71, %110 ]
  store i64 %120, i64* %3, align 8
  br label %121

121:                                              ; preds = %78, %68, %64, %82, %119, %84, %62, %43, %41
  %122 = phi i1 [ true, %41 ], [ false, %43 ], [ true, %64 ], [ true, %62 ], [ true, %84 ], [ true, %119 ], [ true, %68 ], [ true, %82 ], [ true, %78 ]
  ret i1 %122
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK25TailoredWordBreakIterator17HasUnderscoreWordEv(%class.TailoredWordBreakIterator* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ne i64 %3, %5
  ret i1 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN25TailoredWordBreakIterator23AdvanceInUnderscoreWordEv(%class.TailoredWordBreakIterator* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %3
  br i1 %6, label %7, label %25

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = sub i64 %5, %3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds i16, i16* %9, i64 %3
  br label %14

14:                                               ; preds = %19, %12
  %15 = phi i64 [ %20, %19 ], [ %10, %12 ]
  %16 = phi i16* [ %21, %19 ], [ %13, %12 ]
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, 95
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = add i64 %15, -1
  %21 = getelementptr inbounds i16, i16* %16, i64 1
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %25, label %14

23:                                               ; preds = %14
  %24 = icmp eq i16* %16, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %19, %1, %23, %7
  %26 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  store i64 %3, i64* %26, align 8
  br label %38

27:                                               ; preds = %23
  %28 = ptrtoint i16* %16 to i64
  %29 = ptrtoint i16* %9 to i64
  %30 = sub i64 %28, %29
  %31 = ashr exact i64 %30, 1
  %32 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  store i64 %3, i64* %32, align 8
  %33 = icmp eq i64 %30, -2
  br i1 %33, label %38, label %34

34:                                               ; preds = %27
  %35 = icmp eq i64 %3, %31
  %36 = add i64 %3, 1
  %37 = select i1 %35, i64 %36, i64 %31
  br label %38

38:                                               ; preds = %27, %25, %34
  %39 = phi i64 [ %37, %34 ], [ %5, %25 ], [ %5, %27 ]
  store i64 %39, i64* %2, align 8
  ret void
}

declare zeroext i1 @_ZN4base4i18n13BreakIterator7AdvanceEv(%"class.base::i18n::BreakIterator"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK25TailoredWordBreakIterator6IsWordEv(%class.TailoredWordBreakIterator*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::BasicStringPiece", align 8
  %3 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %33, label %8

8:                                                ; preds = %1
  %9 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 1
  %12 = icmp eq i64 %6, 0
  %13 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  br i1 %12, label %20, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3
  %16 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %4, %17
  %19 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"* %15, i64 %17, i64 %18) #9
  br label %23

20:                                               ; preds = %8
  %21 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0
  %22 = tail call { i16*, i64 } @_ZNK4base4i18n13BreakIterator14GetStringPieceEv(%"class.base::i18n::BreakIterator"* %21) #9
  br label %23

23:                                               ; preds = %14, %20
  %24 = phi { i16*, i64 } [ %19, %14 ], [ %22, %20 ]
  %25 = extractvalue { i16*, i64 } %24, 0
  %26 = extractvalue { i16*, i64 } %24, 1
  store i16* %25, i16** %10, align 8
  store i64 %26, i64* %11, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #9
  br label %33

29:                                               ; preds = %23
  %30 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* nonnull %2, i64 0) #9
  %31 = load i16, i16* %30, align 2
  %32 = icmp ne i16 %31, 95
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #9
  br label %36

33:                                               ; preds = %1, %28
  %34 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0
  %35 = tail call zeroext i1 @_ZNK4base4i18n13BreakIterator6IsWordEv(%"class.base::i18n::BreakIterator"* %34) #9
  br label %36

36:                                               ; preds = %29, %33
  %37 = phi i1 [ %35, %33 ], [ %32, %29 ]
  ret i1 %37
}

declare { i16*, i64 } @_ZNK4base4i18n13BreakIterator14GetStringPieceEv(%"class.base::i18n::BreakIterator"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i16*, i64 } @_ZNK25TailoredWordBreakIterator14GetStringPieceEv(%class.TailoredWordBreakIterator*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"* %6, i64 %8, i64 %11)
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0
  %15 = tail call { i16*, i64 } @_ZNK4base4i18n13BreakIterator14GetStringPieceEv(%"class.base::i18n::BreakIterator"* %14) #9
  br label %16

16:                                               ; preds = %13, %5
  %17 = phi { i16*, i64 } [ %15, %13 ], [ %12, %5 ]
  ret { i16*, i64 } %17
}

declare zeroext i1 @_ZNK4base4i18n13BreakIterator6IsWordEv(%"class.base::i18n::BreakIterator"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
declare { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK25TailoredWordBreakIterator9GetStringEv(%"class.std::__1::basic_string"* noalias sret, %class.TailoredWordBreakIterator*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %1, i64 0, i32 3, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %1, i64 0, i32 3
  %8 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %1, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %9
  %13 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"* %7, i64 %9, i64 %12) #9
  br label %17

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %1, i64 0, i32 0
  %16 = tail call { i16*, i64 } @_ZNK4base4i18n13BreakIterator14GetStringPieceEv(%"class.base::i18n::BreakIterator"* %15) #9
  br label %17

17:                                               ; preds = %6, %14
  %18 = phi { i16*, i64 } [ %13, %6 ], [ %16, %14 ]
  %19 = extractvalue { i16*, i64 } %18, 0
  %20 = extractvalue { i16*, i64 } %18, 1
  %21 = icmp ugt i64 %20, 9223372036854775791
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %23) #10
  unreachable

24:                                               ; preds = %17
  %25 = icmp ult i64 %20, 11
  br i1 %25, label %39, label %26

26:                                               ; preds = %24
  %27 = add nuw nsw i64 %20, 8
  %28 = and i64 %27, -8
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  tail call void @abort() #10
  unreachable

31:                                               ; preds = %26
  %32 = shl i64 %28, 1
  %33 = tail call i8* @_Znwm(i64 %32) #11
  %34 = bitcast i8* %33 to i16*
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %33, i8** %35, align 8, !alias.scope !2
  %36 = or i64 %28, -9223372036854775808
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %36, i64* %37, align 8, !alias.scope !2
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %38, align 8, !alias.scope !2
  br label %45

39:                                               ; preds = %24
  %40 = trunc i64 %20 to i8
  %41 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %41, i64 0, i32 1, i32 1
  store i8 %40, i8* %42, align 1, !alias.scope !2
  %43 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %44 = icmp eq i64 %20, 0
  br i1 %44, label %189, label %45

45:                                               ; preds = %39, %31
  %46 = phi i16* [ %34, %31 ], [ %43, %39 ]
  %47 = icmp ult i64 %20, 16
  br i1 %47, label %136, label %48

48:                                               ; preds = %45
  %49 = getelementptr i16, i16* %46, i64 %20
  %50 = getelementptr i16, i16* %19, i64 %20
  %51 = icmp ult i16* %46, %50
  %52 = icmp ult i16* %19, %49
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %48
  %55 = and i64 %20, -16
  %56 = sub i64 %20, %55
  %57 = getelementptr i16, i16* %19, i64 %55
  %58 = getelementptr i16, i16* %46, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %19, i64 %67
  %70 = getelementptr i16, i16* %46, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !5
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !5
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !8, !noalias !5
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !8, !noalias !5
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %19, i64 %79
  %81 = getelementptr i16, i16* %46, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !5
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !5
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !8, !noalias !5
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !8, !noalias !5
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %19, i64 %90
  %92 = getelementptr i16, i16* %46, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !5
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !5
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !8, !noalias !5
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !8, !noalias !5
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %19, i64 %101
  %103 = getelementptr i16, i16* %46, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !5
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !5
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !8, !noalias !5
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !8, !noalias !5
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !10

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %19, i64 %119
  %122 = getelementptr i16, i16* %46, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !5
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !5
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !8, !noalias !5
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !8, !noalias !5
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !12

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %20, %55
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %48, %45
  %137 = phi i64 [ %20, %48 ], [ %20, %45 ], [ %56, %134 ]
  %138 = phi i16* [ %19, %48 ], [ %19, %45 ], [ %57, %134 ]
  %139 = phi i16* [ %46, %48 ], [ %46, %45 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !14

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !15

189:                                              ; preds = %154, %159, %134, %39
  %190 = phi i16* [ %43, %39 ], [ %46, %134 ], [ %46, %159 ], [ %46, %154 ]
  %191 = getelementptr inbounds i16, i16* %190, i64 %20
  store i16 0, i16* %191, align 2
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK25TailoredWordBreakIterator4prevEv(%class.TailoredWordBreakIterator* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %3
  ret i64 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK25TailoredWordBreakIterator3posEv(%class.TailoredWordBreakIterator* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.TailoredWordBreakIterator, %class.TailoredWordBreakIterator* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %3
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 align 2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !11}
