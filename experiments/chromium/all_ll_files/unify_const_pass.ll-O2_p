; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/opt/unify_const_pass.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/opt/unify_const_pass.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.spvtools::opt::UnifyConstantPass" = type { %"class.spvtools::opt::Pass.base", [7 x i8] }
%"class.spvtools::opt::Pass.base" = type <{ i32 (...)**, %"class.std::__1::function", %"class.spvtools::opt::IRContext"*, i8 }>
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, i32, i8*, %struct.spv_position_t*, i8*)* }
%struct.spv_position_t = type { i64, i64, i64 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.spvtools::opt::IRContext" = type <{ %struct.spv_context_t*, %"class.spvtools::AssemblyGrammar", i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::function", %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.122", %"class.std::__1::unique_ptr.152", %"class.std::__1::unordered_map.173", %"class.std::__1::unordered_map.201", i32, [4 x i8], %"class.std::__1::unordered_map.225", %"class.std::__1::unordered_map.249", %"class.std::__1::unique_ptr.273", %"class.std::__1::map", %"class.std::__1::map.364", %"class.std::__1::unordered_map.373", %"class.std::__1::unique_ptr.400", %"class.std::__1::unique_ptr.480", %"class.std::__1::unique_ptr.593", %"class.std::__1::unique_ptr.623", %"class.std::__1::unique_ptr.638", %"class.std::__1::unique_ptr.694", %"class.std::__1::unique_ptr.724", %"class.std::__1::unique_ptr.754", %"class.std::__1::unique_ptr.873", i32, i8, i8, [2 x i8] }>
%struct.spv_context_t = type { i32, %struct.spv_opcode_table_t*, %struct.spv_operand_table_t*, %struct.spv_ext_inst_table_t*, %"class.std::__1::function" }
%struct.spv_opcode_table_t = type { i32, %struct.spv_opcode_desc_t* }
%struct.spv_opcode_desc_t = type { i8*, i32, i32, i32*, i16, [16 x i32], i8, i8, i32, i32*, i32, i32 }
%struct.spv_operand_table_t = type { i32, %struct.spv_operand_desc_group_t* }
%struct.spv_operand_desc_group_t = type { i32, i32, %struct.spv_operand_desc_t* }
%struct.spv_operand_desc_t = type { i8*, i32, i32, i32*, i32, i32*, [16 x i32], i32, i32 }
%struct.spv_ext_inst_table_t = type { i32, %struct.spv_ext_inst_group_t* }
%struct.spv_ext_inst_group_t = type { i32, i32, %struct.spv_ext_inst_desc_t* }
%struct.spv_ext_inst_desc_t = type { i8*, i32, i32, i32*, [16 x i32] }
%"class.spvtools::AssemblyGrammar" = type { i32, %struct.spv_operand_table_t*, %struct.spv_opcode_table_t*, %struct.spv_ext_inst_table_t* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.spvtools::opt::Module"* }
%"class.spvtools::opt::Module" = type <{ %"struct.spvtools::opt::ModuleHeader", [4 x i8], %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.std::__1::unique_ptr.21", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.spvtools::opt::InstructionList", %"class.std::__1::vector.26", %"class.std::__1::vector.14", i8, [7 x i8] }>
%"struct.spvtools::opt::ModuleHeader" = type { i32, i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.spvtools::opt::Instruction"* }
%"class.spvtools::opt::Instruction" = type { %"class.spvtools::utils::IntrusiveNodeBase.base", %"class.spvtools::opt::IRContext"*, i32, i8, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector.14", %"class.spvtools::opt::DebugScope" }
%"class.spvtools::utils::IntrusiveNodeBase.base" = type <{ i32 (...)**, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"*, %"class.std::__1::__compressed_pair.9" }
%"struct.spvtools::opt::Operand" = type { i32, %"class.spvtools::utils::SmallVector" }
%"class.spvtools::utils::SmallVector" = type { i32 (...)**, i64, i32*, [2 x %"struct.std::__1::aligned_storage<4, 4>::type"], %"class.std::__1::unique_ptr.0" }
%"struct.std::__1::aligned_storage<4, 4>::type" = type { [4 x i8] }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::vector.3"* }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { i32*, i32*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i32* }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.spvtools::opt::Operand"* }
%"class.spvtools::opt::DebugScope" = type { i32, i32 }
%"class.spvtools::opt::InstructionList" = type { %"class.spvtools::utils::IntrusiveList" }
%"class.spvtools::utils::IntrusiveList" = type { i32 (...)**, %"class.spvtools::opt::Instruction" }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.std::__1::unique_ptr.28"*, %"class.std::__1::unique_ptr.28"*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.spvtools::opt::Function"* }
%"class.spvtools::opt::Function" = type { %"class.std::__1::unique_ptr.21", %"class.std::__1::vector.31", %"class.spvtools::opt::InstructionList", %"class.std::__1::vector.38", %"class.std::__1::unique_ptr.21", %"class.std::__1::vector.31" }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"class.std::__1::unique_ptr.40"*, %"class.std::__1::unique_ptr.40"*, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.spvtools::opt::BasicBlock"* }
%"class.spvtools::opt::BasicBlock" = type { %"class.spvtools::opt::Function"*, %"class.std::__1::unique_ptr.21", %"class.spvtools::opt::InstructionList" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.std::__1::unique_ptr.40"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"class.std::__1::unique_ptr.21"*, %"class.std::__1::unique_ptr.21"*, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.std::__1::unique_ptr.21"* }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.std::__1::unique_ptr.28"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.spvtools::opt::analysis::DefUseManager"* }
%"class.spvtools::opt::analysis::DefUseManager" = type { %"class.std::__1::unordered_map", %"class.std::__1::set", %"class.std::__1::unordered_map.91" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.65", %"class.std::__1::__compressed_pair.74", %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.81", [4 x i8] }>
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67", %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { i64 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { float }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.84", %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::unordered_map.91" = type { %"class.std::__1::__hash_table.92" }
%"class.std::__1::__hash_table.92" = type <{ %"class.std::__1::unique_ptr.93", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.113", [4 x i8] }>
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95", %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::__hash_node_base.96"** }
%"struct.std::__1::__hash_node_base.96" = type { %"struct.std::__1::__hash_node_base.96"* }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.std::__1::__bucket_list_deallocator.98" }
%"class.std::__1::__bucket_list_deallocator.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.std::__1::__hash_node_base.96" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.spvtools::opt::analysis::DecorationManager"* }
%"class.spvtools::opt::analysis::DecorationManager" = type { %"class.std::__1::unordered_map.125", %"class.spvtools::opt::Module"* }
%"class.std::__1::unordered_map.125" = type { %"class.std::__1::__hash_table.126" }
%"class.std::__1::__hash_table.126" = type <{ %"class.std::__1::unique_ptr.127", %"class.std::__1::__compressed_pair.137", %"class.std::__1::__compressed_pair.142", %"class.std::__1::__compressed_pair.145", [4 x i8] }>
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129", %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"struct.std::__1::__hash_node_base.130"** }
%"struct.std::__1::__hash_node_base.130" = type { %"struct.std::__1::__hash_node_base.130"* }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.std::__1::__bucket_list_deallocator.132" }
%"class.std::__1::__bucket_list_deallocator.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.std::__1::__hash_node_base.130" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.spvtools::opt::FeatureManager"* }
%"class.spvtools::opt::FeatureManager" = type { %"class.spvtools::AssemblyGrammar"*, %"class.spvtools::EnumSet", %"class.spvtools::EnumSet.169", i32, i32 }
%"class.spvtools::EnumSet" = type { i64, %"class.std::__1::unique_ptr.155" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.std::__1::set.158"* }
%"class.std::__1::set.158" = type { %"class.std::__1::__tree.159" }
%"class.std::__1::__tree.159" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.160", %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.spvtools::EnumSet.169" = type { i64, %"class.std::__1::unique_ptr.155" }
%"class.std::__1::unordered_map.173" = type { %"class.std::__1::__hash_table.174" }
%"class.std::__1::__hash_table.174" = type <{ %"class.std::__1::unique_ptr.175", %"class.std::__1::__compressed_pair.185", %"class.std::__1::__compressed_pair.190", %"class.std::__1::__compressed_pair.195", [4 x i8] }>
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177", %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"struct.std::__1::__hash_node_base.178"** }
%"struct.std::__1::__hash_node_base.178" = type { %"struct.std::__1::__hash_node_base.178"* }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.std::__1::__bucket_list_deallocator.180" }
%"class.std::__1::__bucket_list_deallocator.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.std::__1::__hash_node_base.178" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_map.201" = type { %"class.std::__1::__hash_table.202" }
%"class.std::__1::__hash_table.202" = type <{ %"class.std::__1::unique_ptr.203", %"class.std::__1::__compressed_pair.213", %"class.std::__1::__compressed_pair.218", %"class.std::__1::__compressed_pair.221", [4 x i8] }>
%"class.std::__1::unique_ptr.203" = type { %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205", %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.std::__1::__hash_node_base.206"** }
%"struct.std::__1::__hash_node_base.206" = type { %"struct.std::__1::__hash_node_base.206"* }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.std::__1::__bucket_list_deallocator.208" }
%"class.std::__1::__bucket_list_deallocator.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.std::__1::__hash_node_base.206" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_map.225" = type { %"class.std::__1::__hash_table.226" }
%"class.std::__1::__hash_table.226" = type <{ %"class.std::__1::unique_ptr.227", %"class.std::__1::__compressed_pair.237", %"class.std::__1::__compressed_pair.242", %"class.std::__1::__compressed_pair.245", [4 x i8] }>
%"class.std::__1::unique_ptr.227" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229", %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"struct.std::__1::__hash_node_base.230"** }
%"struct.std::__1::__hash_node_base.230" = type { %"struct.std::__1::__hash_node_base.230"* }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.std::__1::__bucket_list_deallocator.232" }
%"class.std::__1::__bucket_list_deallocator.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"struct.std::__1::__hash_node_base.230" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_map.249" = type { %"class.std::__1::__hash_table.250" }
%"class.std::__1::__hash_table.250" = type <{ %"class.std::__1::unique_ptr.251", %"class.std::__1::__compressed_pair.261", %"class.std::__1::__compressed_pair.266", %"class.std::__1::__compressed_pair.269", [4 x i8] }>
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253", %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"struct.std::__1::__hash_node_base.254"** }
%"struct.std::__1::__hash_node_base.254" = type { %"struct.std::__1::__hash_node_base.254"* }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.std::__1::__bucket_list_deallocator.256" }
%"class.std::__1::__bucket_list_deallocator.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"struct.std::__1::__hash_node_base.254" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.273" = type { %"class.std::__1::__compressed_pair.274" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %"class.spvtools::opt::CFG"* }
%"class.spvtools::opt::CFG" = type { %"class.spvtools::opt::Module"*, %"class.std::__1::unordered_map.276", %"class.spvtools::opt::BasicBlock", %"class.spvtools::opt::BasicBlock", %"class.std::__1::unordered_map.304", %"class.std::__1::unordered_map.328" }
%"class.std::__1::unordered_map.276" = type { %"class.std::__1::__hash_table.277" }
%"class.std::__1::__hash_table.277" = type <{ %"class.std::__1::unique_ptr.278", %"class.std::__1::__compressed_pair.288", %"class.std::__1::__compressed_pair.293", %"class.std::__1::__compressed_pair.298", [4 x i8] }>
%"class.std::__1::unique_ptr.278" = type { %"class.std::__1::__compressed_pair.279" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280", %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"struct.std::__1::__hash_node_base.281"** }
%"struct.std::__1::__hash_node_base.281" = type { %"struct.std::__1::__hash_node_base.281"* }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.std::__1::__bucket_list_deallocator.283" }
%"class.std::__1::__bucket_list_deallocator.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"struct.std::__1::__hash_node_base.281" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_map.304" = type { %"class.std::__1::__hash_table.305" }
%"class.std::__1::__hash_table.305" = type <{ %"class.std::__1::unique_ptr.306", %"class.std::__1::__compressed_pair.316", %"class.std::__1::__compressed_pair.321", %"class.std::__1::__compressed_pair.324", [4 x i8] }>
%"class.std::__1::unique_ptr.306" = type { %"class.std::__1::__compressed_pair.307" }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308", %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.308" = type { %"struct.std::__1::__hash_node_base.309"** }
%"struct.std::__1::__hash_node_base.309" = type { %"struct.std::__1::__hash_node_base.309"* }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.std::__1::__bucket_list_deallocator.311" }
%"class.std::__1::__bucket_list_deallocator.311" = type { %"class.std::__1::__compressed_pair.312" }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"struct.std::__1::__hash_node_base.309" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.324" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_map.328" = type { %"class.std::__1::__hash_table.329" }
%"class.std::__1::__hash_table.329" = type <{ %"class.std::__1::unique_ptr.330", %"class.std::__1::__compressed_pair.340", %"class.std::__1::__compressed_pair.345", %"class.std::__1::__compressed_pair.348", [4 x i8] }>
%"class.std::__1::unique_ptr.330" = type { %"class.std::__1::__compressed_pair.331" }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332", %"struct.std::__1::__compressed_pair_elem.334" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"struct.std::__1::__hash_node_base.333"** }
%"struct.std::__1::__hash_node_base.333" = type { %"struct.std::__1::__hash_node_base.333"* }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"class.std::__1::__bucket_list_deallocator.335" }
%"class.std::__1::__bucket_list_deallocator.335" = type { %"class.std::__1::__compressed_pair.336" }
%"class.std::__1::__compressed_pair.336" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"struct.std::__1::__hash_node_base.333" }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.355" }
%"class.std::__1::__tree.355" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.356", %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::map.364" = type { %"class.std::__1::__tree.365" }
%"class.std::__1::__tree.365" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.366", %"class.std::__1::__compressed_pair.370" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.370" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::unordered_map.373" = type { %"class.std::__1::__hash_table.374" }
%"class.std::__1::__hash_table.374" = type <{ %"class.std::__1::unique_ptr.375", %"class.std::__1::__compressed_pair.385", %"class.std::__1::__compressed_pair.390", %"class.std::__1::__compressed_pair.395", [4 x i8] }>
%"class.std::__1::unique_ptr.375" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377", %"struct.std::__1::__compressed_pair_elem.379" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::__hash_node_base.378"** }
%"struct.std::__1::__hash_node_base.378" = type { %"struct.std::__1::__hash_node_base.378"* }
%"struct.std::__1::__compressed_pair_elem.379" = type { %"class.std::__1::__bucket_list_deallocator.380" }
%"class.std::__1::__bucket_list_deallocator.380" = type { %"class.std::__1::__compressed_pair.381" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"struct.std::__1::__hash_node_base.378" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.400" = type { %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"class.spvtools::opt::analysis::ConstantManager"* }
%"class.spvtools::opt::analysis::ConstantManager" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.403", %"class.std::__1::multimap", %"class.std::__1::unordered_set", %"class.std::__1::vector.458" }
%"class.std::__1::unordered_map.403" = type { %"class.std::__1::__hash_table.404" }
%"class.std::__1::__hash_table.404" = type <{ %"class.std::__1::unique_ptr.405", %"class.std::__1::__compressed_pair.415", %"class.std::__1::__compressed_pair.420", %"class.std::__1::__compressed_pair.423", [4 x i8] }>
%"class.std::__1::unique_ptr.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407", %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"struct.std::__1::__hash_node_base.408"** }
%"struct.std::__1::__hash_node_base.408" = type { %"struct.std::__1::__hash_node_base.408"* }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.std::__1::__bucket_list_deallocator.410" }
%"class.std::__1::__bucket_list_deallocator.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"struct.std::__1::__hash_node_base.408" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.427" }
%"class.std::__1::__tree.427" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.428", %"class.std::__1::__compressed_pair.432" }
%"class.std::__1::__compressed_pair.428" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.437" }
%"class.std::__1::__hash_table.437" = type <{ %"class.std::__1::unique_ptr.438", %"class.std::__1::__compressed_pair.448", %"class.std::__1::__compressed_pair.453", %"class.std::__1::__compressed_pair.455", [4 x i8] }>
%"class.std::__1::unique_ptr.438" = type { %"class.std::__1::__compressed_pair.439" }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.440", %"struct.std::__1::__compressed_pair_elem.442" }
%"struct.std::__1::__compressed_pair_elem.440" = type { %"struct.std::__1::__hash_node_base.441"** }
%"struct.std::__1::__hash_node_base.441" = type { %"struct.std::__1::__hash_node_base.441"* }
%"struct.std::__1::__compressed_pair_elem.442" = type { %"class.std::__1::__bucket_list_deallocator.443" }
%"class.std::__1::__bucket_list_deallocator.443" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.448" = type { %"struct.std::__1::__compressed_pair_elem.449" }
%"struct.std::__1::__compressed_pair_elem.449" = type { %"struct.std::__1::__hash_node_base.441" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.455" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::vector.458" = type { %"class.std::__1::__vector_base.459" }
%"class.std::__1::__vector_base.459" = type { %"class.std::__1::unique_ptr.460"*, %"class.std::__1::unique_ptr.460"*, %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::unique_ptr.460" = type { %"class.std::__1::__compressed_pair.461" }
%"class.std::__1::__compressed_pair.461" = type { %"struct.std::__1::__compressed_pair_elem.462" }
%"struct.std::__1::__compressed_pair_elem.462" = type { %"class.spvtools::opt::analysis::Constant"* }
%"class.spvtools::opt::analysis::Constant" = type { i32 (...)**, %"class.spvtools::opt::analysis::Type"* }
%"class.spvtools::opt::analysis::Type" = type <{ i32 (...)**, %"class.std::__1::vector.463", i32, [4 x i8] }>
%"class.std::__1::vector.463" = type { %"class.std::__1::__vector_base.464" }
%"class.std::__1::__vector_base.464" = type { %"class.std::__1::vector.3"*, %"class.std::__1::vector.3"*, %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.std::__1::unique_ptr.460"* }
%"class.std::__1::unique_ptr.480" = type { %"class.std::__1::__compressed_pair.481" }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"class.spvtools::opt::analysis::TypeManager"* }
%"class.spvtools::opt::analysis::TypeManager" = type { %"class.std::__1::function"*, %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.483", %"class.std::__1::unordered_map.507", %"class.std::__1::unordered_set.531", %"class.std::__1::vector.553", %"class.std::__1::unordered_map.483", %"class.std::__1::unordered_map.566" }
%"class.std::__1::unordered_map.507" = type { %"class.std::__1::__hash_table.508" }
%"class.std::__1::__hash_table.508" = type <{ %"class.std::__1::unique_ptr.509", %"class.std::__1::__compressed_pair.519", %"class.std::__1::__compressed_pair.524", %"class.std::__1::__compressed_pair.527", [4 x i8] }>
%"class.std::__1::unique_ptr.509" = type { %"class.std::__1::__compressed_pair.510" }
%"class.std::__1::__compressed_pair.510" = type { %"struct.std::__1::__compressed_pair_elem.511", %"struct.std::__1::__compressed_pair_elem.513" }
%"struct.std::__1::__compressed_pair_elem.511" = type { %"struct.std::__1::__hash_node_base.512"** }
%"struct.std::__1::__hash_node_base.512" = type { %"struct.std::__1::__hash_node_base.512"* }
%"struct.std::__1::__compressed_pair_elem.513" = type { %"class.std::__1::__bucket_list_deallocator.514" }
%"class.std::__1::__bucket_list_deallocator.514" = type { %"class.std::__1::__compressed_pair.515" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.519" = type { %"struct.std::__1::__compressed_pair_elem.520" }
%"struct.std::__1::__compressed_pair_elem.520" = type { %"struct.std::__1::__hash_node_base.512" }
%"class.std::__1::__compressed_pair.524" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_set.531" = type { %"class.std::__1::__hash_table.532" }
%"class.std::__1::__hash_table.532" = type <{ %"class.std::__1::unique_ptr.533", %"class.std::__1::__compressed_pair.543", %"class.std::__1::__compressed_pair.548", %"class.std::__1::__compressed_pair.550", [4 x i8] }>
%"class.std::__1::unique_ptr.533" = type { %"class.std::__1::__compressed_pair.534" }
%"class.std::__1::__compressed_pair.534" = type { %"struct.std::__1::__compressed_pair_elem.535", %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.535" = type { %"struct.std::__1::__hash_node_base.536"** }
%"struct.std::__1::__hash_node_base.536" = type { %"struct.std::__1::__hash_node_base.536"* }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.std::__1::__bucket_list_deallocator.538" }
%"class.std::__1::__bucket_list_deallocator.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"struct.std::__1::__hash_node_base.536" }
%"class.std::__1::__compressed_pair.548" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::vector.553" = type { %"class.std::__1::__vector_base.554" }
%"class.std::__1::__vector_base.554" = type { %"class.spvtools::opt::analysis::TypeManager::UnresolvedType"*, %"class.spvtools::opt::analysis::TypeManager::UnresolvedType"*, %"class.std::__1::__compressed_pair.561" }
%"class.spvtools::opt::analysis::TypeManager::UnresolvedType" = type { i32, %"class.std::__1::unique_ptr.555" }
%"class.std::__1::unique_ptr.555" = type { %"class.std::__1::__compressed_pair.556" }
%"class.std::__1::__compressed_pair.556" = type { %"struct.std::__1::__compressed_pair_elem.557" }
%"struct.std::__1::__compressed_pair_elem.557" = type { %"class.spvtools::opt::analysis::Type"* }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.spvtools::opt::analysis::TypeManager::UnresolvedType"* }
%"class.std::__1::unordered_map.483" = type { %"class.std::__1::__hash_table.484" }
%"class.std::__1::__hash_table.484" = type <{ %"class.std::__1::unique_ptr.485", %"class.std::__1::__compressed_pair.495", %"class.std::__1::__compressed_pair.500", %"class.std::__1::__compressed_pair.503", [4 x i8] }>
%"class.std::__1::unique_ptr.485" = type { %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.487", %"struct.std::__1::__compressed_pair_elem.489" }
%"struct.std::__1::__compressed_pair_elem.487" = type { %"struct.std::__1::__hash_node_base.488"** }
%"struct.std::__1::__hash_node_base.488" = type { %"struct.std::__1::__hash_node_base.488"* }
%"struct.std::__1::__compressed_pair_elem.489" = type { %"class.std::__1::__bucket_list_deallocator.490" }
%"class.std::__1::__bucket_list_deallocator.490" = type { %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"struct.std::__1::__hash_node_base.488" }
%"class.std::__1::__compressed_pair.500" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unordered_map.566" = type { %"class.std::__1::__hash_table.567" }
%"class.std::__1::__hash_table.567" = type <{ %"class.std::__1::unique_ptr.568", %"class.std::__1::__compressed_pair.578", %"class.std::__1::__compressed_pair.583", %"class.std::__1::__compressed_pair.586", [4 x i8] }>
%"class.std::__1::unique_ptr.568" = type { %"class.std::__1::__compressed_pair.569" }
%"class.std::__1::__compressed_pair.569" = type { %"struct.std::__1::__compressed_pair_elem.570", %"struct.std::__1::__compressed_pair_elem.572" }
%"struct.std::__1::__compressed_pair_elem.570" = type { %"struct.std::__1::__hash_node_base.571"** }
%"struct.std::__1::__hash_node_base.571" = type { %"struct.std::__1::__hash_node_base.571"* }
%"struct.std::__1::__compressed_pair_elem.572" = type { %"class.std::__1::__bucket_list_deallocator.573" }
%"class.std::__1::__bucket_list_deallocator.573" = type { %"class.std::__1::__compressed_pair.574" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.579" }
%"struct.std::__1::__compressed_pair_elem.579" = type { %"struct.std::__1::__hash_node_base.571" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.593" = type { %"class.std::__1::__compressed_pair.594" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"class.spvtools::opt::analysis::DebugInfoManager"* }
%"class.spvtools::opt::analysis::DebugInfoManager" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map", %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.596", %"class.std::__1::unordered_map.596", %"class.std::__1::unordered_map.596", %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"* }
%"class.std::__1::unordered_map.596" = type { %"class.std::__1::__hash_table.597" }
%"class.std::__1::__hash_table.597" = type <{ %"class.std::__1::unique_ptr.598", %"class.std::__1::__compressed_pair.608", %"class.std::__1::__compressed_pair.613", %"class.std::__1::__compressed_pair.616", [4 x i8] }>
%"class.std::__1::unique_ptr.598" = type { %"class.std::__1::__compressed_pair.599" }
%"class.std::__1::__compressed_pair.599" = type { %"struct.std::__1::__compressed_pair_elem.600", %"struct.std::__1::__compressed_pair_elem.602" }
%"struct.std::__1::__compressed_pair_elem.600" = type { %"struct.std::__1::__hash_node_base.601"** }
%"struct.std::__1::__hash_node_base.601" = type { %"struct.std::__1::__hash_node_base.601"* }
%"struct.std::__1::__compressed_pair_elem.602" = type { %"class.std::__1::__bucket_list_deallocator.603" }
%"class.std::__1::__bucket_list_deallocator.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.608" = type { %"struct.std::__1::__compressed_pair_elem.609" }
%"struct.std::__1::__compressed_pair_elem.609" = type { %"struct.std::__1::__hash_node_base.601" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.623" = type { %"class.std::__1::__compressed_pair.624" }
%"class.std::__1::__compressed_pair.624" = type { %"struct.std::__1::__compressed_pair_elem.625" }
%"struct.std::__1::__compressed_pair_elem.625" = type { %"class.std::__1::multimap.626"* }
%"class.std::__1::multimap.626" = type { %"class.std::__1::__tree.627" }
%"class.std::__1::__tree.627" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.628", %"class.std::__1::__compressed_pair.632" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.632" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::unique_ptr.638" = type { %"class.std::__1::__compressed_pair.639" }
%"class.std::__1::__compressed_pair.639" = type { %"struct.std::__1::__compressed_pair_elem.640" }
%"struct.std::__1::__compressed_pair_elem.640" = type { %"class.spvtools::opt::ScalarEvolutionAnalysis"* }
%"class.spvtools::opt::ScalarEvolutionAnalysis" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::map.641", %"class.spvtools::opt::SENode"*, %"class.std::__1::unordered_set.658", %"class.std::__1::map.680" }
%"class.std::__1::map.641" = type { %"class.std::__1::__tree.642" }
%"class.std::__1::__tree.642" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.643", %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.643" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.spvtools::opt::SENode" = type <{ i32 (...)**, %"class.std::__1::vector.651", %"class.spvtools::opt::ScalarEvolutionAnalysis"*, i32, [4 x i8] }>
%"class.std::__1::vector.651" = type { %"class.std::__1::__vector_base.652" }
%"class.std::__1::__vector_base.652" = type { %"class.spvtools::opt::SENode"**, %"class.spvtools::opt::SENode"**, %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"class.spvtools::opt::SENode"** }
%"class.std::__1::unordered_set.658" = type { %"class.std::__1::__hash_table.659" }
%"class.std::__1::__hash_table.659" = type <{ %"class.std::__1::unique_ptr.660", %"class.std::__1::__compressed_pair.670", %"class.std::__1::__compressed_pair.675", %"class.std::__1::__compressed_pair.677", [4 x i8] }>
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662", %"struct.std::__1::__compressed_pair_elem.664" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"struct.std::__1::__hash_node_base.663"** }
%"struct.std::__1::__hash_node_base.663" = type { %"struct.std::__1::__hash_node_base.663"* }
%"struct.std::__1::__compressed_pair_elem.664" = type { %"class.std::__1::__bucket_list_deallocator.665" }
%"class.std::__1::__bucket_list_deallocator.665" = type { %"class.std::__1::__compressed_pair.666" }
%"class.std::__1::__compressed_pair.666" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.670" = type { %"struct.std::__1::__compressed_pair_elem.671" }
%"struct.std::__1::__compressed_pair_elem.671" = type { %"struct.std::__1::__hash_node_base.663" }
%"class.std::__1::__compressed_pair.675" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.677" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::map.680" = type { %"class.std::__1::__tree.681" }
%"class.std::__1::__tree.681" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.682", %"class.std::__1::__compressed_pair.686" }
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.686" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::unique_ptr.694" = type { %"class.std::__1::__compressed_pair.695" }
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.696" }
%"struct.std::__1::__compressed_pair_elem.696" = type { %"class.spvtools::opt::LivenessAnalysis"* }
%"class.spvtools::opt::LivenessAnalysis" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.697" }
%"class.std::__1::unordered_map.697" = type { %"class.std::__1::__hash_table.698" }
%"class.std::__1::__hash_table.698" = type <{ %"class.std::__1::unique_ptr.699", %"class.std::__1::__compressed_pair.709", %"class.std::__1::__compressed_pair.714", %"class.std::__1::__compressed_pair.717", [4 x i8] }>
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701", %"struct.std::__1::__compressed_pair_elem.703" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"struct.std::__1::__hash_node_base.702"** }
%"struct.std::__1::__hash_node_base.702" = type { %"struct.std::__1::__hash_node_base.702"* }
%"struct.std::__1::__compressed_pair_elem.703" = type { %"class.std::__1::__bucket_list_deallocator.704" }
%"class.std::__1::__bucket_list_deallocator.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem.710" }
%"struct.std::__1::__compressed_pair_elem.710" = type { %"struct.std::__1::__hash_node_base.702" }
%"class.std::__1::__compressed_pair.714" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.724" = type { %"class.std::__1::__compressed_pair.725" }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %"class.spvtools::opt::ValueNumberTable"* }
%"class.spvtools::opt::ValueNumberTable" = type <{ %"class.std::__1::unordered_map.727", %"class.std::__1::unordered_map.249", %"class.spvtools::opt::IRContext"*, i32, [4 x i8] }>
%"class.std::__1::unordered_map.727" = type { %"class.std::__1::__hash_table.728" }
%"class.std::__1::__hash_table.728" = type <{ %"class.std::__1::unique_ptr.729", %"class.std::__1::__compressed_pair.739", %"class.std::__1::__compressed_pair.744", %"class.std::__1::__compressed_pair.747", [4 x i8] }>
%"class.std::__1::unique_ptr.729" = type { %"class.std::__1::__compressed_pair.730" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.731", %"struct.std::__1::__compressed_pair_elem.733" }
%"struct.std::__1::__compressed_pair_elem.731" = type { %"struct.std::__1::__hash_node_base.732"** }
%"struct.std::__1::__hash_node_base.732" = type { %"struct.std::__1::__hash_node_base.732"* }
%"struct.std::__1::__compressed_pair_elem.733" = type { %"class.std::__1::__bucket_list_deallocator.734" }
%"class.std::__1::__bucket_list_deallocator.734" = type { %"class.std::__1::__compressed_pair.735" }
%"class.std::__1::__compressed_pair.735" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"struct.std::__1::__hash_node_base.732" }
%"class.std::__1::__compressed_pair.744" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.747" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::unique_ptr.754" = type { %"class.std::__1::__compressed_pair.755" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.756" }
%"struct.std::__1::__compressed_pair_elem.756" = type { %"class.spvtools::opt::InstructionFolder"* }
%"class.spvtools::opt::InstructionFolder" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unique_ptr.757", %"class.std::__1::unique_ptr.817" }
%"class.std::__1::unique_ptr.757" = type { %"class.std::__1::__compressed_pair.758" }
%"class.std::__1::__compressed_pair.758" = type { %"struct.std::__1::__compressed_pair_elem.759" }
%"struct.std::__1::__compressed_pair_elem.759" = type { %"class.spvtools::opt::ConstantFoldingRules"* }
%"class.spvtools::opt::ConstantFoldingRules" = type { i32 (...)**, %"class.std::__1::unordered_map.760", %"class.std::__1::map.784", %"class.spvtools::opt::IRContext"*, %"class.std::__1::vector.795" }
%"class.std::__1::unordered_map.760" = type { %"class.std::__1::__hash_table.761" }
%"class.std::__1::__hash_table.761" = type <{ %"class.std::__1::unique_ptr.762", %"class.std::__1::__compressed_pair.772", %"class.std::__1::__compressed_pair.777", %"class.std::__1::__compressed_pair.780", [4 x i8] }>
%"class.std::__1::unique_ptr.762" = type { %"class.std::__1::__compressed_pair.763" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.764", %"struct.std::__1::__compressed_pair_elem.766" }
%"struct.std::__1::__compressed_pair_elem.764" = type { %"struct.std::__1::__hash_node_base.765"** }
%"struct.std::__1::__hash_node_base.765" = type { %"struct.std::__1::__hash_node_base.765"* }
%"struct.std::__1::__compressed_pair_elem.766" = type { %"class.std::__1::__bucket_list_deallocator.767" }
%"class.std::__1::__bucket_list_deallocator.767" = type { %"class.std::__1::__compressed_pair.768" }
%"class.std::__1::__compressed_pair.768" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.772" = type { %"struct.std::__1::__compressed_pair_elem.773" }
%"struct.std::__1::__compressed_pair_elem.773" = type { %"struct.std::__1::__hash_node_base.765" }
%"class.std::__1::__compressed_pair.777" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::map.784" = type { %"class.std::__1::__tree.785" }
%"class.std::__1::__tree.785" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.786", %"class.std::__1::__compressed_pair.790" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.790" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::vector.795" = type { %"class.std::__1::__vector_base.796" }
%"class.std::__1::__vector_base.796" = type { %"class.std::__1::function.797"*, %"class.std::__1::function.797"*, %"class.std::__1::__compressed_pair.809" }
%"class.std::__1::function.797" = type { %"class.std::__1::__function::__policy_func.800" }
%"class.std::__1::__function::__policy_func.800" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.801", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.801" = type { %"class.spvtools::opt::analysis::Constant"* (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::vector.802"*)* }
%"class.std::__1::vector.802" = type { %"class.std::__1::__vector_base.803" }
%"class.std::__1::__vector_base.803" = type { %"class.spvtools::opt::analysis::Constant"**, %"class.spvtools::opt::analysis::Constant"**, %"class.std::__1::__compressed_pair.804" }
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"class.spvtools::opt::analysis::Constant"** }
%"class.std::__1::__compressed_pair.809" = type { %"struct.std::__1::__compressed_pair_elem.810" }
%"struct.std::__1::__compressed_pair_elem.810" = type { %"class.std::__1::function.797"* }
%"class.std::__1::unique_ptr.817" = type { %"class.std::__1::__compressed_pair.818" }
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { %"class.spvtools::opt::FoldingRules"* }
%"class.spvtools::opt::FoldingRules" = type { i32 (...)**, %"class.std::__1::unordered_map.820", %"class.std::__1::map.844", %"class.spvtools::opt::IRContext"*, %"class.std::__1::vector.855" }
%"class.std::__1::unordered_map.820" = type { %"class.std::__1::__hash_table.821" }
%"class.std::__1::__hash_table.821" = type <{ %"class.std::__1::unique_ptr.822", %"class.std::__1::__compressed_pair.832", %"class.std::__1::__compressed_pair.837", %"class.std::__1::__compressed_pair.840", [4 x i8] }>
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824", %"struct.std::__1::__compressed_pair_elem.826" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.std::__1::__hash_node_base.825"** }
%"struct.std::__1::__hash_node_base.825" = type { %"struct.std::__1::__hash_node_base.825"* }
%"struct.std::__1::__compressed_pair_elem.826" = type { %"class.std::__1::__bucket_list_deallocator.827" }
%"class.std::__1::__bucket_list_deallocator.827" = type { %"class.std::__1::__compressed_pair.828" }
%"class.std::__1::__compressed_pair.828" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.832" = type { %"struct.std::__1::__compressed_pair_elem.833" }
%"struct.std::__1::__compressed_pair_elem.833" = type { %"struct.std::__1::__hash_node_base.825" }
%"class.std::__1::__compressed_pair.837" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.840" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::map.844" = type { %"class.std::__1::__tree.845" }
%"class.std::__1::__tree.845" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.846", %"class.std::__1::__compressed_pair.850" }
%"class.std::__1::__compressed_pair.846" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"class.std::__1::__compressed_pair.850" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::vector.855" = type { %"class.std::__1::__vector_base.856" }
%"class.std::__1::__vector_base.856" = type { %"class.std::__1::function.857"*, %"class.std::__1::function.857"*, %"class.std::__1::__compressed_pair.862" }
%"class.std::__1::function.857" = type { %"class.std::__1::__function::__policy_func.860" }
%"class.std::__1::__function::__policy_func.860" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.861", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.861" = type { i1 (%"union.std::__1::__function::__policy_storage"*, %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::vector.802"*)* }
%"class.std::__1::__compressed_pair.862" = type { %"struct.std::__1::__compressed_pair_elem.863" }
%"struct.std::__1::__compressed_pair_elem.863" = type { %"class.std::__1::function.857"* }
%"class.std::__1::unique_ptr.873" = type { %"class.std::__1::__compressed_pair.874" }
%"class.std::__1::__compressed_pair.874" = type { %"struct.std::__1::__compressed_pair_elem.875" }
%"struct.std::__1::__compressed_pair_elem.875" = type { %"class.spvtools::opt::StructuredCFGAnalysis"* }
%"class.spvtools::opt::StructuredCFGAnalysis" = type { %"class.spvtools::opt::IRContext"*, %"class.std::__1::unordered_map.876", %"class.spvtools::utils::BitVector" }
%"class.std::__1::unordered_map.876" = type { %"class.std::__1::__hash_table.877" }
%"class.std::__1::__hash_table.877" = type <{ %"class.std::__1::unique_ptr.878", %"class.std::__1::__compressed_pair.888", %"class.std::__1::__compressed_pair.893", %"class.std::__1::__compressed_pair.896", [4 x i8] }>
%"class.std::__1::unique_ptr.878" = type { %"class.std::__1::__compressed_pair.879" }
%"class.std::__1::__compressed_pair.879" = type { %"struct.std::__1::__compressed_pair_elem.880", %"struct.std::__1::__compressed_pair_elem.882" }
%"struct.std::__1::__compressed_pair_elem.880" = type { %"struct.std::__1::__hash_node_base.881"** }
%"struct.std::__1::__hash_node_base.881" = type { %"struct.std::__1::__hash_node_base.881"* }
%"struct.std::__1::__compressed_pair_elem.882" = type { %"class.std::__1::__bucket_list_deallocator.883" }
%"class.std::__1::__bucket_list_deallocator.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.888" = type { %"struct.std::__1::__compressed_pair_elem.889" }
%"struct.std::__1::__compressed_pair_elem.889" = type { %"struct.std::__1::__hash_node_base.881" }
%"class.std::__1::__compressed_pair.893" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.896" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.spvtools::utils::BitVector" = type { %"class.std::__1::vector.900" }
%"class.std::__1::vector.900" = type { %"class.std::__1::__vector_base.901" }
%"class.std::__1::__vector_base.901" = type { i64*, i64*, %"class.std::__1::__compressed_pair.902" }
%"class.std::__1::__compressed_pair.902" = type { %"struct.std::__1::__compressed_pair_elem.903" }
%"struct.std::__1::__compressed_pair_elem.903" = type { i64* }
%"class.std::__1::vector.940" = type { %"class.std::__1::__vector_base.941" }
%"class.std::__1::__vector_base.941" = type { %"class.spvtools::opt::Instruction"**, %"class.spvtools::opt::Instruction"**, %"class.std::__1::__compressed_pair.942" }
%"class.std::__1::__compressed_pair.942" = type { %"struct.std::__1::__compressed_pair_elem.943" }
%"struct.std::__1::__compressed_pair_elem.943" = type { %"class.spvtools::opt::Instruction"** }
%"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node" = type { i32, [4 x i8], %"class.std::__1::unordered_map.913" }
%"class.std::__1::unordered_map.913" = type { %"class.std::__1::__hash_table.914" }
%"class.std::__1::__hash_table.914" = type <{ %"class.std::__1::unique_ptr.915", %"class.std::__1::__compressed_pair.925", %"class.std::__1::__compressed_pair.930", %"class.std::__1::__compressed_pair.933", [4 x i8] }>
%"class.std::__1::unique_ptr.915" = type { %"class.std::__1::__compressed_pair.916" }
%"class.std::__1::__compressed_pair.916" = type { %"struct.std::__1::__compressed_pair_elem.917", %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.917" = type { %"struct.std::__1::__hash_node_base.918"** }
%"struct.std::__1::__hash_node_base.918" = type { %"struct.std::__1::__hash_node_base.918"* }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"class.std::__1::__bucket_list_deallocator.920" }
%"class.std::__1::__bucket_list_deallocator.920" = type { %"class.std::__1::__compressed_pair.921" }
%"class.std::__1::__compressed_pair.921" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"struct.std::__1::__hash_node_base.918" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"class.std::__1::__compressed_pair.933" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::default_delete.120" = type { i8 }
%"class.spvtools::opt::Pass" = type <{ i32 (...)**, %"class.std::__1::function", %"class.spvtools::opt::IRContext"*, i8, [7 x i8] }>
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::pair.947" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::pair.947" = type { %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN8spvtools3opt4PassD2Ev = comdat any

$_ZN8spvtools3opt17UnifyConstantPassD0Ev = comdat any

$_ZNK8spvtools3opt17UnifyConstantPass4nameEv = comdat any

$_ZN8spvtools3opt4Pass20GetPreservedAnalysesEv = comdat any

$_ZNKSt3__114default_deleteIN8spvtools3opt8analysis13DefUseManagerEEclEPS4_ = comdat any

$_ZNSt3__16__treeINS_4pairIPN8spvtools3opt11InstructionES5_EENS3_8analysis13UserEntryLessENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZN8spvtools3opt4PassD0Ev = comdat any

$_ZTVN8spvtools3opt4PassE = comdat any

@_ZTVN8spvtools3opt17UnifyConstantPassE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::opt::Pass"*)* @_ZN8spvtools3opt4PassD2Ev to i8*), i8* bitcast (void (%"class.spvtools::opt::UnifyConstantPass"*)* @_ZN8spvtools3opt17UnifyConstantPassD0Ev to i8*), i8* bitcast (i8* (%"class.spvtools::opt::UnifyConstantPass"*)* @_ZNK8spvtools3opt17UnifyConstantPass4nameEv to i8*), i8* bitcast (i32 (%"class.spvtools::opt::Pass"*)* @_ZN8spvtools3opt4Pass20GetPreservedAnalysesEv to i8*), i8* bitcast (i32 (%"class.spvtools::opt::UnifyConstantPass"*)* @_ZN8spvtools3opt17UnifyConstantPass7ProcessEv to i8*)] }, align 8
@_ZTVN8spvtools3opt4PassE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.spvtools::opt::Pass"*)* @_ZN8spvtools3opt4PassD2Ev to i8*), i8* bitcast (void (%"class.spvtools::opt::Pass"*)* @_ZN8spvtools3opt4PassD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%"class.spvtools::opt::Pass"*)* @_ZN8spvtools3opt4Pass20GetPreservedAnalysesEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"unify-const\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8spvtools3opt17UnifyConstantPass7ProcessEv(%"class.spvtools::opt::UnifyConstantPass"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.3", align 8
  %3 = alloca %"class.std::__1::vector.940", align 8
  %4 = tail call i8* @_Znwm(i64 48) #10
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = getelementptr inbounds i8, i8* %4, i64 40
  %8 = bitcast i8* %7 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %8, align 4
  %9 = getelementptr inbounds %"class.spvtools::opt::UnifyConstantPass", %"class.spvtools::opt::UnifyConstantPass"* %0, i64 0, i32 0, i32 2
  %10 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %9, align 8
  %11 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %10, i64 0, i32 4, i32 0, i32 0, i32 0
  %12 = load %"class.spvtools::opt::Module"*, %"class.spvtools::opt::Module"** %11, align 8, !noalias !2
  %13 = getelementptr inbounds %"class.spvtools::opt::Module", %"class.spvtools::opt::Module"* %12, i64 0, i32 14, i32 0, i32 1, i32 0, i32 1
  %14 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %13, align 8, !noalias !5
  %15 = icmp eq %"class.spvtools::opt::Instruction"* %14, null
  br i1 %15, label %33, label %16

16:                                               ; preds = %1
  %17 = bitcast %"class.std::__1::vector.940"* %3 to i8*
  %18 = getelementptr inbounds %"class.std::__1::vector.940", %"class.std::__1::vector.940"* %3, i64 0, i32 0, i32 1
  %19 = bitcast %"class.spvtools::opt::Instruction"*** %18 to i64*
  %20 = bitcast %"class.std::__1::vector.940"* %3 to i64*
  %21 = bitcast %"class.std::__1::vector.3"* %2 to i8*
  %22 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %2, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %2, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast i32** %23 to i64*
  %26 = bitcast %"class.std::__1::vector.3"* %2 to i64*
  %27 = bitcast i32** %24 to i64*
  %28 = bitcast i8* %4 to %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"*
  br label %46

29:                                               ; preds = %458
  %30 = getelementptr inbounds i8, i8* %4, i64 24
  %31 = bitcast i8* %30 to %"struct.std::__1::__hash_node_base.918"**
  %32 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %31, align 8
  br label %33

33:                                               ; preds = %1, %29
  %34 = phi %"struct.std::__1::__hash_node_base.918"* [ %32, %29 ], [ null, %1 ]
  %35 = phi i8 [ %459, %29 ], [ 0, %1 ]
  %36 = and i8 %35, 1
  %37 = icmp eq i8 %36, 0
  %38 = select i1 %37, i32 17, i32 16
  %39 = bitcast i8* %6 to %"class.std::__1::__hash_table.914"*
  call fastcc void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeISB_PvEEEE(%"class.std::__1::__hash_table.914"* %39, %"struct.std::__1::__hash_node_base.918"* %34) #11
  %40 = bitcast i8* %6 to %"struct.std::__1::__hash_node_base.918"***
  %41 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %40, align 8
  store %"struct.std::__1::__hash_node_base.918"** null, %"struct.std::__1::__hash_node_base.918"*** %40, align 8
  %42 = icmp eq %"struct.std::__1::__hash_node_base.918"** %41, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %33
  %44 = bitcast %"struct.std::__1::__hash_node_base.918"** %41 to i8*
  call void @_ZdlPv(i8* %44) #10
  br label %45

45:                                               ; preds = %33, %43
  call void @_ZdlPv(i8* nonnull %4) #10
  ret i32 %38

46:                                               ; preds = %462, %16
  %47 = phi %"class.spvtools::opt::IRContext"* [ %10, %16 ], [ %463, %462 ]
  %48 = phi %"class.spvtools::opt::Instruction"* [ %14, %16 ], [ %51, %462 ]
  %49 = phi i8 [ 0, %16 ], [ %459, %462 ]
  %50 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 0, i32 1
  %51 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %50, align 8
  %52 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %51, i64 0, i32 0, i32 3
  %53 = load i8, i8* %52, align 8, !range !12
  %54 = icmp ne i8 %53, 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #11
  %55 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %47, i64 0, i32 11
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %83

59:                                               ; preds = %46
  %60 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %47, i64 0, i32 4, i32 0, i32 0, i32 0
  %61 = load %"class.spvtools::opt::Module"*, %"class.spvtools::opt::Module"** %60, align 8
  %62 = call i8* @_Znwm(i64 104) #10
  %63 = bitcast i8* %62 to %"class.spvtools::opt::analysis::DefUseManager"*
  %64 = getelementptr inbounds i8, i8* %62, i64 32
  %65 = bitcast i8* %64 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %65, align 4
  %66 = getelementptr inbounds i8, i8* %62, i64 48
  %67 = getelementptr inbounds i8, i8* %62, i64 40
  call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 16, i1 false) #11
  %68 = bitcast i8* %67 to i8**
  store i8* %66, i8** %68, align 8
  %69 = getelementptr inbounds i8, i8* %62, i64 64
  %70 = getelementptr inbounds i8, i8* %62, i64 96
  %71 = bitcast i8* %70 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %71, align 4
  call void @_ZN8spvtools3opt8analysis13DefUseManager13AnalyzeDefUseEPNS0_6ModuleE(%"class.spvtools::opt::analysis::DefUseManager"* nonnull %63, %"class.spvtools::opt::Module"* %61) #11
  %72 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %47, i64 0, i32 6
  %73 = ptrtoint i8* %62 to i64
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.62"* %72, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.spvtools::opt::analysis::DefUseManager"*, %"class.spvtools::opt::analysis::DefUseManager"** %74, align 8
  %76 = bitcast %"class.std::__1::unique_ptr.62"* %72 to i64*
  store i64 %73, i64* %76, align 8
  %77 = icmp eq %"class.spvtools::opt::analysis::DefUseManager"* %75, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %59
  %79 = bitcast %"class.std::__1::unique_ptr.62"* %72 to %"struct.std::__1::default_delete.120"*
  call void @_ZNKSt3__114default_deleteIN8spvtools3opt8analysis13DefUseManagerEEclEPS4_(%"struct.std::__1::default_delete.120"* %79, %"class.spvtools::opt::analysis::DefUseManager"* nonnull %75) #11
  br label %80

80:                                               ; preds = %78, %59
  %81 = load i32, i32* %55, align 8
  %82 = or i32 %81, 1
  store i32 %82, i32* %55, align 8
  br label %83

83:                                               ; preds = %46, %80
  %84 = getelementptr inbounds %"class.spvtools::opt::IRContext", %"class.spvtools::opt::IRContext"* %47, i64 0, i32 6, i32 0, i32 0, i32 0
  %85 = load %"class.spvtools::opt::analysis::DefUseManager"*, %"class.spvtools::opt::analysis::DefUseManager"** %84, align 8
  %86 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 4
  %87 = load i8, i8* %86, align 1, !range !12
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 3
  %91 = load i8, i8* %90, align 4, !range !12
  %92 = zext i8 %91 to i32
  %93 = call i32 @_ZNK8spvtools3opt11Instruction20GetSingleWordOperandEj(%"class.spvtools::opt::Instruction"* nonnull %48, i32 %92) #11
  br label %94

94:                                               ; preds = %83, %89
  %95 = phi i32 [ %93, %89 ], [ 0, %83 ]
  call void @_ZNK8spvtools3opt8analysis13DefUseManager14GetAnnotationsEj(%"class.std::__1::vector.940"* nonnull sret %3, %"class.spvtools::opt::analysis::DefUseManager"* %85, i32 %95) #11
  %96 = load i64, i64* %19, align 8
  %97 = load i64, i64* %20, align 8
  %98 = icmp eq i64 %96, %97
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %102, label %100

100:                                              ; preds = %94
  store i64 %97, i64* %19, align 8
  %101 = inttoptr i64 %97 to i8*
  call void @_ZdlPv(i8* %101) #10
  br label %102

102:                                              ; preds = %94, %100
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #11
  br i1 %98, label %103, label %458

103:                                              ; preds = %102
  %104 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 2
  %105 = load i32, i32* %104, align 8
  switch i32 %105, label %458 [
    i32 41, label %106
    i32 42, label %106
    i32 43, label %106
    i32 46, label %106
    i32 45, label %106
    i32 44, label %106
    i32 52, label %106
    i32 51, label %106
  ]

106:                                              ; preds = %103, %103, %103, %103, %103, %103, %103, %103
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #11
  %107 = call i8* @_Znwm(i64 4) #10, !noalias !13
  %108 = bitcast i8* %107 to i32*
  %109 = getelementptr inbounds i8, i8* %107, i64 4
  %110 = ptrtoint i8* %109 to i64
  store i32 %105, i32* %108, align 4, !noalias !13
  %111 = ptrtoint i8* %107 to i64
  store i64 %111, i64* %26, align 8, !alias.scope !13
  store i64 %110, i64* %25, align 8, !alias.scope !13
  store i64 %110, i64* %27, align 8, !alias.scope !13
  %112 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 6, i32 0, i32 0
  %113 = load %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"** %112, align 8, !noalias !13
  %114 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 6, i32 0, i32 1
  %115 = load %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"** %114, align 8, !noalias !13
  %116 = icmp eq %"struct.spvtools::opt::Operand"* %113, %115
  br i1 %116, label %117, label %119

117:                                              ; preds = %106
  %118 = bitcast i8* %109 to i32*
  br label %157

119:                                              ; preds = %106, %150
  %120 = phi %"struct.spvtools::opt::Operand"* [ %151, %150 ], [ %113, %106 ]
  %121 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %120, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 3
  br i1 %123, label %150, label %124

124:                                              ; preds = %119
  %125 = load i32*, i32** %23, align 8, !alias.scope !13
  %126 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %120, i64 0, i32 1, i32 4, i32 0, i32 0, i32 0
  %127 = load %"class.std::__1::vector.3"*, %"class.std::__1::vector.3"** %126, align 8
  %128 = icmp eq %"class.std::__1::vector.3"* %127, null
  %129 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %127, i64 0, i32 0, i32 0
  %130 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %120, i64 0, i32 1, i32 2
  %131 = select i1 %128, i32** %130, i32** %129
  %132 = load i32*, i32** %131, align 8
  br i1 %128, label %142, label %133

133:                                              ; preds = %124
  %134 = load i32*, i32** %129, align 8
  %135 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %127, i64 0, i32 0, i32 1
  %136 = bitcast i32** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = ptrtoint i32* %134 to i64
  %139 = sub i64 %137, %138
  %140 = ashr exact i64 %139, 2
  %141 = getelementptr inbounds i32, i32* %134, i64 %140
  br label %147

142:                                              ; preds = %124
  %143 = load i32*, i32** %130, align 8
  %144 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %120, i64 0, i32 1, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = getelementptr inbounds i32, i32* %143, i64 %145
  br label %147

147:                                              ; preds = %142, %133
  %148 = phi i32* [ %141, %133 ], [ %146, %142 ]
  %149 = call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector.3"* nonnull %2, i32* %125, i32* %132, i32* %148) #11
  br label %150

150:                                              ; preds = %147, %119
  %151 = getelementptr inbounds %"struct.spvtools::opt::Operand", %"struct.spvtools::opt::Operand"* %120, i64 1
  %152 = icmp eq %"struct.spvtools::opt::Operand"* %151, %115
  br i1 %152, label %153, label %119

153:                                              ; preds = %150
  %154 = load i32*, i32** %22, align 8
  %155 = load i32*, i32** %23, align 8
  %156 = icmp eq i32* %154, %155
  br i1 %156, label %160, label %157

157:                                              ; preds = %153, %117
  %158 = phi i32* [ %108, %117 ], [ %154, %153 ]
  %159 = phi i32* [ %118, %117 ], [ %155, %153 ]
  br label %165

160:                                              ; preds = %412, %153
  %161 = phi %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* [ %28, %153 ], [ %413, %412 ]
  %162 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %161, i64 0, i32 0
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %416, label %426

165:                                              ; preds = %412, %157
  %166 = phi %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* [ %413, %412 ], [ %28, %157 ]
  %167 = phi i32* [ %414, %412 ], [ %158, %157 ]
  %168 = load i32, i32* %167, align 4
  %169 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %166, i64 0, i32 2
  %170 = zext i32 %168 to i64
  %171 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %172 = load i64, i64* %171, align 8
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %222, label %174

174:                                              ; preds = %165
  %175 = call i64 @llvm.ctpop.i64(i64 %172) #11, !range !16
  %176 = icmp ugt i64 %175, 1
  br i1 %176, label %180, label %177

177:                                              ; preds = %174
  %178 = add i64 %172, 4294967295
  %179 = and i64 %178, %170
  br label %184

180:                                              ; preds = %174
  %181 = icmp ugt i64 %172, %170
  br i1 %181, label %184, label %182

182:                                              ; preds = %180
  %183 = urem i64 %170, %172
  br label %184

184:                                              ; preds = %182, %180, %177
  %185 = phi i64 [ %179, %177 ], [ %183, %182 ], [ %170, %180 ]
  %186 = getelementptr inbounds %"class.std::__1::unordered_map.913", %"class.std::__1::unordered_map.913"* %169, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %186, align 8
  %188 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %187, i64 %185
  %189 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %188, align 8
  %190 = icmp eq %"struct.std::__1::__hash_node_base.918"* %189, null
  br i1 %190, label %222, label %191

191:                                              ; preds = %184
  %192 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %189, i64 0, i32 0
  %193 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %192, align 8
  %194 = icmp eq %"struct.std::__1::__hash_node_base.918"* %193, null
  br i1 %194, label %222, label %195

195:                                              ; preds = %191
  %196 = add i64 %172, -1
  br label %197

197:                                              ; preds = %218, %195
  %198 = phi %"struct.std::__1::__hash_node_base.918"* [ %193, %195 ], [ %220, %218 ]
  %199 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %198, i64 1
  %200 = bitcast %"struct.std::__1::__hash_node_base.918"* %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = icmp eq i64 %201, %170
  br i1 %202, label %213, label %203

203:                                              ; preds = %197
  br i1 %176, label %206, label %204

204:                                              ; preds = %203
  %205 = and i64 %201, %196
  br label %210

206:                                              ; preds = %203
  %207 = icmp ult i64 %201, %172
  br i1 %207, label %210, label %208

208:                                              ; preds = %206
  %209 = urem i64 %201, %172
  br label %210

210:                                              ; preds = %208, %206, %204
  %211 = phi i64 [ %205, %204 ], [ %209, %208 ], [ %201, %206 ]
  %212 = icmp eq i64 %211, %185
  br i1 %212, label %218, label %222

213:                                              ; preds = %197
  %214 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %198, i64 2
  %215 = bitcast %"struct.std::__1::__hash_node_base.918"* %214 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %216, %168
  br i1 %217, label %408, label %218

218:                                              ; preds = %213, %210
  %219 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %198, i64 0, i32 0
  %220 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %219, align 8
  %221 = icmp eq %"struct.std::__1::__hash_node_base.918"* %220, null
  br i1 %221, label %222, label %197

222:                                              ; preds = %218, %210, %191, %184, %165
  %223 = call i8* @_Znwm(i64 48) #10
  %224 = bitcast i8* %223 to i32*
  store i32 0, i32* %224, align 8
  %225 = getelementptr inbounds i8, i8* %223, i64 8
  %226 = getelementptr inbounds i8, i8* %223, i64 40
  %227 = bitcast i8* %226 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %225, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %227, align 4
  %228 = ptrtoint i8* %223 to i64
  %229 = getelementptr inbounds %"class.std::__1::unordered_map.913", %"class.std::__1::unordered_map.913"* %169, i64 0, i32 0
  br i1 %173, label %274, label %230

230:                                              ; preds = %222
  %231 = call i64 @llvm.ctpop.i64(i64 %172) #11, !range !16
  %232 = icmp ugt i64 %231, 1
  br i1 %232, label %236, label %233

233:                                              ; preds = %230
  %234 = add i64 %172, 4294967295
  %235 = and i64 %234, %170
  br label %240

236:                                              ; preds = %230
  %237 = icmp ugt i64 %172, %170
  br i1 %237, label %240, label %238

238:                                              ; preds = %236
  %239 = urem i64 %170, %172
  br label %240

240:                                              ; preds = %238, %236, %233
  %241 = phi i64 [ %235, %233 ], [ %239, %238 ], [ %170, %236 ]
  %242 = getelementptr inbounds %"class.std::__1::unordered_map.913", %"class.std::__1::unordered_map.913"* %169, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %243 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %242, align 8
  %244 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %243, i64 %241
  %245 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %244, align 8
  %246 = icmp eq %"struct.std::__1::__hash_node_base.918"* %245, null
  br i1 %246, label %274, label %247

247:                                              ; preds = %240
  %248 = add i64 %172, -1
  br label %249

249:                                              ; preds = %269, %247
  %250 = phi %"struct.std::__1::__hash_node_base.918"* [ %252, %269 ], [ %245, %247 ]
  %251 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %250, i64 0, i32 0
  %252 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %251, align 8
  %253 = icmp eq %"struct.std::__1::__hash_node_base.918"* %252, null
  br i1 %253, label %274, label %254

254:                                              ; preds = %249
  %255 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %252, i64 1
  %256 = bitcast %"struct.std::__1::__hash_node_base.918"* %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = icmp eq i64 %257, %170
  br i1 %258, label %269, label %259

259:                                              ; preds = %254
  br i1 %232, label %262, label %260

260:                                              ; preds = %259
  %261 = and i64 %257, %248
  br label %266

262:                                              ; preds = %259
  %263 = icmp ult i64 %257, %172
  br i1 %263, label %266, label %264

264:                                              ; preds = %262
  %265 = urem i64 %257, %172
  br label %266

266:                                              ; preds = %264, %262, %260
  %267 = phi i64 [ %261, %260 ], [ %265, %264 ], [ %257, %262 ]
  %268 = icmp eq i64 %267, %241
  br i1 %268, label %269, label %274

269:                                              ; preds = %266, %254
  %270 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %252, i64 2
  %271 = bitcast %"struct.std::__1::__hash_node_base.918"* %270 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = icmp eq i32 %272, %168
  br i1 %273, label %404, label %249

274:                                              ; preds = %266, %249, %240, %222
  %275 = phi i64 [ %241, %240 ], [ -6148914691236517206, %222 ], [ %241, %249 ], [ %241, %266 ]
  %276 = call i8* @_Znwm(i64 32) #10, !noalias !17
  %277 = getelementptr inbounds i8, i8* %276, i64 16
  %278 = bitcast i8* %277 to i32*
  store i32 %168, i32* %278, align 8, !noalias !17
  %279 = getelementptr inbounds i8, i8* %276, i64 24
  %280 = bitcast i8* %279 to i64*
  store i64 %228, i64* %280, align 8, !noalias !17
  %281 = getelementptr inbounds i8, i8* %276, i64 8
  %282 = bitcast i8* %281 to i64*
  store i64 %170, i64* %282, align 8, !noalias !17
  %283 = bitcast i8* %276 to %"struct.std::__1::__hash_node_base.918"**
  store %"struct.std::__1::__hash_node_base.918"* null, %"struct.std::__1::__hash_node_base.918"** %283, align 8, !noalias !17
  %284 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %166, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, 1
  %287 = uitofp i64 %286 to float
  %288 = uitofp i64 %172 to float
  %289 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %166, i64 0, i32 2, i32 0, i32 3, i32 0, i32 0
  %290 = load float, float* %289, align 4
  %291 = fmul float %290, %288
  %292 = fcmp olt float %291, %287
  %293 = or i1 %173, %292
  br i1 %293, label %294, label %358

294:                                              ; preds = %274
  %295 = shl i64 %172, 1
  %296 = icmp ult i64 %172, 3
  %297 = call i64 @llvm.ctpop.i64(i64 %172) #11, !range !16
  %298 = icmp ugt i64 %297, 1
  %299 = or i1 %296, %298
  %300 = zext i1 %299 to i64
  %301 = or i64 %295, %300
  %302 = fdiv float %287, %290
  %303 = call float @llvm.ceil.f32(float %302) #11
  %304 = fptoui float %303 to i64
  %305 = icmp ult i64 %301, %304
  %306 = select i1 %305, i64 %304, i64 %301
  %307 = icmp eq i64 %306, 1
  br i1 %307, label %314, label %308

308:                                              ; preds = %294
  %309 = call i64 @llvm.ctpop.i64(i64 %306) #11, !range !16
  %310 = icmp ugt i64 %309, 1
  br i1 %310, label %311, label %314

311:                                              ; preds = %308
  %312 = call i64 @_ZNSt3__112__next_primeEm(i64 %306) #11
  %313 = load i64, i64* %171, align 8
  br label %314

314:                                              ; preds = %311, %308, %294
  %315 = phi i64 [ %313, %311 ], [ %172, %308 ], [ %172, %294 ]
  %316 = phi i64 [ %312, %311 ], [ %306, %308 ], [ 2, %294 ]
  %317 = icmp ugt i64 %316, %315
  br i1 %317, label %318, label %319

318:                                              ; preds = %314
  call fastcc void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm(%"class.std::__1::__hash_table.914"* %229, i64 %316) #11
  br label %347

319:                                              ; preds = %314
  %320 = icmp ult i64 %316, %315
  br i1 %320, label %321, label %347

321:                                              ; preds = %319
  %322 = icmp ugt i64 %315, 2
  %323 = call i64 @llvm.ctpop.i64(i64 %315) #11, !range !16
  %324 = icmp ult i64 %323, 2
  %325 = and i1 %322, %324
  %326 = load i64, i64* %284, align 8
  %327 = uitofp i64 %326 to float
  %328 = load float, float* %289, align 4
  %329 = fdiv float %327, %328
  %330 = call float @llvm.ceil.f32(float %329) #11
  %331 = fptoui float %330 to i64
  br i1 %325, label %332, label %339

332:                                              ; preds = %321
  %333 = icmp ult i64 %331, 2
  br i1 %333, label %341, label %334

334:                                              ; preds = %332
  %335 = add i64 %331, -1
  %336 = call i64 @llvm.ctlz.i64(i64 %335, i1 true) #11, !range !16
  %337 = sub nuw nsw i64 64, %336
  %338 = shl i64 1, %337
  br label %341

339:                                              ; preds = %321
  %340 = call i64 @_ZNSt3__112__next_primeEm(i64 %331) #11
  br label %341

341:                                              ; preds = %339, %334, %332
  %342 = phi i64 [ %340, %339 ], [ %338, %334 ], [ %331, %332 ]
  %343 = icmp ult i64 %316, %342
  %344 = select i1 %343, i64 %342, i64 %316
  %345 = icmp ult i64 %344, %315
  br i1 %345, label %346, label %347

346:                                              ; preds = %341
  call fastcc void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm(%"class.std::__1::__hash_table.914"* %229, i64 %344) #11
  br label %347

347:                                              ; preds = %346, %341, %319, %318
  %348 = load i64, i64* %171, align 8
  %349 = call i64 @llvm.ctpop.i64(i64 %348) #11, !range !16
  %350 = icmp ugt i64 %349, 1
  br i1 %350, label %354, label %351

351:                                              ; preds = %347
  %352 = add i64 %348, 4294967295
  %353 = and i64 %352, %170
  br label %358

354:                                              ; preds = %347
  %355 = icmp ugt i64 %348, %170
  br i1 %355, label %358, label %356

356:                                              ; preds = %354
  %357 = urem i64 %170, %348
  br label %358

358:                                              ; preds = %356, %354, %351, %274
  %359 = phi i64 [ %172, %274 ], [ %348, %351 ], [ %348, %354 ], [ %348, %356 ]
  %360 = phi i64 [ %275, %274 ], [ %353, %351 ], [ %170, %354 ], [ %357, %356 ]
  %361 = getelementptr inbounds %"class.std::__1::unordered_map.913", %"class.std::__1::unordered_map.913"* %169, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %362 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %361, align 8
  %363 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %362, i64 %360
  %364 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %363, align 8
  %365 = icmp eq %"struct.std::__1::__hash_node_base.918"* %364, null
  br i1 %365, label %366, label %392

366:                                              ; preds = %358
  %367 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %166, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %368 = bitcast %"struct.std::__1::__hash_node_base.918"* %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast i8* %276 to i64*
  store i64 %369, i64* %370, align 8
  %371 = bitcast %"struct.std::__1::__hash_node_base.918"* %367 to i8**
  store i8* %276, i8** %371, align 8
  store %"struct.std::__1::__hash_node_base.918"* %367, %"struct.std::__1::__hash_node_base.918"** %363, align 8
  %372 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %283, align 8
  %373 = icmp eq %"struct.std::__1::__hash_node_base.918"* %372, null
  br i1 %373, label %399, label %374

374:                                              ; preds = %366
  %375 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %372, i64 1
  %376 = bitcast %"struct.std::__1::__hash_node_base.918"* %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = call i64 @llvm.ctpop.i64(i64 %359) #11, !range !16
  %379 = icmp ugt i64 %378, 1
  br i1 %379, label %383, label %380

380:                                              ; preds = %374
  %381 = add i64 %359, -1
  %382 = and i64 %377, %381
  br label %387

383:                                              ; preds = %374
  %384 = icmp ult i64 %377, %359
  br i1 %384, label %387, label %385

385:                                              ; preds = %383
  %386 = urem i64 %377, %359
  br label %387

387:                                              ; preds = %385, %383, %380
  %388 = phi i64 [ %382, %380 ], [ %386, %385 ], [ %377, %383 ]
  %389 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %361, align 8
  %390 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %389, i64 %388
  %391 = bitcast %"struct.std::__1::__hash_node_base.918"** %390 to i8**
  br label %397

392:                                              ; preds = %358
  %393 = bitcast %"struct.std::__1::__hash_node_base.918"* %364 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = bitcast i8* %276 to i64*
  store i64 %394, i64* %395, align 8
  %396 = bitcast %"struct.std::__1::__hash_node_base.918"* %364 to i8**
  br label %397

397:                                              ; preds = %387, %392
  %398 = phi i8** [ %396, %392 ], [ %391, %387 ]
  store i8* %276, i8** %398, align 8
  br label %399

399:                                              ; preds = %397, %366
  %400 = load i64, i64* %284, align 8
  %401 = add i64 %400, 1
  store i64 %401, i64* %284, align 8
  %402 = bitcast i8* %279 to %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"**
  %403 = load %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"*, %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"** %402, align 8
  br label %412

404:                                              ; preds = %269
  %405 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %252, i64 3
  %406 = bitcast %"struct.std::__1::__hash_node_base.918"* %405 to %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"**
  %407 = load %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"*, %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"** %406, align 8
  call void @_ZdlPv(i8* nonnull %223) #10
  br label %412

408:                                              ; preds = %213
  %409 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %198, i64 3
  %410 = bitcast %"struct.std::__1::__hash_node_base.918"* %409 to %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"**
  %411 = load %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"*, %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"** %410, align 8
  br label %412

412:                                              ; preds = %408, %404, %399
  %413 = phi %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* [ %411, %408 ], [ %407, %404 ], [ %403, %399 ]
  %414 = getelementptr inbounds i32, i32* %167, i64 1
  %415 = icmp eq i32* %414, %159
  br i1 %415, label %160, label %165

416:                                              ; preds = %160
  %417 = load i8, i8* %86, align 1, !range !12
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %424, label %419

419:                                              ; preds = %416
  %420 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 3
  %421 = load i8, i8* %420, align 4, !range !12
  %422 = zext i8 %421 to i32
  %423 = call i32 @_ZNK8spvtools3opt11Instruction20GetSingleWordOperandEj(%"class.spvtools::opt::Instruction"* nonnull %48, i32 %422) #11
  br label %424

424:                                              ; preds = %419, %416
  %425 = phi i32 [ %423, %419 ], [ 0, %416 ]
  store i32 %425, i32* %162, align 8
  br label %426

426:                                              ; preds = %424, %160
  %427 = phi i32 [ %425, %424 ], [ %163, %160 ]
  %428 = load i32*, i32** %22, align 8
  %429 = icmp eq i32* %428, null
  br i1 %429, label %433, label %430

430:                                              ; preds = %426
  %431 = ptrtoint i32* %428 to i64
  store i64 %431, i64* %25, align 8
  %432 = bitcast i32* %428 to i8*
  call void @_ZdlPv(i8* %432) #10
  br label %433

433:                                              ; preds = %426, %430
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #11
  %434 = load i8, i8* %86, align 1, !range !12
  %435 = icmp eq i8 %434, 0
  br i1 %435, label %441, label %436

436:                                              ; preds = %433
  %437 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 3
  %438 = load i8, i8* %437, align 4, !range !12
  %439 = zext i8 %438 to i32
  %440 = call i32 @_ZNK8spvtools3opt11Instruction20GetSingleWordOperandEj(%"class.spvtools::opt::Instruction"* nonnull %48, i32 %439) #11
  br label %441

441:                                              ; preds = %433, %436
  %442 = phi i32 [ %440, %436 ], [ 0, %433 ]
  %443 = icmp eq i32 %427, %442
  br i1 %443, label %458, label %444

444:                                              ; preds = %441
  %445 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %9, align 8
  %446 = load i8, i8* %86, align 1, !range !12
  %447 = icmp eq i8 %446, 0
  br i1 %447, label %453, label %448

448:                                              ; preds = %444
  %449 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %48, i64 0, i32 3
  %450 = load i8, i8* %449, align 4, !range !12
  %451 = zext i8 %450 to i32
  %452 = call i32 @_ZNK8spvtools3opt11Instruction20GetSingleWordOperandEj(%"class.spvtools::opt::Instruction"* nonnull %48, i32 %451) #11
  br label %453

453:                                              ; preds = %444, %448
  %454 = phi i32 [ %452, %448 ], [ 0, %444 ]
  %455 = call zeroext i1 @_ZN8spvtools3opt9IRContext18ReplaceAllUsesWithEjj(%"class.spvtools::opt::IRContext"* %445, i32 %454, i32 %427) #11
  %456 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %9, align 8
  %457 = call %"class.spvtools::opt::Instruction"* @_ZN8spvtools3opt9IRContext8KillInstEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"* %456, %"class.spvtools::opt::Instruction"* nonnull %48) #11
  br label %458

458:                                              ; preds = %453, %441, %102, %103
  %459 = phi i8 [ %49, %102 ], [ %49, %103 ], [ 1, %453 ], [ %49, %441 ]
  %460 = icmp eq %"class.spvtools::opt::Instruction"* %51, null
  %461 = or i1 %460, %54
  br i1 %461, label %29, label %462

462:                                              ; preds = %458
  %463 = load %"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::IRContext"** %9, align 8
  br label %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK8spvtools3opt8analysis13DefUseManager14GetAnnotationsEj(%"class.std::__1::vector.940"* sret, %"class.spvtools::opt::analysis::DefUseManager"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN8spvtools3opt9IRContext18ReplaceAllUsesWithEjj(%"class.spvtools::opt::IRContext"*, i32, i32) local_unnamed_addr #2

declare %"class.spvtools::opt::Instruction"* @_ZN8spvtools3opt9IRContext8KillInstEPNS0_11InstructionE(%"class.spvtools::opt::IRContext"*, %"class.spvtools::opt::Instruction"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt4PassD2Ev(%"class.spvtools::opt::Pass"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::opt::Pass", %"class.spvtools::opt::Pass"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN8spvtools3opt4PassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::opt::Pass", %"class.spvtools::opt::Pass"* %0, i64 0, i32 1, i32 0, i32 2
  %4 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %4, i64 0, i32 1
  %6 = load void (i8*)*, void (i8*)** %5, align 8
  %7 = icmp eq void (i8*)* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.spvtools::opt::Pass", %"class.spvtools::opt::Pass"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void %6(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt17UnifyConstantPassD0Ev(%"class.spvtools::opt::UnifyConstantPass"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.spvtools::opt::UnifyConstantPass", %"class.spvtools::opt::UnifyConstantPass"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN8spvtools3opt4PassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.spvtools::opt::UnifyConstantPass", %"class.spvtools::opt::UnifyConstantPass"* %0, i64 0, i32 0, i32 1, i32 0, i32 2
  %4 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %4, i64 0, i32 1
  %6 = load void (i8*)*, void (i8*)** %5, align 8
  %7 = icmp eq void (i8*)* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.spvtools::opt::UnifyConstantPass", %"class.spvtools::opt::UnifyConstantPass"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void %6(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %8
  %12 = bitcast %"class.spvtools::opt::UnifyConstantPass"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK8spvtools3opt17UnifyConstantPass4nameEv(%"class.spvtools::opt::UnifyConstantPass"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN8spvtools3opt4Pass20GetPreservedAnalysesEv(%"class.spvtools::opt::Pass"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN8spvtools3opt8analysis13DefUseManager13AnalyzeDefUseEPNS0_6ModuleE(%"class.spvtools::opt::analysis::DefUseManager"*, %"class.spvtools::opt::Module"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__114default_deleteIN8spvtools3opt8analysis13DefUseManagerEEclEPS4_(%"struct.std::__1::default_delete.120"*, %"class.spvtools::opt::analysis::DefUseManager"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.spvtools::opt::analysis::DefUseManager"* %1, null
  br i1 %3, label %52, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.spvtools::opt::analysis::DefUseManager", %"class.spvtools::opt::analysis::DefUseManager"* %1, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %6 = load %"struct.std::__1::__hash_node_base.96"*, %"struct.std::__1::__hash_node_base.96"** %5, align 8
  %7 = icmp eq %"struct.std::__1::__hash_node_base.96"* %6, null
  br i1 %7, label %24, label %8

8:                                                ; preds = %4, %21
  %9 = phi %"struct.std::__1::__hash_node_base.96"* [ %11, %21 ], [ %6, %4 ]
  %10 = getelementptr inbounds %"struct.std::__1::__hash_node_base.96", %"struct.std::__1::__hash_node_base.96"* %9, i64 0, i32 0
  %11 = load %"struct.std::__1::__hash_node_base.96"*, %"struct.std::__1::__hash_node_base.96"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__hash_node_base.96", %"struct.std::__1::__hash_node_base.96"* %9, i64 3
  %13 = bitcast %"struct.std::__1::__hash_node_base.96"* %12 to i32**
  %14 = load i32*, i32** %13, align 8
  %15 = icmp eq i32* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %8
  %17 = ptrtoint i32* %14 to i64
  %18 = getelementptr inbounds %"struct.std::__1::__hash_node_base.96", %"struct.std::__1::__hash_node_base.96"* %9, i64 4
  %19 = bitcast %"struct.std::__1::__hash_node_base.96"* %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = bitcast i32* %14 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %16, %8
  %22 = bitcast %"struct.std::__1::__hash_node_base.96"* %9 to i8*
  tail call void @_ZdlPv(i8* %22) #10
  %23 = icmp eq %"struct.std::__1::__hash_node_base.96"* %11, null
  br i1 %23, label %24, label %8

24:                                               ; preds = %21, %4
  %25 = getelementptr inbounds %"class.spvtools::opt::analysis::DefUseManager", %"class.spvtools::opt::analysis::DefUseManager"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load %"struct.std::__1::__hash_node_base.96"**, %"struct.std::__1::__hash_node_base.96"*** %25, align 8
  store %"struct.std::__1::__hash_node_base.96"** null, %"struct.std::__1::__hash_node_base.96"*** %25, align 8
  %27 = icmp eq %"struct.std::__1::__hash_node_base.96"** %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = bitcast %"struct.std::__1::__hash_node_base.96"** %26 to i8*
  tail call void @_ZdlPv(i8* %29) #10
  br label %30

30:                                               ; preds = %28, %24
  %31 = getelementptr inbounds %"class.spvtools::opt::analysis::DefUseManager", %"class.spvtools::opt::analysis::DefUseManager"* %1, i64 0, i32 1, i32 0
  %32 = getelementptr inbounds %"class.spvtools::opt::analysis::DefUseManager", %"class.spvtools::opt::analysis::DefUseManager"* %1, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %33 = bitcast %"class.std::__1::__tree_end_node"* %32 to %"class.std::__1::__tree_node"**
  %34 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %33, align 8
  tail call void @_ZNSt3__16__treeINS_4pairIPN8spvtools3opt11InstructionES5_EENS3_8analysis13UserEntryLessENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"* %31, %"class.std::__1::__tree_node"* %34) #11
  %35 = getelementptr inbounds %"class.spvtools::opt::analysis::DefUseManager", %"class.spvtools::opt::analysis::DefUseManager"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %36 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %35, align 8
  %37 = icmp eq %"struct.std::__1::__hash_node_base"* %36, null
  br i1 %37, label %44, label %38

38:                                               ; preds = %30, %38
  %39 = phi %"struct.std::__1::__hash_node_base"* [ %41, %38 ], [ %36, %30 ]
  %40 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %39, i64 0, i32 0
  %41 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %40, align 8
  %42 = bitcast %"struct.std::__1::__hash_node_base"* %39 to i8*
  tail call void @_ZdlPv(i8* %42) #10
  %43 = icmp eq %"struct.std::__1::__hash_node_base"* %41, null
  br i1 %43, label %44, label %38

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %"class.spvtools::opt::analysis::DefUseManager", %"class.spvtools::opt::analysis::DefUseManager"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %45, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %45, align 8
  %47 = icmp eq %"struct.std::__1::__hash_node_base"** %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = bitcast %"struct.std::__1::__hash_node_base"** %46 to i8*
  tail call void @_ZdlPv(i8* %49) #10
  br label %50

50:                                               ; preds = %44, %48
  %51 = bitcast %"class.spvtools::opt::analysis::DefUseManager"* %1 to i8*
  tail call void @_ZdlPv(i8* %51) #10
  br label %52

52:                                               ; preds = %50, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_4pairIPN8spvtools3opt11InstructionES5_EENS3_8analysis13UserEntryLessENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_4pairIPN8spvtools3opt11InstructionES5_EENS3_8analysis13UserEntryLessENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #11
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_4pairIPN8spvtools3opt11InstructionES5_EENS3_8analysis13UserEntryLessENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #11
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void

11:                                               ; preds = %2
  ret void
}

declare i32 @_ZNK8spvtools3opt11Instruction20GetSingleWordOperandEj(%"class.spvtools::opt::Instruction"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPjEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector.3"*, i32*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint i32* %3 to i64
  %10 = ptrtoint i32* %2 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %555

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %188, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %9, %31
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = lshr exact i64 %32, 2
  %36 = bitcast i32* %19 to i8*
  %37 = bitcast i32* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %32, i1 false) #11
  %38 = getelementptr inbounds i32, i32* %19, i64 %35
  %39 = ptrtoint i32* %38 to i64
  br label %40

40:                                               ; preds = %34, %29
  %41 = phi i64 [ %39, %34 ], [ %20, %29 ]
  store i64 %41, i64* %24, align 8
  %42 = icmp sgt i64 %26, 0
  br i1 %42, label %43, label %555

43:                                               ; preds = %40
  %44 = inttoptr i64 %41 to i32*
  br label %45

45:                                               ; preds = %43, %25
  %46 = phi i64 [ %41, %43 ], [ %20, %25 ]
  %47 = phi i32* [ %44, %43 ], [ %19, %25 ]
  %48 = phi i32* [ %30, %43 ], [ %3, %25 ]
  %49 = getelementptr inbounds i32, i32* %1, i64 %12
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %46, %50
  %52 = ashr exact i64 %51, 2
  %53 = getelementptr inbounds i32, i32* %1, i64 %52
  %54 = icmp ult i32* %53, %19
  br i1 %54, label %55, label %168

55:                                               ; preds = %45
  %56 = sub nsw i64 0, %52
  %57 = getelementptr i32, i32* %19, i64 %56
  %58 = bitcast i32* %57 to i8*
  %59 = xor i64 %7, -1
  %60 = getelementptr i8, i8* %58, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = lshr i64 %61, 2
  %63 = add nuw nsw i64 %62, 1
  %64 = icmp ult i64 %63, 8
  br i1 %64, label %65, label %68

65:                                               ; preds = %163, %68, %55
  %66 = phi i32* [ %47, %68 ], [ %47, %55 ], [ %86, %163 ]
  %67 = phi i32* [ %53, %68 ], [ %53, %55 ], [ %87, %163 ]
  br label %176

68:                                               ; preds = %55
  %69 = sub nsw i64 0, %52
  %70 = getelementptr i32, i32* %19, i64 %69
  %71 = bitcast i32* %70 to i8*
  %72 = xor i64 %7, -1
  %73 = getelementptr i8, i8* %71, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = lshr i64 %74, 2
  %76 = add nuw nsw i64 %75, 1
  %77 = getelementptr i32, i32* %47, i64 %76
  %78 = add nsw i64 %52, %75
  %79 = add i64 %78, 1
  %80 = getelementptr i32, i32* %1, i64 %79
  %81 = icmp ult i32* %47, %80
  %82 = icmp ult i32* %53, %77
  %83 = and i1 %81, %82
  br i1 %83, label %65, label %84

84:                                               ; preds = %68
  %85 = and i64 %63, 9223372036854775800
  %86 = getelementptr i32, i32* %47, i64 %85
  %87 = getelementptr i32, i32* %53, i64 %85
  %88 = add nsw i64 %85, -8
  %89 = lshr exact i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp ult i64 %88, 24
  br i1 %92, label %144, label %93

93:                                               ; preds = %84
  %94 = sub nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %141, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %142, %95 ]
  %98 = getelementptr i32, i32* %47, i64 %96
  %99 = getelementptr i32, i32* %53, i64 %96
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !20
  %102 = getelementptr i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !20
  %105 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !23, !noalias !20
  %106 = getelementptr i32, i32* %98, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !alias.scope !23, !noalias !20
  %108 = or i64 %96, 8
  %109 = getelementptr i32, i32* %47, i64 %108
  %110 = getelementptr i32, i32* %53, i64 %108
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !20
  %113 = getelementptr i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !20
  %116 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !23, !noalias !20
  %117 = getelementptr i32, i32* %109, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 4, !alias.scope !23, !noalias !20
  %119 = or i64 %96, 16
  %120 = getelementptr i32, i32* %47, i64 %119
  %121 = getelementptr i32, i32* %53, i64 %119
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !20
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !20
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !23, !noalias !20
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !23, !noalias !20
  %130 = or i64 %96, 24
  %131 = getelementptr i32, i32* %47, i64 %130
  %132 = getelementptr i32, i32* %53, i64 %130
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !20
  %135 = getelementptr i32, i32* %132, i64 4
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4, !alias.scope !20
  %138 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %138, align 4, !alias.scope !23, !noalias !20
  %139 = getelementptr i32, i32* %131, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %140, align 4, !alias.scope !23, !noalias !20
  %141 = add i64 %96, 32
  %142 = add i64 %97, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %95, !llvm.loop !25

144:                                              ; preds = %95, %84
  %145 = phi i64 [ 0, %84 ], [ %141, %95 ]
  %146 = icmp eq i64 %91, 0
  br i1 %146, label %163, label %147

147:                                              ; preds = %144, %147
  %148 = phi i64 [ %160, %147 ], [ %145, %144 ]
  %149 = phi i64 [ %161, %147 ], [ %91, %144 ]
  %150 = getelementptr i32, i32* %47, i64 %148
  %151 = getelementptr i32, i32* %53, i64 %148
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !20
  %154 = getelementptr i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !20
  %157 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %157, align 4, !alias.scope !23, !noalias !20
  %158 = getelementptr i32, i32* %150, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %159, align 4, !alias.scope !23, !noalias !20
  %160 = add i64 %148, 8
  %161 = add i64 %149, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %147, !llvm.loop !27

163:                                              ; preds = %147, %144
  %164 = icmp eq i64 %63, %85
  br i1 %164, label %165, label %65

165:                                              ; preds = %176, %163
  %166 = phi i32* [ %86, %163 ], [ %181, %176 ]
  %167 = ptrtoint i32* %166 to i64
  br label %168

168:                                              ; preds = %165, %45
  %169 = phi i64 [ %167, %165 ], [ %46, %45 ]
  store i64 %169, i64* %24, align 8
  %170 = icmp eq i64 %51, 0
  br i1 %170, label %183, label %171

171:                                              ; preds = %168
  %172 = sub nsw i64 0, %52
  %173 = getelementptr inbounds i32, i32* %47, i64 %172
  %174 = bitcast i32* %173 to i8*
  %175 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %175, i64 %51, i1 false) #11
  br label %183

176:                                              ; preds = %65, %176
  %177 = phi i32* [ %181, %176 ], [ %66, %65 ]
  %178 = phi i32* [ %180, %176 ], [ %67, %65 ]
  %179 = load i32, i32* %178, align 4
  store i32 %179, i32* %177, align 4
  %180 = getelementptr inbounds i32, i32* %178, i64 1
  %181 = getelementptr inbounds i32, i32* %177, i64 1
  %182 = icmp ult i32* %180, %19
  br i1 %182, label %176, label %165, !llvm.loop !29

183:                                              ; preds = %168, %171
  %184 = ptrtoint i32* %48 to i64
  %185 = sub i64 %184, %10
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %555, label %187

187:                                              ; preds = %183
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %185, i1 false) #11
  br label %555

188:                                              ; preds = %14
  %189 = bitcast %"class.std::__1::vector.3"* %0 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = sub i64 %20, %190
  %192 = ashr exact i64 %191, 2
  %193 = add nsw i64 %192, %12
  %194 = icmp ugt i64 %193, 4611686018427387903
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = bitcast %"class.std::__1::vector.3"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %196) #12
  unreachable

197:                                              ; preds = %188
  %198 = sub i64 %17, %190
  %199 = ashr exact i64 %198, 2
  %200 = icmp ult i64 %199, 2305843009213693951
  br i1 %200, label %204, label %201

201:                                              ; preds = %197
  %202 = sub i64 %7, %190
  %203 = ashr exact i64 %202, 2
  br label %214

204:                                              ; preds = %197
  %205 = ashr exact i64 %198, 1
  %206 = icmp ult i64 %205, %193
  %207 = select i1 %206, i64 %193, i64 %205
  %208 = sub i64 %7, %190
  %209 = ashr exact i64 %208, 2
  %210 = icmp eq i64 %207, 0
  br i1 %210, label %220, label %211

211:                                              ; preds = %204
  %212 = icmp ugt i64 %207, 4611686018427387903
  br i1 %212, label %213, label %214

213:                                              ; preds = %211
  tail call void @abort() #12
  unreachable

214:                                              ; preds = %201, %211
  %215 = phi i64 [ 4611686018427387903, %201 ], [ %207, %211 ]
  %216 = phi i64 [ %203, %201 ], [ %209, %211 ]
  %217 = shl i64 %215, 2
  %218 = tail call i8* @_Znwm(i64 %217) #10
  %219 = bitcast i8* %218 to i32*
  br label %220

220:                                              ; preds = %214, %204
  %221 = phi i64 [ %216, %214 ], [ %209, %204 ]
  %222 = phi i64 [ %215, %214 ], [ 0, %204 ]
  %223 = phi i32* [ %219, %214 ], [ null, %204 ]
  %224 = getelementptr inbounds i32, i32* %223, i64 %221
  %225 = getelementptr inbounds i32, i32* %223, i64 %222
  %226 = ptrtoint i32* %225 to i64
  %227 = getelementptr inbounds i32, i32* %224, i64 %12
  %228 = add i64 %11, -4
  %229 = lshr i64 %228, 2
  %230 = add nuw nsw i64 %229, 1
  %231 = icmp ult i64 %230, 8
  br i1 %231, label %324, label %232

232:                                              ; preds = %220
  %233 = add i64 %11, -4
  %234 = lshr i64 %233, 2
  %235 = add nsw i64 %221, %234
  %236 = add i64 %235, 1
  %237 = getelementptr i32, i32* %223, i64 %236
  %238 = add nuw nsw i64 %234, 1
  %239 = getelementptr i32, i32* %2, i64 %238
  %240 = icmp ult i32* %224, %239
  %241 = icmp ugt i32* %237, %2
  %242 = and i1 %240, %241
  br i1 %242, label %324, label %243

243:                                              ; preds = %232
  %244 = and i64 %230, 9223372036854775800
  %245 = getelementptr i32, i32* %224, i64 %244
  %246 = getelementptr i32, i32* %2, i64 %244
  %247 = add nsw i64 %244, -8
  %248 = lshr exact i64 %247, 3
  %249 = add nuw nsw i64 %248, 1
  %250 = and i64 %249, 3
  %251 = icmp ult i64 %247, 24
  br i1 %251, label %303, label %252

252:                                              ; preds = %243
  %253 = sub nsw i64 %249, %250
  br label %254

254:                                              ; preds = %254, %252
  %255 = phi i64 [ 0, %252 ], [ %300, %254 ]
  %256 = phi i64 [ %253, %252 ], [ %301, %254 ]
  %257 = getelementptr i32, i32* %224, i64 %255
  %258 = getelementptr i32, i32* %2, i64 %255
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !30
  %261 = getelementptr i32, i32* %258, i64 4
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !30
  %264 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %264, align 4, !alias.scope !33, !noalias !30
  %265 = getelementptr i32, i32* %257, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %266, align 4, !alias.scope !33, !noalias !30
  %267 = or i64 %255, 8
  %268 = getelementptr i32, i32* %224, i64 %267
  %269 = getelementptr i32, i32* %2, i64 %267
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4, !alias.scope !30
  %272 = getelementptr i32, i32* %269, i64 4
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !30
  %275 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %275, align 4, !alias.scope !33, !noalias !30
  %276 = getelementptr i32, i32* %268, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %277, align 4, !alias.scope !33, !noalias !30
  %278 = or i64 %255, 16
  %279 = getelementptr i32, i32* %224, i64 %278
  %280 = getelementptr i32, i32* %2, i64 %278
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 4, !alias.scope !30
  %283 = getelementptr i32, i32* %280, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !30
  %286 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %286, align 4, !alias.scope !33, !noalias !30
  %287 = getelementptr i32, i32* %279, i64 4
  %288 = bitcast i32* %287 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %288, align 4, !alias.scope !33, !noalias !30
  %289 = or i64 %255, 24
  %290 = getelementptr i32, i32* %224, i64 %289
  %291 = getelementptr i32, i32* %2, i64 %289
  %292 = bitcast i32* %291 to <4 x i32>*
  %293 = load <4 x i32>, <4 x i32>* %292, align 4, !alias.scope !30
  %294 = getelementptr i32, i32* %291, i64 4
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4, !alias.scope !30
  %297 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %293, <4 x i32>* %297, align 4, !alias.scope !33, !noalias !30
  %298 = getelementptr i32, i32* %290, i64 4
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %299, align 4, !alias.scope !33, !noalias !30
  %300 = add i64 %255, 32
  %301 = add i64 %256, -4
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %254, !llvm.loop !35

303:                                              ; preds = %254, %243
  %304 = phi i64 [ 0, %243 ], [ %300, %254 ]
  %305 = icmp eq i64 %250, 0
  br i1 %305, label %322, label %306

306:                                              ; preds = %303, %306
  %307 = phi i64 [ %319, %306 ], [ %304, %303 ]
  %308 = phi i64 [ %320, %306 ], [ %250, %303 ]
  %309 = getelementptr i32, i32* %224, i64 %307
  %310 = getelementptr i32, i32* %2, i64 %307
  %311 = bitcast i32* %310 to <4 x i32>*
  %312 = load <4 x i32>, <4 x i32>* %311, align 4, !alias.scope !30
  %313 = getelementptr i32, i32* %310, i64 4
  %314 = bitcast i32* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 4, !alias.scope !30
  %316 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %316, align 4, !alias.scope !33, !noalias !30
  %317 = getelementptr i32, i32* %309, i64 4
  %318 = bitcast i32* %317 to <4 x i32>*
  store <4 x i32> %315, <4 x i32>* %318, align 4, !alias.scope !33, !noalias !30
  %319 = add i64 %307, 8
  %320 = add i64 %308, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %306, !llvm.loop !36

322:                                              ; preds = %306, %303
  %323 = icmp eq i64 %230, %244
  br i1 %323, label %378, label %324

324:                                              ; preds = %322, %232, %220
  %325 = phi i32* [ %224, %232 ], [ %224, %220 ], [ %245, %322 ]
  %326 = phi i32* [ %2, %232 ], [ %2, %220 ], [ %246, %322 ]
  %327 = ptrtoint i32* %325 to i64
  %328 = add nsw i64 %221, %12
  %329 = add nsw i64 %328, -1
  %330 = getelementptr i32, i32* %223, i64 %329
  %331 = ptrtoint i32* %330 to i64
  %332 = sub i64 %331, %327
  %333 = lshr i64 %332, 2
  %334 = add nuw nsw i64 %333, 1
  %335 = and i64 %334, 7
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %346, label %337

337:                                              ; preds = %324, %337
  %338 = phi i32* [ %342, %337 ], [ %325, %324 ]
  %339 = phi i32* [ %343, %337 ], [ %326, %324 ]
  %340 = phi i64 [ %344, %337 ], [ %335, %324 ]
  %341 = load i32, i32* %339, align 4
  store i32 %341, i32* %338, align 4
  %342 = getelementptr inbounds i32, i32* %338, i64 1
  %343 = getelementptr inbounds i32, i32* %339, i64 1
  %344 = add i64 %340, -1
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %346, label %337, !llvm.loop !37

346:                                              ; preds = %337, %324
  %347 = phi i32* [ %325, %324 ], [ %342, %337 ]
  %348 = phi i32* [ %326, %324 ], [ %343, %337 ]
  %349 = icmp ult i64 %332, 28
  br i1 %349, label %378, label %350

350:                                              ; preds = %346, %350
  %351 = phi i32* [ %375, %350 ], [ %347, %346 ]
  %352 = phi i32* [ %376, %350 ], [ %348, %346 ]
  %353 = load i32, i32* %352, align 4
  store i32 %353, i32* %351, align 4
  %354 = getelementptr inbounds i32, i32* %351, i64 1
  %355 = getelementptr inbounds i32, i32* %352, i64 1
  %356 = load i32, i32* %355, align 4
  store i32 %356, i32* %354, align 4
  %357 = getelementptr inbounds i32, i32* %351, i64 2
  %358 = getelementptr inbounds i32, i32* %352, i64 2
  %359 = load i32, i32* %358, align 4
  store i32 %359, i32* %357, align 4
  %360 = getelementptr inbounds i32, i32* %351, i64 3
  %361 = getelementptr inbounds i32, i32* %352, i64 3
  %362 = load i32, i32* %361, align 4
  store i32 %362, i32* %360, align 4
  %363 = getelementptr inbounds i32, i32* %351, i64 4
  %364 = getelementptr inbounds i32, i32* %352, i64 4
  %365 = load i32, i32* %364, align 4
  store i32 %365, i32* %363, align 4
  %366 = getelementptr inbounds i32, i32* %351, i64 5
  %367 = getelementptr inbounds i32, i32* %352, i64 5
  %368 = load i32, i32* %367, align 4
  store i32 %368, i32* %366, align 4
  %369 = getelementptr inbounds i32, i32* %351, i64 6
  %370 = getelementptr inbounds i32, i32* %352, i64 6
  %371 = load i32, i32* %370, align 4
  store i32 %371, i32* %369, align 4
  %372 = getelementptr inbounds i32, i32* %351, i64 7
  %373 = getelementptr inbounds i32, i32* %352, i64 7
  %374 = load i32, i32* %373, align 4
  store i32 %374, i32* %372, align 4
  %375 = getelementptr inbounds i32, i32* %351, i64 8
  %376 = getelementptr inbounds i32, i32* %352, i64 8
  %377 = icmp eq i32* %227, %375
  br i1 %377, label %378, label %350, !llvm.loop !38

378:                                              ; preds = %346, %350, %322
  %379 = load i32*, i32** %8, align 8
  %380 = ptrtoint i32* %379 to i64
  %381 = sub i64 %7, %380
  %382 = ashr exact i64 %381, 2
  %383 = sub nsw i64 0, %382
  %384 = getelementptr inbounds i32, i32* %224, i64 %383
  %385 = ptrtoint i32* %384 to i64
  %386 = icmp sgt i64 %381, 0
  br i1 %386, label %387, label %390

387:                                              ; preds = %378
  %388 = bitcast i32* %384 to i8*
  %389 = bitcast i32* %379 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %388, i8* align 4 %389, i64 %381, i1 false) #11
  br label %390

390:                                              ; preds = %387, %378
  %391 = load i32*, i32** %18, align 8
  %392 = icmp eq i32* %391, %1
  br i1 %392, label %548, label %393

393:                                              ; preds = %390
  %394 = getelementptr i32, i32* %391, i64 -1
  %395 = ptrtoint i32* %394 to i64
  %396 = sub i64 %395, %7
  %397 = lshr i64 %396, 2
  %398 = add nuw nsw i64 %397, 1
  %399 = icmp ult i64 %398, 8
  br i1 %399, label %495, label %400

400:                                              ; preds = %393
  %401 = add nsw i64 %221, %12
  %402 = getelementptr i32, i32* %391, i64 -1
  %403 = ptrtoint i32* %402 to i64
  %404 = sub i64 %403, %7
  %405 = lshr i64 %404, 2
  %406 = add nsw i64 %401, %405
  %407 = add i64 %406, 1
  %408 = getelementptr i32, i32* %223, i64 %407
  %409 = add nuw nsw i64 %405, 1
  %410 = getelementptr i32, i32* %1, i64 %409
  %411 = icmp ult i32* %227, %410
  %412 = icmp ugt i32* %408, %1
  %413 = and i1 %411, %412
  br i1 %413, label %495, label %414

414:                                              ; preds = %400
  %415 = and i64 %398, 9223372036854775800
  %416 = getelementptr i32, i32* %227, i64 %415
  %417 = getelementptr i32, i32* %1, i64 %415
  %418 = add nsw i64 %415, -8
  %419 = lshr exact i64 %418, 3
  %420 = add nuw nsw i64 %419, 1
  %421 = and i64 %420, 3
  %422 = icmp ult i64 %418, 24
  br i1 %422, label %474, label %423

423:                                              ; preds = %414
  %424 = sub nsw i64 %420, %421
  br label %425

425:                                              ; preds = %425, %423
  %426 = phi i64 [ 0, %423 ], [ %471, %425 ]
  %427 = phi i64 [ %424, %423 ], [ %472, %425 ]
  %428 = getelementptr i32, i32* %227, i64 %426
  %429 = getelementptr i32, i32* %1, i64 %426
  %430 = bitcast i32* %429 to <4 x i32>*
  %431 = load <4 x i32>, <4 x i32>* %430, align 4, !alias.scope !39
  %432 = getelementptr i32, i32* %429, i64 4
  %433 = bitcast i32* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 4, !alias.scope !39
  %435 = bitcast i32* %428 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %435, align 4, !alias.scope !42, !noalias !39
  %436 = getelementptr i32, i32* %428, i64 4
  %437 = bitcast i32* %436 to <4 x i32>*
  store <4 x i32> %434, <4 x i32>* %437, align 4, !alias.scope !42, !noalias !39
  %438 = or i64 %426, 8
  %439 = getelementptr i32, i32* %227, i64 %438
  %440 = getelementptr i32, i32* %1, i64 %438
  %441 = bitcast i32* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 4, !alias.scope !39
  %443 = getelementptr i32, i32* %440, i64 4
  %444 = bitcast i32* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 4, !alias.scope !39
  %446 = bitcast i32* %439 to <4 x i32>*
  store <4 x i32> %442, <4 x i32>* %446, align 4, !alias.scope !42, !noalias !39
  %447 = getelementptr i32, i32* %439, i64 4
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %445, <4 x i32>* %448, align 4, !alias.scope !42, !noalias !39
  %449 = or i64 %426, 16
  %450 = getelementptr i32, i32* %227, i64 %449
  %451 = getelementptr i32, i32* %1, i64 %449
  %452 = bitcast i32* %451 to <4 x i32>*
  %453 = load <4 x i32>, <4 x i32>* %452, align 4, !alias.scope !39
  %454 = getelementptr i32, i32* %451, i64 4
  %455 = bitcast i32* %454 to <4 x i32>*
  %456 = load <4 x i32>, <4 x i32>* %455, align 4, !alias.scope !39
  %457 = bitcast i32* %450 to <4 x i32>*
  store <4 x i32> %453, <4 x i32>* %457, align 4, !alias.scope !42, !noalias !39
  %458 = getelementptr i32, i32* %450, i64 4
  %459 = bitcast i32* %458 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %459, align 4, !alias.scope !42, !noalias !39
  %460 = or i64 %426, 24
  %461 = getelementptr i32, i32* %227, i64 %460
  %462 = getelementptr i32, i32* %1, i64 %460
  %463 = bitcast i32* %462 to <4 x i32>*
  %464 = load <4 x i32>, <4 x i32>* %463, align 4, !alias.scope !39
  %465 = getelementptr i32, i32* %462, i64 4
  %466 = bitcast i32* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 4, !alias.scope !39
  %468 = bitcast i32* %461 to <4 x i32>*
  store <4 x i32> %464, <4 x i32>* %468, align 4, !alias.scope !42, !noalias !39
  %469 = getelementptr i32, i32* %461, i64 4
  %470 = bitcast i32* %469 to <4 x i32>*
  store <4 x i32> %467, <4 x i32>* %470, align 4, !alias.scope !42, !noalias !39
  %471 = add i64 %426, 32
  %472 = add i64 %427, -4
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %474, label %425, !llvm.loop !44

474:                                              ; preds = %425, %414
  %475 = phi i64 [ 0, %414 ], [ %471, %425 ]
  %476 = icmp eq i64 %421, 0
  br i1 %476, label %493, label %477

477:                                              ; preds = %474, %477
  %478 = phi i64 [ %490, %477 ], [ %475, %474 ]
  %479 = phi i64 [ %491, %477 ], [ %421, %474 ]
  %480 = getelementptr i32, i32* %227, i64 %478
  %481 = getelementptr i32, i32* %1, i64 %478
  %482 = bitcast i32* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 4, !alias.scope !39
  %484 = getelementptr i32, i32* %481, i64 4
  %485 = bitcast i32* %484 to <4 x i32>*
  %486 = load <4 x i32>, <4 x i32>* %485, align 4, !alias.scope !39
  %487 = bitcast i32* %480 to <4 x i32>*
  store <4 x i32> %483, <4 x i32>* %487, align 4, !alias.scope !42, !noalias !39
  %488 = getelementptr i32, i32* %480, i64 4
  %489 = bitcast i32* %488 to <4 x i32>*
  store <4 x i32> %486, <4 x i32>* %489, align 4, !alias.scope !42, !noalias !39
  %490 = add i64 %478, 8
  %491 = add i64 %479, -1
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %477, !llvm.loop !45

493:                                              ; preds = %477, %474
  %494 = icmp eq i64 %398, %415
  br i1 %494, label %548, label %495

495:                                              ; preds = %493, %400, %393
  %496 = phi i32* [ %227, %400 ], [ %227, %393 ], [ %416, %493 ]
  %497 = phi i32* [ %1, %400 ], [ %1, %393 ], [ %417, %493 ]
  %498 = ptrtoint i32* %497 to i64
  %499 = getelementptr i32, i32* %391, i64 -1
  %500 = ptrtoint i32* %499 to i64
  %501 = sub i64 %500, %498
  %502 = lshr i64 %501, 2
  %503 = add nuw nsw i64 %502, 1
  %504 = and i64 %503, 7
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %515, label %506

506:                                              ; preds = %495, %506
  %507 = phi i32* [ %512, %506 ], [ %496, %495 ]
  %508 = phi i32* [ %511, %506 ], [ %497, %495 ]
  %509 = phi i64 [ %513, %506 ], [ %504, %495 ]
  %510 = load i32, i32* %508, align 4
  store i32 %510, i32* %507, align 4
  %511 = getelementptr inbounds i32, i32* %508, i64 1
  %512 = getelementptr inbounds i32, i32* %507, i64 1
  %513 = add i64 %509, -1
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %515, label %506, !llvm.loop !46

515:                                              ; preds = %506, %495
  %516 = phi i32* [ undef, %495 ], [ %512, %506 ]
  %517 = phi i32* [ %496, %495 ], [ %512, %506 ]
  %518 = phi i32* [ %497, %495 ], [ %511, %506 ]
  %519 = icmp ult i64 %501, 28
  br i1 %519, label %548, label %520

520:                                              ; preds = %515, %520
  %521 = phi i32* [ %546, %520 ], [ %517, %515 ]
  %522 = phi i32* [ %545, %520 ], [ %518, %515 ]
  %523 = load i32, i32* %522, align 4
  store i32 %523, i32* %521, align 4
  %524 = getelementptr inbounds i32, i32* %522, i64 1
  %525 = getelementptr inbounds i32, i32* %521, i64 1
  %526 = load i32, i32* %524, align 4
  store i32 %526, i32* %525, align 4
  %527 = getelementptr inbounds i32, i32* %522, i64 2
  %528 = getelementptr inbounds i32, i32* %521, i64 2
  %529 = load i32, i32* %527, align 4
  store i32 %529, i32* %528, align 4
  %530 = getelementptr inbounds i32, i32* %522, i64 3
  %531 = getelementptr inbounds i32, i32* %521, i64 3
  %532 = load i32, i32* %530, align 4
  store i32 %532, i32* %531, align 4
  %533 = getelementptr inbounds i32, i32* %522, i64 4
  %534 = getelementptr inbounds i32, i32* %521, i64 4
  %535 = load i32, i32* %533, align 4
  store i32 %535, i32* %534, align 4
  %536 = getelementptr inbounds i32, i32* %522, i64 5
  %537 = getelementptr inbounds i32, i32* %521, i64 5
  %538 = load i32, i32* %536, align 4
  store i32 %538, i32* %537, align 4
  %539 = getelementptr inbounds i32, i32* %522, i64 6
  %540 = getelementptr inbounds i32, i32* %521, i64 6
  %541 = load i32, i32* %539, align 4
  store i32 %541, i32* %540, align 4
  %542 = getelementptr inbounds i32, i32* %522, i64 7
  %543 = getelementptr inbounds i32, i32* %521, i64 7
  %544 = load i32, i32* %542, align 4
  store i32 %544, i32* %543, align 4
  %545 = getelementptr inbounds i32, i32* %522, i64 8
  %546 = getelementptr inbounds i32, i32* %521, i64 8
  %547 = icmp eq i32* %545, %391
  br i1 %547, label %548, label %520, !llvm.loop !47

548:                                              ; preds = %515, %520, %493, %390
  %549 = phi i32* [ %227, %390 ], [ %416, %493 ], [ %516, %515 ], [ %546, %520 ]
  %550 = ptrtoint i32* %549 to i64
  %551 = load i32*, i32** %8, align 8
  store i64 %385, i64* %189, align 8
  store i64 %550, i64* %24, align 8
  store i64 %226, i64* %16, align 8
  %552 = icmp eq i32* %551, null
  br i1 %552, label %555, label %553

553:                                              ; preds = %548
  %554 = bitcast i32* %551 to i8*
  tail call void @_ZdlPv(i8* %554) #10
  br label %555

555:                                              ; preds = %553, %548, %40, %183, %187, %4
  %556 = phi i32* [ %1, %4 ], [ %1, %187 ], [ %1, %183 ], [ %1, %40 ], [ %224, %548 ], [ %224, %553 ]
  ret i32* %556
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm(%"class.std::__1::__hash_table.914"*, i64) unnamed_addr #0 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %133, label %4

4:                                                ; preds = %2
  %5 = icmp ugt i64 %1, 2305843009213693951
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  tail call void @abort() #12
  unreachable

7:                                                ; preds = %4
  %8 = shl i64 %1, 3
  %9 = tail call i8* @_Znwm(i64 %8) #10
  %10 = getelementptr inbounds %"class.std::__1::__hash_table.914", %"class.std::__1::__hash_table.914"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %12 = bitcast %"class.std::__1::__hash_table.914"* %0 to i8**
  store i8* %9, i8** %12, align 8
  %13 = icmp eq %"struct.std::__1::__hash_node_base.918"** %11, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %7
  %15 = bitcast %"struct.std::__1::__hash_node_base.918"** %11 to i8*
  tail call void @_ZdlPv(i8* %15) #10
  br label %16

16:                                               ; preds = %14, %7
  %17 = getelementptr inbounds %"class.std::__1::__hash_table.914", %"class.std::__1::__hash_table.914"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %17, align 8
  %18 = add i64 %1, -1
  %19 = and i64 %1, 3
  %20 = icmp ult i64 %18, 3
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = sub i64 %1, %19
  br label %39

23:                                               ; preds = %39, %16
  %24 = phi i64 [ 0, %16 ], [ %53, %39 ]
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %23, %26
  %27 = phi i64 [ %31, %26 ], [ %24, %23 ]
  %28 = phi i64 [ %32, %26 ], [ %19, %23 ]
  %29 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %30 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %29, i64 %27
  store %"struct.std::__1::__hash_node_base.918"* null, %"struct.std::__1::__hash_node_base.918"** %30, align 8
  %31 = add nuw i64 %27, 1
  %32 = add i64 %28, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %26, !llvm.loop !48

34:                                               ; preds = %26, %23
  %35 = getelementptr inbounds %"class.std::__1::__hash_table.914", %"class.std::__1::__hash_table.914"* %0, i64 0, i32 1, i32 0, i32 0
  %36 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %35, i64 0, i32 0
  %37 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %36, align 8
  %38 = icmp eq %"struct.std::__1::__hash_node_base.918"* %37, null
  br i1 %38, label %141, label %56

39:                                               ; preds = %39, %21
  %40 = phi i64 [ 0, %21 ], [ %53, %39 ]
  %41 = phi i64 [ %22, %21 ], [ %54, %39 ]
  %42 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %43 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %42, i64 %40
  store %"struct.std::__1::__hash_node_base.918"* null, %"struct.std::__1::__hash_node_base.918"** %43, align 8
  %44 = or i64 %40, 1
  %45 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %45, i64 %44
  store %"struct.std::__1::__hash_node_base.918"* null, %"struct.std::__1::__hash_node_base.918"** %46, align 8
  %47 = or i64 %40, 2
  %48 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %49 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %48, i64 %47
  store %"struct.std::__1::__hash_node_base.918"* null, %"struct.std::__1::__hash_node_base.918"** %49, align 8
  %50 = or i64 %40, 3
  %51 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %52 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %51, i64 %50
  store %"struct.std::__1::__hash_node_base.918"* null, %"struct.std::__1::__hash_node_base.918"** %52, align 8
  %53 = add nuw i64 %40, 4
  %54 = add i64 %41, -4
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %23, label %39

56:                                               ; preds = %34
  %57 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %37, i64 1
  %58 = bitcast %"struct.std::__1::__hash_node_base.918"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = tail call i64 @llvm.ctpop.i64(i64 %1) #11, !range !16
  %61 = icmp ugt i64 %60, 1
  br i1 %61, label %65, label %62

62:                                               ; preds = %56
  %63 = add i64 %1, -1
  %64 = and i64 %59, %63
  br label %69

65:                                               ; preds = %56
  %66 = icmp ult i64 %59, %1
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = urem i64 %59, %1
  br label %69

69:                                               ; preds = %62, %65, %67
  %70 = phi i64 [ %64, %62 ], [ %68, %67 ], [ %59, %65 ]
  %71 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %72 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %71, i64 %70
  store %"struct.std::__1::__hash_node_base.918"* %35, %"struct.std::__1::__hash_node_base.918"** %72, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %37, i64 0, i32 0
  %74 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %73, align 8
  %75 = icmp eq %"struct.std::__1::__hash_node_base.918"* %74, null
  br i1 %75, label %141, label %76

76:                                               ; preds = %69
  %77 = add i64 %1, -1
  br label %78

78:                                               ; preds = %76, %127
  %79 = phi %"struct.std::__1::__hash_node_base.918"* [ %74, %76 ], [ %131, %127 ]
  %80 = phi i64 [ %70, %76 ], [ %129, %127 ]
  %81 = phi %"struct.std::__1::__hash_node_base.918"* [ %37, %76 ], [ %128, %127 ]
  %82 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %79, i64 1
  %83 = bitcast %"struct.std::__1::__hash_node_base.918"* %82 to i64*
  %84 = load i64, i64* %83, align 8
  br i1 %61, label %87, label %85

85:                                               ; preds = %78
  %86 = and i64 %84, %77
  br label %91

87:                                               ; preds = %78
  %88 = icmp ult i64 %84, %1
  br i1 %88, label %91, label %89

89:                                               ; preds = %87
  %90 = urem i64 %84, %1
  br label %91

91:                                               ; preds = %85, %87, %89
  %92 = phi i64 [ %86, %85 ], [ %90, %89 ], [ %84, %87 ]
  %93 = icmp eq i64 %92, %80
  br i1 %93, label %127, label %94

94:                                               ; preds = %91
  %95 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %96 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %95, i64 %92
  %97 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %96, align 8
  %98 = icmp eq %"struct.std::__1::__hash_node_base.918"* %97, null
  br i1 %98, label %102, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %79, i64 2
  %101 = bitcast %"struct.std::__1::__hash_node_base.918"* %100 to i32*
  br label %103

102:                                              ; preds = %94
  store %"struct.std::__1::__hash_node_base.918"* %81, %"struct.std::__1::__hash_node_base.918"** %96, align 8
  br label %127

103:                                              ; preds = %99, %108
  %104 = phi %"struct.std::__1::__hash_node_base.918"* [ %106, %108 ], [ %79, %99 ]
  %105 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %104, i64 0, i32 0
  %106 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %105, align 8
  %107 = icmp eq %"struct.std::__1::__hash_node_base.918"* %106, null
  br i1 %107, label %114, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %106, i64 2
  %110 = bitcast %"struct.std::__1::__hash_node_base.918"* %109 to i32*
  %111 = load i32, i32* %101, align 4
  %112 = load i32, i32* %110, align 4
  %113 = icmp eq i32 %111, %112
  br i1 %113, label %103, label %114

114:                                              ; preds = %103, %108
  %115 = ptrtoint %"struct.std::__1::__hash_node_base.918"* %106 to i64
  %116 = bitcast %"struct.std::__1::__hash_node_base.918"* %104 to i64*
  %117 = bitcast %"struct.std::__1::__hash_node_base.918"* %81 to i64*
  store i64 %115, i64* %117, align 8
  %118 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %119 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %118, i64 %92
  %120 = bitcast %"struct.std::__1::__hash_node_base.918"** %119 to i64**
  %121 = load i64*, i64** %120, align 8
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %116, align 8
  %123 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %10, align 8
  %124 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %123, i64 %92
  %125 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %124, align 8
  %126 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %125, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.918"* %79, %"struct.std::__1::__hash_node_base.918"** %126, align 8
  br label %127

127:                                              ; preds = %91, %114, %102
  %128 = phi %"struct.std::__1::__hash_node_base.918"* [ %79, %102 ], [ %81, %114 ], [ %79, %91 ]
  %129 = phi i64 [ %92, %102 ], [ %80, %114 ], [ %80, %91 ]
  %130 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %128, i64 0, i32 0
  %131 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %130, align 8
  %132 = icmp eq %"struct.std::__1::__hash_node_base.918"* %131, null
  br i1 %132, label %141, label %78

133:                                              ; preds = %2
  %134 = getelementptr inbounds %"class.std::__1::__hash_table.914", %"class.std::__1::__hash_table.914"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %135 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %134, align 8
  store %"struct.std::__1::__hash_node_base.918"** null, %"struct.std::__1::__hash_node_base.918"*** %134, align 8
  %136 = icmp eq %"struct.std::__1::__hash_node_base.918"** %135, null
  br i1 %136, label %139, label %137

137:                                              ; preds = %133
  %138 = bitcast %"struct.std::__1::__hash_node_base.918"** %135 to i8*
  tail call void @_ZdlPv(i8* %138) #10
  br label %139

139:                                              ; preds = %133, %137
  %140 = getelementptr inbounds %"class.std::__1::__hash_table.914", %"class.std::__1::__hash_table.914"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %140, align 8
  br label %141

141:                                              ; preds = %127, %69, %34, %139
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeISB_PvEEEE(%"class.std::__1::__hash_table.914"* nocapture readnone, %"struct.std::__1::__hash_node_base.918"*) unnamed_addr #0 align 2 {
  %3 = icmp eq %"struct.std::__1::__hash_node_base.918"* %1, null
  br i1 %3, label %26, label %4

4:                                                ; preds = %2, %23
  %5 = phi %"struct.std::__1::__hash_node_base.918"* [ %7, %23 ], [ %1, %2 ]
  %6 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %5, i64 0, i32 0
  %7 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %6, align 8
  %8 = getelementptr inbounds %"struct.std::__1::__hash_node_base.918", %"struct.std::__1::__hash_node_base.918"* %5, i64 3
  %9 = bitcast %"struct.std::__1::__hash_node_base.918"* %8 to %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"**
  %10 = load %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"*, %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"** %9, align 8
  store %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* null, %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"** %9, align 8
  %11 = icmp eq %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %10, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %10, i64 0, i32 2, i32 0
  %14 = getelementptr inbounds %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node", %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %10, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"struct.std::__1::__hash_node_base.918"*, %"struct.std::__1::__hash_node_base.918"** %14, align 8
  tail call fastcc void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeISB_PvEEEE(%"class.std::__1::__hash_table.914"* %13, %"struct.std::__1::__hash_node_base.918"* %15) #11
  %16 = getelementptr inbounds %"class.std::__1::__hash_table.914", %"class.std::__1::__hash_table.914"* %13, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"struct.std::__1::__hash_node_base.918"**, %"struct.std::__1::__hash_node_base.918"*** %16, align 8
  store %"struct.std::__1::__hash_node_base.918"** null, %"struct.std::__1::__hash_node_base.918"*** %16, align 8
  %18 = icmp eq %"struct.std::__1::__hash_node_base.918"** %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = bitcast %"struct.std::__1::__hash_node_base.918"** %17 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %12, %19
  %22 = bitcast %"class.spvtools::opt::(anonymous namespace)::ResultIdTrie::Node"* %10 to i8*
  tail call void @_ZdlPv(i8* %22) #10
  br label %23

23:                                               ; preds = %4, %21
  %24 = bitcast %"struct.std::__1::__hash_node_base.918"* %5 to i8*
  tail call void @_ZdlPv(i8* %24) #10
  %25 = icmp eq %"struct.std::__1::__hash_node_base.918"* %7, null
  br i1 %25, label %26, label %4

26:                                               ; preds = %23, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8spvtools3opt4PassD0Ev(%"class.spvtools::opt::Pass"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8spvtools3opt9IRContext18types_values_beginEv: argument 0"}
!4 = distinct !{!4, !"_ZN8spvtools3opt9IRContext18types_values_beginEv"}
!5 = !{!6, !8, !10, !3}
!6 = distinct !{!6, !7, !"_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEE5beginEv: argument 0"}
!7 = distinct !{!7, !"_ZN8spvtools5utils13IntrusiveListINS_3opt11InstructionEE5beginEv"}
!8 = distinct !{!8, !9, !"_ZN8spvtools3opt15InstructionList5beginEv: argument 0"}
!9 = distinct !{!9, !"_ZN8spvtools3opt15InstructionList5beginEv"}
!10 = distinct !{!10, !11, !"_ZN8spvtools3opt6Module18types_values_beginEv: argument 0"}
!11 = distinct !{!11, !"_ZN8spvtools3opt6Module18types_values_beginEv"}
!12 = !{i8 0, i8 2}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN8spvtools3opt12_GLOBAL__N_112ResultIdTrie13GetLookUpKeysERKNS0_11InstructionE: argument 0"}
!15 = distinct !{!15, !"_ZN8spvtools3opt12_GLOBAL__N_112ResultIdTrie13GetLookUpKeysERKNS0_11InstructionE"}
!16 = !{i64 0, i64 65}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE21__construct_node_hashINS_4pairIjSA_EEJEEENS2_INS_11__hash_nodeISB_PvEENS_22__hash_node_destructorINSK_ISS_EEEEEEmOT_DpOT0_: argument 0"}
!19 = distinct !{!19, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIjNS_10unique_ptrIN8spvtools3opt12_GLOBAL__N_112ResultIdTrie4NodeENS_14default_deleteIS7_EEEEEENS_22__unordered_map_hasherIjSB_NS_4hashIjEENS_8equal_toIjEELb1EEENS_21__unordered_map_equalIjSB_SG_SE_Lb1EEENS_9allocatorISB_EEE21__construct_node_hashINS_4pairIjSA_EEJEEENS2_INS_11__hash_nodeISB_PvEENS_22__hash_node_destructorINSK_ISS_EEEEEEmOT_DpOT0_"}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.isvectorized", i32 1}
!27 = distinct !{!27, !28}
!28 = !{!"llvm.loop.unroll.disable"}
!29 = distinct !{!29, !26}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !26}
!36 = distinct !{!36, !28}
!37 = distinct !{!37, !28}
!38 = distinct !{!38, !26}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !26}
!45 = distinct !{!45, !28}
!46 = distinct !{!46, !28}
!47 = distinct !{!47, !26}
!48 = distinct !{!48, !28}
