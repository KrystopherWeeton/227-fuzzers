; ModuleID = '../../third_party/blink/renderer/core/paint/rounded_inner_rect_clipper.cc'
source_filename = "../../third_party/blink/renderer/core/paint/rounded_inner_rect_clipper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::RoundedInnerRectClipper" = type { %"class.blink::GraphicsContext"* }
%"class.blink::GraphicsContext" = type { %"class.cc::PaintCanvas"*, %"class.blink::PaintController"*, %"class.WTF::Vector", i32, %"class.blink::GraphicsContextState"*, %"class.cc::PaintRecorder", %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"*, float, %"class.std::__1::unique_ptr.85", i8, i8, i8, i32 }
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.blink::PaintController" = type opaque
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::GraphicsContextState"* }
%"class.blink::GraphicsContextState" = type <{ %"class.cc::PaintFlags", %"class.cc::PaintFlags", %"class.blink::StrokeData", i32, i32, i16, i8, [5 x i8] }>
%"class.cc::PaintFlags" = type <{ %class.sk_sp, %class.sk_sp.1, %class.sk_sp.43, %class.sk_sp.44, %class.sk_sp.45, %class.sk_sp.46, i32, float, float, i32, %union.anon.53, [4 x i8] }>
%class.sk_sp = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.1 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.9, i32, %"class.absl::optional.19", %"class.std::__1::vector.24", %"class.std::__1::vector.31", %class.sk_sp.38, %class.sk_sp.2, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.2, %class.sk_sp.9, %"class.gfx::Rect", i32, %class.sk_sp.14, %class.sk_sp.18, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.2, %class.scoped_refptr }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.14 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.3, i32, i32 }
%class.sk_sp.3 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.15" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.18 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%class.sk_sp.9 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.10", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i8* }
%"class.absl::optional.19" = type { %"class.absl::optional_internal::optional_data.20" }
%"class.absl::optional_internal::optional_data.20" = type { %"class.absl::optional_internal::optional_data_base.21" }
%"class.absl::optional_internal::optional_data_base.21" = type { %"class.absl::optional_internal::optional_data_dtor_base.22" }
%"class.absl::optional_internal::optional_data_dtor_base.22" = type { i8, %union.anon.23 }
%union.anon.23 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { i32*, i32*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i32* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { float*, float*, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { float* }
%class.sk_sp.38 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.39", [7 x i8] }>
%"struct.std::__1::atomic.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl.41" }
%"struct.std::__1::__cxx_atomic_impl.41" = type { %"struct.std::__1::__cxx_atomic_base_impl.42" }
%"struct.std::__1::__cxx_atomic_base_impl.42" = type { i8 }
%class.sk_sp.2 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.43 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.44 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.45 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.46 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.47, i32, %"class.absl::optional.48", i8, i32 }
%class.sk_sp.47 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { %struct.SkRect }
%union.anon.53 = type { i32 }
%"class.blink::StrokeData" = type { i32, float, i32, i32, float, %class.sk_sp }
%"class.cc::PaintRecorder" = type { i32 (...)**, %class.scoped_refptr.55, %"class.std::__1::unique_ptr.56" }
%class.scoped_refptr.55 = type { %"class.cc::DisplayItemList"* }
%"class.cc::DisplayItemList" = type opaque
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.cc::RecordPaintCanvas"* }
%"class.cc::RecordPaintCanvas" = type { %"class.cc::PaintCanvas", %"class.cc::DisplayItemList"*, %"class.absl::optional.59", %struct.SkRect }
%"class.absl::optional.59" = type { %"class.absl::optional_internal::optional_data.60" }
%"class.absl::optional_internal::optional_data.60" = type { %"class.absl::optional_internal::optional_data_base.61" }
%"class.absl::optional_internal::optional_data_base.61" = type { %"class.absl::optional_internal::optional_data_dtor_base.62" }
%"class.absl::optional_internal::optional_data_dtor_base.62" = type { i8, %union.anon.63 }
%union.anon.63 = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer }
%class.SkCanvasVirtualEnforcer = type { %class.SkCanvas }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.64, [384 x i64], %class.sk_sp.65, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.66", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.72" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.64 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.65 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::DarkModeFilter"* }
%"class.blink::DarkModeFilter" = type { %"struct.blink::DarkModeFilter::ImmutableData", %"class.absl::optional.106", %"class.std::__1::unique_ptr.111" }
%"struct.blink::DarkModeFilter::ImmutableData" = type { %"struct.blink::DarkModeSettings", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.100", %class.sk_sp.44 }
%"struct.blink::DarkModeSettings" = type <{ i32, i8, [3 x i8], float, float, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::DarkModeColorClassifier"* }
%"class.blink::DarkModeColorClassifier" = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::DarkModeImageClassifier"* }
%"class.blink::DarkModeImageClassifier" = type opaque
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.blink::DarkModeColorFilter"* }
%"class.blink::DarkModeColorFilter" = type opaque
%"class.absl::optional.106" = type { %"class.absl::optional_internal::optional_data.107" }
%"class.absl::optional_internal::optional_data.107" = type { %"class.absl::optional_internal::optional_data_base.108" }
%"class.absl::optional_internal::optional_data_base.108" = type { %"class.absl::optional_internal::optional_data_dtor_base.109" }
%"class.absl::optional_internal::optional_data_dtor_base.109" = type { i8, %union.anon.110 }
%union.anon.110 = type { i32 }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.blink::DarkModeInvertedColorCache"* }
%"class.blink::DarkModeInvertedColorCache" = type opaque
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.WTF::Vector.120" = type { %"class.WTF::VectorBuffer.121" }
%"class.WTF::VectorBuffer.121" = type { %"class.WTF::VectorBufferBase.122" }
%"class.WTF::VectorBufferBase.122" = type { %"class.blink::FloatRoundedRect"*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.127 }
%union.anon.127 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPS2_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatRoundedRectEEEmm = comdat any

$_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatRoundedRectEEEPKcv = private unnamed_addr constant [71 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::FloatRoundedRect]\00", align 1

@_ZN5blink23RoundedInnerRectClipperC1ERNS_15GraphicsContextERKNS_12PhysicalRectERKNS_16FloatRoundedRectE = hidden unnamed_addr alias void (%"class.blink::RoundedInnerRectClipper"*, %"class.blink::GraphicsContext"*, %"struct.blink::PhysicalRect"*, %"class.blink::FloatRoundedRect"*), void (%"class.blink::RoundedInnerRectClipper"*, %"class.blink::GraphicsContext"*, %"struct.blink::PhysicalRect"*, %"class.blink::FloatRoundedRect"*)* @_ZN5blink23RoundedInnerRectClipperC2ERNS_15GraphicsContextERKNS_12PhysicalRectERKNS_16FloatRoundedRectE
@_ZN5blink23RoundedInnerRectClipperD1Ev = hidden unnamed_addr alias void (%"class.blink::RoundedInnerRectClipper"*), void (%"class.blink::RoundedInnerRectClipper"*)* @_ZN5blink23RoundedInnerRectClipperD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23RoundedInnerRectClipperC2ERNS_15GraphicsContextERKNS_12PhysicalRectERKNS_16FloatRoundedRectE(%"class.blink::RoundedInnerRectClipper"* nocapture, %"class.blink::GraphicsContext"* dereferenceable(112), %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatRoundedRect"* dereferenceable(48)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Vector.120", align 8
  %6 = alloca %"class.blink::FloatRect", align 4
  %7 = alloca %"class.blink::FloatRoundedRect::Radii", align 8
  %8 = alloca %"class.blink::FloatRoundedRect", align 4
  %9 = alloca %"class.blink::FloatRect", align 4
  %10 = alloca %"class.blink::FloatRoundedRect::Radii", align 4
  %11 = alloca %"class.blink::FloatRoundedRect", align 4
  %12 = alloca %"class.blink::FloatRect", align 4
  %13 = alloca %"class.blink::FloatRoundedRect::Radii", align 4
  %14 = alloca %"class.blink::FloatRoundedRect", align 4
  %15 = alloca %"class.blink::FloatRect", align 4
  %16 = alloca %"class.blink::FloatRoundedRect::Radii", align 4
  %17 = alloca %"class.blink::FloatRoundedRect", align 4
  %18 = getelementptr inbounds %"class.blink::RoundedInnerRectClipper", %"class.blink::RoundedInnerRectClipper"* %0, i64 0, i32 0
  store %"class.blink::GraphicsContext"* %1, %"class.blink::GraphicsContext"** %18, align 8
  %19 = bitcast %"class.WTF::Vector.120"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #6
  %20 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %5, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %5, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 16, i1 false) #6
  %23 = tail call zeroext i1 @_ZNK5blink16FloatRoundedRect12IsRenderableEv(%"class.blink::FloatRoundedRect"* %3) #6
  br i1 %23, label %24, label %25

24:                                               ; preds = %4
  call void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector.120"* nonnull %5, %"class.blink::FloatRoundedRect"* dereferenceable(48) %3) #6
  br label %328

25:                                               ; preds = %4
  %26 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1
  %27 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %26, i64 0, i32 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = fcmp ugt float %28, 0.000000e+00
  br i1 %29, label %30, label %34

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = fcmp ugt float %32, 0.000000e+00
  br i1 %33, label %42, label %34

34:                                               ; preds = %30, %25
  %35 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 3, i32 0
  %36 = load float, float* %35, align 4
  %37 = fcmp ugt float %36, 0.000000e+00
  br i1 %37, label %38, label %177

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 3, i32 1
  %40 = load float, float* %39, align 4
  %41 = fcmp ugt float %40, 0.000000e+00
  br i1 %41, label %42, label %177

42:                                               ; preds = %30, %38
  %43 = bitcast %"class.blink::FloatRect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #6
  %44 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 1, i32 0
  %47 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 1, i32 1
  %48 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 0, i32 0
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 0
  %57 = select i1 %56, i32 -2147483648, i32 2147483647
  %58 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %53, i32 %55) #6
  %59 = extractvalue { i32, i1 } %58, 1
  %60 = extractvalue { i32, i1 } %58, 0
  %61 = select i1 %59, i32 %57, i32 %60, !prof !2
  %62 = sitofp i32 %61 to float
  %63 = fmul float %62, 1.562500e-02
  %64 = fsub float %63, %49
  %65 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 1, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 1, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %68, 0
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %66, i32 %68) #6
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  %75 = sitofp i32 %74 to float
  %76 = fmul float %75, 1.562500e-02
  %77 = fsub float %76, %51
  store float %49, float* %44, align 4
  store float %51, float* %45, align 4
  store float %64, float* %46, align 4
  store float %77, float* %47, align 4
  %78 = bitcast %"class.blink::FloatRoundedRect::Radii"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %78) #6
  %79 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %7, i64 0, i32 1
  %80 = bitcast %"class.blink::FloatSize"* %79 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 0, i64 24, i1 false) #6
  %81 = bitcast %"class.blink::FloatRoundedRect::Radii"* %26 to i64*
  %82 = bitcast %"class.blink::FloatRoundedRect::Radii"* %7 to i64*
  %83 = load i64, i64* %81, align 4
  store i64 %83, i64* %82, align 8
  %84 = bitcast %"class.blink::FloatRoundedRect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %84) #6
  call void @_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"* nonnull %8, %"class.blink::FloatRect"* nonnull dereferenceable(16) %6, %"class.blink::FloatRoundedRect::Radii"* nonnull dereferenceable(32) %7) #6
  %85 = load i32, i32* %22, align 4
  %86 = load i32, i32* %21, align 8
  %87 = icmp eq i32 %85, %86
  br i1 %87, label %115, label %88, !prof !2

88:                                               ; preds = %42
  %89 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %20, align 8
  %90 = zext i32 %85 to i64
  %91 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %89, i64 %90
  %92 = bitcast %"class.blink::FloatRoundedRect"* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* nonnull align 4 %84, i64 16, i1 false) #6
  %93 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %89, i64 %90, i32 1
  %94 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 0, i32 1
  %95 = bitcast %"class.blink::FloatRoundedRect::Radii"* %94 to i64*
  %96 = bitcast %"class.blink::FloatRoundedRect::Radii"* %93 to i64*
  %97 = load i64, i64* %95, align 4
  store i64 %97, i64* %96, align 4
  %98 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %89, i64 %90, i32 1, i32 1
  %99 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 0, i32 1, i32 1
  %100 = bitcast %"class.blink::FloatSize"* %99 to i64*
  %101 = bitcast %"class.blink::FloatSize"* %98 to i64*
  %102 = load i64, i64* %100, align 4
  store i64 %102, i64* %101, align 4
  %103 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %89, i64 %90, i32 1, i32 2
  %104 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 0, i32 1, i32 2
  %105 = bitcast %"class.blink::FloatSize"* %104 to i64*
  %106 = bitcast %"class.blink::FloatSize"* %103 to i64*
  %107 = load i64, i64* %105, align 4
  store i64 %107, i64* %106, align 4
  %108 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %89, i64 %90, i32 1, i32 3
  %109 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 0, i32 1, i32 3
  %110 = bitcast %"class.blink::FloatSize"* %109 to i64*
  %111 = bitcast %"class.blink::FloatSize"* %108 to i64*
  %112 = load i64, i64* %110, align 4
  store i64 %112, i64* %111, align 4
  %113 = load i32, i32* %22, align 4
  %114 = add i32 %113, 1
  store i32 %114, i32* %22, align 4
  br label %116

115:                                              ; preds = %42
  call void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.120"* nonnull %5, %"class.blink::FloatRoundedRect"* nonnull dereferenceable(48) %8) #6
  br label %116

116:                                              ; preds = %88, %115
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %84) #6
  %117 = bitcast %"class.blink::FloatRect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %117) #6
  %118 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 0, i32 1
  %120 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 1, i32 0
  %121 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 1, i32 1
  %122 = load i32, i32* %52, align 4
  %123 = sitofp i32 %122 to float
  %124 = fmul float %123, 1.562500e-02
  %125 = load i32, i32* %65, align 4
  %126 = sitofp i32 %125 to float
  %127 = fmul float %126, 1.562500e-02
  %128 = load float, float* %48, align 4
  %129 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 1, i32 0
  %130 = load float, float* %129, align 4
  %131 = fadd float %128, %130
  %132 = fsub float %131, %124
  %133 = load float, float* %50, align 4
  %134 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 1, i32 1
  %135 = load float, float* %134, align 4
  %136 = fadd float %133, %135
  %137 = fsub float %136, %127
  store float %124, float* %118, align 4
  store float %127, float* %119, align 4
  store float %132, float* %120, align 4
  store float %137, float* %121, align 4
  %138 = bitcast %"class.blink::FloatRoundedRect::Radii"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %138) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %138, i8 0, i64 24, i1 false) #6
  %139 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 3
  %140 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %10, i64 0, i32 3
  %141 = bitcast %"class.blink::FloatSize"* %139 to i64*
  %142 = bitcast %"class.blink::FloatSize"* %140 to i64*
  %143 = load i64, i64* %141, align 4
  store i64 %143, i64* %142, align 4
  %144 = bitcast %"class.blink::FloatRoundedRect"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %144) #6
  call void @_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"* nonnull %11, %"class.blink::FloatRect"* nonnull dereferenceable(16) %9, %"class.blink::FloatRoundedRect::Radii"* nonnull dereferenceable(32) %10) #6
  %145 = load i32, i32* %22, align 4
  %146 = load i32, i32* %21, align 8
  %147 = icmp eq i32 %145, %146
  br i1 %147, label %175, label %148, !prof !2

148:                                              ; preds = %116
  %149 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %20, align 8
  %150 = zext i32 %145 to i64
  %151 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %149, i64 %150
  %152 = bitcast %"class.blink::FloatRoundedRect"* %151 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %152, i8* nonnull align 4 %144, i64 16, i1 false) #6
  %153 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %149, i64 %150, i32 1
  %154 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %11, i64 0, i32 1
  %155 = bitcast %"class.blink::FloatRoundedRect::Radii"* %154 to i64*
  %156 = bitcast %"class.blink::FloatRoundedRect::Radii"* %153 to i64*
  %157 = load i64, i64* %155, align 4
  store i64 %157, i64* %156, align 4
  %158 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %149, i64 %150, i32 1, i32 1
  %159 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %11, i64 0, i32 1, i32 1
  %160 = bitcast %"class.blink::FloatSize"* %159 to i64*
  %161 = bitcast %"class.blink::FloatSize"* %158 to i64*
  %162 = load i64, i64* %160, align 4
  store i64 %162, i64* %161, align 4
  %163 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %149, i64 %150, i32 1, i32 2
  %164 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %11, i64 0, i32 1, i32 2
  %165 = bitcast %"class.blink::FloatSize"* %164 to i64*
  %166 = bitcast %"class.blink::FloatSize"* %163 to i64*
  %167 = load i64, i64* %165, align 4
  store i64 %167, i64* %166, align 4
  %168 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %149, i64 %150, i32 1, i32 3
  %169 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %11, i64 0, i32 1, i32 3
  %170 = bitcast %"class.blink::FloatSize"* %169 to i64*
  %171 = bitcast %"class.blink::FloatSize"* %168 to i64*
  %172 = load i64, i64* %170, align 4
  store i64 %172, i64* %171, align 4
  %173 = load i32, i32* %22, align 4
  %174 = add i32 %173, 1
  store i32 %174, i32* %22, align 4
  br label %176

175:                                              ; preds = %116
  call void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.120"* nonnull %5, %"class.blink::FloatRoundedRect"* nonnull dereferenceable(48) %11) #6
  br label %176

176:                                              ; preds = %148, %175
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %144) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %138) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %117) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %78) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #6
  br label %177

177:                                              ; preds = %38, %34, %176
  %178 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 1
  %179 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %178, i64 0, i32 0
  %180 = load float, float* %179, align 4
  %181 = fcmp ugt float %180, 0.000000e+00
  br i1 %181, label %182, label %186

182:                                              ; preds = %177
  %183 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 1, i32 1
  %184 = load float, float* %183, align 4
  %185 = fcmp ugt float %184, 0.000000e+00
  br i1 %185, label %194, label %186

186:                                              ; preds = %182, %177
  %187 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 2, i32 0
  %188 = load float, float* %187, align 4
  %189 = fcmp ugt float %188, 0.000000e+00
  br i1 %189, label %190, label %328

190:                                              ; preds = %186
  %191 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 2, i32 1
  %192 = load float, float* %191, align 4
  %193 = fcmp ugt float %192, 0.000000e+00
  br i1 %193, label %194, label %328

194:                                              ; preds = %182, %190
  %195 = bitcast %"class.blink::FloatRect"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %195) #6
  %196 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 0, i32 0
  %197 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 0, i32 1
  %198 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 1, i32 0
  %199 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %12, i64 0, i32 1, i32 1
  %200 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = sitofp i32 %201 to float
  %203 = fmul float %202, 1.562500e-02
  %204 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 0, i32 1
  %205 = load float, float* %204, align 4
  %206 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 0, i32 0
  %207 = load float, float* %206, align 4
  %208 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 1, i32 0
  %209 = load float, float* %208, align 4
  %210 = fadd float %207, %209
  %211 = fsub float %210, %203
  %212 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 1, i32 0
  %213 = load i32, i32* %212, align 4
  %214 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 1, i32 0
  %215 = load i32, i32* %214, align 4
  %216 = icmp slt i32 %215, 0
  %217 = select i1 %216, i32 -2147483648, i32 2147483647
  %218 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %213, i32 %215) #6
  %219 = extractvalue { i32, i1 } %218, 1
  %220 = extractvalue { i32, i1 } %218, 0
  %221 = select i1 %219, i32 %217, i32 %220, !prof !2
  %222 = sitofp i32 %221 to float
  %223 = fmul float %222, 1.562500e-02
  %224 = fsub float %223, %205
  store float %203, float* %196, align 4
  store float %205, float* %197, align 4
  store float %211, float* %198, align 4
  store float %224, float* %199, align 4
  %225 = bitcast %"class.blink::FloatRoundedRect::Radii"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %225) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %225, i8 0, i64 32, i1 false) #6
  %226 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %13, i64 0, i32 1
  %227 = bitcast %"class.blink::FloatSize"* %178 to i64*
  %228 = bitcast %"class.blink::FloatSize"* %226 to i64*
  %229 = load i64, i64* %227, align 4
  store i64 %229, i64* %228, align 4
  %230 = bitcast %"class.blink::FloatRoundedRect"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %230) #6
  call void @_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"* nonnull %14, %"class.blink::FloatRect"* nonnull dereferenceable(16) %12, %"class.blink::FloatRoundedRect::Radii"* nonnull dereferenceable(32) %13) #6
  %231 = load i32, i32* %22, align 4
  %232 = load i32, i32* %21, align 8
  %233 = icmp eq i32 %231, %232
  br i1 %233, label %261, label %234, !prof !2

234:                                              ; preds = %194
  %235 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %20, align 8
  %236 = zext i32 %231 to i64
  %237 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %235, i64 %236
  %238 = bitcast %"class.blink::FloatRoundedRect"* %237 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %238, i8* nonnull align 4 %230, i64 16, i1 false) #6
  %239 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %235, i64 %236, i32 1
  %240 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %14, i64 0, i32 1
  %241 = bitcast %"class.blink::FloatRoundedRect::Radii"* %240 to i64*
  %242 = bitcast %"class.blink::FloatRoundedRect::Radii"* %239 to i64*
  %243 = load i64, i64* %241, align 4
  store i64 %243, i64* %242, align 4
  %244 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %235, i64 %236, i32 1, i32 1
  %245 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %14, i64 0, i32 1, i32 1
  %246 = bitcast %"class.blink::FloatSize"* %245 to i64*
  %247 = bitcast %"class.blink::FloatSize"* %244 to i64*
  %248 = load i64, i64* %246, align 4
  store i64 %248, i64* %247, align 4
  %249 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %235, i64 %236, i32 1, i32 2
  %250 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %14, i64 0, i32 1, i32 2
  %251 = bitcast %"class.blink::FloatSize"* %250 to i64*
  %252 = bitcast %"class.blink::FloatSize"* %249 to i64*
  %253 = load i64, i64* %251, align 4
  store i64 %253, i64* %252, align 4
  %254 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %235, i64 %236, i32 1, i32 3
  %255 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %14, i64 0, i32 1, i32 3
  %256 = bitcast %"class.blink::FloatSize"* %255 to i64*
  %257 = bitcast %"class.blink::FloatSize"* %254 to i64*
  %258 = load i64, i64* %256, align 4
  store i64 %258, i64* %257, align 4
  %259 = load i32, i32* %22, align 4
  %260 = add i32 %259, 1
  store i32 %260, i32* %22, align 4
  br label %262

261:                                              ; preds = %194
  call void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.120"* nonnull %5, %"class.blink::FloatRoundedRect"* nonnull dereferenceable(48) %14) #6
  br label %262

262:                                              ; preds = %234, %261
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %230) #6
  %263 = bitcast %"class.blink::FloatRect"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %263) #6
  %264 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 0, i32 0
  %265 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 0, i32 1
  %266 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 1, i32 0
  %267 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 1, i32 1
  %268 = load float, float* %206, align 4
  %269 = load i32, i32* %212, align 4
  %270 = sitofp i32 %269 to float
  %271 = fmul float %270, 1.562500e-02
  %272 = load i32, i32* %200, align 4
  %273 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 0, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = icmp slt i32 %274, 0
  %276 = select i1 %275, i32 -2147483648, i32 2147483647
  %277 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %272, i32 %274) #6
  %278 = extractvalue { i32, i1 } %277, 1
  %279 = extractvalue { i32, i1 } %277, 0
  %280 = select i1 %278, i32 %276, i32 %279, !prof !2
  %281 = sitofp i32 %280 to float
  %282 = fmul float %281, 1.562500e-02
  %283 = fsub float %282, %268
  %284 = load float, float* %204, align 4
  %285 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 1, i32 1
  %286 = load float, float* %285, align 4
  %287 = fadd float %284, %286
  %288 = fsub float %287, %271
  store float %268, float* %264, align 4
  store float %271, float* %265, align 4
  store float %283, float* %266, align 4
  store float %288, float* %267, align 4
  %289 = bitcast %"class.blink::FloatRoundedRect::Radii"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %289) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %289, i8 0, i64 32, i1 false) #6
  %290 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 2
  %291 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %16, i64 0, i32 2
  %292 = bitcast %"class.blink::FloatSize"* %290 to i64*
  %293 = bitcast %"class.blink::FloatSize"* %291 to i64*
  %294 = load i64, i64* %292, align 4
  store i64 %294, i64* %293, align 4
  %295 = bitcast %"class.blink::FloatRoundedRect"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %295) #6
  call void @_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"* nonnull %17, %"class.blink::FloatRect"* nonnull dereferenceable(16) %15, %"class.blink::FloatRoundedRect::Radii"* nonnull dereferenceable(32) %16) #6
  %296 = load i32, i32* %22, align 4
  %297 = load i32, i32* %21, align 8
  %298 = icmp eq i32 %296, %297
  br i1 %298, label %326, label %299, !prof !2

299:                                              ; preds = %262
  %300 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %20, align 8
  %301 = zext i32 %296 to i64
  %302 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %300, i64 %301
  %303 = bitcast %"class.blink::FloatRoundedRect"* %302 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %303, i8* nonnull align 4 %295, i64 16, i1 false) #6
  %304 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %300, i64 %301, i32 1
  %305 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %17, i64 0, i32 1
  %306 = bitcast %"class.blink::FloatRoundedRect::Radii"* %305 to i64*
  %307 = bitcast %"class.blink::FloatRoundedRect::Radii"* %304 to i64*
  %308 = load i64, i64* %306, align 4
  store i64 %308, i64* %307, align 4
  %309 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %300, i64 %301, i32 1, i32 1
  %310 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %17, i64 0, i32 1, i32 1
  %311 = bitcast %"class.blink::FloatSize"* %310 to i64*
  %312 = bitcast %"class.blink::FloatSize"* %309 to i64*
  %313 = load i64, i64* %311, align 4
  store i64 %313, i64* %312, align 4
  %314 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %300, i64 %301, i32 1, i32 2
  %315 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %17, i64 0, i32 1, i32 2
  %316 = bitcast %"class.blink::FloatSize"* %315 to i64*
  %317 = bitcast %"class.blink::FloatSize"* %314 to i64*
  %318 = load i64, i64* %316, align 4
  store i64 %318, i64* %317, align 4
  %319 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %300, i64 %301, i32 1, i32 3
  %320 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %17, i64 0, i32 1, i32 3
  %321 = bitcast %"class.blink::FloatSize"* %320 to i64*
  %322 = bitcast %"class.blink::FloatSize"* %319 to i64*
  %323 = load i64, i64* %321, align 4
  store i64 %323, i64* %322, align 4
  %324 = load i32, i32* %22, align 4
  %325 = add i32 %324, 1
  store i32 %325, i32* %22, align 4
  br label %327

326:                                              ; preds = %262
  call void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.120"* nonnull %5, %"class.blink::FloatRoundedRect"* nonnull dereferenceable(48) %17) #6
  br label %327

327:                                              ; preds = %299, %326
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %295) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %289) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %263) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %225) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %195) #6
  br label %328

328:                                              ; preds = %190, %186, %24, %327
  call void @_ZN5blink15GraphicsContext4SaveEv(%"class.blink::GraphicsContext"* %1) #6
  %329 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %20, align 8
  %330 = load i32, i32* %22, align 4
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %329, i64 %331
  %333 = icmp eq i32 %330, 0
  br i1 %333, label %336, label %346

334:                                              ; preds = %346
  %335 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %20, align 8
  br label %336

336:                                              ; preds = %334, %328
  %337 = phi %"class.blink::FloatRoundedRect"* [ %335, %334 ], [ %329, %328 ]
  %338 = icmp eq %"class.blink::FloatRoundedRect"* %337, null
  %339 = bitcast %"class.blink::FloatRoundedRect"* %337 to i8*
  br i1 %338, label %345, label %340, !prof !3

340:                                              ; preds = %336
  %341 = load i32, i32* %22, align 4
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %344, label %343, !prof !2

343:                                              ; preds = %340
  store i32 0, i32* %22, align 4
  br label %344

344:                                              ; preds = %343, %340
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %339) #6
  store %"class.blink::FloatRoundedRect"* null, %"class.blink::FloatRoundedRect"** %20, align 8
  br label %345

345:                                              ; preds = %336, %344
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #6
  ret void

346:                                              ; preds = %328, %346
  %347 = phi %"class.blink::FloatRoundedRect"* [ %348, %346 ], [ %329, %328 ]
  call void @_ZN5blink15GraphicsContext15ClipRoundedRectERKNS_16FloatRoundedRectE8SkClipOpNS_16AntiAliasingModeE(%"class.blink::GraphicsContext"* %1, %"class.blink::FloatRoundedRect"* dereferenceable(48) %347, i32 1, i32 1) #6
  %348 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %347, i64 1
  %349 = icmp eq %"class.blink::FloatRoundedRect"* %348, %332
  br i1 %349, label %334, label %346
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK5blink16FloatRoundedRect12IsRenderableEv(%"class.blink::FloatRoundedRect"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink16FloatRoundedRectC1ERKNS_9FloatRectERKNS0_5RadiiE(%"class.blink::FloatRoundedRect"*, %"class.blink::FloatRect"* dereferenceable(16), %"class.blink::FloatRoundedRect::Radii"* dereferenceable(32)) unnamed_addr #2

declare void @_ZN5blink15GraphicsContext4SaveEv(%"class.blink::GraphicsContext"*) local_unnamed_addr #2

declare void @_ZN5blink15GraphicsContext15ClipRoundedRectERKNS_16FloatRoundedRectE8SkClipOpNS_16AntiAliasingModeE(%"class.blink::GraphicsContext"*, %"class.blink::FloatRoundedRect"* dereferenceable(48), i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23RoundedInnerRectClipperD2Ev(%"class.blink::RoundedInnerRectClipper"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::RoundedInnerRectClipper", %"class.blink::RoundedInnerRectClipper"* %0, i64 0, i32 0
  %3 = load %"class.blink::GraphicsContext"*, %"class.blink::GraphicsContext"** %2, align 8
  tail call void @_ZN5blink15GraphicsContext7RestoreEv(%"class.blink::GraphicsContext"* %3) #6
  ret void
}

declare void @_ZN5blink15GraphicsContext7RestoreEv(%"class.blink::GraphicsContext"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector.120"*, %"class.blink::FloatRoundedRect"* dereferenceable(48)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = tail call %"class.blink::FloatRoundedRect"* @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPS2_(%"class.WTF::Vector.120"* %0, i32 %5, %"class.blink::FloatRoundedRect"* %1) #6
  %7 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %7, align 8
  %9 = load i32, i32* %3, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10
  %12 = bitcast %"class.blink::FloatRoundedRect"* %11 to i8*
  %13 = bitcast %"class.blink::FloatRoundedRect"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 16, i1 false) #6
  %14 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1
  %16 = bitcast %"class.blink::FloatRoundedRect::Radii"* %15 to i64*
  %17 = bitcast %"class.blink::FloatRoundedRect::Radii"* %14 to i64*
  %18 = load i64, i64* %16, align 4
  store i64 %18, i64* %17, align 4
  %19 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1, i32 1
  %20 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 1
  %21 = bitcast %"class.blink::FloatSize"* %20 to i64*
  %22 = bitcast %"class.blink::FloatSize"* %19 to i64*
  %23 = load i64, i64* %21, align 4
  store i64 %23, i64* %22, align 4
  %24 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1, i32 2
  %25 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 2
  %26 = bitcast %"class.blink::FloatSize"* %25 to i64*
  %27 = bitcast %"class.blink::FloatSize"* %24 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %29 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1, i32 3
  %30 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 3
  %31 = bitcast %"class.blink::FloatSize"* %30 to i64*
  %32 = bitcast %"class.blink::FloatSize"* %29 to i64*
  %33 = load i64, i64* %31, align 4
  store i64 %33, i64* %32, align 4
  %34 = load i32, i32* %3, align 4
  %35 = add i32 %34, 1
  store i32 %35, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::FloatRoundedRect"* @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPS2_(%"class.WTF::Vector.120"*, i32, %"class.blink::FloatRoundedRect"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %4, align 8
  %6 = icmp ugt %"class.blink::FloatRoundedRect"* %5, %2
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 %10
  %12 = icmp ugt %"class.blink::FloatRoundedRect"* %11, %2
  br i1 %12, label %53, label %13

13:                                               ; preds = %7, %3
  %14 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %1
  %22 = select i1 %21, i32 %20, i32 %1
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %98, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::FloatRoundedRect"* %5, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatRoundedRectEEEmm(i64 %26) #6
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatRoundedRectEEEPKcv, i64 0, i64 0)) #6
  br i1 %25, label %29, label %34

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.120"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %27, 48
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  br label %98

34:                                               ; preds = %24
  %35 = udiv i64 %27, 48
  %36 = ptrtoint i8* %28 to i64
  %37 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %4, align 8
  %38 = icmp ne i8* %28, null
  %39 = icmp ne %"class.blink::FloatRoundedRect"* %37, null
  %40 = and i1 %38, %39
  %41 = bitcast %"class.blink::FloatRoundedRect"* %37 to i8*
  br i1 %40, label %42, label %49, !prof !3

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i64
  %46 = mul nuw nsw i64 %45, 48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %41, i64 %46, i1 false) #6
  %47 = bitcast %"class.WTF::Vector.120"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %42, %34
  %50 = phi i8* [ %48, %42 ], [ %41, %34 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #6
  %51 = bitcast %"class.WTF::Vector.120"* %0 to i64*
  store atomic i64 %36, i64* %51 monotonic, align 8
  %52 = trunc i64 %35 to i32
  store i32 %52, i32* %14, align 8
  br label %98

53:                                               ; preds = %7
  %54 = ptrtoint %"class.blink::FloatRoundedRect"* %2 to i64
  %55 = ptrtoint %"class.blink::FloatRoundedRect"* %5 to i64
  %56 = sub i64 %54, %55
  %57 = sdiv exact i64 %56, 48
  %58 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 1
  %59 = load i32, i32* %58, align 8
  %60 = lshr i32 %59, 2
  %61 = add i32 %59, 1
  %62 = add i32 %61, %60
  %63 = icmp ugt i32 %62, 4
  %64 = select i1 %63, i32 %62, i32 4
  %65 = icmp ugt i32 %64, %1
  %66 = select i1 %65, i32 %64, i32 %1
  %67 = icmp ult i32 %59, %66
  br i1 %67, label %68, label %95, !prof !3

68:                                               ; preds = %53
  %69 = icmp eq %"class.blink::FloatRoundedRect"* %5, null
  %70 = zext i32 %66 to i64
  %71 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatRoundedRectEEEmm(i64 %70) #6
  %72 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %71, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16FloatRoundedRectEEEPKcv, i64 0, i64 0)) #6
  %73 = ptrtoint i8* %72 to i64
  br i1 %69, label %74, label %76

74:                                               ; preds = %68
  %75 = bitcast %"class.WTF::Vector.120"* %0 to i64*
  store atomic i64 %73, i64* %75 monotonic, align 8
  br label %91

76:                                               ; preds = %68
  %77 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %4, align 8
  %78 = icmp ne i8* %72, null
  %79 = icmp ne %"class.blink::FloatRoundedRect"* %77, null
  %80 = and i1 %78, %79
  %81 = bitcast %"class.blink::FloatRoundedRect"* %77 to i8*
  br i1 %80, label %82, label %88, !prof !3

82:                                               ; preds = %76
  %83 = load i32, i32* %8, align 4
  %84 = zext i32 %83 to i64
  %85 = mul nuw nsw i64 %84, 48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %72, i8* nonnull align 4 %81, i64 %85, i1 false) #6
  %86 = bitcast %"class.WTF::Vector.120"* %0 to i8**
  %87 = load i8*, i8** %86, align 8
  br label %88

88:                                               ; preds = %82, %76
  %89 = phi i8* [ %87, %82 ], [ %81, %76 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %89) #6
  %90 = bitcast %"class.WTF::Vector.120"* %0 to i64*
  store atomic i64 %73, i64* %90 monotonic, align 8
  br label %91

91:                                               ; preds = %88, %74
  %92 = udiv i64 %71, 48
  %93 = trunc i64 %92 to i32
  store i32 %93, i32* %58, align 8
  %94 = bitcast i8* %72 to %"class.blink::FloatRoundedRect"*
  br label %95

95:                                               ; preds = %91, %53
  %96 = phi %"class.blink::FloatRoundedRect"* [ %5, %53 ], [ %94, %91 ]
  %97 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %96, i64 %57
  br label %98

98:                                               ; preds = %49, %29, %13, %95
  %99 = phi %"class.blink::FloatRoundedRect"* [ %97, %95 ], [ %2, %13 ], [ %2, %29 ], [ %2, %49 ]
  ret %"class.blink::FloatRoundedRect"* %99
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16FloatRoundedRectEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 44695552
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 44695552) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = mul i64 %0, 48
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.120"*, %"class.blink::FloatRoundedRect"* dereferenceable(48)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = tail call %"class.blink::FloatRoundedRect"* @_ZN3WTF6VectorIN5blink16FloatRoundedRectELj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPS2_(%"class.WTF::Vector.120"* %0, i32 %5, %"class.blink::FloatRoundedRect"* %1)
  %7 = getelementptr inbounds %"class.WTF::Vector.120", %"class.WTF::Vector.120"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::FloatRoundedRect"*, %"class.blink::FloatRoundedRect"** %7, align 8
  %9 = load i32, i32* %3, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10
  %12 = bitcast %"class.blink::FloatRoundedRect"* %11 to i8*
  %13 = bitcast %"class.blink::FloatRoundedRect"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 16, i1 false) #6
  %14 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1
  %16 = bitcast %"class.blink::FloatRoundedRect::Radii"* %15 to i64*
  %17 = bitcast %"class.blink::FloatRoundedRect::Radii"* %14 to i64*
  %18 = load i64, i64* %16, align 4
  store i64 %18, i64* %17, align 4
  %19 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1, i32 1
  %20 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 1
  %21 = bitcast %"class.blink::FloatSize"* %20 to i64*
  %22 = bitcast %"class.blink::FloatSize"* %19 to i64*
  %23 = load i64, i64* %21, align 4
  store i64 %23, i64* %22, align 4
  %24 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1, i32 2
  %25 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 2
  %26 = bitcast %"class.blink::FloatSize"* %25 to i64*
  %27 = bitcast %"class.blink::FloatSize"* %24 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %29 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %8, i64 %10, i32 1, i32 3
  %30 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 3
  %31 = bitcast %"class.blink::FloatSize"* %30 to i64*
  %32 = bitcast %"class.blink::FloatSize"* %29 to i64*
  %33 = load i64, i64* %31, align 4
  store i64 %33, i64* %32, align 4
  %34 = load i32, i32* %3, align 4
  %35 = add i32 %34, 1
  store i32 %35, i32* %3, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
