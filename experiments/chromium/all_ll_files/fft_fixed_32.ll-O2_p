; ModuleID = '../../third_party/ffmpeg/libavcodec/fft_fixed_32.c'
source_filename = "../../third_party/ffmpeg/libavcodec/fft_fixed_32.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, i32*, i32*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, i32*, i32*)*, void (%struct.FFTContext*, i32*, i32*)*, void (%struct.FFTContext*, i32*, i32*)*, i32, i32, i32* }
%struct.FFTComplex = type { i32, i32 }

@ff_fft_offsets_lut = external local_unnamed_addr global [0 x i16], align 2
@ff_w_tab_sr = external local_unnamed_addr constant [0 x i32], align 4

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_fft_init_fixed_32(%struct.FFTContext*, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  store i16* null, i16** %4, align 8
  %5 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 15
  store i32* null, i32** %5, align 8
  %6 = add i32 %1, -2
  %7 = icmp ugt i32 %6, 15
  br i1 %7, label %135, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  store i32 %1, i32* %9, align 8
  %10 = shl i32 1, %1
  %11 = icmp slt i32 %1, 17
  %12 = sext i32 %10 to i64
  br i1 %11, label %13, label %18

13:                                               ; preds = %8
  %14 = shl nsw i64 %12, 1
  %15 = tail call noalias i8* @av_malloc(i64 %14) #6
  %16 = bitcast i16** %4 to i8**
  store i8* %15, i8** %16, align 8
  %17 = icmp eq i8* %15, null
  br i1 %17, label %135, label %23

18:                                               ; preds = %8
  %19 = shl nsw i64 %12, 2
  %20 = tail call noalias i8* @av_malloc(i64 %19) #6
  %21 = bitcast i32** %5 to i8**
  store i8* %20, i8** %21, align 8
  %22 = icmp eq i8* %20, null
  br i1 %22, label %135, label %23

23:                                               ; preds = %13, %18
  %24 = shl nsw i64 %12, 3
  %25 = tail call noalias i8* @av_malloc(i64 %24) #6
  %26 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %27 = bitcast %struct.FFTComplex** %26 to i8**
  store i8* %25, i8** %27, align 8
  %28 = icmp eq i8* %25, null
  br i1 %28, label %135, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 1
  store i32 %2, i32* %30, align 4
  %31 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 13
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 8
  %33 = bitcast void (%struct.FFTContext*, %struct.FFTComplex*)** %32 to <2 x void (%struct.FFTContext*, %struct.FFTComplex*)*>*
  store <2 x void (%struct.FFTContext*, %struct.FFTComplex*)*> <void (%struct.FFTContext*, %struct.FFTComplex*)* @fft_permute_c, void (%struct.FFTContext*, %struct.FFTComplex*)* @fft_calc_c>, <2 x void (%struct.FFTContext*, %struct.FFTComplex*)*>* %33, align 8
  %34 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 10
  %35 = bitcast void (%struct.FFTContext*, i32*, i32*)** %34 to <2 x void (%struct.FFTContext*, i32*, i32*)*>*
  store <2 x void (%struct.FFTContext*, i32*, i32*)*> <void (%struct.FFTContext*, i32*, i32*)* @ff_imdct_calc_c_fixed_32, void (%struct.FFTContext*, i32*, i32*)* @ff_imdct_half_c_fixed_32>, <2 x void (%struct.FFTContext*, i32*, i32*)*>* %35, align 8
  %36 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 12
  store void (%struct.FFTContext*, i32*, i32*)* @ff_mdct_calc_c_fixed_32, void (%struct.FFTContext*, i32*, i32*)** %36, align 8
  tail call void @ff_fft_lut_init() #6
  %37 = load i16*, i16** %4, align 8
  %38 = icmp eq i16* %37, null
  br i1 %38, label %84, label %39

39:                                               ; preds = %29
  %40 = load i32, i32* %31, align 8
  %41 = icmp eq i32 %40, 1
  %42 = add nsw i32 %10, -1
  br i1 %41, label %51, label %43

43:                                               ; preds = %39
  %44 = load i32, i32* %30, align 4
  %45 = tail call fastcc i32 @split_radix_permutation(i32 0, i32 %10, i32 %44)
  %46 = sub nsw i32 0, %45
  %47 = and i32 %42, %46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  store i16 0, i16* %49, align 2
  %50 = icmp sgt i32 %10, 1
  br i1 %50, label %72, label %84

51:                                               ; preds = %39, %70
  %52 = phi i16* [ %71, %70 ], [ %37, %39 ]
  %53 = phi i32 [ %68, %70 ], [ 0, %39 ]
  %54 = and i32 %53, 65532
  %55 = lshr i32 %53, 1
  %56 = and i32 %55, 1
  %57 = or i32 %56, %54
  %58 = shl nuw i32 %53, 1
  %59 = and i32 %58, 2
  %60 = or i32 %57, %59
  %61 = load i32, i32* %30, align 4
  %62 = tail call fastcc i32 @split_radix_permutation(i32 %53, i32 %10, i32 %61)
  %63 = sub nsw i32 0, %62
  %64 = and i32 %42, %63
  %65 = trunc i32 %60 to i16
  %66 = sext i32 %64 to i64
  %67 = getelementptr inbounds i16, i16* %52, i64 %66
  store i16 %65, i16* %67, align 2
  %68 = add nuw nsw i32 %53, 1
  %69 = icmp slt i32 %68, %10
  br i1 %69, label %70, label %84

70:                                               ; preds = %51
  %71 = load i16*, i16** %4, align 8
  br label %51

72:                                               ; preds = %43, %72
  %73 = phi i32 [ %82, %72 ], [ 1, %43 ]
  %74 = load i16*, i16** %4, align 8
  %75 = load i32, i32* %30, align 4
  %76 = tail call fastcc i32 @split_radix_permutation(i32 %73, i32 %10, i32 %75)
  %77 = sub nsw i32 0, %76
  %78 = and i32 %42, %77
  %79 = trunc i32 %73 to i16
  %80 = sext i32 %78 to i64
  %81 = getelementptr inbounds i16, i16* %74, i64 %80
  store i16 %79, i16* %81, align 2
  %82 = add nuw nsw i32 %73, 1
  %83 = icmp slt i32 %82, %10
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %51, %43, %29
  %85 = load i32*, i32** %5, align 8
  %86 = icmp eq i32* %85, null
  br i1 %86, label %140, label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %31, align 8
  %89 = icmp eq i32 %88, 1
  %90 = icmp ne i32 %1, 31
  br i1 %89, label %101, label %91

91:                                               ; preds = %87
  br i1 %90, label %92, label %140

92:                                               ; preds = %91
  %93 = add nsw i32 %10, -1
  %94 = load i32, i32* %30, align 4
  %95 = tail call fastcc i32 @split_radix_permutation(i32 0, i32 %10, i32 %94)
  %96 = sub nsw i32 0, %95
  %97 = and i32 %93, %96
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %85, i64 %98
  store i32 0, i32* %99, align 4
  %100 = icmp sgt i32 %10, 1
  br i1 %100, label %124, label %140

101:                                              ; preds = %87
  br i1 %90, label %102, label %140

102:                                              ; preds = %101
  %103 = add nsw i32 %10, -1
  br label %104

104:                                              ; preds = %122, %102
  %105 = phi i32* [ %85, %102 ], [ %123, %122 ]
  %106 = phi i32 [ 0, %102 ], [ %120, %122 ]
  %107 = and i32 %106, 2147483644
  %108 = lshr i32 %106, 1
  %109 = and i32 %108, 1
  %110 = or i32 %109, %107
  %111 = shl nuw i32 %106, 1
  %112 = and i32 %111, 2
  %113 = or i32 %110, %112
  %114 = load i32, i32* %30, align 4
  %115 = tail call fastcc i32 @split_radix_permutation(i32 %106, i32 %10, i32 %114)
  %116 = sub nsw i32 0, %115
  %117 = and i32 %103, %116
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i32, i32* %105, i64 %118
  store i32 %113, i32* %119, align 4
  %120 = add nuw nsw i32 %106, 1
  %121 = icmp slt i32 %120, %10
  br i1 %121, label %122, label %140

122:                                              ; preds = %104
  %123 = load i32*, i32** %5, align 8
  br label %104

124:                                              ; preds = %92, %124
  %125 = phi i32 [ %133, %124 ], [ 1, %92 ]
  %126 = load i32*, i32** %5, align 8
  %127 = load i32, i32* %30, align 4
  %128 = tail call fastcc i32 @split_radix_permutation(i32 %125, i32 %10, i32 %127)
  %129 = sub nsw i32 0, %128
  %130 = and i32 %93, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i32, i32* %126, i64 %131
  store i32 %125, i32* %132, align 4
  %133 = add nuw nsw i32 %125, 1
  %134 = icmp slt i32 %133, %10
  br i1 %134, label %124, label %140

135:                                              ; preds = %13, %23, %18, %3
  %136 = bitcast i16** %4 to i8*
  tail call void @av_freep(i8* %136) #6
  %137 = bitcast i32** %5 to i8*
  tail call void @av_freep(i8* %137) #6
  %138 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %139 = bitcast %struct.FFTComplex** %138 to i8*
  tail call void @av_freep(i8* %139) #6
  br label %140

140:                                              ; preds = %124, %104, %92, %91, %101, %84, %135
  %141 = phi i32 [ -1, %135 ], [ 0, %84 ], [ 0, %101 ], [ 0, %91 ], [ 0, %92 ], [ 0, %104 ], [ 0, %124 ]
  ret i32 %141
}

declare noalias i8* @av_malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @fft_permute_c(%struct.FFTContext* nocapture readonly, %struct.FFTComplex* nocapture) #2 {
  %3 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 15
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 1, %8
  %10 = icmp eq i16* %4, null
  %11 = icmp ne i32 %8, 31
  br i1 %10, label %16, label %12

12:                                               ; preds = %2
  br i1 %11, label %13, label %46

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %15 = sext i32 %9 to i64
  br label %20

16:                                               ; preds = %2
  br i1 %11, label %17, label %46

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %19 = sext i32 %9 to i64
  br label %33

20:                                               ; preds = %13, %20
  %21 = phi i64 [ 0, %13 ], [ %31, %20 ]
  %22 = load %struct.FFTComplex*, %struct.FFTComplex** %14, align 8
  %23 = getelementptr inbounds i16, i16* %4, i64 %21
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %22, i64 %25
  %27 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %21
  %28 = bitcast %struct.FFTComplex* %27 to i64*
  %29 = bitcast %struct.FFTComplex* %26 to i64*
  %30 = load i64, i64* %28, align 4
  store i64 %30, i64* %29, align 4
  %31 = add nuw nsw i64 %21, 1
  %32 = icmp slt i64 %31, %15
  br i1 %32, label %20, label %46

33:                                               ; preds = %17, %33
  %34 = phi i64 [ 0, %17 ], [ %44, %33 ]
  %35 = load %struct.FFTComplex*, %struct.FFTComplex** %18, align 8
  %36 = getelementptr inbounds i32, i32* %6, i64 %34
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %35, i64 %38
  %40 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %34
  %41 = bitcast %struct.FFTComplex* %40 to i64*
  %42 = bitcast %struct.FFTComplex* %39 to i64*
  %43 = load i64, i64* %41, align 4
  store i64 %43, i64* %42, align 4
  %44 = add nuw nsw i64 %34, 1
  %45 = icmp slt i64 %44, %19
  br i1 %45, label %33, label %46

46:                                               ; preds = %20, %33, %12, %16
  %47 = bitcast %struct.FFTComplex* %1 to i8*
  %48 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %49 = bitcast %struct.FFTComplex** %48 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = sext i32 %9 to i64
  %52 = shl nsw i64 %51, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %50, i64 %52, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @fft_calc_c(%struct.FFTContext* nocapture readonly, %struct.FFTComplex* nocapture) #3 {
  %3 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = sub nsw i32 16, %4
  %7 = lshr i32 10923, %6
  %8 = or i32 %7, 1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %56

10:                                               ; preds = %2
  %11 = zext i32 %8 to i64
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %54, %12 ]
  %14 = getelementptr inbounds [0 x i16], [0 x i16]* @ff_fft_offsets_lut, i64 0, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i64
  %17 = shl nuw nsw i64 %16, 2
  %18 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %17
  %19 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %18, i64 1
  %22 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, %20
  %25 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %18, i64 2
  %26 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %18, i64 3
  %29 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, %27
  %32 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %17, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %21, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, %33
  %37 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %25, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %28, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, %38
  %42 = sub i32 %20, %23
  %43 = sub i32 %38, %40
  %44 = sub i32 %33, %35
  %45 = sub i32 %27, %30
  %46 = add i32 %31, %24
  store i32 %46, i32* %19, align 4
  %47 = sub i32 %24, %31
  store i32 %47, i32* %26, align 4
  %48 = add i32 %41, %36
  store i32 %48, i32* %32, align 4
  %49 = sub i32 %36, %41
  store i32 %49, i32* %37, align 4
  %50 = add i32 %43, %42
  store i32 %50, i32* %22, align 4
  %51 = sub i32 %42, %43
  store i32 %51, i32* %29, align 4
  %52 = sub i32 %44, %45
  store i32 %52, i32* %34, align 4
  %53 = add i32 %44, %45
  store i32 %53, i32* %39, align 4
  %54 = add nuw nsw i64 %13, 1
  %55 = icmp eq i64 %54, %11
  br i1 %55, label %56, label %12

56:                                               ; preds = %12, %2
  %57 = icmp slt i32 %5, 8
  br i1 %57, label %324, label %58

58:                                               ; preds = %56
  %59 = ashr i32 %7, 1
  %60 = or i32 %59, 1
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = zext i32 %60 to i64
  br label %67

64:                                               ; preds = %67, %58
  %65 = load i32, i32* %3, align 8
  %66 = icmp slt i32 %65, 4
  br i1 %66, label %324, label %171

67:                                               ; preds = %67, %62
  %68 = phi i64 [ 0, %62 ], [ %169, %67 ]
  %69 = getelementptr inbounds [0 x i16], [0 x i16]* @ff_fft_offsets_lut, i64 0, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i64
  %72 = shl nuw nsw i64 %71, 3
  %73 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %72
  %74 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 4
  %75 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 5
  %78 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %77, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, %76
  %81 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 6
  %82 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %81, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 7
  %85 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %84, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, %83
  %88 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %74, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %77, i64 0, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = add i32 %91, %89
  %93 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %81, i64 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %84, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %96, %94
  %98 = add i32 %87, %80
  %99 = sub i32 %80, %87
  %100 = add i32 %97, %92
  %101 = sub i32 %92, %97
  %102 = sub i32 %76, %79
  %103 = sub i32 %89, %91
  %104 = sub i32 %83, %86
  %105 = sub i32 %94, %96
  %106 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = sub i32 %107, %98
  store i32 %108, i32* %75, align 4
  %109 = add i32 %107, %98
  store i32 %109, i32* %106, align 4
  %110 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %72, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = sub i32 %111, %100
  store i32 %112, i32* %88, align 4
  %113 = add i32 %111, %100
  store i32 %113, i32* %110, align 4
  %114 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 2
  %115 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %114, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = sub i32 %116, %101
  store i32 %117, i32* %82, align 4
  %118 = add i32 %116, %101
  store i32 %118, i32* %115, align 4
  %119 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %114, i64 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, %99
  store i32 %121, i32* %93, align 4
  %122 = sub i32 %120, %99
  store i32 %122, i32* %119, align 4
  %123 = add i32 %103, %102
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %124, 1518500250
  %126 = add nsw i64 %125, 1073741824
  %127 = lshr i64 %126, 31
  %128 = trunc i64 %127 to i32
  %129 = sub i32 %104, %105
  %130 = sext i32 %129 to i64
  %131 = mul nsw i64 %130, 1518500250
  %132 = add nsw i64 %131, 1073741824
  %133 = lshr i64 %132, 31
  %134 = trunc i64 %133 to i32
  %135 = sub i32 %103, %102
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 1518500250
  %138 = add nsw i64 %137, 1073741824
  %139 = lshr i64 %138, 31
  %140 = trunc i64 %139 to i32
  %141 = add i32 %105, %104
  %142 = sext i32 %141 to i64
  %143 = mul nsw i64 %142, 1518500250
  %144 = add nsw i64 %143, 1073741824
  %145 = lshr i64 %144, 31
  %146 = trunc i64 %145 to i32
  %147 = add i32 %134, %128
  %148 = sub i32 %128, %134
  %149 = add i32 %146, %140
  %150 = sub i32 %140, %146
  %151 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 1
  %152 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %151, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  %154 = sub i32 %153, %147
  store i32 %154, i32* %78, align 4
  %155 = add i32 %153, %147
  store i32 %155, i32* %152, align 4
  %156 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %151, i64 0, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = sub i32 %157, %149
  store i32 %158, i32* %90, align 4
  %159 = add i32 %157, %149
  store i32 %159, i32* %156, align 4
  %160 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %73, i64 3
  %161 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %160, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  %163 = sub i32 %162, %150
  store i32 %163, i32* %85, align 4
  %164 = add i32 %162, %150
  store i32 %164, i32* %161, align 4
  %165 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %160, i64 0, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = add i32 %166, %148
  store i32 %167, i32* %95, align 4
  %168 = sub i32 %166, %148
  store i32 %168, i32* %165, align 4
  %169 = add nuw nsw i64 %68, 1
  %170 = icmp eq i64 %169, %63
  br i1 %170, label %64, label %67

171:                                              ; preds = %64, %319
  %172 = phi i32 [ %320, %319 ], [ %65, %64 ]
  %173 = phi i32 [ %322, %319 ], [ 4, %64 ]
  %174 = phi i32 [ %177, %319 ], [ 4, %64 ]
  %175 = phi i32 [ %321, %319 ], [ 512, %64 ]
  %176 = phi i32 [ %179, %319 ], [ %60, %64 ]
  %177 = shl i32 %174, 1
  %178 = ashr i32 %176, 1
  %179 = or i32 %178, 1
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %181, label %319

181:                                              ; preds = %171
  %182 = mul nsw i32 %174, 3
  %183 = sext i32 %175 to i64
  %184 = getelementptr inbounds [0 x i32], [0 x i32]* @ff_w_tab_sr, i64 0, i64 %183
  %185 = sub nsw i64 0, %183
  %186 = sext i32 %177 to i64
  %187 = sext i32 %182 to i64
  %188 = sext i32 %174 to i64
  %189 = icmp sgt i32 %174, 1
  %190 = zext i32 %179 to i64
  %191 = zext i32 %174 to i64
  br label %192

192:                                              ; preds = %314, %181
  %193 = phi i64 [ 0, %181 ], [ %315, %314 ]
  %194 = getelementptr inbounds [0 x i16], [0 x i16]* @ff_fft_offsets_lut, i64 0, i64 %193
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = shl i32 %196, %173
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %198
  %200 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %186
  %201 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %200, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %187
  %204 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %203, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, %202
  %207 = sub i32 %202, %205
  %208 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %200, i64 0, i32 1
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %203, i64 0, i32 1
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, %209
  %213 = sub i32 %209, %211
  %214 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 0, i32 0
  %215 = load i32, i32* %214, align 4
  %216 = sub i32 %215, %206
  store i32 %216, i32* %201, align 4
  %217 = load i32, i32* %214, align 4
  %218 = add i32 %217, %206
  store i32 %218, i32* %214, align 4
  %219 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %1, i64 %198, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = sub i32 %220, %212
  store i32 %221, i32* %208, align 4
  %222 = load i32, i32* %219, align 4
  %223 = add i32 %222, %212
  store i32 %223, i32* %219, align 4
  %224 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %188
  %225 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %224, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = sub i32 %226, %213
  store i32 %227, i32* %204, align 4
  %228 = load i32, i32* %225, align 4
  %229 = add i32 %228, %213
  store i32 %229, i32* %225, align 4
  %230 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %224, i64 0, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = add i32 %231, %207
  store i32 %232, i32* %210, align 4
  %233 = load i32, i32* %230, align 4
  %234 = sub i32 %233, %207
  store i32 %234, i32* %230, align 4
  br i1 %189, label %235, label %314

235:                                              ; preds = %192, %235
  %236 = phi i64 [ %312, %235 ], [ 1, %192 ]
  %237 = phi i32* [ %239, %235 ], [ getelementptr inbounds ([0 x i32], [0 x i32]* @ff_w_tab_sr, i64 0, i64 2048), %192 ]
  %238 = phi i32* [ %311, %235 ], [ %184, %192 ]
  %239 = getelementptr inbounds i32, i32* %237, i64 %185
  %240 = load i32, i32* %238, align 4
  %241 = load i32, i32* %239, align 4
  %242 = sext i32 %240 to i64
  %243 = add nsw i64 %236, %186
  %244 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %243
  %245 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %244, i64 0, i32 0
  %246 = load i32, i32* %245, align 4
  %247 = sext i32 %246 to i64
  %248 = mul nsw i64 %247, %242
  %249 = sext i32 %241 to i64
  %250 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %244, i64 0, i32 1
  %251 = load i32, i32* %250, align 4
  %252 = sext i32 %251 to i64
  %253 = mul nsw i64 %252, %249
  %254 = add nsw i64 %248, 1073741824
  %255 = add i64 %254, %253
  %256 = lshr i64 %255, 31
  %257 = trunc i64 %256 to i32
  %258 = mul nsw i64 %252, %242
  %259 = mul nsw i64 %247, %249
  %260 = sub nsw i64 1073741824, %259
  %261 = add nsw i64 %260, %258
  %262 = lshr i64 %261, 31
  %263 = trunc i64 %262 to i32
  %264 = add nsw i64 %236, %187
  %265 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %264
  %266 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %265, i64 0, i32 0
  %267 = load i32, i32* %266, align 4
  %268 = sext i32 %267 to i64
  %269 = mul nsw i64 %268, %242
  %270 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %265, i64 0, i32 1
  %271 = load i32, i32* %270, align 4
  %272 = sext i32 %271 to i64
  %273 = mul nsw i64 %272, %249
  %274 = add nsw i64 %269, 1073741824
  %275 = sub nsw i64 %274, %273
  %276 = lshr i64 %275, 31
  %277 = trunc i64 %276 to i32
  %278 = mul nsw i64 %272, %242
  %279 = mul nsw i64 %268, %249
  %280 = add nsw i64 %279, 1073741824
  %281 = add i64 %280, %278
  %282 = lshr i64 %281, 31
  %283 = trunc i64 %282 to i32
  %284 = add i32 %277, %257
  %285 = sub i32 %257, %277
  %286 = add i32 %283, %263
  %287 = sub i32 %263, %283
  %288 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %236
  %289 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %288, i64 0, i32 0
  %290 = load i32, i32* %289, align 4
  %291 = sub i32 %290, %284
  store i32 %291, i32* %245, align 4
  %292 = load i32, i32* %289, align 4
  %293 = add i32 %284, %292
  store i32 %293, i32* %289, align 4
  %294 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %288, i64 0, i32 1
  %295 = load i32, i32* %294, align 4
  %296 = sub i32 %295, %286
  store i32 %296, i32* %250, align 4
  %297 = load i32, i32* %294, align 4
  %298 = add i32 %297, %286
  store i32 %298, i32* %294, align 4
  %299 = add nsw i64 %236, %188
  %300 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %199, i64 %299
  %301 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %300, i64 0, i32 0
  %302 = load i32, i32* %301, align 4
  %303 = sub i32 %302, %287
  store i32 %303, i32* %266, align 4
  %304 = load i32, i32* %301, align 4
  %305 = add i32 %304, %287
  store i32 %305, i32* %301, align 4
  %306 = getelementptr inbounds %struct.FFTComplex, %struct.FFTComplex* %300, i64 0, i32 1
  %307 = load i32, i32* %306, align 4
  %308 = add i32 %307, %285
  store i32 %308, i32* %270, align 4
  %309 = load i32, i32* %306, align 4
  %310 = sub i32 %309, %285
  store i32 %310, i32* %306, align 4
  %311 = getelementptr inbounds i32, i32* %238, i64 %183
  %312 = add nuw nsw i64 %236, 1
  %313 = icmp eq i64 %312, %191
  br i1 %313, label %314, label %235

314:                                              ; preds = %235, %192
  %315 = add nuw nsw i64 %193, 1
  %316 = icmp eq i64 %315, %190
  br i1 %316, label %317, label %192

317:                                              ; preds = %314
  %318 = load i32, i32* %3, align 8
  br label %319

319:                                              ; preds = %317, %171
  %320 = phi i32 [ %318, %317 ], [ %172, %171 ]
  %321 = ashr i32 %175, 1
  %322 = add nuw nsw i32 %173, 1
  %323 = icmp slt i32 %173, %320
  br i1 %323, label %171, label %324

324:                                              ; preds = %319, %64, %56
  ret void
}

declare void @ff_imdct_calc_c_fixed_32(%struct.FFTContext*, i32*, i32*) #1

declare void @ff_imdct_half_c_fixed_32(%struct.FFTContext*, i32*, i32*) #1

declare void @ff_mdct_calc_c_fixed_32(%struct.FFTContext*, i32*, i32*) #1

declare void @ff_fft_lut_init() local_unnamed_addr #1

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc i32 @split_radix_permutation(i32, i32, i32) unnamed_addr #4 {
  %4 = icmp slt i32 %1, 3
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = and i32 %0, 1
  br label %26

7:                                                ; preds = %3
  %8 = lshr i32 %1, 1
  %9 = and i32 %8, %0
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = tail call fastcc i32 @split_radix_permutation(i32 %0, i32 %8, i32 %2)
  %13 = shl nsw i32 %12, 1
  ret i32 %13

14:                                               ; preds = %7
  %15 = lshr i32 %1, 2
  %16 = and i32 %15, %0
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  %19 = icmp eq i32 %18, %2
  %20 = tail call fastcc i32 @split_radix_permutation(i32 %0, i32 %15, i32 %2)
  %21 = shl nsw i32 %20, 2
  br i1 %19, label %22, label %24

22:                                               ; preds = %14
  %23 = or i32 %21, 1
  br label %26

24:                                               ; preds = %14
  %25 = add nsw i32 %21, -1
  br label %26

26:                                               ; preds = %24, %22, %5
  %27 = phi i32 [ %6, %5 ], [ %23, %22 ], [ %25, %24 ]
  ret i32 %27
}

declare void @av_freep(i8*) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_fft_end_fixed_32(%struct.FFTContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 2
  %3 = bitcast i16** %2 to i8*
  tail call void @av_freep(i8* %3) #6
  %4 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 15
  %5 = bitcast i32** %4 to i8*
  tail call void @av_freep(i8* %5) #6
  %6 = getelementptr inbounds %struct.FFTContext, %struct.FFTContext* %0, i64 0, i32 3
  %7 = bitcast %struct.FFTComplex** %6 to i8*
  tail call void @av_freep(i8* %7) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
