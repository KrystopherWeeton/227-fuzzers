; ModuleID = '../../third_party/libjxl/src/lib/jxl/quant_weights.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/quant_weights.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array.80" = type { [17 x %"struct.jxl::QuantEncodingInternal"] }
%"struct.jxl::QuantEncodingInternal" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon, %"struct.jxl::DctQuantWeightParams", %union.anon.15, [7 x i8] }>
%union.anon = type { %"struct.std::__1::array.8", [4 x i8] }
%"struct.std::__1::array.8" = type { [3 x %"struct.std::__1::array.9"] }
%"struct.std::__1::array.9" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.1"] }
%"struct.std::__1::array.1" = type { [17 x float] }
%union.anon.15 = type { i8 }
%struct.DefaultMatrices = type { [394752 x float], [394752 x float] }
%"struct.std::__1::array.2" = type { [3 x %"struct.std::__1::array.3"] }
%"struct.std::__1::array.3" = type { [3 x float] }
%"struct.std::__1::array.4" = type { [3 x %"struct.std::__1::array.5"] }
%"struct.std::__1::array.5" = type { [6 x float] }
%"struct.std::__1::array.6" = type { [3 x %"struct.std::__1::array.7"] }
%"struct.std::__1::array.7" = type { [2 x float] }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.16" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon, %"struct.jxl::DctQuantWeightParams", %union.anon.15 }>
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.jxl::ModularFrameDecoder" = type { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, %"class.std::__1::vector.46", %"struct.jxl::ANSCode", %"class.std::__1::vector.74", %"struct.jxl::GroupHeader" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.21", %"class.std::__1::vector.32", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.27" }
%"class.jxl::Channel" = type { %"class.jxl::Plane", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i8* }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.41" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.34", i32, i32, i8, i8, [6 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.34" = type { %"class.std::__1::__vector_base.35" }
%"class.std::__1::__vector_base.35" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.36" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.jxl::Transform"* }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.48" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.jxl::PropertyDecisionNode"* }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr.23", %"class.std::__1::vector.53", %"class.std::__1::vector.67", %"class.std::__1::vector.10", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.55" }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.69" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { i8*, i8*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.32" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

@_ZN3jxl15DequantMatrices14required_size_E = hidden local_unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices15required_size_xE = hidden local_unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 2, i64 4, i64 1, i64 1, i64 2, i64 1, i64 1, i64 8, i64 4, i64 16, i64 8, i64 32, i64 16], align 16
@_ZN3jxl15DequantMatrices15required_size_yE = hidden local_unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 2, i64 4, i64 2, i64 4, i64 4, i64 1, i64 1, i64 8, i64 8, i64 16, i64 16, i64 32, i64 32], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE = hidden local_unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.1 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.cc\00", align 1
@_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary = internal global %"struct.std::__1::array.80" zeroinitializer, align 8
@_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary = internal global i64 0, align 8
@_ZZN3jxl15DequantMatrices7ComputeEvE16default_matrices = internal unnamed_addr global %struct.DefaultMatrices* null, align 8
@_ZGVZN3jxl15DequantMatrices7ComputeEvE16default_matrices = internal global i64 0, align 8
@.str.5 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"encodings_.size() == kNum\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"pos == kTotalTableSize\00", align 1
@.ref.tmp = private unnamed_addr constant { [3 x { <{ float, float, float, float, float, float, [11 x float] }> }] } { [3 x { <{ float, float, float, float, float, float, [11 x float] }> }] [{ <{ float, float, float, float, float, float, [11 x float] }> } { <{ float, float, float, float, float, float, [11 x float] }> <{ float 3.150000e+03, float 0.000000e+00, float 0xBFD99999A0000000, float 0xBFD99999A0000000, float 0xBFD99999A0000000, float -2.000000e+00, [11 x float] zeroinitializer }> }, { <{ float, float, float, float, float, float, [11 x float] }> } { <{ float, float, float, float, float, float, [11 x float] }> <{ float 5.600000e+02, float 0.000000e+00, float 0xBFD3333340000000, float 0xBFD3333340000000, float 0xBFD3333340000000, float 0xBFD3333340000000, [11 x float] zeroinitializer }> }, { <{ float, float, float, float, float, float, [11 x float] }> } { <{ float, float, float, float, float, float, [11 x float] }> <{ float 5.120000e+02, float -2.000000e+00, float -1.000000e+00, float 0.000000e+00, float -1.000000e+00, float -2.000000e+00, [11 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.28 = private unnamed_addr constant %"struct.std::__1::array.2" { [3 x %"struct.std::__1::array.3"] [%"struct.std::__1::array.3" { [3 x float] [float 2.800000e+02, float 3.160000e+03, float 3.160000e+03] }, %"struct.std::__1::array.3" { [3 x float] [float 6.000000e+01, float 8.640000e+02, float 8.640000e+02] }, %"struct.std::__1::array.3" { [3 x float] [float 1.800000e+01, float 2.000000e+02, float 2.000000e+02] }] }, align 4
@.ref.tmp.29 = private unnamed_addr constant %"struct.std::__1::array.4" { [3 x %"struct.std::__1::array.5"] [%"struct.std::__1::array.5" { [6 x float] [float 3.840000e+03, float 2.560000e+03, float 1.280000e+03, float 6.400000e+02, float 4.800000e+02, float 3.000000e+02] }, %"struct.std::__1::array.5" { [6 x float] [float 9.600000e+02, float 6.400000e+02, float 3.200000e+02, float 1.800000e+02, float 1.400000e+02, float 1.200000e+02] }, %"struct.std::__1::array.5" { [6 x float] [float 6.400000e+02, float 3.200000e+02, float 1.280000e+02, float 6.400000e+01, float 3.200000e+01, float 1.600000e+01] }] }, align 4
@.ref.tmp.30 = private unnamed_addr constant { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> } { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> <{ { <{ float, [16 x float] }> } { <{ float, [16 x float] }> <{ float 2.200000e+03, [16 x float] zeroinitializer }> }, { <{ float, [16 x float] }> } { <{ float, [16 x float] }> <{ float 3.920000e+02, [16 x float] zeroinitializer }> }, { <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 1.120000e+02, float -2.500000e-01, float -2.500000e-01, float -5.000000e-01, [13 x float] zeroinitializer }> } }> }, align 8
@.ref.tmp.31 = private unnamed_addr constant %"struct.std::__1::array.6" { [3 x %"struct.std::__1::array.7"] [%"struct.std::__1::array.7" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.7" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.7" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }] }, align 4
@.ref.tmp.32 = private unnamed_addr constant { [3 x { <{ float, float, float, float, float, float, float, [10 x float] }> }] } { [3 x { <{ float, float, float, float, float, float, float, [10 x float] }> }] [{ <{ float, float, float, float, float, float, float, [10 x float] }> } { <{ float, float, float, float, float, float, float, [10 x float] }> <{ float 0x40C1926FC0000000, float 0xBFF4CD1E60000000, float 0xBFDFA1B700000000, float 0xBFDC1A1CC0000000, float 0xBFE45200E0000000, float 0xBFECDB5240000000, float 0xBFF9DBFEE0000000, [10 x float] zeroinitializer }> }, { <{ float, float, float, float, float, float, float, [10 x float] }> } { <{ float, float, float, float, float, float, float, [10 x float] }> <{ float 0x40A8EEF7A0000000, float 0xBFE5936C00000000, float 0xBFE9D6B280000000, float 0xBFDCC0A640000000, float 0xBFD6F431A0000000, float 0xBFD40BDC40000000, float 0xBFD812D880000000, [10 x float] zeroinitializer }> }, { <{ float, float, float, float, float, float, float, [10 x float] }> } { <{ float, float, float, float, float, float, float, [10 x float] }> <{ float 0x4092160420000000, float 0xC0006CD5E0000000, float 0xBFF6666660000000, float 0xBFE0384A20000000, float 0xBFDB556600000000, float 0xBFF7C55C00000000, float 0xC013AF0420000000, [10 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.33 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40CEB33440000000, float 0xBFF0666660000000, float 0xBFEF5C2900000000, float 0xBFECD6A160000000, float 0xBFD99999A0000000, float 0xBFDF3E91E0000000, float 0xBFDAF2B660000000, float 0xBFD147AE20000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40BC89C380000000, float 0xBFE9BBF8E0000000, float 0xBFE86CFBC0000000, float 0xBFE1CFB2C0000000, float 0xBFDFDCD300000000, float 0xBFDBF7BDC0000000, float 0xBFD9B73BC0000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40ADB71040000000, float 0xC0087C61E0000000, float 0xC00054A340000000, float 0xC0003042E0000000, float 0xBFE195D2C0000000, float 0xBFD99999A0000000, float 0xBFD99999A0000000, float 0xBFD3333340000000], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.34 = private unnamed_addr constant { [3 x { <{ float, float, float, float, float, float, float, [10 x float] }> }] } { [3 x { <{ float, float, float, float, float, float, float, [10 x float] }> }] [{ <{ float, float, float, float, float, float, float, [10 x float] }> } { <{ float, float, float, float, float, float, float, [10 x float] }> <{ float 0x40BC48C600000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFC99999A0000000, float 0xBFC99999A0000000, float 0xBFC99999A0000000, float -5.000000e-01, [10 x float] zeroinitializer }> }, { <{ float, float, float, float, float, float, float, [10 x float] }> } { <{ float, float, float, float, float, float, float, [10 x float] }> <{ float 0x4096A09E60000000, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float 0xBFC99999A0000000, float 0xBFC99999A0000000, float 0xBFC99999A0000000, [10 x float] zeroinitializer }> }, { <{ float, float, float, float, float, float, float, [10 x float] }> } { <{ float, float, float, float, float, float, float, [10 x float] }> <{ float 0x407FADAA80000000, float 0xBFF6666660000000, float 0xBFC99999A0000000, float -5.000000e-01, float -5.000000e-01, float -1.500000e+00, float 0xC00CCCCCC0000000, [10 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.35 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40CFCD9FE0000000, float 0xBFFC802440000000, float 0xBFFA1830C0000000, float 0xBFF09C8A60000000, float 0xBFEB333340000000, float 0xBFE6666660000000, float 0xBFECCCCCC0000000, float 0xBFF3C6EAE0000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40B3E12860000000, float 0xBFD47BB080000000, float 0xBFD6A1D960000000, float 0xBFD36AE7E0000000, float 0xBFE3851EC0000000, float -5.000000e-01, float -5.000000e-01, float 0xBFE3333340000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40AA8B8D60000000, float 0xBFD490A0A0000000, float 0xBFD615BA80000000, float 0xBFE68240C0000000, float 0xBFECCCCCC0000000, float -1.000000e+00, float -1.000000e+00, float 0xBFF2CEAFC0000000], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.36 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40CB0A7C40000000, float 0xBFEF139000000000, float 0xBFE50E5600000000, float 0xBFDAE58A40000000, float 0xBFCD1244A0000000, float 0xBFCC3C9EE0000000, float 0xBFCCED9160000000, float 0xBFE3333340000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40B2BEF6C0000000, float 0xBFE38F62A0000000, float 0xBFEACE80C0000000, float 0xBFE948E5C0000000, float 0xBFD13BC3C0000000, float 0xBFD87E9C40000000, float 0xBFCD57CF20000000, float 0xBFCA853C00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x409C3CF2A0000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.37 = private unnamed_addr constant { [3 x { <{ float, float, float, float, [13 x float] }> }] } { [3 x { <{ float, float, float, float, [13 x float] }> }] [{ <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 0x40A12C19E0000000, float 0xBFEECE6860000000, float 0xBFE861D540000000, float 0xBFE4F6B1C0000000, [13 x float] zeroinitializer }> }, { <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 0x4087E2ECA0000000, float 0xBFEDA44420000000, float 0xBFEEF5F2C0000000, float 0xBFD1D22C20000000, [13 x float] zeroinitializer }> }, { <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 0x408078DC40000000, float 0xBFF759DC40000000, float 0xBFF7338940000000, float 0xBFF95996C0000000, [13 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.38 = private unnamed_addr constant %"struct.std::__1::array.3" { [3 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00] }, align 4
@.ref.tmp.39 = private unnamed_addr constant { i32, { i64, { [3 x { <{ float, float, float, float, [13 x float] }> }] } }, { %"struct.std::__1::array.3", [100 x i8] }, { i64, %"struct.std::__1::array" }, %union.anon.15 } { i32 4, { i64, { [3 x { <{ float, float, float, float, [13 x float] }> }] } } { i64 4, { [3 x { <{ float, float, float, float, [13 x float] }> }] } { [3 x { <{ float, float, float, float, [13 x float] }> }] [{ <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 0x40A12C19E0000000, float 0xBFEECE6860000000, float 0xBFE861D540000000, float 0xBFE4F6B1C0000000, [13 x float] zeroinitializer }> }, { <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 0x4087E2ECA0000000, float 0xBFEDA44420000000, float 0xBFEEF5F2C0000000, float 0xBFD1D22C20000000, [13 x float] zeroinitializer }> }, { <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 0x408078DC40000000, float 0xBFF759DC40000000, float 0xBFF7338940000000, float 0xBFF95996C0000000, [13 x float] zeroinitializer }> }] } }, { %"struct.std::__1::array.3", [100 x i8] } { %"struct.std::__1::array.3" { [3 x float] [float 1.000000e+00, float 1.000000e+00, float 1.000000e+00] }, [100 x i8] undef }, { i64, %"struct.std::__1::array" } zeroinitializer, %union.anon.15 zeroinitializer }, align 8
@.ref.tmp.40 = private unnamed_addr constant { i32, { i64, { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> } }, { %"struct.std::__1::array.6", [88 x i8] }, { i64, %"struct.std::__1::array" }, %union.anon.15 } { i32 3, { i64, { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> } } { i64 4, { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> } { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> <{ { <{ float, [16 x float] }> } { <{ float, [16 x float] }> <{ float 2.200000e+03, [16 x float] zeroinitializer }> }, { <{ float, [16 x float] }> } { <{ float, [16 x float] }> <{ float 3.920000e+02, [16 x float] zeroinitializer }> }, { <{ float, float, float, float, [13 x float] }> } { <{ float, float, float, float, [13 x float] }> <{ float 1.120000e+02, float -2.500000e-01, float -2.500000e-01, float -5.000000e-01, [13 x float] zeroinitializer }> } }> } }, { %"struct.std::__1::array.6", [88 x i8] } { %"struct.std::__1::array.6" { [3 x %"struct.std::__1::array.7"] [%"struct.std::__1::array.7" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.7" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }, %"struct.std::__1::array.7" { [2 x float] [float 1.000000e+00, float 1.000000e+00] }] }, [88 x i8] undef }, { i64, %"struct.std::__1::array" } zeroinitializer, %union.anon.15 zeroinitializer }, align 8
@.ref.tmp.41 = private unnamed_addr constant %"struct.std::__1::array.8" { [3 x %"struct.std::__1::array.9"] [%"struct.std::__1::array.9" { [9 x float] [float 3.072000e+03, float 3.072000e+03, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 4.140000e+02, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.9" { [9 x float] [float 1.024000e+03, float 1.024000e+03, float 5.000000e+01, float 5.000000e+01, float 5.000000e+01, float 5.800000e+01, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00] }, %"struct.std::__1::array.9" { [9 x float] [float 3.840000e+02, float 3.840000e+02, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 2.200000e+01, float -2.500000e-01, float -2.500000e-01, float -2.500000e-01] }] }, align 4
@.ref.tmp.42 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40D7678AA0000000, float 0xBFF0666660000000, float 0xBFE8F5C280000000, float 0xBFE4CDC880000000, float 0xBFC85F8B00000000, float 0xBFCAA61980000000, float 0xBFDAF2B660000000, float 0xBFD4F31D00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40C05E1880000000, float 0xBFD377F1C0000000, float 0xBFD7405DE0000000, float 0xBFD6D298C0000000, float 0xBFD6092220000000, float 0xBFD5915760000000, float 0xBFD350D540000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40B18D0620000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE99999A0000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.43 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40CDFF7300000000, float 0xBFF0666660000000, float 0xBFE8F5C280000000, float 0xBFE4CDC880000000, float 0xBFC85F8B00000000, float 0xBFCAA61980000000, float 0xBFDAF2B660000000, float 0xBFD4F31D00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40B5DD5C40000000, float 0xBFD377F1C0000000, float 0xBFD7405DE0000000, float 0xBFD6D298C0000000, float 0xBFD6092220000000, float 0xBFD5915760000000, float 0xBFD350D540000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40A6CFEC60000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE99999A0000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.44 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40E7678AA0000000, float 0xBFF0666660000000, float 0xBFE8F5C280000000, float 0xBFE4CDC880000000, float 0xBFC85F8B00000000, float 0xBFCAA61980000000, float 0xBFDAF2B660000000, float 0xBFD4F31D00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40D05E1880000000, float 0xBFD377F1C0000000, float 0xBFD7405DE0000000, float 0xBFD6D298C0000000, float 0xBFD6092220000000, float 0xBFD5915760000000, float 0xBFD350D540000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40C18D0620000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE99999A0000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.45 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40DDFF7300000000, float 0xBFF0666660000000, float 0xBFE8F5C280000000, float 0xBFE4CDC880000000, float 0xBFC85F8B00000000, float 0xBFCAA61980000000, float 0xBFDAF2B660000000, float 0xBFD4F31D00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40C5DD5C40000000, float 0xBFD377F1C0000000, float 0xBFD7405DE0000000, float 0xBFD6D298C0000000, float 0xBFD6092220000000, float 0xBFD5915760000000, float 0xBFD350D540000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40B6CFEC60000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE99999A0000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.46 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40F7678AA0000000, float 0xBFF0666660000000, float 0xBFE8F5C280000000, float 0xBFE4CDC880000000, float 0xBFC85F8B00000000, float 0xBFCAA61980000000, float 0xBFDAF2B660000000, float 0xBFD4F31D00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40E05E1880000000, float 0xBFD377F1C0000000, float 0xBFD7405DE0000000, float 0xBFD6D298C0000000, float 0xBFD6092220000000, float 0xBFD5915760000000, float 0xBFD350D540000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40D18D0620000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE99999A0000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.ref.tmp.47 = private unnamed_addr constant { [3 x { <{ [8 x float], [9 x float] }> }] } { [3 x { <{ [8 x float], [9 x float] }> }] [{ <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40EDFF7300000000, float 0xBFF0666660000000, float 0xBFE8F5C280000000, float 0xBFE4CDC880000000, float 0xBFC85F8B00000000, float 0xBFCAA61980000000, float 0xBFDAF2B660000000, float 0xBFD4F31D00000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40D5DD5C40000000, float 0xBFD377F1C0000000, float 0xBFD7405DE0000000, float 0xBFD6D298C0000000, float 0xBFD6092220000000, float 0xBFD5915760000000, float 0xBFD350D540000000, float 0xBFD17C6280000000], [9 x float] zeroinitializer }> }, { <{ [8 x float], [9 x float] }> } { <{ [8 x float], [9 x float] }> <{ [8 x float] [float 0x40C6CFEC60000000, float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE99999A0000000, float 0xBFE6666660000000, float 0xBFE6666660000000, float 0xBFD99999A0000000, float -5.000000e-01], [9 x float] zeroinitializer }> }] }, align 8
@.str.48 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.49 = private unnamed_addr constant [21 x i8] c"num == kDCTBlockSize\00", align 1
@.str.60 = private unnamed_addr constant [14 x i8] c"idx + 1 < len\00", align 1
@.str.61 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.62 = private unnamed_addr constant [72 x i8] c"ComputeQuantTable(library[i], table, inv_table, i, QuantTable(i), &pos)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15DequantMatrices6DecodeEPNS_9BitReaderEPNS_19ModularFrameDecoderE(%"class.jxl::DequantMatrices"*, %"class.jxl::BitReader"*, %"class.jxl::ModularFrameDecoder"*) local_unnamed_addr #0 align 2 {
  %4 = alloca [216 x i8], align 4
  %5 = alloca [112 x i8], align 4
  %6 = alloca [216 x i8], align 4
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %18, !prof !2

13:                                               ; preds = %3
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #10
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  br label %31

18:                                               ; preds = %3
  %19 = bitcast i8* %9 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = shl i64 %20, %22
  %24 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = or i64 %25, %23
  store i64 %26, i64* %24, align 8
  %27 = sub i64 63, %22
  %28 = lshr i64 %27, 3
  %29 = getelementptr inbounds i8, i8* %9, i64 %28
  store i8* %29, i8** %8, align 8
  %30 = or i64 %22, 56
  store i64 %30, i64* %21, align 8
  br label %31

31:                                               ; preds = %13, %18
  %32 = phi i64 [ %17, %13 ], [ %30, %18 ]
  %33 = phi i64 [ %15, %13 ], [ %26, %18 ]
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %35 = and i64 %33, 1
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %37 = add i64 %32, -1
  store i64 %37, i64* %36, align 8
  %38 = lshr i64 %33, 1
  store i64 %38, i64* %34, align 8
  %39 = icmp eq i64 %35, 0
  %40 = select i1 %39, i64 17, i64 0
  %41 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %41, i64 0, i32 0, i32 0
  %43 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6, i32 0, i32 1
  %45 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %44, align 8
  %46 = icmp eq %"class.jxl::QuantEncoding"* %45, %43
  %47 = ptrtoint %"class.jxl::QuantEncoding"* %43 to i64
  br i1 %46, label %75, label %48

48:                                               ; preds = %31, %70
  %49 = phi %"class.jxl::QuantEncoding"* [ %50, %70 ], [ %45, %31 ]
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %49, i64 -1
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %50, i64 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, 7
  br i1 %53, label %54, label %70

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %49, i64 -1, i32 0, i32 3
  %56 = bitcast %union.anon* %55 to %"class.std::__1::vector.10"**
  %57 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %56, align 8
  %58 = icmp eq %"class.std::__1::vector.10"* %57, null
  br i1 %58, label %70, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %57, i64 0, i32 0, i32 0
  %61 = load i32*, i32** %60, align 8
  %62 = icmp eq i32* %61, null
  br i1 %62, label %68, label %63

63:                                               ; preds = %59
  %64 = ptrtoint i32* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %57, i64 0, i32 0, i32 1
  %66 = bitcast i32** %65 to i64*
  store i64 %64, i64* %66, align 8
  %67 = bitcast i32* %61 to i8*
  tail call void @_ZdlPv(i8* %67) #11
  br label %68

68:                                               ; preds = %63, %59
  %69 = bitcast %"class.std::__1::vector.10"* %57 to i8*
  tail call void @_ZdlPv(i8* %69) #11
  br label %70

70:                                               ; preds = %68, %54, %48
  %71 = icmp eq %"class.jxl::QuantEncoding"* %50, %43
  br i1 %71, label %72, label %48

72:                                               ; preds = %70
  %73 = bitcast %"class.std::__1::vector"* %41 to i64*
  %74 = load i64, i64* %73, align 8
  br label %75

75:                                               ; preds = %31, %72
  %76 = phi i64 [ %74, %72 ], [ %47, %31 ]
  store %"class.jxl::QuantEncoding"* %43, %"class.jxl::QuantEncoding"** %44, align 8
  %77 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %77) #10
  %78 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %78)
  %79 = getelementptr inbounds [112 x i8], [112 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %79)
  %80 = getelementptr inbounds [216 x i8], [216 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %80)
  %81 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %81, i8 0, i64 212, i1 false), !alias.scope !3, !noalias !6
  %82 = getelementptr inbounds [112 x i8], [112 x i8]* %5, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %82, i8 0, i64 108, i1 false), !alias.scope !3, !noalias !6
  %83 = getelementptr inbounds [216 x i8], [216 x i8]* %6, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %83, i8 0, i64 212, i1 false), !alias.scope !3, !noalias !6
  %84 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  store i32 0, i32* %84, align 8, !alias.scope !6
  %85 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %85, i8* nonnull align 4 %78, i64 216, i1 false) #10
  %86 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* nonnull align 4 %79, i64 112, i1 false) #10
  %87 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %87, i8* nonnull align 4 %80, i64 216, i1 false) #10
  %88 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %88, align 8, !alias.scope !6
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %78)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %79)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %80)
  %89 = sub i64 %47, %76
  %90 = sdiv exact i64 %89, 560
  %91 = icmp ult i64 %90, 17
  %92 = inttoptr i64 %76 to %"class.jxl::QuantEncoding"*
  br i1 %91, label %123, label %93

93:                                               ; preds = %75
  %94 = icmp eq i64 %89, 9520
  br i1 %94, label %143, label %95

95:                                               ; preds = %93
  %96 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %92, i64 17
  %97 = icmp eq %"class.jxl::QuantEncoding"* %96, %43
  br i1 %97, label %122, label %98

98:                                               ; preds = %95, %120
  %99 = phi %"class.jxl::QuantEncoding"* [ %100, %120 ], [ %43, %95 ]
  %100 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %99, i64 -1
  %101 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %100, i64 0, i32 0, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 7
  br i1 %103, label %104, label %120

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %99, i64 -1, i32 0, i32 3
  %106 = bitcast %union.anon* %105 to %"class.std::__1::vector.10"**
  %107 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %106, align 8
  %108 = icmp eq %"class.std::__1::vector.10"* %107, null
  br i1 %108, label %120, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %107, i64 0, i32 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = icmp eq i32* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %109
  %114 = ptrtoint i32* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %107, i64 0, i32 0, i32 1
  %116 = bitcast i32** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast i32* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #11
  br label %118

118:                                              ; preds = %113, %109
  %119 = bitcast %"class.std::__1::vector.10"* %107 to i8*
  tail call void @_ZdlPv(i8* %119) #11
  br label %120

120:                                              ; preds = %118, %104, %98
  %121 = icmp eq %"class.jxl::QuantEncoding"* %100, %96
  br i1 %121, label %122, label %98

122:                                              ; preds = %120, %95
  store %"class.jxl::QuantEncoding"* %96, %"class.jxl::QuantEncoding"** %44, align 8
  br label %143

123:                                              ; preds = %75
  %124 = sub nuw nsw i64 17, %90
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector"* %41, i64 %124, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7) #10
  %125 = load i32, i32* %84, align 8
  %126 = icmp eq i32 %125, 7
  br i1 %126, label %127, label %143

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %129 = bitcast %union.anon* %128 to %"class.std::__1::vector.10"**
  %130 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %129, align 8
  %131 = icmp eq %"class.std::__1::vector.10"* %130, null
  br i1 %131, label %143, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %130, i64 0, i32 0, i32 0
  %134 = load i32*, i32** %133, align 8
  %135 = icmp eq i32* %134, null
  br i1 %135, label %141, label %136

136:                                              ; preds = %132
  %137 = ptrtoint i32* %134 to i64
  %138 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %130, i64 0, i32 0, i32 1
  %139 = bitcast i32** %138 to i64*
  store i64 %137, i64* %139, align 8
  %140 = bitcast i32* %134 to i8*
  call void @_ZdlPv(i8* %140) #11
  br label %141

141:                                              ; preds = %136, %132
  %142 = bitcast %"class.std::__1::vector.10"* %130 to i8*
  call void @_ZdlPv(i8* %142) #11
  br label %143

143:                                              ; preds = %122, %93, %123, %127, %141
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %77) #10
  br i1 %39, label %144, label %498

144:                                              ; preds = %143, %494
  %145 = phi i64 [ %496, %494 ], [ 0, %143 ]
  %146 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %42, align 8
  %147 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145
  %148 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_xE, i64 0, i64 %145
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_yE, i64 0, i64 %145
  %151 = load i64, i64* %150, align 8
  %152 = mul i64 %151, %149
  %153 = load i8*, i8** %8, align 8
  %154 = load i8*, i8** %10, align 8
  %155 = icmp ugt i8* %153, %154
  br i1 %155, label %156, label %159, !prof !2

156:                                              ; preds = %144
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #10
  %157 = load i64, i64* %34, align 8
  %158 = load i64, i64* %36, align 8
  br label %170

159:                                              ; preds = %144
  %160 = bitcast i8* %153 to i64*
  %161 = load i64, i64* %160, align 1
  %162 = load i64, i64* %36, align 8
  %163 = shl i64 %161, %162
  %164 = load i64, i64* %34, align 8
  %165 = or i64 %164, %163
  store i64 %165, i64* %34, align 8
  %166 = sub i64 63, %162
  %167 = lshr i64 %166, 3
  %168 = getelementptr inbounds i8, i8* %153, i64 %167
  store i8* %168, i8** %8, align 8
  %169 = or i64 %162, 56
  store i64 %169, i64* %36, align 8
  br label %170

170:                                              ; preds = %159, %156
  %171 = phi i64 [ %158, %156 ], [ %169, %159 ]
  %172 = phi i64 [ %157, %156 ], [ %165, %159 ]
  %173 = add i64 %171, -3
  store i64 %173, i64* %36, align 8
  %174 = lshr i64 %172, 3
  store i64 %174, i64* %34, align 8
  %175 = trunc i64 %172 to i32
  %176 = and i32 %175, 7
  switch i32 %176, label %285 [
    i32 0, label %177
    i32 1, label %193
    i32 2, label %208
    i32 4, label %227
    i32 3, label %241
    i32 5, label %255
    i32 6, label %275
    i32 7, label %279
  ]

177:                                              ; preds = %170
  %178 = load i8*, i8** %8, align 8
  %179 = load i8*, i8** %10, align 8
  %180 = icmp ugt i8* %178, %179
  br i1 %180, label %181, label %182, !prof !2

181:                                              ; preds = %177
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #10
  br label %191

182:                                              ; preds = %177
  %183 = bitcast i8* %178 to i64*
  %184 = load i64, i64* %183, align 1
  %185 = shl i64 %184, %173
  %186 = or i64 %185, %174
  store i64 %186, i64* %34, align 8
  %187 = sub i64 66, %171
  %188 = lshr i64 %187, 3
  %189 = getelementptr inbounds i8, i8* %178, i64 %188
  store i8* %189, i8** %8, align 8
  %190 = or i64 %173, 56
  store i64 %190, i64* %36, align 8
  br label %191

191:                                              ; preds = %182, %181
  %192 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 5, i32 0
  store i8 0, i8* %192, align 8
  br label %494

193:                                              ; preds = %170
  %194 = icmp eq i64 %152, 1
  br i1 %194, label %195, label %500

195:                                              ; preds = %193
  %196 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %197 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %196) #10
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %500

199:                                              ; preds = %195
  %200 = load float, float* %196, align 4
  %201 = call float @llvm.fabs.f32(float %200) #10
  %202 = fcmp olt float %201, 0x3E45798EE0000000
  br i1 %202, label %500, label %203

203:                                              ; preds = %199
  %204 = fmul float %200, 6.400000e+01
  store float %204, float* %196, align 4
  %205 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %206 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %205) #10
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %286, label %500

208:                                              ; preds = %170
  %209 = icmp eq i64 %152, 1
  br i1 %209, label %210, label %500

210:                                              ; preds = %208
  %211 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3
  %212 = bitcast %union.anon* %211 to %"struct.std::__1::array.4"*
  br label %213

213:                                              ; preds = %395, %210
  %214 = phi i64 [ 0, %210 ], [ %397, %395 ]
  %215 = getelementptr inbounds %"struct.std::__1::array.4", %"struct.std::__1::array.4"* %212, i64 0, i32 0, i64 %214, i32 0, i64 0
  %216 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %215) #10
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %500

218:                                              ; preds = %213
  %219 = load float, float* %215, align 4
  %220 = call float @llvm.fabs.f32(float %219) #10
  %221 = fcmp olt float %220, 0x3E45798EE0000000
  br i1 %221, label %500, label %222

222:                                              ; preds = %218
  %223 = fmul float %219, 6.400000e+01
  store float %223, float* %215, align 4
  %224 = getelementptr inbounds %"struct.std::__1::array.4", %"struct.std::__1::array.4"* %212, i64 0, i32 0, i64 %214, i32 0, i64 1
  %225 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %224) #10
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %355, label %500

227:                                              ; preds = %170
  %228 = icmp eq i64 %152, 1
  br i1 %228, label %229, label %500

229:                                              ; preds = %227
  %230 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %231 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %230) #10
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %237, label %500

233:                                              ; preds = %237
  %234 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %235 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %234) #10
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %399, label %500

237:                                              ; preds = %229
  %238 = load float, float* %230, align 4
  %239 = call float @llvm.fabs.f32(float %238) #10
  %240 = fcmp olt float %239, 0x3E45798EE0000000
  br i1 %240, label %500, label %233

241:                                              ; preds = %170
  %242 = icmp eq i64 %152, 1
  br i1 %242, label %243, label %500

243:                                              ; preds = %241
  %244 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %245 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %244) #10
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %251, label %500

247:                                              ; preds = %251
  %248 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %249 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %248) #10
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %415, label %500

251:                                              ; preds = %243
  %252 = load float, float* %244, align 4
  %253 = call float @llvm.fabs.f32(float %252) #10
  %254 = fcmp olt float %253, 0x3E45798EE0000000
  br i1 %254, label %500, label %247

255:                                              ; preds = %170
  %256 = icmp eq i64 %152, 1
  br i1 %256, label %257, label %500

257:                                              ; preds = %255
  %258 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 2
  %259 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 4
  br label %262

260:                                              ; preds = %271
  %261 = icmp eq i64 %274, 3
  br i1 %261, label %494, label %262

262:                                              ; preds = %260, %257
  %263 = phi i64 [ 0, %257 ], [ %274, %260 ]
  %264 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 0
  %265 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %264) #10
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %500

267:                                              ; preds = %262
  %268 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 1
  %269 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %268) #10
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %455, label %500

271:                                              ; preds = %483
  %272 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115DecodeDctParamsEPNS_9BitReaderEPNS_20DctQuantWeightParamsE(%"class.jxl::BitReader"* %1, %"struct.jxl::DctQuantWeightParams"* %259) #10
  %273 = icmp eq i32 %272, 0
  %274 = add nuw nsw i64 %263, 1
  br i1 %273, label %260, label %500

275:                                              ; preds = %170
  %276 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 2
  %277 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115DecodeDctParamsEPNS_9BitReaderEPNS_20DctQuantWeightParamsE(%"class.jxl::BitReader"* %1, %"struct.jxl::DctQuantWeightParams"* %276) #10
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %494, label %500

279:                                              ; preds = %170
  %280 = shl i64 %151, 3
  %281 = shl i64 %149, 3
  %282 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %147, i64 0, i32 0, i32 0
  store i32 7, i32* %282, align 8
  %283 = call i32 @_ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_(i64 %281, i64 %280, %"class.jxl::BitReader"* %1, %"class.jxl::QuantEncoding"* %147, i64 %145, %"class.jxl::ModularFrameDecoder"* %2) #10
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %494, label %500

285:                                              ; preds = %170
  unreachable

286:                                              ; preds = %203
  %287 = load float, float* %205, align 4
  %288 = call float @llvm.fabs.f32(float %287) #10
  %289 = fcmp olt float %288, 0x3E45798EE0000000
  br i1 %289, label %500, label %290

290:                                              ; preds = %286
  %291 = fmul float %287, 6.400000e+01
  store float %291, float* %205, align 4
  %292 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %293 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %292) #10
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %500

295:                                              ; preds = %290
  %296 = load float, float* %292, align 4
  %297 = call float @llvm.fabs.f32(float %296) #10
  %298 = fcmp olt float %297, 0x3E45798EE0000000
  br i1 %298, label %500, label %299

299:                                              ; preds = %295
  %300 = fmul float %296, 6.400000e+01
  store float %300, float* %292, align 4
  %301 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %302 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %301) #10
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %500

304:                                              ; preds = %299
  %305 = load float, float* %301, align 4
  %306 = call float @llvm.fabs.f32(float %305) #10
  %307 = fcmp olt float %306, 0x3E45798EE0000000
  br i1 %307, label %500, label %308

308:                                              ; preds = %304
  %309 = fmul float %305, 6.400000e+01
  store float %309, float* %301, align 4
  %310 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %311 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %310) #10
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %500

313:                                              ; preds = %308
  %314 = load float, float* %310, align 4
  %315 = call float @llvm.fabs.f32(float %314) #10
  %316 = fcmp olt float %315, 0x3E45798EE0000000
  br i1 %316, label %500, label %317

317:                                              ; preds = %313
  %318 = fmul float %314, 6.400000e+01
  store float %318, float* %310, align 4
  %319 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %320 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %319) #10
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %500

322:                                              ; preds = %317
  %323 = load float, float* %319, align 4
  %324 = call float @llvm.fabs.f32(float %323) #10
  %325 = fcmp olt float %324, 0x3E45798EE0000000
  br i1 %325, label %500, label %326

326:                                              ; preds = %322
  %327 = fmul float %323, 6.400000e+01
  store float %327, float* %319, align 4
  %328 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 6
  %329 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %328) #10
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %500

331:                                              ; preds = %326
  %332 = load float, float* %328, align 4
  %333 = call float @llvm.fabs.f32(float %332) #10
  %334 = fcmp olt float %333, 0x3E45798EE0000000
  br i1 %334, label %500, label %335

335:                                              ; preds = %331
  %336 = fmul float %332, 6.400000e+01
  store float %336, float* %328, align 4
  %337 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 7
  %338 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %337) #10
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %500

340:                                              ; preds = %335
  %341 = load float, float* %337, align 4
  %342 = call float @llvm.fabs.f32(float %341) #10
  %343 = fcmp olt float %342, 0x3E45798EE0000000
  br i1 %343, label %500, label %344

344:                                              ; preds = %340
  %345 = fmul float %341, 6.400000e+01
  store float %345, float* %337, align 4
  %346 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 8
  %347 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %346) #10
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %500

349:                                              ; preds = %344
  %350 = load float, float* %346, align 4
  %351 = call float @llvm.fabs.f32(float %350) #10
  %352 = fcmp olt float %351, 0x3E45798EE0000000
  br i1 %352, label %500, label %353

353:                                              ; preds = %349
  %354 = fmul float %350, 6.400000e+01
  store float %354, float* %346, align 4
  br label %494

355:                                              ; preds = %222
  %356 = load float, float* %224, align 4
  %357 = call float @llvm.fabs.f32(float %356) #10
  %358 = fcmp olt float %357, 0x3E45798EE0000000
  br i1 %358, label %500, label %359

359:                                              ; preds = %355
  %360 = fmul float %356, 6.400000e+01
  store float %360, float* %224, align 4
  %361 = getelementptr inbounds %"struct.std::__1::array.4", %"struct.std::__1::array.4"* %212, i64 0, i32 0, i64 %214, i32 0, i64 2
  %362 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %361) #10
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %364, label %500

364:                                              ; preds = %359
  %365 = load float, float* %361, align 4
  %366 = call float @llvm.fabs.f32(float %365) #10
  %367 = fcmp olt float %366, 0x3E45798EE0000000
  br i1 %367, label %500, label %368

368:                                              ; preds = %364
  %369 = fmul float %365, 6.400000e+01
  store float %369, float* %361, align 4
  %370 = getelementptr inbounds %"struct.std::__1::array.4", %"struct.std::__1::array.4"* %212, i64 0, i32 0, i64 %214, i32 0, i64 3
  %371 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %370) #10
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %500

373:                                              ; preds = %368
  %374 = load float, float* %370, align 4
  %375 = call float @llvm.fabs.f32(float %374) #10
  %376 = fcmp olt float %375, 0x3E45798EE0000000
  br i1 %376, label %500, label %377

377:                                              ; preds = %373
  %378 = fmul float %374, 6.400000e+01
  store float %378, float* %370, align 4
  %379 = getelementptr inbounds %"struct.std::__1::array.4", %"struct.std::__1::array.4"* %212, i64 0, i32 0, i64 %214, i32 0, i64 4
  %380 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %379) #10
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %500

382:                                              ; preds = %377
  %383 = load float, float* %379, align 4
  %384 = call float @llvm.fabs.f32(float %383) #10
  %385 = fcmp olt float %384, 0x3E45798EE0000000
  br i1 %385, label %500, label %386

386:                                              ; preds = %382
  %387 = fmul float %383, 6.400000e+01
  store float %387, float* %379, align 4
  %388 = getelementptr inbounds %"struct.std::__1::array.4", %"struct.std::__1::array.4"* %212, i64 0, i32 0, i64 %214, i32 0, i64 5
  %389 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %388) #10
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %391, label %500

391:                                              ; preds = %386
  %392 = load float, float* %388, align 4
  %393 = call float @llvm.fabs.f32(float %392) #10
  %394 = fcmp olt float %393, 0x3E45798EE0000000
  br i1 %394, label %500, label %395

395:                                              ; preds = %391
  %396 = fmul float %392, 6.400000e+01
  store float %396, float* %388, align 4
  %397 = add nuw nsw i64 %214, 1
  %398 = icmp eq i64 %397, 3
  br i1 %398, label %494, label %213

399:                                              ; preds = %233
  %400 = load float, float* %234, align 4
  %401 = call float @llvm.fabs.f32(float %400) #10
  %402 = fcmp olt float %401, 0x3E45798EE0000000
  br i1 %402, label %500, label %403

403:                                              ; preds = %399
  %404 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %405 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %404) #10
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %407, label %500

407:                                              ; preds = %403
  %408 = load float, float* %404, align 4
  %409 = call float @llvm.fabs.f32(float %408) #10
  %410 = fcmp olt float %409, 0x3E45798EE0000000
  br i1 %410, label %500, label %411

411:                                              ; preds = %407
  %412 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 2
  %413 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115DecodeDctParamsEPNS_9BitReaderEPNS_20DctQuantWeightParamsE(%"class.jxl::BitReader"* %1, %"struct.jxl::DctQuantWeightParams"* %412) #10
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %494, label %500

415:                                              ; preds = %247
  %416 = load float, float* %248, align 4
  %417 = call float @llvm.fabs.f32(float %416) #10
  %418 = fcmp olt float %417, 0x3E45798EE0000000
  br i1 %418, label %500, label %419

419:                                              ; preds = %415
  %420 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %421 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %420) #10
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %423, label %500

423:                                              ; preds = %419
  %424 = load float, float* %420, align 4
  %425 = call float @llvm.fabs.f32(float %424) #10
  %426 = fcmp olt float %425, 0x3E45798EE0000000
  br i1 %426, label %500, label %427

427:                                              ; preds = %423
  %428 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %429 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %428) #10
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %431, label %500

431:                                              ; preds = %427
  %432 = load float, float* %428, align 4
  %433 = call float @llvm.fabs.f32(float %432) #10
  %434 = fcmp olt float %433, 0x3E45798EE0000000
  br i1 %434, label %500, label %435

435:                                              ; preds = %431
  %436 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %437 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %436) #10
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %439, label %500

439:                                              ; preds = %435
  %440 = load float, float* %436, align 4
  %441 = call float @llvm.fabs.f32(float %440) #10
  %442 = fcmp olt float %441, 0x3E45798EE0000000
  br i1 %442, label %500, label %443

443:                                              ; preds = %439
  %444 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %445 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %444) #10
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %500

447:                                              ; preds = %443
  %448 = load float, float* %444, align 4
  %449 = call float @llvm.fabs.f32(float %448) #10
  %450 = fcmp olt float %449, 0x3E45798EE0000000
  br i1 %450, label %500, label %451

451:                                              ; preds = %447
  %452 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 2
  %453 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115DecodeDctParamsEPNS_9BitReaderEPNS_20DctQuantWeightParamsE(%"class.jxl::BitReader"* %1, %"struct.jxl::DctQuantWeightParams"* %452) #10
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %494, label %500

455:                                              ; preds = %267
  %456 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 2
  %457 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %456) #10
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %500

459:                                              ; preds = %455
  %460 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 3
  %461 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %460) #10
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %463, label %500

463:                                              ; preds = %459
  %464 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 4
  %465 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %464) #10
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %500

467:                                              ; preds = %463
  %468 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 5
  %469 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %468) #10
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %500

471:                                              ; preds = %467
  %472 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 6
  %473 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %472) #10
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %475, label %500

475:                                              ; preds = %471
  %476 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 7
  %477 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %476) #10
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %500

479:                                              ; preds = %475
  %480 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %146, i64 %145, i32 0, i32 3, i32 0, i32 0, i64 %263, i32 0, i64 8
  %481 = call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %480) #10
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %500

483:                                              ; preds = %479
  %484 = bitcast float* %264 to <4 x float>*
  %485 = load <4 x float>, <4 x float>* %484, align 4
  %486 = fmul <4 x float> %485, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %487 = bitcast float* %264 to <4 x float>*
  store <4 x float> %486, <4 x float>* %487, align 4
  %488 = load float, float* %464, align 4
  %489 = fmul float %488, 6.400000e+01
  store float %489, float* %464, align 4
  %490 = load float, float* %468, align 4
  %491 = fmul float %490, 6.400000e+01
  store float %491, float* %468, align 4
  %492 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115DecodeDctParamsEPNS_9BitReaderEPNS_20DctQuantWeightParamsE(%"class.jxl::BitReader"* %1, %"struct.jxl::DctQuantWeightParams"* %258) #10
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %271, label %500

494:                                              ; preds = %260, %395, %451, %411, %353, %279, %275, %191
  %495 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %147, i64 0, i32 0, i32 0
  store i32 %176, i32* %495, align 8
  %496 = add nuw nsw i64 %145, 1
  %497 = icmp ult i64 %496, %40
  br i1 %497, label %144, label %498

498:                                              ; preds = %494, %143
  %499 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0)
  br label %500

500:                                              ; preds = %447, %443, %439, %435, %431, %427, %423, %419, %415, %247, %243, %251, %407, %403, %399, %233, %237, %229, %349, %344, %340, %335, %331, %326, %322, %317, %313, %308, %304, %299, %295, %290, %286, %203, %195, %199, %279, %275, %255, %451, %241, %411, %227, %208, %193, %262, %267, %455, %459, %463, %467, %471, %475, %479, %271, %483, %218, %213, %222, %355, %359, %364, %368, %373, %377, %382, %386, %391, %498
  %501 = phi i32 [ %499, %498 ], [ 1, %391 ], [ %389, %386 ], [ 1, %382 ], [ %380, %377 ], [ 1, %373 ], [ %371, %368 ], [ 1, %364 ], [ %362, %359 ], [ 1, %355 ], [ %225, %222 ], [ %216, %213 ], [ 1, %218 ], [ %492, %483 ], [ %272, %271 ], [ %481, %479 ], [ %477, %475 ], [ %473, %471 ], [ %469, %467 ], [ %465, %463 ], [ %461, %459 ], [ %457, %455 ], [ %269, %267 ], [ %265, %262 ], [ 1, %193 ], [ 1, %208 ], [ 1, %227 ], [ %413, %411 ], [ 1, %241 ], [ %453, %451 ], [ 1, %255 ], [ %277, %275 ], [ %283, %279 ], [ 1, %199 ], [ %197, %195 ], [ %206, %203 ], [ 1, %286 ], [ %293, %290 ], [ 1, %295 ], [ %302, %299 ], [ 1, %304 ], [ %311, %308 ], [ 1, %313 ], [ %320, %317 ], [ 1, %322 ], [ %329, %326 ], [ 1, %331 ], [ %338, %335 ], [ 1, %340 ], [ %347, %344 ], [ 1, %349 ], [ %231, %229 ], [ 1, %237 ], [ %235, %233 ], [ 1, %399 ], [ %405, %403 ], [ 1, %407 ], [ 1, %251 ], [ %245, %243 ], [ %249, %247 ], [ 1, %415 ], [ %421, %419 ], [ 1, %423 ], [ %429, %427 ], [ 1, %431 ], [ %437, %435 ], [ 1, %439 ], [ %445, %443 ], [ 1, %447 ]
  ret i32 %501
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10
  store i64 0, i64* %3, align 8
  %5 = load atomic i8, i8* bitcast (i64* @_ZGVZN3jxl15DequantMatrices7ComputeEvE16default_matrices to i8*) acquire, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %42, !prof !9

7:                                                ; preds = %1
  %8 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3jxl15DequantMatrices7ComputeEvE16default_matrices) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %42, label %10

10:                                               ; preds = %7
  %11 = tail call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 3158016, i8* (i8*, i64)* null, i8* null) #10, !noalias !10
  %12 = load atomic i8, i8* bitcast (i64* @_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary to i8*) acquire, align 8, !noalias !10
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %19, !prof !9

14:                                               ; preds = %10
  %15 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary) #10, !noalias !10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  tail call void @_ZN3jxl15DequantMatrices11LibraryInitEv(%"struct.std::__1::array.80"* nonnull sret @_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary) #10, !noalias !10
  %18 = tail call {}* @llvm.invariant.start.p0i8(i64 9520, i8* bitcast (%"struct.std::__1::array.80"* @_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary to i8*)) #10, !noalias !10
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary) #10, !noalias !10
  br label %19

19:                                               ; preds = %17, %14, %10
  %20 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10, !noalias !10
  store i64 0, i64* %2, align 8, !noalias !10
  %21 = bitcast i8* %11 to float*
  %22 = getelementptr inbounds i8, i8* %11, i64 1579008
  %23 = bitcast i8* %22 to float*
  br label %29

24:                                               ; preds = %29
  %25 = icmp eq i64 %34, 17
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = load i64, i64* %2, align 8, !noalias !10
  %28 = icmp eq i64 %27, 394752
  br i1 %28, label %41, label %38

29:                                               ; preds = %24, %19
  %30 = phi i64 [ 0, %19 ], [ %34, %24 ]
  %31 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* bitcast (%"struct.std::__1::array.80"* @_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary to %"class.jxl::QuantEncoding"*), i64 %30
  %32 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117ComputeQuantTableERKNS_13QuantEncodingEPfS4_mNS_15DequantMatrices10QuantTableEPm(%"class.jxl::QuantEncoding"* dereferenceable(560) %31, float* %21, float* %23, i64 %30, i64* nonnull %2) #10, !noalias !10
  %33 = icmp eq i32 %32, 0
  %34 = add nuw nsw i64 %30, 1
  br i1 %33, label %24, label %35

35:                                               ; preds = %29
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 1144, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.62, i64 0, i64 0)) #10, !noalias !10
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !10
  unreachable

38:                                               ; preds = %26
  %39 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 1146, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0)) #10, !noalias !10
  %40 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !10
  unreachable

41:                                               ; preds = %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10, !noalias !10
  store i8* %11, i8** bitcast (%struct.DefaultMatrices** @_ZZN3jxl15DequantMatrices7ComputeEvE16default_matrices to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3jxl15DequantMatrices7ComputeEvE16default_matrices) #10
  br label %42

42:                                               ; preds = %7, %1, %41
  %43 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %44 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6, i32 0, i32 1
  %45 = bitcast %"class.jxl::QuantEncoding"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::vector"* %43 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %46, %48
  %50 = icmp eq i64 %49, 9520
  %51 = inttoptr i64 %48 to %"class.jxl::QuantEncoding"*
  %52 = inttoptr i64 %46 to %"class.jxl::QuantEncoding"*
  br i1 %50, label %56, label %53

53:                                               ; preds = %42
  %54 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 1155, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0)) #10
  %55 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

56:                                               ; preds = %42
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %43, i64 0, i32 0, i32 0
  %58 = icmp eq %"class.jxl::QuantEncoding"* %51, %52
  br i1 %58, label %136, label %62

59:                                               ; preds = %62
  %60 = and i8 %68, 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %136, label %71

62:                                               ; preds = %56, %62
  %63 = phi i8 [ %68, %62 ], [ 0, %56 ]
  %64 = phi %"class.jxl::QuantEncoding"* [ %69, %62 ], [ %51, %56 ]
  %65 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %64, i64 0, i32 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i8 %63, i8 1
  %69 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %64, i64 1
  %70 = icmp eq %"class.jxl::QuantEncoding"* %69, %52
  br i1 %70, label %59, label %62

71:                                               ; preds = %59
  %72 = tail call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 3158016, i8* (i8*, i64)* null, i8* null) #10, !noalias !13
  %73 = ptrtoint i8* %72 to i64
  %74 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %75 = load float*, float** %74, align 8
  %76 = bitcast %"class.jxl::DequantMatrices"* %0 to i64*
  store i64 %73, i64* %76, align 8
  %77 = icmp eq float* %75, null
  %78 = bitcast i8* %72 to float*
  br i1 %77, label %86, label %79

79:                                               ; preds = %71
  %80 = bitcast float* %75 to i8*
  %81 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %82 = load void (i8*, i8*)*, void (i8*, i8*)** %81, align 8
  %83 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %84 = load i8*, i8** %83, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %80, void (i8*, i8*)* %82, i8* %84) #10
  %85 = load float*, float** %74, align 8
  br label %86

86:                                               ; preds = %79, %71
  %87 = phi float* [ %85, %79 ], [ %78, %71 ]
  %88 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %89 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 1
  %90 = bitcast void (i8*, i8*)** %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 16, i1 false)
  store float* %87, float** %89, align 8
  %91 = getelementptr inbounds float, float* %87, i64 394752
  %92 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 2
  store float* %91, float** %92, align 8
  %93 = load i64, i64* %3, align 8
  br label %94

94:                                               ; preds = %127, %86
  %95 = phi i64 [ %93, %86 ], [ %128, %127 ]
  %96 = phi i64 [ 0, %86 ], [ %129, %127 ]
  %97 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %57, align 8
  %98 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %97, i64 %96
  %99 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %98, i64 0, i32 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %120

102:                                              ; preds = %94
  %103 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E, i64 0, i64 %96
  %104 = load i64, i64* %103, align 8
  %105 = load float*, float** %74, align 8
  %106 = getelementptr inbounds float, float* %105, i64 %95
  %107 = bitcast float* %106 to i8*
  %108 = load %struct.DefaultMatrices*, %struct.DefaultMatrices** @_ZZN3jxl15DequantMatrices7ComputeEvE16default_matrices, align 8
  %109 = getelementptr inbounds %struct.DefaultMatrices, %struct.DefaultMatrices* %108, i64 0, i32 0, i64 %95
  %110 = bitcast float* %109 to i8*
  %111 = mul i64 %104, 768
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %110, i64 %111, i1 false)
  %112 = load float*, float** %74, align 8
  %113 = getelementptr inbounds float, float* %112, i64 394752
  %114 = getelementptr inbounds float, float* %113, i64 %95
  %115 = bitcast float* %114 to i8*
  %116 = getelementptr inbounds %struct.DefaultMatrices, %struct.DefaultMatrices* %108, i64 0, i32 1, i64 %95
  %117 = bitcast float* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %117, i64 %111, i1 false)
  %118 = mul i64 %104, 192
  %119 = add i64 %118, %95
  store i64 %119, i64* %3, align 8
  br label %127

120:                                              ; preds = %94
  %121 = load float*, float** %74, align 8
  %122 = getelementptr inbounds float, float* %121, i64 394752
  %123 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117ComputeQuantTableERKNS_13QuantEncodingEPfS4_mNS_15DequantMatrices10QuantTableEPm(%"class.jxl::QuantEncoding"* dereferenceable(560) %98, float* %121, float* %122, i64 %96, i64* nonnull %3)
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %142

125:                                              ; preds = %120
  %126 = load i64, i64* %3, align 8
  br label %127

127:                                              ; preds = %125, %102
  %128 = phi i64 [ %126, %125 ], [ %119, %102 ]
  %129 = add nuw nsw i64 %96, 1
  %130 = icmp eq i64 %129, 17
  br i1 %130, label %131, label %94

131:                                              ; preds = %127
  %132 = icmp eq i64 %128, 394752
  br i1 %132, label %142, label %133

133:                                              ; preds = %131
  %134 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 1183, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0)) #10
  %135 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

136:                                              ; preds = %56, %59
  %137 = load %struct.DefaultMatrices*, %struct.DefaultMatrices** @_ZZN3jxl15DequantMatrices7ComputeEvE16default_matrices, align 8
  %138 = getelementptr inbounds %struct.DefaultMatrices, %struct.DefaultMatrices* %137, i64 0, i32 0, i64 0
  %139 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 1
  store float* %138, float** %139, align 8
  %140 = getelementptr inbounds %struct.DefaultMatrices, %struct.DefaultMatrices* %137, i64 0, i32 1, i64 0
  %141 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 2
  store float* %140, float** %141, align 8
  br label %142

142:                                              ; preds = %120, %136, %131
  %143 = phi i32 [ 0, %131 ], [ 0, %136 ], [ %123, %120 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10
  ret i32 %143
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15DequantMatrices8DecodeDCEPNS_9BitReaderE(%"class.jxl::DequantMatrices"*, %"class.jxl::BitReader"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ugt i8* %4, %6
  br i1 %7, label %8, label %13, !prof !2

8:                                                ; preds = %2
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #10
  %9 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  br label %26

13:                                               ; preds = %2
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %15, %17
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = or i64 %20, %18
  store i64 %21, i64* %19, align 8
  %22 = sub i64 63, %17
  %23 = lshr i64 %22, 3
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  store i8* %24, i8** %3, align 8
  %25 = or i64 %17, 56
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %8, %13
  %27 = phi i64 [ %12, %8 ], [ %25, %13 ]
  %28 = phi i64 [ %10, %8 ], [ %21, %13 ]
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %30 = and i64 %28, 1
  %31 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %32 = add i64 %27, -1
  store i64 %32, i64* %31, align 8
  %33 = lshr i64 %28, 1
  store i64 %33, i64* %29, align 8
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %35, label %49

35:                                               ; preds = %26
  %36 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %37 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %36) #10
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %49

39:                                               ; preds = %35
  %40 = load float, float* %36, align 4
  %41 = fmul float %40, 7.812500e-03
  store float %41, float* %36, align 4
  %42 = fcmp olt float %41, 0x3E45798EE0000000
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = fdiv float 1.000000e+00, %41
  %45 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 0
  store float %44, float* %45, align 4
  %46 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 1
  %47 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %46) #10
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %39, %35, %43, %51, %55, %61, %65, %26
  %50 = phi i32 [ 0, %26 ], [ %37, %35 ], [ 1, %39 ], [ %47, %43 ], [ 1, %51 ], [ %59, %55 ], [ 1, %61 ], [ 0, %65 ]
  ret i32 %50

51:                                               ; preds = %43
  %52 = load float, float* %46, align 4
  %53 = fmul float %52, 7.812500e-03
  store float %53, float* %46, align 4
  %54 = fcmp olt float %53, 0x3E45798EE0000000
  br i1 %54, label %49, label %55

55:                                               ; preds = %51
  %56 = fdiv float 1.000000e+00, %53
  %57 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float %56, float* %57, align 4
  %58 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 2
  %59 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %58) #10
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %49

61:                                               ; preds = %55
  %62 = load float, float* %58, align 4
  %63 = fmul float %62, 7.812500e-03
  store float %63, float* %58, align 4
  %64 = fcmp olt float %63, 0x3E45798EE0000000
  br i1 %64, label %49, label %65

65:                                               ; preds = %61
  %66 = fdiv float 1.000000e+00, %63
  %67 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float %66, float* %67, align 4
  br label %49
}

declare i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15DequantMatrices11LibraryInitEv(%"struct.std::__1::array.80"* noalias nocapture sret) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 0, i32 0
  store i32 6, i32* %2, align 8, !alias.scope !18
  %3 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 0, i32 2, i32 0
  store i64 6, i64* %3, align 8, !alias.scope !23
  %4 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 0, i32 2, i32 1
  %5 = bitcast %"struct.std::__1::array"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 8 bitcast ({ [3 x { <{ float, float, float, float, float, float, [11 x float] }> }] }* @.ref.tmp to i8*), i64 204, i1 false) #10
  %6 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 0, i32 3, i32 0, i32 0
  %7 = bitcast [3 x %"struct.std::__1::array.9"]* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 108, i1 false) #10, !alias.scope !18
  %8 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 0, i32 4
  %9 = bitcast %"struct.jxl::DctQuantWeightParams"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 212, i1 false) #10, !alias.scope !18
  %10 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 0, i32 5, i32 0
  store i8 0, i8* %10, align 8, !alias.scope !18
  %11 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 1, i32 0
  store i32 1, i32* %11, align 8, !alias.scope !24
  %12 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 1, i32 2
  %13 = bitcast %"struct.jxl::DctQuantWeightParams"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 212, i1 false) #10, !alias.scope !24
  %14 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 1, i32 3
  %15 = bitcast %union.anon* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 4 bitcast (%"struct.std::__1::array.2"* @.ref.tmp.28 to i8*), i64 36, i1 false) #10
  %16 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 1, i32 4
  %17 = bitcast %"struct.jxl::DctQuantWeightParams"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 212, i1 false) #10, !alias.scope !24
  %18 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 1, i32 5, i32 0
  store i8 0, i8* %18, align 8, !alias.scope !24
  %19 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 2, i32 0
  store i32 2, i32* %19, align 8, !alias.scope !29
  %20 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 2, i32 2
  %21 = bitcast %"struct.jxl::DctQuantWeightParams"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 212, i1 false) #10, !alias.scope !29
  %22 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 2, i32 3
  %23 = bitcast %union.anon* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 4 bitcast (%"struct.std::__1::array.4"* @.ref.tmp.29 to i8*), i64 72, i1 false) #10
  %24 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 2, i32 4
  %25 = bitcast %"struct.jxl::DctQuantWeightParams"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 212, i1 false) #10, !alias.scope !29
  %26 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 2, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !29
  %27 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 3, i32 0
  store i32 3, i32* %27, align 8, !alias.scope !34
  %28 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 3, i32 2, i32 0
  store i64 4, i64* %28, align 8, !alias.scope !39
  %29 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 3, i32 2, i32 1
  %30 = bitcast %"struct.std::__1::array"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* nonnull align 8 bitcast ({ <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> }* @.ref.tmp.30 to i8*), i64 204, i1 false) #10
  %31 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 3, i32 3
  %32 = bitcast %union.anon* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 4 bitcast (%"struct.std::__1::array.6"* @.ref.tmp.31 to i8*), i64 24, i1 false) #10
  %33 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 3, i32 4
  %34 = bitcast %"struct.jxl::DctQuantWeightParams"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 212, i1 false) #10, !alias.scope !34
  %35 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 3, i32 5, i32 0
  store i8 0, i8* %35, align 8, !alias.scope !34
  %36 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 4, i32 0
  store i32 6, i32* %36, align 8, !alias.scope !40
  %37 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 4, i32 2, i32 0
  store i64 7, i64* %37, align 8, !alias.scope !45
  %38 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 4, i32 2, i32 1
  %39 = bitcast %"struct.std::__1::array"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* nonnull align 8 bitcast ({ [3 x { <{ float, float, float, float, float, float, float, [10 x float] }> }] }* @.ref.tmp.32 to i8*), i64 204, i1 false) #10
  %40 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 4, i32 3, i32 0, i32 0
  %41 = bitcast [3 x %"struct.std::__1::array.9"]* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 108, i1 false) #10, !alias.scope !40
  %42 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 4, i32 4
  %43 = bitcast %"struct.jxl::DctQuantWeightParams"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 212, i1 false) #10, !alias.scope !40
  %44 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 4, i32 5, i32 0
  store i8 0, i8* %44, align 8, !alias.scope !40
  %45 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 5, i32 0
  store i32 6, i32* %45, align 8, !alias.scope !46
  %46 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 5, i32 2, i32 0
  store i64 8, i64* %46, align 8, !alias.scope !51
  %47 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 5, i32 2, i32 1
  %48 = bitcast %"struct.std::__1::array"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.33 to i8*), i64 204, i1 false) #10
  %49 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 5, i32 3, i32 0, i32 0
  %50 = bitcast [3 x %"struct.std::__1::array.9"]* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 108, i1 false) #10, !alias.scope !46
  %51 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 5, i32 4
  %52 = bitcast %"struct.jxl::DctQuantWeightParams"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 212, i1 false) #10, !alias.scope !46
  %53 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 5, i32 5, i32 0
  store i8 0, i8* %53, align 8, !alias.scope !46
  %54 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 6, i32 0
  store i32 6, i32* %54, align 8, !alias.scope !52
  %55 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 6, i32 2, i32 0
  store i64 7, i64* %55, align 8, !alias.scope !57
  %56 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 6, i32 2, i32 1
  %57 = bitcast %"struct.std::__1::array"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* nonnull align 8 bitcast ({ [3 x { <{ float, float, float, float, float, float, float, [10 x float] }> }] }* @.ref.tmp.34 to i8*), i64 204, i1 false) #10
  %58 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 6, i32 3, i32 0, i32 0
  %59 = bitcast [3 x %"struct.std::__1::array.9"]* %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 108, i1 false) #10, !alias.scope !52
  %60 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 6, i32 4
  %61 = bitcast %"struct.jxl::DctQuantWeightParams"* %60 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 212, i1 false) #10, !alias.scope !52
  %62 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 6, i32 5, i32 0
  store i8 0, i8* %62, align 8, !alias.scope !52
  %63 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 7, i32 0
  store i32 6, i32* %63, align 8, !alias.scope !58
  %64 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 7, i32 2, i32 0
  store i64 8, i64* %64, align 8, !alias.scope !63
  %65 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 7, i32 2, i32 1
  %66 = bitcast %"struct.std::__1::array"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.35 to i8*), i64 204, i1 false) #10
  %67 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 7, i32 3, i32 0, i32 0
  %68 = bitcast [3 x %"struct.std::__1::array.9"]* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 108, i1 false) #10, !alias.scope !58
  %69 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 7, i32 4
  %70 = bitcast %"struct.jxl::DctQuantWeightParams"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 212, i1 false) #10, !alias.scope !58
  %71 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 7, i32 5, i32 0
  store i8 0, i8* %71, align 8, !alias.scope !58
  %72 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 8, i32 0
  store i32 6, i32* %72, align 8, !alias.scope !64
  %73 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 8, i32 2, i32 0
  store i64 8, i64* %73, align 8, !alias.scope !69
  %74 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 8, i32 2, i32 1
  %75 = bitcast %"struct.std::__1::array"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.36 to i8*), i64 204, i1 false) #10
  %76 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 8, i32 3, i32 0, i32 0
  %77 = bitcast [3 x %"struct.std::__1::array.9"]* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 108, i1 false) #10, !alias.scope !64
  %78 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 8, i32 4
  %79 = bitcast %"struct.jxl::DctQuantWeightParams"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 212, i1 false) #10, !alias.scope !64
  %80 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 8, i32 5, i32 0
  store i8 0, i8* %80, align 8, !alias.scope !64
  %81 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 9, i32 0
  store i32 4, i32* %81, align 8, !alias.scope !70
  %82 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 9, i32 2, i32 0
  store i64 4, i64* %82, align 8, !alias.scope !75
  %83 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 9, i32 2, i32 1
  %84 = bitcast %"struct.std::__1::array"* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* nonnull align 8 bitcast ({ [3 x { <{ float, float, float, float, [13 x float] }> }] }* @.ref.tmp.37 to i8*), i64 204, i1 false) #10
  %85 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 9, i32 3
  %86 = bitcast %union.anon* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 4 bitcast (%"struct.std::__1::array.3"* @.ref.tmp.38 to i8*), i64 12, i1 false) #10
  %87 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 9, i32 4
  %88 = bitcast %"struct.jxl::DctQuantWeightParams"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 212, i1 false) #10, !alias.scope !70
  %89 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 9, i32 5, i32 0
  store i8 0, i8* %89, align 8, !alias.scope !70
  %90 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 10, i32 0
  store i32 5, i32* %90, align 8, !alias.scope !76
  %91 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 10, i32 2
  %92 = bitcast %"struct.jxl::DctQuantWeightParams"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 bitcast (i64* getelementptr inbounds ({ i32, { i64, { [3 x { <{ float, float, float, float, [13 x float] }> }] } }, { %"struct.std::__1::array.3", [100 x i8] }, { i64, %"struct.std::__1::array" }, %union.anon.15 }, { i32, { i64, { [3 x { <{ float, float, float, float, [13 x float] }> }] } }, { %"struct.std::__1::array.3", [100 x i8] }, { i64, %"struct.std::__1::array" }, %union.anon.15 }* @.ref.tmp.39, i64 0, i32 1, i32 0) to i8*), i64 216, i1 false) #10
  %93 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 10, i32 3, i32 0
  %94 = bitcast %"struct.std::__1::array.8"* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 4 bitcast (%"struct.std::__1::array.8"* @.ref.tmp.41 to i8*), i64 108, i1 false) #10
  %95 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 10, i32 4
  %96 = bitcast %"struct.jxl::DctQuantWeightParams"* %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 bitcast (i64* getelementptr inbounds ({ i32, { i64, { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> } }, { %"struct.std::__1::array.6", [88 x i8] }, { i64, %"struct.std::__1::array" }, %union.anon.15 }, { i32, { i64, { <{ { <{ float, [16 x float] }> }, { <{ float, [16 x float] }> }, { <{ float, float, float, float, [13 x float] }> } }> } }, { %"struct.std::__1::array.6", [88 x i8] }, { i64, %"struct.std::__1::array" }, %union.anon.15 }* @.ref.tmp.40, i64 0, i32 1, i32 0) to i8*), i64 216, i1 false) #10
  %97 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 10, i32 5, i32 0
  store i8 0, i8* %97, align 8, !alias.scope !76
  %98 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 11, i32 0
  store i32 6, i32* %98, align 8, !alias.scope !81
  %99 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 11, i32 2, i32 0
  store i64 8, i64* %99, align 8, !alias.scope !86
  %100 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 11, i32 2, i32 1
  %101 = bitcast %"struct.std::__1::array"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.42 to i8*), i64 204, i1 false) #10
  %102 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 11, i32 3, i32 0, i32 0
  %103 = bitcast [3 x %"struct.std::__1::array.9"]* %102 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 108, i1 false) #10, !alias.scope !81
  %104 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 11, i32 4
  %105 = bitcast %"struct.jxl::DctQuantWeightParams"* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %105, i8 0, i64 212, i1 false) #10, !alias.scope !81
  %106 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 11, i32 5, i32 0
  store i8 0, i8* %106, align 8, !alias.scope !81
  %107 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 12, i32 0
  store i32 6, i32* %107, align 8, !alias.scope !87
  %108 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 12, i32 2, i32 0
  store i64 8, i64* %108, align 8, !alias.scope !92
  %109 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 12, i32 2, i32 1
  %110 = bitcast %"struct.std::__1::array"* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.43 to i8*), i64 204, i1 false) #10
  %111 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 12, i32 3, i32 0, i32 0
  %112 = bitcast [3 x %"struct.std::__1::array.9"]* %111 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 108, i1 false) #10, !alias.scope !87
  %113 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 12, i32 4
  %114 = bitcast %"struct.jxl::DctQuantWeightParams"* %113 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %114, i8 0, i64 212, i1 false) #10, !alias.scope !87
  %115 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 12, i32 5, i32 0
  store i8 0, i8* %115, align 8, !alias.scope !87
  %116 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 13, i32 0
  store i32 6, i32* %116, align 8, !alias.scope !93
  %117 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 13, i32 2, i32 0
  store i64 8, i64* %117, align 8, !alias.scope !98
  %118 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 13, i32 2, i32 1
  %119 = bitcast %"struct.std::__1::array"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.44 to i8*), i64 204, i1 false) #10
  %120 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 13, i32 3, i32 0, i32 0
  %121 = bitcast [3 x %"struct.std::__1::array.9"]* %120 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 108, i1 false) #10, !alias.scope !93
  %122 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 13, i32 4
  %123 = bitcast %"struct.jxl::DctQuantWeightParams"* %122 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %123, i8 0, i64 212, i1 false) #10, !alias.scope !93
  %124 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 13, i32 5, i32 0
  store i8 0, i8* %124, align 8, !alias.scope !93
  %125 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 14, i32 0
  store i32 6, i32* %125, align 8, !alias.scope !99
  %126 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 14, i32 2, i32 0
  store i64 8, i64* %126, align 8, !alias.scope !104
  %127 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 14, i32 2, i32 1
  %128 = bitcast %"struct.std::__1::array"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.45 to i8*), i64 204, i1 false) #10
  %129 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 14, i32 3, i32 0, i32 0
  %130 = bitcast [3 x %"struct.std::__1::array.9"]* %129 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 108, i1 false) #10, !alias.scope !99
  %131 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 14, i32 4
  %132 = bitcast %"struct.jxl::DctQuantWeightParams"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 212, i1 false) #10, !alias.scope !99
  %133 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 14, i32 5, i32 0
  store i8 0, i8* %133, align 8, !alias.scope !99
  %134 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 15, i32 0
  store i32 6, i32* %134, align 8, !alias.scope !105
  %135 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 15, i32 2, i32 0
  store i64 8, i64* %135, align 8, !alias.scope !110
  %136 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 15, i32 2, i32 1
  %137 = bitcast %"struct.std::__1::array"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %137, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.46 to i8*), i64 204, i1 false) #10
  %138 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 15, i32 3, i32 0, i32 0
  %139 = bitcast [3 x %"struct.std::__1::array.9"]* %138 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 108, i1 false) #10, !alias.scope !105
  %140 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 15, i32 4
  %141 = bitcast %"struct.jxl::DctQuantWeightParams"* %140 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 212, i1 false) #10, !alias.scope !105
  %142 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 15, i32 5, i32 0
  store i8 0, i8* %142, align 8, !alias.scope !105
  %143 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 16, i32 0
  store i32 6, i32* %143, align 8, !alias.scope !111
  %144 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 16, i32 2, i32 0
  store i64 8, i64* %144, align 8, !alias.scope !116
  %145 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 16, i32 2, i32 1
  %146 = bitcast %"struct.std::__1::array"* %145 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* nonnull align 8 bitcast ({ [3 x { <{ [8 x float], [9 x float] }> }] }* @.ref.tmp.47 to i8*), i64 204, i1 false) #10
  %147 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 16, i32 3, i32 0, i32 0
  %148 = bitcast [3 x %"struct.std::__1::array.9"]* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %148, i8 0, i64 108, i1 false) #10, !alias.scope !111
  %149 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 16, i32 4
  %150 = bitcast %"struct.jxl::DctQuantWeightParams"* %149 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 212, i1 false) #10, !alias.scope !111
  %151 = getelementptr inbounds %"struct.std::__1::array.80", %"struct.std::__1::array.80"* %0, i64 0, i32 0, i64 16, i32 5, i32 0
  store i8 0, i8* %151, align 8, !alias.scope !111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::QuantEncoding"* @_ZN3jxl15DequantMatrices7LibraryEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %8, !prof !9

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  tail call void @_ZN3jxl15DequantMatrices11LibraryInitEv(%"struct.std::__1::array.80"* nonnull sret @_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary)
  %7 = tail call {}* @llvm.invariant.start.p0i8(i64 9520, i8* bitcast (%"struct.std::__1::array.80"* @_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary to i8*))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary) #10
  br label %8

8:                                                ; preds = %3, %6, %0
  ret %"class.jxl::QuantEncoding"* bitcast (%"struct.std::__1::array.80"* @_ZZN3jxl15DequantMatrices7LibraryEvE15kDequantLibrary to %"class.jxl::QuantEncoding"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_117ComputeQuantTableERKNS_13QuantEncodingEPfS4_mNS_15DequantMatrices10QuantTableEPm(%"class.jxl::QuantEncoding"* readonly dereferenceable(560), float* noalias nocapture, float* noalias nocapture, i64, i64* nocapture) unnamed_addr #0 {
  %6 = alloca [48 x float], align 16
  %7 = alloca [96 x float], align 16
  %8 = alloca [96 x float], align 16
  %9 = alloca [48 x float], align 16
  %10 = tail call i8* @_Znwm(i64 786432) #11
  %11 = bitcast i8* %10 to float*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %10, i8 0, i64 786432, i1 false) #10
  %12 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_xE, i64 0, i64 %3
  %13 = load i64, i64* %12, align 8
  %14 = shl i64 %13, 3
  %15 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_yE, i64 0, i64 %3
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %16, 3
  %18 = mul i64 %17, %14
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  switch i32 %20, label %939 [
    i32 0, label %21
    i32 1, label %24
    i32 2, label %176
    i32 3, label %396
    i32 4, label %744
    i32 6, label %823
    i32 7, label %829
    i32 5, label %883
  ]

21:                                               ; preds = %5
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 276, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i64 0, i64 0)) #10
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

24:                                               ; preds = %5
  %25 = icmp eq i64 %18, 64
  br i1 %25, label %29, label %26

26:                                               ; preds = %24
  %27 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 280, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0)) #10
  %28 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> zeroinitializer
  %35 = bitcast i8* %10 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %35, align 4
  %36 = getelementptr inbounds i8, i8* %10, i64 16
  %37 = bitcast i8* %36 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %37, align 4
  %38 = getelementptr inbounds i8, i8* %10, i64 32
  %39 = bitcast i8* %38 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %39, align 4
  %40 = getelementptr inbounds i8, i8* %10, i64 48
  %41 = bitcast i8* %40 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %41, align 4
  %42 = getelementptr inbounds i8, i8* %10, i64 64
  %43 = bitcast i8* %42 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %43, align 4
  %44 = getelementptr inbounds i8, i8* %10, i64 80
  %45 = bitcast i8* %44 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds i8, i8* %10, i64 96
  %47 = bitcast i8* %46 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %47, align 4
  %48 = getelementptr inbounds i8, i8* %10, i64 112
  %49 = bitcast i8* %48 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %49, align 4
  %50 = getelementptr inbounds i8, i8* %10, i64 128
  %51 = bitcast i8* %50 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %51, align 4
  %52 = getelementptr inbounds i8, i8* %10, i64 144
  %53 = bitcast i8* %52 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %53, align 4
  %54 = getelementptr inbounds i8, i8* %10, i64 160
  %55 = bitcast i8* %54 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %55, align 4
  %56 = getelementptr inbounds i8, i8* %10, i64 176
  %57 = bitcast i8* %56 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %57, align 4
  %58 = getelementptr inbounds i8, i8* %10, i64 192
  %59 = bitcast i8* %58 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %59, align 4
  %60 = getelementptr inbounds i8, i8* %10, i64 208
  %61 = bitcast i8* %60 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %61, align 4
  %62 = getelementptr inbounds i8, i8* %10, i64 224
  %63 = bitcast i8* %62 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %63, align 4
  %64 = getelementptr inbounds i8, i8* %10, i64 240
  %65 = bitcast i8* %64 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %65, align 4
  %66 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds i8, i8* %10, i64 4
  %70 = bitcast i8* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds i8, i8* %10, i64 32
  %72 = bitcast i8* %71 to i32*
  store i32 %68, i32* %72, align 4
  %73 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %74 = bitcast float* %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds i8, i8* %10, i64 36
  %77 = bitcast i8* %76 to i32*
  store i32 %75, i32* %77, align 4
  %78 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %79 = bitcast float* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = insertelement <4 x i32> undef, i32 %80, i32 0
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> zeroinitializer
  %83 = getelementptr inbounds i8, i8* %10, i64 256
  %84 = bitcast i8* %83 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %84, align 4
  %85 = getelementptr inbounds i8, i8* %10, i64 272
  %86 = bitcast i8* %85 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4
  %87 = getelementptr inbounds i8, i8* %10, i64 288
  %88 = bitcast i8* %87 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %88, align 4
  %89 = getelementptr inbounds i8, i8* %10, i64 304
  %90 = bitcast i8* %89 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %90, align 4
  %91 = getelementptr inbounds i8, i8* %10, i64 320
  %92 = bitcast i8* %91 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %92, align 4
  %93 = getelementptr inbounds i8, i8* %10, i64 336
  %94 = bitcast i8* %93 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %94, align 4
  %95 = getelementptr inbounds i8, i8* %10, i64 352
  %96 = bitcast i8* %95 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %96, align 4
  %97 = getelementptr inbounds i8, i8* %10, i64 368
  %98 = bitcast i8* %97 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %98, align 4
  %99 = getelementptr inbounds i8, i8* %10, i64 384
  %100 = bitcast i8* %99 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %100, align 4
  %101 = getelementptr inbounds i8, i8* %10, i64 400
  %102 = bitcast i8* %101 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %102, align 4
  %103 = getelementptr inbounds i8, i8* %10, i64 416
  %104 = bitcast i8* %103 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %104, align 4
  %105 = getelementptr inbounds i8, i8* %10, i64 432
  %106 = bitcast i8* %105 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %106, align 4
  %107 = getelementptr inbounds i8, i8* %10, i64 448
  %108 = bitcast i8* %107 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %108, align 4
  %109 = getelementptr inbounds i8, i8* %10, i64 464
  %110 = bitcast i8* %109 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %110, align 4
  %111 = getelementptr inbounds i8, i8* %10, i64 480
  %112 = bitcast i8* %111 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %112, align 4
  %113 = getelementptr inbounds i8, i8* %10, i64 496
  %114 = bitcast i8* %113 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %114, align 4
  %115 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %116 = bitcast float* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds i8, i8* %10, i64 260
  %119 = bitcast i8* %118 to i32*
  store i32 %117, i32* %119, align 4
  %120 = getelementptr inbounds i8, i8* %10, i64 288
  %121 = bitcast i8* %120 to i32*
  store i32 %117, i32* %121, align 4
  %122 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds i8, i8* %10, i64 292
  %126 = bitcast i8* %125 to i32*
  store i32 %124, i32* %126, align 4
  %127 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 6
  %128 = bitcast float* %127 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = insertelement <4 x i32> undef, i32 %129, i32 0
  %131 = shufflevector <4 x i32> %130, <4 x i32> undef, <4 x i32> zeroinitializer
  %132 = getelementptr inbounds i8, i8* %10, i64 512
  %133 = bitcast i8* %132 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %133, align 4
  %134 = getelementptr inbounds i8, i8* %10, i64 528
  %135 = bitcast i8* %134 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %135, align 4
  %136 = getelementptr inbounds i8, i8* %10, i64 544
  %137 = bitcast i8* %136 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %137, align 4
  %138 = getelementptr inbounds i8, i8* %10, i64 560
  %139 = bitcast i8* %138 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %139, align 4
  %140 = getelementptr inbounds i8, i8* %10, i64 576
  %141 = bitcast i8* %140 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %141, align 4
  %142 = getelementptr inbounds i8, i8* %10, i64 592
  %143 = bitcast i8* %142 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %143, align 4
  %144 = getelementptr inbounds i8, i8* %10, i64 608
  %145 = bitcast i8* %144 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %145, align 4
  %146 = getelementptr inbounds i8, i8* %10, i64 624
  %147 = bitcast i8* %146 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %147, align 4
  %148 = getelementptr inbounds i8, i8* %10, i64 640
  %149 = bitcast i8* %148 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %149, align 4
  %150 = getelementptr inbounds i8, i8* %10, i64 656
  %151 = bitcast i8* %150 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %151, align 4
  %152 = getelementptr inbounds i8, i8* %10, i64 672
  %153 = bitcast i8* %152 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %153, align 4
  %154 = getelementptr inbounds i8, i8* %10, i64 688
  %155 = bitcast i8* %154 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %155, align 4
  %156 = getelementptr inbounds i8, i8* %10, i64 704
  %157 = bitcast i8* %156 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %157, align 4
  %158 = getelementptr inbounds i8, i8* %10, i64 720
  %159 = bitcast i8* %158 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %159, align 4
  %160 = getelementptr inbounds i8, i8* %10, i64 736
  %161 = bitcast i8* %160 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %161, align 4
  %162 = getelementptr inbounds i8, i8* %10, i64 752
  %163 = bitcast i8* %162 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %163, align 4
  %164 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 7
  %165 = bitcast float* %164 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds i8, i8* %10, i64 516
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 4
  %169 = getelementptr inbounds i8, i8* %10, i64 544
  %170 = bitcast i8* %169 to i32*
  store i32 %166, i32* %170, align 4
  %171 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 8
  %172 = bitcast float* %171 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds i8, i8* %10, i64 548
  %175 = bitcast i8* %174 to i32*
  store i32 %173, i32* %175, align 4
  br label %939

176:                                              ; preds = %5
  %177 = icmp eq i64 %18, 64
  br i1 %177, label %181, label %178

178:                                              ; preds = %176
  %179 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 285, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0)) #10
  %180 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

181:                                              ; preds = %176
  %182 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  store float 2.989000e+03, float* %11, align 4
  %183 = bitcast %union.anon* %182 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds i8, i8* %10, i64 32
  %186 = bitcast i8* %185 to i32*
  store i32 %184, i32* %186, align 4
  %187 = getelementptr inbounds i8, i8* %10, i64 4
  %188 = bitcast i8* %187 to i32*
  store i32 %184, i32* %188, align 4
  %189 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %190 = bitcast float* %189 to i32*
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds i8, i8* %10, i64 36
  %193 = bitcast i8* %192 to i32*
  store i32 %191, i32* %193, align 4
  %194 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %195 = getelementptr inbounds i8, i8* %10, i64 8
  %196 = bitcast i8* %195 to i32*
  %197 = bitcast float* %194 to <2 x i32>*
  %198 = load <2 x i32>, <2 x i32>* %197, align 4
  %199 = shufflevector <2 x i32> %198, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %200 = extractelement <2 x i32> %198, i32 0
  store i32 %200, i32* %196, align 4
  %201 = getelementptr inbounds i8, i8* %10, i64 64
  %202 = getelementptr inbounds i8, i8* %10, i64 12
  %203 = bitcast i8* %202 to i32*
  store i32 %200, i32* %203, align 4
  %204 = getelementptr inbounds i8, i8* %10, i64 40
  %205 = bitcast i8* %204 to i32*
  store i32 %200, i32* %205, align 4
  %206 = getelementptr inbounds i8, i8* %10, i64 96
  %207 = bitcast i8* %206 to i32*
  store i32 %200, i32* %207, align 4
  %208 = getelementptr inbounds i8, i8* %10, i64 44
  %209 = bitcast i8* %208 to i32*
  store i32 %200, i32* %209, align 4
  %210 = getelementptr inbounds i8, i8* %10, i64 100
  %211 = bitcast i8* %210 to i32*
  store i32 %200, i32* %211, align 4
  %212 = bitcast i8* %201 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %212, align 4
  %213 = getelementptr inbounds i8, i8* %10, i64 104
  %214 = bitcast i8* %213 to i32*
  %215 = extractelement <2 x i32> %198, i32 1
  store i32 %215, i32* %214, align 4
  %216 = getelementptr inbounds i8, i8* %10, i64 108
  %217 = bitcast i8* %216 to i32*
  store i32 %215, i32* %217, align 4
  %218 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %219 = bitcast float* %218 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds i8, i8* %10, i64 16
  %222 = getelementptr inbounds i8, i8* %10, i64 128
  %223 = insertelement <4 x i32> undef, i32 %220, i32 0
  %224 = shufflevector <4 x i32> %223, <4 x i32> undef, <4 x i32> zeroinitializer
  %225 = bitcast i8* %221 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %225, align 4
  %226 = bitcast i8* %222 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %226, align 4
  %227 = getelementptr inbounds i8, i8* %10, i64 48
  %228 = getelementptr inbounds i8, i8* %10, i64 160
  %229 = bitcast i8* %227 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %229, align 4
  %230 = bitcast i8* %228 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %230, align 4
  %231 = getelementptr inbounds i8, i8* %10, i64 80
  %232 = getelementptr inbounds i8, i8* %10, i64 192
  %233 = bitcast i8* %231 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %233, align 4
  %234 = bitcast i8* %232 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %234, align 4
  %235 = getelementptr inbounds i8, i8* %10, i64 112
  %236 = getelementptr inbounds i8, i8* %10, i64 224
  %237 = bitcast i8* %235 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %237, align 4
  %238 = bitcast i8* %236 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %238, align 4
  %239 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %240 = bitcast float* %239 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds i8, i8* %10, i64 144
  %243 = insertelement <4 x i32> undef, i32 %241, i32 0
  %244 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> zeroinitializer
  %245 = bitcast i8* %242 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %245, align 4
  %246 = getelementptr inbounds i8, i8* %10, i64 176
  %247 = bitcast i8* %246 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %247, align 4
  %248 = getelementptr inbounds i8, i8* %10, i64 208
  %249 = bitcast i8* %248 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %249, align 4
  %250 = getelementptr inbounds i8, i8* %10, i64 240
  %251 = bitcast i8* %250 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %251, align 4
  %252 = getelementptr inbounds i8, i8* %10, i64 256
  %253 = bitcast i8* %252 to float*
  store float 2.989000e+03, float* %253, align 4
  %254 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 6
  %255 = bitcast float* %254 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds i8, i8* %10, i64 288
  %258 = bitcast i8* %257 to i32*
  store i32 %256, i32* %258, align 4
  %259 = getelementptr inbounds i8, i8* %10, i64 260
  %260 = bitcast i8* %259 to i32*
  store i32 %256, i32* %260, align 4
  %261 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 7
  %262 = bitcast float* %261 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = getelementptr inbounds i8, i8* %10, i64 292
  %265 = bitcast i8* %264 to i32*
  store i32 %263, i32* %265, align 4
  %266 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 8
  %267 = getelementptr inbounds i8, i8* %10, i64 264
  %268 = bitcast i8* %267 to i32*
  %269 = bitcast float* %266 to <2 x i32>*
  %270 = load <2 x i32>, <2 x i32>* %269, align 4
  %271 = shufflevector <2 x i32> %270, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %272 = extractelement <2 x i32> %270, i32 0
  store i32 %272, i32* %268, align 4
  %273 = getelementptr inbounds i8, i8* %10, i64 320
  %274 = getelementptr inbounds i8, i8* %10, i64 268
  %275 = bitcast i8* %274 to i32*
  store i32 %272, i32* %275, align 4
  %276 = getelementptr inbounds i8, i8* %10, i64 296
  %277 = bitcast i8* %276 to i32*
  store i32 %272, i32* %277, align 4
  %278 = getelementptr inbounds i8, i8* %10, i64 352
  %279 = bitcast i8* %278 to i32*
  store i32 %272, i32* %279, align 4
  %280 = getelementptr inbounds i8, i8* %10, i64 300
  %281 = bitcast i8* %280 to i32*
  store i32 %272, i32* %281, align 4
  %282 = getelementptr inbounds i8, i8* %10, i64 356
  %283 = bitcast i8* %282 to i32*
  store i32 %272, i32* %283, align 4
  %284 = bitcast i8* %273 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %284, align 4
  %285 = getelementptr inbounds i8, i8* %10, i64 360
  %286 = bitcast i8* %285 to i32*
  %287 = extractelement <2 x i32> %270, i32 1
  store i32 %287, i32* %286, align 4
  %288 = getelementptr inbounds i8, i8* %10, i64 364
  %289 = bitcast i8* %288 to i32*
  store i32 %287, i32* %289, align 4
  %290 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 1
  %291 = bitcast float* %290 to i32*
  %292 = load i32, i32* %291, align 4
  %293 = getelementptr inbounds i8, i8* %10, i64 272
  %294 = getelementptr inbounds i8, i8* %10, i64 384
  %295 = insertelement <4 x i32> undef, i32 %292, i32 0
  %296 = shufflevector <4 x i32> %295, <4 x i32> undef, <4 x i32> zeroinitializer
  %297 = bitcast i8* %293 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %297, align 4
  %298 = bitcast i8* %294 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %298, align 4
  %299 = getelementptr inbounds i8, i8* %10, i64 304
  %300 = getelementptr inbounds i8, i8* %10, i64 416
  %301 = bitcast i8* %299 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %301, align 4
  %302 = bitcast i8* %300 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %302, align 4
  %303 = getelementptr inbounds i8, i8* %10, i64 336
  %304 = getelementptr inbounds i8, i8* %10, i64 448
  %305 = bitcast i8* %303 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %305, align 4
  %306 = bitcast i8* %304 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %306, align 4
  %307 = getelementptr inbounds i8, i8* %10, i64 368
  %308 = getelementptr inbounds i8, i8* %10, i64 480
  %309 = bitcast i8* %307 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %309, align 4
  %310 = bitcast i8* %308 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %310, align 4
  %311 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 2
  %312 = bitcast float* %311 to i32*
  %313 = load i32, i32* %312, align 4
  %314 = getelementptr inbounds i8, i8* %10, i64 400
  %315 = insertelement <4 x i32> undef, i32 %313, i32 0
  %316 = shufflevector <4 x i32> %315, <4 x i32> undef, <4 x i32> zeroinitializer
  %317 = bitcast i8* %314 to <4 x i32>*
  store <4 x i32> %316, <4 x i32>* %317, align 4
  %318 = getelementptr inbounds i8, i8* %10, i64 432
  %319 = bitcast i8* %318 to <4 x i32>*
  store <4 x i32> %316, <4 x i32>* %319, align 4
  %320 = getelementptr inbounds i8, i8* %10, i64 464
  %321 = bitcast i8* %320 to <4 x i32>*
  store <4 x i32> %316, <4 x i32>* %321, align 4
  %322 = getelementptr inbounds i8, i8* %10, i64 496
  %323 = bitcast i8* %322 to <4 x i32>*
  store <4 x i32> %316, <4 x i32>* %323, align 4
  %324 = getelementptr inbounds i8, i8* %10, i64 512
  %325 = bitcast i8* %324 to float*
  store float 2.989000e+03, float* %325, align 4
  %326 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 3
  %327 = bitcast float* %326 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = getelementptr inbounds i8, i8* %10, i64 544
  %330 = bitcast i8* %329 to i32*
  store i32 %328, i32* %330, align 4
  %331 = getelementptr inbounds i8, i8* %10, i64 516
  %332 = bitcast i8* %331 to i32*
  store i32 %328, i32* %332, align 4
  %333 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 4
  %334 = bitcast float* %333 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = getelementptr inbounds i8, i8* %10, i64 548
  %337 = bitcast i8* %336 to i32*
  store i32 %335, i32* %337, align 4
  %338 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 5
  %339 = getelementptr inbounds i8, i8* %10, i64 520
  %340 = bitcast i8* %339 to i32*
  %341 = bitcast float* %338 to <2 x i32>*
  %342 = load <2 x i32>, <2 x i32>* %341, align 4
  %343 = shufflevector <2 x i32> %342, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %344 = extractelement <2 x i32> %342, i32 0
  store i32 %344, i32* %340, align 4
  %345 = getelementptr inbounds i8, i8* %10, i64 576
  %346 = getelementptr inbounds i8, i8* %10, i64 524
  %347 = bitcast i8* %346 to i32*
  store i32 %344, i32* %347, align 4
  %348 = getelementptr inbounds i8, i8* %10, i64 552
  %349 = bitcast i8* %348 to i32*
  store i32 %344, i32* %349, align 4
  %350 = getelementptr inbounds i8, i8* %10, i64 608
  %351 = bitcast i8* %350 to i32*
  store i32 %344, i32* %351, align 4
  %352 = getelementptr inbounds i8, i8* %10, i64 556
  %353 = bitcast i8* %352 to i32*
  store i32 %344, i32* %353, align 4
  %354 = getelementptr inbounds i8, i8* %10, i64 612
  %355 = bitcast i8* %354 to i32*
  store i32 %344, i32* %355, align 4
  %356 = bitcast i8* %345 to <4 x i32>*
  store <4 x i32> %343, <4 x i32>* %356, align 4
  %357 = getelementptr inbounds i8, i8* %10, i64 616
  %358 = bitcast i8* %357 to i32*
  %359 = extractelement <2 x i32> %342, i32 1
  store i32 %359, i32* %358, align 4
  %360 = getelementptr inbounds i8, i8* %10, i64 620
  %361 = bitcast i8* %360 to i32*
  store i32 %359, i32* %361, align 4
  %362 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 7
  %363 = bitcast float* %362 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = getelementptr inbounds i8, i8* %10, i64 528
  %366 = getelementptr inbounds i8, i8* %10, i64 640
  %367 = insertelement <4 x i32> undef, i32 %364, i32 0
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> zeroinitializer
  %369 = bitcast i8* %365 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %369, align 4
  %370 = bitcast i8* %366 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %370, align 4
  %371 = getelementptr inbounds i8, i8* %10, i64 560
  %372 = getelementptr inbounds i8, i8* %10, i64 672
  %373 = bitcast i8* %371 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %373, align 4
  %374 = bitcast i8* %372 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %374, align 4
  %375 = getelementptr inbounds i8, i8* %10, i64 592
  %376 = getelementptr inbounds i8, i8* %10, i64 704
  %377 = bitcast i8* %375 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %377, align 4
  %378 = bitcast i8* %376 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %378, align 4
  %379 = getelementptr inbounds i8, i8* %10, i64 624
  %380 = getelementptr inbounds i8, i8* %10, i64 736
  %381 = bitcast i8* %379 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %381, align 4
  %382 = bitcast i8* %380 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %382, align 4
  %383 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 8
  %384 = bitcast float* %383 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = getelementptr inbounds i8, i8* %10, i64 656
  %387 = insertelement <4 x i32> undef, i32 %385, i32 0
  %388 = shufflevector <4 x i32> %387, <4 x i32> undef, <4 x i32> zeroinitializer
  %389 = bitcast i8* %386 to <4 x i32>*
  store <4 x i32> %388, <4 x i32>* %389, align 4
  %390 = getelementptr inbounds i8, i8* %10, i64 688
  %391 = bitcast i8* %390 to <4 x i32>*
  store <4 x i32> %388, <4 x i32>* %391, align 4
  %392 = getelementptr inbounds i8, i8* %10, i64 720
  %393 = bitcast i8* %392 to <4 x i32>*
  store <4 x i32> %388, <4 x i32>* %393, align 4
  %394 = getelementptr inbounds i8, i8* %10, i64 752
  %395 = bitcast i8* %394 to <4 x i32>*
  store <4 x i32> %388, <4 x i32>* %395, align 4
  br label %926

396:                                              ; preds = %5
  %397 = icmp eq i64 %18, 64
  br i1 %397, label %401, label %398

398:                                              ; preds = %396
  %399 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 290, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0)) #10
  %400 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

401:                                              ; preds = %396
  %402 = bitcast [48 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %402) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %402, i8 -1, i64 192, i1 false)
  %403 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 1
  %404 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 0
  %405 = load i64, i64* %404, align 8
  %406 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 0
  %407 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115GetQuantWeightsILm0EEENS_6StatusEmmRKNSt3__15arrayINS4_IfLm17EEELm3EEEmPf(i64 4, i64 4, %"struct.std::__1::array"* dereferenceable(204) %403, i64 %405, float* nonnull %406)
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %410, label %409

409:                                              ; preds = %401
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %402) #10
  br label %997

410:                                              ; preds = %401
  %411 = bitcast [48 x float]* %6 to <2 x i32>*
  %412 = load <2 x i32>, <2 x i32>* %411, align 16
  %413 = shufflevector <2 x i32> %412, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %414 = bitcast i8* %10 to <4 x i32>*
  store <4 x i32> %413, <4 x i32>* %414, align 4
  %415 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 2
  %416 = getelementptr inbounds i8, i8* %10, i64 16
  %417 = bitcast float* %415 to <2 x i32>*
  %418 = load <2 x i32>, <2 x i32>* %417, align 8
  %419 = shufflevector <2 x i32> %418, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %420 = bitcast i8* %416 to <4 x i32>*
  store <4 x i32> %419, <4 x i32>* %420, align 4
  %421 = getelementptr inbounds i8, i8* %10, i64 32
  %422 = bitcast [48 x float]* %6 to <2 x i32>*
  %423 = load <2 x i32>, <2 x i32>* %422, align 16
  %424 = shufflevector <2 x i32> %423, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %425 = bitcast i8* %421 to <4 x i32>*
  store <4 x i32> %424, <4 x i32>* %425, align 4
  %426 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 2
  %427 = getelementptr inbounds i8, i8* %10, i64 48
  %428 = bitcast float* %426 to <2 x i32>*
  %429 = load <2 x i32>, <2 x i32>* %428, align 8
  %430 = shufflevector <2 x i32> %429, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %431 = bitcast i8* %427 to <4 x i32>*
  store <4 x i32> %430, <4 x i32>* %431, align 4
  %432 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 4
  %433 = getelementptr inbounds i8, i8* %10, i64 64
  %434 = bitcast float* %432 to <2 x i32>*
  %435 = load <2 x i32>, <2 x i32>* %434, align 16
  %436 = shufflevector <2 x i32> %435, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %437 = bitcast i8* %433 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %437, align 4
  %438 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 6
  %439 = getelementptr inbounds i8, i8* %10, i64 80
  %440 = bitcast float* %438 to <2 x i32>*
  %441 = load <2 x i32>, <2 x i32>* %440, align 8
  %442 = shufflevector <2 x i32> %441, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %443 = bitcast i8* %439 to <4 x i32>*
  store <4 x i32> %442, <4 x i32>* %443, align 4
  %444 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 4
  %445 = getelementptr inbounds i8, i8* %10, i64 96
  %446 = bitcast float* %444 to <2 x i32>*
  %447 = load <2 x i32>, <2 x i32>* %446, align 16
  %448 = shufflevector <2 x i32> %447, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %449 = bitcast i8* %445 to <4 x i32>*
  store <4 x i32> %448, <4 x i32>* %449, align 4
  %450 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 6
  %451 = getelementptr inbounds i8, i8* %10, i64 112
  %452 = bitcast float* %450 to <2 x i32>*
  %453 = load <2 x i32>, <2 x i32>* %452, align 8
  %454 = shufflevector <2 x i32> %453, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %455 = bitcast i8* %451 to <4 x i32>*
  store <4 x i32> %454, <4 x i32>* %455, align 4
  %456 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 8
  %457 = getelementptr inbounds i8, i8* %10, i64 128
  %458 = bitcast float* %456 to <2 x i32>*
  %459 = load <2 x i32>, <2 x i32>* %458, align 16
  %460 = shufflevector <2 x i32> %459, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %461 = bitcast i8* %457 to <4 x i32>*
  store <4 x i32> %460, <4 x i32>* %461, align 4
  %462 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 10
  %463 = getelementptr inbounds i8, i8* %10, i64 144
  %464 = bitcast float* %462 to <2 x i32>*
  %465 = load <2 x i32>, <2 x i32>* %464, align 8
  %466 = shufflevector <2 x i32> %465, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %467 = bitcast i8* %463 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %467, align 4
  %468 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 8
  %469 = getelementptr inbounds i8, i8* %10, i64 160
  %470 = bitcast float* %468 to <2 x i32>*
  %471 = load <2 x i32>, <2 x i32>* %470, align 16
  %472 = shufflevector <2 x i32> %471, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %473 = bitcast i8* %469 to <4 x i32>*
  store <4 x i32> %472, <4 x i32>* %473, align 4
  %474 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 10
  %475 = getelementptr inbounds i8, i8* %10, i64 176
  %476 = bitcast float* %474 to <2 x i32>*
  %477 = load <2 x i32>, <2 x i32>* %476, align 8
  %478 = shufflevector <2 x i32> %477, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %479 = bitcast i8* %475 to <4 x i32>*
  store <4 x i32> %478, <4 x i32>* %479, align 4
  %480 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 12
  %481 = getelementptr inbounds i8, i8* %10, i64 192
  %482 = bitcast float* %480 to <2 x i32>*
  %483 = load <2 x i32>, <2 x i32>* %482, align 16
  %484 = shufflevector <2 x i32> %483, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %485 = bitcast i8* %481 to <4 x i32>*
  store <4 x i32> %484, <4 x i32>* %485, align 4
  %486 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 14
  %487 = getelementptr inbounds i8, i8* %10, i64 208
  %488 = bitcast float* %486 to <2 x i32>*
  %489 = load <2 x i32>, <2 x i32>* %488, align 8
  %490 = shufflevector <2 x i32> %489, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %491 = bitcast i8* %487 to <4 x i32>*
  store <4 x i32> %490, <4 x i32>* %491, align 4
  %492 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 12
  %493 = getelementptr inbounds i8, i8* %10, i64 224
  %494 = bitcast float* %492 to <2 x i32>*
  %495 = load <2 x i32>, <2 x i32>* %494, align 16
  %496 = shufflevector <2 x i32> %495, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %497 = bitcast i8* %493 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %497, align 4
  %498 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 14
  %499 = getelementptr inbounds i8, i8* %10, i64 240
  %500 = bitcast float* %498 to <2 x i32>*
  %501 = load <2 x i32>, <2 x i32>* %500, align 8
  %502 = shufflevector <2 x i32> %501, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %503 = bitcast i8* %499 to <4 x i32>*
  store <4 x i32> %502, <4 x i32>* %503, align 4
  %504 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %505 = load float, float* %504, align 4
  %506 = getelementptr inbounds i8, i8* %10, i64 4
  %507 = bitcast i8* %506 to float*
  %508 = load float, float* %507, align 4
  %509 = fdiv float %508, %505
  store float %509, float* %507, align 4
  %510 = getelementptr inbounds i8, i8* %10, i64 32
  %511 = bitcast i8* %510 to float*
  %512 = load float, float* %511, align 4
  %513 = fdiv float %512, %505
  store float %513, float* %511, align 4
  %514 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %515 = load float, float* %514, align 4
  %516 = getelementptr inbounds i8, i8* %10, i64 36
  %517 = bitcast i8* %516 to float*
  %518 = load float, float* %517, align 4
  %519 = fdiv float %518, %515
  store float %519, float* %517, align 4
  %520 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 16
  %521 = getelementptr inbounds i8, i8* %10, i64 256
  %522 = bitcast float* %520 to <2 x i32>*
  %523 = load <2 x i32>, <2 x i32>* %522, align 16
  %524 = shufflevector <2 x i32> %523, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %525 = bitcast i8* %521 to <4 x i32>*
  store <4 x i32> %524, <4 x i32>* %525, align 4
  %526 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 18
  %527 = getelementptr inbounds i8, i8* %10, i64 272
  %528 = bitcast float* %526 to <2 x i32>*
  %529 = load <2 x i32>, <2 x i32>* %528, align 8
  %530 = shufflevector <2 x i32> %529, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %531 = bitcast i8* %527 to <4 x i32>*
  store <4 x i32> %530, <4 x i32>* %531, align 4
  %532 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 16
  %533 = getelementptr inbounds i8, i8* %10, i64 288
  %534 = bitcast float* %532 to <2 x i32>*
  %535 = load <2 x i32>, <2 x i32>* %534, align 16
  %536 = shufflevector <2 x i32> %535, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %537 = bitcast i8* %533 to <4 x i32>*
  store <4 x i32> %536, <4 x i32>* %537, align 4
  %538 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 18
  %539 = getelementptr inbounds i8, i8* %10, i64 304
  %540 = bitcast float* %538 to <2 x i32>*
  %541 = load <2 x i32>, <2 x i32>* %540, align 8
  %542 = shufflevector <2 x i32> %541, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %543 = bitcast i8* %539 to <4 x i32>*
  store <4 x i32> %542, <4 x i32>* %543, align 4
  %544 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 20
  %545 = getelementptr inbounds i8, i8* %10, i64 320
  %546 = bitcast float* %544 to <2 x i32>*
  %547 = load <2 x i32>, <2 x i32>* %546, align 16
  %548 = shufflevector <2 x i32> %547, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %549 = bitcast i8* %545 to <4 x i32>*
  store <4 x i32> %548, <4 x i32>* %549, align 4
  %550 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 22
  %551 = getelementptr inbounds i8, i8* %10, i64 336
  %552 = bitcast float* %550 to <2 x i32>*
  %553 = load <2 x i32>, <2 x i32>* %552, align 8
  %554 = shufflevector <2 x i32> %553, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %555 = bitcast i8* %551 to <4 x i32>*
  store <4 x i32> %554, <4 x i32>* %555, align 4
  %556 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 20
  %557 = getelementptr inbounds i8, i8* %10, i64 352
  %558 = bitcast float* %556 to <2 x i32>*
  %559 = load <2 x i32>, <2 x i32>* %558, align 16
  %560 = shufflevector <2 x i32> %559, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %561 = bitcast i8* %557 to <4 x i32>*
  store <4 x i32> %560, <4 x i32>* %561, align 4
  %562 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 22
  %563 = getelementptr inbounds i8, i8* %10, i64 368
  %564 = bitcast float* %562 to <2 x i32>*
  %565 = load <2 x i32>, <2 x i32>* %564, align 8
  %566 = shufflevector <2 x i32> %565, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %567 = bitcast i8* %563 to <4 x i32>*
  store <4 x i32> %566, <4 x i32>* %567, align 4
  %568 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 24
  %569 = getelementptr inbounds i8, i8* %10, i64 384
  %570 = bitcast float* %568 to <2 x i32>*
  %571 = load <2 x i32>, <2 x i32>* %570, align 16
  %572 = shufflevector <2 x i32> %571, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %573 = bitcast i8* %569 to <4 x i32>*
  store <4 x i32> %572, <4 x i32>* %573, align 4
  %574 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 26
  %575 = getelementptr inbounds i8, i8* %10, i64 400
  %576 = bitcast float* %574 to <2 x i32>*
  %577 = load <2 x i32>, <2 x i32>* %576, align 8
  %578 = shufflevector <2 x i32> %577, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %579 = bitcast i8* %575 to <4 x i32>*
  store <4 x i32> %578, <4 x i32>* %579, align 4
  %580 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 24
  %581 = getelementptr inbounds i8, i8* %10, i64 416
  %582 = bitcast float* %580 to <2 x i32>*
  %583 = load <2 x i32>, <2 x i32>* %582, align 16
  %584 = shufflevector <2 x i32> %583, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %585 = bitcast i8* %581 to <4 x i32>*
  store <4 x i32> %584, <4 x i32>* %585, align 4
  %586 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 26
  %587 = getelementptr inbounds i8, i8* %10, i64 432
  %588 = bitcast float* %586 to <2 x i32>*
  %589 = load <2 x i32>, <2 x i32>* %588, align 8
  %590 = shufflevector <2 x i32> %589, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %591 = bitcast i8* %587 to <4 x i32>*
  store <4 x i32> %590, <4 x i32>* %591, align 4
  %592 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 28
  %593 = getelementptr inbounds i8, i8* %10, i64 448
  %594 = bitcast float* %592 to <2 x i32>*
  %595 = load <2 x i32>, <2 x i32>* %594, align 16
  %596 = shufflevector <2 x i32> %595, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %597 = bitcast i8* %593 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %597, align 4
  %598 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 30
  %599 = getelementptr inbounds i8, i8* %10, i64 464
  %600 = bitcast float* %598 to <2 x i32>*
  %601 = load <2 x i32>, <2 x i32>* %600, align 8
  %602 = shufflevector <2 x i32> %601, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %603 = bitcast i8* %599 to <4 x i32>*
  store <4 x i32> %602, <4 x i32>* %603, align 4
  %604 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 28
  %605 = getelementptr inbounds i8, i8* %10, i64 480
  %606 = bitcast float* %604 to <2 x i32>*
  %607 = load <2 x i32>, <2 x i32>* %606, align 16
  %608 = shufflevector <2 x i32> %607, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %609 = bitcast i8* %605 to <4 x i32>*
  store <4 x i32> %608, <4 x i32>* %609, align 4
  %610 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 30
  %611 = getelementptr inbounds i8, i8* %10, i64 496
  %612 = bitcast float* %610 to <2 x i32>*
  %613 = load <2 x i32>, <2 x i32>* %612, align 8
  %614 = shufflevector <2 x i32> %613, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %615 = bitcast i8* %611 to <4 x i32>*
  store <4 x i32> %614, <4 x i32>* %615, align 4
  %616 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %617 = load float, float* %616, align 4
  %618 = getelementptr inbounds i8, i8* %10, i64 260
  %619 = bitcast i8* %618 to float*
  %620 = load float, float* %619, align 4
  %621 = fdiv float %620, %617
  store float %621, float* %619, align 4
  %622 = getelementptr inbounds i8, i8* %10, i64 288
  %623 = bitcast i8* %622 to float*
  %624 = load float, float* %623, align 4
  %625 = fdiv float %624, %617
  store float %625, float* %623, align 4
  %626 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %627 = load float, float* %626, align 4
  %628 = getelementptr inbounds i8, i8* %10, i64 292
  %629 = bitcast i8* %628 to float*
  %630 = load float, float* %629, align 4
  %631 = fdiv float %630, %627
  store float %631, float* %629, align 4
  %632 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 32
  %633 = getelementptr inbounds i8, i8* %10, i64 512
  %634 = bitcast float* %632 to <2 x i32>*
  %635 = load <2 x i32>, <2 x i32>* %634, align 16
  %636 = shufflevector <2 x i32> %635, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %637 = bitcast i8* %633 to <4 x i32>*
  store <4 x i32> %636, <4 x i32>* %637, align 4
  %638 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 34
  %639 = getelementptr inbounds i8, i8* %10, i64 528
  %640 = bitcast float* %638 to <2 x i32>*
  %641 = load <2 x i32>, <2 x i32>* %640, align 8
  %642 = shufflevector <2 x i32> %641, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %643 = bitcast i8* %639 to <4 x i32>*
  store <4 x i32> %642, <4 x i32>* %643, align 4
  %644 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 32
  %645 = getelementptr inbounds i8, i8* %10, i64 544
  %646 = bitcast float* %644 to <2 x i32>*
  %647 = load <2 x i32>, <2 x i32>* %646, align 16
  %648 = shufflevector <2 x i32> %647, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %649 = bitcast i8* %645 to <4 x i32>*
  store <4 x i32> %648, <4 x i32>* %649, align 4
  %650 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 34
  %651 = getelementptr inbounds i8, i8* %10, i64 560
  %652 = bitcast float* %650 to <2 x i32>*
  %653 = load <2 x i32>, <2 x i32>* %652, align 8
  %654 = shufflevector <2 x i32> %653, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %655 = bitcast i8* %651 to <4 x i32>*
  store <4 x i32> %654, <4 x i32>* %655, align 4
  %656 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 36
  %657 = getelementptr inbounds i8, i8* %10, i64 576
  %658 = bitcast float* %656 to <2 x i32>*
  %659 = load <2 x i32>, <2 x i32>* %658, align 16
  %660 = shufflevector <2 x i32> %659, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %661 = bitcast i8* %657 to <4 x i32>*
  store <4 x i32> %660, <4 x i32>* %661, align 4
  %662 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 38
  %663 = getelementptr inbounds i8, i8* %10, i64 592
  %664 = bitcast float* %662 to <2 x i32>*
  %665 = load <2 x i32>, <2 x i32>* %664, align 8
  %666 = shufflevector <2 x i32> %665, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %667 = bitcast i8* %663 to <4 x i32>*
  store <4 x i32> %666, <4 x i32>* %667, align 4
  %668 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 36
  %669 = getelementptr inbounds i8, i8* %10, i64 608
  %670 = bitcast float* %668 to <2 x i32>*
  %671 = load <2 x i32>, <2 x i32>* %670, align 16
  %672 = shufflevector <2 x i32> %671, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %673 = bitcast i8* %669 to <4 x i32>*
  store <4 x i32> %672, <4 x i32>* %673, align 4
  %674 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 38
  %675 = getelementptr inbounds i8, i8* %10, i64 624
  %676 = bitcast float* %674 to <2 x i32>*
  %677 = load <2 x i32>, <2 x i32>* %676, align 8
  %678 = shufflevector <2 x i32> %677, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %679 = bitcast i8* %675 to <4 x i32>*
  store <4 x i32> %678, <4 x i32>* %679, align 4
  %680 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 40
  %681 = getelementptr inbounds i8, i8* %10, i64 640
  %682 = bitcast float* %680 to <2 x i32>*
  %683 = load <2 x i32>, <2 x i32>* %682, align 16
  %684 = shufflevector <2 x i32> %683, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %685 = bitcast i8* %681 to <4 x i32>*
  store <4 x i32> %684, <4 x i32>* %685, align 4
  %686 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 42
  %687 = getelementptr inbounds i8, i8* %10, i64 656
  %688 = bitcast float* %686 to <2 x i32>*
  %689 = load <2 x i32>, <2 x i32>* %688, align 8
  %690 = shufflevector <2 x i32> %689, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %691 = bitcast i8* %687 to <4 x i32>*
  store <4 x i32> %690, <4 x i32>* %691, align 4
  %692 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 40
  %693 = getelementptr inbounds i8, i8* %10, i64 672
  %694 = bitcast float* %692 to <2 x i32>*
  %695 = load <2 x i32>, <2 x i32>* %694, align 16
  %696 = shufflevector <2 x i32> %695, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %697 = bitcast i8* %693 to <4 x i32>*
  store <4 x i32> %696, <4 x i32>* %697, align 4
  %698 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 42
  %699 = getelementptr inbounds i8, i8* %10, i64 688
  %700 = bitcast float* %698 to <2 x i32>*
  %701 = load <2 x i32>, <2 x i32>* %700, align 8
  %702 = shufflevector <2 x i32> %701, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %703 = bitcast i8* %699 to <4 x i32>*
  store <4 x i32> %702, <4 x i32>* %703, align 4
  %704 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 44
  %705 = getelementptr inbounds i8, i8* %10, i64 704
  %706 = bitcast float* %704 to <2 x i32>*
  %707 = load <2 x i32>, <2 x i32>* %706, align 16
  %708 = shufflevector <2 x i32> %707, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %709 = bitcast i8* %705 to <4 x i32>*
  store <4 x i32> %708, <4 x i32>* %709, align 4
  %710 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 46
  %711 = getelementptr inbounds i8, i8* %10, i64 720
  %712 = bitcast float* %710 to <2 x i32>*
  %713 = load <2 x i32>, <2 x i32>* %712, align 8
  %714 = shufflevector <2 x i32> %713, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %715 = bitcast i8* %711 to <4 x i32>*
  store <4 x i32> %714, <4 x i32>* %715, align 4
  %716 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 44
  %717 = getelementptr inbounds i8, i8* %10, i64 736
  %718 = bitcast float* %716 to <2 x i32>*
  %719 = load <2 x i32>, <2 x i32>* %718, align 16
  %720 = shufflevector <2 x i32> %719, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %721 = bitcast i8* %717 to <4 x i32>*
  store <4 x i32> %720, <4 x i32>* %721, align 4
  %722 = getelementptr inbounds [48 x float], [48 x float]* %6, i64 0, i64 46
  %723 = getelementptr inbounds i8, i8* %10, i64 752
  %724 = bitcast float* %722 to <2 x i32>*
  %725 = load <2 x i32>, <2 x i32>* %724, align 8
  %726 = shufflevector <2 x i32> %725, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %727 = bitcast i8* %723 to <4 x i32>*
  store <4 x i32> %726, <4 x i32>* %727, align 4
  %728 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %729 = load float, float* %728, align 4
  %730 = getelementptr inbounds i8, i8* %10, i64 516
  %731 = bitcast i8* %730 to float*
  %732 = load float, float* %731, align 4
  %733 = fdiv float %732, %729
  store float %733, float* %731, align 4
  %734 = getelementptr inbounds i8, i8* %10, i64 544
  %735 = bitcast i8* %734 to float*
  %736 = load float, float* %735, align 4
  %737 = fdiv float %736, %729
  store float %737, float* %735, align 4
  %738 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %739 = load float, float* %738, align 4
  %740 = getelementptr inbounds i8, i8* %10, i64 548
  %741 = bitcast i8* %740 to float*
  %742 = load float, float* %741, align 4
  %743 = fdiv float %742, %739
  store float %743, float* %741, align 4
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %402) #10
  br label %939

744:                                              ; preds = %5
  %745 = icmp eq i64 %18, 64
  br i1 %745, label %749, label %746

746:                                              ; preds = %744
  %747 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 310, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0)) #10
  %748 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

749:                                              ; preds = %744
  %750 = bitcast [96 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %750) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %750, i8 -1, i64 384, i1 false)
  %751 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 1
  %752 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 0
  %753 = load i64, i64* %752, align 8
  %754 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 0
  %755 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115GetQuantWeightsILm0EEENS_6StatusEmmRKNSt3__15arrayINS4_IfLm17EEELm3EEEmPf(i64 4, i64 8, %"struct.std::__1::array"* dereferenceable(204) %751, i64 %753, float* nonnull %754)
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %757, label %822

757:                                              ; preds = %749
  %758 = bitcast [96 x float]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* nonnull align 16 %758, i64 32, i1 false)
  %759 = getelementptr i8, i8* %10, i64 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %759, i8* nonnull align 16 %758, i64 32, i1 false)
  %760 = getelementptr i8, i8* %10, i64 64
  %761 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 8
  %762 = bitcast float* %761 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %760, i8* align 16 %762, i64 32, i1 false)
  %763 = getelementptr i8, i8* %10, i64 96
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %763, i8* align 16 %762, i64 32, i1 false)
  %764 = getelementptr i8, i8* %10, i64 128
  %765 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 16
  %766 = bitcast float* %765 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %764, i8* align 16 %766, i64 32, i1 false)
  %767 = getelementptr i8, i8* %10, i64 160
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %767, i8* align 16 %766, i64 32, i1 false)
  %768 = getelementptr i8, i8* %10, i64 192
  %769 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 24
  %770 = bitcast float* %769 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %768, i8* align 16 %770, i64 32, i1 false)
  %771 = getelementptr i8, i8* %10, i64 224
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %771, i8* align 16 %770, i64 32, i1 false)
  %772 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %773 = load float, float* %772, align 4
  %774 = getelementptr inbounds i8, i8* %10, i64 32
  %775 = bitcast i8* %774 to float*
  %776 = load float, float* %775, align 4
  %777 = fdiv float %776, %773
  store float %777, float* %775, align 4
  %778 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 32
  %779 = getelementptr i8, i8* %10, i64 256
  %780 = bitcast float* %778 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %779, i8* align 16 %780, i64 32, i1 false)
  %781 = getelementptr i8, i8* %10, i64 288
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %781, i8* align 16 %780, i64 32, i1 false)
  %782 = getelementptr i8, i8* %10, i64 320
  %783 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 40
  %784 = bitcast float* %783 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %782, i8* align 16 %784, i64 32, i1 false)
  %785 = getelementptr i8, i8* %10, i64 352
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %785, i8* align 16 %784, i64 32, i1 false)
  %786 = getelementptr i8, i8* %10, i64 384
  %787 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 48
  %788 = bitcast float* %787 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %786, i8* align 16 %788, i64 32, i1 false)
  %789 = getelementptr i8, i8* %10, i64 416
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %789, i8* align 16 %788, i64 32, i1 false)
  %790 = getelementptr i8, i8* %10, i64 448
  %791 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 56
  %792 = bitcast float* %791 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %790, i8* align 16 %792, i64 32, i1 false)
  %793 = getelementptr i8, i8* %10, i64 480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %793, i8* align 16 %792, i64 32, i1 false)
  %794 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %795 = load float, float* %794, align 4
  %796 = getelementptr inbounds i8, i8* %10, i64 288
  %797 = bitcast i8* %796 to float*
  %798 = load float, float* %797, align 4
  %799 = fdiv float %798, %795
  store float %799, float* %797, align 4
  %800 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 64
  %801 = getelementptr i8, i8* %10, i64 512
  %802 = bitcast float* %800 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %801, i8* align 16 %802, i64 32, i1 false)
  %803 = getelementptr i8, i8* %10, i64 544
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %803, i8* align 16 %802, i64 32, i1 false)
  %804 = getelementptr i8, i8* %10, i64 576
  %805 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 72
  %806 = bitcast float* %805 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %804, i8* align 16 %806, i64 32, i1 false)
  %807 = getelementptr i8, i8* %10, i64 608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %807, i8* align 16 %806, i64 32, i1 false)
  %808 = getelementptr i8, i8* %10, i64 640
  %809 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 80
  %810 = bitcast float* %809 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %808, i8* align 16 %810, i64 32, i1 false)
  %811 = getelementptr i8, i8* %10, i64 672
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %811, i8* align 16 %810, i64 32, i1 false)
  %812 = getelementptr i8, i8* %10, i64 704
  %813 = getelementptr inbounds [96 x float], [96 x float]* %7, i64 0, i64 88
  %814 = bitcast float* %813 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %812, i8* align 16 %814, i64 32, i1 false)
  %815 = getelementptr i8, i8* %10, i64 736
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %815, i8* align 16 %814, i64 32, i1 false)
  %816 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %817 = load float, float* %816, align 4
  %818 = getelementptr inbounds i8, i8* %10, i64 544
  %819 = bitcast i8* %818 to float*
  %820 = load float, float* %819, align 4
  %821 = fdiv float %820, %817
  store float %821, float* %819, align 4
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %750) #10
  br label %926

822:                                              ; preds = %749
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %750) #10
  br label %997

823:                                              ; preds = %5
  %824 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 1
  %825 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 0
  %826 = load i64, i64* %825, align 8
  %827 = tail call fastcc i32 @_ZN3jxl12_GLOBAL__N_115GetQuantWeightsILm0EEENS_6StatusEmmRKNSt3__15arrayINS4_IfLm17EEELm3EEEmPf(i64 %14, i64 %17, %"struct.std::__1::array"* dereferenceable(204) %824, i64 %826, float* nonnull %11)
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %939, label %997

829:                                              ; preds = %5
  %830 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %831 = bitcast %union.anon* %830 to %"class.std::__1::vector.10"**
  %832 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %831, align 8
  %833 = icmp eq %"class.std::__1::vector.10"* %832, null
  br i1 %833, label %997, label %834

834:                                              ; preds = %829
  %835 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %832, i64 0, i32 0, i32 1
  %836 = bitcast i32** %835 to i64*
  %837 = load i64, i64* %836, align 8
  %838 = bitcast %"class.std::__1::vector.10"* %832 to i64*
  %839 = load i64, i64* %838, align 8
  %840 = sub i64 %837, %839
  %841 = ashr exact i64 %840, 2
  %842 = mul i64 %18, 3
  %843 = icmp eq i64 %841, %842
  %844 = inttoptr i64 %839 to i32*
  br i1 %843, label %845, label %997

845:                                              ; preds = %834
  %846 = icmp eq i64 %840, 0
  br i1 %846, label %939, label %847

847:                                              ; preds = %845
  %848 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %849 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %832, i64 0, i32 0, i32 0
  %850 = load float, float* %848, align 8
  %851 = load i32, i32* %844, align 4
  %852 = sitofp i32 %851 to float
  %853 = fmul float %850, %852
  %854 = fdiv float 1.000000e+00, %853
  store float %854, float* %11, align 4
  %855 = icmp eq i64 %840, 4
  br i1 %855, label %939, label %856

856:                                              ; preds = %847
  %857 = add nsw i64 %841, -1
  %858 = and i64 %857, 1
  %859 = icmp eq i64 %840, 8
  br i1 %859, label %928, label %860

860:                                              ; preds = %856
  %861 = sub nsw i64 %857, %858
  br label %862

862:                                              ; preds = %862, %860
  %863 = phi i64 [ 1, %860 ], [ %880, %862 ]
  %864 = phi i64 [ %861, %860 ], [ %881, %862 ]
  %865 = load i32*, i32** %849, align 8
  %866 = getelementptr inbounds i32, i32* %865, i64 %863
  %867 = load i32, i32* %866, align 4
  %868 = sitofp i32 %867 to float
  %869 = fmul float %850, %868
  %870 = fdiv float 1.000000e+00, %869
  %871 = getelementptr inbounds float, float* %11, i64 %863
  store float %870, float* %871, align 4
  %872 = add nuw i64 %863, 1
  %873 = load i32*, i32** %849, align 8
  %874 = getelementptr inbounds i32, i32* %873, i64 %872
  %875 = load i32, i32* %874, align 4
  %876 = sitofp i32 %875 to float
  %877 = fmul float %850, %876
  %878 = fdiv float 1.000000e+00, %877
  %879 = getelementptr inbounds float, float* %11, i64 %872
  store float %878, float* %879, align 4
  %880 = add nuw i64 %863, 2
  %881 = add i64 %864, -2
  %882 = icmp eq i64 %881, 0
  br i1 %882, label %928, label %862

883:                                              ; preds = %5
  %884 = bitcast [96 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %884) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %884, i8 -1, i64 384, i1 false)
  %885 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 1
  %886 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 2, i32 0
  %887 = load i64, i64* %886, align 8
  %888 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 0
  %889 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115GetQuantWeightsILm0EEENS_6StatusEmmRKNSt3__15arrayINS4_IfLm17EEELm3EEEmPf(i64 4, i64 8, %"struct.std::__1::array"* dereferenceable(204) %885, i64 %887, float* nonnull %888)
  %890 = icmp eq i32 %889, 0
  br i1 %890, label %892, label %891

891:                                              ; preds = %883
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %884) #10
  br label %997

892:                                              ; preds = %883
  %893 = bitcast [48 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %893) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %893, i8 -1, i64 192, i1 false)
  %894 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 4, i32 1
  %895 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 4, i32 0
  %896 = load i64, i64* %895, align 8
  %897 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 0
  %898 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115GetQuantWeightsILm0EEENS_6StatusEmmRKNSt3__15arrayINS4_IfLm17EEELm3EEEmPf(i64 4, i64 4, %"struct.std::__1::array"* dereferenceable(204) %894, i64 %896, float* nonnull %897)
  %899 = icmp eq i32 %898, 0
  br i1 %899, label %900, label %923

900:                                              ; preds = %892, %1163
  %901 = phi i64 [ %1493, %1163 ], [ 0, %892 ]
  %902 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901
  %903 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 5
  %904 = load float, float* %903, align 4
  %905 = fcmp olt float %904, 0.000000e+00
  br i1 %905, label %923, label %906

906:                                              ; preds = %900
  %907 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 6
  %908 = load float, float* %907, align 4
  %909 = fcmp ogt float %908, 0.000000e+00
  br i1 %909, label %914, label %916

910:                                              ; preds = %919
  %911 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 7
  %912 = load float, float* %911, align 4
  %913 = fcmp ogt float %912, 0.000000e+00
  br i1 %913, label %1144, label %1141

914:                                              ; preds = %906
  %915 = fadd float %908, 1.000000e+00
  br label %919

916:                                              ; preds = %906
  %917 = fsub float 1.000000e+00, %908
  %918 = fdiv float 1.000000e+00, %917
  br label %919

919:                                              ; preds = %914, %916
  %920 = phi float [ %915, %914 ], [ %918, %916 ]
  %921 = fmul float %904, %920
  %922 = fcmp olt float %921, 0.000000e+00
  br i1 %922, label %923, label %910

923:                                              ; preds = %1159, %1146, %919, %900, %892
  %924 = phi i32 [ %898, %892 ], [ 1, %900 ], [ 1, %919 ], [ 1, %1146 ], [ 1, %1159 ]
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %893) #10
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %884) #10
  br label %997

925:                                              ; preds = %1163
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %893) #10
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %884) #10
  br label %939

926:                                              ; preds = %181, %757
  %927 = load i64, i64* %4, align 8
  br label %942

928:                                              ; preds = %862, %856
  %929 = phi i64 [ 1, %856 ], [ %880, %862 ]
  %930 = icmp eq i64 %858, 0
  br i1 %930, label %939, label %931

931:                                              ; preds = %928
  %932 = load i32*, i32** %849, align 8
  %933 = getelementptr inbounds i32, i32* %932, i64 %929
  %934 = load i32, i32* %933, align 4
  %935 = sitofp i32 %934 to float
  %936 = fmul float %850, %935
  %937 = fdiv float 1.000000e+00, %936
  %938 = getelementptr inbounds float, float* %11, i64 %929
  store float %937, float* %938, align 4
  br label %939

939:                                              ; preds = %931, %928, %847, %845, %925, %410, %823, %5, %29
  %940 = load i64, i64* %4, align 8
  %941 = icmp eq i64 %18, 0
  br i1 %941, label %1124, label %942

942:                                              ; preds = %926, %939
  %943 = phi i64 [ %927, %926 ], [ %940, %939 ]
  br label %944

944:                                              ; preds = %952, %942
  %945 = phi i64 [ %943, %942 ], [ %956, %952 ]
  %946 = phi i64 [ 0, %942 ], [ %957, %952 ]
  %947 = getelementptr inbounds float, float* %11, i64 %946
  %948 = load float, float* %947, align 4
  %949 = fcmp ogt float %948, 1.000000e+08
  %950 = fcmp olt float %948, 0x3E45798EE0000000
  %951 = or i1 %949, %950
  br i1 %951, label %997, label %952

952:                                              ; preds = %944
  %953 = fdiv float 1.000000e+00, %948
  %954 = getelementptr inbounds float, float* %1, i64 %945
  store float %953, float* %954, align 4
  %955 = getelementptr inbounds float, float* %2, i64 %945
  store float %948, float* %955, align 4
  %956 = add i64 %945, 1
  store i64 %956, i64* %4, align 8
  %957 = add nuw i64 %946, 1
  %958 = icmp eq i64 %957, %18
  br i1 %958, label %1090, label %944

959:                                              ; preds = %1503, %1139
  %960 = phi i64 [ 0, %1139 ], [ %1504, %1503 ]
  %961 = phi i64 [ %1140, %1139 ], [ %1505, %1503 ]
  br i1 %1130, label %1503, label %962

962:                                              ; preds = %959
  %963 = mul i64 %1133, %960
  %964 = add i64 %1125, %963
  %965 = getelementptr float, float* %2, i64 %964
  %966 = bitcast float* %965 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %966, i8 0, i64 %1134, i1 false)
  %967 = or i64 %960, 1
  %968 = mul i64 %1133, %967
  %969 = add i64 %1125, %968
  %970 = getelementptr float, float* %2, i64 %969
  %971 = bitcast float* %970 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %971, i8 0, i64 %1134, i1 false)
  %972 = or i64 %960, 2
  %973 = mul i64 %1133, %972
  %974 = add i64 %1125, %973
  %975 = getelementptr float, float* %2, i64 %974
  %976 = bitcast float* %975 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %976, i8 0, i64 %1134, i1 false)
  %977 = or i64 %960, 3
  %978 = mul i64 %1133, %977
  %979 = add i64 %1125, %978
  %980 = getelementptr float, float* %2, i64 %979
  %981 = bitcast float* %980 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %981, i8 0, i64 %1134, i1 false)
  br label %1503

982:                                              ; preds = %1495, %1059
  %983 = phi i64 [ 0, %1059 ], [ %1496, %1495 ]
  %984 = icmp eq i64 %1063, 0
  br i1 %984, label %997, label %985

985:                                              ; preds = %982, %993
  %986 = phi i64 [ %994, %993 ], [ %983, %982 ]
  %987 = phi i64 [ %995, %993 ], [ %1063, %982 ]
  br i1 %1130, label %993, label %988

988:                                              ; preds = %985
  %989 = mul i64 %1133, %986
  %990 = add i64 %1061, %989
  %991 = getelementptr float, float* %2, i64 %990
  %992 = bitcast float* %991 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %992, i8 0, i64 %1134, i1 false)
  br label %993

993:                                              ; preds = %988, %985
  %994 = add nuw i64 %986, 1
  %995 = add i64 %987, -1
  %996 = icmp eq i64 %995, 0
  br i1 %996, label %997, label %985, !llvm.loop !117

997:                                              ; preds = %944, %1090, %1108, %982, %993, %1124, %923, %891, %829, %834, %823, %822, %409
  %998 = phi i32 [ %755, %822 ], [ %407, %409 ], [ %827, %823 ], [ 1, %834 ], [ 1, %829 ], [ %889, %891 ], [ %924, %923 ], [ 0, %1124 ], [ 0, %993 ], [ 0, %982 ], [ 1, %1108 ], [ 1, %1090 ], [ 1, %944 ]
  tail call void @_ZdlPv(i8* nonnull %10) #11
  ret i32 %998

999:                                              ; preds = %1503, %1135
  %1000 = phi i64 [ 0, %1135 ], [ %1504, %1503 ]
  %1001 = icmp eq i64 %1137, 0
  br i1 %1001, label %1014, label %1002

1002:                                             ; preds = %999, %1010
  %1003 = phi i64 [ %1011, %1010 ], [ %1000, %999 ]
  %1004 = phi i64 [ %1012, %1010 ], [ %1137, %999 ]
  br i1 %1130, label %1010, label %1005

1005:                                             ; preds = %1002
  %1006 = mul i64 %1133, %1003
  %1007 = add i64 %1125, %1006
  %1008 = getelementptr float, float* %2, i64 %1007
  %1009 = bitcast float* %1008 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1009, i8 0, i64 %1134, i1 false)
  br label %1010

1010:                                             ; preds = %1005, %1002
  %1011 = add nuw i64 %1003, 1
  %1012 = add i64 %1004, -1
  %1013 = icmp eq i64 %1012, 0
  br i1 %1013, label %1014, label %1002, !llvm.loop !119

1014:                                             ; preds = %1010, %999
  %1015 = add i64 %1125, %1132
  %1016 = add i64 %1127, -1
  %1017 = and i64 %1127, 3
  %1018 = icmp ult i64 %1016, 3
  br i1 %1018, label %1044, label %1019

1019:                                             ; preds = %1014
  %1020 = sub i64 %1127, %1017
  br label %1021

1021:                                             ; preds = %1499, %1019
  %1022 = phi i64 [ 0, %1019 ], [ %1500, %1499 ]
  %1023 = phi i64 [ %1020, %1019 ], [ %1501, %1499 ]
  br i1 %1130, label %1499, label %1024

1024:                                             ; preds = %1021
  %1025 = mul i64 %1133, %1022
  %1026 = add i64 %1015, %1025
  %1027 = getelementptr float, float* %2, i64 %1026
  %1028 = bitcast float* %1027 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1028, i8 0, i64 %1134, i1 false)
  %1029 = or i64 %1022, 1
  %1030 = mul i64 %1133, %1029
  %1031 = add i64 %1015, %1030
  %1032 = getelementptr float, float* %2, i64 %1031
  %1033 = bitcast float* %1032 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1033, i8 0, i64 %1134, i1 false)
  %1034 = or i64 %1022, 2
  %1035 = mul i64 %1133, %1034
  %1036 = add i64 %1015, %1035
  %1037 = getelementptr float, float* %2, i64 %1036
  %1038 = bitcast float* %1037 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1038, i8 0, i64 %1134, i1 false)
  %1039 = or i64 %1022, 3
  %1040 = mul i64 %1133, %1039
  %1041 = add i64 %1015, %1040
  %1042 = getelementptr float, float* %2, i64 %1041
  %1043 = bitcast float* %1042 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1043, i8 0, i64 %1134, i1 false)
  br label %1499

1044:                                             ; preds = %1499, %1014
  %1045 = phi i64 [ 0, %1014 ], [ %1500, %1499 ]
  %1046 = icmp eq i64 %1017, 0
  br i1 %1046, label %1059, label %1047

1047:                                             ; preds = %1044, %1055
  %1048 = phi i64 [ %1056, %1055 ], [ %1045, %1044 ]
  %1049 = phi i64 [ %1057, %1055 ], [ %1017, %1044 ]
  br i1 %1130, label %1055, label %1050

1050:                                             ; preds = %1047
  %1051 = mul i64 %1133, %1048
  %1052 = add i64 %1015, %1051
  %1053 = getelementptr float, float* %2, i64 %1052
  %1054 = bitcast float* %1053 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1054, i8 0, i64 %1134, i1 false)
  br label %1055

1055:                                             ; preds = %1050, %1047
  %1056 = add nuw i64 %1048, 1
  %1057 = add i64 %1049, -1
  %1058 = icmp eq i64 %1057, 0
  br i1 %1058, label %1059, label %1047, !llvm.loop !120

1059:                                             ; preds = %1055, %1044
  %1060 = shl i64 %1131, 7
  %1061 = add i64 %1125, %1060
  %1062 = add i64 %1127, -1
  %1063 = and i64 %1127, 3
  %1064 = icmp ult i64 %1062, 3
  br i1 %1064, label %982, label %1065

1065:                                             ; preds = %1059
  %1066 = sub i64 %1127, %1063
  br label %1067

1067:                                             ; preds = %1495, %1065
  %1068 = phi i64 [ 0, %1065 ], [ %1496, %1495 ]
  %1069 = phi i64 [ %1066, %1065 ], [ %1497, %1495 ]
  br i1 %1130, label %1495, label %1070

1070:                                             ; preds = %1067
  %1071 = mul i64 %1133, %1068
  %1072 = add i64 %1061, %1071
  %1073 = getelementptr float, float* %2, i64 %1072
  %1074 = bitcast float* %1073 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1074, i8 0, i64 %1134, i1 false)
  %1075 = or i64 %1068, 1
  %1076 = mul i64 %1133, %1075
  %1077 = add i64 %1061, %1076
  %1078 = getelementptr float, float* %2, i64 %1077
  %1079 = bitcast float* %1078 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1079, i8 0, i64 %1134, i1 false)
  %1080 = or i64 %1068, 2
  %1081 = mul i64 %1133, %1080
  %1082 = add i64 %1061, %1081
  %1083 = getelementptr float, float* %2, i64 %1082
  %1084 = bitcast float* %1083 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1084, i8 0, i64 %1134, i1 false)
  %1085 = or i64 %1068, 3
  %1086 = mul i64 %1133, %1085
  %1087 = add i64 %1061, %1086
  %1088 = getelementptr float, float* %2, i64 %1087
  %1089 = bitcast float* %1088 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1089, i8 0, i64 %1134, i1 false)
  br label %1495

1090:                                             ; preds = %952, %1099
  %1091 = phi i64 [ %1103, %1099 ], [ %956, %952 ]
  %1092 = phi i64 [ %1104, %1099 ], [ 0, %952 ]
  %1093 = add i64 %1092, %18
  %1094 = getelementptr inbounds float, float* %11, i64 %1093
  %1095 = load float, float* %1094, align 4
  %1096 = fcmp ogt float %1095, 1.000000e+08
  %1097 = fcmp olt float %1095, 0x3E45798EE0000000
  %1098 = or i1 %1096, %1097
  br i1 %1098, label %997, label %1099

1099:                                             ; preds = %1090
  %1100 = fdiv float 1.000000e+00, %1095
  %1101 = getelementptr inbounds float, float* %1, i64 %1091
  store float %1100, float* %1101, align 4
  %1102 = getelementptr inbounds float, float* %2, i64 %1091
  store float %1095, float* %1102, align 4
  %1103 = add i64 %1091, 1
  store i64 %1103, i64* %4, align 8
  %1104 = add nuw i64 %1092, 1
  %1105 = icmp eq i64 %1104, %18
  br i1 %1105, label %1106, label %1090

1106:                                             ; preds = %1099
  %1107 = shl i64 %18, 1
  br label %1108

1108:                                             ; preds = %1117, %1106
  %1109 = phi i64 [ %1103, %1106 ], [ %1121, %1117 ]
  %1110 = phi i64 [ 0, %1106 ], [ %1122, %1117 ]
  %1111 = add i64 %1110, %1107
  %1112 = getelementptr inbounds float, float* %11, i64 %1111
  %1113 = load float, float* %1112, align 4
  %1114 = fcmp ogt float %1113, 1.000000e+08
  %1115 = fcmp olt float %1113, 0x3E45798EE0000000
  %1116 = or i1 %1114, %1115
  br i1 %1116, label %997, label %1117

1117:                                             ; preds = %1108
  %1118 = fdiv float 1.000000e+00, %1113
  %1119 = getelementptr inbounds float, float* %1, i64 %1109
  store float %1118, float* %1119, align 4
  %1120 = getelementptr inbounds float, float* %2, i64 %1109
  store float %1113, float* %1120, align 4
  %1121 = add i64 %1109, 1
  store i64 %1121, i64* %4, align 8
  %1122 = add nuw i64 %1110, 1
  %1123 = icmp eq i64 %1122, %18
  br i1 %1123, label %1124, label %1108

1124:                                             ; preds = %1117, %939
  %1125 = phi i64 [ %940, %939 ], [ %943, %1117 ]
  %1126 = icmp ult i64 %16, %13
  %1127 = select i1 %1126, i64 %16, i64 %13
  %1128 = select i1 %1126, i64 %13, i64 %16
  %1129 = icmp eq i64 %1127, 0
  %1130 = icmp eq i64 %1128, 0
  %1131 = mul i64 %1127, %1128
  %1132 = shl i64 %1131, 6
  %1133 = shl i64 %1128, 3
  %1134 = shl nuw i64 %1128, 2
  br i1 %1129, label %997, label %1135

1135:                                             ; preds = %1124
  %1136 = add i64 %1127, -1
  %1137 = and i64 %1127, 3
  %1138 = icmp ult i64 %1136, 3
  br i1 %1138, label %999, label %1139

1139:                                             ; preds = %1135
  %1140 = sub i64 %1127, %1137
  br label %959

1141:                                             ; preds = %910
  %1142 = fsub float 1.000000e+00, %912
  %1143 = fdiv float 1.000000e+00, %1142
  br label %1146

1144:                                             ; preds = %910
  %1145 = fadd float %912, 1.000000e+00
  br label %1146

1146:                                             ; preds = %1144, %1141
  %1147 = phi float [ %1145, %1144 ], [ %1143, %1141 ]
  %1148 = fmul float %921, %1147
  %1149 = fcmp olt float %1148, 0.000000e+00
  br i1 %1149, label %923, label %1150

1150:                                             ; preds = %1146
  %1151 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 8
  %1152 = load float, float* %1151, align 4
  %1153 = fcmp ogt float %1152, 0.000000e+00
  br i1 %1153, label %1157, label %1154

1154:                                             ; preds = %1150
  %1155 = fsub float 1.000000e+00, %1152
  %1156 = fdiv float 1.000000e+00, %1155
  br label %1159

1157:                                             ; preds = %1150
  %1158 = fadd float %1152, 1.000000e+00
  br label %1159

1159:                                             ; preds = %1157, %1154
  %1160 = phi float [ %1158, %1157 ], [ %1156, %1154 ]
  %1161 = fmul float %1148, %1160
  %1162 = fcmp olt float %1161, 0.000000e+00
  br i1 %1162, label %923, label %1163

1163:                                             ; preds = %1159
  %1164 = shl i64 %901, 6
  %1165 = getelementptr inbounds float, float* %11, i64 %1164
  store float 1.000000e+00, float* %1165, align 4
  %1166 = bitcast %"struct.std::__1::array.9"* %902 to i32*
  %1167 = load i32, i32* %1166, align 4
  %1168 = or i64 %1164, 8
  %1169 = getelementptr inbounds float, float* %11, i64 %1168
  %1170 = bitcast float* %1169 to i32*
  store i32 %1167, i32* %1170, align 4
  %1171 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 1
  %1172 = bitcast float* %1171 to i32*
  %1173 = load i32, i32* %1172, align 4
  %1174 = or i64 %1164, 1
  %1175 = getelementptr inbounds float, float* %11, i64 %1174
  %1176 = bitcast float* %1175 to i32*
  store i32 %1173, i32* %1176, align 4
  %1177 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 2
  %1178 = bitcast float* %1177 to i32*
  %1179 = load i32, i32* %1178, align 4
  %1180 = or i64 %1164, 16
  %1181 = getelementptr inbounds float, float* %11, i64 %1180
  %1182 = bitcast float* %1181 to i32*
  store i32 %1179, i32* %1182, align 4
  %1183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 3
  %1184 = bitcast float* %1183 to i32*
  %1185 = load i32, i32* %1184, align 4
  %1186 = or i64 %1164, 2
  %1187 = getelementptr inbounds float, float* %11, i64 %1186
  %1188 = bitcast float* %1187 to i32*
  store i32 %1185, i32* %1188, align 4
  %1189 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i64 %901, i32 0, i64 4
  %1190 = bitcast float* %1189 to i32*
  %1191 = load i32, i32* %1190, align 4
  %1192 = or i64 %1164, 18
  %1193 = getelementptr inbounds float, float* %11, i64 %1192
  %1194 = bitcast float* %1193 to i32*
  store i32 %1191, i32* %1194, align 4
  %1195 = or i64 %1164, 4
  %1196 = getelementptr inbounds float, float* %11, i64 %1195
  store float %904, float* %1196, align 4
  %1197 = fdiv float %1148, %921
  %1198 = tail call float @powf(float %1197, float 0x3FBECC9400000000) #10
  %1199 = fmul float %921, %1198
  %1200 = or i64 %1164, 6
  %1201 = getelementptr inbounds float, float* %11, i64 %1200
  store float %1199, float* %1201, align 4
  %1202 = fdiv float %921, %904
  %1203 = tail call float @powf(float %1202, float 0x3FEEC1A920000000) #10
  %1204 = fmul float %904, %1203
  %1205 = or i64 %1164, 20
  %1206 = getelementptr inbounds float, float* %11, i64 %1205
  store float %1204, float* %1206, align 4
  %1207 = fdiv float %1148, %921
  %1208 = tail call float @powf(float %1207, float 0x3FC1A9E900000000) #10
  %1209 = fmul float %921, %1208
  %1210 = or i64 %1164, 22
  %1211 = getelementptr inbounds float, float* %11, i64 %1210
  store float %1209, float* %1211, align 4
  %1212 = or i64 %1164, 32
  %1213 = fdiv float %921, %904
  %1214 = tail call float @powf(float %1213, float 0x3FC99A0F40000000) #10
  %1215 = fmul float %904, %1214
  %1216 = getelementptr inbounds float, float* %11, i64 %1212
  store float %1215, float* %1216, align 4
  %1217 = fdiv float %921, %904
  %1218 = tail call float @powf(float %1217, float 0x3FE8EFC820000000) #10
  %1219 = fmul float %904, %1218
  %1220 = or i64 %1164, 34
  %1221 = getelementptr inbounds float, float* %11, i64 %1220
  store float %1219, float* %1221, align 4
  %1222 = fdiv float %1148, %921
  %1223 = tail call float @powf(float %1222, float 0x3FE2E22800000000) #10
  %1224 = fmul float %921, %1223
  %1225 = or i64 %1164, 36
  %1226 = getelementptr inbounds float, float* %11, i64 %1225
  store float %1224, float* %1226, align 4
  %1227 = fdiv float %1161, %1148
  %1228 = tail call float @powf(float %1227, float 0x3FD7A0DC00000000) #10
  %1229 = fmul float %1148, %1228
  %1230 = or i64 %1164, 38
  %1231 = getelementptr inbounds float, float* %11, i64 %1230
  store float %1229, float* %1231, align 4
  %1232 = or i64 %1164, 48
  %1233 = fdiv float %921, %904
  %1234 = tail call float @powf(float %1233, float 0x3FDCB11BA0000000) #10
  %1235 = fmul float %904, %1234
  %1236 = getelementptr inbounds float, float* %11, i64 %1232
  store float %1235, float* %1236, align 4
  %1237 = fdiv float %1148, %921
  %1238 = tail call float @powf(float %1237, float 0x3FE5B1D1C0000000) #10
  %1239 = fmul float %921, %1238
  %1240 = or i64 %1164, 50
  %1241 = getelementptr inbounds float, float* %11, i64 %1240
  store float %1239, float* %1241, align 4
  %1242 = fdiv float %1161, %1148
  %1243 = tail call float @powf(float %1242, float 0x3F7F1D0000000000) #10
  %1244 = fmul float %1148, %1243
  %1245 = or i64 %1164, 52
  %1246 = getelementptr inbounds float, float* %11, i64 %1245
  store float %1244, float* %1246, align 4
  %1247 = fdiv float %1161, %1148
  %1248 = tail call float @powf(float %1247, float 0x3FEFFFFF00000000) #10
  %1249 = fmul float %1148, %1248
  %1250 = or i64 %1164, 54
  %1251 = getelementptr inbounds float, float* %11, i64 %1250
  store float %1249, float* %1251, align 4
  %1252 = shl i64 %901, 5
  %1253 = mul i64 %901, %18
  %1254 = or i64 %1252, 1
  %1255 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1254
  %1256 = or i64 %1253, 9
  %1257 = getelementptr inbounds float, float* %11, i64 %1256
  %1258 = bitcast float* %1255 to <4 x i32>*
  %1259 = load <4 x i32>, <4 x i32>* %1258, align 4
  %1260 = bitcast float* %1257 to <4 x i32>*
  store <4 x i32> %1259, <4 x i32>* %1260, align 4
  %1261 = or i64 %1252, 5
  %1262 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1261
  %1263 = bitcast float* %1262 to i32*
  %1264 = load i32, i32* %1263, align 4
  %1265 = or i64 %1253, 13
  %1266 = getelementptr inbounds float, float* %11, i64 %1265
  %1267 = bitcast float* %1266 to i32*
  store i32 %1264, i32* %1267, align 4
  %1268 = or i64 %1252, 6
  %1269 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1268
  %1270 = bitcast float* %1269 to i32*
  %1271 = load i32, i32* %1270, align 8
  %1272 = or i64 %1253, 14
  %1273 = getelementptr inbounds float, float* %11, i64 %1272
  %1274 = bitcast float* %1273 to i32*
  store i32 %1271, i32* %1274, align 4
  %1275 = or i64 %1252, 7
  %1276 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1275
  %1277 = bitcast float* %1276 to i32*
  %1278 = load i32, i32* %1277, align 4
  %1279 = or i64 %1253, 15
  %1280 = getelementptr inbounds float, float* %11, i64 %1279
  %1281 = bitcast float* %1280 to i32*
  store i32 %1278, i32* %1281, align 4
  %1282 = or i64 %1253, 24
  %1283 = or i64 %1252, 8
  %1284 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1283
  %1285 = bitcast float* %1284 to i32*
  %1286 = load i32, i32* %1285, align 16
  %1287 = getelementptr inbounds float, float* %11, i64 %1282
  %1288 = bitcast float* %1287 to i32*
  store i32 %1286, i32* %1288, align 4
  %1289 = or i64 %1252, 9
  %1290 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1289
  %1291 = or i64 %1253, 25
  %1292 = getelementptr inbounds float, float* %11, i64 %1291
  %1293 = bitcast float* %1290 to <4 x i32>*
  %1294 = load <4 x i32>, <4 x i32>* %1293, align 4
  %1295 = bitcast float* %1292 to <4 x i32>*
  store <4 x i32> %1294, <4 x i32>* %1295, align 4
  %1296 = or i64 %1252, 13
  %1297 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1296
  %1298 = bitcast float* %1297 to i32*
  %1299 = load i32, i32* %1298, align 4
  %1300 = or i64 %1253, 29
  %1301 = getelementptr inbounds float, float* %11, i64 %1300
  %1302 = bitcast float* %1301 to i32*
  store i32 %1299, i32* %1302, align 4
  %1303 = or i64 %1252, 14
  %1304 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1303
  %1305 = bitcast float* %1304 to i32*
  %1306 = load i32, i32* %1305, align 8
  %1307 = or i64 %1253, 30
  %1308 = getelementptr inbounds float, float* %11, i64 %1307
  %1309 = bitcast float* %1308 to i32*
  store i32 %1306, i32* %1309, align 4
  %1310 = or i64 %1252, 15
  %1311 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1310
  %1312 = bitcast float* %1311 to i32*
  %1313 = load i32, i32* %1312, align 4
  %1314 = or i64 %1253, 31
  %1315 = getelementptr inbounds float, float* %11, i64 %1314
  %1316 = bitcast float* %1315 to i32*
  store i32 %1313, i32* %1316, align 4
  %1317 = or i64 %1253, 40
  %1318 = or i64 %1252, 16
  %1319 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1318
  %1320 = bitcast float* %1319 to i32*
  %1321 = load i32, i32* %1320, align 16
  %1322 = getelementptr inbounds float, float* %11, i64 %1317
  %1323 = bitcast float* %1322 to i32*
  store i32 %1321, i32* %1323, align 4
  %1324 = or i64 %1252, 17
  %1325 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1324
  %1326 = or i64 %1253, 41
  %1327 = getelementptr inbounds float, float* %11, i64 %1326
  %1328 = bitcast float* %1325 to <4 x i32>*
  %1329 = load <4 x i32>, <4 x i32>* %1328, align 4
  %1330 = bitcast float* %1327 to <4 x i32>*
  store <4 x i32> %1329, <4 x i32>* %1330, align 4
  %1331 = or i64 %1252, 21
  %1332 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1331
  %1333 = bitcast float* %1332 to i32*
  %1334 = load i32, i32* %1333, align 4
  %1335 = or i64 %1253, 45
  %1336 = getelementptr inbounds float, float* %11, i64 %1335
  %1337 = bitcast float* %1336 to i32*
  store i32 %1334, i32* %1337, align 4
  %1338 = or i64 %1252, 22
  %1339 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1338
  %1340 = bitcast float* %1339 to i32*
  %1341 = load i32, i32* %1340, align 8
  %1342 = or i64 %1253, 46
  %1343 = getelementptr inbounds float, float* %11, i64 %1342
  %1344 = bitcast float* %1343 to i32*
  store i32 %1341, i32* %1344, align 4
  %1345 = or i64 %1252, 23
  %1346 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1345
  %1347 = bitcast float* %1346 to i32*
  %1348 = load i32, i32* %1347, align 4
  %1349 = or i64 %1253, 47
  %1350 = getelementptr inbounds float, float* %11, i64 %1349
  %1351 = bitcast float* %1350 to i32*
  store i32 %1348, i32* %1351, align 4
  %1352 = or i64 %1253, 56
  %1353 = or i64 %1252, 24
  %1354 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1353
  %1355 = bitcast float* %1354 to i32*
  %1356 = load i32, i32* %1355, align 16
  %1357 = getelementptr inbounds float, float* %11, i64 %1352
  %1358 = bitcast float* %1357 to i32*
  store i32 %1356, i32* %1358, align 4
  %1359 = or i64 %1252, 25
  %1360 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1359
  %1361 = or i64 %1253, 57
  %1362 = getelementptr inbounds float, float* %11, i64 %1361
  %1363 = bitcast float* %1360 to <4 x i32>*
  %1364 = load <4 x i32>, <4 x i32>* %1363, align 4
  %1365 = bitcast float* %1362 to <4 x i32>*
  store <4 x i32> %1364, <4 x i32>* %1365, align 4
  %1366 = or i64 %1252, 29
  %1367 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1366
  %1368 = bitcast float* %1367 to i32*
  %1369 = load i32, i32* %1368, align 4
  %1370 = or i64 %1253, 61
  %1371 = getelementptr inbounds float, float* %11, i64 %1370
  %1372 = bitcast float* %1371 to i32*
  store i32 %1369, i32* %1372, align 4
  %1373 = or i64 %1252, 30
  %1374 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1373
  %1375 = bitcast float* %1374 to i32*
  %1376 = load i32, i32* %1375, align 8
  %1377 = or i64 %1253, 62
  %1378 = getelementptr inbounds float, float* %11, i64 %1377
  %1379 = bitcast float* %1378 to i32*
  store i32 %1376, i32* %1379, align 4
  %1380 = or i64 %1252, 31
  %1381 = getelementptr inbounds [96 x float], [96 x float]* %8, i64 0, i64 %1380
  %1382 = bitcast float* %1381 to i32*
  %1383 = load i32, i32* %1382, align 4
  %1384 = or i64 %1253, 63
  %1385 = getelementptr inbounds float, float* %11, i64 %1384
  %1386 = bitcast float* %1385 to i32*
  store i32 %1383, i32* %1386, align 4
  %1387 = shl i64 %901, 4
  %1388 = or i64 %1387, 1
  %1389 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1388
  %1390 = bitcast float* %1389 to i32*
  %1391 = load i32, i32* %1390, align 4
  %1392 = or i64 %1253, 3
  %1393 = getelementptr inbounds float, float* %11, i64 %1392
  %1394 = bitcast float* %1393 to i32*
  store i32 %1391, i32* %1394, align 4
  %1395 = or i64 %1387, 2
  %1396 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1395
  %1397 = bitcast float* %1396 to i32*
  %1398 = load i32, i32* %1397, align 8
  %1399 = or i64 %1253, 5
  %1400 = getelementptr inbounds float, float* %11, i64 %1399
  %1401 = bitcast float* %1400 to i32*
  store i32 %1398, i32* %1401, align 4
  %1402 = or i64 %1387, 3
  %1403 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1402
  %1404 = bitcast float* %1403 to i32*
  %1405 = load i32, i32* %1404, align 4
  %1406 = or i64 %1253, 7
  %1407 = getelementptr inbounds float, float* %11, i64 %1406
  %1408 = bitcast float* %1407 to i32*
  store i32 %1405, i32* %1408, align 4
  %1409 = or i64 %1387, 4
  %1410 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1409
  %1411 = bitcast float* %1410 to i32*
  %1412 = load i32, i32* %1411, align 16
  %1413 = or i64 %1253, 17
  %1414 = getelementptr inbounds float, float* %11, i64 %1413
  %1415 = bitcast float* %1414 to i32*
  store i32 %1412, i32* %1415, align 4
  %1416 = or i64 %1387, 5
  %1417 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1416
  %1418 = bitcast float* %1417 to i32*
  %1419 = load i32, i32* %1418, align 4
  %1420 = or i64 %1253, 19
  %1421 = getelementptr inbounds float, float* %11, i64 %1420
  %1422 = bitcast float* %1421 to i32*
  store i32 %1419, i32* %1422, align 4
  %1423 = or i64 %1387, 6
  %1424 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1423
  %1425 = bitcast float* %1424 to i32*
  %1426 = load i32, i32* %1425, align 8
  %1427 = or i64 %1253, 21
  %1428 = getelementptr inbounds float, float* %11, i64 %1427
  %1429 = bitcast float* %1428 to i32*
  store i32 %1426, i32* %1429, align 4
  %1430 = or i64 %1387, 7
  %1431 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1430
  %1432 = bitcast float* %1431 to i32*
  %1433 = load i32, i32* %1432, align 4
  %1434 = or i64 %1253, 23
  %1435 = getelementptr inbounds float, float* %11, i64 %1434
  %1436 = bitcast float* %1435 to i32*
  store i32 %1433, i32* %1436, align 4
  %1437 = or i64 %1387, 8
  %1438 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1437
  %1439 = bitcast float* %1438 to i32*
  %1440 = load i32, i32* %1439, align 16
  %1441 = or i64 %1253, 33
  %1442 = getelementptr inbounds float, float* %11, i64 %1441
  %1443 = bitcast float* %1442 to i32*
  store i32 %1440, i32* %1443, align 4
  %1444 = or i64 %1387, 9
  %1445 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1444
  %1446 = bitcast float* %1445 to i32*
  %1447 = load i32, i32* %1446, align 4
  %1448 = or i64 %1253, 35
  %1449 = getelementptr inbounds float, float* %11, i64 %1448
  %1450 = bitcast float* %1449 to i32*
  store i32 %1447, i32* %1450, align 4
  %1451 = or i64 %1387, 10
  %1452 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1451
  %1453 = bitcast float* %1452 to i32*
  %1454 = load i32, i32* %1453, align 8
  %1455 = or i64 %1253, 37
  %1456 = getelementptr inbounds float, float* %11, i64 %1455
  %1457 = bitcast float* %1456 to i32*
  store i32 %1454, i32* %1457, align 4
  %1458 = or i64 %1387, 11
  %1459 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1458
  %1460 = bitcast float* %1459 to i32*
  %1461 = load i32, i32* %1460, align 4
  %1462 = or i64 %1253, 39
  %1463 = getelementptr inbounds float, float* %11, i64 %1462
  %1464 = bitcast float* %1463 to i32*
  store i32 %1461, i32* %1464, align 4
  %1465 = or i64 %1387, 12
  %1466 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1465
  %1467 = bitcast float* %1466 to i32*
  %1468 = load i32, i32* %1467, align 16
  %1469 = or i64 %1253, 49
  %1470 = getelementptr inbounds float, float* %11, i64 %1469
  %1471 = bitcast float* %1470 to i32*
  store i32 %1468, i32* %1471, align 4
  %1472 = or i64 %1387, 13
  %1473 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1472
  %1474 = bitcast float* %1473 to i32*
  %1475 = load i32, i32* %1474, align 4
  %1476 = or i64 %1253, 51
  %1477 = getelementptr inbounds float, float* %11, i64 %1476
  %1478 = bitcast float* %1477 to i32*
  store i32 %1475, i32* %1478, align 4
  %1479 = or i64 %1387, 14
  %1480 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1479
  %1481 = bitcast float* %1480 to i32*
  %1482 = load i32, i32* %1481, align 8
  %1483 = or i64 %1253, 53
  %1484 = getelementptr inbounds float, float* %11, i64 %1483
  %1485 = bitcast float* %1484 to i32*
  store i32 %1482, i32* %1485, align 4
  %1486 = or i64 %1387, 15
  %1487 = getelementptr inbounds [48 x float], [48 x float]* %9, i64 0, i64 %1486
  %1488 = bitcast float* %1487 to i32*
  %1489 = load i32, i32* %1488, align 4
  %1490 = or i64 %1253, 55
  %1491 = getelementptr inbounds float, float* %11, i64 %1490
  %1492 = bitcast float* %1491 to i32*
  store i32 %1489, i32* %1492, align 4
  %1493 = add nuw nsw i64 %901, 1
  %1494 = icmp eq i64 %1493, 3
  br i1 %1494, label %925, label %900

1495:                                             ; preds = %1067, %1070
  %1496 = add nuw i64 %1068, 4
  %1497 = add i64 %1069, -4
  %1498 = icmp eq i64 %1497, 0
  br i1 %1498, label %982, label %1067

1499:                                             ; preds = %1021, %1024
  %1500 = add nuw i64 %1022, 4
  %1501 = add i64 %1023, -4
  %1502 = icmp eq i64 %1501, 0
  br i1 %1502, label %1044, label %1021

1503:                                             ; preds = %959, %962
  %1504 = add nuw i64 %960, 4
  %1505 = add i64 %961, -4
  %1506 = icmp eq i64 %1505, 0
  br i1 %1506, label %999, label %959
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_115DecodeDctParamsEPNS_9BitReaderEPNS_20DctQuantWeightParamsE(%"class.jxl::BitReader"*, %"struct.jxl::DctQuantWeightParams"*) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ugt i8* %4, %6
  br i1 %7, label %8, label %13, !prof !2

8:                                                ; preds = %2
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %9 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  br label %26

13:                                               ; preds = %2
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %15, %17
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = or i64 %20, %18
  store i64 %21, i64* %19, align 8
  %22 = sub i64 63, %17
  %23 = lshr i64 %22, 3
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  store i8* %24, i8** %3, align 8
  %25 = or i64 %17, 56
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %13, %8
  %27 = phi i64 [ %12, %8 ], [ %25, %13 ]
  %28 = phi i64 [ %10, %8 ], [ %21, %13 ]
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %30 = and i64 %28, 15
  %31 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %32 = add i64 %27, -4
  store i64 %32, i64* %31, align 8
  %33 = lshr i64 %28, 4
  store i64 %33, i64* %29, align 8
  %34 = add nuw nsw i64 %30, 1
  %35 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 0
  store i64 %34, i64* %35, align 8
  br label %39

36:                                               ; preds = %39
  %37 = load i64, i64* %35, align 8
  %38 = icmp ult i64 %44, %37
  br i1 %38, label %39, label %45

39:                                               ; preds = %26, %36
  %40 = phi i64 [ %44, %36 ], [ 0, %26 ]
  %41 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 1, i32 0, i64 0, i32 0, i64 %40
  %42 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %0, float* %41) #10
  %43 = icmp eq i32 %42, 0
  %44 = add nuw i64 %40, 1
  br i1 %43, label %36, label %52

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 1, i32 0, i64 0, i32 0, i64 0
  %47 = load float, float* %46, align 4
  %48 = fcmp olt float %47, 0x3E45798EE0000000
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  %50 = fmul float %47, 6.400000e+01
  store float %50, float* %46, align 4
  %51 = icmp eq i64 %37, 0
  br i1 %51, label %63, label %54

52:                                               ; preds = %39, %54, %71, %45, %63, %80, %84
  %53 = phi i32 [ 1, %45 ], [ 1, %63 ], [ 1, %80 ], [ 0, %84 ], [ %74, %71 ], [ %57, %54 ], [ %42, %39 ]
  ret i32 %53

54:                                               ; preds = %49, %60
  %55 = phi i64 [ %59, %60 ], [ 0, %49 ]
  %56 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 1, i32 0, i64 1, i32 0, i64 %55
  %57 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %0, float* %56) #10
  %58 = icmp eq i32 %57, 0
  %59 = add nuw i64 %55, 1
  br i1 %58, label %60, label %52

60:                                               ; preds = %54
  %61 = load i64, i64* %35, align 8
  %62 = icmp ult i64 %59, %61
  br i1 %62, label %54, label %63

63:                                               ; preds = %60, %49
  %64 = phi i64 [ 0, %49 ], [ %61, %60 ]
  %65 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 1, i32 0, i64 1, i32 0, i64 0
  %66 = load float, float* %65, align 4
  %67 = fcmp olt float %66, 0x3E45798EE0000000
  br i1 %67, label %52, label %68

68:                                               ; preds = %63
  %69 = fmul float %66, 6.400000e+01
  store float %69, float* %65, align 4
  %70 = icmp eq i64 %64, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %68, %77
  %72 = phi i64 [ %76, %77 ], [ 0, %68 ]
  %73 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 1, i32 0, i64 2, i32 0, i64 %72
  %74 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %0, float* %73) #10
  %75 = icmp eq i32 %74, 0
  %76 = add nuw i64 %72, 1
  br i1 %75, label %77, label %52

77:                                               ; preds = %71
  %78 = load i64, i64* %35, align 8
  %79 = icmp ult i64 %76, %78
  br i1 %79, label %71, label %80

80:                                               ; preds = %77, %68
  %81 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %1, i64 0, i32 1, i32 0, i64 2, i32 0, i64 0
  %82 = load float, float* %81, align 4
  %83 = fcmp olt float %82, 0x3E45798EE0000000
  br i1 %83, label %52, label %84

84:                                               ; preds = %80
  %85 = fmul float %82, 6.400000e+01
  store float %85, float* %81, align 4
  br label %52
}

declare i32 @_ZN3jxl19ModularFrameDecoder16DecodeQuantTableEmmPNS_9BitReaderEPNS_13QuantEncodingEmPS0_(i64, i64, %"class.jxl::BitReader"*, %"class.jxl::QuantEncoding"*, i64, %"class.jxl::ModularFrameDecoder"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_115GetQuantWeightsILm0EEENS_6StatusEmmRKNSt3__15arrayINS4_IfLm17EEELm3EEEmPf(i64, i64, %"struct.std::__1::array"* nocapture readonly dereferenceable(204), i64, float* nocapture) unnamed_addr #0 {
  %6 = alloca [17 x float], align 16
  %7 = bitcast [17 x float]* %6 to i8*
  %8 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 0
  %9 = bitcast [17 x float]* %6 to i32*
  %10 = icmp ugt i64 %3, 1
  %11 = icmp eq i64 %0, 0
  %12 = icmp eq i64 %1, 0
  %13 = add i64 %1, -1
  %14 = uitofp i64 %13 to float
  %15 = add i64 %0, -1
  %16 = uitofp i64 %15 to float
  %17 = icmp eq i64 %3, 1
  %18 = add i64 %3, -1
  %19 = uitofp i64 %18 to float
  br label %20

20:                                               ; preds = %93, %5
  %21 = phi i64 [ 0, %5 ], [ %94, %93 ]
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %7) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 68, i1 false)
  %22 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %2, i64 0, i32 0, i64 %21
  %23 = bitcast %"struct.std::__1::array.1"* %22 to i32*
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %9, align 16
  br i1 %10, label %25, label %29

25:                                               ; preds = %20
  %26 = bitcast i32 %24 to float
  br label %33

27:                                               ; preds = %44
  %28 = icmp eq i64 %49, %3
  br i1 %28, label %29, label %33

29:                                               ; preds = %27, %20
  br i1 %11, label %93, label %30

30:                                               ; preds = %29
  %31 = load float, float* %8, align 16
  %32 = mul i64 %21, %0
  br label %50

33:                                               ; preds = %27, %25
  %34 = phi float [ %46, %27 ], [ %26, %25 ]
  %35 = phi i64 [ %49, %27 ], [ 1, %25 ]
  %36 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %2, i64 0, i32 0, i64 %21, i32 0, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fcmp ogt float %37, 0.000000e+00
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = fadd float %37, 1.000000e+00
  br label %44

41:                                               ; preds = %33
  %42 = fsub float 1.000000e+00, %37
  %43 = fdiv float 1.000000e+00, %42
  br label %44

44:                                               ; preds = %39, %41
  %45 = phi float [ %40, %39 ], [ %43, %41 ]
  %46 = fmul float %34, %45
  %47 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 %35
  store float %46, float* %47, align 4
  %48 = fcmp olt float %46, 0x3E45798EE0000000
  %49 = add nuw i64 %35, 1
  br i1 %48, label %96, label %27

50:                                               ; preds = %58, %30
  %51 = phi i64 [ 0, %30 ], [ %59, %58 ]
  br i1 %12, label %58, label %52

52:                                               ; preds = %50
  %53 = uitofp i64 %51 to float
  %54 = fdiv float %53, %16
  %55 = fmul float %54, %54
  %56 = add i64 %51, %32
  %57 = mul i64 %56, %1
  br label %61

58:                                               ; preds = %87, %50
  %59 = add nuw i64 %51, 1
  %60 = icmp eq i64 %59, %0
  br i1 %60, label %93, label %50

61:                                               ; preds = %87, %52
  %62 = phi i64 [ 0, %52 ], [ %91, %87 ]
  %63 = uitofp i64 %62 to float
  %64 = fdiv float %63, %14
  %65 = fmul float %64, %64
  %66 = fadd float %55, %65
  %67 = tail call float @sqrtf(float %66) #10
  br i1 %17, label %87, label %68

68:                                               ; preds = %61
  %69 = fmul float %67, %19
  %70 = fdiv float %69, 0x3FF6A09F80000000
  %71 = fptoui float %70 to i64
  %72 = add i64 %71, 1
  %73 = icmp ult i64 %72, %3
  br i1 %73, label %77, label %74

74:                                               ; preds = %68
  %75 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.60, i64 0, i64 0)) #10
  %76 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

77:                                               ; preds = %68
  %78 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 %71
  %79 = load float, float* %78, align 4
  %80 = getelementptr inbounds [17 x float], [17 x float]* %6, i64 0, i64 %72
  %81 = load float, float* %80, align 4
  %82 = fdiv float %81, %79
  %83 = uitofp i64 %71 to float
  %84 = fsub float %70, %83
  %85 = tail call float @powf(float %82, float %84) #10
  %86 = fmul float %79, %85
  br label %87

87:                                               ; preds = %61, %77
  %88 = phi float [ %86, %77 ], [ %31, %61 ]
  %89 = add i64 %62, %57
  %90 = getelementptr inbounds float, float* %4, i64 %89
  store float %88, float* %90, align 4
  %91 = add nuw i64 %62, 1
  %92 = icmp eq i64 %91, %1
  br i1 %92, label %58, label %61

93:                                               ; preds = %58, %29
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %7) #10
  %94 = add nuw nsw i64 %21, 1
  %95 = icmp eq i64 %94, 3
  br i1 %95, label %97, label %20

96:                                               ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %7) #10
  br label %97

97:                                               ; preds = %93, %96
  %98 = phi i32 [ 1, %96 ], [ 0, %93 ]
  ret i32 %98
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #9

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon* %19 to %"class.std::__1::vector.10"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #10
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon* %30 to %"class.std::__1::vector.10"**
  %32 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.10"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #11
  %36 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #10
  %37 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.10"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #12
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #11
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #10
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #12
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #11
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon* %111 to %"class.std::__1::vector.10"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #10
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon* %120 to %"class.std::__1::vector.10"**
  %122 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.10"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #11
  %126 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #10
  %127 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.10"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #12
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #11
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #10
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #10
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon* %187 to %"class.std::__1::vector.10"**
  store %"class.std::__1::vector.10"* null, %"class.std::__1::vector.10"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon* %208 to %"class.std::__1::vector.10"**
  %210 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.10"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #11
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.10"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #11
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #11
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

declare i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64, i8* (i8*, i64)*, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!9 = !{!"branch_weights", i32 1, i32 1048575}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3hwy17MakeUniqueAlignedIZN3jxl15DequantMatrices7ComputeEvE15DefaultMatricesJEEENSt3__110unique_ptrIT_NS_14AlignedDeleterEEEDpOT0_: argument 0"}
!12 = distinct !{!12, !"_ZN3hwy17MakeUniqueAlignedIZN3jxl15DequantMatrices7ComputeEvE15DefaultMatricesJEEENSt3__110unique_ptrIT_NS_14AlignedDeleterEEEDpOT0_"}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_: argument 0"}
!15 = distinct !{!15, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_"}
!16 = distinct !{!16, !17, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!17 = distinct !{!17, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!21 = distinct !{!21, !22, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef3DCTEv: argument 0"}
!22 = distinct !{!22, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef3DCTEv"}
!23 = !{!21}
!24 = !{!25, !27}
!25 = distinct !{!25, !26, !"_ZN3jxl21QuantEncodingInternal8IdentityERKNSt3__15arrayINS2_IfLm3EEELm3EEE: argument 0"}
!26 = distinct !{!26, !"_ZN3jxl21QuantEncodingInternal8IdentityERKNSt3__15arrayINS2_IfLm3EEELm3EEE"}
!27 = distinct !{!27, !28, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8IDENTITYEv: argument 0"}
!28 = distinct !{!28, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8IDENTITYEv"}
!29 = !{!30, !32}
!30 = distinct !{!30, !31, !"_ZN3jxl21QuantEncodingInternal4DCT2ERKNSt3__15arrayINS2_IfLm6EEELm3EEE: argument 0"}
!31 = distinct !{!31, !"_ZN3jxl21QuantEncodingInternal4DCT2ERKNSt3__15arrayINS2_IfLm6EEELm3EEE"}
!32 = distinct !{!32, !33, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef6DCT2X2Ev: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef6DCT2X2Ev"}
!34 = !{!35, !37}
!35 = distinct !{!35, !36, !"_ZN3jxl21QuantEncodingInternal4DCT4ERKNS_20DctQuantWeightParamsERKNSt3__15arrayINS5_IfLm2EEELm3EEE: argument 0"}
!36 = distinct !{!36, !"_ZN3jxl21QuantEncodingInternal4DCT4ERKNS_20DctQuantWeightParamsERKNSt3__15arrayINS5_IfLm2EEELm3EEE"}
!37 = distinct !{!37, !38, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef6DCT4X4Ev: argument 0"}
!38 = distinct !{!38, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef6DCT4X4Ev"}
!39 = !{!37}
!40 = !{!41, !43}
!41 = distinct !{!41, !42, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!42 = distinct !{!42, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!43 = distinct !{!43, !44, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT16X16Ev: argument 0"}
!44 = distinct !{!44, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT16X16Ev"}
!45 = !{!43}
!46 = !{!47, !49}
!47 = distinct !{!47, !48, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!48 = distinct !{!48, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!49 = distinct !{!49, !50, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT32X32Ev: argument 0"}
!50 = distinct !{!50, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT32X32Ev"}
!51 = !{!49}
!52 = !{!53, !55}
!53 = distinct !{!53, !54, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!54 = distinct !{!54, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!55 = distinct !{!55, !56, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef7DCT8X16Ev: argument 0"}
!56 = distinct !{!56, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef7DCT8X16Ev"}
!57 = !{!55}
!58 = !{!59, !61}
!59 = distinct !{!59, !60, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!60 = distinct !{!60, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!61 = distinct !{!61, !62, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef7DCT8X32Ev: argument 0"}
!62 = distinct !{!62, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef7DCT8X32Ev"}
!63 = !{!61}
!64 = !{!65, !67}
!65 = distinct !{!65, !66, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!66 = distinct !{!66, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!67 = distinct !{!67, !68, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT16X32Ev: argument 0"}
!68 = distinct !{!68, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT16X32Ev"}
!69 = !{!67}
!70 = !{!71, !73}
!71 = distinct !{!71, !72, !"_ZN3jxl21QuantEncodingInternal6DCT4X8ERKNS_20DctQuantWeightParamsERKNSt3__15arrayIfLm3EEE: argument 0"}
!72 = distinct !{!72, !"_ZN3jxl21QuantEncodingInternal6DCT4X8ERKNS_20DctQuantWeightParamsERKNSt3__15arrayIfLm3EEE"}
!73 = distinct !{!73, !74, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef6DCT4X8Ev: argument 0"}
!74 = distinct !{!74, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef6DCT4X8Ev"}
!75 = !{!73}
!76 = !{!77, !79}
!77 = distinct !{!77, !78, !"_ZN3jxl21QuantEncodingInternal3AFVERKNS_20DctQuantWeightParamsES3_RKNSt3__15arrayINS5_IfLm9EEELm3EEE: argument 0"}
!78 = distinct !{!78, !"_ZN3jxl21QuantEncodingInternal3AFVERKNS_20DctQuantWeightParamsES3_RKNSt3__15arrayINS5_IfLm9EEELm3EEE"}
!79 = distinct !{!79, !80, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef4AFV0Ev: argument 0"}
!80 = distinct !{!80, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef4AFV0Ev"}
!81 = !{!82, !84}
!82 = distinct !{!82, !83, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!83 = distinct !{!83, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!84 = distinct !{!84, !85, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT64X64Ev: argument 0"}
!85 = distinct !{!85, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT64X64Ev"}
!86 = !{!84}
!87 = !{!88, !90}
!88 = distinct !{!88, !89, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!89 = distinct !{!89, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!90 = distinct !{!90, !91, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT32X64Ev: argument 0"}
!91 = distinct !{!91, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef8DCT32X64Ev"}
!92 = !{!90}
!93 = !{!94, !96}
!94 = distinct !{!94, !95, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!95 = distinct !{!95, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!96 = distinct !{!96, !97, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef10DCT128X128Ev: argument 0"}
!97 = distinct !{!97, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef10DCT128X128Ev"}
!98 = !{!96}
!99 = !{!100, !102}
!100 = distinct !{!100, !101, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!101 = distinct !{!101, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!102 = distinct !{!102, !103, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef9DCT64X128Ev: argument 0"}
!103 = distinct !{!103, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef9DCT64X128Ev"}
!104 = !{!102}
!105 = !{!106, !108}
!106 = distinct !{!106, !107, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!107 = distinct !{!107, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!108 = distinct !{!108, !109, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef10DCT256X256Ev: argument 0"}
!109 = distinct !{!109, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef10DCT256X256Ev"}
!110 = !{!108}
!111 = !{!112, !114}
!112 = distinct !{!112, !113, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE: argument 0"}
!113 = distinct !{!113, !"_ZN3jxl21QuantEncodingInternal3DCTERKNS_20DctQuantWeightParamsE"}
!114 = distinct !{!114, !115, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef10DCT128X256Ev: argument 0"}
!115 = distinct !{!115, !"_ZN3jxl12_GLOBAL__N_125DequantMatricesLibraryDef10DCT128X256Ev"}
!116 = !{!114}
!117 = distinct !{!117, !118}
!118 = !{!"llvm.loop.unroll.disable"}
!119 = distinct !{!119, !118}
!120 = distinct !{!120, !118}
