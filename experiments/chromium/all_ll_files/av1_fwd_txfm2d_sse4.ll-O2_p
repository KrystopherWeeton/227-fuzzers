; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_fwd_txfm2d_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_fwd_txfm2d_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TXFM_2D_FLIP_CFG = type { i8, i32, i32, i8*, i8, i8, [12 x i8], [12 x i8], i8, i8, i32, i32 }
%struct.txfm_param = type { i8, i8, i32, i32, i32, i8, i32 }

@fwd_txfm2d_func_ls = internal unnamed_addr constant [19 x void (i16*, i32*, i32, i8, i32)*] [void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_4x4_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_8x8_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_16x16_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_32x32_sse2, void (i16*, i32*, i32, i8, i32)* @lowbd_fwd_txfm2d_64x64_sse4_1, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_4x8_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_8x4_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_8x16_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_16x8_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_16x32_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_32x16_sse2, void (i16*, i32*, i32, i8, i32)* @lowbd_fwd_txfm2d_32x64_sse4_1, void (i16*, i32*, i32, i8, i32)* @lowbd_fwd_txfm2d_64x32_sse4_1, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_4x16_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_16x4_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_8x32_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_32x8_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_16x64_sse2, void (i16*, i32*, i32, i8, i32)* @av1_lowbd_fwd_txfm2d_64x16_sse2], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@av1_fwd_txfm_shift_ls = external local_unnamed_addr global [19 x i8*], align 16
@av1_fwd_cos_bit_col = external local_unnamed_addr constant [5 x [5 x i8]], align 16
@av1_fwd_cos_bit_row = external local_unnamed_addr constant [5 x [5 x i8]], align 16
@col_txfm8x32_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i8)*] [void (<2 x i64>*, <2 x i64>*, i8)* @av1_fdct8x32_new_sse2, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* @fidentity8x32_new_sse2, void (<2 x i64>*, <2 x i64>*, i8)* @av1_fdct8x32_new_sse2, void (<2 x i64>*, <2 x i64>*, i8)* @fidentity8x32_new_sse2, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null, void (<2 x i64>*, <2 x i64>*, i8)* null], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_32x32_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [1024 x i32], align 16
  %7 = alloca %struct.TXFM_2D_FLIP_CFG, align 8
  %8 = bitcast [1024 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 4096, i1 false)
  %9 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 64, i1 false)
  call void @av1_get_fwd_txfm_cfg(i8 zeroext %3, i8 zeroext 3, %struct.TXFM_2D_FLIP_CFG* nonnull %7) #7
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 6, i64 0
  %17 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 7, i64 0
  %18 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 4
  %19 = load i8, i8* %18, align 8
  %20 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 5
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 8
  %23 = load i8, i8* %22, align 2
  switch i8 %23, label %26 [
    i8 3, label %27
    i8 4, label %24
    i8 11, label %25
  ]

24:                                               ; preds = %5
  br label %27

25:                                               ; preds = %5
  br label %27

26:                                               ; preds = %5
  br label %27

27:                                               ; preds = %26, %25, %24, %5
  %28 = phi void (<2 x i64>*, <2 x i64>*, i8, i8*)* [ null, %26 ], [ @idtx32x32_sse4_1, %25 ], [ @fdct64_new_sse4_1, %24 ], [ @fdct32_sse4_1, %5 ]
  %29 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 9
  %30 = load i8, i8* %29, align 1
  switch i8 %30, label %33 [
    i8 3, label %34
    i8 4, label %31
    i8 11, label %32
  ]

31:                                               ; preds = %27
  br label %34

32:                                               ; preds = %27
  br label %34

33:                                               ; preds = %27
  br label %34

34:                                               ; preds = %33, %32, %31, %27
  %35 = phi void (<2 x i64>*, <2 x i64>*, i8, i8*)* [ null, %33 ], [ @idtx32x32_sse4_1, %32 ], [ @fdct64_new_sse4_1, %31 ], [ @fdct32_sse4_1, %27 ]
  %36 = bitcast [1024 x i32]* %6 to <2 x i64>*
  %37 = sext i32 %13 to i64
  %38 = sext i32 %2 to i64
  %39 = zext i32 %13 to i64
  %40 = and i64 %39, 4294967288
  %41 = add nsw i64 %40, -8
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = lshr i64 8225, %11
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %45, 0
  %47 = and i64 %39, 4294967288
  %48 = and i64 %43, 1
  %49 = icmp eq i64 %41, 0
  %50 = sub nuw nsw i64 %43, %48
  %51 = icmp eq i64 %48, 0
  %52 = icmp eq i64 %47, %39
  br label %53

53:                                               ; preds = %123, %34
  %54 = phi i64 [ 0, %34 ], [ %124, %123 ]
  %55 = mul nsw i64 %54, %38
  %56 = mul nsw i64 %54, %37
  br i1 %46, label %57, label %111

57:                                               ; preds = %53
  br i1 %49, label %93, label %58

58:                                               ; preds = %57, %58
  %59 = phi i64 [ %90, %58 ], [ 0, %57 ]
  %60 = phi i64 [ %91, %58 ], [ %50, %57 ]
  %61 = add nsw i64 %59, %55
  %62 = getelementptr inbounds i16, i16* %0, i64 %61
  %63 = bitcast i16* %62 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2
  %65 = getelementptr inbounds i16, i16* %62, i64 4
  %66 = bitcast i16* %65 to <4 x i16>*
  %67 = load <4 x i16>, <4 x i16>* %66, align 2
  %68 = sext <4 x i16> %64 to <4 x i32>
  %69 = sext <4 x i16> %67 to <4 x i32>
  %70 = add nsw i64 %59, %56
  %71 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %72, align 4
  %73 = getelementptr inbounds i32, i32* %71, i64 4
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %74, align 4
  %75 = or i64 %59, 8
  %76 = add nsw i64 %75, %55
  %77 = getelementptr inbounds i16, i16* %0, i64 %76
  %78 = bitcast i16* %77 to <4 x i16>*
  %79 = load <4 x i16>, <4 x i16>* %78, align 2
  %80 = getelementptr inbounds i16, i16* %77, i64 4
  %81 = bitcast i16* %80 to <4 x i16>*
  %82 = load <4 x i16>, <4 x i16>* %81, align 2
  %83 = sext <4 x i16> %79 to <4 x i32>
  %84 = sext <4 x i16> %82 to <4 x i32>
  %85 = add nsw i64 %75, %56
  %86 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 %85
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %87, align 4
  %88 = getelementptr inbounds i32, i32* %86, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %89, align 4
  %90 = add i64 %59, 16
  %91 = add i64 %60, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %58, !llvm.loop !2

93:                                               ; preds = %58, %57
  %94 = phi i64 [ 0, %57 ], [ %90, %58 ]
  br i1 %51, label %110, label %95

95:                                               ; preds = %93
  %96 = add nsw i64 %94, %55
  %97 = getelementptr inbounds i16, i16* %0, i64 %96
  %98 = bitcast i16* %97 to <4 x i16>*
  %99 = load <4 x i16>, <4 x i16>* %98, align 2
  %100 = getelementptr inbounds i16, i16* %97, i64 4
  %101 = bitcast i16* %100 to <4 x i16>*
  %102 = load <4 x i16>, <4 x i16>* %101, align 2
  %103 = sext <4 x i16> %99 to <4 x i32>
  %104 = sext <4 x i16> %102 to <4 x i32>
  %105 = add nsw i64 %94, %56
  %106 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 %105
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %107, align 4
  %108 = getelementptr inbounds i32, i32* %106, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %109, align 4
  br label %110

110:                                              ; preds = %93, %95
  br i1 %52, label %123, label %111

111:                                              ; preds = %53, %110
  %112 = phi i64 [ 0, %53 ], [ %47, %110 ]
  br label %113

113:                                              ; preds = %111, %113
  %114 = phi i64 [ %121, %113 ], [ %112, %111 ]
  %115 = add nsw i64 %114, %55
  %116 = getelementptr inbounds i16, i16* %0, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = add nsw i64 %114, %56
  %120 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 %119
  store i32 %118, i32* %120, align 4
  %121 = add nuw nsw i64 %114, 1
  %122 = icmp eq i64 %121, %39
  br i1 %122, label %123, label %113, !llvm.loop !4

123:                                              ; preds = %113, %110
  %124 = add nuw nsw i64 %54, 1
  %125 = icmp eq i64 %124, %39
  br i1 %125, label %126, label %53

126:                                              ; preds = %123
  %127 = mul nsw i32 %13, %13
  %128 = bitcast i32* %1 to <2 x i64>*
  %129 = lshr i32 %127, 2
  %130 = load i8, i8* %15, align 1
  %131 = sext i8 %130 to i32
  %132 = sub nsw i32 0, %131
  %133 = icmp slt i8 %130, 0
  %134 = icmp ne i32 %129, 0
  br i1 %133, label %143, label %135

135:                                              ; preds = %126
  br i1 %134, label %136, label %234

136:                                              ; preds = %135
  %137 = zext i32 %129 to i64
  %138 = add nsw i64 %137, -1
  %139 = and i64 %137, 3
  %140 = icmp ult i64 %138, 3
  br i1 %140, label %219, label %141

141:                                              ; preds = %136
  %142 = sub nsw i64 %137, %139
  br label %175

143:                                              ; preds = %126
  br i1 %134, label %144, label %234

144:                                              ; preds = %143
  %145 = xor i32 %131, -1
  %146 = shl i32 1, %145
  %147 = insertelement <4 x i32> undef, i32 %146, i32 0
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> zeroinitializer
  %149 = zext i32 %129 to i64
  %150 = and i64 %149, 1
  %151 = icmp eq i32 %129, 1
  br i1 %151, label %208, label %152

152:                                              ; preds = %144
  %153 = sub nsw i64 %149, %150
  br label %154

154:                                              ; preds = %154, %152
  %155 = phi i64 [ 0, %152 ], [ %172, %154 ]
  %156 = phi i64 [ %153, %152 ], [ %173, %154 ]
  %157 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %155
  %158 = bitcast <2 x i64>* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 16
  %160 = add <4 x i32> %159, %148
  %161 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %160, i32 %132) #7
  %162 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %155
  %163 = bitcast <2 x i64>* %162 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %163, align 16
  %164 = or i64 %155, 1
  %165 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %164
  %166 = bitcast <2 x i64>* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = add <4 x i32> %167, %148
  %169 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %168, i32 %132) #7
  %170 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %164
  %171 = bitcast <2 x i64>* %170 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %171, align 16
  %172 = add nuw nsw i64 %155, 2
  %173 = add i64 %156, -2
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %208, label %154

175:                                              ; preds = %175, %141
  %176 = phi i64 [ 0, %141 ], [ %205, %175 ]
  %177 = phi i64 [ %142, %141 ], [ %206, %175 ]
  %178 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %176
  %179 = bitcast <2 x i64>* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 16
  %181 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %180, i32 %131) #7
  %182 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %176
  %183 = bitcast <2 x i64>* %182 to <4 x i32>*
  store <4 x i32> %181, <4 x i32>* %183, align 16
  %184 = or i64 %176, 1
  %185 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %184
  %186 = bitcast <2 x i64>* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 16
  %188 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %187, i32 %131) #7
  %189 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %184
  %190 = bitcast <2 x i64>* %189 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %190, align 16
  %191 = or i64 %176, 2
  %192 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %191
  %193 = bitcast <2 x i64>* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 16
  %195 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %194, i32 %131) #7
  %196 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %191
  %197 = bitcast <2 x i64>* %196 to <4 x i32>*
  store <4 x i32> %195, <4 x i32>* %197, align 16
  %198 = or i64 %176, 3
  %199 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %198
  %200 = bitcast <2 x i64>* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 16
  %202 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %201, i32 %131) #7
  %203 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %198
  %204 = bitcast <2 x i64>* %203 to <4 x i32>*
  store <4 x i32> %202, <4 x i32>* %204, align 16
  %205 = add nuw nsw i64 %176, 4
  %206 = add i64 %177, -4
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %219, label %175

208:                                              ; preds = %154, %144
  %209 = phi i64 [ 0, %144 ], [ %172, %154 ]
  %210 = icmp eq i64 %150, 0
  br i1 %210, label %234, label %211

211:                                              ; preds = %208
  %212 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %209
  %213 = bitcast <2 x i64>* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 16
  %215 = add <4 x i32> %214, %148
  %216 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %215, i32 %132) #7
  %217 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %209
  %218 = bitcast <2 x i64>* %217 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %218, align 16
  br label %234

219:                                              ; preds = %175, %136
  %220 = phi i64 [ 0, %136 ], [ %205, %175 ]
  %221 = icmp eq i64 %139, 0
  br i1 %221, label %234, label %222

222:                                              ; preds = %219, %222
  %223 = phi i64 [ %231, %222 ], [ %220, %219 ]
  %224 = phi i64 [ %232, %222 ], [ %139, %219 ]
  %225 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %223
  %226 = bitcast <2 x i64>* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 16
  %228 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %227, i32 %131) #7
  %229 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %223
  %230 = bitcast <2 x i64>* %229 to <4 x i32>*
  store <4 x i32> %228, <4 x i32>* %230, align 16
  %231 = add nuw nsw i64 %223, 1
  %232 = add i64 %224, -1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %222, !llvm.loop !6

234:                                              ; preds = %219, %222, %211, %208, %143, %135
  call void %28(<2 x i64>* %128, <2 x i64>* nonnull %36, i8 signext %19, i8* %16) #7, !callees !8
  %235 = getelementptr inbounds i8, i8* %15, i64 1
  %236 = load i8, i8* %235, align 1
  %237 = sext i8 %236 to i32
  %238 = sub nsw i32 0, %237
  %239 = icmp slt i8 %236, 0
  br i1 %239, label %248, label %240

240:                                              ; preds = %234
  br i1 %134, label %241, label %339

241:                                              ; preds = %240
  %242 = zext i32 %129 to i64
  %243 = add nsw i64 %242, -1
  %244 = and i64 %242, 3
  %245 = icmp ult i64 %243, 3
  br i1 %245, label %324, label %246

246:                                              ; preds = %241
  %247 = sub nsw i64 %242, %244
  br label %280

248:                                              ; preds = %234
  br i1 %134, label %249, label %339

249:                                              ; preds = %248
  %250 = xor i32 %237, -1
  %251 = shl i32 1, %250
  %252 = insertelement <4 x i32> undef, i32 %251, i32 0
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> zeroinitializer
  %254 = zext i32 %129 to i64
  %255 = and i64 %254, 1
  %256 = icmp eq i32 %129, 1
  br i1 %256, label %313, label %257

257:                                              ; preds = %249
  %258 = sub nsw i64 %254, %255
  br label %259

259:                                              ; preds = %259, %257
  %260 = phi i64 [ 0, %257 ], [ %277, %259 ]
  %261 = phi i64 [ %258, %257 ], [ %278, %259 ]
  %262 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %260
  %263 = bitcast <2 x i64>* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 16
  %265 = add <4 x i32> %264, %253
  %266 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %265, i32 %238) #7
  %267 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %260
  %268 = bitcast <2 x i64>* %267 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %268, align 16
  %269 = or i64 %260, 1
  %270 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %269
  %271 = bitcast <2 x i64>* %270 to <4 x i32>*
  %272 = load <4 x i32>, <4 x i32>* %271, align 16
  %273 = add <4 x i32> %272, %253
  %274 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %273, i32 %238) #7
  %275 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %269
  %276 = bitcast <2 x i64>* %275 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %276, align 16
  %277 = add nuw nsw i64 %260, 2
  %278 = add i64 %261, -2
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %313, label %259

280:                                              ; preds = %280, %246
  %281 = phi i64 [ 0, %246 ], [ %310, %280 ]
  %282 = phi i64 [ %247, %246 ], [ %311, %280 ]
  %283 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %281
  %284 = bitcast <2 x i64>* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %285, i32 %237) #7
  %287 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %281
  %288 = bitcast <2 x i64>* %287 to <4 x i32>*
  store <4 x i32> %286, <4 x i32>* %288, align 16
  %289 = or i64 %281, 1
  %290 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %289
  %291 = bitcast <2 x i64>* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 16
  %293 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %292, i32 %237) #7
  %294 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %289
  %295 = bitcast <2 x i64>* %294 to <4 x i32>*
  store <4 x i32> %293, <4 x i32>* %295, align 16
  %296 = or i64 %281, 2
  %297 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %296
  %298 = bitcast <2 x i64>* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 16
  %300 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %299, i32 %237) #7
  %301 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %296
  %302 = bitcast <2 x i64>* %301 to <4 x i32>*
  store <4 x i32> %300, <4 x i32>* %302, align 16
  %303 = or i64 %281, 3
  %304 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %303
  %305 = bitcast <2 x i64>* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 16
  %307 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %306, i32 %237) #7
  %308 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %303
  %309 = bitcast <2 x i64>* %308 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %309, align 16
  %310 = add nuw nsw i64 %281, 4
  %311 = add i64 %282, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %324, label %280

313:                                              ; preds = %259, %249
  %314 = phi i64 [ 0, %249 ], [ %277, %259 ]
  %315 = icmp eq i64 %255, 0
  br i1 %315, label %339, label %316

316:                                              ; preds = %313
  %317 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %314
  %318 = bitcast <2 x i64>* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16
  %320 = add <4 x i32> %319, %253
  %321 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %320, i32 %238) #7
  %322 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %314
  %323 = bitcast <2 x i64>* %322 to <4 x i32>*
  store <4 x i32> %321, <4 x i32>* %323, align 16
  br label %339

324:                                              ; preds = %280, %241
  %325 = phi i64 [ 0, %241 ], [ %310, %280 ]
  %326 = icmp eq i64 %244, 0
  br i1 %326, label %339, label %327

327:                                              ; preds = %324, %327
  %328 = phi i64 [ %336, %327 ], [ %325, %324 ]
  %329 = phi i64 [ %337, %327 ], [ %244, %324 ]
  %330 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %328
  %331 = bitcast <2 x i64>* %330 to <4 x i32>*
  %332 = load <4 x i32>, <4 x i32>* %331, align 16
  %333 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %332, i32 %237) #7
  %334 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %328
  %335 = bitcast <2 x i64>* %334 to <4 x i32>*
  store <4 x i32> %333, <4 x i32>* %335, align 16
  %336 = add nuw nsw i64 %328, 1
  %337 = add i64 %329, -1
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %327, !llvm.loop !9

339:                                              ; preds = %324, %327, %316, %313, %248, %240
  %340 = sdiv i32 %13, 4
  %341 = shl nsw i32 %340, 2
  %342 = shl nsw i32 %340, 1
  %343 = sext i32 %342 to i64
  %344 = sext i32 %340 to i64
  %345 = mul nsw i32 %340, 3
  %346 = sext i32 %345 to i64
  %347 = zext i32 %340 to i64
  br label %348

348:                                              ; preds = %390, %339
  %349 = phi i64 [ 0, %339 ], [ %391, %390 ]
  %350 = mul nsw i64 %349, %344
  %351 = lshr exact i64 %349, 2
  %352 = trunc i64 %351 to i32
  br label %353

353:                                              ; preds = %353, %348
  %354 = phi i64 [ 0, %348 ], [ %388, %353 ]
  %355 = add nsw i64 %354, %350
  %356 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %355
  %357 = trunc i64 %354 to i32
  %358 = mul i32 %341, %357
  %359 = add nsw i32 %358, %352
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %360
  %362 = bitcast <2 x i64>* %356 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = getelementptr inbounds <2 x i64>, <2 x i64>* %356, i64 %343
  %365 = bitcast <2 x i64>* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 16
  %367 = shufflevector <4 x i32> %363, <4 x i32> %366, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %368 = shufflevector <4 x i32> %363, <4 x i32> %366, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %369 = getelementptr inbounds <2 x i64>, <2 x i64>* %356, i64 %344
  %370 = bitcast <2 x i64>* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 16
  %372 = getelementptr inbounds <2 x i64>, <2 x i64>* %356, i64 %346
  %373 = bitcast <2 x i64>* %372 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 16
  %375 = shufflevector <4 x i32> %371, <4 x i32> %374, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %376 = shufflevector <4 x i32> %371, <4 x i32> %374, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %377 = shufflevector <4 x i32> %367, <4 x i32> %375, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %378 = bitcast <2 x i64>* %361 to <4 x i32>*
  store <4 x i32> %377, <4 x i32>* %378, align 16
  %379 = shufflevector <4 x i32> %367, <4 x i32> %375, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %380 = getelementptr inbounds <2 x i64>, <2 x i64>* %361, i64 %344
  %381 = bitcast <2 x i64>* %380 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %381, align 16
  %382 = shufflevector <4 x i32> %368, <4 x i32> %376, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %383 = getelementptr inbounds <2 x i64>, <2 x i64>* %361, i64 %343
  %384 = bitcast <2 x i64>* %383 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %384, align 16
  %385 = shufflevector <4 x i32> %368, <4 x i32> %376, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %386 = getelementptr inbounds <2 x i64>, <2 x i64>* %361, i64 %346
  %387 = bitcast <2 x i64>* %386 to <4 x i32>*
  store <4 x i32> %385, <4 x i32>* %387, align 16
  %388 = add nuw nsw i64 %354, 1
  %389 = icmp eq i64 %388, %347
  br i1 %389, label %390, label %353

390:                                              ; preds = %353
  %391 = add nuw nsw i64 %349, 4
  %392 = icmp slt i64 %391, %37
  br i1 %392, label %348, label %393

393:                                              ; preds = %390
  call void %35(<2 x i64>* nonnull %36, <2 x i64>* %128, i8 signext %21, i8* %17) #7, !callees !8
  %394 = getelementptr inbounds i8, i8* %15, i64 2
  %395 = load i8, i8* %394, align 1
  %396 = sext i8 %395 to i32
  %397 = sub nsw i32 0, %396
  %398 = icmp slt i8 %395, 0
  br i1 %398, label %407, label %399

399:                                              ; preds = %393
  br i1 %134, label %400, label %498

400:                                              ; preds = %399
  %401 = zext i32 %129 to i64
  %402 = add nsw i64 %401, -1
  %403 = and i64 %401, 3
  %404 = icmp ult i64 %402, 3
  br i1 %404, label %483, label %405

405:                                              ; preds = %400
  %406 = sub nsw i64 %401, %403
  br label %439

407:                                              ; preds = %393
  br i1 %134, label %408, label %498

408:                                              ; preds = %407
  %409 = xor i32 %396, -1
  %410 = shl i32 1, %409
  %411 = insertelement <4 x i32> undef, i32 %410, i32 0
  %412 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> zeroinitializer
  %413 = zext i32 %129 to i64
  %414 = and i64 %413, 1
  %415 = icmp eq i32 %129, 1
  br i1 %415, label %472, label %416

416:                                              ; preds = %408
  %417 = sub nsw i64 %413, %414
  br label %418

418:                                              ; preds = %418, %416
  %419 = phi i64 [ 0, %416 ], [ %436, %418 ]
  %420 = phi i64 [ %417, %416 ], [ %437, %418 ]
  %421 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %419
  %422 = bitcast <2 x i64>* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 16
  %424 = add <4 x i32> %423, %412
  %425 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %424, i32 %397) #7
  %426 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %419
  %427 = bitcast <2 x i64>* %426 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %427, align 16
  %428 = or i64 %419, 1
  %429 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %428
  %430 = bitcast <2 x i64>* %429 to <4 x i32>*
  %431 = load <4 x i32>, <4 x i32>* %430, align 16
  %432 = add <4 x i32> %431, %412
  %433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %432, i32 %397) #7
  %434 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %428
  %435 = bitcast <2 x i64>* %434 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %435, align 16
  %436 = add nuw nsw i64 %419, 2
  %437 = add i64 %420, -2
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %472, label %418

439:                                              ; preds = %439, %405
  %440 = phi i64 [ 0, %405 ], [ %469, %439 ]
  %441 = phi i64 [ %406, %405 ], [ %470, %439 ]
  %442 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %440
  %443 = bitcast <2 x i64>* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 16
  %445 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %444, i32 %396) #7
  %446 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %440
  %447 = bitcast <2 x i64>* %446 to <4 x i32>*
  store <4 x i32> %445, <4 x i32>* %447, align 16
  %448 = or i64 %440, 1
  %449 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %448
  %450 = bitcast <2 x i64>* %449 to <4 x i32>*
  %451 = load <4 x i32>, <4 x i32>* %450, align 16
  %452 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %451, i32 %396) #7
  %453 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %448
  %454 = bitcast <2 x i64>* %453 to <4 x i32>*
  store <4 x i32> %452, <4 x i32>* %454, align 16
  %455 = or i64 %440, 2
  %456 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %455
  %457 = bitcast <2 x i64>* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 16
  %459 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %458, i32 %396) #7
  %460 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %455
  %461 = bitcast <2 x i64>* %460 to <4 x i32>*
  store <4 x i32> %459, <4 x i32>* %461, align 16
  %462 = or i64 %440, 3
  %463 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %462
  %464 = bitcast <2 x i64>* %463 to <4 x i32>*
  %465 = load <4 x i32>, <4 x i32>* %464, align 16
  %466 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %465, i32 %396) #7
  %467 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %462
  %468 = bitcast <2 x i64>* %467 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %468, align 16
  %469 = add nuw nsw i64 %440, 4
  %470 = add i64 %441, -4
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %483, label %439

472:                                              ; preds = %418, %408
  %473 = phi i64 [ 0, %408 ], [ %436, %418 ]
  %474 = icmp eq i64 %414, 0
  br i1 %474, label %498, label %475

475:                                              ; preds = %472
  %476 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %473
  %477 = bitcast <2 x i64>* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 16
  %479 = add <4 x i32> %478, %412
  %480 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %479, i32 %397) #7
  %481 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %473
  %482 = bitcast <2 x i64>* %481 to <4 x i32>*
  store <4 x i32> %480, <4 x i32>* %482, align 16
  br label %498

483:                                              ; preds = %439, %400
  %484 = phi i64 [ 0, %400 ], [ %469, %439 ]
  %485 = icmp eq i64 %403, 0
  br i1 %485, label %498, label %486

486:                                              ; preds = %483, %486
  %487 = phi i64 [ %495, %486 ], [ %484, %483 ]
  %488 = phi i64 [ %496, %486 ], [ %403, %483 ]
  %489 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %487
  %490 = bitcast <2 x i64>* %489 to <4 x i32>*
  %491 = load <4 x i32>, <4 x i32>* %490, align 16
  %492 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %491, i32 %396) #7
  %493 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %487
  %494 = bitcast <2 x i64>* %493 to <4 x i32>*
  store <4 x i32> %492, <4 x i32>* %494, align 16
  %495 = add nuw nsw i64 %487, 1
  %496 = add i64 %488, -1
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %498, label %486, !llvm.loop !10

498:                                              ; preds = %483, %486, %475, %472, %407, %399
  br label %499

499:                                              ; preds = %498, %541
  %500 = phi i64 [ %542, %541 ], [ 0, %498 ]
  %501 = mul nsw i64 %500, %344
  %502 = lshr exact i64 %500, 2
  %503 = trunc i64 %502 to i32
  br label %504

504:                                              ; preds = %504, %499
  %505 = phi i64 [ 0, %499 ], [ %539, %504 ]
  %506 = add nsw i64 %505, %501
  %507 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 %506
  %508 = trunc i64 %505 to i32
  %509 = mul i32 %341, %508
  %510 = add nsw i32 %509, %503
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 %511
  %513 = bitcast <2 x i64>* %507 to <4 x i32>*
  %514 = load <4 x i32>, <4 x i32>* %513, align 16
  %515 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 %343
  %516 = bitcast <2 x i64>* %515 to <4 x i32>*
  %517 = load <4 x i32>, <4 x i32>* %516, align 16
  %518 = shufflevector <4 x i32> %514, <4 x i32> %517, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %519 = shufflevector <4 x i32> %514, <4 x i32> %517, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %520 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 %344
  %521 = bitcast <2 x i64>* %520 to <4 x i32>*
  %522 = load <4 x i32>, <4 x i32>* %521, align 16
  %523 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 %346
  %524 = bitcast <2 x i64>* %523 to <4 x i32>*
  %525 = load <4 x i32>, <4 x i32>* %524, align 16
  %526 = shufflevector <4 x i32> %522, <4 x i32> %525, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %527 = shufflevector <4 x i32> %522, <4 x i32> %525, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %528 = shufflevector <4 x i32> %518, <4 x i32> %526, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %529 = bitcast <2 x i64>* %512 to <4 x i32>*
  store <4 x i32> %528, <4 x i32>* %529, align 16
  %530 = shufflevector <4 x i32> %518, <4 x i32> %526, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %531 = getelementptr inbounds <2 x i64>, <2 x i64>* %512, i64 %344
  %532 = bitcast <2 x i64>* %531 to <4 x i32>*
  store <4 x i32> %530, <4 x i32>* %532, align 16
  %533 = shufflevector <4 x i32> %519, <4 x i32> %527, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %534 = getelementptr inbounds <2 x i64>, <2 x i64>* %512, i64 %343
  %535 = bitcast <2 x i64>* %534 to <4 x i32>*
  store <4 x i32> %533, <4 x i32>* %535, align 16
  %536 = shufflevector <4 x i32> %519, <4 x i32> %527, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %537 = getelementptr inbounds <2 x i64>, <2 x i64>* %512, i64 %346
  %538 = bitcast <2 x i64>* %537 to <4 x i32>*
  store <4 x i32> %536, <4 x i32>* %538, align 16
  %539 = add nuw nsw i64 %505, 1
  %540 = icmp eq i64 %539, %347
  br i1 %540, label %541, label %504

541:                                              ; preds = %504
  %542 = add nuw nsw i64 %500, 4
  %543 = icmp slt i64 %542, %37
  br i1 %543, label %499, label %544

544:                                              ; preds = %541
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @av1_get_fwd_txfm_cfg(i8 zeroext, i8 zeroext, %struct.TXFM_2D_FLIP_CFG*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_64x64_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [4096 x i32], align 16
  %7 = alloca %struct.TXFM_2D_FLIP_CFG, align 8
  %8 = bitcast [4096 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16384, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 16384, i1 false)
  %9 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 64, i1 false)
  call void @av1_get_fwd_txfm_cfg(i8 zeroext %3, i8 zeroext 4, %struct.TXFM_2D_FLIP_CFG* nonnull %7) #7
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 6, i64 0
  %17 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 4
  %18 = load i8, i8* %17, align 8
  %19 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 5
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %7, i64 0, i32 8
  %22 = load i8, i8* %21, align 2
  switch i8 %22, label %25 [
    i8 3, label %26
    i8 4, label %23
    i8 11, label %24
  ]

23:                                               ; preds = %5
  br label %26

24:                                               ; preds = %5
  br label %26

25:                                               ; preds = %5
  br label %26

26:                                               ; preds = %25, %24, %23, %5
  %27 = phi void (<2 x i64>*, <2 x i64>*, i8, i8*)* [ null, %25 ], [ @idtx32x32_sse4_1, %24 ], [ @fdct64_new_sse4_1, %23 ], [ @fdct32_sse4_1, %5 ]
  %28 = mul nsw i32 %13, %13
  %29 = sext i32 %13 to i64
  %30 = sext i32 %2 to i64
  %31 = zext i32 %13 to i64
  %32 = and i64 %31, 4294967288
  %33 = add nsw i64 %32, -8
  %34 = lshr exact i64 %33, 3
  %35 = add nuw nsw i64 %34, 1
  %36 = lshr i64 8225, %11
  %37 = and i64 %36, 1
  %38 = icmp eq i64 %37, 0
  %39 = and i64 %31, 4294967288
  %40 = and i64 %35, 1
  %41 = icmp eq i64 %33, 0
  %42 = sub nuw nsw i64 %35, %40
  %43 = icmp eq i64 %40, 0
  %44 = icmp eq i64 %39, %31
  %45 = and i64 %31, 3
  %46 = icmp eq i64 %45, 0
  br label %47

47:                                               ; preds = %169, %26
  %48 = phi i64 [ 0, %26 ], [ %170, %169 ]
  %49 = mul i64 %48, %29
  %50 = mul i64 %48, %30
  %51 = mul nsw i64 %48, %30
  %52 = mul nsw i64 %48, %29
  br i1 %38, label %53, label %119

53:                                               ; preds = %47
  %54 = add i64 %50, %31
  %55 = getelementptr i16, i16* %0, i64 %54
  %56 = getelementptr i16, i16* %0, i64 %50
  %57 = add i64 %49, %31
  %58 = getelementptr i32, i32* %1, i64 %57
  %59 = getelementptr i32, i32* %1, i64 %49
  %60 = bitcast i16* %55 to i32*
  %61 = icmp ult i32* %59, %60
  %62 = bitcast i32* %58 to i16*
  %63 = icmp ult i16* %56, %62
  %64 = and i1 %61, %63
  br i1 %64, label %119, label %65

65:                                               ; preds = %53
  br i1 %41, label %101, label %66

66:                                               ; preds = %65, %66
  %67 = phi i64 [ %98, %66 ], [ 0, %65 ]
  %68 = phi i64 [ %99, %66 ], [ %42, %65 ]
  %69 = add nsw i64 %67, %51
  %70 = getelementptr inbounds i16, i16* %0, i64 %69
  %71 = bitcast i16* %70 to <4 x i16>*
  %72 = load <4 x i16>, <4 x i16>* %71, align 2, !alias.scope !11
  %73 = getelementptr inbounds i16, i16* %70, i64 4
  %74 = bitcast i16* %73 to <4 x i16>*
  %75 = load <4 x i16>, <4 x i16>* %74, align 2, !alias.scope !11
  %76 = sext <4 x i16> %72 to <4 x i32>
  %77 = sext <4 x i16> %75 to <4 x i32>
  %78 = add nsw i64 %67, %52
  %79 = getelementptr inbounds i32, i32* %1, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %80, align 4, !alias.scope !14, !noalias !11
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %82, align 4, !alias.scope !14, !noalias !11
  %83 = or i64 %67, 8
  %84 = add nsw i64 %83, %51
  %85 = getelementptr inbounds i16, i16* %0, i64 %84
  %86 = bitcast i16* %85 to <4 x i16>*
  %87 = load <4 x i16>, <4 x i16>* %86, align 2, !alias.scope !11
  %88 = getelementptr inbounds i16, i16* %85, i64 4
  %89 = bitcast i16* %88 to <4 x i16>*
  %90 = load <4 x i16>, <4 x i16>* %89, align 2, !alias.scope !11
  %91 = sext <4 x i16> %87 to <4 x i32>
  %92 = sext <4 x i16> %90 to <4 x i32>
  %93 = add nsw i64 %83, %52
  %94 = getelementptr inbounds i32, i32* %1, i64 %93
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !14, !noalias !11
  %96 = getelementptr inbounds i32, i32* %94, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %97, align 4, !alias.scope !14, !noalias !11
  %98 = add i64 %67, 16
  %99 = add i64 %68, -2
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %66, !llvm.loop !16

101:                                              ; preds = %66, %65
  %102 = phi i64 [ 0, %65 ], [ %98, %66 ]
  br i1 %43, label %118, label %103

103:                                              ; preds = %101
  %104 = add nsw i64 %102, %51
  %105 = getelementptr inbounds i16, i16* %0, i64 %104
  %106 = bitcast i16* %105 to <4 x i16>*
  %107 = load <4 x i16>, <4 x i16>* %106, align 2, !alias.scope !11
  %108 = getelementptr inbounds i16, i16* %105, i64 4
  %109 = bitcast i16* %108 to <4 x i16>*
  %110 = load <4 x i16>, <4 x i16>* %109, align 2, !alias.scope !11
  %111 = sext <4 x i16> %107 to <4 x i32>
  %112 = sext <4 x i16> %110 to <4 x i32>
  %113 = add nsw i64 %102, %52
  %114 = getelementptr inbounds i32, i32* %1, i64 %113
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %115, align 4, !alias.scope !14, !noalias !11
  %116 = getelementptr inbounds i32, i32* %114, i64 4
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %117, align 4, !alias.scope !14, !noalias !11
  br label %118

118:                                              ; preds = %101, %103
  br i1 %44, label %169, label %119

119:                                              ; preds = %47, %118, %53
  %120 = phi i64 [ 0, %53 ], [ 0, %47 ], [ %39, %118 ]
  %121 = xor i64 %120, -1
  %122 = add nsw i64 %121, %31
  br i1 %46, label %135, label %123

123:                                              ; preds = %119, %123
  %124 = phi i64 [ %132, %123 ], [ %120, %119 ]
  %125 = phi i64 [ %133, %123 ], [ %45, %119 ]
  %126 = add nsw i64 %124, %51
  %127 = getelementptr inbounds i16, i16* %0, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = add nsw i64 %124, %52
  %131 = getelementptr inbounds i32, i32* %1, i64 %130
  store i32 %129, i32* %131, align 4
  %132 = add nuw nsw i64 %124, 1
  %133 = add i64 %125, -1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %123, !llvm.loop !17

135:                                              ; preds = %123, %119
  %136 = phi i64 [ %120, %119 ], [ %132, %123 ]
  %137 = icmp ult i64 %122, 3
  br i1 %137, label %169, label %138

138:                                              ; preds = %135, %138
  %139 = phi i64 [ %167, %138 ], [ %136, %135 ]
  %140 = add nsw i64 %139, %51
  %141 = getelementptr inbounds i16, i16* %0, i64 %140
  %142 = load i16, i16* %141, align 2
  %143 = sext i16 %142 to i32
  %144 = add nsw i64 %139, %52
  %145 = getelementptr inbounds i32, i32* %1, i64 %144
  store i32 %143, i32* %145, align 4
  %146 = add nuw nsw i64 %139, 1
  %147 = add nsw i64 %146, %51
  %148 = getelementptr inbounds i16, i16* %0, i64 %147
  %149 = load i16, i16* %148, align 2
  %150 = sext i16 %149 to i32
  %151 = add nsw i64 %146, %52
  %152 = getelementptr inbounds i32, i32* %1, i64 %151
  store i32 %150, i32* %152, align 4
  %153 = add nuw nsw i64 %139, 2
  %154 = add nsw i64 %153, %51
  %155 = getelementptr inbounds i16, i16* %0, i64 %154
  %156 = load i16, i16* %155, align 2
  %157 = sext i16 %156 to i32
  %158 = add nsw i64 %153, %52
  %159 = getelementptr inbounds i32, i32* %1, i64 %158
  store i32 %157, i32* %159, align 4
  %160 = add nuw nsw i64 %139, 3
  %161 = add nsw i64 %160, %51
  %162 = getelementptr inbounds i16, i16* %0, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = sext i16 %163 to i32
  %165 = add nsw i64 %160, %52
  %166 = getelementptr inbounds i32, i32* %1, i64 %165
  store i32 %164, i32* %166, align 4
  %167 = add nuw nsw i64 %139, 4
  %168 = icmp eq i64 %167, %31
  br i1 %168, label %169, label %138, !llvm.loop !18

169:                                              ; preds = %135, %138, %118
  %170 = add nuw nsw i64 %48, 1
  %171 = icmp eq i64 %170, %31
  br i1 %171, label %172, label %47

172:                                              ; preds = %169
  %173 = bitcast [4096 x i32]* %6 to <2 x i64>*
  %174 = lshr i32 %28, 2
  %175 = bitcast i32* %1 to <2 x i64>*
  %176 = sdiv i32 %13, 4
  call void %27(<2 x i64>* %175, <2 x i64>* nonnull %173, i8 signext %18, i8* %16) #7, !callees !8
  %177 = getelementptr inbounds i8, i8* %15, i64 1
  %178 = load i8, i8* %177, align 1
  %179 = sext i8 %178 to i32
  %180 = sub nsw i32 0, %179
  %181 = icmp slt i8 %178, 0
  %182 = icmp ne i32 %174, 0
  br i1 %181, label %191, label %183

183:                                              ; preds = %172
  br i1 %182, label %184, label %282

184:                                              ; preds = %183
  %185 = zext i32 %174 to i64
  %186 = add nsw i64 %185, -1
  %187 = and i64 %185, 3
  %188 = icmp ult i64 %186, 3
  br i1 %188, label %267, label %189

189:                                              ; preds = %184
  %190 = sub nsw i64 %185, %187
  br label %223

191:                                              ; preds = %172
  br i1 %182, label %192, label %282

192:                                              ; preds = %191
  %193 = xor i32 %179, -1
  %194 = shl i32 1, %193
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = zext i32 %174 to i64
  %198 = and i64 %197, 1
  %199 = icmp eq i32 %174, 1
  br i1 %199, label %256, label %200

200:                                              ; preds = %192
  %201 = sub nsw i64 %197, %198
  br label %202

202:                                              ; preds = %202, %200
  %203 = phi i64 [ 0, %200 ], [ %220, %202 ]
  %204 = phi i64 [ %201, %200 ], [ %221, %202 ]
  %205 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %203
  %206 = bitcast <2 x i64>* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 16
  %208 = add <4 x i32> %207, %196
  %209 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %208, i32 %180) #7
  %210 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %203
  %211 = bitcast <2 x i64>* %210 to <4 x i32>*
  store <4 x i32> %209, <4 x i32>* %211, align 16
  %212 = or i64 %203, 1
  %213 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %212
  %214 = bitcast <2 x i64>* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 16
  %216 = add <4 x i32> %215, %196
  %217 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %216, i32 %180) #7
  %218 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %212
  %219 = bitcast <2 x i64>* %218 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %219, align 16
  %220 = add nuw nsw i64 %203, 2
  %221 = add i64 %204, -2
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %256, label %202

223:                                              ; preds = %223, %189
  %224 = phi i64 [ 0, %189 ], [ %253, %223 ]
  %225 = phi i64 [ %190, %189 ], [ %254, %223 ]
  %226 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %224
  %227 = bitcast <2 x i64>* %226 to <4 x i32>*
  %228 = load <4 x i32>, <4 x i32>* %227, align 16
  %229 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %228, i32 %179) #7
  %230 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %224
  %231 = bitcast <2 x i64>* %230 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %231, align 16
  %232 = or i64 %224, 1
  %233 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %232
  %234 = bitcast <2 x i64>* %233 to <4 x i32>*
  %235 = load <4 x i32>, <4 x i32>* %234, align 16
  %236 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %235, i32 %179) #7
  %237 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %232
  %238 = bitcast <2 x i64>* %237 to <4 x i32>*
  store <4 x i32> %236, <4 x i32>* %238, align 16
  %239 = or i64 %224, 2
  %240 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %239
  %241 = bitcast <2 x i64>* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 16
  %243 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %242, i32 %179) #7
  %244 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %239
  %245 = bitcast <2 x i64>* %244 to <4 x i32>*
  store <4 x i32> %243, <4 x i32>* %245, align 16
  %246 = or i64 %224, 3
  %247 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %246
  %248 = bitcast <2 x i64>* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 16
  %250 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %249, i32 %179) #7
  %251 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %246
  %252 = bitcast <2 x i64>* %251 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %252, align 16
  %253 = add nuw nsw i64 %224, 4
  %254 = add i64 %225, -4
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %267, label %223

256:                                              ; preds = %202, %192
  %257 = phi i64 [ 0, %192 ], [ %220, %202 ]
  %258 = icmp eq i64 %198, 0
  br i1 %258, label %282, label %259

259:                                              ; preds = %256
  %260 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %257
  %261 = bitcast <2 x i64>* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 16
  %263 = add <4 x i32> %262, %196
  %264 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %263, i32 %180) #7
  %265 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %257
  %266 = bitcast <2 x i64>* %265 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %266, align 16
  br label %282

267:                                              ; preds = %223, %184
  %268 = phi i64 [ 0, %184 ], [ %253, %223 ]
  %269 = icmp eq i64 %187, 0
  br i1 %269, label %282, label %270

270:                                              ; preds = %267, %270
  %271 = phi i64 [ %279, %270 ], [ %268, %267 ]
  %272 = phi i64 [ %280, %270 ], [ %187, %267 ]
  %273 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %271
  %274 = bitcast <2 x i64>* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 16
  %276 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %275, i32 %179) #7
  %277 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %271
  %278 = bitcast <2 x i64>* %277 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %278, align 16
  %279 = add nuw nsw i64 %271, 1
  %280 = add i64 %272, -1
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %270, !llvm.loop !19

282:                                              ; preds = %267, %270, %259, %256, %191, %183
  %283 = shl nsw i32 %176, 2
  %284 = shl nsw i32 %176, 1
  %285 = sext i32 %284 to i64
  %286 = sext i32 %176 to i64
  %287 = mul nsw i32 %176, 3
  %288 = sext i32 %287 to i64
  %289 = zext i32 %176 to i64
  br label %290

290:                                              ; preds = %332, %282
  %291 = phi i64 [ 0, %282 ], [ %333, %332 ]
  %292 = mul nsw i64 %291, %286
  %293 = lshr exact i64 %291, 2
  %294 = trunc i64 %293 to i32
  br label %295

295:                                              ; preds = %295, %290
  %296 = phi i64 [ 0, %290 ], [ %330, %295 ]
  %297 = add nsw i64 %296, %292
  %298 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %297
  %299 = trunc i64 %296 to i32
  %300 = mul i32 %283, %299
  %301 = add nsw i32 %300, %294
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %302
  %304 = bitcast <2 x i64>* %298 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16
  %306 = getelementptr inbounds <2 x i64>, <2 x i64>* %298, i64 %285
  %307 = bitcast <2 x i64>* %306 to <4 x i32>*
  %308 = load <4 x i32>, <4 x i32>* %307, align 16
  %309 = shufflevector <4 x i32> %305, <4 x i32> %308, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %310 = shufflevector <4 x i32> %305, <4 x i32> %308, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %311 = getelementptr inbounds <2 x i64>, <2 x i64>* %298, i64 %286
  %312 = bitcast <2 x i64>* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16
  %314 = getelementptr inbounds <2 x i64>, <2 x i64>* %298, i64 %288
  %315 = bitcast <2 x i64>* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 16
  %317 = shufflevector <4 x i32> %313, <4 x i32> %316, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %318 = shufflevector <4 x i32> %313, <4 x i32> %316, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %319 = shufflevector <4 x i32> %309, <4 x i32> %317, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %320 = bitcast <2 x i64>* %303 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %320, align 16
  %321 = shufflevector <4 x i32> %309, <4 x i32> %317, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %322 = getelementptr inbounds <2 x i64>, <2 x i64>* %303, i64 %286
  %323 = bitcast <2 x i64>* %322 to <4 x i32>*
  store <4 x i32> %321, <4 x i32>* %323, align 16
  %324 = shufflevector <4 x i32> %310, <4 x i32> %318, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %325 = getelementptr inbounds <2 x i64>, <2 x i64>* %303, i64 %285
  %326 = bitcast <2 x i64>* %325 to <4 x i32>*
  store <4 x i32> %324, <4 x i32>* %326, align 16
  %327 = shufflevector <4 x i32> %310, <4 x i32> %318, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %328 = getelementptr inbounds <2 x i64>, <2 x i64>* %303, i64 %288
  %329 = bitcast <2 x i64>* %328 to <4 x i32>*
  store <4 x i32> %327, <4 x i32>* %329, align 16
  %330 = add nuw nsw i64 %296, 1
  %331 = icmp eq i64 %330, %289
  br i1 %331, label %332, label %295

332:                                              ; preds = %295
  %333 = add nuw nsw i64 %291, 4
  %334 = icmp slt i64 %333, %29
  br i1 %334, label %290, label %335

335:                                              ; preds = %332
  %336 = ashr i32 %176, 1
  %337 = lshr i64 516062, %11
  %338 = and i64 %337, 1
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %342, label %340

340:                                              ; preds = %335
  %341 = sext i32 %336 to i64
  br label %498

342:                                              ; preds = %498, %335
  %343 = ashr i32 %13, 1
  %344 = mul nsw i32 %336, %343
  %345 = getelementptr inbounds i8, i8* %15, i64 2
  %346 = load i8, i8* %345, align 1
  %347 = sext i8 %346 to i32
  %348 = sub nsw i32 0, %347
  %349 = icmp slt i8 %346, 0
  %350 = icmp sgt i32 %344, 0
  br i1 %349, label %359, label %351

351:                                              ; preds = %342
  br i1 %350, label %352, label %450

352:                                              ; preds = %351
  %353 = zext i32 %344 to i64
  %354 = add nsw i64 %353, -1
  %355 = and i64 %353, 3
  %356 = icmp ult i64 %354, 3
  br i1 %356, label %435, label %357

357:                                              ; preds = %352
  %358 = sub nsw i64 %353, %355
  br label %391

359:                                              ; preds = %342
  br i1 %350, label %360, label %450

360:                                              ; preds = %359
  %361 = xor i32 %347, -1
  %362 = shl i32 1, %361
  %363 = insertelement <4 x i32> undef, i32 %362, i32 0
  %364 = shufflevector <4 x i32> %363, <4 x i32> undef, <4 x i32> zeroinitializer
  %365 = zext i32 %344 to i64
  %366 = and i64 %365, 1
  %367 = icmp eq i32 %344, 1
  br i1 %367, label %424, label %368

368:                                              ; preds = %360
  %369 = sub nsw i64 %365, %366
  br label %370

370:                                              ; preds = %370, %368
  %371 = phi i64 [ 0, %368 ], [ %388, %370 ]
  %372 = phi i64 [ %369, %368 ], [ %389, %370 ]
  %373 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %371
  %374 = bitcast <2 x i64>* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 16
  %376 = add <4 x i32> %375, %364
  %377 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %376, i32 %348) #7
  %378 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %371
  %379 = bitcast <2 x i64>* %378 to <4 x i32>*
  store <4 x i32> %377, <4 x i32>* %379, align 16
  %380 = or i64 %371, 1
  %381 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %380
  %382 = bitcast <2 x i64>* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 16
  %384 = add <4 x i32> %383, %364
  %385 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %384, i32 %348) #7
  %386 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %380
  %387 = bitcast <2 x i64>* %386 to <4 x i32>*
  store <4 x i32> %385, <4 x i32>* %387, align 16
  %388 = add nuw nsw i64 %371, 2
  %389 = add i64 %372, -2
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %424, label %370

391:                                              ; preds = %391, %357
  %392 = phi i64 [ 0, %357 ], [ %421, %391 ]
  %393 = phi i64 [ %358, %357 ], [ %422, %391 ]
  %394 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %392
  %395 = bitcast <2 x i64>* %394 to <4 x i32>*
  %396 = load <4 x i32>, <4 x i32>* %395, align 16
  %397 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %396, i32 %347) #7
  %398 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %392
  %399 = bitcast <2 x i64>* %398 to <4 x i32>*
  store <4 x i32> %397, <4 x i32>* %399, align 16
  %400 = or i64 %392, 1
  %401 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %400
  %402 = bitcast <2 x i64>* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 16
  %404 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %403, i32 %347) #7
  %405 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %400
  %406 = bitcast <2 x i64>* %405 to <4 x i32>*
  store <4 x i32> %404, <4 x i32>* %406, align 16
  %407 = or i64 %392, 2
  %408 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %407
  %409 = bitcast <2 x i64>* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 16
  %411 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %410, i32 %347) #7
  %412 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %407
  %413 = bitcast <2 x i64>* %412 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %413, align 16
  %414 = or i64 %392, 3
  %415 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %414
  %416 = bitcast <2 x i64>* %415 to <4 x i32>*
  %417 = load <4 x i32>, <4 x i32>* %416, align 16
  %418 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %417, i32 %347) #7
  %419 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %414
  %420 = bitcast <2 x i64>* %419 to <4 x i32>*
  store <4 x i32> %418, <4 x i32>* %420, align 16
  %421 = add nuw nsw i64 %392, 4
  %422 = add i64 %393, -4
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %435, label %391

424:                                              ; preds = %370, %360
  %425 = phi i64 [ 0, %360 ], [ %388, %370 ]
  %426 = icmp eq i64 %366, 0
  br i1 %426, label %450, label %427

427:                                              ; preds = %424
  %428 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %425
  %429 = bitcast <2 x i64>* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 16
  %431 = add <4 x i32> %430, %364
  %432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %431, i32 %348) #7
  %433 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %425
  %434 = bitcast <2 x i64>* %433 to <4 x i32>*
  store <4 x i32> %432, <4 x i32>* %434, align 16
  br label %450

435:                                              ; preds = %391, %352
  %436 = phi i64 [ 0, %352 ], [ %421, %391 ]
  %437 = icmp eq i64 %355, 0
  br i1 %437, label %450, label %438

438:                                              ; preds = %435, %438
  %439 = phi i64 [ %447, %438 ], [ %436, %435 ]
  %440 = phi i64 [ %448, %438 ], [ %355, %435 ]
  %441 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %439
  %442 = bitcast <2 x i64>* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 16
  %444 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %443, i32 %347) #7
  %445 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %439
  %446 = bitcast <2 x i64>* %445 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %446, align 16
  %447 = add nuw nsw i64 %439, 1
  %448 = add i64 %440, -1
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %450, label %438, !llvm.loop !20

450:                                              ; preds = %435, %438, %427, %424, %359, %351
  br label %451

451:                                              ; preds = %450, %454
  %452 = phi i64 [ %455, %454 ], [ 0, %450 ]
  %453 = shl nsw i64 %452, 5
  br label %457

454:                                              ; preds = %457
  %455 = add nuw nsw i64 %452, 1
  %456 = icmp eq i64 %455, 8
  br i1 %456, label %504, label %451

457:                                              ; preds = %457, %451
  %458 = phi i64 [ 0, %451 ], [ %496, %457 ]
  %459 = shl nsw i64 %458, 5
  %460 = add nuw nsw i64 %459, %452
  %461 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %460
  %462 = bitcast <2 x i64>* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 16
  %464 = add nuw nsw i64 %460, 8
  %465 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %464
  %466 = bitcast <2 x i64>* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 16
  %468 = shufflevector <4 x i32> %463, <4 x i32> %467, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %469 = bitcast <4 x i32> %468 to <2 x i64>
  %470 = shufflevector <4 x i32> %463, <4 x i32> %467, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = add nuw nsw i64 %460, 16
  %473 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %472
  %474 = bitcast <2 x i64>* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 16
  %476 = add nuw nsw i64 %460, 24
  %477 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %476
  %478 = bitcast <2 x i64>* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 16
  %480 = shufflevector <4 x i32> %475, <4 x i32> %479, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %481 = bitcast <4 x i32> %480 to <2 x i64>
  %482 = shufflevector <4 x i32> %475, <4 x i32> %479, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %483 = bitcast <4 x i32> %482 to <2 x i64>
  %484 = shufflevector <2 x i64> %469, <2 x i64> %481, <2 x i32> <i32 0, i32 2>
  %485 = add nuw nsw i64 %458, %453
  %486 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %485
  store <2 x i64> %484, <2 x i64>* %486, align 16
  %487 = shufflevector <2 x i64> %469, <2 x i64> %481, <2 x i32> <i32 1, i32 3>
  %488 = add nuw nsw i64 %485, 8
  %489 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %488
  store <2 x i64> %487, <2 x i64>* %489, align 16
  %490 = shufflevector <2 x i64> %471, <2 x i64> %483, <2 x i32> <i32 0, i32 2>
  %491 = add nuw nsw i64 %485, 16
  %492 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %491
  store <2 x i64> %490, <2 x i64>* %492, align 16
  %493 = shufflevector <2 x i64> %471, <2 x i64> %483, <2 x i32> <i32 1, i32 3>
  %494 = add nuw nsw i64 %485, 24
  %495 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %494
  store <2 x i64> %493, <2 x i64>* %495, align 16
  %496 = add nuw nsw i64 %458, 1
  %497 = icmp eq i64 %496, 8
  br i1 %497, label %454, label %457

498:                                              ; preds = %498, %340
  %499 = phi i64 [ 0, %340 ], [ %502, %498 ]
  %500 = getelementptr inbounds <2 x i64>, <2 x i64>* %173, i64 %499
  %501 = getelementptr inbounds <2 x i64>, <2 x i64>* %175, i64 %499
  call void @av1_fdct64_sse4_1(<2 x i64>* %500, <2 x i64>* %501, i8 signext %20, i32 %176, i32 %336) #7
  %502 = add nuw nsw i64 %499, 1
  %503 = icmp slt i64 %502, %341
  br i1 %503, label %498, label %342

504:                                              ; preds = %454
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 16384, i8* nonnull %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_lowbd_fwd_txfm_sse4_1(i16*, i32*, i32, %struct.txfm_param*) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %3, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %3, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  %10 = icmp eq i8 %6, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @av1_lowbd_fwd_txfm_c(i16* %0, i32* %1, i32 %2, %struct.txfm_param* %3) #7
  br label %21

13:                                               ; preds = %4
  %14 = zext i8 %6 to i64
  %15 = getelementptr inbounds [19 x void (i16*, i32*, i32, i8, i32)*], [19 x void (i16*, i32*, i32, i8, i32)*]* @fwd_txfm2d_func_ls, i64 0, i64 %14
  %16 = load void (i16*, i32*, i32, i8, i32)*, void (i16*, i32*, i32, i8, i32)** %15, align 8
  %17 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %3, i64 0, i32 0
  %18 = load i8, i8* %17, align 4
  %19 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %3, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  tail call void %16(i16* %0, i32* %1, i32 %2, i8 zeroext %18, i32 %20) #7
  br label %21

21:                                               ; preds = %13, %12
  ret void
}

declare void @av1_lowbd_fwd_txfm_c(i16*, i32*, i32, %struct.txfm_param*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @fdct32_sse4_1(<2 x i64>*, <2 x i64>*, i8 signext, i8* nocapture readnone) unnamed_addr #3 {
  %5 = sext i8 %2 to i32
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %0, <2 x i64>* %1, i32 %5, i32 8) #7
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %7 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %6, <2 x i64>* %7, i32 %5, i32 8) #7
  %8 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %9 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %8, <2 x i64>* %9, i32 %5, i32 8) #7
  %10 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %10, <2 x i64>* %11, i32 %5, i32 8) #7
  %12 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 4
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %12, <2 x i64>* %13, i32 %5, i32 8) #7
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 5
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %14, <2 x i64>* %15, i32 %5, i32 8) #7
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 6
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %16, <2 x i64>* %17, i32 %5, i32 8) #7
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 7
  tail call void @av1_fdct32_sse4_1(<2 x i64>* %18, <2 x i64>* %19, i32 %5, i32 8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fdct64_new_sse4_1(<2 x i64>*, <2 x i64>*, i8 signext, i8* nocapture readnone) unnamed_addr #3 {
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %0, <2 x i64>* %1, i8 signext %2, i32 16, i32 16) #7
  %5 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %5, <2 x i64>* %6, i8 signext %2, i32 16, i32 16) #7
  %7 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %8 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %7, <2 x i64>* %8, i8 signext %2, i32 16, i32 16) #7
  %9 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %10 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %9, <2 x i64>* %10, i8 signext %2, i32 16, i32 16) #7
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %12 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 4
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %11, <2 x i64>* %12, i8 signext %2, i32 16, i32 16) #7
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 5
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %13, <2 x i64>* %14, i8 signext %2, i32 16, i32 16) #7
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 6
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %15, <2 x i64>* %16, i8 signext %2, i32 16, i32 16) #7
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 7
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %17, <2 x i64>* %18, i8 signext %2, i32 16, i32 16) #7
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 8
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %19, <2 x i64>* %20, i8 signext %2, i32 16, i32 16) #7
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 9
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %21, <2 x i64>* %22, i8 signext %2, i32 16, i32 16) #7
  %23 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 10
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %23, <2 x i64>* %24, i8 signext %2, i32 16, i32 16) #7
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %26 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 11
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %25, <2 x i64>* %26, i8 signext %2, i32 16, i32 16) #7
  %27 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %28 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 12
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %27, <2 x i64>* %28, i8 signext %2, i32 16, i32 16) #7
  %29 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %30 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 13
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %29, <2 x i64>* %30, i8 signext %2, i32 16, i32 16) #7
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %32 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 14
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %31, <2 x i64>* %32, i8 signext %2, i32 16, i32 16) #7
  %33 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %34 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 15
  tail call void @av1_fdct64_sse4_1(<2 x i64>* %33, <2 x i64>* %34, i8 signext %2, i32 16, i32 16) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @idtx32x32_sse4_1(<2 x i64>*, <2 x i64>*, i8 signext, i8* nocapture readnone) unnamed_addr #3 {
  %5 = sext i8 %2 to i32
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %0, <2 x i64>* %1, i32 %5, i32 1) #7
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 32
  %7 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 32
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %6, <2 x i64>* %7, i32 %5, i32 1) #7
  %8 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 64
  %9 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 64
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %8, <2 x i64>* %9, i32 %5, i32 1) #7
  %10 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 96
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 96
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %10, <2 x i64>* %11, i32 %5, i32 1) #7
  %12 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 128
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 128
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %12, <2 x i64>* %13, i32 %5, i32 1) #7
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 160
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 160
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %14, <2 x i64>* %15, i32 %5, i32 1) #7
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 192
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 192
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %16, <2 x i64>* %17, i32 %5, i32 1) #7
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 224
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 224
  tail call void @av1_idtx32_sse4_1(<2 x i64>* %18, <2 x i64>* %19, i32 %5, i32 1) #7
  ret void
}

declare void @av1_fdct32_sse4_1(<2 x i64>*, <2 x i64>*, i32, i32) local_unnamed_addr #2

declare void @av1_fdct64_sse4_1(<2 x i64>*, <2 x i64>*, i8 signext, i32, i32) local_unnamed_addr #2

declare void @av1_idtx32_sse4_1(<2 x i64>*, <2 x i64>*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32>, i32) #4

declare void @av1_lowbd_fwd_txfm2d_4x4_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_8x8_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_16x16_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_32x32_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal void @lowbd_fwd_txfm2d_64x64_sse4_1(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) #0 {
  %6 = alloca [64 x <2 x i64>], align 16
  %7 = alloca [512 x <2 x i64>], align 16
  %8 = alloca [64 x <2 x i64>], align 16
  %9 = alloca [64 x <2 x i64>], align 16
  %10 = bitcast [64 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1024, i1 false)
  %11 = bitcast [512 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 8192, i1 false)
  %12 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 4), align 16
  %13 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 4, i64 4), align 4
  %14 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 4, i64 4), align 4
  %15 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds i8, i8* %12, i64 1
  br label %24

18:                                               ; preds = %182
  %19 = bitcast [64 x <2 x i64>]* %8 to i8*
  %20 = bitcast [64 x <2 x i64>]* %9 to i8*
  %21 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 0
  %22 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 0
  %23 = getelementptr inbounds i8, i8* %12, i64 2
  br label %265

24:                                               ; preds = %182, %5
  %25 = phi i64 [ 0, %5 ], [ %183, %182 ]
  %26 = shl nsw i64 %25, 3
  %27 = getelementptr inbounds i16, i16* %0, i64 %26
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ 0, %24 ], [ %53, %28 ]
  %30 = mul nsw i64 %29, %16
  %31 = getelementptr inbounds i16, i16* %27, i64 %30
  %32 = bitcast i16* %31 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 16
  %34 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %29
  store <2 x i64> %33, <2 x i64>* %34, align 16
  %35 = or i64 %29, 1
  %36 = mul nsw i64 %35, %16
  %37 = getelementptr inbounds i16, i16* %27, i64 %36
  %38 = bitcast i16* %37 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 16
  %40 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %35
  store <2 x i64> %39, <2 x i64>* %40, align 16
  %41 = or i64 %29, 2
  %42 = mul nsw i64 %41, %16
  %43 = getelementptr inbounds i16, i16* %27, i64 %42
  %44 = bitcast i16* %43 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 16
  %46 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %41
  store <2 x i64> %45, <2 x i64>* %46, align 16
  %47 = or i64 %29, 3
  %48 = mul nsw i64 %47, %16
  %49 = getelementptr inbounds i16, i16* %27, i64 %48
  %50 = bitcast i16* %49 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 16
  %52 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %47
  store <2 x i64> %51, <2 x i64>* %52, align 16
  %53 = add nuw nsw i64 %29, 4
  %54 = icmp eq i64 %53, 64
  br i1 %54, label %55, label %28

55:                                               ; preds = %28
  %56 = load i8, i8* %12, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp slt i8 %56, 0
  br i1 %58, label %59, label %93

59:                                               ; preds = %55
  %60 = sub nsw i32 0, %57
  %61 = xor i32 %57, -1
  %62 = shl i32 1, %61
  %63 = trunc i32 %62 to i16
  %64 = insertelement <8 x i16> undef, i16 %63, i32 0
  %65 = shufflevector <8 x i16> %64, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %66

66:                                               ; preds = %66, %59
  %67 = phi i64 [ 0, %59 ], [ %91, %66 ]
  %68 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %67
  %69 = bitcast <2 x i64>* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 16
  %71 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %70, <8 x i16> %65) #7
  %72 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %71, i32 %60) #7
  store <8 x i16> %72, <8 x i16>* %69, align 16
  %73 = or i64 %67, 1
  %74 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %73
  %75 = bitcast <2 x i64>* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 16
  %77 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %76, <8 x i16> %65) #7
  %78 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %77, i32 %60) #7
  store <8 x i16> %78, <8 x i16>* %75, align 16
  %79 = or i64 %67, 2
  %80 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %79
  %81 = bitcast <2 x i64>* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 16
  %83 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %82, <8 x i16> %65) #7
  %84 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %83, i32 %60) #7
  store <8 x i16> %84, <8 x i16>* %81, align 16
  %85 = or i64 %67, 3
  %86 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %85
  %87 = bitcast <2 x i64>* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 16
  %89 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %88, <8 x i16> %65) #7
  %90 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %89, i32 %60) #7
  store <8 x i16> %90, <8 x i16>* %87, align 16
  %91 = add nuw nsw i64 %67, 4
  %92 = icmp eq i64 %91, 64
  br i1 %92, label %118, label %66

93:                                               ; preds = %55
  %94 = icmp eq i8 %56, 0
  br i1 %94, label %118, label %95

95:                                               ; preds = %93, %95
  %96 = phi i64 [ %116, %95 ], [ 0, %93 ]
  %97 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %96
  %98 = bitcast <2 x i64>* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 16
  %100 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %99, i32 %57) #7
  store <8 x i16> %100, <8 x i16>* %98, align 16
  %101 = or i64 %96, 1
  %102 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %101
  %103 = bitcast <2 x i64>* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 16
  %105 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %104, i32 %57) #7
  store <8 x i16> %105, <8 x i16>* %103, align 16
  %106 = or i64 %96, 2
  %107 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %106
  %108 = bitcast <2 x i64>* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 16
  %110 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %109, i32 %57) #7
  store <8 x i16> %110, <8 x i16>* %108, align 16
  %111 = or i64 %96, 3
  %112 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %111
  %113 = bitcast <2 x i64>* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 16
  %115 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %114, i32 %57) #7
  store <8 x i16> %115, <8 x i16>* %113, align 16
  %116 = add nuw nsw i64 %96, 4
  %117 = icmp eq i64 %116, 64
  br i1 %117, label %118, label %95

118:                                              ; preds = %95, %66, %93
  call void @av1_fdct8x64_new_sse2(<2 x i64>* nonnull %15, <2 x i64>* nonnull %15, i8 signext %13) #7
  %119 = load i8, i8* %17, align 1
  %120 = sext i8 %119 to i32
  %121 = icmp slt i8 %119, 0
  br i1 %121, label %122, label %156

122:                                              ; preds = %118
  %123 = sub nsw i32 0, %120
  %124 = xor i32 %120, -1
  %125 = shl i32 1, %124
  %126 = trunc i32 %125 to i16
  %127 = insertelement <8 x i16> undef, i16 %126, i32 0
  %128 = shufflevector <8 x i16> %127, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %129

129:                                              ; preds = %129, %122
  %130 = phi i64 [ 0, %122 ], [ %154, %129 ]
  %131 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %130
  %132 = bitcast <2 x i64>* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 16
  %134 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %133, <8 x i16> %128) #7
  %135 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %134, i32 %123) #7
  store <8 x i16> %135, <8 x i16>* %132, align 16
  %136 = or i64 %130, 1
  %137 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %136
  %138 = bitcast <2 x i64>* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 16
  %140 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %139, <8 x i16> %128) #7
  %141 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %140, i32 %123) #7
  store <8 x i16> %141, <8 x i16>* %138, align 16
  %142 = or i64 %130, 2
  %143 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %142
  %144 = bitcast <2 x i64>* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 16
  %146 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %145, <8 x i16> %128) #7
  %147 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %146, i32 %123) #7
  store <8 x i16> %147, <8 x i16>* %144, align 16
  %148 = or i64 %130, 3
  %149 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %148
  %150 = bitcast <2 x i64>* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 16
  %152 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %151, <8 x i16> %128) #7
  %153 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %152, i32 %123) #7
  store <8 x i16> %153, <8 x i16>* %150, align 16
  %154 = add nuw nsw i64 %130, 4
  %155 = icmp eq i64 %154, 64
  br i1 %155, label %158, label %129

156:                                              ; preds = %118
  %157 = icmp eq i8 %119, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %159, %129, %156
  br label %185

159:                                              ; preds = %156, %159
  %160 = phi i64 [ %180, %159 ], [ 0, %156 ]
  %161 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %160
  %162 = bitcast <2 x i64>* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 16
  %164 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %163, i32 %120) #7
  store <8 x i16> %164, <8 x i16>* %162, align 16
  %165 = or i64 %160, 1
  %166 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %165
  %167 = bitcast <2 x i64>* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 16
  %169 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %168, i32 %120) #7
  store <8 x i16> %169, <8 x i16>* %167, align 16
  %170 = or i64 %160, 2
  %171 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %170
  %172 = bitcast <2 x i64>* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 16
  %174 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %173, i32 %120) #7
  store <8 x i16> %174, <8 x i16>* %172, align 16
  %175 = or i64 %160, 3
  %176 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %175
  %177 = bitcast <2 x i64>* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %178, i32 %120) #7
  store <8 x i16> %179, <8 x i16>* %177, align 16
  %180 = add nuw nsw i64 %160, 4
  %181 = icmp eq i64 %180, 64
  br i1 %181, label %158, label %159

182:                                              ; preds = %185
  %183 = add nuw nsw i64 %25, 1
  %184 = icmp eq i64 %183, 8
  br i1 %184, label %18, label %24

185:                                              ; preds = %158, %185
  %186 = phi i64 [ %262, %185 ], [ 0, %158 ]
  %187 = shl nsw i64 %186, 3
  %188 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %187
  %189 = shl nsw i64 %186, 6
  %190 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %7, i64 0, i64 %189
  %191 = getelementptr inbounds <2 x i64>, <2 x i64>* %190, i64 %26
  %192 = bitcast <2 x i64>* %188 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 16
  %194 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 1
  %195 = bitcast <2 x i64>* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 16
  %197 = shufflevector <8 x i16> %193, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %198 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 2
  %199 = bitcast <2 x i64>* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 16
  %201 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 3
  %202 = bitcast <2 x i64>* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 16
  %204 = shufflevector <8 x i16> %200, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 4
  %206 = bitcast <2 x i64>* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 16
  %208 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 5
  %209 = bitcast <2 x i64>* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %212 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 6
  %213 = bitcast <2 x i64>* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 16
  %215 = getelementptr inbounds <2 x i64>, <2 x i64>* %188, i64 7
  %216 = bitcast <2 x i64>* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 16
  %218 = shufflevector <8 x i16> %214, <8 x i16> %217, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %219 = shufflevector <8 x i16> %193, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %220 = shufflevector <8 x i16> %200, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %221 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = shufflevector <8 x i16> %214, <8 x i16> %217, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %223 = bitcast <8 x i16> %197 to <4 x i32>
  %224 = bitcast <8 x i16> %204 to <4 x i32>
  %225 = shufflevector <4 x i32> %223, <4 x i32> %224, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = bitcast <8 x i16> %211 to <4 x i32>
  %228 = bitcast <8 x i16> %218 to <4 x i32>
  %229 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = bitcast <8 x i16> %219 to <4 x i32>
  %232 = bitcast <8 x i16> %220 to <4 x i32>
  %233 = shufflevector <4 x i32> %231, <4 x i32> %232, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %234 = bitcast <4 x i32> %233 to <2 x i64>
  %235 = bitcast <8 x i16> %221 to <4 x i32>
  %236 = bitcast <8 x i16> %222 to <4 x i32>
  %237 = shufflevector <4 x i32> %235, <4 x i32> %236, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %238 = bitcast <4 x i32> %237 to <2 x i64>
  %239 = shufflevector <4 x i32> %223, <4 x i32> %224, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = shufflevector <4 x i32> %231, <4 x i32> %232, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %244 = bitcast <4 x i32> %243 to <2 x i64>
  %245 = shufflevector <4 x i32> %235, <4 x i32> %236, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %246 = bitcast <4 x i32> %245 to <2 x i64>
  %247 = shufflevector <2 x i64> %226, <2 x i64> %230, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %247, <2 x i64>* %191, align 16
  %248 = shufflevector <2 x i64> %226, <2 x i64> %230, <2 x i32> <i32 1, i32 3>
  %249 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 1
  store <2 x i64> %248, <2 x i64>* %249, align 16
  %250 = shufflevector <2 x i64> %240, <2 x i64> %242, <2 x i32> <i32 0, i32 2>
  %251 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 2
  store <2 x i64> %250, <2 x i64>* %251, align 16
  %252 = shufflevector <2 x i64> %240, <2 x i64> %242, <2 x i32> <i32 1, i32 3>
  %253 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 3
  store <2 x i64> %252, <2 x i64>* %253, align 16
  %254 = shufflevector <2 x i64> %234, <2 x i64> %238, <2 x i32> <i32 0, i32 2>
  %255 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 4
  store <2 x i64> %254, <2 x i64>* %255, align 16
  %256 = shufflevector <2 x i64> %234, <2 x i64> %238, <2 x i32> <i32 1, i32 3>
  %257 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 5
  store <2 x i64> %256, <2 x i64>* %257, align 16
  %258 = shufflevector <2 x i64> %244, <2 x i64> %246, <2 x i32> <i32 0, i32 2>
  %259 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 6
  store <2 x i64> %258, <2 x i64>* %259, align 16
  %260 = shufflevector <2 x i64> %244, <2 x i64> %246, <2 x i32> <i32 1, i32 3>
  %261 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 7
  store <2 x i64> %260, <2 x i64>* %261, align 16
  %262 = add nuw nsw i64 %186, 1
  %263 = icmp eq i64 %262, 4
  br i1 %263, label %182, label %185

264:                                              ; preds = %409
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %10) #7
  ret void

265:                                              ; preds = %409, %18
  %266 = phi i64 [ 0, %18 ], [ %410, %409 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %19) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 1024, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %20) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 1024, i1 false)
  %267 = shl nsw i64 %266, 6
  %268 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %7, i64 0, i64 %267
  br label %392

269:                                              ; preds = %392
  call void @av1_fdct64_sse4_1(<2 x i64>* nonnull %21, <2 x i64>* nonnull %21, i8 signext %14, i32 1, i32 1) #7
  call void @av1_fdct64_sse4_1(<2 x i64>* nonnull %22, <2 x i64>* nonnull %22, i8 signext %14, i32 1, i32 1) #7
  %270 = load i8, i8* %23, align 1
  %271 = sext i8 %270 to i32
  %272 = sub nsw i32 0, %271
  %273 = icmp slt i8 %270, 0
  br i1 %273, label %274, label %306

274:                                              ; preds = %269
  %275 = xor i32 %271, -1
  %276 = shl i32 1, %275
  %277 = insertelement <4 x i32> undef, i32 %276, i32 0
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %279

279:                                              ; preds = %279, %274
  %280 = phi i64 [ 0, %274 ], [ %304, %279 ]
  %281 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %280
  %282 = bitcast <2 x i64>* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 16
  %284 = add <4 x i32> %283, %278
  %285 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %284, i32 %272) #7
  store <4 x i32> %285, <4 x i32>* %282, align 16
  %286 = or i64 %280, 1
  %287 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %286
  %288 = bitcast <2 x i64>* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 16
  %290 = add <4 x i32> %289, %278
  %291 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %290, i32 %272) #7
  store <4 x i32> %291, <4 x i32>* %288, align 16
  %292 = or i64 %280, 2
  %293 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %292
  %294 = bitcast <2 x i64>* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = add <4 x i32> %295, %278
  %297 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %296, i32 %272) #7
  store <4 x i32> %297, <4 x i32>* %294, align 16
  %298 = or i64 %280, 3
  %299 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %298
  %300 = bitcast <2 x i64>* %299 to <4 x i32>*
  %301 = load <4 x i32>, <4 x i32>* %300, align 16
  %302 = add <4 x i32> %301, %278
  %303 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %302, i32 %272) #7
  store <4 x i32> %303, <4 x i32>* %300, align 16
  %304 = add nuw nsw i64 %280, 4
  %305 = icmp eq i64 %304, 32
  br i1 %305, label %329, label %279

306:                                              ; preds = %269, %306
  %307 = phi i64 [ %327, %306 ], [ 0, %269 ]
  %308 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %307
  %309 = bitcast <2 x i64>* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 16
  %311 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %310, i32 %271) #7
  store <4 x i32> %311, <4 x i32>* %309, align 16
  %312 = or i64 %307, 1
  %313 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %312
  %314 = bitcast <2 x i64>* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 16
  %316 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %315, i32 %271) #7
  store <4 x i32> %316, <4 x i32>* %314, align 16
  %317 = or i64 %307, 2
  %318 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %317
  %319 = bitcast <2 x i64>* %318 to <4 x i32>*
  %320 = load <4 x i32>, <4 x i32>* %319, align 16
  %321 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %320, i32 %271) #7
  store <4 x i32> %321, <4 x i32>* %319, align 16
  %322 = or i64 %307, 3
  %323 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %322
  %324 = bitcast <2 x i64>* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 16
  %326 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %325, i32 %271) #7
  store <4 x i32> %326, <4 x i32>* %324, align 16
  %327 = add nuw nsw i64 %307, 4
  %328 = icmp eq i64 %327, 32
  br i1 %328, label %329, label %306

329:                                              ; preds = %306, %279
  %330 = load i8, i8* %23, align 1
  %331 = sext i8 %330 to i32
  %332 = sub nsw i32 0, %331
  %333 = icmp slt i8 %330, 0
  br i1 %333, label %334, label %366

334:                                              ; preds = %329
  %335 = xor i32 %331, -1
  %336 = shl i32 1, %335
  %337 = insertelement <4 x i32> undef, i32 %336, i32 0
  %338 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %339

339:                                              ; preds = %339, %334
  %340 = phi i64 [ 0, %334 ], [ %364, %339 ]
  %341 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %340
  %342 = bitcast <2 x i64>* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16
  %344 = add <4 x i32> %343, %338
  %345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %344, i32 %332) #7
  store <4 x i32> %345, <4 x i32>* %342, align 16
  %346 = or i64 %340, 1
  %347 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %346
  %348 = bitcast <2 x i64>* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 16
  %350 = add <4 x i32> %349, %338
  %351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %350, i32 %332) #7
  store <4 x i32> %351, <4 x i32>* %348, align 16
  %352 = or i64 %340, 2
  %353 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %352
  %354 = bitcast <2 x i64>* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 16
  %356 = add <4 x i32> %355, %338
  %357 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %356, i32 %332) #7
  store <4 x i32> %357, <4 x i32>* %354, align 16
  %358 = or i64 %340, 3
  %359 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %358
  %360 = bitcast <2 x i64>* %359 to <4 x i32>*
  %361 = load <4 x i32>, <4 x i32>* %360, align 16
  %362 = add <4 x i32> %361, %338
  %363 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %362, i32 %332) #7
  store <4 x i32> %363, <4 x i32>* %360, align 16
  %364 = add nuw nsw i64 %340, 4
  %365 = icmp eq i64 %364, 32
  br i1 %365, label %389, label %339

366:                                              ; preds = %329, %366
  %367 = phi i64 [ %387, %366 ], [ 0, %329 ]
  %368 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %367
  %369 = bitcast <2 x i64>* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 16
  %371 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %370, i32 %331) #7
  store <4 x i32> %371, <4 x i32>* %369, align 16
  %372 = or i64 %367, 1
  %373 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %372
  %374 = bitcast <2 x i64>* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 16
  %376 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %375, i32 %331) #7
  store <4 x i32> %376, <4 x i32>* %374, align 16
  %377 = or i64 %367, 2
  %378 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %377
  %379 = bitcast <2 x i64>* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 16
  %381 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %380, i32 %331) #7
  store <4 x i32> %381, <4 x i32>* %379, align 16
  %382 = or i64 %367, 3
  %383 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %382
  %384 = bitcast <2 x i64>* %383 to <4 x i32>*
  %385 = load <4 x i32>, <4 x i32>* %384, align 16
  %386 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %385, i32 %331) #7
  store <4 x i32> %386, <4 x i32>* %384, align 16
  %387 = add nuw nsw i64 %367, 4
  %388 = icmp eq i64 %387, 32
  br i1 %388, label %389, label %366

389:                                              ; preds = %366, %339
  %390 = shl nsw i64 %266, 8
  %391 = getelementptr inbounds i32, i32* %1, i64 %390
  br label %412

392:                                              ; preds = %392, %265
  %393 = phi i64 [ 0, %265 ], [ %407, %392 ]
  %394 = getelementptr inbounds <2 x i64>, <2 x i64>* %268, i64 %393
  %395 = load <2 x i64>, <2 x i64>* %394, align 16
  %396 = bitcast <2 x i64> %395 to <8 x i16>
  %397 = shufflevector <8 x i16> %396, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %398 = sext <4 x i16> %397 to <4 x i32>
  %399 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %393
  %400 = bitcast <2 x i64>* %399 to <4 x i32>*
  store <4 x i32> %398, <4 x i32>* %400, align 16
  %401 = shufflevector <2 x i64> %395, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %402 = bitcast <2 x i64> %401 to <8 x i16>
  %403 = shufflevector <8 x i16> %402, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %404 = sext <4 x i16> %403 to <4 x i32>
  %405 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %393
  %406 = bitcast <2 x i64>* %405 to <4 x i32>*
  store <4 x i32> %404, <4 x i32>* %406, align 16
  %407 = add nuw nsw i64 %393, 1
  %408 = icmp eq i64 %407, 64
  br i1 %408, label %269, label %392

409:                                              ; preds = %412
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %20) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %19) #7
  %410 = add nuw nsw i64 %266, 1
  %411 = icmp eq i64 %410, 4
  br i1 %411, label %264, label %265

412:                                              ; preds = %412, %389
  %413 = phi i64 [ 0, %389 ], [ %471, %412 ]
  %414 = shl nsw i64 %413, 2
  %415 = getelementptr inbounds i32, i32* %391, i64 %414
  %416 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %414
  %417 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %414
  %418 = bitcast <2 x i64>* %416 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 16
  %420 = getelementptr inbounds <2 x i64>, <2 x i64>* %416, i64 2
  %421 = bitcast <2 x i64>* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 16
  %423 = shufflevector <4 x i32> %419, <4 x i32> %422, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %424 = shufflevector <4 x i32> %419, <4 x i32> %422, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %425 = getelementptr inbounds <2 x i64>, <2 x i64>* %416, i64 1
  %426 = bitcast <2 x i64>* %425 to <4 x i32>*
  %427 = load <4 x i32>, <4 x i32>* %426, align 16
  %428 = getelementptr inbounds <2 x i64>, <2 x i64>* %416, i64 3
  %429 = bitcast <2 x i64>* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 16
  %431 = shufflevector <4 x i32> %427, <4 x i32> %430, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %432 = shufflevector <4 x i32> %427, <4 x i32> %430, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %433 = shufflevector <4 x i32> %423, <4 x i32> %431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %434 = bitcast i32* %415 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %434, align 16
  %435 = shufflevector <4 x i32> %423, <4 x i32> %431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %436 = getelementptr inbounds i32, i32* %415, i64 32
  %437 = bitcast i32* %436 to <4 x i32>*
  store <4 x i32> %435, <4 x i32>* %437, align 16
  %438 = shufflevector <4 x i32> %424, <4 x i32> %432, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %439 = getelementptr inbounds i32, i32* %415, i64 64
  %440 = bitcast i32* %439 to <4 x i32>*
  store <4 x i32> %438, <4 x i32>* %440, align 16
  %441 = shufflevector <4 x i32> %424, <4 x i32> %432, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %442 = getelementptr inbounds i32, i32* %415, i64 96
  %443 = bitcast i32* %442 to <4 x i32>*
  store <4 x i32> %441, <4 x i32>* %443, align 16
  %444 = bitcast <2 x i64>* %417 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 16
  %446 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 2
  %447 = bitcast <2 x i64>* %446 to <4 x i32>*
  %448 = load <4 x i32>, <4 x i32>* %447, align 16
  %449 = shufflevector <4 x i32> %445, <4 x i32> %448, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %450 = shufflevector <4 x i32> %445, <4 x i32> %448, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %451 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 1
  %452 = bitcast <2 x i64>* %451 to <4 x i32>*
  %453 = load <4 x i32>, <4 x i32>* %452, align 16
  %454 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 3
  %455 = bitcast <2 x i64>* %454 to <4 x i32>*
  %456 = load <4 x i32>, <4 x i32>* %455, align 16
  %457 = shufflevector <4 x i32> %453, <4 x i32> %456, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %458 = shufflevector <4 x i32> %453, <4 x i32> %456, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %459 = shufflevector <4 x i32> %449, <4 x i32> %457, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %460 = getelementptr inbounds i32, i32* %415, i64 128
  %461 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %459, <4 x i32>* %461, align 16
  %462 = shufflevector <4 x i32> %449, <4 x i32> %457, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %463 = getelementptr inbounds i32, i32* %415, i64 160
  %464 = bitcast i32* %463 to <4 x i32>*
  store <4 x i32> %462, <4 x i32>* %464, align 16
  %465 = shufflevector <4 x i32> %450, <4 x i32> %458, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %466 = getelementptr inbounds i32, i32* %415, i64 192
  %467 = bitcast i32* %466 to <4 x i32>*
  store <4 x i32> %465, <4 x i32>* %467, align 16
  %468 = shufflevector <4 x i32> %450, <4 x i32> %458, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %469 = getelementptr inbounds i32, i32* %415, i64 224
  %470 = bitcast i32* %469 to <4 x i32>*
  store <4 x i32> %468, <4 x i32>* %470, align 16
  %471 = add nuw nsw i64 %413, 1
  %472 = icmp eq i64 %471, 8
  br i1 %472, label %409, label %412
}

declare void @av1_lowbd_fwd_txfm2d_4x8_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_8x4_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_8x16_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_16x8_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_16x32_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_32x16_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal void @lowbd_fwd_txfm2d_32x64_sse4_1(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) #0 {
  %6 = alloca [64 x <2 x i64>], align 16
  %7 = alloca [256 x <2 x i64>], align 16
  %8 = alloca [32 x <2 x i64>], align 16
  %9 = alloca [32 x <2 x i64>], align 16
  %10 = bitcast [64 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1024, i1 false)
  %11 = bitcast [256 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 11), align 8
  %13 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 3, i64 4), align 1
  %14 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 3, i64 4), align 1
  %15 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds i8, i8* %12, i64 1
  br label %25

18:                                               ; preds = %183
  %19 = sext i8 %14 to i32
  %20 = bitcast [32 x <2 x i64>]* %8 to i8*
  %21 = bitcast [32 x <2 x i64>]* %9 to i8*
  %22 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 0
  %23 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 0
  %24 = getelementptr inbounds i8, i8* %12, i64 2
  br label %266

25:                                               ; preds = %183, %5
  %26 = phi i64 [ 0, %5 ], [ %184, %183 ]
  %27 = shl nsw i64 %26, 3
  %28 = getelementptr inbounds i16, i16* %0, i64 %27
  br label %29

29:                                               ; preds = %29, %25
  %30 = phi i64 [ 0, %25 ], [ %54, %29 ]
  %31 = mul nsw i64 %30, %16
  %32 = getelementptr inbounds i16, i16* %28, i64 %31
  %33 = bitcast i16* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 16
  %35 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %30
  store <2 x i64> %34, <2 x i64>* %35, align 16
  %36 = or i64 %30, 1
  %37 = mul nsw i64 %36, %16
  %38 = getelementptr inbounds i16, i16* %28, i64 %37
  %39 = bitcast i16* %38 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  %41 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %36
  store <2 x i64> %40, <2 x i64>* %41, align 16
  %42 = or i64 %30, 2
  %43 = mul nsw i64 %42, %16
  %44 = getelementptr inbounds i16, i16* %28, i64 %43
  %45 = bitcast i16* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 16
  %47 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %42
  store <2 x i64> %46, <2 x i64>* %47, align 16
  %48 = or i64 %30, 3
  %49 = mul nsw i64 %48, %16
  %50 = getelementptr inbounds i16, i16* %28, i64 %49
  %51 = bitcast i16* %50 to <2 x i64>*
  %52 = load <2 x i64>, <2 x i64>* %51, align 16
  %53 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %48
  store <2 x i64> %52, <2 x i64>* %53, align 16
  %54 = add nuw nsw i64 %30, 4
  %55 = icmp eq i64 %54, 64
  br i1 %55, label %56, label %29

56:                                               ; preds = %29
  %57 = load i8, i8* %12, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp slt i8 %57, 0
  br i1 %59, label %60, label %94

60:                                               ; preds = %56
  %61 = sub nsw i32 0, %58
  %62 = xor i32 %58, -1
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i16
  %65 = insertelement <8 x i16> undef, i16 %64, i32 0
  %66 = shufflevector <8 x i16> %65, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %67

67:                                               ; preds = %67, %60
  %68 = phi i64 [ 0, %60 ], [ %92, %67 ]
  %69 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %68
  %70 = bitcast <2 x i64>* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 16
  %72 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %71, <8 x i16> %66) #7
  %73 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %72, i32 %61) #7
  store <8 x i16> %73, <8 x i16>* %70, align 16
  %74 = or i64 %68, 1
  %75 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %74
  %76 = bitcast <2 x i64>* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 16
  %78 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %77, <8 x i16> %66) #7
  %79 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %78, i32 %61) #7
  store <8 x i16> %79, <8 x i16>* %76, align 16
  %80 = or i64 %68, 2
  %81 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %80
  %82 = bitcast <2 x i64>* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 16
  %84 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %83, <8 x i16> %66) #7
  %85 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %84, i32 %61) #7
  store <8 x i16> %85, <8 x i16>* %82, align 16
  %86 = or i64 %68, 3
  %87 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %86
  %88 = bitcast <2 x i64>* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 16
  %90 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %89, <8 x i16> %66) #7
  %91 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %90, i32 %61) #7
  store <8 x i16> %91, <8 x i16>* %88, align 16
  %92 = add nuw nsw i64 %68, 4
  %93 = icmp eq i64 %92, 64
  br i1 %93, label %119, label %67

94:                                               ; preds = %56
  %95 = icmp eq i8 %57, 0
  br i1 %95, label %119, label %96

96:                                               ; preds = %94, %96
  %97 = phi i64 [ %117, %96 ], [ 0, %94 ]
  %98 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %97
  %99 = bitcast <2 x i64>* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 16
  %101 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %100, i32 %58) #7
  store <8 x i16> %101, <8 x i16>* %99, align 16
  %102 = or i64 %97, 1
  %103 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %102
  %104 = bitcast <2 x i64>* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 16
  %106 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %105, i32 %58) #7
  store <8 x i16> %106, <8 x i16>* %104, align 16
  %107 = or i64 %97, 2
  %108 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %107
  %109 = bitcast <2 x i64>* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 16
  %111 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %110, i32 %58) #7
  store <8 x i16> %111, <8 x i16>* %109, align 16
  %112 = or i64 %97, 3
  %113 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %112
  %114 = bitcast <2 x i64>* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 16
  %116 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %115, i32 %58) #7
  store <8 x i16> %116, <8 x i16>* %114, align 16
  %117 = add nuw nsw i64 %97, 4
  %118 = icmp eq i64 %117, 64
  br i1 %118, label %119, label %96

119:                                              ; preds = %96, %67, %94
  call void @av1_fdct8x64_new_sse2(<2 x i64>* nonnull %15, <2 x i64>* nonnull %15, i8 signext %13) #7
  %120 = load i8, i8* %17, align 1
  %121 = sext i8 %120 to i32
  %122 = icmp slt i8 %120, 0
  br i1 %122, label %123, label %157

123:                                              ; preds = %119
  %124 = sub nsw i32 0, %121
  %125 = xor i32 %121, -1
  %126 = shl i32 1, %125
  %127 = trunc i32 %126 to i16
  %128 = insertelement <8 x i16> undef, i16 %127, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %130

130:                                              ; preds = %130, %123
  %131 = phi i64 [ 0, %123 ], [ %155, %130 ]
  %132 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %131
  %133 = bitcast <2 x i64>* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 16
  %135 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %134, <8 x i16> %129) #7
  %136 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %135, i32 %124) #7
  store <8 x i16> %136, <8 x i16>* %133, align 16
  %137 = or i64 %131, 1
  %138 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %137
  %139 = bitcast <2 x i64>* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 16
  %141 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %140, <8 x i16> %129) #7
  %142 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %141, i32 %124) #7
  store <8 x i16> %142, <8 x i16>* %139, align 16
  %143 = or i64 %131, 2
  %144 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %143
  %145 = bitcast <2 x i64>* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %146, <8 x i16> %129) #7
  %148 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %147, i32 %124) #7
  store <8 x i16> %148, <8 x i16>* %145, align 16
  %149 = or i64 %131, 3
  %150 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %149
  %151 = bitcast <2 x i64>* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 16
  %153 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %152, <8 x i16> %129) #7
  %154 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %153, i32 %124) #7
  store <8 x i16> %154, <8 x i16>* %151, align 16
  %155 = add nuw nsw i64 %131, 4
  %156 = icmp eq i64 %155, 64
  br i1 %156, label %159, label %130

157:                                              ; preds = %119
  %158 = icmp eq i8 %120, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %160, %130, %157
  br label %186

160:                                              ; preds = %157, %160
  %161 = phi i64 [ %181, %160 ], [ 0, %157 ]
  %162 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %161
  %163 = bitcast <2 x i64>* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 16
  %165 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %164, i32 %121) #7
  store <8 x i16> %165, <8 x i16>* %163, align 16
  %166 = or i64 %161, 1
  %167 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %166
  %168 = bitcast <2 x i64>* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 16
  %170 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %169, i32 %121) #7
  store <8 x i16> %170, <8 x i16>* %168, align 16
  %171 = or i64 %161, 2
  %172 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %171
  %173 = bitcast <2 x i64>* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %174, i32 %121) #7
  store <8 x i16> %175, <8 x i16>* %173, align 16
  %176 = or i64 %161, 3
  %177 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %176
  %178 = bitcast <2 x i64>* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 16
  %180 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %179, i32 %121) #7
  store <8 x i16> %180, <8 x i16>* %178, align 16
  %181 = add nuw nsw i64 %161, 4
  %182 = icmp eq i64 %181, 64
  br i1 %182, label %159, label %160

183:                                              ; preds = %186
  %184 = add nuw nsw i64 %26, 1
  %185 = icmp eq i64 %184, 4
  br i1 %185, label %18, label %25

186:                                              ; preds = %159, %186
  %187 = phi i64 [ %263, %186 ], [ 0, %159 ]
  %188 = shl nsw i64 %187, 3
  %189 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %188
  %190 = shl nsw i64 %187, 5
  %191 = getelementptr inbounds [256 x <2 x i64>], [256 x <2 x i64>]* %7, i64 0, i64 %190
  %192 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 %27
  %193 = bitcast <2 x i64>* %189 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 1
  %196 = bitcast <2 x i64>* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 16
  %198 = shufflevector <8 x i16> %194, <8 x i16> %197, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %199 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 2
  %200 = bitcast <2 x i64>* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 16
  %202 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 3
  %203 = bitcast <2 x i64>* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 16
  %205 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 4
  %207 = bitcast <2 x i64>* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 16
  %209 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 5
  %210 = bitcast <2 x i64>* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 16
  %212 = shufflevector <8 x i16> %208, <8 x i16> %211, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 6
  %214 = bitcast <2 x i64>* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 16
  %216 = getelementptr inbounds <2 x i64>, <2 x i64>* %189, i64 7
  %217 = bitcast <2 x i64>* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 16
  %219 = shufflevector <8 x i16> %215, <8 x i16> %218, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %220 = shufflevector <8 x i16> %194, <8 x i16> %197, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %221 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = shufflevector <8 x i16> %208, <8 x i16> %211, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %223 = shufflevector <8 x i16> %215, <8 x i16> %218, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %224 = bitcast <8 x i16> %198 to <4 x i32>
  %225 = bitcast <8 x i16> %205 to <4 x i32>
  %226 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %227 = bitcast <4 x i32> %226 to <2 x i64>
  %228 = bitcast <8 x i16> %212 to <4 x i32>
  %229 = bitcast <8 x i16> %219 to <4 x i32>
  %230 = shufflevector <4 x i32> %228, <4 x i32> %229, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %231 = bitcast <4 x i32> %230 to <2 x i64>
  %232 = bitcast <8 x i16> %220 to <4 x i32>
  %233 = bitcast <8 x i16> %221 to <4 x i32>
  %234 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = bitcast <8 x i16> %222 to <4 x i32>
  %237 = bitcast <8 x i16> %223 to <4 x i32>
  %238 = shufflevector <4 x i32> %236, <4 x i32> %237, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %239 = bitcast <4 x i32> %238 to <2 x i64>
  %240 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = shufflevector <4 x i32> %228, <4 x i32> %229, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %243 = bitcast <4 x i32> %242 to <2 x i64>
  %244 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = shufflevector <4 x i32> %236, <4 x i32> %237, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = shufflevector <2 x i64> %227, <2 x i64> %231, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %248, <2 x i64>* %192, align 16
  %249 = shufflevector <2 x i64> %227, <2 x i64> %231, <2 x i32> <i32 1, i32 3>
  %250 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 1
  store <2 x i64> %249, <2 x i64>* %250, align 16
  %251 = shufflevector <2 x i64> %241, <2 x i64> %243, <2 x i32> <i32 0, i32 2>
  %252 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 2
  store <2 x i64> %251, <2 x i64>* %252, align 16
  %253 = shufflevector <2 x i64> %241, <2 x i64> %243, <2 x i32> <i32 1, i32 3>
  %254 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 3
  store <2 x i64> %253, <2 x i64>* %254, align 16
  %255 = shufflevector <2 x i64> %235, <2 x i64> %239, <2 x i32> <i32 0, i32 2>
  %256 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 4
  store <2 x i64> %255, <2 x i64>* %256, align 16
  %257 = shufflevector <2 x i64> %235, <2 x i64> %239, <2 x i32> <i32 1, i32 3>
  %258 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 5
  store <2 x i64> %257, <2 x i64>* %258, align 16
  %259 = shufflevector <2 x i64> %245, <2 x i64> %247, <2 x i32> <i32 0, i32 2>
  %260 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 6
  store <2 x i64> %259, <2 x i64>* %260, align 16
  %261 = shufflevector <2 x i64> %245, <2 x i64> %247, <2 x i32> <i32 1, i32 3>
  %262 = getelementptr inbounds <2 x i64>, <2 x i64>* %192, i64 7
  store <2 x i64> %261, <2 x i64>* %262, align 16
  %263 = add nuw nsw i64 %187, 1
  %264 = icmp eq i64 %263, 4
  br i1 %264, label %183, label %186

265:                                              ; preds = %390
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %10) #7
  ret void

266:                                              ; preds = %390, %18
  %267 = phi i64 [ 0, %18 ], [ %391, %390 ]
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %20) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 512, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %21) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 512, i1 false)
  %268 = shl nsw i64 %267, 5
  %269 = getelementptr inbounds [256 x <2 x i64>], [256 x <2 x i64>]* %7, i64 0, i64 %268
  br label %373

270:                                              ; preds = %373
  call void @av1_fdct32_sse4_1(<2 x i64>* nonnull %22, <2 x i64>* nonnull %22, i32 %19, i32 1) #7
  call void @av1_fdct32_sse4_1(<2 x i64>* nonnull %23, <2 x i64>* nonnull %23, i32 %19, i32 1) #7
  %271 = load i8, i8* %24, align 1
  %272 = sext i8 %271 to i32
  %273 = sub nsw i32 0, %272
  %274 = icmp slt i8 %271, 0
  br i1 %274, label %275, label %301

275:                                              ; preds = %270
  %276 = xor i32 %272, -1
  %277 = shl i32 1, %276
  %278 = insertelement <4 x i32> undef, i32 %277, i32 0
  %279 = shufflevector <4 x i32> %278, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %280

280:                                              ; preds = %280, %275
  %281 = phi i64 [ 0, %275 ], [ %299, %280 ]
  %282 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %281
  %283 = bitcast <2 x i64>* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 16
  %285 = add <4 x i32> %284, %279
  %286 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %285, i32 %273) #7
  %287 = mul <4 x i32> %286, <i32 5793, i32 5793, i32 5793, i32 5793>
  %288 = add <4 x i32> %287, <i32 2048, i32 2048, i32 2048, i32 2048>
  %289 = ashr <4 x i32> %288, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %289, <4 x i32>* %283, align 16
  %290 = or i64 %281, 1
  %291 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %290
  %292 = bitcast <2 x i64>* %291 to <4 x i32>*
  %293 = load <4 x i32>, <4 x i32>* %292, align 16
  %294 = add <4 x i32> %293, %279
  %295 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %294, i32 %273) #7
  %296 = mul <4 x i32> %295, <i32 5793, i32 5793, i32 5793, i32 5793>
  %297 = add <4 x i32> %296, <i32 2048, i32 2048, i32 2048, i32 2048>
  %298 = ashr <4 x i32> %297, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %298, <4 x i32>* %292, align 16
  %299 = add nuw nsw i64 %281, 2
  %300 = icmp eq i64 %299, 32
  br i1 %300, label %320, label %280

301:                                              ; preds = %270, %301
  %302 = phi i64 [ %318, %301 ], [ 0, %270 ]
  %303 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %302
  %304 = bitcast <2 x i64>* %303 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16
  %306 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %305, i32 %272) #7
  %307 = mul <4 x i32> %306, <i32 5793, i32 5793, i32 5793, i32 5793>
  %308 = add <4 x i32> %307, <i32 2048, i32 2048, i32 2048, i32 2048>
  %309 = ashr <4 x i32> %308, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %309, <4 x i32>* %304, align 16
  %310 = or i64 %302, 1
  %311 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %310
  %312 = bitcast <2 x i64>* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16
  %314 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %313, i32 %272) #7
  %315 = mul <4 x i32> %314, <i32 5793, i32 5793, i32 5793, i32 5793>
  %316 = add <4 x i32> %315, <i32 2048, i32 2048, i32 2048, i32 2048>
  %317 = ashr <4 x i32> %316, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %317, <4 x i32>* %312, align 16
  %318 = add nuw nsw i64 %302, 2
  %319 = icmp eq i64 %318, 32
  br i1 %319, label %320, label %301

320:                                              ; preds = %301, %280
  %321 = load i8, i8* %24, align 1
  %322 = sext i8 %321 to i32
  %323 = sub nsw i32 0, %322
  %324 = icmp slt i8 %321, 0
  br i1 %324, label %325, label %351

325:                                              ; preds = %320
  %326 = xor i32 %322, -1
  %327 = shl i32 1, %326
  %328 = insertelement <4 x i32> undef, i32 %327, i32 0
  %329 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %330

330:                                              ; preds = %330, %325
  %331 = phi i64 [ 0, %325 ], [ %349, %330 ]
  %332 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %331
  %333 = bitcast <2 x i64>* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 16
  %335 = add <4 x i32> %334, %329
  %336 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %335, i32 %323) #7
  %337 = mul <4 x i32> %336, <i32 5793, i32 5793, i32 5793, i32 5793>
  %338 = add <4 x i32> %337, <i32 2048, i32 2048, i32 2048, i32 2048>
  %339 = ashr <4 x i32> %338, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %339, <4 x i32>* %333, align 16
  %340 = or i64 %331, 1
  %341 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %340
  %342 = bitcast <2 x i64>* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16
  %344 = add <4 x i32> %343, %329
  %345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %344, i32 %323) #7
  %346 = mul <4 x i32> %345, <i32 5793, i32 5793, i32 5793, i32 5793>
  %347 = add <4 x i32> %346, <i32 2048, i32 2048, i32 2048, i32 2048>
  %348 = ashr <4 x i32> %347, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %348, <4 x i32>* %342, align 16
  %349 = add nuw nsw i64 %331, 2
  %350 = icmp eq i64 %349, 32
  br i1 %350, label %370, label %330

351:                                              ; preds = %320, %351
  %352 = phi i64 [ %368, %351 ], [ 0, %320 ]
  %353 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %352
  %354 = bitcast <2 x i64>* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 16
  %356 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %355, i32 %322) #7
  %357 = mul <4 x i32> %356, <i32 5793, i32 5793, i32 5793, i32 5793>
  %358 = add <4 x i32> %357, <i32 2048, i32 2048, i32 2048, i32 2048>
  %359 = ashr <4 x i32> %358, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %359, <4 x i32>* %354, align 16
  %360 = or i64 %352, 1
  %361 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %360
  %362 = bitcast <2 x i64>* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %363, i32 %322) #7
  %365 = mul <4 x i32> %364, <i32 5793, i32 5793, i32 5793, i32 5793>
  %366 = add <4 x i32> %365, <i32 2048, i32 2048, i32 2048, i32 2048>
  %367 = ashr <4 x i32> %366, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %367, <4 x i32>* %362, align 16
  %368 = add nuw nsw i64 %352, 2
  %369 = icmp eq i64 %368, 32
  br i1 %369, label %370, label %351

370:                                              ; preds = %351, %330
  %371 = shl nsw i64 %267, 8
  %372 = getelementptr inbounds i32, i32* %1, i64 %371
  br label %393

373:                                              ; preds = %373, %266
  %374 = phi i64 [ 0, %266 ], [ %388, %373 ]
  %375 = getelementptr inbounds <2 x i64>, <2 x i64>* %269, i64 %374
  %376 = load <2 x i64>, <2 x i64>* %375, align 16
  %377 = bitcast <2 x i64> %376 to <8 x i16>
  %378 = shufflevector <8 x i16> %377, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %379 = sext <4 x i16> %378 to <4 x i32>
  %380 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %374
  %381 = bitcast <2 x i64>* %380 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %381, align 16
  %382 = shufflevector <2 x i64> %376, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %383 = bitcast <2 x i64> %382 to <8 x i16>
  %384 = shufflevector <8 x i16> %383, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %385 = sext <4 x i16> %384 to <4 x i32>
  %386 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %374
  %387 = bitcast <2 x i64>* %386 to <4 x i32>*
  store <4 x i32> %385, <4 x i32>* %387, align 16
  %388 = add nuw nsw i64 %374, 1
  %389 = icmp eq i64 %388, 32
  br i1 %389, label %270, label %373

390:                                              ; preds = %393
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %21) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %20) #7
  %391 = add nuw nsw i64 %267, 1
  %392 = icmp eq i64 %391, 4
  br i1 %392, label %265, label %266

393:                                              ; preds = %393, %370
  %394 = phi i64 [ 0, %370 ], [ %452, %393 ]
  %395 = shl nsw i64 %394, 2
  %396 = getelementptr inbounds i32, i32* %372, i64 %395
  %397 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %395
  %398 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %395
  %399 = bitcast <2 x i64>* %397 to <4 x i32>*
  %400 = load <4 x i32>, <4 x i32>* %399, align 16
  %401 = getelementptr inbounds <2 x i64>, <2 x i64>* %397, i64 2
  %402 = bitcast <2 x i64>* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 16
  %404 = shufflevector <4 x i32> %400, <4 x i32> %403, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %405 = shufflevector <4 x i32> %400, <4 x i32> %403, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %406 = getelementptr inbounds <2 x i64>, <2 x i64>* %397, i64 1
  %407 = bitcast <2 x i64>* %406 to <4 x i32>*
  %408 = load <4 x i32>, <4 x i32>* %407, align 16
  %409 = getelementptr inbounds <2 x i64>, <2 x i64>* %397, i64 3
  %410 = bitcast <2 x i64>* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 16
  %412 = shufflevector <4 x i32> %408, <4 x i32> %411, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %413 = shufflevector <4 x i32> %408, <4 x i32> %411, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %414 = shufflevector <4 x i32> %404, <4 x i32> %412, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %415 = bitcast i32* %396 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %415, align 16
  %416 = shufflevector <4 x i32> %404, <4 x i32> %412, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %417 = getelementptr inbounds i32, i32* %396, i64 32
  %418 = bitcast i32* %417 to <4 x i32>*
  store <4 x i32> %416, <4 x i32>* %418, align 16
  %419 = shufflevector <4 x i32> %405, <4 x i32> %413, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %420 = getelementptr inbounds i32, i32* %396, i64 64
  %421 = bitcast i32* %420 to <4 x i32>*
  store <4 x i32> %419, <4 x i32>* %421, align 16
  %422 = shufflevector <4 x i32> %405, <4 x i32> %413, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %423 = getelementptr inbounds i32, i32* %396, i64 96
  %424 = bitcast i32* %423 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %424, align 16
  %425 = bitcast <2 x i64>* %398 to <4 x i32>*
  %426 = load <4 x i32>, <4 x i32>* %425, align 16
  %427 = getelementptr inbounds <2 x i64>, <2 x i64>* %398, i64 2
  %428 = bitcast <2 x i64>* %427 to <4 x i32>*
  %429 = load <4 x i32>, <4 x i32>* %428, align 16
  %430 = shufflevector <4 x i32> %426, <4 x i32> %429, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %431 = shufflevector <4 x i32> %426, <4 x i32> %429, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %432 = getelementptr inbounds <2 x i64>, <2 x i64>* %398, i64 1
  %433 = bitcast <2 x i64>* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 16
  %435 = getelementptr inbounds <2 x i64>, <2 x i64>* %398, i64 3
  %436 = bitcast <2 x i64>* %435 to <4 x i32>*
  %437 = load <4 x i32>, <4 x i32>* %436, align 16
  %438 = shufflevector <4 x i32> %434, <4 x i32> %437, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %439 = shufflevector <4 x i32> %434, <4 x i32> %437, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %440 = shufflevector <4 x i32> %430, <4 x i32> %438, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %441 = getelementptr inbounds i32, i32* %396, i64 128
  %442 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> %440, <4 x i32>* %442, align 16
  %443 = shufflevector <4 x i32> %430, <4 x i32> %438, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %444 = getelementptr inbounds i32, i32* %396, i64 160
  %445 = bitcast i32* %444 to <4 x i32>*
  store <4 x i32> %443, <4 x i32>* %445, align 16
  %446 = shufflevector <4 x i32> %431, <4 x i32> %439, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %447 = getelementptr inbounds i32, i32* %396, i64 192
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %448, align 16
  %449 = shufflevector <4 x i32> %431, <4 x i32> %439, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %450 = getelementptr inbounds i32, i32* %396, i64 224
  %451 = bitcast i32* %450 to <4 x i32>*
  store <4 x i32> %449, <4 x i32>* %451, align 16
  %452 = add nuw nsw i64 %394, 1
  %453 = icmp eq i64 %452, 8
  br i1 %453, label %390, label %393
}

; Function Attrs: nounwind ssp uwtable
define internal void @lowbd_fwd_txfm2d_64x32_sse4_1(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) #0 {
  %6 = alloca [64 x <2 x i64>], align 16
  %7 = alloca [256 x <2 x i64>], align 16
  %8 = alloca [64 x <2 x i64>], align 16
  %9 = alloca [64 x <2 x i64>], align 16
  %10 = bitcast [64 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1024, i1 false)
  %11 = bitcast [256 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 12), align 16
  %13 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 4, i64 3), align 1
  %14 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 4, i64 3), align 1
  %15 = zext i8 %3 to i64
  %16 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i8)*], [16 x void (<2 x i64>*, <2 x i64>*, i8)*]* @col_txfm8x32_arr, i64 0, i64 %15
  %17 = load void (<2 x i64>*, <2 x i64>*, i8)*, void (<2 x i64>*, <2 x i64>*, i8)** %16, align 8
  %18 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %19 = sext i32 %2 to i64
  %20 = getelementptr inbounds i8, i8* %12, i64 1
  br label %27

21:                                               ; preds = %185
  %22 = bitcast [64 x <2 x i64>]* %8 to i8*
  %23 = bitcast [64 x <2 x i64>]* %9 to i8*
  %24 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 0
  %25 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 0
  %26 = getelementptr inbounds i8, i8* %12, i64 2
  br label %268

27:                                               ; preds = %185, %5
  %28 = phi i64 [ 0, %5 ], [ %186, %185 ]
  %29 = shl nsw i64 %28, 3
  %30 = getelementptr inbounds i16, i16* %0, i64 %29
  br label %31

31:                                               ; preds = %31, %27
  %32 = phi i64 [ 0, %27 ], [ %56, %31 ]
  %33 = mul nsw i64 %32, %19
  %34 = getelementptr inbounds i16, i16* %30, i64 %33
  %35 = bitcast i16* %34 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 16
  %37 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %32
  store <2 x i64> %36, <2 x i64>* %37, align 16
  %38 = or i64 %32, 1
  %39 = mul nsw i64 %38, %19
  %40 = getelementptr inbounds i16, i16* %30, i64 %39
  %41 = bitcast i16* %40 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 16
  %43 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %38
  store <2 x i64> %42, <2 x i64>* %43, align 16
  %44 = or i64 %32, 2
  %45 = mul nsw i64 %44, %19
  %46 = getelementptr inbounds i16, i16* %30, i64 %45
  %47 = bitcast i16* %46 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 16
  %49 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %44
  store <2 x i64> %48, <2 x i64>* %49, align 16
  %50 = or i64 %32, 3
  %51 = mul nsw i64 %50, %19
  %52 = getelementptr inbounds i16, i16* %30, i64 %51
  %53 = bitcast i16* %52 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 16
  %55 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %50
  store <2 x i64> %54, <2 x i64>* %55, align 16
  %56 = add nuw nsw i64 %32, 4
  %57 = icmp eq i64 %56, 32
  br i1 %57, label %58, label %31

58:                                               ; preds = %31
  %59 = load i8, i8* %12, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp slt i8 %59, 0
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sub nsw i32 0, %60
  %64 = xor i32 %60, -1
  %65 = shl i32 1, %64
  %66 = trunc i32 %65 to i16
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %69

69:                                               ; preds = %69, %62
  %70 = phi i64 [ 0, %62 ], [ %94, %69 ]
  %71 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %70
  %72 = bitcast <2 x i64>* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 16
  %74 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %73, <8 x i16> %68) #7
  %75 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %74, i32 %63) #7
  store <8 x i16> %75, <8 x i16>* %72, align 16
  %76 = or i64 %70, 1
  %77 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %76
  %78 = bitcast <2 x i64>* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 16
  %80 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %79, <8 x i16> %68) #7
  %81 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %80, i32 %63) #7
  store <8 x i16> %81, <8 x i16>* %78, align 16
  %82 = or i64 %70, 2
  %83 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %82
  %84 = bitcast <2 x i64>* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 16
  %86 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %85, <8 x i16> %68) #7
  %87 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %86, i32 %63) #7
  store <8 x i16> %87, <8 x i16>* %84, align 16
  %88 = or i64 %70, 3
  %89 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %88
  %90 = bitcast <2 x i64>* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 16
  %92 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %91, <8 x i16> %68) #7
  %93 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %92, i32 %63) #7
  store <8 x i16> %93, <8 x i16>* %90, align 16
  %94 = add nuw nsw i64 %70, 4
  %95 = icmp eq i64 %94, 32
  br i1 %95, label %121, label %69

96:                                               ; preds = %58
  %97 = icmp eq i8 %59, 0
  br i1 %97, label %121, label %98

98:                                               ; preds = %96, %98
  %99 = phi i64 [ %119, %98 ], [ 0, %96 ]
  %100 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %99
  %101 = bitcast <2 x i64>* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 16
  %103 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %102, i32 %60) #7
  store <8 x i16> %103, <8 x i16>* %101, align 16
  %104 = or i64 %99, 1
  %105 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %104
  %106 = bitcast <2 x i64>* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 16
  %108 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %107, i32 %60) #7
  store <8 x i16> %108, <8 x i16>* %106, align 16
  %109 = or i64 %99, 2
  %110 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %109
  %111 = bitcast <2 x i64>* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 16
  %113 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %112, i32 %60) #7
  store <8 x i16> %113, <8 x i16>* %111, align 16
  %114 = or i64 %99, 3
  %115 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %114
  %116 = bitcast <2 x i64>* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 16
  %118 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %117, i32 %60) #7
  store <8 x i16> %118, <8 x i16>* %116, align 16
  %119 = add nuw nsw i64 %99, 4
  %120 = icmp eq i64 %119, 32
  br i1 %120, label %121, label %98

121:                                              ; preds = %98, %69, %96
  call void %17(<2 x i64>* nonnull %18, <2 x i64>* nonnull %18, i8 signext %13) #7
  %122 = load i8, i8* %20, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp slt i8 %122, 0
  br i1 %124, label %125, label %159

125:                                              ; preds = %121
  %126 = sub nsw i32 0, %123
  %127 = xor i32 %123, -1
  %128 = shl i32 1, %127
  %129 = trunc i32 %128 to i16
  %130 = insertelement <8 x i16> undef, i16 %129, i32 0
  %131 = shufflevector <8 x i16> %130, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %132

132:                                              ; preds = %132, %125
  %133 = phi i64 [ 0, %125 ], [ %157, %132 ]
  %134 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %133
  %135 = bitcast <2 x i64>* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 16
  %137 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %136, <8 x i16> %131) #7
  %138 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %137, i32 %126) #7
  store <8 x i16> %138, <8 x i16>* %135, align 16
  %139 = or i64 %133, 1
  %140 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %139
  %141 = bitcast <2 x i64>* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %142, <8 x i16> %131) #7
  %144 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %143, i32 %126) #7
  store <8 x i16> %144, <8 x i16>* %141, align 16
  %145 = or i64 %133, 2
  %146 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %145
  %147 = bitcast <2 x i64>* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 16
  %149 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %148, <8 x i16> %131) #7
  %150 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %149, i32 %126) #7
  store <8 x i16> %150, <8 x i16>* %147, align 16
  %151 = or i64 %133, 3
  %152 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %151
  %153 = bitcast <2 x i64>* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 16
  %155 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %154, <8 x i16> %131) #7
  %156 = call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %155, i32 %126) #7
  store <8 x i16> %156, <8 x i16>* %153, align 16
  %157 = add nuw nsw i64 %133, 4
  %158 = icmp eq i64 %157, 32
  br i1 %158, label %161, label %132

159:                                              ; preds = %121
  %160 = icmp eq i8 %122, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %162, %132, %159
  br label %188

162:                                              ; preds = %159, %162
  %163 = phi i64 [ %183, %162 ], [ 0, %159 ]
  %164 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %163
  %165 = bitcast <2 x i64>* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %166, i32 %123) #7
  store <8 x i16> %167, <8 x i16>* %165, align 16
  %168 = or i64 %163, 1
  %169 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %168
  %170 = bitcast <2 x i64>* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 16
  %172 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %171, i32 %123) #7
  store <8 x i16> %172, <8 x i16>* %170, align 16
  %173 = or i64 %163, 2
  %174 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %173
  %175 = bitcast <2 x i64>* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 16
  %177 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %176, i32 %123) #7
  store <8 x i16> %177, <8 x i16>* %175, align 16
  %178 = or i64 %163, 3
  %179 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %178
  %180 = bitcast <2 x i64>* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 16
  %182 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %181, i32 %123) #7
  store <8 x i16> %182, <8 x i16>* %180, align 16
  %183 = add nuw nsw i64 %163, 4
  %184 = icmp eq i64 %183, 32
  br i1 %184, label %161, label %162

185:                                              ; preds = %188
  %186 = add nuw nsw i64 %28, 1
  %187 = icmp eq i64 %186, 8
  br i1 %187, label %21, label %27

188:                                              ; preds = %161, %188
  %189 = phi i64 [ %265, %188 ], [ 0, %161 ]
  %190 = shl nsw i64 %189, 3
  %191 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %190
  %192 = shl nsw i64 %189, 6
  %193 = getelementptr inbounds [256 x <2 x i64>], [256 x <2 x i64>]* %7, i64 0, i64 %192
  %194 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %29
  %195 = bitcast <2 x i64>* %191 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 16
  %197 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 1
  %198 = bitcast <2 x i64>* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 16
  %200 = shufflevector <8 x i16> %196, <8 x i16> %199, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %201 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 2
  %202 = bitcast <2 x i64>* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 16
  %204 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 3
  %205 = bitcast <2 x i64>* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 16
  %207 = shufflevector <8 x i16> %203, <8 x i16> %206, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %208 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 4
  %209 = bitcast <2 x i64>* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 5
  %212 = bitcast <2 x i64>* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 16
  %214 = shufflevector <8 x i16> %210, <8 x i16> %213, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %215 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 6
  %216 = bitcast <2 x i64>* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 16
  %218 = getelementptr inbounds <2 x i64>, <2 x i64>* %191, i64 7
  %219 = bitcast <2 x i64>* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 16
  %221 = shufflevector <8 x i16> %217, <8 x i16> %220, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %222 = shufflevector <8 x i16> %196, <8 x i16> %199, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %223 = shufflevector <8 x i16> %203, <8 x i16> %206, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %224 = shufflevector <8 x i16> %210, <8 x i16> %213, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %225 = shufflevector <8 x i16> %217, <8 x i16> %220, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %226 = bitcast <8 x i16> %200 to <4 x i32>
  %227 = bitcast <8 x i16> %207 to <4 x i32>
  %228 = shufflevector <4 x i32> %226, <4 x i32> %227, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %229 = bitcast <4 x i32> %228 to <2 x i64>
  %230 = bitcast <8 x i16> %214 to <4 x i32>
  %231 = bitcast <8 x i16> %221 to <4 x i32>
  %232 = shufflevector <4 x i32> %230, <4 x i32> %231, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = bitcast <8 x i16> %222 to <4 x i32>
  %235 = bitcast <8 x i16> %223 to <4 x i32>
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = bitcast <4 x i32> %236 to <2 x i64>
  %238 = bitcast <8 x i16> %224 to <4 x i32>
  %239 = bitcast <8 x i16> %225 to <4 x i32>
  %240 = shufflevector <4 x i32> %238, <4 x i32> %239, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = shufflevector <4 x i32> %226, <4 x i32> %227, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %243 = bitcast <4 x i32> %242 to <2 x i64>
  %244 = shufflevector <4 x i32> %230, <4 x i32> %231, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = shufflevector <4 x i32> %238, <4 x i32> %239, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shufflevector <2 x i64> %229, <2 x i64> %233, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %250, <2 x i64>* %194, align 16
  %251 = shufflevector <2 x i64> %229, <2 x i64> %233, <2 x i32> <i32 1, i32 3>
  %252 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 1
  store <2 x i64> %251, <2 x i64>* %252, align 16
  %253 = shufflevector <2 x i64> %243, <2 x i64> %245, <2 x i32> <i32 0, i32 2>
  %254 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 2
  store <2 x i64> %253, <2 x i64>* %254, align 16
  %255 = shufflevector <2 x i64> %243, <2 x i64> %245, <2 x i32> <i32 1, i32 3>
  %256 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 3
  store <2 x i64> %255, <2 x i64>* %256, align 16
  %257 = shufflevector <2 x i64> %237, <2 x i64> %241, <2 x i32> <i32 0, i32 2>
  %258 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 4
  store <2 x i64> %257, <2 x i64>* %258, align 16
  %259 = shufflevector <2 x i64> %237, <2 x i64> %241, <2 x i32> <i32 1, i32 3>
  %260 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 5
  store <2 x i64> %259, <2 x i64>* %260, align 16
  %261 = shufflevector <2 x i64> %247, <2 x i64> %249, <2 x i32> <i32 0, i32 2>
  %262 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 6
  store <2 x i64> %261, <2 x i64>* %262, align 16
  %263 = shufflevector <2 x i64> %247, <2 x i64> %249, <2 x i32> <i32 1, i32 3>
  %264 = getelementptr inbounds <2 x i64>, <2 x i64>* %194, i64 7
  store <2 x i64> %263, <2 x i64>* %264, align 16
  %265 = add nuw nsw i64 %189, 1
  %266 = icmp eq i64 %265, 4
  br i1 %266, label %185, label %188

267:                                              ; preds = %392
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %10) #7
  ret void

268:                                              ; preds = %392, %21
  %269 = phi i64 [ 0, %21 ], [ %393, %392 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %22) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 1024, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 1024, i1 false)
  %270 = shl nsw i64 %269, 6
  %271 = getelementptr inbounds [256 x <2 x i64>], [256 x <2 x i64>]* %7, i64 0, i64 %270
  br label %375

272:                                              ; preds = %375
  call void @av1_fdct64_sse4_1(<2 x i64>* nonnull %24, <2 x i64>* nonnull %24, i8 signext %14, i32 1, i32 1) #7
  call void @av1_fdct64_sse4_1(<2 x i64>* nonnull %25, <2 x i64>* nonnull %25, i8 signext %14, i32 1, i32 1) #7
  %273 = load i8, i8* %26, align 1
  %274 = sext i8 %273 to i32
  %275 = sub nsw i32 0, %274
  %276 = icmp slt i8 %273, 0
  br i1 %276, label %277, label %303

277:                                              ; preds = %272
  %278 = xor i32 %274, -1
  %279 = shl i32 1, %278
  %280 = insertelement <4 x i32> undef, i32 %279, i32 0
  %281 = shufflevector <4 x i32> %280, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %282

282:                                              ; preds = %282, %277
  %283 = phi i64 [ 0, %277 ], [ %301, %282 ]
  %284 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %283
  %285 = bitcast <2 x i64>* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 16
  %287 = add <4 x i32> %286, %281
  %288 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %287, i32 %275) #7
  %289 = mul <4 x i32> %288, <i32 5793, i32 5793, i32 5793, i32 5793>
  %290 = add <4 x i32> %289, <i32 2048, i32 2048, i32 2048, i32 2048>
  %291 = ashr <4 x i32> %290, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %291, <4 x i32>* %285, align 16
  %292 = or i64 %283, 1
  %293 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %292
  %294 = bitcast <2 x i64>* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = add <4 x i32> %295, %281
  %297 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %296, i32 %275) #7
  %298 = mul <4 x i32> %297, <i32 5793, i32 5793, i32 5793, i32 5793>
  %299 = add <4 x i32> %298, <i32 2048, i32 2048, i32 2048, i32 2048>
  %300 = ashr <4 x i32> %299, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %300, <4 x i32>* %294, align 16
  %301 = add nuw nsw i64 %283, 2
  %302 = icmp eq i64 %301, 32
  br i1 %302, label %322, label %282

303:                                              ; preds = %272, %303
  %304 = phi i64 [ %320, %303 ], [ 0, %272 ]
  %305 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %304
  %306 = bitcast <2 x i64>* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 16
  %308 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %307, i32 %274) #7
  %309 = mul <4 x i32> %308, <i32 5793, i32 5793, i32 5793, i32 5793>
  %310 = add <4 x i32> %309, <i32 2048, i32 2048, i32 2048, i32 2048>
  %311 = ashr <4 x i32> %310, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %311, <4 x i32>* %306, align 16
  %312 = or i64 %304, 1
  %313 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %312
  %314 = bitcast <2 x i64>* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 16
  %316 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %315, i32 %274) #7
  %317 = mul <4 x i32> %316, <i32 5793, i32 5793, i32 5793, i32 5793>
  %318 = add <4 x i32> %317, <i32 2048, i32 2048, i32 2048, i32 2048>
  %319 = ashr <4 x i32> %318, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %319, <4 x i32>* %314, align 16
  %320 = add nuw nsw i64 %304, 2
  %321 = icmp eq i64 %320, 32
  br i1 %321, label %322, label %303

322:                                              ; preds = %303, %282
  %323 = load i8, i8* %26, align 1
  %324 = sext i8 %323 to i32
  %325 = sub nsw i32 0, %324
  %326 = icmp slt i8 %323, 0
  br i1 %326, label %327, label %353

327:                                              ; preds = %322
  %328 = xor i32 %324, -1
  %329 = shl i32 1, %328
  %330 = insertelement <4 x i32> undef, i32 %329, i32 0
  %331 = shufflevector <4 x i32> %330, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %332

332:                                              ; preds = %332, %327
  %333 = phi i64 [ 0, %327 ], [ %351, %332 ]
  %334 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %333
  %335 = bitcast <2 x i64>* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 16
  %337 = add <4 x i32> %336, %331
  %338 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %337, i32 %325) #7
  %339 = mul <4 x i32> %338, <i32 5793, i32 5793, i32 5793, i32 5793>
  %340 = add <4 x i32> %339, <i32 2048, i32 2048, i32 2048, i32 2048>
  %341 = ashr <4 x i32> %340, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %341, <4 x i32>* %335, align 16
  %342 = or i64 %333, 1
  %343 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %342
  %344 = bitcast <2 x i64>* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16
  %346 = add <4 x i32> %345, %331
  %347 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %346, i32 %325) #7
  %348 = mul <4 x i32> %347, <i32 5793, i32 5793, i32 5793, i32 5793>
  %349 = add <4 x i32> %348, <i32 2048, i32 2048, i32 2048, i32 2048>
  %350 = ashr <4 x i32> %349, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %350, <4 x i32>* %344, align 16
  %351 = add nuw nsw i64 %333, 2
  %352 = icmp eq i64 %351, 32
  br i1 %352, label %372, label %332

353:                                              ; preds = %322, %353
  %354 = phi i64 [ %370, %353 ], [ 0, %322 ]
  %355 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %354
  %356 = bitcast <2 x i64>* %355 to <4 x i32>*
  %357 = load <4 x i32>, <4 x i32>* %356, align 16
  %358 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %357, i32 %324) #7
  %359 = mul <4 x i32> %358, <i32 5793, i32 5793, i32 5793, i32 5793>
  %360 = add <4 x i32> %359, <i32 2048, i32 2048, i32 2048, i32 2048>
  %361 = ashr <4 x i32> %360, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %361, <4 x i32>* %356, align 16
  %362 = or i64 %354, 1
  %363 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %362
  %364 = bitcast <2 x i64>* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 16
  %366 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %365, i32 %324) #7
  %367 = mul <4 x i32> %366, <i32 5793, i32 5793, i32 5793, i32 5793>
  %368 = add <4 x i32> %367, <i32 2048, i32 2048, i32 2048, i32 2048>
  %369 = ashr <4 x i32> %368, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %369, <4 x i32>* %364, align 16
  %370 = add nuw nsw i64 %354, 2
  %371 = icmp eq i64 %370, 32
  br i1 %371, label %372, label %353

372:                                              ; preds = %353, %332
  %373 = shl nsw i64 %269, 8
  %374 = getelementptr inbounds i32, i32* %1, i64 %373
  br label %395

375:                                              ; preds = %375, %268
  %376 = phi i64 [ 0, %268 ], [ %390, %375 ]
  %377 = getelementptr inbounds <2 x i64>, <2 x i64>* %271, i64 %376
  %378 = load <2 x i64>, <2 x i64>* %377, align 16
  %379 = bitcast <2 x i64> %378 to <8 x i16>
  %380 = shufflevector <8 x i16> %379, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %381 = sext <4 x i16> %380 to <4 x i32>
  %382 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %376
  %383 = bitcast <2 x i64>* %382 to <4 x i32>*
  store <4 x i32> %381, <4 x i32>* %383, align 16
  %384 = shufflevector <2 x i64> %378, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %385 = bitcast <2 x i64> %384 to <8 x i16>
  %386 = shufflevector <8 x i16> %385, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %387 = sext <4 x i16> %386 to <4 x i32>
  %388 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %376
  %389 = bitcast <2 x i64>* %388 to <4 x i32>*
  store <4 x i32> %387, <4 x i32>* %389, align 16
  %390 = add nuw nsw i64 %376, 1
  %391 = icmp eq i64 %390, 64
  br i1 %391, label %272, label %375

392:                                              ; preds = %395
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %22) #7
  %393 = add nuw nsw i64 %269, 1
  %394 = icmp eq i64 %393, 4
  br i1 %394, label %267, label %268

395:                                              ; preds = %395, %372
  %396 = phi i64 [ 0, %372 ], [ %454, %395 ]
  %397 = shl nsw i64 %396, 2
  %398 = getelementptr inbounds i32, i32* %374, i64 %397
  %399 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %8, i64 0, i64 %397
  %400 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %9, i64 0, i64 %397
  %401 = bitcast <2 x i64>* %399 to <4 x i32>*
  %402 = load <4 x i32>, <4 x i32>* %401, align 16
  %403 = getelementptr inbounds <2 x i64>, <2 x i64>* %399, i64 2
  %404 = bitcast <2 x i64>* %403 to <4 x i32>*
  %405 = load <4 x i32>, <4 x i32>* %404, align 16
  %406 = shufflevector <4 x i32> %402, <4 x i32> %405, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %407 = shufflevector <4 x i32> %402, <4 x i32> %405, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %408 = getelementptr inbounds <2 x i64>, <2 x i64>* %399, i64 1
  %409 = bitcast <2 x i64>* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 16
  %411 = getelementptr inbounds <2 x i64>, <2 x i64>* %399, i64 3
  %412 = bitcast <2 x i64>* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 16
  %414 = shufflevector <4 x i32> %410, <4 x i32> %413, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %415 = shufflevector <4 x i32> %410, <4 x i32> %413, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %416 = shufflevector <4 x i32> %406, <4 x i32> %414, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %417 = bitcast i32* %398 to <4 x i32>*
  store <4 x i32> %416, <4 x i32>* %417, align 16
  %418 = shufflevector <4 x i32> %406, <4 x i32> %414, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %419 = getelementptr inbounds i32, i32* %398, i64 32
  %420 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %418, <4 x i32>* %420, align 16
  %421 = shufflevector <4 x i32> %407, <4 x i32> %415, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %422 = getelementptr inbounds i32, i32* %398, i64 64
  %423 = bitcast i32* %422 to <4 x i32>*
  store <4 x i32> %421, <4 x i32>* %423, align 16
  %424 = shufflevector <4 x i32> %407, <4 x i32> %415, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %425 = getelementptr inbounds i32, i32* %398, i64 96
  %426 = bitcast i32* %425 to <4 x i32>*
  store <4 x i32> %424, <4 x i32>* %426, align 16
  %427 = bitcast <2 x i64>* %400 to <4 x i32>*
  %428 = load <4 x i32>, <4 x i32>* %427, align 16
  %429 = getelementptr inbounds <2 x i64>, <2 x i64>* %400, i64 2
  %430 = bitcast <2 x i64>* %429 to <4 x i32>*
  %431 = load <4 x i32>, <4 x i32>* %430, align 16
  %432 = shufflevector <4 x i32> %428, <4 x i32> %431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %433 = shufflevector <4 x i32> %428, <4 x i32> %431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %434 = getelementptr inbounds <2 x i64>, <2 x i64>* %400, i64 1
  %435 = bitcast <2 x i64>* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 16
  %437 = getelementptr inbounds <2 x i64>, <2 x i64>* %400, i64 3
  %438 = bitcast <2 x i64>* %437 to <4 x i32>*
  %439 = load <4 x i32>, <4 x i32>* %438, align 16
  %440 = shufflevector <4 x i32> %436, <4 x i32> %439, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %441 = shufflevector <4 x i32> %436, <4 x i32> %439, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %442 = shufflevector <4 x i32> %432, <4 x i32> %440, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %443 = getelementptr inbounds i32, i32* %398, i64 128
  %444 = bitcast i32* %443 to <4 x i32>*
  store <4 x i32> %442, <4 x i32>* %444, align 16
  %445 = shufflevector <4 x i32> %432, <4 x i32> %440, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %446 = getelementptr inbounds i32, i32* %398, i64 160
  %447 = bitcast i32* %446 to <4 x i32>*
  store <4 x i32> %445, <4 x i32>* %447, align 16
  %448 = shufflevector <4 x i32> %433, <4 x i32> %441, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %449 = getelementptr inbounds i32, i32* %398, i64 192
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %448, <4 x i32>* %450, align 16
  %451 = shufflevector <4 x i32> %433, <4 x i32> %441, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %452 = getelementptr inbounds i32, i32* %398, i64 224
  %453 = bitcast i32* %452 to <4 x i32>*
  store <4 x i32> %451, <4 x i32>* %453, align 16
  %454 = add nuw nsw i64 %396, 1
  %455 = icmp eq i64 %454, 8
  br i1 %455, label %392, label %395
}

declare void @av1_lowbd_fwd_txfm2d_4x16_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_16x4_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_8x32_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_32x8_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_16x64_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_lowbd_fwd_txfm2d_64x16_sse2(i16*, i32*, i32, i8 zeroext, i32) #2

declare void @av1_fdct8x64_new_sse2(<2 x i64>*, <2 x i64>*, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16>, i32) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #4

declare void @av1_fdct8x32_new_sse2(<2 x i64>*, <2 x i64>*, i8 signext) #2

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal void @fidentity8x32_new_sse2(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i8 signext) #6 {
  br label %5

4:                                                ; preds = %5
  ret void

5:                                                ; preds = %5, %3
  %6 = phi i64 [ 0, %3 ], [ %34, %5 ]
  %7 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %6
  %8 = bitcast <2 x i64>* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 16
  %10 = shl <8 x i16> %9, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %6
  %12 = bitcast <2 x i64>* %11 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %12, align 16
  %13 = or i64 %6, 1
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %13
  %15 = bitcast <2 x i64>* %14 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 16
  %17 = shl <8 x i16> %16, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %13
  %19 = bitcast <2 x i64>* %18 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %19, align 16
  %20 = or i64 %6, 2
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %20
  %22 = bitcast <2 x i64>* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 16
  %24 = shl <8 x i16> %23, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %20
  %26 = bitcast <2 x i64>* %25 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %26, align 16
  %27 = or i64 %6, 3
  %28 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %27
  %29 = bitcast <2 x i64>* %28 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = shl <8 x i16> %30, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %27
  %33 = bitcast <2 x i64>* %32 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %33, align 16
  %34 = add nuw nsw i64 %6, 4
  %35 = icmp eq i64 %34, 32
  br i1 %35, label %4, label %5
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { inlinehint nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{void (<2 x i64>*, <2 x i64>*, i8, i8*)* @fdct32_sse4_1, void (<2 x i64>*, <2 x i64>*, i8, i8*)* @fdct64_new_sse4_1, void (<2 x i64>*, <2 x i64>*, i8, i8*)* @idtx32x32_sse4_1}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
