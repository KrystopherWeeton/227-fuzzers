; ModuleID = '../../components/viz/service/display/software_output_device.cc'
source_filename = "../../components/viz/service/display/software_output_device.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::SoftwareOutputDevice" = type { i32 (...)**, %class.scoped_refptr, %"class.viz::SoftwareOutputDeviceClient"*, %"class.gfx::Size", %"class.gfx::Rect", %class.sk_sp, %"class.std::__1::unique_ptr" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.viz::SoftwareOutputDeviceClient" = type { i32 (...)** }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::VSyncProvider"* }
%"class.gfx::VSyncProvider" = type { i32 (...)** }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.2, i32, i32 }
%class.sk_sp.2 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.8, [384 x i64], %class.sk_sp.9, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.10", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.16" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.8 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.9 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.22 }
%class.scoped_refptr.22 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.23", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.23" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::OnceCallback.24" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZN3viz20SoftwareOutputDevice17DiscardBackbufferEv = comdat any

$_ZN3viz20SoftwareOutputDevice16EnsureBackbufferEv = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS5_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS4_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS5_EEEEEbPKNS0_13BindStateBaseENSB_21CancellationQueryModeE = comdat any

@_ZTVN3viz20SoftwareOutputDeviceE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDeviceD2Ev to i8*), i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDeviceD0Ev to i8*), i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*, %"class.gfx::Size"*, float)* @_ZN3viz20SoftwareOutputDevice6ResizeERKN3gfx4SizeEf to i8*), i8* bitcast (%class.SkCanvas* (%"class.viz::SoftwareOutputDevice"*, %"class.gfx::Rect"*)* @_ZN3viz20SoftwareOutputDevice10BeginPaintERKN3gfx4RectE to i8*), i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDevice8EndPaintEv to i8*), i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDevice17DiscardBackbufferEv to i8*), i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDevice16EnsureBackbufferEv to i8*), i8* bitcast (%"class.gfx::VSyncProvider"* (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDevice16GetVSyncProviderEv to i8*), i8* bitcast (void (%"class.viz::SoftwareOutputDevice"*, %"class.base::OnceCallback"*)* @_ZN3viz20SoftwareOutputDevice13OnSwapBuffersEN4base12OnceCallbackIFvRKN3gfx4SizeEEEE to i8*), i8* bitcast (i32 (%"class.viz::SoftwareOutputDevice"*)* @_ZNK3viz20SoftwareOutputDevice16MaxFramesPendingEv to i8*)] }, align 8
@.str = private unnamed_addr constant [14 x i8] c"OnSwapBuffers\00", align 1
@.str.1 = private unnamed_addr constant [63 x i8] c"../../components/viz/service/display/software_output_device.cc\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"../../base/bind_internal.h\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"!IsNull(functor_)\00", align 1

@_ZN3viz20SoftwareOutputDeviceC1Ev = hidden unnamed_addr alias void (%"class.viz::SoftwareOutputDevice"*), void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDeviceC2Ev
@_ZN3viz20SoftwareOutputDeviceC1E13scoped_refptrIN4base19SequencedTaskRunnerEE = hidden unnamed_addr alias void (%"class.viz::SoftwareOutputDevice"*, %"class.base::SequencedTaskRunner"*), void (%"class.viz::SoftwareOutputDevice"*, %"class.base::SequencedTaskRunner"*)* @_ZN3viz20SoftwareOutputDeviceC2E13scoped_refptrIN4base19SequencedTaskRunnerEE
@_ZN3viz20SoftwareOutputDeviceD1Ev = hidden unnamed_addr alias void (%"class.viz::SoftwareOutputDevice"*), void (%"class.viz::SoftwareOutputDevice"*)* @_ZN3viz20SoftwareOutputDeviceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDeviceC2Ev(%"class.viz::SoftwareOutputDevice"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base25SequencedTaskRunnerHandle3GetEv() #9
  %3 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %4 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %3, align 8
  %5 = icmp eq %"class.base::SequencedTaskRunner"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 1 monotonic
  br label %9

9:                                                ; preds = %1, %6
  %10 = ptrtoint %"class.base::SequencedTaskRunner"* %4 to i64
  %11 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz20SoftwareOutputDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 1
  %13 = bitcast %class.scoped_refptr* %12 to i64*
  store i64 %10, i64* %13, align 8
  %14 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 2
  %15 = bitcast %"class.viz::SoftwareOutputDeviceClient"** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 48, i1 false) #9
  ret void
}

declare dereferenceable(8) %class.scoped_refptr* @_ZN4base25SequencedTaskRunnerHandle3GetEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDeviceC2E13scoped_refptrIN4base19SequencedTaskRunnerEE(%"class.viz::SoftwareOutputDevice"* nocapture, %"class.base::SequencedTaskRunner"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.base::SequencedTaskRunner"* %1 to i64
  %4 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz20SoftwareOutputDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 1
  %6 = bitcast %class.scoped_refptr* %5 to i64*
  store i64 %3, i64* %6, align 8
  %7 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 2
  %8 = bitcast %"class.viz::SoftwareOutputDeviceClient"** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDeviceD2Ev(%"class.viz::SoftwareOutputDevice"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz20SoftwareOutputDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::VSyncProvider"*, %"class.gfx::VSyncProvider"** %3, align 8
  store %"class.gfx::VSyncProvider"* null, %"class.gfx::VSyncProvider"** %3, align 8
  %5 = icmp eq %"class.gfx::VSyncProvider"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.gfx::VSyncProvider"* %4 to void (%"class.gfx::VSyncProvider"*)***
  %8 = load void (%"class.gfx::VSyncProvider"*)**, void (%"class.gfx::VSyncProvider"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::VSyncProvider"*)*, void (%"class.gfx::VSyncProvider"*)** %8, i64 1
  %10 = load void (%"class.gfx::VSyncProvider"*)*, void (%"class.gfx::VSyncProvider"*)** %9, align 8
  tail call void %10(%"class.gfx::VSyncProvider"* nonnull %4) #9
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 5, i32 0
  %13 = load %class.SkSurface*, %class.SkSurface** %12, align 8
  %14 = icmp eq %class.SkSurface* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %class.SkSurface* %13 to %class.SkRefCntBase*
  %21 = bitcast %class.SkSurface* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  tail call void %24(%class.SkRefCntBase* nonnull %20) #9
  br label %25

25:                                               ; preds = %11, %15, %19
  %26 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 1, i32 0
  %27 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %26, align 8
  %28 = icmp eq %"class.base::SequencedTaskRunner"* %27, null
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %27, i64 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i32* %31, i32 1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %30, i64 -2
  %36 = bitcast %"class.base::RefCountedThreadSafe"* %35 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %36) #9
  br label %37

37:                                               ; preds = %25, %29, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDeviceD0Ev(%"class.viz::SoftwareOutputDevice"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz20SoftwareOutputDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::VSyncProvider"*, %"class.gfx::VSyncProvider"** %3, align 8
  store %"class.gfx::VSyncProvider"* null, %"class.gfx::VSyncProvider"** %3, align 8
  %5 = icmp eq %"class.gfx::VSyncProvider"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.gfx::VSyncProvider"* %4 to void (%"class.gfx::VSyncProvider"*)***
  %8 = load void (%"class.gfx::VSyncProvider"*)**, void (%"class.gfx::VSyncProvider"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::VSyncProvider"*)*, void (%"class.gfx::VSyncProvider"*)** %8, i64 1
  %10 = load void (%"class.gfx::VSyncProvider"*)*, void (%"class.gfx::VSyncProvider"*)** %9, align 8
  tail call void %10(%"class.gfx::VSyncProvider"* nonnull %4) #9
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 5, i32 0
  %13 = load %class.SkSurface*, %class.SkSurface** %12, align 8
  %14 = icmp eq %class.SkSurface* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %class.SkSurface* %13 to %class.SkRefCntBase*
  %21 = bitcast %class.SkSurface* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  tail call void %24(%class.SkRefCntBase* nonnull %20) #9
  br label %25

25:                                               ; preds = %19, %15, %11
  %26 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 1, i32 0
  %27 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %26, align 8
  %28 = icmp eq %"class.base::SequencedTaskRunner"* %27, null
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %27, i64 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i32* %31, i32 1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %30, i64 -2
  %36 = bitcast %"class.base::RefCountedThreadSafe"* %35 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %36) #9
  br label %37

37:                                               ; preds = %25, %29, %34
  %38 = bitcast %"class.viz::SoftwareOutputDevice"* %0 to i8*
  tail call void @_ZdlPv(i8* %38) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz20SoftwareOutputDevice12BindToClientEPNS_26SoftwareOutputDeviceClientE(%"class.viz::SoftwareOutputDevice"* nocapture, %"class.viz::SoftwareOutputDeviceClient"*) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 2
  store %"class.viz::SoftwareOutputDeviceClient"* %1, %"class.viz::SoftwareOutputDeviceClient"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDevice6ResizeERKN3gfx4SizeEf(%"class.viz::SoftwareOutputDevice"* nocapture, %"class.gfx::Size"* nocapture readonly dereferenceable(8), float) unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkImageInfo, align 16
  %5 = alloca %class.SkSurfaceProps, align 4
  %6 = alloca %class.sk_sp, align 8
  %7 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 3
  %8 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  br label %22

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 3, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %81, label %22

22:                                               ; preds = %13, %16
  %23 = phi i32 [ %15, %13 ], [ %20, %16 ]
  %24 = bitcast %struct.SkImageInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #9
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 0, i32 0
  %26 = zext i32 %23 to i64
  %27 = shl nuw i64 %26, 32
  %28 = zext i32 %11 to i64
  %29 = or i64 %27, %28
  %30 = bitcast %struct.SkImageInfo* %4 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967302>, <2 x i64>* %30, align 16, !alias.scope !2
  %31 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 1
  %32 = bitcast %struct.SkISize* %31 to i64*
  store i64 %29, i64* %32, align 16, !alias.scope !2
  %33 = bitcast %"class.gfx::Size"* %1 to i64*
  %34 = bitcast %"class.gfx::Size"* %7 to i64*
  %35 = load i64, i64* %33, align 4
  store i64 %35, i64* %34, align 8
  %36 = bitcast %class.SkSurfaceProps* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #9
  %37 = getelementptr inbounds %class.SkSurfaceProps, %class.SkSurfaceProps* %5, i64 0, i32 0
  store i32 -1431655766, i32* %37, align 4
  %38 = getelementptr inbounds %class.SkSurfaceProps, %class.SkSurfaceProps* %5, i64 0, i32 1
  store i32 -1431655766, i32* %38, align 4
  call void @_ZN4skia20LegacyDisplayGlobals17GetSkSurfacePropsEv(%class.SkSurfaceProps* nonnull sret %5) #9
  %39 = bitcast %class.sk_sp* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #9
  call void @_ZN9SkSurface10MakeRasterERK11SkImageInfomPK14SkSurfaceProps(%class.sk_sp* nonnull sret %6, %struct.SkImageInfo* nonnull dereferenceable(24) %4, i64 0, %class.SkSurfaceProps* nonnull %5) #9
  %40 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 5
  %41 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %42 = bitcast %class.sk_sp* %6 to i64*
  %43 = load i64, i64* %42, align 8
  store %class.SkSurface* null, %class.SkSurface** %41, align 8
  %44 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %40, i64 0, i32 0
  %45 = load %class.SkSurface*, %class.SkSurface** %44, align 8
  %46 = bitcast %class.sk_sp* %40 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq %class.SkSurface* %45, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %22
  %49 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %45, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 -1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = bitcast %class.SkSurface* %45 to %class.SkRefCntBase*
  %54 = bitcast %class.SkSurface* %45 to void (%class.SkRefCntBase*)***
  %55 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %54, align 8
  %56 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %55, i64 2
  %57 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %56, align 8
  call void %57(%class.SkRefCntBase* nonnull %53) #9
  br label %58

58:                                               ; preds = %22, %48, %52
  %59 = load %class.SkSurface*, %class.SkSurface** %41, align 8
  %60 = icmp eq %class.SkSurface* %59, null
  br i1 %60, label %71, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %59, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = atomicrmw add i32* %62, i32 -1 acq_rel
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %71

65:                                               ; preds = %61
  %66 = bitcast %class.SkSurface* %59 to %class.SkRefCntBase*
  %67 = bitcast %class.SkSurface* %59 to void (%class.SkRefCntBase*)***
  %68 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %67, align 8
  %69 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %68, i64 2
  %70 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %69, align 8
  call void %70(%class.SkRefCntBase* nonnull %66) #9
  br label %71

71:                                               ; preds = %58, %61, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #9
  %72 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 16
  %73 = icmp eq %class.SkColorSpace* %72, null
  br i1 %73, label %80, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %72, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw add i32* %75, i32 -1 acq_rel
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = bitcast %class.SkColorSpace* %72 to i8*
  call void @_ZdlPv(i8* %79) #10
  br label %80

80:                                               ; preds = %71, %74, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #9
  br label %81

81:                                               ; preds = %16, %80
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN4skia20LegacyDisplayGlobals17GetSkSurfacePropsEv(%class.SkSurfaceProps* sret) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkCanvas* @_ZN3viz20SoftwareOutputDevice10BeginPaintERKN3gfx4RectE(%"class.viz::SoftwareOutputDevice"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 4
  %4 = bitcast %"class.gfx::Rect"* %3 to i8*
  %5 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 4 %5, i64 16, i1 false)
  %6 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 5, i32 0
  %7 = load %class.SkSurface*, %class.SkSurface** %6, align 8
  %8 = icmp eq %class.SkSurface* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = tail call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* nonnull %7) #9
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi %class.SkCanvas* [ %10, %9 ], [ null, %2 ]
  ret %class.SkCanvas* %12
}

declare %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDevice8EndPaintEv(%"class.viz::SoftwareOutputDevice"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.gfx::VSyncProvider"* @_ZN3viz20SoftwareOutputDevice16GetVSyncProviderEv(%"class.viz::SoftwareOutputDevice"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %3 = load %"class.gfx::VSyncProvider"*, %"class.gfx::VSyncProvider"** %2, align 8
  ret %"class.gfx::VSyncProvider"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20SoftwareOutputDevice13OnSwapBuffersEN4base12OnceCallbackIFvRKN3gfx4SizeEEEE(%"class.viz::SoftwareOutputDevice"* nocapture readonly, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %"class.base::OnceCallback.24", align 8
  %6 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 1, i32 0
  %7 = bitcast %"class.base::SequencedTaskRunner"** %6 to %"class.base::TaskRunner"**
  %8 = load %"class.base::TaskRunner"*, %"class.base::TaskRunner"** %7, align 8
  %9 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 59) #9
  %10 = getelementptr inbounds %"class.viz::SoftwareOutputDevice", %"class.viz::SoftwareOutputDevice"* %0, i64 0, i32 3
  %11 = call i8* @_Znwm(i64 48) #10, !noalias !7
  %12 = bitcast i8* %11 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"* nonnull %12, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS5_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS4_EE7DestroyEPKNS0_13BindStateBaseE, i1 (%"class.base::internal::BindStateBase"*, i32)* nonnull @_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS5_EEEEEbPKNS0_13BindStateBaseENSB_21CancellationQueryModeE) #9, !noalias !7
  %13 = getelementptr inbounds i8, i8* %11, i64 32
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %16 = load i64, i64* %15, align 8, !noalias !7
  %17 = bitcast i8* %13 to i64*
  store i64 %16, i64* %17, align 8, !noalias !7
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8, !noalias !7
  %18 = getelementptr inbounds i8, i8* %11, i64 40
  %19 = bitcast %"class.gfx::Size"* %10 to i64*
  %20 = bitcast i8* %18 to i64*
  %21 = load i64, i64* %19, align 4, !noalias !7
  store i64 %21, i64* %20, align 4, !noalias !7
  %22 = icmp eq i64 %16, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9, !noalias !7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 896, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0)) #9, !noalias !7
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9, !noalias !7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9, !noalias !7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9, !noalias !7
  br label %26

26:                                               ; preds = %2, %23
  %27 = bitcast %"class.base::OnceCallback.24"* %5 to i8**
  store i8* %11, i8** %27, align 8, !alias.scope !7
  %28 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %8, %"class.base::Location"* nonnull dereferenceable(32) %4, %"class.base::OnceCallback.24"* nonnull %5) #9
  %29 = getelementptr inbounds %"class.base::OnceCallback.24", %"class.base::OnceCallback.24"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #9
  ret void
}

declare zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback.24"*) local_unnamed_addr #1

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK3viz20SoftwareOutputDevice16MaxFramesPendingEv(%"class.viz::SoftwareOutputDevice"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz20SoftwareOutputDevice17DiscardBackbufferEv(%"class.viz::SoftwareOutputDevice"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3viz20SoftwareOutputDevice16EnsureBackbufferEv(%"class.viz::SoftwareOutputDevice"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN9SkSurface10MakeRasterERK11SkImageInfomPK14SkSurfaceProps(%class.sk_sp* sret, %struct.SkImageInfo* dereferenceable(24), i64, %class.SkSurfaceProps*) local_unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS5_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %5 = bitcast void ()** %4 to %"class.gfx::Size"*
  %6 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = bitcast %"class.base::internal::BindStateBase"* %3 to %"class.base::internal::BindStateBase"**
  %8 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %9, i64* %10, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %12 = inttoptr i64 %9 to %"class.base::internal::BindStateBase"*
  %13 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %12, i64 0, i32 1
  %14 = bitcast void ()** %13 to void (%"class.base::internal::BindStateBase"*, %"class.gfx::Size"*)**
  %15 = load void (%"class.base::internal::BindStateBase"*, %"class.gfx::Size"*)*, void (%"class.base::internal::BindStateBase"*, %"class.gfx::Size"*)** %14, align 8
  tail call void %15(%"class.base::internal::BindStateBase"* %12, %"class.gfx::Size"* dereferenceable(8) %5) #9
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %11) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS4_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = bitcast %"class.base::internal::BindStateBase"* %4 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %5) #9
  %6 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #10
  br label %7

7:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJS5_EEEEEbPKNS0_13BindStateBaseENSB_21CancellationQueryModeE(%"class.base::internal::BindStateBase"*, i32) #0 comdat {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  switch i32 %1, label %10 [
    i32 0, label %4
    i32 1, label %7
  ]

4:                                                ; preds = %2
  %5 = bitcast %"class.base::internal::BindStateBase"* %3 to %"class.base::internal::CallbackBase"*
  %6 = tail call zeroext i1 @_ZNK4base8internal12CallbackBase11IsCancelledEv(%"class.base::internal::CallbackBase"* %5) #9
  br label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.base::internal::BindStateBase"* %3 to %"class.base::internal::CallbackBase"*
  %9 = tail call zeroext i1 @_ZNK4base8internal12CallbackBase10MaybeValidEv(%"class.base::internal::CallbackBase"* %8) #9
  br label %10

10:                                               ; preds = %2, %4, %7
  %11 = phi i1 [ %9, %7 ], [ %6, %4 ], [ false, %2 ]
  ret i1 %11
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)*) unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare zeroext i1 @_ZNK4base8internal12CallbackBase11IsCancelledEv(%"class.base::internal::CallbackBase"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK4base8internal12CallbackBase10MaybeValidEv(%"class.base::internal::CallbackBase"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = distinct !{!5, !6, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!6 = distinct !{!6, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZN4base8internal8BindImplINS_12OnceCallbackENS2_IFvRKN3gfx4SizeEEEEJRS4_EEEDcOT0_DpOT1_: argument 0"}
!9 = distinct !{!9, !"_ZN4base8internal8BindImplINS_12OnceCallbackENS2_IFvRKN3gfx4SizeEEEEJRS4_EEEDcOT0_DpOT1_"}
!10 = distinct !{!10, !11, !"_ZN4base8BindOnceINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJRS3_EEENS1_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!11 = distinct !{!11, !"_ZN4base8BindOnceINS_12OnceCallbackIFvRKN3gfx4SizeEEEEJRS3_EEENS1_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
