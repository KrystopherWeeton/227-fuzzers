; ModuleID = '../../third_party/blink/renderer/platform/geometry/float_point.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/float_point.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FloatPoint" = type { float, float }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::TextStream" = type { %"class.WTF::StringBuilder" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"struct.WTF::TextStream::FormatNumberRespectingIntegers" = type { double }

@.str = private unnamed_addr constant [8 x i8] c"%lg,%lg\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c")\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK5blink10FloatPoint17SlopeAngleRadiansEv(%"class.blink::FloatPoint"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 1
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = tail call float @atan2f(float %3, float %5) #9
  ret float %6
}

; Function Attrs: nofree nounwind
declare float @atan2f(float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink10FloatPoint6lengthEv(%"class.blink::FloatPoint"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = tail call float @hypotf(float %3, float %5) #9
  ret float %6
}

; Function Attrs: nounwind
declare float @hypotf(float, float) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK5blink10FloatPoint10ExpandedToERKS0_(%"class.blink::FloatPoint"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.blink::FloatPoint"* %0 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fcmp olt <2 x float> %4, %6
  %8 = select <2 x i1> %7, <2 x float> %6, <2 x float> %4
  ret <2 x float> %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK5blink10FloatPoint8ShrunkToERKS0_(%"class.blink::FloatPoint"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %"class.blink::FloatPoint"* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fcmp olt <2 x float> %4, %6
  %8 = select <2 x i1> %7, <2 x float> %4, <2 x float> %6
  ret <2 x float> %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden <2 x float> @_ZN5blink10FloatPoint15NarrowPrecisionEdd(double, double) local_unnamed_addr #5 align 2 {
  %3 = fcmp ult double %0, 0x47EFFFFFE0000000
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = fcmp ole double %0, 0xC7EFFFFFE0000000
  %6 = select i1 %5, double 0xC7EFFFFFE0000000, double %0
  %7 = fptrunc double %6 to float
  br label %8

8:                                                ; preds = %2, %4
  %9 = phi float [ %7, %4 ], [ 0x47EFFFFFE0000000, %2 ]
  %10 = fcmp ult double %1, 0x47EFFFFFE0000000
  br i1 %10, label %11, label %15

11:                                               ; preds = %8
  %12 = fcmp ole double %1, 0xC7EFFFFFE0000000
  %13 = select i1 %12, double 0xC7EFFFFFE0000000, double %1
  %14 = fptrunc double %13 to float
  br label %15

15:                                               ; preds = %8, %11
  %16 = phi float [ %14, %11 ], [ 0x47EFFFFFE0000000, %8 ]
  %17 = insertelement <2 x float> undef, float %9, i32 0
  %18 = insertelement <2 x float> %17, float %16, i32 1
  ret <2 x float> %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink16FindIntersectionERKNS_10FloatPointES2_S2_S2_RS0_(%"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatPoint"* nocapture dereferenceable(8)) local_unnamed_addr #6 {
  %6 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = bitcast %"class.blink::FloatPoint"* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fsub <2 x float> %7, %9
  %11 = bitcast %"class.blink::FloatPoint"* %3 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = bitcast %"class.blink::FloatPoint"* %2 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fsub <2 x float> %12, %14
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %17 = fmul <2 x float> %10, %16
  %18 = extractelement <2 x float> %17, i32 0
  %19 = extractelement <2 x float> %17, i32 1
  %20 = fsub float %18, %19
  %21 = fcmp une float %20, 0.000000e+00
  br i1 %21, label %22, label %45

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 1
  %24 = extractelement <2 x float> %9, i32 0
  %25 = extractelement <2 x float> %14, i32 0
  %26 = fsub float %25, %24
  %27 = extractelement <2 x float> %15, i32 1
  %28 = fmul float %26, %27
  %29 = extractelement <2 x float> %9, i32 1
  %30 = extractelement <2 x float> %14, i32 1
  %31 = fsub float %30, %29
  %32 = extractelement <2 x float> %15, i32 0
  %33 = fmul float %32, %31
  %34 = fsub float %28, %33
  %35 = fdiv float %34, %20
  %36 = extractelement <2 x float> %10, i32 0
  %37 = fmul float %36, %35
  %38 = fadd float %24, %37
  %39 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %4, i64 0, i32 0
  store float %38, float* %39, align 4
  %40 = load float, float* %23, align 4
  %41 = extractelement <2 x float> %10, i32 1
  %42 = fmul float %41, %35
  %43 = fadd float %42, %40
  %44 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %4, i64 0, i32 1
  store float %43, float* %44, align 4
  br label %45

45:                                               ; preds = %5, %22
  %46 = phi i1 [ true, %22 ], [ false, %5 ]
  ret i1 %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_10FloatPointE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %7, double %10) #9
  %12 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"** %12, align 8
  %13 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #9
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  br i1 %20, label %23, label %25

23:                                               ; preds = %16
  %24 = add i32 %22, -1
  store i32 %24, i32* %21, align 4
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i32 [ %24, %23 ], [ %22, %16 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #9
  br label %29

29:                                               ; preds = %2, %25, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  ret %"class.std::__1::basic_ostream"* %13
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fpext float %3 to double
  %5 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %4, double %7) #9
  ret %"class.WTF::StringImpl"* %8
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_10FloatPointE(%"class.WTF::TextStream"* returned dereferenceable(48), %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 {
  %3 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %4 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %5 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #9
  %6 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  %10 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %3, i64 0, i32 0
  store double %9, double* %10, align 8
  %11 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %5, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %12 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #9
  %13 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #9
  %14 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %4, i64 0, i32 0
  store double %16, double* %17, align 8
  %18 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %12, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #9
  %19 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #9
  ret %"class.WTF::TextStream"* %0
}

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"*, i8*) local_unnamed_addr #8

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"*, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* dereferenceable(8)) local_unnamed_addr #8

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #8

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
