; ModuleID = '../../base/third_party/double_conversion/double-conversion/fixed-dtoa.cc'
source_filename = "../../base/third_party/double_conversion/double-conversion/fixed-dtoa.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN17double_conversion13FastFixedDtoaEdiNS_6VectorIcEEPiS2_(double, i32, i8*, i32, i32*, i32* nocapture) local_unnamed_addr #0 {
  %7 = bitcast double %0 to i64
  %8 = and i64 %7, 4503599627370495
  %9 = and i64 %7, 9218868437227405312
  %10 = icmp eq i64 %9, 0
  %11 = or i64 %8, 4503599627370496
  %12 = select i1 %10, i64 %8, i64 %11
  br i1 %10, label %18, label %13

13:                                               ; preds = %6
  %14 = lshr i64 %7, 52
  %15 = trunc i64 %14 to i32
  %16 = and i32 %15, 2047
  %17 = add nsw i32 %16, -1075
  br label %18

18:                                               ; preds = %6, %13
  %19 = phi i32 [ %17, %13 ], [ -1074, %6 ]
  %20 = icmp sgt i32 %19, 20
  %21 = icmp sgt i32 %1, 20
  %22 = or i1 %21, %20
  br i1 %22, label %384, label %23

23:                                               ; preds = %18
  store i32 0, i32* %4, align 4
  %24 = icmp sgt i32 %19, 11
  br i1 %24, label %25, label %238

25:                                               ; preds = %23
  %26 = icmp sgt i32 %19, 17
  br i1 %26, label %27, label %34

27:                                               ; preds = %25
  %28 = add nsw i32 %19, -17
  %29 = zext i32 %28 to i64
  %30 = shl i64 %12, %29
  %31 = udiv i64 %30, 762939453125
  %32 = urem i64 %30, 762939453125
  %33 = shl nuw nsw i64 %32, 17
  br label %42

34:                                               ; preds = %25
  %35 = sub nuw nsw i32 17, %19
  %36 = zext i32 %35 to i64
  %37 = shl i64 762939453125, %36
  %38 = udiv i64 %12, %37
  %39 = urem i64 %12, %37
  %40 = zext i32 %19 to i64
  %41 = shl i64 %39, %40
  br label %42

42:                                               ; preds = %34, %27
  %43 = phi i64 [ %33, %27 ], [ %41, %34 ]
  %44 = phi i64 [ %31, %27 ], [ %38, %34 ]
  %45 = trunc i64 %44 to i32
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %68, label %47

47:                                               ; preds = %42
  %48 = urem i32 %45, 10
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, 48
  store i8 %50, i8* %2, align 1
  %51 = icmp ult i32 %45, 10
  br i1 %51, label %65, label %52

52:                                               ; preds = %47, %52
  %53 = phi i32 [ %63, %52 ], [ 1, %47 ]
  %54 = phi i32 [ %55, %52 ], [ %45, %47 ]
  %55 = udiv i32 %54, 10
  %56 = load i32, i32* %4, align 4
  %57 = urem i32 %55, 10
  %58 = trunc i32 %57 to i8
  %59 = or i8 %58, 48
  %60 = add nsw i32 %56, %53
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %2, i64 %61
  store i8 %59, i8* %62, align 1
  %63 = add nuw nsw i32 %53, 1
  %64 = icmp ult i32 %54, 100
  br i1 %64, label %65, label %52

65:                                               ; preds = %52, %47
  %66 = phi i32 [ 1, %47 ], [ %63, %52 ]
  %67 = load i32, i32* %4, align 4
  br label %68

68:                                               ; preds = %65, %42
  %69 = phi i32 [ 0, %42 ], [ %67, %65 ]
  %70 = phi i32 [ 0, %42 ], [ %66, %65 ]
  %71 = add i32 %69, %70
  %72 = add i32 %71, -1
  %73 = icmp slt i32 %69, %72
  br i1 %73, label %74, label %90

74:                                               ; preds = %68
  %75 = sext i32 %72 to i64
  %76 = sext i32 %69 to i64
  br label %77

77:                                               ; preds = %77, %74
  %78 = phi i64 [ %76, %74 ], [ %84, %77 ]
  %79 = phi i64 [ %75, %74 ], [ %85, %77 ]
  %80 = getelementptr inbounds i8, i8* %2, i64 %78
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %2, i64 %79
  %83 = load i8, i8* %82, align 1
  store i8 %83, i8* %80, align 1
  store i8 %81, i8* %82, align 1
  %84 = add nsw i64 %78, 1
  %85 = add nsw i64 %79, -1
  %86 = icmp slt i64 %84, %85
  br i1 %86, label %77, label %87

87:                                               ; preds = %77
  %88 = load i32, i32* %4, align 4
  %89 = add nsw i32 %88, %70
  br label %90

90:                                               ; preds = %68, %87
  %91 = phi i32 [ %89, %87 ], [ %71, %68 ]
  store i32 %91, i32* %4, align 4
  %92 = urem i64 %43, 10000000
  %93 = udiv i64 %43, 10000000
  %94 = urem i64 %93, 10000000
  %95 = udiv i64 %43, 100000000000000
  %96 = trunc i64 %95 to i32
  %97 = urem i32 %96, 10
  %98 = trunc i32 %97 to i8
  %99 = or i8 %98, 48
  %100 = add nsw i32 %91, 2
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %2, i64 %101
  store i8 %99, i8* %102, align 1
  %103 = udiv i32 %96, 10
  %104 = trunc i32 %103 to i16
  %105 = urem i16 %104, 10
  %106 = trunc i16 %105 to i8
  %107 = or i8 %106, 48
  %108 = load i32, i32* %4, align 4
  %109 = add nsw i32 %108, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %2, i64 %110
  store i8 %107, i8* %111, align 1
  %112 = udiv i32 %96, 100
  %113 = trunc i32 %112 to i16
  %114 = urem i16 %113, 10
  %115 = trunc i16 %114 to i8
  %116 = or i8 %115, 48
  %117 = load i32, i32* %4, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %2, i64 %118
  store i8 %116, i8* %119, align 1
  %120 = trunc i64 %92 to i32
  %121 = trunc i64 %94 to i32
  %122 = load i32, i32* %4, align 4
  %123 = add nsw i32 %122, 3
  store i32 %123, i32* %4, align 4
  %124 = urem i32 %121, 10
  %125 = trunc i32 %124 to i8
  %126 = or i8 %125, 48
  %127 = add nsw i32 %122, 9
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %2, i64 %128
  store i8 %126, i8* %129, align 1
  %130 = udiv i32 %121, 10
  %131 = urem i32 %130, 10
  %132 = trunc i32 %131 to i8
  %133 = or i8 %132, 48
  %134 = load i32, i32* %4, align 4
  %135 = add nsw i32 %134, 5
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %2, i64 %136
  store i8 %133, i8* %137, align 1
  %138 = udiv i32 %121, 100
  %139 = urem i32 %138, 10
  %140 = trunc i32 %139 to i8
  %141 = or i8 %140, 48
  %142 = load i32, i32* %4, align 4
  %143 = add nsw i32 %142, 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %2, i64 %144
  store i8 %141, i8* %145, align 1
  %146 = udiv i32 %121, 1000
  %147 = trunc i32 %146 to i16
  %148 = urem i16 %147, 10
  %149 = trunc i16 %148 to i8
  %150 = or i8 %149, 48
  %151 = load i32, i32* %4, align 4
  %152 = add nsw i32 %151, 3
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %2, i64 %153
  store i8 %150, i8* %154, align 1
  %155 = udiv i32 %121, 10000
  %156 = trunc i32 %155 to i16
  %157 = urem i16 %156, 10
  %158 = trunc i16 %157 to i8
  %159 = or i8 %158, 48
  %160 = load i32, i32* %4, align 4
  %161 = add nsw i32 %160, 2
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %2, i64 %162
  store i8 %159, i8* %163, align 1
  %164 = udiv i32 %121, 100000
  %165 = trunc i32 %164 to i8
  %166 = urem i8 %165, 10
  %167 = or i8 %166, 48
  %168 = load i32, i32* %4, align 4
  %169 = add nsw i32 %168, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %2, i64 %170
  store i8 %167, i8* %171, align 1
  %172 = udiv i32 %121, 1000000
  %173 = trunc i32 %172 to i8
  %174 = urem i8 %173, 10
  %175 = or i8 %174, 48
  %176 = load i32, i32* %4, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %2, i64 %177
  store i8 %175, i8* %178, align 1
  %179 = load i32, i32* %4, align 4
  %180 = add nsw i32 %179, 7
  store i32 %180, i32* %4, align 4
  %181 = urem i32 %120, 10
  %182 = trunc i32 %181 to i8
  %183 = or i8 %182, 48
  %184 = add nsw i32 %179, 13
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %2, i64 %185
  store i8 %183, i8* %186, align 1
  %187 = udiv i32 %120, 10
  %188 = urem i32 %187, 10
  %189 = trunc i32 %188 to i8
  %190 = or i8 %189, 48
  %191 = load i32, i32* %4, align 4
  %192 = add nsw i32 %191, 5
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %2, i64 %193
  store i8 %190, i8* %194, align 1
  %195 = udiv i32 %120, 100
  %196 = urem i32 %195, 10
  %197 = trunc i32 %196 to i8
  %198 = or i8 %197, 48
  %199 = load i32, i32* %4, align 4
  %200 = add nsw i32 %199, 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i8, i8* %2, i64 %201
  store i8 %198, i8* %202, align 1
  %203 = udiv i32 %120, 1000
  %204 = trunc i32 %203 to i16
  %205 = urem i16 %204, 10
  %206 = trunc i16 %205 to i8
  %207 = or i8 %206, 48
  %208 = load i32, i32* %4, align 4
  %209 = add nsw i32 %208, 3
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %2, i64 %210
  store i8 %207, i8* %211, align 1
  %212 = udiv i32 %120, 10000
  %213 = trunc i32 %212 to i16
  %214 = urem i16 %213, 10
  %215 = trunc i16 %214 to i8
  %216 = or i8 %215, 48
  %217 = load i32, i32* %4, align 4
  %218 = add nsw i32 %217, 2
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8, i8* %2, i64 %219
  store i8 %216, i8* %220, align 1
  %221 = udiv i32 %120, 100000
  %222 = trunc i32 %221 to i8
  %223 = urem i8 %222, 10
  %224 = or i8 %223, 48
  %225 = load i32, i32* %4, align 4
  %226 = add nsw i32 %225, 1
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds i8, i8* %2, i64 %227
  store i8 %224, i8* %228, align 1
  %229 = udiv i32 %120, 1000000
  %230 = trunc i32 %229 to i8
  %231 = urem i8 %230, 10
  %232 = or i8 %231, 48
  %233 = load i32, i32* %4, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %2, i64 %234
  store i8 %232, i8* %235, align 1
  %236 = load i32, i32* %4, align 4
  %237 = add nsw i32 %236, 7
  store i32 %237, i32* %4, align 4
  store i32 %237, i32* %5, align 4
  br label %310

238:                                              ; preds = %23
  %239 = icmp sgt i32 %19, -1
  br i1 %239, label %240, label %244

240:                                              ; preds = %238
  %241 = zext i32 %19 to i64
  %242 = shl i64 %12, %241
  tail call fastcc void @_ZN17double_conversionL12FillDigits64EmNS_6VectorIcEEPi(i64 %242, i8* %2, i32 %3, i32* %4)
  %243 = load i32, i32* %4, align 4
  store i32 %243, i32* %5, align 4
  br label %310

244:                                              ; preds = %238
  %245 = icmp sgt i32 %19, -53
  br i1 %245, label %246, label %305

246:                                              ; preds = %244
  %247 = sub nsw i32 0, %19
  %248 = zext i32 %247 to i64
  %249 = lshr i64 %12, %248
  %250 = shl i64 %249, %248
  %251 = sub i64 %12, %250
  %252 = icmp ugt i64 %249, 4294967295
  br i1 %252, label %253, label %255

253:                                              ; preds = %246
  tail call fastcc void @_ZN17double_conversionL12FillDigits64EmNS_6VectorIcEEPi(i64 %249, i8* %2, i32 %3, i32* %4)
  %254 = load i32, i32* %4, align 4
  br label %303

255:                                              ; preds = %246
  %256 = trunc i64 %249 to i32
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %279, label %258

258:                                              ; preds = %255
  %259 = urem i32 %256, 10
  %260 = trunc i32 %259 to i8
  %261 = or i8 %260, 48
  store i8 %261, i8* %2, align 1
  %262 = icmp ult i32 %256, 10
  br i1 %262, label %276, label %263

263:                                              ; preds = %258, %263
  %264 = phi i32 [ %274, %263 ], [ 1, %258 ]
  %265 = phi i32 [ %266, %263 ], [ %256, %258 ]
  %266 = udiv i32 %265, 10
  %267 = load i32, i32* %4, align 4
  %268 = urem i32 %266, 10
  %269 = trunc i32 %268 to i8
  %270 = or i8 %269, 48
  %271 = add nsw i32 %267, %264
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* %2, i64 %272
  store i8 %270, i8* %273, align 1
  %274 = add nuw nsw i32 %264, 1
  %275 = icmp ult i32 %265, 100
  br i1 %275, label %276, label %263

276:                                              ; preds = %263, %258
  %277 = phi i32 [ 1, %258 ], [ %274, %263 ]
  %278 = load i32, i32* %4, align 4
  br label %279

279:                                              ; preds = %276, %255
  %280 = phi i32 [ 0, %255 ], [ %278, %276 ]
  %281 = phi i32 [ 0, %255 ], [ %277, %276 ]
  %282 = add i32 %280, %281
  %283 = add i32 %282, -1
  %284 = icmp slt i32 %280, %283
  br i1 %284, label %285, label %301

285:                                              ; preds = %279
  %286 = sext i32 %283 to i64
  %287 = sext i32 %280 to i64
  br label %288

288:                                              ; preds = %288, %285
  %289 = phi i64 [ %287, %285 ], [ %295, %288 ]
  %290 = phi i64 [ %286, %285 ], [ %296, %288 ]
  %291 = getelementptr inbounds i8, i8* %2, i64 %289
  %292 = load i8, i8* %291, align 1
  %293 = getelementptr inbounds i8, i8* %2, i64 %290
  %294 = load i8, i8* %293, align 1
  store i8 %294, i8* %291, align 1
  store i8 %292, i8* %293, align 1
  %295 = add nsw i64 %289, 1
  %296 = add nsw i64 %290, -1
  %297 = icmp slt i64 %295, %296
  br i1 %297, label %288, label %298

298:                                              ; preds = %288
  %299 = load i32, i32* %4, align 4
  %300 = add nsw i32 %299, %281
  br label %301

301:                                              ; preds = %279, %298
  %302 = phi i32 [ %300, %298 ], [ %282, %279 ]
  store i32 %302, i32* %4, align 4
  br label %303

303:                                              ; preds = %301, %253
  %304 = phi i32 [ %302, %301 ], [ %254, %253 ]
  store i32 %304, i32* %5, align 4
  tail call fastcc void @_ZN17double_conversionL15FillFractionalsEmiiNS_6VectorIcEEPiS2_(i64 %251, i32 %19, i32 %1, i8* %2, i32 %3, i32* %4, i32* %5)
  br label %310

305:                                              ; preds = %244
  %306 = icmp slt i32 %19, -128
  br i1 %306, label %307, label %309

307:                                              ; preds = %305
  store i8 0, i8* %2, align 1
  store i32 0, i32* %4, align 4
  %308 = sub nsw i32 0, %1
  store i32 %308, i32* %5, align 4
  br label %310

309:                                              ; preds = %305
  store i32 0, i32* %5, align 4
  tail call fastcc void @_ZN17double_conversionL15FillFractionalsEmiiNS_6VectorIcEEPiS2_(i64 %12, i32 %19, i32 %1, i8* %2, i32 %3, i32* %4, i32* %5)
  br label %310

310:                                              ; preds = %240, %307, %309, %303, %90
  %311 = load i32, i32* %4, align 4
  %312 = icmp sgt i32 %311, 0
  br i1 %312, label %313, label %376

313:                                              ; preds = %310
  %314 = sext i32 %311 to i64
  %315 = add nsw i64 %314, -1
  %316 = getelementptr inbounds i8, i8* %2, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, 48
  br i1 %318, label %324, label %338

319:                                              ; preds = %324
  %320 = add nsw i64 %326, -1
  %321 = getelementptr inbounds i8, i8* %2, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = icmp eq i8 %322, 48
  br i1 %323, label %324, label %332

324:                                              ; preds = %313, %319
  %325 = phi i32 [ %327, %319 ], [ %311, %313 ]
  %326 = phi i64 [ %320, %319 ], [ %315, %313 ]
  %327 = add nsw i32 %325, -1
  %328 = trunc i64 %326 to i32
  store i32 %328, i32* %4, align 4
  %329 = icmp sgt i64 %326, 0
  br i1 %329, label %319, label %330

330:                                              ; preds = %324
  %331 = trunc i64 %326 to i32
  br label %334

332:                                              ; preds = %319
  %333 = trunc i64 %326 to i32
  br label %334

334:                                              ; preds = %332, %330
  %335 = phi i32 [ %331, %330 ], [ %333, %332 ]
  %336 = phi i32 [ %327, %330 ], [ %333, %332 ]
  %337 = icmp sgt i32 %336, 0
  br i1 %337, label %338, label %376

338:                                              ; preds = %313, %334
  %339 = phi i32 [ %336, %334 ], [ %311, %313 ]
  %340 = phi i32 [ %335, %334 ], [ %311, %313 ]
  %341 = zext i32 %339 to i64
  br label %342

342:                                              ; preds = %348, %338
  %343 = phi i64 [ 0, %338 ], [ %349, %348 ]
  %344 = phi i32 [ 0, %338 ], [ %350, %348 ]
  %345 = getelementptr inbounds i8, i8* %2, i64 %343
  %346 = load i8, i8* %345, align 1
  %347 = icmp eq i8 %346, 48
  br i1 %347, label %348, label %352

348:                                              ; preds = %342
  %349 = add nuw nsw i64 %343, 1
  %350 = add nuw nsw i32 %344, 1
  %351 = icmp eq i64 %349, %341
  br i1 %351, label %355, label %342

352:                                              ; preds = %342
  %353 = trunc i64 %343 to i32
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %376, label %355

355:                                              ; preds = %348, %352
  %356 = phi i32 [ %353, %352 ], [ %350, %348 ]
  %357 = icmp slt i32 %356, %340
  br i1 %357, label %358, label %360

358:                                              ; preds = %355
  %359 = zext i32 %356 to i64
  br label %366

360:                                              ; preds = %366, %355
  %361 = phi i32 [ %340, %355 ], [ %373, %366 ]
  %362 = sub nsw i32 %361, %356
  store i32 %362, i32* %4, align 4
  %363 = load i32, i32* %5, align 4
  %364 = sub nsw i32 %363, %356
  store i32 %364, i32* %5, align 4
  %365 = load i32, i32* %4, align 4
  br label %376

366:                                              ; preds = %366, %358
  %367 = phi i64 [ %359, %358 ], [ %372, %366 ]
  %368 = getelementptr inbounds i8, i8* %2, i64 %367
  %369 = load i8, i8* %368, align 1
  %370 = sub nuw nsw i64 %367, %359
  %371 = getelementptr inbounds i8, i8* %2, i64 %370
  store i8 %369, i8* %371, align 1
  %372 = add nuw nsw i64 %367, 1
  %373 = load i32, i32* %4, align 4
  %374 = trunc i64 %372 to i32
  %375 = icmp sgt i32 %373, %374
  br i1 %375, label %366, label %360

376:                                              ; preds = %310, %334, %352, %360
  %377 = phi i32 [ %311, %310 ], [ %335, %334 ], [ %340, %352 ], [ %365, %360 ]
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i8, i8* %2, i64 %378
  store i8 0, i8* %379, align 1
  %380 = load i32, i32* %4, align 4
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %384

382:                                              ; preds = %376
  %383 = sub nsw i32 0, %1
  store i32 %383, i32* %5, align 4
  br label %384

384:                                              ; preds = %376, %382, %18
  %385 = phi i1 [ false, %18 ], [ true, %382 ], [ true, %376 ]
  ret i1 %385
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN17double_conversionL12FillDigits64EmNS_6VectorIcEEPi(i64, i8* nocapture, i32, i32*) unnamed_addr #1 {
  %5 = urem i64 %0, 10000000
  %6 = trunc i64 %5 to i32
  %7 = udiv i64 %0, 10000000
  %8 = urem i64 %7, 10000000
  %9 = trunc i64 %8 to i32
  %10 = udiv i64 %0, 100000000000000
  %11 = trunc i64 %10 to i32
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %104, label %13

13:                                               ; preds = %4, %13
  %14 = phi i32 [ %17, %13 ], [ %11, %4 ]
  %15 = phi i32 [ %24, %13 ], [ 0, %4 ]
  %16 = urem i32 %14, 10
  %17 = udiv i32 %14, 10
  %18 = trunc i32 %16 to i8
  %19 = or i8 %18, 48
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, %15
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  store i8 %19, i8* %23, align 1
  %24 = add nuw nsw i32 %15, 1
  %25 = icmp ult i32 %14, 10
  br i1 %25, label %26, label %13

26:                                               ; preds = %13
  %27 = load i32, i32* %3, align 4
  %28 = add i32 %27, %15
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %45

30:                                               ; preds = %26
  %31 = sext i32 %28 to i64
  %32 = sext i32 %27 to i64
  br label %33

33:                                               ; preds = %33, %30
  %34 = phi i64 [ %32, %30 ], [ %40, %33 ]
  %35 = phi i64 [ %31, %30 ], [ %41, %33 ]
  %36 = getelementptr inbounds i8, i8* %1, i64 %34
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %1, i64 %35
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %36, align 1
  store i8 %37, i8* %38, align 1
  %40 = add nsw i64 %34, 1
  %41 = add nsw i64 %35, -1
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %33, label %43

43:                                               ; preds = %33
  %44 = load i32, i32* %3, align 4
  br label %45

45:                                               ; preds = %26, %43
  %46 = phi i32 [ %44, %43 ], [ %27, %26 ]
  %47 = add i32 %46, %24
  store i32 %47, i32* %3, align 4
  %48 = urem i32 %9, 10
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, 48
  %51 = add nsw i32 %47, 6
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  store i8 %50, i8* %53, align 1
  %54 = udiv i32 %9, 10
  %55 = urem i32 %54, 10
  %56 = trunc i32 %55 to i8
  %57 = or i8 %56, 48
  %58 = load i32, i32* %3, align 4
  %59 = add nsw i32 %58, 5
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %1, i64 %60
  store i8 %57, i8* %61, align 1
  %62 = udiv i32 %9, 100
  %63 = urem i32 %62, 10
  %64 = trunc i32 %63 to i8
  %65 = or i8 %64, 48
  %66 = load i32, i32* %3, align 4
  %67 = add nsw i32 %66, 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %1, i64 %68
  store i8 %65, i8* %69, align 1
  %70 = udiv i32 %9, 1000
  %71 = urem i32 %70, 10
  %72 = trunc i32 %71 to i8
  %73 = or i8 %72, 48
  %74 = load i32, i32* %3, align 4
  %75 = add nsw i32 %74, 3
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %1, i64 %76
  store i8 %73, i8* %77, align 1
  %78 = udiv i32 %9, 10000
  %79 = urem i32 %78, 10
  %80 = trunc i32 %79 to i8
  %81 = or i8 %80, 48
  %82 = load i32, i32* %3, align 4
  %83 = add nsw i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %1, i64 %84
  store i8 %81, i8* %85, align 1
  %86 = udiv i32 %9, 100000
  %87 = trunc i32 %86 to i8
  %88 = urem i8 %87, 10
  %89 = or i8 %88, 48
  %90 = load i32, i32* %3, align 4
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %1, i64 %92
  store i8 %89, i8* %93, align 1
  %94 = udiv i32 %9, 1000000
  %95 = trunc i32 %94 to i8
  %96 = urem i8 %95, 10
  %97 = or i8 %96, 48
  %98 = load i32, i32* %3, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %1, i64 %99
  store i8 %97, i8* %100, align 1
  %101 = load i32, i32* %3, align 4
  %102 = add nsw i32 %101, 7
  store i32 %102, i32* %3, align 4
  %103 = add nsw i32 %101, 13
  br label %176

104:                                              ; preds = %4
  %105 = icmp eq i32 %9, 0
  br i1 %105, label %142, label %106

106:                                              ; preds = %104, %106
  %107 = phi i32 [ %110, %106 ], [ %9, %104 ]
  %108 = phi i32 [ %117, %106 ], [ 0, %104 ]
  %109 = urem i32 %107, 10
  %110 = udiv i32 %107, 10
  %111 = trunc i32 %109 to i8
  %112 = or i8 %111, 48
  %113 = load i32, i32* %3, align 4
  %114 = add nsw i32 %113, %108
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %1, i64 %115
  store i8 %112, i8* %116, align 1
  %117 = add nuw nsw i32 %108, 1
  %118 = icmp ult i32 %107, 10
  br i1 %118, label %119, label %106

119:                                              ; preds = %106
  %120 = load i32, i32* %3, align 4
  %121 = add i32 %120, %108
  %122 = icmp slt i32 %120, %121
  br i1 %122, label %123, label %138

123:                                              ; preds = %119
  %124 = sext i32 %121 to i64
  %125 = sext i32 %120 to i64
  br label %126

126:                                              ; preds = %126, %123
  %127 = phi i64 [ %125, %123 ], [ %133, %126 ]
  %128 = phi i64 [ %124, %123 ], [ %134, %126 ]
  %129 = getelementptr inbounds i8, i8* %1, i64 %127
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds i8, i8* %1, i64 %128
  %132 = load i8, i8* %131, align 1
  store i8 %132, i8* %129, align 1
  store i8 %130, i8* %131, align 1
  %133 = add nsw i64 %127, 1
  %134 = add nsw i64 %128, -1
  %135 = icmp slt i64 %133, %134
  br i1 %135, label %126, label %136

136:                                              ; preds = %126
  %137 = load i32, i32* %3, align 4
  br label %138

138:                                              ; preds = %119, %136
  %139 = phi i32 [ %137, %136 ], [ %120, %119 ]
  %140 = add i32 %139, %117
  store i32 %140, i32* %3, align 4
  %141 = add nsw i32 %140, 6
  br label %176

142:                                              ; preds = %104
  %143 = icmp eq i32 %6, 0
  br i1 %143, label %157, label %144

144:                                              ; preds = %142, %144
  %145 = phi i32 [ %148, %144 ], [ %6, %142 ]
  %146 = phi i32 [ %155, %144 ], [ 0, %142 ]
  %147 = urem i32 %145, 10
  %148 = udiv i32 %145, 10
  %149 = trunc i32 %147 to i8
  %150 = or i8 %149, 48
  %151 = load i32, i32* %3, align 4
  %152 = add nsw i32 %151, %146
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %1, i64 %153
  store i8 %150, i8* %154, align 1
  %155 = add nuw nsw i32 %146, 1
  %156 = icmp ult i32 %145, 10
  br i1 %156, label %157, label %144

157:                                              ; preds = %144, %142
  %158 = phi i32 [ 0, %142 ], [ %155, %144 ]
  %159 = load i32, i32* %3, align 4
  %160 = add i32 %159, %158
  %161 = add i32 %160, -1
  %162 = icmp slt i32 %159, %161
  br i1 %162, label %163, label %234

163:                                              ; preds = %157
  %164 = sext i32 %161 to i64
  %165 = sext i32 %159 to i64
  br label %166

166:                                              ; preds = %166, %163
  %167 = phi i64 [ %165, %163 ], [ %173, %166 ]
  %168 = phi i64 [ %164, %163 ], [ %174, %166 ]
  %169 = getelementptr inbounds i8, i8* %1, i64 %167
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds i8, i8* %1, i64 %168
  %172 = load i8, i8* %171, align 1
  store i8 %172, i8* %169, align 1
  store i8 %170, i8* %171, align 1
  %173 = add nsw i64 %167, 1
  %174 = add nsw i64 %168, -1
  %175 = icmp slt i64 %173, %174
  br i1 %175, label %166, label %230

176:                                              ; preds = %138, %45
  %177 = phi i32 [ %103, %45 ], [ %141, %138 ]
  %178 = urem i32 %6, 10
  %179 = trunc i32 %178 to i8
  %180 = or i8 %179, 48
  %181 = sext i32 %177 to i64
  %182 = getelementptr inbounds i8, i8* %1, i64 %181
  store i8 %180, i8* %182, align 1
  %183 = udiv i32 %6, 10
  %184 = urem i32 %183, 10
  %185 = trunc i32 %184 to i8
  %186 = or i8 %185, 48
  %187 = load i32, i32* %3, align 4
  %188 = add nsw i32 %187, 5
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %1, i64 %189
  store i8 %186, i8* %190, align 1
  %191 = udiv i32 %6, 100
  %192 = urem i32 %191, 10
  %193 = trunc i32 %192 to i8
  %194 = or i8 %193, 48
  %195 = load i32, i32* %3, align 4
  %196 = add nsw i32 %195, 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  store i8 %194, i8* %198, align 1
  %199 = udiv i32 %6, 1000
  %200 = urem i32 %199, 10
  %201 = trunc i32 %200 to i8
  %202 = or i8 %201, 48
  %203 = load i32, i32* %3, align 4
  %204 = add nsw i32 %203, 3
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %1, i64 %205
  store i8 %202, i8* %206, align 1
  %207 = udiv i32 %6, 10000
  %208 = urem i32 %207, 10
  %209 = trunc i32 %208 to i8
  %210 = or i8 %209, 48
  %211 = load i32, i32* %3, align 4
  %212 = add nsw i32 %211, 2
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %1, i64 %213
  store i8 %210, i8* %214, align 1
  %215 = udiv i32 %6, 100000
  %216 = trunc i32 %215 to i8
  %217 = urem i8 %216, 10
  %218 = or i8 %217, 48
  %219 = load i32, i32* %3, align 4
  %220 = add nsw i32 %219, 1
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %1, i64 %221
  store i8 %218, i8* %222, align 1
  %223 = udiv i32 %6, 1000000
  %224 = trunc i32 %223 to i8
  %225 = urem i8 %224, 10
  %226 = or i8 %225, 48
  %227 = load i32, i32* %3, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %1, i64 %228
  store i8 %226, i8* %229, align 1
  br label %230

230:                                              ; preds = %166, %176
  %231 = phi i32 [ 7, %176 ], [ %158, %166 ]
  %232 = load i32, i32* %3, align 4
  %233 = add nsw i32 %232, %231
  br label %234

234:                                              ; preds = %230, %157
  %235 = phi i32 [ %160, %157 ], [ %233, %230 ]
  store i32 %235, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN17double_conversionL15FillFractionalsEmiiNS_6VectorIcEEPiS2_(i64, i32, i32, i8*, i32, i32* nocapture, i32* nocapture) unnamed_addr #0 {
  %8 = icmp sgt i32 %1, -65
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = sub nsw i32 0, %1
  %11 = icmp sgt i32 %2, 0
  %12 = icmp eq i64 %0, 0
  br i1 %11, label %13, label %37

13:                                               ; preds = %9, %18
  %14 = phi i1 [ %35, %18 ], [ %12, %9 ]
  %15 = phi i64 [ %33, %18 ], [ %0, %9 ]
  %16 = phi i32 [ %20, %18 ], [ %10, %9 ]
  %17 = phi i32 [ %34, %18 ], [ 0, %9 ]
  br i1 %14, label %203, label %18

18:                                               ; preds = %13
  %19 = mul i64 %15, 5
  %20 = add nsw i32 %16, -1
  %21 = zext i32 %20 to i64
  %22 = lshr i64 %19, %21
  %23 = trunc i64 %22 to i8
  %24 = add i8 %23, 48
  %25 = load i32, i32* %5, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %3, i64 %26
  store i8 %24, i8* %27, align 1
  %28 = load i32, i32* %5, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %5, align 4
  %30 = shl i64 %22, 32
  %31 = ashr exact i64 %30, 32
  %32 = shl i64 %31, %21
  %33 = sub i64 %19, %32
  %34 = add nuw nsw i32 %17, 1
  %35 = icmp eq i64 %33, 0
  %36 = icmp eq i32 %34, %2
  br i1 %36, label %37, label %13

37:                                               ; preds = %18, %9
  %38 = phi i32 [ %10, %9 ], [ %20, %18 ]
  %39 = phi i64 [ %0, %9 ], [ %33, %18 ]
  %40 = phi i1 [ %12, %9 ], [ %35, %18 ]
  br i1 %40, label %203, label %41

41:                                               ; preds = %37
  %42 = add nsw i32 %38, -1
  %43 = zext i32 %42 to i64
  %44 = shl i64 1, %43
  %45 = and i64 %44, %39
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %203, label %47

47:                                               ; preds = %41
  %48 = load i32, i32* %5, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  store i8 49, i8* %3, align 1
  store i32 1, i32* %6, align 4
  store i32 1, i32* %5, align 4
  br label %203

51:                                               ; preds = %47
  %52 = add nsw i32 %48, -1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %3, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = add i8 %55, 1
  store i8 %56, i8* %54, align 1
  %57 = load i32, i32* %5, align 4
  %58 = add i32 %57, -1
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %77

60:                                               ; preds = %51
  %61 = sext i32 %58 to i64
  br label %62

62:                                               ; preds = %68, %60
  %63 = phi i64 [ %61, %60 ], [ %74, %68 ]
  %64 = phi i32 [ %57, %60 ], [ %76, %68 ]
  %65 = getelementptr inbounds i8, i8* %3, i64 %63
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 58
  br i1 %67, label %68, label %203

68:                                               ; preds = %62
  store i8 48, i8* %65, align 1
  %69 = add nsw i32 %64, -2
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %3, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = add i8 %72, 1
  store i8 %73, i8* %71, align 1
  %74 = add nsw i64 %63, -1
  %75 = icmp sgt i64 %74, 0
  %76 = trunc i64 %63 to i32
  br i1 %75, label %62, label %77

77:                                               ; preds = %68, %51
  %78 = load i8, i8* %3, align 1
  %79 = icmp eq i8 %78, 58
  br i1 %79, label %80, label %203

80:                                               ; preds = %77
  store i8 49, i8* %3, align 1
  %81 = load i32, i32* %6, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %6, align 4
  br label %203

83:                                               ; preds = %7
  %84 = sub nuw nsw i32 -64, %1
  switch i32 %84, label %87 [
    i32 0, label %93
    i32 -64, label %85
    i32 64, label %86
  ]

85:                                               ; preds = %83
  br label %93

86:                                               ; preds = %83
  br label %93

87:                                               ; preds = %83
  %88 = zext i32 %84 to i64
  %89 = add nsw i32 %1, 128
  %90 = zext i32 %89 to i64
  %91 = shl i64 %0, %90
  %92 = lshr i64 %0, %88
  br label %93

93:                                               ; preds = %83, %85, %86, %87
  %94 = phi i64 [ %91, %87 ], [ %0, %86 ], [ 0, %85 ], [ 0, %83 ]
  %95 = phi i64 [ %92, %87 ], [ 0, %86 ], [ 0, %85 ], [ %0, %83 ]
  %96 = icmp slt i32 %2, 1
  %97 = or i64 %95, %94
  %98 = icmp eq i64 %97, 0
  %99 = or i1 %98, %96
  br i1 %99, label %100, label %102

100:                                              ; preds = %93
  %101 = lshr i64 %95, 63
  br label %161

102:                                              ; preds = %93, %137
  %103 = phi i32 [ %148, %137 ], [ 0, %93 ]
  %104 = phi i32 [ %149, %137 ], [ 127, %93 ]
  %105 = phi i64 [ %139, %137 ], [ %95, %93 ]
  %106 = phi i64 [ %138, %137 ], [ %94, %93 ]
  %107 = and i64 %106, 4294967295
  %108 = mul nuw nsw i64 %107, 5
  %109 = lshr i64 %108, 32
  %110 = lshr i64 %106, 32
  %111 = mul nuw nsw i64 %110, 5
  %112 = add nuw nsw i64 %109, %111
  %113 = shl i64 %112, 32
  %114 = and i64 %108, 4294967295
  %115 = or i64 %113, %114
  %116 = lshr i64 %112, 32
  %117 = mul i64 %105, 5
  %118 = add i64 %116, %117
  %119 = icmp sgt i32 %104, 63
  br i1 %119, label %120, label %128

120:                                              ; preds = %102
  %121 = add nsw i32 %104, -64
  %122 = zext i32 %121 to i64
  %123 = lshr i64 %118, %122
  %124 = shl i64 %123, 32
  %125 = ashr exact i64 %124, 32
  %126 = shl i64 %125, %122
  %127 = sub i64 %118, %126
  br label %137

128:                                              ; preds = %102
  %129 = zext i32 %104 to i64
  %130 = lshr i64 %115, %129
  %131 = sub nsw i32 64, %104
  %132 = zext i32 %131 to i64
  %133 = shl i64 %118, %132
  %134 = add i64 %133, %130
  %135 = shl i64 %130, %129
  %136 = sub i64 %115, %135
  br label %137

137:                                              ; preds = %120, %128
  %138 = phi i64 [ %115, %120 ], [ %136, %128 ]
  %139 = phi i64 [ %127, %120 ], [ 0, %128 ]
  %140 = phi i64 [ %123, %120 ], [ %134, %128 ]
  %141 = trunc i64 %140 to i8
  %142 = add i8 %141, 48
  %143 = load i32, i32* %5, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %3, i64 %144
  store i8 %142, i8* %145, align 1
  %146 = load i32, i32* %5, align 4
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %5, align 4
  %148 = add nuw nsw i32 %103, 1
  %149 = add nsw i32 %104, -1
  %150 = icmp sge i32 %148, %2
  %151 = or i64 %139, %138
  %152 = icmp eq i64 %151, 0
  %153 = or i1 %152, %150
  br i1 %153, label %154, label %102

154:                                              ; preds = %137
  %155 = icmp sgt i32 %149, 63
  %156 = add nsw i32 %104, -65
  %157 = zext i32 %156 to i64
  %158 = lshr i64 %139, %157
  %159 = zext i32 %149 to i64
  %160 = lshr i64 %138, %159
  br i1 %155, label %161, label %163

161:                                              ; preds = %100, %154
  %162 = phi i64 [ %101, %100 ], [ %158, %154 ]
  br label %163

163:                                              ; preds = %154, %161
  %164 = phi i64 [ %162, %161 ], [ %160, %154 ]
  %165 = and i64 %164, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %203, label %167

167:                                              ; preds = %163
  %168 = load i32, i32* %5, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %171

170:                                              ; preds = %167
  store i8 49, i8* %3, align 1
  store i32 1, i32* %6, align 4
  store i32 1, i32* %5, align 4
  br label %203

171:                                              ; preds = %167
  %172 = add nsw i32 %168, -1
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %3, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = add i8 %175, 1
  store i8 %176, i8* %174, align 1
  %177 = load i32, i32* %5, align 4
  %178 = add i32 %177, -1
  %179 = icmp sgt i32 %178, 0
  br i1 %179, label %180, label %197

180:                                              ; preds = %171
  %181 = sext i32 %178 to i64
  br label %182

182:                                              ; preds = %188, %180
  %183 = phi i64 [ %181, %180 ], [ %194, %188 ]
  %184 = phi i32 [ %177, %180 ], [ %196, %188 ]
  %185 = getelementptr inbounds i8, i8* %3, i64 %183
  %186 = load i8, i8* %185, align 1
  %187 = icmp eq i8 %186, 58
  br i1 %187, label %188, label %203

188:                                              ; preds = %182
  store i8 48, i8* %185, align 1
  %189 = add nsw i32 %184, -2
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %3, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = add i8 %192, 1
  store i8 %193, i8* %191, align 1
  %194 = add nsw i64 %183, -1
  %195 = icmp sgt i64 %194, 0
  %196 = trunc i64 %183 to i32
  br i1 %195, label %182, label %197

197:                                              ; preds = %188, %171
  %198 = load i8, i8* %3, align 1
  %199 = icmp eq i8 %198, 58
  br i1 %199, label %200, label %203

200:                                              ; preds = %197
  store i8 49, i8* %3, align 1
  %201 = load i32, i32* %6, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %6, align 4
  br label %203

203:                                              ; preds = %182, %13, %62, %163, %170, %197, %200, %80, %77, %50, %37, %41
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
