; ModuleID = '../../third_party/blink/renderer/platform/transforms/affine_transform.cc'
source_filename = "../../third_party/blink/renderer/platform/transforms/affine_transform.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AffineTransform" = type { [6 x double] }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::IntSize" = type { i32, i32 }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"struct.blink::AffineTransform::DecomposedType" = type { double, double, double, double, double, double, double, double, double }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZZN5blink15AffineTransformC1EvE9kIdentity = internal constant [6 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00], align 16
@.str = private unnamed_addr constant [27 x i8] c"[%lg,%lg,%lg,\0A%lg,%lg,%lg]\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"identity\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"translation(%lg,%lg)\00", align 1
@.str.3 = private unnamed_addr constant [80 x i8] c"translation(%lg,%lg), scale(%lg,%lg), angle(%lgdeg), remainder(%lg,%lg,%lg,%lg)\00", align 1

@_ZN5blink15AffineTransformC1Ev = hidden unnamed_addr alias void (%"class.blink::AffineTransform"*), void (%"class.blink::AffineTransform"*)* @_ZN5blink15AffineTransformC2Ev
@_ZN5blink15AffineTransformC1Edddddd = hidden unnamed_addr alias void (%"class.blink::AffineTransform"*, double, double, double, double, double, double), void (%"class.blink::AffineTransform"*, double, double, double, double, double, double)* @_ZN5blink15AffineTransformC2Edddddd

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AffineTransformC2Ev(%"class.blink::AffineTransform"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %3 = icmp eq double* %2, getelementptr inbounds ([6 x double], [6 x double]* @_ZZN5blink15AffineTransformC1EvE9kIdentity, i64 0, i64 0)
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 16 bitcast ([6 x double]* @_ZZN5blink15AffineTransformC1EvE9kIdentity to i8*), i64 48, i1 false) #13
  br label %6

6:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15AffineTransformC2Edddddd(%"class.blink::AffineTransform"* nocapture, double, double, double, double, double, double) unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  store double %1, double* %8, align 8
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  store double %2, double* %9, align 8
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  store double %3, double* %10, align 8
  %11 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  store double %4, double* %11, align 8
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  store double %5, double* %12, align 8
  %13 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  store double %6, double* %13, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15AffineTransform9SetMatrixEdddddd(%"class.blink::AffineTransform"* nocapture, double, double, double, double, double, double) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  store double %1, double* %8, align 8
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  store double %2, double* %9, align 8
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  store double %3, double* %10, align 8
  %11 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  store double %4, double* %11, align 8
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  store double %5, double* %12, align 8
  %13 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  store double %6, double* %13, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15AffineTransform12MakeIdentityEv(%"class.blink::AffineTransform"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  store double 1.000000e+00, double* %2, align 8
  %3 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %5 = bitcast double* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  store double 1.000000e+00, double* %4, align 8
  %6 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %7 = bitcast double* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink15AffineTransform10IsIdentityEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fcmp oeq double %3, 1.000000e+00
  br i1 %4, label %5, label %25

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %7 = load double, double* %6, align 8
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %9, label %25

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %13, label %25

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %15, 1.000000e+00
  br i1 %16, label %17, label %25

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %23 = load double, double* %22, align 8
  %24 = fcmp oeq double %23, 0.000000e+00
  br label %25

25:                                               ; preds = %21, %17, %13, %9, %5, %1
  %26 = phi i1 [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ false, %1 ], [ %24, %21 ]
  ret i1 %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink15AffineTransform13XScaleSquaredEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 8
  %4 = fmul <2 x double> %3, %3
  %5 = extractelement <2 x double> %4, i32 0
  %6 = extractelement <2 x double> %4, i32 1
  %7 = fadd double %5, %6
  ret double %7
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZNK5blink15AffineTransform6XScaleEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 8
  %4 = fmul <2 x double> %3, %3
  %5 = extractelement <2 x double> %4, i32 0
  %6 = extractelement <2 x double> %4, i32 1
  %7 = fadd double %5, %6
  %8 = tail call double @sqrt(double %7) #13
  ret double %8
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink15AffineTransform13YScaleSquaredEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %3 = bitcast double* %2 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = fmul <2 x double> %4, %4
  %6 = extractelement <2 x double> %5, i32 0
  %7 = extractelement <2 x double> %5, i32 1
  %8 = fadd double %6, %7
  ret double %8
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZNK5blink15AffineTransform6YScaleEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %3 = bitcast double* %2 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = fmul <2 x double> %4, %4
  %6 = extractelement <2 x double> %5, i32 0
  %7 = extractelement <2 x double> %5, i32 1
  %8 = fadd double %6, %7
  %9 = tail call double @sqrt(double %8) #13
  ret double %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink15AffineTransform3DetEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 8
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %5 = bitcast double* %4 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %8 = fmul <2 x double> %3, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = extractelement <2 x double> %8, i32 1
  %11 = fsub double %9, %10
  ret double %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink15AffineTransform12IsInvertibleEv(%"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 8
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %5 = bitcast double* %4 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %8 = fmul <2 x double> %3, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = extractelement <2 x double> %8, i32 1
  %11 = fsub double %9, %10
  %12 = fcmp une double %11, 0.000000e+00
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15AffineTransform7InverseEv(%"class.blink::AffineTransform"* noalias sret, %"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::AffineTransform"* %1 to <4 x double>*
  %4 = load <4 x double>, <4 x double>* %3, align 8
  %5 = extractelement <4 x double> %4, i32 0
  %6 = extractelement <4 x double> %4, i32 3
  %7 = fmul double %5, %6
  %8 = extractelement <4 x double> %4, i32 1
  %9 = extractelement <4 x double> %4, i32 2
  %10 = fmul double %8, %9
  %11 = fsub double %7, %10
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %14 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %15 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %16 = icmp eq double* %12, getelementptr inbounds ([6 x double], [6 x double]* @_ZZN5blink15AffineTransformC1EvE9kIdentity, i64 0, i64 0)
  %17 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 -1, i64 48, i1 false)
  br i1 %16, label %20, label %18

18:                                               ; preds = %2
  %19 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* nonnull align 16 bitcast ([6 x double]* @_ZZN5blink15AffineTransformC1EvE9kIdentity to i8*), i64 48, i1 false) #13
  br label %20

20:                                               ; preds = %2, %18
  %21 = fcmp oeq double %11, 0.000000e+00
  br i1 %21, label %63, label %22

22:                                               ; preds = %20
  %23 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>
  %24 = shufflevector <4 x i1> %23, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %25 = and <4 x i1> %23, %24
  %26 = shufflevector <4 x i1> %25, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %27 = and <4 x i1> %25, %26
  %28 = extractelement <4 x i1> %27, i32 0
  br i1 %28, label %29, label %36

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %31 = load double, double* %30, align 8
  %32 = fsub double -0.000000e+00, %31
  store double %32, double* %14, align 8
  %33 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %34 = load double, double* %33, align 8
  %35 = fsub double -0.000000e+00, %34
  br label %61

36:                                               ; preds = %22
  %37 = fsub double -0.000000e+00, %8
  %38 = insertelement <2 x double> undef, double %6, i32 0
  %39 = insertelement <2 x double> %38, double %37, i32 1
  %40 = insertelement <2 x double> undef, double %11, i32 0
  %41 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %42 = fdiv <2 x double> %39, %41
  %43 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %42, <2 x double>* %43, align 8
  %44 = fsub double -0.000000e+00, %9
  %45 = insertelement <2 x double> undef, double %44, i32 0
  %46 = insertelement <2 x double> %45, double %5, i32 1
  %47 = fdiv <2 x double> %46, %41
  %48 = bitcast double* %13 to <2 x double>*
  store <2 x double> %47, <2 x double>* %48, align 8
  %49 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %50 = load double, double* %49, align 8
  %51 = fmul double %9, %50
  %52 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %53 = load double, double* %52, align 8
  %54 = fmul double %6, %53
  %55 = fsub double %51, %54
  %56 = fdiv double %55, %11
  store double %56, double* %14, align 8
  %57 = fmul double %8, %53
  %58 = fmul double %5, %50
  %59 = fsub double %57, %58
  %60 = fdiv double %59, %11
  br label %61

61:                                               ; preds = %29, %36
  %62 = phi double [ %60, %36 ], [ %35, %29 ]
  store double %62, double* %15, align 8
  br label %63

63:                                               ; preds = %61, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* returned, %"class.blink::AffineTransform"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 16
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 1.000000e+00
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %6, %9
  br i1 %10, label %11, label %65

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %65

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 1.000000e+00
  br i1 %18, label %19, label %65

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %21 = bitcast double* %20 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = extractelement <2 x double> %22, i32 0
  %24 = fcmp une double %23, 0.000000e+00
  %25 = extractelement <2 x double> %22, i32 1
  %26 = fcmp une double %25, 0.000000e+00
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %111

28:                                               ; preds = %19
  %29 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = extractelement <2 x double> %30, i32 0
  %32 = fcmp oeq double %31, 1.000000e+00
  %33 = extractelement <2 x double> %30, i32 1
  %34 = fcmp oeq double %33, 0.000000e+00
  %35 = and i1 %32, %34
  %36 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %37 = load double, double* %36, align 8
  %38 = fcmp oeq double %37, 0.000000e+00
  %39 = and i1 %35, %38
  br i1 %39, label %40, label %50

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %42 = load double, double* %41, align 8
  %43 = fcmp oeq double %42, 1.000000e+00
  br i1 %43, label %44, label %50

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %46 = bitcast double* %45 to <2 x double>*
  %47 = load <2 x double>, <2 x double>* %46, align 8
  %48 = fadd <2 x double> %22, %47
  %49 = bitcast double* %45 to <2 x double>*
  store <2 x double> %48, <2 x double>* %49, align 8
  br label %111

50:                                               ; preds = %28, %40
  %51 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %52 = shufflevector <2 x double> %22, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = fmul <2 x double> %52, %30
  %54 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %55 = load double, double* %54, align 8
  %56 = shufflevector <2 x double> %22, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %57 = insertelement <2 x double> undef, double %37, i32 0
  %58 = insertelement <2 x double> %57, double %55, i32 1
  %59 = fmul <2 x double> %56, %58
  %60 = fadd <2 x double> %53, %59
  %61 = bitcast double* %51 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 8
  %63 = fadd <2 x double> %62, %60
  %64 = bitcast double* %51 to <2 x double>*
  store <2 x double> %63, <2 x double>* %64, align 8
  br label %111

65:                                               ; preds = %2, %11, %15
  %66 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %66) #13
  %67 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 2
  %68 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 4
  %69 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %70 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %71 = load <2 x double>, <2 x double>* %70, align 8
  %72 = insertelement <2 x double> undef, double %5, i32 0
  %73 = shufflevector <2 x double> %72, <2 x double> undef, <2 x i32> zeroinitializer
  %74 = fmul <2 x double> %73, %71
  %75 = bitcast double* %69 to <2 x double>*
  %76 = load <2 x double>, <2 x double>* %75, align 8
  %77 = insertelement <2 x double> undef, double %8, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %76, %78
  %80 = fadd <2 x double> %74, %79
  %81 = bitcast %"class.blink::AffineTransform"* %3 to <2 x double>*
  store <2 x double> %80, <2 x double>* %81, align 16
  %82 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %83 = load double, double* %82, align 8
  %84 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 3
  %85 = load double, double* %84, align 8
  %86 = insertelement <2 x double> undef, double %83, i32 0
  %87 = shufflevector <2 x double> %86, <2 x double> undef, <2 x i32> zeroinitializer
  %88 = fmul <2 x double> %71, %87
  %89 = insertelement <2 x double> undef, double %85, i32 0
  %90 = shufflevector <2 x double> %89, <2 x double> undef, <2 x i32> zeroinitializer
  %91 = fmul <2 x double> %76, %90
  %92 = fadd <2 x double> %88, %91
  %93 = bitcast double* %67 to <2 x double>*
  store <2 x double> %92, <2 x double>* %93, align 16
  %94 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %95 = load double, double* %94, align 8
  %96 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %97 = load double, double* %96, align 8
  %98 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %99 = insertelement <2 x double> undef, double %95, i32 0
  %100 = shufflevector <2 x double> %99, <2 x double> undef, <2 x i32> zeroinitializer
  %101 = fmul <2 x double> %71, %100
  %102 = insertelement <2 x double> undef, double %97, i32 0
  %103 = shufflevector <2 x double> %102, <2 x double> undef, <2 x i32> zeroinitializer
  %104 = fmul <2 x double> %76, %103
  %105 = fadd <2 x double> %101, %104
  %106 = bitcast double* %98 to <2 x double>*
  %107 = load <2 x double>, <2 x double>* %106, align 8
  %108 = fadd <2 x double> %107, %105
  %109 = bitcast double* %68 to <2 x double>*
  store <2 x double> %108, <2 x double>* %109, align 16
  %110 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* nonnull align 16 %66, i64 48, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %66) #13
  br label %111

111:                                              ; preds = %19, %50, %44, %65
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform9TranslateEdd(%"class.blink::AffineTransform"* returned, double, double) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 1.000000e+00
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %6, %9
  br i1 %10, label %11, label %23

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %23

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 1.000000e+00
  br i1 %18, label %19, label %23

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %21 = load double, double* %20, align 8
  %22 = fadd double %21, %1
  store double %22, double* %20, align 8
  br label %37

23:                                               ; preds = %3, %11, %15
  %24 = fmul double %5, %1
  %25 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %26 = load double, double* %25, align 8
  %27 = fmul double %26, %2
  %28 = fadd double %24, %27
  %29 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %30 = load double, double* %29, align 8
  %31 = fadd double %30, %28
  store double %31, double* %29, align 8
  %32 = fmul double %8, %1
  %33 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %34 = load double, double* %33, align 8
  %35 = fmul double %34, %2
  %36 = fadd double %32, %35
  br label %37

37:                                               ; preds = %23, %19
  %38 = phi double [ %36, %23 ], [ %2, %19 ]
  %39 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %40 = load double, double* %39, align 8
  %41 = fadd double %40, %38
  store double %41, double* %39, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform11PreMultiplyERKS0_(%"class.blink::AffineTransform"* returned, %"class.blink::AffineTransform"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 16
  %4 = bitcast %"class.blink::AffineTransform"* %1 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = extractelement <2 x double> %5, i32 0
  %7 = fcmp oeq double %6, 1.000000e+00
  %8 = extractelement <2 x double> %5, i32 1
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %7, %9
  br i1 %10, label %11, label %36

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %36

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 1.000000e+00
  br i1 %18, label %19, label %36

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %21 = load double, double* %20, align 8
  %22 = fcmp une double %21, 0.000000e+00
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %25 = load double, double* %24, align 8
  %26 = fcmp une double %25, 0.000000e+00
  br i1 %26, label %27, label %84

27:                                               ; preds = %23, %19
  %28 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %29 = load double, double* %28, align 8
  %30 = fadd double %21, %29
  store double %30, double* %28, align 8
  %31 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %32 = load double, double* %31, align 8
  %33 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %34 = load double, double* %33, align 8
  %35 = fadd double %32, %34
  store double %35, double* %33, align 8
  br label %84

36:                                               ; preds = %2, %11, %15
  %37 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 4
  %40 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %41 = load double, double* %40, align 8
  %42 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %43 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %44 = load double, double* %43, align 8
  %45 = insertelement <2 x double> undef, double %41, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fmul <2 x double> %5, %46
  %48 = bitcast double* %42 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = insertelement <2 x double> undef, double %44, i32 0
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> zeroinitializer
  %52 = fmul <2 x double> %49, %51
  %53 = fadd <2 x double> %47, %52
  %54 = bitcast %"class.blink::AffineTransform"* %3 to <2 x double>*
  store <2 x double> %53, <2 x double>* %54, align 16
  %55 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %56 = load double, double* %55, align 8
  %57 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %58 = load double, double* %57, align 8
  %59 = insertelement <2 x double> undef, double %56, i32 0
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
  %61 = fmul <2 x double> %5, %60
  %62 = insertelement <2 x double> undef, double %58, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = fmul <2 x double> %49, %63
  %65 = fadd <2 x double> %61, %64
  %66 = bitcast double* %38 to <2 x double>*
  store <2 x double> %65, <2 x double>* %66, align 16
  %67 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %68 = load double, double* %67, align 8
  %69 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %70 = load double, double* %69, align 8
  %71 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %72 = insertelement <2 x double> undef, double %68, i32 0
  %73 = shufflevector <2 x double> %72, <2 x double> undef, <2 x i32> zeroinitializer
  %74 = fmul <2 x double> %5, %73
  %75 = insertelement <2 x double> undef, double %70, i32 0
  %76 = shufflevector <2 x double> %75, <2 x double> undef, <2 x i32> zeroinitializer
  %77 = fmul <2 x double> %49, %76
  %78 = fadd <2 x double> %74, %77
  %79 = bitcast double* %71 to <2 x double>*
  %80 = load <2 x double>, <2 x double>* %79, align 8
  %81 = fadd <2 x double> %80, %78
  %82 = bitcast double* %39 to <2 x double>*
  store <2 x double> %81, <2 x double>* %82, align 16
  %83 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* nonnull align 16 %37, i64 48, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %37) #13
  br label %84

84:                                               ; preds = %23, %27, %36
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform6RotateEd(%"class.blink::AffineTransform"* returned, double) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 8
  %4 = fmul double %1, 0x3F91DF46A2529D39
  %5 = tail call double @cos(double %4) #13
  %6 = tail call double @sin(double %4) #13
  %7 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #13
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 2
  %11 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 3
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 4
  %13 = fsub double -0.000000e+00, %6
  store double %5, double* %8, align 8
  store double %6, double* %9, align 8
  store double %13, double* %10, align 8
  store double %5, double* %11, align 8
  %14 = bitcast double* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #13
  %15 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* %0, %"class.blink::AffineTransform"* nonnull dereferenceable(48) %3) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #13
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform13RotateRadiansEd(%"class.blink::AffineTransform"* returned, double) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 8
  %4 = tail call double @cos(double %1) #13
  %5 = tail call double @sin(double %1) #13
  %6 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 1
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 2
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 3
  %11 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 4
  %12 = fsub double -0.000000e+00, %5
  store double %4, double* %7, align 8
  store double %5, double* %8, align 8
  store double %12, double* %9, align 8
  store double %4, double* %10, align 8
  %13 = bitcast double* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  %14 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* %0, %"class.blink::AffineTransform"* nonnull dereferenceable(48) %3)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #13
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5ScaleEd(%"class.blink::AffineTransform"* returned, double) local_unnamed_addr #6 align 2 {
  %3 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = insertelement <2 x double> undef, double %1, i32 0
  %6 = shufflevector <2 x double> %5, <2 x double> undef, <2 x i32> zeroinitializer
  %7 = fmul <2 x double> %4, %6
  %8 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %7, <2 x double>* %8, align 8
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fmul <2 x double> %11, %6
  %13 = bitcast double* %9 to <2 x double>*
  store <2 x double> %12, <2 x double>* %13, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5ScaleEdd(%"class.blink::AffineTransform"* returned, double, double) local_unnamed_addr #6 align 2 {
  %4 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = insertelement <2 x double> undef, double %1, i32 0
  %7 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> zeroinitializer
  %8 = fmul <2 x double> %5, %7
  %9 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = insertelement <2 x double> undef, double %2, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %12, %14
  %16 = bitcast double* %10 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform15ScaleNonUniformEdd(%"class.blink::AffineTransform"* returned, double, double) local_unnamed_addr #6 align 2 {
  %4 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = insertelement <2 x double> undef, double %1, i32 0
  %7 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> zeroinitializer
  %8 = fmul <2 x double> %5, %7
  %9 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 8
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = insertelement <2 x double> undef, double %2, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %12, %14
  %16 = bitcast double* %10 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform16RotateFromVectorEdd(%"class.blink::AffineTransform"* returned, double, double) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::AffineTransform", align 8
  %5 = tail call double @atan2(double %2, double %1) #13
  %6 = tail call double @cos(double %5) #13
  %7 = tail call double @sin(double %5) #13
  %8 = bitcast %"class.blink::AffineTransform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %8) #13
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 1
  %11 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 2
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 3
  %13 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 4
  %14 = fsub double -0.000000e+00, %7
  store double %6, double* %9, align 8
  store double %7, double* %10, align 8
  store double %14, double* %11, align 8
  store double %6, double* %12, align 8
  %15 = bitcast double* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #13
  %16 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* %0, %"class.blink::AffineTransform"* nonnull dereferenceable(48) %4) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %8) #13
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5FlipXEv(%"class.blink::AffineTransform"* returned) local_unnamed_addr #6 align 2 {
  %2 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %3 = load <2 x double>, <2 x double>* %2, align 8
  %4 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %3
  %5 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %4, <2 x double>* %5, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5FlipYEv(%"class.blink::AffineTransform"* returned) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %3 = bitcast double* %2 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %4
  %6 = bitcast double* %2 to <2 x double>*
  store <2 x double> %5, <2 x double>* %6, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5ShearEdd(%"class.blink::AffineTransform"* returned, double, double) local_unnamed_addr #6 align 2 {
  %4 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = insertelement <2 x double> undef, double %2, i32 0
  %10 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x double> %8, %10
  %12 = fadd <2 x double> %5, %11
  %13 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %12, <2 x double>* %13, align 8
  %14 = insertelement <2 x double> undef, double %1, i32 0
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> zeroinitializer
  %16 = fmul <2 x double> %5, %15
  %17 = fadd <2 x double> %16, %8
  %18 = bitcast double* %6 to <2 x double>*
  store <2 x double> %17, <2 x double>* %18, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform4SkewEdd(%"class.blink::AffineTransform"* returned, double, double) local_unnamed_addr #3 align 2 {
  %4 = fmul double %1, 0x3F91DF46A2529D39
  %5 = tail call double @tan(double %4) #13
  %6 = fmul double %2, 0x3F91DF46A2529D39
  %7 = tail call double @tan(double %6) #13
  %8 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = insertelement <2 x double> undef, double %7, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %14, %12
  %16 = fadd <2 x double> %9, %15
  %17 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 8
  %18 = insertelement <2 x double> undef, double %5, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x double> %19, %9
  %21 = fadd <2 x double> %20, %12
  %22 = bitcast double* %10 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree nounwind
declare double @tan(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5SkewXEd(%"class.blink::AffineTransform"* returned, double) local_unnamed_addr #3 align 2 {
  %3 = fmul double %1, 0x3F91DF46A2529D39
  %4 = tail call double @tan(double %3) #13
  %5 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %8 = bitcast double* %7 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = fmul <2 x double> %9, zeroinitializer
  %11 = fadd <2 x double> %6, %10
  %12 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %11, <2 x double>* %12, align 8
  %13 = insertelement <2 x double> undef, double %4, i32 0
  %14 = shufflevector <2 x double> %13, <2 x double> undef, <2 x i32> zeroinitializer
  %15 = fmul <2 x double> %14, %6
  %16 = fadd <2 x double> %15, %9
  %17 = bitcast double* %7 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform5SkewYEd(%"class.blink::AffineTransform"* returned, double) local_unnamed_addr #3 align 2 {
  %3 = fmul double %1, 0x3F91DF46A2529D39
  %4 = tail call double @tan(double %3) #13
  %5 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %8 = bitcast double* %7 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = insertelement <2 x double> undef, double %4, i32 0
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %12 = fmul <2 x double> %11, %9
  %13 = fadd <2 x double> %6, %12
  %14 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 8
  %15 = fmul <2 x double> %6, zeroinitializer
  %16 = fadd <2 x double> %15, %9
  %17 = bitcast double* %7 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 8
  ret %"class.blink::AffineTransform"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink15AffineTransform3MapEddRdS1_(%"class.blink::AffineTransform"* nocapture readonly, double, double, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %6 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %7 = load double, double* %6, align 8
  %8 = fmul double %7, %1
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %10 = load double, double* %9, align 8
  %11 = fmul double %10, %2
  %12 = fadd double %8, %11
  %13 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %3, align 8
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %17 = load double, double* %16, align 8
  %18 = fmul double %17, %1
  %19 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %20 = load double, double* %19, align 8
  %21 = fmul double %20, %2
  %22 = fadd double %18, %21
  %23 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %24 = load double, double* %23, align 8
  %25 = fadd double %24, %22
  store double %25, double* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink15AffineTransform8MapPointERKNS_8IntPointE(%"class.blink::AffineTransform"* nocapture readonly, %"class.blink::IntPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntPoint", %"class.blink::IntPoint"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = sitofp i32 %4 to double
  %6 = getelementptr inbounds %"class.blink::IntPoint", %"class.blink::IntPoint"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to double
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %10 = load double, double* %9, align 8
  %11 = fmul double %10, %5
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fmul double %13, %8
  %15 = fadd double %11, %14
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %17 = load double, double* %16, align 8
  %18 = fadd double %17, %15
  %19 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = fmul double %20, %5
  %22 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %23 = load double, double* %22, align 8
  %24 = fmul double %23, %8
  %25 = fadd double %21, %24
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %27 = load double, double* %26, align 8
  %28 = fadd double %27, %25
  %29 = tail call i64 @lround(double %18) #13
  %30 = tail call i64 @lround(double %28) #13
  %31 = shl i64 %30, 32
  %32 = and i64 %29, 4294967295
  %33 = or i64 %31, %32
  ret i64 %33
}

; Function Attrs: nounwind
declare i64 @lround(double) local_unnamed_addr #7

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #8 align 2 {
  %3 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = fpext <2 x float> %4 to <2 x double>
  %6 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %9 = load double, double* %8, align 8
  %10 = insertelement <2 x double> undef, double %7, i32 0
  %11 = insertelement <2 x double> %10, double %9, i32 1
  %12 = fmul <2 x double> %11, %5
  %13 = extractelement <2 x double> %12, i32 0
  %14 = extractelement <2 x double> %12, i32 1
  %15 = fadd double %13, %14
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %17 = load double, double* %16, align 8
  %18 = fadd double %17, %15
  %19 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = extractelement <2 x double> %5, i32 0
  %22 = fmul double %20, %21
  %23 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %24 = load double, double* %23, align 8
  %25 = extractelement <2 x double> %5, i32 1
  %26 = fmul double %24, %25
  %27 = fadd double %22, %26
  %28 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %29 = load double, double* %28, align 8
  %30 = fadd double %29, %27
  %31 = fcmp ult double %18, 0x47EFFFFFE0000000
  br i1 %31, label %32, label %36

32:                                               ; preds = %2
  %33 = fcmp ole double %18, 0xC7EFFFFFE0000000
  %34 = select i1 %33, double 0xC7EFFFFFE0000000, double %18
  %35 = fptrunc double %34 to float
  br label %36

36:                                               ; preds = %2, %32
  %37 = phi float [ %35, %32 ], [ 0x47EFFFFFE0000000, %2 ]
  %38 = fcmp ult double %30, 0x47EFFFFFE0000000
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = fcmp ole double %30, 0xC7EFFFFFE0000000
  %41 = select i1 %40, double 0xC7EFFFFFE0000000, double %30
  %42 = fptrunc double %41 to float
  br label %43

43:                                               ; preds = %36, %39
  %44 = phi float [ %42, %39 ], [ 0x47EFFFFFE0000000, %36 ]
  %45 = insertelement <2 x float> undef, float %37, i32 0
  %46 = insertelement <2 x float> %45, float %44, i32 1
  ret <2 x float> %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink15AffineTransform7MapSizeERKNS_7IntSizeE(%"class.blink::AffineTransform"* nocapture readonly, %"class.blink::IntSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IntSize", %"class.blink::IntSize"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = sitofp i32 %4 to double
  %6 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fmul <2 x double> %7, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = extractelement <2 x double> %8, i32 1
  %11 = fadd double %9, %10
  %12 = tail call double @sqrt(double %11) #13
  %13 = fmul double %12, %5
  %14 = getelementptr inbounds %"class.blink::IntSize", %"class.blink::IntSize"* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %18 = bitcast double* %17 to <2 x double>*
  %19 = load <2 x double>, <2 x double>* %18, align 8
  %20 = fmul <2 x double> %19, %19
  %21 = extractelement <2 x double> %20, i32 0
  %22 = extractelement <2 x double> %20, i32 1
  %23 = fadd double %21, %22
  %24 = tail call double @sqrt(double %23) #13
  %25 = fmul double %24, %16
  %26 = tail call i64 @lround(double %13) #13
  %27 = tail call i64 @lround(double %25) #13
  %28 = shl i64 %27, 32
  %29 = and i64 %26, 4294967295
  %30 = or i64 %28, %29
  ret i64 %30
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden <2 x float> @_ZNK5blink15AffineTransform7MapSizeERKNS_9FloatSizeE(%"class.blink::AffineTransform"* nocapture readonly, %"class.blink::FloatSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fmul <2 x double> %7, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = extractelement <2 x double> %8, i32 1
  %11 = fadd double %9, %10
  %12 = tail call double @sqrt(double %11) #13
  %13 = fmul double %12, %5
  %14 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %1, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = fmul double %18, %18
  %20 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %21 = load double, double* %20, align 8
  %22 = fmul double %21, %21
  %23 = fadd double %19, %22
  %24 = tail call double @sqrt(double %23) #13
  %25 = fmul double %24, %16
  %26 = fcmp ult double %13, 0x47EFFFFFE0000000
  br i1 %26, label %27, label %31

27:                                               ; preds = %2
  %28 = fcmp ole double %13, 0xC7EFFFFFE0000000
  %29 = select i1 %28, double 0xC7EFFFFFE0000000, double %13
  %30 = fptrunc double %29 to float
  br label %31

31:                                               ; preds = %2, %27
  %32 = phi float [ %30, %27 ], [ 0x47EFFFFFE0000000, %2 ]
  %33 = fcmp ult double %25, 0x47EFFFFFE0000000
  br i1 %33, label %34, label %38

34:                                               ; preds = %31
  %35 = fcmp ole double %25, 0xC7EFFFFFE0000000
  %36 = select i1 %35, double 0xC7EFFFFFE0000000, double %25
  %37 = fptrunc double %36 to float
  br label %38

38:                                               ; preds = %31, %34
  %39 = phi float [ %37, %34 ], [ 0x47EFFFFFE0000000, %31 ]
  %40 = insertelement <2 x float> undef, float %32, i32 0
  %41 = insertelement <2 x float> %40, float %39, i32 1
  ret <2 x float> %41
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink15AffineTransform7MapRectERKNS_7IntRectE(%"class.blink::AffineTransform"*, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #10 align 2 {
  %3 = alloca <4 x float>, align 16
  %4 = bitcast <4 x float>* %3 to %"class.blink::FloatRect"*
  %5 = bitcast <4 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #13
  %6 = bitcast %"class.blink::IntRect"* %1 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 4
  %8 = sitofp <4 x i32> %7 to <4 x float>
  store <4 x float> %8, <4 x float>* %3, align 16
  %9 = call { <2 x float>, <2 x float> } @_ZNK5blink15AffineTransform7MapRectERKNS_9FloatRectE(%"class.blink::AffineTransform"* %0, %"class.blink::FloatRect"* nonnull dereferenceable(16) %4)
  %10 = extractvalue { <2 x float>, <2 x float> } %9, 0
  %11 = extractvalue { <2 x float>, <2 x float> } %9, 1
  %12 = extractelement <2 x float> %10, i32 0
  %13 = tail call float @llvm.floor.f32(float %12) #13
  %14 = fpext float %13 to double
  %15 = fcmp ult double %14, 0x41DFFFFFFFC00000
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = fcmp ugt float %13, 0xC1E0000000000000
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = fptosi float %13 to i32
  %20 = zext i32 %19 to i64
  br label %21

21:                                               ; preds = %18, %16, %2
  %22 = phi i64 [ %20, %18 ], [ 2147483647, %2 ], [ 2147483648, %16 ]
  %23 = extractelement <2 x float> %10, i32 1
  %24 = tail call float @llvm.floor.f32(float %23) #13
  %25 = fpext float %24 to double
  %26 = fcmp ult double %25, 0x41DFFFFFFFC00000
  br i1 %26, label %27, label %33

27:                                               ; preds = %21
  %28 = fcmp ugt float %24, 0xC1E0000000000000
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = fptosi float %24 to i32
  %31 = zext i32 %30 to i64
  %32 = shl nuw i64 %31, 32
  br label %33

33:                                               ; preds = %29, %27, %21
  %34 = phi i64 [ %32, %29 ], [ 9223372032559808512, %21 ], [ -9223372036854775808, %27 ]
  %35 = trunc i64 %22 to i32
  %36 = lshr exact i64 %34, 32
  %37 = trunc i64 %36 to i32
  %38 = extractelement <2 x float> %11, i32 0
  %39 = fadd float %12, %38
  %40 = extractelement <2 x float> %11, i32 1
  %41 = fadd float %23, %40
  %42 = tail call float @llvm.ceil.f32(float %39) #13
  %43 = fpext float %42 to double
  %44 = fcmp ult double %43, 0x41DFFFFFFFC00000
  br i1 %44, label %45, label %49

45:                                               ; preds = %33
  %46 = fcmp ugt float %42, 0xC1E0000000000000
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = fptosi float %42 to i32
  br label %49

49:                                               ; preds = %47, %45, %33
  %50 = phi i32 [ %48, %47 ], [ 2147483647, %33 ], [ -2147483648, %45 ]
  %51 = tail call float @llvm.ceil.f32(float %41) #13
  %52 = fpext float %51 to double
  %53 = fcmp ult double %52, 0x41DFFFFFFFC00000
  br i1 %53, label %54, label %58

54:                                               ; preds = %49
  %55 = fcmp ugt float %51, 0xC1E0000000000000
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = fptosi float %51 to i32
  br label %58

58:                                               ; preds = %49, %54, %56
  %59 = phi i32 [ %57, %56 ], [ 2147483647, %49 ], [ -2147483648, %54 ]
  %60 = icmp sgt i32 %35, -1
  %61 = select i1 %60, i32 -2147483648, i32 2147483647
  %62 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %50, i32 %35) #13
  %63 = extractvalue { i32, i1 } %62, 1
  %64 = extractvalue { i32, i1 } %62, 0
  %65 = select i1 %63, i32 %61, i32 %64, !prof !2
  %66 = icmp sgt i32 %37, -1
  %67 = select i1 %66, i32 -2147483648, i32 2147483647
  %68 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %59, i32 %37) #13
  %69 = extractvalue { i32, i1 } %68, 1
  %70 = extractvalue { i32, i1 } %68, 0
  %71 = select i1 %69, i32 %67, i32 %70, !prof !2
  %72 = or i64 %34, %22
  %73 = zext i32 %71 to i64
  %74 = shl nuw i64 %73, 32
  %75 = zext i32 %65 to i64
  %76 = or i64 %74, %75
  %77 = insertvalue { i64, i64 } undef, i64 %72, 0
  %78 = insertvalue { i64, i64 } %77, i64 %76, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #13
  ret { i64, i64 } %78
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink15AffineTransform7MapRectERKNS_9FloatRectE(%"class.blink::AffineTransform"* readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #10 align 2 {
  %3 = alloca %"class.blink::FloatQuad", align 8
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 1.000000e+00
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %6, %9
  br i1 %10, label %11, label %58

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %58

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 1.000000e+00
  br i1 %18, label %19, label %58

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %21 = load double, double* %20, align 8
  %22 = fcmp une double %21, 0.000000e+00
  br i1 %22, label %33, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %25 = load double, double* %24, align 8
  %26 = fcmp une double %25, 0.000000e+00
  br i1 %26, label %33, label %27

27:                                               ; preds = %23
  %28 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1
  %31 = bitcast %"class.blink::FloatSize"* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  br label %191

33:                                               ; preds = %23, %19
  %34 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 4
  %36 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1
  %37 = bitcast %"class.blink::FloatSize"* %36 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = fcmp ult double %21, 0x47EFFFFFE0000000
  br i1 %39, label %40, label %44

40:                                               ; preds = %33
  %41 = fcmp ole double %21, 0xC7EFFFFFE0000000
  %42 = select i1 %41, double 0xC7EFFFFFE0000000, double %21
  %43 = fptrunc double %42 to float
  br label %44

44:                                               ; preds = %33, %40
  %45 = phi float [ %43, %40 ], [ 0x47EFFFFFE0000000, %33 ]
  %46 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %47 = load double, double* %46, align 8
  %48 = fcmp ult double %47, 0x47EFFFFFE0000000
  br i1 %48, label %49, label %53

49:                                               ; preds = %44
  %50 = fcmp ole double %47, 0xC7EFFFFFE0000000
  %51 = select i1 %50, double 0xC7EFFFFFE0000000, double %47
  %52 = fptrunc double %51 to float
  br label %53

53:                                               ; preds = %44, %49
  %54 = phi float [ %52, %49 ], [ 0x47EFFFFFE0000000, %44 ]
  %55 = insertelement <2 x float> undef, float %45, i32 0
  %56 = insertelement <2 x float> %55, float %54, i32 1
  %57 = fadd <2 x float> %35, %56
  br label %191

58:                                               ; preds = %2, %11, %15
  %59 = bitcast %"class.blink::FloatQuad"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %59) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 0, i64 32, i1 false) #13
  %60 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 4
  %62 = fpext <2 x float> %61 to <2 x double>
  %63 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %64 = load double, double* %63, align 8
  %65 = insertelement <2 x double> undef, double %5, i32 0
  %66 = insertelement <2 x double> %65, double %64, i32 1
  %67 = fmul <2 x double> %66, %62
  %68 = extractelement <2 x double> %67, i32 0
  %69 = extractelement <2 x double> %67, i32 1
  %70 = fadd double %68, %69
  %71 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %72 = load double, double* %71, align 8
  %73 = fadd double %72, %70
  %74 = extractelement <2 x double> %62, i32 0
  %75 = fmul double %8, %74
  %76 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %77 = load double, double* %76, align 8
  %78 = extractelement <2 x double> %62, i32 1
  %79 = fmul double %77, %78
  %80 = fadd double %75, %79
  %81 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %82 = load double, double* %81, align 8
  %83 = fadd double %82, %80
  %84 = fcmp ult double %73, 0x47EFFFFFE0000000
  %85 = extractelement <2 x float> %61, i32 0
  br i1 %84, label %86, label %90

86:                                               ; preds = %58
  %87 = fcmp ole double %73, 0xC7EFFFFFE0000000
  %88 = select i1 %87, double 0xC7EFFFFFE0000000, double %73
  %89 = fptrunc double %88 to float
  br label %90

90:                                               ; preds = %86, %58
  %91 = phi float [ %89, %86 ], [ 0x47EFFFFFE0000000, %58 ]
  %92 = fcmp ult double %83, 0x47EFFFFFE0000000
  br i1 %92, label %93, label %97

93:                                               ; preds = %90
  %94 = fcmp ole double %83, 0xC7EFFFFFE0000000
  %95 = select i1 %94, double 0xC7EFFFFFE0000000, double %83
  %96 = fptrunc double %95 to float
  br label %97

97:                                               ; preds = %90, %93
  %98 = phi float [ %96, %93 ], [ 0x47EFFFFFE0000000, %90 ]
  %99 = insertelement <2 x float> undef, float %91, i32 0
  %100 = insertelement <2 x float> %99, float %98, i32 1
  %101 = bitcast %"class.blink::FloatQuad"* %3 to <2 x float>*
  store <2 x float> %100, <2 x float>* %101, align 8
  %102 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %103 = load float, float* %102, align 4
  %104 = fadd float %85, %103
  %105 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %106 = load float, float* %105, align 4
  %107 = fpext float %104 to double
  %108 = fpext float %106 to double
  %109 = fmul double %5, %107
  %110 = fmul double %64, %108
  %111 = fadd double %109, %110
  %112 = fadd double %72, %111
  %113 = fmul double %8, %107
  %114 = fmul double %77, %108
  %115 = fadd double %113, %114
  %116 = fadd double %82, %115
  %117 = fcmp ult double %112, 0x47EFFFFFE0000000
  br i1 %117, label %118, label %122

118:                                              ; preds = %97
  %119 = fcmp ole double %112, 0xC7EFFFFFE0000000
  %120 = select i1 %119, double 0xC7EFFFFFE0000000, double %112
  %121 = fptrunc double %120 to float
  br label %122

122:                                              ; preds = %118, %97
  %123 = phi float [ %121, %118 ], [ 0x47EFFFFFE0000000, %97 ]
  %124 = fcmp ult double %116, 0x47EFFFFFE0000000
  br i1 %124, label %125, label %129

125:                                              ; preds = %122
  %126 = fcmp ole double %116, 0xC7EFFFFFE0000000
  %127 = select i1 %126, double 0xC7EFFFFFE0000000, double %116
  %128 = fptrunc double %127 to float
  br label %129

129:                                              ; preds = %122, %125
  %130 = phi float [ %128, %125 ], [ 0x47EFFFFFE0000000, %122 ]
  %131 = insertelement <2 x float> undef, float %123, i32 0
  %132 = insertelement <2 x float> %131, float %130, i32 1
  %133 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %3, i64 0, i32 1
  %134 = bitcast %"class.blink::FloatPoint"* %133 to <2 x float>*
  store <2 x float> %132, <2 x float>* %134, align 8
  %135 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %136 = load float, float* %135, align 4
  %137 = fadd float %106, %136
  %138 = fpext float %137 to double
  %139 = fmul double %64, %138
  %140 = fadd double %109, %139
  %141 = fadd double %72, %140
  %142 = fmul double %77, %138
  %143 = fadd double %113, %142
  %144 = fadd double %82, %143
  %145 = fcmp ult double %141, 0x47EFFFFFE0000000
  br i1 %145, label %146, label %150

146:                                              ; preds = %129
  %147 = fcmp ole double %141, 0xC7EFFFFFE0000000
  %148 = select i1 %147, double 0xC7EFFFFFE0000000, double %141
  %149 = fptrunc double %148 to float
  br label %150

150:                                              ; preds = %146, %129
  %151 = phi float [ %149, %146 ], [ 0x47EFFFFFE0000000, %129 ]
  %152 = fcmp ult double %144, 0x47EFFFFFE0000000
  br i1 %152, label %153, label %157

153:                                              ; preds = %150
  %154 = fcmp ole double %144, 0xC7EFFFFFE0000000
  %155 = select i1 %154, double 0xC7EFFFFFE0000000, double %144
  %156 = fptrunc double %155 to float
  br label %157

157:                                              ; preds = %150, %153
  %158 = phi float [ %156, %153 ], [ 0x47EFFFFFE0000000, %150 ]
  %159 = insertelement <2 x float> undef, float %151, i32 0
  %160 = insertelement <2 x float> %159, float %158, i32 1
  %161 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %3, i64 0, i32 2
  %162 = bitcast %"class.blink::FloatPoint"* %161 to <2 x float>*
  store <2 x float> %160, <2 x float>* %162, align 8
  %163 = fpext float %85 to double
  %164 = fmul double %5, %163
  %165 = fadd double %164, %139
  %166 = fadd double %72, %165
  %167 = fmul double %8, %163
  %168 = fadd double %167, %142
  %169 = fadd double %82, %168
  %170 = fcmp ult double %166, 0x47EFFFFFE0000000
  br i1 %170, label %171, label %175

171:                                              ; preds = %157
  %172 = fcmp ole double %166, 0xC7EFFFFFE0000000
  %173 = select i1 %172, double 0xC7EFFFFFE0000000, double %166
  %174 = fptrunc double %173 to float
  br label %175

175:                                              ; preds = %171, %157
  %176 = phi float [ %174, %171 ], [ 0x47EFFFFFE0000000, %157 ]
  %177 = fcmp ult double %169, 0x47EFFFFFE0000000
  br i1 %177, label %178, label %182

178:                                              ; preds = %175
  %179 = fcmp ole double %169, 0xC7EFFFFFE0000000
  %180 = select i1 %179, double 0xC7EFFFFFE0000000, double %169
  %181 = fptrunc double %180 to float
  br label %182

182:                                              ; preds = %175, %178
  %183 = phi float [ %181, %178 ], [ 0x47EFFFFFE0000000, %175 ]
  %184 = insertelement <2 x float> undef, float %176, i32 0
  %185 = insertelement <2 x float> %184, float %183, i32 1
  %186 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %3, i64 0, i32 3
  %187 = bitcast %"class.blink::FloatPoint"* %186 to <2 x float>*
  store <2 x float> %185, <2 x float>* %187, align 8
  %188 = call { <2 x float>, <2 x float> } @_ZNK5blink9FloatQuad11BoundingBoxEv(%"class.blink::FloatQuad"* nonnull %3) #13
  %189 = extractvalue { <2 x float>, <2 x float> } %188, 0
  %190 = extractvalue { <2 x float>, <2 x float> } %188, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %59) #13
  br label %191

191:                                              ; preds = %182, %53, %27
  %192 = phi <2 x float> [ %57, %53 ], [ %29, %27 ], [ %189, %182 ]
  %193 = phi <2 x float> [ %38, %53 ], [ %32, %27 ], [ %190, %182 ]
  %194 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %192, 0
  %195 = insertvalue { <2 x float>, <2 x float> } %194, <2 x float> %193, 1
  ret { <2 x float>, <2 x float> } %195
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare { <2 x float>, <2 x float> } @_ZNK5blink9FloatQuad11BoundingBoxEv(%"class.blink::FloatQuad"*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15AffineTransform7MapQuadERKNS_9FloatQuadE(%"class.blink::FloatQuad"* noalias nocapture sret, %"class.blink::AffineTransform"* readonly, %"class.blink::FloatQuad"* nocapture readonly dereferenceable(32)) local_unnamed_addr #10 align 2 {
  %4 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = fcmp oeq double %5, 1.000000e+00
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = fcmp oeq double %8, 0.000000e+00
  %10 = and i1 %6, %9
  br i1 %10, label %11, label %53

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %15, label %53

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 3
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 1.000000e+00
  br i1 %18, label %19, label %53

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %21 = bitcast %"class.blink::FloatQuad"* %0 to i8*
  %22 = bitcast %"class.blink::FloatQuad"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 32, i1 false)
  %23 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %24 = load double, double* %23, align 8
  %25 = fcmp ult double %24, 0x47EFFFFFE0000000
  br i1 %25, label %26, label %30

26:                                               ; preds = %19
  %27 = fcmp ole double %24, 0xC7EFFFFFE0000000
  %28 = select i1 %27, double 0xC7EFFFFFE0000000, double %24
  %29 = fptrunc double %28 to float
  br label %30

30:                                               ; preds = %19, %26
  %31 = phi float [ %29, %26 ], [ 0x47EFFFFFE0000000, %19 ]
  %32 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %33 = load double, double* %32, align 8
  %34 = fcmp ult double %33, 0x47EFFFFFE0000000
  br i1 %34, label %35, label %39

35:                                               ; preds = %30
  %36 = fcmp ole double %33, 0xC7EFFFFFE0000000
  %37 = select i1 %36, double 0xC7EFFFFFE0000000, double %33
  %38 = fptrunc double %37 to float
  br label %39

39:                                               ; preds = %30, %35
  %40 = phi float [ %38, %35 ], [ 0x47EFFFFFE0000000, %30 ]
  %41 = bitcast %"class.blink::FloatQuad"* %0 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4
  %43 = insertelement <2 x float> undef, float %31, i32 0
  %44 = insertelement <2 x float> %43, float %40, i32 1
  %45 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %46 = fadd <4 x float> %45, %42
  %47 = bitcast %"class.blink::FloatQuad"* %0 to <4 x float>*
  store <4 x float> %46, <4 x float>* %47, align 4
  %48 = bitcast float* %20 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4
  %50 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %51 = fadd <4 x float> %50, %49
  %52 = bitcast float* %20 to <4 x float>*
  store <4 x float> %51, <4 x float>* %52, align 4
  br label %187

53:                                               ; preds = %3, %11, %15
  %54 = bitcast %"class.blink::FloatQuad"* %2 to <2 x float>*
  %55 = load <2 x float>, <2 x float>* %54, align 4
  %56 = fpext <2 x float> %55 to <2 x double>
  %57 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %58 = load double, double* %57, align 8
  %59 = insertelement <2 x double> undef, double %5, i32 0
  %60 = insertelement <2 x double> %59, double %58, i32 1
  %61 = fmul <2 x double> %60, %56
  %62 = extractelement <2 x double> %61, i32 0
  %63 = extractelement <2 x double> %61, i32 1
  %64 = fadd double %62, %63
  %65 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %66 = load double, double* %65, align 8
  %67 = fadd double %66, %64
  %68 = extractelement <2 x double> %56, i32 0
  %69 = fmul double %8, %68
  %70 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 3
  %71 = load double, double* %70, align 8
  %72 = extractelement <2 x double> %56, i32 1
  %73 = fmul double %71, %72
  %74 = fadd double %69, %73
  %75 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 5
  %76 = load double, double* %75, align 8
  %77 = fadd double %76, %74
  %78 = fcmp ult double %67, 0x47EFFFFFE0000000
  br i1 %78, label %79, label %83

79:                                               ; preds = %53
  %80 = fcmp ole double %67, 0xC7EFFFFFE0000000
  %81 = select i1 %80, double 0xC7EFFFFFE0000000, double %67
  %82 = fptrunc double %81 to float
  br label %83

83:                                               ; preds = %79, %53
  %84 = phi float [ %82, %79 ], [ 0x47EFFFFFE0000000, %53 ]
  %85 = fcmp ult double %77, 0x47EFFFFFE0000000
  br i1 %85, label %86, label %90

86:                                               ; preds = %83
  %87 = fcmp ole double %77, 0xC7EFFFFFE0000000
  %88 = select i1 %87, double 0xC7EFFFFFE0000000, double %77
  %89 = fptrunc double %88 to float
  br label %90

90:                                               ; preds = %83, %86
  %91 = phi float [ %89, %86 ], [ 0x47EFFFFFE0000000, %83 ]
  %92 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 1
  %93 = bitcast %"class.blink::FloatPoint"* %92 to <2 x float>*
  %94 = load <2 x float>, <2 x float>* %93, align 4
  %95 = fpext <2 x float> %94 to <2 x double>
  %96 = fmul <2 x double> %60, %95
  %97 = extractelement <2 x double> %96, i32 0
  %98 = extractelement <2 x double> %96, i32 1
  %99 = fadd double %97, %98
  %100 = fadd double %66, %99
  %101 = extractelement <2 x double> %95, i32 0
  %102 = fmul double %8, %101
  %103 = extractelement <2 x double> %95, i32 1
  %104 = fmul double %71, %103
  %105 = fadd double %102, %104
  %106 = fadd double %76, %105
  %107 = fcmp ult double %100, 0x47EFFFFFE0000000
  br i1 %107, label %108, label %112

108:                                              ; preds = %90
  %109 = fcmp ole double %100, 0xC7EFFFFFE0000000
  %110 = select i1 %109, double 0xC7EFFFFFE0000000, double %100
  %111 = fptrunc double %110 to float
  br label %112

112:                                              ; preds = %108, %90
  %113 = phi float [ %111, %108 ], [ 0x47EFFFFFE0000000, %90 ]
  %114 = fcmp ult double %106, 0x47EFFFFFE0000000
  br i1 %114, label %115, label %119

115:                                              ; preds = %112
  %116 = fcmp ole double %106, 0xC7EFFFFFE0000000
  %117 = select i1 %116, double 0xC7EFFFFFE0000000, double %106
  %118 = fptrunc double %117 to float
  br label %119

119:                                              ; preds = %112, %115
  %120 = phi float [ %118, %115 ], [ 0x47EFFFFFE0000000, %112 ]
  %121 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 2
  %122 = bitcast %"class.blink::FloatPoint"* %121 to <2 x float>*
  %123 = load <2 x float>, <2 x float>* %122, align 4
  %124 = fpext <2 x float> %123 to <2 x double>
  %125 = fmul <2 x double> %60, %124
  %126 = extractelement <2 x double> %125, i32 0
  %127 = extractelement <2 x double> %125, i32 1
  %128 = fadd double %126, %127
  %129 = fadd double %66, %128
  %130 = extractelement <2 x double> %124, i32 0
  %131 = fmul double %8, %130
  %132 = extractelement <2 x double> %124, i32 1
  %133 = fmul double %71, %132
  %134 = fadd double %131, %133
  %135 = fadd double %76, %134
  %136 = fcmp ult double %129, 0x47EFFFFFE0000000
  br i1 %136, label %137, label %141

137:                                              ; preds = %119
  %138 = fcmp ole double %129, 0xC7EFFFFFE0000000
  %139 = select i1 %138, double 0xC7EFFFFFE0000000, double %129
  %140 = fptrunc double %139 to float
  br label %141

141:                                              ; preds = %137, %119
  %142 = phi float [ %140, %137 ], [ 0x47EFFFFFE0000000, %119 ]
  %143 = fcmp ult double %135, 0x47EFFFFFE0000000
  br i1 %143, label %144, label %148

144:                                              ; preds = %141
  %145 = fcmp ole double %135, 0xC7EFFFFFE0000000
  %146 = select i1 %145, double 0xC7EFFFFFE0000000, double %135
  %147 = fptrunc double %146 to float
  br label %148

148:                                              ; preds = %141, %144
  %149 = phi float [ %147, %144 ], [ 0x47EFFFFFE0000000, %141 ]
  %150 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %2, i64 0, i32 3
  %151 = bitcast %"class.blink::FloatPoint"* %150 to <2 x float>*
  %152 = load <2 x float>, <2 x float>* %151, align 4
  %153 = fpext <2 x float> %152 to <2 x double>
  %154 = fmul <2 x double> %60, %153
  %155 = extractelement <2 x double> %154, i32 0
  %156 = extractelement <2 x double> %154, i32 1
  %157 = fadd double %155, %156
  %158 = fadd double %66, %157
  %159 = extractelement <2 x double> %153, i32 0
  %160 = fmul double %8, %159
  %161 = extractelement <2 x double> %153, i32 1
  %162 = fmul double %71, %161
  %163 = fadd double %160, %162
  %164 = fadd double %76, %163
  %165 = fcmp ult double %158, 0x47EFFFFFE0000000
  br i1 %165, label %166, label %170

166:                                              ; preds = %148
  %167 = fcmp ole double %158, 0xC7EFFFFFE0000000
  %168 = select i1 %167, double 0xC7EFFFFFE0000000, double %158
  %169 = fptrunc double %168 to float
  br label %170

170:                                              ; preds = %166, %148
  %171 = phi float [ %169, %166 ], [ 0x47EFFFFFE0000000, %148 ]
  %172 = fcmp ult double %164, 0x47EFFFFFE0000000
  br i1 %172, label %173, label %177

173:                                              ; preds = %170
  %174 = fcmp ole double %164, 0xC7EFFFFFE0000000
  %175 = select i1 %174, double 0xC7EFFFFFE0000000, double %164
  %176 = fptrunc double %175 to float
  br label %177

177:                                              ; preds = %170, %173
  %178 = phi float [ %176, %173 ], [ 0x47EFFFFFE0000000, %170 ]
  %179 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 0
  store float %84, float* %179, align 4
  %180 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 1
  store float %91, float* %180, align 4
  %181 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  store float %113, float* %181, align 4
  %182 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 1
  store float %120, float* %182, align 4
  %183 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  store float %142, float* %183, align 4
  %184 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 1
  store float %149, float* %184, align 4
  %185 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  store float %171, float* %185, align 4
  %186 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 1
  store float %178, float* %186, align 4
  br label %187

187:                                              ; preds = %177, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15AffineTransform22ToTransformationMatrixEv(%"class.blink::TransformationMatrix"* noalias nocapture sret, %"class.blink::AffineTransform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::AffineTransform"* %1 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 2
  %6 = bitcast double* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %1, i64 0, i32 0, i64 4
  %9 = bitcast double* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = bitcast %"class.blink::TransformationMatrix"* %0 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %11, align 8
  %12 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %13 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %14 = bitcast double* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #13
  %15 = bitcast double* %13 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %15, align 8
  %16 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %17 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %18 = bitcast double* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false) #13
  %19 = bitcast double* %17 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %19, align 8
  %20 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %21 = bitcast double* %20 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %23 = bitcast double* %22 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %23, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15AffineTransform9DecomposeERNS0_14DecomposedTypeE(%"class.blink::AffineTransform"* nocapture readonly, %"struct.blink::AffineTransform::DecomposedType"* nocapture dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 8
  %4 = alloca %"class.blink::AffineTransform", align 16
  %5 = bitcast %"class.blink::AffineTransform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 2
  %7 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %4, i64 0, i32 0, i64 4
  %8 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 %8, i64 48, i1 false)
  %9 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %10 = load double, double* %9, align 8
  %11 = fmul double %10, %10
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %13 = load double, double* %12, align 8
  %14 = fmul double %13, %13
  %15 = fadd double %11, %14
  %16 = tail call double @sqrt(double %15) #13
  %17 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = fmul double %18, %18
  %20 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %21 = load double, double* %20, align 8
  %22 = fmul double %21, %21
  %23 = fadd double %19, %22
  %24 = tail call double @sqrt(double %23) #13
  %25 = bitcast %"class.blink::AffineTransform"* %4 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 16
  %27 = bitcast double* %6 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 16
  %29 = shufflevector <2 x double> %26, <2 x double> %28, <2 x i32> <i32 0, i32 2>
  %30 = shufflevector <2 x double> %28, <2 x double> %26, <2 x i32> <i32 1, i32 3>
  %31 = fmul <2 x double> %29, %30
  %32 = extractelement <2 x double> %31, i32 0
  %33 = extractelement <2 x double> %31, i32 1
  %34 = fsub double %32, %33
  %35 = fcmp olt double %34, 0.000000e+00
  br i1 %35, label %36, label %44

36:                                               ; preds = %2
  %37 = extractelement <2 x double> %28, i32 1
  %38 = extractelement <2 x double> %26, i32 0
  %39 = fcmp olt double %38, %37
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = fsub double -0.000000e+00, %16
  br label %44

42:                                               ; preds = %36
  %43 = fsub double -0.000000e+00, %24
  br label %44

44:                                               ; preds = %40, %42, %2
  %45 = phi double [ %24, %40 ], [ %43, %42 ], [ %24, %2 ]
  %46 = phi double [ %41, %40 ], [ %16, %42 ], [ %16, %2 ]
  %47 = fdiv double 1.000000e+00, %46
  %48 = fdiv double 1.000000e+00, %45
  %49 = insertelement <2 x double> undef, double %47, i32 0
  %50 = shufflevector <2 x double> %49, <2 x double> undef, <2 x i32> zeroinitializer
  %51 = fmul <2 x double> %26, %50
  %52 = bitcast %"class.blink::AffineTransform"* %4 to <2 x double>*
  store <2 x double> %51, <2 x double>* %52, align 16
  %53 = insertelement <2 x double> undef, double %48, i32 0
  %54 = shufflevector <2 x double> %53, <2 x double> undef, <2 x i32> zeroinitializer
  %55 = fmul <2 x double> %28, %54
  %56 = bitcast double* %6 to <2 x double>*
  store <2 x double> %55, <2 x double>* %56, align 16
  %57 = extractelement <2 x double> %51, i32 0
  %58 = extractelement <2 x double> %51, i32 1
  %59 = tail call double @atan2(double %58, double %57) #13
  %60 = tail call double @cos(double %59)
  %61 = tail call double @sin(double %59)
  %62 = fsub double -0.000000e+00, %61
  %63 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %63) #13
  %64 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 0
  %65 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 1
  %66 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 2
  %67 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 3
  %68 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 4
  store double %60, double* %64, align 8
  store double %62, double* %65, align 8
  store double %61, double* %66, align 8
  store double %60, double* %67, align 8
  %69 = bitcast double* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 16, i1 false) #13
  %70 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* nonnull %4, %"class.blink::AffineTransform"* nonnull dereferenceable(48) %3) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %63) #13
  %71 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 0
  store double %46, double* %71, align 8
  %72 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 1
  store double %45, double* %72, align 8
  %73 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 2
  store double %59, double* %73, align 8
  %74 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 3
  %75 = bitcast %"class.blink::AffineTransform"* %4 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 16
  %77 = bitcast double* %74 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 5
  %79 = bitcast double* %6 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 16
  %81 = bitcast double* %78 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %81, align 8
  %82 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 7
  %83 = bitcast double* %7 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 16
  %85 = bitcast double* %82 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %85, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #13
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15AffineTransform9RecomposeERKNS0_14DecomposedTypeE(%"class.blink::AffineTransform"*, %"struct.blink::AffineTransform::DecomposedType"* nocapture readonly dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::AffineTransform", align 8
  %4 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 3
  %5 = bitcast double* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.blink::AffineTransform"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 4
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %12 = bitcast double* %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 5
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %17 = bitcast double* %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 6
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 7
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %27 = bitcast double* %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 8
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %32 = bitcast double* %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 2
  %34 = load double, double* %33, align 8
  %35 = tail call double @cos(double %34) #13
  %36 = tail call double @sin(double %34) #13
  %37 = bitcast %"class.blink::AffineTransform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 0
  %39 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 1
  %40 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 2
  %41 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 3
  %42 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %3, i64 0, i32 0, i64 4
  %43 = fsub double -0.000000e+00, %36
  store double %35, double* %38, align 8
  store double %36, double* %39, align 8
  store double %43, double* %40, align 8
  store double %35, double* %41, align 8
  %44 = bitcast double* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 16, i1 false) #13
  %45 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform8MultiplyERKS0_(%"class.blink::AffineTransform"* %0, %"class.blink::AffineTransform"* nonnull dereferenceable(48) %3) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %37) #13
  %46 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %1, i64 0, i32 1
  %49 = load double, double* %48, align 8
  %50 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  %51 = load <2 x double>, <2 x double>* %50, align 8
  %52 = insertelement <2 x double> undef, double %47, i32 0
  %53 = shufflevector <2 x double> %52, <2 x double> undef, <2 x i32> zeroinitializer
  %54 = fmul <2 x double> %53, %51
  %55 = bitcast %"class.blink::AffineTransform"* %0 to <2 x double>*
  store <2 x double> %54, <2 x double>* %55, align 8
  %56 = bitcast double* %16 to <2 x double>*
  %57 = load <2 x double>, <2 x double>* %56, align 8
  %58 = insertelement <2 x double> undef, double %49, i32 0
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> zeroinitializer
  %60 = fmul <2 x double> %59, %57
  %61 = bitcast double* %16 to <2 x double>*
  store <2 x double> %60, <2 x double>* %61, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink15AffineTransform8ToStringEb(%"class.blink::AffineTransform"* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"struct.blink::AffineTransform::DecomposedType", align 8
  %5 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 0
  %6 = load double, double* %5, align 8
  br i1 %1, label %7, label %20

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %17 = load double, double* %16, align 8
  %18 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), double %6, double %9, double %11, double %13, double %15, double %17) #13
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %19, align 8
  br label %95

20:                                               ; preds = %2
  %21 = fcmp oeq double %6, 1.000000e+00
  br i1 %21, label %22, label %45

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %24 = load double, double* %23, align 8
  %25 = fcmp oeq double %24, 0.000000e+00
  br i1 %25, label %26, label %45

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %28 = load double, double* %27, align 8
  %29 = fcmp oeq double %28, 0.000000e+00
  br i1 %29, label %30, label %45

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %32 = load double, double* %31, align 8
  %33 = fcmp oeq double %32, 1.000000e+00
  br i1 %33, label %34, label %45

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 4
  %36 = load double, double* %35, align 8
  %37 = fcmp oeq double %36, 0.000000e+00
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 5
  %40 = load double, double* %39, align 8
  %41 = fcmp oeq double %40, 0.000000e+00
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8) #13
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  br label %95

45:                                               ; preds = %20, %22, %26, %30, %34, %38
  %46 = bitcast %"struct.blink::AffineTransform::DecomposedType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %46) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -1, i64 72, i1 false)
  %47 = call zeroext i1 @_ZNK5blink15AffineTransform9DecomposeERNS0_14DecomposedTypeE(%"class.blink::AffineTransform"* %0, %"struct.blink::AffineTransform::DecomposedType"* nonnull dereferenceable(72) %4)
  %48 = load double, double* %5, align 8
  %49 = fcmp oeq double %48, 1.000000e+00
  br i1 %49, label %50, label %58

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 1
  %52 = load double, double* %51, align 8
  %53 = fcmp oeq double %52, 0.000000e+00
  br i1 %53, label %54, label %58

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 2
  %56 = load double, double* %55, align 8
  %57 = fcmp oeq double %56, 0.000000e+00
  br i1 %57, label %63, label %58

58:                                               ; preds = %54, %50, %45
  %59 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 7
  %60 = load double, double* %59, align 8
  %61 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 8
  %62 = load double, double* %61, align 8
  br label %73

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.blink::AffineTransform", %"class.blink::AffineTransform"* %0, i64 0, i32 0, i64 3
  %65 = load double, double* %64, align 8
  %66 = fcmp oeq double %65, 1.000000e+00
  %67 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 7
  %68 = load double, double* %67, align 8
  %69 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 8
  %70 = load double, double* %69, align 8
  br i1 %66, label %71, label %73

71:                                               ; preds = %63
  %72 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), double %68, double %70) #13
  br label %92

73:                                               ; preds = %58, %63
  %74 = phi double [ %62, %58 ], [ %70, %63 ]
  %75 = phi double [ %60, %58 ], [ %68, %63 ]
  %76 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 0
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 1
  %79 = load double, double* %78, align 8
  %80 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 2
  %81 = load double, double* %80, align 8
  %82 = fmul double %81, 0x404CA5DC1A63C1F8
  %83 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 3
  %84 = load double, double* %83, align 8
  %85 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 4
  %86 = load double, double* %85, align 8
  %87 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 5
  %88 = load double, double* %87, align 8
  %89 = getelementptr inbounds %"struct.blink::AffineTransform::DecomposedType", %"struct.blink::AffineTransform::DecomposedType"* %4, i64 0, i32 6
  %90 = load double, double* %89, align 8
  %91 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.3, i64 0, i64 0), double %75, double %74, double %77, double %79, double %82, double %84, double %86, double %88, double %90) #13
  br label %92

92:                                               ; preds = %73, %71
  %93 = phi %"class.WTF::StringImpl"* [ %91, %73 ], [ %72, %71 ]
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %93, %"class.WTF::StringImpl"** %94, align 8
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %46) #13
  br label %95

95:                                               ; preds = %92, %42, %7
  %96 = phi %"class.WTF::StringImpl"* [ %93, %92 ], [ %44, %42 ], [ %18, %7 ]
  ret %"class.WTF::StringImpl"* %96
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_15AffineTransformE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::AffineTransform"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #13
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink15AffineTransform8ToStringEb(%"class.blink::AffineTransform"* %1, i1 zeroext false)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #13
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #13
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #13
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #12

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #12

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #12

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #11

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
