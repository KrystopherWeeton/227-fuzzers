; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/t1.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/t1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_t1 = type { %struct.opj_mqc, i32*, i32*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.opj_mqc = type { i32, i32, i32, i32, i8*, i8*, i8*, [19 x %struct.opj_mqc_state*], %struct.opj_mqc_state**, i8*, [2 x i8] }
%struct.opj_mqc_state = type { i32, i32, %struct.opj_mqc_state*, %struct.opj_mqc_state* }
%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcp*, i32, i8, %struct.opj_thread_pool_t*, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_image = type { %struct.opj_tcd_tile* }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon.0, i8 }
%struct.opj_ppx_struct = type { i8*, i32 }
%union.anon.0 = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%struct.opj_thread_pool_t = type opaque
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32, i32*, i32, i64, i64, i32*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band], i32, i32, i32, i32 }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon, i32, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i8 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_mutex_t = type opaque
%struct.opj_tcd_cblk_dec = type { %struct.opj_tcd_seg*, %struct.opj_tcd_seg_data_chunk*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_seg = type { i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_seg_data_chunk = type { i8*, i32 }
%struct.opj_tls_t = type opaque

@.str = private unnamed_addr constant [36 x i8] c"Cannot allocate cblk->decoded_data\0A\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Cannot allocate Tier 1 handle\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Unable to set t1 handle as TLS\0A\00", align 1
@lut_ctxno_zc = internal constant [2048 x i8] calign 16
@.str.3 = private unnamed_addr constant [60 x i8] c"opj_t1_decode_cblk(): unsupported bpno_plus_one = %d >= 31\0A\00", align 1
@.str.4 = private unnamed_addr constant [70 x i8] c"PTERM check failure: %d remaining bytes in code block (%d used / %d)\0A\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"PTERM check failure: %d synthetized 0xFF markers read\0A\00", align 1
@lut_ctxno_sc = internal unnamed_addr constant [256 x i8] calign 16
@lut_spb = internal unnamed_addr constant [256 x i8] calign 16
@lut_nmsedec_sig = internal unnamed_addr constant [128 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 384, i16 768, i16 1152, i16 1536, i16 1920, i16 2304, i16 2688, i16 3072, i16 3456, i16 3840, i16 4224, i16 4608, i16 4992, i16 5376, i16 5760, i16 6144, i16 6528, i16 6912, i16 7296, i16 7680, i16 8064, i16 8448, i16 8832, i16 9216, i16 9600, i16 9984, i16 10368, i16 10752, i16 11136, i16 11520, i16 11904, i16 12288, i16 12672, i16 13056, i16 13440, i16 13824, i16 14208, i16 14592, i16 14976, i16 15360, i16 15744, i16 16128, i16 16512, i16 16896, i16 17280, i16 17664, i16 18048, i16 18432, i16 18816, i16 19200, i16 19584, i16 19968, i16 20352, i16 20736, i16 21120, i16 21504, i16 21888, i16 22272, i16 22656, i16 23040, i16 23424, i16 23808, i16 24192, i16 24576, i16 24960, i16 25344, i16 25728, i16 26112, i16 26496, i16 26880, i16 27264, i16 27648, i16 28032, i16 28416, i16 28800, i16 29184, i16 29568, i16 29952, i16 30336], align 16
@lut_nmsedec_sig0 = internal unnamed_addr constant [128 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 128, i16 128, i16 128, i16 128, i16 256, i16 256, i16 256, i16 384, i16 384, i16 512, i16 512, i16 640, i16 640, i16 768, i16 768, i16 896, i16 1024, i16 1024, i16 1152, i16 1280, i16 1408, i16 1408, i16 1536, i16 1664, i16 1792, i16 1920, i16 2048, i16 2176, i16 2304, i16 2432, i16 2560, i16 2688, i16 2944, i16 3072, i16 3200, i16 3328, i16 3584, i16 3712, i16 3840, i16 4096, i16 4224, i16 4480, i16 4608, i16 4864, i16 4992, i16 5248, i16 5376, i16 5632, i16 5888, i16 6016, i16 6272, i16 6528, i16 6784, i16 6912, i16 7168, i16 7424, i16 7680, i16 7936, i16 8192, i16 8448, i16 8704, i16 8960, i16 9216, i16 9472, i16 9856, i16 10112, i16 10368, i16 10624, i16 11008, i16 11264, i16 11520, i16 11904, i16 12160, i16 12544, i16 12800, i16 13184, i16 13440, i16 13824, i16 14080, i16 14464, i16 14848, i16 15104, i16 15488, i16 15872, i16 16256, i16 16512, i16 16896, i16 17280, i16 17664, i16 18048, i16 18432, i16 18816, i16 19200, i16 19584, i16 19968, i16 20352, i16 20864, i16 21248, i16 21632, i16 22016, i16 22528, i16 22912, i16 23296, i16 23808, i16 24192, i16 24704, i16 25088, i16 25600, i16 25984, i16 26496, i16 26880, i16 27392, i16 27904, i16 28288, i16 28800, i16 29312, i16 29824, i16 30208, i16 30720, i16 31232, i16 31744, i16 32256], align 16
@lut_nmsedec_ref = internal unnamed_addr constant [128 x i16] [i16 6144, i16 6016, i16 5888, i16 5760, i16 5632, i16 5504, i16 5376, i16 5248, i16 5120, i16 4992, i16 4864, i16 4736, i16 4608, i16 4480, i16 4352, i16 4224, i16 4096, i16 3968, i16 3840, i16 3712, i16 3584, i16 3456, i16 3328, i16 3200, i16 3072, i16 2944, i16 2816, i16 2688, i16 2560, i16 2432, i16 2304, i16 2176, i16 2048, i16 1920, i16 1792, i16 1664, i16 1536, i16 1408, i16 1280, i16 1152, i16 1024, i16 896, i16 768, i16 640, i16 512, i16 384, i16 256, i16 128, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 128, i16 256, i16 384, i16 512, i16 640, i16 768, i16 896, i16 1024, i16 1152, i16 1280, i16 1408, i16 1536, i16 1664, i16 1792, i16 1920, i16 2048, i16 2176, i16 2304, i16 2432, i16 2560, i16 2688, i16 2816, i16 2944, i16 3072, i16 3200, i16 3328, i16 3456, i16 3584, i16 3712, i16 3840, i16 3968, i16 4096, i16 4224, i16 4352, i16 4480, i16 4608, i16 4736, i16 4864, i16 4992, i16 5120, i16 5248, i16 5376, i16 5504, i16 5632, i16 5760, i16 5888, i16 6016], align 16
@lut_nmsedec_ref0 = internal unnamed_addr constant [128 x i16] [i16 8192, i16 7936, i16 7680, i16 7424, i16 7168, i16 6912, i16 6784, i16 6528, i16 6272, i16 6016, i16 5888, i16 5632, i16 5376, i16 5248, i16 4992, i16 4864, i16 4608, i16 4480, i16 4224, i16 4096, i16 3840, i16 3712, i16 3584, i16 3328, i16 3200, i16 3072, i16 2944, i16 2688, i16 2560, i16 2432, i16 2304, i16 2176, i16 2048, i16 1920, i16 1792, i16 1664, i16 1536, i16 1408, i16 1408, i16 1280, i16 1152, i16 1024, i16 1024, i16 896, i16 768, i16 768, i16 640, i16 640, i16 512, i16 512, i16 384, i16 384, i16 256, i16 256, i16 256, i16 128, i16 128, i16 128, i16 128, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 128, i16 128, i16 128, i16 128, i16 256, i16 256, i16 256, i16 384, i16 384, i16 512, i16 512, i16 640, i16 640, i16 768, i16 768, i16 896, i16 1024, i16 1024, i16 1152, i16 1280, i16 1408, i16 1408, i16 1536, i16 1664, i16 1792, i16 1920, i16 2048, i16 2176, i16 2304, i16 2432, i16 2560, i16 2688, i16 2944, i16 3072, i16 3200, i16 3328, i16 3584, i16 3712, i16 3840, i16 4096, i16 4224, i16 4480, i16 4608, i16 4864, i16 4992, i16 5248, i16 5376, i16 5632, i16 5888, i16 6016, i16 6272, i16 6528, i16 6784, i16 6912, i16 7168, i16 7424, i16 7680, i16 7936], align 16
@switch.table.opj_t1_allocate_buffers = private unnamed_addr constant [3 x i32] [i32 1224736768, i32 1207959552, i32 1073741824], align 4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_t1* @opj_t1_create(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @opj_calloc(i64 1, i64 272) #7
  %3 = icmp eq i8* %2, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = bitcast i8* %2 to %struct.opj_t1*
  %6 = getelementptr inbounds i8, i8* %2, i64 248
  %7 = bitcast i8* %6 to i32*
  store i32 %0, i32* %7, align 8
  br label %8

8:                                                ; preds = %1, %4
  %9 = phi %struct.opj_t1* [ %5, %4 ], [ null, %1 ]
  ret %struct.opj_t1* %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_t1_destroy(%struct.opj_t1*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_t1* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = bitcast i32* %5 to i8*
  tail call void @opj_aligned_free(i8* nonnull %8) #7
  store i32* null, i32** %4, align 8
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  %11 = load i32*, i32** %10, align 8
  %12 = icmp eq i32* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = bitcast i32* %11 to i8*
  tail call void @opj_aligned_free(i8* nonnull %14) #7
  store i32* null, i32** %10, align 8
  br label %15

15:                                               ; preds = %9, %13
  %16 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 9
  %17 = load i8*, i8** %16, align 8
  tail call void @opj_free(i8* %17) #7
  %18 = bitcast %struct.opj_t1* %0 to i8*
  tail call void @opj_free(i8* nonnull %18) #7
  br label %19

19:                                               ; preds = %1, %15
  ret void
}

declare void @opj_aligned_free(i8*) local_unnamed_addr #2

declare void @opj_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_t1_decode_cblks(%struct.opj_tcd*, i32*, %struct.opj_tcd_tilecomp*, %struct.opj_tccp*, %struct.opj_event_mgr*, %struct.opj_mutex_t*, i32) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %9 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %8, align 8
  %10 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %2, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %189, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %2, i64 0, i32 7
  %15 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %2, i64 0, i32 4
  %16 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  br label %17

17:                                               ; preds = %13, %184
  %18 = phi i32 [ %11, %13 ], [ %185, %184 ]
  %19 = phi i64 [ 0, %13 ], [ %186, %184 ]
  %20 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %14, align 8
  %21 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %184, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 4
  %26 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 5
  %27 = load i32, i32* %25, align 8
  %28 = load i32, i32* %26, align 4
  %29 = trunc i64 %19 to i32
  br label %30

30:                                               ; preds = %24, %175
  %31 = phi i32 [ %22, %24 ], [ %176, %175 ]
  %32 = phi i32 [ %28, %24 ], [ %177, %175 ]
  %33 = phi i32 [ %27, %24 ], [ %178, %175 ]
  %34 = phi i64 [ 0, %24 ], [ %179, %175 ]
  %35 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 7, i64 %34
  %36 = mul i32 %32, %33
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %175, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 7, i64 %34, i32 5
  %40 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %20, i64 %19, i32 7, i64 %34, i32 4
  br label %41

41:                                               ; preds = %38, %166
  %42 = phi i64 [ 0, %38 ], [ %167, %166 ]
  %43 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %39, align 8
  %44 = load i32, i32* %15, align 8
  %45 = load i32, i32* %40, align 8
  %46 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = tail call i32 @opj_tcd_is_subband_area_of_interest(%struct.opj_tcd* %0, i32 %44, i32 %29, i32 %45, i32 %47, i32 %49, i32 %51, i32 %53) #7
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 4
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 5
  %59 = load i32, i32* %58, align 4
  %60 = mul i32 %59, %57
  %61 = icmp ne i32 %60, 0
  br i1 %55, label %66, label %62

62:                                               ; preds = %41
  br i1 %61, label %63, label %166

63:                                               ; preds = %62
  %64 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 6
  %65 = bitcast %union.anon* %64 to %struct.opj_tcd_cblk_dec**
  br label %89

66:                                               ; preds = %41
  br i1 %61, label %67, label %166

67:                                               ; preds = %66
  %68 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %43, i64 %42, i32 6
  %69 = bitcast %union.anon* %68 to %struct.opj_tcd_cblk_dec**
  br label %70

70:                                               ; preds = %67, %82
  %71 = phi i32 [ %59, %67 ], [ %83, %82 ]
  %72 = phi i32 [ %57, %67 ], [ %84, %82 ]
  %73 = phi i64 [ 0, %67 ], [ %85, %82 ]
  %74 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %69, align 8
  %75 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %74, i64 %73, i32 14
  %76 = load i32*, i32** %75, align 8
  %77 = icmp eq i32* %76, null
  br i1 %77, label %82, label %78

78:                                               ; preds = %70
  %79 = bitcast i32* %76 to i8*
  tail call void @opj_aligned_free(i8* nonnull %79) #7
  store i32* null, i32** %75, align 8
  %80 = load i32, i32* %56, align 8
  %81 = load i32, i32* %58, align 4
  br label %82

82:                                               ; preds = %70, %78
  %83 = phi i32 [ %71, %70 ], [ %81, %78 ]
  %84 = phi i32 [ %72, %70 ], [ %80, %78 ]
  %85 = add nuw nsw i64 %73, 1
  %86 = mul i32 %83, %84
  %87 = zext i32 %86 to i64
  %88 = icmp ult i64 %85, %87
  br i1 %88, label %70, label %166

89:                                               ; preds = %63, %159
  %90 = phi i64 [ 0, %63 ], [ %160, %159 ]
  %91 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %65, align 8
  %92 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90
  %93 = load i32, i32* %15, align 8
  %94 = load i32, i32* %40, align 8
  %95 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90, i32 2
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90, i32 3
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90, i32 4
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90, i32 5
  %102 = load i32, i32* %101, align 4
  %103 = tail call i32 @opj_tcd_is_subband_area_of_interest(%struct.opj_tcd* %0, i32 %93, i32 %29, i32 %94, i32 %96, i32 %98, i32 %100, i32 %102) #7
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %111

105:                                              ; preds = %89
  %106 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90, i32 14
  %107 = load i32*, i32** %106, align 8
  %108 = icmp eq i32* %107, null
  br i1 %108, label %159, label %109

109:                                              ; preds = %105
  %110 = bitcast i32* %107 to i8*
  tail call void @opj_aligned_free(i8* nonnull %110) #7
  store i32* null, i32** %106, align 8
  br label %159

111:                                              ; preds = %89
  %112 = load i32, i32* %16, align 8
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %126

114:                                              ; preds = %111
  %115 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %91, i64 %90, i32 14
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %118, label %159

118:                                              ; preds = %114
  %119 = load i32, i32* %101, align 4
  %120 = load i32, i32* %97, align 4
  %121 = load i32, i32* %99, align 8
  %122 = load i32, i32* %95, align 8
  %123 = icmp eq i32 %121, %122
  %124 = icmp eq i32 %119, %120
  %125 = or i1 %124, %123
  br i1 %125, label %159, label %126

126:                                              ; preds = %118, %111
  %127 = tail call i8* @opj_calloc(i64 1, i64 80) #7
  %128 = icmp eq i8* %127, null
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  store volatile i32 0, i32* %1, align 4
  br label %189

130:                                              ; preds = %126
  %131 = load i32, i32* %16, align 8
  %132 = bitcast i8* %127 to i32*
  store i32 %131, i32* %132, align 8
  %133 = getelementptr inbounds i8, i8* %127, i64 4
  %134 = bitcast i8* %133 to i32*
  store i32 %29, i32* %134, align 4
  %135 = getelementptr inbounds i8, i8* %127, i64 8
  %136 = bitcast i8* %135 to %struct.opj_tcd_cblk_dec**
  store %struct.opj_tcd_cblk_dec* %92, %struct.opj_tcd_cblk_dec** %136, align 8
  %137 = getelementptr inbounds i8, i8* %127, i64 16
  %138 = bitcast i8* %137 to %struct.opj_tcd_band**
  store %struct.opj_tcd_band* %35, %struct.opj_tcd_band** %138, align 8
  %139 = getelementptr inbounds i8, i8* %127, i64 24
  %140 = bitcast i8* %139 to %struct.opj_tcd_tilecomp**
  store %struct.opj_tcd_tilecomp* %2, %struct.opj_tcd_tilecomp** %140, align 8
  %141 = getelementptr inbounds i8, i8* %127, i64 32
  %142 = bitcast i8* %141 to %struct.opj_tccp**
  store %struct.opj_tccp* %3, %struct.opj_tccp** %142, align 8
  %143 = getelementptr inbounds i8, i8* %127, i64 48
  %144 = bitcast i8* %143 to i32**
  store i32* %1, i32** %144, align 8
  %145 = getelementptr inbounds i8, i8* %127, i64 64
  %146 = bitcast i8* %145 to %struct.opj_mutex_t**
  store %struct.opj_mutex_t* %5, %struct.opj_mutex_t** %146, align 8
  %147 = getelementptr inbounds i8, i8* %127, i64 56
  %148 = bitcast i8* %147 to %struct.opj_event_mgr**
  store %struct.opj_event_mgr* %4, %struct.opj_event_mgr** %148, align 8
  %149 = getelementptr inbounds i8, i8* %127, i64 72
  %150 = bitcast i8* %149 to i32*
  store i32 %6, i32* %150, align 8
  %151 = tail call i32 @opj_thread_pool_get_thread_count(%struct.opj_thread_pool_t* %9) #7
  %152 = icmp sgt i32 %151, 1
  %153 = zext i1 %152 to i32
  %154 = getelementptr inbounds i8, i8* %127, i64 40
  %155 = bitcast i8* %154 to i32*
  store i32 %153, i32* %155, align 8
  %156 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %9, void (i8*, %struct.opj_tls_t*)* nonnull @opj_t1_clbl_decode_processor, i8* nonnull %127) #7
  %157 = load volatile i32, i32* %1, align 4
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %189, label %159

159:                                              ; preds = %118, %114, %105, %109, %130
  %160 = add nuw nsw i64 %90, 1
  %161 = load i32, i32* %56, align 8
  %162 = load i32, i32* %58, align 4
  %163 = mul i32 %162, %161
  %164 = zext i32 %163 to i64
  %165 = icmp ult i64 %160, %164
  br i1 %165, label %89, label %166

166:                                              ; preds = %159, %82, %62, %66
  %167 = add nuw nsw i64 %42, 1
  %168 = load i32, i32* %25, align 8
  %169 = load i32, i32* %26, align 4
  %170 = mul i32 %169, %168
  %171 = zext i32 %170 to i64
  %172 = icmp ult i64 %167, %171
  br i1 %172, label %41, label %173

173:                                              ; preds = %166
  %174 = load i32, i32* %21, align 8
  br label %175

175:                                              ; preds = %173, %30
  %176 = phi i32 [ %174, %173 ], [ %31, %30 ]
  %177 = phi i32 [ %169, %173 ], [ %32, %30 ]
  %178 = phi i32 [ %168, %173 ], [ %33, %30 ]
  %179 = add nuw nsw i64 %34, 1
  %180 = zext i32 %176 to i64
  %181 = icmp ult i64 %179, %180
  br i1 %181, label %30, label %182

182:                                              ; preds = %175
  %183 = load i32, i32* %10, align 8
  br label %184

184:                                              ; preds = %182, %17
  %185 = phi i32 [ %183, %182 ], [ %18, %17 ]
  %186 = add nuw nsw i64 %19, 1
  %187 = zext i32 %185 to i64
  %188 = icmp ult i64 %186, %187
  br i1 %188, label %17, label %189

189:                                              ; preds = %184, %130, %7, %129
  ret void
}

declare i32 @opj_tcd_is_subband_area_of_interest(%struct.opj_tcd*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

declare i32 @opj_thread_pool_get_thread_count(%struct.opj_thread_pool_t*) local_unnamed_addr #2

declare i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t*, void (i8*, %struct.opj_tls_t*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @opj_t1_clbl_decode_processor(i8*, %struct.opj_tls_t*) #3 {
  %3 = getelementptr inbounds i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to %struct.opj_tcd_cblk_dec**
  %5 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %4, align 8
  %6 = bitcast i8* %0 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %47

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = sub nsw i32 %11, %13
  %15 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = sub nsw i32 %16, %18
  %20 = zext i32 %14 to i64
  %21 = shl nuw nsw i64 %20, 2
  %22 = zext i32 %19 to i64
  %23 = mul i64 %21, %22
  %24 = tail call i8* @opj_aligned_malloc(i64 %23) #7
  %25 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 14
  %26 = bitcast i32** %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = icmp eq i8* %24, null
  br i1 %27, label %28, label %46

28:                                               ; preds = %9
  %29 = getelementptr inbounds i8, i8* %0, i64 64
  %30 = bitcast i8* %29 to %struct.opj_mutex_t**
  %31 = load %struct.opj_mutex_t*, %struct.opj_mutex_t** %30, align 8
  %32 = icmp eq %struct.opj_mutex_t* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %28
  tail call void @opj_mutex_lock(%struct.opj_mutex_t* nonnull %31) #7
  br label %34

34:                                               ; preds = %28, %33
  %35 = getelementptr inbounds i8, i8* %0, i64 56
  %36 = bitcast i8* %35 to %struct.opj_event_mgr**
  %37 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %36, align 8
  %38 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %37, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0)) #7
  %39 = load %struct.opj_mutex_t*, %struct.opj_mutex_t** %30, align 8
  %40 = icmp eq %struct.opj_mutex_t* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %34
  tail call void @opj_mutex_unlock(%struct.opj_mutex_t* nonnull %39) #7
  br label %42

42:                                               ; preds = %34, %41
  %43 = getelementptr inbounds i8, i8* %0, i64 48
  %44 = bitcast i8* %43 to i32**
  %45 = load i32*, i32** %44, align 8
  store volatile i32 0, i32* %45, align 4
  br label %2971

46:                                               ; preds = %9
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %24, i8 0, i64 %23, i1 false)
  br label %53

47:                                               ; preds = %2
  %48 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 14
  %49 = load i32*, i32** %48, align 8
  %50 = icmp eq i32* %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %47
  %52 = bitcast i32* %49 to i8*
  tail call void @opj_aligned_free(i8* nonnull %52) #7
  store i32* null, i32** %48, align 8
  br label %53

53:                                               ; preds = %47, %51, %46
  %54 = getelementptr inbounds i8, i8* %0, i64 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds i8, i8* %0, i64 16
  %58 = bitcast i8* %57 to %struct.opj_tcd_band**
  %59 = load %struct.opj_tcd_band*, %struct.opj_tcd_band** %58, align 8
  %60 = getelementptr inbounds i8, i8* %0, i64 24
  %61 = bitcast i8* %60 to %struct.opj_tcd_tilecomp**
  %62 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %61, align 8
  %63 = getelementptr inbounds i8, i8* %0, i64 32
  %64 = bitcast i8* %63 to %struct.opj_tccp**
  %65 = load %struct.opj_tccp*, %struct.opj_tccp** %64, align 8
  %66 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %62, i64 0, i32 7
  %67 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %66, align 8
  %68 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %62, i64 0, i32 6
  %69 = load i32, i32* %68, align 8
  %70 = add i32 %69, -1
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %67, i64 %71, i32 2
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %67, i64 %71, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = sub nsw i32 %73, %75
  %77 = getelementptr inbounds i8, i8* %0, i64 48
  %78 = bitcast i8* %77 to i32**
  %79 = load i32*, i32** %78, align 8
  %80 = load volatile i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %2971, label %82

82:                                               ; preds = %53
  %83 = tail call i8* @opj_tls_get(%struct.opj_tls_t* %1, i32 0) #7
  %84 = icmp eq i8* %83, null
  br i1 %84, label %85, label %122

85:                                               ; preds = %82
  %86 = tail call i8* @opj_calloc(i64 1, i64 272) #7
  %87 = icmp eq i8* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %85
  %89 = getelementptr inbounds i8, i8* %86, i64 248
  %90 = bitcast i8* %89 to i32*
  store i32 0, i32* %90, align 8
  %91 = tail call i32 @opj_tls_set(%struct.opj_tls_t* %1, i32 0, i8* nonnull %86, void (i8*)* nonnull @opj_t1_destroy_wrapper) #7
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %99, label %122

93:                                               ; preds = %85
  %94 = getelementptr inbounds i8, i8* %0, i64 56
  %95 = bitcast i8* %94 to %struct.opj_event_mgr**
  %96 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %95, align 8
  %97 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %96, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0)) #7
  %98 = load i32*, i32** %78, align 8
  store volatile i32 0, i32* %98, align 4
  br label %2971

99:                                               ; preds = %88
  %100 = getelementptr inbounds i8, i8* %0, i64 56
  %101 = bitcast i8* %100 to %struct.opj_event_mgr**
  %102 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %101, align 8
  %103 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %102, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0)) #7
  %104 = getelementptr inbounds i8, i8* %86, i64 216
  %105 = bitcast i8* %104 to i32**
  %106 = load i32*, i32** %105, align 8
  %107 = icmp eq i32* %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %99
  %109 = bitcast i32* %106 to i8*
  tail call void @opj_aligned_free(i8* nonnull %109) #7
  store i32* null, i32** %105, align 8
  br label %110

110:                                              ; preds = %108, %99
  %111 = getelementptr inbounds i8, i8* %86, i64 224
  %112 = bitcast i8* %111 to i32**
  %113 = load i32*, i32** %112, align 8
  %114 = icmp eq i32* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %110
  %116 = bitcast i32* %113 to i8*
  tail call void @opj_aligned_free(i8* nonnull %116) #7
  store i32* null, i32** %112, align 8
  br label %117

117:                                              ; preds = %110, %115
  %118 = getelementptr inbounds i8, i8* %86, i64 256
  %119 = bitcast i8* %118 to i8**
  %120 = load i8*, i8** %119, align 8
  tail call void @opj_free(i8* %120) #7
  tail call void @opj_free(i8* nonnull %86) #7
  %121 = load i32*, i32** %78, align 8
  store volatile i32 0, i32* %121, align 4
  br label %2971

122:                                              ; preds = %88, %82
  %123 = phi i8* [ %86, %88 ], [ %83, %82 ]
  %124 = bitcast i8* %123 to %struct.opj_t1*
  %125 = getelementptr inbounds i8, i8* %0, i64 40
  %126 = bitcast i8* %125 to i32*
  %127 = load i32, i32* %126, align 8
  %128 = getelementptr inbounds i8, i8* %123, i64 252
  %129 = bitcast i8* %128 to i32*
  store i32 %127, i32* %129, align 4
  %130 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %59, i64 0, i32 4
  %131 = load i32, i32* %130, align 8
  %132 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %65, i64 0, i32 9
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %65, i64 0, i32 4
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds i8, i8* %0, i64 56
  %137 = bitcast i8* %136 to %struct.opj_event_mgr**
  %138 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %137, align 8
  %139 = getelementptr inbounds i8, i8* %0, i64 64
  %140 = bitcast i8* %139 to %struct.opj_mutex_t**
  %141 = load %struct.opj_mutex_t*, %struct.opj_mutex_t** %140, align 8
  %142 = getelementptr inbounds i8, i8* %0, i64 72
  %143 = bitcast i8* %142 to i32*
  %144 = load i32, i32* %143, align 8
  %145 = bitcast i8* %123 to %struct.opj_mqc*
  %146 = shl i32 %131, 9
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds [2048 x i8], [2048 x i8]* @lut_ctxno_zc, i64 0, i64 %147
  %149 = getelementptr inbounds i8, i8* %123, i64 200
  %150 = bitcast i8* %149 to i8**
  store i8* %148, i8** %150, align 8
  %151 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 4
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 2
  %154 = load i32, i32* %153, align 8
  %155 = sub nsw i32 %152, %154
  %156 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 5
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 3
  %159 = load i32, i32* %158, align 4
  %160 = sub nsw i32 %157, %159
  %161 = tail call fastcc i32 @opj_t1_allocate_buffers(%struct.opj_t1* %124, i32 %155, i32 %160) #7
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %2247, label %163

163:                                              ; preds = %122
  %164 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 6
  %165 = load i32, i32* %164, align 8
  %166 = add i32 %165, %133
  %167 = icmp sgt i32 %166, 30
  br i1 %167, label %168, label %174

168:                                              ; preds = %163
  %169 = icmp eq %struct.opj_mutex_t* %141, null
  br i1 %169, label %172, label %170

170:                                              ; preds = %168
  tail call void @opj_mutex_lock(%struct.opj_mutex_t* nonnull %141) #7
  %171 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %138, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 %166) #7
  tail call void @opj_mutex_unlock(%struct.opj_mutex_t* nonnull %141) #7
  br label %2247

172:                                              ; preds = %168
  %173 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %138, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 %166) #7
  br label %2247

174:                                              ; preds = %163
  tail call void @opj_mqc_resetstates(%struct.opj_mqc* %145) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %145, i32 18, i32 0, i32 46) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %145, i32 17, i32 0, i32 3) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %145, i32 0, i32 0, i32 4) #7
  %175 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 12
  %176 = load i32, i32* %175, align 8
  %177 = icmp ugt i32 %176, 1
  br i1 %177, label %183, label %178

178:                                              ; preds = %174
  %179 = load i32, i32* %129, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %275, label %181

181:                                              ; preds = %178
  %182 = icmp eq i32 %176, 0
  br i1 %182, label %228, label %183

183:                                              ; preds = %181, %174
  %184 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 1
  %185 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %184, align 8
  %186 = zext i32 %176 to i64
  %187 = icmp ult i32 %176, 9
  br i1 %187, label %217, label %188

188:                                              ; preds = %183
  %189 = and i64 %186, 7
  %190 = icmp eq i64 %189, 0
  %191 = select i1 %190, i64 8, i64 %189
  %192 = sub nsw i64 %186, %191
  br label %193

193:                                              ; preds = %193, %188
  %194 = phi i64 [ 0, %188 ], [ %208, %193 ]
  %195 = phi <4 x i32> [ zeroinitializer, %188 ], [ %206, %193 ]
  %196 = phi <4 x i32> [ zeroinitializer, %188 ], [ %207, %193 ]
  %197 = or i64 %194, 4
  %198 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %185, i64 %194, i32 1
  %199 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %185, i64 %197, i32 1
  %200 = bitcast i32* %198 to <16 x i32>*
  %201 = bitcast i32* %199 to <16 x i32>*
  %202 = load <16 x i32>, <16 x i32>* %200, align 8
  %203 = load <16 x i32>, <16 x i32>* %201, align 8
  %204 = shufflevector <16 x i32> %202, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %205 = shufflevector <16 x i32> %203, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %206 = add <4 x i32> %204, %195
  %207 = add <4 x i32> %205, %196
  %208 = add i64 %194, 8
  %209 = icmp eq i64 %208, %192
  br i1 %209, label %210, label %193, !llvm.loop !2

210:                                              ; preds = %193
  %211 = add <4 x i32> %207, %206
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %213 = add <4 x i32> %211, %212
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %215 = add <4 x i32> %213, %214
  %216 = extractelement <4 x i32> %215, i32 0
  br label %217

217:                                              ; preds = %210, %183
  %218 = phi i64 [ 0, %183 ], [ %192, %210 ]
  %219 = phi i32 [ 0, %183 ], [ %216, %210 ]
  br label %220

220:                                              ; preds = %217, %220
  %221 = phi i64 [ %226, %220 ], [ %218, %217 ]
  %222 = phi i32 [ %225, %220 ], [ %219, %217 ]
  %223 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %185, i64 %221, i32 1
  %224 = load i32, i32* %223, align 8
  %225 = add i32 %224, %222
  %226 = add nuw nsw i64 %221, 1
  %227 = icmp eq i64 %226, %186
  br i1 %227, label %228, label %220, !llvm.loop !4

228:                                              ; preds = %220, %181
  %229 = phi i32 [ 0, %181 ], [ %225, %220 ]
  %230 = add i32 %229, 2
  %231 = getelementptr inbounds i8, i8* %123, i64 264
  %232 = bitcast i8* %231 to i32*
  %233 = load i32, i32* %232, align 8
  %234 = icmp ugt i32 %230, %233
  br i1 %234, label %235, label %247

235:                                              ; preds = %228
  %236 = getelementptr inbounds i8, i8* %123, i64 256
  %237 = bitcast i8* %236 to i8**
  %238 = load i8*, i8** %237, align 8
  %239 = zext i32 %230 to i64
  %240 = tail call i8* @opj_realloc(i8* %238, i64 %239) #7
  %241 = icmp eq i8* %240, null
  br i1 %241, label %2247, label %242

242:                                              ; preds = %235
  store i8* %240, i8** %237, align 8
  %243 = zext i32 %229 to i64
  %244 = getelementptr inbounds i8, i8* %240, i64 %243
  %245 = bitcast i8* %244 to i16*
  store i16 0, i16* %245, align 1
  store i32 %230, i32* %232, align 8
  %246 = load i32, i32* %175, align 8
  br label %247

247:                                              ; preds = %228, %242
  %248 = phi i32 [ %246, %242 ], [ %176, %228 ]
  %249 = getelementptr inbounds i8, i8* %123, i64 256
  %250 = bitcast i8* %249 to i8**
  %251 = load i8*, i8** %250, align 8
  %252 = icmp eq i32 %248, 0
  br i1 %252, label %282, label %253

253:                                              ; preds = %247
  %254 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 1
  %255 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %254, align 8
  br label %256

256:                                              ; preds = %256, %253
  %257 = phi %struct.opj_tcd_seg_data_chunk* [ %255, %253 ], [ %267, %256 ]
  %258 = phi i64 [ 0, %253 ], [ %271, %256 ]
  %259 = phi i32 [ 0, %253 ], [ %270, %256 ]
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %251, i64 %260
  %262 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %257, i64 %258, i32 0
  %263 = load i8*, i8** %262, align 8
  %264 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %257, i64 %258, i32 1
  %265 = load i32, i32* %264, align 8
  %266 = zext i32 %265 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %261, i8* align 1 %263, i64 %266, i1 false) #7
  %267 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %254, align 8
  %268 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %267, i64 %258, i32 1
  %269 = load i32, i32* %268, align 8
  %270 = add i32 %269, %259
  %271 = add nuw nsw i64 %258, 1
  %272 = load i32, i32* %175, align 8
  %273 = zext i32 %272 to i64
  %274 = icmp ult i64 %271, %273
  br i1 %274, label %256, label %282

275:                                              ; preds = %178
  %276 = icmp eq i32 %176, 1
  br i1 %276, label %277, label %2249

277:                                              ; preds = %275
  %278 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 1
  %279 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %278, align 8
  %280 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %279, i64 0, i32 0
  %281 = load i8*, i8** %280, align 8
  br label %282

282:                                              ; preds = %256, %277, %247
  %283 = phi i8* [ %281, %277 ], [ %251, %247 ], [ %251, %256 ]
  %284 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 14
  %285 = load i32*, i32** %284, align 8
  %286 = icmp eq i32* %285, null
  br i1 %286, label %291, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds i8, i8* %123, i64 216
  %289 = bitcast i8* %288 to i32**
  %290 = load i32*, i32** %289, align 8
  store i32* %285, i32** %289, align 8
  br label %291

291:                                              ; preds = %287, %282
  %292 = phi i32* [ %290, %287 ], [ null, %282 ]
  %293 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 10
  %294 = load i32, i32* %293, align 8
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %2194, label %296

296:                                              ; preds = %291
  %297 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 0
  %298 = and i32 %135, 1
  %299 = icmp eq i32 %298, 0
  %300 = getelementptr inbounds i8, i8* %123, i64 232
  %301 = bitcast i8* %300 to i32*
  %302 = getelementptr inbounds i8, i8* %123, i64 236
  %303 = bitcast i8* %302 to i32*
  %304 = getelementptr inbounds i8, i8* %123, i64 216
  %305 = bitcast i8* %304 to i32**
  %306 = getelementptr inbounds i8, i8* %123, i64 224
  %307 = bitcast i8* %306 to i32**
  %308 = getelementptr inbounds i8, i8* %123, i64 192
  %309 = bitcast i8* %308 to %struct.opj_mqc_state***
  %310 = bitcast i8* %123 to i32*
  %311 = getelementptr inbounds i8, i8* %123, i64 4
  %312 = bitcast i8* %311 to i32*
  %313 = getelementptr inbounds i8, i8* %123, i64 8
  %314 = bitcast i8* %313 to i32*
  %315 = getelementptr inbounds i8, i8* %123, i64 16
  %316 = bitcast i8* %315 to i8**
  %317 = getelementptr inbounds i8, i8* %123, i64 12
  %318 = bitcast i8* %317 to i32*
  %319 = and i32 %135, 8
  %320 = and i32 %135, 2
  %321 = icmp eq i32 %320, 0
  br label %322

322:                                              ; preds = %2187, %296
  %323 = phi i64 [ 0, %296 ], [ %2190, %2187 ]
  %324 = phi i32 [ 0, %296 ], [ %343, %2187 ]
  %325 = phi i32 [ 2, %296 ], [ %2189, %2187 ]
  %326 = phi i32 [ %166, %296 ], [ %2188, %2187 ]
  %327 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %297, align 8
  %328 = load i32, i32* %164, align 8
  %329 = add nsw i32 %328, -4
  %330 = icmp sgt i32 %326, %329
  %331 = icmp ugt i32 %325, 1
  %332 = zext i32 %324 to i64
  %333 = getelementptr inbounds i8, i8* %283, i64 %332
  %334 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %327, i64 %323, i32 0
  %335 = load i32, i32* %334, align 4
  %336 = or i1 %331, %330
  %337 = or i1 %299, %336
  br i1 %337, label %339, label %338

338:                                              ; preds = %322
  tail call void @opj_mqc_raw_init_dec(%struct.opj_mqc* %145, i8* %333, i32 %335, i32 2) #7
  br label %340

339:                                              ; preds = %322
  tail call void @opj_mqc_init_dec(%struct.opj_mqc* %145, i8* %333, i32 %335, i32 2) #7
  br label %340

340:                                              ; preds = %339, %338
  %341 = phi i1 [ false, %339 ], [ true, %338 ]
  %342 = load i32, i32* %334, align 4
  %343 = add i32 %342, %324
  %344 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %327, i64 %323, i32 2
  %345 = load i32, i32* %344, align 4
  %346 = icmp ne i32 %345, 0
  %347 = icmp sgt i32 %326, 0
  %348 = and i1 %347, %346
  br i1 %348, label %349, label %2187

349:                                              ; preds = %340
  %350 = or i1 %321, %341
  br label %351

351:                                              ; preds = %2176, %349
  %352 = phi i32 [ 0, %349 ], [ %2182, %2176 ]
  %353 = phi i32 [ %325, %349 ], [ %2181, %2176 ]
  %354 = phi i32 [ %326, %349 ], [ %2180, %2176 ]
  switch i32 %353, label %2174 [
    i32 0, label %355
    i32 1, label %577
    i32 2, label %2173
  ]

355:                                              ; preds = %351
  br i1 %341, label %356, label %576

356:                                              ; preds = %355
  %357 = load i32*, i32** %305, align 8
  %358 = load i32*, i32** %307, align 8
  %359 = load i32, i32* %301, align 8
  %360 = add i32 %359, 3
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds i32, i32* %358, i64 %361
  %363 = shl i32 1, %354
  %364 = ashr i32 %363, 1
  %365 = or i32 %364, %363
  %366 = load i32, i32* %303, align 4
  %367 = icmp ugt i32 %366, 3
  br i1 %367, label %368, label %545

368:                                              ; preds = %356
  %369 = icmp eq i32 %359, 0
  %370 = zext i32 %359 to i64
  %371 = sub nsw i32 0, %365
  %372 = shl i32 %359, 1
  %373 = zext i32 %372 to i64
  %374 = mul i32 %359, 3
  %375 = zext i32 %374 to i64
  br label %376

376:                                              ; preds = %536, %368
  %377 = phi i32 [ %366, %368 ], [ %537, %536 ]
  %378 = phi i32* [ %362, %368 ], [ %541, %536 ]
  %379 = phi i32* [ %357, %368 ], [ %542, %536 ]
  %380 = phi i32 [ 0, %368 ], [ %540, %536 ]
  br i1 %369, label %536, label %381

381:                                              ; preds = %376, %529
  %382 = phi i32* [ %531, %529 ], [ %378, %376 ]
  %383 = phi i32* [ %532, %529 ], [ %379, %376 ]
  %384 = phi i32 [ %530, %529 ], [ 0, %376 ]
  %385 = load i32, i32* %382, align 4
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %529, label %387

387:                                              ; preds = %381
  tail call fastcc void @opj_t1_dec_sigpass_step_raw(%struct.opj_t1* %124, i32* %382, i32* %383, i32 %365, i32 %319, i32 0) #7
  %388 = getelementptr inbounds i32, i32* %383, i64 %370
  %389 = load i32, i32* %382, align 4
  %390 = and i32 %389, 16777344
  %391 = icmp ne i32 %390, 0
  %392 = and i32 %389, 3960
  %393 = icmp eq i32 %392, 0
  %394 = or i1 %391, %393
  br i1 %394, label %457, label %395

395:                                              ; preds = %387
  %396 = load i32, i32* %314, align 8
  %397 = icmp eq i32 %396, 0
  %398 = load i32, i32* %310, align 8
  br i1 %397, label %401, label %399

399:                                              ; preds = %395
  %400 = add i32 %396, -1
  br label %413

401:                                              ; preds = %395
  %402 = icmp eq i32 %398, 255
  %403 = load i8*, i8** %316, align 8
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  br i1 %402, label %406, label %411

406:                                              ; preds = %401
  %407 = icmp ugt i8 %404, -113
  br i1 %407, label %408, label %409

408:                                              ; preds = %406
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %413

409:                                              ; preds = %406
  store i32 %405, i32* %310, align 8
  %410 = getelementptr inbounds i8, i8* %403, i64 1
  store i8* %410, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %413

411:                                              ; preds = %401
  store i32 %405, i32* %310, align 8
  %412 = getelementptr inbounds i8, i8* %403, i64 1
  store i8* %412, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %413

413:                                              ; preds = %411, %409, %408, %399
  %414 = phi i32 [ %405, %411 ], [ %405, %409 ], [ 255, %408 ], [ %398, %399 ]
  %415 = phi i32 [ 7, %411 ], [ 6, %409 ], [ 7, %408 ], [ %400, %399 ]
  store i32 %415, i32* %314, align 8
  %416 = shl i32 1, %415
  %417 = and i32 %416, %414
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %421

419:                                              ; preds = %413
  %420 = load i32, i32* %382, align 4
  br label %454

421:                                              ; preds = %413
  %422 = icmp eq i32 %415, 0
  br i1 %422, label %425, label %423

423:                                              ; preds = %421
  %424 = add i32 %415, -1
  br label %437

425:                                              ; preds = %421
  %426 = icmp eq i32 %414, 255
  %427 = load i8*, i8** %316, align 8
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i32
  br i1 %426, label %430, label %435

430:                                              ; preds = %425
  %431 = icmp ugt i8 %428, -113
  br i1 %431, label %432, label %433

432:                                              ; preds = %430
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %437

433:                                              ; preds = %430
  store i32 %429, i32* %310, align 8
  %434 = getelementptr inbounds i8, i8* %427, i64 1
  store i8* %434, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %437

435:                                              ; preds = %425
  store i32 %429, i32* %310, align 8
  %436 = getelementptr inbounds i8, i8* %427, i64 1
  store i8* %436, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %437

437:                                              ; preds = %435, %433, %432, %423
  %438 = phi i32 [ %429, %435 ], [ %429, %433 ], [ 255, %432 ], [ %414, %423 ]
  %439 = phi i32 [ 7, %435 ], [ 6, %433 ], [ 7, %432 ], [ %424, %423 ]
  store i32 %439, i32* %314, align 8
  %440 = lshr i32 %438, %439
  %441 = and i32 %440, 1
  %442 = icmp eq i32 %441, 0
  %443 = select i1 %442, i32 %365, i32 %371
  store i32 %443, i32* %388, align 4
  %444 = getelementptr inbounds i32, i32* %382, i64 -1
  %445 = load i32, i32* %444, align 4
  %446 = or i32 %445, 256
  store i32 %446, i32* %444, align 4
  %447 = shl nuw nsw i32 %441, 22
  %448 = load i32, i32* %382, align 4
  %449 = or i32 %447, %448
  %450 = or i32 %449, 128
  store i32 %450, i32* %382, align 4
  %451 = getelementptr inbounds i32, i32* %382, i64 1
  %452 = load i32, i32* %451, align 4
  %453 = or i32 %452, 64
  store i32 %453, i32* %451, align 4
  br label %454

454:                                              ; preds = %437, %419
  %455 = phi i32 [ %420, %419 ], [ %450, %437 ]
  %456 = or i32 %455, 16777216
  store i32 %456, i32* %382, align 4
  br label %457

457:                                              ; preds = %454, %387
  %458 = phi i32 [ %389, %387 ], [ %456, %454 ]
  %459 = getelementptr inbounds i32, i32* %383, i64 %373
  %460 = and i32 %458, 134218752
  %461 = icmp ne i32 %460, 0
  %462 = and i32 %458, 31680
  %463 = icmp eq i32 %462, 0
  %464 = or i1 %461, %463
  br i1 %464, label %527, label %465

465:                                              ; preds = %457
  %466 = load i32, i32* %314, align 8
  %467 = icmp eq i32 %466, 0
  %468 = load i32, i32* %310, align 8
  br i1 %467, label %471, label %469

469:                                              ; preds = %465
  %470 = add i32 %466, -1
  br label %483

471:                                              ; preds = %465
  %472 = icmp eq i32 %468, 255
  %473 = load i8*, i8** %316, align 8
  %474 = load i8, i8* %473, align 1
  %475 = zext i8 %474 to i32
  br i1 %472, label %476, label %481

476:                                              ; preds = %471
  %477 = icmp ugt i8 %474, -113
  br i1 %477, label %478, label %479

478:                                              ; preds = %476
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %483

479:                                              ; preds = %476
  store i32 %475, i32* %310, align 8
  %480 = getelementptr inbounds i8, i8* %473, i64 1
  store i8* %480, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %483

481:                                              ; preds = %471
  store i32 %475, i32* %310, align 8
  %482 = getelementptr inbounds i8, i8* %473, i64 1
  store i8* %482, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %483

483:                                              ; preds = %481, %479, %478, %469
  %484 = phi i32 [ %475, %481 ], [ %475, %479 ], [ 255, %478 ], [ %468, %469 ]
  %485 = phi i32 [ 7, %481 ], [ 6, %479 ], [ 7, %478 ], [ %470, %469 ]
  store i32 %485, i32* %314, align 8
  %486 = shl i32 1, %485
  %487 = and i32 %486, %484
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %491

489:                                              ; preds = %483
  %490 = load i32, i32* %382, align 4
  br label %524

491:                                              ; preds = %483
  %492 = icmp eq i32 %485, 0
  br i1 %492, label %495, label %493

493:                                              ; preds = %491
  %494 = add i32 %485, -1
  br label %507

495:                                              ; preds = %491
  %496 = icmp eq i32 %484, 255
  %497 = load i8*, i8** %316, align 8
  %498 = load i8, i8* %497, align 1
  %499 = zext i8 %498 to i32
  br i1 %496, label %500, label %505

500:                                              ; preds = %495
  %501 = icmp ugt i8 %498, -113
  br i1 %501, label %502, label %503

502:                                              ; preds = %500
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %507

503:                                              ; preds = %500
  store i32 %499, i32* %310, align 8
  %504 = getelementptr inbounds i8, i8* %497, i64 1
  store i8* %504, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %507

505:                                              ; preds = %495
  store i32 %499, i32* %310, align 8
  %506 = getelementptr inbounds i8, i8* %497, i64 1
  store i8* %506, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %507

507:                                              ; preds = %505, %503, %502, %493
  %508 = phi i32 [ %499, %505 ], [ %499, %503 ], [ 255, %502 ], [ %484, %493 ]
  %509 = phi i32 [ 7, %505 ], [ 6, %503 ], [ 7, %502 ], [ %494, %493 ]
  store i32 %509, i32* %314, align 8
  %510 = lshr i32 %508, %509
  %511 = and i32 %510, 1
  %512 = icmp eq i32 %511, 0
  %513 = select i1 %512, i32 %365, i32 %371
  store i32 %513, i32* %459, align 4
  %514 = getelementptr inbounds i32, i32* %382, i64 -1
  %515 = load i32, i32* %514, align 4
  %516 = or i32 %515, 2048
  store i32 %516, i32* %514, align 4
  %517 = shl nuw nsw i32 %511, 25
  %518 = load i32, i32* %382, align 4
  %519 = or i32 %517, %518
  %520 = or i32 %519, 1024
  store i32 %520, i32* %382, align 4
  %521 = getelementptr inbounds i32, i32* %382, i64 1
  %522 = load i32, i32* %521, align 4
  %523 = or i32 %522, 512
  store i32 %523, i32* %521, align 4
  br label %524

524:                                              ; preds = %507, %489
  %525 = phi i32 [ %490, %489 ], [ %520, %507 ]
  %526 = or i32 %525, 134217728
  store i32 %526, i32* %382, align 4
  br label %527

527:                                              ; preds = %524, %457
  %528 = getelementptr inbounds i32, i32* %383, i64 %375
  tail call fastcc void @opj_t1_dec_sigpass_step_raw(%struct.opj_t1* %124, i32* %382, i32* %528, i32 %365, i32 0, i32 3) #7
  br label %529

529:                                              ; preds = %527, %381
  %530 = add nuw i32 %384, 1
  %531 = getelementptr inbounds i32, i32* %382, i64 1
  %532 = getelementptr inbounds i32, i32* %383, i64 1
  %533 = icmp eq i32 %530, %359
  br i1 %533, label %534, label %381

534:                                              ; preds = %529
  %535 = load i32, i32* %303, align 4
  br label %536

536:                                              ; preds = %534, %376
  %537 = phi i32 [ %377, %376 ], [ %535, %534 ]
  %538 = phi i32* [ %379, %376 ], [ %532, %534 ]
  %539 = phi i32* [ %378, %376 ], [ %531, %534 ]
  %540 = add nuw i32 %380, 4
  %541 = getelementptr inbounds i32, i32* %539, i64 2
  %542 = getelementptr inbounds i32, i32* %538, i64 %375
  %543 = and i32 %537, -4
  %544 = icmp ult i32 %540, %543
  br i1 %544, label %376, label %545

545:                                              ; preds = %536, %356
  %546 = phi i32 [ 0, %356 ], [ %540, %536 ]
  %547 = phi i32* [ %357, %356 ], [ %542, %536 ]
  %548 = phi i32* [ %362, %356 ], [ %541, %536 ]
  %549 = phi i32 [ %366, %356 ], [ %537, %536 ]
  %550 = icmp ult i32 %546, %549
  %551 = icmp ne i32 %359, 0
  %552 = and i1 %551, %550
  br i1 %552, label %553, label %2174

553:                                              ; preds = %545, %570
  %554 = phi i32 [ %571, %570 ], [ %549, %545 ]
  %555 = phi i32* [ %573, %570 ], [ %548, %545 ]
  %556 = phi i32* [ %574, %570 ], [ %547, %545 ]
  %557 = phi i32 [ %572, %570 ], [ 0, %545 ]
  %558 = icmp eq i32 %554, %546
  br i1 %558, label %570, label %559

559:                                              ; preds = %553, %559
  %560 = phi i64 [ %565, %559 ], [ 0, %553 ]
  %561 = trunc i64 %560 to i32
  %562 = mul i32 %359, %561
  %563 = zext i32 %562 to i64
  %564 = getelementptr inbounds i32, i32* %556, i64 %563
  tail call fastcc void @opj_t1_dec_sigpass_step_raw(%struct.opj_t1* %124, i32* %555, i32* %564, i32 %365, i32 %319, i32 %561) #7
  %565 = add nuw nsw i64 %560, 1
  %566 = load i32, i32* %303, align 4
  %567 = sub i32 %566, %546
  %568 = zext i32 %567 to i64
  %569 = icmp ult i64 %565, %568
  br i1 %569, label %559, label %570

570:                                              ; preds = %559, %553
  %571 = phi i32 [ %546, %553 ], [ %566, %559 ]
  %572 = add nuw i32 %557, 1
  %573 = getelementptr inbounds i32, i32* %555, i64 1
  %574 = getelementptr inbounds i32, i32* %556, i64 1
  %575 = icmp eq i32 %572, %359
  br i1 %575, label %2174, label %553

576:                                              ; preds = %355
  tail call fastcc void @opj_t1_dec_sigpass_mqc(%struct.opj_t1* %124, i32 %354, i32 %135) #7
  br label %2174

577:                                              ; preds = %351
  br i1 %341, label %578, label %840

578:                                              ; preds = %577
  %579 = load i32*, i32** %305, align 8
  %580 = load i32*, i32** %307, align 8
  %581 = load i32, i32* %301, align 8
  %582 = add i32 %581, 3
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds i32, i32* %580, i64 %583
  %585 = shl i32 1, %354
  %586 = ashr i32 %585, 1
  %587 = load i32, i32* %303, align 4
  %588 = icmp ugt i32 %587, 3
  br i1 %588, label %589, label %762

589:                                              ; preds = %578
  %590 = icmp eq i32 %581, 0
  %591 = sub nsw i32 0, %586
  %592 = zext i32 %581 to i64
  %593 = shl i32 %581, 1
  %594 = zext i32 %593 to i64
  %595 = mul i32 %581, 3
  %596 = zext i32 %595 to i64
  br label %597

597:                                              ; preds = %753, %589
  %598 = phi i32 [ %587, %589 ], [ %754, %753 ]
  %599 = phi i32* [ %584, %589 ], [ %758, %753 ]
  %600 = phi i32* [ %579, %589 ], [ %759, %753 ]
  %601 = phi i32 [ 0, %589 ], [ %757, %753 ]
  br i1 %590, label %753, label %602

602:                                              ; preds = %597, %746
  %603 = phi i32* [ %748, %746 ], [ %599, %597 ]
  %604 = phi i32* [ %749, %746 ], [ %600, %597 ]
  %605 = phi i32 [ %747, %746 ], [ 0, %597 ]
  %606 = load i32, i32* %603, align 4
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %746, label %608

608:                                              ; preds = %602
  %609 = and i32 %606, 2097168
  %610 = icmp eq i32 %609, 16
  br i1 %610, label %611, label %641

611:                                              ; preds = %608
  %612 = load i32, i32* %314, align 8
  %613 = icmp eq i32 %612, 0
  %614 = load i32, i32* %310, align 8
  br i1 %613, label %617, label %615

615:                                              ; preds = %611
  %616 = add i32 %612, -1
  br label %629

617:                                              ; preds = %611
  %618 = icmp eq i32 %614, 255
  %619 = load i8*, i8** %316, align 8
  %620 = load i8, i8* %619, align 1
  %621 = zext i8 %620 to i32
  br i1 %618, label %622, label %627

622:                                              ; preds = %617
  %623 = icmp ugt i8 %620, -113
  br i1 %623, label %624, label %625

624:                                              ; preds = %622
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %629

625:                                              ; preds = %622
  store i32 %621, i32* %310, align 8
  %626 = getelementptr inbounds i8, i8* %619, i64 1
  store i8* %626, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %629

627:                                              ; preds = %617
  store i32 %621, i32* %310, align 8
  %628 = getelementptr inbounds i8, i8* %619, i64 1
  store i8* %628, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %629

629:                                              ; preds = %627, %625, %624, %615
  %630 = phi i32 [ %621, %627 ], [ %621, %625 ], [ 255, %624 ], [ %614, %615 ]
  %631 = phi i32 [ 7, %627 ], [ 6, %625 ], [ 7, %624 ], [ %616, %615 ]
  store i32 %631, i32* %314, align 8
  %632 = lshr i32 %630, %631
  %633 = and i32 %632, 1
  %634 = load i32, i32* %604, align 4
  %635 = lshr i32 %634, 31
  %636 = icmp eq i32 %633, %635
  %637 = select i1 %636, i32 %591, i32 %586
  %638 = add nsw i32 %637, %634
  store i32 %638, i32* %604, align 4
  %639 = load i32, i32* %603, align 4
  %640 = or i32 %639, 1048576
  store i32 %640, i32* %603, align 4
  br label %641

641:                                              ; preds = %629, %608
  %642 = phi i32 [ %606, %608 ], [ %640, %629 ]
  %643 = getelementptr inbounds i32, i32* %604, i64 %592
  %644 = and i32 %642, 16777344
  %645 = icmp eq i32 %644, 128
  br i1 %645, label %646, label %676

646:                                              ; preds = %641
  %647 = load i32, i32* %314, align 8
  %648 = icmp eq i32 %647, 0
  %649 = load i32, i32* %310, align 8
  br i1 %648, label %652, label %650

650:                                              ; preds = %646
  %651 = add i32 %647, -1
  br label %664

652:                                              ; preds = %646
  %653 = icmp eq i32 %649, 255
  %654 = load i8*, i8** %316, align 8
  %655 = load i8, i8* %654, align 1
  %656 = zext i8 %655 to i32
  br i1 %653, label %657, label %662

657:                                              ; preds = %652
  %658 = icmp ugt i8 %655, -113
  br i1 %658, label %659, label %660

659:                                              ; preds = %657
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %664

660:                                              ; preds = %657
  store i32 %656, i32* %310, align 8
  %661 = getelementptr inbounds i8, i8* %654, i64 1
  store i8* %661, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %664

662:                                              ; preds = %652
  store i32 %656, i32* %310, align 8
  %663 = getelementptr inbounds i8, i8* %654, i64 1
  store i8* %663, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %664

664:                                              ; preds = %662, %660, %659, %650
  %665 = phi i32 [ %656, %662 ], [ %656, %660 ], [ 255, %659 ], [ %649, %650 ]
  %666 = phi i32 [ 7, %662 ], [ 6, %660 ], [ 7, %659 ], [ %651, %650 ]
  store i32 %666, i32* %314, align 8
  %667 = lshr i32 %665, %666
  %668 = and i32 %667, 1
  %669 = load i32, i32* %643, align 4
  %670 = lshr i32 %669, 31
  %671 = icmp eq i32 %668, %670
  %672 = select i1 %671, i32 %591, i32 %586
  %673 = add nsw i32 %672, %669
  store i32 %673, i32* %643, align 4
  %674 = load i32, i32* %603, align 4
  %675 = or i32 %674, 8388608
  store i32 %675, i32* %603, align 4
  br label %676

676:                                              ; preds = %664, %641
  %677 = phi i32 [ %642, %641 ], [ %675, %664 ]
  %678 = getelementptr inbounds i32, i32* %604, i64 %594
  %679 = and i32 %677, 134218752
  %680 = icmp eq i32 %679, 1024
  br i1 %680, label %681, label %711

681:                                              ; preds = %676
  %682 = load i32, i32* %314, align 8
  %683 = icmp eq i32 %682, 0
  %684 = load i32, i32* %310, align 8
  br i1 %683, label %687, label %685

685:                                              ; preds = %681
  %686 = add i32 %682, -1
  br label %699

687:                                              ; preds = %681
  %688 = icmp eq i32 %684, 255
  %689 = load i8*, i8** %316, align 8
  %690 = load i8, i8* %689, align 1
  %691 = zext i8 %690 to i32
  br i1 %688, label %692, label %697

692:                                              ; preds = %687
  %693 = icmp ugt i8 %690, -113
  br i1 %693, label %694, label %695

694:                                              ; preds = %692
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %699

695:                                              ; preds = %692
  store i32 %691, i32* %310, align 8
  %696 = getelementptr inbounds i8, i8* %689, i64 1
  store i8* %696, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %699

697:                                              ; preds = %687
  store i32 %691, i32* %310, align 8
  %698 = getelementptr inbounds i8, i8* %689, i64 1
  store i8* %698, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %699

699:                                              ; preds = %697, %695, %694, %685
  %700 = phi i32 [ %691, %697 ], [ %691, %695 ], [ 255, %694 ], [ %684, %685 ]
  %701 = phi i32 [ 7, %697 ], [ 6, %695 ], [ 7, %694 ], [ %686, %685 ]
  store i32 %701, i32* %314, align 8
  %702 = lshr i32 %700, %701
  %703 = and i32 %702, 1
  %704 = load i32, i32* %678, align 4
  %705 = lshr i32 %704, 31
  %706 = icmp eq i32 %703, %705
  %707 = select i1 %706, i32 %591, i32 %586
  %708 = add nsw i32 %707, %704
  store i32 %708, i32* %678, align 4
  %709 = load i32, i32* %603, align 4
  %710 = or i32 %709, 67108864
  store i32 %710, i32* %603, align 4
  br label %711

711:                                              ; preds = %699, %676
  %712 = phi i32 [ %677, %676 ], [ %710, %699 ]
  %713 = getelementptr inbounds i32, i32* %604, i64 %596
  %714 = and i32 %712, 1073750016
  %715 = icmp eq i32 %714, 8192
  br i1 %715, label %716, label %746

716:                                              ; preds = %711
  %717 = load i32, i32* %314, align 8
  %718 = icmp eq i32 %717, 0
  %719 = load i32, i32* %310, align 8
  br i1 %718, label %722, label %720

720:                                              ; preds = %716
  %721 = add i32 %717, -1
  br label %734

722:                                              ; preds = %716
  %723 = icmp eq i32 %719, 255
  %724 = load i8*, i8** %316, align 8
  %725 = load i8, i8* %724, align 1
  %726 = zext i8 %725 to i32
  br i1 %723, label %727, label %732

727:                                              ; preds = %722
  %728 = icmp ugt i8 %725, -113
  br i1 %728, label %729, label %730

729:                                              ; preds = %727
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %734

730:                                              ; preds = %727
  store i32 %726, i32* %310, align 8
  %731 = getelementptr inbounds i8, i8* %724, i64 1
  store i8* %731, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %734

732:                                              ; preds = %722
  store i32 %726, i32* %310, align 8
  %733 = getelementptr inbounds i8, i8* %724, i64 1
  store i8* %733, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %734

734:                                              ; preds = %732, %730, %729, %720
  %735 = phi i32 [ %726, %732 ], [ %726, %730 ], [ 255, %729 ], [ %719, %720 ]
  %736 = phi i32 [ 7, %732 ], [ 6, %730 ], [ 7, %729 ], [ %721, %720 ]
  store i32 %736, i32* %314, align 8
  %737 = lshr i32 %735, %736
  %738 = and i32 %737, 1
  %739 = load i32, i32* %713, align 4
  %740 = lshr i32 %739, 31
  %741 = icmp eq i32 %738, %740
  %742 = select i1 %741, i32 %591, i32 %586
  %743 = add nsw i32 %742, %739
  store i32 %743, i32* %713, align 4
  %744 = load i32, i32* %603, align 4
  %745 = or i32 %744, 536870912
  store i32 %745, i32* %603, align 4
  br label %746

746:                                              ; preds = %734, %711, %602
  %747 = add nuw i32 %605, 1
  %748 = getelementptr inbounds i32, i32* %603, i64 1
  %749 = getelementptr inbounds i32, i32* %604, i64 1
  %750 = icmp eq i32 %747, %581
  br i1 %750, label %751, label %602

751:                                              ; preds = %746
  %752 = load i32, i32* %303, align 4
  br label %753

753:                                              ; preds = %751, %597
  %754 = phi i32 [ %598, %597 ], [ %752, %751 ]
  %755 = phi i32* [ %600, %597 ], [ %749, %751 ]
  %756 = phi i32* [ %599, %597 ], [ %748, %751 ]
  %757 = add nuw i32 %601, 4
  %758 = getelementptr inbounds i32, i32* %756, i64 2
  %759 = getelementptr inbounds i32, i32* %755, i64 %596
  %760 = and i32 %754, -4
  %761 = icmp ult i32 %757, %760
  br i1 %761, label %597, label %762

762:                                              ; preds = %753, %578
  %763 = phi i32 [ 0, %578 ], [ %757, %753 ]
  %764 = phi i32* [ %579, %578 ], [ %759, %753 ]
  %765 = phi i32* [ %584, %578 ], [ %758, %753 ]
  %766 = phi i32 [ %587, %578 ], [ %754, %753 ]
  %767 = icmp ult i32 %763, %766
  %768 = icmp ne i32 %581, 0
  %769 = and i1 %768, %767
  br i1 %769, label %770, label %2174

770:                                              ; preds = %762
  %771 = sub nsw i32 0, %586
  br label %772

772:                                              ; preds = %833, %770
  %773 = phi i32 [ %766, %770 ], [ %834, %833 ]
  %774 = phi i32 [ %766, %770 ], [ %835, %833 ]
  %775 = phi i32* [ %765, %770 ], [ %837, %833 ]
  %776 = phi i32* [ %764, %770 ], [ %838, %833 ]
  %777 = phi i32 [ 0, %770 ], [ %836, %833 ]
  %778 = icmp eq i32 %774, %763
  br i1 %778, label %833, label %779

779:                                              ; preds = %772
  %780 = load i32, i32* %775, align 4
  br label %781

781:                                              ; preds = %826, %779
  %782 = phi i32 [ %773, %779 ], [ %827, %826 ]
  %783 = phi i32 [ %780, %779 ], [ %828, %826 ]
  %784 = phi i64 [ 0, %779 ], [ %829, %826 ]
  %785 = trunc i64 %784 to i32
  %786 = mul i32 %581, %785
  %787 = zext i32 %786 to i64
  %788 = getelementptr inbounds i32, i32* %776, i64 %787
  %789 = mul i32 %785, 3
  %790 = shl i32 2097168, %789
  %791 = and i32 %790, %783
  %792 = shl i32 16, %789
  %793 = icmp eq i32 %791, %792
  br i1 %793, label %794, label %826

794:                                              ; preds = %781
  %795 = load i32, i32* %314, align 8
  %796 = icmp eq i32 %795, 0
  %797 = load i32, i32* %310, align 8
  br i1 %796, label %800, label %798

798:                                              ; preds = %794
  %799 = add i32 %795, -1
  br label %812

800:                                              ; preds = %794
  %801 = icmp eq i32 %797, 255
  %802 = load i8*, i8** %316, align 8
  %803 = load i8, i8* %802, align 1
  %804 = zext i8 %803 to i32
  br i1 %801, label %805, label %810

805:                                              ; preds = %800
  %806 = icmp ugt i8 %803, -113
  br i1 %806, label %807, label %808

807:                                              ; preds = %805
  store i32 255, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %812

808:                                              ; preds = %805
  store i32 %804, i32* %310, align 8
  %809 = getelementptr inbounds i8, i8* %802, i64 1
  store i8* %809, i8** %316, align 8
  store i32 7, i32* %314, align 8
  br label %812

810:                                              ; preds = %800
  store i32 %804, i32* %310, align 8
  %811 = getelementptr inbounds i8, i8* %802, i64 1
  store i8* %811, i8** %316, align 8
  store i32 8, i32* %314, align 8
  br label %812

812:                                              ; preds = %810, %808, %807, %798
  %813 = phi i32 [ %804, %810 ], [ %804, %808 ], [ 255, %807 ], [ %797, %798 ]
  %814 = phi i32 [ 7, %810 ], [ 6, %808 ], [ 7, %807 ], [ %799, %798 ]
  store i32 %814, i32* %314, align 8
  %815 = lshr i32 %813, %814
  %816 = and i32 %815, 1
  %817 = load i32, i32* %788, align 4
  %818 = lshr i32 %817, 31
  %819 = icmp eq i32 %816, %818
  %820 = select i1 %819, i32 %771, i32 %586
  %821 = add nsw i32 %820, %817
  store i32 %821, i32* %788, align 4
  %822 = shl i32 1048576, %789
  %823 = load i32, i32* %775, align 4
  %824 = or i32 %823, %822
  store i32 %824, i32* %775, align 4
  %825 = load i32, i32* %303, align 4
  br label %826

826:                                              ; preds = %812, %781
  %827 = phi i32 [ %782, %781 ], [ %825, %812 ]
  %828 = phi i32 [ %783, %781 ], [ %824, %812 ]
  %829 = add nuw nsw i64 %784, 1
  %830 = sub i32 %827, %763
  %831 = zext i32 %830 to i64
  %832 = icmp ult i64 %829, %831
  br i1 %832, label %781, label %833

833:                                              ; preds = %826, %772
  %834 = phi i32 [ %773, %772 ], [ %827, %826 ]
  %835 = phi i32 [ %763, %772 ], [ %827, %826 ]
  %836 = add nuw i32 %777, 1
  %837 = getelementptr inbounds i32, i32* %775, i64 1
  %838 = getelementptr inbounds i32, i32* %776, i64 1
  %839 = icmp eq i32 %836, %581
  br i1 %839, label %2174, label %772

840:                                              ; preds = %577
  %841 = load i32, i32* %301, align 8
  %842 = icmp eq i32 %841, 64
  %843 = load i32, i32* %303, align 4
  %844 = icmp eq i32 %843, 64
  %845 = and i1 %842, %844
  %846 = load i32*, i32** %305, align 8
  %847 = load i32*, i32** %307, align 8
  br i1 %845, label %848, label %1410

848:                                              ; preds = %840
  %849 = getelementptr inbounds i32, i32* %847, i64 67
  %850 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %309, align 8
  %851 = load i32, i32* %310, align 8
  %852 = load i32, i32* %312, align 4
  %853 = load i32, i32* %314, align 8
  %854 = shl i32 1, %354
  %855 = ashr i32 %854, 1
  %856 = sub nsw i32 0, %855
  br label %857

857:                                              ; preds = %1404, %848
  %858 = phi i32 [ 0, %848 ], [ %1405, %1404 ]
  %859 = phi i32 [ %853, %848 ], [ %1399, %1404 ]
  %860 = phi i32 [ %852, %848 ], [ %1398, %1404 ]
  %861 = phi i32 [ %851, %848 ], [ %1397, %1404 ]
  %862 = phi %struct.opj_mqc_state** [ %850, %848 ], [ %1396, %1404 ]
  %863 = phi i32* [ %846, %848 ], [ %1406, %1404 ]
  %864 = phi i32* [ %849, %848 ], [ %1407, %1404 ]
  br label %865

865:                                              ; preds = %1395, %857
  %866 = phi i32 [ 0, %857 ], [ %1400, %1395 ]
  %867 = phi i32 [ %859, %857 ], [ %1399, %1395 ]
  %868 = phi i32 [ %860, %857 ], [ %1398, %1395 ]
  %869 = phi i32 [ %861, %857 ], [ %1397, %1395 ]
  %870 = phi %struct.opj_mqc_state** [ %862, %857 ], [ %1396, %1395 ]
  %871 = phi i32* [ %863, %857 ], [ %1401, %1395 ]
  %872 = phi i32* [ %864, %857 ], [ %1402, %1395 ]
  %873 = load i32, i32* %872, align 4
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %1395, label %875

875:                                              ; preds = %865
  %876 = and i32 %873, 2097168
  %877 = icmp eq i32 %876, 16
  br i1 %877, label %878, label %999

878:                                              ; preds = %875
  %879 = and i32 %873, 495
  %880 = icmp eq i32 %879, 0
  %881 = select i1 %880, i64 14, i64 15
  %882 = and i32 %873, 1048576
  %883 = icmp eq i32 %882, 0
  %884 = select i1 %883, i64 %881, i64 16
  %885 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %884
  %886 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %885, align 8
  %887 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 0
  %888 = load i32, i32* %887, align 8
  %889 = sub i32 %868, %888
  %890 = lshr i32 %869, 16
  %891 = icmp ult i32 %890, %888
  br i1 %891, label %892, label %936

892:                                              ; preds = %878
  %893 = icmp ult i32 %889, %888
  %894 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 1
  %895 = load i32, i32* %894, align 4
  %896 = icmp eq i32 %895, 0
  %897 = zext i1 %896 to i32
  %898 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 3
  %899 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 2
  %900 = select i1 %893, %struct.opj_mqc_state** %899, %struct.opj_mqc_state** %898
  %901 = select i1 %893, i32 %895, i32 %897
  %902 = bitcast %struct.opj_mqc_state** %900 to i64*
  %903 = load i64, i64* %902, align 8
  %904 = bitcast %struct.opj_mqc_state** %885 to i64*
  store i64 %903, i64* %904, align 8
  br label %905

905:                                              ; preds = %929, %892
  %906 = phi i32 [ %869, %892 ], [ %933, %929 ]
  %907 = phi i32 [ %888, %892 ], [ %932, %929 ]
  %908 = phi i32 [ %867, %892 ], [ %934, %929 ]
  %909 = icmp eq i32 %908, 0
  br i1 %909, label %910, label %929

910:                                              ; preds = %905
  %911 = load i8*, i8** %316, align 8
  %912 = getelementptr inbounds i8, i8* %911, i64 1
  %913 = load i8, i8* %912, align 1
  %914 = zext i8 %913 to i32
  %915 = load i8, i8* %911, align 1
  %916 = icmp eq i8 %915, -1
  br i1 %916, label %917, label %926

917:                                              ; preds = %910
  %918 = icmp ugt i8 %913, -113
  br i1 %918, label %919, label %923

919:                                              ; preds = %917
  %920 = add i32 %906, 65280
  %921 = load i32, i32* %318, align 4
  %922 = add i32 %921, 1
  store i32 %922, i32* %318, align 4
  br label %929

923:                                              ; preds = %917
  store i8* %912, i8** %316, align 8
  %924 = shl nuw nsw i32 %914, 9
  %925 = add i32 %924, %906
  br label %929

926:                                              ; preds = %910
  store i8* %912, i8** %316, align 8
  %927 = shl nuw nsw i32 %914, 8
  %928 = add i32 %927, %906
  br label %929

929:                                              ; preds = %926, %923, %919, %905
  %930 = phi i32 [ %906, %905 ], [ %920, %919 ], [ %925, %923 ], [ %928, %926 ]
  %931 = phi i32 [ %908, %905 ], [ 8, %919 ], [ 7, %923 ], [ 8, %926 ]
  %932 = shl i32 %907, 1
  %933 = shl i32 %930, 1
  %934 = add i32 %931, -1
  %935 = icmp ult i32 %932, 32768
  br i1 %935, label %905, label %988

936:                                              ; preds = %878
  %937 = shl i32 %888, 16
  %938 = sub i32 %869, %937
  %939 = trunc i32 %889 to i16
  %940 = icmp sgt i16 %939, -1
  br i1 %940, label %941, label %985

941:                                              ; preds = %936
  %942 = icmp ult i32 %889, %888
  %943 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 1
  %944 = load i32, i32* %943, align 4
  %945 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 2
  %946 = icmp eq i32 %944, 0
  %947 = zext i1 %946 to i32
  %948 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 3
  %949 = select i1 %942, %struct.opj_mqc_state** %948, %struct.opj_mqc_state** %945
  %950 = select i1 %942, i32 %947, i32 %944
  %951 = bitcast %struct.opj_mqc_state** %949 to i64*
  %952 = load i64, i64* %951, align 8
  %953 = bitcast %struct.opj_mqc_state** %885 to i64*
  store i64 %952, i64* %953, align 8
  br label %954

954:                                              ; preds = %978, %941
  %955 = phi i32 [ %938, %941 ], [ %982, %978 ]
  %956 = phi i32 [ %889, %941 ], [ %981, %978 ]
  %957 = phi i32 [ %867, %941 ], [ %983, %978 ]
  %958 = icmp eq i32 %957, 0
  br i1 %958, label %959, label %978

959:                                              ; preds = %954
  %960 = load i8*, i8** %316, align 8
  %961 = getelementptr inbounds i8, i8* %960, i64 1
  %962 = load i8, i8* %961, align 1
  %963 = zext i8 %962 to i32
  %964 = load i8, i8* %960, align 1
  %965 = icmp eq i8 %964, -1
  br i1 %965, label %966, label %975

966:                                              ; preds = %959
  %967 = icmp ugt i8 %962, -113
  br i1 %967, label %968, label %972

968:                                              ; preds = %966
  %969 = add i32 %955, 65280
  %970 = load i32, i32* %318, align 4
  %971 = add i32 %970, 1
  store i32 %971, i32* %318, align 4
  br label %978

972:                                              ; preds = %966
  store i8* %961, i8** %316, align 8
  %973 = shl nuw nsw i32 %963, 9
  %974 = add i32 %973, %955
  br label %978

975:                                              ; preds = %959
  store i8* %961, i8** %316, align 8
  %976 = shl nuw nsw i32 %963, 8
  %977 = add i32 %976, %955
  br label %978

978:                                              ; preds = %975, %972, %968, %954
  %979 = phi i32 [ %955, %954 ], [ %969, %968 ], [ %974, %972 ], [ %977, %975 ]
  %980 = phi i32 [ %957, %954 ], [ 8, %968 ], [ 7, %972 ], [ 8, %975 ]
  %981 = shl i32 %956, 1
  %982 = shl i32 %979, 1
  %983 = add i32 %980, -1
  %984 = icmp ult i32 %981, 32768
  br i1 %984, label %954, label %988

985:                                              ; preds = %936
  %986 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %886, i64 0, i32 1
  %987 = load i32, i32* %986, align 4
  br label %988

988:                                              ; preds = %978, %929, %985
  %989 = phi i32 [ %938, %985 ], [ %933, %929 ], [ %982, %978 ]
  %990 = phi i32 [ %889, %985 ], [ %932, %929 ], [ %981, %978 ]
  %991 = phi i32 [ %867, %985 ], [ %934, %929 ], [ %983, %978 ]
  %992 = phi i32 [ %987, %985 ], [ %901, %929 ], [ %950, %978 ]
  %993 = load i32, i32* %871, align 4
  %994 = lshr i32 %993, 31
  %995 = icmp eq i32 %992, %994
  %996 = select i1 %995, i32 %856, i32 %855
  %997 = add nsw i32 %996, %993
  store i32 %997, i32* %871, align 4
  %998 = or i32 %873, 1048576
  br label %999

999:                                              ; preds = %988, %875
  %1000 = phi %struct.opj_mqc_state** [ %885, %988 ], [ %870, %875 ]
  %1001 = phi i32 [ %989, %988 ], [ %869, %875 ]
  %1002 = phi i32 [ %990, %988 ], [ %868, %875 ]
  %1003 = phi i32 [ %991, %988 ], [ %867, %875 ]
  %1004 = phi i32 [ %998, %988 ], [ %873, %875 ]
  %1005 = and i32 %1004, 16777344
  %1006 = icmp eq i32 %1005, 128
  br i1 %1006, label %1007, label %1129

1007:                                             ; preds = %999
  %1008 = and i32 %1004, 3960
  %1009 = icmp eq i32 %1008, 0
  %1010 = select i1 %1009, i64 14, i64 15
  %1011 = and i32 %1004, 8388608
  %1012 = icmp eq i32 %1011, 0
  %1013 = select i1 %1012, i64 %1010, i64 16
  %1014 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1013
  %1015 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1014, align 8
  %1016 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 0
  %1017 = load i32, i32* %1016, align 8
  %1018 = sub i32 %1002, %1017
  %1019 = lshr i32 %1001, 16
  %1020 = icmp ult i32 %1019, %1017
  br i1 %1020, label %1021, label %1065

1021:                                             ; preds = %1007
  %1022 = icmp ult i32 %1018, %1017
  %1023 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 1
  %1024 = load i32, i32* %1023, align 4
  %1025 = icmp eq i32 %1024, 0
  %1026 = zext i1 %1025 to i32
  %1027 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 3
  %1028 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 2
  %1029 = select i1 %1022, %struct.opj_mqc_state** %1028, %struct.opj_mqc_state** %1027
  %1030 = select i1 %1022, i32 %1024, i32 %1026
  %1031 = bitcast %struct.opj_mqc_state** %1029 to i64*
  %1032 = load i64, i64* %1031, align 8
  %1033 = bitcast %struct.opj_mqc_state** %1014 to i64*
  store i64 %1032, i64* %1033, align 8
  br label %1034

1034:                                             ; preds = %1058, %1021
  %1035 = phi i32 [ %1001, %1021 ], [ %1062, %1058 ]
  %1036 = phi i32 [ %1017, %1021 ], [ %1061, %1058 ]
  %1037 = phi i32 [ %1003, %1021 ], [ %1063, %1058 ]
  %1038 = icmp eq i32 %1037, 0
  br i1 %1038, label %1039, label %1058

1039:                                             ; preds = %1034
  %1040 = load i8*, i8** %316, align 8
  %1041 = getelementptr inbounds i8, i8* %1040, i64 1
  %1042 = load i8, i8* %1041, align 1
  %1043 = zext i8 %1042 to i32
  %1044 = load i8, i8* %1040, align 1
  %1045 = icmp eq i8 %1044, -1
  br i1 %1045, label %1046, label %1055

1046:                                             ; preds = %1039
  %1047 = icmp ugt i8 %1042, -113
  br i1 %1047, label %1048, label %1052

1048:                                             ; preds = %1046
  %1049 = add i32 %1035, 65280
  %1050 = load i32, i32* %318, align 4
  %1051 = add i32 %1050, 1
  store i32 %1051, i32* %318, align 4
  br label %1058

1052:                                             ; preds = %1046
  store i8* %1041, i8** %316, align 8
  %1053 = shl nuw nsw i32 %1043, 9
  %1054 = add i32 %1053, %1035
  br label %1058

1055:                                             ; preds = %1039
  store i8* %1041, i8** %316, align 8
  %1056 = shl nuw nsw i32 %1043, 8
  %1057 = add i32 %1056, %1035
  br label %1058

1058:                                             ; preds = %1055, %1052, %1048, %1034
  %1059 = phi i32 [ %1035, %1034 ], [ %1049, %1048 ], [ %1054, %1052 ], [ %1057, %1055 ]
  %1060 = phi i32 [ %1037, %1034 ], [ 8, %1048 ], [ 7, %1052 ], [ 8, %1055 ]
  %1061 = shl i32 %1036, 1
  %1062 = shl i32 %1059, 1
  %1063 = add i32 %1060, -1
  %1064 = icmp ult i32 %1061, 32768
  br i1 %1064, label %1034, label %1117

1065:                                             ; preds = %1007
  %1066 = shl i32 %1017, 16
  %1067 = sub i32 %1001, %1066
  %1068 = trunc i32 %1018 to i16
  %1069 = icmp sgt i16 %1068, -1
  br i1 %1069, label %1070, label %1114

1070:                                             ; preds = %1065
  %1071 = icmp ult i32 %1018, %1017
  %1072 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 1
  %1073 = load i32, i32* %1072, align 4
  %1074 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 2
  %1075 = icmp eq i32 %1073, 0
  %1076 = zext i1 %1075 to i32
  %1077 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 3
  %1078 = select i1 %1071, %struct.opj_mqc_state** %1077, %struct.opj_mqc_state** %1074
  %1079 = select i1 %1071, i32 %1076, i32 %1073
  %1080 = bitcast %struct.opj_mqc_state** %1078 to i64*
  %1081 = load i64, i64* %1080, align 8
  %1082 = bitcast %struct.opj_mqc_state** %1014 to i64*
  store i64 %1081, i64* %1082, align 8
  br label %1083

1083:                                             ; preds = %1107, %1070
  %1084 = phi i32 [ %1067, %1070 ], [ %1111, %1107 ]
  %1085 = phi i32 [ %1018, %1070 ], [ %1110, %1107 ]
  %1086 = phi i32 [ %1003, %1070 ], [ %1112, %1107 ]
  %1087 = icmp eq i32 %1086, 0
  br i1 %1087, label %1088, label %1107

1088:                                             ; preds = %1083
  %1089 = load i8*, i8** %316, align 8
  %1090 = getelementptr inbounds i8, i8* %1089, i64 1
  %1091 = load i8, i8* %1090, align 1
  %1092 = zext i8 %1091 to i32
  %1093 = load i8, i8* %1089, align 1
  %1094 = icmp eq i8 %1093, -1
  br i1 %1094, label %1095, label %1104

1095:                                             ; preds = %1088
  %1096 = icmp ugt i8 %1091, -113
  br i1 %1096, label %1097, label %1101

1097:                                             ; preds = %1095
  %1098 = add i32 %1084, 65280
  %1099 = load i32, i32* %318, align 4
  %1100 = add i32 %1099, 1
  store i32 %1100, i32* %318, align 4
  br label %1107

1101:                                             ; preds = %1095
  store i8* %1090, i8** %316, align 8
  %1102 = shl nuw nsw i32 %1092, 9
  %1103 = add i32 %1102, %1084
  br label %1107

1104:                                             ; preds = %1088
  store i8* %1090, i8** %316, align 8
  %1105 = shl nuw nsw i32 %1092, 8
  %1106 = add i32 %1105, %1084
  br label %1107

1107:                                             ; preds = %1104, %1101, %1097, %1083
  %1108 = phi i32 [ %1084, %1083 ], [ %1098, %1097 ], [ %1103, %1101 ], [ %1106, %1104 ]
  %1109 = phi i32 [ %1086, %1083 ], [ 8, %1097 ], [ 7, %1101 ], [ 8, %1104 ]
  %1110 = shl i32 %1085, 1
  %1111 = shl i32 %1108, 1
  %1112 = add i32 %1109, -1
  %1113 = icmp ult i32 %1110, 32768
  br i1 %1113, label %1083, label %1117

1114:                                             ; preds = %1065
  %1115 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1015, i64 0, i32 1
  %1116 = load i32, i32* %1115, align 4
  br label %1117

1117:                                             ; preds = %1107, %1058, %1114
  %1118 = phi i32 [ %1067, %1114 ], [ %1062, %1058 ], [ %1111, %1107 ]
  %1119 = phi i32 [ %1018, %1114 ], [ %1061, %1058 ], [ %1110, %1107 ]
  %1120 = phi i32 [ %1003, %1114 ], [ %1063, %1058 ], [ %1112, %1107 ]
  %1121 = phi i32 [ %1116, %1114 ], [ %1030, %1058 ], [ %1079, %1107 ]
  %1122 = getelementptr inbounds i32, i32* %871, i64 64
  %1123 = load i32, i32* %1122, align 4
  %1124 = lshr i32 %1123, 31
  %1125 = icmp eq i32 %1121, %1124
  %1126 = select i1 %1125, i32 %856, i32 %855
  %1127 = add nsw i32 %1126, %1123
  store i32 %1127, i32* %1122, align 4
  %1128 = or i32 %1004, 8388608
  br label %1129

1129:                                             ; preds = %1117, %999
  %1130 = phi %struct.opj_mqc_state** [ %1014, %1117 ], [ %1000, %999 ]
  %1131 = phi i32 [ %1118, %1117 ], [ %1001, %999 ]
  %1132 = phi i32 [ %1119, %1117 ], [ %1002, %999 ]
  %1133 = phi i32 [ %1120, %1117 ], [ %1003, %999 ]
  %1134 = phi i32 [ %1128, %1117 ], [ %1004, %999 ]
  %1135 = and i32 %1134, 134218752
  %1136 = icmp eq i32 %1135, 1024
  br i1 %1136, label %1137, label %1259

1137:                                             ; preds = %1129
  %1138 = and i32 %1134, 31680
  %1139 = icmp eq i32 %1138, 0
  %1140 = select i1 %1139, i64 14, i64 15
  %1141 = and i32 %1134, 67108864
  %1142 = icmp eq i32 %1141, 0
  %1143 = select i1 %1142, i64 %1140, i64 16
  %1144 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1143
  %1145 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1144, align 8
  %1146 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 0
  %1147 = load i32, i32* %1146, align 8
  %1148 = sub i32 %1132, %1147
  %1149 = lshr i32 %1131, 16
  %1150 = icmp ult i32 %1149, %1147
  br i1 %1150, label %1151, label %1195

1151:                                             ; preds = %1137
  %1152 = icmp ult i32 %1148, %1147
  %1153 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 1
  %1154 = load i32, i32* %1153, align 4
  %1155 = icmp eq i32 %1154, 0
  %1156 = zext i1 %1155 to i32
  %1157 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 3
  %1158 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 2
  %1159 = select i1 %1152, %struct.opj_mqc_state** %1158, %struct.opj_mqc_state** %1157
  %1160 = select i1 %1152, i32 %1154, i32 %1156
  %1161 = bitcast %struct.opj_mqc_state** %1159 to i64*
  %1162 = load i64, i64* %1161, align 8
  %1163 = bitcast %struct.opj_mqc_state** %1144 to i64*
  store i64 %1162, i64* %1163, align 8
  br label %1164

1164:                                             ; preds = %1188, %1151
  %1165 = phi i32 [ %1131, %1151 ], [ %1192, %1188 ]
  %1166 = phi i32 [ %1147, %1151 ], [ %1191, %1188 ]
  %1167 = phi i32 [ %1133, %1151 ], [ %1193, %1188 ]
  %1168 = icmp eq i32 %1167, 0
  br i1 %1168, label %1169, label %1188

1169:                                             ; preds = %1164
  %1170 = load i8*, i8** %316, align 8
  %1171 = getelementptr inbounds i8, i8* %1170, i64 1
  %1172 = load i8, i8* %1171, align 1
  %1173 = zext i8 %1172 to i32
  %1174 = load i8, i8* %1170, align 1
  %1175 = icmp eq i8 %1174, -1
  br i1 %1175, label %1176, label %1185

1176:                                             ; preds = %1169
  %1177 = icmp ugt i8 %1172, -113
  br i1 %1177, label %1178, label %1182

1178:                                             ; preds = %1176
  %1179 = add i32 %1165, 65280
  %1180 = load i32, i32* %318, align 4
  %1181 = add i32 %1180, 1
  store i32 %1181, i32* %318, align 4
  br label %1188

1182:                                             ; preds = %1176
  store i8* %1171, i8** %316, align 8
  %1183 = shl nuw nsw i32 %1173, 9
  %1184 = add i32 %1183, %1165
  br label %1188

1185:                                             ; preds = %1169
  store i8* %1171, i8** %316, align 8
  %1186 = shl nuw nsw i32 %1173, 8
  %1187 = add i32 %1186, %1165
  br label %1188

1188:                                             ; preds = %1185, %1182, %1178, %1164
  %1189 = phi i32 [ %1165, %1164 ], [ %1179, %1178 ], [ %1184, %1182 ], [ %1187, %1185 ]
  %1190 = phi i32 [ %1167, %1164 ], [ 8, %1178 ], [ 7, %1182 ], [ 8, %1185 ]
  %1191 = shl i32 %1166, 1
  %1192 = shl i32 %1189, 1
  %1193 = add i32 %1190, -1
  %1194 = icmp ult i32 %1191, 32768
  br i1 %1194, label %1164, label %1247

1195:                                             ; preds = %1137
  %1196 = shl i32 %1147, 16
  %1197 = sub i32 %1131, %1196
  %1198 = trunc i32 %1148 to i16
  %1199 = icmp sgt i16 %1198, -1
  br i1 %1199, label %1200, label %1244

1200:                                             ; preds = %1195
  %1201 = icmp ult i32 %1148, %1147
  %1202 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 1
  %1203 = load i32, i32* %1202, align 4
  %1204 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 2
  %1205 = icmp eq i32 %1203, 0
  %1206 = zext i1 %1205 to i32
  %1207 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 3
  %1208 = select i1 %1201, %struct.opj_mqc_state** %1207, %struct.opj_mqc_state** %1204
  %1209 = select i1 %1201, i32 %1206, i32 %1203
  %1210 = bitcast %struct.opj_mqc_state** %1208 to i64*
  %1211 = load i64, i64* %1210, align 8
  %1212 = bitcast %struct.opj_mqc_state** %1144 to i64*
  store i64 %1211, i64* %1212, align 8
  br label %1213

1213:                                             ; preds = %1237, %1200
  %1214 = phi i32 [ %1197, %1200 ], [ %1241, %1237 ]
  %1215 = phi i32 [ %1148, %1200 ], [ %1240, %1237 ]
  %1216 = phi i32 [ %1133, %1200 ], [ %1242, %1237 ]
  %1217 = icmp eq i32 %1216, 0
  br i1 %1217, label %1218, label %1237

1218:                                             ; preds = %1213
  %1219 = load i8*, i8** %316, align 8
  %1220 = getelementptr inbounds i8, i8* %1219, i64 1
  %1221 = load i8, i8* %1220, align 1
  %1222 = zext i8 %1221 to i32
  %1223 = load i8, i8* %1219, align 1
  %1224 = icmp eq i8 %1223, -1
  br i1 %1224, label %1225, label %1234

1225:                                             ; preds = %1218
  %1226 = icmp ugt i8 %1221, -113
  br i1 %1226, label %1227, label %1231

1227:                                             ; preds = %1225
  %1228 = add i32 %1214, 65280
  %1229 = load i32, i32* %318, align 4
  %1230 = add i32 %1229, 1
  store i32 %1230, i32* %318, align 4
  br label %1237

1231:                                             ; preds = %1225
  store i8* %1220, i8** %316, align 8
  %1232 = shl nuw nsw i32 %1222, 9
  %1233 = add i32 %1232, %1214
  br label %1237

1234:                                             ; preds = %1218
  store i8* %1220, i8** %316, align 8
  %1235 = shl nuw nsw i32 %1222, 8
  %1236 = add i32 %1235, %1214
  br label %1237

1237:                                             ; preds = %1234, %1231, %1227, %1213
  %1238 = phi i32 [ %1214, %1213 ], [ %1228, %1227 ], [ %1233, %1231 ], [ %1236, %1234 ]
  %1239 = phi i32 [ %1216, %1213 ], [ 8, %1227 ], [ 7, %1231 ], [ 8, %1234 ]
  %1240 = shl i32 %1215, 1
  %1241 = shl i32 %1238, 1
  %1242 = add i32 %1239, -1
  %1243 = icmp ult i32 %1240, 32768
  br i1 %1243, label %1213, label %1247

1244:                                             ; preds = %1195
  %1245 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1145, i64 0, i32 1
  %1246 = load i32, i32* %1245, align 4
  br label %1247

1247:                                             ; preds = %1237, %1188, %1244
  %1248 = phi i32 [ %1197, %1244 ], [ %1192, %1188 ], [ %1241, %1237 ]
  %1249 = phi i32 [ %1148, %1244 ], [ %1191, %1188 ], [ %1240, %1237 ]
  %1250 = phi i32 [ %1133, %1244 ], [ %1193, %1188 ], [ %1242, %1237 ]
  %1251 = phi i32 [ %1246, %1244 ], [ %1160, %1188 ], [ %1209, %1237 ]
  %1252 = getelementptr inbounds i32, i32* %871, i64 128
  %1253 = load i32, i32* %1252, align 4
  %1254 = lshr i32 %1253, 31
  %1255 = icmp eq i32 %1251, %1254
  %1256 = select i1 %1255, i32 %856, i32 %855
  %1257 = add nsw i32 %1256, %1253
  store i32 %1257, i32* %1252, align 4
  %1258 = or i32 %1134, 67108864
  br label %1259

1259:                                             ; preds = %1247, %1129
  %1260 = phi %struct.opj_mqc_state** [ %1144, %1247 ], [ %1130, %1129 ]
  %1261 = phi i32 [ %1248, %1247 ], [ %1131, %1129 ]
  %1262 = phi i32 [ %1249, %1247 ], [ %1132, %1129 ]
  %1263 = phi i32 [ %1250, %1247 ], [ %1133, %1129 ]
  %1264 = phi i32 [ %1258, %1247 ], [ %1134, %1129 ]
  %1265 = and i32 %1264, 1073750016
  %1266 = icmp eq i32 %1265, 8192
  br i1 %1266, label %1267, label %1389

1267:                                             ; preds = %1259
  %1268 = and i32 %1264, 253440
  %1269 = icmp eq i32 %1268, 0
  %1270 = select i1 %1269, i64 14, i64 15
  %1271 = and i32 %1264, 536870912
  %1272 = icmp eq i32 %1271, 0
  %1273 = select i1 %1272, i64 %1270, i64 16
  %1274 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1273
  %1275 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1274, align 8
  %1276 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 0
  %1277 = load i32, i32* %1276, align 8
  %1278 = sub i32 %1262, %1277
  %1279 = lshr i32 %1261, 16
  %1280 = icmp ult i32 %1279, %1277
  br i1 %1280, label %1281, label %1325

1281:                                             ; preds = %1267
  %1282 = icmp ult i32 %1278, %1277
  %1283 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 1
  %1284 = load i32, i32* %1283, align 4
  %1285 = icmp eq i32 %1284, 0
  %1286 = zext i1 %1285 to i32
  %1287 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 3
  %1288 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 2
  %1289 = select i1 %1282, %struct.opj_mqc_state** %1288, %struct.opj_mqc_state** %1287
  %1290 = select i1 %1282, i32 %1284, i32 %1286
  %1291 = bitcast %struct.opj_mqc_state** %1289 to i64*
  %1292 = load i64, i64* %1291, align 8
  %1293 = bitcast %struct.opj_mqc_state** %1274 to i64*
  store i64 %1292, i64* %1293, align 8
  br label %1294

1294:                                             ; preds = %1318, %1281
  %1295 = phi i32 [ %1261, %1281 ], [ %1322, %1318 ]
  %1296 = phi i32 [ %1277, %1281 ], [ %1321, %1318 ]
  %1297 = phi i32 [ %1263, %1281 ], [ %1323, %1318 ]
  %1298 = icmp eq i32 %1297, 0
  br i1 %1298, label %1299, label %1318

1299:                                             ; preds = %1294
  %1300 = load i8*, i8** %316, align 8
  %1301 = getelementptr inbounds i8, i8* %1300, i64 1
  %1302 = load i8, i8* %1301, align 1
  %1303 = zext i8 %1302 to i32
  %1304 = load i8, i8* %1300, align 1
  %1305 = icmp eq i8 %1304, -1
  br i1 %1305, label %1306, label %1315

1306:                                             ; preds = %1299
  %1307 = icmp ugt i8 %1302, -113
  br i1 %1307, label %1308, label %1312

1308:                                             ; preds = %1306
  %1309 = add i32 %1295, 65280
  %1310 = load i32, i32* %318, align 4
  %1311 = add i32 %1310, 1
  store i32 %1311, i32* %318, align 4
  br label %1318

1312:                                             ; preds = %1306
  store i8* %1301, i8** %316, align 8
  %1313 = shl nuw nsw i32 %1303, 9
  %1314 = add i32 %1313, %1295
  br label %1318

1315:                                             ; preds = %1299
  store i8* %1301, i8** %316, align 8
  %1316 = shl nuw nsw i32 %1303, 8
  %1317 = add i32 %1316, %1295
  br label %1318

1318:                                             ; preds = %1315, %1312, %1308, %1294
  %1319 = phi i32 [ %1295, %1294 ], [ %1309, %1308 ], [ %1314, %1312 ], [ %1317, %1315 ]
  %1320 = phi i32 [ %1297, %1294 ], [ 8, %1308 ], [ 7, %1312 ], [ 8, %1315 ]
  %1321 = shl i32 %1296, 1
  %1322 = shl i32 %1319, 1
  %1323 = add i32 %1320, -1
  %1324 = icmp ult i32 %1321, 32768
  br i1 %1324, label %1294, label %1377

1325:                                             ; preds = %1267
  %1326 = shl i32 %1277, 16
  %1327 = sub i32 %1261, %1326
  %1328 = trunc i32 %1278 to i16
  %1329 = icmp sgt i16 %1328, -1
  br i1 %1329, label %1330, label %1374

1330:                                             ; preds = %1325
  %1331 = icmp ult i32 %1278, %1277
  %1332 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 1
  %1333 = load i32, i32* %1332, align 4
  %1334 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 2
  %1335 = icmp eq i32 %1333, 0
  %1336 = zext i1 %1335 to i32
  %1337 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 3
  %1338 = select i1 %1331, %struct.opj_mqc_state** %1337, %struct.opj_mqc_state** %1334
  %1339 = select i1 %1331, i32 %1336, i32 %1333
  %1340 = bitcast %struct.opj_mqc_state** %1338 to i64*
  %1341 = load i64, i64* %1340, align 8
  %1342 = bitcast %struct.opj_mqc_state** %1274 to i64*
  store i64 %1341, i64* %1342, align 8
  br label %1343

1343:                                             ; preds = %1367, %1330
  %1344 = phi i32 [ %1327, %1330 ], [ %1371, %1367 ]
  %1345 = phi i32 [ %1278, %1330 ], [ %1370, %1367 ]
  %1346 = phi i32 [ %1263, %1330 ], [ %1372, %1367 ]
  %1347 = icmp eq i32 %1346, 0
  br i1 %1347, label %1348, label %1367

1348:                                             ; preds = %1343
  %1349 = load i8*, i8** %316, align 8
  %1350 = getelementptr inbounds i8, i8* %1349, i64 1
  %1351 = load i8, i8* %1350, align 1
  %1352 = zext i8 %1351 to i32
  %1353 = load i8, i8* %1349, align 1
  %1354 = icmp eq i8 %1353, -1
  br i1 %1354, label %1355, label %1364

1355:                                             ; preds = %1348
  %1356 = icmp ugt i8 %1351, -113
  br i1 %1356, label %1357, label %1361

1357:                                             ; preds = %1355
  %1358 = add i32 %1344, 65280
  %1359 = load i32, i32* %318, align 4
  %1360 = add i32 %1359, 1
  store i32 %1360, i32* %318, align 4
  br label %1367

1361:                                             ; preds = %1355
  store i8* %1350, i8** %316, align 8
  %1362 = shl nuw nsw i32 %1352, 9
  %1363 = add i32 %1362, %1344
  br label %1367

1364:                                             ; preds = %1348
  store i8* %1350, i8** %316, align 8
  %1365 = shl nuw nsw i32 %1352, 8
  %1366 = add i32 %1365, %1344
  br label %1367

1367:                                             ; preds = %1364, %1361, %1357, %1343
  %1368 = phi i32 [ %1344, %1343 ], [ %1358, %1357 ], [ %1363, %1361 ], [ %1366, %1364 ]
  %1369 = phi i32 [ %1346, %1343 ], [ 8, %1357 ], [ 7, %1361 ], [ 8, %1364 ]
  %1370 = shl i32 %1345, 1
  %1371 = shl i32 %1368, 1
  %1372 = add i32 %1369, -1
  %1373 = icmp ult i32 %1370, 32768
  br i1 %1373, label %1343, label %1377

1374:                                             ; preds = %1325
  %1375 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1275, i64 0, i32 1
  %1376 = load i32, i32* %1375, align 4
  br label %1377

1377:                                             ; preds = %1367, %1318, %1374
  %1378 = phi i32 [ %1327, %1374 ], [ %1322, %1318 ], [ %1371, %1367 ]
  %1379 = phi i32 [ %1278, %1374 ], [ %1321, %1318 ], [ %1370, %1367 ]
  %1380 = phi i32 [ %1263, %1374 ], [ %1323, %1318 ], [ %1372, %1367 ]
  %1381 = phi i32 [ %1376, %1374 ], [ %1290, %1318 ], [ %1339, %1367 ]
  %1382 = getelementptr inbounds i32, i32* %871, i64 192
  %1383 = load i32, i32* %1382, align 4
  %1384 = lshr i32 %1383, 31
  %1385 = icmp eq i32 %1381, %1384
  %1386 = select i1 %1385, i32 %856, i32 %855
  %1387 = add nsw i32 %1386, %1383
  store i32 %1387, i32* %1382, align 4
  %1388 = or i32 %1264, 536870912
  br label %1389

1389:                                             ; preds = %1377, %1259
  %1390 = phi %struct.opj_mqc_state** [ %1274, %1377 ], [ %1260, %1259 ]
  %1391 = phi i32 [ %1378, %1377 ], [ %1261, %1259 ]
  %1392 = phi i32 [ %1379, %1377 ], [ %1262, %1259 ]
  %1393 = phi i32 [ %1380, %1377 ], [ %1263, %1259 ]
  %1394 = phi i32 [ %1388, %1377 ], [ %1264, %1259 ]
  store i32 %1394, i32* %872, align 4
  br label %1395

1395:                                             ; preds = %1389, %865
  %1396 = phi %struct.opj_mqc_state** [ %1390, %1389 ], [ %870, %865 ]
  %1397 = phi i32 [ %1391, %1389 ], [ %869, %865 ]
  %1398 = phi i32 [ %1392, %1389 ], [ %868, %865 ]
  %1399 = phi i32 [ %1393, %1389 ], [ %867, %865 ]
  %1400 = add nuw nsw i32 %866, 1
  %1401 = getelementptr inbounds i32, i32* %871, i64 1
  %1402 = getelementptr inbounds i32, i32* %872, i64 1
  %1403 = icmp eq i32 %1400, 64
  br i1 %1403, label %1404, label %865

1404:                                             ; preds = %1395
  %1405 = add nuw nsw i32 %858, 4
  %1406 = getelementptr inbounds i32, i32* %871, i64 193
  %1407 = getelementptr inbounds i32, i32* %872, i64 3
  %1408 = icmp ult i32 %1405, 64
  br i1 %1408, label %857, label %1409

1409:                                             ; preds = %1404
  store %struct.opj_mqc_state** %1396, %struct.opj_mqc_state*** %309, align 8
  store i32 %1397, i32* %310, align 8
  store i32 %1398, i32* %312, align 4
  store i32 %1399, i32* %314, align 8
  br label %2174

1410:                                             ; preds = %840
  %1411 = add i32 %841, 3
  %1412 = zext i32 %1411 to i64
  %1413 = getelementptr inbounds i32, i32* %847, i64 %1412
  %1414 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %309, align 8
  %1415 = load i32, i32* %310, align 8
  %1416 = load i32, i32* %312, align 4
  %1417 = load i32, i32* %314, align 8
  %1418 = shl i32 1, %354
  %1419 = ashr i32 %1418, 1
  %1420 = icmp ugt i32 %843, 3
  br i1 %1420, label %1421, label %1992

1421:                                             ; preds = %1410
  %1422 = icmp eq i32 %841, 0
  %1423 = sub nsw i32 0, %1419
  %1424 = zext i32 %841 to i64
  %1425 = shl i32 %841, 1
  %1426 = zext i32 %1425 to i64
  %1427 = mul i32 %841, 3
  %1428 = zext i32 %1427 to i64
  br label %1429

1429:                                             ; preds = %1979, %1421
  %1430 = phi i32 [ %843, %1421 ], [ %1980, %1979 ]
  %1431 = phi i32 [ 0, %1421 ], [ %1987, %1979 ]
  %1432 = phi i32 [ %1417, %1421 ], [ %1986, %1979 ]
  %1433 = phi i32 [ %1416, %1421 ], [ %1985, %1979 ]
  %1434 = phi i32 [ %1415, %1421 ], [ %1984, %1979 ]
  %1435 = phi %struct.opj_mqc_state** [ %1414, %1421 ], [ %1983, %1979 ]
  %1436 = phi i32* [ %1413, %1421 ], [ %1989, %1979 ]
  %1437 = phi i32* [ %846, %1421 ], [ %1988, %1979 ]
  br i1 %1422, label %1979, label %1438

1438:                                             ; preds = %1429, %1968
  %1439 = phi i32 [ %1973, %1968 ], [ 0, %1429 ]
  %1440 = phi i32 [ %1972, %1968 ], [ %1432, %1429 ]
  %1441 = phi i32 [ %1971, %1968 ], [ %1433, %1429 ]
  %1442 = phi i32 [ %1970, %1968 ], [ %1434, %1429 ]
  %1443 = phi %struct.opj_mqc_state** [ %1969, %1968 ], [ %1435, %1429 ]
  %1444 = phi i32* [ %1975, %1968 ], [ %1436, %1429 ]
  %1445 = phi i32* [ %1974, %1968 ], [ %1437, %1429 ]
  %1446 = load i32, i32* %1444, align 4
  %1447 = icmp eq i32 %1446, 0
  br i1 %1447, label %1968, label %1448

1448:                                             ; preds = %1438
  %1449 = and i32 %1446, 2097168
  %1450 = icmp eq i32 %1449, 16
  br i1 %1450, label %1451, label %1572

1451:                                             ; preds = %1448
  %1452 = and i32 %1446, 495
  %1453 = icmp eq i32 %1452, 0
  %1454 = select i1 %1453, i64 14, i64 15
  %1455 = and i32 %1446, 1048576
  %1456 = icmp eq i32 %1455, 0
  %1457 = select i1 %1456, i64 %1454, i64 16
  %1458 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1457
  %1459 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1458, align 8
  %1460 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 0
  %1461 = load i32, i32* %1460, align 8
  %1462 = sub i32 %1441, %1461
  %1463 = lshr i32 %1442, 16
  %1464 = icmp ult i32 %1463, %1461
  br i1 %1464, label %1465, label %1509

1465:                                             ; preds = %1451
  %1466 = icmp ult i32 %1462, %1461
  %1467 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 1
  %1468 = load i32, i32* %1467, align 4
  %1469 = icmp eq i32 %1468, 0
  %1470 = zext i1 %1469 to i32
  %1471 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 3
  %1472 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 2
  %1473 = select i1 %1466, %struct.opj_mqc_state** %1472, %struct.opj_mqc_state** %1471
  %1474 = select i1 %1466, i32 %1468, i32 %1470
  %1475 = bitcast %struct.opj_mqc_state** %1473 to i64*
  %1476 = load i64, i64* %1475, align 8
  %1477 = bitcast %struct.opj_mqc_state** %1458 to i64*
  store i64 %1476, i64* %1477, align 8
  br label %1478

1478:                                             ; preds = %1502, %1465
  %1479 = phi i32 [ %1442, %1465 ], [ %1506, %1502 ]
  %1480 = phi i32 [ %1461, %1465 ], [ %1505, %1502 ]
  %1481 = phi i32 [ %1440, %1465 ], [ %1507, %1502 ]
  %1482 = icmp eq i32 %1481, 0
  br i1 %1482, label %1483, label %1502

1483:                                             ; preds = %1478
  %1484 = load i8*, i8** %316, align 8
  %1485 = getelementptr inbounds i8, i8* %1484, i64 1
  %1486 = load i8, i8* %1485, align 1
  %1487 = zext i8 %1486 to i32
  %1488 = load i8, i8* %1484, align 1
  %1489 = icmp eq i8 %1488, -1
  br i1 %1489, label %1490, label %1499

1490:                                             ; preds = %1483
  %1491 = icmp ugt i8 %1486, -113
  br i1 %1491, label %1492, label %1496

1492:                                             ; preds = %1490
  %1493 = add i32 %1479, 65280
  %1494 = load i32, i32* %318, align 4
  %1495 = add i32 %1494, 1
  store i32 %1495, i32* %318, align 4
  br label %1502

1496:                                             ; preds = %1490
  store i8* %1485, i8** %316, align 8
  %1497 = shl nuw nsw i32 %1487, 9
  %1498 = add i32 %1497, %1479
  br label %1502

1499:                                             ; preds = %1483
  store i8* %1485, i8** %316, align 8
  %1500 = shl nuw nsw i32 %1487, 8
  %1501 = add i32 %1500, %1479
  br label %1502

1502:                                             ; preds = %1499, %1496, %1492, %1478
  %1503 = phi i32 [ %1479, %1478 ], [ %1493, %1492 ], [ %1498, %1496 ], [ %1501, %1499 ]
  %1504 = phi i32 [ %1481, %1478 ], [ 8, %1492 ], [ 7, %1496 ], [ 8, %1499 ]
  %1505 = shl i32 %1480, 1
  %1506 = shl i32 %1503, 1
  %1507 = add i32 %1504, -1
  %1508 = icmp ult i32 %1505, 32768
  br i1 %1508, label %1478, label %1561

1509:                                             ; preds = %1451
  %1510 = shl i32 %1461, 16
  %1511 = sub i32 %1442, %1510
  %1512 = trunc i32 %1462 to i16
  %1513 = icmp sgt i16 %1512, -1
  br i1 %1513, label %1514, label %1558

1514:                                             ; preds = %1509
  %1515 = icmp ult i32 %1462, %1461
  %1516 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 1
  %1517 = load i32, i32* %1516, align 4
  %1518 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 2
  %1519 = icmp eq i32 %1517, 0
  %1520 = zext i1 %1519 to i32
  %1521 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 3
  %1522 = select i1 %1515, %struct.opj_mqc_state** %1521, %struct.opj_mqc_state** %1518
  %1523 = select i1 %1515, i32 %1520, i32 %1517
  %1524 = bitcast %struct.opj_mqc_state** %1522 to i64*
  %1525 = load i64, i64* %1524, align 8
  %1526 = bitcast %struct.opj_mqc_state** %1458 to i64*
  store i64 %1525, i64* %1526, align 8
  br label %1527

1527:                                             ; preds = %1551, %1514
  %1528 = phi i32 [ %1511, %1514 ], [ %1555, %1551 ]
  %1529 = phi i32 [ %1462, %1514 ], [ %1554, %1551 ]
  %1530 = phi i32 [ %1440, %1514 ], [ %1556, %1551 ]
  %1531 = icmp eq i32 %1530, 0
  br i1 %1531, label %1532, label %1551

1532:                                             ; preds = %1527
  %1533 = load i8*, i8** %316, align 8
  %1534 = getelementptr inbounds i8, i8* %1533, i64 1
  %1535 = load i8, i8* %1534, align 1
  %1536 = zext i8 %1535 to i32
  %1537 = load i8, i8* %1533, align 1
  %1538 = icmp eq i8 %1537, -1
  br i1 %1538, label %1539, label %1548

1539:                                             ; preds = %1532
  %1540 = icmp ugt i8 %1535, -113
  br i1 %1540, label %1541, label %1545

1541:                                             ; preds = %1539
  %1542 = add i32 %1528, 65280
  %1543 = load i32, i32* %318, align 4
  %1544 = add i32 %1543, 1
  store i32 %1544, i32* %318, align 4
  br label %1551

1545:                                             ; preds = %1539
  store i8* %1534, i8** %316, align 8
  %1546 = shl nuw nsw i32 %1536, 9
  %1547 = add i32 %1546, %1528
  br label %1551

1548:                                             ; preds = %1532
  store i8* %1534, i8** %316, align 8
  %1549 = shl nuw nsw i32 %1536, 8
  %1550 = add i32 %1549, %1528
  br label %1551

1551:                                             ; preds = %1548, %1545, %1541, %1527
  %1552 = phi i32 [ %1528, %1527 ], [ %1542, %1541 ], [ %1547, %1545 ], [ %1550, %1548 ]
  %1553 = phi i32 [ %1530, %1527 ], [ 8, %1541 ], [ 7, %1545 ], [ 8, %1548 ]
  %1554 = shl i32 %1529, 1
  %1555 = shl i32 %1552, 1
  %1556 = add i32 %1553, -1
  %1557 = icmp ult i32 %1554, 32768
  br i1 %1557, label %1527, label %1561

1558:                                             ; preds = %1509
  %1559 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1459, i64 0, i32 1
  %1560 = load i32, i32* %1559, align 4
  br label %1561

1561:                                             ; preds = %1551, %1502, %1558
  %1562 = phi i32 [ %1511, %1558 ], [ %1506, %1502 ], [ %1555, %1551 ]
  %1563 = phi i32 [ %1462, %1558 ], [ %1505, %1502 ], [ %1554, %1551 ]
  %1564 = phi i32 [ %1440, %1558 ], [ %1507, %1502 ], [ %1556, %1551 ]
  %1565 = phi i32 [ %1560, %1558 ], [ %1474, %1502 ], [ %1523, %1551 ]
  %1566 = load i32, i32* %1445, align 4
  %1567 = lshr i32 %1566, 31
  %1568 = icmp eq i32 %1565, %1567
  %1569 = select i1 %1568, i32 %1423, i32 %1419
  %1570 = add nsw i32 %1569, %1566
  store i32 %1570, i32* %1445, align 4
  %1571 = or i32 %1446, 1048576
  br label %1572

1572:                                             ; preds = %1561, %1448
  %1573 = phi %struct.opj_mqc_state** [ %1458, %1561 ], [ %1443, %1448 ]
  %1574 = phi i32 [ %1562, %1561 ], [ %1442, %1448 ]
  %1575 = phi i32 [ %1563, %1561 ], [ %1441, %1448 ]
  %1576 = phi i32 [ %1564, %1561 ], [ %1440, %1448 ]
  %1577 = phi i32 [ %1571, %1561 ], [ %1446, %1448 ]
  %1578 = and i32 %1577, 16777344
  %1579 = icmp eq i32 %1578, 128
  br i1 %1579, label %1580, label %1702

1580:                                             ; preds = %1572
  %1581 = and i32 %1577, 3960
  %1582 = icmp eq i32 %1581, 0
  %1583 = select i1 %1582, i64 14, i64 15
  %1584 = and i32 %1577, 8388608
  %1585 = icmp eq i32 %1584, 0
  %1586 = select i1 %1585, i64 %1583, i64 16
  %1587 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1586
  %1588 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1587, align 8
  %1589 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 0
  %1590 = load i32, i32* %1589, align 8
  %1591 = sub i32 %1575, %1590
  %1592 = lshr i32 %1574, 16
  %1593 = icmp ult i32 %1592, %1590
  br i1 %1593, label %1594, label %1638

1594:                                             ; preds = %1580
  %1595 = icmp ult i32 %1591, %1590
  %1596 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 1
  %1597 = load i32, i32* %1596, align 4
  %1598 = icmp eq i32 %1597, 0
  %1599 = zext i1 %1598 to i32
  %1600 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 3
  %1601 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 2
  %1602 = select i1 %1595, %struct.opj_mqc_state** %1601, %struct.opj_mqc_state** %1600
  %1603 = select i1 %1595, i32 %1597, i32 %1599
  %1604 = bitcast %struct.opj_mqc_state** %1602 to i64*
  %1605 = load i64, i64* %1604, align 8
  %1606 = bitcast %struct.opj_mqc_state** %1587 to i64*
  store i64 %1605, i64* %1606, align 8
  br label %1607

1607:                                             ; preds = %1631, %1594
  %1608 = phi i32 [ %1574, %1594 ], [ %1635, %1631 ]
  %1609 = phi i32 [ %1590, %1594 ], [ %1634, %1631 ]
  %1610 = phi i32 [ %1576, %1594 ], [ %1636, %1631 ]
  %1611 = icmp eq i32 %1610, 0
  br i1 %1611, label %1612, label %1631

1612:                                             ; preds = %1607
  %1613 = load i8*, i8** %316, align 8
  %1614 = getelementptr inbounds i8, i8* %1613, i64 1
  %1615 = load i8, i8* %1614, align 1
  %1616 = zext i8 %1615 to i32
  %1617 = load i8, i8* %1613, align 1
  %1618 = icmp eq i8 %1617, -1
  br i1 %1618, label %1619, label %1628

1619:                                             ; preds = %1612
  %1620 = icmp ugt i8 %1615, -113
  br i1 %1620, label %1621, label %1625

1621:                                             ; preds = %1619
  %1622 = add i32 %1608, 65280
  %1623 = load i32, i32* %318, align 4
  %1624 = add i32 %1623, 1
  store i32 %1624, i32* %318, align 4
  br label %1631

1625:                                             ; preds = %1619
  store i8* %1614, i8** %316, align 8
  %1626 = shl nuw nsw i32 %1616, 9
  %1627 = add i32 %1626, %1608
  br label %1631

1628:                                             ; preds = %1612
  store i8* %1614, i8** %316, align 8
  %1629 = shl nuw nsw i32 %1616, 8
  %1630 = add i32 %1629, %1608
  br label %1631

1631:                                             ; preds = %1628, %1625, %1621, %1607
  %1632 = phi i32 [ %1608, %1607 ], [ %1622, %1621 ], [ %1627, %1625 ], [ %1630, %1628 ]
  %1633 = phi i32 [ %1610, %1607 ], [ 8, %1621 ], [ 7, %1625 ], [ 8, %1628 ]
  %1634 = shl i32 %1609, 1
  %1635 = shl i32 %1632, 1
  %1636 = add i32 %1633, -1
  %1637 = icmp ult i32 %1634, 32768
  br i1 %1637, label %1607, label %1690

1638:                                             ; preds = %1580
  %1639 = shl i32 %1590, 16
  %1640 = sub i32 %1574, %1639
  %1641 = trunc i32 %1591 to i16
  %1642 = icmp sgt i16 %1641, -1
  br i1 %1642, label %1643, label %1687

1643:                                             ; preds = %1638
  %1644 = icmp ult i32 %1591, %1590
  %1645 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 1
  %1646 = load i32, i32* %1645, align 4
  %1647 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 2
  %1648 = icmp eq i32 %1646, 0
  %1649 = zext i1 %1648 to i32
  %1650 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 3
  %1651 = select i1 %1644, %struct.opj_mqc_state** %1650, %struct.opj_mqc_state** %1647
  %1652 = select i1 %1644, i32 %1649, i32 %1646
  %1653 = bitcast %struct.opj_mqc_state** %1651 to i64*
  %1654 = load i64, i64* %1653, align 8
  %1655 = bitcast %struct.opj_mqc_state** %1587 to i64*
  store i64 %1654, i64* %1655, align 8
  br label %1656

1656:                                             ; preds = %1680, %1643
  %1657 = phi i32 [ %1640, %1643 ], [ %1684, %1680 ]
  %1658 = phi i32 [ %1591, %1643 ], [ %1683, %1680 ]
  %1659 = phi i32 [ %1576, %1643 ], [ %1685, %1680 ]
  %1660 = icmp eq i32 %1659, 0
  br i1 %1660, label %1661, label %1680

1661:                                             ; preds = %1656
  %1662 = load i8*, i8** %316, align 8
  %1663 = getelementptr inbounds i8, i8* %1662, i64 1
  %1664 = load i8, i8* %1663, align 1
  %1665 = zext i8 %1664 to i32
  %1666 = load i8, i8* %1662, align 1
  %1667 = icmp eq i8 %1666, -1
  br i1 %1667, label %1668, label %1677

1668:                                             ; preds = %1661
  %1669 = icmp ugt i8 %1664, -113
  br i1 %1669, label %1670, label %1674

1670:                                             ; preds = %1668
  %1671 = add i32 %1657, 65280
  %1672 = load i32, i32* %318, align 4
  %1673 = add i32 %1672, 1
  store i32 %1673, i32* %318, align 4
  br label %1680

1674:                                             ; preds = %1668
  store i8* %1663, i8** %316, align 8
  %1675 = shl nuw nsw i32 %1665, 9
  %1676 = add i32 %1675, %1657
  br label %1680

1677:                                             ; preds = %1661
  store i8* %1663, i8** %316, align 8
  %1678 = shl nuw nsw i32 %1665, 8
  %1679 = add i32 %1678, %1657
  br label %1680

1680:                                             ; preds = %1677, %1674, %1670, %1656
  %1681 = phi i32 [ %1657, %1656 ], [ %1671, %1670 ], [ %1676, %1674 ], [ %1679, %1677 ]
  %1682 = phi i32 [ %1659, %1656 ], [ 8, %1670 ], [ 7, %1674 ], [ 8, %1677 ]
  %1683 = shl i32 %1658, 1
  %1684 = shl i32 %1681, 1
  %1685 = add i32 %1682, -1
  %1686 = icmp ult i32 %1683, 32768
  br i1 %1686, label %1656, label %1690

1687:                                             ; preds = %1638
  %1688 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1588, i64 0, i32 1
  %1689 = load i32, i32* %1688, align 4
  br label %1690

1690:                                             ; preds = %1680, %1631, %1687
  %1691 = phi i32 [ %1640, %1687 ], [ %1635, %1631 ], [ %1684, %1680 ]
  %1692 = phi i32 [ %1591, %1687 ], [ %1634, %1631 ], [ %1683, %1680 ]
  %1693 = phi i32 [ %1576, %1687 ], [ %1636, %1631 ], [ %1685, %1680 ]
  %1694 = phi i32 [ %1689, %1687 ], [ %1603, %1631 ], [ %1652, %1680 ]
  %1695 = getelementptr inbounds i32, i32* %1445, i64 %1424
  %1696 = load i32, i32* %1695, align 4
  %1697 = lshr i32 %1696, 31
  %1698 = icmp eq i32 %1694, %1697
  %1699 = select i1 %1698, i32 %1423, i32 %1419
  %1700 = add nsw i32 %1699, %1696
  store i32 %1700, i32* %1695, align 4
  %1701 = or i32 %1577, 8388608
  br label %1702

1702:                                             ; preds = %1690, %1572
  %1703 = phi %struct.opj_mqc_state** [ %1587, %1690 ], [ %1573, %1572 ]
  %1704 = phi i32 [ %1691, %1690 ], [ %1574, %1572 ]
  %1705 = phi i32 [ %1692, %1690 ], [ %1575, %1572 ]
  %1706 = phi i32 [ %1693, %1690 ], [ %1576, %1572 ]
  %1707 = phi i32 [ %1701, %1690 ], [ %1577, %1572 ]
  %1708 = and i32 %1707, 134218752
  %1709 = icmp eq i32 %1708, 1024
  br i1 %1709, label %1710, label %1832

1710:                                             ; preds = %1702
  %1711 = and i32 %1707, 31680
  %1712 = icmp eq i32 %1711, 0
  %1713 = select i1 %1712, i64 14, i64 15
  %1714 = and i32 %1707, 67108864
  %1715 = icmp eq i32 %1714, 0
  %1716 = select i1 %1715, i64 %1713, i64 16
  %1717 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1716
  %1718 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1717, align 8
  %1719 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 0
  %1720 = load i32, i32* %1719, align 8
  %1721 = sub i32 %1705, %1720
  %1722 = lshr i32 %1704, 16
  %1723 = icmp ult i32 %1722, %1720
  br i1 %1723, label %1724, label %1768

1724:                                             ; preds = %1710
  %1725 = icmp ult i32 %1721, %1720
  %1726 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 1
  %1727 = load i32, i32* %1726, align 4
  %1728 = icmp eq i32 %1727, 0
  %1729 = zext i1 %1728 to i32
  %1730 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 3
  %1731 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 2
  %1732 = select i1 %1725, %struct.opj_mqc_state** %1731, %struct.opj_mqc_state** %1730
  %1733 = select i1 %1725, i32 %1727, i32 %1729
  %1734 = bitcast %struct.opj_mqc_state** %1732 to i64*
  %1735 = load i64, i64* %1734, align 8
  %1736 = bitcast %struct.opj_mqc_state** %1717 to i64*
  store i64 %1735, i64* %1736, align 8
  br label %1737

1737:                                             ; preds = %1761, %1724
  %1738 = phi i32 [ %1704, %1724 ], [ %1765, %1761 ]
  %1739 = phi i32 [ %1720, %1724 ], [ %1764, %1761 ]
  %1740 = phi i32 [ %1706, %1724 ], [ %1766, %1761 ]
  %1741 = icmp eq i32 %1740, 0
  br i1 %1741, label %1742, label %1761

1742:                                             ; preds = %1737
  %1743 = load i8*, i8** %316, align 8
  %1744 = getelementptr inbounds i8, i8* %1743, i64 1
  %1745 = load i8, i8* %1744, align 1
  %1746 = zext i8 %1745 to i32
  %1747 = load i8, i8* %1743, align 1
  %1748 = icmp eq i8 %1747, -1
  br i1 %1748, label %1749, label %1758

1749:                                             ; preds = %1742
  %1750 = icmp ugt i8 %1745, -113
  br i1 %1750, label %1751, label %1755

1751:                                             ; preds = %1749
  %1752 = add i32 %1738, 65280
  %1753 = load i32, i32* %318, align 4
  %1754 = add i32 %1753, 1
  store i32 %1754, i32* %318, align 4
  br label %1761

1755:                                             ; preds = %1749
  store i8* %1744, i8** %316, align 8
  %1756 = shl nuw nsw i32 %1746, 9
  %1757 = add i32 %1756, %1738
  br label %1761

1758:                                             ; preds = %1742
  store i8* %1744, i8** %316, align 8
  %1759 = shl nuw nsw i32 %1746, 8
  %1760 = add i32 %1759, %1738
  br label %1761

1761:                                             ; preds = %1758, %1755, %1751, %1737
  %1762 = phi i32 [ %1738, %1737 ], [ %1752, %1751 ], [ %1757, %1755 ], [ %1760, %1758 ]
  %1763 = phi i32 [ %1740, %1737 ], [ 8, %1751 ], [ 7, %1755 ], [ 8, %1758 ]
  %1764 = shl i32 %1739, 1
  %1765 = shl i32 %1762, 1
  %1766 = add i32 %1763, -1
  %1767 = icmp ult i32 %1764, 32768
  br i1 %1767, label %1737, label %1820

1768:                                             ; preds = %1710
  %1769 = shl i32 %1720, 16
  %1770 = sub i32 %1704, %1769
  %1771 = trunc i32 %1721 to i16
  %1772 = icmp sgt i16 %1771, -1
  br i1 %1772, label %1773, label %1817

1773:                                             ; preds = %1768
  %1774 = icmp ult i32 %1721, %1720
  %1775 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 1
  %1776 = load i32, i32* %1775, align 4
  %1777 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 2
  %1778 = icmp eq i32 %1776, 0
  %1779 = zext i1 %1778 to i32
  %1780 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 3
  %1781 = select i1 %1774, %struct.opj_mqc_state** %1780, %struct.opj_mqc_state** %1777
  %1782 = select i1 %1774, i32 %1779, i32 %1776
  %1783 = bitcast %struct.opj_mqc_state** %1781 to i64*
  %1784 = load i64, i64* %1783, align 8
  %1785 = bitcast %struct.opj_mqc_state** %1717 to i64*
  store i64 %1784, i64* %1785, align 8
  br label %1786

1786:                                             ; preds = %1810, %1773
  %1787 = phi i32 [ %1770, %1773 ], [ %1814, %1810 ]
  %1788 = phi i32 [ %1721, %1773 ], [ %1813, %1810 ]
  %1789 = phi i32 [ %1706, %1773 ], [ %1815, %1810 ]
  %1790 = icmp eq i32 %1789, 0
  br i1 %1790, label %1791, label %1810

1791:                                             ; preds = %1786
  %1792 = load i8*, i8** %316, align 8
  %1793 = getelementptr inbounds i8, i8* %1792, i64 1
  %1794 = load i8, i8* %1793, align 1
  %1795 = zext i8 %1794 to i32
  %1796 = load i8, i8* %1792, align 1
  %1797 = icmp eq i8 %1796, -1
  br i1 %1797, label %1798, label %1807

1798:                                             ; preds = %1791
  %1799 = icmp ugt i8 %1794, -113
  br i1 %1799, label %1800, label %1804

1800:                                             ; preds = %1798
  %1801 = add i32 %1787, 65280
  %1802 = load i32, i32* %318, align 4
  %1803 = add i32 %1802, 1
  store i32 %1803, i32* %318, align 4
  br label %1810

1804:                                             ; preds = %1798
  store i8* %1793, i8** %316, align 8
  %1805 = shl nuw nsw i32 %1795, 9
  %1806 = add i32 %1805, %1787
  br label %1810

1807:                                             ; preds = %1791
  store i8* %1793, i8** %316, align 8
  %1808 = shl nuw nsw i32 %1795, 8
  %1809 = add i32 %1808, %1787
  br label %1810

1810:                                             ; preds = %1807, %1804, %1800, %1786
  %1811 = phi i32 [ %1787, %1786 ], [ %1801, %1800 ], [ %1806, %1804 ], [ %1809, %1807 ]
  %1812 = phi i32 [ %1789, %1786 ], [ 8, %1800 ], [ 7, %1804 ], [ 8, %1807 ]
  %1813 = shl i32 %1788, 1
  %1814 = shl i32 %1811, 1
  %1815 = add i32 %1812, -1
  %1816 = icmp ult i32 %1813, 32768
  br i1 %1816, label %1786, label %1820

1817:                                             ; preds = %1768
  %1818 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1718, i64 0, i32 1
  %1819 = load i32, i32* %1818, align 4
  br label %1820

1820:                                             ; preds = %1810, %1761, %1817
  %1821 = phi i32 [ %1770, %1817 ], [ %1765, %1761 ], [ %1814, %1810 ]
  %1822 = phi i32 [ %1721, %1817 ], [ %1764, %1761 ], [ %1813, %1810 ]
  %1823 = phi i32 [ %1706, %1817 ], [ %1766, %1761 ], [ %1815, %1810 ]
  %1824 = phi i32 [ %1819, %1817 ], [ %1733, %1761 ], [ %1782, %1810 ]
  %1825 = getelementptr inbounds i32, i32* %1445, i64 %1426
  %1826 = load i32, i32* %1825, align 4
  %1827 = lshr i32 %1826, 31
  %1828 = icmp eq i32 %1824, %1827
  %1829 = select i1 %1828, i32 %1423, i32 %1419
  %1830 = add nsw i32 %1829, %1826
  store i32 %1830, i32* %1825, align 4
  %1831 = or i32 %1707, 67108864
  br label %1832

1832:                                             ; preds = %1820, %1702
  %1833 = phi %struct.opj_mqc_state** [ %1717, %1820 ], [ %1703, %1702 ]
  %1834 = phi i32 [ %1821, %1820 ], [ %1704, %1702 ]
  %1835 = phi i32 [ %1822, %1820 ], [ %1705, %1702 ]
  %1836 = phi i32 [ %1823, %1820 ], [ %1706, %1702 ]
  %1837 = phi i32 [ %1831, %1820 ], [ %1707, %1702 ]
  %1838 = and i32 %1837, 1073750016
  %1839 = icmp eq i32 %1838, 8192
  br i1 %1839, label %1840, label %1962

1840:                                             ; preds = %1832
  %1841 = and i32 %1837, 253440
  %1842 = icmp eq i32 %1841, 0
  %1843 = select i1 %1842, i64 14, i64 15
  %1844 = and i32 %1837, 536870912
  %1845 = icmp eq i32 %1844, 0
  %1846 = select i1 %1845, i64 %1843, i64 16
  %1847 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %1846
  %1848 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1847, align 8
  %1849 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 0
  %1850 = load i32, i32* %1849, align 8
  %1851 = sub i32 %1835, %1850
  %1852 = lshr i32 %1834, 16
  %1853 = icmp ult i32 %1852, %1850
  br i1 %1853, label %1854, label %1898

1854:                                             ; preds = %1840
  %1855 = icmp ult i32 %1851, %1850
  %1856 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 1
  %1857 = load i32, i32* %1856, align 4
  %1858 = icmp eq i32 %1857, 0
  %1859 = zext i1 %1858 to i32
  %1860 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 3
  %1861 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 2
  %1862 = select i1 %1855, %struct.opj_mqc_state** %1861, %struct.opj_mqc_state** %1860
  %1863 = select i1 %1855, i32 %1857, i32 %1859
  %1864 = bitcast %struct.opj_mqc_state** %1862 to i64*
  %1865 = load i64, i64* %1864, align 8
  %1866 = bitcast %struct.opj_mqc_state** %1847 to i64*
  store i64 %1865, i64* %1866, align 8
  br label %1867

1867:                                             ; preds = %1891, %1854
  %1868 = phi i32 [ %1834, %1854 ], [ %1895, %1891 ]
  %1869 = phi i32 [ %1850, %1854 ], [ %1894, %1891 ]
  %1870 = phi i32 [ %1836, %1854 ], [ %1896, %1891 ]
  %1871 = icmp eq i32 %1870, 0
  br i1 %1871, label %1872, label %1891

1872:                                             ; preds = %1867
  %1873 = load i8*, i8** %316, align 8
  %1874 = getelementptr inbounds i8, i8* %1873, i64 1
  %1875 = load i8, i8* %1874, align 1
  %1876 = zext i8 %1875 to i32
  %1877 = load i8, i8* %1873, align 1
  %1878 = icmp eq i8 %1877, -1
  br i1 %1878, label %1879, label %1888

1879:                                             ; preds = %1872
  %1880 = icmp ugt i8 %1875, -113
  br i1 %1880, label %1881, label %1885

1881:                                             ; preds = %1879
  %1882 = add i32 %1868, 65280
  %1883 = load i32, i32* %318, align 4
  %1884 = add i32 %1883, 1
  store i32 %1884, i32* %318, align 4
  br label %1891

1885:                                             ; preds = %1879
  store i8* %1874, i8** %316, align 8
  %1886 = shl nuw nsw i32 %1876, 9
  %1887 = add i32 %1886, %1868
  br label %1891

1888:                                             ; preds = %1872
  store i8* %1874, i8** %316, align 8
  %1889 = shl nuw nsw i32 %1876, 8
  %1890 = add i32 %1889, %1868
  br label %1891

1891:                                             ; preds = %1888, %1885, %1881, %1867
  %1892 = phi i32 [ %1868, %1867 ], [ %1882, %1881 ], [ %1887, %1885 ], [ %1890, %1888 ]
  %1893 = phi i32 [ %1870, %1867 ], [ 8, %1881 ], [ 7, %1885 ], [ 8, %1888 ]
  %1894 = shl i32 %1869, 1
  %1895 = shl i32 %1892, 1
  %1896 = add i32 %1893, -1
  %1897 = icmp ult i32 %1894, 32768
  br i1 %1897, label %1867, label %1950

1898:                                             ; preds = %1840
  %1899 = shl i32 %1850, 16
  %1900 = sub i32 %1834, %1899
  %1901 = trunc i32 %1851 to i16
  %1902 = icmp sgt i16 %1901, -1
  br i1 %1902, label %1903, label %1947

1903:                                             ; preds = %1898
  %1904 = icmp ult i32 %1851, %1850
  %1905 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 1
  %1906 = load i32, i32* %1905, align 4
  %1907 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 2
  %1908 = icmp eq i32 %1906, 0
  %1909 = zext i1 %1908 to i32
  %1910 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 3
  %1911 = select i1 %1904, %struct.opj_mqc_state** %1910, %struct.opj_mqc_state** %1907
  %1912 = select i1 %1904, i32 %1909, i32 %1906
  %1913 = bitcast %struct.opj_mqc_state** %1911 to i64*
  %1914 = load i64, i64* %1913, align 8
  %1915 = bitcast %struct.opj_mqc_state** %1847 to i64*
  store i64 %1914, i64* %1915, align 8
  br label %1916

1916:                                             ; preds = %1940, %1903
  %1917 = phi i32 [ %1900, %1903 ], [ %1944, %1940 ]
  %1918 = phi i32 [ %1851, %1903 ], [ %1943, %1940 ]
  %1919 = phi i32 [ %1836, %1903 ], [ %1945, %1940 ]
  %1920 = icmp eq i32 %1919, 0
  br i1 %1920, label %1921, label %1940

1921:                                             ; preds = %1916
  %1922 = load i8*, i8** %316, align 8
  %1923 = getelementptr inbounds i8, i8* %1922, i64 1
  %1924 = load i8, i8* %1923, align 1
  %1925 = zext i8 %1924 to i32
  %1926 = load i8, i8* %1922, align 1
  %1927 = icmp eq i8 %1926, -1
  br i1 %1927, label %1928, label %1937

1928:                                             ; preds = %1921
  %1929 = icmp ugt i8 %1924, -113
  br i1 %1929, label %1930, label %1934

1930:                                             ; preds = %1928
  %1931 = add i32 %1917, 65280
  %1932 = load i32, i32* %318, align 4
  %1933 = add i32 %1932, 1
  store i32 %1933, i32* %318, align 4
  br label %1940

1934:                                             ; preds = %1928
  store i8* %1923, i8** %316, align 8
  %1935 = shl nuw nsw i32 %1925, 9
  %1936 = add i32 %1935, %1917
  br label %1940

1937:                                             ; preds = %1921
  store i8* %1923, i8** %316, align 8
  %1938 = shl nuw nsw i32 %1925, 8
  %1939 = add i32 %1938, %1917
  br label %1940

1940:                                             ; preds = %1937, %1934, %1930, %1916
  %1941 = phi i32 [ %1917, %1916 ], [ %1931, %1930 ], [ %1936, %1934 ], [ %1939, %1937 ]
  %1942 = phi i32 [ %1919, %1916 ], [ 8, %1930 ], [ 7, %1934 ], [ 8, %1937 ]
  %1943 = shl i32 %1918, 1
  %1944 = shl i32 %1941, 1
  %1945 = add i32 %1942, -1
  %1946 = icmp ult i32 %1943, 32768
  br i1 %1946, label %1916, label %1950

1947:                                             ; preds = %1898
  %1948 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1848, i64 0, i32 1
  %1949 = load i32, i32* %1948, align 4
  br label %1950

1950:                                             ; preds = %1940, %1891, %1947
  %1951 = phi i32 [ %1900, %1947 ], [ %1895, %1891 ], [ %1944, %1940 ]
  %1952 = phi i32 [ %1851, %1947 ], [ %1894, %1891 ], [ %1943, %1940 ]
  %1953 = phi i32 [ %1836, %1947 ], [ %1896, %1891 ], [ %1945, %1940 ]
  %1954 = phi i32 [ %1949, %1947 ], [ %1863, %1891 ], [ %1912, %1940 ]
  %1955 = getelementptr inbounds i32, i32* %1445, i64 %1428
  %1956 = load i32, i32* %1955, align 4
  %1957 = lshr i32 %1956, 31
  %1958 = icmp eq i32 %1954, %1957
  %1959 = select i1 %1958, i32 %1423, i32 %1419
  %1960 = add nsw i32 %1959, %1956
  store i32 %1960, i32* %1955, align 4
  %1961 = or i32 %1837, 536870912
  br label %1962

1962:                                             ; preds = %1950, %1832
  %1963 = phi %struct.opj_mqc_state** [ %1847, %1950 ], [ %1833, %1832 ]
  %1964 = phi i32 [ %1951, %1950 ], [ %1834, %1832 ]
  %1965 = phi i32 [ %1952, %1950 ], [ %1835, %1832 ]
  %1966 = phi i32 [ %1953, %1950 ], [ %1836, %1832 ]
  %1967 = phi i32 [ %1961, %1950 ], [ %1837, %1832 ]
  store i32 %1967, i32* %1444, align 4
  br label %1968

1968:                                             ; preds = %1962, %1438
  %1969 = phi %struct.opj_mqc_state** [ %1963, %1962 ], [ %1443, %1438 ]
  %1970 = phi i32 [ %1964, %1962 ], [ %1442, %1438 ]
  %1971 = phi i32 [ %1965, %1962 ], [ %1441, %1438 ]
  %1972 = phi i32 [ %1966, %1962 ], [ %1440, %1438 ]
  %1973 = add nuw i32 %1439, 1
  %1974 = getelementptr inbounds i32, i32* %1445, i64 1
  %1975 = getelementptr inbounds i32, i32* %1444, i64 1
  %1976 = icmp eq i32 %1973, %841
  br i1 %1976, label %1977, label %1438

1977:                                             ; preds = %1968
  %1978 = load i32, i32* %303, align 4
  br label %1979

1979:                                             ; preds = %1977, %1429
  %1980 = phi i32 [ %1430, %1429 ], [ %1978, %1977 ]
  %1981 = phi i32* [ %1437, %1429 ], [ %1974, %1977 ]
  %1982 = phi i32* [ %1436, %1429 ], [ %1975, %1977 ]
  %1983 = phi %struct.opj_mqc_state** [ %1435, %1429 ], [ %1969, %1977 ]
  %1984 = phi i32 [ %1434, %1429 ], [ %1970, %1977 ]
  %1985 = phi i32 [ %1433, %1429 ], [ %1971, %1977 ]
  %1986 = phi i32 [ %1432, %1429 ], [ %1972, %1977 ]
  %1987 = add nuw i32 %1431, 4
  %1988 = getelementptr inbounds i32, i32* %1981, i64 %1428
  %1989 = getelementptr inbounds i32, i32* %1982, i64 2
  %1990 = and i32 %1980, -4
  %1991 = icmp ult i32 %1987, %1990
  br i1 %1991, label %1429, label %1992

1992:                                             ; preds = %1979, %1410
  %1993 = phi i32* [ %846, %1410 ], [ %1988, %1979 ]
  %1994 = phi i32* [ %1413, %1410 ], [ %1989, %1979 ]
  %1995 = phi %struct.opj_mqc_state** [ %1414, %1410 ], [ %1983, %1979 ]
  %1996 = phi i32 [ %1415, %1410 ], [ %1984, %1979 ]
  %1997 = phi i32 [ %1416, %1410 ], [ %1985, %1979 ]
  %1998 = phi i32 [ %1417, %1410 ], [ %1986, %1979 ]
  %1999 = phi i32 [ 0, %1410 ], [ %1987, %1979 ]
  %2000 = phi i32 [ %843, %1410 ], [ %1980, %1979 ]
  store %struct.opj_mqc_state** %1995, %struct.opj_mqc_state*** %309, align 8
  store i32 %1996, i32* %310, align 8
  store i32 %1997, i32* %312, align 4
  store i32 %1998, i32* %314, align 8
  %2001 = icmp ult i32 %1999, %2000
  %2002 = icmp ne i32 %841, 0
  %2003 = and i1 %2002, %2001
  br i1 %2003, label %2004, label %2174

2004:                                             ; preds = %1992
  %2005 = sub nsw i32 0, %1419
  br label %2006

2006:                                             ; preds = %2166, %2004
  %2007 = phi i32 [ %2000, %2004 ], [ %2167, %2166 ]
  %2008 = phi i32 [ %2000, %2004 ], [ %2168, %2166 ]
  %2009 = phi i32 [ 0, %2004 ], [ %2169, %2166 ]
  %2010 = phi i32* [ %1994, %2004 ], [ %2171, %2166 ]
  %2011 = phi i32* [ %1993, %2004 ], [ %2170, %2166 ]
  %2012 = icmp eq i32 %2008, %1999
  br i1 %2012, label %2166, label %2013

2013:                                             ; preds = %2006
  %2014 = load i32, i32* %2010, align 4
  br label %2015

2015:                                             ; preds = %2159, %2013
  %2016 = phi i32 [ %2007, %2013 ], [ %2160, %2159 ]
  %2017 = phi i32 [ %2014, %2013 ], [ %2161, %2159 ]
  %2018 = phi i64 [ 0, %2013 ], [ %2162, %2159 ]
  %2019 = trunc i64 %2018 to i32
  %2020 = mul i32 %841, %2019
  %2021 = zext i32 %2020 to i64
  %2022 = getelementptr inbounds i32, i32* %2011, i64 %2021
  %2023 = mul i32 %2019, 3
  %2024 = shl i32 2097168, %2023
  %2025 = and i32 %2024, %2017
  %2026 = shl i32 16, %2023
  %2027 = icmp eq i32 %2025, %2026
  br i1 %2027, label %2028, label %2159

2028:                                             ; preds = %2015
  %2029 = lshr i32 %2017, %2023
  %2030 = and i32 %2029, 495
  %2031 = icmp eq i32 %2030, 0
  %2032 = select i1 %2031, i64 14, i64 15
  %2033 = and i32 %2029, 1048576
  %2034 = icmp eq i32 %2033, 0
  %2035 = select i1 %2034, i64 %2032, i64 16
  %2036 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %124, i64 0, i32 0, i32 7, i64 %2035
  store %struct.opj_mqc_state** %2036, %struct.opj_mqc_state*** %309, align 8
  %2037 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2036, align 8
  %2038 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2037, i64 0, i32 0
  %2039 = load i32, i32* %2038, align 8
  %2040 = load i32, i32* %312, align 4
  %2041 = sub i32 %2040, %2039
  store i32 %2041, i32* %312, align 4
  %2042 = load i32, i32* %310, align 8
  %2043 = lshr i32 %2042, 16
  %2044 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2036, align 8
  %2045 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2044, i64 0, i32 0
  %2046 = load i32, i32* %2045, align 8
  %2047 = icmp ult i32 %2043, %2046
  br i1 %2047, label %2048, label %2094

2048:                                             ; preds = %2028
  %2049 = icmp ult i32 %2041, %2046
  store i32 %2046, i32* %312, align 4
  %2050 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2036, align 8
  %2051 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2050, i64 0, i32 1
  %2052 = load i32, i32* %2051, align 4
  %2053 = icmp eq i32 %2052, 0
  %2054 = zext i1 %2053 to i32
  %2055 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2050, i64 0, i32 3
  %2056 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2050, i64 0, i32 2
  %2057 = select i1 %2049, %struct.opj_mqc_state** %2056, %struct.opj_mqc_state** %2055
  %2058 = select i1 %2049, i32 %2052, i32 %2054
  %2059 = bitcast %struct.opj_mqc_state** %2057 to i64*
  %2060 = load i64, i64* %2059, align 8
  %2061 = bitcast %struct.opj_mqc_state** %2036 to i64*
  store i64 %2060, i64* %2061, align 8
  %2062 = load i32, i32* %314, align 8
  br label %2063

2063:                                             ; preds = %2087, %2048
  %2064 = phi i32 [ %2090, %2087 ], [ %2046, %2048 ]
  %2065 = phi i32 [ %2091, %2087 ], [ %2042, %2048 ]
  %2066 = phi i32 [ %2092, %2087 ], [ %2062, %2048 ]
  %2067 = icmp eq i32 %2066, 0
  br i1 %2067, label %2068, label %2087

2068:                                             ; preds = %2063
  %2069 = load i8*, i8** %316, align 8
  %2070 = getelementptr inbounds i8, i8* %2069, i64 1
  %2071 = load i8, i8* %2070, align 1
  %2072 = zext i8 %2071 to i32
  %2073 = load i8, i8* %2069, align 1
  %2074 = icmp eq i8 %2073, -1
  br i1 %2074, label %2075, label %2084

2075:                                             ; preds = %2068
  %2076 = icmp ugt i8 %2071, -113
  br i1 %2076, label %2077, label %2081

2077:                                             ; preds = %2075
  %2078 = add i32 %2065, 65280
  store i32 %2078, i32* %310, align 8
  store i32 8, i32* %314, align 8
  %2079 = load i32, i32* %318, align 4
  %2080 = add i32 %2079, 1
  store i32 %2080, i32* %318, align 4
  br label %2087

2081:                                             ; preds = %2075
  store i8* %2070, i8** %316, align 8
  %2082 = shl nuw nsw i32 %2072, 9
  %2083 = add i32 %2082, %2065
  store i32 %2083, i32* %310, align 8
  store i32 7, i32* %314, align 8
  br label %2087

2084:                                             ; preds = %2068
  store i8* %2070, i8** %316, align 8
  %2085 = shl nuw nsw i32 %2072, 8
  %2086 = add i32 %2085, %2065
  store i32 %2086, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %2087

2087:                                             ; preds = %2084, %2081, %2077, %2063
  %2088 = phi i32 [ 8, %2084 ], [ 7, %2081 ], [ 8, %2077 ], [ %2066, %2063 ]
  %2089 = phi i32 [ %2086, %2084 ], [ %2083, %2081 ], [ %2078, %2077 ], [ %2065, %2063 ]
  %2090 = shl i32 %2064, 1
  store i32 %2090, i32* %312, align 4
  %2091 = shl i32 %2089, 1
  store i32 %2091, i32* %310, align 8
  %2092 = add i32 %2088, -1
  store i32 %2092, i32* %314, align 8
  %2093 = icmp ult i32 %2090, 32768
  br i1 %2093, label %2063, label %2148

2094:                                             ; preds = %2028
  %2095 = shl i32 %2046, 16
  %2096 = sub i32 %2042, %2095
  store i32 %2096, i32* %310, align 8
  %2097 = trunc i32 %2041 to i16
  %2098 = icmp sgt i16 %2097, -1
  br i1 %2098, label %2099, label %2145

2099:                                             ; preds = %2094
  %2100 = load i32, i32* %2045, align 8
  %2101 = icmp ult i32 %2041, %2100
  %2102 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2044, i64 0, i32 1
  %2103 = load i32, i32* %2102, align 4
  %2104 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2044, i64 0, i32 2
  %2105 = icmp eq i32 %2103, 0
  %2106 = zext i1 %2105 to i32
  %2107 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2044, i64 0, i32 3
  %2108 = select i1 %2101, %struct.opj_mqc_state** %2107, %struct.opj_mqc_state** %2104
  %2109 = select i1 %2101, i32 %2106, i32 %2103
  %2110 = bitcast %struct.opj_mqc_state** %2108 to i64*
  %2111 = load i64, i64* %2110, align 8
  %2112 = bitcast %struct.opj_mqc_state** %2036 to i64*
  store i64 %2111, i64* %2112, align 8
  %2113 = load i32, i32* %314, align 8
  br label %2114

2114:                                             ; preds = %2138, %2099
  %2115 = phi i32 [ %2141, %2138 ], [ %2041, %2099 ]
  %2116 = phi i32 [ %2142, %2138 ], [ %2096, %2099 ]
  %2117 = phi i32 [ %2143, %2138 ], [ %2113, %2099 ]
  %2118 = icmp eq i32 %2117, 0
  br i1 %2118, label %2119, label %2138

2119:                                             ; preds = %2114
  %2120 = load i8*, i8** %316, align 8
  %2121 = getelementptr inbounds i8, i8* %2120, i64 1
  %2122 = load i8, i8* %2121, align 1
  %2123 = zext i8 %2122 to i32
  %2124 = load i8, i8* %2120, align 1
  %2125 = icmp eq i8 %2124, -1
  br i1 %2125, label %2126, label %2135

2126:                                             ; preds = %2119
  %2127 = icmp ugt i8 %2122, -113
  br i1 %2127, label %2128, label %2132

2128:                                             ; preds = %2126
  %2129 = add i32 %2116, 65280
  store i32 %2129, i32* %310, align 8
  store i32 8, i32* %314, align 8
  %2130 = load i32, i32* %318, align 4
  %2131 = add i32 %2130, 1
  store i32 %2131, i32* %318, align 4
  br label %2138

2132:                                             ; preds = %2126
  store i8* %2121, i8** %316, align 8
  %2133 = shl nuw nsw i32 %2123, 9
  %2134 = add i32 %2133, %2116
  store i32 %2134, i32* %310, align 8
  store i32 7, i32* %314, align 8
  br label %2138

2135:                                             ; preds = %2119
  store i8* %2121, i8** %316, align 8
  %2136 = shl nuw nsw i32 %2123, 8
  %2137 = add i32 %2136, %2116
  store i32 %2137, i32* %310, align 8
  store i32 8, i32* %314, align 8
  br label %2138

2138:                                             ; preds = %2135, %2132, %2128, %2114
  %2139 = phi i32 [ 8, %2135 ], [ 7, %2132 ], [ 8, %2128 ], [ %2117, %2114 ]
  %2140 = phi i32 [ %2137, %2135 ], [ %2134, %2132 ], [ %2129, %2128 ], [ %2116, %2114 ]
  %2141 = shl i32 %2115, 1
  store i32 %2141, i32* %312, align 4
  %2142 = shl i32 %2140, 1
  store i32 %2142, i32* %310, align 8
  %2143 = add i32 %2139, -1
  store i32 %2143, i32* %314, align 8
  %2144 = icmp ult i32 %2141, 32768
  br i1 %2144, label %2114, label %2148

2145:                                             ; preds = %2094
  %2146 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2044, i64 0, i32 1
  %2147 = load i32, i32* %2146, align 4
  br label %2148

2148:                                             ; preds = %2138, %2087, %2145
  %2149 = phi i32 [ %2147, %2145 ], [ %2058, %2087 ], [ %2109, %2138 ]
  %2150 = load i32, i32* %2022, align 4
  %2151 = lshr i32 %2150, 31
  %2152 = icmp eq i32 %2149, %2151
  %2153 = select i1 %2152, i32 %2005, i32 %1419
  %2154 = add nsw i32 %2153, %2150
  store i32 %2154, i32* %2022, align 4
  %2155 = shl i32 1048576, %2023
  %2156 = load i32, i32* %2010, align 4
  %2157 = or i32 %2156, %2155
  store i32 %2157, i32* %2010, align 4
  %2158 = load i32, i32* %303, align 4
  br label %2159

2159:                                             ; preds = %2148, %2015
  %2160 = phi i32 [ %2016, %2015 ], [ %2158, %2148 ]
  %2161 = phi i32 [ %2017, %2015 ], [ %2157, %2148 ]
  %2162 = add nuw nsw i64 %2018, 1
  %2163 = sub i32 %2160, %1999
  %2164 = zext i32 %2163 to i64
  %2165 = icmp ult i64 %2162, %2164
  br i1 %2165, label %2015, label %2166

2166:                                             ; preds = %2159, %2006
  %2167 = phi i32 [ %2007, %2006 ], [ %2160, %2159 ]
  %2168 = phi i32 [ %1999, %2006 ], [ %2160, %2159 ]
  %2169 = add nuw i32 %2009, 1
  %2170 = getelementptr inbounds i32, i32* %2011, i64 1
  %2171 = getelementptr inbounds i32, i32* %2010, i64 1
  %2172 = icmp eq i32 %2169, %841
  br i1 %2172, label %2174, label %2006

2173:                                             ; preds = %351
  tail call fastcc void @opj_t1_dec_clnpass(%struct.opj_t1* %124, i32 %354, i32 %135) #7
  br label %2174

2174:                                             ; preds = %2166, %833, %570, %2173, %1992, %1409, %762, %576, %545, %351
  br i1 %350, label %2176, label %2175

2175:                                             ; preds = %2174
  tail call void @opj_mqc_resetstates(%struct.opj_mqc* %145) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %145, i32 18, i32 0, i32 46) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %145, i32 17, i32 0, i32 3) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %145, i32 0, i32 0, i32 4) #7
  br label %2176

2176:                                             ; preds = %2175, %2174
  %2177 = add i32 %353, 1
  %2178 = icmp eq i32 %2177, 3
  %2179 = zext i1 %2178 to i32
  %2180 = sub i32 %354, %2179
  %2181 = select i1 %2178, i32 0, i32 %2177
  %2182 = add nuw i32 %352, 1
  %2183 = load i32, i32* %344, align 4
  %2184 = icmp ult i32 %2182, %2183
  %2185 = icmp sgt i32 %2180, 0
  %2186 = and i1 %2185, %2184
  br i1 %2186, label %351, label %2187

2187:                                             ; preds = %2176, %340
  %2188 = phi i32 [ %326, %340 ], [ %2180, %2176 ]
  %2189 = phi i32 [ %325, %340 ], [ %2181, %2176 ]
  tail call void @opq_mqc_finish_dec(%struct.opj_mqc* %145) #7
  %2190 = add nuw nsw i64 %323, 1
  %2191 = load i32, i32* %293, align 8
  %2192 = zext i32 %2191 to i64
  %2193 = icmp ult i64 %2190, %2192
  br i1 %2193, label %322, label %2194

2194:                                             ; preds = %2187, %291
  %2195 = icmp eq i32 %144, 0
  br i1 %2195, label %2241, label %2196

2196:                                             ; preds = %2194
  %2197 = getelementptr inbounds i8, i8* %123, i64 16
  %2198 = bitcast i8* %2197 to i8**
  %2199 = load i8*, i8** %2198, align 8
  %2200 = getelementptr inbounds i8, i8* %2199, i64 2
  %2201 = getelementptr inbounds i8, i8* %123, i64 32
  %2202 = bitcast i8* %2201 to i8**
  %2203 = load i8*, i8** %2202, align 8
  %2204 = icmp ult i8* %2200, %2203
  br i1 %2204, label %2205, label %2229

2205:                                             ; preds = %2196
  %2206 = ptrtoint i8* %2199 to i64
  %2207 = ptrtoint i8* %2203 to i64
  %2208 = icmp ne %struct.opj_mutex_t* %141, null
  br i1 %2208, label %2209, label %2214

2209:                                             ; preds = %2205
  tail call void @opj_mutex_lock(%struct.opj_mutex_t* nonnull %141) #7
  %2210 = bitcast i8* %2201 to i64*
  %2211 = load i64, i64* %2210, align 8
  %2212 = bitcast i8* %2197 to i64*
  %2213 = load i64, i64* %2212, align 8
  br label %2214

2214:                                             ; preds = %2209, %2205
  %2215 = phi i64 [ %2213, %2209 ], [ %2206, %2205 ]
  %2216 = phi i64 [ %2211, %2209 ], [ %2207, %2205 ]
  %2217 = sub i64 %2216, %2215
  %2218 = trunc i64 %2217 to i32
  %2219 = add nsw i32 %2218, -2
  %2220 = getelementptr inbounds i8, i8* %123, i64 24
  %2221 = bitcast i8* %2220 to i64*
  %2222 = load i64, i64* %2221, align 8
  %2223 = sub i64 %2215, %2222
  %2224 = trunc i64 %2223 to i32
  %2225 = sub i64 %2216, %2222
  %2226 = trunc i64 %2225 to i32
  %2227 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %138, i32 2, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.4, i64 0, i64 0), i32 %2219, i32 %2224, i32 %2226) #7
  br i1 %2208, label %2228, label %2241

2228:                                             ; preds = %2214
  tail call void @opj_mutex_unlock(%struct.opj_mutex_t* nonnull %141) #7
  br label %2241

2229:                                             ; preds = %2196
  %2230 = getelementptr inbounds i8, i8* %123, i64 12
  %2231 = bitcast i8* %2230 to i32*
  %2232 = load i32, i32* %2231, align 4
  %2233 = icmp ugt i32 %2232, 2
  br i1 %2233, label %2234, label %2241

2234:                                             ; preds = %2229
  %2235 = icmp eq %struct.opj_mutex_t* %141, null
  br i1 %2235, label %2239, label %2236

2236:                                             ; preds = %2234
  tail call void @opj_mutex_lock(%struct.opj_mutex_t* nonnull %141) #7
  %2237 = load i32, i32* %2231, align 4
  %2238 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %138, i32 2, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 %2237) #7
  tail call void @opj_mutex_unlock(%struct.opj_mutex_t* nonnull %141) #7
  br label %2241

2239:                                             ; preds = %2234
  %2240 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %138, i32 2, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 %2232) #7
  br label %2241

2241:                                             ; preds = %2239, %2236, %2229, %2228, %2214, %2194
  %2242 = load i32*, i32** %284, align 8
  %2243 = icmp eq i32* %2242, null
  br i1 %2243, label %2249, label %2244

2244:                                             ; preds = %2241
  %2245 = getelementptr inbounds i8, i8* %123, i64 216
  %2246 = bitcast i8* %2245 to i32**
  store i32* %292, i32** %2246, align 8
  br label %2249

2247:                                             ; preds = %122, %172, %170, %235
  %2248 = load i32*, i32** %78, align 8
  store volatile i32 0, i32* %2248, align 4
  br label %2971

2249:                                             ; preds = %2244, %2241, %275
  %2250 = load i32, i32* %153, align 8
  %2251 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %59, i64 0, i32 0
  %2252 = load i32, i32* %2251, align 8
  %2253 = sub nsw i32 %2250, %2252
  %2254 = load i32, i32* %158, align 4
  %2255 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %59, i64 0, i32 1
  %2256 = load i32, i32* %2255, align 4
  %2257 = sub nsw i32 %2254, %2256
  %2258 = load i32, i32* %130, align 8
  %2259 = and i32 %2258, 1
  %2260 = icmp eq i32 %2259, 0
  br i1 %2260, label %2271, label %2261

2261:                                             ; preds = %2249
  %2262 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %66, align 8
  %2263 = add i32 %56, -1
  %2264 = zext i32 %2263 to i64
  %2265 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2262, i64 %2264, i32 2
  %2266 = load i32, i32* %2265, align 8
  %2267 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2262, i64 %2264, i32 0
  %2268 = load i32, i32* %2267, align 8
  %2269 = add i32 %2266, %2253
  %2270 = sub i32 %2269, %2268
  br label %2271

2271:                                             ; preds = %2249, %2261
  %2272 = phi i32 [ %2270, %2261 ], [ %2253, %2249 ]
  %2273 = and i32 %2258, 2
  %2274 = icmp eq i32 %2273, 0
  br i1 %2274, label %2285, label %2275

2275:                                             ; preds = %2271
  %2276 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %66, align 8
  %2277 = add i32 %56, -1
  %2278 = zext i32 %2277 to i64
  %2279 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2276, i64 %2278, i32 3
  %2280 = load i32, i32* %2279, align 4
  %2281 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %2276, i64 %2278, i32 1
  %2282 = load i32, i32* %2281, align 4
  %2283 = add i32 %2280, %2257
  %2284 = sub i32 %2283, %2282
  br label %2285

2285:                                             ; preds = %2271, %2275
  %2286 = phi i32 [ %2284, %2275 ], [ %2257, %2271 ]
  %2287 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %5, i64 0, i32 14
  %2288 = load i32*, i32** %2287, align 8
  %2289 = icmp eq i32* %2288, null
  br i1 %2289, label %2290, label %2294

2290:                                             ; preds = %2285
  %2291 = getelementptr inbounds i8, i8* %123, i64 216
  %2292 = bitcast i8* %2291 to i32**
  %2293 = load i32*, i32** %2292, align 8
  br label %2294

2294:                                             ; preds = %2285, %2290
  %2295 = phi i32* [ %2293, %2290 ], [ %2288, %2285 ]
  %2296 = getelementptr inbounds i8, i8* %123, i64 232
  %2297 = bitcast i8* %2296 to i32*
  %2298 = load i32, i32* %2297, align 8
  %2299 = getelementptr inbounds i8, i8* %123, i64 236
  %2300 = bitcast i8* %2299 to i32*
  %2301 = load i32, i32* %2300, align 4
  %2302 = load i32, i32* %132, align 4
  %2303 = icmp eq i32 %2302, 0
  br i1 %2303, label %2465, label %2304

2304:                                             ; preds = %2294
  %2305 = icmp sgt i32 %2302, 30
  br i1 %2305, label %2306, label %2433

2306:                                             ; preds = %2304
  %2307 = icmp eq i32 %2301, 0
  br i1 %2307, label %2465, label %2308

2308:                                             ; preds = %2306
  %2309 = icmp eq i32 %2298, 0
  %2310 = zext i32 %2298 to i64
  %2311 = add nsw i64 %2310, -1
  %2312 = and i64 %2310, 4294967288
  %2313 = add nsw i64 %2312, -8
  %2314 = lshr exact i64 %2313, 3
  %2315 = add nuw nsw i64 %2314, 1
  %2316 = icmp ult i32 %2298, 8
  %2317 = trunc i64 %2311 to i32
  %2318 = icmp ugt i64 %2311, 4294967295
  %2319 = and i64 %2310, 4294967288
  %2320 = and i64 %2315, 3
  %2321 = icmp ult i64 %2313, 24
  %2322 = sub nsw i64 %2315, %2320
  %2323 = icmp eq i64 %2320, 0
  %2324 = icmp eq i64 %2319, %2310
  %2325 = and i64 %2310, 3
  %2326 = icmp eq i64 %2325, 0
  br label %2327

2327:                                             ; preds = %2430, %2308
  %2328 = phi i32 [ 0, %2308 ], [ %2431, %2430 ]
  %2329 = mul i32 %2298, %2328
  br i1 %2309, label %2430, label %2330

2330:                                             ; preds = %2327
  %2331 = mul i32 %2328, %2298
  br i1 %2316, label %2390, label %2332

2332:                                             ; preds = %2330
  %2333 = xor i32 %2329, -1
  %2334 = icmp ult i32 %2333, %2317
  %2335 = or i1 %2334, %2318
  br i1 %2335, label %2390, label %2336

2336:                                             ; preds = %2332
  br i1 %2321, label %2374, label %2337

2337:                                             ; preds = %2336, %2337
  %2338 = phi i64 [ %2371, %2337 ], [ 0, %2336 ]
  %2339 = phi i64 [ %2372, %2337 ], [ %2322, %2336 ]
  %2340 = trunc i64 %2338 to i32
  %2341 = add i32 %2331, %2340
  %2342 = zext i32 %2341 to i64
  %2343 = getelementptr inbounds i32, i32* %2295, i64 %2342
  %2344 = bitcast i32* %2343 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2344, align 4
  %2345 = getelementptr inbounds i32, i32* %2343, i64 4
  %2346 = bitcast i32* %2345 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2346, align 4
  %2347 = trunc i64 %2338 to i32
  %2348 = or i32 %2347, 8
  %2349 = add i32 %2331, %2348
  %2350 = zext i32 %2349 to i64
  %2351 = getelementptr inbounds i32, i32* %2295, i64 %2350
  %2352 = bitcast i32* %2351 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2352, align 4
  %2353 = getelementptr inbounds i32, i32* %2351, i64 4
  %2354 = bitcast i32* %2353 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2354, align 4
  %2355 = trunc i64 %2338 to i32
  %2356 = or i32 %2355, 16
  %2357 = add i32 %2331, %2356
  %2358 = zext i32 %2357 to i64
  %2359 = getelementptr inbounds i32, i32* %2295, i64 %2358
  %2360 = bitcast i32* %2359 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2360, align 4
  %2361 = getelementptr inbounds i32, i32* %2359, i64 4
  %2362 = bitcast i32* %2361 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2362, align 4
  %2363 = trunc i64 %2338 to i32
  %2364 = or i32 %2363, 24
  %2365 = add i32 %2331, %2364
  %2366 = zext i32 %2365 to i64
  %2367 = getelementptr inbounds i32, i32* %2295, i64 %2366
  %2368 = bitcast i32* %2367 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2368, align 4
  %2369 = getelementptr inbounds i32, i32* %2367, i64 4
  %2370 = bitcast i32* %2369 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2370, align 4
  %2371 = add i64 %2338, 32
  %2372 = add i64 %2339, -4
  %2373 = icmp eq i64 %2372, 0
  br i1 %2373, label %2374, label %2337, !llvm.loop !6

2374:                                             ; preds = %2337, %2336
  %2375 = phi i64 [ 0, %2336 ], [ %2371, %2337 ]
  br i1 %2323, label %2389, label %2376

2376:                                             ; preds = %2374, %2376
  %2377 = phi i64 [ %2386, %2376 ], [ %2375, %2374 ]
  %2378 = phi i64 [ %2387, %2376 ], [ %2320, %2374 ]
  %2379 = trunc i64 %2377 to i32
  %2380 = add i32 %2331, %2379
  %2381 = zext i32 %2380 to i64
  %2382 = getelementptr inbounds i32, i32* %2295, i64 %2381
  %2383 = bitcast i32* %2382 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2383, align 4
  %2384 = getelementptr inbounds i32, i32* %2382, i64 4
  %2385 = bitcast i32* %2384 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2385, align 4
  %2386 = add i64 %2377, 8
  %2387 = add i64 %2378, -1
  %2388 = icmp eq i64 %2387, 0
  br i1 %2388, label %2389, label %2376, !llvm.loop !7

2389:                                             ; preds = %2376, %2374
  br i1 %2324, label %2430, label %2390

2390:                                             ; preds = %2389, %2332, %2330
  %2391 = phi i64 [ 0, %2332 ], [ 0, %2330 ], [ %2319, %2389 ]
  %2392 = xor i64 %2391, -1
  %2393 = add nsw i64 %2392, %2310
  br i1 %2326, label %2404, label %2394

2394:                                             ; preds = %2390, %2394
  %2395 = phi i64 [ %2401, %2394 ], [ %2391, %2390 ]
  %2396 = phi i64 [ %2402, %2394 ], [ %2325, %2390 ]
  %2397 = trunc i64 %2395 to i32
  %2398 = add i32 %2331, %2397
  %2399 = zext i32 %2398 to i64
  %2400 = getelementptr inbounds i32, i32* %2295, i64 %2399
  store i32 0, i32* %2400, align 4
  %2401 = add nuw nsw i64 %2395, 1
  %2402 = add i64 %2396, -1
  %2403 = icmp eq i64 %2402, 0
  br i1 %2403, label %2404, label %2394, !llvm.loop !9

2404:                                             ; preds = %2394, %2390
  %2405 = phi i64 [ %2391, %2390 ], [ %2401, %2394 ]
  %2406 = icmp ult i64 %2393, 3
  br i1 %2406, label %2430, label %2407

2407:                                             ; preds = %2404, %2407
  %2408 = phi i64 [ %2428, %2407 ], [ %2405, %2404 ]
  %2409 = trunc i64 %2408 to i32
  %2410 = add i32 %2331, %2409
  %2411 = zext i32 %2410 to i64
  %2412 = getelementptr inbounds i32, i32* %2295, i64 %2411
  store i32 0, i32* %2412, align 4
  %2413 = trunc i64 %2408 to i32
  %2414 = add i32 %2413, 1
  %2415 = add i32 %2331, %2414
  %2416 = zext i32 %2415 to i64
  %2417 = getelementptr inbounds i32, i32* %2295, i64 %2416
  store i32 0, i32* %2417, align 4
  %2418 = trunc i64 %2408 to i32
  %2419 = add i32 %2418, 2
  %2420 = add i32 %2331, %2419
  %2421 = zext i32 %2420 to i64
  %2422 = getelementptr inbounds i32, i32* %2295, i64 %2421
  store i32 0, i32* %2422, align 4
  %2423 = trunc i64 %2408 to i32
  %2424 = add i32 %2423, 3
  %2425 = add i32 %2331, %2424
  %2426 = zext i32 %2425 to i64
  %2427 = getelementptr inbounds i32, i32* %2295, i64 %2426
  store i32 0, i32* %2427, align 4
  %2428 = add nuw nsw i64 %2408, 4
  %2429 = icmp eq i64 %2428, %2310
  br i1 %2429, label %2430, label %2407, !llvm.loop !10

2430:                                             ; preds = %2404, %2407, %2389, %2327
  %2431 = add nuw i32 %2328, 1
  %2432 = icmp eq i32 %2431, %2301
  br i1 %2432, label %2465, label %2327

2433:                                             ; preds = %2304
  %2434 = shl i32 1, %2302
  %2435 = icmp eq i32 %2301, 0
  br i1 %2435, label %2465, label %2436

2436:                                             ; preds = %2433
  %2437 = icmp eq i32 %2298, 0
  %2438 = zext i32 %2298 to i64
  br label %2439

2439:                                             ; preds = %2462, %2436
  %2440 = phi i32 [ 0, %2436 ], [ %2463, %2462 ]
  br i1 %2437, label %2462, label %2441

2441:                                             ; preds = %2439
  %2442 = mul i32 %2440, %2298
  br label %2443

2443:                                             ; preds = %2459, %2441
  %2444 = phi i64 [ 0, %2441 ], [ %2460, %2459 ]
  %2445 = trunc i64 %2444 to i32
  %2446 = add i32 %2442, %2445
  %2447 = zext i32 %2446 to i64
  %2448 = getelementptr inbounds i32, i32* %2295, i64 %2447
  %2449 = load i32, i32* %2448, align 4
  %2450 = icmp slt i32 %2449, 0
  %2451 = sub nsw i32 0, %2449
  %2452 = select i1 %2450, i32 %2451, i32 %2449
  %2453 = icmp slt i32 %2452, %2434
  br i1 %2453, label %2459, label %2454

2454:                                             ; preds = %2443
  %2455 = load i32, i32* %132, align 4
  %2456 = lshr i32 %2452, %2455
  %2457 = sub nsw i32 0, %2456
  %2458 = select i1 %2450, i32 %2457, i32 %2456
  store i32 %2458, i32* %2448, align 4
  br label %2459

2459:                                             ; preds = %2443, %2454
  %2460 = add nuw nsw i64 %2444, 1
  %2461 = icmp eq i64 %2460, %2438
  br i1 %2461, label %2462, label %2443

2462:                                             ; preds = %2459, %2439
  %2463 = add nuw i32 %2440, 1
  %2464 = icmp eq i32 %2463, %2301
  br i1 %2464, label %2465, label %2439

2465:                                             ; preds = %2462, %2430, %2306, %2433, %2294
  %2466 = load i32*, i32** %2287, align 8
  %2467 = icmp eq i32* %2466, null
  br i1 %2467, label %2628, label %2468

2468:                                             ; preds = %2465
  %2469 = mul i32 %2301, %2298
  %2470 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %65, i64 0, i32 5
  %2471 = load i32, i32* %2470, align 4
  %2472 = icmp eq i32 %2471, 1
  br i1 %2472, label %2473, label %2539

2473:                                             ; preds = %2468
  %2474 = icmp eq i32 %2469, 0
  br i1 %2474, label %2971, label %2475

2475:                                             ; preds = %2473
  %2476 = zext i32 %2469 to i64
  %2477 = icmp ult i32 %2469, 8
  br i1 %2477, label %2530, label %2478

2478:                                             ; preds = %2475
  %2479 = and i64 %2476, 4294967288
  %2480 = add nsw i64 %2479, -8
  %2481 = lshr exact i64 %2480, 3
  %2482 = add nuw nsw i64 %2481, 1
  %2483 = and i64 %2482, 1
  %2484 = icmp eq i64 %2480, 0
  br i1 %2484, label %2514, label %2485

2485:                                             ; preds = %2478
  %2486 = sub nuw nsw i64 %2482, %2483
  br label %2487

2487:                                             ; preds = %2487, %2485
  %2488 = phi i64 [ 0, %2485 ], [ %2511, %2487 ]
  %2489 = phi i64 [ %2486, %2485 ], [ %2512, %2487 ]
  %2490 = getelementptr inbounds i32, i32* %2295, i64 %2488
  %2491 = bitcast i32* %2490 to <4 x i32>*
  %2492 = load <4 x i32>, <4 x i32>* %2491, align 4
  %2493 = getelementptr inbounds i32, i32* %2490, i64 4
  %2494 = bitcast i32* %2493 to <4 x i32>*
  %2495 = load <4 x i32>, <4 x i32>* %2494, align 4
  %2496 = sdiv <4 x i32> %2492, <i32 2, i32 2, i32 2, i32 2>
  %2497 = sdiv <4 x i32> %2495, <i32 2, i32 2, i32 2, i32 2>
  %2498 = bitcast i32* %2490 to <4 x i32>*
  store <4 x i32> %2496, <4 x i32>* %2498, align 4
  %2499 = bitcast i32* %2493 to <4 x i32>*
  store <4 x i32> %2497, <4 x i32>* %2499, align 4
  %2500 = or i64 %2488, 8
  %2501 = getelementptr inbounds i32, i32* %2295, i64 %2500
  %2502 = bitcast i32* %2501 to <4 x i32>*
  %2503 = load <4 x i32>, <4 x i32>* %2502, align 4
  %2504 = getelementptr inbounds i32, i32* %2501, i64 4
  %2505 = bitcast i32* %2504 to <4 x i32>*
  %2506 = load <4 x i32>, <4 x i32>* %2505, align 4
  %2507 = sdiv <4 x i32> %2503, <i32 2, i32 2, i32 2, i32 2>
  %2508 = sdiv <4 x i32> %2506, <i32 2, i32 2, i32 2, i32 2>
  %2509 = bitcast i32* %2501 to <4 x i32>*
  store <4 x i32> %2507, <4 x i32>* %2509, align 4
  %2510 = bitcast i32* %2504 to <4 x i32>*
  store <4 x i32> %2508, <4 x i32>* %2510, align 4
  %2511 = add i64 %2488, 16
  %2512 = add i64 %2489, -2
  %2513 = icmp eq i64 %2512, 0
  br i1 %2513, label %2514, label %2487, !llvm.loop !11

2514:                                             ; preds = %2487, %2478
  %2515 = phi i64 [ 0, %2478 ], [ %2511, %2487 ]
  %2516 = icmp eq i64 %2483, 0
  br i1 %2516, label %2528, label %2517

2517:                                             ; preds = %2514
  %2518 = getelementptr inbounds i32, i32* %2295, i64 %2515
  %2519 = bitcast i32* %2518 to <4 x i32>*
  %2520 = load <4 x i32>, <4 x i32>* %2519, align 4
  %2521 = getelementptr inbounds i32, i32* %2518, i64 4
  %2522 = bitcast i32* %2521 to <4 x i32>*
  %2523 = load <4 x i32>, <4 x i32>* %2522, align 4
  %2524 = sdiv <4 x i32> %2520, <i32 2, i32 2, i32 2, i32 2>
  %2525 = sdiv <4 x i32> %2523, <i32 2, i32 2, i32 2, i32 2>
  %2526 = bitcast i32* %2518 to <4 x i32>*
  store <4 x i32> %2524, <4 x i32>* %2526, align 4
  %2527 = bitcast i32* %2521 to <4 x i32>*
  store <4 x i32> %2525, <4 x i32>* %2527, align 4
  br label %2528

2528:                                             ; preds = %2514, %2517
  %2529 = icmp eq i64 %2479, %2476
  br i1 %2529, label %2971, label %2530

2530:                                             ; preds = %2528, %2475
  %2531 = phi i64 [ 0, %2475 ], [ %2479, %2528 ]
  br label %2532

2532:                                             ; preds = %2530, %2532
  %2533 = phi i64 [ %2537, %2532 ], [ %2531, %2530 ]
  %2534 = getelementptr inbounds i32, i32* %2295, i64 %2533
  %2535 = load i32, i32* %2534, align 4
  %2536 = sdiv i32 %2535, 2
  store i32 %2536, i32* %2534, align 4
  %2537 = add nuw nsw i64 %2533, 1
  %2538 = icmp eq i64 %2537, %2476
  br i1 %2538, label %2971, label %2532, !llvm.loop !12

2539:                                             ; preds = %2468
  %2540 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %59, i64 0, i32 8
  %2541 = load float, float* %2540, align 8
  %2542 = fmul float %2541, 5.000000e-01
  %2543 = insertelement <4 x float> undef, float %2542, i32 0
  %2544 = shufflevector <4 x float> %2543, <4 x float> undef, <4 x i32> zeroinitializer
  %2545 = and i32 %2469, -16
  %2546 = icmp eq i32 %2545, 0
  br i1 %2546, label %2549, label %2574

2547:                                             ; preds = %2574
  %2548 = and i32 %2469, -16
  br label %2549

2549:                                             ; preds = %2547, %2539
  %2550 = phi i32 [ 0, %2539 ], [ %2548, %2547 ]
  %2551 = phi i32* [ %2295, %2539 ], [ %2600, %2547 ]
  %2552 = icmp ugt i32 %2469, %2550
  br i1 %2552, label %2553, label %2971

2553:                                             ; preds = %2549
  %2554 = xor i32 %2550, -1
  %2555 = add i32 %2469, %2554
  %2556 = and i32 %2469, 3
  %2557 = icmp eq i32 %2556, 0
  br i1 %2557, label %2570, label %2558

2558:                                             ; preds = %2553, %2558
  %2559 = phi i32* [ %2566, %2558 ], [ %2551, %2553 ]
  %2560 = phi i32 [ %2567, %2558 ], [ %2550, %2553 ]
  %2561 = phi i32 [ %2568, %2558 ], [ %2556, %2553 ]
  %2562 = load i32, i32* %2559, align 4
  %2563 = sitofp i32 %2562 to float
  %2564 = fmul float %2542, %2563
  %2565 = bitcast i32* %2559 to float*
  store float %2564, float* %2565, align 4
  %2566 = getelementptr inbounds i32, i32* %2559, i64 1
  %2567 = add nuw i32 %2560, 1
  %2568 = add i32 %2561, -1
  %2569 = icmp eq i32 %2568, 0
  br i1 %2569, label %2570, label %2558, !llvm.loop !13

2570:                                             ; preds = %2558, %2553
  %2571 = phi i32* [ %2551, %2553 ], [ %2566, %2558 ]
  %2572 = phi i32 [ %2550, %2553 ], [ %2567, %2558 ]
  %2573 = icmp ult i32 %2555, 3
  br i1 %2573, label %2971, label %2603

2574:                                             ; preds = %2539, %2574
  %2575 = phi i32* [ %2600, %2574 ], [ %2295, %2539 ]
  %2576 = phi i32 [ %2601, %2574 ], [ 0, %2539 ]
  %2577 = bitcast i32* %2575 to <4 x i32>*
  %2578 = load <4 x i32>, <4 x i32>* %2577, align 16
  %2579 = sitofp <4 x i32> %2578 to <4 x float>
  %2580 = getelementptr inbounds i32, i32* %2575, i64 4
  %2581 = bitcast i32* %2580 to <4 x i32>*
  %2582 = load <4 x i32>, <4 x i32>* %2581, align 16
  %2583 = sitofp <4 x i32> %2582 to <4 x float>
  %2584 = getelementptr inbounds i32, i32* %2575, i64 8
  %2585 = bitcast i32* %2584 to <4 x i32>*
  %2586 = load <4 x i32>, <4 x i32>* %2585, align 16
  %2587 = sitofp <4 x i32> %2586 to <4 x float>
  %2588 = getelementptr inbounds i32, i32* %2575, i64 12
  %2589 = bitcast i32* %2588 to <4 x i32>*
  %2590 = load <4 x i32>, <4 x i32>* %2589, align 16
  %2591 = sitofp <4 x i32> %2590 to <4 x float>
  %2592 = fmul <4 x float> %2544, %2579
  %2593 = bitcast i32* %2575 to <4 x float>*
  store <4 x float> %2592, <4 x float>* %2593, align 16
  %2594 = fmul <4 x float> %2544, %2583
  %2595 = bitcast i32* %2580 to <4 x float>*
  store <4 x float> %2594, <4 x float>* %2595, align 16
  %2596 = fmul <4 x float> %2544, %2587
  %2597 = bitcast i32* %2584 to <4 x float>*
  store <4 x float> %2596, <4 x float>* %2597, align 16
  %2598 = fmul <4 x float> %2544, %2591
  %2599 = bitcast i32* %2588 to <4 x float>*
  store <4 x float> %2598, <4 x float>* %2599, align 16
  %2600 = getelementptr inbounds i32, i32* %2575, i64 16
  %2601 = add nuw i32 %2576, 16
  %2602 = icmp ult i32 %2601, %2545
  br i1 %2602, label %2574, label %2547

2603:                                             ; preds = %2570, %2603
  %2604 = phi i32* [ %2625, %2603 ], [ %2571, %2570 ]
  %2605 = phi i32 [ %2626, %2603 ], [ %2572, %2570 ]
  %2606 = load i32, i32* %2604, align 4
  %2607 = sitofp i32 %2606 to float
  %2608 = fmul float %2542, %2607
  %2609 = bitcast i32* %2604 to float*
  store float %2608, float* %2609, align 4
  %2610 = getelementptr inbounds i32, i32* %2604, i64 1
  %2611 = load i32, i32* %2610, align 4
  %2612 = sitofp i32 %2611 to float
  %2613 = fmul float %2542, %2612
  %2614 = bitcast i32* %2610 to float*
  store float %2613, float* %2614, align 4
  %2615 = getelementptr inbounds i32, i32* %2604, i64 2
  %2616 = load i32, i32* %2615, align 4
  %2617 = sitofp i32 %2616 to float
  %2618 = fmul float %2542, %2617
  %2619 = bitcast i32* %2615 to float*
  store float %2618, float* %2619, align 4
  %2620 = getelementptr inbounds i32, i32* %2604, i64 3
  %2621 = load i32, i32* %2620, align 4
  %2622 = sitofp i32 %2621 to float
  %2623 = fmul float %2542, %2622
  %2624 = bitcast i32* %2620 to float*
  store float %2623, float* %2624, align 4
  %2625 = getelementptr inbounds i32, i32* %2604, i64 4
  %2626 = add nuw i32 %2605, 4
  %2627 = icmp eq i32 %2626, %2469
  br i1 %2627, label %2971, label %2603

2628:                                             ; preds = %2465
  %2629 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %65, i64 0, i32 5
  %2630 = load i32, i32* %2629, align 4
  %2631 = icmp eq i32 %2630, 1
  br i1 %2631, label %2632, label %2798

2632:                                             ; preds = %2628
  %2633 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %62, i64 0, i32 9
  %2634 = load i32*, i32** %2633, align 8
  %2635 = sext i32 %2286 to i64
  %2636 = zext i32 %76 to i64
  %2637 = mul nsw i64 %2635, %2636
  %2638 = sext i32 %2272 to i64
  %2639 = add nsw i64 %2637, %2638
  %2640 = getelementptr inbounds i32, i32* %2634, i64 %2639
  %2641 = icmp eq i32 %2301, 0
  br i1 %2641, label %2971, label %2642

2642:                                             ; preds = %2632
  %2643 = and i32 %2298, -4
  %2644 = icmp eq i32 %2643, 0
  %2645 = zext i32 %2643 to i64
  %2646 = zext i32 %2301 to i64
  %2647 = zext i32 %2298 to i64
  %2648 = mul nsw i64 %2635, %2636
  %2649 = add i64 %2648, %2638
  %2650 = getelementptr i32, i32* %2634, i64 %2649
  %2651 = add i64 %2649, %2647
  %2652 = sub nsw i64 0, %2647
  br label %2653

2653:                                             ; preds = %2795, %2642
  %2654 = phi i64 [ 0, %2642 ], [ %2796, %2795 ]
  %2655 = mul i64 %2654, %2636
  %2656 = add i64 %2651, %2655
  %2657 = getelementptr i32, i32* %2634, i64 %2656
  %2658 = trunc i64 %2654 to i32
  %2659 = mul i32 %2298, %2658
  %2660 = trunc i64 %2654 to i32
  %2661 = mul i32 %2298, %2660
  br i1 %2644, label %2668, label %2662

2662:                                             ; preds = %2653
  %2663 = trunc i64 %2654 to i32
  %2664 = mul i32 %2298, %2663
  %2665 = mul nuw i64 %2654, %2636
  br label %2745

2666:                                             ; preds = %2745
  %2667 = trunc i64 %2772 to i32
  br label %2668

2668:                                             ; preds = %2666, %2653
  %2669 = phi i32 [ 0, %2653 ], [ %2667, %2666 ]
  %2670 = icmp ult i32 %2669, %2298
  br i1 %2670, label %2671, label %2795

2671:                                             ; preds = %2668
  %2672 = trunc i64 %2654 to i32
  %2673 = mul i32 %2298, %2672
  %2674 = mul nuw i64 %2654, %2636
  %2675 = zext i32 %2669 to i64
  %2676 = sub nsw i64 %2647, %2675
  %2677 = icmp ult i64 %2676, 8
  br i1 %2677, label %2678, label %2697

2678:                                             ; preds = %2743, %2706, %2697, %2671
  %2679 = phi i64 [ %2675, %2706 ], [ %2675, %2697 ], [ %2675, %2671 ], [ %2720, %2743 ]
  %2680 = sub nsw i64 %2647, %2679
  %2681 = xor i64 %2679, -1
  %2682 = and i64 %2680, 1
  %2683 = icmp eq i64 %2682, 0
  br i1 %2683, label %2694, label %2684

2684:                                             ; preds = %2678
  %2685 = trunc i64 %2679 to i32
  %2686 = add i32 %2673, %2685
  %2687 = zext i32 %2686 to i64
  %2688 = getelementptr inbounds i32, i32* %2295, i64 %2687
  %2689 = load i32, i32* %2688, align 4
  %2690 = sdiv i32 %2689, 2
  %2691 = add i64 %2674, %2679
  %2692 = getelementptr inbounds i32, i32* %2640, i64 %2691
  store i32 %2690, i32* %2692, align 4
  %2693 = add nuw nsw i64 %2679, 1
  br label %2694

2694:                                             ; preds = %2684, %2678
  %2695 = phi i64 [ %2693, %2684 ], [ %2679, %2678 ]
  %2696 = icmp eq i64 %2681, %2652
  br i1 %2696, label %2795, label %2774

2697:                                             ; preds = %2671
  %2698 = xor i64 %2675, -1
  %2699 = add nsw i64 %2698, %2647
  %2700 = add i32 %2669, %2661
  %2701 = trunc i64 %2699 to i32
  %2702 = xor i32 %2700, -1
  %2703 = icmp ult i32 %2702, %2701
  %2704 = icmp ugt i64 %2699, 4294967295
  %2705 = or i1 %2703, %2704
  br i1 %2705, label %2678, label %2706

2706:                                             ; preds = %2697
  %2707 = add i64 %2655, %2675
  %2708 = getelementptr i32, i32* %2650, i64 %2707
  %2709 = add i32 %2669, %2659
  %2710 = zext i32 %2709 to i64
  %2711 = getelementptr i32, i32* %2295, i64 %2710
  %2712 = add nuw nsw i64 %2647, %2710
  %2713 = sub nsw i64 %2712, %2675
  %2714 = getelementptr i32, i32* %2295, i64 %2713
  %2715 = icmp ult i32* %2708, %2714
  %2716 = icmp ult i32* %2711, %2657
  %2717 = and i1 %2715, %2716
  br i1 %2717, label %2678, label %2718

2718:                                             ; preds = %2706
  %2719 = and i64 %2676, -8
  %2720 = add nsw i64 %2719, %2675
  br label %2721

2721:                                             ; preds = %2721, %2718
  %2722 = phi i64 [ 0, %2718 ], [ %2741, %2721 ]
  %2723 = add i64 %2722, %2675
  %2724 = trunc i64 %2722 to i32
  %2725 = add i32 %2669, %2724
  %2726 = add i32 %2673, %2725
  %2727 = zext i32 %2726 to i64
  %2728 = getelementptr inbounds i32, i32* %2295, i64 %2727
  %2729 = bitcast i32* %2728 to <4 x i32>*
  %2730 = load <4 x i32>, <4 x i32>* %2729, align 4, !alias.scope !14
  %2731 = getelementptr inbounds i32, i32* %2728, i64 4
  %2732 = bitcast i32* %2731 to <4 x i32>*
  %2733 = load <4 x i32>, <4 x i32>* %2732, align 4, !alias.scope !14
  %2734 = sdiv <4 x i32> %2730, <i32 2, i32 2, i32 2, i32 2>
  %2735 = sdiv <4 x i32> %2733, <i32 2, i32 2, i32 2, i32 2>
  %2736 = add i64 %2674, %2723
  %2737 = getelementptr inbounds i32, i32* %2640, i64 %2736
  %2738 = bitcast i32* %2737 to <4 x i32>*
  store <4 x i32> %2734, <4 x i32>* %2738, align 4, !alias.scope !17, !noalias !14
  %2739 = getelementptr inbounds i32, i32* %2737, i64 4
  %2740 = bitcast i32* %2739 to <4 x i32>*
  store <4 x i32> %2735, <4 x i32>* %2740, align 4, !alias.scope !17, !noalias !14
  %2741 = add i64 %2722, 8
  %2742 = icmp eq i64 %2741, %2719
  br i1 %2742, label %2743, label %2721, !llvm.loop !19

2743:                                             ; preds = %2721
  %2744 = icmp eq i64 %2676, %2719
  br i1 %2744, label %2795, label %2678

2745:                                             ; preds = %2662, %2745
  %2746 = phi i64 [ 0, %2662 ], [ %2772, %2745 ]
  %2747 = trunc i64 %2746 to i32
  %2748 = add i32 %2664, %2747
  %2749 = zext i32 %2748 to i64
  %2750 = getelementptr inbounds i32, i32* %2295, i64 %2749
  %2751 = load i32, i32* %2750, align 4
  %2752 = add i32 %2748, 1
  %2753 = zext i32 %2752 to i64
  %2754 = getelementptr inbounds i32, i32* %2295, i64 %2753
  %2755 = load i32, i32* %2754, align 4
  %2756 = add i32 %2748, 2
  %2757 = zext i32 %2756 to i64
  %2758 = getelementptr inbounds i32, i32* %2295, i64 %2757
  %2759 = load i32, i32* %2758, align 4
  %2760 = add i32 %2748, 3
  %2761 = zext i32 %2760 to i64
  %2762 = getelementptr inbounds i32, i32* %2295, i64 %2761
  %2763 = load i32, i32* %2762, align 4
  %2764 = add nuw i64 %2665, %2746
  %2765 = getelementptr inbounds i32, i32* %2640, i64 %2764
  %2766 = insertelement <4 x i32> undef, i32 %2751, i32 0
  %2767 = insertelement <4 x i32> %2766, i32 %2755, i32 1
  %2768 = insertelement <4 x i32> %2767, i32 %2759, i32 2
  %2769 = insertelement <4 x i32> %2768, i32 %2763, i32 3
  %2770 = sdiv <4 x i32> %2769, <i32 2, i32 2, i32 2, i32 2>
  %2771 = bitcast i32* %2765 to <4 x i32>*
  store <4 x i32> %2770, <4 x i32>* %2771, align 4
  %2772 = add nuw nsw i64 %2746, 4
  %2773 = icmp ult i64 %2772, %2645
  br i1 %2773, label %2745, label %2666

2774:                                             ; preds = %2694, %2774
  %2775 = phi i64 [ %2793, %2774 ], [ %2695, %2694 ]
  %2776 = trunc i64 %2775 to i32
  %2777 = add i32 %2673, %2776
  %2778 = zext i32 %2777 to i64
  %2779 = getelementptr inbounds i32, i32* %2295, i64 %2778
  %2780 = load i32, i32* %2779, align 4
  %2781 = sdiv i32 %2780, 2
  %2782 = add i64 %2674, %2775
  %2783 = getelementptr inbounds i32, i32* %2640, i64 %2782
  store i32 %2781, i32* %2783, align 4
  %2784 = add nuw nsw i64 %2775, 1
  %2785 = trunc i64 %2784 to i32
  %2786 = add i32 %2673, %2785
  %2787 = zext i32 %2786 to i64
  %2788 = getelementptr inbounds i32, i32* %2295, i64 %2787
  %2789 = load i32, i32* %2788, align 4
  %2790 = sdiv i32 %2789, 2
  %2791 = add i64 %2674, %2784
  %2792 = getelementptr inbounds i32, i32* %2640, i64 %2791
  store i32 %2790, i32* %2792, align 4
  %2793 = add nuw nsw i64 %2775, 2
  %2794 = icmp eq i64 %2793, %2647
  br i1 %2794, label %2795, label %2774, !llvm.loop !20

2795:                                             ; preds = %2694, %2774, %2743, %2668
  %2796 = add nuw nsw i64 %2654, 1
  %2797 = icmp eq i64 %2796, %2646
  br i1 %2797, label %2971, label %2653

2798:                                             ; preds = %2628
  %2799 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %59, i64 0, i32 8
  %2800 = load float, float* %2799, align 8
  %2801 = fmul float %2800, 5.000000e-01
  %2802 = zext i32 %76 to i64
  %2803 = icmp eq i32 %2301, 0
  br i1 %2803, label %2971, label %2804

2804:                                             ; preds = %2798
  %2805 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %62, i64 0, i32 9
  %2806 = load i32*, i32** %2805, align 8
  %2807 = sext i32 %2286 to i64
  %2808 = mul nsw i64 %2807, %2802
  %2809 = sext i32 %2272 to i64
  %2810 = add nsw i64 %2808, %2809
  %2811 = getelementptr inbounds i32, i32* %2806, i64 %2810
  %2812 = bitcast i32* %2811 to float*
  %2813 = icmp eq i32 %2298, 0
  %2814 = add i32 %2298, -1
  %2815 = zext i32 %2814 to i64
  %2816 = add nuw nsw i64 %2815, 1
  %2817 = mul nsw i64 %2807, %2802
  %2818 = add i64 %2817, %2809
  %2819 = zext i32 %2814 to i64
  %2820 = add i64 %2818, %2819
  %2821 = add i64 %2820, 1
  %2822 = add nuw nsw i64 %2819, 1
  %2823 = and i64 %2816, 8589934584
  %2824 = add nsw i64 %2823, -8
  %2825 = lshr exact i64 %2824, 3
  %2826 = add nuw nsw i64 %2825, 1
  %2827 = icmp ult i64 %2816, 8
  %2828 = and i64 %2816, 8589934584
  %2829 = trunc i64 %2828 to i32
  %2830 = insertelement <4 x float> undef, float %2801, i32 0
  %2831 = shufflevector <4 x float> %2830, <4 x float> undef, <4 x i32> zeroinitializer
  %2832 = insertelement <4 x float> undef, float %2801, i32 0
  %2833 = shufflevector <4 x float> %2832, <4 x float> undef, <4 x i32> zeroinitializer
  %2834 = and i64 %2826, 1
  %2835 = icmp eq i64 %2824, 0
  %2836 = sub nuw nsw i64 %2826, %2834
  %2837 = icmp eq i64 %2834, 0
  %2838 = icmp eq i64 %2816, %2828
  br label %2839

2839:                                             ; preds = %2965, %2804
  %2840 = phi i64 [ %2970, %2965 ], [ 0, %2804 ]
  %2841 = phi float* [ %2967, %2965 ], [ %2812, %2804 ]
  %2842 = phi i32* [ %2966, %2965 ], [ %2295, %2804 ]
  %2843 = phi i32 [ %2968, %2965 ], [ 0, %2804 ]
  %2844 = mul i64 %2840, %2802
  %2845 = add i64 %2818, %2844
  %2846 = getelementptr i32, i32* %2806, i64 %2845
  %2847 = add i64 %2821, %2844
  %2848 = getelementptr i32, i32* %2806, i64 %2847
  br i1 %2813, label %2965, label %2849

2849:                                             ; preds = %2839
  br i1 %2827, label %2911, label %2850

2850:                                             ; preds = %2849
  %2851 = getelementptr i32, i32* %2842, i64 %2822
  %2852 = icmp ult i32* %2846, %2851
  %2853 = icmp ult i32* %2842, %2848
  %2854 = and i1 %2852, %2853
  br i1 %2854, label %2911, label %2855

2855:                                             ; preds = %2850
  %2856 = getelementptr float, float* %2841, i64 %2828
  %2857 = getelementptr i32, i32* %2842, i64 %2828
  br i1 %2835, label %2893, label %2858

2858:                                             ; preds = %2855, %2858
  %2859 = phi i64 [ %2890, %2858 ], [ 0, %2855 ]
  %2860 = phi i64 [ %2891, %2858 ], [ %2836, %2855 ]
  %2861 = getelementptr float, float* %2841, i64 %2859
  %2862 = getelementptr i32, i32* %2842, i64 %2859
  %2863 = bitcast i32* %2862 to <4 x i32>*
  %2864 = load <4 x i32>, <4 x i32>* %2863, align 4, !alias.scope !21
  %2865 = getelementptr i32, i32* %2862, i64 4
  %2866 = bitcast i32* %2865 to <4 x i32>*
  %2867 = load <4 x i32>, <4 x i32>* %2866, align 4, !alias.scope !21
  %2868 = sitofp <4 x i32> %2864 to <4 x float>
  %2869 = sitofp <4 x i32> %2867 to <4 x float>
  %2870 = fmul <4 x float> %2831, %2868
  %2871 = fmul <4 x float> %2833, %2869
  %2872 = bitcast float* %2861 to <4 x float>*
  store <4 x float> %2870, <4 x float>* %2872, align 4, !alias.scope !24, !noalias !21
  %2873 = getelementptr float, float* %2861, i64 4
  %2874 = bitcast float* %2873 to <4 x float>*
  store <4 x float> %2871, <4 x float>* %2874, align 4, !alias.scope !24, !noalias !21
  %2875 = or i64 %2859, 8
  %2876 = getelementptr float, float* %2841, i64 %2875
  %2877 = getelementptr i32, i32* %2842, i64 %2875
  %2878 = bitcast i32* %2877 to <4 x i32>*
  %2879 = load <4 x i32>, <4 x i32>* %2878, align 4, !alias.scope !21
  %2880 = getelementptr i32, i32* %2877, i64 4
  %2881 = bitcast i32* %2880 to <4 x i32>*
  %2882 = load <4 x i32>, <4 x i32>* %2881, align 4, !alias.scope !21
  %2883 = sitofp <4 x i32> %2879 to <4 x float>
  %2884 = sitofp <4 x i32> %2882 to <4 x float>
  %2885 = fmul <4 x float> %2831, %2883
  %2886 = fmul <4 x float> %2833, %2884
  %2887 = bitcast float* %2876 to <4 x float>*
  store <4 x float> %2885, <4 x float>* %2887, align 4, !alias.scope !24, !noalias !21
  %2888 = getelementptr float, float* %2876, i64 4
  %2889 = bitcast float* %2888 to <4 x float>*
  store <4 x float> %2886, <4 x float>* %2889, align 4, !alias.scope !24, !noalias !21
  %2890 = add i64 %2859, 16
  %2891 = add i64 %2860, -2
  %2892 = icmp eq i64 %2891, 0
  br i1 %2892, label %2893, label %2858, !llvm.loop !26

2893:                                             ; preds = %2858, %2855
  %2894 = phi i64 [ 0, %2855 ], [ %2890, %2858 ]
  br i1 %2837, label %2910, label %2895

2895:                                             ; preds = %2893
  %2896 = getelementptr float, float* %2841, i64 %2894
  %2897 = getelementptr i32, i32* %2842, i64 %2894
  %2898 = bitcast i32* %2897 to <4 x i32>*
  %2899 = load <4 x i32>, <4 x i32>* %2898, align 4, !alias.scope !21
  %2900 = getelementptr i32, i32* %2897, i64 4
  %2901 = bitcast i32* %2900 to <4 x i32>*
  %2902 = load <4 x i32>, <4 x i32>* %2901, align 4, !alias.scope !21
  %2903 = sitofp <4 x i32> %2899 to <4 x float>
  %2904 = sitofp <4 x i32> %2902 to <4 x float>
  %2905 = fmul <4 x float> %2831, %2903
  %2906 = fmul <4 x float> %2833, %2904
  %2907 = bitcast float* %2896 to <4 x float>*
  store <4 x float> %2905, <4 x float>* %2907, align 4, !alias.scope !24, !noalias !21
  %2908 = getelementptr float, float* %2896, i64 4
  %2909 = bitcast float* %2908 to <4 x float>*
  store <4 x float> %2906, <4 x float>* %2909, align 4, !alias.scope !24, !noalias !21
  br label %2910

2910:                                             ; preds = %2893, %2895
  br i1 %2838, label %2965, label %2911

2911:                                             ; preds = %2910, %2850, %2849
  %2912 = phi float* [ %2841, %2850 ], [ %2841, %2849 ], [ %2856, %2910 ]
  %2913 = phi i32* [ %2842, %2850 ], [ %2842, %2849 ], [ %2857, %2910 ]
  %2914 = phi i32 [ 0, %2850 ], [ 0, %2849 ], [ %2829, %2910 ]
  %2915 = sub i32 %2298, %2914
  %2916 = xor i32 %2914, -1
  %2917 = add i32 %2298, %2916
  %2918 = and i32 %2915, 3
  %2919 = icmp eq i32 %2918, 0
  br i1 %2919, label %2933, label %2920

2920:                                             ; preds = %2911, %2920
  %2921 = phi float* [ %2929, %2920 ], [ %2912, %2911 ]
  %2922 = phi i32* [ %2928, %2920 ], [ %2913, %2911 ]
  %2923 = phi i32 [ %2930, %2920 ], [ %2914, %2911 ]
  %2924 = phi i32 [ %2931, %2920 ], [ %2918, %2911 ]
  %2925 = load i32, i32* %2922, align 4
  %2926 = sitofp i32 %2925 to float
  %2927 = fmul float %2801, %2926
  store float %2927, float* %2921, align 4
  %2928 = getelementptr inbounds i32, i32* %2922, i64 1
  %2929 = getelementptr inbounds float, float* %2921, i64 1
  %2930 = add nuw i32 %2923, 1
  %2931 = add i32 %2924, -1
  %2932 = icmp eq i32 %2931, 0
  br i1 %2932, label %2933, label %2920, !llvm.loop !27

2933:                                             ; preds = %2920, %2911
  %2934 = phi i32* [ undef, %2911 ], [ %2928, %2920 ]
  %2935 = phi float* [ %2912, %2911 ], [ %2929, %2920 ]
  %2936 = phi i32* [ %2913, %2911 ], [ %2928, %2920 ]
  %2937 = phi i32 [ %2914, %2911 ], [ %2930, %2920 ]
  %2938 = icmp ult i32 %2917, 3
  br i1 %2938, label %2965, label %2939

2939:                                             ; preds = %2933, %2939
  %2940 = phi float* [ %2962, %2939 ], [ %2935, %2933 ]
  %2941 = phi i32* [ %2961, %2939 ], [ %2936, %2933 ]
  %2942 = phi i32 [ %2963, %2939 ], [ %2937, %2933 ]
  %2943 = load i32, i32* %2941, align 4
  %2944 = sitofp i32 %2943 to float
  %2945 = fmul float %2801, %2944
  store float %2945, float* %2940, align 4
  %2946 = getelementptr inbounds i32, i32* %2941, i64 1
  %2947 = getelementptr inbounds float, float* %2940, i64 1
  %2948 = load i32, i32* %2946, align 4
  %2949 = sitofp i32 %2948 to float
  %2950 = fmul float %2801, %2949
  store float %2950, float* %2947, align 4
  %2951 = getelementptr inbounds i32, i32* %2941, i64 2
  %2952 = getelementptr inbounds float, float* %2940, i64 2
  %2953 = load i32, i32* %2951, align 4
  %2954 = sitofp i32 %2953 to float
  %2955 = fmul float %2801, %2954
  store float %2955, float* %2952, align 4
  %2956 = getelementptr inbounds i32, i32* %2941, i64 3
  %2957 = getelementptr inbounds float, float* %2940, i64 3
  %2958 = load i32, i32* %2956, align 4
  %2959 = sitofp i32 %2958 to float
  %2960 = fmul float %2801, %2959
  store float %2960, float* %2957, align 4
  %2961 = getelementptr inbounds i32, i32* %2941, i64 4
  %2962 = getelementptr inbounds float, float* %2940, i64 4
  %2963 = add nuw i32 %2942, 4
  %2964 = icmp eq i32 %2963, %2298
  br i1 %2964, label %2965, label %2939, !llvm.loop !28

2965:                                             ; preds = %2933, %2939, %2910, %2839
  %2966 = phi i32* [ %2842, %2839 ], [ %2857, %2910 ], [ %2934, %2933 ], [ %2961, %2939 ]
  %2967 = getelementptr inbounds float, float* %2841, i64 %2802
  %2968 = add nuw i32 %2843, 1
  %2969 = icmp eq i32 %2968, %2301
  %2970 = add i64 %2840, 1
  br i1 %2969, label %2971, label %2839

2971:                                             ; preds = %2570, %2603, %2532, %2965, %2795, %2549, %2473, %2798, %2632, %2528, %53, %2247, %117, %93, %42
  tail call void @opj_free(i8* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_t1_encode_cblks(%struct.opj_tcd* nocapture readonly, %struct.opj_tcd_tile*, %struct.opj_tcp* nocapture readonly, double*, i32) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
  store volatile i32 -1431655766, i32* %6, align 4
  store volatile i32 1, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %9 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %8, align 8
  %10 = tail call %struct.opj_mutex_t* @opj_mutex_create() #7
  %11 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 7
  store double 0.000000e+00, double* %11, align 8
  %12 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %132, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 5
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 15
  br label %18

18:                                               ; preds = %15, %127
  %19 = phi i32 [ %13, %15 ], [ %128, %127 ]
  %20 = phi i64 [ 0, %15 ], [ %129, %127 ]
  %21 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %16, align 8
  %22 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20
  %23 = load %struct.opj_tccp*, %struct.opj_tccp** %17, align 8
  %24 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %23, i64 %20
  %25 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 5
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %127, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %21, i64 %20, i32 7
  %30 = trunc i64 %20 to i32
  br label %31

31:                                               ; preds = %28, %119
  %32 = phi i32 [ %26, %28 ], [ %120, %119 ]
  %33 = phi i64 [ 0, %28 ], [ %121, %119 ]
  %34 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %29, align 8
  %35 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %33, i32 6
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %119, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %33, i32 4
  %40 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %33, i32 5
  %41 = trunc i64 %33 to i32
  br label %42

42:                                               ; preds = %38, %112
  %43 = phi i64 [ 0, %38 ], [ %113, %112 ]
  %44 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %33, i32 7, i64 %43
  %45 = call i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* %44) #7
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %112

47:                                               ; preds = %42
  %48 = load i32, i32* %39, align 8
  %49 = load i32, i32* %40, align 4
  %50 = mul i32 %49, %48
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %112, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %34, i64 %33, i32 7, i64 %43, i32 5
  br label %54

54:                                               ; preds = %52, %105
  %55 = phi i32 [ %49, %52 ], [ %106, %105 ]
  %56 = phi i32 [ %48, %52 ], [ %107, %105 ]
  %57 = phi i64 [ 0, %52 ], [ %108, %105 ]
  %58 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %53, align 8
  %59 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %58, i64 %57, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %58, i64 %57, i32 5
  %62 = load i32, i32* %61, align 4
  %63 = mul i32 %62, %60
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %105, label %65

65:                                               ; preds = %54
  %66 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %58, i64 %57, i32 6, i32 0
  br label %67

67:                                               ; preds = %65, %72
  %68 = phi i64 [ 0, %65 ], [ %96, %72 ]
  %69 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %66, align 8
  %70 = call i8* @opj_calloc(i64 1, i64 80) #7
  %71 = icmp eq i8* %70, null
  br i1 %71, label %124, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %69, i64 %68
  %74 = bitcast i8* %70 to i32*
  store i32 %30, i32* %74, align 8
  %75 = getelementptr inbounds i8, i8* %70, i64 16
  %76 = bitcast i8* %75 to %struct.opj_tcd_tile**
  store %struct.opj_tcd_tile* %1, %struct.opj_tcd_tile** %76, align 8
  %77 = getelementptr inbounds i8, i8* %70, i64 4
  %78 = bitcast i8* %77 to i32*
  store i32 %41, i32* %78, align 4
  %79 = getelementptr inbounds i8, i8* %70, i64 8
  %80 = bitcast i8* %79 to %struct.opj_tcd_cblk_enc**
  store %struct.opj_tcd_cblk_enc* %73, %struct.opj_tcd_cblk_enc** %80, align 8
  %81 = getelementptr inbounds i8, i8* %70, i64 24
  %82 = bitcast i8* %81 to %struct.opj_tcd_band**
  store %struct.opj_tcd_band* %44, %struct.opj_tcd_band** %82, align 8
  %83 = getelementptr inbounds i8, i8* %70, i64 32
  %84 = bitcast i8* %83 to %struct.opj_tcd_tilecomp**
  store %struct.opj_tcd_tilecomp* %22, %struct.opj_tcd_tilecomp** %84, align 8
  %85 = getelementptr inbounds i8, i8* %70, i64 40
  %86 = bitcast i8* %85 to %struct.opj_tccp**
  store %struct.opj_tccp* %24, %struct.opj_tccp** %86, align 8
  %87 = getelementptr inbounds i8, i8* %70, i64 48
  %88 = bitcast i8* %87 to double**
  store double* %3, double** %88, align 8
  %89 = getelementptr inbounds i8, i8* %70, i64 56
  %90 = bitcast i8* %89 to i32*
  store i32 %4, i32* %90, align 8
  %91 = getelementptr inbounds i8, i8* %70, i64 64
  %92 = bitcast i8* %91 to i32**
  store i32* %6, i32** %92, align 8
  %93 = getelementptr inbounds i8, i8* %70, i64 72
  %94 = bitcast i8* %93 to %struct.opj_mutex_t**
  store %struct.opj_mutex_t* %10, %struct.opj_mutex_t** %94, align 8
  %95 = call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %9, void (i8*, %struct.opj_tls_t*)* nonnull @opj_t1_cblk_encode_processor, i8* nonnull %70) #7
  %96 = add nuw nsw i64 %68, 1
  %97 = load i32, i32* %59, align 8
  %98 = load i32, i32* %61, align 4
  %99 = mul i32 %98, %97
  %100 = zext i32 %99 to i64
  %101 = icmp ult i64 %96, %100
  br i1 %101, label %67, label %102

102:                                              ; preds = %72
  %103 = load i32, i32* %39, align 8
  %104 = load i32, i32* %40, align 4
  br label %105

105:                                              ; preds = %102, %54
  %106 = phi i32 [ %104, %102 ], [ %55, %54 ]
  %107 = phi i32 [ %103, %102 ], [ %56, %54 ]
  %108 = add nuw nsw i64 %57, 1
  %109 = mul i32 %106, %107
  %110 = zext i32 %109 to i64
  %111 = icmp ult i64 %108, %110
  br i1 %111, label %54, label %112

112:                                              ; preds = %105, %47, %42
  %113 = add nuw nsw i64 %43, 1
  %114 = load i32, i32* %35, align 8
  %115 = zext i32 %114 to i64
  %116 = icmp ult i64 %113, %115
  br i1 %116, label %42, label %117

117:                                              ; preds = %112
  %118 = load i32, i32* %25, align 4
  br label %119

119:                                              ; preds = %117, %31
  %120 = phi i32 [ %118, %117 ], [ %32, %31 ]
  %121 = add nuw nsw i64 %33, 1
  %122 = zext i32 %120 to i64
  %123 = icmp ult i64 %121, %122
  br i1 %123, label %31, label %125

124:                                              ; preds = %67
  store volatile i32 0, i32* %6, align 4
  br label %132

125:                                              ; preds = %119
  %126 = load i32, i32* %12, align 8
  br label %127

127:                                              ; preds = %125, %18
  %128 = phi i32 [ %126, %125 ], [ %19, %18 ]
  %129 = add nuw nsw i64 %20, 1
  %130 = zext i32 %128 to i64
  %131 = icmp ult i64 %129, %130
  br i1 %131, label %18, label %132

132:                                              ; preds = %127, %5, %124
  %133 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %8, align 8
  call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %133, i32 0) #7
  %134 = icmp eq %struct.opj_mutex_t* %10, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %132
  call void @opj_mutex_destroy(%struct.opj_mutex_t* nonnull %10) #7
  br label %136

136:                                              ; preds = %135, %132
  %137 = load volatile i32, i32* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
  ret i32 %137
}

declare %struct.opj_mutex_t* @opj_mutex_create() local_unnamed_addr #2

declare i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @opj_t1_cblk_encode_processor(i8*, %struct.opj_tls_t*) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to %struct.opj_tcd_cblk_enc**
  %5 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 24
  %7 = bitcast i8* %6 to %struct.opj_tcd_band**
  %8 = load %struct.opj_tcd_band*, %struct.opj_tcd_band** %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 32
  %10 = bitcast i8* %9 to %struct.opj_tcd_tilecomp**
  %11 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 40
  %13 = bitcast i8* %12 to %struct.opj_tccp**
  %14 = load %struct.opj_tccp*, %struct.opj_tccp** %13, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 4
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %11, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %11, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = sub nsw i32 %19, %21
  %23 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %8, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = sub nsw i32 %24, %26
  %28 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %8, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = sub nsw i32 %29, %31
  %33 = getelementptr inbounds i8, i8* %0, i64 64
  %34 = bitcast i8* %33 to i32**
  %35 = load i32*, i32** %34, align 8
  %36 = load volatile i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %3913, label %38

38:                                               ; preds = %2
  %39 = tail call i8* @opj_tls_get(%struct.opj_tls_t* %1, i32 0) #7
  %40 = bitcast i8* %39 to %struct.opj_t1*
  %41 = icmp eq i8* %39, null
  br i1 %41, label %42, label %52

42:                                               ; preds = %38
  %43 = tail call i8* @opj_calloc(i64 1, i64 272) #7
  %44 = icmp eq i8* %43, null
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = bitcast i8* %43 to %struct.opj_t1*
  %47 = getelementptr inbounds i8, i8* %43, i64 248
  %48 = bitcast i8* %47 to i32*
  store i32 1, i32* %48, align 8
  br label %49

49:                                               ; preds = %42, %45
  %50 = phi %struct.opj_t1* [ %46, %45 ], [ null, %42 ]
  %51 = tail call i32 @opj_tls_set(%struct.opj_tls_t* %1, i32 0, i8* %43, void (i8*)* nonnull @opj_t1_destroy_wrapper) #7
  br label %52

52:                                               ; preds = %49, %38
  %53 = phi %struct.opj_t1* [ %50, %49 ], [ %40, %38 ]
  %54 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %8, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %11, i64 0, i32 7
  %60 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %59, align 8
  %61 = add i32 %17, -1
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %60, i64 %62, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %60, i64 %62, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = add i32 %64, %27
  %68 = sub i32 %67, %66
  br label %69

69:                                               ; preds = %52, %58
  %70 = phi i32 [ %68, %58 ], [ %27, %52 ]
  %71 = and i32 %55, 2
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %84, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %11, i64 0, i32 7
  %75 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %74, align 8
  %76 = add i32 %17, -1
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %77, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %75, i64 %77, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = add i32 %79, %32
  %83 = sub i32 %82, %81
  br label %84

84:                                               ; preds = %69, %73
  %85 = phi i32 [ %83, %73 ], [ %32, %69 ]
  %86 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 5
  %87 = load i32, i32* %86, align 8
  %88 = load i32, i32* %23, align 8
  %89 = sub nsw i32 %87, %88
  %90 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 6
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* %28, align 4
  %93 = sub nsw i32 %91, %92
  %94 = tail call fastcc i32 @opj_t1_allocate_buffers(%struct.opj_t1* %53, i32 %89, i32 %93)
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %84
  %97 = load i32*, i32** %34, align 8
  store volatile i32 0, i32* %97, align 4
  br label %3913

98:                                               ; preds = %84
  %99 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 3
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 4
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %11, i64 0, i32 9
  %104 = load i32*, i32** %103, align 8
  %105 = sext i32 %85 to i64
  %106 = zext i32 %22 to i64
  %107 = mul nsw i64 %105, %106
  %108 = sext i32 %70 to i64
  %109 = add nsw i64 %107, %108
  %110 = getelementptr inbounds i32, i32* %104, i64 %109
  %111 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %14, i64 0, i32 5
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 1
  %114 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 1
  %115 = load i32*, i32** %114, align 8
  %116 = and i32 %102, -4
  %117 = icmp ne i32 %116, 0
  br i1 %113, label %123, label %118

118:                                              ; preds = %98
  br i1 %117, label %119, label %454

119:                                              ; preds = %118
  %120 = icmp eq i32 %100, 0
  %121 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %8, i64 0, i32 8
  %122 = zext i32 %100 to i64
  br label %389

123:                                              ; preds = %98
  br i1 %117, label %124, label %308

124:                                              ; preds = %123
  %125 = icmp eq i32 %100, 0
  %126 = zext i32 %100 to i64
  %127 = add nsw i64 %126, -1
  %128 = sub i32 %19, %21
  %129 = shl i32 %128, 2
  %130 = sub i32 %19, %21
  %131 = sub i32 %19, %21
  %132 = shl i32 %131, 1
  %133 = sub i32 %19, %21
  %134 = mul i32 %133, 3
  %135 = shl nuw nsw i64 %126, 2
  %136 = mul nsw i64 %105, %106
  %137 = add i64 %136, %108
  %138 = getelementptr i32, i32* %104, i64 %137
  %139 = sub i32 %19, %21
  %140 = mul i32 %139, 3
  %141 = sub i32 %19, %21
  %142 = shl i32 %141, 2
  %143 = add i64 %136, %108
  %144 = add i64 %143, %126
  %145 = getelementptr i32, i32* %104, i64 %144
  %146 = getelementptr i32, i32* %104, i64 %137
  %147 = sub i32 %19, %21
  %148 = shl i32 %147, 1
  %149 = getelementptr i32, i32* %104, i64 %144
  %150 = getelementptr i32, i32* %104, i64 %137
  %151 = sub i32 %19, %21
  %152 = getelementptr i32, i32* %104, i64 %144
  %153 = getelementptr i32, i32* %104, i64 %137
  %154 = getelementptr i32, i32* %104, i64 %144
  %155 = icmp ult i32 %100, 4
  %156 = trunc i64 %127 to i32
  %157 = icmp ugt i64 %127, 4294967295
  %158 = trunc i64 %127 to i32
  %159 = icmp ugt i64 %127, 4294967295
  %160 = trunc i64 %127 to i32
  %161 = icmp ugt i64 %127, 4294967295
  %162 = trunc i64 %127 to i32
  %163 = icmp ugt i64 %127, 4294967295
  %164 = and i64 %126, 4294967292
  %165 = shl nuw nsw i64 %164, 2
  %166 = icmp eq i64 %164, %126
  br label %167

167:                                              ; preds = %124, %303
  %168 = phi i32 [ 0, %124 ], [ %307, %303 ]
  %169 = phi i32* [ %115, %124 ], [ %304, %303 ]
  %170 = phi i32 [ 0, %124 ], [ %305, %303 ]
  %171 = mul i32 %142, %168
  %172 = add i32 %140, %171
  %173 = zext i32 %172 to i64
  %174 = getelementptr i32, i32* %138, i64 %173
  %175 = getelementptr i32, i32* %145, i64 %173
  %176 = add i32 %148, %171
  %177 = zext i32 %176 to i64
  %178 = getelementptr i32, i32* %146, i64 %177
  %179 = getelementptr i32, i32* %149, i64 %177
  %180 = add i32 %151, %171
  %181 = zext i32 %180 to i64
  %182 = getelementptr i32, i32* %150, i64 %181
  %183 = getelementptr i32, i32* %152, i64 %181
  %184 = zext i32 %171 to i64
  %185 = getelementptr i32, i32* %153, i64 %184
  %186 = getelementptr i32, i32* %154, i64 %184
  %187 = mul i32 %129, %168
  %188 = add i32 %130, %187
  %189 = add i32 %132, %187
  %190 = add i32 %134, %187
  br i1 %125, label %303, label %191

191:                                              ; preds = %167
  %192 = mul i32 %170, %22
  %193 = or i32 %170, 1
  %194 = mul i32 %193, %22
  %195 = or i32 %170, 2
  %196 = mul i32 %195, %22
  %197 = or i32 %170, 3
  %198 = mul i32 %197, %22
  br i1 %155, label %270, label %199

199:                                              ; preds = %191
  %200 = xor i32 %187, -1
  %201 = icmp ult i32 %200, %156
  %202 = or i1 %201, %157
  %203 = xor i32 %188, -1
  %204 = icmp ult i32 %203, %158
  %205 = or i1 %204, %159
  %206 = or i1 %202, %205
  %207 = xor i32 %189, -1
  %208 = icmp ult i32 %207, %160
  %209 = or i1 %208, %161
  %210 = or i1 %206, %209
  %211 = xor i32 %190, -1
  %212 = icmp ult i32 %211, %162
  %213 = or i1 %212, %163
  %214 = or i1 %210, %213
  br i1 %214, label %270, label %215

215:                                              ; preds = %199
  %216 = getelementptr i32, i32* %169, i64 %135
  %217 = icmp ult i32* %169, %175
  %218 = icmp ult i32* %174, %216
  %219 = and i1 %217, %218
  %220 = icmp ult i32* %169, %179
  %221 = icmp ult i32* %178, %216
  %222 = and i1 %220, %221
  %223 = or i1 %219, %222
  %224 = icmp ult i32* %169, %183
  %225 = icmp ult i32* %182, %216
  %226 = and i1 %224, %225
  %227 = or i1 %223, %226
  %228 = icmp ult i32* %169, %186
  %229 = icmp ult i32* %185, %216
  %230 = and i1 %228, %229
  %231 = or i1 %227, %230
  br i1 %231, label %270, label %232

232:                                              ; preds = %215
  %233 = getelementptr i32, i32* %169, i64 %165
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %267, %234 ]
  %236 = shl i64 %235, 2
  %237 = trunc i64 %235 to i32
  %238 = add i32 %192, %237
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds i32, i32* %110, i64 %239
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4, !alias.scope !29
  %243 = shl <4 x i32> %242, <i32 6, i32 6, i32 6, i32 6>
  %244 = add i32 %194, %237
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds i32, i32* %110, i64 %245
  %247 = bitcast i32* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 4, !alias.scope !32
  %249 = shl <4 x i32> %248, <i32 6, i32 6, i32 6, i32 6>
  %250 = add i32 %196, %237
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds i32, i32* %110, i64 %251
  %253 = bitcast i32* %252 to <4 x i32>*
  %254 = load <4 x i32>, <4 x i32>* %253, align 4, !alias.scope !34
  %255 = shl <4 x i32> %254, <i32 6, i32 6, i32 6, i32 6>
  %256 = add i32 %198, %237
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds i32, i32* %110, i64 %257
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !36
  %261 = shl <4 x i32> %260, <i32 6, i32 6, i32 6, i32 6>
  %262 = getelementptr inbounds i32, i32* %169, i64 %236
  %263 = bitcast i32* %262 to <16 x i32>*
  %264 = shufflevector <4 x i32> %243, <4 x i32> %249, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %265 = shufflevector <4 x i32> %255, <4 x i32> %261, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %266 = shufflevector <8 x i32> %264, <8 x i32> %265, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i32> %266, <16 x i32>* %263, align 4
  %267 = add i64 %235, 4
  %268 = icmp eq i64 %267, %164
  br i1 %268, label %269, label %234, !llvm.loop !38

269:                                              ; preds = %234
  br i1 %166, label %303, label %270

270:                                              ; preds = %269, %215, %199, %191
  %271 = phi i64 [ 0, %215 ], [ 0, %199 ], [ 0, %191 ], [ %164, %269 ]
  %272 = phi i32* [ %169, %215 ], [ %169, %199 ], [ %169, %191 ], [ %233, %269 ]
  br label %273

273:                                              ; preds = %270, %273
  %274 = phi i64 [ %301, %273 ], [ %271, %270 ]
  %275 = phi i32* [ %300, %273 ], [ %272, %270 ]
  %276 = trunc i64 %274 to i32
  %277 = add i32 %192, %276
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds i32, i32* %110, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = shl i32 %280, 6
  store i32 %281, i32* %275, align 4
  %282 = add i32 %194, %276
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds i32, i32* %110, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = shl i32 %285, 6
  %287 = getelementptr inbounds i32, i32* %275, i64 1
  store i32 %286, i32* %287, align 4
  %288 = add i32 %196, %276
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i32, i32* %110, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = shl i32 %291, 6
  %293 = getelementptr inbounds i32, i32* %275, i64 2
  store i32 %292, i32* %293, align 4
  %294 = add i32 %198, %276
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds i32, i32* %110, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = shl i32 %297, 6
  %299 = getelementptr inbounds i32, i32* %275, i64 3
  store i32 %298, i32* %299, align 4
  %300 = getelementptr inbounds i32, i32* %275, i64 4
  %301 = add nuw nsw i64 %274, 1
  %302 = icmp eq i64 %301, %126
  br i1 %302, label %303, label %273, !llvm.loop !39

303:                                              ; preds = %273, %269, %167
  %304 = phi i32* [ %169, %167 ], [ %233, %269 ], [ %300, %273 ]
  %305 = add nuw i32 %170, 4
  %306 = icmp ult i32 %305, %116
  %307 = add i32 %168, 1
  br i1 %306, label %167, label %308

308:                                              ; preds = %303, %123
  %309 = phi i32 [ 0, %123 ], [ %305, %303 ]
  %310 = phi i32* [ %115, %123 ], [ %304, %303 ]
  %311 = icmp ult i32 %309, %102
  %312 = icmp ne i32 %100, 0
  %313 = and i1 %311, %312
  br i1 %313, label %314, label %488

314:                                              ; preds = %308
  %315 = zext i32 %309 to i64
  %316 = zext i32 %102 to i64
  %317 = sub nsw i64 %316, %315
  %318 = xor i64 %315, -1
  %319 = add nsw i64 %318, %316
  %320 = and i64 %317, 3
  %321 = icmp eq i64 %320, 0
  %322 = icmp ult i64 %319, 3
  br label %323

323:                                              ; preds = %314, %385
  %324 = phi i32* [ %310, %314 ], [ %386, %385 ]
  %325 = phi i32 [ 0, %314 ], [ %387, %385 ]
  br i1 %321, label %341, label %326

326:                                              ; preds = %323, %326
  %327 = phi i64 [ %338, %326 ], [ %315, %323 ]
  %328 = phi i32* [ %337, %326 ], [ %324, %323 ]
  %329 = phi i64 [ %339, %326 ], [ %320, %323 ]
  %330 = trunc i64 %327 to i32
  %331 = mul i32 %22, %330
  %332 = add i32 %331, %325
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds i32, i32* %110, i64 %333
  %335 = load i32, i32* %334, align 4
  %336 = shl i32 %335, 6
  store i32 %336, i32* %328, align 4
  %337 = getelementptr inbounds i32, i32* %328, i64 1
  %338 = add nuw nsw i64 %327, 1
  %339 = add i64 %329, -1
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %326, !llvm.loop !40

341:                                              ; preds = %326, %323
  %342 = phi i32* [ undef, %323 ], [ %337, %326 ]
  %343 = phi i64 [ %315, %323 ], [ %338, %326 ]
  %344 = phi i32* [ %324, %323 ], [ %337, %326 ]
  br i1 %322, label %385, label %345

345:                                              ; preds = %341, %345
  %346 = phi i64 [ %383, %345 ], [ %343, %341 ]
  %347 = phi i32* [ %382, %345 ], [ %344, %341 ]
  %348 = trunc i64 %346 to i32
  %349 = mul i32 %22, %348
  %350 = add i32 %349, %325
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds i32, i32* %110, i64 %351
  %353 = load i32, i32* %352, align 4
  %354 = shl i32 %353, 6
  store i32 %354, i32* %347, align 4
  %355 = getelementptr inbounds i32, i32* %347, i64 1
  %356 = trunc i64 %346 to i32
  %357 = add i32 %356, 1
  %358 = mul i32 %22, %357
  %359 = add i32 %358, %325
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds i32, i32* %110, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = shl i32 %362, 6
  store i32 %363, i32* %355, align 4
  %364 = getelementptr inbounds i32, i32* %347, i64 2
  %365 = trunc i64 %346 to i32
  %366 = add i32 %365, 2
  %367 = mul i32 %22, %366
  %368 = add i32 %367, %325
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds i32, i32* %110, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = shl i32 %371, 6
  store i32 %372, i32* %364, align 4
  %373 = getelementptr inbounds i32, i32* %347, i64 3
  %374 = trunc i64 %346 to i32
  %375 = add i32 %374, 3
  %376 = mul i32 %22, %375
  %377 = add i32 %376, %325
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds i32, i32* %110, i64 %378
  %380 = load i32, i32* %379, align 4
  %381 = shl i32 %380, 6
  store i32 %381, i32* %373, align 4
  %382 = getelementptr inbounds i32, i32* %347, i64 4
  %383 = add nuw nsw i64 %346, 4
  %384 = icmp eq i64 %383, %316
  br i1 %384, label %385, label %345

385:                                              ; preds = %345, %341
  %386 = phi i32* [ %342, %341 ], [ %382, %345 ]
  %387 = add nuw i32 %325, 1
  %388 = icmp eq i32 %387, %100
  br i1 %388, label %488, label %323

389:                                              ; preds = %119, %450
  %390 = phi i32* [ %115, %119 ], [ %451, %450 ]
  %391 = phi i32 [ 0, %119 ], [ %452, %450 ]
  br i1 %120, label %450, label %392

392:                                              ; preds = %389
  %393 = mul i32 %391, %22
  %394 = or i32 %391, 1
  %395 = mul i32 %394, %22
  %396 = or i32 %391, 2
  %397 = mul i32 %396, %22
  %398 = or i32 %391, 3
  %399 = mul i32 %398, %22
  br label %400

400:                                              ; preds = %400, %392
  %401 = phi i64 [ 0, %392 ], [ %448, %400 ]
  %402 = phi i32* [ %390, %392 ], [ %447, %400 ]
  %403 = trunc i64 %401 to i32
  %404 = add i32 %393, %403
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds i32, i32* %110, i64 %405
  %407 = bitcast i32* %406 to float*
  %408 = load float, float* %407, align 4
  %409 = load float, float* %121, align 8
  %410 = fdiv float %408, %409
  %411 = fmul float %410, 6.400000e+01
  %412 = tail call i64 @lrintf(float %411) #7
  %413 = trunc i64 %412 to i32
  store i32 %413, i32* %402, align 4
  %414 = add i32 %395, %403
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds i32, i32* %110, i64 %415
  %417 = bitcast i32* %416 to float*
  %418 = load float, float* %417, align 4
  %419 = load float, float* %121, align 8
  %420 = fdiv float %418, %419
  %421 = fmul float %420, 6.400000e+01
  %422 = tail call i64 @lrintf(float %421) #7
  %423 = trunc i64 %422 to i32
  %424 = getelementptr inbounds i32, i32* %402, i64 1
  store i32 %423, i32* %424, align 4
  %425 = add i32 %397, %403
  %426 = zext i32 %425 to i64
  %427 = getelementptr inbounds i32, i32* %110, i64 %426
  %428 = bitcast i32* %427 to float*
  %429 = load float, float* %428, align 4
  %430 = load float, float* %121, align 8
  %431 = fdiv float %429, %430
  %432 = fmul float %431, 6.400000e+01
  %433 = tail call i64 @lrintf(float %432) #7
  %434 = trunc i64 %433 to i32
  %435 = getelementptr inbounds i32, i32* %402, i64 2
  store i32 %434, i32* %435, align 4
  %436 = add i32 %399, %403
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds i32, i32* %110, i64 %437
  %439 = bitcast i32* %438 to float*
  %440 = load float, float* %439, align 4
  %441 = load float, float* %121, align 8
  %442 = fdiv float %440, %441
  %443 = fmul float %442, 6.400000e+01
  %444 = tail call i64 @lrintf(float %443) #7
  %445 = trunc i64 %444 to i32
  %446 = getelementptr inbounds i32, i32* %402, i64 3
  store i32 %445, i32* %446, align 4
  %447 = getelementptr inbounds i32, i32* %402, i64 4
  %448 = add nuw nsw i64 %401, 1
  %449 = icmp eq i64 %448, %122
  br i1 %449, label %450, label %400

450:                                              ; preds = %400, %389
  %451 = phi i32* [ %390, %389 ], [ %447, %400 ]
  %452 = add nuw i32 %391, 4
  %453 = icmp ult i32 %452, %116
  br i1 %453, label %389, label %454

454:                                              ; preds = %450, %118
  %455 = phi i32 [ 0, %118 ], [ %452, %450 ]
  %456 = phi i32* [ %115, %118 ], [ %451, %450 ]
  %457 = icmp ult i32 %455, %102
  %458 = icmp ne i32 %100, 0
  %459 = and i1 %457, %458
  br i1 %459, label %460, label %488

460:                                              ; preds = %454
  %461 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %8, i64 0, i32 8
  %462 = zext i32 %455 to i64
  br label %463

463:                                              ; preds = %460, %485
  %464 = phi i32* [ %456, %460 ], [ %481, %485 ]
  %465 = phi i32 [ 0, %460 ], [ %486, %485 ]
  br label %466

466:                                              ; preds = %466, %463
  %467 = phi i64 [ %462, %463 ], [ %482, %466 ]
  %468 = phi i32* [ %464, %463 ], [ %481, %466 ]
  %469 = trunc i64 %467 to i32
  %470 = mul i32 %22, %469
  %471 = add i32 %470, %465
  %472 = zext i32 %471 to i64
  %473 = getelementptr inbounds i32, i32* %110, i64 %472
  %474 = bitcast i32* %473 to float*
  %475 = load float, float* %474, align 4
  %476 = load float, float* %461, align 8
  %477 = fdiv float %475, %476
  %478 = fmul float %477, 6.400000e+01
  %479 = tail call i64 @lrintf(float %478) #7
  %480 = trunc i64 %479 to i32
  store i32 %480, i32* %468, align 4
  %481 = getelementptr inbounds i32, i32* %468, i64 1
  %482 = add nuw nsw i64 %467, 1
  %483 = trunc i64 %482 to i32
  %484 = icmp eq i32 %102, %483
  br i1 %484, label %485, label %466

485:                                              ; preds = %466
  %486 = add nuw i32 %465, 1
  %487 = icmp eq i32 %486, %100
  br i1 %487, label %488, label %463

488:                                              ; preds = %485, %385, %454, %308
  %489 = load i32, i32* %54, align 8
  %490 = bitcast i8* %0 to i32*
  %491 = load i32, i32* %490, align 8
  %492 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %11, i64 0, i32 5
  %493 = load i32, i32* %492, align 4
  %494 = xor i32 %17, -1
  %495 = add i32 %493, %494
  %496 = load i32, i32* %111, align 4
  %497 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %8, i64 0, i32 8
  %498 = load float, float* %497, align 8
  %499 = fpext float %498 to double
  %500 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %14, i64 0, i32 4
  %501 = load i32, i32* %500, align 4
  %502 = getelementptr inbounds i8, i8* %0, i64 16
  %503 = bitcast i8* %502 to %struct.opj_tcd_tile**
  %504 = getelementptr inbounds i8, i8* %0, i64 48
  %505 = bitcast i8* %504 to double**
  %506 = load double*, double** %505, align 8
  %507 = getelementptr inbounds i8, i8* %0, i64 56
  %508 = bitcast i8* %507 to i32*
  %509 = load i32, i32* %508, align 8
  %510 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0
  %511 = shl i32 %489, 9
  %512 = zext i32 %511 to i64
  %513 = getelementptr inbounds [2048 x i8], [2048 x i8]* @lut_ctxno_zc, i64 0, i64 %512
  %514 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 9
  store i8* %513, i8** %514, align 8
  %515 = load i32, i32* %101, align 4
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %577, label %517

517:                                              ; preds = %488
  %518 = load i32*, i32** %114, align 8
  br label %519

519:                                              ; preds = %569, %517
  %520 = phi i32* [ %518, %517 ], [ %571, %569 ]
  %521 = phi i32 [ 0, %517 ], [ %572, %569 ]
  %522 = phi i32 [ 0, %517 ], [ %570, %569 ]
  %523 = load i32, i32* %99, align 8
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %569, label %525

525:                                              ; preds = %519
  %526 = and i32 %523, 1
  %527 = icmp eq i32 %523, 1
  br i1 %527, label %549, label %528

528:                                              ; preds = %525
  %529 = sub i32 %523, %526
  br label %530

530:                                              ; preds = %3927, %528
  %531 = phi i32* [ %520, %528 ], [ %3929, %3927 ]
  %532 = phi i32 [ %522, %528 ], [ %3928, %3927 ]
  %533 = phi i32 [ %529, %528 ], [ %3930, %3927 ]
  %534 = load i32, i32* %531, align 4
  %535 = icmp slt i32 %534, 0
  br i1 %535, label %536, label %541

536:                                              ; preds = %530
  %537 = sub nsw i32 0, %534
  %538 = icmp sgt i32 %532, %537
  %539 = select i1 %538, i32 %532, i32 %537
  %540 = or i32 %537, -2147483648
  store i32 %540, i32* %531, align 4
  br label %544

541:                                              ; preds = %530
  %542 = icmp sgt i32 %532, %534
  %543 = select i1 %542, i32 %532, i32 %534
  br label %544

544:                                              ; preds = %541, %536
  %545 = phi i32 [ %539, %536 ], [ %543, %541 ]
  %546 = getelementptr inbounds i32, i32* %531, i64 1
  %547 = load i32, i32* %546, align 4
  %548 = icmp slt i32 %547, 0
  br i1 %548, label %3922, label %3919

549:                                              ; preds = %3927, %525
  %550 = phi i32 [ undef, %525 ], [ %3928, %3927 ]
  %551 = phi i32* [ undef, %525 ], [ %3929, %3927 ]
  %552 = phi i32* [ %520, %525 ], [ %3929, %3927 ]
  %553 = phi i32 [ %522, %525 ], [ %3928, %3927 ]
  %554 = icmp eq i32 %526, 0
  br i1 %554, label %569, label %555

555:                                              ; preds = %549
  %556 = load i32, i32* %552, align 4
  %557 = icmp slt i32 %556, 0
  br i1 %557, label %561, label %558

558:                                              ; preds = %555
  %559 = icmp sgt i32 %553, %556
  %560 = select i1 %559, i32 %553, i32 %556
  br label %566

561:                                              ; preds = %555
  %562 = sub nsw i32 0, %556
  %563 = icmp sgt i32 %553, %562
  %564 = select i1 %563, i32 %553, i32 %562
  %565 = or i32 %562, -2147483648
  store i32 %565, i32* %552, align 4
  br label %566

566:                                              ; preds = %558, %561
  %567 = phi i32 [ %564, %561 ], [ %560, %558 ]
  %568 = getelementptr inbounds i32, i32* %552, i64 1
  br label %569

569:                                              ; preds = %566, %549, %519
  %570 = phi i32 [ %522, %519 ], [ %550, %549 ], [ %567, %566 ]
  %571 = phi i32* [ %520, %519 ], [ %551, %549 ], [ %568, %566 ]
  %572 = add nuw i32 %521, 1
  %573 = load i32, i32* %101, align 4
  %574 = icmp ult i32 %572, %573
  br i1 %574, label %519, label %575

575:                                              ; preds = %569
  %576 = icmp eq i32 %570, 0
  br i1 %576, label %577, label %579

577:                                              ; preds = %575, %488
  %578 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 7
  store i32 0, i32* %578, align 8
  br label %593

579:                                              ; preds = %575
  %580 = icmp sgt i32 %570, 1
  br i1 %580, label %583, label %581

581:                                              ; preds = %579
  %582 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 7
  store i32 -5, i32* %582, align 8
  br label %595

583:                                              ; preds = %579, %583
  %584 = phi i32 [ %587, %583 ], [ 0, %579 ]
  %585 = phi i32 [ %586, %583 ], [ %570, %579 ]
  %586 = lshr i32 %585, 1
  %587 = add nuw nsw i32 %584, 1
  %588 = icmp ugt i32 %585, 3
  br i1 %588, label %583, label %589

589:                                              ; preds = %583
  %590 = add nsw i32 %584, -4
  %591 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 7
  store i32 %590, i32* %591, align 8
  %592 = icmp eq i32 %590, 0
  br i1 %592, label %593, label %595

593:                                              ; preds = %589, %577
  %594 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 12
  store i32 0, i32* %594, align 4
  br label %3898

595:                                              ; preds = %589, %581
  %596 = phi i32* [ %582, %581 ], [ %591, %589 ]
  %597 = phi i32 [ -5, %581 ], [ %590, %589 ]
  %598 = add i32 %597, -1
  tail call void @opj_mqc_resetstates(%struct.opj_mqc* %510) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %510, i32 18, i32 0, i32 46) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %510, i32 17, i32 0, i32 3) #7
  tail call void @opj_mqc_setstate(%struct.opj_mqc* %510, i32 0, i32 0, i32 4) #7
  %599 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 0
  %600 = load i8*, i8** %599, align 8
  tail call void @opj_mqc_init_enc(%struct.opj_mqc* %510, i8* %600) #7
  %601 = icmp sgt i32 %598, -1
  br i1 %601, label %604, label %602

602:                                              ; preds = %595
  %603 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 12
  store i32 0, i32* %603, align 4
  br label %3898

604:                                              ; preds = %595
  %605 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 2
  %606 = and i32 %501, 1
  %607 = icmp ne i32 %606, 0
  %608 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 8
  %609 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 0
  %610 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 1
  %611 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 2
  %612 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 2
  %613 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 17
  %614 = bitcast %struct.opj_mqc_state** %613 to i64*
  %615 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 18
  %616 = bitcast %struct.opj_mqc_state** %615 to i64*
  %617 = and i32 %501, 8
  %618 = icmp ne i32 %617, 0
  %619 = and i32 %501, 32
  %620 = icmp eq i32 %619, 0
  %621 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 4
  %622 = icmp eq i32 %617, 0
  %623 = icmp ne double* %506, null
  %624 = icmp ult i32 %491, %509
  %625 = and i1 %623, %624
  %626 = zext i32 %491 to i64
  %627 = getelementptr inbounds double, double* %506, i64 %626
  %628 = icmp eq i32 %496, 1
  %629 = icmp eq i32 %489, 0
  %630 = icmp eq i32 %489, 3
  %631 = select i1 %630, i32 4, i32 2
  %632 = select i1 %629, i32 1, i32 %631
  %633 = sitofp i32 %632 to double
  %634 = fdiv double %499, %633
  %635 = and i32 %501, 4
  %636 = icmp eq i32 %635, 0
  %637 = icmp eq i32 %606, 0
  %638 = and i32 %501, 16
  %639 = icmp eq i32 %638, 0
  %640 = and i32 %501, 2
  %641 = icmp eq i32 %640, 0
  br label %642

642:                                              ; preds = %3818, %604
  %643 = phi i32 [ 2, %604 ], [ %3816, %3818 ]
  %644 = phi i32 [ %598, %604 ], [ %3815, %3818 ]
  %645 = phi i32 [ 0, %604 ], [ %3819, %3818 ]
  %646 = phi double [ 0.000000e+00, %604 ], [ %3772, %3818 ]
  %647 = phi i32 [ 0, %604 ], [ %3751, %3818 ]
  %648 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %605, align 8
  %649 = zext i32 %645 to i64
  %650 = load i32, i32* %596, align 8
  %651 = add nsw i32 %650, -4
  %652 = icmp slt i32 %644, %651
  %653 = icmp ult i32 %643, 2
  %654 = and i1 %653, %652
  %655 = and i1 %607, %654
  %656 = icmp eq i32 %645, 0
  br i1 %656, label %667, label %657

657:                                              ; preds = %642
  %658 = add i32 %645, -1
  %659 = zext i32 %658 to i64
  %660 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %648, i64 %659, i32 3
  %661 = load i8, i8* %660, align 4
  %662 = and i8 %661, 1
  %663 = icmp eq i8 %662, 0
  br i1 %663, label %667, label %664

664:                                              ; preds = %657
  br i1 %655, label %665, label %666

665:                                              ; preds = %664
  tail call void @opj_mqc_bypass_init_enc(%struct.opj_mqc* %510) #7
  br label %667

666:                                              ; preds = %664
  tail call void @opj_mqc_restart_init_enc(%struct.opj_mqc* %510) #7
  br label %667

667:                                              ; preds = %666, %665, %657, %642
  switch i32 %643, label %3750 [
    i32 0, label %668
    i32 1, label %2114
    i32 2, label %2835
  ]

668:                                              ; preds = %667
  %669 = add nuw nsw i32 %644, 6
  %670 = shl i32 1, %669
  %671 = load i32*, i32** %612, align 8
  %672 = load i32, i32* %99, align 8
  %673 = add i32 %672, 3
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds i32, i32* %671, i64 %674
  %676 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %608, align 8
  %677 = load i32, i32* %609, align 8
  %678 = load i32, i32* %610, align 4
  %679 = load i32, i32* %611, align 8
  %680 = load i32*, i32** %114, align 8
  %681 = load i32, i32* %101, align 4
  %682 = icmp ugt i32 %681, 3
  br i1 %682, label %683, label %1744

683:                                              ; preds = %668
  %684 = and i32 %670, 2147483647
  %685 = icmp eq i32 %644, 0
  %686 = select i1 %685, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  %687 = select i1 %685, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  %688 = select i1 %685, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  %689 = select i1 %685, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  br label %690

690:                                              ; preds = %1742, %683
  %691 = phi i32 [ %672, %683 ], [ %1743, %1742 ]
  %692 = phi i32 [ 0, %683 ], [ %1730, %1742 ]
  %693 = phi i32 [ %681, %683 ], [ %1731, %1742 ]
  %694 = phi i32 [ 0, %683 ], [ %1738, %1742 ]
  %695 = phi i32* [ %675, %683 ], [ %1739, %1742 ]
  %696 = phi %struct.opj_mqc_state** [ %676, %683 ], [ %1736, %1742 ]
  %697 = phi i32 [ %677, %683 ], [ %1735, %1742 ]
  %698 = phi i32 [ %678, %683 ], [ %1734, %1742 ]
  %699 = phi i32 [ %679, %683 ], [ %1733, %1742 ]
  %700 = phi i32* [ %680, %683 ], [ %1732, %1742 ]
  %701 = icmp eq i32 %691, 0
  br i1 %701, label %1729, label %702

702:                                              ; preds = %690, %1717
  %703 = phi i32 [ %1718, %1717 ], [ %692, %690 ]
  %704 = phi i32 [ %1723, %1717 ], [ 0, %690 ]
  %705 = phi i32* [ %1724, %1717 ], [ %695, %690 ]
  %706 = phi %struct.opj_mqc_state** [ %1722, %1717 ], [ %696, %690 ]
  %707 = phi i32 [ %1721, %1717 ], [ %697, %690 ]
  %708 = phi i32 [ %1720, %1717 ], [ %698, %690 ]
  %709 = phi i32 [ %1719, %1717 ], [ %699, %690 ]
  %710 = phi i32* [ %1725, %1717 ], [ %700, %690 ]
  %711 = load i32, i32* %705, align 4
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %1717, label %713

713:                                              ; preds = %702
  %714 = and i32 %711, 2097168
  %715 = icmp ne i32 %714, 0
  %716 = and i32 %711, 495
  %717 = icmp eq i32 %716, 0
  %718 = or i1 %715, %717
  br i1 %718, label %965, label %719

719:                                              ; preds = %713
  %720 = load i8*, i8** %514, align 8
  %721 = zext i32 %716 to i64
  %722 = getelementptr inbounds i8, i8* %720, i64 %721
  %723 = load i8, i8* %722, align 1
  %724 = load i32, i32* %710, align 4
  %725 = and i32 %724, %684
  %726 = icmp ne i32 %725, 0
  %727 = zext i1 %726 to i32
  %728 = zext i8 %723 to i64
  %729 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %728
  br i1 %655, label %730, label %745

730:                                              ; preds = %719
  %731 = icmp eq i32 %709, -559038737
  %732 = add i32 %709, -1
  %733 = select i1 %731, i32 7, i32 %732
  %734 = shl i32 %727, %733
  %735 = add i32 %734, %707
  %736 = icmp eq i32 %733, 0
  br i1 %736, label %737, label %808

737:                                              ; preds = %730
  %738 = trunc i32 %735 to i8
  %739 = load i8*, i8** %621, align 8
  store i8 %738, i8* %739, align 1
  %740 = load i8*, i8** %621, align 8
  %741 = load i8, i8* %740, align 1
  %742 = icmp eq i8 %741, -1
  %743 = select i1 %742, i32 7, i32 8
  %744 = getelementptr inbounds i8, i8* %740, i64 1
  store i8* %744, i8** %621, align 8
  br label %808

745:                                              ; preds = %719
  %746 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %729, align 8
  %747 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %746, i64 0, i32 1
  %748 = load i32, i32* %747, align 4
  %749 = icmp eq i32 %748, %727
  %750 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %746, i64 0, i32 0
  %751 = load i32, i32* %750, align 8
  %752 = sub i32 %708, %751
  br i1 %749, label %753, label %783

753:                                              ; preds = %745
  %754 = trunc i32 %752 to i16
  %755 = icmp sgt i16 %754, -1
  br i1 %755, label %756, label %781

756:                                              ; preds = %753
  %757 = icmp ult i32 %752, %751
  %758 = select i1 %757, i32 %751, i32 %752
  %759 = select i1 %757, i32 0, i32 %751
  %760 = add i32 %759, %707
  %761 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %746, i64 0, i32 2
  %762 = bitcast %struct.opj_mqc_state** %761 to i64*
  %763 = load i64, i64* %762, align 8
  %764 = bitcast %struct.opj_mqc_state** %729 to i64*
  store i64 %763, i64* %764, align 8
  br label %765

765:                                              ; preds = %776, %756
  %766 = phi i32 [ %709, %756 ], [ %777, %776 ]
  %767 = phi i32 [ %758, %756 ], [ %769, %776 ]
  %768 = phi i32 [ %760, %756 ], [ %778, %776 ]
  %769 = shl i32 %767, 1
  %770 = shl i32 %768, 1
  %771 = add i32 %766, -1
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %773, label %776

773:                                              ; preds = %765
  store i32 %770, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %774 = load i32, i32* %609, align 8
  %775 = load i32, i32* %611, align 8
  br label %776

776:                                              ; preds = %773, %765
  %777 = phi i32 [ %775, %773 ], [ %771, %765 ]
  %778 = phi i32 [ %774, %773 ], [ %770, %765 ]
  %779 = and i32 %767, 16384
  %780 = icmp eq i32 %779, 0
  br i1 %780, label %765, label %808

781:                                              ; preds = %753
  %782 = add i32 %751, %707
  br label %808

783:                                              ; preds = %745
  %784 = icmp ult i32 %752, %751
  %785 = select i1 %784, i32 %752, i32 %751
  %786 = select i1 %784, i32 %751, i32 0
  %787 = add i32 %786, %707
  %788 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %746, i64 0, i32 3
  %789 = bitcast %struct.opj_mqc_state** %788 to i64*
  %790 = load i64, i64* %789, align 8
  %791 = bitcast %struct.opj_mqc_state** %729 to i64*
  store i64 %790, i64* %791, align 8
  br label %792

792:                                              ; preds = %803, %783
  %793 = phi i32 [ %709, %783 ], [ %804, %803 ]
  %794 = phi i32 [ %785, %783 ], [ %796, %803 ]
  %795 = phi i32 [ %787, %783 ], [ %805, %803 ]
  %796 = shl i32 %794, 1
  %797 = shl i32 %795, 1
  %798 = add i32 %793, -1
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %800, label %803

800:                                              ; preds = %792
  store i32 %797, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %801 = load i32, i32* %609, align 8
  %802 = load i32, i32* %611, align 8
  br label %803

803:                                              ; preds = %800, %792
  %804 = phi i32 [ %802, %800 ], [ %798, %792 ]
  %805 = phi i32 [ %801, %800 ], [ %797, %792 ]
  %806 = and i32 %794, 16384
  %807 = icmp eq i32 %806, 0
  br i1 %807, label %792, label %808

808:                                              ; preds = %803, %776, %781, %737, %730
  %809 = phi i32 [ %743, %737 ], [ %733, %730 ], [ %709, %781 ], [ %777, %776 ], [ %804, %803 ]
  %810 = phi i32 [ %708, %737 ], [ %708, %730 ], [ %752, %781 ], [ %769, %776 ], [ %796, %803 ]
  %811 = phi i32 [ 0, %737 ], [ %735, %730 ], [ %782, %781 ], [ %778, %776 ], [ %805, %803 ]
  br i1 %726, label %812, label %957

812:                                              ; preds = %808
  %813 = load i32, i32* %705, align 4
  %814 = getelementptr inbounds i32, i32* %705, i64 -1
  %815 = load i32, i32* %814, align 4
  %816 = getelementptr inbounds i32, i32* %705, i64 1
  %817 = load i32, i32* %816, align 4
  %818 = and i32 %813, 170
  %819 = lshr i32 %815, 19
  %820 = and i32 %819, 1
  %821 = lshr i32 %817, 17
  %822 = and i32 %821, 4
  %823 = lshr i32 %813, 14
  %824 = and i32 %823, 16
  %825 = lshr i32 %813, 16
  %826 = and i32 %825, 64
  %827 = or i32 %826, %818
  %828 = or i32 %827, %824
  %829 = or i32 %828, %820
  %830 = or i32 %829, %822
  %831 = zext i32 %830 to i64
  %832 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %831
  %833 = load i8, i8* %832, align 1
  %834 = load i32, i32* %710, align 4
  %835 = lshr i32 %834, 31
  %836 = and i32 %834, 2147483647
  %837 = lshr i32 %836, %644
  %838 = select i1 %685, i32 %834, i32 %837
  %839 = and i32 %838, 127
  %840 = zext i32 %839 to i64
  %841 = getelementptr inbounds [128 x i16], [128 x i16]* %686, i64 0, i64 %840
  %842 = load i16, i16* %841, align 2
  %843 = sext i16 %842 to i32
  %844 = add nsw i32 %703, %843
  %845 = zext i8 %833 to i64
  %846 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %845
  br i1 %655, label %847, label %862

847:                                              ; preds = %812
  %848 = icmp eq i32 %809, -559038737
  %849 = add i32 %809, -1
  %850 = select i1 %848, i32 7, i32 %849
  %851 = shl i32 %835, %850
  %852 = add i32 %851, %811
  %853 = icmp eq i32 %850, 0
  br i1 %853, label %854, label %929

854:                                              ; preds = %847
  %855 = trunc i32 %852 to i8
  %856 = load i8*, i8** %621, align 8
  store i8 %855, i8* %856, align 1
  %857 = load i8*, i8** %621, align 8
  %858 = load i8, i8* %857, align 1
  %859 = icmp eq i8 %858, -1
  %860 = select i1 %859, i32 7, i32 8
  %861 = getelementptr inbounds i8, i8* %857, i64 1
  store i8* %861, i8** %621, align 8
  br label %929

862:                                              ; preds = %812
  %863 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %831
  %864 = load i8, i8* %863, align 1
  %865 = zext i8 %864 to i32
  %866 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %846, align 8
  %867 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %866, i64 0, i32 1
  %868 = load i32, i32* %867, align 4
  %869 = xor i32 %835, %865
  %870 = icmp eq i32 %868, %869
  %871 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %866, i64 0, i32 0
  %872 = load i32, i32* %871, align 8
  %873 = sub i32 %810, %872
  br i1 %870, label %874, label %904

874:                                              ; preds = %862
  %875 = trunc i32 %873 to i16
  %876 = icmp sgt i16 %875, -1
  br i1 %876, label %877, label %902

877:                                              ; preds = %874
  %878 = icmp ult i32 %873, %872
  %879 = select i1 %878, i32 %872, i32 %873
  %880 = select i1 %878, i32 0, i32 %872
  %881 = add i32 %880, %811
  %882 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %866, i64 0, i32 2
  %883 = bitcast %struct.opj_mqc_state** %882 to i64*
  %884 = load i64, i64* %883, align 8
  %885 = bitcast %struct.opj_mqc_state** %846 to i64*
  store i64 %884, i64* %885, align 8
  br label %886

886:                                              ; preds = %897, %877
  %887 = phi i32 [ %809, %877 ], [ %898, %897 ]
  %888 = phi i32 [ %879, %877 ], [ %890, %897 ]
  %889 = phi i32 [ %881, %877 ], [ %899, %897 ]
  %890 = shl i32 %888, 1
  %891 = shl i32 %889, 1
  %892 = add i32 %887, -1
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %894, label %897

894:                                              ; preds = %886
  store i32 %891, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %895 = load i32, i32* %609, align 8
  %896 = load i32, i32* %611, align 8
  br label %897

897:                                              ; preds = %894, %886
  %898 = phi i32 [ %896, %894 ], [ %892, %886 ]
  %899 = phi i32 [ %895, %894 ], [ %891, %886 ]
  %900 = and i32 %888, 16384
  %901 = icmp eq i32 %900, 0
  br i1 %901, label %886, label %929

902:                                              ; preds = %874
  %903 = add i32 %872, %811
  br label %929

904:                                              ; preds = %862
  %905 = icmp ult i32 %873, %872
  %906 = select i1 %905, i32 %873, i32 %872
  %907 = select i1 %905, i32 %872, i32 0
  %908 = add i32 %907, %811
  %909 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %866, i64 0, i32 3
  %910 = bitcast %struct.opj_mqc_state** %909 to i64*
  %911 = load i64, i64* %910, align 8
  %912 = bitcast %struct.opj_mqc_state** %846 to i64*
  store i64 %911, i64* %912, align 8
  br label %913

913:                                              ; preds = %924, %904
  %914 = phi i32 [ %809, %904 ], [ %925, %924 ]
  %915 = phi i32 [ %906, %904 ], [ %917, %924 ]
  %916 = phi i32 [ %908, %904 ], [ %926, %924 ]
  %917 = shl i32 %915, 1
  %918 = shl i32 %916, 1
  %919 = add i32 %914, -1
  %920 = icmp eq i32 %919, 0
  br i1 %920, label %921, label %924

921:                                              ; preds = %913
  store i32 %918, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %922 = load i32, i32* %609, align 8
  %923 = load i32, i32* %611, align 8
  br label %924

924:                                              ; preds = %921, %913
  %925 = phi i32 [ %923, %921 ], [ %919, %913 ]
  %926 = phi i32 [ %922, %921 ], [ %918, %913 ]
  %927 = and i32 %915, 16384
  %928 = icmp eq i32 %927, 0
  br i1 %928, label %913, label %929

929:                                              ; preds = %924, %897, %902, %854, %847
  %930 = phi i32 [ %860, %854 ], [ %850, %847 ], [ %809, %902 ], [ %898, %897 ], [ %925, %924 ]
  %931 = phi i32 [ %810, %854 ], [ %810, %847 ], [ %873, %902 ], [ %890, %897 ], [ %917, %924 ]
  %932 = phi i32 [ 0, %854 ], [ %852, %847 ], [ %903, %902 ], [ %899, %897 ], [ %926, %924 ]
  %933 = load i32, i32* %99, align 8
  %934 = load i32, i32* %814, align 4
  %935 = or i32 %934, 32
  store i32 %935, i32* %814, align 4
  %936 = shl nuw nsw i32 %835, 19
  %937 = load i32, i32* %705, align 4
  %938 = or i32 %936, %937
  %939 = or i32 %938, 16
  store i32 %939, i32* %705, align 4
  %940 = load i32, i32* %816, align 4
  %941 = or i32 %940, 8
  store i32 %941, i32* %816, align 4
  br i1 %622, label %942, label %957

942:                                              ; preds = %929
  %943 = add i32 %933, 2
  %944 = zext i32 %943 to i64
  %945 = sub nsw i64 0, %944
  %946 = getelementptr inbounds i32, i32* %705, i64 %945
  %947 = and i32 %834, -2147483648
  %948 = load i32, i32* %946, align 4
  %949 = or i32 %947, %948
  %950 = or i32 %949, 65536
  store i32 %950, i32* %946, align 4
  %951 = getelementptr inbounds i32, i32* %946, i64 -1
  %952 = load i32, i32* %951, align 4
  %953 = or i32 %952, 131072
  store i32 %953, i32* %951, align 4
  %954 = getelementptr inbounds i32, i32* %946, i64 1
  %955 = load i32, i32* %954, align 4
  %956 = or i32 %955, 32768
  store i32 %956, i32* %954, align 4
  br label %957

957:                                              ; preds = %942, %929, %808
  %958 = phi i32 [ %844, %942 ], [ %844, %929 ], [ %703, %808 ]
  %959 = phi i32 [ %930, %942 ], [ %930, %929 ], [ %809, %808 ]
  %960 = phi i32 [ %931, %942 ], [ %931, %929 ], [ %810, %808 ]
  %961 = phi i32 [ %932, %942 ], [ %932, %929 ], [ %811, %808 ]
  %962 = phi %struct.opj_mqc_state** [ %846, %942 ], [ %846, %929 ], [ %729, %808 ]
  %963 = load i32, i32* %705, align 4
  %964 = or i32 %963, 2097152
  store i32 %964, i32* %705, align 4
  br label %965

965:                                              ; preds = %957, %713
  %966 = phi i32 [ %703, %713 ], [ %958, %957 ]
  %967 = phi i32 [ %711, %713 ], [ %964, %957 ]
  %968 = phi i32 [ %709, %713 ], [ %959, %957 ]
  %969 = phi i32 [ %708, %713 ], [ %960, %957 ]
  %970 = phi i32 [ %707, %713 ], [ %961, %957 ]
  %971 = phi %struct.opj_mqc_state** [ %706, %713 ], [ %962, %957 ]
  %972 = getelementptr inbounds i32, i32* %710, i64 1
  %973 = and i32 %967, 16777344
  %974 = icmp ne i32 %973, 0
  %975 = and i32 %967, 3960
  %976 = icmp eq i32 %975, 0
  %977 = or i1 %974, %976
  br i1 %977, label %1211, label %978

978:                                              ; preds = %965
  %979 = lshr i32 %967, 3
  %980 = load i8*, i8** %514, align 8
  %981 = and i32 %979, 495
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds i8, i8* %980, i64 %982
  %984 = load i8, i8* %983, align 1
  %985 = load i32, i32* %972, align 4
  %986 = and i32 %985, %684
  %987 = icmp ne i32 %986, 0
  %988 = zext i1 %987 to i32
  %989 = zext i8 %984 to i64
  %990 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %989
  br i1 %655, label %991, label %1006

991:                                              ; preds = %978
  %992 = icmp eq i32 %968, -559038737
  %993 = add i32 %968, -1
  %994 = select i1 %992, i32 7, i32 %993
  %995 = shl i32 %988, %994
  %996 = add i32 %995, %970
  %997 = icmp eq i32 %994, 0
  br i1 %997, label %998, label %1069

998:                                              ; preds = %991
  %999 = trunc i32 %996 to i8
  %1000 = load i8*, i8** %621, align 8
  store i8 %999, i8* %1000, align 1
  %1001 = load i8*, i8** %621, align 8
  %1002 = load i8, i8* %1001, align 1
  %1003 = icmp eq i8 %1002, -1
  %1004 = select i1 %1003, i32 7, i32 8
  %1005 = getelementptr inbounds i8, i8* %1001, i64 1
  store i8* %1005, i8** %621, align 8
  br label %1069

1006:                                             ; preds = %978
  %1007 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %990, align 8
  %1008 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1007, i64 0, i32 1
  %1009 = load i32, i32* %1008, align 4
  %1010 = icmp eq i32 %1009, %988
  %1011 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1007, i64 0, i32 0
  %1012 = load i32, i32* %1011, align 8
  %1013 = sub i32 %969, %1012
  br i1 %1010, label %1014, label %1044

1014:                                             ; preds = %1006
  %1015 = trunc i32 %1013 to i16
  %1016 = icmp sgt i16 %1015, -1
  br i1 %1016, label %1017, label %1042

1017:                                             ; preds = %1014
  %1018 = icmp ult i32 %1013, %1012
  %1019 = select i1 %1018, i32 %1012, i32 %1013
  %1020 = select i1 %1018, i32 0, i32 %1012
  %1021 = add i32 %1020, %970
  %1022 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1007, i64 0, i32 2
  %1023 = bitcast %struct.opj_mqc_state** %1022 to i64*
  %1024 = load i64, i64* %1023, align 8
  %1025 = bitcast %struct.opj_mqc_state** %990 to i64*
  store i64 %1024, i64* %1025, align 8
  br label %1026

1026:                                             ; preds = %1037, %1017
  %1027 = phi i32 [ %968, %1017 ], [ %1038, %1037 ]
  %1028 = phi i32 [ %1019, %1017 ], [ %1030, %1037 ]
  %1029 = phi i32 [ %1021, %1017 ], [ %1039, %1037 ]
  %1030 = shl i32 %1028, 1
  %1031 = shl i32 %1029, 1
  %1032 = add i32 %1027, -1
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1034, label %1037

1034:                                             ; preds = %1026
  store i32 %1031, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1035 = load i32, i32* %609, align 8
  %1036 = load i32, i32* %611, align 8
  br label %1037

1037:                                             ; preds = %1034, %1026
  %1038 = phi i32 [ %1036, %1034 ], [ %1032, %1026 ]
  %1039 = phi i32 [ %1035, %1034 ], [ %1031, %1026 ]
  %1040 = and i32 %1028, 16384
  %1041 = icmp eq i32 %1040, 0
  br i1 %1041, label %1026, label %1069

1042:                                             ; preds = %1014
  %1043 = add i32 %1012, %970
  br label %1069

1044:                                             ; preds = %1006
  %1045 = icmp ult i32 %1013, %1012
  %1046 = select i1 %1045, i32 %1013, i32 %1012
  %1047 = select i1 %1045, i32 %1012, i32 0
  %1048 = add i32 %1047, %970
  %1049 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1007, i64 0, i32 3
  %1050 = bitcast %struct.opj_mqc_state** %1049 to i64*
  %1051 = load i64, i64* %1050, align 8
  %1052 = bitcast %struct.opj_mqc_state** %990 to i64*
  store i64 %1051, i64* %1052, align 8
  br label %1053

1053:                                             ; preds = %1064, %1044
  %1054 = phi i32 [ %968, %1044 ], [ %1065, %1064 ]
  %1055 = phi i32 [ %1046, %1044 ], [ %1057, %1064 ]
  %1056 = phi i32 [ %1048, %1044 ], [ %1066, %1064 ]
  %1057 = shl i32 %1055, 1
  %1058 = shl i32 %1056, 1
  %1059 = add i32 %1054, -1
  %1060 = icmp eq i32 %1059, 0
  br i1 %1060, label %1061, label %1064

1061:                                             ; preds = %1053
  store i32 %1058, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1062 = load i32, i32* %609, align 8
  %1063 = load i32, i32* %611, align 8
  br label %1064

1064:                                             ; preds = %1061, %1053
  %1065 = phi i32 [ %1063, %1061 ], [ %1059, %1053 ]
  %1066 = phi i32 [ %1062, %1061 ], [ %1058, %1053 ]
  %1067 = and i32 %1055, 16384
  %1068 = icmp eq i32 %1067, 0
  br i1 %1068, label %1053, label %1069

1069:                                             ; preds = %1064, %1037, %1042, %998, %991
  %1070 = phi i32 [ %1004, %998 ], [ %994, %991 ], [ %968, %1042 ], [ %1038, %1037 ], [ %1065, %1064 ]
  %1071 = phi i32 [ %969, %998 ], [ %969, %991 ], [ %1013, %1042 ], [ %1030, %1037 ], [ %1057, %1064 ]
  %1072 = phi i32 [ 0, %998 ], [ %996, %991 ], [ %1043, %1042 ], [ %1039, %1037 ], [ %1066, %1064 ]
  %1073 = load i32, i32* %705, align 4
  br i1 %987, label %1074, label %1203

1074:                                             ; preds = %1069
  %1075 = getelementptr inbounds i32, i32* %705, i64 -1
  %1076 = load i32, i32* %1075, align 4
  %1077 = getelementptr inbounds i32, i32* %705, i64 1
  %1078 = load i32, i32* %1077, align 4
  %1079 = lshr i32 %1073, 3
  %1080 = and i32 %1079, 170
  %1081 = lshr i32 %1076, 22
  %1082 = and i32 %1081, 1
  %1083 = lshr i32 %1078, 20
  %1084 = and i32 %1083, 4
  %1085 = lshr i32 %1073, 15
  %1086 = and i32 %1085, 16
  %1087 = lshr i32 %1073, 19
  %1088 = and i32 %1087, 64
  %1089 = or i32 %1088, %1080
  %1090 = or i32 %1089, %1086
  %1091 = or i32 %1090, %1082
  %1092 = or i32 %1091, %1084
  %1093 = zext i32 %1092 to i64
  %1094 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1093
  %1095 = load i8, i8* %1094, align 1
  %1096 = load i32, i32* %972, align 4
  %1097 = lshr i32 %1096, 31
  %1098 = and i32 %1096, 2147483647
  %1099 = lshr i32 %1098, %644
  %1100 = select i1 %685, i32 %1096, i32 %1099
  %1101 = and i32 %1100, 127
  %1102 = zext i32 %1101 to i64
  %1103 = getelementptr inbounds [128 x i16], [128 x i16]* %687, i64 0, i64 %1102
  %1104 = load i16, i16* %1103, align 2
  %1105 = sext i16 %1104 to i32
  %1106 = add nsw i32 %966, %1105
  %1107 = zext i8 %1095 to i64
  %1108 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1107
  br i1 %655, label %1109, label %1124

1109:                                             ; preds = %1074
  %1110 = icmp eq i32 %1070, -559038737
  %1111 = add i32 %1070, -1
  %1112 = select i1 %1110, i32 7, i32 %1111
  %1113 = shl i32 %1097, %1112
  %1114 = add i32 %1113, %1072
  %1115 = icmp eq i32 %1112, 0
  br i1 %1115, label %1116, label %1191

1116:                                             ; preds = %1109
  %1117 = trunc i32 %1114 to i8
  %1118 = load i8*, i8** %621, align 8
  store i8 %1117, i8* %1118, align 1
  %1119 = load i8*, i8** %621, align 8
  %1120 = load i8, i8* %1119, align 1
  %1121 = icmp eq i8 %1120, -1
  %1122 = select i1 %1121, i32 7, i32 8
  %1123 = getelementptr inbounds i8, i8* %1119, i64 1
  store i8* %1123, i8** %621, align 8
  br label %1191

1124:                                             ; preds = %1074
  %1125 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1093
  %1126 = load i8, i8* %1125, align 1
  %1127 = zext i8 %1126 to i32
  %1128 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1108, align 8
  %1129 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1128, i64 0, i32 1
  %1130 = load i32, i32* %1129, align 4
  %1131 = xor i32 %1097, %1127
  %1132 = icmp eq i32 %1130, %1131
  %1133 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1128, i64 0, i32 0
  %1134 = load i32, i32* %1133, align 8
  %1135 = sub i32 %1071, %1134
  br i1 %1132, label %1136, label %1166

1136:                                             ; preds = %1124
  %1137 = trunc i32 %1135 to i16
  %1138 = icmp sgt i16 %1137, -1
  br i1 %1138, label %1139, label %1164

1139:                                             ; preds = %1136
  %1140 = icmp ult i32 %1135, %1134
  %1141 = select i1 %1140, i32 %1134, i32 %1135
  %1142 = select i1 %1140, i32 0, i32 %1134
  %1143 = add i32 %1142, %1072
  %1144 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1128, i64 0, i32 2
  %1145 = bitcast %struct.opj_mqc_state** %1144 to i64*
  %1146 = load i64, i64* %1145, align 8
  %1147 = bitcast %struct.opj_mqc_state** %1108 to i64*
  store i64 %1146, i64* %1147, align 8
  br label %1148

1148:                                             ; preds = %1159, %1139
  %1149 = phi i32 [ %1070, %1139 ], [ %1160, %1159 ]
  %1150 = phi i32 [ %1141, %1139 ], [ %1152, %1159 ]
  %1151 = phi i32 [ %1143, %1139 ], [ %1161, %1159 ]
  %1152 = shl i32 %1150, 1
  %1153 = shl i32 %1151, 1
  %1154 = add i32 %1149, -1
  %1155 = icmp eq i32 %1154, 0
  br i1 %1155, label %1156, label %1159

1156:                                             ; preds = %1148
  store i32 %1153, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1157 = load i32, i32* %609, align 8
  %1158 = load i32, i32* %611, align 8
  br label %1159

1159:                                             ; preds = %1156, %1148
  %1160 = phi i32 [ %1158, %1156 ], [ %1154, %1148 ]
  %1161 = phi i32 [ %1157, %1156 ], [ %1153, %1148 ]
  %1162 = and i32 %1150, 16384
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %1148, label %1191

1164:                                             ; preds = %1136
  %1165 = add i32 %1134, %1072
  br label %1191

1166:                                             ; preds = %1124
  %1167 = icmp ult i32 %1135, %1134
  %1168 = select i1 %1167, i32 %1135, i32 %1134
  %1169 = select i1 %1167, i32 %1134, i32 0
  %1170 = add i32 %1169, %1072
  %1171 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1128, i64 0, i32 3
  %1172 = bitcast %struct.opj_mqc_state** %1171 to i64*
  %1173 = load i64, i64* %1172, align 8
  %1174 = bitcast %struct.opj_mqc_state** %1108 to i64*
  store i64 %1173, i64* %1174, align 8
  br label %1175

1175:                                             ; preds = %1186, %1166
  %1176 = phi i32 [ %1070, %1166 ], [ %1187, %1186 ]
  %1177 = phi i32 [ %1168, %1166 ], [ %1179, %1186 ]
  %1178 = phi i32 [ %1170, %1166 ], [ %1188, %1186 ]
  %1179 = shl i32 %1177, 1
  %1180 = shl i32 %1178, 1
  %1181 = add i32 %1176, -1
  %1182 = icmp eq i32 %1181, 0
  br i1 %1182, label %1183, label %1186

1183:                                             ; preds = %1175
  store i32 %1180, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1184 = load i32, i32* %609, align 8
  %1185 = load i32, i32* %611, align 8
  br label %1186

1186:                                             ; preds = %1183, %1175
  %1187 = phi i32 [ %1185, %1183 ], [ %1181, %1175 ]
  %1188 = phi i32 [ %1184, %1183 ], [ %1180, %1175 ]
  %1189 = and i32 %1177, 16384
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %1175, label %1191

1191:                                             ; preds = %1186, %1159, %1164, %1116, %1109
  %1192 = phi i32 [ %1122, %1116 ], [ %1112, %1109 ], [ %1070, %1164 ], [ %1160, %1159 ], [ %1187, %1186 ]
  %1193 = phi i32 [ %1071, %1116 ], [ %1071, %1109 ], [ %1135, %1164 ], [ %1152, %1159 ], [ %1179, %1186 ]
  %1194 = phi i32 [ 0, %1116 ], [ %1114, %1109 ], [ %1165, %1164 ], [ %1161, %1159 ], [ %1188, %1186 ]
  %1195 = load i32, i32* %1075, align 4
  %1196 = or i32 %1195, 256
  store i32 %1196, i32* %1075, align 4
  %1197 = shl nuw nsw i32 %1097, 22
  %1198 = load i32, i32* %705, align 4
  %1199 = or i32 %1197, %1198
  %1200 = or i32 %1199, 128
  store i32 %1200, i32* %705, align 4
  %1201 = load i32, i32* %1077, align 4
  %1202 = or i32 %1201, 64
  store i32 %1202, i32* %1077, align 4
  br label %1203

1203:                                             ; preds = %1191, %1069
  %1204 = phi i32 [ %1106, %1191 ], [ %966, %1069 ]
  %1205 = phi i32 [ %1200, %1191 ], [ %1073, %1069 ]
  %1206 = phi i32 [ %1192, %1191 ], [ %1070, %1069 ]
  %1207 = phi i32 [ %1193, %1191 ], [ %1071, %1069 ]
  %1208 = phi i32 [ %1194, %1191 ], [ %1072, %1069 ]
  %1209 = phi %struct.opj_mqc_state** [ %1108, %1191 ], [ %990, %1069 ]
  %1210 = or i32 %1205, 16777216
  store i32 %1210, i32* %705, align 4
  br label %1211

1211:                                             ; preds = %1203, %965
  %1212 = phi i32 [ %966, %965 ], [ %1204, %1203 ]
  %1213 = phi i32 [ %967, %965 ], [ %1210, %1203 ]
  %1214 = phi i32 [ %968, %965 ], [ %1206, %1203 ]
  %1215 = phi i32 [ %969, %965 ], [ %1207, %1203 ]
  %1216 = phi i32 [ %970, %965 ], [ %1208, %1203 ]
  %1217 = phi %struct.opj_mqc_state** [ %971, %965 ], [ %1209, %1203 ]
  %1218 = getelementptr inbounds i32, i32* %710, i64 2
  %1219 = and i32 %1213, 134218752
  %1220 = icmp ne i32 %1219, 0
  %1221 = and i32 %1213, 31680
  %1222 = icmp eq i32 %1221, 0
  %1223 = or i1 %1220, %1222
  br i1 %1223, label %1457, label %1224

1224:                                             ; preds = %1211
  %1225 = lshr i32 %1213, 6
  %1226 = load i8*, i8** %514, align 8
  %1227 = and i32 %1225, 495
  %1228 = zext i32 %1227 to i64
  %1229 = getelementptr inbounds i8, i8* %1226, i64 %1228
  %1230 = load i8, i8* %1229, align 1
  %1231 = load i32, i32* %1218, align 4
  %1232 = and i32 %1231, %684
  %1233 = icmp ne i32 %1232, 0
  %1234 = zext i1 %1233 to i32
  %1235 = zext i8 %1230 to i64
  %1236 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1235
  br i1 %655, label %1237, label %1252

1237:                                             ; preds = %1224
  %1238 = icmp eq i32 %1214, -559038737
  %1239 = add i32 %1214, -1
  %1240 = select i1 %1238, i32 7, i32 %1239
  %1241 = shl i32 %1234, %1240
  %1242 = add i32 %1241, %1216
  %1243 = icmp eq i32 %1240, 0
  br i1 %1243, label %1244, label %1315

1244:                                             ; preds = %1237
  %1245 = trunc i32 %1242 to i8
  %1246 = load i8*, i8** %621, align 8
  store i8 %1245, i8* %1246, align 1
  %1247 = load i8*, i8** %621, align 8
  %1248 = load i8, i8* %1247, align 1
  %1249 = icmp eq i8 %1248, -1
  %1250 = select i1 %1249, i32 7, i32 8
  %1251 = getelementptr inbounds i8, i8* %1247, i64 1
  store i8* %1251, i8** %621, align 8
  br label %1315

1252:                                             ; preds = %1224
  %1253 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1236, align 8
  %1254 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1253, i64 0, i32 1
  %1255 = load i32, i32* %1254, align 4
  %1256 = icmp eq i32 %1255, %1234
  %1257 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1253, i64 0, i32 0
  %1258 = load i32, i32* %1257, align 8
  %1259 = sub i32 %1215, %1258
  br i1 %1256, label %1260, label %1290

1260:                                             ; preds = %1252
  %1261 = trunc i32 %1259 to i16
  %1262 = icmp sgt i16 %1261, -1
  br i1 %1262, label %1263, label %1288

1263:                                             ; preds = %1260
  %1264 = icmp ult i32 %1259, %1258
  %1265 = select i1 %1264, i32 %1258, i32 %1259
  %1266 = select i1 %1264, i32 0, i32 %1258
  %1267 = add i32 %1266, %1216
  %1268 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1253, i64 0, i32 2
  %1269 = bitcast %struct.opj_mqc_state** %1268 to i64*
  %1270 = load i64, i64* %1269, align 8
  %1271 = bitcast %struct.opj_mqc_state** %1236 to i64*
  store i64 %1270, i64* %1271, align 8
  br label %1272

1272:                                             ; preds = %1283, %1263
  %1273 = phi i32 [ %1214, %1263 ], [ %1284, %1283 ]
  %1274 = phi i32 [ %1265, %1263 ], [ %1276, %1283 ]
  %1275 = phi i32 [ %1267, %1263 ], [ %1285, %1283 ]
  %1276 = shl i32 %1274, 1
  %1277 = shl i32 %1275, 1
  %1278 = add i32 %1273, -1
  %1279 = icmp eq i32 %1278, 0
  br i1 %1279, label %1280, label %1283

1280:                                             ; preds = %1272
  store i32 %1277, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1281 = load i32, i32* %609, align 8
  %1282 = load i32, i32* %611, align 8
  br label %1283

1283:                                             ; preds = %1280, %1272
  %1284 = phi i32 [ %1282, %1280 ], [ %1278, %1272 ]
  %1285 = phi i32 [ %1281, %1280 ], [ %1277, %1272 ]
  %1286 = and i32 %1274, 16384
  %1287 = icmp eq i32 %1286, 0
  br i1 %1287, label %1272, label %1315

1288:                                             ; preds = %1260
  %1289 = add i32 %1258, %1216
  br label %1315

1290:                                             ; preds = %1252
  %1291 = icmp ult i32 %1259, %1258
  %1292 = select i1 %1291, i32 %1259, i32 %1258
  %1293 = select i1 %1291, i32 %1258, i32 0
  %1294 = add i32 %1293, %1216
  %1295 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1253, i64 0, i32 3
  %1296 = bitcast %struct.opj_mqc_state** %1295 to i64*
  %1297 = load i64, i64* %1296, align 8
  %1298 = bitcast %struct.opj_mqc_state** %1236 to i64*
  store i64 %1297, i64* %1298, align 8
  br label %1299

1299:                                             ; preds = %1310, %1290
  %1300 = phi i32 [ %1214, %1290 ], [ %1311, %1310 ]
  %1301 = phi i32 [ %1292, %1290 ], [ %1303, %1310 ]
  %1302 = phi i32 [ %1294, %1290 ], [ %1312, %1310 ]
  %1303 = shl i32 %1301, 1
  %1304 = shl i32 %1302, 1
  %1305 = add i32 %1300, -1
  %1306 = icmp eq i32 %1305, 0
  br i1 %1306, label %1307, label %1310

1307:                                             ; preds = %1299
  store i32 %1304, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1308 = load i32, i32* %609, align 8
  %1309 = load i32, i32* %611, align 8
  br label %1310

1310:                                             ; preds = %1307, %1299
  %1311 = phi i32 [ %1309, %1307 ], [ %1305, %1299 ]
  %1312 = phi i32 [ %1308, %1307 ], [ %1304, %1299 ]
  %1313 = and i32 %1301, 16384
  %1314 = icmp eq i32 %1313, 0
  br i1 %1314, label %1299, label %1315

1315:                                             ; preds = %1310, %1283, %1288, %1244, %1237
  %1316 = phi i32 [ %1250, %1244 ], [ %1240, %1237 ], [ %1214, %1288 ], [ %1284, %1283 ], [ %1311, %1310 ]
  %1317 = phi i32 [ %1215, %1244 ], [ %1215, %1237 ], [ %1259, %1288 ], [ %1276, %1283 ], [ %1303, %1310 ]
  %1318 = phi i32 [ 0, %1244 ], [ %1242, %1237 ], [ %1289, %1288 ], [ %1285, %1283 ], [ %1312, %1310 ]
  %1319 = load i32, i32* %705, align 4
  br i1 %1233, label %1320, label %1449

1320:                                             ; preds = %1315
  %1321 = getelementptr inbounds i32, i32* %705, i64 -1
  %1322 = load i32, i32* %1321, align 4
  %1323 = getelementptr inbounds i32, i32* %705, i64 1
  %1324 = load i32, i32* %1323, align 4
  %1325 = lshr i32 %1319, 6
  %1326 = and i32 %1325, 170
  %1327 = lshr i32 %1322, 25
  %1328 = and i32 %1327, 1
  %1329 = lshr i32 %1324, 23
  %1330 = and i32 %1329, 4
  %1331 = lshr i32 %1319, 18
  %1332 = and i32 %1331, 16
  %1333 = lshr i32 %1319, 22
  %1334 = and i32 %1333, 64
  %1335 = or i32 %1334, %1326
  %1336 = or i32 %1335, %1332
  %1337 = or i32 %1336, %1328
  %1338 = or i32 %1337, %1330
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1339
  %1341 = load i8, i8* %1340, align 1
  %1342 = load i32, i32* %1218, align 4
  %1343 = lshr i32 %1342, 31
  %1344 = and i32 %1342, 2147483647
  %1345 = lshr i32 %1344, %644
  %1346 = select i1 %685, i32 %1342, i32 %1345
  %1347 = and i32 %1346, 127
  %1348 = zext i32 %1347 to i64
  %1349 = getelementptr inbounds [128 x i16], [128 x i16]* %688, i64 0, i64 %1348
  %1350 = load i16, i16* %1349, align 2
  %1351 = sext i16 %1350 to i32
  %1352 = add nsw i32 %1212, %1351
  %1353 = zext i8 %1341 to i64
  %1354 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1353
  br i1 %655, label %1355, label %1370

1355:                                             ; preds = %1320
  %1356 = icmp eq i32 %1316, -559038737
  %1357 = add i32 %1316, -1
  %1358 = select i1 %1356, i32 7, i32 %1357
  %1359 = shl i32 %1343, %1358
  %1360 = add i32 %1359, %1318
  %1361 = icmp eq i32 %1358, 0
  br i1 %1361, label %1362, label %1437

1362:                                             ; preds = %1355
  %1363 = trunc i32 %1360 to i8
  %1364 = load i8*, i8** %621, align 8
  store i8 %1363, i8* %1364, align 1
  %1365 = load i8*, i8** %621, align 8
  %1366 = load i8, i8* %1365, align 1
  %1367 = icmp eq i8 %1366, -1
  %1368 = select i1 %1367, i32 7, i32 8
  %1369 = getelementptr inbounds i8, i8* %1365, i64 1
  store i8* %1369, i8** %621, align 8
  br label %1437

1370:                                             ; preds = %1320
  %1371 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1339
  %1372 = load i8, i8* %1371, align 1
  %1373 = zext i8 %1372 to i32
  %1374 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1354, align 8
  %1375 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1374, i64 0, i32 1
  %1376 = load i32, i32* %1375, align 4
  %1377 = xor i32 %1343, %1373
  %1378 = icmp eq i32 %1376, %1377
  %1379 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1374, i64 0, i32 0
  %1380 = load i32, i32* %1379, align 8
  %1381 = sub i32 %1317, %1380
  br i1 %1378, label %1382, label %1412

1382:                                             ; preds = %1370
  %1383 = trunc i32 %1381 to i16
  %1384 = icmp sgt i16 %1383, -1
  br i1 %1384, label %1385, label %1410

1385:                                             ; preds = %1382
  %1386 = icmp ult i32 %1381, %1380
  %1387 = select i1 %1386, i32 %1380, i32 %1381
  %1388 = select i1 %1386, i32 0, i32 %1380
  %1389 = add i32 %1388, %1318
  %1390 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1374, i64 0, i32 2
  %1391 = bitcast %struct.opj_mqc_state** %1390 to i64*
  %1392 = load i64, i64* %1391, align 8
  %1393 = bitcast %struct.opj_mqc_state** %1354 to i64*
  store i64 %1392, i64* %1393, align 8
  br label %1394

1394:                                             ; preds = %1405, %1385
  %1395 = phi i32 [ %1316, %1385 ], [ %1406, %1405 ]
  %1396 = phi i32 [ %1387, %1385 ], [ %1398, %1405 ]
  %1397 = phi i32 [ %1389, %1385 ], [ %1407, %1405 ]
  %1398 = shl i32 %1396, 1
  %1399 = shl i32 %1397, 1
  %1400 = add i32 %1395, -1
  %1401 = icmp eq i32 %1400, 0
  br i1 %1401, label %1402, label %1405

1402:                                             ; preds = %1394
  store i32 %1399, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1403 = load i32, i32* %609, align 8
  %1404 = load i32, i32* %611, align 8
  br label %1405

1405:                                             ; preds = %1402, %1394
  %1406 = phi i32 [ %1404, %1402 ], [ %1400, %1394 ]
  %1407 = phi i32 [ %1403, %1402 ], [ %1399, %1394 ]
  %1408 = and i32 %1396, 16384
  %1409 = icmp eq i32 %1408, 0
  br i1 %1409, label %1394, label %1437

1410:                                             ; preds = %1382
  %1411 = add i32 %1380, %1318
  br label %1437

1412:                                             ; preds = %1370
  %1413 = icmp ult i32 %1381, %1380
  %1414 = select i1 %1413, i32 %1381, i32 %1380
  %1415 = select i1 %1413, i32 %1380, i32 0
  %1416 = add i32 %1415, %1318
  %1417 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1374, i64 0, i32 3
  %1418 = bitcast %struct.opj_mqc_state** %1417 to i64*
  %1419 = load i64, i64* %1418, align 8
  %1420 = bitcast %struct.opj_mqc_state** %1354 to i64*
  store i64 %1419, i64* %1420, align 8
  br label %1421

1421:                                             ; preds = %1432, %1412
  %1422 = phi i32 [ %1316, %1412 ], [ %1433, %1432 ]
  %1423 = phi i32 [ %1414, %1412 ], [ %1425, %1432 ]
  %1424 = phi i32 [ %1416, %1412 ], [ %1434, %1432 ]
  %1425 = shl i32 %1423, 1
  %1426 = shl i32 %1424, 1
  %1427 = add i32 %1422, -1
  %1428 = icmp eq i32 %1427, 0
  br i1 %1428, label %1429, label %1432

1429:                                             ; preds = %1421
  store i32 %1426, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1430 = load i32, i32* %609, align 8
  %1431 = load i32, i32* %611, align 8
  br label %1432

1432:                                             ; preds = %1429, %1421
  %1433 = phi i32 [ %1431, %1429 ], [ %1427, %1421 ]
  %1434 = phi i32 [ %1430, %1429 ], [ %1426, %1421 ]
  %1435 = and i32 %1423, 16384
  %1436 = icmp eq i32 %1435, 0
  br i1 %1436, label %1421, label %1437

1437:                                             ; preds = %1432, %1405, %1410, %1362, %1355
  %1438 = phi i32 [ %1368, %1362 ], [ %1358, %1355 ], [ %1316, %1410 ], [ %1406, %1405 ], [ %1433, %1432 ]
  %1439 = phi i32 [ %1317, %1362 ], [ %1317, %1355 ], [ %1381, %1410 ], [ %1398, %1405 ], [ %1425, %1432 ]
  %1440 = phi i32 [ 0, %1362 ], [ %1360, %1355 ], [ %1411, %1410 ], [ %1407, %1405 ], [ %1434, %1432 ]
  %1441 = load i32, i32* %1321, align 4
  %1442 = or i32 %1441, 2048
  store i32 %1442, i32* %1321, align 4
  %1443 = shl nuw nsw i32 %1343, 25
  %1444 = load i32, i32* %705, align 4
  %1445 = or i32 %1443, %1444
  %1446 = or i32 %1445, 1024
  store i32 %1446, i32* %705, align 4
  %1447 = load i32, i32* %1323, align 4
  %1448 = or i32 %1447, 512
  store i32 %1448, i32* %1323, align 4
  br label %1449

1449:                                             ; preds = %1437, %1315
  %1450 = phi i32 [ %1352, %1437 ], [ %1212, %1315 ]
  %1451 = phi i32 [ %1446, %1437 ], [ %1319, %1315 ]
  %1452 = phi i32 [ %1438, %1437 ], [ %1316, %1315 ]
  %1453 = phi i32 [ %1439, %1437 ], [ %1317, %1315 ]
  %1454 = phi i32 [ %1440, %1437 ], [ %1318, %1315 ]
  %1455 = phi %struct.opj_mqc_state** [ %1354, %1437 ], [ %1236, %1315 ]
  %1456 = or i32 %1451, 134217728
  store i32 %1456, i32* %705, align 4
  br label %1457

1457:                                             ; preds = %1449, %1211
  %1458 = phi i32 [ %1212, %1211 ], [ %1450, %1449 ]
  %1459 = phi i32 [ %1213, %1211 ], [ %1456, %1449 ]
  %1460 = phi i32 [ %1214, %1211 ], [ %1452, %1449 ]
  %1461 = phi i32 [ %1215, %1211 ], [ %1453, %1449 ]
  %1462 = phi i32 [ %1216, %1211 ], [ %1454, %1449 ]
  %1463 = phi %struct.opj_mqc_state** [ %1217, %1211 ], [ %1455, %1449 ]
  %1464 = getelementptr inbounds i32, i32* %710, i64 3
  %1465 = and i32 %1459, 1073750016
  %1466 = icmp ne i32 %1465, 0
  %1467 = and i32 %1459, 253440
  %1468 = icmp eq i32 %1467, 0
  %1469 = or i1 %1466, %1468
  br i1 %1469, label %1717, label %1470

1470:                                             ; preds = %1457
  %1471 = lshr i32 %1459, 9
  %1472 = load i8*, i8** %514, align 8
  %1473 = and i32 %1471, 495
  %1474 = zext i32 %1473 to i64
  %1475 = getelementptr inbounds i8, i8* %1472, i64 %1474
  %1476 = load i8, i8* %1475, align 1
  %1477 = load i32, i32* %1464, align 4
  %1478 = and i32 %1477, %684
  %1479 = icmp ne i32 %1478, 0
  %1480 = zext i1 %1479 to i32
  %1481 = zext i8 %1476 to i64
  %1482 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1481
  br i1 %655, label %1483, label %1498

1483:                                             ; preds = %1470
  %1484 = icmp eq i32 %1460, -559038737
  %1485 = add i32 %1460, -1
  %1486 = select i1 %1484, i32 7, i32 %1485
  %1487 = shl i32 %1480, %1486
  %1488 = add i32 %1487, %1462
  %1489 = icmp eq i32 %1486, 0
  br i1 %1489, label %1490, label %1561

1490:                                             ; preds = %1483
  %1491 = trunc i32 %1488 to i8
  %1492 = load i8*, i8** %621, align 8
  store i8 %1491, i8* %1492, align 1
  %1493 = load i8*, i8** %621, align 8
  %1494 = load i8, i8* %1493, align 1
  %1495 = icmp eq i8 %1494, -1
  %1496 = select i1 %1495, i32 7, i32 8
  %1497 = getelementptr inbounds i8, i8* %1493, i64 1
  store i8* %1497, i8** %621, align 8
  br label %1561

1498:                                             ; preds = %1470
  %1499 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1482, align 8
  %1500 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1499, i64 0, i32 1
  %1501 = load i32, i32* %1500, align 4
  %1502 = icmp eq i32 %1501, %1480
  %1503 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1499, i64 0, i32 0
  %1504 = load i32, i32* %1503, align 8
  %1505 = sub i32 %1461, %1504
  br i1 %1502, label %1506, label %1536

1506:                                             ; preds = %1498
  %1507 = trunc i32 %1505 to i16
  %1508 = icmp sgt i16 %1507, -1
  br i1 %1508, label %1509, label %1534

1509:                                             ; preds = %1506
  %1510 = icmp ult i32 %1505, %1504
  %1511 = select i1 %1510, i32 %1504, i32 %1505
  %1512 = select i1 %1510, i32 0, i32 %1504
  %1513 = add i32 %1512, %1462
  %1514 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1499, i64 0, i32 2
  %1515 = bitcast %struct.opj_mqc_state** %1514 to i64*
  %1516 = load i64, i64* %1515, align 8
  %1517 = bitcast %struct.opj_mqc_state** %1482 to i64*
  store i64 %1516, i64* %1517, align 8
  br label %1518

1518:                                             ; preds = %1529, %1509
  %1519 = phi i32 [ %1460, %1509 ], [ %1530, %1529 ]
  %1520 = phi i32 [ %1511, %1509 ], [ %1522, %1529 ]
  %1521 = phi i32 [ %1513, %1509 ], [ %1531, %1529 ]
  %1522 = shl i32 %1520, 1
  %1523 = shl i32 %1521, 1
  %1524 = add i32 %1519, -1
  %1525 = icmp eq i32 %1524, 0
  br i1 %1525, label %1526, label %1529

1526:                                             ; preds = %1518
  store i32 %1523, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1527 = load i32, i32* %609, align 8
  %1528 = load i32, i32* %611, align 8
  br label %1529

1529:                                             ; preds = %1526, %1518
  %1530 = phi i32 [ %1528, %1526 ], [ %1524, %1518 ]
  %1531 = phi i32 [ %1527, %1526 ], [ %1523, %1518 ]
  %1532 = and i32 %1520, 16384
  %1533 = icmp eq i32 %1532, 0
  br i1 %1533, label %1518, label %1561

1534:                                             ; preds = %1506
  %1535 = add i32 %1504, %1462
  br label %1561

1536:                                             ; preds = %1498
  %1537 = icmp ult i32 %1505, %1504
  %1538 = select i1 %1537, i32 %1505, i32 %1504
  %1539 = select i1 %1537, i32 %1504, i32 0
  %1540 = add i32 %1539, %1462
  %1541 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1499, i64 0, i32 3
  %1542 = bitcast %struct.opj_mqc_state** %1541 to i64*
  %1543 = load i64, i64* %1542, align 8
  %1544 = bitcast %struct.opj_mqc_state** %1482 to i64*
  store i64 %1543, i64* %1544, align 8
  br label %1545

1545:                                             ; preds = %1556, %1536
  %1546 = phi i32 [ %1460, %1536 ], [ %1557, %1556 ]
  %1547 = phi i32 [ %1538, %1536 ], [ %1549, %1556 ]
  %1548 = phi i32 [ %1540, %1536 ], [ %1558, %1556 ]
  %1549 = shl i32 %1547, 1
  %1550 = shl i32 %1548, 1
  %1551 = add i32 %1546, -1
  %1552 = icmp eq i32 %1551, 0
  br i1 %1552, label %1553, label %1556

1553:                                             ; preds = %1545
  store i32 %1550, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1554 = load i32, i32* %609, align 8
  %1555 = load i32, i32* %611, align 8
  br label %1556

1556:                                             ; preds = %1553, %1545
  %1557 = phi i32 [ %1555, %1553 ], [ %1551, %1545 ]
  %1558 = phi i32 [ %1554, %1553 ], [ %1550, %1545 ]
  %1559 = and i32 %1547, 16384
  %1560 = icmp eq i32 %1559, 0
  br i1 %1560, label %1545, label %1561

1561:                                             ; preds = %1556, %1529, %1534, %1490, %1483
  %1562 = phi i32 [ %1496, %1490 ], [ %1486, %1483 ], [ %1460, %1534 ], [ %1530, %1529 ], [ %1557, %1556 ]
  %1563 = phi i32 [ %1461, %1490 ], [ %1461, %1483 ], [ %1505, %1534 ], [ %1522, %1529 ], [ %1549, %1556 ]
  %1564 = phi i32 [ 0, %1490 ], [ %1488, %1483 ], [ %1535, %1534 ], [ %1531, %1529 ], [ %1558, %1556 ]
  br i1 %1479, label %1565, label %1709

1565:                                             ; preds = %1561
  %1566 = load i32, i32* %705, align 4
  %1567 = getelementptr inbounds i32, i32* %705, i64 -1
  %1568 = load i32, i32* %1567, align 4
  %1569 = getelementptr inbounds i32, i32* %705, i64 1
  %1570 = load i32, i32* %1569, align 4
  %1571 = lshr i32 %1566, 9
  %1572 = and i32 %1571, 170
  %1573 = lshr i32 %1568, 28
  %1574 = and i32 %1573, 1
  %1575 = lshr i32 %1570, 26
  %1576 = and i32 %1575, 4
  %1577 = lshr i32 %1566, 21
  %1578 = and i32 %1577, 16
  %1579 = lshr i32 %1566, 25
  %1580 = and i32 %1579, 64
  %1581 = or i32 %1580, %1572
  %1582 = or i32 %1581, %1578
  %1583 = or i32 %1582, %1574
  %1584 = or i32 %1583, %1576
  %1585 = zext i32 %1584 to i64
  %1586 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1585
  %1587 = load i8, i8* %1586, align 1
  %1588 = load i32, i32* %1464, align 4
  %1589 = lshr i32 %1588, 31
  %1590 = and i32 %1588, 2147483647
  %1591 = lshr i32 %1590, %644
  %1592 = select i1 %685, i32 %1588, i32 %1591
  %1593 = and i32 %1592, 127
  %1594 = zext i32 %1593 to i64
  %1595 = getelementptr inbounds [128 x i16], [128 x i16]* %689, i64 0, i64 %1594
  %1596 = load i16, i16* %1595, align 2
  %1597 = sext i16 %1596 to i32
  %1598 = add nsw i32 %1458, %1597
  %1599 = zext i8 %1587 to i64
  %1600 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1599
  br i1 %655, label %1601, label %1616

1601:                                             ; preds = %1565
  %1602 = icmp eq i32 %1562, -559038737
  %1603 = add i32 %1562, -1
  %1604 = select i1 %1602, i32 7, i32 %1603
  %1605 = shl i32 %1589, %1604
  %1606 = add i32 %1605, %1564
  %1607 = icmp eq i32 %1604, 0
  br i1 %1607, label %1608, label %1683

1608:                                             ; preds = %1601
  %1609 = trunc i32 %1606 to i8
  %1610 = load i8*, i8** %621, align 8
  store i8 %1609, i8* %1610, align 1
  %1611 = load i8*, i8** %621, align 8
  %1612 = load i8, i8* %1611, align 1
  %1613 = icmp eq i8 %1612, -1
  %1614 = select i1 %1613, i32 7, i32 8
  %1615 = getelementptr inbounds i8, i8* %1611, i64 1
  store i8* %1615, i8** %621, align 8
  br label %1683

1616:                                             ; preds = %1565
  %1617 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1585
  %1618 = load i8, i8* %1617, align 1
  %1619 = zext i8 %1618 to i32
  %1620 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1600, align 8
  %1621 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1620, i64 0, i32 1
  %1622 = load i32, i32* %1621, align 4
  %1623 = xor i32 %1589, %1619
  %1624 = icmp eq i32 %1622, %1623
  %1625 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1620, i64 0, i32 0
  %1626 = load i32, i32* %1625, align 8
  %1627 = sub i32 %1563, %1626
  br i1 %1624, label %1628, label %1658

1628:                                             ; preds = %1616
  %1629 = trunc i32 %1627 to i16
  %1630 = icmp sgt i16 %1629, -1
  br i1 %1630, label %1631, label %1656

1631:                                             ; preds = %1628
  %1632 = icmp ult i32 %1627, %1626
  %1633 = select i1 %1632, i32 %1626, i32 %1627
  %1634 = select i1 %1632, i32 0, i32 %1626
  %1635 = add i32 %1634, %1564
  %1636 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1620, i64 0, i32 2
  %1637 = bitcast %struct.opj_mqc_state** %1636 to i64*
  %1638 = load i64, i64* %1637, align 8
  %1639 = bitcast %struct.opj_mqc_state** %1600 to i64*
  store i64 %1638, i64* %1639, align 8
  br label %1640

1640:                                             ; preds = %1651, %1631
  %1641 = phi i32 [ %1562, %1631 ], [ %1652, %1651 ]
  %1642 = phi i32 [ %1633, %1631 ], [ %1644, %1651 ]
  %1643 = phi i32 [ %1635, %1631 ], [ %1653, %1651 ]
  %1644 = shl i32 %1642, 1
  %1645 = shl i32 %1643, 1
  %1646 = add i32 %1641, -1
  %1647 = icmp eq i32 %1646, 0
  br i1 %1647, label %1648, label %1651

1648:                                             ; preds = %1640
  store i32 %1645, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1649 = load i32, i32* %609, align 8
  %1650 = load i32, i32* %611, align 8
  br label %1651

1651:                                             ; preds = %1648, %1640
  %1652 = phi i32 [ %1650, %1648 ], [ %1646, %1640 ]
  %1653 = phi i32 [ %1649, %1648 ], [ %1645, %1640 ]
  %1654 = and i32 %1642, 16384
  %1655 = icmp eq i32 %1654, 0
  br i1 %1655, label %1640, label %1683

1656:                                             ; preds = %1628
  %1657 = add i32 %1626, %1564
  br label %1683

1658:                                             ; preds = %1616
  %1659 = icmp ult i32 %1627, %1626
  %1660 = select i1 %1659, i32 %1627, i32 %1626
  %1661 = select i1 %1659, i32 %1626, i32 0
  %1662 = add i32 %1661, %1564
  %1663 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1620, i64 0, i32 3
  %1664 = bitcast %struct.opj_mqc_state** %1663 to i64*
  %1665 = load i64, i64* %1664, align 8
  %1666 = bitcast %struct.opj_mqc_state** %1600 to i64*
  store i64 %1665, i64* %1666, align 8
  br label %1667

1667:                                             ; preds = %1678, %1658
  %1668 = phi i32 [ %1562, %1658 ], [ %1679, %1678 ]
  %1669 = phi i32 [ %1660, %1658 ], [ %1671, %1678 ]
  %1670 = phi i32 [ %1662, %1658 ], [ %1680, %1678 ]
  %1671 = shl i32 %1669, 1
  %1672 = shl i32 %1670, 1
  %1673 = add i32 %1668, -1
  %1674 = icmp eq i32 %1673, 0
  br i1 %1674, label %1675, label %1678

1675:                                             ; preds = %1667
  store i32 %1672, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1676 = load i32, i32* %609, align 8
  %1677 = load i32, i32* %611, align 8
  br label %1678

1678:                                             ; preds = %1675, %1667
  %1679 = phi i32 [ %1677, %1675 ], [ %1673, %1667 ]
  %1680 = phi i32 [ %1676, %1675 ], [ %1672, %1667 ]
  %1681 = and i32 %1669, 16384
  %1682 = icmp eq i32 %1681, 0
  br i1 %1682, label %1667, label %1683

1683:                                             ; preds = %1678, %1651, %1656, %1608, %1601
  %1684 = phi i32 [ %1614, %1608 ], [ %1604, %1601 ], [ %1562, %1656 ], [ %1652, %1651 ], [ %1679, %1678 ]
  %1685 = phi i32 [ %1563, %1608 ], [ %1563, %1601 ], [ %1627, %1656 ], [ %1644, %1651 ], [ %1671, %1678 ]
  %1686 = phi i32 [ 0, %1608 ], [ %1606, %1601 ], [ %1657, %1656 ], [ %1653, %1651 ], [ %1680, %1678 ]
  %1687 = load i32, i32* %99, align 8
  %1688 = add i32 %1687, 2
  %1689 = load i32, i32* %1567, align 4
  %1690 = or i32 %1689, 16384
  store i32 %1690, i32* %1567, align 4
  %1691 = shl nuw nsw i32 %1589, 28
  %1692 = load i32, i32* %705, align 4
  %1693 = or i32 %1691, %1692
  %1694 = or i32 %1693, 8192
  store i32 %1694, i32* %705, align 4
  %1695 = load i32, i32* %1569, align 4
  %1696 = or i32 %1695, 4096
  store i32 %1696, i32* %1569, align 4
  %1697 = zext i32 %1688 to i64
  %1698 = getelementptr inbounds i32, i32* %705, i64 %1697
  %1699 = shl nuw nsw i32 %1589, 18
  %1700 = load i32, i32* %1698, align 4
  %1701 = or i32 %1699, %1700
  %1702 = or i32 %1701, 2
  store i32 %1702, i32* %1698, align 4
  %1703 = getelementptr inbounds i32, i32* %1698, i64 -1
  %1704 = load i32, i32* %1703, align 4
  %1705 = or i32 %1704, 4
  store i32 %1705, i32* %1703, align 4
  %1706 = getelementptr inbounds i32, i32* %1698, i64 1
  %1707 = load i32, i32* %1706, align 4
  %1708 = or i32 %1707, 1
  store i32 %1708, i32* %1706, align 4
  br label %1709

1709:                                             ; preds = %1683, %1561
  %1710 = phi i32 [ %1598, %1683 ], [ %1458, %1561 ]
  %1711 = phi i32 [ %1684, %1683 ], [ %1562, %1561 ]
  %1712 = phi i32 [ %1685, %1683 ], [ %1563, %1561 ]
  %1713 = phi i32 [ %1686, %1683 ], [ %1564, %1561 ]
  %1714 = phi %struct.opj_mqc_state** [ %1600, %1683 ], [ %1482, %1561 ]
  %1715 = load i32, i32* %705, align 4
  %1716 = or i32 %1715, 1073741824
  store i32 %1716, i32* %705, align 4
  br label %1717

1717:                                             ; preds = %1709, %1457, %702
  %1718 = phi i32 [ %703, %702 ], [ %1458, %1457 ], [ %1710, %1709 ]
  %1719 = phi i32 [ %709, %702 ], [ %1460, %1457 ], [ %1711, %1709 ]
  %1720 = phi i32 [ %708, %702 ], [ %1461, %1457 ], [ %1712, %1709 ]
  %1721 = phi i32 [ %707, %702 ], [ %1462, %1457 ], [ %1713, %1709 ]
  %1722 = phi %struct.opj_mqc_state** [ %706, %702 ], [ %1463, %1457 ], [ %1714, %1709 ]
  %1723 = add nuw i32 %704, 1
  %1724 = getelementptr inbounds i32, i32* %705, i64 1
  %1725 = getelementptr inbounds i32, i32* %710, i64 4
  %1726 = icmp eq i32 %1723, %691
  br i1 %1726, label %1727, label %702

1727:                                             ; preds = %1717
  %1728 = load i32, i32* %101, align 4
  br label %1729

1729:                                             ; preds = %1727, %690
  %1730 = phi i32 [ %692, %690 ], [ %1718, %1727 ]
  %1731 = phi i32 [ %693, %690 ], [ %1728, %1727 ]
  %1732 = phi i32* [ %700, %690 ], [ %1725, %1727 ]
  %1733 = phi i32 [ %699, %690 ], [ %1719, %1727 ]
  %1734 = phi i32 [ %698, %690 ], [ %1720, %1727 ]
  %1735 = phi i32 [ %697, %690 ], [ %1721, %1727 ]
  %1736 = phi %struct.opj_mqc_state** [ %696, %690 ], [ %1722, %1727 ]
  %1737 = phi i32* [ %695, %690 ], [ %1724, %1727 ]
  %1738 = add nuw i32 %694, 4
  %1739 = getelementptr inbounds i32, i32* %1737, i64 2
  %1740 = and i32 %1731, -4
  %1741 = icmp ult i32 %1738, %1740
  br i1 %1741, label %1742, label %1744

1742:                                             ; preds = %1729
  %1743 = load i32, i32* %99, align 8
  br label %690

1744:                                             ; preds = %1729, %668
  %1745 = phi i32 [ 0, %668 ], [ %1730, %1729 ]
  %1746 = phi i32* [ %680, %668 ], [ %1732, %1729 ]
  %1747 = phi i32 [ %679, %668 ], [ %1733, %1729 ]
  %1748 = phi i32 [ %678, %668 ], [ %1734, %1729 ]
  %1749 = phi i32 [ %677, %668 ], [ %1735, %1729 ]
  %1750 = phi %struct.opj_mqc_state** [ %676, %668 ], [ %1736, %1729 ]
  %1751 = phi i32* [ %675, %668 ], [ %1739, %1729 ]
  %1752 = phi i32 [ 0, %668 ], [ %1738, %1729 ]
  %1753 = phi i32 [ %681, %668 ], [ %1731, %1729 ]
  %1754 = icmp ult i32 %1752, %1753
  br i1 %1754, label %1755, label %2108

1755:                                             ; preds = %1744
  %1756 = load i32, i32* %99, align 8
  %1757 = icmp eq i32 %1756, 0
  br i1 %1757, label %2108, label %1758

1758:                                             ; preds = %1755
  %1759 = and i32 %670, 2147483647
  %1760 = icmp eq i32 %644, 0
  %1761 = select i1 %1760, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  br label %1762

1762:                                             ; preds = %2095, %1758
  %1763 = phi i32 [ %1756, %1758 ], [ %2096, %2095 ]
  %1764 = phi i32 [ %1745, %1758 ], [ %2097, %2095 ]
  %1765 = phi i32 [ %1753, %1758 ], [ %2098, %2095 ]
  %1766 = phi i32 [ %1753, %1758 ], [ %2099, %2095 ]
  %1767 = phi i32 [ 0, %1758 ], [ %2105, %2095 ]
  %1768 = phi i32* [ %1751, %1758 ], [ %2106, %2095 ]
  %1769 = phi %struct.opj_mqc_state** [ %1750, %1758 ], [ %2104, %2095 ]
  %1770 = phi i32 [ %1749, %1758 ], [ %2103, %2095 ]
  %1771 = phi i32 [ %1748, %1758 ], [ %2102, %2095 ]
  %1772 = phi i32 [ %1747, %1758 ], [ %2101, %2095 ]
  %1773 = phi i32* [ %1746, %1758 ], [ %2100, %2095 ]
  %1774 = load i32, i32* %1768, align 4
  %1775 = icmp eq i32 %1774, 0
  br i1 %1775, label %1781, label %1776

1776:                                             ; preds = %1762
  %1777 = icmp ugt i32 %1766, %1752
  br i1 %1777, label %1778, label %2095

1778:                                             ; preds = %1776
  %1779 = getelementptr inbounds i32, i32* %1768, i64 -1
  %1780 = getelementptr inbounds i32, i32* %1768, i64 1
  br label %1785

1781:                                             ; preds = %1762
  %1782 = sub i32 %1766, %1752
  %1783 = zext i32 %1782 to i64
  %1784 = getelementptr inbounds i32, i32* %1773, i64 %1783
  br label %2095

1785:                                             ; preds = %2082, %1778
  %1786 = phi i32 [ %1764, %1778 ], [ %2083, %2082 ]
  %1787 = phi i32 [ %1765, %1778 ], [ %2084, %2082 ]
  %1788 = phi i32 [ %1774, %1778 ], [ %2085, %2082 ]
  %1789 = phi i32 [ %1752, %1778 ], [ %2090, %2082 ]
  %1790 = phi %struct.opj_mqc_state** [ %1769, %1778 ], [ %2089, %2082 ]
  %1791 = phi i32 [ %1770, %1778 ], [ %2088, %2082 ]
  %1792 = phi i32 [ %1771, %1778 ], [ %2087, %2082 ]
  %1793 = phi i32 [ %1772, %1778 ], [ %2086, %2082 ]
  %1794 = phi i32* [ %1773, %1778 ], [ %2091, %2082 ]
  %1795 = sub nuw i32 %1789, %1752
  %1796 = icmp eq i32 %1789, %1752
  %1797 = and i1 %618, %1796
  %1798 = zext i1 %1797 to i32
  %1799 = mul i32 %1795, 3
  %1800 = shl i32 2097168, %1799
  %1801 = and i32 %1800, %1788
  %1802 = icmp eq i32 %1801, 0
  br i1 %1802, label %1803, label %2082

1803:                                             ; preds = %1785
  %1804 = shl i32 495, %1799
  %1805 = and i32 %1804, %1788
  %1806 = icmp eq i32 %1805, 0
  br i1 %1806, label %2082, label %1807

1807:                                             ; preds = %1803
  %1808 = lshr i32 %1788, %1799
  %1809 = load i8*, i8** %514, align 8
  %1810 = and i32 %1808, 495
  %1811 = zext i32 %1810 to i64
  %1812 = getelementptr inbounds i8, i8* %1809, i64 %1811
  %1813 = load i8, i8* %1812, align 1
  %1814 = load i32, i32* %1794, align 4
  %1815 = and i32 %1759, %1814
  %1816 = icmp ne i32 %1815, 0
  %1817 = zext i1 %1816 to i32
  %1818 = zext i8 %1813 to i64
  %1819 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1818
  br i1 %655, label %1820, label %1835

1820:                                             ; preds = %1807
  %1821 = icmp eq i32 %1793, -559038737
  %1822 = add i32 %1793, -1
  %1823 = select i1 %1821, i32 7, i32 %1822
  %1824 = shl i32 %1817, %1823
  %1825 = add i32 %1824, %1791
  %1826 = icmp eq i32 %1823, 0
  br i1 %1826, label %1827, label %1898

1827:                                             ; preds = %1820
  %1828 = trunc i32 %1825 to i8
  %1829 = load i8*, i8** %621, align 8
  store i8 %1828, i8* %1829, align 1
  %1830 = load i8*, i8** %621, align 8
  %1831 = load i8, i8* %1830, align 1
  %1832 = icmp eq i8 %1831, -1
  %1833 = select i1 %1832, i32 7, i32 8
  %1834 = getelementptr inbounds i8, i8* %1830, i64 1
  store i8* %1834, i8** %621, align 8
  br label %1898

1835:                                             ; preds = %1807
  %1836 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1819, align 8
  %1837 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1836, i64 0, i32 1
  %1838 = load i32, i32* %1837, align 4
  %1839 = icmp eq i32 %1838, %1817
  %1840 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1836, i64 0, i32 0
  %1841 = load i32, i32* %1840, align 8
  %1842 = sub i32 %1792, %1841
  br i1 %1839, label %1843, label %1873

1843:                                             ; preds = %1835
  %1844 = trunc i32 %1842 to i16
  %1845 = icmp sgt i16 %1844, -1
  br i1 %1845, label %1846, label %1871

1846:                                             ; preds = %1843
  %1847 = icmp ult i32 %1842, %1841
  %1848 = select i1 %1847, i32 %1841, i32 %1842
  %1849 = select i1 %1847, i32 0, i32 %1841
  %1850 = add i32 %1849, %1791
  %1851 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1836, i64 0, i32 2
  %1852 = bitcast %struct.opj_mqc_state** %1851 to i64*
  %1853 = load i64, i64* %1852, align 8
  %1854 = bitcast %struct.opj_mqc_state** %1819 to i64*
  store i64 %1853, i64* %1854, align 8
  br label %1855

1855:                                             ; preds = %1866, %1846
  %1856 = phi i32 [ %1793, %1846 ], [ %1867, %1866 ]
  %1857 = phi i32 [ %1848, %1846 ], [ %1859, %1866 ]
  %1858 = phi i32 [ %1850, %1846 ], [ %1868, %1866 ]
  %1859 = shl i32 %1857, 1
  %1860 = shl i32 %1858, 1
  %1861 = add i32 %1856, -1
  %1862 = icmp eq i32 %1861, 0
  br i1 %1862, label %1863, label %1866

1863:                                             ; preds = %1855
  store i32 %1860, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1864 = load i32, i32* %609, align 8
  %1865 = load i32, i32* %611, align 8
  br label %1866

1866:                                             ; preds = %1863, %1855
  %1867 = phi i32 [ %1865, %1863 ], [ %1861, %1855 ]
  %1868 = phi i32 [ %1864, %1863 ], [ %1860, %1855 ]
  %1869 = and i32 %1857, 16384
  %1870 = icmp eq i32 %1869, 0
  br i1 %1870, label %1855, label %1898

1871:                                             ; preds = %1843
  %1872 = add i32 %1841, %1791
  br label %1898

1873:                                             ; preds = %1835
  %1874 = icmp ult i32 %1842, %1841
  %1875 = select i1 %1874, i32 %1842, i32 %1841
  %1876 = select i1 %1874, i32 %1841, i32 0
  %1877 = add i32 %1876, %1791
  %1878 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1836, i64 0, i32 3
  %1879 = bitcast %struct.opj_mqc_state** %1878 to i64*
  %1880 = load i64, i64* %1879, align 8
  %1881 = bitcast %struct.opj_mqc_state** %1819 to i64*
  store i64 %1880, i64* %1881, align 8
  br label %1882

1882:                                             ; preds = %1893, %1873
  %1883 = phi i32 [ %1793, %1873 ], [ %1894, %1893 ]
  %1884 = phi i32 [ %1875, %1873 ], [ %1886, %1893 ]
  %1885 = phi i32 [ %1877, %1873 ], [ %1895, %1893 ]
  %1886 = shl i32 %1884, 1
  %1887 = shl i32 %1885, 1
  %1888 = add i32 %1883, -1
  %1889 = icmp eq i32 %1888, 0
  br i1 %1889, label %1890, label %1893

1890:                                             ; preds = %1882
  store i32 %1887, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1891 = load i32, i32* %609, align 8
  %1892 = load i32, i32* %611, align 8
  br label %1893

1893:                                             ; preds = %1890, %1882
  %1894 = phi i32 [ %1892, %1890 ], [ %1888, %1882 ]
  %1895 = phi i32 [ %1891, %1890 ], [ %1887, %1882 ]
  %1896 = and i32 %1884, 16384
  %1897 = icmp eq i32 %1896, 0
  br i1 %1897, label %1882, label %1898

1898:                                             ; preds = %1893, %1866, %1871, %1827, %1820
  %1899 = phi i32 [ %1833, %1827 ], [ %1823, %1820 ], [ %1793, %1871 ], [ %1867, %1866 ], [ %1894, %1893 ]
  %1900 = phi i32 [ %1792, %1827 ], [ %1792, %1820 ], [ %1842, %1871 ], [ %1859, %1866 ], [ %1886, %1893 ]
  %1901 = phi i32 [ 0, %1827 ], [ %1825, %1820 ], [ %1872, %1871 ], [ %1868, %1866 ], [ %1895, %1893 ]
  br i1 %1816, label %1902, label %2072

1902:                                             ; preds = %1898
  %1903 = load i32, i32* %1768, align 4
  %1904 = load i32, i32* %1779, align 4
  %1905 = load i32, i32* %1780, align 4
  %1906 = lshr i32 %1903, %1799
  %1907 = and i32 %1906, 170
  %1908 = add i32 %1799, 19
  %1909 = lshr i32 %1904, %1908
  %1910 = and i32 %1909, 1
  %1911 = add i32 %1799, 17
  %1912 = lshr i32 %1905, %1911
  %1913 = and i32 %1912, 4
  %1914 = icmp eq i32 %1795, 0
  %1915 = add i32 %1799, 12
  %1916 = select i1 %1914, i32 14, i32 %1915
  %1917 = lshr i32 %1903, %1916
  %1918 = and i32 %1917, 16
  %1919 = add i32 %1799, 16
  %1920 = lshr i32 %1903, %1919
  %1921 = and i32 %1920, 64
  %1922 = or i32 %1921, %1907
  %1923 = or i32 %1922, %1918
  %1924 = or i32 %1923, %1910
  %1925 = or i32 %1924, %1913
  %1926 = zext i32 %1925 to i64
  %1927 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1926
  %1928 = load i8, i8* %1927, align 1
  %1929 = load i32, i32* %1794, align 4
  %1930 = lshr i32 %1929, 31
  %1931 = and i32 %1929, 2147483647
  %1932 = lshr i32 %1931, %644
  %1933 = select i1 %1760, i32 %1929, i32 %1932
  %1934 = and i32 %1933, 127
  %1935 = zext i32 %1934 to i64
  %1936 = getelementptr inbounds [128 x i16], [128 x i16]* %1761, i64 0, i64 %1935
  %1937 = load i16, i16* %1936, align 2
  %1938 = sext i16 %1937 to i32
  %1939 = add nsw i32 %1786, %1938
  %1940 = zext i8 %1928 to i64
  %1941 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %1940
  br i1 %655, label %1942, label %1957

1942:                                             ; preds = %1902
  %1943 = icmp eq i32 %1899, -559038737
  %1944 = add i32 %1899, -1
  %1945 = select i1 %1943, i32 7, i32 %1944
  %1946 = shl i32 %1930, %1945
  %1947 = add i32 %1946, %1901
  %1948 = icmp eq i32 %1945, 0
  br i1 %1948, label %1949, label %2024

1949:                                             ; preds = %1942
  %1950 = trunc i32 %1947 to i8
  %1951 = load i8*, i8** %621, align 8
  store i8 %1950, i8* %1951, align 1
  %1952 = load i8*, i8** %621, align 8
  %1953 = load i8, i8* %1952, align 1
  %1954 = icmp eq i8 %1953, -1
  %1955 = select i1 %1954, i32 7, i32 8
  %1956 = getelementptr inbounds i8, i8* %1952, i64 1
  store i8* %1956, i8** %621, align 8
  br label %2024

1957:                                             ; preds = %1902
  %1958 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1926
  %1959 = load i8, i8* %1958, align 1
  %1960 = zext i8 %1959 to i32
  %1961 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1941, align 8
  %1962 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1961, i64 0, i32 1
  %1963 = load i32, i32* %1962, align 4
  %1964 = xor i32 %1930, %1960
  %1965 = icmp eq i32 %1963, %1964
  %1966 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1961, i64 0, i32 0
  %1967 = load i32, i32* %1966, align 8
  %1968 = sub i32 %1900, %1967
  br i1 %1965, label %1969, label %1999

1969:                                             ; preds = %1957
  %1970 = trunc i32 %1968 to i16
  %1971 = icmp sgt i16 %1970, -1
  br i1 %1971, label %1972, label %1997

1972:                                             ; preds = %1969
  %1973 = icmp ult i32 %1968, %1967
  %1974 = select i1 %1973, i32 %1967, i32 %1968
  %1975 = select i1 %1973, i32 0, i32 %1967
  %1976 = add i32 %1975, %1901
  %1977 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1961, i64 0, i32 2
  %1978 = bitcast %struct.opj_mqc_state** %1977 to i64*
  %1979 = load i64, i64* %1978, align 8
  %1980 = bitcast %struct.opj_mqc_state** %1941 to i64*
  store i64 %1979, i64* %1980, align 8
  br label %1981

1981:                                             ; preds = %1992, %1972
  %1982 = phi i32 [ %1899, %1972 ], [ %1993, %1992 ]
  %1983 = phi i32 [ %1974, %1972 ], [ %1985, %1992 ]
  %1984 = phi i32 [ %1976, %1972 ], [ %1994, %1992 ]
  %1985 = shl i32 %1983, 1
  %1986 = shl i32 %1984, 1
  %1987 = add i32 %1982, -1
  %1988 = icmp eq i32 %1987, 0
  br i1 %1988, label %1989, label %1992

1989:                                             ; preds = %1981
  store i32 %1986, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %1990 = load i32, i32* %609, align 8
  %1991 = load i32, i32* %611, align 8
  br label %1992

1992:                                             ; preds = %1989, %1981
  %1993 = phi i32 [ %1991, %1989 ], [ %1987, %1981 ]
  %1994 = phi i32 [ %1990, %1989 ], [ %1986, %1981 ]
  %1995 = and i32 %1983, 16384
  %1996 = icmp eq i32 %1995, 0
  br i1 %1996, label %1981, label %2024

1997:                                             ; preds = %1969
  %1998 = add i32 %1967, %1901
  br label %2024

1999:                                             ; preds = %1957
  %2000 = icmp ult i32 %1968, %1967
  %2001 = select i1 %2000, i32 %1968, i32 %1967
  %2002 = select i1 %2000, i32 %1967, i32 0
  %2003 = add i32 %2002, %1901
  %2004 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1961, i64 0, i32 3
  %2005 = bitcast %struct.opj_mqc_state** %2004 to i64*
  %2006 = load i64, i64* %2005, align 8
  %2007 = bitcast %struct.opj_mqc_state** %1941 to i64*
  store i64 %2006, i64* %2007, align 8
  br label %2008

2008:                                             ; preds = %2019, %1999
  %2009 = phi i32 [ %1899, %1999 ], [ %2020, %2019 ]
  %2010 = phi i32 [ %2001, %1999 ], [ %2012, %2019 ]
  %2011 = phi i32 [ %2003, %1999 ], [ %2021, %2019 ]
  %2012 = shl i32 %2010, 1
  %2013 = shl i32 %2011, 1
  %2014 = add i32 %2009, -1
  %2015 = icmp eq i32 %2014, 0
  br i1 %2015, label %2016, label %2019

2016:                                             ; preds = %2008
  store i32 %2013, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2017 = load i32, i32* %609, align 8
  %2018 = load i32, i32* %611, align 8
  br label %2019

2019:                                             ; preds = %2016, %2008
  %2020 = phi i32 [ %2018, %2016 ], [ %2014, %2008 ]
  %2021 = phi i32 [ %2017, %2016 ], [ %2013, %2008 ]
  %2022 = and i32 %2010, 16384
  %2023 = icmp eq i32 %2022, 0
  br i1 %2023, label %2008, label %2024

2024:                                             ; preds = %2019, %1992, %1997, %1949, %1942
  %2025 = phi i32 [ %1955, %1949 ], [ %1945, %1942 ], [ %1899, %1997 ], [ %1993, %1992 ], [ %2020, %2019 ]
  %2026 = phi i32 [ %1900, %1949 ], [ %1900, %1942 ], [ %1968, %1997 ], [ %1985, %1992 ], [ %2012, %2019 ]
  %2027 = phi i32 [ 0, %1949 ], [ %1947, %1942 ], [ %1998, %1997 ], [ %1994, %1992 ], [ %2021, %2019 ]
  %2028 = load i32, i32* %99, align 8
  %2029 = add i32 %2028, 2
  %2030 = shl i32 32, %1799
  %2031 = load i32, i32* %1779, align 4
  %2032 = or i32 %2031, %2030
  store i32 %2032, i32* %1779, align 4
  %2033 = shl nuw nsw i32 %1930, 19
  %2034 = or i32 %2033, 16
  %2035 = shl i32 %2034, %1799
  %2036 = load i32, i32* %1768, align 4
  %2037 = or i32 %2036, %2035
  store i32 %2037, i32* %1768, align 4
  %2038 = shl i32 8, %1799
  %2039 = load i32, i32* %1780, align 4
  %2040 = or i32 %2039, %2038
  store i32 %2040, i32* %1780, align 4
  %2041 = or i32 %1795, %1798
  %2042 = icmp eq i32 %2041, 0
  br i1 %2042, label %2043, label %2057

2043:                                             ; preds = %2024
  %2044 = zext i32 %2029 to i64
  %2045 = sub nsw i64 0, %2044
  %2046 = getelementptr inbounds i32, i32* %1768, i64 %2045
  %2047 = and i32 %1929, -2147483648
  %2048 = load i32, i32* %2046, align 4
  %2049 = or i32 %2047, %2048
  %2050 = or i32 %2049, 65536
  store i32 %2050, i32* %2046, align 4
  %2051 = getelementptr inbounds i32, i32* %2046, i64 -1
  %2052 = load i32, i32* %2051, align 4
  %2053 = or i32 %2052, 131072
  store i32 %2053, i32* %2051, align 4
  %2054 = getelementptr inbounds i32, i32* %2046, i64 1
  %2055 = load i32, i32* %2054, align 4
  %2056 = or i32 %2055, 32768
  store i32 %2056, i32* %2054, align 4
  br label %2057

2057:                                             ; preds = %2043, %2024
  %2058 = icmp eq i32 %1795, 3
  br i1 %2058, label %2059, label %2072

2059:                                             ; preds = %2057
  %2060 = zext i32 %2029 to i64
  %2061 = getelementptr inbounds i32, i32* %1768, i64 %2060
  %2062 = shl nuw nsw i32 %1930, 18
  %2063 = load i32, i32* %2061, align 4
  %2064 = or i32 %2062, %2063
  %2065 = or i32 %2064, 2
  store i32 %2065, i32* %2061, align 4
  %2066 = getelementptr inbounds i32, i32* %2061, i64 -1
  %2067 = load i32, i32* %2066, align 4
  %2068 = or i32 %2067, 4
  store i32 %2068, i32* %2066, align 4
  %2069 = getelementptr inbounds i32, i32* %2061, i64 1
  %2070 = load i32, i32* %2069, align 4
  %2071 = or i32 %2070, 1
  store i32 %2071, i32* %2069, align 4
  br label %2072

2072:                                             ; preds = %2059, %2057, %1898
  %2073 = phi i32 [ %1939, %2059 ], [ %1939, %2057 ], [ %1786, %1898 ]
  %2074 = phi i32 [ %2025, %2059 ], [ %2025, %2057 ], [ %1899, %1898 ]
  %2075 = phi i32 [ %2026, %2059 ], [ %2026, %2057 ], [ %1900, %1898 ]
  %2076 = phi i32 [ %2027, %2059 ], [ %2027, %2057 ], [ %1901, %1898 ]
  %2077 = phi %struct.opj_mqc_state** [ %1941, %2059 ], [ %1941, %2057 ], [ %1819, %1898 ]
  %2078 = shl i32 2097152, %1799
  %2079 = load i32, i32* %1768, align 4
  %2080 = or i32 %2079, %2078
  store i32 %2080, i32* %1768, align 4
  %2081 = load i32, i32* %101, align 4
  br label %2082

2082:                                             ; preds = %2072, %1803, %1785
  %2083 = phi i32 [ %1786, %1803 ], [ %2073, %2072 ], [ %1786, %1785 ]
  %2084 = phi i32 [ %1787, %1803 ], [ %2081, %2072 ], [ %1787, %1785 ]
  %2085 = phi i32 [ %1788, %1803 ], [ %2080, %2072 ], [ %1788, %1785 ]
  %2086 = phi i32 [ %1793, %1803 ], [ %2074, %2072 ], [ %1793, %1785 ]
  %2087 = phi i32 [ %1792, %1803 ], [ %2075, %2072 ], [ %1792, %1785 ]
  %2088 = phi i32 [ %1791, %1803 ], [ %2076, %2072 ], [ %1791, %1785 ]
  %2089 = phi %struct.opj_mqc_state** [ %1790, %1803 ], [ %2077, %2072 ], [ %1790, %1785 ]
  %2090 = add nuw i32 %1789, 1
  %2091 = getelementptr inbounds i32, i32* %1794, i64 1
  %2092 = icmp ult i32 %2090, %2084
  br i1 %2092, label %1785, label %2093

2093:                                             ; preds = %2082
  %2094 = load i32, i32* %99, align 8
  br label %2095

2095:                                             ; preds = %2093, %1781, %1776
  %2096 = phi i32 [ %1763, %1781 ], [ %1763, %1776 ], [ %2094, %2093 ]
  %2097 = phi i32 [ %1764, %1781 ], [ %1764, %1776 ], [ %2083, %2093 ]
  %2098 = phi i32 [ %1765, %1781 ], [ %1765, %1776 ], [ %2084, %2093 ]
  %2099 = phi i32 [ %1766, %1781 ], [ %1766, %1776 ], [ %2084, %2093 ]
  %2100 = phi i32* [ %1784, %1781 ], [ %1773, %1776 ], [ %2091, %2093 ]
  %2101 = phi i32 [ %1772, %1781 ], [ %1772, %1776 ], [ %2086, %2093 ]
  %2102 = phi i32 [ %1771, %1781 ], [ %1771, %1776 ], [ %2087, %2093 ]
  %2103 = phi i32 [ %1770, %1781 ], [ %1770, %1776 ], [ %2088, %2093 ]
  %2104 = phi %struct.opj_mqc_state** [ %1769, %1781 ], [ %1769, %1776 ], [ %2089, %2093 ]
  %2105 = add nuw i32 %1767, 1
  %2106 = getelementptr inbounds i32, i32* %1768, i64 1
  %2107 = icmp ult i32 %2105, %2096
  br i1 %2107, label %1762, label %2108

2108:                                             ; preds = %2095, %1755, %1744
  %2109 = phi i32 [ %1745, %1755 ], [ %1745, %1744 ], [ %2097, %2095 ]
  %2110 = phi i32 [ %1747, %1755 ], [ %1747, %1744 ], [ %2101, %2095 ]
  %2111 = phi i32 [ %1748, %1755 ], [ %1748, %1744 ], [ %2102, %2095 ]
  %2112 = phi i32 [ %1749, %1755 ], [ %1749, %1744 ], [ %2103, %2095 ]
  %2113 = phi %struct.opj_mqc_state** [ %1750, %1755 ], [ %1750, %1744 ], [ %2104, %2095 ]
  store %struct.opj_mqc_state** %2113, %struct.opj_mqc_state*** %608, align 8
  store i32 %2112, i32* %609, align 8
  store i32 %2111, i32* %610, align 4
  store i32 %2110, i32* %611, align 8
  br label %3750

2114:                                             ; preds = %667
  %2115 = add nuw nsw i32 %644, 6
  %2116 = shl i32 1, %2115
  %2117 = load i32*, i32** %612, align 8
  %2118 = load i32, i32* %99, align 8
  %2119 = add i32 %2118, 3
  %2120 = zext i32 %2119 to i64
  %2121 = getelementptr inbounds i32, i32* %2117, i64 %2120
  %2122 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %608, align 8
  %2123 = load i32, i32* %609, align 8
  %2124 = load i32, i32* %610, align 4
  %2125 = load i32, i32* %611, align 8
  %2126 = load i32*, i32** %114, align 8
  %2127 = load i32, i32* %101, align 4
  %2128 = icmp ugt i32 %2127, 3
  br i1 %2128, label %2129, label %2649

2129:                                             ; preds = %2114
  %2130 = icmp eq i32 %644, 0
  %2131 = select i1 %2130, [128 x i16]* @lut_nmsedec_ref0, [128 x i16]* @lut_nmsedec_ref
  %2132 = select i1 %2130, [128 x i16]* @lut_nmsedec_ref0, [128 x i16]* @lut_nmsedec_ref
  %2133 = select i1 %2130, [128 x i16]* @lut_nmsedec_ref0, [128 x i16]* @lut_nmsedec_ref
  %2134 = select i1 %2130, [128 x i16]* @lut_nmsedec_ref0, [128 x i16]* @lut_nmsedec_ref
  br label %2135

2135:                                             ; preds = %2634, %2129
  %2136 = phi i32 [ %2127, %2129 ], [ %2635, %2634 ]
  %2137 = phi i32 [ 0, %2129 ], [ %2636, %2634 ]
  %2138 = phi i32 [ %2118, %2129 ], [ %2637, %2634 ]
  %2139 = phi i32 [ %2118, %2129 ], [ %2638, %2634 ]
  %2140 = phi i32 [ 0, %2129 ], [ %2645, %2634 ]
  %2141 = phi i32* [ %2121, %2129 ], [ %2646, %2634 ]
  %2142 = phi %struct.opj_mqc_state** [ %2122, %2129 ], [ %2643, %2634 ]
  %2143 = phi i32 [ %2123, %2129 ], [ %2642, %2634 ]
  %2144 = phi i32 [ %2124, %2129 ], [ %2641, %2634 ]
  %2145 = phi i32 [ %2125, %2129 ], [ %2640, %2634 ]
  %2146 = phi i32* [ %2126, %2129 ], [ %2639, %2634 ]
  %2147 = icmp eq i32 %2139, 0
  br i1 %2147, label %2634, label %2148

2148:                                             ; preds = %2135, %2621
  %2149 = phi i32 [ %2622, %2621 ], [ %2137, %2135 ]
  %2150 = phi i32 [ %2623, %2621 ], [ %2138, %2135 ]
  %2151 = phi i32 [ %2628, %2621 ], [ 0, %2135 ]
  %2152 = phi i32* [ %2629, %2621 ], [ %2141, %2135 ]
  %2153 = phi %struct.opj_mqc_state** [ %2627, %2621 ], [ %2142, %2135 ]
  %2154 = phi i32 [ %2626, %2621 ], [ %2143, %2135 ]
  %2155 = phi i32 [ %2625, %2621 ], [ %2144, %2135 ]
  %2156 = phi i32 [ %2624, %2621 ], [ %2145, %2135 ]
  %2157 = phi i32* [ %2630, %2621 ], [ %2146, %2135 ]
  %2158 = load i32, i32* %2152, align 4
  %2159 = and i32 %2158, 9360
  %2160 = icmp eq i32 %2159, 0
  %2161 = and i32 %2158, 1226833920
  %2162 = icmp eq i32 %2161, 1226833920
  %2163 = or i1 %2160, %2162
  br i1 %2163, label %2621, label %2164

2164:                                             ; preds = %2148
  %2165 = and i32 %2158, 2097168
  %2166 = icmp eq i32 %2165, 16
  br i1 %2166, label %2167, label %2271

2167:                                             ; preds = %2164
  %2168 = and i32 %2158, 495
  %2169 = icmp eq i32 %2168, 0
  %2170 = select i1 %2169, i64 14, i64 15
  %2171 = and i32 %2158, 1048576
  %2172 = icmp eq i32 %2171, 0
  %2173 = select i1 %2172, i64 %2170, i64 16
  %2174 = load i32, i32* %2157, align 4
  %2175 = and i32 %2174, 2147483647
  %2176 = lshr i32 %2175, %644
  %2177 = select i1 %2130, i32 %2174, i32 %2176
  %2178 = and i32 %2177, 127
  %2179 = zext i32 %2178 to i64
  %2180 = getelementptr inbounds [128 x i16], [128 x i16]* %2131, i64 0, i64 %2179
  %2181 = load i16, i16* %2180, align 2
  %2182 = sext i16 %2181 to i32
  %2183 = add nsw i32 %2149, %2182
  %2184 = and i32 %2175, %2116
  %2185 = icmp ne i32 %2184, 0
  %2186 = zext i1 %2185 to i32
  %2187 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %2173
  br i1 %655, label %2188, label %2203

2188:                                             ; preds = %2167
  %2189 = icmp eq i32 %2156, -559038737
  %2190 = add i32 %2156, -1
  %2191 = select i1 %2189, i32 7, i32 %2190
  %2192 = shl i32 %2186, %2191
  %2193 = add i32 %2192, %2154
  %2194 = icmp eq i32 %2191, 0
  br i1 %2194, label %2195, label %2266

2195:                                             ; preds = %2188
  %2196 = trunc i32 %2193 to i8
  %2197 = load i8*, i8** %621, align 8
  store i8 %2196, i8* %2197, align 1
  %2198 = load i8*, i8** %621, align 8
  %2199 = load i8, i8* %2198, align 1
  %2200 = icmp eq i8 %2199, -1
  %2201 = select i1 %2200, i32 7, i32 8
  %2202 = getelementptr inbounds i8, i8* %2198, i64 1
  store i8* %2202, i8** %621, align 8
  br label %2266

2203:                                             ; preds = %2167
  %2204 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2187, align 8
  %2205 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 1
  %2206 = load i32, i32* %2205, align 4
  %2207 = icmp eq i32 %2206, %2186
  %2208 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 0
  %2209 = load i32, i32* %2208, align 8
  %2210 = sub i32 %2155, %2209
  br i1 %2207, label %2211, label %2241

2211:                                             ; preds = %2203
  %2212 = trunc i32 %2210 to i16
  %2213 = icmp sgt i16 %2212, -1
  br i1 %2213, label %2214, label %2239

2214:                                             ; preds = %2211
  %2215 = icmp ult i32 %2210, %2209
  %2216 = select i1 %2215, i32 %2209, i32 %2210
  %2217 = select i1 %2215, i32 0, i32 %2209
  %2218 = add i32 %2217, %2154
  %2219 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 2
  %2220 = bitcast %struct.opj_mqc_state** %2219 to i64*
  %2221 = load i64, i64* %2220, align 8
  %2222 = bitcast %struct.opj_mqc_state** %2187 to i64*
  store i64 %2221, i64* %2222, align 8
  br label %2223

2223:                                             ; preds = %2234, %2214
  %2224 = phi i32 [ %2156, %2214 ], [ %2235, %2234 ]
  %2225 = phi i32 [ %2216, %2214 ], [ %2227, %2234 ]
  %2226 = phi i32 [ %2218, %2214 ], [ %2236, %2234 ]
  %2227 = shl i32 %2225, 1
  %2228 = shl i32 %2226, 1
  %2229 = add i32 %2224, -1
  %2230 = icmp eq i32 %2229, 0
  br i1 %2230, label %2231, label %2234

2231:                                             ; preds = %2223
  store i32 %2228, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2232 = load i32, i32* %609, align 8
  %2233 = load i32, i32* %611, align 8
  br label %2234

2234:                                             ; preds = %2231, %2223
  %2235 = phi i32 [ %2233, %2231 ], [ %2229, %2223 ]
  %2236 = phi i32 [ %2232, %2231 ], [ %2228, %2223 ]
  %2237 = and i32 %2225, 16384
  %2238 = icmp eq i32 %2237, 0
  br i1 %2238, label %2223, label %2266

2239:                                             ; preds = %2211
  %2240 = add i32 %2209, %2154
  br label %2266

2241:                                             ; preds = %2203
  %2242 = icmp ult i32 %2210, %2209
  %2243 = select i1 %2242, i32 %2210, i32 %2209
  %2244 = select i1 %2242, i32 %2209, i32 0
  %2245 = add i32 %2244, %2154
  %2246 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 3
  %2247 = bitcast %struct.opj_mqc_state** %2246 to i64*
  %2248 = load i64, i64* %2247, align 8
  %2249 = bitcast %struct.opj_mqc_state** %2187 to i64*
  store i64 %2248, i64* %2249, align 8
  br label %2250

2250:                                             ; preds = %2261, %2241
  %2251 = phi i32 [ %2156, %2241 ], [ %2262, %2261 ]
  %2252 = phi i32 [ %2243, %2241 ], [ %2254, %2261 ]
  %2253 = phi i32 [ %2245, %2241 ], [ %2263, %2261 ]
  %2254 = shl i32 %2252, 1
  %2255 = shl i32 %2253, 1
  %2256 = add i32 %2251, -1
  %2257 = icmp eq i32 %2256, 0
  br i1 %2257, label %2258, label %2261

2258:                                             ; preds = %2250
  store i32 %2255, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2259 = load i32, i32* %609, align 8
  %2260 = load i32, i32* %611, align 8
  br label %2261

2261:                                             ; preds = %2258, %2250
  %2262 = phi i32 [ %2260, %2258 ], [ %2256, %2250 ]
  %2263 = phi i32 [ %2259, %2258 ], [ %2255, %2250 ]
  %2264 = and i32 %2252, 16384
  %2265 = icmp eq i32 %2264, 0
  br i1 %2265, label %2250, label %2266

2266:                                             ; preds = %2261, %2234, %2239, %2195, %2188
  %2267 = phi i32 [ %2201, %2195 ], [ %2191, %2188 ], [ %2156, %2239 ], [ %2235, %2234 ], [ %2262, %2261 ]
  %2268 = phi i32 [ %2155, %2195 ], [ %2155, %2188 ], [ %2210, %2239 ], [ %2227, %2234 ], [ %2254, %2261 ]
  %2269 = phi i32 [ 0, %2195 ], [ %2193, %2188 ], [ %2240, %2239 ], [ %2236, %2234 ], [ %2263, %2261 ]
  %2270 = or i32 %2158, 1048576
  br label %2271

2271:                                             ; preds = %2266, %2164
  %2272 = phi i32 [ %2183, %2266 ], [ %2149, %2164 ]
  %2273 = phi i32 [ %2270, %2266 ], [ %2158, %2164 ]
  %2274 = phi i32 [ %2267, %2266 ], [ %2156, %2164 ]
  %2275 = phi i32 [ %2268, %2266 ], [ %2155, %2164 ]
  %2276 = phi i32 [ %2269, %2266 ], [ %2154, %2164 ]
  %2277 = phi %struct.opj_mqc_state** [ %2187, %2266 ], [ %2153, %2164 ]
  %2278 = and i32 %2158, 16777344
  %2279 = icmp eq i32 %2278, 128
  br i1 %2279, label %2280, label %2385

2280:                                             ; preds = %2271
  %2281 = and i32 %2158, 3960
  %2282 = icmp eq i32 %2281, 0
  %2283 = select i1 %2282, i64 14, i64 15
  %2284 = and i32 %2158, 8388608
  %2285 = icmp eq i32 %2284, 0
  %2286 = select i1 %2285, i64 %2283, i64 16
  %2287 = getelementptr inbounds i32, i32* %2157, i64 1
  %2288 = load i32, i32* %2287, align 4
  %2289 = and i32 %2288, 2147483647
  %2290 = lshr i32 %2289, %644
  %2291 = select i1 %2130, i32 %2288, i32 %2290
  %2292 = and i32 %2291, 127
  %2293 = zext i32 %2292 to i64
  %2294 = getelementptr inbounds [128 x i16], [128 x i16]* %2132, i64 0, i64 %2293
  %2295 = load i16, i16* %2294, align 2
  %2296 = sext i16 %2295 to i32
  %2297 = add nsw i32 %2272, %2296
  %2298 = and i32 %2289, %2116
  %2299 = icmp ne i32 %2298, 0
  %2300 = zext i1 %2299 to i32
  %2301 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %2286
  br i1 %655, label %2302, label %2317

2302:                                             ; preds = %2280
  %2303 = icmp eq i32 %2274, -559038737
  %2304 = add i32 %2274, -1
  %2305 = select i1 %2303, i32 7, i32 %2304
  %2306 = shl i32 %2300, %2305
  %2307 = add i32 %2306, %2276
  %2308 = icmp eq i32 %2305, 0
  br i1 %2308, label %2309, label %2380

2309:                                             ; preds = %2302
  %2310 = trunc i32 %2307 to i8
  %2311 = load i8*, i8** %621, align 8
  store i8 %2310, i8* %2311, align 1
  %2312 = load i8*, i8** %621, align 8
  %2313 = load i8, i8* %2312, align 1
  %2314 = icmp eq i8 %2313, -1
  %2315 = select i1 %2314, i32 7, i32 8
  %2316 = getelementptr inbounds i8, i8* %2312, i64 1
  store i8* %2316, i8** %621, align 8
  br label %2380

2317:                                             ; preds = %2280
  %2318 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2301, align 8
  %2319 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2318, i64 0, i32 1
  %2320 = load i32, i32* %2319, align 4
  %2321 = icmp eq i32 %2320, %2300
  %2322 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2318, i64 0, i32 0
  %2323 = load i32, i32* %2322, align 8
  %2324 = sub i32 %2275, %2323
  br i1 %2321, label %2325, label %2355

2325:                                             ; preds = %2317
  %2326 = trunc i32 %2324 to i16
  %2327 = icmp sgt i16 %2326, -1
  br i1 %2327, label %2328, label %2353

2328:                                             ; preds = %2325
  %2329 = icmp ult i32 %2324, %2323
  %2330 = select i1 %2329, i32 %2323, i32 %2324
  %2331 = select i1 %2329, i32 0, i32 %2323
  %2332 = add i32 %2331, %2276
  %2333 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2318, i64 0, i32 2
  %2334 = bitcast %struct.opj_mqc_state** %2333 to i64*
  %2335 = load i64, i64* %2334, align 8
  %2336 = bitcast %struct.opj_mqc_state** %2301 to i64*
  store i64 %2335, i64* %2336, align 8
  br label %2337

2337:                                             ; preds = %2348, %2328
  %2338 = phi i32 [ %2274, %2328 ], [ %2349, %2348 ]
  %2339 = phi i32 [ %2330, %2328 ], [ %2341, %2348 ]
  %2340 = phi i32 [ %2332, %2328 ], [ %2350, %2348 ]
  %2341 = shl i32 %2339, 1
  %2342 = shl i32 %2340, 1
  %2343 = add i32 %2338, -1
  %2344 = icmp eq i32 %2343, 0
  br i1 %2344, label %2345, label %2348

2345:                                             ; preds = %2337
  store i32 %2342, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2346 = load i32, i32* %609, align 8
  %2347 = load i32, i32* %611, align 8
  br label %2348

2348:                                             ; preds = %2345, %2337
  %2349 = phi i32 [ %2347, %2345 ], [ %2343, %2337 ]
  %2350 = phi i32 [ %2346, %2345 ], [ %2342, %2337 ]
  %2351 = and i32 %2339, 16384
  %2352 = icmp eq i32 %2351, 0
  br i1 %2352, label %2337, label %2380

2353:                                             ; preds = %2325
  %2354 = add i32 %2323, %2276
  br label %2380

2355:                                             ; preds = %2317
  %2356 = icmp ult i32 %2324, %2323
  %2357 = select i1 %2356, i32 %2324, i32 %2323
  %2358 = select i1 %2356, i32 %2323, i32 0
  %2359 = add i32 %2358, %2276
  %2360 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2318, i64 0, i32 3
  %2361 = bitcast %struct.opj_mqc_state** %2360 to i64*
  %2362 = load i64, i64* %2361, align 8
  %2363 = bitcast %struct.opj_mqc_state** %2301 to i64*
  store i64 %2362, i64* %2363, align 8
  br label %2364

2364:                                             ; preds = %2375, %2355
  %2365 = phi i32 [ %2274, %2355 ], [ %2376, %2375 ]
  %2366 = phi i32 [ %2357, %2355 ], [ %2368, %2375 ]
  %2367 = phi i32 [ %2359, %2355 ], [ %2377, %2375 ]
  %2368 = shl i32 %2366, 1
  %2369 = shl i32 %2367, 1
  %2370 = add i32 %2365, -1
  %2371 = icmp eq i32 %2370, 0
  br i1 %2371, label %2372, label %2375

2372:                                             ; preds = %2364
  store i32 %2369, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2373 = load i32, i32* %609, align 8
  %2374 = load i32, i32* %611, align 8
  br label %2375

2375:                                             ; preds = %2372, %2364
  %2376 = phi i32 [ %2374, %2372 ], [ %2370, %2364 ]
  %2377 = phi i32 [ %2373, %2372 ], [ %2369, %2364 ]
  %2378 = and i32 %2366, 16384
  %2379 = icmp eq i32 %2378, 0
  br i1 %2379, label %2364, label %2380

2380:                                             ; preds = %2375, %2348, %2353, %2309, %2302
  %2381 = phi i32 [ %2315, %2309 ], [ %2305, %2302 ], [ %2274, %2353 ], [ %2349, %2348 ], [ %2376, %2375 ]
  %2382 = phi i32 [ %2275, %2309 ], [ %2275, %2302 ], [ %2324, %2353 ], [ %2341, %2348 ], [ %2368, %2375 ]
  %2383 = phi i32 [ 0, %2309 ], [ %2307, %2302 ], [ %2354, %2353 ], [ %2350, %2348 ], [ %2377, %2375 ]
  %2384 = or i32 %2273, 8388608
  br label %2385

2385:                                             ; preds = %2380, %2271
  %2386 = phi i32 [ %2297, %2380 ], [ %2272, %2271 ]
  %2387 = phi i32 [ %2384, %2380 ], [ %2273, %2271 ]
  %2388 = phi i32 [ %2381, %2380 ], [ %2274, %2271 ]
  %2389 = phi i32 [ %2382, %2380 ], [ %2275, %2271 ]
  %2390 = phi i32 [ %2383, %2380 ], [ %2276, %2271 ]
  %2391 = phi %struct.opj_mqc_state** [ %2301, %2380 ], [ %2277, %2271 ]
  %2392 = and i32 %2158, 134218752
  %2393 = icmp eq i32 %2392, 1024
  br i1 %2393, label %2394, label %2499

2394:                                             ; preds = %2385
  %2395 = and i32 %2158, 31680
  %2396 = icmp eq i32 %2395, 0
  %2397 = select i1 %2396, i64 14, i64 15
  %2398 = and i32 %2158, 67108864
  %2399 = icmp eq i32 %2398, 0
  %2400 = select i1 %2399, i64 %2397, i64 16
  %2401 = getelementptr inbounds i32, i32* %2157, i64 2
  %2402 = load i32, i32* %2401, align 4
  %2403 = and i32 %2402, 2147483647
  %2404 = lshr i32 %2403, %644
  %2405 = select i1 %2130, i32 %2402, i32 %2404
  %2406 = and i32 %2405, 127
  %2407 = zext i32 %2406 to i64
  %2408 = getelementptr inbounds [128 x i16], [128 x i16]* %2133, i64 0, i64 %2407
  %2409 = load i16, i16* %2408, align 2
  %2410 = sext i16 %2409 to i32
  %2411 = add nsw i32 %2386, %2410
  %2412 = and i32 %2403, %2116
  %2413 = icmp ne i32 %2412, 0
  %2414 = zext i1 %2413 to i32
  %2415 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %2400
  br i1 %655, label %2416, label %2431

2416:                                             ; preds = %2394
  %2417 = icmp eq i32 %2388, -559038737
  %2418 = add i32 %2388, -1
  %2419 = select i1 %2417, i32 7, i32 %2418
  %2420 = shl i32 %2414, %2419
  %2421 = add i32 %2420, %2390
  %2422 = icmp eq i32 %2419, 0
  br i1 %2422, label %2423, label %2494

2423:                                             ; preds = %2416
  %2424 = trunc i32 %2421 to i8
  %2425 = load i8*, i8** %621, align 8
  store i8 %2424, i8* %2425, align 1
  %2426 = load i8*, i8** %621, align 8
  %2427 = load i8, i8* %2426, align 1
  %2428 = icmp eq i8 %2427, -1
  %2429 = select i1 %2428, i32 7, i32 8
  %2430 = getelementptr inbounds i8, i8* %2426, i64 1
  store i8* %2430, i8** %621, align 8
  br label %2494

2431:                                             ; preds = %2394
  %2432 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2415, align 8
  %2433 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2432, i64 0, i32 1
  %2434 = load i32, i32* %2433, align 4
  %2435 = icmp eq i32 %2434, %2414
  %2436 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2432, i64 0, i32 0
  %2437 = load i32, i32* %2436, align 8
  %2438 = sub i32 %2389, %2437
  br i1 %2435, label %2439, label %2469

2439:                                             ; preds = %2431
  %2440 = trunc i32 %2438 to i16
  %2441 = icmp sgt i16 %2440, -1
  br i1 %2441, label %2442, label %2467

2442:                                             ; preds = %2439
  %2443 = icmp ult i32 %2438, %2437
  %2444 = select i1 %2443, i32 %2437, i32 %2438
  %2445 = select i1 %2443, i32 0, i32 %2437
  %2446 = add i32 %2445, %2390
  %2447 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2432, i64 0, i32 2
  %2448 = bitcast %struct.opj_mqc_state** %2447 to i64*
  %2449 = load i64, i64* %2448, align 8
  %2450 = bitcast %struct.opj_mqc_state** %2415 to i64*
  store i64 %2449, i64* %2450, align 8
  br label %2451

2451:                                             ; preds = %2462, %2442
  %2452 = phi i32 [ %2388, %2442 ], [ %2463, %2462 ]
  %2453 = phi i32 [ %2444, %2442 ], [ %2455, %2462 ]
  %2454 = phi i32 [ %2446, %2442 ], [ %2464, %2462 ]
  %2455 = shl i32 %2453, 1
  %2456 = shl i32 %2454, 1
  %2457 = add i32 %2452, -1
  %2458 = icmp eq i32 %2457, 0
  br i1 %2458, label %2459, label %2462

2459:                                             ; preds = %2451
  store i32 %2456, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2460 = load i32, i32* %609, align 8
  %2461 = load i32, i32* %611, align 8
  br label %2462

2462:                                             ; preds = %2459, %2451
  %2463 = phi i32 [ %2461, %2459 ], [ %2457, %2451 ]
  %2464 = phi i32 [ %2460, %2459 ], [ %2456, %2451 ]
  %2465 = and i32 %2453, 16384
  %2466 = icmp eq i32 %2465, 0
  br i1 %2466, label %2451, label %2494

2467:                                             ; preds = %2439
  %2468 = add i32 %2437, %2390
  br label %2494

2469:                                             ; preds = %2431
  %2470 = icmp ult i32 %2438, %2437
  %2471 = select i1 %2470, i32 %2438, i32 %2437
  %2472 = select i1 %2470, i32 %2437, i32 0
  %2473 = add i32 %2472, %2390
  %2474 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2432, i64 0, i32 3
  %2475 = bitcast %struct.opj_mqc_state** %2474 to i64*
  %2476 = load i64, i64* %2475, align 8
  %2477 = bitcast %struct.opj_mqc_state** %2415 to i64*
  store i64 %2476, i64* %2477, align 8
  br label %2478

2478:                                             ; preds = %2489, %2469
  %2479 = phi i32 [ %2388, %2469 ], [ %2490, %2489 ]
  %2480 = phi i32 [ %2471, %2469 ], [ %2482, %2489 ]
  %2481 = phi i32 [ %2473, %2469 ], [ %2491, %2489 ]
  %2482 = shl i32 %2480, 1
  %2483 = shl i32 %2481, 1
  %2484 = add i32 %2479, -1
  %2485 = icmp eq i32 %2484, 0
  br i1 %2485, label %2486, label %2489

2486:                                             ; preds = %2478
  store i32 %2483, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2487 = load i32, i32* %609, align 8
  %2488 = load i32, i32* %611, align 8
  br label %2489

2489:                                             ; preds = %2486, %2478
  %2490 = phi i32 [ %2488, %2486 ], [ %2484, %2478 ]
  %2491 = phi i32 [ %2487, %2486 ], [ %2483, %2478 ]
  %2492 = and i32 %2480, 16384
  %2493 = icmp eq i32 %2492, 0
  br i1 %2493, label %2478, label %2494

2494:                                             ; preds = %2489, %2462, %2467, %2423, %2416
  %2495 = phi i32 [ %2429, %2423 ], [ %2419, %2416 ], [ %2388, %2467 ], [ %2463, %2462 ], [ %2490, %2489 ]
  %2496 = phi i32 [ %2389, %2423 ], [ %2389, %2416 ], [ %2438, %2467 ], [ %2455, %2462 ], [ %2482, %2489 ]
  %2497 = phi i32 [ 0, %2423 ], [ %2421, %2416 ], [ %2468, %2467 ], [ %2464, %2462 ], [ %2491, %2489 ]
  %2498 = or i32 %2387, 67108864
  br label %2499

2499:                                             ; preds = %2494, %2385
  %2500 = phi i32 [ %2411, %2494 ], [ %2386, %2385 ]
  %2501 = phi i32 [ %2498, %2494 ], [ %2387, %2385 ]
  %2502 = phi i32 [ %2495, %2494 ], [ %2388, %2385 ]
  %2503 = phi i32 [ %2496, %2494 ], [ %2389, %2385 ]
  %2504 = phi i32 [ %2497, %2494 ], [ %2390, %2385 ]
  %2505 = phi %struct.opj_mqc_state** [ %2415, %2494 ], [ %2391, %2385 ]
  %2506 = and i32 %2158, 1073750016
  %2507 = icmp eq i32 %2506, 8192
  br i1 %2507, label %2508, label %2613

2508:                                             ; preds = %2499
  %2509 = and i32 %2158, 253440
  %2510 = icmp eq i32 %2509, 0
  %2511 = select i1 %2510, i64 14, i64 15
  %2512 = and i32 %2158, 536870912
  %2513 = icmp eq i32 %2512, 0
  %2514 = select i1 %2513, i64 %2511, i64 16
  %2515 = getelementptr inbounds i32, i32* %2157, i64 3
  %2516 = load i32, i32* %2515, align 4
  %2517 = and i32 %2516, 2147483647
  %2518 = lshr i32 %2517, %644
  %2519 = select i1 %2130, i32 %2516, i32 %2518
  %2520 = and i32 %2519, 127
  %2521 = zext i32 %2520 to i64
  %2522 = getelementptr inbounds [128 x i16], [128 x i16]* %2134, i64 0, i64 %2521
  %2523 = load i16, i16* %2522, align 2
  %2524 = sext i16 %2523 to i32
  %2525 = add nsw i32 %2500, %2524
  %2526 = and i32 %2517, %2116
  %2527 = icmp ne i32 %2526, 0
  %2528 = zext i1 %2527 to i32
  %2529 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %2514
  br i1 %655, label %2530, label %2545

2530:                                             ; preds = %2508
  %2531 = icmp eq i32 %2502, -559038737
  %2532 = add i32 %2502, -1
  %2533 = select i1 %2531, i32 7, i32 %2532
  %2534 = shl i32 %2528, %2533
  %2535 = add i32 %2534, %2504
  %2536 = icmp eq i32 %2533, 0
  br i1 %2536, label %2537, label %2608

2537:                                             ; preds = %2530
  %2538 = trunc i32 %2535 to i8
  %2539 = load i8*, i8** %621, align 8
  store i8 %2538, i8* %2539, align 1
  %2540 = load i8*, i8** %621, align 8
  %2541 = load i8, i8* %2540, align 1
  %2542 = icmp eq i8 %2541, -1
  %2543 = select i1 %2542, i32 7, i32 8
  %2544 = getelementptr inbounds i8, i8* %2540, i64 1
  store i8* %2544, i8** %621, align 8
  br label %2608

2545:                                             ; preds = %2508
  %2546 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2529, align 8
  %2547 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2546, i64 0, i32 1
  %2548 = load i32, i32* %2547, align 4
  %2549 = icmp eq i32 %2548, %2528
  %2550 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2546, i64 0, i32 0
  %2551 = load i32, i32* %2550, align 8
  %2552 = sub i32 %2503, %2551
  br i1 %2549, label %2553, label %2583

2553:                                             ; preds = %2545
  %2554 = trunc i32 %2552 to i16
  %2555 = icmp sgt i16 %2554, -1
  br i1 %2555, label %2556, label %2581

2556:                                             ; preds = %2553
  %2557 = icmp ult i32 %2552, %2551
  %2558 = select i1 %2557, i32 %2551, i32 %2552
  %2559 = select i1 %2557, i32 0, i32 %2551
  %2560 = add i32 %2559, %2504
  %2561 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2546, i64 0, i32 2
  %2562 = bitcast %struct.opj_mqc_state** %2561 to i64*
  %2563 = load i64, i64* %2562, align 8
  %2564 = bitcast %struct.opj_mqc_state** %2529 to i64*
  store i64 %2563, i64* %2564, align 8
  br label %2565

2565:                                             ; preds = %2576, %2556
  %2566 = phi i32 [ %2502, %2556 ], [ %2577, %2576 ]
  %2567 = phi i32 [ %2558, %2556 ], [ %2569, %2576 ]
  %2568 = phi i32 [ %2560, %2556 ], [ %2578, %2576 ]
  %2569 = shl i32 %2567, 1
  %2570 = shl i32 %2568, 1
  %2571 = add i32 %2566, -1
  %2572 = icmp eq i32 %2571, 0
  br i1 %2572, label %2573, label %2576

2573:                                             ; preds = %2565
  store i32 %2570, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2574 = load i32, i32* %609, align 8
  %2575 = load i32, i32* %611, align 8
  br label %2576

2576:                                             ; preds = %2573, %2565
  %2577 = phi i32 [ %2575, %2573 ], [ %2571, %2565 ]
  %2578 = phi i32 [ %2574, %2573 ], [ %2570, %2565 ]
  %2579 = and i32 %2567, 16384
  %2580 = icmp eq i32 %2579, 0
  br i1 %2580, label %2565, label %2608

2581:                                             ; preds = %2553
  %2582 = add i32 %2551, %2504
  br label %2608

2583:                                             ; preds = %2545
  %2584 = icmp ult i32 %2552, %2551
  %2585 = select i1 %2584, i32 %2552, i32 %2551
  %2586 = select i1 %2584, i32 %2551, i32 0
  %2587 = add i32 %2586, %2504
  %2588 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2546, i64 0, i32 3
  %2589 = bitcast %struct.opj_mqc_state** %2588 to i64*
  %2590 = load i64, i64* %2589, align 8
  %2591 = bitcast %struct.opj_mqc_state** %2529 to i64*
  store i64 %2590, i64* %2591, align 8
  br label %2592

2592:                                             ; preds = %2603, %2583
  %2593 = phi i32 [ %2502, %2583 ], [ %2604, %2603 ]
  %2594 = phi i32 [ %2585, %2583 ], [ %2596, %2603 ]
  %2595 = phi i32 [ %2587, %2583 ], [ %2605, %2603 ]
  %2596 = shl i32 %2594, 1
  %2597 = shl i32 %2595, 1
  %2598 = add i32 %2593, -1
  %2599 = icmp eq i32 %2598, 0
  br i1 %2599, label %2600, label %2603

2600:                                             ; preds = %2592
  store i32 %2597, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2601 = load i32, i32* %609, align 8
  %2602 = load i32, i32* %611, align 8
  br label %2603

2603:                                             ; preds = %2600, %2592
  %2604 = phi i32 [ %2602, %2600 ], [ %2598, %2592 ]
  %2605 = phi i32 [ %2601, %2600 ], [ %2597, %2592 ]
  %2606 = and i32 %2594, 16384
  %2607 = icmp eq i32 %2606, 0
  br i1 %2607, label %2592, label %2608

2608:                                             ; preds = %2603, %2576, %2581, %2537, %2530
  %2609 = phi i32 [ %2543, %2537 ], [ %2533, %2530 ], [ %2502, %2581 ], [ %2577, %2576 ], [ %2604, %2603 ]
  %2610 = phi i32 [ %2503, %2537 ], [ %2503, %2530 ], [ %2552, %2581 ], [ %2569, %2576 ], [ %2596, %2603 ]
  %2611 = phi i32 [ 0, %2537 ], [ %2535, %2530 ], [ %2582, %2581 ], [ %2578, %2576 ], [ %2605, %2603 ]
  %2612 = or i32 %2501, 536870912
  br label %2613

2613:                                             ; preds = %2608, %2499
  %2614 = phi i32 [ %2525, %2608 ], [ %2500, %2499 ]
  %2615 = phi i32 [ %2612, %2608 ], [ %2501, %2499 ]
  %2616 = phi i32 [ %2609, %2608 ], [ %2502, %2499 ]
  %2617 = phi i32 [ %2610, %2608 ], [ %2503, %2499 ]
  %2618 = phi i32 [ %2611, %2608 ], [ %2504, %2499 ]
  %2619 = phi %struct.opj_mqc_state** [ %2529, %2608 ], [ %2505, %2499 ]
  store i32 %2615, i32* %2152, align 4
  %2620 = load i32, i32* %99, align 8
  br label %2621

2621:                                             ; preds = %2613, %2148
  %2622 = phi i32 [ %2149, %2148 ], [ %2614, %2613 ]
  %2623 = phi i32 [ %2150, %2148 ], [ %2620, %2613 ]
  %2624 = phi i32 [ %2156, %2148 ], [ %2616, %2613 ]
  %2625 = phi i32 [ %2155, %2148 ], [ %2617, %2613 ]
  %2626 = phi i32 [ %2154, %2148 ], [ %2618, %2613 ]
  %2627 = phi %struct.opj_mqc_state** [ %2153, %2148 ], [ %2619, %2613 ]
  %2628 = add nuw i32 %2151, 1
  %2629 = getelementptr inbounds i32, i32* %2152, i64 1
  %2630 = getelementptr inbounds i32, i32* %2157, i64 4
  %2631 = icmp ult i32 %2628, %2623
  br i1 %2631, label %2148, label %2632

2632:                                             ; preds = %2621
  %2633 = load i32, i32* %101, align 4
  br label %2634

2634:                                             ; preds = %2632, %2135
  %2635 = phi i32 [ %2136, %2135 ], [ %2633, %2632 ]
  %2636 = phi i32 [ %2137, %2135 ], [ %2622, %2632 ]
  %2637 = phi i32 [ %2138, %2135 ], [ %2623, %2632 ]
  %2638 = phi i32 [ 0, %2135 ], [ %2623, %2632 ]
  %2639 = phi i32* [ %2146, %2135 ], [ %2630, %2632 ]
  %2640 = phi i32 [ %2145, %2135 ], [ %2624, %2632 ]
  %2641 = phi i32 [ %2144, %2135 ], [ %2625, %2632 ]
  %2642 = phi i32 [ %2143, %2135 ], [ %2626, %2632 ]
  %2643 = phi %struct.opj_mqc_state** [ %2142, %2135 ], [ %2627, %2632 ]
  %2644 = phi i32* [ %2141, %2135 ], [ %2629, %2632 ]
  %2645 = add nuw i32 %2140, 4
  %2646 = getelementptr inbounds i32, i32* %2644, i64 2
  %2647 = and i32 %2635, -4
  %2648 = icmp ult i32 %2645, %2647
  br i1 %2648, label %2135, label %2649

2649:                                             ; preds = %2634, %2114
  %2650 = phi i32 [ %2118, %2114 ], [ %2637, %2634 ]
  %2651 = phi i32 [ 0, %2114 ], [ %2636, %2634 ]
  %2652 = phi i32* [ %2126, %2114 ], [ %2639, %2634 ]
  %2653 = phi i32 [ %2125, %2114 ], [ %2640, %2634 ]
  %2654 = phi i32 [ %2124, %2114 ], [ %2641, %2634 ]
  %2655 = phi i32 [ %2123, %2114 ], [ %2642, %2634 ]
  %2656 = phi %struct.opj_mqc_state** [ %2122, %2114 ], [ %2643, %2634 ]
  %2657 = phi i32* [ %2121, %2114 ], [ %2646, %2634 ]
  %2658 = phi i32 [ 0, %2114 ], [ %2645, %2634 ]
  %2659 = phi i32 [ %2127, %2114 ], [ %2635, %2634 ]
  %2660 = icmp ugt i32 %2659, %2658
  br i1 %2660, label %2661, label %2829

2661:                                             ; preds = %2649
  %2662 = sub i32 %2659, %2658
  %2663 = icmp eq i32 %2650, 0
  br i1 %2663, label %2829, label %2664

2664:                                             ; preds = %2661
  %2665 = icmp eq i32 %2662, 0
  %2666 = icmp eq i32 %644, 0
  %2667 = zext i32 %2662 to i64
  %2668 = select i1 %2666, [128 x i16]* @lut_nmsedec_ref0, [128 x i16]* @lut_nmsedec_ref
  br label %2669

2669:                                             ; preds = %2818, %2664
  %2670 = phi i32 [ %2651, %2664 ], [ %2819, %2818 ]
  %2671 = phi i32 [ %2650, %2664 ], [ %2820, %2818 ]
  %2672 = phi i32 [ 0, %2664 ], [ %2826, %2818 ]
  %2673 = phi i32* [ %2657, %2664 ], [ %2827, %2818 ]
  %2674 = phi %struct.opj_mqc_state** [ %2656, %2664 ], [ %2825, %2818 ]
  %2675 = phi i32 [ %2655, %2664 ], [ %2824, %2818 ]
  %2676 = phi i32 [ %2654, %2664 ], [ %2823, %2818 ]
  %2677 = phi i32 [ %2653, %2664 ], [ %2822, %2818 ]
  %2678 = phi i32* [ %2652, %2664 ], [ %2821, %2818 ]
  %2679 = load i32, i32* %2673, align 4
  %2680 = and i32 %2679, 9360
  %2681 = icmp eq i32 %2680, 0
  br i1 %2681, label %2683, label %2682

2682:                                             ; preds = %2669
  br i1 %2665, label %2818, label %2685

2683:                                             ; preds = %2669
  %2684 = getelementptr inbounds i32, i32* %2678, i64 %2667
  br label %2818

2685:                                             ; preds = %2682, %2806
  %2686 = phi i32 [ %2807, %2806 ], [ %2670, %2682 ]
  %2687 = phi i32 [ %2808, %2806 ], [ %2679, %2682 ]
  %2688 = phi i32 [ %2813, %2806 ], [ 0, %2682 ]
  %2689 = phi %struct.opj_mqc_state** [ %2812, %2806 ], [ %2674, %2682 ]
  %2690 = phi i32 [ %2811, %2806 ], [ %2675, %2682 ]
  %2691 = phi i32 [ %2810, %2806 ], [ %2676, %2682 ]
  %2692 = phi i32 [ %2809, %2806 ], [ %2677, %2682 ]
  %2693 = phi i32* [ %2814, %2806 ], [ %2678, %2682 ]
  %2694 = mul i32 %2688, 3
  %2695 = shl i32 2097168, %2694
  %2696 = and i32 %2695, %2687
  %2697 = shl i32 16, %2694
  %2698 = icmp eq i32 %2696, %2697
  br i1 %2698, label %2699, label %2806

2699:                                             ; preds = %2685
  %2700 = lshr i32 %2687, %2694
  %2701 = and i32 %2700, 495
  %2702 = icmp eq i32 %2701, 0
  %2703 = select i1 %2702, i64 14, i64 15
  %2704 = and i32 %2700, 1048576
  %2705 = icmp eq i32 %2704, 0
  %2706 = select i1 %2705, i64 %2703, i64 16
  %2707 = load i32, i32* %2693, align 4
  %2708 = and i32 %2707, 2147483647
  %2709 = lshr i32 %2708, %644
  %2710 = select i1 %2666, i32 %2707, i32 %2709
  %2711 = and i32 %2710, 127
  %2712 = zext i32 %2711 to i64
  %2713 = getelementptr inbounds [128 x i16], [128 x i16]* %2668, i64 0, i64 %2712
  %2714 = load i16, i16* %2713, align 2
  %2715 = sext i16 %2714 to i32
  %2716 = add nsw i32 %2686, %2715
  %2717 = and i32 %2708, %2116
  %2718 = icmp ne i32 %2717, 0
  %2719 = zext i1 %2718 to i32
  %2720 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %2706
  br i1 %655, label %2721, label %2736

2721:                                             ; preds = %2699
  %2722 = icmp eq i32 %2692, -559038737
  %2723 = add i32 %2692, -1
  %2724 = select i1 %2722, i32 7, i32 %2723
  %2725 = shl i32 %2719, %2724
  %2726 = add i32 %2725, %2690
  %2727 = icmp eq i32 %2724, 0
  br i1 %2727, label %2728, label %2799

2728:                                             ; preds = %2721
  %2729 = trunc i32 %2726 to i8
  %2730 = load i8*, i8** %621, align 8
  store i8 %2729, i8* %2730, align 1
  %2731 = load i8*, i8** %621, align 8
  %2732 = load i8, i8* %2731, align 1
  %2733 = icmp eq i8 %2732, -1
  %2734 = select i1 %2733, i32 7, i32 8
  %2735 = getelementptr inbounds i8, i8* %2731, i64 1
  store i8* %2735, i8** %621, align 8
  br label %2799

2736:                                             ; preds = %2699
  %2737 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2720, align 8
  %2738 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2737, i64 0, i32 1
  %2739 = load i32, i32* %2738, align 4
  %2740 = icmp eq i32 %2739, %2719
  %2741 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2737, i64 0, i32 0
  %2742 = load i32, i32* %2741, align 8
  %2743 = sub i32 %2691, %2742
  br i1 %2740, label %2744, label %2774

2744:                                             ; preds = %2736
  %2745 = trunc i32 %2743 to i16
  %2746 = icmp sgt i16 %2745, -1
  br i1 %2746, label %2747, label %2772

2747:                                             ; preds = %2744
  %2748 = icmp ult i32 %2743, %2742
  %2749 = select i1 %2748, i32 %2742, i32 %2743
  %2750 = select i1 %2748, i32 0, i32 %2742
  %2751 = add i32 %2750, %2690
  %2752 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2737, i64 0, i32 2
  %2753 = bitcast %struct.opj_mqc_state** %2752 to i64*
  %2754 = load i64, i64* %2753, align 8
  %2755 = bitcast %struct.opj_mqc_state** %2720 to i64*
  store i64 %2754, i64* %2755, align 8
  br label %2756

2756:                                             ; preds = %2767, %2747
  %2757 = phi i32 [ %2692, %2747 ], [ %2768, %2767 ]
  %2758 = phi i32 [ %2749, %2747 ], [ %2760, %2767 ]
  %2759 = phi i32 [ %2751, %2747 ], [ %2769, %2767 ]
  %2760 = shl i32 %2758, 1
  %2761 = shl i32 %2759, 1
  %2762 = add i32 %2757, -1
  %2763 = icmp eq i32 %2762, 0
  br i1 %2763, label %2764, label %2767

2764:                                             ; preds = %2756
  store i32 %2761, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2765 = load i32, i32* %609, align 8
  %2766 = load i32, i32* %611, align 8
  br label %2767

2767:                                             ; preds = %2764, %2756
  %2768 = phi i32 [ %2766, %2764 ], [ %2762, %2756 ]
  %2769 = phi i32 [ %2765, %2764 ], [ %2761, %2756 ]
  %2770 = and i32 %2758, 16384
  %2771 = icmp eq i32 %2770, 0
  br i1 %2771, label %2756, label %2799

2772:                                             ; preds = %2744
  %2773 = add i32 %2742, %2690
  br label %2799

2774:                                             ; preds = %2736
  %2775 = icmp ult i32 %2743, %2742
  %2776 = select i1 %2775, i32 %2743, i32 %2742
  %2777 = select i1 %2775, i32 %2742, i32 0
  %2778 = add i32 %2777, %2690
  %2779 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2737, i64 0, i32 3
  %2780 = bitcast %struct.opj_mqc_state** %2779 to i64*
  %2781 = load i64, i64* %2780, align 8
  %2782 = bitcast %struct.opj_mqc_state** %2720 to i64*
  store i64 %2781, i64* %2782, align 8
  br label %2783

2783:                                             ; preds = %2794, %2774
  %2784 = phi i32 [ %2692, %2774 ], [ %2795, %2794 ]
  %2785 = phi i32 [ %2776, %2774 ], [ %2787, %2794 ]
  %2786 = phi i32 [ %2778, %2774 ], [ %2796, %2794 ]
  %2787 = shl i32 %2785, 1
  %2788 = shl i32 %2786, 1
  %2789 = add i32 %2784, -1
  %2790 = icmp eq i32 %2789, 0
  br i1 %2790, label %2791, label %2794

2791:                                             ; preds = %2783
  store i32 %2788, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2792 = load i32, i32* %609, align 8
  %2793 = load i32, i32* %611, align 8
  br label %2794

2794:                                             ; preds = %2791, %2783
  %2795 = phi i32 [ %2793, %2791 ], [ %2789, %2783 ]
  %2796 = phi i32 [ %2792, %2791 ], [ %2788, %2783 ]
  %2797 = and i32 %2785, 16384
  %2798 = icmp eq i32 %2797, 0
  br i1 %2798, label %2783, label %2799

2799:                                             ; preds = %2794, %2767, %2772, %2728, %2721
  %2800 = phi i32 [ %2734, %2728 ], [ %2724, %2721 ], [ %2692, %2772 ], [ %2768, %2767 ], [ %2795, %2794 ]
  %2801 = phi i32 [ %2691, %2728 ], [ %2691, %2721 ], [ %2743, %2772 ], [ %2760, %2767 ], [ %2787, %2794 ]
  %2802 = phi i32 [ 0, %2728 ], [ %2726, %2721 ], [ %2773, %2772 ], [ %2769, %2767 ], [ %2796, %2794 ]
  %2803 = shl i32 1048576, %2694
  %2804 = load i32, i32* %2673, align 4
  %2805 = or i32 %2804, %2803
  store i32 %2805, i32* %2673, align 4
  br label %2806

2806:                                             ; preds = %2799, %2685
  %2807 = phi i32 [ %2716, %2799 ], [ %2686, %2685 ]
  %2808 = phi i32 [ %2805, %2799 ], [ %2687, %2685 ]
  %2809 = phi i32 [ %2800, %2799 ], [ %2692, %2685 ]
  %2810 = phi i32 [ %2801, %2799 ], [ %2691, %2685 ]
  %2811 = phi i32 [ %2802, %2799 ], [ %2690, %2685 ]
  %2812 = phi %struct.opj_mqc_state** [ %2720, %2799 ], [ %2689, %2685 ]
  %2813 = add nuw i32 %2688, 1
  %2814 = getelementptr inbounds i32, i32* %2693, i64 1
  %2815 = icmp eq i32 %2813, %2662
  br i1 %2815, label %2816, label %2685

2816:                                             ; preds = %2806
  %2817 = load i32, i32* %99, align 8
  br label %2818

2818:                                             ; preds = %2816, %2683, %2682
  %2819 = phi i32 [ %2670, %2683 ], [ %2670, %2682 ], [ %2807, %2816 ]
  %2820 = phi i32 [ %2671, %2683 ], [ %2671, %2682 ], [ %2817, %2816 ]
  %2821 = phi i32* [ %2684, %2683 ], [ %2678, %2682 ], [ %2814, %2816 ]
  %2822 = phi i32 [ %2677, %2683 ], [ %2677, %2682 ], [ %2809, %2816 ]
  %2823 = phi i32 [ %2676, %2683 ], [ %2676, %2682 ], [ %2810, %2816 ]
  %2824 = phi i32 [ %2675, %2683 ], [ %2675, %2682 ], [ %2811, %2816 ]
  %2825 = phi %struct.opj_mqc_state** [ %2674, %2683 ], [ %2674, %2682 ], [ %2812, %2816 ]
  %2826 = add nuw i32 %2672, 1
  %2827 = getelementptr inbounds i32, i32* %2673, i64 1
  %2828 = icmp ult i32 %2826, %2820
  br i1 %2828, label %2669, label %2829

2829:                                             ; preds = %2818, %2661, %2649
  %2830 = phi i32 [ %2651, %2661 ], [ %2651, %2649 ], [ %2819, %2818 ]
  %2831 = phi i32 [ %2653, %2661 ], [ %2653, %2649 ], [ %2822, %2818 ]
  %2832 = phi i32 [ %2654, %2661 ], [ %2654, %2649 ], [ %2823, %2818 ]
  %2833 = phi i32 [ %2655, %2661 ], [ %2655, %2649 ], [ %2824, %2818 ]
  %2834 = phi %struct.opj_mqc_state** [ %2656, %2661 ], [ %2656, %2649 ], [ %2825, %2818 ]
  store %struct.opj_mqc_state** %2834, %struct.opj_mqc_state*** %608, align 8
  store i32 %2833, i32* %609, align 8
  store i32 %2832, i32* %610, align 4
  store i32 %2831, i32* %611, align 8
  br label %3750

2835:                                             ; preds = %667
  %2836 = add nuw nsw i32 %644, 6
  %2837 = shl i32 1, %2836
  %2838 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %608, align 8
  %2839 = load i32, i32* %609, align 8
  %2840 = load i32, i32* %610, align 4
  %2841 = load i32, i32* %611, align 8
  %2842 = load i32*, i32** %114, align 8
  %2843 = load i32*, i32** %612, align 8
  %2844 = load i32, i32* %99, align 8
  %2845 = add i32 %2844, 3
  %2846 = zext i32 %2845 to i64
  %2847 = getelementptr inbounds i32, i32* %2843, i64 %2846
  %2848 = load i32, i32* %101, align 4
  %2849 = icmp ugt i32 %2848, 3
  br i1 %2849, label %2850, label %3414

2850:                                             ; preds = %2835
  %2851 = and i32 %2837, 2147483647
  %2852 = icmp eq i32 %644, 0
  %2853 = select i1 %2852, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  br label %2854

2854:                                             ; preds = %3399, %2850
  %2855 = phi i32 [ %2844, %2850 ], [ %3400, %3399 ]
  %2856 = phi i32 [ %2848, %2850 ], [ %3401, %3399 ]
  %2857 = phi i32 [ 0, %2850 ], [ %3402, %3399 ]
  %2858 = phi i32 [ %2844, %2850 ], [ %3403, %3399 ]
  %2859 = phi i32 [ 0, %2850 ], [ %3410, %3399 ]
  %2860 = phi %struct.opj_mqc_state** [ %2838, %2850 ], [ %3409, %3399 ]
  %2861 = phi i32 [ %2839, %2850 ], [ %3408, %3399 ]
  %2862 = phi i32 [ %2840, %2850 ], [ %3407, %3399 ]
  %2863 = phi i32 [ %2841, %2850 ], [ %3406, %3399 ]
  %2864 = phi i32* [ %2842, %2850 ], [ %3405, %3399 ]
  %2865 = phi i32* [ %2847, %2850 ], [ %3411, %3399 ]
  %2866 = icmp eq i32 %2858, 0
  br i1 %2866, label %3399, label %2867

2867:                                             ; preds = %2854, %3386
  %2868 = phi i32 [ %3387, %3386 ], [ %2857, %2854 ]
  %2869 = phi i32 [ %3393, %3386 ], [ 0, %2854 ]
  %2870 = phi %struct.opj_mqc_state** [ %3392, %3386 ], [ %2860, %2854 ]
  %2871 = phi i32 [ %3391, %3386 ], [ %2861, %2854 ]
  %2872 = phi i32 [ %3390, %3386 ], [ %2862, %2854 ]
  %2873 = phi i32 [ %3389, %3386 ], [ %2863, %2854 ]
  %2874 = phi i32* [ %3388, %3386 ], [ %2864, %2854 ]
  %2875 = phi i32* [ %3394, %3386 ], [ %2865, %2854 ]
  %2876 = load i32, i32* %2875, align 4
  %2877 = icmp eq i32 %2876, 0
  br i1 %2877, label %2878, label %3084

2878:                                             ; preds = %2867
  %2879 = load i32, i32* %2874, align 4
  %2880 = and i32 %2879, %2851
  %2881 = icmp eq i32 %2880, 0
  br i1 %2881, label %2882, label %2887

2882:                                             ; preds = %2878
  %2883 = getelementptr inbounds i32, i32* %2874, i64 1
  %2884 = load i32, i32* %2883, align 4
  %2885 = and i32 %2884, %2851
  %2886 = icmp eq i32 %2885, 0
  br i1 %2886, label %3730, label %2887

2887:                                             ; preds = %3735, %3730, %2882, %2878
  %2888 = phi i32 [ 0, %2878 ], [ 1, %2882 ], [ 2, %3730 ], [ %3741, %3735 ]
  %2889 = phi i32* [ %2874, %2878 ], [ %2883, %2882 ], [ %3731, %3730 ], [ %3742, %3735 ]
  %2890 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %613, align 8
  %2891 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2890, i64 0, i32 1
  %2892 = load i32, i32* %2891, align 4
  %2893 = icmp ne i32 %2888, 4
  %2894 = zext i1 %2893 to i32
  %2895 = icmp eq i32 %2892, %2894
  %2896 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2890, i64 0, i32 0
  %2897 = load i32, i32* %2896, align 8
  %2898 = sub i32 %2872, %2897
  br i1 %2895, label %2899, label %2928

2899:                                             ; preds = %2887
  %2900 = trunc i32 %2898 to i16
  %2901 = icmp sgt i16 %2900, -1
  br i1 %2901, label %2902, label %2926

2902:                                             ; preds = %2899
  %2903 = icmp ult i32 %2898, %2897
  %2904 = select i1 %2903, i32 %2897, i32 %2898
  %2905 = select i1 %2903, i32 0, i32 %2897
  %2906 = add i32 %2905, %2871
  %2907 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2890, i64 0, i32 2
  %2908 = bitcast %struct.opj_mqc_state** %2907 to i64*
  %2909 = load i64, i64* %2908, align 8
  store i64 %2909, i64* %614, align 8
  br label %2910

2910:                                             ; preds = %2921, %2902
  %2911 = phi i32 [ %2873, %2902 ], [ %2922, %2921 ]
  %2912 = phi i32 [ %2904, %2902 ], [ %2914, %2921 ]
  %2913 = phi i32 [ %2906, %2902 ], [ %2923, %2921 ]
  %2914 = shl i32 %2912, 1
  %2915 = shl i32 %2913, 1
  %2916 = add i32 %2911, -1
  %2917 = icmp eq i32 %2916, 0
  br i1 %2917, label %2918, label %2921

2918:                                             ; preds = %2910
  store i32 %2915, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2919 = load i32, i32* %609, align 8
  %2920 = load i32, i32* %611, align 8
  br label %2921

2921:                                             ; preds = %2918, %2910
  %2922 = phi i32 [ %2920, %2918 ], [ %2916, %2910 ]
  %2923 = phi i32 [ %2919, %2918 ], [ %2915, %2910 ]
  %2924 = and i32 %2912, 16384
  %2925 = icmp eq i32 %2924, 0
  br i1 %2925, label %2910, label %2952

2926:                                             ; preds = %2899
  %2927 = add i32 %2897, %2871
  br label %2952

2928:                                             ; preds = %2887
  %2929 = icmp ult i32 %2898, %2897
  %2930 = select i1 %2929, i32 %2898, i32 %2897
  %2931 = select i1 %2929, i32 %2897, i32 0
  %2932 = add i32 %2931, %2871
  %2933 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2890, i64 0, i32 3
  %2934 = bitcast %struct.opj_mqc_state** %2933 to i64*
  %2935 = load i64, i64* %2934, align 8
  store i64 %2935, i64* %614, align 8
  br label %2936

2936:                                             ; preds = %2947, %2928
  %2937 = phi i32 [ %2873, %2928 ], [ %2948, %2947 ]
  %2938 = phi i32 [ %2930, %2928 ], [ %2940, %2947 ]
  %2939 = phi i32 [ %2932, %2928 ], [ %2949, %2947 ]
  %2940 = shl i32 %2938, 1
  %2941 = shl i32 %2939, 1
  %2942 = add i32 %2937, -1
  %2943 = icmp eq i32 %2942, 0
  br i1 %2943, label %2944, label %2947

2944:                                             ; preds = %2936
  store i32 %2941, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2945 = load i32, i32* %609, align 8
  %2946 = load i32, i32* %611, align 8
  br label %2947

2947:                                             ; preds = %2944, %2936
  %2948 = phi i32 [ %2946, %2944 ], [ %2942, %2936 ]
  %2949 = phi i32 [ %2945, %2944 ], [ %2941, %2936 ]
  %2950 = and i32 %2938, 16384
  %2951 = icmp eq i32 %2950, 0
  br i1 %2951, label %2936, label %2952

2952:                                             ; preds = %2947, %2921, %2926
  %2953 = phi i32 [ %2873, %2926 ], [ %2922, %2921 ], [ %2948, %2947 ]
  %2954 = phi i32 [ %2898, %2926 ], [ %2914, %2921 ], [ %2940, %2947 ]
  %2955 = phi i32 [ %2927, %2926 ], [ %2923, %2921 ], [ %2949, %2947 ]
  %2956 = icmp eq i32 %2888, 4
  br i1 %2956, label %3386, label %2957

2957:                                             ; preds = %2952
  %2958 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %615, align 8
  %2959 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2958, i64 0, i32 1
  %2960 = load i32, i32* %2959, align 4
  %2961 = lshr i32 %2888, 1
  %2962 = icmp eq i32 %2960, %2961
  %2963 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2958, i64 0, i32 0
  %2964 = load i32, i32* %2963, align 8
  %2965 = sub i32 %2954, %2964
  br i1 %2962, label %2966, label %2995

2966:                                             ; preds = %2957
  %2967 = trunc i32 %2965 to i16
  %2968 = icmp sgt i16 %2967, -1
  br i1 %2968, label %2969, label %2993

2969:                                             ; preds = %2966
  %2970 = icmp ult i32 %2965, %2964
  %2971 = select i1 %2970, i32 %2964, i32 %2965
  %2972 = select i1 %2970, i32 0, i32 %2964
  %2973 = add i32 %2972, %2955
  %2974 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2958, i64 0, i32 2
  %2975 = bitcast %struct.opj_mqc_state** %2974 to i64*
  %2976 = load i64, i64* %2975, align 8
  store i64 %2976, i64* %616, align 8
  br label %2977

2977:                                             ; preds = %2988, %2969
  %2978 = phi i32 [ %2953, %2969 ], [ %2989, %2988 ]
  %2979 = phi i32 [ %2971, %2969 ], [ %2981, %2988 ]
  %2980 = phi i32 [ %2973, %2969 ], [ %2990, %2988 ]
  %2981 = shl i32 %2979, 1
  %2982 = shl i32 %2980, 1
  %2983 = add i32 %2978, -1
  %2984 = icmp eq i32 %2983, 0
  br i1 %2984, label %2985, label %2988

2985:                                             ; preds = %2977
  store i32 %2982, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %2986 = load i32, i32* %609, align 8
  %2987 = load i32, i32* %611, align 8
  br label %2988

2988:                                             ; preds = %2985, %2977
  %2989 = phi i32 [ %2987, %2985 ], [ %2983, %2977 ]
  %2990 = phi i32 [ %2986, %2985 ], [ %2982, %2977 ]
  %2991 = and i32 %2979, 16384
  %2992 = icmp eq i32 %2991, 0
  br i1 %2992, label %2977, label %3019

2993:                                             ; preds = %2966
  %2994 = add i32 %2964, %2955
  br label %3019

2995:                                             ; preds = %2957
  %2996 = icmp ult i32 %2965, %2964
  %2997 = select i1 %2996, i32 %2965, i32 %2964
  %2998 = select i1 %2996, i32 %2964, i32 0
  %2999 = add i32 %2998, %2955
  %3000 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2958, i64 0, i32 3
  %3001 = bitcast %struct.opj_mqc_state** %3000 to i64*
  %3002 = load i64, i64* %3001, align 8
  store i64 %3002, i64* %616, align 8
  br label %3003

3003:                                             ; preds = %3014, %2995
  %3004 = phi i32 [ %2953, %2995 ], [ %3015, %3014 ]
  %3005 = phi i32 [ %2997, %2995 ], [ %3007, %3014 ]
  %3006 = phi i32 [ %2999, %2995 ], [ %3016, %3014 ]
  %3007 = shl i32 %3005, 1
  %3008 = shl i32 %3006, 1
  %3009 = add i32 %3004, -1
  %3010 = icmp eq i32 %3009, 0
  br i1 %3010, label %3011, label %3014

3011:                                             ; preds = %3003
  store i32 %3008, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3012 = load i32, i32* %609, align 8
  %3013 = load i32, i32* %611, align 8
  br label %3014

3014:                                             ; preds = %3011, %3003
  %3015 = phi i32 [ %3013, %3011 ], [ %3009, %3003 ]
  %3016 = phi i32 [ %3012, %3011 ], [ %3008, %3003 ]
  %3017 = and i32 %3005, 16384
  %3018 = icmp eq i32 %3017, 0
  br i1 %3018, label %3003, label %3019

3019:                                             ; preds = %3014, %2988, %2993
  %3020 = phi i32 [ %2953, %2993 ], [ %2989, %2988 ], [ %3015, %3014 ]
  %3021 = phi i32 [ %2965, %2993 ], [ %2981, %2988 ], [ %3007, %3014 ]
  %3022 = phi i32 [ %2994, %2993 ], [ %2990, %2988 ], [ %3016, %3014 ]
  %3023 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %615, align 8
  %3024 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3023, i64 0, i32 1
  %3025 = load i32, i32* %3024, align 4
  %3026 = and i32 %2888, 1
  %3027 = icmp eq i32 %3025, %3026
  %3028 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3023, i64 0, i32 0
  %3029 = load i32, i32* %3028, align 8
  %3030 = sub i32 %3021, %3029
  br i1 %3027, label %3031, label %3060

3031:                                             ; preds = %3019
  %3032 = trunc i32 %3030 to i16
  %3033 = icmp sgt i16 %3032, -1
  br i1 %3033, label %3034, label %3058

3034:                                             ; preds = %3031
  %3035 = icmp ult i32 %3030, %3029
  %3036 = select i1 %3035, i32 %3029, i32 %3030
  %3037 = select i1 %3035, i32 0, i32 %3029
  %3038 = add i32 %3037, %3022
  %3039 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3023, i64 0, i32 2
  %3040 = bitcast %struct.opj_mqc_state** %3039 to i64*
  %3041 = load i64, i64* %3040, align 8
  store i64 %3041, i64* %616, align 8
  br label %3042

3042:                                             ; preds = %3053, %3034
  %3043 = phi i32 [ %3020, %3034 ], [ %3054, %3053 ]
  %3044 = phi i32 [ %3036, %3034 ], [ %3046, %3053 ]
  %3045 = phi i32 [ %3038, %3034 ], [ %3055, %3053 ]
  %3046 = shl i32 %3044, 1
  %3047 = shl i32 %3045, 1
  %3048 = add i32 %3043, -1
  %3049 = icmp eq i32 %3048, 0
  br i1 %3049, label %3050, label %3053

3050:                                             ; preds = %3042
  store i32 %3047, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3051 = load i32, i32* %609, align 8
  %3052 = load i32, i32* %611, align 8
  br label %3053

3053:                                             ; preds = %3050, %3042
  %3054 = phi i32 [ %3052, %3050 ], [ %3048, %3042 ]
  %3055 = phi i32 [ %3051, %3050 ], [ %3047, %3042 ]
  %3056 = and i32 %3044, 16384
  %3057 = icmp eq i32 %3056, 0
  br i1 %3057, label %3042, label %3084

3058:                                             ; preds = %3031
  %3059 = add i32 %3029, %3022
  br label %3084

3060:                                             ; preds = %3019
  %3061 = icmp ult i32 %3030, %3029
  %3062 = select i1 %3061, i32 %3030, i32 %3029
  %3063 = select i1 %3061, i32 %3029, i32 0
  %3064 = add i32 %3063, %3022
  %3065 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3023, i64 0, i32 3
  %3066 = bitcast %struct.opj_mqc_state** %3065 to i64*
  %3067 = load i64, i64* %3066, align 8
  store i64 %3067, i64* %616, align 8
  br label %3068

3068:                                             ; preds = %3079, %3060
  %3069 = phi i32 [ %3020, %3060 ], [ %3080, %3079 ]
  %3070 = phi i32 [ %3062, %3060 ], [ %3072, %3079 ]
  %3071 = phi i32 [ %3064, %3060 ], [ %3081, %3079 ]
  %3072 = shl i32 %3070, 1
  %3073 = shl i32 %3071, 1
  %3074 = add i32 %3069, -1
  %3075 = icmp eq i32 %3074, 0
  br i1 %3075, label %3076, label %3079

3076:                                             ; preds = %3068
  store i32 %3073, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3077 = load i32, i32* %609, align 8
  %3078 = load i32, i32* %611, align 8
  br label %3079

3079:                                             ; preds = %3076, %3068
  %3080 = phi i32 [ %3078, %3076 ], [ %3074, %3068 ]
  %3081 = phi i32 [ %3077, %3076 ], [ %3073, %3068 ]
  %3082 = and i32 %3070, 16384
  %3083 = icmp eq i32 %3082, 0
  br i1 %3083, label %3068, label %3084

3084:                                             ; preds = %3079, %3053, %3058, %2867
  %3085 = phi i32 [ %2888, %3058 ], [ 0, %2867 ], [ %2888, %3053 ], [ %2888, %3079 ]
  %3086 = phi i32* [ %2889, %3058 ], [ %2874, %2867 ], [ %2889, %3053 ], [ %2889, %3079 ]
  %3087 = phi i32 [ %3020, %3058 ], [ %2873, %2867 ], [ %3054, %3053 ], [ %3080, %3079 ]
  %3088 = phi i32 [ %3030, %3058 ], [ %2872, %2867 ], [ %3046, %3053 ], [ %3072, %3079 ]
  %3089 = phi i32 [ %3059, %3058 ], [ %2871, %2867 ], [ %3055, %3053 ], [ %3081, %3079 ]
  %3090 = phi %struct.opj_mqc_state** [ %615, %3058 ], [ %2870, %2867 ], [ %615, %3053 ], [ %615, %3079 ]
  %3091 = load i32, i32* %2875, align 4
  %3092 = and i32 %3091, 1226843280
  %3093 = icmp eq i32 %3092, 1226843280
  br i1 %3093, label %3099, label %3094

3094:                                             ; preds = %3084
  %3095 = icmp ult i32 %3085, 4
  br i1 %3095, label %3096, label %3377

3096:                                             ; preds = %3094
  %3097 = getelementptr inbounds i32, i32* %2875, i64 -1
  %3098 = getelementptr inbounds i32, i32* %2875, i64 1
  br label %3108

3099:                                             ; preds = %3084
  switch i32 %3085, label %3377 [
    i32 0, label %3100
    i32 1, label %3102
    i32 2, label %3104
    i32 3, label %3106
  ]

3100:                                             ; preds = %3099
  %3101 = and i32 %3091, -1226833921
  store i32 %3101, i32* %2875, align 4
  br label %3377

3102:                                             ; preds = %3099
  %3103 = and i32 %3091, -1224736769
  store i32 %3103, i32* %2875, align 4
  br label %3377

3104:                                             ; preds = %3099
  %3105 = and i32 %3091, -1207959553
  store i32 %3105, i32* %2875, align 4
  br label %3377

3106:                                             ; preds = %3099
  %3107 = and i32 %3091, -1073741825
  store i32 %3107, i32* %2875, align 4
  br label %3377

3108:                                             ; preds = %3364, %3096
  %3109 = phi i32 [ %2868, %3096 ], [ %3365, %3364 ]
  %3110 = phi i32 [ %3091, %3096 ], [ %3373, %3364 ]
  %3111 = phi %struct.opj_mqc_state** [ %3090, %3096 ], [ %3369, %3364 ]
  %3112 = phi i32 [ %3089, %3096 ], [ %3368, %3364 ]
  %3113 = phi i32 [ %3088, %3096 ], [ %3367, %3364 ]
  %3114 = phi i32 [ %3087, %3096 ], [ %3366, %3364 ]
  %3115 = phi i32* [ %3086, %3096 ], [ %3374, %3364 ]
  %3116 = phi i32 [ %3085, %3096 ], [ %3375, %3364 ]
  %3117 = icmp eq i32 %3116, %3085
  %3118 = and i1 %2877, %3117
  %3119 = mul nuw nsw i32 %3116, 3
  br i1 %3118, label %3205, label %3120

3120:                                             ; preds = %3108
  %3121 = shl i32 2097168, %3119
  %3122 = and i32 %3121, %3110
  %3123 = icmp eq i32 %3122, 0
  br i1 %3123, label %3124, label %3364

3124:                                             ; preds = %3120
  %3125 = lshr i32 %3110, %3119
  %3126 = load i8*, i8** %514, align 8
  %3127 = and i32 %3125, 495
  %3128 = zext i32 %3127 to i64
  %3129 = getelementptr inbounds i8, i8* %3126, i64 %3128
  %3130 = load i8, i8* %3129, align 1
  %3131 = zext i8 %3130 to i64
  %3132 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %3131
  %3133 = load i32, i32* %3115, align 4
  %3134 = and i32 %3133, %2851
  %3135 = icmp ne i32 %3134, 0
  %3136 = zext i1 %3135 to i32
  %3137 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3132, align 8
  %3138 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3137, i64 0, i32 1
  %3139 = load i32, i32* %3138, align 4
  %3140 = icmp eq i32 %3139, %3136
  %3141 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3137, i64 0, i32 0
  %3142 = load i32, i32* %3141, align 8
  %3143 = sub i32 %3113, %3142
  br i1 %3140, label %3144, label %3174

3144:                                             ; preds = %3124
  %3145 = trunc i32 %3143 to i16
  %3146 = icmp sgt i16 %3145, -1
  br i1 %3146, label %3147, label %3172

3147:                                             ; preds = %3144
  %3148 = icmp ult i32 %3143, %3142
  %3149 = select i1 %3148, i32 %3142, i32 %3143
  %3150 = select i1 %3148, i32 0, i32 %3142
  %3151 = add i32 %3150, %3112
  %3152 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3137, i64 0, i32 2
  %3153 = bitcast %struct.opj_mqc_state** %3152 to i64*
  %3154 = load i64, i64* %3153, align 8
  %3155 = bitcast %struct.opj_mqc_state** %3132 to i64*
  store i64 %3154, i64* %3155, align 8
  br label %3156

3156:                                             ; preds = %3167, %3147
  %3157 = phi i32 [ %3114, %3147 ], [ %3168, %3167 ]
  %3158 = phi i32 [ %3149, %3147 ], [ %3160, %3167 ]
  %3159 = phi i32 [ %3151, %3147 ], [ %3169, %3167 ]
  %3160 = shl i32 %3158, 1
  %3161 = shl i32 %3159, 1
  %3162 = add i32 %3157, -1
  %3163 = icmp eq i32 %3162, 0
  br i1 %3163, label %3164, label %3167

3164:                                             ; preds = %3156
  store i32 %3161, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3165 = load i32, i32* %609, align 8
  %3166 = load i32, i32* %611, align 8
  br label %3167

3167:                                             ; preds = %3164, %3156
  %3168 = phi i32 [ %3166, %3164 ], [ %3162, %3156 ]
  %3169 = phi i32 [ %3165, %3164 ], [ %3161, %3156 ]
  %3170 = and i32 %3158, 16384
  %3171 = icmp eq i32 %3170, 0
  br i1 %3171, label %3156, label %3199

3172:                                             ; preds = %3144
  %3173 = add i32 %3142, %3112
  br label %3199

3174:                                             ; preds = %3124
  %3175 = icmp ult i32 %3143, %3142
  %3176 = select i1 %3175, i32 %3143, i32 %3142
  %3177 = select i1 %3175, i32 %3142, i32 0
  %3178 = add i32 %3177, %3112
  %3179 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3137, i64 0, i32 3
  %3180 = bitcast %struct.opj_mqc_state** %3179 to i64*
  %3181 = load i64, i64* %3180, align 8
  %3182 = bitcast %struct.opj_mqc_state** %3132 to i64*
  store i64 %3181, i64* %3182, align 8
  br label %3183

3183:                                             ; preds = %3194, %3174
  %3184 = phi i32 [ %3114, %3174 ], [ %3195, %3194 ]
  %3185 = phi i32 [ %3176, %3174 ], [ %3187, %3194 ]
  %3186 = phi i32 [ %3178, %3174 ], [ %3196, %3194 ]
  %3187 = shl i32 %3185, 1
  %3188 = shl i32 %3186, 1
  %3189 = add i32 %3184, -1
  %3190 = icmp eq i32 %3189, 0
  br i1 %3190, label %3191, label %3194

3191:                                             ; preds = %3183
  store i32 %3188, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3192 = load i32, i32* %609, align 8
  %3193 = load i32, i32* %611, align 8
  br label %3194

3194:                                             ; preds = %3191, %3183
  %3195 = phi i32 [ %3193, %3191 ], [ %3189, %3183 ]
  %3196 = phi i32 [ %3192, %3191 ], [ %3188, %3183 ]
  %3197 = and i32 %3185, 16384
  %3198 = icmp eq i32 %3197, 0
  br i1 %3198, label %3183, label %3199

3199:                                             ; preds = %3194, %3167, %3172
  %3200 = phi i32 [ %3114, %3172 ], [ %3168, %3167 ], [ %3195, %3194 ]
  %3201 = phi i32 [ %3143, %3172 ], [ %3160, %3167 ], [ %3187, %3194 ]
  %3202 = phi i32 [ %3173, %3172 ], [ %3169, %3167 ], [ %3196, %3194 ]
  br i1 %3135, label %3203, label %3364

3203:                                             ; preds = %3199
  %3204 = load i32, i32* %2875, align 4
  br label %3205

3205:                                             ; preds = %3203, %3108
  %3206 = phi i32 [ %3204, %3203 ], [ %3110, %3108 ]
  %3207 = phi i32 [ %3200, %3203 ], [ %3114, %3108 ]
  %3208 = phi i32 [ %3201, %3203 ], [ %3113, %3108 ]
  %3209 = phi i32 [ %3202, %3203 ], [ %3112, %3108 ]
  %3210 = load i32, i32* %3097, align 4
  %3211 = load i32, i32* %3098, align 4
  %3212 = lshr i32 %3206, %3119
  %3213 = and i32 %3212, 170
  %3214 = add nuw nsw i32 %3119, 19
  %3215 = lshr i32 %3210, %3214
  %3216 = and i32 %3215, 1
  %3217 = add nuw nsw i32 %3119, 17
  %3218 = lshr i32 %3211, %3217
  %3219 = and i32 %3218, 4
  %3220 = icmp eq i32 %3116, 0
  %3221 = add nuw nsw i32 %3119, 12
  %3222 = select i1 %3220, i32 14, i32 %3221
  %3223 = lshr i32 %3206, %3222
  %3224 = and i32 %3223, 16
  %3225 = add nuw nsw i32 %3119, 16
  %3226 = lshr i32 %3206, %3225
  %3227 = and i32 %3226, 64
  %3228 = or i32 %3227, %3213
  %3229 = or i32 %3228, %3224
  %3230 = or i32 %3229, %3216
  %3231 = or i32 %3230, %3219
  %3232 = load i32, i32* %3115, align 4
  %3233 = and i32 %3232, 2147483647
  %3234 = lshr i32 %3233, %644
  %3235 = select i1 %2852, i32 %3232, i32 %3234
  %3236 = and i32 %3235, 127
  %3237 = zext i32 %3236 to i64
  %3238 = getelementptr inbounds [128 x i16], [128 x i16]* %2853, i64 0, i64 %3237
  %3239 = load i16, i16* %3238, align 2
  %3240 = sext i16 %3239 to i32
  %3241 = add nsw i32 %3109, %3240
  %3242 = zext i32 %3231 to i64
  %3243 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3242
  %3244 = load i8, i8* %3243, align 1
  %3245 = zext i8 %3244 to i64
  %3246 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %3245
  %3247 = lshr i32 %3232, 31
  %3248 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3242
  %3249 = load i8, i8* %3248, align 1
  %3250 = zext i8 %3249 to i32
  %3251 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3246, align 8
  %3252 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3251, i64 0, i32 1
  %3253 = load i32, i32* %3252, align 4
  %3254 = xor i32 %3247, %3250
  %3255 = icmp eq i32 %3253, %3254
  %3256 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3251, i64 0, i32 0
  %3257 = load i32, i32* %3256, align 8
  %3258 = sub i32 %3208, %3257
  br i1 %3255, label %3259, label %3289

3259:                                             ; preds = %3205
  %3260 = trunc i32 %3258 to i16
  %3261 = icmp sgt i16 %3260, -1
  br i1 %3261, label %3262, label %3287

3262:                                             ; preds = %3259
  %3263 = icmp ult i32 %3258, %3257
  %3264 = select i1 %3263, i32 %3257, i32 %3258
  %3265 = select i1 %3263, i32 0, i32 %3257
  %3266 = add i32 %3265, %3209
  %3267 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3251, i64 0, i32 2
  %3268 = bitcast %struct.opj_mqc_state** %3267 to i64*
  %3269 = load i64, i64* %3268, align 8
  %3270 = bitcast %struct.opj_mqc_state** %3246 to i64*
  store i64 %3269, i64* %3270, align 8
  br label %3271

3271:                                             ; preds = %3282, %3262
  %3272 = phi i32 [ %3207, %3262 ], [ %3283, %3282 ]
  %3273 = phi i32 [ %3264, %3262 ], [ %3275, %3282 ]
  %3274 = phi i32 [ %3266, %3262 ], [ %3284, %3282 ]
  %3275 = shl i32 %3273, 1
  %3276 = shl i32 %3274, 1
  %3277 = add i32 %3272, -1
  %3278 = icmp eq i32 %3277, 0
  br i1 %3278, label %3279, label %3282

3279:                                             ; preds = %3271
  store i32 %3276, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3280 = load i32, i32* %609, align 8
  %3281 = load i32, i32* %611, align 8
  br label %3282

3282:                                             ; preds = %3279, %3271
  %3283 = phi i32 [ %3281, %3279 ], [ %3277, %3271 ]
  %3284 = phi i32 [ %3280, %3279 ], [ %3276, %3271 ]
  %3285 = and i32 %3273, 16384
  %3286 = icmp eq i32 %3285, 0
  br i1 %3286, label %3271, label %3314

3287:                                             ; preds = %3259
  %3288 = add i32 %3257, %3209
  br label %3314

3289:                                             ; preds = %3205
  %3290 = icmp ult i32 %3258, %3257
  %3291 = select i1 %3290, i32 %3258, i32 %3257
  %3292 = select i1 %3290, i32 %3257, i32 0
  %3293 = add i32 %3292, %3209
  %3294 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3251, i64 0, i32 3
  %3295 = bitcast %struct.opj_mqc_state** %3294 to i64*
  %3296 = load i64, i64* %3295, align 8
  %3297 = bitcast %struct.opj_mqc_state** %3246 to i64*
  store i64 %3296, i64* %3297, align 8
  br label %3298

3298:                                             ; preds = %3309, %3289
  %3299 = phi i32 [ %3207, %3289 ], [ %3310, %3309 ]
  %3300 = phi i32 [ %3291, %3289 ], [ %3302, %3309 ]
  %3301 = phi i32 [ %3293, %3289 ], [ %3311, %3309 ]
  %3302 = shl i32 %3300, 1
  %3303 = shl i32 %3301, 1
  %3304 = add i32 %3299, -1
  %3305 = icmp eq i32 %3304, 0
  br i1 %3305, label %3306, label %3309

3306:                                             ; preds = %3298
  store i32 %3303, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3307 = load i32, i32* %609, align 8
  %3308 = load i32, i32* %611, align 8
  br label %3309

3309:                                             ; preds = %3306, %3298
  %3310 = phi i32 [ %3308, %3306 ], [ %3304, %3298 ]
  %3311 = phi i32 [ %3307, %3306 ], [ %3303, %3298 ]
  %3312 = and i32 %3300, 16384
  %3313 = icmp eq i32 %3312, 0
  br i1 %3313, label %3298, label %3314

3314:                                             ; preds = %3309, %3282, %3287
  %3315 = phi i32 [ %3207, %3287 ], [ %3283, %3282 ], [ %3310, %3309 ]
  %3316 = phi i32 [ %3258, %3287 ], [ %3275, %3282 ], [ %3302, %3309 ]
  %3317 = phi i32 [ %3288, %3287 ], [ %3284, %3282 ], [ %3311, %3309 ]
  %3318 = and i1 %618, %3220
  %3319 = zext i1 %3318 to i32
  %3320 = load i32, i32* %99, align 8
  %3321 = add i32 %3320, 2
  %3322 = shl i32 32, %3119
  %3323 = load i32, i32* %3097, align 4
  %3324 = or i32 %3323, %3322
  store i32 %3324, i32* %3097, align 4
  %3325 = shl nuw nsw i32 %3247, 19
  %3326 = or i32 %3325, 16
  %3327 = shl i32 %3326, %3119
  %3328 = load i32, i32* %2875, align 4
  %3329 = or i32 %3328, %3327
  store i32 %3329, i32* %2875, align 4
  %3330 = shl i32 8, %3119
  %3331 = load i32, i32* %3098, align 4
  %3332 = or i32 %3331, %3330
  store i32 %3332, i32* %3098, align 4
  %3333 = or i32 %3116, %3319
  %3334 = icmp eq i32 %3333, 0
  br i1 %3334, label %3335, label %3349

3335:                                             ; preds = %3314
  %3336 = zext i32 %3321 to i64
  %3337 = sub nsw i64 0, %3336
  %3338 = getelementptr inbounds i32, i32* %2875, i64 %3337
  %3339 = and i32 %3232, -2147483648
  %3340 = load i32, i32* %3338, align 4
  %3341 = or i32 %3339, %3340
  %3342 = or i32 %3341, 65536
  store i32 %3342, i32* %3338, align 4
  %3343 = getelementptr inbounds i32, i32* %3338, i64 -1
  %3344 = load i32, i32* %3343, align 4
  %3345 = or i32 %3344, 131072
  store i32 %3345, i32* %3343, align 4
  %3346 = getelementptr inbounds i32, i32* %3338, i64 1
  %3347 = load i32, i32* %3346, align 4
  %3348 = or i32 %3347, 32768
  store i32 %3348, i32* %3346, align 4
  br label %3349

3349:                                             ; preds = %3335, %3314
  %3350 = icmp eq i32 %3116, 3
  br i1 %3350, label %3351, label %3364

3351:                                             ; preds = %3349
  %3352 = zext i32 %3321 to i64
  %3353 = getelementptr inbounds i32, i32* %2875, i64 %3352
  %3354 = shl nuw nsw i32 %3247, 18
  %3355 = load i32, i32* %3353, align 4
  %3356 = or i32 %3354, %3355
  %3357 = or i32 %3356, 2
  store i32 %3357, i32* %3353, align 4
  %3358 = getelementptr inbounds i32, i32* %3353, i64 -1
  %3359 = load i32, i32* %3358, align 4
  %3360 = or i32 %3359, 4
  store i32 %3360, i32* %3358, align 4
  %3361 = getelementptr inbounds i32, i32* %3353, i64 1
  %3362 = load i32, i32* %3361, align 4
  %3363 = or i32 %3362, 1
  store i32 %3363, i32* %3361, align 4
  br label %3364

3364:                                             ; preds = %3351, %3349, %3199, %3120
  %3365 = phi i32 [ %3241, %3351 ], [ %3241, %3349 ], [ %3109, %3199 ], [ %3109, %3120 ]
  %3366 = phi i32 [ %3315, %3351 ], [ %3315, %3349 ], [ %3200, %3199 ], [ %3114, %3120 ]
  %3367 = phi i32 [ %3316, %3351 ], [ %3316, %3349 ], [ %3201, %3199 ], [ %3113, %3120 ]
  %3368 = phi i32 [ %3317, %3351 ], [ %3317, %3349 ], [ %3202, %3199 ], [ %3112, %3120 ]
  %3369 = phi %struct.opj_mqc_state** [ %3246, %3351 ], [ %3246, %3349 ], [ %3132, %3199 ], [ %3111, %3120 ]
  %3370 = shl i32 2097152, %3119
  %3371 = xor i32 %3370, -1
  %3372 = load i32, i32* %2875, align 4
  %3373 = and i32 %3372, %3371
  store i32 %3373, i32* %2875, align 4
  %3374 = getelementptr inbounds i32, i32* %3115, i64 1
  %3375 = add nuw nsw i32 %3116, 1
  %3376 = icmp eq i32 %3375, 4
  br i1 %3376, label %3377, label %3108

3377:                                             ; preds = %3364, %3106, %3104, %3102, %3100, %3099, %3094
  %3378 = phi i32 [ %2868, %3099 ], [ %2868, %3106 ], [ %2868, %3104 ], [ %2868, %3102 ], [ %2868, %3100 ], [ %2868, %3094 ], [ %3365, %3364 ]
  %3379 = phi i32 [ %3087, %3099 ], [ %3087, %3106 ], [ %3087, %3104 ], [ %3087, %3102 ], [ %3087, %3100 ], [ %3087, %3094 ], [ %3366, %3364 ]
  %3380 = phi i32 [ %3088, %3099 ], [ %3088, %3106 ], [ %3088, %3104 ], [ %3088, %3102 ], [ %3088, %3100 ], [ %3088, %3094 ], [ %3367, %3364 ]
  %3381 = phi i32 [ %3089, %3099 ], [ %3089, %3106 ], [ %3089, %3104 ], [ %3089, %3102 ], [ %3089, %3100 ], [ %3089, %3094 ], [ %3368, %3364 ]
  %3382 = phi %struct.opj_mqc_state** [ %3090, %3099 ], [ %3090, %3106 ], [ %3090, %3104 ], [ %3090, %3102 ], [ %3090, %3100 ], [ %3090, %3094 ], [ %3369, %3364 ]
  %3383 = sub nsw i32 4, %3085
  %3384 = zext i32 %3383 to i64
  %3385 = getelementptr inbounds i32, i32* %3086, i64 %3384
  br label %3386

3386:                                             ; preds = %3377, %2952
  %3387 = phi i32 [ %2868, %2952 ], [ %3378, %3377 ]
  %3388 = phi i32* [ %2889, %2952 ], [ %3385, %3377 ]
  %3389 = phi i32 [ %2953, %2952 ], [ %3379, %3377 ]
  %3390 = phi i32 [ %2954, %2952 ], [ %3380, %3377 ]
  %3391 = phi i32 [ %2955, %2952 ], [ %3381, %3377 ]
  %3392 = phi %struct.opj_mqc_state** [ %613, %2952 ], [ %3382, %3377 ]
  %3393 = add nuw i32 %2869, 1
  %3394 = getelementptr inbounds i32, i32* %2875, i64 1
  %3395 = load i32, i32* %99, align 8
  %3396 = icmp ult i32 %3393, %3395
  br i1 %3396, label %2867, label %3397

3397:                                             ; preds = %3386
  %3398 = load i32, i32* %101, align 4
  br label %3399

3399:                                             ; preds = %3397, %2854
  %3400 = phi i32 [ %2855, %2854 ], [ %3395, %3397 ]
  %3401 = phi i32 [ %2856, %2854 ], [ %3398, %3397 ]
  %3402 = phi i32 [ %2857, %2854 ], [ %3387, %3397 ]
  %3403 = phi i32 [ 0, %2854 ], [ %3395, %3397 ]
  %3404 = phi i32* [ %2865, %2854 ], [ %3394, %3397 ]
  %3405 = phi i32* [ %2864, %2854 ], [ %3388, %3397 ]
  %3406 = phi i32 [ %2863, %2854 ], [ %3389, %3397 ]
  %3407 = phi i32 [ %2862, %2854 ], [ %3390, %3397 ]
  %3408 = phi i32 [ %2861, %2854 ], [ %3391, %3397 ]
  %3409 = phi %struct.opj_mqc_state** [ %2860, %2854 ], [ %3392, %3397 ]
  %3410 = add nuw i32 %2859, 4
  %3411 = getelementptr inbounds i32, i32* %3404, i64 2
  %3412 = and i32 %3401, -4
  %3413 = icmp ult i32 %3410, %3412
  br i1 %3413, label %2854, label %3414

3414:                                             ; preds = %3399, %2835
  %3415 = phi i32 [ %2844, %2835 ], [ %3400, %3399 ]
  %3416 = phi i32 [ 0, %2835 ], [ %3402, %3399 ]
  %3417 = phi i32* [ %2847, %2835 ], [ %3411, %3399 ]
  %3418 = phi i32* [ %2842, %2835 ], [ %3405, %3399 ]
  %3419 = phi i32 [ %2841, %2835 ], [ %3406, %3399 ]
  %3420 = phi i32 [ %2840, %2835 ], [ %3407, %3399 ]
  %3421 = phi i32 [ %2839, %2835 ], [ %3408, %3399 ]
  %3422 = phi %struct.opj_mqc_state** [ %2838, %2835 ], [ %3409, %3399 ]
  %3423 = phi i32 [ 0, %2835 ], [ %3410, %3399 ]
  %3424 = phi i32 [ %2848, %2835 ], [ %3401, %3399 ]
  %3425 = icmp uge i32 %3423, %3424
  %3426 = icmp eq i32 %3415, 0
  %3427 = or i1 %3426, %3425
  br i1 %3427, label %3743, label %3428

3428:                                             ; preds = %3414
  %3429 = and i32 %2837, 2147483647
  %3430 = icmp eq i32 %644, 0
  %3431 = select i1 %3430, [128 x i16]* @lut_nmsedec_sig0, [128 x i16]* @lut_nmsedec_sig
  br label %3432

3432:                                             ; preds = %3716, %3428
  %3433 = phi i32 [ %3416, %3428 ], [ %3717, %3716 ]
  %3434 = phi i32 [ %3424, %3428 ], [ %3718, %3716 ]
  %3435 = phi i32 [ 0, %3428 ], [ %3726, %3716 ]
  %3436 = phi %struct.opj_mqc_state** [ %3422, %3428 ], [ %3722, %3716 ]
  %3437 = phi i32 [ %3421, %3428 ], [ %3721, %3716 ]
  %3438 = phi i32 [ %3420, %3428 ], [ %3720, %3716 ]
  %3439 = phi i32 [ %3419, %3428 ], [ %3719, %3716 ]
  %3440 = phi i32* [ %3418, %3428 ], [ %3725, %3716 ]
  %3441 = phi i32* [ %3417, %3428 ], [ %3727, %3716 ]
  %3442 = load i32, i32* %3441, align 4
  %3443 = and i32 %3442, 1226843280
  %3444 = icmp eq i32 %3443, 1226843280
  br i1 %3444, label %3450, label %3445

3445:                                             ; preds = %3432
  %3446 = icmp eq i32 %3434, %3423
  br i1 %3446, label %3716, label %3447

3447:                                             ; preds = %3445
  %3448 = getelementptr inbounds i32, i32* %3441, i64 -1
  %3449 = getelementptr inbounds i32, i32* %3441, i64 1
  br label %3453

3450:                                             ; preds = %3432
  %3451 = and i32 %3442, -1226833921
  store i32 %3451, i32* %3441, align 4
  %3452 = load i32, i32* %101, align 4
  br label %3716

3453:                                             ; preds = %3701, %3447
  %3454 = phi i32 [ %3433, %3447 ], [ %3702, %3701 ]
  %3455 = phi i32 [ %3442, %3447 ], [ %3710, %3701 ]
  %3456 = phi %struct.opj_mqc_state** [ %3436, %3447 ], [ %3706, %3701 ]
  %3457 = phi i32* [ %3440, %3447 ], [ %3711, %3701 ]
  %3458 = phi i32 [ 0, %3447 ], [ %3712, %3701 ]
  %3459 = phi i32 [ %3437, %3447 ], [ %3705, %3701 ]
  %3460 = phi i32 [ %3438, %3447 ], [ %3704, %3701 ]
  %3461 = phi i32 [ %3439, %3447 ], [ %3703, %3701 ]
  %3462 = mul i32 %3458, 3
  %3463 = shl i32 2097168, %3462
  %3464 = and i32 %3463, %3455
  %3465 = icmp eq i32 %3464, 0
  br i1 %3465, label %3466, label %3701

3466:                                             ; preds = %3453
  %3467 = lshr i32 %3455, %3462
  %3468 = load i8*, i8** %514, align 8
  %3469 = and i32 %3467, 495
  %3470 = zext i32 %3469 to i64
  %3471 = getelementptr inbounds i8, i8* %3468, i64 %3470
  %3472 = load i8, i8* %3471, align 1
  %3473 = zext i8 %3472 to i64
  %3474 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %3473
  %3475 = load i32, i32* %3457, align 4
  %3476 = and i32 %3429, %3475
  %3477 = icmp ne i32 %3476, 0
  %3478 = zext i1 %3477 to i32
  %3479 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3474, align 8
  %3480 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3479, i64 0, i32 1
  %3481 = load i32, i32* %3480, align 4
  %3482 = icmp eq i32 %3481, %3478
  %3483 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3479, i64 0, i32 0
  %3484 = load i32, i32* %3483, align 8
  %3485 = sub i32 %3460, %3484
  br i1 %3482, label %3486, label %3516

3486:                                             ; preds = %3466
  %3487 = trunc i32 %3485 to i16
  %3488 = icmp sgt i16 %3487, -1
  br i1 %3488, label %3489, label %3514

3489:                                             ; preds = %3486
  %3490 = icmp ult i32 %3485, %3484
  %3491 = select i1 %3490, i32 %3484, i32 %3485
  %3492 = select i1 %3490, i32 0, i32 %3484
  %3493 = add i32 %3492, %3459
  %3494 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3479, i64 0, i32 2
  %3495 = bitcast %struct.opj_mqc_state** %3494 to i64*
  %3496 = load i64, i64* %3495, align 8
  %3497 = bitcast %struct.opj_mqc_state** %3474 to i64*
  store i64 %3496, i64* %3497, align 8
  br label %3498

3498:                                             ; preds = %3509, %3489
  %3499 = phi i32 [ %3461, %3489 ], [ %3510, %3509 ]
  %3500 = phi i32 [ %3491, %3489 ], [ %3502, %3509 ]
  %3501 = phi i32 [ %3493, %3489 ], [ %3511, %3509 ]
  %3502 = shl i32 %3500, 1
  %3503 = shl i32 %3501, 1
  %3504 = add i32 %3499, -1
  %3505 = icmp eq i32 %3504, 0
  br i1 %3505, label %3506, label %3509

3506:                                             ; preds = %3498
  store i32 %3503, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3507 = load i32, i32* %609, align 8
  %3508 = load i32, i32* %611, align 8
  br label %3509

3509:                                             ; preds = %3506, %3498
  %3510 = phi i32 [ %3508, %3506 ], [ %3504, %3498 ]
  %3511 = phi i32 [ %3507, %3506 ], [ %3503, %3498 ]
  %3512 = and i32 %3500, 16384
  %3513 = icmp eq i32 %3512, 0
  br i1 %3513, label %3498, label %3541

3514:                                             ; preds = %3486
  %3515 = add i32 %3484, %3459
  br label %3541

3516:                                             ; preds = %3466
  %3517 = icmp ult i32 %3485, %3484
  %3518 = select i1 %3517, i32 %3485, i32 %3484
  %3519 = select i1 %3517, i32 %3484, i32 0
  %3520 = add i32 %3519, %3459
  %3521 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3479, i64 0, i32 3
  %3522 = bitcast %struct.opj_mqc_state** %3521 to i64*
  %3523 = load i64, i64* %3522, align 8
  %3524 = bitcast %struct.opj_mqc_state** %3474 to i64*
  store i64 %3523, i64* %3524, align 8
  br label %3525

3525:                                             ; preds = %3536, %3516
  %3526 = phi i32 [ %3461, %3516 ], [ %3537, %3536 ]
  %3527 = phi i32 [ %3518, %3516 ], [ %3529, %3536 ]
  %3528 = phi i32 [ %3520, %3516 ], [ %3538, %3536 ]
  %3529 = shl i32 %3527, 1
  %3530 = shl i32 %3528, 1
  %3531 = add i32 %3526, -1
  %3532 = icmp eq i32 %3531, 0
  br i1 %3532, label %3533, label %3536

3533:                                             ; preds = %3525
  store i32 %3530, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3534 = load i32, i32* %609, align 8
  %3535 = load i32, i32* %611, align 8
  br label %3536

3536:                                             ; preds = %3533, %3525
  %3537 = phi i32 [ %3535, %3533 ], [ %3531, %3525 ]
  %3538 = phi i32 [ %3534, %3533 ], [ %3530, %3525 ]
  %3539 = and i32 %3527, 16384
  %3540 = icmp eq i32 %3539, 0
  br i1 %3540, label %3525, label %3541

3541:                                             ; preds = %3536, %3509, %3514
  %3542 = phi i32 [ %3461, %3514 ], [ %3510, %3509 ], [ %3537, %3536 ]
  %3543 = phi i32 [ %3485, %3514 ], [ %3502, %3509 ], [ %3529, %3536 ]
  %3544 = phi i32 [ %3515, %3514 ], [ %3511, %3509 ], [ %3538, %3536 ]
  br i1 %3477, label %3545, label %3701

3545:                                             ; preds = %3541
  %3546 = load i32, i32* %3441, align 4
  %3547 = load i32, i32* %3448, align 4
  %3548 = load i32, i32* %3449, align 4
  %3549 = lshr i32 %3546, %3462
  %3550 = and i32 %3549, 170
  %3551 = add i32 %3462, 19
  %3552 = lshr i32 %3547, %3551
  %3553 = and i32 %3552, 1
  %3554 = add i32 %3462, 17
  %3555 = lshr i32 %3548, %3554
  %3556 = and i32 %3555, 4
  %3557 = icmp eq i32 %3458, 0
  %3558 = add i32 %3462, 12
  %3559 = select i1 %3557, i32 14, i32 %3558
  %3560 = lshr i32 %3546, %3559
  %3561 = and i32 %3560, 16
  %3562 = add i32 %3462, 16
  %3563 = lshr i32 %3546, %3562
  %3564 = and i32 %3563, 64
  %3565 = or i32 %3564, %3550
  %3566 = or i32 %3565, %3561
  %3567 = or i32 %3566, %3553
  %3568 = or i32 %3567, %3556
  %3569 = load i32, i32* %3457, align 4
  %3570 = and i32 %3569, 2147483647
  %3571 = lshr i32 %3570, %644
  %3572 = select i1 %3430, i32 %3569, i32 %3571
  %3573 = and i32 %3572, 127
  %3574 = zext i32 %3573 to i64
  %3575 = getelementptr inbounds [128 x i16], [128 x i16]* %3431, i64 0, i64 %3574
  %3576 = load i16, i16* %3575, align 2
  %3577 = sext i16 %3576 to i32
  %3578 = add nsw i32 %3454, %3577
  %3579 = zext i32 %3568 to i64
  %3580 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3579
  %3581 = load i8, i8* %3580, align 1
  %3582 = zext i8 %3581 to i64
  %3583 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %53, i64 0, i32 0, i32 7, i64 %3582
  %3584 = lshr i32 %3569, 31
  %3585 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3579
  %3586 = load i8, i8* %3585, align 1
  %3587 = zext i8 %3586 to i32
  %3588 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3583, align 8
  %3589 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3588, i64 0, i32 1
  %3590 = load i32, i32* %3589, align 4
  %3591 = xor i32 %3584, %3587
  %3592 = icmp eq i32 %3590, %3591
  %3593 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3588, i64 0, i32 0
  %3594 = load i32, i32* %3593, align 8
  %3595 = sub i32 %3543, %3594
  br i1 %3592, label %3596, label %3626

3596:                                             ; preds = %3545
  %3597 = trunc i32 %3595 to i16
  %3598 = icmp sgt i16 %3597, -1
  br i1 %3598, label %3599, label %3624

3599:                                             ; preds = %3596
  %3600 = icmp ult i32 %3595, %3594
  %3601 = select i1 %3600, i32 %3594, i32 %3595
  %3602 = select i1 %3600, i32 0, i32 %3594
  %3603 = add i32 %3602, %3544
  %3604 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3588, i64 0, i32 2
  %3605 = bitcast %struct.opj_mqc_state** %3604 to i64*
  %3606 = load i64, i64* %3605, align 8
  %3607 = bitcast %struct.opj_mqc_state** %3583 to i64*
  store i64 %3606, i64* %3607, align 8
  br label %3608

3608:                                             ; preds = %3619, %3599
  %3609 = phi i32 [ %3542, %3599 ], [ %3620, %3619 ]
  %3610 = phi i32 [ %3601, %3599 ], [ %3612, %3619 ]
  %3611 = phi i32 [ %3603, %3599 ], [ %3621, %3619 ]
  %3612 = shl i32 %3610, 1
  %3613 = shl i32 %3611, 1
  %3614 = add i32 %3609, -1
  %3615 = icmp eq i32 %3614, 0
  br i1 %3615, label %3616, label %3619

3616:                                             ; preds = %3608
  store i32 %3613, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3617 = load i32, i32* %609, align 8
  %3618 = load i32, i32* %611, align 8
  br label %3619

3619:                                             ; preds = %3616, %3608
  %3620 = phi i32 [ %3618, %3616 ], [ %3614, %3608 ]
  %3621 = phi i32 [ %3617, %3616 ], [ %3613, %3608 ]
  %3622 = and i32 %3610, 16384
  %3623 = icmp eq i32 %3622, 0
  br i1 %3623, label %3608, label %3651

3624:                                             ; preds = %3596
  %3625 = add i32 %3594, %3544
  br label %3651

3626:                                             ; preds = %3545
  %3627 = icmp ult i32 %3595, %3594
  %3628 = select i1 %3627, i32 %3595, i32 %3594
  %3629 = select i1 %3627, i32 %3594, i32 0
  %3630 = add i32 %3629, %3544
  %3631 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3588, i64 0, i32 3
  %3632 = bitcast %struct.opj_mqc_state** %3631 to i64*
  %3633 = load i64, i64* %3632, align 8
  %3634 = bitcast %struct.opj_mqc_state** %3583 to i64*
  store i64 %3633, i64* %3634, align 8
  br label %3635

3635:                                             ; preds = %3646, %3626
  %3636 = phi i32 [ %3542, %3626 ], [ %3647, %3646 ]
  %3637 = phi i32 [ %3628, %3626 ], [ %3639, %3646 ]
  %3638 = phi i32 [ %3630, %3626 ], [ %3648, %3646 ]
  %3639 = shl i32 %3637, 1
  %3640 = shl i32 %3638, 1
  %3641 = add i32 %3636, -1
  %3642 = icmp eq i32 %3641, 0
  br i1 %3642, label %3643, label %3646

3643:                                             ; preds = %3635
  store i32 %3640, i32* %609, align 8
  tail call void @opj_mqc_byteout(%struct.opj_mqc* %510) #7
  %3644 = load i32, i32* %609, align 8
  %3645 = load i32, i32* %611, align 8
  br label %3646

3646:                                             ; preds = %3643, %3635
  %3647 = phi i32 [ %3645, %3643 ], [ %3641, %3635 ]
  %3648 = phi i32 [ %3644, %3643 ], [ %3640, %3635 ]
  %3649 = and i32 %3637, 16384
  %3650 = icmp eq i32 %3649, 0
  br i1 %3650, label %3635, label %3651

3651:                                             ; preds = %3646, %3619, %3624
  %3652 = phi i32 [ %3542, %3624 ], [ %3620, %3619 ], [ %3647, %3646 ]
  %3653 = phi i32 [ %3595, %3624 ], [ %3612, %3619 ], [ %3639, %3646 ]
  %3654 = phi i32 [ %3625, %3624 ], [ %3621, %3619 ], [ %3648, %3646 ]
  %3655 = and i1 %618, %3557
  %3656 = zext i1 %3655 to i32
  %3657 = load i32, i32* %99, align 8
  %3658 = add i32 %3657, 2
  %3659 = shl i32 32, %3462
  %3660 = load i32, i32* %3448, align 4
  %3661 = or i32 %3660, %3659
  store i32 %3661, i32* %3448, align 4
  %3662 = shl nuw nsw i32 %3584, 19
  %3663 = or i32 %3662, 16
  %3664 = shl i32 %3663, %3462
  %3665 = load i32, i32* %3441, align 4
  %3666 = or i32 %3665, %3664
  store i32 %3666, i32* %3441, align 4
  %3667 = shl i32 8, %3462
  %3668 = load i32, i32* %3449, align 4
  %3669 = or i32 %3668, %3667
  store i32 %3669, i32* %3449, align 4
  %3670 = or i32 %3458, %3656
  %3671 = icmp eq i32 %3670, 0
  br i1 %3671, label %3672, label %3686

3672:                                             ; preds = %3651
  %3673 = zext i32 %3658 to i64
  %3674 = sub nsw i64 0, %3673
  %3675 = getelementptr inbounds i32, i32* %3441, i64 %3674
  %3676 = and i32 %3569, -2147483648
  %3677 = load i32, i32* %3675, align 4
  %3678 = or i32 %3676, %3677
  %3679 = or i32 %3678, 65536
  store i32 %3679, i32* %3675, align 4
  %3680 = getelementptr inbounds i32, i32* %3675, i64 -1
  %3681 = load i32, i32* %3680, align 4
  %3682 = or i32 %3681, 131072
  store i32 %3682, i32* %3680, align 4
  %3683 = getelementptr inbounds i32, i32* %3675, i64 1
  %3684 = load i32, i32* %3683, align 4
  %3685 = or i32 %3684, 32768
  store i32 %3685, i32* %3683, align 4
  br label %3686

3686:                                             ; preds = %3672, %3651
  %3687 = icmp eq i32 %3458, 3
  br i1 %3687, label %3688, label %3701

3688:                                             ; preds = %3686
  %3689 = zext i32 %3658 to i64
  %3690 = getelementptr inbounds i32, i32* %3441, i64 %3689
  %3691 = shl nuw nsw i32 %3584, 18
  %3692 = load i32, i32* %3690, align 4
  %3693 = or i32 %3691, %3692
  %3694 = or i32 %3693, 2
  store i32 %3694, i32* %3690, align 4
  %3695 = getelementptr inbounds i32, i32* %3690, i64 -1
  %3696 = load i32, i32* %3695, align 4
  %3697 = or i32 %3696, 4
  store i32 %3697, i32* %3695, align 4
  %3698 = getelementptr inbounds i32, i32* %3690, i64 1
  %3699 = load i32, i32* %3698, align 4
  %3700 = or i32 %3699, 1
  store i32 %3700, i32* %3698, align 4
  br label %3701

3701:                                             ; preds = %3688, %3686, %3541, %3453
  %3702 = phi i32 [ %3578, %3688 ], [ %3578, %3686 ], [ %3454, %3541 ], [ %3454, %3453 ]
  %3703 = phi i32 [ %3652, %3688 ], [ %3652, %3686 ], [ %3542, %3541 ], [ %3461, %3453 ]
  %3704 = phi i32 [ %3653, %3688 ], [ %3653, %3686 ], [ %3543, %3541 ], [ %3460, %3453 ]
  %3705 = phi i32 [ %3654, %3688 ], [ %3654, %3686 ], [ %3544, %3541 ], [ %3459, %3453 ]
  %3706 = phi %struct.opj_mqc_state** [ %3583, %3688 ], [ %3583, %3686 ], [ %3474, %3541 ], [ %3456, %3453 ]
  %3707 = shl i32 2097152, %3462
  %3708 = xor i32 %3707, -1
  %3709 = load i32, i32* %3441, align 4
  %3710 = and i32 %3709, %3708
  store i32 %3710, i32* %3441, align 4
  %3711 = getelementptr inbounds i32, i32* %3457, i64 1
  %3712 = add nuw i32 %3458, 1
  %3713 = load i32, i32* %101, align 4
  %3714 = sub i32 %3713, %3423
  %3715 = icmp ult i32 %3712, %3714
  br i1 %3715, label %3453, label %3716

3716:                                             ; preds = %3701, %3450, %3445
  %3717 = phi i32 [ %3433, %3450 ], [ %3433, %3445 ], [ %3702, %3701 ]
  %3718 = phi i32 [ %3452, %3450 ], [ %3423, %3445 ], [ %3713, %3701 ]
  %3719 = phi i32 [ %3439, %3450 ], [ %3439, %3445 ], [ %3703, %3701 ]
  %3720 = phi i32 [ %3438, %3450 ], [ %3438, %3445 ], [ %3704, %3701 ]
  %3721 = phi i32 [ %3437, %3450 ], [ %3437, %3445 ], [ %3705, %3701 ]
  %3722 = phi %struct.opj_mqc_state** [ %3436, %3450 ], [ %3436, %3445 ], [ %3706, %3701 ]
  %3723 = sub i32 %3718, %3423
  %3724 = zext i32 %3723 to i64
  %3725 = getelementptr inbounds i32, i32* %3440, i64 %3724
  %3726 = add nuw i32 %3435, 1
  %3727 = getelementptr inbounds i32, i32* %3441, i64 1
  %3728 = load i32, i32* %99, align 8
  %3729 = icmp ult i32 %3726, %3728
  br i1 %3729, label %3432, label %3743

3730:                                             ; preds = %2882
  %3731 = getelementptr inbounds i32, i32* %2874, i64 2
  %3732 = load i32, i32* %3731, align 4
  %3733 = and i32 %3732, %2851
  %3734 = icmp eq i32 %3733, 0
  br i1 %3734, label %3735, label %2887

3735:                                             ; preds = %3730
  %3736 = getelementptr inbounds i32, i32* %2874, i64 3
  %3737 = load i32, i32* %3736, align 4
  %3738 = and i32 %3737, %2851
  %3739 = icmp eq i32 %3738, 0
  %3740 = getelementptr inbounds i32, i32* %2874, i64 4
  %3741 = select i1 %3739, i32 4, i32 3
  %3742 = select i1 %3739, i32* %3740, i32* %3736
  br label %2887

3743:                                             ; preds = %3716, %3414
  %3744 = phi i32 [ %3416, %3414 ], [ %3717, %3716 ]
  %3745 = phi i32 [ %3419, %3414 ], [ %3719, %3716 ]
  %3746 = phi i32 [ %3420, %3414 ], [ %3720, %3716 ]
  %3747 = phi i32 [ %3421, %3414 ], [ %3721, %3716 ]
  %3748 = phi %struct.opj_mqc_state** [ %3422, %3414 ], [ %3722, %3716 ]
  store %struct.opj_mqc_state** %3748, %struct.opj_mqc_state*** %608, align 8
  store i32 %3747, i32* %609, align 8
  store i32 %3746, i32* %610, align 4
  store i32 %3745, i32* %611, align 8
  br i1 %620, label %3750, label %3749

3749:                                             ; preds = %3743
  tail call void @opj_mqc_segmark_enc(%struct.opj_mqc* %510) #7
  br label %3750

3750:                                             ; preds = %3749, %3743, %2829, %2108, %667
  %3751 = phi i32 [ %647, %667 ], [ %3744, %3743 ], [ %3744, %3749 ], [ %2830, %2829 ], [ %2109, %2108 ]
  br i1 %625, label %3752, label %3754

3752:                                             ; preds = %3750
  %3753 = load double, double* %627, align 8
  br label %3754

3754:                                             ; preds = %3752, %3750
  %3755 = phi double [ %3753, %3752 ], [ 1.000000e+00, %3750 ]
  br i1 %628, label %3756, label %3758

3756:                                             ; preds = %3754
  %3757 = tail call double @opj_dwt_getnorm(i32 %495, i32 %489) #7
  br label %3760

3758:                                             ; preds = %3754
  %3759 = tail call double @opj_dwt_getnorm_real(i32 %495, i32 %489) #7
  br label %3760

3760:                                             ; preds = %3758, %3756
  %3761 = phi double [ %499, %3756 ], [ %634, %3758 ]
  %3762 = phi double [ %3757, %3756 ], [ %3759, %3758 ]
  %3763 = fmul double %3755, %3762
  %3764 = fmul double %3761, %3763
  %3765 = shl i32 1, %644
  %3766 = sitofp i32 %3765 to double
  %3767 = fmul double %3764, %3766
  %3768 = sitofp i32 %3751 to double
  %3769 = fmul double %3767, %3768
  %3770 = fmul double %3769, 0x3F20000000000000
  %3771 = fmul double %3767, %3770
  %3772 = fadd double %646, %3771
  %3773 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %648, i64 %649, i32 1
  store double %3772, double* %3773, align 8
  %3774 = icmp eq i32 %643, 2
  %3775 = icmp eq i32 %644, 0
  %3776 = and i1 %3774, %3775
  %3777 = xor i1 %3776, true
  %3778 = and i1 %636, %3777
  br i1 %3778, label %3779, label %3789

3779:                                             ; preds = %3760
  br i1 %637, label %3799, label %3780

3780:                                             ; preds = %3779
  %3781 = load i32, i32* %596, align 8
  %3782 = add nsw i32 %3781, -4
  %3783 = icmp eq i32 %3782, %644
  %3784 = and i1 %3774, %3783
  br i1 %3784, label %3789, label %3785

3785:                                             ; preds = %3780
  %3786 = icmp sgt i32 %3782, %644
  %3787 = icmp ne i32 %643, 0
  %3788 = and i1 %3787, %3786
  br i1 %3788, label %3789, label %3799

3789:                                             ; preds = %3785, %3780, %3760
  br i1 %655, label %3790, label %3791

3790:                                             ; preds = %3789
  tail call void @opj_mqc_bypass_flush_enc(%struct.opj_mqc* %510, i32 %638) #7
  br label %3794

3791:                                             ; preds = %3789
  br i1 %639, label %3793, label %3792

3792:                                             ; preds = %3791
  tail call void @opj_mqc_erterm_enc(%struct.opj_mqc* %510) #7
  br label %3794

3793:                                             ; preds = %3791
  tail call void @opj_mqc_flush(%struct.opj_mqc* %510) #7
  br label %3794

3794:                                             ; preds = %3793, %3792, %3790
  %3795 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %648, i64 %649, i32 3
  %3796 = load i8, i8* %3795, align 4
  %3797 = or i8 %3796, 1
  store i8 %3797, i8* %3795, align 4
  %3798 = tail call i32 @opj_mqc_numbytes(%struct.opj_mqc* %510) #7
  br label %3809

3799:                                             ; preds = %3785, %3779
  br i1 %655, label %3800, label %3802

3800:                                             ; preds = %3799
  %3801 = tail call i32 @opj_mqc_bypass_get_extra_bytes(%struct.opj_mqc* %510, i32 %638) #7
  br label %3802

3802:                                             ; preds = %3800, %3799
  %3803 = phi i32 [ %3801, %3800 ], [ 3, %3799 ]
  %3804 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %648, i64 %649, i32 3
  %3805 = load i8, i8* %3804, align 4
  %3806 = and i8 %3805, -2
  store i8 %3806, i8* %3804, align 4
  %3807 = tail call i32 @opj_mqc_numbytes(%struct.opj_mqc* %510) #7
  %3808 = add i32 %3807, %3803
  br label %3809

3809:                                             ; preds = %3802, %3794
  %3810 = phi i32 [ %3808, %3802 ], [ %3798, %3794 ]
  %3811 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %648, i64 %649, i32 0
  store i32 %3810, i32* %3811, align 8
  %3812 = add i32 %643, 1
  %3813 = icmp eq i32 %3812, 3
  %3814 = zext i1 %3813 to i32
  %3815 = sub i32 %644, %3814
  %3816 = select i1 %3813, i32 0, i32 %3812
  br i1 %641, label %3818, label %3817

3817:                                             ; preds = %3809
  tail call void @opj_mqc_reset_enc(%struct.opj_mqc* %510) #7
  br label %3818

3818:                                             ; preds = %3817, %3809
  %3819 = add i32 %645, 1
  %3820 = icmp sgt i32 %3815, -1
  br i1 %3820, label %642, label %3821

3821:                                             ; preds = %3818
  %3822 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %5, i64 0, i32 12
  store i32 %3819, i32* %3822, align 4
  %3823 = icmp eq i32 %3819, 0
  br i1 %3823, label %3898, label %3824

3824:                                             ; preds = %3821
  %3825 = tail call i32 @opj_mqc_numbytes(%struct.opj_mqc* %510) #7
  %3826 = load i32, i32* %3822, align 4
  %3827 = icmp eq i32 %3826, 0
  br i1 %3827, label %3898, label %3828

3828:                                             ; preds = %3824
  %3829 = zext i32 %3826 to i64
  %3830 = and i32 %3826, 1
  %3831 = icmp eq i32 %3830, 0
  br i1 %3831, label %3843, label %3832

3832:                                             ; preds = %3828
  %3833 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %605, align 8
  %3834 = add i32 %3826, -1
  %3835 = zext i32 %3834 to i64
  %3836 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %3833, i64 %3835, i32 0
  %3837 = load i32, i32* %3836, align 8
  %3838 = icmp ugt i32 %3837, %3825
  br i1 %3838, label %3839, label %3840

3839:                                             ; preds = %3832
  store i32 %3825, i32* %3836, align 8
  br label %3840

3840:                                             ; preds = %3839, %3832
  %3841 = phi i32 [ %3825, %3839 ], [ %3837, %3832 ]
  %3842 = add nsw i64 %3829, -1
  br label %3843

3843:                                             ; preds = %3828, %3840
  %3844 = phi i64 [ %3829, %3828 ], [ %3842, %3840 ]
  %3845 = phi i32 [ %3825, %3828 ], [ %3841, %3840 ]
  %3846 = icmp eq i32 %3826, 1
  br i1 %3846, label %3866, label %3847

3847:                                             ; preds = %3843, %3915
  %3848 = phi i64 [ %3918, %3915 ], [ %3844, %3843 ]
  %3849 = phi i32 [ %3916, %3915 ], [ %3845, %3843 ]
  %3850 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %605, align 8
  %3851 = add i64 %3848, 4294967295
  %3852 = and i64 %3851, 4294967295
  %3853 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %3850, i64 %3852, i32 0
  %3854 = load i32, i32* %3853, align 8
  %3855 = icmp ugt i32 %3854, %3849
  br i1 %3855, label %3856, label %3857

3856:                                             ; preds = %3847
  store i32 %3849, i32* %3853, align 8
  br label %3857

3857:                                             ; preds = %3856, %3847
  %3858 = phi i32 [ %3849, %3856 ], [ %3854, %3847 ]
  %3859 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %605, align 8
  %3860 = trunc i64 %3848 to i32
  %3861 = add i32 %3860, -2
  %3862 = zext i32 %3861 to i64
  %3863 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %3859, i64 %3862, i32 0
  %3864 = load i32, i32* %3863, align 8
  %3865 = icmp ugt i32 %3864, %3858
  br i1 %3865, label %3914, label %3915

3866:                                             ; preds = %3915, %3843
  %3867 = load i32, i32* %3822, align 4
  %3868 = icmp eq i32 %3867, 0
  br i1 %3868, label %3898, label %3869

3869:                                             ; preds = %3866, %3890
  %3870 = phi i64 [ %3894, %3890 ], [ 0, %3866 ]
  %3871 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %605, align 8
  %3872 = load i8*, i8** %599, align 8
  %3873 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %3871, i64 %3870, i32 0
  %3874 = load i32, i32* %3873, align 8
  %3875 = add i32 %3874, -1
  %3876 = zext i32 %3875 to i64
  %3877 = getelementptr inbounds i8, i8* %3872, i64 %3876
  %3878 = load i8, i8* %3877, align 1
  %3879 = icmp eq i8 %3878, -1
  br i1 %3879, label %3880, label %3881

3880:                                             ; preds = %3869
  store i32 %3875, i32* %3873, align 8
  br label %3881

3881:                                             ; preds = %3880, %3869
  %3882 = phi i32 [ %3875, %3880 ], [ %3874, %3869 ]
  %3883 = icmp eq i64 %3870, 0
  br i1 %3883, label %3890, label %3884

3884:                                             ; preds = %3881
  %3885 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %605, align 8
  %3886 = add nuw nsw i64 %3870, 4294967295
  %3887 = and i64 %3886, 4294967295
  %3888 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %3885, i64 %3887, i32 0
  %3889 = load i32, i32* %3888, align 8
  br label %3890

3890:                                             ; preds = %3884, %3881
  %3891 = phi i32 [ %3889, %3884 ], [ 0, %3881 ]
  %3892 = sub i32 %3882, %3891
  %3893 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %3871, i64 %3870, i32 2
  store i32 %3892, i32* %3893, align 8
  %3894 = add nuw nsw i64 %3870, 1
  %3895 = load i32, i32* %3822, align 4
  %3896 = zext i32 %3895 to i64
  %3897 = icmp ult i64 %3894, %3896
  br i1 %3897, label %3869, label %3898

3898:                                             ; preds = %3890, %593, %602, %3821, %3824, %3866
  %3899 = phi double [ 0.000000e+00, %593 ], [ %3772, %3866 ], [ 0.000000e+00, %602 ], [ %3772, %3821 ], [ %3772, %3824 ], [ %3772, %3890 ]
  %3900 = getelementptr inbounds i8, i8* %0, i64 72
  %3901 = bitcast i8* %3900 to %struct.opj_mutex_t**
  %3902 = load %struct.opj_mutex_t*, %struct.opj_mutex_t** %3901, align 8
  %3903 = icmp eq %struct.opj_mutex_t* %3902, null
  br i1 %3903, label %3905, label %3904

3904:                                             ; preds = %3898
  tail call void @opj_mutex_lock(%struct.opj_mutex_t* nonnull %3902) #7
  br label %3905

3905:                                             ; preds = %3898, %3904
  %3906 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %503, align 8
  %3907 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %3906, i64 0, i32 7
  %3908 = load double, double* %3907, align 8
  %3909 = fadd double %3899, %3908
  store double %3909, double* %3907, align 8
  %3910 = load %struct.opj_mutex_t*, %struct.opj_mutex_t** %3901, align 8
  %3911 = icmp eq %struct.opj_mutex_t* %3910, null
  br i1 %3911, label %3913, label %3912

3912:                                             ; preds = %3905
  tail call void @opj_mutex_unlock(%struct.opj_mutex_t* nonnull %3910) #7
  br label %3913

3913:                                             ; preds = %3912, %3905, %2, %96
  tail call void @opj_free(i8* %0) #7
  ret void

3914:                                             ; preds = %3857
  store i32 %3858, i32* %3863, align 8
  br label %3915

3915:                                             ; preds = %3914, %3857
  %3916 = phi i32 [ %3858, %3914 ], [ %3864, %3857 ]
  %3917 = icmp eq i32 %3861, 0
  %3918 = add nsw i64 %3848, -2
  br i1 %3917, label %3866, label %3847

3919:                                             ; preds = %544
  %3920 = icmp sgt i32 %545, %547
  %3921 = select i1 %3920, i32 %545, i32 %547
  br label %3927

3922:                                             ; preds = %544
  %3923 = sub nsw i32 0, %547
  %3924 = icmp sgt i32 %545, %3923
  %3925 = select i1 %3924, i32 %545, i32 %3923
  %3926 = or i32 %3923, -2147483648
  store i32 %3926, i32* %546, align 4
  br label %3927

3927:                                             ; preds = %3922, %3919
  %3928 = phi i32 [ %3925, %3922 ], [ %3921, %3919 ]
  %3929 = getelementptr inbounds i32, i32* %531, i64 2
  %3930 = add i32 %533, -2
  %3931 = icmp eq i32 %3930, 0
  br i1 %3931, label %549, label %530
}

declare void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t*, i32) local_unnamed_addr #2

declare void @opj_mutex_destroy(%struct.opj_mutex_t*) local_unnamed_addr #2

declare i8* @opj_aligned_malloc(i64) local_unnamed_addr #2

declare void @opj_mutex_lock(%struct.opj_mutex_t*) local_unnamed_addr #2

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #2

declare void @opj_mutex_unlock(%struct.opj_mutex_t*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @opj_tls_get(%struct.opj_tls_t*, i32) local_unnamed_addr #2

declare i32 @opj_tls_set(%struct.opj_tls_t*, i32, i8*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @opj_t1_destroy_wrapper(i8*) #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds i8, i8* %0, i64 216
  %5 = bitcast i8* %4 to i32**
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = bitcast i32* %6 to i8*
  tail call void @opj_aligned_free(i8* nonnull %9) #7
  store i32* null, i32** %5, align 8
  br label %10

10:                                               ; preds = %8, %3
  %11 = getelementptr inbounds i8, i8* %0, i64 224
  %12 = bitcast i8* %11 to i32**
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = bitcast i32* %13 to i8*
  tail call void @opj_aligned_free(i8* nonnull %16) #7
  store i32* null, i32** %12, align 8
  br label %17

17:                                               ; preds = %15, %10
  %18 = getelementptr inbounds i8, i8* %0, i64 256
  %19 = bitcast i8* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  tail call void @opj_free(i8* %20) #7
  tail call void @opj_free(i8* nonnull %0) #7
  br label %21

21:                                               ; preds = %1, %17
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_t1_allocate_buffers(%struct.opj_t1* nocapture, i32, i32) unnamed_addr #0 {
  %4 = mul i32 %2, %1
  %5 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = icmp ugt i32 %4, %6
  %8 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  br i1 %7, label %12, label %9

9:                                                ; preds = %3
  %10 = load i32*, i32** %8, align 8
  %11 = bitcast i32* %10 to i8*
  br label %21

12:                                               ; preds = %3
  %13 = bitcast i32** %8 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @opj_aligned_free(i8* %14) #7
  %15 = zext i32 %4 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = tail call i8* @opj_aligned_malloc(i64 %16) #7
  store i8* %17, i8** %13, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %338, label %19

19:                                               ; preds = %12
  %20 = bitcast i8* %17 to i32*
  store i32 %4, i32* %5, align 8
  br label %21

21:                                               ; preds = %9, %19
  %22 = phi i8* [ %11, %9 ], [ %17, %19 ]
  %23 = phi i32* [ %10, %9 ], [ %20, %19 ]
  %24 = icmp eq i32* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = zext i32 %4 to i64
  %27 = shl nuw nsw i64 %26, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 0, i64 %27, i1 false)
  br label %28

28:                                               ; preds = %21, %25
  %29 = add i32 %1, 2
  %30 = add i32 %2, 3
  %31 = lshr i32 %30, 2
  %32 = add nuw nsw i32 %31, 2
  %33 = mul i32 %32, %29
  %34 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 6
  %35 = load i32, i32* %34, align 4
  %36 = icmp ugt i32 %33, %35
  %37 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  %38 = bitcast i32** %37 to i8**
  %39 = load i8*, i8** %38, align 8
  br i1 %36, label %43, label %40

40:                                               ; preds = %28
  %41 = zext i32 %33 to i64
  %42 = shl nuw nsw i64 %41, 2
  br label %48

43:                                               ; preds = %28
  tail call void @opj_aligned_free(i8* %39) #7
  %44 = zext i32 %33 to i64
  %45 = shl nuw nsw i64 %44, 2
  %46 = tail call i8* @opj_aligned_malloc(i64 %45) #7
  store i8* %46, i8** %38, align 8
  %47 = icmp eq i8* %46, null
  br i1 %47, label %338, label %48

48:                                               ; preds = %40, %43
  %49 = phi i64 [ %42, %40 ], [ %45, %43 ]
  %50 = phi i8* [ %39, %40 ], [ %46, %43 ]
  store i32 %33, i32* %34, align 4
  %51 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 %49, i1 false)
  %52 = load i32*, i32** %51, align 8
  %53 = icmp eq i32 %29, 0
  br i1 %53, label %230, label %54

54:                                               ; preds = %48
  %55 = add i32 %1, 1
  %56 = zext i32 %55 to i64
  %57 = add nuw nsw i64 %56, 1
  %58 = icmp ult i64 %57, 8
  br i1 %58, label %130, label %59

59:                                               ; preds = %54
  %60 = and i64 %57, 8589934584
  %61 = trunc i64 %60 to i32
  %62 = getelementptr i32, i32* %52, i64 %60
  %63 = add nsw i64 %60, -8
  %64 = lshr exact i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp ult i64 %63, 56
  br i1 %67, label %115, label %68

68:                                               ; preds = %59
  %69 = sub nsw i64 %65, %66
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ 0, %68 ], [ %112, %70 ]
  %72 = phi i64 [ %69, %68 ], [ %113, %70 ]
  %73 = getelementptr i32, i32* %52, i64 %71
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %74, align 4
  %75 = getelementptr i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %76, align 4
  %77 = or i64 %71, 8
  %78 = getelementptr i32, i32* %52, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %79, align 4
  %80 = getelementptr i32, i32* %78, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %81, align 4
  %82 = or i64 %71, 16
  %83 = getelementptr i32, i32* %52, i64 %82
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %84, align 4
  %85 = getelementptr i32, i32* %83, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %86, align 4
  %87 = or i64 %71, 24
  %88 = getelementptr i32, i32* %52, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %89, align 4
  %90 = getelementptr i32, i32* %88, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %91, align 4
  %92 = or i64 %71, 32
  %93 = getelementptr i32, i32* %52, i64 %92
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %94, align 4
  %95 = getelementptr i32, i32* %93, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %96, align 4
  %97 = or i64 %71, 40
  %98 = getelementptr i32, i32* %52, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %99, align 4
  %100 = getelementptr i32, i32* %98, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %101, align 4
  %102 = or i64 %71, 48
  %103 = getelementptr i32, i32* %52, i64 %102
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %104, align 4
  %105 = getelementptr i32, i32* %103, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %106, align 4
  %107 = or i64 %71, 56
  %108 = getelementptr i32, i32* %52, i64 %107
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %109, align 4
  %110 = getelementptr i32, i32* %108, i64 4
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %111, align 4
  %112 = add i64 %71, 64
  %113 = add i64 %72, -8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %70, !llvm.loop !41

115:                                              ; preds = %70, %59
  %116 = phi i64 [ 0, %59 ], [ %112, %70 ]
  %117 = icmp eq i64 %66, 0
  br i1 %117, label %128, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %125, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %126, %118 ], [ %66, %115 ]
  %121 = getelementptr i32, i32* %52, i64 %119
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %122, align 4
  %123 = getelementptr i32, i32* %121, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %124, align 4
  %125 = add i64 %119, 8
  %126 = add i64 %120, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %118, !llvm.loop !42

128:                                              ; preds = %118, %115
  %129 = icmp eq i64 %57, %60
  br i1 %129, label %139, label %130

130:                                              ; preds = %128, %54
  %131 = phi i32 [ 0, %54 ], [ %61, %128 ]
  %132 = phi i32* [ %52, %54 ], [ %62, %128 ]
  br label %133

133:                                              ; preds = %130, %133
  %134 = phi i32 [ %137, %133 ], [ %131, %130 ]
  %135 = phi i32* [ %136, %133 ], [ %132, %130 ]
  %136 = getelementptr inbounds i32, i32* %135, i64 1
  store i32 1226833920, i32* %135, align 4
  %137 = add nuw i32 %134, 1
  %138 = icmp eq i32 %137, %29
  br i1 %138, label %139, label %133, !llvm.loop !43

139:                                              ; preds = %133, %128
  br i1 %53, label %230, label %140

140:                                              ; preds = %139
  %141 = load i32*, i32** %51, align 8
  %142 = add nuw nsw i32 %31, 1
  %143 = mul i32 %142, %29
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i32, i32* %141, i64 %144
  %146 = add i32 %1, 1
  %147 = zext i32 %146 to i64
  %148 = add nuw nsw i64 %147, 1
  %149 = icmp ult i64 %148, 8
  br i1 %149, label %221, label %150

150:                                              ; preds = %140
  %151 = and i64 %148, 8589934584
  %152 = trunc i64 %151 to i32
  %153 = getelementptr i32, i32* %145, i64 %151
  %154 = add nsw i64 %151, -8
  %155 = lshr exact i64 %154, 3
  %156 = add nuw nsw i64 %155, 1
  %157 = and i64 %156, 7
  %158 = icmp ult i64 %154, 56
  br i1 %158, label %206, label %159

159:                                              ; preds = %150
  %160 = sub nsw i64 %156, %157
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i64 [ 0, %159 ], [ %203, %161 ]
  %163 = phi i64 [ %160, %159 ], [ %204, %161 ]
  %164 = getelementptr i32, i32* %145, i64 %162
  %165 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %165, align 4
  %166 = getelementptr i32, i32* %164, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %167, align 4
  %168 = or i64 %162, 8
  %169 = getelementptr i32, i32* %145, i64 %168
  %170 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %170, align 4
  %171 = getelementptr i32, i32* %169, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %172, align 4
  %173 = or i64 %162, 16
  %174 = getelementptr i32, i32* %145, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %175, align 4
  %176 = getelementptr i32, i32* %174, i64 4
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %177, align 4
  %178 = or i64 %162, 24
  %179 = getelementptr i32, i32* %145, i64 %178
  %180 = bitcast i32* %179 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %180, align 4
  %181 = getelementptr i32, i32* %179, i64 4
  %182 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %182, align 4
  %183 = or i64 %162, 32
  %184 = getelementptr i32, i32* %145, i64 %183
  %185 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %185, align 4
  %186 = getelementptr i32, i32* %184, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %187, align 4
  %188 = or i64 %162, 40
  %189 = getelementptr i32, i32* %145, i64 %188
  %190 = bitcast i32* %189 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %190, align 4
  %191 = getelementptr i32, i32* %189, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %192, align 4
  %193 = or i64 %162, 48
  %194 = getelementptr i32, i32* %145, i64 %193
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %195, align 4
  %196 = getelementptr i32, i32* %194, i64 4
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %197, align 4
  %198 = or i64 %162, 56
  %199 = getelementptr i32, i32* %145, i64 %198
  %200 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %200, align 4
  %201 = getelementptr i32, i32* %199, i64 4
  %202 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %202, align 4
  %203 = add i64 %162, 64
  %204 = add i64 %163, -8
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %161, !llvm.loop !44

206:                                              ; preds = %161, %150
  %207 = phi i64 [ 0, %150 ], [ %203, %161 ]
  %208 = icmp eq i64 %157, 0
  br i1 %208, label %219, label %209

209:                                              ; preds = %206, %209
  %210 = phi i64 [ %216, %209 ], [ %207, %206 ]
  %211 = phi i64 [ %217, %209 ], [ %157, %206 ]
  %212 = getelementptr i32, i32* %145, i64 %210
  %213 = bitcast i32* %212 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %213, align 4
  %214 = getelementptr i32, i32* %212, i64 4
  %215 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> <i32 1226833920, i32 1226833920, i32 1226833920, i32 1226833920>, <4 x i32>* %215, align 4
  %216 = add i64 %210, 8
  %217 = add i64 %211, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %209, !llvm.loop !45

219:                                              ; preds = %209, %206
  %220 = icmp eq i64 %148, %151
  br i1 %220, label %230, label %221

221:                                              ; preds = %219, %140
  %222 = phi i32 [ 0, %140 ], [ %152, %219 ]
  %223 = phi i32* [ %145, %140 ], [ %153, %219 ]
  br label %224

224:                                              ; preds = %221, %224
  %225 = phi i32 [ %228, %224 ], [ %222, %221 ]
  %226 = phi i32* [ %227, %224 ], [ %223, %221 ]
  %227 = getelementptr inbounds i32, i32* %226, i64 1
  store i32 1226833920, i32* %226, align 4
  %228 = add nuw i32 %225, 1
  %229 = icmp eq i32 %228, %29
  br i1 %229, label %230, label %224, !llvm.loop !46

230:                                              ; preds = %224, %219, %48, %139
  %231 = and i32 %2, 3
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %335, label %233

233:                                              ; preds = %230
  %234 = load i32*, i32** %51, align 8
  %235 = mul i32 %31, %29
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds i32, i32* %234, i64 %236
  %238 = add nsw i32 %231, -1
  %239 = icmp ult i32 %238, 3
  br i1 %239, label %240, label %244

240:                                              ; preds = %233
  %241 = sext i32 %238 to i64
  %242 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.opj_t1_allocate_buffers, i64 0, i64 %241
  %243 = load i32, i32* %242, align 4
  br label %244

244:                                              ; preds = %233, %240
  %245 = phi i32 [ %243, %240 ], [ 0, %233 ]
  br i1 %53, label %335, label %246

246:                                              ; preds = %244
  %247 = add i32 %1, 1
  %248 = zext i32 %247 to i64
  %249 = add nuw nsw i64 %248, 1
  %250 = icmp ult i64 %249, 8
  br i1 %250, label %326, label %251

251:                                              ; preds = %246
  %252 = and i64 %249, 8589934584
  %253 = trunc i64 %252 to i32
  %254 = getelementptr i32, i32* %237, i64 %252
  %255 = insertelement <4 x i32> undef, i32 %245, i32 0
  %256 = shufflevector <4 x i32> %255, <4 x i32> undef, <4 x i32> zeroinitializer
  %257 = insertelement <4 x i32> undef, i32 %245, i32 0
  %258 = shufflevector <4 x i32> %257, <4 x i32> undef, <4 x i32> zeroinitializer
  %259 = add nsw i64 %252, -8
  %260 = lshr exact i64 %259, 3
  %261 = add nuw nsw i64 %260, 1
  %262 = and i64 %261, 7
  %263 = icmp ult i64 %259, 56
  br i1 %263, label %311, label %264

264:                                              ; preds = %251
  %265 = sub nsw i64 %261, %262
  br label %266

266:                                              ; preds = %266, %264
  %267 = phi i64 [ 0, %264 ], [ %308, %266 ]
  %268 = phi i64 [ %265, %264 ], [ %309, %266 ]
  %269 = getelementptr i32, i32* %237, i64 %267
  %270 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %270, align 4
  %271 = getelementptr i32, i32* %269, i64 4
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %272, align 4
  %273 = or i64 %267, 8
  %274 = getelementptr i32, i32* %237, i64 %273
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %275, align 4
  %276 = getelementptr i32, i32* %274, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %277, align 4
  %278 = or i64 %267, 16
  %279 = getelementptr i32, i32* %237, i64 %278
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %280, align 4
  %281 = getelementptr i32, i32* %279, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %282, align 4
  %283 = or i64 %267, 24
  %284 = getelementptr i32, i32* %237, i64 %283
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %285, align 4
  %286 = getelementptr i32, i32* %284, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %287, align 4
  %288 = or i64 %267, 32
  %289 = getelementptr i32, i32* %237, i64 %288
  %290 = bitcast i32* %289 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %290, align 4
  %291 = getelementptr i32, i32* %289, i64 4
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %292, align 4
  %293 = or i64 %267, 40
  %294 = getelementptr i32, i32* %237, i64 %293
  %295 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %295, align 4
  %296 = getelementptr i32, i32* %294, i64 4
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %297, align 4
  %298 = or i64 %267, 48
  %299 = getelementptr i32, i32* %237, i64 %298
  %300 = bitcast i32* %299 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %300, align 4
  %301 = getelementptr i32, i32* %299, i64 4
  %302 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %302, align 4
  %303 = or i64 %267, 56
  %304 = getelementptr i32, i32* %237, i64 %303
  %305 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %305, align 4
  %306 = getelementptr i32, i32* %304, i64 4
  %307 = bitcast i32* %306 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %307, align 4
  %308 = add i64 %267, 64
  %309 = add i64 %268, -8
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %266, !llvm.loop !47

311:                                              ; preds = %266, %251
  %312 = phi i64 [ 0, %251 ], [ %308, %266 ]
  %313 = icmp eq i64 %262, 0
  br i1 %313, label %324, label %314

314:                                              ; preds = %311, %314
  %315 = phi i64 [ %321, %314 ], [ %312, %311 ]
  %316 = phi i64 [ %322, %314 ], [ %262, %311 ]
  %317 = getelementptr i32, i32* %237, i64 %315
  %318 = bitcast i32* %317 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %318, align 4
  %319 = getelementptr i32, i32* %317, i64 4
  %320 = bitcast i32* %319 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %320, align 4
  %321 = add i64 %315, 8
  %322 = add i64 %316, -1
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %314, !llvm.loop !48

324:                                              ; preds = %314, %311
  %325 = icmp eq i64 %249, %252
  br i1 %325, label %335, label %326

326:                                              ; preds = %324, %246
  %327 = phi i32 [ 0, %246 ], [ %253, %324 ]
  %328 = phi i32* [ %237, %246 ], [ %254, %324 ]
  br label %329

329:                                              ; preds = %326, %329
  %330 = phi i32 [ %333, %329 ], [ %327, %326 ]
  %331 = phi i32* [ %332, %329 ], [ %328, %326 ]
  %332 = getelementptr inbounds i32, i32* %331, i64 1
  store i32 %245, i32* %331, align 4
  %333 = add nuw i32 %330, 1
  %334 = icmp eq i32 %333, %29
  br i1 %334, label %335, label %329, !llvm.loop !49

335:                                              ; preds = %329, %324, %244, %230
  %336 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  store i32 %1, i32* %336, align 8
  %337 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  store i32 %2, i32* %337, align 4
  br label %338

338:                                              ; preds = %43, %12, %335
  %339 = phi i32 [ 1, %335 ], [ 0, %12 ], [ 0, %43 ]
  ret i32 %339
}

declare void @opj_mqc_resetstates(%struct.opj_mqc*) local_unnamed_addr #2

declare void @opj_mqc_setstate(%struct.opj_mqc*, i32, i32, i32) local_unnamed_addr #2

declare i8* @opj_realloc(i8*, i64) local_unnamed_addr #2

declare void @opj_mqc_raw_init_dec(%struct.opj_mqc*, i8*, i32, i32) local_unnamed_addr #2

declare void @opj_mqc_init_dec(%struct.opj_mqc*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_t1_dec_sigpass_mqc(%struct.opj_t1*, i32, i32) unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 64
  %7 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 64
  %10 = and i1 %6, %9
  %11 = and i32 %2, 8
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  %16 = load i32*, i32** %15, align 8
  br i1 %10, label %17, label %2361

17:                                               ; preds = %3
  %18 = getelementptr inbounds i32, i32* %16, i64 67
  %19 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  %20 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %19, align 8
  %21 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = shl i32 1, %1
  %28 = ashr i32 %27, 1
  %29 = or i32 %28, %27
  %30 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %31 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %32 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %33 = sub nsw i32 0, %29
  br i1 %12, label %1192, label %34

34:                                               ; preds = %17, %1186
  %35 = phi i32 [ %1187, %1186 ], [ 0, %17 ]
  %36 = phi i32* [ %1188, %1186 ], [ %14, %17 ]
  %37 = phi i32* [ %1189, %1186 ], [ %18, %17 ]
  %38 = phi %struct.opj_mqc_state** [ %1181, %1186 ], [ %20, %17 ]
  %39 = phi i32 [ %1180, %1186 ], [ %22, %17 ]
  %40 = phi i32 [ %1179, %1186 ], [ %24, %17 ]
  %41 = phi i32 [ %1178, %1186 ], [ %26, %17 ]
  br label %42

42:                                               ; preds = %1177, %34
  %43 = phi i32 [ 0, %34 ], [ %1182, %1177 ]
  %44 = phi i32* [ %36, %34 ], [ %1183, %1177 ]
  %45 = phi i32* [ %37, %34 ], [ %1184, %1177 ]
  %46 = phi %struct.opj_mqc_state** [ %38, %34 ], [ %1181, %1177 ]
  %47 = phi i32 [ %39, %34 ], [ %1180, %1177 ]
  %48 = phi i32 [ %40, %34 ], [ %1179, %1177 ]
  %49 = phi i32 [ %41, %34 ], [ %1178, %1177 ]
  %50 = load i32, i32* %45, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %1177, label %52

52:                                               ; preds = %42
  %53 = and i32 %50, 2097168
  %54 = icmp ne i32 %53, 0
  %55 = and i32 %50, 495
  %56 = icmp eq i32 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %323, label %58

58:                                               ; preds = %52
  %59 = load i8*, i8** %30, align 8
  %60 = zext i32 %55 to i64
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %63
  %65 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %64, align 8
  %66 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = sub i32 %48, %67
  %69 = lshr i32 %47, 16
  %70 = icmp ult i32 %69, %67
  br i1 %70, label %71, label %115

71:                                               ; preds = %58
  %72 = icmp ult i32 %68, %67
  %73 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  %76 = zext i1 %75 to i32
  %77 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 3
  %78 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 2
  %79 = select i1 %72, %struct.opj_mqc_state** %78, %struct.opj_mqc_state** %77
  %80 = select i1 %72, i32 %74, i32 %76
  %81 = bitcast %struct.opj_mqc_state** %79 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %struct.opj_mqc_state** %64 to i64*
  store i64 %82, i64* %83, align 8
  br label %84

84:                                               ; preds = %108, %71
  %85 = phi i32 [ %49, %71 ], [ %113, %108 ]
  %86 = phi i32 [ %67, %71 ], [ %111, %108 ]
  %87 = phi i32 [ %47, %71 ], [ %112, %108 ]
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %89, label %108

89:                                               ; preds = %84
  %90 = load i8*, i8** %31, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = load i8, i8* %90, align 1
  %95 = icmp eq i8 %94, -1
  br i1 %95, label %96, label %105

96:                                               ; preds = %89
  %97 = icmp ugt i8 %92, -113
  br i1 %97, label %98, label %102

98:                                               ; preds = %96
  %99 = add i32 %87, 65280
  %100 = load i32, i32* %32, align 4
  %101 = add i32 %100, 1
  store i32 %101, i32* %32, align 4
  br label %108

102:                                              ; preds = %96
  store i8* %91, i8** %31, align 8
  %103 = shl nuw nsw i32 %93, 9
  %104 = add i32 %103, %87
  br label %108

105:                                              ; preds = %89
  store i8* %91, i8** %31, align 8
  %106 = shl nuw nsw i32 %93, 8
  %107 = add i32 %106, %87
  br label %108

108:                                              ; preds = %105, %102, %98, %84
  %109 = phi i32 [ %85, %84 ], [ 8, %98 ], [ 7, %102 ], [ 8, %105 ]
  %110 = phi i32 [ %87, %84 ], [ %99, %98 ], [ %104, %102 ], [ %107, %105 ]
  %111 = shl i32 %86, 1
  %112 = shl i32 %110, 1
  %113 = add i32 %109, -1
  %114 = icmp ult i32 %111, 32768
  br i1 %114, label %84, label %167

115:                                              ; preds = %58
  %116 = shl i32 %67, 16
  %117 = sub i32 %47, %116
  %118 = trunc i32 %68 to i16
  %119 = icmp sgt i16 %118, -1
  br i1 %119, label %120, label %164

120:                                              ; preds = %115
  %121 = icmp ult i32 %68, %67
  %122 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 1
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 2
  %125 = icmp eq i32 %123, 0
  %126 = zext i1 %125 to i32
  %127 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 3
  %128 = select i1 %121, %struct.opj_mqc_state** %127, %struct.opj_mqc_state** %124
  %129 = select i1 %121, i32 %126, i32 %123
  %130 = bitcast %struct.opj_mqc_state** %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %struct.opj_mqc_state** %64 to i64*
  store i64 %131, i64* %132, align 8
  br label %133

133:                                              ; preds = %157, %120
  %134 = phi i32 [ %49, %120 ], [ %162, %157 ]
  %135 = phi i32 [ %68, %120 ], [ %160, %157 ]
  %136 = phi i32 [ %117, %120 ], [ %161, %157 ]
  %137 = icmp eq i32 %134, 0
  br i1 %137, label %138, label %157

138:                                              ; preds = %133
  %139 = load i8*, i8** %31, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = load i8, i8* %139, align 1
  %144 = icmp eq i8 %143, -1
  br i1 %144, label %145, label %154

145:                                              ; preds = %138
  %146 = icmp ugt i8 %141, -113
  br i1 %146, label %147, label %151

147:                                              ; preds = %145
  %148 = add i32 %136, 65280
  %149 = load i32, i32* %32, align 4
  %150 = add i32 %149, 1
  store i32 %150, i32* %32, align 4
  br label %157

151:                                              ; preds = %145
  store i8* %140, i8** %31, align 8
  %152 = shl nuw nsw i32 %142, 9
  %153 = add i32 %152, %136
  br label %157

154:                                              ; preds = %138
  store i8* %140, i8** %31, align 8
  %155 = shl nuw nsw i32 %142, 8
  %156 = add i32 %155, %136
  br label %157

157:                                              ; preds = %154, %151, %147, %133
  %158 = phi i32 [ %134, %133 ], [ 8, %147 ], [ 7, %151 ], [ 8, %154 ]
  %159 = phi i32 [ %136, %133 ], [ %148, %147 ], [ %153, %151 ], [ %156, %154 ]
  %160 = shl i32 %135, 1
  %161 = shl i32 %159, 1
  %162 = add i32 %158, -1
  %163 = icmp ult i32 %160, 32768
  br i1 %163, label %133, label %167

164:                                              ; preds = %115
  %165 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %65, i64 0, i32 1
  %166 = load i32, i32* %165, align 4
  br label %167

167:                                              ; preds = %157, %108, %164
  %168 = phi i32 [ %166, %164 ], [ %80, %108 ], [ %129, %157 ]
  %169 = phi i32 [ %49, %164 ], [ %113, %108 ], [ %162, %157 ]
  %170 = phi i32 [ %68, %164 ], [ %111, %108 ], [ %160, %157 ]
  %171 = phi i32 [ %117, %164 ], [ %112, %108 ], [ %161, %157 ]
  %172 = icmp eq i32 %168, 0
  br i1 %172, label %316, label %173

173:                                              ; preds = %167
  %174 = getelementptr inbounds i32, i32* %45, i64 -1
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %45, i64 1
  %177 = load i32, i32* %176, align 4
  %178 = and i32 %50, 170
  %179 = lshr i32 %175, 19
  %180 = and i32 %179, 1
  %181 = lshr i32 %177, 17
  %182 = and i32 %181, 4
  %183 = lshr i32 %50, 14
  %184 = and i32 %183, 16
  %185 = lshr i32 %50, 16
  %186 = and i32 %185, 64
  %187 = or i32 %186, %178
  %188 = or i32 %187, %184
  %189 = or i32 %188, %180
  %190 = or i32 %189, %182
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %191
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = zext i8 %193 to i64
  %198 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %197
  %199 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %198, align 8
  %200 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 0
  %201 = load i32, i32* %200, align 8
  %202 = sub i32 %170, %201
  %203 = lshr i32 %171, 16
  %204 = icmp ult i32 %203, %201
  br i1 %204, label %205, label %249

205:                                              ; preds = %173
  %206 = icmp ult i32 %202, %201
  %207 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, 0
  %210 = zext i1 %209 to i32
  %211 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 3
  %212 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 2
  %213 = select i1 %206, %struct.opj_mqc_state** %212, %struct.opj_mqc_state** %211
  %214 = select i1 %206, i32 %208, i32 %210
  %215 = bitcast %struct.opj_mqc_state** %213 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %struct.opj_mqc_state** %198 to i64*
  store i64 %216, i64* %217, align 8
  br label %218

218:                                              ; preds = %242, %205
  %219 = phi i32 [ %169, %205 ], [ %247, %242 ]
  %220 = phi i32 [ %201, %205 ], [ %245, %242 ]
  %221 = phi i32 [ %171, %205 ], [ %246, %242 ]
  %222 = icmp eq i32 %219, 0
  br i1 %222, label %223, label %242

223:                                              ; preds = %218
  %224 = load i8*, i8** %31, align 8
  %225 = getelementptr inbounds i8, i8* %224, i64 1
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = load i8, i8* %224, align 1
  %229 = icmp eq i8 %228, -1
  br i1 %229, label %230, label %239

230:                                              ; preds = %223
  %231 = icmp ugt i8 %226, -113
  br i1 %231, label %232, label %236

232:                                              ; preds = %230
  %233 = add i32 %221, 65280
  %234 = load i32, i32* %32, align 4
  %235 = add i32 %234, 1
  store i32 %235, i32* %32, align 4
  br label %242

236:                                              ; preds = %230
  store i8* %225, i8** %31, align 8
  %237 = shl nuw nsw i32 %227, 9
  %238 = add i32 %237, %221
  br label %242

239:                                              ; preds = %223
  store i8* %225, i8** %31, align 8
  %240 = shl nuw nsw i32 %227, 8
  %241 = add i32 %240, %221
  br label %242

242:                                              ; preds = %239, %236, %232, %218
  %243 = phi i32 [ %219, %218 ], [ 8, %232 ], [ 7, %236 ], [ 8, %239 ]
  %244 = phi i32 [ %221, %218 ], [ %233, %232 ], [ %238, %236 ], [ %241, %239 ]
  %245 = shl i32 %220, 1
  %246 = shl i32 %244, 1
  %247 = add i32 %243, -1
  %248 = icmp ult i32 %245, 32768
  br i1 %248, label %218, label %301

249:                                              ; preds = %173
  %250 = shl i32 %201, 16
  %251 = sub i32 %171, %250
  %252 = trunc i32 %202 to i16
  %253 = icmp sgt i16 %252, -1
  br i1 %253, label %254, label %298

254:                                              ; preds = %249
  %255 = icmp ult i32 %202, %201
  %256 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 1
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 2
  %259 = icmp eq i32 %257, 0
  %260 = zext i1 %259 to i32
  %261 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 3
  %262 = select i1 %255, %struct.opj_mqc_state** %261, %struct.opj_mqc_state** %258
  %263 = select i1 %255, i32 %260, i32 %257
  %264 = bitcast %struct.opj_mqc_state** %262 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %struct.opj_mqc_state** %198 to i64*
  store i64 %265, i64* %266, align 8
  br label %267

267:                                              ; preds = %291, %254
  %268 = phi i32 [ %169, %254 ], [ %296, %291 ]
  %269 = phi i32 [ %202, %254 ], [ %294, %291 ]
  %270 = phi i32 [ %251, %254 ], [ %295, %291 ]
  %271 = icmp eq i32 %268, 0
  br i1 %271, label %272, label %291

272:                                              ; preds = %267
  %273 = load i8*, i8** %31, align 8
  %274 = getelementptr inbounds i8, i8* %273, i64 1
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = load i8, i8* %273, align 1
  %278 = icmp eq i8 %277, -1
  br i1 %278, label %279, label %288

279:                                              ; preds = %272
  %280 = icmp ugt i8 %275, -113
  br i1 %280, label %281, label %285

281:                                              ; preds = %279
  %282 = add i32 %270, 65280
  %283 = load i32, i32* %32, align 4
  %284 = add i32 %283, 1
  store i32 %284, i32* %32, align 4
  br label %291

285:                                              ; preds = %279
  store i8* %274, i8** %31, align 8
  %286 = shl nuw nsw i32 %276, 9
  %287 = add i32 %286, %270
  br label %291

288:                                              ; preds = %272
  store i8* %274, i8** %31, align 8
  %289 = shl nuw nsw i32 %276, 8
  %290 = add i32 %289, %270
  br label %291

291:                                              ; preds = %288, %285, %281, %267
  %292 = phi i32 [ %268, %267 ], [ 8, %281 ], [ 7, %285 ], [ 8, %288 ]
  %293 = phi i32 [ %270, %267 ], [ %282, %281 ], [ %287, %285 ], [ %290, %288 ]
  %294 = shl i32 %269, 1
  %295 = shl i32 %293, 1
  %296 = add i32 %292, -1
  %297 = icmp ult i32 %294, 32768
  br i1 %297, label %267, label %301

298:                                              ; preds = %249
  %299 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %199, i64 0, i32 1
  %300 = load i32, i32* %299, align 4
  br label %301

301:                                              ; preds = %291, %242, %298
  %302 = phi i32 [ %300, %298 ], [ %214, %242 ], [ %263, %291 ]
  %303 = phi i32 [ %169, %298 ], [ %247, %242 ], [ %296, %291 ]
  %304 = phi i32 [ %202, %298 ], [ %245, %242 ], [ %294, %291 ]
  %305 = phi i32 [ %251, %298 ], [ %246, %242 ], [ %295, %291 ]
  %306 = xor i32 %302, %196
  %307 = icmp eq i32 %306, 0
  %308 = select i1 %307, i32 %29, i32 %33
  store i32 %308, i32* %44, align 4
  %309 = load i32, i32* %174, align 4
  %310 = or i32 %309, 32
  store i32 %310, i32* %174, align 4
  %311 = shl i32 %306, 19
  %312 = or i32 %50, %311
  %313 = or i32 %312, 16
  %314 = load i32, i32* %176, align 4
  %315 = or i32 %314, 8
  store i32 %315, i32* %176, align 4
  br label %316

316:                                              ; preds = %301, %167
  %317 = phi i32 [ %313, %301 ], [ %50, %167 ]
  %318 = phi i32 [ %303, %301 ], [ %169, %167 ]
  %319 = phi i32 [ %304, %301 ], [ %170, %167 ]
  %320 = phi i32 [ %305, %301 ], [ %171, %167 ]
  %321 = phi %struct.opj_mqc_state** [ %198, %301 ], [ %64, %167 ]
  %322 = or i32 %317, 2097152
  br label %323

323:                                              ; preds = %316, %52
  %324 = phi i32 [ %322, %316 ], [ %50, %52 ]
  %325 = phi i32 [ %318, %316 ], [ %49, %52 ]
  %326 = phi i32 [ %319, %316 ], [ %48, %52 ]
  %327 = phi i32 [ %320, %316 ], [ %47, %52 ]
  %328 = phi %struct.opj_mqc_state** [ %321, %316 ], [ %46, %52 ]
  %329 = and i32 %324, 16777344
  %330 = icmp ne i32 %329, 0
  %331 = and i32 %324, 3960
  %332 = icmp eq i32 %331, 0
  %333 = or i1 %330, %332
  br i1 %333, label %602, label %334

334:                                              ; preds = %323
  %335 = lshr i32 %324, 3
  %336 = load i8*, i8** %30, align 8
  %337 = and i32 %335, 495
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds i8, i8* %336, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i64
  %342 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %341
  %343 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %342, align 8
  %344 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 0
  %345 = load i32, i32* %344, align 8
  %346 = sub i32 %326, %345
  %347 = lshr i32 %327, 16
  %348 = icmp ult i32 %347, %345
  br i1 %348, label %349, label %393

349:                                              ; preds = %334
  %350 = icmp ult i32 %346, %345
  %351 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 1
  %352 = load i32, i32* %351, align 4
  %353 = icmp eq i32 %352, 0
  %354 = zext i1 %353 to i32
  %355 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 3
  %356 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 2
  %357 = select i1 %350, %struct.opj_mqc_state** %356, %struct.opj_mqc_state** %355
  %358 = select i1 %350, i32 %352, i32 %354
  %359 = bitcast %struct.opj_mqc_state** %357 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = bitcast %struct.opj_mqc_state** %342 to i64*
  store i64 %360, i64* %361, align 8
  br label %362

362:                                              ; preds = %386, %349
  %363 = phi i32 [ %325, %349 ], [ %391, %386 ]
  %364 = phi i32 [ %345, %349 ], [ %389, %386 ]
  %365 = phi i32 [ %327, %349 ], [ %390, %386 ]
  %366 = icmp eq i32 %363, 0
  br i1 %366, label %367, label %386

367:                                              ; preds = %362
  %368 = load i8*, i8** %31, align 8
  %369 = getelementptr inbounds i8, i8* %368, i64 1
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = load i8, i8* %368, align 1
  %373 = icmp eq i8 %372, -1
  br i1 %373, label %374, label %383

374:                                              ; preds = %367
  %375 = icmp ugt i8 %370, -113
  br i1 %375, label %376, label %380

376:                                              ; preds = %374
  %377 = add i32 %365, 65280
  %378 = load i32, i32* %32, align 4
  %379 = add i32 %378, 1
  store i32 %379, i32* %32, align 4
  br label %386

380:                                              ; preds = %374
  store i8* %369, i8** %31, align 8
  %381 = shl nuw nsw i32 %371, 9
  %382 = add i32 %381, %365
  br label %386

383:                                              ; preds = %367
  store i8* %369, i8** %31, align 8
  %384 = shl nuw nsw i32 %371, 8
  %385 = add i32 %384, %365
  br label %386

386:                                              ; preds = %383, %380, %376, %362
  %387 = phi i32 [ %363, %362 ], [ 8, %376 ], [ 7, %380 ], [ 8, %383 ]
  %388 = phi i32 [ %365, %362 ], [ %377, %376 ], [ %382, %380 ], [ %385, %383 ]
  %389 = shl i32 %364, 1
  %390 = shl i32 %388, 1
  %391 = add i32 %387, -1
  %392 = icmp ult i32 %389, 32768
  br i1 %392, label %362, label %445

393:                                              ; preds = %334
  %394 = shl i32 %345, 16
  %395 = sub i32 %327, %394
  %396 = trunc i32 %346 to i16
  %397 = icmp sgt i16 %396, -1
  br i1 %397, label %398, label %442

398:                                              ; preds = %393
  %399 = icmp ult i32 %346, %345
  %400 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 1
  %401 = load i32, i32* %400, align 4
  %402 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 2
  %403 = icmp eq i32 %401, 0
  %404 = zext i1 %403 to i32
  %405 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 3
  %406 = select i1 %399, %struct.opj_mqc_state** %405, %struct.opj_mqc_state** %402
  %407 = select i1 %399, i32 %404, i32 %401
  %408 = bitcast %struct.opj_mqc_state** %406 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = bitcast %struct.opj_mqc_state** %342 to i64*
  store i64 %409, i64* %410, align 8
  br label %411

411:                                              ; preds = %435, %398
  %412 = phi i32 [ %325, %398 ], [ %440, %435 ]
  %413 = phi i32 [ %346, %398 ], [ %438, %435 ]
  %414 = phi i32 [ %395, %398 ], [ %439, %435 ]
  %415 = icmp eq i32 %412, 0
  br i1 %415, label %416, label %435

416:                                              ; preds = %411
  %417 = load i8*, i8** %31, align 8
  %418 = getelementptr inbounds i8, i8* %417, i64 1
  %419 = load i8, i8* %418, align 1
  %420 = zext i8 %419 to i32
  %421 = load i8, i8* %417, align 1
  %422 = icmp eq i8 %421, -1
  br i1 %422, label %423, label %432

423:                                              ; preds = %416
  %424 = icmp ugt i8 %419, -113
  br i1 %424, label %425, label %429

425:                                              ; preds = %423
  %426 = add i32 %414, 65280
  %427 = load i32, i32* %32, align 4
  %428 = add i32 %427, 1
  store i32 %428, i32* %32, align 4
  br label %435

429:                                              ; preds = %423
  store i8* %418, i8** %31, align 8
  %430 = shl nuw nsw i32 %420, 9
  %431 = add i32 %430, %414
  br label %435

432:                                              ; preds = %416
  store i8* %418, i8** %31, align 8
  %433 = shl nuw nsw i32 %420, 8
  %434 = add i32 %433, %414
  br label %435

435:                                              ; preds = %432, %429, %425, %411
  %436 = phi i32 [ %412, %411 ], [ 8, %425 ], [ 7, %429 ], [ 8, %432 ]
  %437 = phi i32 [ %414, %411 ], [ %426, %425 ], [ %431, %429 ], [ %434, %432 ]
  %438 = shl i32 %413, 1
  %439 = shl i32 %437, 1
  %440 = add i32 %436, -1
  %441 = icmp ult i32 %438, 32768
  br i1 %441, label %411, label %445

442:                                              ; preds = %393
  %443 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %343, i64 0, i32 1
  %444 = load i32, i32* %443, align 4
  br label %445

445:                                              ; preds = %435, %386, %442
  %446 = phi i32 [ %444, %442 ], [ %358, %386 ], [ %407, %435 ]
  %447 = phi i32 [ %325, %442 ], [ %391, %386 ], [ %440, %435 ]
  %448 = phi i32 [ %346, %442 ], [ %389, %386 ], [ %438, %435 ]
  %449 = phi i32 [ %395, %442 ], [ %390, %386 ], [ %439, %435 ]
  %450 = icmp eq i32 %446, 0
  br i1 %450, label %595, label %451

451:                                              ; preds = %445
  %452 = getelementptr inbounds i32, i32* %45, i64 -1
  %453 = load i32, i32* %452, align 4
  %454 = getelementptr inbounds i32, i32* %45, i64 1
  %455 = load i32, i32* %454, align 4
  %456 = and i32 %335, 170
  %457 = lshr i32 %453, 22
  %458 = and i32 %457, 1
  %459 = lshr i32 %455, 20
  %460 = and i32 %459, 4
  %461 = lshr i32 %324, 15
  %462 = and i32 %461, 16
  %463 = lshr i32 %324, 19
  %464 = and i32 %463, 64
  %465 = or i32 %464, %456
  %466 = or i32 %465, %462
  %467 = or i32 %466, %458
  %468 = or i32 %467, %460
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %469
  %471 = load i8, i8* %470, align 1
  %472 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %469
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i32
  %475 = zext i8 %471 to i64
  %476 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %475
  %477 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %476, align 8
  %478 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 0
  %479 = load i32, i32* %478, align 8
  %480 = sub i32 %448, %479
  %481 = lshr i32 %449, 16
  %482 = icmp ult i32 %481, %479
  br i1 %482, label %483, label %527

483:                                              ; preds = %451
  %484 = icmp ult i32 %480, %479
  %485 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 1
  %486 = load i32, i32* %485, align 4
  %487 = icmp eq i32 %486, 0
  %488 = zext i1 %487 to i32
  %489 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 3
  %490 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 2
  %491 = select i1 %484, %struct.opj_mqc_state** %490, %struct.opj_mqc_state** %489
  %492 = select i1 %484, i32 %486, i32 %488
  %493 = bitcast %struct.opj_mqc_state** %491 to i64*
  %494 = load i64, i64* %493, align 8
  %495 = bitcast %struct.opj_mqc_state** %476 to i64*
  store i64 %494, i64* %495, align 8
  br label %496

496:                                              ; preds = %520, %483
  %497 = phi i32 [ %447, %483 ], [ %525, %520 ]
  %498 = phi i32 [ %479, %483 ], [ %523, %520 ]
  %499 = phi i32 [ %449, %483 ], [ %524, %520 ]
  %500 = icmp eq i32 %497, 0
  br i1 %500, label %501, label %520

501:                                              ; preds = %496
  %502 = load i8*, i8** %31, align 8
  %503 = getelementptr inbounds i8, i8* %502, i64 1
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  %506 = load i8, i8* %502, align 1
  %507 = icmp eq i8 %506, -1
  br i1 %507, label %508, label %517

508:                                              ; preds = %501
  %509 = icmp ugt i8 %504, -113
  br i1 %509, label %510, label %514

510:                                              ; preds = %508
  %511 = add i32 %499, 65280
  %512 = load i32, i32* %32, align 4
  %513 = add i32 %512, 1
  store i32 %513, i32* %32, align 4
  br label %520

514:                                              ; preds = %508
  store i8* %503, i8** %31, align 8
  %515 = shl nuw nsw i32 %505, 9
  %516 = add i32 %515, %499
  br label %520

517:                                              ; preds = %501
  store i8* %503, i8** %31, align 8
  %518 = shl nuw nsw i32 %505, 8
  %519 = add i32 %518, %499
  br label %520

520:                                              ; preds = %517, %514, %510, %496
  %521 = phi i32 [ %497, %496 ], [ 8, %510 ], [ 7, %514 ], [ 8, %517 ]
  %522 = phi i32 [ %499, %496 ], [ %511, %510 ], [ %516, %514 ], [ %519, %517 ]
  %523 = shl i32 %498, 1
  %524 = shl i32 %522, 1
  %525 = add i32 %521, -1
  %526 = icmp ult i32 %523, 32768
  br i1 %526, label %496, label %579

527:                                              ; preds = %451
  %528 = shl i32 %479, 16
  %529 = sub i32 %449, %528
  %530 = trunc i32 %480 to i16
  %531 = icmp sgt i16 %530, -1
  br i1 %531, label %532, label %576

532:                                              ; preds = %527
  %533 = icmp ult i32 %480, %479
  %534 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 1
  %535 = load i32, i32* %534, align 4
  %536 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 2
  %537 = icmp eq i32 %535, 0
  %538 = zext i1 %537 to i32
  %539 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 3
  %540 = select i1 %533, %struct.opj_mqc_state** %539, %struct.opj_mqc_state** %536
  %541 = select i1 %533, i32 %538, i32 %535
  %542 = bitcast %struct.opj_mqc_state** %540 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = bitcast %struct.opj_mqc_state** %476 to i64*
  store i64 %543, i64* %544, align 8
  br label %545

545:                                              ; preds = %569, %532
  %546 = phi i32 [ %447, %532 ], [ %574, %569 ]
  %547 = phi i32 [ %480, %532 ], [ %572, %569 ]
  %548 = phi i32 [ %529, %532 ], [ %573, %569 ]
  %549 = icmp eq i32 %546, 0
  br i1 %549, label %550, label %569

550:                                              ; preds = %545
  %551 = load i8*, i8** %31, align 8
  %552 = getelementptr inbounds i8, i8* %551, i64 1
  %553 = load i8, i8* %552, align 1
  %554 = zext i8 %553 to i32
  %555 = load i8, i8* %551, align 1
  %556 = icmp eq i8 %555, -1
  br i1 %556, label %557, label %566

557:                                              ; preds = %550
  %558 = icmp ugt i8 %553, -113
  br i1 %558, label %559, label %563

559:                                              ; preds = %557
  %560 = add i32 %548, 65280
  %561 = load i32, i32* %32, align 4
  %562 = add i32 %561, 1
  store i32 %562, i32* %32, align 4
  br label %569

563:                                              ; preds = %557
  store i8* %552, i8** %31, align 8
  %564 = shl nuw nsw i32 %554, 9
  %565 = add i32 %564, %548
  br label %569

566:                                              ; preds = %550
  store i8* %552, i8** %31, align 8
  %567 = shl nuw nsw i32 %554, 8
  %568 = add i32 %567, %548
  br label %569

569:                                              ; preds = %566, %563, %559, %545
  %570 = phi i32 [ %546, %545 ], [ 8, %559 ], [ 7, %563 ], [ 8, %566 ]
  %571 = phi i32 [ %548, %545 ], [ %560, %559 ], [ %565, %563 ], [ %568, %566 ]
  %572 = shl i32 %547, 1
  %573 = shl i32 %571, 1
  %574 = add i32 %570, -1
  %575 = icmp ult i32 %572, 32768
  br i1 %575, label %545, label %579

576:                                              ; preds = %527
  %577 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %477, i64 0, i32 1
  %578 = load i32, i32* %577, align 4
  br label %579

579:                                              ; preds = %569, %520, %576
  %580 = phi i32 [ %578, %576 ], [ %492, %520 ], [ %541, %569 ]
  %581 = phi i32 [ %447, %576 ], [ %525, %520 ], [ %574, %569 ]
  %582 = phi i32 [ %480, %576 ], [ %523, %520 ], [ %572, %569 ]
  %583 = phi i32 [ %529, %576 ], [ %524, %520 ], [ %573, %569 ]
  %584 = xor i32 %580, %474
  %585 = icmp eq i32 %584, 0
  %586 = select i1 %585, i32 %29, i32 %33
  %587 = getelementptr inbounds i32, i32* %44, i64 64
  store i32 %586, i32* %587, align 4
  %588 = load i32, i32* %452, align 4
  %589 = or i32 %588, 256
  store i32 %589, i32* %452, align 4
  %590 = shl i32 %584, 22
  %591 = or i32 %324, %590
  %592 = or i32 %591, 128
  %593 = load i32, i32* %454, align 4
  %594 = or i32 %593, 64
  store i32 %594, i32* %454, align 4
  br label %595

595:                                              ; preds = %579, %445
  %596 = phi i32 [ %592, %579 ], [ %324, %445 ]
  %597 = phi i32 [ %581, %579 ], [ %447, %445 ]
  %598 = phi i32 [ %582, %579 ], [ %448, %445 ]
  %599 = phi i32 [ %583, %579 ], [ %449, %445 ]
  %600 = phi %struct.opj_mqc_state** [ %476, %579 ], [ %342, %445 ]
  %601 = or i32 %596, 16777216
  br label %602

602:                                              ; preds = %595, %323
  %603 = phi i32 [ %601, %595 ], [ %324, %323 ]
  %604 = phi i32 [ %597, %595 ], [ %325, %323 ]
  %605 = phi i32 [ %598, %595 ], [ %326, %323 ]
  %606 = phi i32 [ %599, %595 ], [ %327, %323 ]
  %607 = phi %struct.opj_mqc_state** [ %600, %595 ], [ %328, %323 ]
  %608 = and i32 %603, 134218752
  %609 = icmp ne i32 %608, 0
  %610 = and i32 %603, 31680
  %611 = icmp eq i32 %610, 0
  %612 = or i1 %609, %611
  br i1 %612, label %881, label %613

613:                                              ; preds = %602
  %614 = lshr i32 %603, 6
  %615 = load i8*, i8** %30, align 8
  %616 = and i32 %614, 495
  %617 = zext i32 %616 to i64
  %618 = getelementptr inbounds i8, i8* %615, i64 %617
  %619 = load i8, i8* %618, align 1
  %620 = zext i8 %619 to i64
  %621 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %620
  %622 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %621, align 8
  %623 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 0
  %624 = load i32, i32* %623, align 8
  %625 = sub i32 %605, %624
  %626 = lshr i32 %606, 16
  %627 = icmp ult i32 %626, %624
  br i1 %627, label %628, label %672

628:                                              ; preds = %613
  %629 = icmp ult i32 %625, %624
  %630 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 1
  %631 = load i32, i32* %630, align 4
  %632 = icmp eq i32 %631, 0
  %633 = zext i1 %632 to i32
  %634 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 3
  %635 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 2
  %636 = select i1 %629, %struct.opj_mqc_state** %635, %struct.opj_mqc_state** %634
  %637 = select i1 %629, i32 %631, i32 %633
  %638 = bitcast %struct.opj_mqc_state** %636 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %struct.opj_mqc_state** %621 to i64*
  store i64 %639, i64* %640, align 8
  br label %641

641:                                              ; preds = %665, %628
  %642 = phi i32 [ %604, %628 ], [ %670, %665 ]
  %643 = phi i32 [ %624, %628 ], [ %668, %665 ]
  %644 = phi i32 [ %606, %628 ], [ %669, %665 ]
  %645 = icmp eq i32 %642, 0
  br i1 %645, label %646, label %665

646:                                              ; preds = %641
  %647 = load i8*, i8** %31, align 8
  %648 = getelementptr inbounds i8, i8* %647, i64 1
  %649 = load i8, i8* %648, align 1
  %650 = zext i8 %649 to i32
  %651 = load i8, i8* %647, align 1
  %652 = icmp eq i8 %651, -1
  br i1 %652, label %653, label %662

653:                                              ; preds = %646
  %654 = icmp ugt i8 %649, -113
  br i1 %654, label %655, label %659

655:                                              ; preds = %653
  %656 = add i32 %644, 65280
  %657 = load i32, i32* %32, align 4
  %658 = add i32 %657, 1
  store i32 %658, i32* %32, align 4
  br label %665

659:                                              ; preds = %653
  store i8* %648, i8** %31, align 8
  %660 = shl nuw nsw i32 %650, 9
  %661 = add i32 %660, %644
  br label %665

662:                                              ; preds = %646
  store i8* %648, i8** %31, align 8
  %663 = shl nuw nsw i32 %650, 8
  %664 = add i32 %663, %644
  br label %665

665:                                              ; preds = %662, %659, %655, %641
  %666 = phi i32 [ %642, %641 ], [ 8, %655 ], [ 7, %659 ], [ 8, %662 ]
  %667 = phi i32 [ %644, %641 ], [ %656, %655 ], [ %661, %659 ], [ %664, %662 ]
  %668 = shl i32 %643, 1
  %669 = shl i32 %667, 1
  %670 = add i32 %666, -1
  %671 = icmp ult i32 %668, 32768
  br i1 %671, label %641, label %724

672:                                              ; preds = %613
  %673 = shl i32 %624, 16
  %674 = sub i32 %606, %673
  %675 = trunc i32 %625 to i16
  %676 = icmp sgt i16 %675, -1
  br i1 %676, label %677, label %721

677:                                              ; preds = %672
  %678 = icmp ult i32 %625, %624
  %679 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 1
  %680 = load i32, i32* %679, align 4
  %681 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 2
  %682 = icmp eq i32 %680, 0
  %683 = zext i1 %682 to i32
  %684 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 3
  %685 = select i1 %678, %struct.opj_mqc_state** %684, %struct.opj_mqc_state** %681
  %686 = select i1 %678, i32 %683, i32 %680
  %687 = bitcast %struct.opj_mqc_state** %685 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = bitcast %struct.opj_mqc_state** %621 to i64*
  store i64 %688, i64* %689, align 8
  br label %690

690:                                              ; preds = %714, %677
  %691 = phi i32 [ %604, %677 ], [ %719, %714 ]
  %692 = phi i32 [ %625, %677 ], [ %717, %714 ]
  %693 = phi i32 [ %674, %677 ], [ %718, %714 ]
  %694 = icmp eq i32 %691, 0
  br i1 %694, label %695, label %714

695:                                              ; preds = %690
  %696 = load i8*, i8** %31, align 8
  %697 = getelementptr inbounds i8, i8* %696, i64 1
  %698 = load i8, i8* %697, align 1
  %699 = zext i8 %698 to i32
  %700 = load i8, i8* %696, align 1
  %701 = icmp eq i8 %700, -1
  br i1 %701, label %702, label %711

702:                                              ; preds = %695
  %703 = icmp ugt i8 %698, -113
  br i1 %703, label %704, label %708

704:                                              ; preds = %702
  %705 = add i32 %693, 65280
  %706 = load i32, i32* %32, align 4
  %707 = add i32 %706, 1
  store i32 %707, i32* %32, align 4
  br label %714

708:                                              ; preds = %702
  store i8* %697, i8** %31, align 8
  %709 = shl nuw nsw i32 %699, 9
  %710 = add i32 %709, %693
  br label %714

711:                                              ; preds = %695
  store i8* %697, i8** %31, align 8
  %712 = shl nuw nsw i32 %699, 8
  %713 = add i32 %712, %693
  br label %714

714:                                              ; preds = %711, %708, %704, %690
  %715 = phi i32 [ %691, %690 ], [ 8, %704 ], [ 7, %708 ], [ 8, %711 ]
  %716 = phi i32 [ %693, %690 ], [ %705, %704 ], [ %710, %708 ], [ %713, %711 ]
  %717 = shl i32 %692, 1
  %718 = shl i32 %716, 1
  %719 = add i32 %715, -1
  %720 = icmp ult i32 %717, 32768
  br i1 %720, label %690, label %724

721:                                              ; preds = %672
  %722 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %622, i64 0, i32 1
  %723 = load i32, i32* %722, align 4
  br label %724

724:                                              ; preds = %714, %665, %721
  %725 = phi i32 [ %723, %721 ], [ %637, %665 ], [ %686, %714 ]
  %726 = phi i32 [ %604, %721 ], [ %670, %665 ], [ %719, %714 ]
  %727 = phi i32 [ %625, %721 ], [ %668, %665 ], [ %717, %714 ]
  %728 = phi i32 [ %674, %721 ], [ %669, %665 ], [ %718, %714 ]
  %729 = icmp eq i32 %725, 0
  br i1 %729, label %874, label %730

730:                                              ; preds = %724
  %731 = getelementptr inbounds i32, i32* %45, i64 -1
  %732 = load i32, i32* %731, align 4
  %733 = getelementptr inbounds i32, i32* %45, i64 1
  %734 = load i32, i32* %733, align 4
  %735 = and i32 %614, 170
  %736 = lshr i32 %732, 25
  %737 = and i32 %736, 1
  %738 = lshr i32 %734, 23
  %739 = and i32 %738, 4
  %740 = lshr i32 %603, 18
  %741 = and i32 %740, 16
  %742 = lshr i32 %603, 22
  %743 = and i32 %742, 64
  %744 = or i32 %743, %735
  %745 = or i32 %744, %741
  %746 = or i32 %745, %737
  %747 = or i32 %746, %739
  %748 = zext i32 %747 to i64
  %749 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %748
  %750 = load i8, i8* %749, align 1
  %751 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %748
  %752 = load i8, i8* %751, align 1
  %753 = zext i8 %752 to i32
  %754 = zext i8 %750 to i64
  %755 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %754
  %756 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %755, align 8
  %757 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 0
  %758 = load i32, i32* %757, align 8
  %759 = sub i32 %727, %758
  %760 = lshr i32 %728, 16
  %761 = icmp ult i32 %760, %758
  br i1 %761, label %762, label %806

762:                                              ; preds = %730
  %763 = icmp ult i32 %759, %758
  %764 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 1
  %765 = load i32, i32* %764, align 4
  %766 = icmp eq i32 %765, 0
  %767 = zext i1 %766 to i32
  %768 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 3
  %769 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 2
  %770 = select i1 %763, %struct.opj_mqc_state** %769, %struct.opj_mqc_state** %768
  %771 = select i1 %763, i32 %765, i32 %767
  %772 = bitcast %struct.opj_mqc_state** %770 to i64*
  %773 = load i64, i64* %772, align 8
  %774 = bitcast %struct.opj_mqc_state** %755 to i64*
  store i64 %773, i64* %774, align 8
  br label %775

775:                                              ; preds = %799, %762
  %776 = phi i32 [ %726, %762 ], [ %804, %799 ]
  %777 = phi i32 [ %758, %762 ], [ %802, %799 ]
  %778 = phi i32 [ %728, %762 ], [ %803, %799 ]
  %779 = icmp eq i32 %776, 0
  br i1 %779, label %780, label %799

780:                                              ; preds = %775
  %781 = load i8*, i8** %31, align 8
  %782 = getelementptr inbounds i8, i8* %781, i64 1
  %783 = load i8, i8* %782, align 1
  %784 = zext i8 %783 to i32
  %785 = load i8, i8* %781, align 1
  %786 = icmp eq i8 %785, -1
  br i1 %786, label %787, label %796

787:                                              ; preds = %780
  %788 = icmp ugt i8 %783, -113
  br i1 %788, label %789, label %793

789:                                              ; preds = %787
  %790 = add i32 %778, 65280
  %791 = load i32, i32* %32, align 4
  %792 = add i32 %791, 1
  store i32 %792, i32* %32, align 4
  br label %799

793:                                              ; preds = %787
  store i8* %782, i8** %31, align 8
  %794 = shl nuw nsw i32 %784, 9
  %795 = add i32 %794, %778
  br label %799

796:                                              ; preds = %780
  store i8* %782, i8** %31, align 8
  %797 = shl nuw nsw i32 %784, 8
  %798 = add i32 %797, %778
  br label %799

799:                                              ; preds = %796, %793, %789, %775
  %800 = phi i32 [ %776, %775 ], [ 8, %789 ], [ 7, %793 ], [ 8, %796 ]
  %801 = phi i32 [ %778, %775 ], [ %790, %789 ], [ %795, %793 ], [ %798, %796 ]
  %802 = shl i32 %777, 1
  %803 = shl i32 %801, 1
  %804 = add i32 %800, -1
  %805 = icmp ult i32 %802, 32768
  br i1 %805, label %775, label %858

806:                                              ; preds = %730
  %807 = shl i32 %758, 16
  %808 = sub i32 %728, %807
  %809 = trunc i32 %759 to i16
  %810 = icmp sgt i16 %809, -1
  br i1 %810, label %811, label %855

811:                                              ; preds = %806
  %812 = icmp ult i32 %759, %758
  %813 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 1
  %814 = load i32, i32* %813, align 4
  %815 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 2
  %816 = icmp eq i32 %814, 0
  %817 = zext i1 %816 to i32
  %818 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 3
  %819 = select i1 %812, %struct.opj_mqc_state** %818, %struct.opj_mqc_state** %815
  %820 = select i1 %812, i32 %817, i32 %814
  %821 = bitcast %struct.opj_mqc_state** %819 to i64*
  %822 = load i64, i64* %821, align 8
  %823 = bitcast %struct.opj_mqc_state** %755 to i64*
  store i64 %822, i64* %823, align 8
  br label %824

824:                                              ; preds = %848, %811
  %825 = phi i32 [ %726, %811 ], [ %853, %848 ]
  %826 = phi i32 [ %759, %811 ], [ %851, %848 ]
  %827 = phi i32 [ %808, %811 ], [ %852, %848 ]
  %828 = icmp eq i32 %825, 0
  br i1 %828, label %829, label %848

829:                                              ; preds = %824
  %830 = load i8*, i8** %31, align 8
  %831 = getelementptr inbounds i8, i8* %830, i64 1
  %832 = load i8, i8* %831, align 1
  %833 = zext i8 %832 to i32
  %834 = load i8, i8* %830, align 1
  %835 = icmp eq i8 %834, -1
  br i1 %835, label %836, label %845

836:                                              ; preds = %829
  %837 = icmp ugt i8 %832, -113
  br i1 %837, label %838, label %842

838:                                              ; preds = %836
  %839 = add i32 %827, 65280
  %840 = load i32, i32* %32, align 4
  %841 = add i32 %840, 1
  store i32 %841, i32* %32, align 4
  br label %848

842:                                              ; preds = %836
  store i8* %831, i8** %31, align 8
  %843 = shl nuw nsw i32 %833, 9
  %844 = add i32 %843, %827
  br label %848

845:                                              ; preds = %829
  store i8* %831, i8** %31, align 8
  %846 = shl nuw nsw i32 %833, 8
  %847 = add i32 %846, %827
  br label %848

848:                                              ; preds = %845, %842, %838, %824
  %849 = phi i32 [ %825, %824 ], [ 8, %838 ], [ 7, %842 ], [ 8, %845 ]
  %850 = phi i32 [ %827, %824 ], [ %839, %838 ], [ %844, %842 ], [ %847, %845 ]
  %851 = shl i32 %826, 1
  %852 = shl i32 %850, 1
  %853 = add i32 %849, -1
  %854 = icmp ult i32 %851, 32768
  br i1 %854, label %824, label %858

855:                                              ; preds = %806
  %856 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %756, i64 0, i32 1
  %857 = load i32, i32* %856, align 4
  br label %858

858:                                              ; preds = %848, %799, %855
  %859 = phi i32 [ %857, %855 ], [ %771, %799 ], [ %820, %848 ]
  %860 = phi i32 [ %726, %855 ], [ %804, %799 ], [ %853, %848 ]
  %861 = phi i32 [ %759, %855 ], [ %802, %799 ], [ %851, %848 ]
  %862 = phi i32 [ %808, %855 ], [ %803, %799 ], [ %852, %848 ]
  %863 = xor i32 %859, %753
  %864 = icmp eq i32 %863, 0
  %865 = select i1 %864, i32 %29, i32 %33
  %866 = getelementptr inbounds i32, i32* %44, i64 128
  store i32 %865, i32* %866, align 4
  %867 = load i32, i32* %731, align 4
  %868 = or i32 %867, 2048
  store i32 %868, i32* %731, align 4
  %869 = shl i32 %863, 25
  %870 = or i32 %603, %869
  %871 = or i32 %870, 1024
  %872 = load i32, i32* %733, align 4
  %873 = or i32 %872, 512
  store i32 %873, i32* %733, align 4
  br label %874

874:                                              ; preds = %858, %724
  %875 = phi i32 [ %871, %858 ], [ %603, %724 ]
  %876 = phi i32 [ %860, %858 ], [ %726, %724 ]
  %877 = phi i32 [ %861, %858 ], [ %727, %724 ]
  %878 = phi i32 [ %862, %858 ], [ %728, %724 ]
  %879 = phi %struct.opj_mqc_state** [ %755, %858 ], [ %621, %724 ]
  %880 = or i32 %875, 134217728
  br label %881

881:                                              ; preds = %874, %602
  %882 = phi i32 [ %880, %874 ], [ %603, %602 ]
  %883 = phi i32 [ %876, %874 ], [ %604, %602 ]
  %884 = phi i32 [ %877, %874 ], [ %605, %602 ]
  %885 = phi i32 [ %878, %874 ], [ %606, %602 ]
  %886 = phi %struct.opj_mqc_state** [ %879, %874 ], [ %607, %602 ]
  %887 = and i32 %882, 1073750016
  %888 = icmp ne i32 %887, 0
  %889 = and i32 %882, 253440
  %890 = icmp eq i32 %889, 0
  %891 = or i1 %888, %890
  br i1 %891, label %1171, label %892

892:                                              ; preds = %881
  %893 = lshr i32 %882, 9
  %894 = load i8*, i8** %30, align 8
  %895 = and i32 %893, 495
  %896 = zext i32 %895 to i64
  %897 = getelementptr inbounds i8, i8* %894, i64 %896
  %898 = load i8, i8* %897, align 1
  %899 = zext i8 %898 to i64
  %900 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %899
  %901 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %900, align 8
  %902 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 0
  %903 = load i32, i32* %902, align 8
  %904 = sub i32 %884, %903
  %905 = lshr i32 %885, 16
  %906 = icmp ult i32 %905, %903
  br i1 %906, label %907, label %951

907:                                              ; preds = %892
  %908 = icmp ult i32 %904, %903
  %909 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 1
  %910 = load i32, i32* %909, align 4
  %911 = icmp eq i32 %910, 0
  %912 = zext i1 %911 to i32
  %913 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 3
  %914 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 2
  %915 = select i1 %908, %struct.opj_mqc_state** %914, %struct.opj_mqc_state** %913
  %916 = select i1 %908, i32 %910, i32 %912
  %917 = bitcast %struct.opj_mqc_state** %915 to i64*
  %918 = load i64, i64* %917, align 8
  %919 = bitcast %struct.opj_mqc_state** %900 to i64*
  store i64 %918, i64* %919, align 8
  br label %920

920:                                              ; preds = %944, %907
  %921 = phi i32 [ %883, %907 ], [ %949, %944 ]
  %922 = phi i32 [ %903, %907 ], [ %947, %944 ]
  %923 = phi i32 [ %885, %907 ], [ %948, %944 ]
  %924 = icmp eq i32 %921, 0
  br i1 %924, label %925, label %944

925:                                              ; preds = %920
  %926 = load i8*, i8** %31, align 8
  %927 = getelementptr inbounds i8, i8* %926, i64 1
  %928 = load i8, i8* %927, align 1
  %929 = zext i8 %928 to i32
  %930 = load i8, i8* %926, align 1
  %931 = icmp eq i8 %930, -1
  br i1 %931, label %932, label %941

932:                                              ; preds = %925
  %933 = icmp ugt i8 %928, -113
  br i1 %933, label %934, label %938

934:                                              ; preds = %932
  %935 = add i32 %923, 65280
  %936 = load i32, i32* %32, align 4
  %937 = add i32 %936, 1
  store i32 %937, i32* %32, align 4
  br label %944

938:                                              ; preds = %932
  store i8* %927, i8** %31, align 8
  %939 = shl nuw nsw i32 %929, 9
  %940 = add i32 %939, %923
  br label %944

941:                                              ; preds = %925
  store i8* %927, i8** %31, align 8
  %942 = shl nuw nsw i32 %929, 8
  %943 = add i32 %942, %923
  br label %944

944:                                              ; preds = %941, %938, %934, %920
  %945 = phi i32 [ %921, %920 ], [ 8, %934 ], [ 7, %938 ], [ 8, %941 ]
  %946 = phi i32 [ %923, %920 ], [ %935, %934 ], [ %940, %938 ], [ %943, %941 ]
  %947 = shl i32 %922, 1
  %948 = shl i32 %946, 1
  %949 = add i32 %945, -1
  %950 = icmp ult i32 %947, 32768
  br i1 %950, label %920, label %1003

951:                                              ; preds = %892
  %952 = shl i32 %903, 16
  %953 = sub i32 %885, %952
  %954 = trunc i32 %904 to i16
  %955 = icmp sgt i16 %954, -1
  br i1 %955, label %956, label %1000

956:                                              ; preds = %951
  %957 = icmp ult i32 %904, %903
  %958 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 1
  %959 = load i32, i32* %958, align 4
  %960 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 2
  %961 = icmp eq i32 %959, 0
  %962 = zext i1 %961 to i32
  %963 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 3
  %964 = select i1 %957, %struct.opj_mqc_state** %963, %struct.opj_mqc_state** %960
  %965 = select i1 %957, i32 %962, i32 %959
  %966 = bitcast %struct.opj_mqc_state** %964 to i64*
  %967 = load i64, i64* %966, align 8
  %968 = bitcast %struct.opj_mqc_state** %900 to i64*
  store i64 %967, i64* %968, align 8
  br label %969

969:                                              ; preds = %993, %956
  %970 = phi i32 [ %883, %956 ], [ %998, %993 ]
  %971 = phi i32 [ %904, %956 ], [ %996, %993 ]
  %972 = phi i32 [ %953, %956 ], [ %997, %993 ]
  %973 = icmp eq i32 %970, 0
  br i1 %973, label %974, label %993

974:                                              ; preds = %969
  %975 = load i8*, i8** %31, align 8
  %976 = getelementptr inbounds i8, i8* %975, i64 1
  %977 = load i8, i8* %976, align 1
  %978 = zext i8 %977 to i32
  %979 = load i8, i8* %975, align 1
  %980 = icmp eq i8 %979, -1
  br i1 %980, label %981, label %990

981:                                              ; preds = %974
  %982 = icmp ugt i8 %977, -113
  br i1 %982, label %983, label %987

983:                                              ; preds = %981
  %984 = add i32 %972, 65280
  %985 = load i32, i32* %32, align 4
  %986 = add i32 %985, 1
  store i32 %986, i32* %32, align 4
  br label %993

987:                                              ; preds = %981
  store i8* %976, i8** %31, align 8
  %988 = shl nuw nsw i32 %978, 9
  %989 = add i32 %988, %972
  br label %993

990:                                              ; preds = %974
  store i8* %976, i8** %31, align 8
  %991 = shl nuw nsw i32 %978, 8
  %992 = add i32 %991, %972
  br label %993

993:                                              ; preds = %990, %987, %983, %969
  %994 = phi i32 [ %970, %969 ], [ 8, %983 ], [ 7, %987 ], [ 8, %990 ]
  %995 = phi i32 [ %972, %969 ], [ %984, %983 ], [ %989, %987 ], [ %992, %990 ]
  %996 = shl i32 %971, 1
  %997 = shl i32 %995, 1
  %998 = add i32 %994, -1
  %999 = icmp ult i32 %996, 32768
  br i1 %999, label %969, label %1003

1000:                                             ; preds = %951
  %1001 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %901, i64 0, i32 1
  %1002 = load i32, i32* %1001, align 4
  br label %1003

1003:                                             ; preds = %993, %944, %1000
  %1004 = phi i32 [ %1002, %1000 ], [ %916, %944 ], [ %965, %993 ]
  %1005 = phi i32 [ %883, %1000 ], [ %949, %944 ], [ %998, %993 ]
  %1006 = phi i32 [ %904, %1000 ], [ %947, %944 ], [ %996, %993 ]
  %1007 = phi i32 [ %953, %1000 ], [ %948, %944 ], [ %997, %993 ]
  %1008 = icmp eq i32 %1004, 0
  br i1 %1008, label %1164, label %1009

1009:                                             ; preds = %1003
  %1010 = getelementptr inbounds i32, i32* %45, i64 -1
  %1011 = load i32, i32* %1010, align 4
  %1012 = getelementptr inbounds i32, i32* %45, i64 1
  %1013 = load i32, i32* %1012, align 4
  %1014 = and i32 %893, 170
  %1015 = lshr i32 %1011, 28
  %1016 = and i32 %1015, 1
  %1017 = lshr i32 %1013, 26
  %1018 = and i32 %1017, 4
  %1019 = lshr i32 %882, 21
  %1020 = and i32 %1019, 16
  %1021 = lshr i32 %882, 25
  %1022 = and i32 %1021, 64
  %1023 = or i32 %1022, %1014
  %1024 = or i32 %1023, %1020
  %1025 = or i32 %1024, %1016
  %1026 = or i32 %1025, %1018
  %1027 = zext i32 %1026 to i64
  %1028 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1027
  %1029 = load i8, i8* %1028, align 1
  %1030 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1027
  %1031 = load i8, i8* %1030, align 1
  %1032 = zext i8 %1031 to i32
  %1033 = zext i8 %1029 to i64
  %1034 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1033
  %1035 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1034, align 8
  %1036 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 0
  %1037 = load i32, i32* %1036, align 8
  %1038 = sub i32 %1006, %1037
  %1039 = lshr i32 %1007, 16
  %1040 = icmp ult i32 %1039, %1037
  br i1 %1040, label %1041, label %1085

1041:                                             ; preds = %1009
  %1042 = icmp ult i32 %1038, %1037
  %1043 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 1
  %1044 = load i32, i32* %1043, align 4
  %1045 = icmp eq i32 %1044, 0
  %1046 = zext i1 %1045 to i32
  %1047 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 3
  %1048 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 2
  %1049 = select i1 %1042, %struct.opj_mqc_state** %1048, %struct.opj_mqc_state** %1047
  %1050 = select i1 %1042, i32 %1044, i32 %1046
  %1051 = bitcast %struct.opj_mqc_state** %1049 to i64*
  %1052 = load i64, i64* %1051, align 8
  %1053 = bitcast %struct.opj_mqc_state** %1034 to i64*
  store i64 %1052, i64* %1053, align 8
  br label %1054

1054:                                             ; preds = %1078, %1041
  %1055 = phi i32 [ %1005, %1041 ], [ %1083, %1078 ]
  %1056 = phi i32 [ %1037, %1041 ], [ %1081, %1078 ]
  %1057 = phi i32 [ %1007, %1041 ], [ %1082, %1078 ]
  %1058 = icmp eq i32 %1055, 0
  br i1 %1058, label %1059, label %1078

1059:                                             ; preds = %1054
  %1060 = load i8*, i8** %31, align 8
  %1061 = getelementptr inbounds i8, i8* %1060, i64 1
  %1062 = load i8, i8* %1061, align 1
  %1063 = zext i8 %1062 to i32
  %1064 = load i8, i8* %1060, align 1
  %1065 = icmp eq i8 %1064, -1
  br i1 %1065, label %1066, label %1075

1066:                                             ; preds = %1059
  %1067 = icmp ugt i8 %1062, -113
  br i1 %1067, label %1068, label %1072

1068:                                             ; preds = %1066
  %1069 = add i32 %1057, 65280
  %1070 = load i32, i32* %32, align 4
  %1071 = add i32 %1070, 1
  store i32 %1071, i32* %32, align 4
  br label %1078

1072:                                             ; preds = %1066
  store i8* %1061, i8** %31, align 8
  %1073 = shl nuw nsw i32 %1063, 9
  %1074 = add i32 %1073, %1057
  br label %1078

1075:                                             ; preds = %1059
  store i8* %1061, i8** %31, align 8
  %1076 = shl nuw nsw i32 %1063, 8
  %1077 = add i32 %1076, %1057
  br label %1078

1078:                                             ; preds = %1075, %1072, %1068, %1054
  %1079 = phi i32 [ %1055, %1054 ], [ 8, %1068 ], [ 7, %1072 ], [ 8, %1075 ]
  %1080 = phi i32 [ %1057, %1054 ], [ %1069, %1068 ], [ %1074, %1072 ], [ %1077, %1075 ]
  %1081 = shl i32 %1056, 1
  %1082 = shl i32 %1080, 1
  %1083 = add i32 %1079, -1
  %1084 = icmp ult i32 %1081, 32768
  br i1 %1084, label %1054, label %1137

1085:                                             ; preds = %1009
  %1086 = shl i32 %1037, 16
  %1087 = sub i32 %1007, %1086
  %1088 = trunc i32 %1038 to i16
  %1089 = icmp sgt i16 %1088, -1
  br i1 %1089, label %1090, label %1134

1090:                                             ; preds = %1085
  %1091 = icmp ult i32 %1038, %1037
  %1092 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 1
  %1093 = load i32, i32* %1092, align 4
  %1094 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 2
  %1095 = icmp eq i32 %1093, 0
  %1096 = zext i1 %1095 to i32
  %1097 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 3
  %1098 = select i1 %1091, %struct.opj_mqc_state** %1097, %struct.opj_mqc_state** %1094
  %1099 = select i1 %1091, i32 %1096, i32 %1093
  %1100 = bitcast %struct.opj_mqc_state** %1098 to i64*
  %1101 = load i64, i64* %1100, align 8
  %1102 = bitcast %struct.opj_mqc_state** %1034 to i64*
  store i64 %1101, i64* %1102, align 8
  br label %1103

1103:                                             ; preds = %1127, %1090
  %1104 = phi i32 [ %1005, %1090 ], [ %1132, %1127 ]
  %1105 = phi i32 [ %1038, %1090 ], [ %1130, %1127 ]
  %1106 = phi i32 [ %1087, %1090 ], [ %1131, %1127 ]
  %1107 = icmp eq i32 %1104, 0
  br i1 %1107, label %1108, label %1127

1108:                                             ; preds = %1103
  %1109 = load i8*, i8** %31, align 8
  %1110 = getelementptr inbounds i8, i8* %1109, i64 1
  %1111 = load i8, i8* %1110, align 1
  %1112 = zext i8 %1111 to i32
  %1113 = load i8, i8* %1109, align 1
  %1114 = icmp eq i8 %1113, -1
  br i1 %1114, label %1115, label %1124

1115:                                             ; preds = %1108
  %1116 = icmp ugt i8 %1111, -113
  br i1 %1116, label %1117, label %1121

1117:                                             ; preds = %1115
  %1118 = add i32 %1106, 65280
  %1119 = load i32, i32* %32, align 4
  %1120 = add i32 %1119, 1
  store i32 %1120, i32* %32, align 4
  br label %1127

1121:                                             ; preds = %1115
  store i8* %1110, i8** %31, align 8
  %1122 = shl nuw nsw i32 %1112, 9
  %1123 = add i32 %1122, %1106
  br label %1127

1124:                                             ; preds = %1108
  store i8* %1110, i8** %31, align 8
  %1125 = shl nuw nsw i32 %1112, 8
  %1126 = add i32 %1125, %1106
  br label %1127

1127:                                             ; preds = %1124, %1121, %1117, %1103
  %1128 = phi i32 [ %1104, %1103 ], [ 8, %1117 ], [ 7, %1121 ], [ 8, %1124 ]
  %1129 = phi i32 [ %1106, %1103 ], [ %1118, %1117 ], [ %1123, %1121 ], [ %1126, %1124 ]
  %1130 = shl i32 %1105, 1
  %1131 = shl i32 %1129, 1
  %1132 = add i32 %1128, -1
  %1133 = icmp ult i32 %1130, 32768
  br i1 %1133, label %1103, label %1137

1134:                                             ; preds = %1085
  %1135 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1035, i64 0, i32 1
  %1136 = load i32, i32* %1135, align 4
  br label %1137

1137:                                             ; preds = %1127, %1078, %1134
  %1138 = phi i32 [ %1136, %1134 ], [ %1050, %1078 ], [ %1099, %1127 ]
  %1139 = phi i32 [ %1005, %1134 ], [ %1083, %1078 ], [ %1132, %1127 ]
  %1140 = phi i32 [ %1038, %1134 ], [ %1081, %1078 ], [ %1130, %1127 ]
  %1141 = phi i32 [ %1087, %1134 ], [ %1082, %1078 ], [ %1131, %1127 ]
  %1142 = xor i32 %1138, %1032
  %1143 = icmp eq i32 %1142, 0
  %1144 = select i1 %1143, i32 %29, i32 %33
  %1145 = getelementptr inbounds i32, i32* %44, i64 192
  store i32 %1144, i32* %1145, align 4
  %1146 = load i32, i32* %1010, align 4
  %1147 = or i32 %1146, 16384
  store i32 %1147, i32* %1010, align 4
  %1148 = shl i32 %1142, 28
  %1149 = or i32 %882, %1148
  %1150 = or i32 %1149, 8192
  %1151 = load i32, i32* %1012, align 4
  %1152 = or i32 %1151, 4096
  store i32 %1152, i32* %1012, align 4
  %1153 = getelementptr inbounds i32, i32* %45, i64 66
  %1154 = shl i32 %1142, 18
  %1155 = load i32, i32* %1153, align 4
  %1156 = or i32 %1154, %1155
  %1157 = or i32 %1156, 2
  store i32 %1157, i32* %1153, align 4
  %1158 = getelementptr inbounds i32, i32* %45, i64 65
  %1159 = load i32, i32* %1158, align 4
  %1160 = or i32 %1159, 4
  store i32 %1160, i32* %1158, align 4
  %1161 = getelementptr inbounds i32, i32* %45, i64 67
  %1162 = load i32, i32* %1161, align 4
  %1163 = or i32 %1162, 1
  store i32 %1163, i32* %1161, align 4
  br label %1164

1164:                                             ; preds = %1137, %1003
  %1165 = phi i32 [ %1150, %1137 ], [ %882, %1003 ]
  %1166 = phi i32 [ %1139, %1137 ], [ %1005, %1003 ]
  %1167 = phi i32 [ %1140, %1137 ], [ %1006, %1003 ]
  %1168 = phi i32 [ %1141, %1137 ], [ %1007, %1003 ]
  %1169 = phi %struct.opj_mqc_state** [ %1034, %1137 ], [ %900, %1003 ]
  %1170 = or i32 %1165, 1073741824
  br label %1171

1171:                                             ; preds = %1164, %881
  %1172 = phi i32 [ %1170, %1164 ], [ %882, %881 ]
  %1173 = phi i32 [ %1166, %1164 ], [ %883, %881 ]
  %1174 = phi i32 [ %1167, %1164 ], [ %884, %881 ]
  %1175 = phi i32 [ %1168, %1164 ], [ %885, %881 ]
  %1176 = phi %struct.opj_mqc_state** [ %1169, %1164 ], [ %886, %881 ]
  store i32 %1172, i32* %45, align 4
  br label %1177

1177:                                             ; preds = %1171, %42
  %1178 = phi i32 [ %1173, %1171 ], [ %49, %42 ]
  %1179 = phi i32 [ %1174, %1171 ], [ %48, %42 ]
  %1180 = phi i32 [ %1175, %1171 ], [ %47, %42 ]
  %1181 = phi %struct.opj_mqc_state** [ %1176, %1171 ], [ %46, %42 ]
  %1182 = add nuw nsw i32 %43, 1
  %1183 = getelementptr inbounds i32, i32* %44, i64 1
  %1184 = getelementptr inbounds i32, i32* %45, i64 1
  %1185 = icmp eq i32 %1182, 64
  br i1 %1185, label %1186, label %42

1186:                                             ; preds = %1177
  %1187 = add nuw nsw i32 %35, 4
  %1188 = getelementptr inbounds i32, i32* %44, i64 193
  %1189 = getelementptr inbounds i32, i32* %45, i64 3
  %1190 = icmp ult i32 %1187, 64
  br i1 %1190, label %34, label %1191

1191:                                             ; preds = %1186
  store %struct.opj_mqc_state** %1181, %struct.opj_mqc_state*** %19, align 8
  store i32 %1180, i32* %21, align 8
  store i32 %1179, i32* %23, align 4
  store i32 %1178, i32* %25, align 8
  br label %4833

1192:                                             ; preds = %17, %2355
  %1193 = phi i32 [ %2356, %2355 ], [ 0, %17 ]
  %1194 = phi i32* [ %2357, %2355 ], [ %14, %17 ]
  %1195 = phi i32* [ %2358, %2355 ], [ %18, %17 ]
  %1196 = phi %struct.opj_mqc_state** [ %2350, %2355 ], [ %20, %17 ]
  %1197 = phi i32 [ %2349, %2355 ], [ %22, %17 ]
  %1198 = phi i32 [ %2348, %2355 ], [ %24, %17 ]
  %1199 = phi i32 [ %2347, %2355 ], [ %26, %17 ]
  br label %1200

1200:                                             ; preds = %2346, %1192
  %1201 = phi i32 [ 0, %1192 ], [ %2351, %2346 ]
  %1202 = phi i32* [ %1194, %1192 ], [ %2352, %2346 ]
  %1203 = phi i32* [ %1195, %1192 ], [ %2353, %2346 ]
  %1204 = phi %struct.opj_mqc_state** [ %1196, %1192 ], [ %2350, %2346 ]
  %1205 = phi i32 [ %1197, %1192 ], [ %2349, %2346 ]
  %1206 = phi i32 [ %1198, %1192 ], [ %2348, %2346 ]
  %1207 = phi i32 [ %1199, %1192 ], [ %2347, %2346 ]
  %1208 = load i32, i32* %1203, align 4
  %1209 = icmp eq i32 %1208, 0
  br i1 %1209, label %2346, label %1210

1210:                                             ; preds = %1200
  %1211 = and i32 %1208, 2097168
  %1212 = icmp ne i32 %1211, 0
  %1213 = and i32 %1208, 495
  %1214 = icmp eq i32 %1213, 0
  %1215 = or i1 %1212, %1214
  br i1 %1215, label %1492, label %1216

1216:                                             ; preds = %1210
  %1217 = load i8*, i8** %30, align 8
  %1218 = zext i32 %1213 to i64
  %1219 = getelementptr inbounds i8, i8* %1217, i64 %1218
  %1220 = load i8, i8* %1219, align 1
  %1221 = zext i8 %1220 to i64
  %1222 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1221
  %1223 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1222, align 8
  %1224 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 0
  %1225 = load i32, i32* %1224, align 8
  %1226 = sub i32 %1206, %1225
  %1227 = lshr i32 %1205, 16
  %1228 = icmp ult i32 %1227, %1225
  br i1 %1228, label %1229, label %1273

1229:                                             ; preds = %1216
  %1230 = icmp ult i32 %1226, %1225
  %1231 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 1
  %1232 = load i32, i32* %1231, align 4
  %1233 = icmp eq i32 %1232, 0
  %1234 = zext i1 %1233 to i32
  %1235 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 3
  %1236 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 2
  %1237 = select i1 %1230, %struct.opj_mqc_state** %1236, %struct.opj_mqc_state** %1235
  %1238 = select i1 %1230, i32 %1232, i32 %1234
  %1239 = bitcast %struct.opj_mqc_state** %1237 to i64*
  %1240 = load i64, i64* %1239, align 8
  %1241 = bitcast %struct.opj_mqc_state** %1222 to i64*
  store i64 %1240, i64* %1241, align 8
  br label %1242

1242:                                             ; preds = %1266, %1229
  %1243 = phi i32 [ %1207, %1229 ], [ %1271, %1266 ]
  %1244 = phi i32 [ %1225, %1229 ], [ %1269, %1266 ]
  %1245 = phi i32 [ %1205, %1229 ], [ %1270, %1266 ]
  %1246 = icmp eq i32 %1243, 0
  br i1 %1246, label %1247, label %1266

1247:                                             ; preds = %1242
  %1248 = load i8*, i8** %31, align 8
  %1249 = getelementptr inbounds i8, i8* %1248, i64 1
  %1250 = load i8, i8* %1249, align 1
  %1251 = zext i8 %1250 to i32
  %1252 = load i8, i8* %1248, align 1
  %1253 = icmp eq i8 %1252, -1
  br i1 %1253, label %1254, label %1263

1254:                                             ; preds = %1247
  %1255 = icmp ugt i8 %1250, -113
  br i1 %1255, label %1256, label %1260

1256:                                             ; preds = %1254
  %1257 = add i32 %1245, 65280
  %1258 = load i32, i32* %32, align 4
  %1259 = add i32 %1258, 1
  store i32 %1259, i32* %32, align 4
  br label %1266

1260:                                             ; preds = %1254
  store i8* %1249, i8** %31, align 8
  %1261 = shl nuw nsw i32 %1251, 9
  %1262 = add i32 %1261, %1245
  br label %1266

1263:                                             ; preds = %1247
  store i8* %1249, i8** %31, align 8
  %1264 = shl nuw nsw i32 %1251, 8
  %1265 = add i32 %1264, %1245
  br label %1266

1266:                                             ; preds = %1263, %1260, %1256, %1242
  %1267 = phi i32 [ %1243, %1242 ], [ 8, %1256 ], [ 7, %1260 ], [ 8, %1263 ]
  %1268 = phi i32 [ %1245, %1242 ], [ %1257, %1256 ], [ %1262, %1260 ], [ %1265, %1263 ]
  %1269 = shl i32 %1244, 1
  %1270 = shl i32 %1268, 1
  %1271 = add i32 %1267, -1
  %1272 = icmp ult i32 %1269, 32768
  br i1 %1272, label %1242, label %1325

1273:                                             ; preds = %1216
  %1274 = shl i32 %1225, 16
  %1275 = sub i32 %1205, %1274
  %1276 = trunc i32 %1226 to i16
  %1277 = icmp sgt i16 %1276, -1
  br i1 %1277, label %1278, label %1322

1278:                                             ; preds = %1273
  %1279 = icmp ult i32 %1226, %1225
  %1280 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 1
  %1281 = load i32, i32* %1280, align 4
  %1282 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 2
  %1283 = icmp eq i32 %1281, 0
  %1284 = zext i1 %1283 to i32
  %1285 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 3
  %1286 = select i1 %1279, %struct.opj_mqc_state** %1285, %struct.opj_mqc_state** %1282
  %1287 = select i1 %1279, i32 %1284, i32 %1281
  %1288 = bitcast %struct.opj_mqc_state** %1286 to i64*
  %1289 = load i64, i64* %1288, align 8
  %1290 = bitcast %struct.opj_mqc_state** %1222 to i64*
  store i64 %1289, i64* %1290, align 8
  br label %1291

1291:                                             ; preds = %1315, %1278
  %1292 = phi i32 [ %1207, %1278 ], [ %1320, %1315 ]
  %1293 = phi i32 [ %1226, %1278 ], [ %1318, %1315 ]
  %1294 = phi i32 [ %1275, %1278 ], [ %1319, %1315 ]
  %1295 = icmp eq i32 %1292, 0
  br i1 %1295, label %1296, label %1315

1296:                                             ; preds = %1291
  %1297 = load i8*, i8** %31, align 8
  %1298 = getelementptr inbounds i8, i8* %1297, i64 1
  %1299 = load i8, i8* %1298, align 1
  %1300 = zext i8 %1299 to i32
  %1301 = load i8, i8* %1297, align 1
  %1302 = icmp eq i8 %1301, -1
  br i1 %1302, label %1303, label %1312

1303:                                             ; preds = %1296
  %1304 = icmp ugt i8 %1299, -113
  br i1 %1304, label %1305, label %1309

1305:                                             ; preds = %1303
  %1306 = add i32 %1294, 65280
  %1307 = load i32, i32* %32, align 4
  %1308 = add i32 %1307, 1
  store i32 %1308, i32* %32, align 4
  br label %1315

1309:                                             ; preds = %1303
  store i8* %1298, i8** %31, align 8
  %1310 = shl nuw nsw i32 %1300, 9
  %1311 = add i32 %1310, %1294
  br label %1315

1312:                                             ; preds = %1296
  store i8* %1298, i8** %31, align 8
  %1313 = shl nuw nsw i32 %1300, 8
  %1314 = add i32 %1313, %1294
  br label %1315

1315:                                             ; preds = %1312, %1309, %1305, %1291
  %1316 = phi i32 [ %1292, %1291 ], [ 8, %1305 ], [ 7, %1309 ], [ 8, %1312 ]
  %1317 = phi i32 [ %1294, %1291 ], [ %1306, %1305 ], [ %1311, %1309 ], [ %1314, %1312 ]
  %1318 = shl i32 %1293, 1
  %1319 = shl i32 %1317, 1
  %1320 = add i32 %1316, -1
  %1321 = icmp ult i32 %1318, 32768
  br i1 %1321, label %1291, label %1325

1322:                                             ; preds = %1273
  %1323 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1223, i64 0, i32 1
  %1324 = load i32, i32* %1323, align 4
  br label %1325

1325:                                             ; preds = %1315, %1266, %1322
  %1326 = phi i32 [ %1324, %1322 ], [ %1238, %1266 ], [ %1287, %1315 ]
  %1327 = phi i32 [ %1207, %1322 ], [ %1271, %1266 ], [ %1320, %1315 ]
  %1328 = phi i32 [ %1226, %1322 ], [ %1269, %1266 ], [ %1318, %1315 ]
  %1329 = phi i32 [ %1275, %1322 ], [ %1270, %1266 ], [ %1319, %1315 ]
  %1330 = icmp eq i32 %1326, 0
  br i1 %1330, label %1485, label %1331

1331:                                             ; preds = %1325
  %1332 = getelementptr inbounds i32, i32* %1203, i64 -1
  %1333 = load i32, i32* %1332, align 4
  %1334 = getelementptr inbounds i32, i32* %1203, i64 1
  %1335 = load i32, i32* %1334, align 4
  %1336 = and i32 %1208, 170
  %1337 = lshr i32 %1333, 19
  %1338 = and i32 %1337, 1
  %1339 = lshr i32 %1335, 17
  %1340 = and i32 %1339, 4
  %1341 = lshr i32 %1208, 14
  %1342 = and i32 %1341, 16
  %1343 = lshr i32 %1208, 16
  %1344 = and i32 %1343, 64
  %1345 = or i32 %1344, %1336
  %1346 = or i32 %1345, %1342
  %1347 = or i32 %1346, %1338
  %1348 = or i32 %1347, %1340
  %1349 = zext i32 %1348 to i64
  %1350 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1349
  %1351 = load i8, i8* %1350, align 1
  %1352 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1349
  %1353 = load i8, i8* %1352, align 1
  %1354 = zext i8 %1353 to i32
  %1355 = zext i8 %1351 to i64
  %1356 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1355
  %1357 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1356, align 8
  %1358 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 0
  %1359 = load i32, i32* %1358, align 8
  %1360 = sub i32 %1328, %1359
  %1361 = lshr i32 %1329, 16
  %1362 = icmp ult i32 %1361, %1359
  br i1 %1362, label %1363, label %1407

1363:                                             ; preds = %1331
  %1364 = icmp ult i32 %1360, %1359
  %1365 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 1
  %1366 = load i32, i32* %1365, align 4
  %1367 = icmp eq i32 %1366, 0
  %1368 = zext i1 %1367 to i32
  %1369 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 3
  %1370 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 2
  %1371 = select i1 %1364, %struct.opj_mqc_state** %1370, %struct.opj_mqc_state** %1369
  %1372 = select i1 %1364, i32 %1366, i32 %1368
  %1373 = bitcast %struct.opj_mqc_state** %1371 to i64*
  %1374 = load i64, i64* %1373, align 8
  %1375 = bitcast %struct.opj_mqc_state** %1356 to i64*
  store i64 %1374, i64* %1375, align 8
  br label %1376

1376:                                             ; preds = %1400, %1363
  %1377 = phi i32 [ %1327, %1363 ], [ %1405, %1400 ]
  %1378 = phi i32 [ %1359, %1363 ], [ %1403, %1400 ]
  %1379 = phi i32 [ %1329, %1363 ], [ %1404, %1400 ]
  %1380 = icmp eq i32 %1377, 0
  br i1 %1380, label %1381, label %1400

1381:                                             ; preds = %1376
  %1382 = load i8*, i8** %31, align 8
  %1383 = getelementptr inbounds i8, i8* %1382, i64 1
  %1384 = load i8, i8* %1383, align 1
  %1385 = zext i8 %1384 to i32
  %1386 = load i8, i8* %1382, align 1
  %1387 = icmp eq i8 %1386, -1
  br i1 %1387, label %1388, label %1397

1388:                                             ; preds = %1381
  %1389 = icmp ugt i8 %1384, -113
  br i1 %1389, label %1390, label %1394

1390:                                             ; preds = %1388
  %1391 = add i32 %1379, 65280
  %1392 = load i32, i32* %32, align 4
  %1393 = add i32 %1392, 1
  store i32 %1393, i32* %32, align 4
  br label %1400

1394:                                             ; preds = %1388
  store i8* %1383, i8** %31, align 8
  %1395 = shl nuw nsw i32 %1385, 9
  %1396 = add i32 %1395, %1379
  br label %1400

1397:                                             ; preds = %1381
  store i8* %1383, i8** %31, align 8
  %1398 = shl nuw nsw i32 %1385, 8
  %1399 = add i32 %1398, %1379
  br label %1400

1400:                                             ; preds = %1397, %1394, %1390, %1376
  %1401 = phi i32 [ %1377, %1376 ], [ 8, %1390 ], [ 7, %1394 ], [ 8, %1397 ]
  %1402 = phi i32 [ %1379, %1376 ], [ %1391, %1390 ], [ %1396, %1394 ], [ %1399, %1397 ]
  %1403 = shl i32 %1378, 1
  %1404 = shl i32 %1402, 1
  %1405 = add i32 %1401, -1
  %1406 = icmp ult i32 %1403, 32768
  br i1 %1406, label %1376, label %1459

1407:                                             ; preds = %1331
  %1408 = shl i32 %1359, 16
  %1409 = sub i32 %1329, %1408
  %1410 = trunc i32 %1360 to i16
  %1411 = icmp sgt i16 %1410, -1
  br i1 %1411, label %1412, label %1456

1412:                                             ; preds = %1407
  %1413 = icmp ult i32 %1360, %1359
  %1414 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 1
  %1415 = load i32, i32* %1414, align 4
  %1416 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 2
  %1417 = icmp eq i32 %1415, 0
  %1418 = zext i1 %1417 to i32
  %1419 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 3
  %1420 = select i1 %1413, %struct.opj_mqc_state** %1419, %struct.opj_mqc_state** %1416
  %1421 = select i1 %1413, i32 %1418, i32 %1415
  %1422 = bitcast %struct.opj_mqc_state** %1420 to i64*
  %1423 = load i64, i64* %1422, align 8
  %1424 = bitcast %struct.opj_mqc_state** %1356 to i64*
  store i64 %1423, i64* %1424, align 8
  br label %1425

1425:                                             ; preds = %1449, %1412
  %1426 = phi i32 [ %1327, %1412 ], [ %1454, %1449 ]
  %1427 = phi i32 [ %1360, %1412 ], [ %1452, %1449 ]
  %1428 = phi i32 [ %1409, %1412 ], [ %1453, %1449 ]
  %1429 = icmp eq i32 %1426, 0
  br i1 %1429, label %1430, label %1449

1430:                                             ; preds = %1425
  %1431 = load i8*, i8** %31, align 8
  %1432 = getelementptr inbounds i8, i8* %1431, i64 1
  %1433 = load i8, i8* %1432, align 1
  %1434 = zext i8 %1433 to i32
  %1435 = load i8, i8* %1431, align 1
  %1436 = icmp eq i8 %1435, -1
  br i1 %1436, label %1437, label %1446

1437:                                             ; preds = %1430
  %1438 = icmp ugt i8 %1433, -113
  br i1 %1438, label %1439, label %1443

1439:                                             ; preds = %1437
  %1440 = add i32 %1428, 65280
  %1441 = load i32, i32* %32, align 4
  %1442 = add i32 %1441, 1
  store i32 %1442, i32* %32, align 4
  br label %1449

1443:                                             ; preds = %1437
  store i8* %1432, i8** %31, align 8
  %1444 = shl nuw nsw i32 %1434, 9
  %1445 = add i32 %1444, %1428
  br label %1449

1446:                                             ; preds = %1430
  store i8* %1432, i8** %31, align 8
  %1447 = shl nuw nsw i32 %1434, 8
  %1448 = add i32 %1447, %1428
  br label %1449

1449:                                             ; preds = %1446, %1443, %1439, %1425
  %1450 = phi i32 [ %1426, %1425 ], [ 8, %1439 ], [ 7, %1443 ], [ 8, %1446 ]
  %1451 = phi i32 [ %1428, %1425 ], [ %1440, %1439 ], [ %1445, %1443 ], [ %1448, %1446 ]
  %1452 = shl i32 %1427, 1
  %1453 = shl i32 %1451, 1
  %1454 = add i32 %1450, -1
  %1455 = icmp ult i32 %1452, 32768
  br i1 %1455, label %1425, label %1459

1456:                                             ; preds = %1407
  %1457 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1357, i64 0, i32 1
  %1458 = load i32, i32* %1457, align 4
  br label %1459

1459:                                             ; preds = %1449, %1400, %1456
  %1460 = phi i32 [ %1458, %1456 ], [ %1372, %1400 ], [ %1421, %1449 ]
  %1461 = phi i32 [ %1327, %1456 ], [ %1405, %1400 ], [ %1454, %1449 ]
  %1462 = phi i32 [ %1360, %1456 ], [ %1403, %1400 ], [ %1452, %1449 ]
  %1463 = phi i32 [ %1409, %1456 ], [ %1404, %1400 ], [ %1453, %1449 ]
  %1464 = xor i32 %1460, %1354
  %1465 = icmp eq i32 %1464, 0
  %1466 = select i1 %1465, i32 %29, i32 %33
  store i32 %1466, i32* %1202, align 4
  %1467 = load i32, i32* %1332, align 4
  %1468 = or i32 %1467, 32
  store i32 %1468, i32* %1332, align 4
  %1469 = shl i32 %1464, 19
  %1470 = or i32 %1208, %1469
  %1471 = or i32 %1470, 16
  %1472 = load i32, i32* %1334, align 4
  %1473 = or i32 %1472, 8
  store i32 %1473, i32* %1334, align 4
  %1474 = getelementptr inbounds i32, i32* %1203, i64 -66
  %1475 = shl i32 %1464, 31
  %1476 = load i32, i32* %1474, align 4
  %1477 = or i32 %1475, %1476
  %1478 = or i32 %1477, 65536
  store i32 %1478, i32* %1474, align 4
  %1479 = getelementptr inbounds i32, i32* %1203, i64 -67
  %1480 = load i32, i32* %1479, align 4
  %1481 = or i32 %1480, 131072
  store i32 %1481, i32* %1479, align 4
  %1482 = getelementptr inbounds i32, i32* %1203, i64 -65
  %1483 = load i32, i32* %1482, align 4
  %1484 = or i32 %1483, 32768
  store i32 %1484, i32* %1482, align 4
  br label %1485

1485:                                             ; preds = %1459, %1325
  %1486 = phi i32 [ %1471, %1459 ], [ %1208, %1325 ]
  %1487 = phi i32 [ %1461, %1459 ], [ %1327, %1325 ]
  %1488 = phi i32 [ %1462, %1459 ], [ %1328, %1325 ]
  %1489 = phi i32 [ %1463, %1459 ], [ %1329, %1325 ]
  %1490 = phi %struct.opj_mqc_state** [ %1356, %1459 ], [ %1222, %1325 ]
  %1491 = or i32 %1486, 2097152
  br label %1492

1492:                                             ; preds = %1485, %1210
  %1493 = phi i32 [ %1491, %1485 ], [ %1208, %1210 ]
  %1494 = phi i32 [ %1487, %1485 ], [ %1207, %1210 ]
  %1495 = phi i32 [ %1488, %1485 ], [ %1206, %1210 ]
  %1496 = phi i32 [ %1489, %1485 ], [ %1205, %1210 ]
  %1497 = phi %struct.opj_mqc_state** [ %1490, %1485 ], [ %1204, %1210 ]
  %1498 = and i32 %1493, 16777344
  %1499 = icmp ne i32 %1498, 0
  %1500 = and i32 %1493, 3960
  %1501 = icmp eq i32 %1500, 0
  %1502 = or i1 %1499, %1501
  br i1 %1502, label %1771, label %1503

1503:                                             ; preds = %1492
  %1504 = lshr i32 %1493, 3
  %1505 = load i8*, i8** %30, align 8
  %1506 = and i32 %1504, 495
  %1507 = zext i32 %1506 to i64
  %1508 = getelementptr inbounds i8, i8* %1505, i64 %1507
  %1509 = load i8, i8* %1508, align 1
  %1510 = zext i8 %1509 to i64
  %1511 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1510
  %1512 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1511, align 8
  %1513 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 0
  %1514 = load i32, i32* %1513, align 8
  %1515 = sub i32 %1495, %1514
  %1516 = lshr i32 %1496, 16
  %1517 = icmp ult i32 %1516, %1514
  br i1 %1517, label %1518, label %1562

1518:                                             ; preds = %1503
  %1519 = icmp ult i32 %1515, %1514
  %1520 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 1
  %1521 = load i32, i32* %1520, align 4
  %1522 = icmp eq i32 %1521, 0
  %1523 = zext i1 %1522 to i32
  %1524 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 3
  %1525 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 2
  %1526 = select i1 %1519, %struct.opj_mqc_state** %1525, %struct.opj_mqc_state** %1524
  %1527 = select i1 %1519, i32 %1521, i32 %1523
  %1528 = bitcast %struct.opj_mqc_state** %1526 to i64*
  %1529 = load i64, i64* %1528, align 8
  %1530 = bitcast %struct.opj_mqc_state** %1511 to i64*
  store i64 %1529, i64* %1530, align 8
  br label %1531

1531:                                             ; preds = %1555, %1518
  %1532 = phi i32 [ %1494, %1518 ], [ %1560, %1555 ]
  %1533 = phi i32 [ %1514, %1518 ], [ %1558, %1555 ]
  %1534 = phi i32 [ %1496, %1518 ], [ %1559, %1555 ]
  %1535 = icmp eq i32 %1532, 0
  br i1 %1535, label %1536, label %1555

1536:                                             ; preds = %1531
  %1537 = load i8*, i8** %31, align 8
  %1538 = getelementptr inbounds i8, i8* %1537, i64 1
  %1539 = load i8, i8* %1538, align 1
  %1540 = zext i8 %1539 to i32
  %1541 = load i8, i8* %1537, align 1
  %1542 = icmp eq i8 %1541, -1
  br i1 %1542, label %1543, label %1552

1543:                                             ; preds = %1536
  %1544 = icmp ugt i8 %1539, -113
  br i1 %1544, label %1545, label %1549

1545:                                             ; preds = %1543
  %1546 = add i32 %1534, 65280
  %1547 = load i32, i32* %32, align 4
  %1548 = add i32 %1547, 1
  store i32 %1548, i32* %32, align 4
  br label %1555

1549:                                             ; preds = %1543
  store i8* %1538, i8** %31, align 8
  %1550 = shl nuw nsw i32 %1540, 9
  %1551 = add i32 %1550, %1534
  br label %1555

1552:                                             ; preds = %1536
  store i8* %1538, i8** %31, align 8
  %1553 = shl nuw nsw i32 %1540, 8
  %1554 = add i32 %1553, %1534
  br label %1555

1555:                                             ; preds = %1552, %1549, %1545, %1531
  %1556 = phi i32 [ %1532, %1531 ], [ 8, %1545 ], [ 7, %1549 ], [ 8, %1552 ]
  %1557 = phi i32 [ %1534, %1531 ], [ %1546, %1545 ], [ %1551, %1549 ], [ %1554, %1552 ]
  %1558 = shl i32 %1533, 1
  %1559 = shl i32 %1557, 1
  %1560 = add i32 %1556, -1
  %1561 = icmp ult i32 %1558, 32768
  br i1 %1561, label %1531, label %1614

1562:                                             ; preds = %1503
  %1563 = shl i32 %1514, 16
  %1564 = sub i32 %1496, %1563
  %1565 = trunc i32 %1515 to i16
  %1566 = icmp sgt i16 %1565, -1
  br i1 %1566, label %1567, label %1611

1567:                                             ; preds = %1562
  %1568 = icmp ult i32 %1515, %1514
  %1569 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 1
  %1570 = load i32, i32* %1569, align 4
  %1571 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 2
  %1572 = icmp eq i32 %1570, 0
  %1573 = zext i1 %1572 to i32
  %1574 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 3
  %1575 = select i1 %1568, %struct.opj_mqc_state** %1574, %struct.opj_mqc_state** %1571
  %1576 = select i1 %1568, i32 %1573, i32 %1570
  %1577 = bitcast %struct.opj_mqc_state** %1575 to i64*
  %1578 = load i64, i64* %1577, align 8
  %1579 = bitcast %struct.opj_mqc_state** %1511 to i64*
  store i64 %1578, i64* %1579, align 8
  br label %1580

1580:                                             ; preds = %1604, %1567
  %1581 = phi i32 [ %1494, %1567 ], [ %1609, %1604 ]
  %1582 = phi i32 [ %1515, %1567 ], [ %1607, %1604 ]
  %1583 = phi i32 [ %1564, %1567 ], [ %1608, %1604 ]
  %1584 = icmp eq i32 %1581, 0
  br i1 %1584, label %1585, label %1604

1585:                                             ; preds = %1580
  %1586 = load i8*, i8** %31, align 8
  %1587 = getelementptr inbounds i8, i8* %1586, i64 1
  %1588 = load i8, i8* %1587, align 1
  %1589 = zext i8 %1588 to i32
  %1590 = load i8, i8* %1586, align 1
  %1591 = icmp eq i8 %1590, -1
  br i1 %1591, label %1592, label %1601

1592:                                             ; preds = %1585
  %1593 = icmp ugt i8 %1588, -113
  br i1 %1593, label %1594, label %1598

1594:                                             ; preds = %1592
  %1595 = add i32 %1583, 65280
  %1596 = load i32, i32* %32, align 4
  %1597 = add i32 %1596, 1
  store i32 %1597, i32* %32, align 4
  br label %1604

1598:                                             ; preds = %1592
  store i8* %1587, i8** %31, align 8
  %1599 = shl nuw nsw i32 %1589, 9
  %1600 = add i32 %1599, %1583
  br label %1604

1601:                                             ; preds = %1585
  store i8* %1587, i8** %31, align 8
  %1602 = shl nuw nsw i32 %1589, 8
  %1603 = add i32 %1602, %1583
  br label %1604

1604:                                             ; preds = %1601, %1598, %1594, %1580
  %1605 = phi i32 [ %1581, %1580 ], [ 8, %1594 ], [ 7, %1598 ], [ 8, %1601 ]
  %1606 = phi i32 [ %1583, %1580 ], [ %1595, %1594 ], [ %1600, %1598 ], [ %1603, %1601 ]
  %1607 = shl i32 %1582, 1
  %1608 = shl i32 %1606, 1
  %1609 = add i32 %1605, -1
  %1610 = icmp ult i32 %1607, 32768
  br i1 %1610, label %1580, label %1614

1611:                                             ; preds = %1562
  %1612 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1512, i64 0, i32 1
  %1613 = load i32, i32* %1612, align 4
  br label %1614

1614:                                             ; preds = %1604, %1555, %1611
  %1615 = phi i32 [ %1613, %1611 ], [ %1527, %1555 ], [ %1576, %1604 ]
  %1616 = phi i32 [ %1494, %1611 ], [ %1560, %1555 ], [ %1609, %1604 ]
  %1617 = phi i32 [ %1515, %1611 ], [ %1558, %1555 ], [ %1607, %1604 ]
  %1618 = phi i32 [ %1564, %1611 ], [ %1559, %1555 ], [ %1608, %1604 ]
  %1619 = icmp eq i32 %1615, 0
  br i1 %1619, label %1764, label %1620

1620:                                             ; preds = %1614
  %1621 = getelementptr inbounds i32, i32* %1203, i64 -1
  %1622 = load i32, i32* %1621, align 4
  %1623 = getelementptr inbounds i32, i32* %1203, i64 1
  %1624 = load i32, i32* %1623, align 4
  %1625 = and i32 %1504, 170
  %1626 = lshr i32 %1622, 22
  %1627 = and i32 %1626, 1
  %1628 = lshr i32 %1624, 20
  %1629 = and i32 %1628, 4
  %1630 = lshr i32 %1493, 15
  %1631 = and i32 %1630, 16
  %1632 = lshr i32 %1493, 19
  %1633 = and i32 %1632, 64
  %1634 = or i32 %1633, %1625
  %1635 = or i32 %1634, %1631
  %1636 = or i32 %1635, %1627
  %1637 = or i32 %1636, %1629
  %1638 = zext i32 %1637 to i64
  %1639 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1638
  %1640 = load i8, i8* %1639, align 1
  %1641 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1638
  %1642 = load i8, i8* %1641, align 1
  %1643 = zext i8 %1642 to i32
  %1644 = zext i8 %1640 to i64
  %1645 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1644
  %1646 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1645, align 8
  %1647 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 0
  %1648 = load i32, i32* %1647, align 8
  %1649 = sub i32 %1617, %1648
  %1650 = lshr i32 %1618, 16
  %1651 = icmp ult i32 %1650, %1648
  br i1 %1651, label %1652, label %1696

1652:                                             ; preds = %1620
  %1653 = icmp ult i32 %1649, %1648
  %1654 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 1
  %1655 = load i32, i32* %1654, align 4
  %1656 = icmp eq i32 %1655, 0
  %1657 = zext i1 %1656 to i32
  %1658 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 3
  %1659 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 2
  %1660 = select i1 %1653, %struct.opj_mqc_state** %1659, %struct.opj_mqc_state** %1658
  %1661 = select i1 %1653, i32 %1655, i32 %1657
  %1662 = bitcast %struct.opj_mqc_state** %1660 to i64*
  %1663 = load i64, i64* %1662, align 8
  %1664 = bitcast %struct.opj_mqc_state** %1645 to i64*
  store i64 %1663, i64* %1664, align 8
  br label %1665

1665:                                             ; preds = %1689, %1652
  %1666 = phi i32 [ %1616, %1652 ], [ %1694, %1689 ]
  %1667 = phi i32 [ %1648, %1652 ], [ %1692, %1689 ]
  %1668 = phi i32 [ %1618, %1652 ], [ %1693, %1689 ]
  %1669 = icmp eq i32 %1666, 0
  br i1 %1669, label %1670, label %1689

1670:                                             ; preds = %1665
  %1671 = load i8*, i8** %31, align 8
  %1672 = getelementptr inbounds i8, i8* %1671, i64 1
  %1673 = load i8, i8* %1672, align 1
  %1674 = zext i8 %1673 to i32
  %1675 = load i8, i8* %1671, align 1
  %1676 = icmp eq i8 %1675, -1
  br i1 %1676, label %1677, label %1686

1677:                                             ; preds = %1670
  %1678 = icmp ugt i8 %1673, -113
  br i1 %1678, label %1679, label %1683

1679:                                             ; preds = %1677
  %1680 = add i32 %1668, 65280
  %1681 = load i32, i32* %32, align 4
  %1682 = add i32 %1681, 1
  store i32 %1682, i32* %32, align 4
  br label %1689

1683:                                             ; preds = %1677
  store i8* %1672, i8** %31, align 8
  %1684 = shl nuw nsw i32 %1674, 9
  %1685 = add i32 %1684, %1668
  br label %1689

1686:                                             ; preds = %1670
  store i8* %1672, i8** %31, align 8
  %1687 = shl nuw nsw i32 %1674, 8
  %1688 = add i32 %1687, %1668
  br label %1689

1689:                                             ; preds = %1686, %1683, %1679, %1665
  %1690 = phi i32 [ %1666, %1665 ], [ 8, %1679 ], [ 7, %1683 ], [ 8, %1686 ]
  %1691 = phi i32 [ %1668, %1665 ], [ %1680, %1679 ], [ %1685, %1683 ], [ %1688, %1686 ]
  %1692 = shl i32 %1667, 1
  %1693 = shl i32 %1691, 1
  %1694 = add i32 %1690, -1
  %1695 = icmp ult i32 %1692, 32768
  br i1 %1695, label %1665, label %1748

1696:                                             ; preds = %1620
  %1697 = shl i32 %1648, 16
  %1698 = sub i32 %1618, %1697
  %1699 = trunc i32 %1649 to i16
  %1700 = icmp sgt i16 %1699, -1
  br i1 %1700, label %1701, label %1745

1701:                                             ; preds = %1696
  %1702 = icmp ult i32 %1649, %1648
  %1703 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 1
  %1704 = load i32, i32* %1703, align 4
  %1705 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 2
  %1706 = icmp eq i32 %1704, 0
  %1707 = zext i1 %1706 to i32
  %1708 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 3
  %1709 = select i1 %1702, %struct.opj_mqc_state** %1708, %struct.opj_mqc_state** %1705
  %1710 = select i1 %1702, i32 %1707, i32 %1704
  %1711 = bitcast %struct.opj_mqc_state** %1709 to i64*
  %1712 = load i64, i64* %1711, align 8
  %1713 = bitcast %struct.opj_mqc_state** %1645 to i64*
  store i64 %1712, i64* %1713, align 8
  br label %1714

1714:                                             ; preds = %1738, %1701
  %1715 = phi i32 [ %1616, %1701 ], [ %1743, %1738 ]
  %1716 = phi i32 [ %1649, %1701 ], [ %1741, %1738 ]
  %1717 = phi i32 [ %1698, %1701 ], [ %1742, %1738 ]
  %1718 = icmp eq i32 %1715, 0
  br i1 %1718, label %1719, label %1738

1719:                                             ; preds = %1714
  %1720 = load i8*, i8** %31, align 8
  %1721 = getelementptr inbounds i8, i8* %1720, i64 1
  %1722 = load i8, i8* %1721, align 1
  %1723 = zext i8 %1722 to i32
  %1724 = load i8, i8* %1720, align 1
  %1725 = icmp eq i8 %1724, -1
  br i1 %1725, label %1726, label %1735

1726:                                             ; preds = %1719
  %1727 = icmp ugt i8 %1722, -113
  br i1 %1727, label %1728, label %1732

1728:                                             ; preds = %1726
  %1729 = add i32 %1717, 65280
  %1730 = load i32, i32* %32, align 4
  %1731 = add i32 %1730, 1
  store i32 %1731, i32* %32, align 4
  br label %1738

1732:                                             ; preds = %1726
  store i8* %1721, i8** %31, align 8
  %1733 = shl nuw nsw i32 %1723, 9
  %1734 = add i32 %1733, %1717
  br label %1738

1735:                                             ; preds = %1719
  store i8* %1721, i8** %31, align 8
  %1736 = shl nuw nsw i32 %1723, 8
  %1737 = add i32 %1736, %1717
  br label %1738

1738:                                             ; preds = %1735, %1732, %1728, %1714
  %1739 = phi i32 [ %1715, %1714 ], [ 8, %1728 ], [ 7, %1732 ], [ 8, %1735 ]
  %1740 = phi i32 [ %1717, %1714 ], [ %1729, %1728 ], [ %1734, %1732 ], [ %1737, %1735 ]
  %1741 = shl i32 %1716, 1
  %1742 = shl i32 %1740, 1
  %1743 = add i32 %1739, -1
  %1744 = icmp ult i32 %1741, 32768
  br i1 %1744, label %1714, label %1748

1745:                                             ; preds = %1696
  %1746 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1646, i64 0, i32 1
  %1747 = load i32, i32* %1746, align 4
  br label %1748

1748:                                             ; preds = %1738, %1689, %1745
  %1749 = phi i32 [ %1747, %1745 ], [ %1661, %1689 ], [ %1710, %1738 ]
  %1750 = phi i32 [ %1616, %1745 ], [ %1694, %1689 ], [ %1743, %1738 ]
  %1751 = phi i32 [ %1649, %1745 ], [ %1692, %1689 ], [ %1741, %1738 ]
  %1752 = phi i32 [ %1698, %1745 ], [ %1693, %1689 ], [ %1742, %1738 ]
  %1753 = xor i32 %1749, %1643
  %1754 = icmp eq i32 %1753, 0
  %1755 = select i1 %1754, i32 %29, i32 %33
  %1756 = getelementptr inbounds i32, i32* %1202, i64 64
  store i32 %1755, i32* %1756, align 4
  %1757 = load i32, i32* %1621, align 4
  %1758 = or i32 %1757, 256
  store i32 %1758, i32* %1621, align 4
  %1759 = shl i32 %1753, 22
  %1760 = or i32 %1493, %1759
  %1761 = or i32 %1760, 128
  %1762 = load i32, i32* %1623, align 4
  %1763 = or i32 %1762, 64
  store i32 %1763, i32* %1623, align 4
  br label %1764

1764:                                             ; preds = %1748, %1614
  %1765 = phi i32 [ %1761, %1748 ], [ %1493, %1614 ]
  %1766 = phi i32 [ %1750, %1748 ], [ %1616, %1614 ]
  %1767 = phi i32 [ %1751, %1748 ], [ %1617, %1614 ]
  %1768 = phi i32 [ %1752, %1748 ], [ %1618, %1614 ]
  %1769 = phi %struct.opj_mqc_state** [ %1645, %1748 ], [ %1511, %1614 ]
  %1770 = or i32 %1765, 16777216
  br label %1771

1771:                                             ; preds = %1764, %1492
  %1772 = phi i32 [ %1770, %1764 ], [ %1493, %1492 ]
  %1773 = phi i32 [ %1766, %1764 ], [ %1494, %1492 ]
  %1774 = phi i32 [ %1767, %1764 ], [ %1495, %1492 ]
  %1775 = phi i32 [ %1768, %1764 ], [ %1496, %1492 ]
  %1776 = phi %struct.opj_mqc_state** [ %1769, %1764 ], [ %1497, %1492 ]
  %1777 = and i32 %1772, 134218752
  %1778 = icmp ne i32 %1777, 0
  %1779 = and i32 %1772, 31680
  %1780 = icmp eq i32 %1779, 0
  %1781 = or i1 %1778, %1780
  br i1 %1781, label %2050, label %1782

1782:                                             ; preds = %1771
  %1783 = lshr i32 %1772, 6
  %1784 = load i8*, i8** %30, align 8
  %1785 = and i32 %1783, 495
  %1786 = zext i32 %1785 to i64
  %1787 = getelementptr inbounds i8, i8* %1784, i64 %1786
  %1788 = load i8, i8* %1787, align 1
  %1789 = zext i8 %1788 to i64
  %1790 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1789
  %1791 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1790, align 8
  %1792 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 0
  %1793 = load i32, i32* %1792, align 8
  %1794 = sub i32 %1774, %1793
  %1795 = lshr i32 %1775, 16
  %1796 = icmp ult i32 %1795, %1793
  br i1 %1796, label %1797, label %1841

1797:                                             ; preds = %1782
  %1798 = icmp ult i32 %1794, %1793
  %1799 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 1
  %1800 = load i32, i32* %1799, align 4
  %1801 = icmp eq i32 %1800, 0
  %1802 = zext i1 %1801 to i32
  %1803 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 3
  %1804 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 2
  %1805 = select i1 %1798, %struct.opj_mqc_state** %1804, %struct.opj_mqc_state** %1803
  %1806 = select i1 %1798, i32 %1800, i32 %1802
  %1807 = bitcast %struct.opj_mqc_state** %1805 to i64*
  %1808 = load i64, i64* %1807, align 8
  %1809 = bitcast %struct.opj_mqc_state** %1790 to i64*
  store i64 %1808, i64* %1809, align 8
  br label %1810

1810:                                             ; preds = %1834, %1797
  %1811 = phi i32 [ %1773, %1797 ], [ %1839, %1834 ]
  %1812 = phi i32 [ %1793, %1797 ], [ %1837, %1834 ]
  %1813 = phi i32 [ %1775, %1797 ], [ %1838, %1834 ]
  %1814 = icmp eq i32 %1811, 0
  br i1 %1814, label %1815, label %1834

1815:                                             ; preds = %1810
  %1816 = load i8*, i8** %31, align 8
  %1817 = getelementptr inbounds i8, i8* %1816, i64 1
  %1818 = load i8, i8* %1817, align 1
  %1819 = zext i8 %1818 to i32
  %1820 = load i8, i8* %1816, align 1
  %1821 = icmp eq i8 %1820, -1
  br i1 %1821, label %1822, label %1831

1822:                                             ; preds = %1815
  %1823 = icmp ugt i8 %1818, -113
  br i1 %1823, label %1824, label %1828

1824:                                             ; preds = %1822
  %1825 = add i32 %1813, 65280
  %1826 = load i32, i32* %32, align 4
  %1827 = add i32 %1826, 1
  store i32 %1827, i32* %32, align 4
  br label %1834

1828:                                             ; preds = %1822
  store i8* %1817, i8** %31, align 8
  %1829 = shl nuw nsw i32 %1819, 9
  %1830 = add i32 %1829, %1813
  br label %1834

1831:                                             ; preds = %1815
  store i8* %1817, i8** %31, align 8
  %1832 = shl nuw nsw i32 %1819, 8
  %1833 = add i32 %1832, %1813
  br label %1834

1834:                                             ; preds = %1831, %1828, %1824, %1810
  %1835 = phi i32 [ %1811, %1810 ], [ 8, %1824 ], [ 7, %1828 ], [ 8, %1831 ]
  %1836 = phi i32 [ %1813, %1810 ], [ %1825, %1824 ], [ %1830, %1828 ], [ %1833, %1831 ]
  %1837 = shl i32 %1812, 1
  %1838 = shl i32 %1836, 1
  %1839 = add i32 %1835, -1
  %1840 = icmp ult i32 %1837, 32768
  br i1 %1840, label %1810, label %1893

1841:                                             ; preds = %1782
  %1842 = shl i32 %1793, 16
  %1843 = sub i32 %1775, %1842
  %1844 = trunc i32 %1794 to i16
  %1845 = icmp sgt i16 %1844, -1
  br i1 %1845, label %1846, label %1890

1846:                                             ; preds = %1841
  %1847 = icmp ult i32 %1794, %1793
  %1848 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 1
  %1849 = load i32, i32* %1848, align 4
  %1850 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 2
  %1851 = icmp eq i32 %1849, 0
  %1852 = zext i1 %1851 to i32
  %1853 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 3
  %1854 = select i1 %1847, %struct.opj_mqc_state** %1853, %struct.opj_mqc_state** %1850
  %1855 = select i1 %1847, i32 %1852, i32 %1849
  %1856 = bitcast %struct.opj_mqc_state** %1854 to i64*
  %1857 = load i64, i64* %1856, align 8
  %1858 = bitcast %struct.opj_mqc_state** %1790 to i64*
  store i64 %1857, i64* %1858, align 8
  br label %1859

1859:                                             ; preds = %1883, %1846
  %1860 = phi i32 [ %1773, %1846 ], [ %1888, %1883 ]
  %1861 = phi i32 [ %1794, %1846 ], [ %1886, %1883 ]
  %1862 = phi i32 [ %1843, %1846 ], [ %1887, %1883 ]
  %1863 = icmp eq i32 %1860, 0
  br i1 %1863, label %1864, label %1883

1864:                                             ; preds = %1859
  %1865 = load i8*, i8** %31, align 8
  %1866 = getelementptr inbounds i8, i8* %1865, i64 1
  %1867 = load i8, i8* %1866, align 1
  %1868 = zext i8 %1867 to i32
  %1869 = load i8, i8* %1865, align 1
  %1870 = icmp eq i8 %1869, -1
  br i1 %1870, label %1871, label %1880

1871:                                             ; preds = %1864
  %1872 = icmp ugt i8 %1867, -113
  br i1 %1872, label %1873, label %1877

1873:                                             ; preds = %1871
  %1874 = add i32 %1862, 65280
  %1875 = load i32, i32* %32, align 4
  %1876 = add i32 %1875, 1
  store i32 %1876, i32* %32, align 4
  br label %1883

1877:                                             ; preds = %1871
  store i8* %1866, i8** %31, align 8
  %1878 = shl nuw nsw i32 %1868, 9
  %1879 = add i32 %1878, %1862
  br label %1883

1880:                                             ; preds = %1864
  store i8* %1866, i8** %31, align 8
  %1881 = shl nuw nsw i32 %1868, 8
  %1882 = add i32 %1881, %1862
  br label %1883

1883:                                             ; preds = %1880, %1877, %1873, %1859
  %1884 = phi i32 [ %1860, %1859 ], [ 8, %1873 ], [ 7, %1877 ], [ 8, %1880 ]
  %1885 = phi i32 [ %1862, %1859 ], [ %1874, %1873 ], [ %1879, %1877 ], [ %1882, %1880 ]
  %1886 = shl i32 %1861, 1
  %1887 = shl i32 %1885, 1
  %1888 = add i32 %1884, -1
  %1889 = icmp ult i32 %1886, 32768
  br i1 %1889, label %1859, label %1893

1890:                                             ; preds = %1841
  %1891 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1791, i64 0, i32 1
  %1892 = load i32, i32* %1891, align 4
  br label %1893

1893:                                             ; preds = %1883, %1834, %1890
  %1894 = phi i32 [ %1892, %1890 ], [ %1806, %1834 ], [ %1855, %1883 ]
  %1895 = phi i32 [ %1773, %1890 ], [ %1839, %1834 ], [ %1888, %1883 ]
  %1896 = phi i32 [ %1794, %1890 ], [ %1837, %1834 ], [ %1886, %1883 ]
  %1897 = phi i32 [ %1843, %1890 ], [ %1838, %1834 ], [ %1887, %1883 ]
  %1898 = icmp eq i32 %1894, 0
  br i1 %1898, label %2043, label %1899

1899:                                             ; preds = %1893
  %1900 = getelementptr inbounds i32, i32* %1203, i64 -1
  %1901 = load i32, i32* %1900, align 4
  %1902 = getelementptr inbounds i32, i32* %1203, i64 1
  %1903 = load i32, i32* %1902, align 4
  %1904 = and i32 %1783, 170
  %1905 = lshr i32 %1901, 25
  %1906 = and i32 %1905, 1
  %1907 = lshr i32 %1903, 23
  %1908 = and i32 %1907, 4
  %1909 = lshr i32 %1772, 18
  %1910 = and i32 %1909, 16
  %1911 = lshr i32 %1772, 22
  %1912 = and i32 %1911, 64
  %1913 = or i32 %1912, %1904
  %1914 = or i32 %1913, %1910
  %1915 = or i32 %1914, %1906
  %1916 = or i32 %1915, %1908
  %1917 = zext i32 %1916 to i64
  %1918 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1917
  %1919 = load i8, i8* %1918, align 1
  %1920 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1917
  %1921 = load i8, i8* %1920, align 1
  %1922 = zext i8 %1921 to i32
  %1923 = zext i8 %1919 to i64
  %1924 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1923
  %1925 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1924, align 8
  %1926 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 0
  %1927 = load i32, i32* %1926, align 8
  %1928 = sub i32 %1896, %1927
  %1929 = lshr i32 %1897, 16
  %1930 = icmp ult i32 %1929, %1927
  br i1 %1930, label %1931, label %1975

1931:                                             ; preds = %1899
  %1932 = icmp ult i32 %1928, %1927
  %1933 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 1
  %1934 = load i32, i32* %1933, align 4
  %1935 = icmp eq i32 %1934, 0
  %1936 = zext i1 %1935 to i32
  %1937 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 3
  %1938 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 2
  %1939 = select i1 %1932, %struct.opj_mqc_state** %1938, %struct.opj_mqc_state** %1937
  %1940 = select i1 %1932, i32 %1934, i32 %1936
  %1941 = bitcast %struct.opj_mqc_state** %1939 to i64*
  %1942 = load i64, i64* %1941, align 8
  %1943 = bitcast %struct.opj_mqc_state** %1924 to i64*
  store i64 %1942, i64* %1943, align 8
  br label %1944

1944:                                             ; preds = %1968, %1931
  %1945 = phi i32 [ %1895, %1931 ], [ %1973, %1968 ]
  %1946 = phi i32 [ %1927, %1931 ], [ %1971, %1968 ]
  %1947 = phi i32 [ %1897, %1931 ], [ %1972, %1968 ]
  %1948 = icmp eq i32 %1945, 0
  br i1 %1948, label %1949, label %1968

1949:                                             ; preds = %1944
  %1950 = load i8*, i8** %31, align 8
  %1951 = getelementptr inbounds i8, i8* %1950, i64 1
  %1952 = load i8, i8* %1951, align 1
  %1953 = zext i8 %1952 to i32
  %1954 = load i8, i8* %1950, align 1
  %1955 = icmp eq i8 %1954, -1
  br i1 %1955, label %1956, label %1965

1956:                                             ; preds = %1949
  %1957 = icmp ugt i8 %1952, -113
  br i1 %1957, label %1958, label %1962

1958:                                             ; preds = %1956
  %1959 = add i32 %1947, 65280
  %1960 = load i32, i32* %32, align 4
  %1961 = add i32 %1960, 1
  store i32 %1961, i32* %32, align 4
  br label %1968

1962:                                             ; preds = %1956
  store i8* %1951, i8** %31, align 8
  %1963 = shl nuw nsw i32 %1953, 9
  %1964 = add i32 %1963, %1947
  br label %1968

1965:                                             ; preds = %1949
  store i8* %1951, i8** %31, align 8
  %1966 = shl nuw nsw i32 %1953, 8
  %1967 = add i32 %1966, %1947
  br label %1968

1968:                                             ; preds = %1965, %1962, %1958, %1944
  %1969 = phi i32 [ %1945, %1944 ], [ 8, %1958 ], [ 7, %1962 ], [ 8, %1965 ]
  %1970 = phi i32 [ %1947, %1944 ], [ %1959, %1958 ], [ %1964, %1962 ], [ %1967, %1965 ]
  %1971 = shl i32 %1946, 1
  %1972 = shl i32 %1970, 1
  %1973 = add i32 %1969, -1
  %1974 = icmp ult i32 %1971, 32768
  br i1 %1974, label %1944, label %2027

1975:                                             ; preds = %1899
  %1976 = shl i32 %1927, 16
  %1977 = sub i32 %1897, %1976
  %1978 = trunc i32 %1928 to i16
  %1979 = icmp sgt i16 %1978, -1
  br i1 %1979, label %1980, label %2024

1980:                                             ; preds = %1975
  %1981 = icmp ult i32 %1928, %1927
  %1982 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 1
  %1983 = load i32, i32* %1982, align 4
  %1984 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 2
  %1985 = icmp eq i32 %1983, 0
  %1986 = zext i1 %1985 to i32
  %1987 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 3
  %1988 = select i1 %1981, %struct.opj_mqc_state** %1987, %struct.opj_mqc_state** %1984
  %1989 = select i1 %1981, i32 %1986, i32 %1983
  %1990 = bitcast %struct.opj_mqc_state** %1988 to i64*
  %1991 = load i64, i64* %1990, align 8
  %1992 = bitcast %struct.opj_mqc_state** %1924 to i64*
  store i64 %1991, i64* %1992, align 8
  br label %1993

1993:                                             ; preds = %2017, %1980
  %1994 = phi i32 [ %1895, %1980 ], [ %2022, %2017 ]
  %1995 = phi i32 [ %1928, %1980 ], [ %2020, %2017 ]
  %1996 = phi i32 [ %1977, %1980 ], [ %2021, %2017 ]
  %1997 = icmp eq i32 %1994, 0
  br i1 %1997, label %1998, label %2017

1998:                                             ; preds = %1993
  %1999 = load i8*, i8** %31, align 8
  %2000 = getelementptr inbounds i8, i8* %1999, i64 1
  %2001 = load i8, i8* %2000, align 1
  %2002 = zext i8 %2001 to i32
  %2003 = load i8, i8* %1999, align 1
  %2004 = icmp eq i8 %2003, -1
  br i1 %2004, label %2005, label %2014

2005:                                             ; preds = %1998
  %2006 = icmp ugt i8 %2001, -113
  br i1 %2006, label %2007, label %2011

2007:                                             ; preds = %2005
  %2008 = add i32 %1996, 65280
  %2009 = load i32, i32* %32, align 4
  %2010 = add i32 %2009, 1
  store i32 %2010, i32* %32, align 4
  br label %2017

2011:                                             ; preds = %2005
  store i8* %2000, i8** %31, align 8
  %2012 = shl nuw nsw i32 %2002, 9
  %2013 = add i32 %2012, %1996
  br label %2017

2014:                                             ; preds = %1998
  store i8* %2000, i8** %31, align 8
  %2015 = shl nuw nsw i32 %2002, 8
  %2016 = add i32 %2015, %1996
  br label %2017

2017:                                             ; preds = %2014, %2011, %2007, %1993
  %2018 = phi i32 [ %1994, %1993 ], [ 8, %2007 ], [ 7, %2011 ], [ 8, %2014 ]
  %2019 = phi i32 [ %1996, %1993 ], [ %2008, %2007 ], [ %2013, %2011 ], [ %2016, %2014 ]
  %2020 = shl i32 %1995, 1
  %2021 = shl i32 %2019, 1
  %2022 = add i32 %2018, -1
  %2023 = icmp ult i32 %2020, 32768
  br i1 %2023, label %1993, label %2027

2024:                                             ; preds = %1975
  %2025 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1925, i64 0, i32 1
  %2026 = load i32, i32* %2025, align 4
  br label %2027

2027:                                             ; preds = %2017, %1968, %2024
  %2028 = phi i32 [ %2026, %2024 ], [ %1940, %1968 ], [ %1989, %2017 ]
  %2029 = phi i32 [ %1895, %2024 ], [ %1973, %1968 ], [ %2022, %2017 ]
  %2030 = phi i32 [ %1928, %2024 ], [ %1971, %1968 ], [ %2020, %2017 ]
  %2031 = phi i32 [ %1977, %2024 ], [ %1972, %1968 ], [ %2021, %2017 ]
  %2032 = xor i32 %2028, %1922
  %2033 = icmp eq i32 %2032, 0
  %2034 = select i1 %2033, i32 %29, i32 %33
  %2035 = getelementptr inbounds i32, i32* %1202, i64 128
  store i32 %2034, i32* %2035, align 4
  %2036 = load i32, i32* %1900, align 4
  %2037 = or i32 %2036, 2048
  store i32 %2037, i32* %1900, align 4
  %2038 = shl i32 %2032, 25
  %2039 = or i32 %1772, %2038
  %2040 = or i32 %2039, 1024
  %2041 = load i32, i32* %1902, align 4
  %2042 = or i32 %2041, 512
  store i32 %2042, i32* %1902, align 4
  br label %2043

2043:                                             ; preds = %2027, %1893
  %2044 = phi i32 [ %2040, %2027 ], [ %1772, %1893 ]
  %2045 = phi i32 [ %2029, %2027 ], [ %1895, %1893 ]
  %2046 = phi i32 [ %2030, %2027 ], [ %1896, %1893 ]
  %2047 = phi i32 [ %2031, %2027 ], [ %1897, %1893 ]
  %2048 = phi %struct.opj_mqc_state** [ %1924, %2027 ], [ %1790, %1893 ]
  %2049 = or i32 %2044, 134217728
  br label %2050

2050:                                             ; preds = %2043, %1771
  %2051 = phi i32 [ %2049, %2043 ], [ %1772, %1771 ]
  %2052 = phi i32 [ %2045, %2043 ], [ %1773, %1771 ]
  %2053 = phi i32 [ %2046, %2043 ], [ %1774, %1771 ]
  %2054 = phi i32 [ %2047, %2043 ], [ %1775, %1771 ]
  %2055 = phi %struct.opj_mqc_state** [ %2048, %2043 ], [ %1776, %1771 ]
  %2056 = and i32 %2051, 1073750016
  %2057 = icmp ne i32 %2056, 0
  %2058 = and i32 %2051, 253440
  %2059 = icmp eq i32 %2058, 0
  %2060 = or i1 %2057, %2059
  br i1 %2060, label %2340, label %2061

2061:                                             ; preds = %2050
  %2062 = lshr i32 %2051, 9
  %2063 = load i8*, i8** %30, align 8
  %2064 = and i32 %2062, 495
  %2065 = zext i32 %2064 to i64
  %2066 = getelementptr inbounds i8, i8* %2063, i64 %2065
  %2067 = load i8, i8* %2066, align 1
  %2068 = zext i8 %2067 to i64
  %2069 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2068
  %2070 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2069, align 8
  %2071 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 0
  %2072 = load i32, i32* %2071, align 8
  %2073 = sub i32 %2053, %2072
  %2074 = lshr i32 %2054, 16
  %2075 = icmp ult i32 %2074, %2072
  br i1 %2075, label %2076, label %2120

2076:                                             ; preds = %2061
  %2077 = icmp ult i32 %2073, %2072
  %2078 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 1
  %2079 = load i32, i32* %2078, align 4
  %2080 = icmp eq i32 %2079, 0
  %2081 = zext i1 %2080 to i32
  %2082 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 3
  %2083 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 2
  %2084 = select i1 %2077, %struct.opj_mqc_state** %2083, %struct.opj_mqc_state** %2082
  %2085 = select i1 %2077, i32 %2079, i32 %2081
  %2086 = bitcast %struct.opj_mqc_state** %2084 to i64*
  %2087 = load i64, i64* %2086, align 8
  %2088 = bitcast %struct.opj_mqc_state** %2069 to i64*
  store i64 %2087, i64* %2088, align 8
  br label %2089

2089:                                             ; preds = %2113, %2076
  %2090 = phi i32 [ %2052, %2076 ], [ %2118, %2113 ]
  %2091 = phi i32 [ %2072, %2076 ], [ %2116, %2113 ]
  %2092 = phi i32 [ %2054, %2076 ], [ %2117, %2113 ]
  %2093 = icmp eq i32 %2090, 0
  br i1 %2093, label %2094, label %2113

2094:                                             ; preds = %2089
  %2095 = load i8*, i8** %31, align 8
  %2096 = getelementptr inbounds i8, i8* %2095, i64 1
  %2097 = load i8, i8* %2096, align 1
  %2098 = zext i8 %2097 to i32
  %2099 = load i8, i8* %2095, align 1
  %2100 = icmp eq i8 %2099, -1
  br i1 %2100, label %2101, label %2110

2101:                                             ; preds = %2094
  %2102 = icmp ugt i8 %2097, -113
  br i1 %2102, label %2103, label %2107

2103:                                             ; preds = %2101
  %2104 = add i32 %2092, 65280
  %2105 = load i32, i32* %32, align 4
  %2106 = add i32 %2105, 1
  store i32 %2106, i32* %32, align 4
  br label %2113

2107:                                             ; preds = %2101
  store i8* %2096, i8** %31, align 8
  %2108 = shl nuw nsw i32 %2098, 9
  %2109 = add i32 %2108, %2092
  br label %2113

2110:                                             ; preds = %2094
  store i8* %2096, i8** %31, align 8
  %2111 = shl nuw nsw i32 %2098, 8
  %2112 = add i32 %2111, %2092
  br label %2113

2113:                                             ; preds = %2110, %2107, %2103, %2089
  %2114 = phi i32 [ %2090, %2089 ], [ 8, %2103 ], [ 7, %2107 ], [ 8, %2110 ]
  %2115 = phi i32 [ %2092, %2089 ], [ %2104, %2103 ], [ %2109, %2107 ], [ %2112, %2110 ]
  %2116 = shl i32 %2091, 1
  %2117 = shl i32 %2115, 1
  %2118 = add i32 %2114, -1
  %2119 = icmp ult i32 %2116, 32768
  br i1 %2119, label %2089, label %2172

2120:                                             ; preds = %2061
  %2121 = shl i32 %2072, 16
  %2122 = sub i32 %2054, %2121
  %2123 = trunc i32 %2073 to i16
  %2124 = icmp sgt i16 %2123, -1
  br i1 %2124, label %2125, label %2169

2125:                                             ; preds = %2120
  %2126 = icmp ult i32 %2073, %2072
  %2127 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 1
  %2128 = load i32, i32* %2127, align 4
  %2129 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 2
  %2130 = icmp eq i32 %2128, 0
  %2131 = zext i1 %2130 to i32
  %2132 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 3
  %2133 = select i1 %2126, %struct.opj_mqc_state** %2132, %struct.opj_mqc_state** %2129
  %2134 = select i1 %2126, i32 %2131, i32 %2128
  %2135 = bitcast %struct.opj_mqc_state** %2133 to i64*
  %2136 = load i64, i64* %2135, align 8
  %2137 = bitcast %struct.opj_mqc_state** %2069 to i64*
  store i64 %2136, i64* %2137, align 8
  br label %2138

2138:                                             ; preds = %2162, %2125
  %2139 = phi i32 [ %2052, %2125 ], [ %2167, %2162 ]
  %2140 = phi i32 [ %2073, %2125 ], [ %2165, %2162 ]
  %2141 = phi i32 [ %2122, %2125 ], [ %2166, %2162 ]
  %2142 = icmp eq i32 %2139, 0
  br i1 %2142, label %2143, label %2162

2143:                                             ; preds = %2138
  %2144 = load i8*, i8** %31, align 8
  %2145 = getelementptr inbounds i8, i8* %2144, i64 1
  %2146 = load i8, i8* %2145, align 1
  %2147 = zext i8 %2146 to i32
  %2148 = load i8, i8* %2144, align 1
  %2149 = icmp eq i8 %2148, -1
  br i1 %2149, label %2150, label %2159

2150:                                             ; preds = %2143
  %2151 = icmp ugt i8 %2146, -113
  br i1 %2151, label %2152, label %2156

2152:                                             ; preds = %2150
  %2153 = add i32 %2141, 65280
  %2154 = load i32, i32* %32, align 4
  %2155 = add i32 %2154, 1
  store i32 %2155, i32* %32, align 4
  br label %2162

2156:                                             ; preds = %2150
  store i8* %2145, i8** %31, align 8
  %2157 = shl nuw nsw i32 %2147, 9
  %2158 = add i32 %2157, %2141
  br label %2162

2159:                                             ; preds = %2143
  store i8* %2145, i8** %31, align 8
  %2160 = shl nuw nsw i32 %2147, 8
  %2161 = add i32 %2160, %2141
  br label %2162

2162:                                             ; preds = %2159, %2156, %2152, %2138
  %2163 = phi i32 [ %2139, %2138 ], [ 8, %2152 ], [ 7, %2156 ], [ 8, %2159 ]
  %2164 = phi i32 [ %2141, %2138 ], [ %2153, %2152 ], [ %2158, %2156 ], [ %2161, %2159 ]
  %2165 = shl i32 %2140, 1
  %2166 = shl i32 %2164, 1
  %2167 = add i32 %2163, -1
  %2168 = icmp ult i32 %2165, 32768
  br i1 %2168, label %2138, label %2172

2169:                                             ; preds = %2120
  %2170 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2070, i64 0, i32 1
  %2171 = load i32, i32* %2170, align 4
  br label %2172

2172:                                             ; preds = %2162, %2113, %2169
  %2173 = phi i32 [ %2171, %2169 ], [ %2085, %2113 ], [ %2134, %2162 ]
  %2174 = phi i32 [ %2052, %2169 ], [ %2118, %2113 ], [ %2167, %2162 ]
  %2175 = phi i32 [ %2073, %2169 ], [ %2116, %2113 ], [ %2165, %2162 ]
  %2176 = phi i32 [ %2122, %2169 ], [ %2117, %2113 ], [ %2166, %2162 ]
  %2177 = icmp eq i32 %2173, 0
  br i1 %2177, label %2333, label %2178

2178:                                             ; preds = %2172
  %2179 = getelementptr inbounds i32, i32* %1203, i64 -1
  %2180 = load i32, i32* %2179, align 4
  %2181 = getelementptr inbounds i32, i32* %1203, i64 1
  %2182 = load i32, i32* %2181, align 4
  %2183 = and i32 %2062, 170
  %2184 = lshr i32 %2180, 28
  %2185 = and i32 %2184, 1
  %2186 = lshr i32 %2182, 26
  %2187 = and i32 %2186, 4
  %2188 = lshr i32 %2051, 21
  %2189 = and i32 %2188, 16
  %2190 = lshr i32 %2051, 25
  %2191 = and i32 %2190, 64
  %2192 = or i32 %2191, %2183
  %2193 = or i32 %2192, %2189
  %2194 = or i32 %2193, %2185
  %2195 = or i32 %2194, %2187
  %2196 = zext i32 %2195 to i64
  %2197 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %2196
  %2198 = load i8, i8* %2197, align 1
  %2199 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %2196
  %2200 = load i8, i8* %2199, align 1
  %2201 = zext i8 %2200 to i32
  %2202 = zext i8 %2198 to i64
  %2203 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2202
  %2204 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2203, align 8
  %2205 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 0
  %2206 = load i32, i32* %2205, align 8
  %2207 = sub i32 %2175, %2206
  %2208 = lshr i32 %2176, 16
  %2209 = icmp ult i32 %2208, %2206
  br i1 %2209, label %2210, label %2254

2210:                                             ; preds = %2178
  %2211 = icmp ult i32 %2207, %2206
  %2212 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 1
  %2213 = load i32, i32* %2212, align 4
  %2214 = icmp eq i32 %2213, 0
  %2215 = zext i1 %2214 to i32
  %2216 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 3
  %2217 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 2
  %2218 = select i1 %2211, %struct.opj_mqc_state** %2217, %struct.opj_mqc_state** %2216
  %2219 = select i1 %2211, i32 %2213, i32 %2215
  %2220 = bitcast %struct.opj_mqc_state** %2218 to i64*
  %2221 = load i64, i64* %2220, align 8
  %2222 = bitcast %struct.opj_mqc_state** %2203 to i64*
  store i64 %2221, i64* %2222, align 8
  br label %2223

2223:                                             ; preds = %2247, %2210
  %2224 = phi i32 [ %2174, %2210 ], [ %2252, %2247 ]
  %2225 = phi i32 [ %2206, %2210 ], [ %2250, %2247 ]
  %2226 = phi i32 [ %2176, %2210 ], [ %2251, %2247 ]
  %2227 = icmp eq i32 %2224, 0
  br i1 %2227, label %2228, label %2247

2228:                                             ; preds = %2223
  %2229 = load i8*, i8** %31, align 8
  %2230 = getelementptr inbounds i8, i8* %2229, i64 1
  %2231 = load i8, i8* %2230, align 1
  %2232 = zext i8 %2231 to i32
  %2233 = load i8, i8* %2229, align 1
  %2234 = icmp eq i8 %2233, -1
  br i1 %2234, label %2235, label %2244

2235:                                             ; preds = %2228
  %2236 = icmp ugt i8 %2231, -113
  br i1 %2236, label %2237, label %2241

2237:                                             ; preds = %2235
  %2238 = add i32 %2226, 65280
  %2239 = load i32, i32* %32, align 4
  %2240 = add i32 %2239, 1
  store i32 %2240, i32* %32, align 4
  br label %2247

2241:                                             ; preds = %2235
  store i8* %2230, i8** %31, align 8
  %2242 = shl nuw nsw i32 %2232, 9
  %2243 = add i32 %2242, %2226
  br label %2247

2244:                                             ; preds = %2228
  store i8* %2230, i8** %31, align 8
  %2245 = shl nuw nsw i32 %2232, 8
  %2246 = add i32 %2245, %2226
  br label %2247

2247:                                             ; preds = %2244, %2241, %2237, %2223
  %2248 = phi i32 [ %2224, %2223 ], [ 8, %2237 ], [ 7, %2241 ], [ 8, %2244 ]
  %2249 = phi i32 [ %2226, %2223 ], [ %2238, %2237 ], [ %2243, %2241 ], [ %2246, %2244 ]
  %2250 = shl i32 %2225, 1
  %2251 = shl i32 %2249, 1
  %2252 = add i32 %2248, -1
  %2253 = icmp ult i32 %2250, 32768
  br i1 %2253, label %2223, label %2306

2254:                                             ; preds = %2178
  %2255 = shl i32 %2206, 16
  %2256 = sub i32 %2176, %2255
  %2257 = trunc i32 %2207 to i16
  %2258 = icmp sgt i16 %2257, -1
  br i1 %2258, label %2259, label %2303

2259:                                             ; preds = %2254
  %2260 = icmp ult i32 %2207, %2206
  %2261 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 1
  %2262 = load i32, i32* %2261, align 4
  %2263 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 2
  %2264 = icmp eq i32 %2262, 0
  %2265 = zext i1 %2264 to i32
  %2266 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 3
  %2267 = select i1 %2260, %struct.opj_mqc_state** %2266, %struct.opj_mqc_state** %2263
  %2268 = select i1 %2260, i32 %2265, i32 %2262
  %2269 = bitcast %struct.opj_mqc_state** %2267 to i64*
  %2270 = load i64, i64* %2269, align 8
  %2271 = bitcast %struct.opj_mqc_state** %2203 to i64*
  store i64 %2270, i64* %2271, align 8
  br label %2272

2272:                                             ; preds = %2296, %2259
  %2273 = phi i32 [ %2174, %2259 ], [ %2301, %2296 ]
  %2274 = phi i32 [ %2207, %2259 ], [ %2299, %2296 ]
  %2275 = phi i32 [ %2256, %2259 ], [ %2300, %2296 ]
  %2276 = icmp eq i32 %2273, 0
  br i1 %2276, label %2277, label %2296

2277:                                             ; preds = %2272
  %2278 = load i8*, i8** %31, align 8
  %2279 = getelementptr inbounds i8, i8* %2278, i64 1
  %2280 = load i8, i8* %2279, align 1
  %2281 = zext i8 %2280 to i32
  %2282 = load i8, i8* %2278, align 1
  %2283 = icmp eq i8 %2282, -1
  br i1 %2283, label %2284, label %2293

2284:                                             ; preds = %2277
  %2285 = icmp ugt i8 %2280, -113
  br i1 %2285, label %2286, label %2290

2286:                                             ; preds = %2284
  %2287 = add i32 %2275, 65280
  %2288 = load i32, i32* %32, align 4
  %2289 = add i32 %2288, 1
  store i32 %2289, i32* %32, align 4
  br label %2296

2290:                                             ; preds = %2284
  store i8* %2279, i8** %31, align 8
  %2291 = shl nuw nsw i32 %2281, 9
  %2292 = add i32 %2291, %2275
  br label %2296

2293:                                             ; preds = %2277
  store i8* %2279, i8** %31, align 8
  %2294 = shl nuw nsw i32 %2281, 8
  %2295 = add i32 %2294, %2275
  br label %2296

2296:                                             ; preds = %2293, %2290, %2286, %2272
  %2297 = phi i32 [ %2273, %2272 ], [ 8, %2286 ], [ 7, %2290 ], [ 8, %2293 ]
  %2298 = phi i32 [ %2275, %2272 ], [ %2287, %2286 ], [ %2292, %2290 ], [ %2295, %2293 ]
  %2299 = shl i32 %2274, 1
  %2300 = shl i32 %2298, 1
  %2301 = add i32 %2297, -1
  %2302 = icmp ult i32 %2299, 32768
  br i1 %2302, label %2272, label %2306

2303:                                             ; preds = %2254
  %2304 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2204, i64 0, i32 1
  %2305 = load i32, i32* %2304, align 4
  br label %2306

2306:                                             ; preds = %2296, %2247, %2303
  %2307 = phi i32 [ %2305, %2303 ], [ %2219, %2247 ], [ %2268, %2296 ]
  %2308 = phi i32 [ %2174, %2303 ], [ %2252, %2247 ], [ %2301, %2296 ]
  %2309 = phi i32 [ %2207, %2303 ], [ %2250, %2247 ], [ %2299, %2296 ]
  %2310 = phi i32 [ %2256, %2303 ], [ %2251, %2247 ], [ %2300, %2296 ]
  %2311 = xor i32 %2307, %2201
  %2312 = icmp eq i32 %2311, 0
  %2313 = select i1 %2312, i32 %29, i32 %33
  %2314 = getelementptr inbounds i32, i32* %1202, i64 192
  store i32 %2313, i32* %2314, align 4
  %2315 = load i32, i32* %2179, align 4
  %2316 = or i32 %2315, 16384
  store i32 %2316, i32* %2179, align 4
  %2317 = shl i32 %2311, 28
  %2318 = or i32 %2051, %2317
  %2319 = or i32 %2318, 8192
  %2320 = load i32, i32* %2181, align 4
  %2321 = or i32 %2320, 4096
  store i32 %2321, i32* %2181, align 4
  %2322 = getelementptr inbounds i32, i32* %1203, i64 66
  %2323 = shl i32 %2311, 18
  %2324 = load i32, i32* %2322, align 4
  %2325 = or i32 %2323, %2324
  %2326 = or i32 %2325, 2
  store i32 %2326, i32* %2322, align 4
  %2327 = getelementptr inbounds i32, i32* %1203, i64 65
  %2328 = load i32, i32* %2327, align 4
  %2329 = or i32 %2328, 4
  store i32 %2329, i32* %2327, align 4
  %2330 = getelementptr inbounds i32, i32* %1203, i64 67
  %2331 = load i32, i32* %2330, align 4
  %2332 = or i32 %2331, 1
  store i32 %2332, i32* %2330, align 4
  br label %2333

2333:                                             ; preds = %2306, %2172
  %2334 = phi i32 [ %2319, %2306 ], [ %2051, %2172 ]
  %2335 = phi i32 [ %2308, %2306 ], [ %2174, %2172 ]
  %2336 = phi i32 [ %2309, %2306 ], [ %2175, %2172 ]
  %2337 = phi i32 [ %2310, %2306 ], [ %2176, %2172 ]
  %2338 = phi %struct.opj_mqc_state** [ %2203, %2306 ], [ %2069, %2172 ]
  %2339 = or i32 %2334, 1073741824
  br label %2340

2340:                                             ; preds = %2333, %2050
  %2341 = phi i32 [ %2339, %2333 ], [ %2051, %2050 ]
  %2342 = phi i32 [ %2335, %2333 ], [ %2052, %2050 ]
  %2343 = phi i32 [ %2336, %2333 ], [ %2053, %2050 ]
  %2344 = phi i32 [ %2337, %2333 ], [ %2054, %2050 ]
  %2345 = phi %struct.opj_mqc_state** [ %2338, %2333 ], [ %2055, %2050 ]
  store i32 %2341, i32* %1203, align 4
  br label %2346

2346:                                             ; preds = %2340, %1200
  %2347 = phi i32 [ %2342, %2340 ], [ %1207, %1200 ]
  %2348 = phi i32 [ %2343, %2340 ], [ %1206, %1200 ]
  %2349 = phi i32 [ %2344, %2340 ], [ %1205, %1200 ]
  %2350 = phi %struct.opj_mqc_state** [ %2345, %2340 ], [ %1204, %1200 ]
  %2351 = add nuw nsw i32 %1201, 1
  %2352 = getelementptr inbounds i32, i32* %1202, i64 1
  %2353 = getelementptr inbounds i32, i32* %1203, i64 1
  %2354 = icmp eq i32 %2351, 64
  br i1 %2354, label %2355, label %1200

2355:                                             ; preds = %2346
  %2356 = add nuw nsw i32 %1193, 4
  %2357 = getelementptr inbounds i32, i32* %1202, i64 193
  %2358 = getelementptr inbounds i32, i32* %1203, i64 3
  %2359 = icmp ult i32 %2356, 64
  br i1 %2359, label %1192, label %2360

2360:                                             ; preds = %2355
  store %struct.opj_mqc_state** %2350, %struct.opj_mqc_state*** %19, align 8
  store i32 %2349, i32* %21, align 8
  store i32 %2348, i32* %23, align 4
  store i32 %2347, i32* %25, align 8
  br label %4833

2361:                                             ; preds = %3
  %2362 = add i32 %5, 3
  %2363 = zext i32 %2362 to i64
  %2364 = getelementptr inbounds i32, i32* %16, i64 %2363
  %2365 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  %2366 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %2365, align 8
  %2367 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %2368 = load i32, i32* %2367, align 8
  %2369 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %2370 = load i32, i32* %2369, align 4
  %2371 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %2372 = load i32, i32* %2371, align 8
  %2373 = shl i32 1, %1
  %2374 = ashr i32 %2373, 1
  %2375 = or i32 %2374, %2373
  %2376 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %2377 = icmp ugt i32 %8, 3
  br i1 %12, label %3598, label %2378

2378:                                             ; preds = %2361
  br i1 %2377, label %2379, label %3561

2379:                                             ; preds = %2378
  %2380 = icmp eq i32 %5, 0
  %2381 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %2382 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %2383 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %2384 = sub nsw i32 0, %2375
  %2385 = zext i32 %5 to i64
  %2386 = shl i32 %5, 1
  %2387 = zext i32 %2386 to i64
  %2388 = mul i32 %5, 3
  %2389 = zext i32 %2388 to i64
  br label %2390

2390:                                             ; preds = %3548, %2379
  %2391 = phi i32 [ %8, %2379 ], [ %3549, %3548 ]
  %2392 = phi i32 [ 0, %2379 ], [ %3556, %3548 ]
  %2393 = phi i32* [ %14, %2379 ], [ %3557, %3548 ]
  %2394 = phi i32* [ %2364, %2379 ], [ %3558, %3548 ]
  %2395 = phi %struct.opj_mqc_state** [ %2366, %2379 ], [ %3553, %3548 ]
  %2396 = phi i32 [ %2368, %2379 ], [ %3552, %3548 ]
  %2397 = phi i32 [ %2370, %2379 ], [ %3551, %3548 ]
  %2398 = phi i32 [ %2372, %2379 ], [ %3550, %3548 ]
  br i1 %2380, label %3548, label %2399

2399:                                             ; preds = %2390, %3537
  %2400 = phi i32 [ %3542, %3537 ], [ 0, %2390 ]
  %2401 = phi i32* [ %3543, %3537 ], [ %2393, %2390 ]
  %2402 = phi i32* [ %3544, %3537 ], [ %2394, %2390 ]
  %2403 = phi %struct.opj_mqc_state** [ %3541, %3537 ], [ %2395, %2390 ]
  %2404 = phi i32 [ %3540, %3537 ], [ %2396, %2390 ]
  %2405 = phi i32 [ %3539, %3537 ], [ %2397, %2390 ]
  %2406 = phi i32 [ %3538, %3537 ], [ %2398, %2390 ]
  %2407 = load i32, i32* %2402, align 4
  %2408 = icmp eq i32 %2407, 0
  br i1 %2408, label %3537, label %2409

2409:                                             ; preds = %2399
  %2410 = and i32 %2407, 2097168
  %2411 = icmp ne i32 %2410, 0
  %2412 = and i32 %2407, 495
  %2413 = icmp eq i32 %2412, 0
  %2414 = or i1 %2411, %2413
  br i1 %2414, label %2680, label %2415

2415:                                             ; preds = %2409
  %2416 = load i8*, i8** %2381, align 8
  %2417 = zext i32 %2412 to i64
  %2418 = getelementptr inbounds i8, i8* %2416, i64 %2417
  %2419 = load i8, i8* %2418, align 1
  %2420 = zext i8 %2419 to i64
  %2421 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2420
  %2422 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2421, align 8
  %2423 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 0
  %2424 = load i32, i32* %2423, align 8
  %2425 = sub i32 %2405, %2424
  %2426 = lshr i32 %2404, 16
  %2427 = icmp ult i32 %2426, %2424
  br i1 %2427, label %2428, label %2472

2428:                                             ; preds = %2415
  %2429 = icmp ult i32 %2425, %2424
  %2430 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 1
  %2431 = load i32, i32* %2430, align 4
  %2432 = icmp eq i32 %2431, 0
  %2433 = zext i1 %2432 to i32
  %2434 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 3
  %2435 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 2
  %2436 = select i1 %2429, %struct.opj_mqc_state** %2435, %struct.opj_mqc_state** %2434
  %2437 = select i1 %2429, i32 %2431, i32 %2433
  %2438 = bitcast %struct.opj_mqc_state** %2436 to i64*
  %2439 = load i64, i64* %2438, align 8
  %2440 = bitcast %struct.opj_mqc_state** %2421 to i64*
  store i64 %2439, i64* %2440, align 8
  br label %2441

2441:                                             ; preds = %2465, %2428
  %2442 = phi i32 [ %2406, %2428 ], [ %2470, %2465 ]
  %2443 = phi i32 [ %2424, %2428 ], [ %2468, %2465 ]
  %2444 = phi i32 [ %2404, %2428 ], [ %2469, %2465 ]
  %2445 = icmp eq i32 %2442, 0
  br i1 %2445, label %2446, label %2465

2446:                                             ; preds = %2441
  %2447 = load i8*, i8** %2382, align 8
  %2448 = getelementptr inbounds i8, i8* %2447, i64 1
  %2449 = load i8, i8* %2448, align 1
  %2450 = zext i8 %2449 to i32
  %2451 = load i8, i8* %2447, align 1
  %2452 = icmp eq i8 %2451, -1
  br i1 %2452, label %2453, label %2462

2453:                                             ; preds = %2446
  %2454 = icmp ugt i8 %2449, -113
  br i1 %2454, label %2455, label %2459

2455:                                             ; preds = %2453
  %2456 = add i32 %2444, 65280
  %2457 = load i32, i32* %2383, align 4
  %2458 = add i32 %2457, 1
  store i32 %2458, i32* %2383, align 4
  br label %2465

2459:                                             ; preds = %2453
  store i8* %2448, i8** %2382, align 8
  %2460 = shl nuw nsw i32 %2450, 9
  %2461 = add i32 %2460, %2444
  br label %2465

2462:                                             ; preds = %2446
  store i8* %2448, i8** %2382, align 8
  %2463 = shl nuw nsw i32 %2450, 8
  %2464 = add i32 %2463, %2444
  br label %2465

2465:                                             ; preds = %2462, %2459, %2455, %2441
  %2466 = phi i32 [ %2442, %2441 ], [ 8, %2455 ], [ 7, %2459 ], [ 8, %2462 ]
  %2467 = phi i32 [ %2444, %2441 ], [ %2456, %2455 ], [ %2461, %2459 ], [ %2464, %2462 ]
  %2468 = shl i32 %2443, 1
  %2469 = shl i32 %2467, 1
  %2470 = add i32 %2466, -1
  %2471 = icmp ult i32 %2468, 32768
  br i1 %2471, label %2441, label %2524

2472:                                             ; preds = %2415
  %2473 = shl i32 %2424, 16
  %2474 = sub i32 %2404, %2473
  %2475 = trunc i32 %2425 to i16
  %2476 = icmp sgt i16 %2475, -1
  br i1 %2476, label %2477, label %2521

2477:                                             ; preds = %2472
  %2478 = icmp ult i32 %2425, %2424
  %2479 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 1
  %2480 = load i32, i32* %2479, align 4
  %2481 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 2
  %2482 = icmp eq i32 %2480, 0
  %2483 = zext i1 %2482 to i32
  %2484 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 3
  %2485 = select i1 %2478, %struct.opj_mqc_state** %2484, %struct.opj_mqc_state** %2481
  %2486 = select i1 %2478, i32 %2483, i32 %2480
  %2487 = bitcast %struct.opj_mqc_state** %2485 to i64*
  %2488 = load i64, i64* %2487, align 8
  %2489 = bitcast %struct.opj_mqc_state** %2421 to i64*
  store i64 %2488, i64* %2489, align 8
  br label %2490

2490:                                             ; preds = %2514, %2477
  %2491 = phi i32 [ %2406, %2477 ], [ %2519, %2514 ]
  %2492 = phi i32 [ %2425, %2477 ], [ %2517, %2514 ]
  %2493 = phi i32 [ %2474, %2477 ], [ %2518, %2514 ]
  %2494 = icmp eq i32 %2491, 0
  br i1 %2494, label %2495, label %2514

2495:                                             ; preds = %2490
  %2496 = load i8*, i8** %2382, align 8
  %2497 = getelementptr inbounds i8, i8* %2496, i64 1
  %2498 = load i8, i8* %2497, align 1
  %2499 = zext i8 %2498 to i32
  %2500 = load i8, i8* %2496, align 1
  %2501 = icmp eq i8 %2500, -1
  br i1 %2501, label %2502, label %2511

2502:                                             ; preds = %2495
  %2503 = icmp ugt i8 %2498, -113
  br i1 %2503, label %2504, label %2508

2504:                                             ; preds = %2502
  %2505 = add i32 %2493, 65280
  %2506 = load i32, i32* %2383, align 4
  %2507 = add i32 %2506, 1
  store i32 %2507, i32* %2383, align 4
  br label %2514

2508:                                             ; preds = %2502
  store i8* %2497, i8** %2382, align 8
  %2509 = shl nuw nsw i32 %2499, 9
  %2510 = add i32 %2509, %2493
  br label %2514

2511:                                             ; preds = %2495
  store i8* %2497, i8** %2382, align 8
  %2512 = shl nuw nsw i32 %2499, 8
  %2513 = add i32 %2512, %2493
  br label %2514

2514:                                             ; preds = %2511, %2508, %2504, %2490
  %2515 = phi i32 [ %2491, %2490 ], [ 8, %2504 ], [ 7, %2508 ], [ 8, %2511 ]
  %2516 = phi i32 [ %2493, %2490 ], [ %2505, %2504 ], [ %2510, %2508 ], [ %2513, %2511 ]
  %2517 = shl i32 %2492, 1
  %2518 = shl i32 %2516, 1
  %2519 = add i32 %2515, -1
  %2520 = icmp ult i32 %2517, 32768
  br i1 %2520, label %2490, label %2524

2521:                                             ; preds = %2472
  %2522 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2422, i64 0, i32 1
  %2523 = load i32, i32* %2522, align 4
  br label %2524

2524:                                             ; preds = %2514, %2465, %2521
  %2525 = phi i32 [ %2523, %2521 ], [ %2437, %2465 ], [ %2486, %2514 ]
  %2526 = phi i32 [ %2406, %2521 ], [ %2470, %2465 ], [ %2519, %2514 ]
  %2527 = phi i32 [ %2425, %2521 ], [ %2468, %2465 ], [ %2517, %2514 ]
  %2528 = phi i32 [ %2474, %2521 ], [ %2469, %2465 ], [ %2518, %2514 ]
  %2529 = icmp eq i32 %2525, 0
  br i1 %2529, label %2673, label %2530

2530:                                             ; preds = %2524
  %2531 = getelementptr inbounds i32, i32* %2402, i64 -1
  %2532 = load i32, i32* %2531, align 4
  %2533 = getelementptr inbounds i32, i32* %2402, i64 1
  %2534 = load i32, i32* %2533, align 4
  %2535 = and i32 %2407, 170
  %2536 = lshr i32 %2532, 19
  %2537 = and i32 %2536, 1
  %2538 = lshr i32 %2534, 17
  %2539 = and i32 %2538, 4
  %2540 = lshr i32 %2407, 14
  %2541 = and i32 %2540, 16
  %2542 = lshr i32 %2407, 16
  %2543 = and i32 %2542, 64
  %2544 = or i32 %2543, %2535
  %2545 = or i32 %2544, %2541
  %2546 = or i32 %2545, %2537
  %2547 = or i32 %2546, %2539
  %2548 = zext i32 %2547 to i64
  %2549 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %2548
  %2550 = load i8, i8* %2549, align 1
  %2551 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %2548
  %2552 = load i8, i8* %2551, align 1
  %2553 = zext i8 %2552 to i32
  %2554 = zext i8 %2550 to i64
  %2555 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2554
  %2556 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2555, align 8
  %2557 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 0
  %2558 = load i32, i32* %2557, align 8
  %2559 = sub i32 %2527, %2558
  %2560 = lshr i32 %2528, 16
  %2561 = icmp ult i32 %2560, %2558
  br i1 %2561, label %2562, label %2606

2562:                                             ; preds = %2530
  %2563 = icmp ult i32 %2559, %2558
  %2564 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 1
  %2565 = load i32, i32* %2564, align 4
  %2566 = icmp eq i32 %2565, 0
  %2567 = zext i1 %2566 to i32
  %2568 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 3
  %2569 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 2
  %2570 = select i1 %2563, %struct.opj_mqc_state** %2569, %struct.opj_mqc_state** %2568
  %2571 = select i1 %2563, i32 %2565, i32 %2567
  %2572 = bitcast %struct.opj_mqc_state** %2570 to i64*
  %2573 = load i64, i64* %2572, align 8
  %2574 = bitcast %struct.opj_mqc_state** %2555 to i64*
  store i64 %2573, i64* %2574, align 8
  br label %2575

2575:                                             ; preds = %2599, %2562
  %2576 = phi i32 [ %2526, %2562 ], [ %2604, %2599 ]
  %2577 = phi i32 [ %2558, %2562 ], [ %2602, %2599 ]
  %2578 = phi i32 [ %2528, %2562 ], [ %2603, %2599 ]
  %2579 = icmp eq i32 %2576, 0
  br i1 %2579, label %2580, label %2599

2580:                                             ; preds = %2575
  %2581 = load i8*, i8** %2382, align 8
  %2582 = getelementptr inbounds i8, i8* %2581, i64 1
  %2583 = load i8, i8* %2582, align 1
  %2584 = zext i8 %2583 to i32
  %2585 = load i8, i8* %2581, align 1
  %2586 = icmp eq i8 %2585, -1
  br i1 %2586, label %2587, label %2596

2587:                                             ; preds = %2580
  %2588 = icmp ugt i8 %2583, -113
  br i1 %2588, label %2589, label %2593

2589:                                             ; preds = %2587
  %2590 = add i32 %2578, 65280
  %2591 = load i32, i32* %2383, align 4
  %2592 = add i32 %2591, 1
  store i32 %2592, i32* %2383, align 4
  br label %2599

2593:                                             ; preds = %2587
  store i8* %2582, i8** %2382, align 8
  %2594 = shl nuw nsw i32 %2584, 9
  %2595 = add i32 %2594, %2578
  br label %2599

2596:                                             ; preds = %2580
  store i8* %2582, i8** %2382, align 8
  %2597 = shl nuw nsw i32 %2584, 8
  %2598 = add i32 %2597, %2578
  br label %2599

2599:                                             ; preds = %2596, %2593, %2589, %2575
  %2600 = phi i32 [ %2576, %2575 ], [ 8, %2589 ], [ 7, %2593 ], [ 8, %2596 ]
  %2601 = phi i32 [ %2578, %2575 ], [ %2590, %2589 ], [ %2595, %2593 ], [ %2598, %2596 ]
  %2602 = shl i32 %2577, 1
  %2603 = shl i32 %2601, 1
  %2604 = add i32 %2600, -1
  %2605 = icmp ult i32 %2602, 32768
  br i1 %2605, label %2575, label %2658

2606:                                             ; preds = %2530
  %2607 = shl i32 %2558, 16
  %2608 = sub i32 %2528, %2607
  %2609 = trunc i32 %2559 to i16
  %2610 = icmp sgt i16 %2609, -1
  br i1 %2610, label %2611, label %2655

2611:                                             ; preds = %2606
  %2612 = icmp ult i32 %2559, %2558
  %2613 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 1
  %2614 = load i32, i32* %2613, align 4
  %2615 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 2
  %2616 = icmp eq i32 %2614, 0
  %2617 = zext i1 %2616 to i32
  %2618 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 3
  %2619 = select i1 %2612, %struct.opj_mqc_state** %2618, %struct.opj_mqc_state** %2615
  %2620 = select i1 %2612, i32 %2617, i32 %2614
  %2621 = bitcast %struct.opj_mqc_state** %2619 to i64*
  %2622 = load i64, i64* %2621, align 8
  %2623 = bitcast %struct.opj_mqc_state** %2555 to i64*
  store i64 %2622, i64* %2623, align 8
  br label %2624

2624:                                             ; preds = %2648, %2611
  %2625 = phi i32 [ %2526, %2611 ], [ %2653, %2648 ]
  %2626 = phi i32 [ %2559, %2611 ], [ %2651, %2648 ]
  %2627 = phi i32 [ %2608, %2611 ], [ %2652, %2648 ]
  %2628 = icmp eq i32 %2625, 0
  br i1 %2628, label %2629, label %2648

2629:                                             ; preds = %2624
  %2630 = load i8*, i8** %2382, align 8
  %2631 = getelementptr inbounds i8, i8* %2630, i64 1
  %2632 = load i8, i8* %2631, align 1
  %2633 = zext i8 %2632 to i32
  %2634 = load i8, i8* %2630, align 1
  %2635 = icmp eq i8 %2634, -1
  br i1 %2635, label %2636, label %2645

2636:                                             ; preds = %2629
  %2637 = icmp ugt i8 %2632, -113
  br i1 %2637, label %2638, label %2642

2638:                                             ; preds = %2636
  %2639 = add i32 %2627, 65280
  %2640 = load i32, i32* %2383, align 4
  %2641 = add i32 %2640, 1
  store i32 %2641, i32* %2383, align 4
  br label %2648

2642:                                             ; preds = %2636
  store i8* %2631, i8** %2382, align 8
  %2643 = shl nuw nsw i32 %2633, 9
  %2644 = add i32 %2643, %2627
  br label %2648

2645:                                             ; preds = %2629
  store i8* %2631, i8** %2382, align 8
  %2646 = shl nuw nsw i32 %2633, 8
  %2647 = add i32 %2646, %2627
  br label %2648

2648:                                             ; preds = %2645, %2642, %2638, %2624
  %2649 = phi i32 [ %2625, %2624 ], [ 8, %2638 ], [ 7, %2642 ], [ 8, %2645 ]
  %2650 = phi i32 [ %2627, %2624 ], [ %2639, %2638 ], [ %2644, %2642 ], [ %2647, %2645 ]
  %2651 = shl i32 %2626, 1
  %2652 = shl i32 %2650, 1
  %2653 = add i32 %2649, -1
  %2654 = icmp ult i32 %2651, 32768
  br i1 %2654, label %2624, label %2658

2655:                                             ; preds = %2606
  %2656 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2556, i64 0, i32 1
  %2657 = load i32, i32* %2656, align 4
  br label %2658

2658:                                             ; preds = %2648, %2599, %2655
  %2659 = phi i32 [ %2657, %2655 ], [ %2571, %2599 ], [ %2620, %2648 ]
  %2660 = phi i32 [ %2526, %2655 ], [ %2604, %2599 ], [ %2653, %2648 ]
  %2661 = phi i32 [ %2559, %2655 ], [ %2602, %2599 ], [ %2651, %2648 ]
  %2662 = phi i32 [ %2608, %2655 ], [ %2603, %2599 ], [ %2652, %2648 ]
  %2663 = xor i32 %2659, %2553
  %2664 = icmp eq i32 %2663, 0
  %2665 = select i1 %2664, i32 %2375, i32 %2384
  store i32 %2665, i32* %2401, align 4
  %2666 = load i32, i32* %2531, align 4
  %2667 = or i32 %2666, 32
  store i32 %2667, i32* %2531, align 4
  %2668 = shl i32 %2663, 19
  %2669 = or i32 %2407, %2668
  %2670 = or i32 %2669, 16
  %2671 = load i32, i32* %2533, align 4
  %2672 = or i32 %2671, 8
  store i32 %2672, i32* %2533, align 4
  br label %2673

2673:                                             ; preds = %2658, %2524
  %2674 = phi i32 [ %2670, %2658 ], [ %2407, %2524 ]
  %2675 = phi i32 [ %2660, %2658 ], [ %2526, %2524 ]
  %2676 = phi i32 [ %2661, %2658 ], [ %2527, %2524 ]
  %2677 = phi i32 [ %2662, %2658 ], [ %2528, %2524 ]
  %2678 = phi %struct.opj_mqc_state** [ %2555, %2658 ], [ %2421, %2524 ]
  %2679 = or i32 %2674, 2097152
  br label %2680

2680:                                             ; preds = %2673, %2409
  %2681 = phi i32 [ %2679, %2673 ], [ %2407, %2409 ]
  %2682 = phi i32 [ %2675, %2673 ], [ %2406, %2409 ]
  %2683 = phi i32 [ %2676, %2673 ], [ %2405, %2409 ]
  %2684 = phi i32 [ %2677, %2673 ], [ %2404, %2409 ]
  %2685 = phi %struct.opj_mqc_state** [ %2678, %2673 ], [ %2403, %2409 ]
  %2686 = and i32 %2681, 16777344
  %2687 = icmp ne i32 %2686, 0
  %2688 = and i32 %2681, 3960
  %2689 = icmp eq i32 %2688, 0
  %2690 = or i1 %2687, %2689
  br i1 %2690, label %2959, label %2691

2691:                                             ; preds = %2680
  %2692 = lshr i32 %2681, 3
  %2693 = load i8*, i8** %2381, align 8
  %2694 = and i32 %2692, 495
  %2695 = zext i32 %2694 to i64
  %2696 = getelementptr inbounds i8, i8* %2693, i64 %2695
  %2697 = load i8, i8* %2696, align 1
  %2698 = zext i8 %2697 to i64
  %2699 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2698
  %2700 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2699, align 8
  %2701 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 0
  %2702 = load i32, i32* %2701, align 8
  %2703 = sub i32 %2683, %2702
  %2704 = lshr i32 %2684, 16
  %2705 = icmp ult i32 %2704, %2702
  br i1 %2705, label %2706, label %2750

2706:                                             ; preds = %2691
  %2707 = icmp ult i32 %2703, %2702
  %2708 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 1
  %2709 = load i32, i32* %2708, align 4
  %2710 = icmp eq i32 %2709, 0
  %2711 = zext i1 %2710 to i32
  %2712 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 3
  %2713 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 2
  %2714 = select i1 %2707, %struct.opj_mqc_state** %2713, %struct.opj_mqc_state** %2712
  %2715 = select i1 %2707, i32 %2709, i32 %2711
  %2716 = bitcast %struct.opj_mqc_state** %2714 to i64*
  %2717 = load i64, i64* %2716, align 8
  %2718 = bitcast %struct.opj_mqc_state** %2699 to i64*
  store i64 %2717, i64* %2718, align 8
  br label %2719

2719:                                             ; preds = %2743, %2706
  %2720 = phi i32 [ %2682, %2706 ], [ %2748, %2743 ]
  %2721 = phi i32 [ %2702, %2706 ], [ %2746, %2743 ]
  %2722 = phi i32 [ %2684, %2706 ], [ %2747, %2743 ]
  %2723 = icmp eq i32 %2720, 0
  br i1 %2723, label %2724, label %2743

2724:                                             ; preds = %2719
  %2725 = load i8*, i8** %2382, align 8
  %2726 = getelementptr inbounds i8, i8* %2725, i64 1
  %2727 = load i8, i8* %2726, align 1
  %2728 = zext i8 %2727 to i32
  %2729 = load i8, i8* %2725, align 1
  %2730 = icmp eq i8 %2729, -1
  br i1 %2730, label %2731, label %2740

2731:                                             ; preds = %2724
  %2732 = icmp ugt i8 %2727, -113
  br i1 %2732, label %2733, label %2737

2733:                                             ; preds = %2731
  %2734 = add i32 %2722, 65280
  %2735 = load i32, i32* %2383, align 4
  %2736 = add i32 %2735, 1
  store i32 %2736, i32* %2383, align 4
  br label %2743

2737:                                             ; preds = %2731
  store i8* %2726, i8** %2382, align 8
  %2738 = shl nuw nsw i32 %2728, 9
  %2739 = add i32 %2738, %2722
  br label %2743

2740:                                             ; preds = %2724
  store i8* %2726, i8** %2382, align 8
  %2741 = shl nuw nsw i32 %2728, 8
  %2742 = add i32 %2741, %2722
  br label %2743

2743:                                             ; preds = %2740, %2737, %2733, %2719
  %2744 = phi i32 [ %2720, %2719 ], [ 8, %2733 ], [ 7, %2737 ], [ 8, %2740 ]
  %2745 = phi i32 [ %2722, %2719 ], [ %2734, %2733 ], [ %2739, %2737 ], [ %2742, %2740 ]
  %2746 = shl i32 %2721, 1
  %2747 = shl i32 %2745, 1
  %2748 = add i32 %2744, -1
  %2749 = icmp ult i32 %2746, 32768
  br i1 %2749, label %2719, label %2802

2750:                                             ; preds = %2691
  %2751 = shl i32 %2702, 16
  %2752 = sub i32 %2684, %2751
  %2753 = trunc i32 %2703 to i16
  %2754 = icmp sgt i16 %2753, -1
  br i1 %2754, label %2755, label %2799

2755:                                             ; preds = %2750
  %2756 = icmp ult i32 %2703, %2702
  %2757 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 1
  %2758 = load i32, i32* %2757, align 4
  %2759 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 2
  %2760 = icmp eq i32 %2758, 0
  %2761 = zext i1 %2760 to i32
  %2762 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 3
  %2763 = select i1 %2756, %struct.opj_mqc_state** %2762, %struct.opj_mqc_state** %2759
  %2764 = select i1 %2756, i32 %2761, i32 %2758
  %2765 = bitcast %struct.opj_mqc_state** %2763 to i64*
  %2766 = load i64, i64* %2765, align 8
  %2767 = bitcast %struct.opj_mqc_state** %2699 to i64*
  store i64 %2766, i64* %2767, align 8
  br label %2768

2768:                                             ; preds = %2792, %2755
  %2769 = phi i32 [ %2682, %2755 ], [ %2797, %2792 ]
  %2770 = phi i32 [ %2703, %2755 ], [ %2795, %2792 ]
  %2771 = phi i32 [ %2752, %2755 ], [ %2796, %2792 ]
  %2772 = icmp eq i32 %2769, 0
  br i1 %2772, label %2773, label %2792

2773:                                             ; preds = %2768
  %2774 = load i8*, i8** %2382, align 8
  %2775 = getelementptr inbounds i8, i8* %2774, i64 1
  %2776 = load i8, i8* %2775, align 1
  %2777 = zext i8 %2776 to i32
  %2778 = load i8, i8* %2774, align 1
  %2779 = icmp eq i8 %2778, -1
  br i1 %2779, label %2780, label %2789

2780:                                             ; preds = %2773
  %2781 = icmp ugt i8 %2776, -113
  br i1 %2781, label %2782, label %2786

2782:                                             ; preds = %2780
  %2783 = add i32 %2771, 65280
  %2784 = load i32, i32* %2383, align 4
  %2785 = add i32 %2784, 1
  store i32 %2785, i32* %2383, align 4
  br label %2792

2786:                                             ; preds = %2780
  store i8* %2775, i8** %2382, align 8
  %2787 = shl nuw nsw i32 %2777, 9
  %2788 = add i32 %2787, %2771
  br label %2792

2789:                                             ; preds = %2773
  store i8* %2775, i8** %2382, align 8
  %2790 = shl nuw nsw i32 %2777, 8
  %2791 = add i32 %2790, %2771
  br label %2792

2792:                                             ; preds = %2789, %2786, %2782, %2768
  %2793 = phi i32 [ %2769, %2768 ], [ 8, %2782 ], [ 7, %2786 ], [ 8, %2789 ]
  %2794 = phi i32 [ %2771, %2768 ], [ %2783, %2782 ], [ %2788, %2786 ], [ %2791, %2789 ]
  %2795 = shl i32 %2770, 1
  %2796 = shl i32 %2794, 1
  %2797 = add i32 %2793, -1
  %2798 = icmp ult i32 %2795, 32768
  br i1 %2798, label %2768, label %2802

2799:                                             ; preds = %2750
  %2800 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2700, i64 0, i32 1
  %2801 = load i32, i32* %2800, align 4
  br label %2802

2802:                                             ; preds = %2792, %2743, %2799
  %2803 = phi i32 [ %2801, %2799 ], [ %2715, %2743 ], [ %2764, %2792 ]
  %2804 = phi i32 [ %2682, %2799 ], [ %2748, %2743 ], [ %2797, %2792 ]
  %2805 = phi i32 [ %2703, %2799 ], [ %2746, %2743 ], [ %2795, %2792 ]
  %2806 = phi i32 [ %2752, %2799 ], [ %2747, %2743 ], [ %2796, %2792 ]
  %2807 = icmp eq i32 %2803, 0
  br i1 %2807, label %2952, label %2808

2808:                                             ; preds = %2802
  %2809 = getelementptr inbounds i32, i32* %2402, i64 -1
  %2810 = load i32, i32* %2809, align 4
  %2811 = getelementptr inbounds i32, i32* %2402, i64 1
  %2812 = load i32, i32* %2811, align 4
  %2813 = and i32 %2692, 170
  %2814 = lshr i32 %2810, 22
  %2815 = and i32 %2814, 1
  %2816 = lshr i32 %2812, 20
  %2817 = and i32 %2816, 4
  %2818 = lshr i32 %2681, 15
  %2819 = and i32 %2818, 16
  %2820 = lshr i32 %2681, 19
  %2821 = and i32 %2820, 64
  %2822 = or i32 %2821, %2813
  %2823 = or i32 %2822, %2819
  %2824 = or i32 %2823, %2815
  %2825 = or i32 %2824, %2817
  %2826 = zext i32 %2825 to i64
  %2827 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %2826
  %2828 = load i8, i8* %2827, align 1
  %2829 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %2826
  %2830 = load i8, i8* %2829, align 1
  %2831 = zext i8 %2830 to i32
  %2832 = zext i8 %2828 to i64
  %2833 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2832
  %2834 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2833, align 8
  %2835 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 0
  %2836 = load i32, i32* %2835, align 8
  %2837 = sub i32 %2805, %2836
  %2838 = lshr i32 %2806, 16
  %2839 = icmp ult i32 %2838, %2836
  br i1 %2839, label %2840, label %2884

2840:                                             ; preds = %2808
  %2841 = icmp ult i32 %2837, %2836
  %2842 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 1
  %2843 = load i32, i32* %2842, align 4
  %2844 = icmp eq i32 %2843, 0
  %2845 = zext i1 %2844 to i32
  %2846 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 3
  %2847 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 2
  %2848 = select i1 %2841, %struct.opj_mqc_state** %2847, %struct.opj_mqc_state** %2846
  %2849 = select i1 %2841, i32 %2843, i32 %2845
  %2850 = bitcast %struct.opj_mqc_state** %2848 to i64*
  %2851 = load i64, i64* %2850, align 8
  %2852 = bitcast %struct.opj_mqc_state** %2833 to i64*
  store i64 %2851, i64* %2852, align 8
  br label %2853

2853:                                             ; preds = %2877, %2840
  %2854 = phi i32 [ %2804, %2840 ], [ %2882, %2877 ]
  %2855 = phi i32 [ %2836, %2840 ], [ %2880, %2877 ]
  %2856 = phi i32 [ %2806, %2840 ], [ %2881, %2877 ]
  %2857 = icmp eq i32 %2854, 0
  br i1 %2857, label %2858, label %2877

2858:                                             ; preds = %2853
  %2859 = load i8*, i8** %2382, align 8
  %2860 = getelementptr inbounds i8, i8* %2859, i64 1
  %2861 = load i8, i8* %2860, align 1
  %2862 = zext i8 %2861 to i32
  %2863 = load i8, i8* %2859, align 1
  %2864 = icmp eq i8 %2863, -1
  br i1 %2864, label %2865, label %2874

2865:                                             ; preds = %2858
  %2866 = icmp ugt i8 %2861, -113
  br i1 %2866, label %2867, label %2871

2867:                                             ; preds = %2865
  %2868 = add i32 %2856, 65280
  %2869 = load i32, i32* %2383, align 4
  %2870 = add i32 %2869, 1
  store i32 %2870, i32* %2383, align 4
  br label %2877

2871:                                             ; preds = %2865
  store i8* %2860, i8** %2382, align 8
  %2872 = shl nuw nsw i32 %2862, 9
  %2873 = add i32 %2872, %2856
  br label %2877

2874:                                             ; preds = %2858
  store i8* %2860, i8** %2382, align 8
  %2875 = shl nuw nsw i32 %2862, 8
  %2876 = add i32 %2875, %2856
  br label %2877

2877:                                             ; preds = %2874, %2871, %2867, %2853
  %2878 = phi i32 [ %2854, %2853 ], [ 8, %2867 ], [ 7, %2871 ], [ 8, %2874 ]
  %2879 = phi i32 [ %2856, %2853 ], [ %2868, %2867 ], [ %2873, %2871 ], [ %2876, %2874 ]
  %2880 = shl i32 %2855, 1
  %2881 = shl i32 %2879, 1
  %2882 = add i32 %2878, -1
  %2883 = icmp ult i32 %2880, 32768
  br i1 %2883, label %2853, label %2936

2884:                                             ; preds = %2808
  %2885 = shl i32 %2836, 16
  %2886 = sub i32 %2806, %2885
  %2887 = trunc i32 %2837 to i16
  %2888 = icmp sgt i16 %2887, -1
  br i1 %2888, label %2889, label %2933

2889:                                             ; preds = %2884
  %2890 = icmp ult i32 %2837, %2836
  %2891 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 1
  %2892 = load i32, i32* %2891, align 4
  %2893 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 2
  %2894 = icmp eq i32 %2892, 0
  %2895 = zext i1 %2894 to i32
  %2896 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 3
  %2897 = select i1 %2890, %struct.opj_mqc_state** %2896, %struct.opj_mqc_state** %2893
  %2898 = select i1 %2890, i32 %2895, i32 %2892
  %2899 = bitcast %struct.opj_mqc_state** %2897 to i64*
  %2900 = load i64, i64* %2899, align 8
  %2901 = bitcast %struct.opj_mqc_state** %2833 to i64*
  store i64 %2900, i64* %2901, align 8
  br label %2902

2902:                                             ; preds = %2926, %2889
  %2903 = phi i32 [ %2804, %2889 ], [ %2931, %2926 ]
  %2904 = phi i32 [ %2837, %2889 ], [ %2929, %2926 ]
  %2905 = phi i32 [ %2886, %2889 ], [ %2930, %2926 ]
  %2906 = icmp eq i32 %2903, 0
  br i1 %2906, label %2907, label %2926

2907:                                             ; preds = %2902
  %2908 = load i8*, i8** %2382, align 8
  %2909 = getelementptr inbounds i8, i8* %2908, i64 1
  %2910 = load i8, i8* %2909, align 1
  %2911 = zext i8 %2910 to i32
  %2912 = load i8, i8* %2908, align 1
  %2913 = icmp eq i8 %2912, -1
  br i1 %2913, label %2914, label %2923

2914:                                             ; preds = %2907
  %2915 = icmp ugt i8 %2910, -113
  br i1 %2915, label %2916, label %2920

2916:                                             ; preds = %2914
  %2917 = add i32 %2905, 65280
  %2918 = load i32, i32* %2383, align 4
  %2919 = add i32 %2918, 1
  store i32 %2919, i32* %2383, align 4
  br label %2926

2920:                                             ; preds = %2914
  store i8* %2909, i8** %2382, align 8
  %2921 = shl nuw nsw i32 %2911, 9
  %2922 = add i32 %2921, %2905
  br label %2926

2923:                                             ; preds = %2907
  store i8* %2909, i8** %2382, align 8
  %2924 = shl nuw nsw i32 %2911, 8
  %2925 = add i32 %2924, %2905
  br label %2926

2926:                                             ; preds = %2923, %2920, %2916, %2902
  %2927 = phi i32 [ %2903, %2902 ], [ 8, %2916 ], [ 7, %2920 ], [ 8, %2923 ]
  %2928 = phi i32 [ %2905, %2902 ], [ %2917, %2916 ], [ %2922, %2920 ], [ %2925, %2923 ]
  %2929 = shl i32 %2904, 1
  %2930 = shl i32 %2928, 1
  %2931 = add i32 %2927, -1
  %2932 = icmp ult i32 %2929, 32768
  br i1 %2932, label %2902, label %2936

2933:                                             ; preds = %2884
  %2934 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2834, i64 0, i32 1
  %2935 = load i32, i32* %2934, align 4
  br label %2936

2936:                                             ; preds = %2926, %2877, %2933
  %2937 = phi i32 [ %2935, %2933 ], [ %2849, %2877 ], [ %2898, %2926 ]
  %2938 = phi i32 [ %2804, %2933 ], [ %2882, %2877 ], [ %2931, %2926 ]
  %2939 = phi i32 [ %2837, %2933 ], [ %2880, %2877 ], [ %2929, %2926 ]
  %2940 = phi i32 [ %2886, %2933 ], [ %2881, %2877 ], [ %2930, %2926 ]
  %2941 = xor i32 %2937, %2831
  %2942 = icmp eq i32 %2941, 0
  %2943 = select i1 %2942, i32 %2375, i32 %2384
  %2944 = getelementptr inbounds i32, i32* %2401, i64 %2385
  store i32 %2943, i32* %2944, align 4
  %2945 = load i32, i32* %2809, align 4
  %2946 = or i32 %2945, 256
  store i32 %2946, i32* %2809, align 4
  %2947 = shl i32 %2941, 22
  %2948 = or i32 %2681, %2947
  %2949 = or i32 %2948, 128
  %2950 = load i32, i32* %2811, align 4
  %2951 = or i32 %2950, 64
  store i32 %2951, i32* %2811, align 4
  br label %2952

2952:                                             ; preds = %2936, %2802
  %2953 = phi i32 [ %2949, %2936 ], [ %2681, %2802 ]
  %2954 = phi i32 [ %2938, %2936 ], [ %2804, %2802 ]
  %2955 = phi i32 [ %2939, %2936 ], [ %2805, %2802 ]
  %2956 = phi i32 [ %2940, %2936 ], [ %2806, %2802 ]
  %2957 = phi %struct.opj_mqc_state** [ %2833, %2936 ], [ %2699, %2802 ]
  %2958 = or i32 %2953, 16777216
  br label %2959

2959:                                             ; preds = %2952, %2680
  %2960 = phi i32 [ %2958, %2952 ], [ %2681, %2680 ]
  %2961 = phi i32 [ %2954, %2952 ], [ %2682, %2680 ]
  %2962 = phi i32 [ %2955, %2952 ], [ %2683, %2680 ]
  %2963 = phi i32 [ %2956, %2952 ], [ %2684, %2680 ]
  %2964 = phi %struct.opj_mqc_state** [ %2957, %2952 ], [ %2685, %2680 ]
  %2965 = and i32 %2960, 134218752
  %2966 = icmp ne i32 %2965, 0
  %2967 = and i32 %2960, 31680
  %2968 = icmp eq i32 %2967, 0
  %2969 = or i1 %2966, %2968
  br i1 %2969, label %3238, label %2970

2970:                                             ; preds = %2959
  %2971 = lshr i32 %2960, 6
  %2972 = load i8*, i8** %2381, align 8
  %2973 = and i32 %2971, 495
  %2974 = zext i32 %2973 to i64
  %2975 = getelementptr inbounds i8, i8* %2972, i64 %2974
  %2976 = load i8, i8* %2975, align 1
  %2977 = zext i8 %2976 to i64
  %2978 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2977
  %2979 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2978, align 8
  %2980 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 0
  %2981 = load i32, i32* %2980, align 8
  %2982 = sub i32 %2962, %2981
  %2983 = lshr i32 %2963, 16
  %2984 = icmp ult i32 %2983, %2981
  br i1 %2984, label %2985, label %3029

2985:                                             ; preds = %2970
  %2986 = icmp ult i32 %2982, %2981
  %2987 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 1
  %2988 = load i32, i32* %2987, align 4
  %2989 = icmp eq i32 %2988, 0
  %2990 = zext i1 %2989 to i32
  %2991 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 3
  %2992 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 2
  %2993 = select i1 %2986, %struct.opj_mqc_state** %2992, %struct.opj_mqc_state** %2991
  %2994 = select i1 %2986, i32 %2988, i32 %2990
  %2995 = bitcast %struct.opj_mqc_state** %2993 to i64*
  %2996 = load i64, i64* %2995, align 8
  %2997 = bitcast %struct.opj_mqc_state** %2978 to i64*
  store i64 %2996, i64* %2997, align 8
  br label %2998

2998:                                             ; preds = %3022, %2985
  %2999 = phi i32 [ %2961, %2985 ], [ %3027, %3022 ]
  %3000 = phi i32 [ %2981, %2985 ], [ %3025, %3022 ]
  %3001 = phi i32 [ %2963, %2985 ], [ %3026, %3022 ]
  %3002 = icmp eq i32 %2999, 0
  br i1 %3002, label %3003, label %3022

3003:                                             ; preds = %2998
  %3004 = load i8*, i8** %2382, align 8
  %3005 = getelementptr inbounds i8, i8* %3004, i64 1
  %3006 = load i8, i8* %3005, align 1
  %3007 = zext i8 %3006 to i32
  %3008 = load i8, i8* %3004, align 1
  %3009 = icmp eq i8 %3008, -1
  br i1 %3009, label %3010, label %3019

3010:                                             ; preds = %3003
  %3011 = icmp ugt i8 %3006, -113
  br i1 %3011, label %3012, label %3016

3012:                                             ; preds = %3010
  %3013 = add i32 %3001, 65280
  %3014 = load i32, i32* %2383, align 4
  %3015 = add i32 %3014, 1
  store i32 %3015, i32* %2383, align 4
  br label %3022

3016:                                             ; preds = %3010
  store i8* %3005, i8** %2382, align 8
  %3017 = shl nuw nsw i32 %3007, 9
  %3018 = add i32 %3017, %3001
  br label %3022

3019:                                             ; preds = %3003
  store i8* %3005, i8** %2382, align 8
  %3020 = shl nuw nsw i32 %3007, 8
  %3021 = add i32 %3020, %3001
  br label %3022

3022:                                             ; preds = %3019, %3016, %3012, %2998
  %3023 = phi i32 [ %2999, %2998 ], [ 8, %3012 ], [ 7, %3016 ], [ 8, %3019 ]
  %3024 = phi i32 [ %3001, %2998 ], [ %3013, %3012 ], [ %3018, %3016 ], [ %3021, %3019 ]
  %3025 = shl i32 %3000, 1
  %3026 = shl i32 %3024, 1
  %3027 = add i32 %3023, -1
  %3028 = icmp ult i32 %3025, 32768
  br i1 %3028, label %2998, label %3081

3029:                                             ; preds = %2970
  %3030 = shl i32 %2981, 16
  %3031 = sub i32 %2963, %3030
  %3032 = trunc i32 %2982 to i16
  %3033 = icmp sgt i16 %3032, -1
  br i1 %3033, label %3034, label %3078

3034:                                             ; preds = %3029
  %3035 = icmp ult i32 %2982, %2981
  %3036 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 1
  %3037 = load i32, i32* %3036, align 4
  %3038 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 2
  %3039 = icmp eq i32 %3037, 0
  %3040 = zext i1 %3039 to i32
  %3041 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 3
  %3042 = select i1 %3035, %struct.opj_mqc_state** %3041, %struct.opj_mqc_state** %3038
  %3043 = select i1 %3035, i32 %3040, i32 %3037
  %3044 = bitcast %struct.opj_mqc_state** %3042 to i64*
  %3045 = load i64, i64* %3044, align 8
  %3046 = bitcast %struct.opj_mqc_state** %2978 to i64*
  store i64 %3045, i64* %3046, align 8
  br label %3047

3047:                                             ; preds = %3071, %3034
  %3048 = phi i32 [ %2961, %3034 ], [ %3076, %3071 ]
  %3049 = phi i32 [ %2982, %3034 ], [ %3074, %3071 ]
  %3050 = phi i32 [ %3031, %3034 ], [ %3075, %3071 ]
  %3051 = icmp eq i32 %3048, 0
  br i1 %3051, label %3052, label %3071

3052:                                             ; preds = %3047
  %3053 = load i8*, i8** %2382, align 8
  %3054 = getelementptr inbounds i8, i8* %3053, i64 1
  %3055 = load i8, i8* %3054, align 1
  %3056 = zext i8 %3055 to i32
  %3057 = load i8, i8* %3053, align 1
  %3058 = icmp eq i8 %3057, -1
  br i1 %3058, label %3059, label %3068

3059:                                             ; preds = %3052
  %3060 = icmp ugt i8 %3055, -113
  br i1 %3060, label %3061, label %3065

3061:                                             ; preds = %3059
  %3062 = add i32 %3050, 65280
  %3063 = load i32, i32* %2383, align 4
  %3064 = add i32 %3063, 1
  store i32 %3064, i32* %2383, align 4
  br label %3071

3065:                                             ; preds = %3059
  store i8* %3054, i8** %2382, align 8
  %3066 = shl nuw nsw i32 %3056, 9
  %3067 = add i32 %3066, %3050
  br label %3071

3068:                                             ; preds = %3052
  store i8* %3054, i8** %2382, align 8
  %3069 = shl nuw nsw i32 %3056, 8
  %3070 = add i32 %3069, %3050
  br label %3071

3071:                                             ; preds = %3068, %3065, %3061, %3047
  %3072 = phi i32 [ %3048, %3047 ], [ 8, %3061 ], [ 7, %3065 ], [ 8, %3068 ]
  %3073 = phi i32 [ %3050, %3047 ], [ %3062, %3061 ], [ %3067, %3065 ], [ %3070, %3068 ]
  %3074 = shl i32 %3049, 1
  %3075 = shl i32 %3073, 1
  %3076 = add i32 %3072, -1
  %3077 = icmp ult i32 %3074, 32768
  br i1 %3077, label %3047, label %3081

3078:                                             ; preds = %3029
  %3079 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2979, i64 0, i32 1
  %3080 = load i32, i32* %3079, align 4
  br label %3081

3081:                                             ; preds = %3071, %3022, %3078
  %3082 = phi i32 [ %3080, %3078 ], [ %2994, %3022 ], [ %3043, %3071 ]
  %3083 = phi i32 [ %2961, %3078 ], [ %3027, %3022 ], [ %3076, %3071 ]
  %3084 = phi i32 [ %2982, %3078 ], [ %3025, %3022 ], [ %3074, %3071 ]
  %3085 = phi i32 [ %3031, %3078 ], [ %3026, %3022 ], [ %3075, %3071 ]
  %3086 = icmp eq i32 %3082, 0
  br i1 %3086, label %3231, label %3087

3087:                                             ; preds = %3081
  %3088 = getelementptr inbounds i32, i32* %2402, i64 -1
  %3089 = load i32, i32* %3088, align 4
  %3090 = getelementptr inbounds i32, i32* %2402, i64 1
  %3091 = load i32, i32* %3090, align 4
  %3092 = and i32 %2971, 170
  %3093 = lshr i32 %3089, 25
  %3094 = and i32 %3093, 1
  %3095 = lshr i32 %3091, 23
  %3096 = and i32 %3095, 4
  %3097 = lshr i32 %2960, 18
  %3098 = and i32 %3097, 16
  %3099 = lshr i32 %2960, 22
  %3100 = and i32 %3099, 64
  %3101 = or i32 %3100, %3092
  %3102 = or i32 %3101, %3098
  %3103 = or i32 %3102, %3094
  %3104 = or i32 %3103, %3096
  %3105 = zext i32 %3104 to i64
  %3106 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3105
  %3107 = load i8, i8* %3106, align 1
  %3108 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3105
  %3109 = load i8, i8* %3108, align 1
  %3110 = zext i8 %3109 to i32
  %3111 = zext i8 %3107 to i64
  %3112 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3111
  %3113 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3112, align 8
  %3114 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 0
  %3115 = load i32, i32* %3114, align 8
  %3116 = sub i32 %3084, %3115
  %3117 = lshr i32 %3085, 16
  %3118 = icmp ult i32 %3117, %3115
  br i1 %3118, label %3119, label %3163

3119:                                             ; preds = %3087
  %3120 = icmp ult i32 %3116, %3115
  %3121 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 1
  %3122 = load i32, i32* %3121, align 4
  %3123 = icmp eq i32 %3122, 0
  %3124 = zext i1 %3123 to i32
  %3125 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 3
  %3126 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 2
  %3127 = select i1 %3120, %struct.opj_mqc_state** %3126, %struct.opj_mqc_state** %3125
  %3128 = select i1 %3120, i32 %3122, i32 %3124
  %3129 = bitcast %struct.opj_mqc_state** %3127 to i64*
  %3130 = load i64, i64* %3129, align 8
  %3131 = bitcast %struct.opj_mqc_state** %3112 to i64*
  store i64 %3130, i64* %3131, align 8
  br label %3132

3132:                                             ; preds = %3156, %3119
  %3133 = phi i32 [ %3083, %3119 ], [ %3161, %3156 ]
  %3134 = phi i32 [ %3115, %3119 ], [ %3159, %3156 ]
  %3135 = phi i32 [ %3085, %3119 ], [ %3160, %3156 ]
  %3136 = icmp eq i32 %3133, 0
  br i1 %3136, label %3137, label %3156

3137:                                             ; preds = %3132
  %3138 = load i8*, i8** %2382, align 8
  %3139 = getelementptr inbounds i8, i8* %3138, i64 1
  %3140 = load i8, i8* %3139, align 1
  %3141 = zext i8 %3140 to i32
  %3142 = load i8, i8* %3138, align 1
  %3143 = icmp eq i8 %3142, -1
  br i1 %3143, label %3144, label %3153

3144:                                             ; preds = %3137
  %3145 = icmp ugt i8 %3140, -113
  br i1 %3145, label %3146, label %3150

3146:                                             ; preds = %3144
  %3147 = add i32 %3135, 65280
  %3148 = load i32, i32* %2383, align 4
  %3149 = add i32 %3148, 1
  store i32 %3149, i32* %2383, align 4
  br label %3156

3150:                                             ; preds = %3144
  store i8* %3139, i8** %2382, align 8
  %3151 = shl nuw nsw i32 %3141, 9
  %3152 = add i32 %3151, %3135
  br label %3156

3153:                                             ; preds = %3137
  store i8* %3139, i8** %2382, align 8
  %3154 = shl nuw nsw i32 %3141, 8
  %3155 = add i32 %3154, %3135
  br label %3156

3156:                                             ; preds = %3153, %3150, %3146, %3132
  %3157 = phi i32 [ %3133, %3132 ], [ 8, %3146 ], [ 7, %3150 ], [ 8, %3153 ]
  %3158 = phi i32 [ %3135, %3132 ], [ %3147, %3146 ], [ %3152, %3150 ], [ %3155, %3153 ]
  %3159 = shl i32 %3134, 1
  %3160 = shl i32 %3158, 1
  %3161 = add i32 %3157, -1
  %3162 = icmp ult i32 %3159, 32768
  br i1 %3162, label %3132, label %3215

3163:                                             ; preds = %3087
  %3164 = shl i32 %3115, 16
  %3165 = sub i32 %3085, %3164
  %3166 = trunc i32 %3116 to i16
  %3167 = icmp sgt i16 %3166, -1
  br i1 %3167, label %3168, label %3212

3168:                                             ; preds = %3163
  %3169 = icmp ult i32 %3116, %3115
  %3170 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 1
  %3171 = load i32, i32* %3170, align 4
  %3172 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 2
  %3173 = icmp eq i32 %3171, 0
  %3174 = zext i1 %3173 to i32
  %3175 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 3
  %3176 = select i1 %3169, %struct.opj_mqc_state** %3175, %struct.opj_mqc_state** %3172
  %3177 = select i1 %3169, i32 %3174, i32 %3171
  %3178 = bitcast %struct.opj_mqc_state** %3176 to i64*
  %3179 = load i64, i64* %3178, align 8
  %3180 = bitcast %struct.opj_mqc_state** %3112 to i64*
  store i64 %3179, i64* %3180, align 8
  br label %3181

3181:                                             ; preds = %3205, %3168
  %3182 = phi i32 [ %3083, %3168 ], [ %3210, %3205 ]
  %3183 = phi i32 [ %3116, %3168 ], [ %3208, %3205 ]
  %3184 = phi i32 [ %3165, %3168 ], [ %3209, %3205 ]
  %3185 = icmp eq i32 %3182, 0
  br i1 %3185, label %3186, label %3205

3186:                                             ; preds = %3181
  %3187 = load i8*, i8** %2382, align 8
  %3188 = getelementptr inbounds i8, i8* %3187, i64 1
  %3189 = load i8, i8* %3188, align 1
  %3190 = zext i8 %3189 to i32
  %3191 = load i8, i8* %3187, align 1
  %3192 = icmp eq i8 %3191, -1
  br i1 %3192, label %3193, label %3202

3193:                                             ; preds = %3186
  %3194 = icmp ugt i8 %3189, -113
  br i1 %3194, label %3195, label %3199

3195:                                             ; preds = %3193
  %3196 = add i32 %3184, 65280
  %3197 = load i32, i32* %2383, align 4
  %3198 = add i32 %3197, 1
  store i32 %3198, i32* %2383, align 4
  br label %3205

3199:                                             ; preds = %3193
  store i8* %3188, i8** %2382, align 8
  %3200 = shl nuw nsw i32 %3190, 9
  %3201 = add i32 %3200, %3184
  br label %3205

3202:                                             ; preds = %3186
  store i8* %3188, i8** %2382, align 8
  %3203 = shl nuw nsw i32 %3190, 8
  %3204 = add i32 %3203, %3184
  br label %3205

3205:                                             ; preds = %3202, %3199, %3195, %3181
  %3206 = phi i32 [ %3182, %3181 ], [ 8, %3195 ], [ 7, %3199 ], [ 8, %3202 ]
  %3207 = phi i32 [ %3184, %3181 ], [ %3196, %3195 ], [ %3201, %3199 ], [ %3204, %3202 ]
  %3208 = shl i32 %3183, 1
  %3209 = shl i32 %3207, 1
  %3210 = add i32 %3206, -1
  %3211 = icmp ult i32 %3208, 32768
  br i1 %3211, label %3181, label %3215

3212:                                             ; preds = %3163
  %3213 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3113, i64 0, i32 1
  %3214 = load i32, i32* %3213, align 4
  br label %3215

3215:                                             ; preds = %3205, %3156, %3212
  %3216 = phi i32 [ %3214, %3212 ], [ %3128, %3156 ], [ %3177, %3205 ]
  %3217 = phi i32 [ %3083, %3212 ], [ %3161, %3156 ], [ %3210, %3205 ]
  %3218 = phi i32 [ %3116, %3212 ], [ %3159, %3156 ], [ %3208, %3205 ]
  %3219 = phi i32 [ %3165, %3212 ], [ %3160, %3156 ], [ %3209, %3205 ]
  %3220 = xor i32 %3216, %3110
  %3221 = icmp eq i32 %3220, 0
  %3222 = select i1 %3221, i32 %2375, i32 %2384
  %3223 = getelementptr inbounds i32, i32* %2401, i64 %2387
  store i32 %3222, i32* %3223, align 4
  %3224 = load i32, i32* %3088, align 4
  %3225 = or i32 %3224, 2048
  store i32 %3225, i32* %3088, align 4
  %3226 = shl i32 %3220, 25
  %3227 = or i32 %2960, %3226
  %3228 = or i32 %3227, 1024
  %3229 = load i32, i32* %3090, align 4
  %3230 = or i32 %3229, 512
  store i32 %3230, i32* %3090, align 4
  br label %3231

3231:                                             ; preds = %3215, %3081
  %3232 = phi i32 [ %3228, %3215 ], [ %2960, %3081 ]
  %3233 = phi i32 [ %3217, %3215 ], [ %3083, %3081 ]
  %3234 = phi i32 [ %3218, %3215 ], [ %3084, %3081 ]
  %3235 = phi i32 [ %3219, %3215 ], [ %3085, %3081 ]
  %3236 = phi %struct.opj_mqc_state** [ %3112, %3215 ], [ %2978, %3081 ]
  %3237 = or i32 %3232, 134217728
  br label %3238

3238:                                             ; preds = %3231, %2959
  %3239 = phi i32 [ %3237, %3231 ], [ %2960, %2959 ]
  %3240 = phi i32 [ %3233, %3231 ], [ %2961, %2959 ]
  %3241 = phi i32 [ %3234, %3231 ], [ %2962, %2959 ]
  %3242 = phi i32 [ %3235, %3231 ], [ %2963, %2959 ]
  %3243 = phi %struct.opj_mqc_state** [ %3236, %3231 ], [ %2964, %2959 ]
  %3244 = and i32 %3239, 1073750016
  %3245 = icmp ne i32 %3244, 0
  %3246 = and i32 %3239, 253440
  %3247 = icmp eq i32 %3246, 0
  %3248 = or i1 %3245, %3247
  br i1 %3248, label %3531, label %3249

3249:                                             ; preds = %3238
  %3250 = lshr i32 %3239, 9
  %3251 = load i8*, i8** %2381, align 8
  %3252 = and i32 %3250, 495
  %3253 = zext i32 %3252 to i64
  %3254 = getelementptr inbounds i8, i8* %3251, i64 %3253
  %3255 = load i8, i8* %3254, align 1
  %3256 = zext i8 %3255 to i64
  %3257 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3256
  %3258 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3257, align 8
  %3259 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 0
  %3260 = load i32, i32* %3259, align 8
  %3261 = sub i32 %3241, %3260
  %3262 = lshr i32 %3242, 16
  %3263 = icmp ult i32 %3262, %3260
  br i1 %3263, label %3264, label %3308

3264:                                             ; preds = %3249
  %3265 = icmp ult i32 %3261, %3260
  %3266 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 1
  %3267 = load i32, i32* %3266, align 4
  %3268 = icmp eq i32 %3267, 0
  %3269 = zext i1 %3268 to i32
  %3270 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 3
  %3271 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 2
  %3272 = select i1 %3265, %struct.opj_mqc_state** %3271, %struct.opj_mqc_state** %3270
  %3273 = select i1 %3265, i32 %3267, i32 %3269
  %3274 = bitcast %struct.opj_mqc_state** %3272 to i64*
  %3275 = load i64, i64* %3274, align 8
  %3276 = bitcast %struct.opj_mqc_state** %3257 to i64*
  store i64 %3275, i64* %3276, align 8
  br label %3277

3277:                                             ; preds = %3301, %3264
  %3278 = phi i32 [ %3240, %3264 ], [ %3306, %3301 ]
  %3279 = phi i32 [ %3260, %3264 ], [ %3304, %3301 ]
  %3280 = phi i32 [ %3242, %3264 ], [ %3305, %3301 ]
  %3281 = icmp eq i32 %3278, 0
  br i1 %3281, label %3282, label %3301

3282:                                             ; preds = %3277
  %3283 = load i8*, i8** %2382, align 8
  %3284 = getelementptr inbounds i8, i8* %3283, i64 1
  %3285 = load i8, i8* %3284, align 1
  %3286 = zext i8 %3285 to i32
  %3287 = load i8, i8* %3283, align 1
  %3288 = icmp eq i8 %3287, -1
  br i1 %3288, label %3289, label %3298

3289:                                             ; preds = %3282
  %3290 = icmp ugt i8 %3285, -113
  br i1 %3290, label %3291, label %3295

3291:                                             ; preds = %3289
  %3292 = add i32 %3280, 65280
  %3293 = load i32, i32* %2383, align 4
  %3294 = add i32 %3293, 1
  store i32 %3294, i32* %2383, align 4
  br label %3301

3295:                                             ; preds = %3289
  store i8* %3284, i8** %2382, align 8
  %3296 = shl nuw nsw i32 %3286, 9
  %3297 = add i32 %3296, %3280
  br label %3301

3298:                                             ; preds = %3282
  store i8* %3284, i8** %2382, align 8
  %3299 = shl nuw nsw i32 %3286, 8
  %3300 = add i32 %3299, %3280
  br label %3301

3301:                                             ; preds = %3298, %3295, %3291, %3277
  %3302 = phi i32 [ %3278, %3277 ], [ 8, %3291 ], [ 7, %3295 ], [ 8, %3298 ]
  %3303 = phi i32 [ %3280, %3277 ], [ %3292, %3291 ], [ %3297, %3295 ], [ %3300, %3298 ]
  %3304 = shl i32 %3279, 1
  %3305 = shl i32 %3303, 1
  %3306 = add i32 %3302, -1
  %3307 = icmp ult i32 %3304, 32768
  br i1 %3307, label %3277, label %3360

3308:                                             ; preds = %3249
  %3309 = shl i32 %3260, 16
  %3310 = sub i32 %3242, %3309
  %3311 = trunc i32 %3261 to i16
  %3312 = icmp sgt i16 %3311, -1
  br i1 %3312, label %3313, label %3357

3313:                                             ; preds = %3308
  %3314 = icmp ult i32 %3261, %3260
  %3315 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 1
  %3316 = load i32, i32* %3315, align 4
  %3317 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 2
  %3318 = icmp eq i32 %3316, 0
  %3319 = zext i1 %3318 to i32
  %3320 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 3
  %3321 = select i1 %3314, %struct.opj_mqc_state** %3320, %struct.opj_mqc_state** %3317
  %3322 = select i1 %3314, i32 %3319, i32 %3316
  %3323 = bitcast %struct.opj_mqc_state** %3321 to i64*
  %3324 = load i64, i64* %3323, align 8
  %3325 = bitcast %struct.opj_mqc_state** %3257 to i64*
  store i64 %3324, i64* %3325, align 8
  br label %3326

3326:                                             ; preds = %3350, %3313
  %3327 = phi i32 [ %3240, %3313 ], [ %3355, %3350 ]
  %3328 = phi i32 [ %3261, %3313 ], [ %3353, %3350 ]
  %3329 = phi i32 [ %3310, %3313 ], [ %3354, %3350 ]
  %3330 = icmp eq i32 %3327, 0
  br i1 %3330, label %3331, label %3350

3331:                                             ; preds = %3326
  %3332 = load i8*, i8** %2382, align 8
  %3333 = getelementptr inbounds i8, i8* %3332, i64 1
  %3334 = load i8, i8* %3333, align 1
  %3335 = zext i8 %3334 to i32
  %3336 = load i8, i8* %3332, align 1
  %3337 = icmp eq i8 %3336, -1
  br i1 %3337, label %3338, label %3347

3338:                                             ; preds = %3331
  %3339 = icmp ugt i8 %3334, -113
  br i1 %3339, label %3340, label %3344

3340:                                             ; preds = %3338
  %3341 = add i32 %3329, 65280
  %3342 = load i32, i32* %2383, align 4
  %3343 = add i32 %3342, 1
  store i32 %3343, i32* %2383, align 4
  br label %3350

3344:                                             ; preds = %3338
  store i8* %3333, i8** %2382, align 8
  %3345 = shl nuw nsw i32 %3335, 9
  %3346 = add i32 %3345, %3329
  br label %3350

3347:                                             ; preds = %3331
  store i8* %3333, i8** %2382, align 8
  %3348 = shl nuw nsw i32 %3335, 8
  %3349 = add i32 %3348, %3329
  br label %3350

3350:                                             ; preds = %3347, %3344, %3340, %3326
  %3351 = phi i32 [ %3327, %3326 ], [ 8, %3340 ], [ 7, %3344 ], [ 8, %3347 ]
  %3352 = phi i32 [ %3329, %3326 ], [ %3341, %3340 ], [ %3346, %3344 ], [ %3349, %3347 ]
  %3353 = shl i32 %3328, 1
  %3354 = shl i32 %3352, 1
  %3355 = add i32 %3351, -1
  %3356 = icmp ult i32 %3353, 32768
  br i1 %3356, label %3326, label %3360

3357:                                             ; preds = %3308
  %3358 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3258, i64 0, i32 1
  %3359 = load i32, i32* %3358, align 4
  br label %3360

3360:                                             ; preds = %3350, %3301, %3357
  %3361 = phi i32 [ %3359, %3357 ], [ %3273, %3301 ], [ %3322, %3350 ]
  %3362 = phi i32 [ %3240, %3357 ], [ %3306, %3301 ], [ %3355, %3350 ]
  %3363 = phi i32 [ %3261, %3357 ], [ %3304, %3301 ], [ %3353, %3350 ]
  %3364 = phi i32 [ %3310, %3357 ], [ %3305, %3301 ], [ %3354, %3350 ]
  %3365 = icmp eq i32 %3361, 0
  br i1 %3365, label %3524, label %3366

3366:                                             ; preds = %3360
  %3367 = getelementptr inbounds i32, i32* %2402, i64 -1
  %3368 = load i32, i32* %3367, align 4
  %3369 = getelementptr inbounds i32, i32* %2402, i64 1
  %3370 = load i32, i32* %3369, align 4
  %3371 = and i32 %3250, 170
  %3372 = lshr i32 %3368, 28
  %3373 = and i32 %3372, 1
  %3374 = lshr i32 %3370, 26
  %3375 = and i32 %3374, 4
  %3376 = lshr i32 %3239, 21
  %3377 = and i32 %3376, 16
  %3378 = lshr i32 %3239, 25
  %3379 = and i32 %3378, 64
  %3380 = or i32 %3379, %3371
  %3381 = or i32 %3380, %3377
  %3382 = or i32 %3381, %3373
  %3383 = or i32 %3382, %3375
  %3384 = zext i32 %3383 to i64
  %3385 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3384
  %3386 = load i8, i8* %3385, align 1
  %3387 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3384
  %3388 = load i8, i8* %3387, align 1
  %3389 = zext i8 %3388 to i32
  %3390 = zext i8 %3386 to i64
  %3391 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3390
  %3392 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3391, align 8
  %3393 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 0
  %3394 = load i32, i32* %3393, align 8
  %3395 = sub i32 %3363, %3394
  %3396 = lshr i32 %3364, 16
  %3397 = icmp ult i32 %3396, %3394
  br i1 %3397, label %3398, label %3442

3398:                                             ; preds = %3366
  %3399 = icmp ult i32 %3395, %3394
  %3400 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 1
  %3401 = load i32, i32* %3400, align 4
  %3402 = icmp eq i32 %3401, 0
  %3403 = zext i1 %3402 to i32
  %3404 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 3
  %3405 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 2
  %3406 = select i1 %3399, %struct.opj_mqc_state** %3405, %struct.opj_mqc_state** %3404
  %3407 = select i1 %3399, i32 %3401, i32 %3403
  %3408 = bitcast %struct.opj_mqc_state** %3406 to i64*
  %3409 = load i64, i64* %3408, align 8
  %3410 = bitcast %struct.opj_mqc_state** %3391 to i64*
  store i64 %3409, i64* %3410, align 8
  br label %3411

3411:                                             ; preds = %3435, %3398
  %3412 = phi i32 [ %3362, %3398 ], [ %3440, %3435 ]
  %3413 = phi i32 [ %3394, %3398 ], [ %3438, %3435 ]
  %3414 = phi i32 [ %3364, %3398 ], [ %3439, %3435 ]
  %3415 = icmp eq i32 %3412, 0
  br i1 %3415, label %3416, label %3435

3416:                                             ; preds = %3411
  %3417 = load i8*, i8** %2382, align 8
  %3418 = getelementptr inbounds i8, i8* %3417, i64 1
  %3419 = load i8, i8* %3418, align 1
  %3420 = zext i8 %3419 to i32
  %3421 = load i8, i8* %3417, align 1
  %3422 = icmp eq i8 %3421, -1
  br i1 %3422, label %3423, label %3432

3423:                                             ; preds = %3416
  %3424 = icmp ugt i8 %3419, -113
  br i1 %3424, label %3425, label %3429

3425:                                             ; preds = %3423
  %3426 = add i32 %3414, 65280
  %3427 = load i32, i32* %2383, align 4
  %3428 = add i32 %3427, 1
  store i32 %3428, i32* %2383, align 4
  br label %3435

3429:                                             ; preds = %3423
  store i8* %3418, i8** %2382, align 8
  %3430 = shl nuw nsw i32 %3420, 9
  %3431 = add i32 %3430, %3414
  br label %3435

3432:                                             ; preds = %3416
  store i8* %3418, i8** %2382, align 8
  %3433 = shl nuw nsw i32 %3420, 8
  %3434 = add i32 %3433, %3414
  br label %3435

3435:                                             ; preds = %3432, %3429, %3425, %3411
  %3436 = phi i32 [ %3412, %3411 ], [ 8, %3425 ], [ 7, %3429 ], [ 8, %3432 ]
  %3437 = phi i32 [ %3414, %3411 ], [ %3426, %3425 ], [ %3431, %3429 ], [ %3434, %3432 ]
  %3438 = shl i32 %3413, 1
  %3439 = shl i32 %3437, 1
  %3440 = add i32 %3436, -1
  %3441 = icmp ult i32 %3438, 32768
  br i1 %3441, label %3411, label %3494

3442:                                             ; preds = %3366
  %3443 = shl i32 %3394, 16
  %3444 = sub i32 %3364, %3443
  %3445 = trunc i32 %3395 to i16
  %3446 = icmp sgt i16 %3445, -1
  br i1 %3446, label %3447, label %3491

3447:                                             ; preds = %3442
  %3448 = icmp ult i32 %3395, %3394
  %3449 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 1
  %3450 = load i32, i32* %3449, align 4
  %3451 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 2
  %3452 = icmp eq i32 %3450, 0
  %3453 = zext i1 %3452 to i32
  %3454 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 3
  %3455 = select i1 %3448, %struct.opj_mqc_state** %3454, %struct.opj_mqc_state** %3451
  %3456 = select i1 %3448, i32 %3453, i32 %3450
  %3457 = bitcast %struct.opj_mqc_state** %3455 to i64*
  %3458 = load i64, i64* %3457, align 8
  %3459 = bitcast %struct.opj_mqc_state** %3391 to i64*
  store i64 %3458, i64* %3459, align 8
  br label %3460

3460:                                             ; preds = %3484, %3447
  %3461 = phi i32 [ %3362, %3447 ], [ %3489, %3484 ]
  %3462 = phi i32 [ %3395, %3447 ], [ %3487, %3484 ]
  %3463 = phi i32 [ %3444, %3447 ], [ %3488, %3484 ]
  %3464 = icmp eq i32 %3461, 0
  br i1 %3464, label %3465, label %3484

3465:                                             ; preds = %3460
  %3466 = load i8*, i8** %2382, align 8
  %3467 = getelementptr inbounds i8, i8* %3466, i64 1
  %3468 = load i8, i8* %3467, align 1
  %3469 = zext i8 %3468 to i32
  %3470 = load i8, i8* %3466, align 1
  %3471 = icmp eq i8 %3470, -1
  br i1 %3471, label %3472, label %3481

3472:                                             ; preds = %3465
  %3473 = icmp ugt i8 %3468, -113
  br i1 %3473, label %3474, label %3478

3474:                                             ; preds = %3472
  %3475 = add i32 %3463, 65280
  %3476 = load i32, i32* %2383, align 4
  %3477 = add i32 %3476, 1
  store i32 %3477, i32* %2383, align 4
  br label %3484

3478:                                             ; preds = %3472
  store i8* %3467, i8** %2382, align 8
  %3479 = shl nuw nsw i32 %3469, 9
  %3480 = add i32 %3479, %3463
  br label %3484

3481:                                             ; preds = %3465
  store i8* %3467, i8** %2382, align 8
  %3482 = shl nuw nsw i32 %3469, 8
  %3483 = add i32 %3482, %3463
  br label %3484

3484:                                             ; preds = %3481, %3478, %3474, %3460
  %3485 = phi i32 [ %3461, %3460 ], [ 8, %3474 ], [ 7, %3478 ], [ 8, %3481 ]
  %3486 = phi i32 [ %3463, %3460 ], [ %3475, %3474 ], [ %3480, %3478 ], [ %3483, %3481 ]
  %3487 = shl i32 %3462, 1
  %3488 = shl i32 %3486, 1
  %3489 = add i32 %3485, -1
  %3490 = icmp ult i32 %3487, 32768
  br i1 %3490, label %3460, label %3494

3491:                                             ; preds = %3442
  %3492 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3392, i64 0, i32 1
  %3493 = load i32, i32* %3492, align 4
  br label %3494

3494:                                             ; preds = %3484, %3435, %3491
  %3495 = phi i32 [ %3493, %3491 ], [ %3407, %3435 ], [ %3456, %3484 ]
  %3496 = phi i32 [ %3362, %3491 ], [ %3440, %3435 ], [ %3489, %3484 ]
  %3497 = phi i32 [ %3395, %3491 ], [ %3438, %3435 ], [ %3487, %3484 ]
  %3498 = phi i32 [ %3444, %3491 ], [ %3439, %3435 ], [ %3488, %3484 ]
  %3499 = xor i32 %3495, %3389
  %3500 = icmp eq i32 %3499, 0
  %3501 = select i1 %3500, i32 %2375, i32 %2384
  %3502 = getelementptr inbounds i32, i32* %2401, i64 %2389
  store i32 %3501, i32* %3502, align 4
  %3503 = load i32, i32* %3367, align 4
  %3504 = or i32 %3503, 16384
  store i32 %3504, i32* %3367, align 4
  %3505 = shl i32 %3499, 28
  %3506 = or i32 %3239, %3505
  %3507 = or i32 %3506, 8192
  %3508 = load i32, i32* %3369, align 4
  %3509 = or i32 %3508, 4096
  store i32 %3509, i32* %3369, align 4
  %3510 = load i32, i32* %4, align 8
  %3511 = add i32 %3510, 2
  %3512 = zext i32 %3511 to i64
  %3513 = getelementptr inbounds i32, i32* %2402, i64 %3512
  %3514 = shl i32 %3499, 18
  %3515 = load i32, i32* %3513, align 4
  %3516 = or i32 %3514, %3515
  %3517 = or i32 %3516, 2
  store i32 %3517, i32* %3513, align 4
  %3518 = getelementptr inbounds i32, i32* %3513, i64 -1
  %3519 = load i32, i32* %3518, align 4
  %3520 = or i32 %3519, 4
  store i32 %3520, i32* %3518, align 4
  %3521 = getelementptr inbounds i32, i32* %3513, i64 1
  %3522 = load i32, i32* %3521, align 4
  %3523 = or i32 %3522, 1
  store i32 %3523, i32* %3521, align 4
  br label %3524

3524:                                             ; preds = %3494, %3360
  %3525 = phi i32 [ %3507, %3494 ], [ %3239, %3360 ]
  %3526 = phi i32 [ %3496, %3494 ], [ %3362, %3360 ]
  %3527 = phi i32 [ %3497, %3494 ], [ %3363, %3360 ]
  %3528 = phi i32 [ %3498, %3494 ], [ %3364, %3360 ]
  %3529 = phi %struct.opj_mqc_state** [ %3391, %3494 ], [ %3257, %3360 ]
  %3530 = or i32 %3525, 1073741824
  br label %3531

3531:                                             ; preds = %3524, %3238
  %3532 = phi i32 [ %3530, %3524 ], [ %3239, %3238 ]
  %3533 = phi i32 [ %3526, %3524 ], [ %3240, %3238 ]
  %3534 = phi i32 [ %3527, %3524 ], [ %3241, %3238 ]
  %3535 = phi i32 [ %3528, %3524 ], [ %3242, %3238 ]
  %3536 = phi %struct.opj_mqc_state** [ %3529, %3524 ], [ %3243, %3238 ]
  store i32 %3532, i32* %2402, align 4
  br label %3537

3537:                                             ; preds = %3531, %2399
  %3538 = phi i32 [ %3533, %3531 ], [ %2406, %2399 ]
  %3539 = phi i32 [ %3534, %3531 ], [ %2405, %2399 ]
  %3540 = phi i32 [ %3535, %3531 ], [ %2404, %2399 ]
  %3541 = phi %struct.opj_mqc_state** [ %3536, %3531 ], [ %2403, %2399 ]
  %3542 = add nuw i32 %2400, 1
  %3543 = getelementptr inbounds i32, i32* %2401, i64 1
  %3544 = getelementptr inbounds i32, i32* %2402, i64 1
  %3545 = icmp eq i32 %3542, %5
  br i1 %3545, label %3546, label %2399

3546:                                             ; preds = %3537
  %3547 = load i32, i32* %2376, align 4
  br label %3548

3548:                                             ; preds = %3546, %2390
  %3549 = phi i32 [ %2391, %2390 ], [ %3547, %3546 ]
  %3550 = phi i32 [ %2398, %2390 ], [ %3538, %3546 ]
  %3551 = phi i32 [ %2397, %2390 ], [ %3539, %3546 ]
  %3552 = phi i32 [ %2396, %2390 ], [ %3540, %3546 ]
  %3553 = phi %struct.opj_mqc_state** [ %2395, %2390 ], [ %3541, %3546 ]
  %3554 = phi i32* [ %2394, %2390 ], [ %3544, %3546 ]
  %3555 = phi i32* [ %2393, %2390 ], [ %3543, %3546 ]
  %3556 = add nuw i32 %2392, 4
  %3557 = getelementptr inbounds i32, i32* %3555, i64 %2389
  %3558 = getelementptr inbounds i32, i32* %3554, i64 2
  %3559 = and i32 %3549, -4
  %3560 = icmp ult i32 %3556, %3559
  br i1 %3560, label %2390, label %3561

3561:                                             ; preds = %3548, %2378
  %3562 = phi i32 [ %2372, %2378 ], [ %3550, %3548 ]
  %3563 = phi i32 [ %2370, %2378 ], [ %3551, %3548 ]
  %3564 = phi i32 [ %2368, %2378 ], [ %3552, %3548 ]
  %3565 = phi %struct.opj_mqc_state** [ %2366, %2378 ], [ %3553, %3548 ]
  %3566 = phi i32* [ %2364, %2378 ], [ %3558, %3548 ]
  %3567 = phi i32* [ %14, %2378 ], [ %3557, %3548 ]
  %3568 = phi i32 [ 0, %2378 ], [ %3556, %3548 ]
  %3569 = phi i32 [ %8, %2378 ], [ %3549, %3548 ]
  store %struct.opj_mqc_state** %3565, %struct.opj_mqc_state*** %2365, align 8
  store i32 %3564, i32* %2367, align 8
  store i32 %3563, i32* %2369, align 4
  store i32 %3562, i32* %2371, align 8
  %3570 = icmp ult i32 %3568, %3569
  %3571 = icmp ne i32 %5, 0
  %3572 = and i1 %3571, %3570
  br i1 %3572, label %3573, label %4833

3573:                                             ; preds = %3561, %3592
  %3574 = phi i32 [ %3593, %3592 ], [ %3569, %3561 ]
  %3575 = phi i32 [ %3594, %3592 ], [ 0, %3561 ]
  %3576 = phi i32* [ %3595, %3592 ], [ %3567, %3561 ]
  %3577 = phi i32* [ %3596, %3592 ], [ %3566, %3561 ]
  %3578 = icmp eq i32 %3574, %3568
  br i1 %3578, label %3592, label %3579

3579:                                             ; preds = %3573, %3579
  %3580 = phi i64 [ %3587, %3579 ], [ 0, %3573 ]
  %3581 = trunc i64 %3580 to i32
  %3582 = mul i32 %5, %3581
  %3583 = zext i32 %3582 to i64
  %3584 = getelementptr inbounds i32, i32* %3576, i64 %3583
  %3585 = load i32, i32* %4, align 8
  %3586 = add i32 %3585, 2
  tail call fastcc void @opj_t1_dec_sigpass_step_mqc(%struct.opj_t1* %0, i32* %3577, i32* %3584, i32 %2375, i32 %3581, i32 %3586, i32 1) #7
  %3587 = add nuw nsw i64 %3580, 1
  %3588 = load i32, i32* %2376, align 4
  %3589 = sub i32 %3588, %3568
  %3590 = zext i32 %3589 to i64
  %3591 = icmp ult i64 %3587, %3590
  br i1 %3591, label %3579, label %3592

3592:                                             ; preds = %3579, %3573
  %3593 = phi i32 [ %3568, %3573 ], [ %3588, %3579 ]
  %3594 = add nuw i32 %3575, 1
  %3595 = getelementptr inbounds i32, i32* %3576, i64 1
  %3596 = getelementptr inbounds i32, i32* %3577, i64 1
  %3597 = icmp eq i32 %3594, %5
  br i1 %3597, label %4833, label %3573

3598:                                             ; preds = %2361
  br i1 %2377, label %3599, label %4796

3599:                                             ; preds = %3598
  %3600 = icmp eq i32 %5, 0
  %3601 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %3602 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %3603 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %3604 = sub nsw i32 0, %2375
  %3605 = zext i32 %5 to i64
  %3606 = shl i32 %5, 1
  %3607 = zext i32 %3606 to i64
  %3608 = mul i32 %5, 3
  %3609 = zext i32 %3608 to i64
  br label %3610

3610:                                             ; preds = %4783, %3599
  %3611 = phi i32 [ %8, %3599 ], [ %4784, %4783 ]
  %3612 = phi i32 [ 0, %3599 ], [ %4791, %4783 ]
  %3613 = phi i32* [ %14, %3599 ], [ %4792, %4783 ]
  %3614 = phi i32* [ %2364, %3599 ], [ %4793, %4783 ]
  %3615 = phi %struct.opj_mqc_state** [ %2366, %3599 ], [ %4788, %4783 ]
  %3616 = phi i32 [ %2368, %3599 ], [ %4787, %4783 ]
  %3617 = phi i32 [ %2370, %3599 ], [ %4786, %4783 ]
  %3618 = phi i32 [ %2372, %3599 ], [ %4785, %4783 ]
  br i1 %3600, label %4783, label %3619

3619:                                             ; preds = %3610, %4772
  %3620 = phi i32 [ %4777, %4772 ], [ 0, %3610 ]
  %3621 = phi i32* [ %4778, %4772 ], [ %3613, %3610 ]
  %3622 = phi i32* [ %4779, %4772 ], [ %3614, %3610 ]
  %3623 = phi %struct.opj_mqc_state** [ %4776, %4772 ], [ %3615, %3610 ]
  %3624 = phi i32 [ %4775, %4772 ], [ %3616, %3610 ]
  %3625 = phi i32 [ %4774, %4772 ], [ %3617, %3610 ]
  %3626 = phi i32 [ %4773, %4772 ], [ %3618, %3610 ]
  %3627 = load i32, i32* %3622, align 4
  %3628 = icmp eq i32 %3627, 0
  br i1 %3628, label %4772, label %3629

3629:                                             ; preds = %3619
  %3630 = and i32 %3627, 2097168
  %3631 = icmp ne i32 %3630, 0
  %3632 = and i32 %3627, 495
  %3633 = icmp eq i32 %3632, 0
  %3634 = or i1 %3631, %3633
  br i1 %3634, label %3915, label %3635

3635:                                             ; preds = %3629
  %3636 = load i8*, i8** %3601, align 8
  %3637 = zext i32 %3632 to i64
  %3638 = getelementptr inbounds i8, i8* %3636, i64 %3637
  %3639 = load i8, i8* %3638, align 1
  %3640 = zext i8 %3639 to i64
  %3641 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3640
  %3642 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3641, align 8
  %3643 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 0
  %3644 = load i32, i32* %3643, align 8
  %3645 = sub i32 %3625, %3644
  %3646 = lshr i32 %3624, 16
  %3647 = icmp ult i32 %3646, %3644
  br i1 %3647, label %3648, label %3692

3648:                                             ; preds = %3635
  %3649 = icmp ult i32 %3645, %3644
  %3650 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 1
  %3651 = load i32, i32* %3650, align 4
  %3652 = icmp eq i32 %3651, 0
  %3653 = zext i1 %3652 to i32
  %3654 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 3
  %3655 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 2
  %3656 = select i1 %3649, %struct.opj_mqc_state** %3655, %struct.opj_mqc_state** %3654
  %3657 = select i1 %3649, i32 %3651, i32 %3653
  %3658 = bitcast %struct.opj_mqc_state** %3656 to i64*
  %3659 = load i64, i64* %3658, align 8
  %3660 = bitcast %struct.opj_mqc_state** %3641 to i64*
  store i64 %3659, i64* %3660, align 8
  br label %3661

3661:                                             ; preds = %3685, %3648
  %3662 = phi i32 [ %3626, %3648 ], [ %3690, %3685 ]
  %3663 = phi i32 [ %3644, %3648 ], [ %3688, %3685 ]
  %3664 = phi i32 [ %3624, %3648 ], [ %3689, %3685 ]
  %3665 = icmp eq i32 %3662, 0
  br i1 %3665, label %3666, label %3685

3666:                                             ; preds = %3661
  %3667 = load i8*, i8** %3602, align 8
  %3668 = getelementptr inbounds i8, i8* %3667, i64 1
  %3669 = load i8, i8* %3668, align 1
  %3670 = zext i8 %3669 to i32
  %3671 = load i8, i8* %3667, align 1
  %3672 = icmp eq i8 %3671, -1
  br i1 %3672, label %3673, label %3682

3673:                                             ; preds = %3666
  %3674 = icmp ugt i8 %3669, -113
  br i1 %3674, label %3675, label %3679

3675:                                             ; preds = %3673
  %3676 = add i32 %3664, 65280
  %3677 = load i32, i32* %3603, align 4
  %3678 = add i32 %3677, 1
  store i32 %3678, i32* %3603, align 4
  br label %3685

3679:                                             ; preds = %3673
  store i8* %3668, i8** %3602, align 8
  %3680 = shl nuw nsw i32 %3670, 9
  %3681 = add i32 %3680, %3664
  br label %3685

3682:                                             ; preds = %3666
  store i8* %3668, i8** %3602, align 8
  %3683 = shl nuw nsw i32 %3670, 8
  %3684 = add i32 %3683, %3664
  br label %3685

3685:                                             ; preds = %3682, %3679, %3675, %3661
  %3686 = phi i32 [ %3662, %3661 ], [ 8, %3675 ], [ 7, %3679 ], [ 8, %3682 ]
  %3687 = phi i32 [ %3664, %3661 ], [ %3676, %3675 ], [ %3681, %3679 ], [ %3684, %3682 ]
  %3688 = shl i32 %3663, 1
  %3689 = shl i32 %3687, 1
  %3690 = add i32 %3686, -1
  %3691 = icmp ult i32 %3688, 32768
  br i1 %3691, label %3661, label %3744

3692:                                             ; preds = %3635
  %3693 = shl i32 %3644, 16
  %3694 = sub i32 %3624, %3693
  %3695 = trunc i32 %3645 to i16
  %3696 = icmp sgt i16 %3695, -1
  br i1 %3696, label %3697, label %3741

3697:                                             ; preds = %3692
  %3698 = icmp ult i32 %3645, %3644
  %3699 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 1
  %3700 = load i32, i32* %3699, align 4
  %3701 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 2
  %3702 = icmp eq i32 %3700, 0
  %3703 = zext i1 %3702 to i32
  %3704 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 3
  %3705 = select i1 %3698, %struct.opj_mqc_state** %3704, %struct.opj_mqc_state** %3701
  %3706 = select i1 %3698, i32 %3703, i32 %3700
  %3707 = bitcast %struct.opj_mqc_state** %3705 to i64*
  %3708 = load i64, i64* %3707, align 8
  %3709 = bitcast %struct.opj_mqc_state** %3641 to i64*
  store i64 %3708, i64* %3709, align 8
  br label %3710

3710:                                             ; preds = %3734, %3697
  %3711 = phi i32 [ %3626, %3697 ], [ %3739, %3734 ]
  %3712 = phi i32 [ %3645, %3697 ], [ %3737, %3734 ]
  %3713 = phi i32 [ %3694, %3697 ], [ %3738, %3734 ]
  %3714 = icmp eq i32 %3711, 0
  br i1 %3714, label %3715, label %3734

3715:                                             ; preds = %3710
  %3716 = load i8*, i8** %3602, align 8
  %3717 = getelementptr inbounds i8, i8* %3716, i64 1
  %3718 = load i8, i8* %3717, align 1
  %3719 = zext i8 %3718 to i32
  %3720 = load i8, i8* %3716, align 1
  %3721 = icmp eq i8 %3720, -1
  br i1 %3721, label %3722, label %3731

3722:                                             ; preds = %3715
  %3723 = icmp ugt i8 %3718, -113
  br i1 %3723, label %3724, label %3728

3724:                                             ; preds = %3722
  %3725 = add i32 %3713, 65280
  %3726 = load i32, i32* %3603, align 4
  %3727 = add i32 %3726, 1
  store i32 %3727, i32* %3603, align 4
  br label %3734

3728:                                             ; preds = %3722
  store i8* %3717, i8** %3602, align 8
  %3729 = shl nuw nsw i32 %3719, 9
  %3730 = add i32 %3729, %3713
  br label %3734

3731:                                             ; preds = %3715
  store i8* %3717, i8** %3602, align 8
  %3732 = shl nuw nsw i32 %3719, 8
  %3733 = add i32 %3732, %3713
  br label %3734

3734:                                             ; preds = %3731, %3728, %3724, %3710
  %3735 = phi i32 [ %3711, %3710 ], [ 8, %3724 ], [ 7, %3728 ], [ 8, %3731 ]
  %3736 = phi i32 [ %3713, %3710 ], [ %3725, %3724 ], [ %3730, %3728 ], [ %3733, %3731 ]
  %3737 = shl i32 %3712, 1
  %3738 = shl i32 %3736, 1
  %3739 = add i32 %3735, -1
  %3740 = icmp ult i32 %3737, 32768
  br i1 %3740, label %3710, label %3744

3741:                                             ; preds = %3692
  %3742 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3642, i64 0, i32 1
  %3743 = load i32, i32* %3742, align 4
  br label %3744

3744:                                             ; preds = %3734, %3685, %3741
  %3745 = phi i32 [ %3743, %3741 ], [ %3657, %3685 ], [ %3706, %3734 ]
  %3746 = phi i32 [ %3626, %3741 ], [ %3690, %3685 ], [ %3739, %3734 ]
  %3747 = phi i32 [ %3645, %3741 ], [ %3688, %3685 ], [ %3737, %3734 ]
  %3748 = phi i32 [ %3694, %3741 ], [ %3689, %3685 ], [ %3738, %3734 ]
  %3749 = icmp eq i32 %3745, 0
  br i1 %3749, label %3908, label %3750

3750:                                             ; preds = %3744
  %3751 = getelementptr inbounds i32, i32* %3622, i64 -1
  %3752 = load i32, i32* %3751, align 4
  %3753 = getelementptr inbounds i32, i32* %3622, i64 1
  %3754 = load i32, i32* %3753, align 4
  %3755 = and i32 %3627, 170
  %3756 = lshr i32 %3752, 19
  %3757 = and i32 %3756, 1
  %3758 = lshr i32 %3754, 17
  %3759 = and i32 %3758, 4
  %3760 = lshr i32 %3627, 14
  %3761 = and i32 %3760, 16
  %3762 = lshr i32 %3627, 16
  %3763 = and i32 %3762, 64
  %3764 = or i32 %3763, %3755
  %3765 = or i32 %3764, %3761
  %3766 = or i32 %3765, %3757
  %3767 = or i32 %3766, %3759
  %3768 = zext i32 %3767 to i64
  %3769 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3768
  %3770 = load i8, i8* %3769, align 1
  %3771 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3768
  %3772 = load i8, i8* %3771, align 1
  %3773 = zext i8 %3772 to i32
  %3774 = zext i8 %3770 to i64
  %3775 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3774
  %3776 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3775, align 8
  %3777 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 0
  %3778 = load i32, i32* %3777, align 8
  %3779 = sub i32 %3747, %3778
  %3780 = lshr i32 %3748, 16
  %3781 = icmp ult i32 %3780, %3778
  br i1 %3781, label %3782, label %3826

3782:                                             ; preds = %3750
  %3783 = icmp ult i32 %3779, %3778
  %3784 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 1
  %3785 = load i32, i32* %3784, align 4
  %3786 = icmp eq i32 %3785, 0
  %3787 = zext i1 %3786 to i32
  %3788 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 3
  %3789 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 2
  %3790 = select i1 %3783, %struct.opj_mqc_state** %3789, %struct.opj_mqc_state** %3788
  %3791 = select i1 %3783, i32 %3785, i32 %3787
  %3792 = bitcast %struct.opj_mqc_state** %3790 to i64*
  %3793 = load i64, i64* %3792, align 8
  %3794 = bitcast %struct.opj_mqc_state** %3775 to i64*
  store i64 %3793, i64* %3794, align 8
  br label %3795

3795:                                             ; preds = %3819, %3782
  %3796 = phi i32 [ %3746, %3782 ], [ %3824, %3819 ]
  %3797 = phi i32 [ %3778, %3782 ], [ %3822, %3819 ]
  %3798 = phi i32 [ %3748, %3782 ], [ %3823, %3819 ]
  %3799 = icmp eq i32 %3796, 0
  br i1 %3799, label %3800, label %3819

3800:                                             ; preds = %3795
  %3801 = load i8*, i8** %3602, align 8
  %3802 = getelementptr inbounds i8, i8* %3801, i64 1
  %3803 = load i8, i8* %3802, align 1
  %3804 = zext i8 %3803 to i32
  %3805 = load i8, i8* %3801, align 1
  %3806 = icmp eq i8 %3805, -1
  br i1 %3806, label %3807, label %3816

3807:                                             ; preds = %3800
  %3808 = icmp ugt i8 %3803, -113
  br i1 %3808, label %3809, label %3813

3809:                                             ; preds = %3807
  %3810 = add i32 %3798, 65280
  %3811 = load i32, i32* %3603, align 4
  %3812 = add i32 %3811, 1
  store i32 %3812, i32* %3603, align 4
  br label %3819

3813:                                             ; preds = %3807
  store i8* %3802, i8** %3602, align 8
  %3814 = shl nuw nsw i32 %3804, 9
  %3815 = add i32 %3814, %3798
  br label %3819

3816:                                             ; preds = %3800
  store i8* %3802, i8** %3602, align 8
  %3817 = shl nuw nsw i32 %3804, 8
  %3818 = add i32 %3817, %3798
  br label %3819

3819:                                             ; preds = %3816, %3813, %3809, %3795
  %3820 = phi i32 [ %3796, %3795 ], [ 8, %3809 ], [ 7, %3813 ], [ 8, %3816 ]
  %3821 = phi i32 [ %3798, %3795 ], [ %3810, %3809 ], [ %3815, %3813 ], [ %3818, %3816 ]
  %3822 = shl i32 %3797, 1
  %3823 = shl i32 %3821, 1
  %3824 = add i32 %3820, -1
  %3825 = icmp ult i32 %3822, 32768
  br i1 %3825, label %3795, label %3878

3826:                                             ; preds = %3750
  %3827 = shl i32 %3778, 16
  %3828 = sub i32 %3748, %3827
  %3829 = trunc i32 %3779 to i16
  %3830 = icmp sgt i16 %3829, -1
  br i1 %3830, label %3831, label %3875

3831:                                             ; preds = %3826
  %3832 = icmp ult i32 %3779, %3778
  %3833 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 1
  %3834 = load i32, i32* %3833, align 4
  %3835 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 2
  %3836 = icmp eq i32 %3834, 0
  %3837 = zext i1 %3836 to i32
  %3838 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 3
  %3839 = select i1 %3832, %struct.opj_mqc_state** %3838, %struct.opj_mqc_state** %3835
  %3840 = select i1 %3832, i32 %3837, i32 %3834
  %3841 = bitcast %struct.opj_mqc_state** %3839 to i64*
  %3842 = load i64, i64* %3841, align 8
  %3843 = bitcast %struct.opj_mqc_state** %3775 to i64*
  store i64 %3842, i64* %3843, align 8
  br label %3844

3844:                                             ; preds = %3868, %3831
  %3845 = phi i32 [ %3746, %3831 ], [ %3873, %3868 ]
  %3846 = phi i32 [ %3779, %3831 ], [ %3871, %3868 ]
  %3847 = phi i32 [ %3828, %3831 ], [ %3872, %3868 ]
  %3848 = icmp eq i32 %3845, 0
  br i1 %3848, label %3849, label %3868

3849:                                             ; preds = %3844
  %3850 = load i8*, i8** %3602, align 8
  %3851 = getelementptr inbounds i8, i8* %3850, i64 1
  %3852 = load i8, i8* %3851, align 1
  %3853 = zext i8 %3852 to i32
  %3854 = load i8, i8* %3850, align 1
  %3855 = icmp eq i8 %3854, -1
  br i1 %3855, label %3856, label %3865

3856:                                             ; preds = %3849
  %3857 = icmp ugt i8 %3852, -113
  br i1 %3857, label %3858, label %3862

3858:                                             ; preds = %3856
  %3859 = add i32 %3847, 65280
  %3860 = load i32, i32* %3603, align 4
  %3861 = add i32 %3860, 1
  store i32 %3861, i32* %3603, align 4
  br label %3868

3862:                                             ; preds = %3856
  store i8* %3851, i8** %3602, align 8
  %3863 = shl nuw nsw i32 %3853, 9
  %3864 = add i32 %3863, %3847
  br label %3868

3865:                                             ; preds = %3849
  store i8* %3851, i8** %3602, align 8
  %3866 = shl nuw nsw i32 %3853, 8
  %3867 = add i32 %3866, %3847
  br label %3868

3868:                                             ; preds = %3865, %3862, %3858, %3844
  %3869 = phi i32 [ %3845, %3844 ], [ 8, %3858 ], [ 7, %3862 ], [ 8, %3865 ]
  %3870 = phi i32 [ %3847, %3844 ], [ %3859, %3858 ], [ %3864, %3862 ], [ %3867, %3865 ]
  %3871 = shl i32 %3846, 1
  %3872 = shl i32 %3870, 1
  %3873 = add i32 %3869, -1
  %3874 = icmp ult i32 %3871, 32768
  br i1 %3874, label %3844, label %3878

3875:                                             ; preds = %3826
  %3876 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3776, i64 0, i32 1
  %3877 = load i32, i32* %3876, align 4
  br label %3878

3878:                                             ; preds = %3868, %3819, %3875
  %3879 = phi i32 [ %3877, %3875 ], [ %3791, %3819 ], [ %3840, %3868 ]
  %3880 = phi i32 [ %3746, %3875 ], [ %3824, %3819 ], [ %3873, %3868 ]
  %3881 = phi i32 [ %3779, %3875 ], [ %3822, %3819 ], [ %3871, %3868 ]
  %3882 = phi i32 [ %3828, %3875 ], [ %3823, %3819 ], [ %3872, %3868 ]
  %3883 = xor i32 %3879, %3773
  %3884 = icmp eq i32 %3883, 0
  %3885 = select i1 %3884, i32 %2375, i32 %3604
  store i32 %3885, i32* %3621, align 4
  %3886 = load i32, i32* %3751, align 4
  %3887 = or i32 %3886, 32
  store i32 %3887, i32* %3751, align 4
  %3888 = shl i32 %3883, 19
  %3889 = or i32 %3627, %3888
  %3890 = or i32 %3889, 16
  %3891 = load i32, i32* %3753, align 4
  %3892 = or i32 %3891, 8
  store i32 %3892, i32* %3753, align 4
  %3893 = load i32, i32* %4, align 8
  %3894 = add i32 %3893, 2
  %3895 = zext i32 %3894 to i64
  %3896 = sub nsw i64 0, %3895
  %3897 = getelementptr inbounds i32, i32* %3622, i64 %3896
  %3898 = shl i32 %3883, 31
  %3899 = load i32, i32* %3897, align 4
  %3900 = or i32 %3898, %3899
  %3901 = or i32 %3900, 65536
  store i32 %3901, i32* %3897, align 4
  %3902 = getelementptr inbounds i32, i32* %3897, i64 -1
  %3903 = load i32, i32* %3902, align 4
  %3904 = or i32 %3903, 131072
  store i32 %3904, i32* %3902, align 4
  %3905 = getelementptr inbounds i32, i32* %3897, i64 1
  %3906 = load i32, i32* %3905, align 4
  %3907 = or i32 %3906, 32768
  store i32 %3907, i32* %3905, align 4
  br label %3908

3908:                                             ; preds = %3878, %3744
  %3909 = phi i32 [ %3890, %3878 ], [ %3627, %3744 ]
  %3910 = phi i32 [ %3880, %3878 ], [ %3746, %3744 ]
  %3911 = phi i32 [ %3881, %3878 ], [ %3747, %3744 ]
  %3912 = phi i32 [ %3882, %3878 ], [ %3748, %3744 ]
  %3913 = phi %struct.opj_mqc_state** [ %3775, %3878 ], [ %3641, %3744 ]
  %3914 = or i32 %3909, 2097152
  br label %3915

3915:                                             ; preds = %3908, %3629
  %3916 = phi i32 [ %3914, %3908 ], [ %3627, %3629 ]
  %3917 = phi i32 [ %3910, %3908 ], [ %3626, %3629 ]
  %3918 = phi i32 [ %3911, %3908 ], [ %3625, %3629 ]
  %3919 = phi i32 [ %3912, %3908 ], [ %3624, %3629 ]
  %3920 = phi %struct.opj_mqc_state** [ %3913, %3908 ], [ %3623, %3629 ]
  %3921 = and i32 %3916, 16777344
  %3922 = icmp ne i32 %3921, 0
  %3923 = and i32 %3916, 3960
  %3924 = icmp eq i32 %3923, 0
  %3925 = or i1 %3922, %3924
  br i1 %3925, label %4194, label %3926

3926:                                             ; preds = %3915
  %3927 = lshr i32 %3916, 3
  %3928 = load i8*, i8** %3601, align 8
  %3929 = and i32 %3927, 495
  %3930 = zext i32 %3929 to i64
  %3931 = getelementptr inbounds i8, i8* %3928, i64 %3930
  %3932 = load i8, i8* %3931, align 1
  %3933 = zext i8 %3932 to i64
  %3934 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3933
  %3935 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3934, align 8
  %3936 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 0
  %3937 = load i32, i32* %3936, align 8
  %3938 = sub i32 %3918, %3937
  %3939 = lshr i32 %3919, 16
  %3940 = icmp ult i32 %3939, %3937
  br i1 %3940, label %3941, label %3985

3941:                                             ; preds = %3926
  %3942 = icmp ult i32 %3938, %3937
  %3943 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 1
  %3944 = load i32, i32* %3943, align 4
  %3945 = icmp eq i32 %3944, 0
  %3946 = zext i1 %3945 to i32
  %3947 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 3
  %3948 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 2
  %3949 = select i1 %3942, %struct.opj_mqc_state** %3948, %struct.opj_mqc_state** %3947
  %3950 = select i1 %3942, i32 %3944, i32 %3946
  %3951 = bitcast %struct.opj_mqc_state** %3949 to i64*
  %3952 = load i64, i64* %3951, align 8
  %3953 = bitcast %struct.opj_mqc_state** %3934 to i64*
  store i64 %3952, i64* %3953, align 8
  br label %3954

3954:                                             ; preds = %3978, %3941
  %3955 = phi i32 [ %3917, %3941 ], [ %3983, %3978 ]
  %3956 = phi i32 [ %3937, %3941 ], [ %3981, %3978 ]
  %3957 = phi i32 [ %3919, %3941 ], [ %3982, %3978 ]
  %3958 = icmp eq i32 %3955, 0
  br i1 %3958, label %3959, label %3978

3959:                                             ; preds = %3954
  %3960 = load i8*, i8** %3602, align 8
  %3961 = getelementptr inbounds i8, i8* %3960, i64 1
  %3962 = load i8, i8* %3961, align 1
  %3963 = zext i8 %3962 to i32
  %3964 = load i8, i8* %3960, align 1
  %3965 = icmp eq i8 %3964, -1
  br i1 %3965, label %3966, label %3975

3966:                                             ; preds = %3959
  %3967 = icmp ugt i8 %3962, -113
  br i1 %3967, label %3968, label %3972

3968:                                             ; preds = %3966
  %3969 = add i32 %3957, 65280
  %3970 = load i32, i32* %3603, align 4
  %3971 = add i32 %3970, 1
  store i32 %3971, i32* %3603, align 4
  br label %3978

3972:                                             ; preds = %3966
  store i8* %3961, i8** %3602, align 8
  %3973 = shl nuw nsw i32 %3963, 9
  %3974 = add i32 %3973, %3957
  br label %3978

3975:                                             ; preds = %3959
  store i8* %3961, i8** %3602, align 8
  %3976 = shl nuw nsw i32 %3963, 8
  %3977 = add i32 %3976, %3957
  br label %3978

3978:                                             ; preds = %3975, %3972, %3968, %3954
  %3979 = phi i32 [ %3955, %3954 ], [ 8, %3968 ], [ 7, %3972 ], [ 8, %3975 ]
  %3980 = phi i32 [ %3957, %3954 ], [ %3969, %3968 ], [ %3974, %3972 ], [ %3977, %3975 ]
  %3981 = shl i32 %3956, 1
  %3982 = shl i32 %3980, 1
  %3983 = add i32 %3979, -1
  %3984 = icmp ult i32 %3981, 32768
  br i1 %3984, label %3954, label %4037

3985:                                             ; preds = %3926
  %3986 = shl i32 %3937, 16
  %3987 = sub i32 %3919, %3986
  %3988 = trunc i32 %3938 to i16
  %3989 = icmp sgt i16 %3988, -1
  br i1 %3989, label %3990, label %4034

3990:                                             ; preds = %3985
  %3991 = icmp ult i32 %3938, %3937
  %3992 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 1
  %3993 = load i32, i32* %3992, align 4
  %3994 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 2
  %3995 = icmp eq i32 %3993, 0
  %3996 = zext i1 %3995 to i32
  %3997 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 3
  %3998 = select i1 %3991, %struct.opj_mqc_state** %3997, %struct.opj_mqc_state** %3994
  %3999 = select i1 %3991, i32 %3996, i32 %3993
  %4000 = bitcast %struct.opj_mqc_state** %3998 to i64*
  %4001 = load i64, i64* %4000, align 8
  %4002 = bitcast %struct.opj_mqc_state** %3934 to i64*
  store i64 %4001, i64* %4002, align 8
  br label %4003

4003:                                             ; preds = %4027, %3990
  %4004 = phi i32 [ %3917, %3990 ], [ %4032, %4027 ]
  %4005 = phi i32 [ %3938, %3990 ], [ %4030, %4027 ]
  %4006 = phi i32 [ %3987, %3990 ], [ %4031, %4027 ]
  %4007 = icmp eq i32 %4004, 0
  br i1 %4007, label %4008, label %4027

4008:                                             ; preds = %4003
  %4009 = load i8*, i8** %3602, align 8
  %4010 = getelementptr inbounds i8, i8* %4009, i64 1
  %4011 = load i8, i8* %4010, align 1
  %4012 = zext i8 %4011 to i32
  %4013 = load i8, i8* %4009, align 1
  %4014 = icmp eq i8 %4013, -1
  br i1 %4014, label %4015, label %4024

4015:                                             ; preds = %4008
  %4016 = icmp ugt i8 %4011, -113
  br i1 %4016, label %4017, label %4021

4017:                                             ; preds = %4015
  %4018 = add i32 %4006, 65280
  %4019 = load i32, i32* %3603, align 4
  %4020 = add i32 %4019, 1
  store i32 %4020, i32* %3603, align 4
  br label %4027

4021:                                             ; preds = %4015
  store i8* %4010, i8** %3602, align 8
  %4022 = shl nuw nsw i32 %4012, 9
  %4023 = add i32 %4022, %4006
  br label %4027

4024:                                             ; preds = %4008
  store i8* %4010, i8** %3602, align 8
  %4025 = shl nuw nsw i32 %4012, 8
  %4026 = add i32 %4025, %4006
  br label %4027

4027:                                             ; preds = %4024, %4021, %4017, %4003
  %4028 = phi i32 [ %4004, %4003 ], [ 8, %4017 ], [ 7, %4021 ], [ 8, %4024 ]
  %4029 = phi i32 [ %4006, %4003 ], [ %4018, %4017 ], [ %4023, %4021 ], [ %4026, %4024 ]
  %4030 = shl i32 %4005, 1
  %4031 = shl i32 %4029, 1
  %4032 = add i32 %4028, -1
  %4033 = icmp ult i32 %4030, 32768
  br i1 %4033, label %4003, label %4037

4034:                                             ; preds = %3985
  %4035 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3935, i64 0, i32 1
  %4036 = load i32, i32* %4035, align 4
  br label %4037

4037:                                             ; preds = %4027, %3978, %4034
  %4038 = phi i32 [ %4036, %4034 ], [ %3950, %3978 ], [ %3999, %4027 ]
  %4039 = phi i32 [ %3917, %4034 ], [ %3983, %3978 ], [ %4032, %4027 ]
  %4040 = phi i32 [ %3938, %4034 ], [ %3981, %3978 ], [ %4030, %4027 ]
  %4041 = phi i32 [ %3987, %4034 ], [ %3982, %3978 ], [ %4031, %4027 ]
  %4042 = icmp eq i32 %4038, 0
  br i1 %4042, label %4187, label %4043

4043:                                             ; preds = %4037
  %4044 = getelementptr inbounds i32, i32* %3622, i64 -1
  %4045 = load i32, i32* %4044, align 4
  %4046 = getelementptr inbounds i32, i32* %3622, i64 1
  %4047 = load i32, i32* %4046, align 4
  %4048 = and i32 %3927, 170
  %4049 = lshr i32 %4045, 22
  %4050 = and i32 %4049, 1
  %4051 = lshr i32 %4047, 20
  %4052 = and i32 %4051, 4
  %4053 = lshr i32 %3916, 15
  %4054 = and i32 %4053, 16
  %4055 = lshr i32 %3916, 19
  %4056 = and i32 %4055, 64
  %4057 = or i32 %4056, %4048
  %4058 = or i32 %4057, %4054
  %4059 = or i32 %4058, %4050
  %4060 = or i32 %4059, %4052
  %4061 = zext i32 %4060 to i64
  %4062 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %4061
  %4063 = load i8, i8* %4062, align 1
  %4064 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %4061
  %4065 = load i8, i8* %4064, align 1
  %4066 = zext i8 %4065 to i32
  %4067 = zext i8 %4063 to i64
  %4068 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4067
  %4069 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4068, align 8
  %4070 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 0
  %4071 = load i32, i32* %4070, align 8
  %4072 = sub i32 %4040, %4071
  %4073 = lshr i32 %4041, 16
  %4074 = icmp ult i32 %4073, %4071
  br i1 %4074, label %4075, label %4119

4075:                                             ; preds = %4043
  %4076 = icmp ult i32 %4072, %4071
  %4077 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 1
  %4078 = load i32, i32* %4077, align 4
  %4079 = icmp eq i32 %4078, 0
  %4080 = zext i1 %4079 to i32
  %4081 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 3
  %4082 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 2
  %4083 = select i1 %4076, %struct.opj_mqc_state** %4082, %struct.opj_mqc_state** %4081
  %4084 = select i1 %4076, i32 %4078, i32 %4080
  %4085 = bitcast %struct.opj_mqc_state** %4083 to i64*
  %4086 = load i64, i64* %4085, align 8
  %4087 = bitcast %struct.opj_mqc_state** %4068 to i64*
  store i64 %4086, i64* %4087, align 8
  br label %4088

4088:                                             ; preds = %4112, %4075
  %4089 = phi i32 [ %4039, %4075 ], [ %4117, %4112 ]
  %4090 = phi i32 [ %4071, %4075 ], [ %4115, %4112 ]
  %4091 = phi i32 [ %4041, %4075 ], [ %4116, %4112 ]
  %4092 = icmp eq i32 %4089, 0
  br i1 %4092, label %4093, label %4112

4093:                                             ; preds = %4088
  %4094 = load i8*, i8** %3602, align 8
  %4095 = getelementptr inbounds i8, i8* %4094, i64 1
  %4096 = load i8, i8* %4095, align 1
  %4097 = zext i8 %4096 to i32
  %4098 = load i8, i8* %4094, align 1
  %4099 = icmp eq i8 %4098, -1
  br i1 %4099, label %4100, label %4109

4100:                                             ; preds = %4093
  %4101 = icmp ugt i8 %4096, -113
  br i1 %4101, label %4102, label %4106

4102:                                             ; preds = %4100
  %4103 = add i32 %4091, 65280
  %4104 = load i32, i32* %3603, align 4
  %4105 = add i32 %4104, 1
  store i32 %4105, i32* %3603, align 4
  br label %4112

4106:                                             ; preds = %4100
  store i8* %4095, i8** %3602, align 8
  %4107 = shl nuw nsw i32 %4097, 9
  %4108 = add i32 %4107, %4091
  br label %4112

4109:                                             ; preds = %4093
  store i8* %4095, i8** %3602, align 8
  %4110 = shl nuw nsw i32 %4097, 8
  %4111 = add i32 %4110, %4091
  br label %4112

4112:                                             ; preds = %4109, %4106, %4102, %4088
  %4113 = phi i32 [ %4089, %4088 ], [ 8, %4102 ], [ 7, %4106 ], [ 8, %4109 ]
  %4114 = phi i32 [ %4091, %4088 ], [ %4103, %4102 ], [ %4108, %4106 ], [ %4111, %4109 ]
  %4115 = shl i32 %4090, 1
  %4116 = shl i32 %4114, 1
  %4117 = add i32 %4113, -1
  %4118 = icmp ult i32 %4115, 32768
  br i1 %4118, label %4088, label %4171

4119:                                             ; preds = %4043
  %4120 = shl i32 %4071, 16
  %4121 = sub i32 %4041, %4120
  %4122 = trunc i32 %4072 to i16
  %4123 = icmp sgt i16 %4122, -1
  br i1 %4123, label %4124, label %4168

4124:                                             ; preds = %4119
  %4125 = icmp ult i32 %4072, %4071
  %4126 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 1
  %4127 = load i32, i32* %4126, align 4
  %4128 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 2
  %4129 = icmp eq i32 %4127, 0
  %4130 = zext i1 %4129 to i32
  %4131 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 3
  %4132 = select i1 %4125, %struct.opj_mqc_state** %4131, %struct.opj_mqc_state** %4128
  %4133 = select i1 %4125, i32 %4130, i32 %4127
  %4134 = bitcast %struct.opj_mqc_state** %4132 to i64*
  %4135 = load i64, i64* %4134, align 8
  %4136 = bitcast %struct.opj_mqc_state** %4068 to i64*
  store i64 %4135, i64* %4136, align 8
  br label %4137

4137:                                             ; preds = %4161, %4124
  %4138 = phi i32 [ %4039, %4124 ], [ %4166, %4161 ]
  %4139 = phi i32 [ %4072, %4124 ], [ %4164, %4161 ]
  %4140 = phi i32 [ %4121, %4124 ], [ %4165, %4161 ]
  %4141 = icmp eq i32 %4138, 0
  br i1 %4141, label %4142, label %4161

4142:                                             ; preds = %4137
  %4143 = load i8*, i8** %3602, align 8
  %4144 = getelementptr inbounds i8, i8* %4143, i64 1
  %4145 = load i8, i8* %4144, align 1
  %4146 = zext i8 %4145 to i32
  %4147 = load i8, i8* %4143, align 1
  %4148 = icmp eq i8 %4147, -1
  br i1 %4148, label %4149, label %4158

4149:                                             ; preds = %4142
  %4150 = icmp ugt i8 %4145, -113
  br i1 %4150, label %4151, label %4155

4151:                                             ; preds = %4149
  %4152 = add i32 %4140, 65280
  %4153 = load i32, i32* %3603, align 4
  %4154 = add i32 %4153, 1
  store i32 %4154, i32* %3603, align 4
  br label %4161

4155:                                             ; preds = %4149
  store i8* %4144, i8** %3602, align 8
  %4156 = shl nuw nsw i32 %4146, 9
  %4157 = add i32 %4156, %4140
  br label %4161

4158:                                             ; preds = %4142
  store i8* %4144, i8** %3602, align 8
  %4159 = shl nuw nsw i32 %4146, 8
  %4160 = add i32 %4159, %4140
  br label %4161

4161:                                             ; preds = %4158, %4155, %4151, %4137
  %4162 = phi i32 [ %4138, %4137 ], [ 8, %4151 ], [ 7, %4155 ], [ 8, %4158 ]
  %4163 = phi i32 [ %4140, %4137 ], [ %4152, %4151 ], [ %4157, %4155 ], [ %4160, %4158 ]
  %4164 = shl i32 %4139, 1
  %4165 = shl i32 %4163, 1
  %4166 = add i32 %4162, -1
  %4167 = icmp ult i32 %4164, 32768
  br i1 %4167, label %4137, label %4171

4168:                                             ; preds = %4119
  %4169 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4069, i64 0, i32 1
  %4170 = load i32, i32* %4169, align 4
  br label %4171

4171:                                             ; preds = %4161, %4112, %4168
  %4172 = phi i32 [ %4170, %4168 ], [ %4084, %4112 ], [ %4133, %4161 ]
  %4173 = phi i32 [ %4039, %4168 ], [ %4117, %4112 ], [ %4166, %4161 ]
  %4174 = phi i32 [ %4072, %4168 ], [ %4115, %4112 ], [ %4164, %4161 ]
  %4175 = phi i32 [ %4121, %4168 ], [ %4116, %4112 ], [ %4165, %4161 ]
  %4176 = xor i32 %4172, %4066
  %4177 = icmp eq i32 %4176, 0
  %4178 = select i1 %4177, i32 %2375, i32 %3604
  %4179 = getelementptr inbounds i32, i32* %3621, i64 %3605
  store i32 %4178, i32* %4179, align 4
  %4180 = load i32, i32* %4044, align 4
  %4181 = or i32 %4180, 256
  store i32 %4181, i32* %4044, align 4
  %4182 = shl i32 %4176, 22
  %4183 = or i32 %3916, %4182
  %4184 = or i32 %4183, 128
  %4185 = load i32, i32* %4046, align 4
  %4186 = or i32 %4185, 64
  store i32 %4186, i32* %4046, align 4
  br label %4187

4187:                                             ; preds = %4171, %4037
  %4188 = phi i32 [ %4184, %4171 ], [ %3916, %4037 ]
  %4189 = phi i32 [ %4173, %4171 ], [ %4039, %4037 ]
  %4190 = phi i32 [ %4174, %4171 ], [ %4040, %4037 ]
  %4191 = phi i32 [ %4175, %4171 ], [ %4041, %4037 ]
  %4192 = phi %struct.opj_mqc_state** [ %4068, %4171 ], [ %3934, %4037 ]
  %4193 = or i32 %4188, 16777216
  br label %4194

4194:                                             ; preds = %4187, %3915
  %4195 = phi i32 [ %4193, %4187 ], [ %3916, %3915 ]
  %4196 = phi i32 [ %4189, %4187 ], [ %3917, %3915 ]
  %4197 = phi i32 [ %4190, %4187 ], [ %3918, %3915 ]
  %4198 = phi i32 [ %4191, %4187 ], [ %3919, %3915 ]
  %4199 = phi %struct.opj_mqc_state** [ %4192, %4187 ], [ %3920, %3915 ]
  %4200 = and i32 %4195, 134218752
  %4201 = icmp ne i32 %4200, 0
  %4202 = and i32 %4195, 31680
  %4203 = icmp eq i32 %4202, 0
  %4204 = or i1 %4201, %4203
  br i1 %4204, label %4473, label %4205

4205:                                             ; preds = %4194
  %4206 = lshr i32 %4195, 6
  %4207 = load i8*, i8** %3601, align 8
  %4208 = and i32 %4206, 495
  %4209 = zext i32 %4208 to i64
  %4210 = getelementptr inbounds i8, i8* %4207, i64 %4209
  %4211 = load i8, i8* %4210, align 1
  %4212 = zext i8 %4211 to i64
  %4213 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4212
  %4214 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4213, align 8
  %4215 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 0
  %4216 = load i32, i32* %4215, align 8
  %4217 = sub i32 %4197, %4216
  %4218 = lshr i32 %4198, 16
  %4219 = icmp ult i32 %4218, %4216
  br i1 %4219, label %4220, label %4264

4220:                                             ; preds = %4205
  %4221 = icmp ult i32 %4217, %4216
  %4222 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 1
  %4223 = load i32, i32* %4222, align 4
  %4224 = icmp eq i32 %4223, 0
  %4225 = zext i1 %4224 to i32
  %4226 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 3
  %4227 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 2
  %4228 = select i1 %4221, %struct.opj_mqc_state** %4227, %struct.opj_mqc_state** %4226
  %4229 = select i1 %4221, i32 %4223, i32 %4225
  %4230 = bitcast %struct.opj_mqc_state** %4228 to i64*
  %4231 = load i64, i64* %4230, align 8
  %4232 = bitcast %struct.opj_mqc_state** %4213 to i64*
  store i64 %4231, i64* %4232, align 8
  br label %4233

4233:                                             ; preds = %4257, %4220
  %4234 = phi i32 [ %4196, %4220 ], [ %4262, %4257 ]
  %4235 = phi i32 [ %4216, %4220 ], [ %4260, %4257 ]
  %4236 = phi i32 [ %4198, %4220 ], [ %4261, %4257 ]
  %4237 = icmp eq i32 %4234, 0
  br i1 %4237, label %4238, label %4257

4238:                                             ; preds = %4233
  %4239 = load i8*, i8** %3602, align 8
  %4240 = getelementptr inbounds i8, i8* %4239, i64 1
  %4241 = load i8, i8* %4240, align 1
  %4242 = zext i8 %4241 to i32
  %4243 = load i8, i8* %4239, align 1
  %4244 = icmp eq i8 %4243, -1
  br i1 %4244, label %4245, label %4254

4245:                                             ; preds = %4238
  %4246 = icmp ugt i8 %4241, -113
  br i1 %4246, label %4247, label %4251

4247:                                             ; preds = %4245
  %4248 = add i32 %4236, 65280
  %4249 = load i32, i32* %3603, align 4
  %4250 = add i32 %4249, 1
  store i32 %4250, i32* %3603, align 4
  br label %4257

4251:                                             ; preds = %4245
  store i8* %4240, i8** %3602, align 8
  %4252 = shl nuw nsw i32 %4242, 9
  %4253 = add i32 %4252, %4236
  br label %4257

4254:                                             ; preds = %4238
  store i8* %4240, i8** %3602, align 8
  %4255 = shl nuw nsw i32 %4242, 8
  %4256 = add i32 %4255, %4236
  br label %4257

4257:                                             ; preds = %4254, %4251, %4247, %4233
  %4258 = phi i32 [ %4234, %4233 ], [ 8, %4247 ], [ 7, %4251 ], [ 8, %4254 ]
  %4259 = phi i32 [ %4236, %4233 ], [ %4248, %4247 ], [ %4253, %4251 ], [ %4256, %4254 ]
  %4260 = shl i32 %4235, 1
  %4261 = shl i32 %4259, 1
  %4262 = add i32 %4258, -1
  %4263 = icmp ult i32 %4260, 32768
  br i1 %4263, label %4233, label %4316

4264:                                             ; preds = %4205
  %4265 = shl i32 %4216, 16
  %4266 = sub i32 %4198, %4265
  %4267 = trunc i32 %4217 to i16
  %4268 = icmp sgt i16 %4267, -1
  br i1 %4268, label %4269, label %4313

4269:                                             ; preds = %4264
  %4270 = icmp ult i32 %4217, %4216
  %4271 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 1
  %4272 = load i32, i32* %4271, align 4
  %4273 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 2
  %4274 = icmp eq i32 %4272, 0
  %4275 = zext i1 %4274 to i32
  %4276 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 3
  %4277 = select i1 %4270, %struct.opj_mqc_state** %4276, %struct.opj_mqc_state** %4273
  %4278 = select i1 %4270, i32 %4275, i32 %4272
  %4279 = bitcast %struct.opj_mqc_state** %4277 to i64*
  %4280 = load i64, i64* %4279, align 8
  %4281 = bitcast %struct.opj_mqc_state** %4213 to i64*
  store i64 %4280, i64* %4281, align 8
  br label %4282

4282:                                             ; preds = %4306, %4269
  %4283 = phi i32 [ %4196, %4269 ], [ %4311, %4306 ]
  %4284 = phi i32 [ %4217, %4269 ], [ %4309, %4306 ]
  %4285 = phi i32 [ %4266, %4269 ], [ %4310, %4306 ]
  %4286 = icmp eq i32 %4283, 0
  br i1 %4286, label %4287, label %4306

4287:                                             ; preds = %4282
  %4288 = load i8*, i8** %3602, align 8
  %4289 = getelementptr inbounds i8, i8* %4288, i64 1
  %4290 = load i8, i8* %4289, align 1
  %4291 = zext i8 %4290 to i32
  %4292 = load i8, i8* %4288, align 1
  %4293 = icmp eq i8 %4292, -1
  br i1 %4293, label %4294, label %4303

4294:                                             ; preds = %4287
  %4295 = icmp ugt i8 %4290, -113
  br i1 %4295, label %4296, label %4300

4296:                                             ; preds = %4294
  %4297 = add i32 %4285, 65280
  %4298 = load i32, i32* %3603, align 4
  %4299 = add i32 %4298, 1
  store i32 %4299, i32* %3603, align 4
  br label %4306

4300:                                             ; preds = %4294
  store i8* %4289, i8** %3602, align 8
  %4301 = shl nuw nsw i32 %4291, 9
  %4302 = add i32 %4301, %4285
  br label %4306

4303:                                             ; preds = %4287
  store i8* %4289, i8** %3602, align 8
  %4304 = shl nuw nsw i32 %4291, 8
  %4305 = add i32 %4304, %4285
  br label %4306

4306:                                             ; preds = %4303, %4300, %4296, %4282
  %4307 = phi i32 [ %4283, %4282 ], [ 8, %4296 ], [ 7, %4300 ], [ 8, %4303 ]
  %4308 = phi i32 [ %4285, %4282 ], [ %4297, %4296 ], [ %4302, %4300 ], [ %4305, %4303 ]
  %4309 = shl i32 %4284, 1
  %4310 = shl i32 %4308, 1
  %4311 = add i32 %4307, -1
  %4312 = icmp ult i32 %4309, 32768
  br i1 %4312, label %4282, label %4316

4313:                                             ; preds = %4264
  %4314 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4214, i64 0, i32 1
  %4315 = load i32, i32* %4314, align 4
  br label %4316

4316:                                             ; preds = %4306, %4257, %4313
  %4317 = phi i32 [ %4315, %4313 ], [ %4229, %4257 ], [ %4278, %4306 ]
  %4318 = phi i32 [ %4196, %4313 ], [ %4262, %4257 ], [ %4311, %4306 ]
  %4319 = phi i32 [ %4217, %4313 ], [ %4260, %4257 ], [ %4309, %4306 ]
  %4320 = phi i32 [ %4266, %4313 ], [ %4261, %4257 ], [ %4310, %4306 ]
  %4321 = icmp eq i32 %4317, 0
  br i1 %4321, label %4466, label %4322

4322:                                             ; preds = %4316
  %4323 = getelementptr inbounds i32, i32* %3622, i64 -1
  %4324 = load i32, i32* %4323, align 4
  %4325 = getelementptr inbounds i32, i32* %3622, i64 1
  %4326 = load i32, i32* %4325, align 4
  %4327 = and i32 %4206, 170
  %4328 = lshr i32 %4324, 25
  %4329 = and i32 %4328, 1
  %4330 = lshr i32 %4326, 23
  %4331 = and i32 %4330, 4
  %4332 = lshr i32 %4195, 18
  %4333 = and i32 %4332, 16
  %4334 = lshr i32 %4195, 22
  %4335 = and i32 %4334, 64
  %4336 = or i32 %4335, %4327
  %4337 = or i32 %4336, %4333
  %4338 = or i32 %4337, %4329
  %4339 = or i32 %4338, %4331
  %4340 = zext i32 %4339 to i64
  %4341 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %4340
  %4342 = load i8, i8* %4341, align 1
  %4343 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %4340
  %4344 = load i8, i8* %4343, align 1
  %4345 = zext i8 %4344 to i32
  %4346 = zext i8 %4342 to i64
  %4347 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4346
  %4348 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4347, align 8
  %4349 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 0
  %4350 = load i32, i32* %4349, align 8
  %4351 = sub i32 %4319, %4350
  %4352 = lshr i32 %4320, 16
  %4353 = icmp ult i32 %4352, %4350
  br i1 %4353, label %4354, label %4398

4354:                                             ; preds = %4322
  %4355 = icmp ult i32 %4351, %4350
  %4356 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 1
  %4357 = load i32, i32* %4356, align 4
  %4358 = icmp eq i32 %4357, 0
  %4359 = zext i1 %4358 to i32
  %4360 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 3
  %4361 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 2
  %4362 = select i1 %4355, %struct.opj_mqc_state** %4361, %struct.opj_mqc_state** %4360
  %4363 = select i1 %4355, i32 %4357, i32 %4359
  %4364 = bitcast %struct.opj_mqc_state** %4362 to i64*
  %4365 = load i64, i64* %4364, align 8
  %4366 = bitcast %struct.opj_mqc_state** %4347 to i64*
  store i64 %4365, i64* %4366, align 8
  br label %4367

4367:                                             ; preds = %4391, %4354
  %4368 = phi i32 [ %4318, %4354 ], [ %4396, %4391 ]
  %4369 = phi i32 [ %4350, %4354 ], [ %4394, %4391 ]
  %4370 = phi i32 [ %4320, %4354 ], [ %4395, %4391 ]
  %4371 = icmp eq i32 %4368, 0
  br i1 %4371, label %4372, label %4391

4372:                                             ; preds = %4367
  %4373 = load i8*, i8** %3602, align 8
  %4374 = getelementptr inbounds i8, i8* %4373, i64 1
  %4375 = load i8, i8* %4374, align 1
  %4376 = zext i8 %4375 to i32
  %4377 = load i8, i8* %4373, align 1
  %4378 = icmp eq i8 %4377, -1
  br i1 %4378, label %4379, label %4388

4379:                                             ; preds = %4372
  %4380 = icmp ugt i8 %4375, -113
  br i1 %4380, label %4381, label %4385

4381:                                             ; preds = %4379
  %4382 = add i32 %4370, 65280
  %4383 = load i32, i32* %3603, align 4
  %4384 = add i32 %4383, 1
  store i32 %4384, i32* %3603, align 4
  br label %4391

4385:                                             ; preds = %4379
  store i8* %4374, i8** %3602, align 8
  %4386 = shl nuw nsw i32 %4376, 9
  %4387 = add i32 %4386, %4370
  br label %4391

4388:                                             ; preds = %4372
  store i8* %4374, i8** %3602, align 8
  %4389 = shl nuw nsw i32 %4376, 8
  %4390 = add i32 %4389, %4370
  br label %4391

4391:                                             ; preds = %4388, %4385, %4381, %4367
  %4392 = phi i32 [ %4368, %4367 ], [ 8, %4381 ], [ 7, %4385 ], [ 8, %4388 ]
  %4393 = phi i32 [ %4370, %4367 ], [ %4382, %4381 ], [ %4387, %4385 ], [ %4390, %4388 ]
  %4394 = shl i32 %4369, 1
  %4395 = shl i32 %4393, 1
  %4396 = add i32 %4392, -1
  %4397 = icmp ult i32 %4394, 32768
  br i1 %4397, label %4367, label %4450

4398:                                             ; preds = %4322
  %4399 = shl i32 %4350, 16
  %4400 = sub i32 %4320, %4399
  %4401 = trunc i32 %4351 to i16
  %4402 = icmp sgt i16 %4401, -1
  br i1 %4402, label %4403, label %4447

4403:                                             ; preds = %4398
  %4404 = icmp ult i32 %4351, %4350
  %4405 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 1
  %4406 = load i32, i32* %4405, align 4
  %4407 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 2
  %4408 = icmp eq i32 %4406, 0
  %4409 = zext i1 %4408 to i32
  %4410 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 3
  %4411 = select i1 %4404, %struct.opj_mqc_state** %4410, %struct.opj_mqc_state** %4407
  %4412 = select i1 %4404, i32 %4409, i32 %4406
  %4413 = bitcast %struct.opj_mqc_state** %4411 to i64*
  %4414 = load i64, i64* %4413, align 8
  %4415 = bitcast %struct.opj_mqc_state** %4347 to i64*
  store i64 %4414, i64* %4415, align 8
  br label %4416

4416:                                             ; preds = %4440, %4403
  %4417 = phi i32 [ %4318, %4403 ], [ %4445, %4440 ]
  %4418 = phi i32 [ %4351, %4403 ], [ %4443, %4440 ]
  %4419 = phi i32 [ %4400, %4403 ], [ %4444, %4440 ]
  %4420 = icmp eq i32 %4417, 0
  br i1 %4420, label %4421, label %4440

4421:                                             ; preds = %4416
  %4422 = load i8*, i8** %3602, align 8
  %4423 = getelementptr inbounds i8, i8* %4422, i64 1
  %4424 = load i8, i8* %4423, align 1
  %4425 = zext i8 %4424 to i32
  %4426 = load i8, i8* %4422, align 1
  %4427 = icmp eq i8 %4426, -1
  br i1 %4427, label %4428, label %4437

4428:                                             ; preds = %4421
  %4429 = icmp ugt i8 %4424, -113
  br i1 %4429, label %4430, label %4434

4430:                                             ; preds = %4428
  %4431 = add i32 %4419, 65280
  %4432 = load i32, i32* %3603, align 4
  %4433 = add i32 %4432, 1
  store i32 %4433, i32* %3603, align 4
  br label %4440

4434:                                             ; preds = %4428
  store i8* %4423, i8** %3602, align 8
  %4435 = shl nuw nsw i32 %4425, 9
  %4436 = add i32 %4435, %4419
  br label %4440

4437:                                             ; preds = %4421
  store i8* %4423, i8** %3602, align 8
  %4438 = shl nuw nsw i32 %4425, 8
  %4439 = add i32 %4438, %4419
  br label %4440

4440:                                             ; preds = %4437, %4434, %4430, %4416
  %4441 = phi i32 [ %4417, %4416 ], [ 8, %4430 ], [ 7, %4434 ], [ 8, %4437 ]
  %4442 = phi i32 [ %4419, %4416 ], [ %4431, %4430 ], [ %4436, %4434 ], [ %4439, %4437 ]
  %4443 = shl i32 %4418, 1
  %4444 = shl i32 %4442, 1
  %4445 = add i32 %4441, -1
  %4446 = icmp ult i32 %4443, 32768
  br i1 %4446, label %4416, label %4450

4447:                                             ; preds = %4398
  %4448 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4348, i64 0, i32 1
  %4449 = load i32, i32* %4448, align 4
  br label %4450

4450:                                             ; preds = %4440, %4391, %4447
  %4451 = phi i32 [ %4449, %4447 ], [ %4363, %4391 ], [ %4412, %4440 ]
  %4452 = phi i32 [ %4318, %4447 ], [ %4396, %4391 ], [ %4445, %4440 ]
  %4453 = phi i32 [ %4351, %4447 ], [ %4394, %4391 ], [ %4443, %4440 ]
  %4454 = phi i32 [ %4400, %4447 ], [ %4395, %4391 ], [ %4444, %4440 ]
  %4455 = xor i32 %4451, %4345
  %4456 = icmp eq i32 %4455, 0
  %4457 = select i1 %4456, i32 %2375, i32 %3604
  %4458 = getelementptr inbounds i32, i32* %3621, i64 %3607
  store i32 %4457, i32* %4458, align 4
  %4459 = load i32, i32* %4323, align 4
  %4460 = or i32 %4459, 2048
  store i32 %4460, i32* %4323, align 4
  %4461 = shl i32 %4455, 25
  %4462 = or i32 %4195, %4461
  %4463 = or i32 %4462, 1024
  %4464 = load i32, i32* %4325, align 4
  %4465 = or i32 %4464, 512
  store i32 %4465, i32* %4325, align 4
  br label %4466

4466:                                             ; preds = %4450, %4316
  %4467 = phi i32 [ %4463, %4450 ], [ %4195, %4316 ]
  %4468 = phi i32 [ %4452, %4450 ], [ %4318, %4316 ]
  %4469 = phi i32 [ %4453, %4450 ], [ %4319, %4316 ]
  %4470 = phi i32 [ %4454, %4450 ], [ %4320, %4316 ]
  %4471 = phi %struct.opj_mqc_state** [ %4347, %4450 ], [ %4213, %4316 ]
  %4472 = or i32 %4467, 134217728
  br label %4473

4473:                                             ; preds = %4466, %4194
  %4474 = phi i32 [ %4472, %4466 ], [ %4195, %4194 ]
  %4475 = phi i32 [ %4468, %4466 ], [ %4196, %4194 ]
  %4476 = phi i32 [ %4469, %4466 ], [ %4197, %4194 ]
  %4477 = phi i32 [ %4470, %4466 ], [ %4198, %4194 ]
  %4478 = phi %struct.opj_mqc_state** [ %4471, %4466 ], [ %4199, %4194 ]
  %4479 = and i32 %4474, 1073750016
  %4480 = icmp ne i32 %4479, 0
  %4481 = and i32 %4474, 253440
  %4482 = icmp eq i32 %4481, 0
  %4483 = or i1 %4480, %4482
  br i1 %4483, label %4766, label %4484

4484:                                             ; preds = %4473
  %4485 = lshr i32 %4474, 9
  %4486 = load i8*, i8** %3601, align 8
  %4487 = and i32 %4485, 495
  %4488 = zext i32 %4487 to i64
  %4489 = getelementptr inbounds i8, i8* %4486, i64 %4488
  %4490 = load i8, i8* %4489, align 1
  %4491 = zext i8 %4490 to i64
  %4492 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4491
  %4493 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4492, align 8
  %4494 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 0
  %4495 = load i32, i32* %4494, align 8
  %4496 = sub i32 %4476, %4495
  %4497 = lshr i32 %4477, 16
  %4498 = icmp ult i32 %4497, %4495
  br i1 %4498, label %4499, label %4543

4499:                                             ; preds = %4484
  %4500 = icmp ult i32 %4496, %4495
  %4501 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 1
  %4502 = load i32, i32* %4501, align 4
  %4503 = icmp eq i32 %4502, 0
  %4504 = zext i1 %4503 to i32
  %4505 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 3
  %4506 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 2
  %4507 = select i1 %4500, %struct.opj_mqc_state** %4506, %struct.opj_mqc_state** %4505
  %4508 = select i1 %4500, i32 %4502, i32 %4504
  %4509 = bitcast %struct.opj_mqc_state** %4507 to i64*
  %4510 = load i64, i64* %4509, align 8
  %4511 = bitcast %struct.opj_mqc_state** %4492 to i64*
  store i64 %4510, i64* %4511, align 8
  br label %4512

4512:                                             ; preds = %4536, %4499
  %4513 = phi i32 [ %4475, %4499 ], [ %4541, %4536 ]
  %4514 = phi i32 [ %4495, %4499 ], [ %4539, %4536 ]
  %4515 = phi i32 [ %4477, %4499 ], [ %4540, %4536 ]
  %4516 = icmp eq i32 %4513, 0
  br i1 %4516, label %4517, label %4536

4517:                                             ; preds = %4512
  %4518 = load i8*, i8** %3602, align 8
  %4519 = getelementptr inbounds i8, i8* %4518, i64 1
  %4520 = load i8, i8* %4519, align 1
  %4521 = zext i8 %4520 to i32
  %4522 = load i8, i8* %4518, align 1
  %4523 = icmp eq i8 %4522, -1
  br i1 %4523, label %4524, label %4533

4524:                                             ; preds = %4517
  %4525 = icmp ugt i8 %4520, -113
  br i1 %4525, label %4526, label %4530

4526:                                             ; preds = %4524
  %4527 = add i32 %4515, 65280
  %4528 = load i32, i32* %3603, align 4
  %4529 = add i32 %4528, 1
  store i32 %4529, i32* %3603, align 4
  br label %4536

4530:                                             ; preds = %4524
  store i8* %4519, i8** %3602, align 8
  %4531 = shl nuw nsw i32 %4521, 9
  %4532 = add i32 %4531, %4515
  br label %4536

4533:                                             ; preds = %4517
  store i8* %4519, i8** %3602, align 8
  %4534 = shl nuw nsw i32 %4521, 8
  %4535 = add i32 %4534, %4515
  br label %4536

4536:                                             ; preds = %4533, %4530, %4526, %4512
  %4537 = phi i32 [ %4513, %4512 ], [ 8, %4526 ], [ 7, %4530 ], [ 8, %4533 ]
  %4538 = phi i32 [ %4515, %4512 ], [ %4527, %4526 ], [ %4532, %4530 ], [ %4535, %4533 ]
  %4539 = shl i32 %4514, 1
  %4540 = shl i32 %4538, 1
  %4541 = add i32 %4537, -1
  %4542 = icmp ult i32 %4539, 32768
  br i1 %4542, label %4512, label %4595

4543:                                             ; preds = %4484
  %4544 = shl i32 %4495, 16
  %4545 = sub i32 %4477, %4544
  %4546 = trunc i32 %4496 to i16
  %4547 = icmp sgt i16 %4546, -1
  br i1 %4547, label %4548, label %4592

4548:                                             ; preds = %4543
  %4549 = icmp ult i32 %4496, %4495
  %4550 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 1
  %4551 = load i32, i32* %4550, align 4
  %4552 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 2
  %4553 = icmp eq i32 %4551, 0
  %4554 = zext i1 %4553 to i32
  %4555 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 3
  %4556 = select i1 %4549, %struct.opj_mqc_state** %4555, %struct.opj_mqc_state** %4552
  %4557 = select i1 %4549, i32 %4554, i32 %4551
  %4558 = bitcast %struct.opj_mqc_state** %4556 to i64*
  %4559 = load i64, i64* %4558, align 8
  %4560 = bitcast %struct.opj_mqc_state** %4492 to i64*
  store i64 %4559, i64* %4560, align 8
  br label %4561

4561:                                             ; preds = %4585, %4548
  %4562 = phi i32 [ %4475, %4548 ], [ %4590, %4585 ]
  %4563 = phi i32 [ %4496, %4548 ], [ %4588, %4585 ]
  %4564 = phi i32 [ %4545, %4548 ], [ %4589, %4585 ]
  %4565 = icmp eq i32 %4562, 0
  br i1 %4565, label %4566, label %4585

4566:                                             ; preds = %4561
  %4567 = load i8*, i8** %3602, align 8
  %4568 = getelementptr inbounds i8, i8* %4567, i64 1
  %4569 = load i8, i8* %4568, align 1
  %4570 = zext i8 %4569 to i32
  %4571 = load i8, i8* %4567, align 1
  %4572 = icmp eq i8 %4571, -1
  br i1 %4572, label %4573, label %4582

4573:                                             ; preds = %4566
  %4574 = icmp ugt i8 %4569, -113
  br i1 %4574, label %4575, label %4579

4575:                                             ; preds = %4573
  %4576 = add i32 %4564, 65280
  %4577 = load i32, i32* %3603, align 4
  %4578 = add i32 %4577, 1
  store i32 %4578, i32* %3603, align 4
  br label %4585

4579:                                             ; preds = %4573
  store i8* %4568, i8** %3602, align 8
  %4580 = shl nuw nsw i32 %4570, 9
  %4581 = add i32 %4580, %4564
  br label %4585

4582:                                             ; preds = %4566
  store i8* %4568, i8** %3602, align 8
  %4583 = shl nuw nsw i32 %4570, 8
  %4584 = add i32 %4583, %4564
  br label %4585

4585:                                             ; preds = %4582, %4579, %4575, %4561
  %4586 = phi i32 [ %4562, %4561 ], [ 8, %4575 ], [ 7, %4579 ], [ 8, %4582 ]
  %4587 = phi i32 [ %4564, %4561 ], [ %4576, %4575 ], [ %4581, %4579 ], [ %4584, %4582 ]
  %4588 = shl i32 %4563, 1
  %4589 = shl i32 %4587, 1
  %4590 = add i32 %4586, -1
  %4591 = icmp ult i32 %4588, 32768
  br i1 %4591, label %4561, label %4595

4592:                                             ; preds = %4543
  %4593 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4493, i64 0, i32 1
  %4594 = load i32, i32* %4593, align 4
  br label %4595

4595:                                             ; preds = %4585, %4536, %4592
  %4596 = phi i32 [ %4594, %4592 ], [ %4508, %4536 ], [ %4557, %4585 ]
  %4597 = phi i32 [ %4475, %4592 ], [ %4541, %4536 ], [ %4590, %4585 ]
  %4598 = phi i32 [ %4496, %4592 ], [ %4539, %4536 ], [ %4588, %4585 ]
  %4599 = phi i32 [ %4545, %4592 ], [ %4540, %4536 ], [ %4589, %4585 ]
  %4600 = icmp eq i32 %4596, 0
  br i1 %4600, label %4759, label %4601

4601:                                             ; preds = %4595
  %4602 = getelementptr inbounds i32, i32* %3622, i64 -1
  %4603 = load i32, i32* %4602, align 4
  %4604 = getelementptr inbounds i32, i32* %3622, i64 1
  %4605 = load i32, i32* %4604, align 4
  %4606 = and i32 %4485, 170
  %4607 = lshr i32 %4603, 28
  %4608 = and i32 %4607, 1
  %4609 = lshr i32 %4605, 26
  %4610 = and i32 %4609, 4
  %4611 = lshr i32 %4474, 21
  %4612 = and i32 %4611, 16
  %4613 = lshr i32 %4474, 25
  %4614 = and i32 %4613, 64
  %4615 = or i32 %4614, %4606
  %4616 = or i32 %4615, %4612
  %4617 = or i32 %4616, %4608
  %4618 = or i32 %4617, %4610
  %4619 = zext i32 %4618 to i64
  %4620 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %4619
  %4621 = load i8, i8* %4620, align 1
  %4622 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %4619
  %4623 = load i8, i8* %4622, align 1
  %4624 = zext i8 %4623 to i32
  %4625 = zext i8 %4621 to i64
  %4626 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4625
  %4627 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4626, align 8
  %4628 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 0
  %4629 = load i32, i32* %4628, align 8
  %4630 = sub i32 %4598, %4629
  %4631 = lshr i32 %4599, 16
  %4632 = icmp ult i32 %4631, %4629
  br i1 %4632, label %4633, label %4677

4633:                                             ; preds = %4601
  %4634 = icmp ult i32 %4630, %4629
  %4635 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 1
  %4636 = load i32, i32* %4635, align 4
  %4637 = icmp eq i32 %4636, 0
  %4638 = zext i1 %4637 to i32
  %4639 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 3
  %4640 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 2
  %4641 = select i1 %4634, %struct.opj_mqc_state** %4640, %struct.opj_mqc_state** %4639
  %4642 = select i1 %4634, i32 %4636, i32 %4638
  %4643 = bitcast %struct.opj_mqc_state** %4641 to i64*
  %4644 = load i64, i64* %4643, align 8
  %4645 = bitcast %struct.opj_mqc_state** %4626 to i64*
  store i64 %4644, i64* %4645, align 8
  br label %4646

4646:                                             ; preds = %4670, %4633
  %4647 = phi i32 [ %4597, %4633 ], [ %4675, %4670 ]
  %4648 = phi i32 [ %4629, %4633 ], [ %4673, %4670 ]
  %4649 = phi i32 [ %4599, %4633 ], [ %4674, %4670 ]
  %4650 = icmp eq i32 %4647, 0
  br i1 %4650, label %4651, label %4670

4651:                                             ; preds = %4646
  %4652 = load i8*, i8** %3602, align 8
  %4653 = getelementptr inbounds i8, i8* %4652, i64 1
  %4654 = load i8, i8* %4653, align 1
  %4655 = zext i8 %4654 to i32
  %4656 = load i8, i8* %4652, align 1
  %4657 = icmp eq i8 %4656, -1
  br i1 %4657, label %4658, label %4667

4658:                                             ; preds = %4651
  %4659 = icmp ugt i8 %4654, -113
  br i1 %4659, label %4660, label %4664

4660:                                             ; preds = %4658
  %4661 = add i32 %4649, 65280
  %4662 = load i32, i32* %3603, align 4
  %4663 = add i32 %4662, 1
  store i32 %4663, i32* %3603, align 4
  br label %4670

4664:                                             ; preds = %4658
  store i8* %4653, i8** %3602, align 8
  %4665 = shl nuw nsw i32 %4655, 9
  %4666 = add i32 %4665, %4649
  br label %4670

4667:                                             ; preds = %4651
  store i8* %4653, i8** %3602, align 8
  %4668 = shl nuw nsw i32 %4655, 8
  %4669 = add i32 %4668, %4649
  br label %4670

4670:                                             ; preds = %4667, %4664, %4660, %4646
  %4671 = phi i32 [ %4647, %4646 ], [ 8, %4660 ], [ 7, %4664 ], [ 8, %4667 ]
  %4672 = phi i32 [ %4649, %4646 ], [ %4661, %4660 ], [ %4666, %4664 ], [ %4669, %4667 ]
  %4673 = shl i32 %4648, 1
  %4674 = shl i32 %4672, 1
  %4675 = add i32 %4671, -1
  %4676 = icmp ult i32 %4673, 32768
  br i1 %4676, label %4646, label %4729

4677:                                             ; preds = %4601
  %4678 = shl i32 %4629, 16
  %4679 = sub i32 %4599, %4678
  %4680 = trunc i32 %4630 to i16
  %4681 = icmp sgt i16 %4680, -1
  br i1 %4681, label %4682, label %4726

4682:                                             ; preds = %4677
  %4683 = icmp ult i32 %4630, %4629
  %4684 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 1
  %4685 = load i32, i32* %4684, align 4
  %4686 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 2
  %4687 = icmp eq i32 %4685, 0
  %4688 = zext i1 %4687 to i32
  %4689 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 3
  %4690 = select i1 %4683, %struct.opj_mqc_state** %4689, %struct.opj_mqc_state** %4686
  %4691 = select i1 %4683, i32 %4688, i32 %4685
  %4692 = bitcast %struct.opj_mqc_state** %4690 to i64*
  %4693 = load i64, i64* %4692, align 8
  %4694 = bitcast %struct.opj_mqc_state** %4626 to i64*
  store i64 %4693, i64* %4694, align 8
  br label %4695

4695:                                             ; preds = %4719, %4682
  %4696 = phi i32 [ %4597, %4682 ], [ %4724, %4719 ]
  %4697 = phi i32 [ %4630, %4682 ], [ %4722, %4719 ]
  %4698 = phi i32 [ %4679, %4682 ], [ %4723, %4719 ]
  %4699 = icmp eq i32 %4696, 0
  br i1 %4699, label %4700, label %4719

4700:                                             ; preds = %4695
  %4701 = load i8*, i8** %3602, align 8
  %4702 = getelementptr inbounds i8, i8* %4701, i64 1
  %4703 = load i8, i8* %4702, align 1
  %4704 = zext i8 %4703 to i32
  %4705 = load i8, i8* %4701, align 1
  %4706 = icmp eq i8 %4705, -1
  br i1 %4706, label %4707, label %4716

4707:                                             ; preds = %4700
  %4708 = icmp ugt i8 %4703, -113
  br i1 %4708, label %4709, label %4713

4709:                                             ; preds = %4707
  %4710 = add i32 %4698, 65280
  %4711 = load i32, i32* %3603, align 4
  %4712 = add i32 %4711, 1
  store i32 %4712, i32* %3603, align 4
  br label %4719

4713:                                             ; preds = %4707
  store i8* %4702, i8** %3602, align 8
  %4714 = shl nuw nsw i32 %4704, 9
  %4715 = add i32 %4714, %4698
  br label %4719

4716:                                             ; preds = %4700
  store i8* %4702, i8** %3602, align 8
  %4717 = shl nuw nsw i32 %4704, 8
  %4718 = add i32 %4717, %4698
  br label %4719

4719:                                             ; preds = %4716, %4713, %4709, %4695
  %4720 = phi i32 [ %4696, %4695 ], [ 8, %4709 ], [ 7, %4713 ], [ 8, %4716 ]
  %4721 = phi i32 [ %4698, %4695 ], [ %4710, %4709 ], [ %4715, %4713 ], [ %4718, %4716 ]
  %4722 = shl i32 %4697, 1
  %4723 = shl i32 %4721, 1
  %4724 = add i32 %4720, -1
  %4725 = icmp ult i32 %4722, 32768
  br i1 %4725, label %4695, label %4729

4726:                                             ; preds = %4677
  %4727 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4627, i64 0, i32 1
  %4728 = load i32, i32* %4727, align 4
  br label %4729

4729:                                             ; preds = %4719, %4670, %4726
  %4730 = phi i32 [ %4728, %4726 ], [ %4642, %4670 ], [ %4691, %4719 ]
  %4731 = phi i32 [ %4597, %4726 ], [ %4675, %4670 ], [ %4724, %4719 ]
  %4732 = phi i32 [ %4630, %4726 ], [ %4673, %4670 ], [ %4722, %4719 ]
  %4733 = phi i32 [ %4679, %4726 ], [ %4674, %4670 ], [ %4723, %4719 ]
  %4734 = xor i32 %4730, %4624
  %4735 = icmp eq i32 %4734, 0
  %4736 = select i1 %4735, i32 %2375, i32 %3604
  %4737 = getelementptr inbounds i32, i32* %3621, i64 %3609
  store i32 %4736, i32* %4737, align 4
  %4738 = load i32, i32* %4602, align 4
  %4739 = or i32 %4738, 16384
  store i32 %4739, i32* %4602, align 4
  %4740 = shl i32 %4734, 28
  %4741 = or i32 %4474, %4740
  %4742 = or i32 %4741, 8192
  %4743 = load i32, i32* %4604, align 4
  %4744 = or i32 %4743, 4096
  store i32 %4744, i32* %4604, align 4
  %4745 = load i32, i32* %4, align 8
  %4746 = add i32 %4745, 2
  %4747 = zext i32 %4746 to i64
  %4748 = getelementptr inbounds i32, i32* %3622, i64 %4747
  %4749 = shl i32 %4734, 18
  %4750 = load i32, i32* %4748, align 4
  %4751 = or i32 %4749, %4750
  %4752 = or i32 %4751, 2
  store i32 %4752, i32* %4748, align 4
  %4753 = getelementptr inbounds i32, i32* %4748, i64 -1
  %4754 = load i32, i32* %4753, align 4
  %4755 = or i32 %4754, 4
  store i32 %4755, i32* %4753, align 4
  %4756 = getelementptr inbounds i32, i32* %4748, i64 1
  %4757 = load i32, i32* %4756, align 4
  %4758 = or i32 %4757, 1
  store i32 %4758, i32* %4756, align 4
  br label %4759

4759:                                             ; preds = %4729, %4595
  %4760 = phi i32 [ %4742, %4729 ], [ %4474, %4595 ]
  %4761 = phi i32 [ %4731, %4729 ], [ %4597, %4595 ]
  %4762 = phi i32 [ %4732, %4729 ], [ %4598, %4595 ]
  %4763 = phi i32 [ %4733, %4729 ], [ %4599, %4595 ]
  %4764 = phi %struct.opj_mqc_state** [ %4626, %4729 ], [ %4492, %4595 ]
  %4765 = or i32 %4760, 1073741824
  br label %4766

4766:                                             ; preds = %4759, %4473
  %4767 = phi i32 [ %4765, %4759 ], [ %4474, %4473 ]
  %4768 = phi i32 [ %4761, %4759 ], [ %4475, %4473 ]
  %4769 = phi i32 [ %4762, %4759 ], [ %4476, %4473 ]
  %4770 = phi i32 [ %4763, %4759 ], [ %4477, %4473 ]
  %4771 = phi %struct.opj_mqc_state** [ %4764, %4759 ], [ %4478, %4473 ]
  store i32 %4767, i32* %3622, align 4
  br label %4772

4772:                                             ; preds = %4766, %3619
  %4773 = phi i32 [ %4768, %4766 ], [ %3626, %3619 ]
  %4774 = phi i32 [ %4769, %4766 ], [ %3625, %3619 ]
  %4775 = phi i32 [ %4770, %4766 ], [ %3624, %3619 ]
  %4776 = phi %struct.opj_mqc_state** [ %4771, %4766 ], [ %3623, %3619 ]
  %4777 = add nuw i32 %3620, 1
  %4778 = getelementptr inbounds i32, i32* %3621, i64 1
  %4779 = getelementptr inbounds i32, i32* %3622, i64 1
  %4780 = icmp eq i32 %4777, %5
  br i1 %4780, label %4781, label %3619

4781:                                             ; preds = %4772
  %4782 = load i32, i32* %2376, align 4
  br label %4783

4783:                                             ; preds = %4781, %3610
  %4784 = phi i32 [ %3611, %3610 ], [ %4782, %4781 ]
  %4785 = phi i32 [ %3618, %3610 ], [ %4773, %4781 ]
  %4786 = phi i32 [ %3617, %3610 ], [ %4774, %4781 ]
  %4787 = phi i32 [ %3616, %3610 ], [ %4775, %4781 ]
  %4788 = phi %struct.opj_mqc_state** [ %3615, %3610 ], [ %4776, %4781 ]
  %4789 = phi i32* [ %3614, %3610 ], [ %4779, %4781 ]
  %4790 = phi i32* [ %3613, %3610 ], [ %4778, %4781 ]
  %4791 = add nuw i32 %3612, 4
  %4792 = getelementptr inbounds i32, i32* %4790, i64 %3609
  %4793 = getelementptr inbounds i32, i32* %4789, i64 2
  %4794 = and i32 %4784, -4
  %4795 = icmp ult i32 %4791, %4794
  br i1 %4795, label %3610, label %4796

4796:                                             ; preds = %4783, %3598
  %4797 = phi i32 [ %2372, %3598 ], [ %4785, %4783 ]
  %4798 = phi i32 [ %2370, %3598 ], [ %4786, %4783 ]
  %4799 = phi i32 [ %2368, %3598 ], [ %4787, %4783 ]
  %4800 = phi %struct.opj_mqc_state** [ %2366, %3598 ], [ %4788, %4783 ]
  %4801 = phi i32* [ %2364, %3598 ], [ %4793, %4783 ]
  %4802 = phi i32* [ %14, %3598 ], [ %4792, %4783 ]
  %4803 = phi i32 [ 0, %3598 ], [ %4791, %4783 ]
  %4804 = phi i32 [ %8, %3598 ], [ %4784, %4783 ]
  store %struct.opj_mqc_state** %4800, %struct.opj_mqc_state*** %2365, align 8
  store i32 %4799, i32* %2367, align 8
  store i32 %4798, i32* %2369, align 4
  store i32 %4797, i32* %2371, align 8
  %4805 = icmp ult i32 %4803, %4804
  %4806 = icmp ne i32 %5, 0
  %4807 = and i1 %4806, %4805
  br i1 %4807, label %4808, label %4833

4808:                                             ; preds = %4796, %4827
  %4809 = phi i32 [ %4828, %4827 ], [ %4804, %4796 ]
  %4810 = phi i32 [ %4829, %4827 ], [ 0, %4796 ]
  %4811 = phi i32* [ %4830, %4827 ], [ %4802, %4796 ]
  %4812 = phi i32* [ %4831, %4827 ], [ %4801, %4796 ]
  %4813 = icmp eq i32 %4809, %4803
  br i1 %4813, label %4827, label %4814

4814:                                             ; preds = %4808, %4814
  %4815 = phi i64 [ %4822, %4814 ], [ 0, %4808 ]
  %4816 = trunc i64 %4815 to i32
  %4817 = mul i32 %5, %4816
  %4818 = zext i32 %4817 to i64
  %4819 = getelementptr inbounds i32, i32* %4811, i64 %4818
  %4820 = load i32, i32* %4, align 8
  %4821 = add i32 %4820, 2
  tail call fastcc void @opj_t1_dec_sigpass_step_mqc(%struct.opj_t1* %0, i32* %4812, i32* %4819, i32 %2375, i32 %4816, i32 %4821, i32 0) #7
  %4822 = add nuw nsw i64 %4815, 1
  %4823 = load i32, i32* %2376, align 4
  %4824 = sub i32 %4823, %4803
  %4825 = zext i32 %4824 to i64
  %4826 = icmp ult i64 %4822, %4825
  br i1 %4826, label %4814, label %4827

4827:                                             ; preds = %4814, %4808
  %4828 = phi i32 [ %4803, %4808 ], [ %4823, %4814 ]
  %4829 = add nuw i32 %4810, 1
  %4830 = getelementptr inbounds i32, i32* %4811, i64 1
  %4831 = getelementptr inbounds i32, i32* %4812, i64 1
  %4832 = icmp eq i32 %4829, %5
  br i1 %4832, label %4833, label %4808

4833:                                             ; preds = %3592, %4827, %4796, %3561, %1191, %2360
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_t1_dec_clnpass(%struct.opj_t1*, i32, i32) unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 64
  %7 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 64
  %10 = and i1 %6, %9
  %11 = and i32 %2, 8
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 1
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 2
  %16 = load i32*, i32** %15, align 8
  br i1 %10, label %17, label %4850

17:                                               ; preds = %3
  %18 = getelementptr inbounds i32, i32* %16, i64 67
  %19 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  %20 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %19, align 8
  %21 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = shl i32 1, %1
  %28 = ashr i32 %27, 1
  %29 = or i32 %28, %27
  %30 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %31 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %32 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %33 = sub nsw i32 0, %29
  %34 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 17
  %35 = bitcast %struct.opj_mqc_state** %34 to i64*
  %36 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 18
  %37 = bitcast %struct.opj_mqc_state** %36 to i64*
  br i1 %12, label %2433, label %38

38:                                               ; preds = %17, %2427
  %39 = phi i32 [ %2428, %2427 ], [ 0, %17 ]
  %40 = phi i32* [ %2429, %2427 ], [ %14, %17 ]
  %41 = phi i32* [ %2430, %2427 ], [ %18, %17 ]
  %42 = phi %struct.opj_mqc_state** [ %2422, %2427 ], [ %20, %17 ]
  %43 = phi i32 [ %2421, %2427 ], [ %26, %17 ]
  %44 = phi i32 [ %2420, %2427 ], [ %24, %17 ]
  %45 = phi i32 [ %2419, %2427 ], [ %22, %17 ]
  br label %46

46:                                               ; preds = %2418, %38
  %47 = phi i32 [ 0, %38 ], [ %2423, %2418 ]
  %48 = phi i32* [ %40, %38 ], [ %2424, %2418 ]
  %49 = phi i32* [ %41, %38 ], [ %2425, %2418 ]
  %50 = phi %struct.opj_mqc_state** [ %42, %38 ], [ %2422, %2418 ]
  %51 = phi i32 [ %43, %38 ], [ %2421, %2418 ]
  %52 = phi i32 [ %44, %38 ], [ %2420, %2418 ]
  %53 = phi i32 [ %45, %38 ], [ %2419, %2418 ]
  %54 = load i32, i32* %49, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %1331

56:                                               ; preds = %46
  %57 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %34, align 8
  %58 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = sub i32 %52, %59
  %61 = lshr i32 %53, 16
  %62 = icmp ult i32 %61, %59
  br i1 %62, label %63, label %104

63:                                               ; preds = %56
  %64 = icmp ult i32 %60, %59
  %65 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 3
  %69 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 2
  %70 = select i1 %64, %struct.opj_mqc_state** %69, %struct.opj_mqc_state** %68
  %71 = bitcast %struct.opj_mqc_state** %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %35, align 8
  br label %73

73:                                               ; preds = %97, %63
  %74 = phi i32 [ %53, %63 ], [ %101, %97 ]
  %75 = phi i32 [ %59, %63 ], [ %100, %97 ]
  %76 = phi i32 [ %51, %63 ], [ %102, %97 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %97

78:                                               ; preds = %73
  %79 = load i8*, i8** %31, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 1
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = load i8, i8* %79, align 1
  %84 = icmp eq i8 %83, -1
  br i1 %84, label %85, label %94

85:                                               ; preds = %78
  %86 = icmp ugt i8 %81, -113
  br i1 %86, label %87, label %91

87:                                               ; preds = %85
  %88 = add i32 %74, 65280
  %89 = load i32, i32* %32, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %32, align 4
  br label %97

91:                                               ; preds = %85
  store i8* %80, i8** %31, align 8
  %92 = shl nuw nsw i32 %82, 9
  %93 = add i32 %92, %74
  br label %97

94:                                               ; preds = %78
  store i8* %80, i8** %31, align 8
  %95 = shl nuw nsw i32 %82, 8
  %96 = add i32 %95, %74
  br label %97

97:                                               ; preds = %94, %91, %87, %73
  %98 = phi i32 [ %74, %73 ], [ %88, %87 ], [ %93, %91 ], [ %96, %94 ]
  %99 = phi i32 [ %76, %73 ], [ 8, %87 ], [ 7, %91 ], [ 8, %94 ]
  %100 = shl i32 %75, 1
  %101 = shl i32 %98, 1
  %102 = add i32 %99, -1
  %103 = icmp ult i32 %100, 32768
  br i1 %103, label %73, label %153

104:                                              ; preds = %56
  %105 = shl i32 %59, 16
  %106 = sub i32 %53, %105
  %107 = trunc i32 %60 to i16
  %108 = icmp sgt i16 %107, -1
  br i1 %108, label %109, label %150

109:                                              ; preds = %104
  %110 = icmp ult i32 %60, %59
  %111 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 1
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 2
  %114 = icmp eq i32 %112, 0
  %115 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 3
  %116 = select i1 %110, %struct.opj_mqc_state** %115, %struct.opj_mqc_state** %113
  %117 = bitcast %struct.opj_mqc_state** %116 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %35, align 8
  br label %119

119:                                              ; preds = %143, %109
  %120 = phi i32 [ %106, %109 ], [ %147, %143 ]
  %121 = phi i32 [ %60, %109 ], [ %146, %143 ]
  %122 = phi i32 [ %51, %109 ], [ %148, %143 ]
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %143

124:                                              ; preds = %119
  %125 = load i8*, i8** %31, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = load i8, i8* %125, align 1
  %130 = icmp eq i8 %129, -1
  br i1 %130, label %131, label %140

131:                                              ; preds = %124
  %132 = icmp ugt i8 %127, -113
  br i1 %132, label %133, label %137

133:                                              ; preds = %131
  %134 = add i32 %120, 65280
  %135 = load i32, i32* %32, align 4
  %136 = add i32 %135, 1
  store i32 %136, i32* %32, align 4
  br label %143

137:                                              ; preds = %131
  store i8* %126, i8** %31, align 8
  %138 = shl nuw nsw i32 %128, 9
  %139 = add i32 %138, %120
  br label %143

140:                                              ; preds = %124
  store i8* %126, i8** %31, align 8
  %141 = shl nuw nsw i32 %128, 8
  %142 = add i32 %141, %120
  br label %143

143:                                              ; preds = %140, %137, %133, %119
  %144 = phi i32 [ %120, %119 ], [ %134, %133 ], [ %139, %137 ], [ %142, %140 ]
  %145 = phi i32 [ %122, %119 ], [ 8, %133 ], [ 7, %137 ], [ 8, %140 ]
  %146 = shl i32 %121, 1
  %147 = shl i32 %144, 1
  %148 = add i32 %145, -1
  %149 = icmp ult i32 %146, 32768
  br i1 %149, label %119, label %156

150:                                              ; preds = %104
  %151 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %57, i64 0, i32 1
  %152 = load i32, i32* %151, align 4
  br label %159

153:                                              ; preds = %97
  %154 = zext i1 %67 to i32
  %155 = select i1 %64, i32 %66, i32 %154
  br label %159

156:                                              ; preds = %143
  %157 = zext i1 %114 to i32
  %158 = select i1 %110, i32 %157, i32 %112
  br label %159

159:                                              ; preds = %156, %153, %150
  %160 = phi i32 [ %106, %150 ], [ %101, %153 ], [ %147, %156 ]
  %161 = phi i32 [ %60, %150 ], [ %100, %153 ], [ %146, %156 ]
  %162 = phi i32 [ %51, %150 ], [ %102, %153 ], [ %148, %156 ]
  %163 = phi i32 [ %152, %150 ], [ %155, %153 ], [ %158, %156 ]
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %2418, label %165

165:                                              ; preds = %159
  %166 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %36, align 8
  %167 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = sub i32 %161, %168
  %170 = lshr i32 %160, 16
  %171 = icmp ult i32 %170, %168
  br i1 %171, label %172, label %213

172:                                              ; preds = %165
  %173 = icmp ult i32 %169, %168
  %174 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 3
  %178 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 2
  %179 = select i1 %173, %struct.opj_mqc_state** %178, %struct.opj_mqc_state** %177
  %180 = bitcast %struct.opj_mqc_state** %179 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %37, align 8
  br label %182

182:                                              ; preds = %206, %172
  %183 = phi i32 [ %160, %172 ], [ %210, %206 ]
  %184 = phi i32 [ %168, %172 ], [ %209, %206 ]
  %185 = phi i32 [ %162, %172 ], [ %211, %206 ]
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %206

187:                                              ; preds = %182
  %188 = load i8*, i8** %31, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 1
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = load i8, i8* %188, align 1
  %193 = icmp eq i8 %192, -1
  br i1 %193, label %194, label %203

194:                                              ; preds = %187
  %195 = icmp ugt i8 %190, -113
  br i1 %195, label %196, label %200

196:                                              ; preds = %194
  %197 = add i32 %183, 65280
  %198 = load i32, i32* %32, align 4
  %199 = add i32 %198, 1
  store i32 %199, i32* %32, align 4
  br label %206

200:                                              ; preds = %194
  store i8* %189, i8** %31, align 8
  %201 = shl nuw nsw i32 %191, 9
  %202 = add i32 %201, %183
  br label %206

203:                                              ; preds = %187
  store i8* %189, i8** %31, align 8
  %204 = shl nuw nsw i32 %191, 8
  %205 = add i32 %204, %183
  br label %206

206:                                              ; preds = %203, %200, %196, %182
  %207 = phi i32 [ %183, %182 ], [ %197, %196 ], [ %202, %200 ], [ %205, %203 ]
  %208 = phi i32 [ %185, %182 ], [ 8, %196 ], [ 7, %200 ], [ 8, %203 ]
  %209 = shl i32 %184, 1
  %210 = shl i32 %207, 1
  %211 = add i32 %208, -1
  %212 = icmp ult i32 %209, 32768
  br i1 %212, label %182, label %262

213:                                              ; preds = %165
  %214 = shl i32 %168, 16
  %215 = sub i32 %160, %214
  %216 = trunc i32 %169 to i16
  %217 = icmp sgt i16 %216, -1
  br i1 %217, label %218, label %259

218:                                              ; preds = %213
  %219 = icmp ult i32 %169, %168
  %220 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 1
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 2
  %223 = icmp eq i32 %221, 0
  %224 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 3
  %225 = select i1 %219, %struct.opj_mqc_state** %224, %struct.opj_mqc_state** %222
  %226 = bitcast %struct.opj_mqc_state** %225 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %37, align 8
  br label %228

228:                                              ; preds = %252, %218
  %229 = phi i32 [ %215, %218 ], [ %256, %252 ]
  %230 = phi i32 [ %169, %218 ], [ %255, %252 ]
  %231 = phi i32 [ %162, %218 ], [ %257, %252 ]
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %252

233:                                              ; preds = %228
  %234 = load i8*, i8** %31, align 8
  %235 = getelementptr inbounds i8, i8* %234, i64 1
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = load i8, i8* %234, align 1
  %239 = icmp eq i8 %238, -1
  br i1 %239, label %240, label %249

240:                                              ; preds = %233
  %241 = icmp ugt i8 %236, -113
  br i1 %241, label %242, label %246

242:                                              ; preds = %240
  %243 = add i32 %229, 65280
  %244 = load i32, i32* %32, align 4
  %245 = add i32 %244, 1
  store i32 %245, i32* %32, align 4
  br label %252

246:                                              ; preds = %240
  store i8* %235, i8** %31, align 8
  %247 = shl nuw nsw i32 %237, 9
  %248 = add i32 %247, %229
  br label %252

249:                                              ; preds = %233
  store i8* %235, i8** %31, align 8
  %250 = shl nuw nsw i32 %237, 8
  %251 = add i32 %250, %229
  br label %252

252:                                              ; preds = %249, %246, %242, %228
  %253 = phi i32 [ %229, %228 ], [ %243, %242 ], [ %248, %246 ], [ %251, %249 ]
  %254 = phi i32 [ %231, %228 ], [ 8, %242 ], [ 7, %246 ], [ 8, %249 ]
  %255 = shl i32 %230, 1
  %256 = shl i32 %253, 1
  %257 = add i32 %254, -1
  %258 = icmp ult i32 %255, 32768
  br i1 %258, label %228, label %266

259:                                              ; preds = %213
  %260 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %166, i64 0, i32 1
  %261 = load i32, i32* %260, align 4
  br label %270

262:                                              ; preds = %206
  %263 = zext i1 %176 to i32
  %264 = select i1 %173, i32 %175, i32 %263
  %265 = inttoptr i64 %181 to %struct.opj_mqc_state*
  br label %270

266:                                              ; preds = %252
  %267 = zext i1 %223 to i32
  %268 = select i1 %219, i32 %267, i32 %221
  %269 = inttoptr i64 %227 to %struct.opj_mqc_state*
  br label %270

270:                                              ; preds = %266, %262, %259
  %271 = phi %struct.opj_mqc_state* [ %166, %259 ], [ %265, %262 ], [ %269, %266 ]
  %272 = phi i32 [ %215, %259 ], [ %210, %262 ], [ %256, %266 ]
  %273 = phi i32 [ %169, %259 ], [ %209, %262 ], [ %255, %266 ]
  %274 = phi i32 [ %162, %259 ], [ %211, %262 ], [ %257, %266 ]
  %275 = phi i32 [ %261, %259 ], [ %264, %262 ], [ %268, %266 ]
  %276 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 0
  %277 = load i32, i32* %276, align 8
  %278 = sub i32 %273, %277
  %279 = lshr i32 %272, 16
  %280 = icmp ult i32 %279, %277
  br i1 %280, label %281, label %322

281:                                              ; preds = %270
  %282 = icmp ult i32 %278, %277
  %283 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 1
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %284, 0
  %286 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 3
  %287 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 2
  %288 = select i1 %282, %struct.opj_mqc_state** %287, %struct.opj_mqc_state** %286
  %289 = bitcast %struct.opj_mqc_state** %288 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %37, align 8
  br label %291

291:                                              ; preds = %315, %281
  %292 = phi i32 [ %272, %281 ], [ %319, %315 ]
  %293 = phi i32 [ %277, %281 ], [ %318, %315 ]
  %294 = phi i32 [ %274, %281 ], [ %320, %315 ]
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %315

296:                                              ; preds = %291
  %297 = load i8*, i8** %31, align 8
  %298 = getelementptr inbounds i8, i8* %297, i64 1
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i32
  %301 = load i8, i8* %297, align 1
  %302 = icmp eq i8 %301, -1
  br i1 %302, label %303, label %312

303:                                              ; preds = %296
  %304 = icmp ugt i8 %299, -113
  br i1 %304, label %305, label %309

305:                                              ; preds = %303
  %306 = add i32 %292, 65280
  %307 = load i32, i32* %32, align 4
  %308 = add i32 %307, 1
  store i32 %308, i32* %32, align 4
  br label %315

309:                                              ; preds = %303
  store i8* %298, i8** %31, align 8
  %310 = shl nuw nsw i32 %300, 9
  %311 = add i32 %310, %292
  br label %315

312:                                              ; preds = %296
  store i8* %298, i8** %31, align 8
  %313 = shl nuw nsw i32 %300, 8
  %314 = add i32 %313, %292
  br label %315

315:                                              ; preds = %312, %309, %305, %291
  %316 = phi i32 [ %292, %291 ], [ %306, %305 ], [ %311, %309 ], [ %314, %312 ]
  %317 = phi i32 [ %294, %291 ], [ 8, %305 ], [ 7, %309 ], [ 8, %312 ]
  %318 = shl i32 %293, 1
  %319 = shl i32 %316, 1
  %320 = add i32 %317, -1
  %321 = icmp ult i32 %318, 32768
  br i1 %321, label %291, label %371

322:                                              ; preds = %270
  %323 = shl i32 %277, 16
  %324 = sub i32 %272, %323
  %325 = trunc i32 %278 to i16
  %326 = icmp sgt i16 %325, -1
  br i1 %326, label %327, label %368

327:                                              ; preds = %322
  %328 = icmp ult i32 %278, %277
  %329 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 1
  %330 = load i32, i32* %329, align 4
  %331 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 2
  %332 = icmp eq i32 %330, 0
  %333 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 3
  %334 = select i1 %328, %struct.opj_mqc_state** %333, %struct.opj_mqc_state** %331
  %335 = bitcast %struct.opj_mqc_state** %334 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %37, align 8
  br label %337

337:                                              ; preds = %361, %327
  %338 = phi i32 [ %324, %327 ], [ %365, %361 ]
  %339 = phi i32 [ %278, %327 ], [ %364, %361 ]
  %340 = phi i32 [ %274, %327 ], [ %366, %361 ]
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %361

342:                                              ; preds = %337
  %343 = load i8*, i8** %31, align 8
  %344 = getelementptr inbounds i8, i8* %343, i64 1
  %345 = load i8, i8* %344, align 1
  %346 = zext i8 %345 to i32
  %347 = load i8, i8* %343, align 1
  %348 = icmp eq i8 %347, -1
  br i1 %348, label %349, label %358

349:                                              ; preds = %342
  %350 = icmp ugt i8 %345, -113
  br i1 %350, label %351, label %355

351:                                              ; preds = %349
  %352 = add i32 %338, 65280
  %353 = load i32, i32* %32, align 4
  %354 = add i32 %353, 1
  store i32 %354, i32* %32, align 4
  br label %361

355:                                              ; preds = %349
  store i8* %344, i8** %31, align 8
  %356 = shl nuw nsw i32 %346, 9
  %357 = add i32 %356, %338
  br label %361

358:                                              ; preds = %342
  store i8* %344, i8** %31, align 8
  %359 = shl nuw nsw i32 %346, 8
  %360 = add i32 %359, %338
  br label %361

361:                                              ; preds = %358, %355, %351, %337
  %362 = phi i32 [ %338, %337 ], [ %352, %351 ], [ %357, %355 ], [ %360, %358 ]
  %363 = phi i32 [ %340, %337 ], [ 8, %351 ], [ 7, %355 ], [ 8, %358 ]
  %364 = shl i32 %339, 1
  %365 = shl i32 %362, 1
  %366 = add i32 %363, -1
  %367 = icmp ult i32 %364, 32768
  br i1 %367, label %337, label %374

368:                                              ; preds = %322
  %369 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %271, i64 0, i32 1
  %370 = load i32, i32* %369, align 4
  br label %377

371:                                              ; preds = %315
  %372 = zext i1 %285 to i32
  %373 = select i1 %282, i32 %284, i32 %372
  br label %377

374:                                              ; preds = %361
  %375 = zext i1 %332 to i32
  %376 = select i1 %328, i32 %375, i32 %330
  br label %377

377:                                              ; preds = %374, %371, %368
  %378 = phi i32 [ %324, %368 ], [ %319, %371 ], [ %365, %374 ]
  %379 = phi i32 [ %278, %368 ], [ %318, %371 ], [ %364, %374 ]
  %380 = phi i32 [ %274, %368 ], [ %320, %371 ], [ %366, %374 ]
  %381 = phi i32 [ %370, %368 ], [ %373, %371 ], [ %376, %374 ]
  %382 = shl i32 %275, 1
  %383 = or i32 %381, %382
  switch i32 %383, label %2411 [
    i32 0, label %384
    i32 1, label %631
    i32 2, label %901
    i32 3, label %1171
  ]

384:                                              ; preds = %377
  %385 = getelementptr inbounds i32, i32* %49, i64 -1
  %386 = load i32, i32* %385, align 4
  %387 = getelementptr inbounds i32, i32* %49, i64 1
  %388 = load i32, i32* %387, align 4
  %389 = lshr i32 %386, 19
  %390 = and i32 %389, 1
  %391 = lshr i32 %388, 17
  %392 = and i32 %391, 4
  %393 = or i32 %392, %390
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i64
  %398 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %397
  %399 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %398, align 8
  %400 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 0
  %401 = load i32, i32* %400, align 8
  %402 = sub i32 %379, %401
  %403 = lshr i32 %378, 16
  %404 = icmp ult i32 %403, %401
  br i1 %404, label %405, label %449

405:                                              ; preds = %384
  %406 = icmp ult i32 %402, %401
  %407 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 1
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %408, 0
  %410 = zext i1 %409 to i32
  %411 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 3
  %412 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 2
  %413 = select i1 %406, %struct.opj_mqc_state** %412, %struct.opj_mqc_state** %411
  %414 = select i1 %406, i32 %408, i32 %410
  %415 = bitcast %struct.opj_mqc_state** %413 to i64*
  %416 = load i64, i64* %415, align 8
  %417 = bitcast %struct.opj_mqc_state** %398 to i64*
  store i64 %416, i64* %417, align 8
  br label %418

418:                                              ; preds = %442, %405
  %419 = phi i32 [ %378, %405 ], [ %446, %442 ]
  %420 = phi i32 [ %401, %405 ], [ %445, %442 ]
  %421 = phi i32 [ %380, %405 ], [ %447, %442 ]
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %423, label %442

423:                                              ; preds = %418
  %424 = load i8*, i8** %31, align 8
  %425 = getelementptr inbounds i8, i8* %424, i64 1
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = load i8, i8* %424, align 1
  %429 = icmp eq i8 %428, -1
  br i1 %429, label %430, label %439

430:                                              ; preds = %423
  %431 = icmp ugt i8 %426, -113
  br i1 %431, label %432, label %436

432:                                              ; preds = %430
  %433 = add i32 %419, 65280
  %434 = load i32, i32* %32, align 4
  %435 = add i32 %434, 1
  store i32 %435, i32* %32, align 4
  br label %442

436:                                              ; preds = %430
  store i8* %425, i8** %31, align 8
  %437 = shl nuw nsw i32 %427, 9
  %438 = add i32 %437, %419
  br label %442

439:                                              ; preds = %423
  store i8* %425, i8** %31, align 8
  %440 = shl nuw nsw i32 %427, 8
  %441 = add i32 %440, %419
  br label %442

442:                                              ; preds = %439, %436, %432, %418
  %443 = phi i32 [ %419, %418 ], [ %433, %432 ], [ %438, %436 ], [ %441, %439 ]
  %444 = phi i32 [ %421, %418 ], [ 8, %432 ], [ 7, %436 ], [ 8, %439 ]
  %445 = shl i32 %420, 1
  %446 = shl i32 %443, 1
  %447 = add i32 %444, -1
  %448 = icmp ult i32 %445, 32768
  br i1 %448, label %418, label %501

449:                                              ; preds = %384
  %450 = shl i32 %401, 16
  %451 = sub i32 %378, %450
  %452 = trunc i32 %402 to i16
  %453 = icmp sgt i16 %452, -1
  br i1 %453, label %454, label %498

454:                                              ; preds = %449
  %455 = icmp ult i32 %402, %401
  %456 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 1
  %457 = load i32, i32* %456, align 4
  %458 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 2
  %459 = icmp eq i32 %457, 0
  %460 = zext i1 %459 to i32
  %461 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 3
  %462 = select i1 %455, %struct.opj_mqc_state** %461, %struct.opj_mqc_state** %458
  %463 = select i1 %455, i32 %460, i32 %457
  %464 = bitcast %struct.opj_mqc_state** %462 to i64*
  %465 = load i64, i64* %464, align 8
  %466 = bitcast %struct.opj_mqc_state** %398 to i64*
  store i64 %465, i64* %466, align 8
  br label %467

467:                                              ; preds = %491, %454
  %468 = phi i32 [ %451, %454 ], [ %495, %491 ]
  %469 = phi i32 [ %402, %454 ], [ %494, %491 ]
  %470 = phi i32 [ %380, %454 ], [ %496, %491 ]
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %491

472:                                              ; preds = %467
  %473 = load i8*, i8** %31, align 8
  %474 = getelementptr inbounds i8, i8* %473, i64 1
  %475 = load i8, i8* %474, align 1
  %476 = zext i8 %475 to i32
  %477 = load i8, i8* %473, align 1
  %478 = icmp eq i8 %477, -1
  br i1 %478, label %479, label %488

479:                                              ; preds = %472
  %480 = icmp ugt i8 %475, -113
  br i1 %480, label %481, label %485

481:                                              ; preds = %479
  %482 = add i32 %468, 65280
  %483 = load i32, i32* %32, align 4
  %484 = add i32 %483, 1
  store i32 %484, i32* %32, align 4
  br label %491

485:                                              ; preds = %479
  store i8* %474, i8** %31, align 8
  %486 = shl nuw nsw i32 %476, 9
  %487 = add i32 %486, %468
  br label %491

488:                                              ; preds = %472
  store i8* %474, i8** %31, align 8
  %489 = shl nuw nsw i32 %476, 8
  %490 = add i32 %489, %468
  br label %491

491:                                              ; preds = %488, %485, %481, %467
  %492 = phi i32 [ %468, %467 ], [ %482, %481 ], [ %487, %485 ], [ %490, %488 ]
  %493 = phi i32 [ %470, %467 ], [ 8, %481 ], [ 7, %485 ], [ 8, %488 ]
  %494 = shl i32 %469, 1
  %495 = shl i32 %492, 1
  %496 = add i32 %493, -1
  %497 = icmp ult i32 %494, 32768
  br i1 %497, label %467, label %501

498:                                              ; preds = %449
  %499 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %399, i64 0, i32 1
  %500 = load i32, i32* %499, align 4
  br label %501

501:                                              ; preds = %491, %442, %498
  %502 = phi i32 [ %451, %498 ], [ %446, %442 ], [ %495, %491 ]
  %503 = phi i32 [ %402, %498 ], [ %445, %442 ], [ %494, %491 ]
  %504 = phi i32 [ %380, %498 ], [ %447, %442 ], [ %496, %491 ]
  %505 = phi i32 [ %500, %498 ], [ %414, %442 ], [ %463, %491 ]
  %506 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %394
  %507 = load i8, i8* %506, align 1
  %508 = zext i8 %507 to i32
  %509 = xor i32 %505, %508
  %510 = icmp eq i32 %509, 0
  %511 = select i1 %510, i32 %29, i32 %33
  store i32 %511, i32* %48, align 4
  %512 = load i32, i32* %385, align 4
  %513 = or i32 %512, 32
  store i32 %513, i32* %385, align 4
  %514 = shl i32 %509, 19
  %515 = or i32 %514, 16
  %516 = load i32, i32* %387, align 4
  %517 = or i32 %516, 8
  store i32 %517, i32* %387, align 4
  %518 = load i8*, i8** %30, align 8
  %519 = getelementptr inbounds i8, i8* %518, i64 2
  %520 = load i8, i8* %519, align 1
  %521 = zext i8 %520 to i64
  %522 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %521
  %523 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %522, align 8
  %524 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 0
  %525 = load i32, i32* %524, align 8
  %526 = sub i32 %503, %525
  %527 = lshr i32 %502, 16
  %528 = icmp ult i32 %527, %525
  br i1 %528, label %529, label %573

529:                                              ; preds = %501
  %530 = icmp ult i32 %526, %525
  %531 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 1
  %532 = load i32, i32* %531, align 4
  %533 = icmp eq i32 %532, 0
  %534 = zext i1 %533 to i32
  %535 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 3
  %536 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 2
  %537 = select i1 %530, %struct.opj_mqc_state** %536, %struct.opj_mqc_state** %535
  %538 = select i1 %530, i32 %532, i32 %534
  %539 = bitcast %struct.opj_mqc_state** %537 to i64*
  %540 = load i64, i64* %539, align 8
  %541 = bitcast %struct.opj_mqc_state** %522 to i64*
  store i64 %540, i64* %541, align 8
  br label %542

542:                                              ; preds = %566, %529
  %543 = phi i32 [ %502, %529 ], [ %570, %566 ]
  %544 = phi i32 [ %525, %529 ], [ %569, %566 ]
  %545 = phi i32 [ %504, %529 ], [ %571, %566 ]
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %566

547:                                              ; preds = %542
  %548 = load i8*, i8** %31, align 8
  %549 = getelementptr inbounds i8, i8* %548, i64 1
  %550 = load i8, i8* %549, align 1
  %551 = zext i8 %550 to i32
  %552 = load i8, i8* %548, align 1
  %553 = icmp eq i8 %552, -1
  br i1 %553, label %554, label %563

554:                                              ; preds = %547
  %555 = icmp ugt i8 %550, -113
  br i1 %555, label %556, label %560

556:                                              ; preds = %554
  %557 = add i32 %543, 65280
  %558 = load i32, i32* %32, align 4
  %559 = add i32 %558, 1
  store i32 %559, i32* %32, align 4
  br label %566

560:                                              ; preds = %554
  store i8* %549, i8** %31, align 8
  %561 = shl nuw nsw i32 %551, 9
  %562 = add i32 %561, %543
  br label %566

563:                                              ; preds = %547
  store i8* %549, i8** %31, align 8
  %564 = shl nuw nsw i32 %551, 8
  %565 = add i32 %564, %543
  br label %566

566:                                              ; preds = %563, %560, %556, %542
  %567 = phi i32 [ %543, %542 ], [ %557, %556 ], [ %562, %560 ], [ %565, %563 ]
  %568 = phi i32 [ %545, %542 ], [ 8, %556 ], [ 7, %560 ], [ 8, %563 ]
  %569 = shl i32 %544, 1
  %570 = shl i32 %567, 1
  %571 = add i32 %568, -1
  %572 = icmp ult i32 %569, 32768
  br i1 %572, label %542, label %625

573:                                              ; preds = %501
  %574 = shl i32 %525, 16
  %575 = sub i32 %502, %574
  %576 = trunc i32 %526 to i16
  %577 = icmp sgt i16 %576, -1
  br i1 %577, label %578, label %622

578:                                              ; preds = %573
  %579 = icmp ult i32 %526, %525
  %580 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 1
  %581 = load i32, i32* %580, align 4
  %582 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 2
  %583 = icmp eq i32 %581, 0
  %584 = zext i1 %583 to i32
  %585 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 3
  %586 = select i1 %579, %struct.opj_mqc_state** %585, %struct.opj_mqc_state** %582
  %587 = select i1 %579, i32 %584, i32 %581
  %588 = bitcast %struct.opj_mqc_state** %586 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %struct.opj_mqc_state** %522 to i64*
  store i64 %589, i64* %590, align 8
  br label %591

591:                                              ; preds = %615, %578
  %592 = phi i32 [ %575, %578 ], [ %619, %615 ]
  %593 = phi i32 [ %526, %578 ], [ %618, %615 ]
  %594 = phi i32 [ %504, %578 ], [ %620, %615 ]
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %596, label %615

596:                                              ; preds = %591
  %597 = load i8*, i8** %31, align 8
  %598 = getelementptr inbounds i8, i8* %597, i64 1
  %599 = load i8, i8* %598, align 1
  %600 = zext i8 %599 to i32
  %601 = load i8, i8* %597, align 1
  %602 = icmp eq i8 %601, -1
  br i1 %602, label %603, label %612

603:                                              ; preds = %596
  %604 = icmp ugt i8 %599, -113
  br i1 %604, label %605, label %609

605:                                              ; preds = %603
  %606 = add i32 %592, 65280
  %607 = load i32, i32* %32, align 4
  %608 = add i32 %607, 1
  store i32 %608, i32* %32, align 4
  br label %615

609:                                              ; preds = %603
  store i8* %598, i8** %31, align 8
  %610 = shl nuw nsw i32 %600, 9
  %611 = add i32 %610, %592
  br label %615

612:                                              ; preds = %596
  store i8* %598, i8** %31, align 8
  %613 = shl nuw nsw i32 %600, 8
  %614 = add i32 %613, %592
  br label %615

615:                                              ; preds = %612, %609, %605, %591
  %616 = phi i32 [ %592, %591 ], [ %606, %605 ], [ %611, %609 ], [ %614, %612 ]
  %617 = phi i32 [ %594, %591 ], [ 8, %605 ], [ 7, %609 ], [ 8, %612 ]
  %618 = shl i32 %593, 1
  %619 = shl i32 %616, 1
  %620 = add i32 %617, -1
  %621 = icmp ult i32 %618, 32768
  br i1 %621, label %591, label %625

622:                                              ; preds = %573
  %623 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %523, i64 0, i32 1
  %624 = load i32, i32* %623, align 4
  br label %625

625:                                              ; preds = %615, %566, %622
  %626 = phi i32 [ %575, %622 ], [ %570, %566 ], [ %619, %615 ]
  %627 = phi i32 [ %526, %622 ], [ %569, %566 ], [ %618, %615 ]
  %628 = phi i32 [ %504, %622 ], [ %571, %566 ], [ %620, %615 ]
  %629 = phi i32 [ %624, %622 ], [ %538, %566 ], [ %587, %615 ]
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %780, label %631

631:                                              ; preds = %625, %377
  %632 = phi i32 [ %515, %625 ], [ 0, %377 ]
  %633 = phi i32 [ %626, %625 ], [ %378, %377 ]
  %634 = phi i32 [ %627, %625 ], [ %379, %377 ]
  %635 = phi i32 [ %628, %625 ], [ %380, %377 ]
  %636 = getelementptr inbounds i32, i32* %49, i64 -1
  %637 = load i32, i32* %636, align 4
  %638 = getelementptr inbounds i32, i32* %49, i64 1
  %639 = load i32, i32* %638, align 4
  %640 = lshr i32 %632, 3
  %641 = and i32 %640, 170
  %642 = lshr i32 %637, 22
  %643 = and i32 %642, 1
  %644 = lshr i32 %639, 20
  %645 = and i32 %644, 4
  %646 = lshr i32 %632, 15
  %647 = and i32 %646, 16
  %648 = lshr i32 %632, 19
  %649 = and i32 %648, 64
  %650 = or i32 %649, %641
  %651 = or i32 %650, %647
  %652 = or i32 %651, %643
  %653 = or i32 %652, %645
  %654 = zext i32 %653 to i64
  %655 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %654
  %656 = load i8, i8* %655, align 1
  %657 = zext i8 %656 to i64
  %658 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %657
  %659 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %658, align 8
  %660 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 0
  %661 = load i32, i32* %660, align 8
  %662 = sub i32 %634, %661
  %663 = lshr i32 %633, 16
  %664 = icmp ult i32 %663, %661
  br i1 %664, label %665, label %709

665:                                              ; preds = %631
  %666 = icmp ult i32 %662, %661
  %667 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 1
  %668 = load i32, i32* %667, align 4
  %669 = icmp eq i32 %668, 0
  %670 = zext i1 %669 to i32
  %671 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 3
  %672 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 2
  %673 = select i1 %666, %struct.opj_mqc_state** %672, %struct.opj_mqc_state** %671
  %674 = select i1 %666, i32 %668, i32 %670
  %675 = bitcast %struct.opj_mqc_state** %673 to i64*
  %676 = load i64, i64* %675, align 8
  %677 = bitcast %struct.opj_mqc_state** %658 to i64*
  store i64 %676, i64* %677, align 8
  br label %678

678:                                              ; preds = %702, %665
  %679 = phi i32 [ %633, %665 ], [ %706, %702 ]
  %680 = phi i32 [ %661, %665 ], [ %705, %702 ]
  %681 = phi i32 [ %635, %665 ], [ %707, %702 ]
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %683, label %702

683:                                              ; preds = %678
  %684 = load i8*, i8** %31, align 8
  %685 = getelementptr inbounds i8, i8* %684, i64 1
  %686 = load i8, i8* %685, align 1
  %687 = zext i8 %686 to i32
  %688 = load i8, i8* %684, align 1
  %689 = icmp eq i8 %688, -1
  br i1 %689, label %690, label %699

690:                                              ; preds = %683
  %691 = icmp ugt i8 %686, -113
  br i1 %691, label %692, label %696

692:                                              ; preds = %690
  %693 = add i32 %679, 65280
  %694 = load i32, i32* %32, align 4
  %695 = add i32 %694, 1
  store i32 %695, i32* %32, align 4
  br label %702

696:                                              ; preds = %690
  store i8* %685, i8** %31, align 8
  %697 = shl nuw nsw i32 %687, 9
  %698 = add i32 %697, %679
  br label %702

699:                                              ; preds = %683
  store i8* %685, i8** %31, align 8
  %700 = shl nuw nsw i32 %687, 8
  %701 = add i32 %700, %679
  br label %702

702:                                              ; preds = %699, %696, %692, %678
  %703 = phi i32 [ %679, %678 ], [ %693, %692 ], [ %698, %696 ], [ %701, %699 ]
  %704 = phi i32 [ %681, %678 ], [ 8, %692 ], [ 7, %696 ], [ 8, %699 ]
  %705 = shl i32 %680, 1
  %706 = shl i32 %703, 1
  %707 = add i32 %704, -1
  %708 = icmp ult i32 %705, 32768
  br i1 %708, label %678, label %761

709:                                              ; preds = %631
  %710 = shl i32 %661, 16
  %711 = sub i32 %633, %710
  %712 = trunc i32 %662 to i16
  %713 = icmp sgt i16 %712, -1
  br i1 %713, label %714, label %758

714:                                              ; preds = %709
  %715 = icmp ult i32 %662, %661
  %716 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 1
  %717 = load i32, i32* %716, align 4
  %718 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 2
  %719 = icmp eq i32 %717, 0
  %720 = zext i1 %719 to i32
  %721 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 3
  %722 = select i1 %715, %struct.opj_mqc_state** %721, %struct.opj_mqc_state** %718
  %723 = select i1 %715, i32 %720, i32 %717
  %724 = bitcast %struct.opj_mqc_state** %722 to i64*
  %725 = load i64, i64* %724, align 8
  %726 = bitcast %struct.opj_mqc_state** %658 to i64*
  store i64 %725, i64* %726, align 8
  br label %727

727:                                              ; preds = %751, %714
  %728 = phi i32 [ %711, %714 ], [ %755, %751 ]
  %729 = phi i32 [ %662, %714 ], [ %754, %751 ]
  %730 = phi i32 [ %635, %714 ], [ %756, %751 ]
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %732, label %751

732:                                              ; preds = %727
  %733 = load i8*, i8** %31, align 8
  %734 = getelementptr inbounds i8, i8* %733, i64 1
  %735 = load i8, i8* %734, align 1
  %736 = zext i8 %735 to i32
  %737 = load i8, i8* %733, align 1
  %738 = icmp eq i8 %737, -1
  br i1 %738, label %739, label %748

739:                                              ; preds = %732
  %740 = icmp ugt i8 %735, -113
  br i1 %740, label %741, label %745

741:                                              ; preds = %739
  %742 = add i32 %728, 65280
  %743 = load i32, i32* %32, align 4
  %744 = add i32 %743, 1
  store i32 %744, i32* %32, align 4
  br label %751

745:                                              ; preds = %739
  store i8* %734, i8** %31, align 8
  %746 = shl nuw nsw i32 %736, 9
  %747 = add i32 %746, %728
  br label %751

748:                                              ; preds = %732
  store i8* %734, i8** %31, align 8
  %749 = shl nuw nsw i32 %736, 8
  %750 = add i32 %749, %728
  br label %751

751:                                              ; preds = %748, %745, %741, %727
  %752 = phi i32 [ %728, %727 ], [ %742, %741 ], [ %747, %745 ], [ %750, %748 ]
  %753 = phi i32 [ %730, %727 ], [ 8, %741 ], [ 7, %745 ], [ 8, %748 ]
  %754 = shl i32 %729, 1
  %755 = shl i32 %752, 1
  %756 = add i32 %753, -1
  %757 = icmp ult i32 %754, 32768
  br i1 %757, label %727, label %761

758:                                              ; preds = %709
  %759 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %659, i64 0, i32 1
  %760 = load i32, i32* %759, align 4
  br label %761

761:                                              ; preds = %751, %702, %758
  %762 = phi i32 [ %711, %758 ], [ %706, %702 ], [ %755, %751 ]
  %763 = phi i32 [ %662, %758 ], [ %705, %702 ], [ %754, %751 ]
  %764 = phi i32 [ %635, %758 ], [ %707, %702 ], [ %756, %751 ]
  %765 = phi i32 [ %760, %758 ], [ %674, %702 ], [ %723, %751 ]
  %766 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %654
  %767 = load i8, i8* %766, align 1
  %768 = zext i8 %767 to i32
  %769 = xor i32 %765, %768
  %770 = icmp eq i32 %769, 0
  %771 = select i1 %770, i32 %29, i32 %33
  %772 = getelementptr inbounds i32, i32* %48, i64 64
  store i32 %771, i32* %772, align 4
  %773 = load i32, i32* %636, align 4
  %774 = or i32 %773, 256
  store i32 %774, i32* %636, align 4
  %775 = shl i32 %769, 22
  %776 = or i32 %632, %775
  %777 = or i32 %776, 128
  %778 = load i32, i32* %638, align 4
  %779 = or i32 %778, 64
  store i32 %779, i32* %638, align 4
  br label %780

780:                                              ; preds = %761, %625
  %781 = phi i32 [ %626, %625 ], [ %762, %761 ]
  %782 = phi i32 [ %627, %625 ], [ %763, %761 ]
  %783 = phi i32 [ %628, %625 ], [ %764, %761 ]
  %784 = phi i32 [ %515, %625 ], [ %777, %761 ]
  %785 = lshr i32 %784, 6
  %786 = load i8*, i8** %30, align 8
  %787 = and i32 %785, 495
  %788 = zext i32 %787 to i64
  %789 = getelementptr inbounds i8, i8* %786, i64 %788
  %790 = load i8, i8* %789, align 1
  %791 = zext i8 %790 to i64
  %792 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %791
  %793 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %792, align 8
  %794 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 0
  %795 = load i32, i32* %794, align 8
  %796 = sub i32 %782, %795
  %797 = lshr i32 %781, 16
  %798 = icmp ult i32 %797, %795
  br i1 %798, label %799, label %843

799:                                              ; preds = %780
  %800 = icmp ult i32 %796, %795
  %801 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 1
  %802 = load i32, i32* %801, align 4
  %803 = icmp eq i32 %802, 0
  %804 = zext i1 %803 to i32
  %805 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 3
  %806 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 2
  %807 = select i1 %800, %struct.opj_mqc_state** %806, %struct.opj_mqc_state** %805
  %808 = select i1 %800, i32 %802, i32 %804
  %809 = bitcast %struct.opj_mqc_state** %807 to i64*
  %810 = load i64, i64* %809, align 8
  %811 = bitcast %struct.opj_mqc_state** %792 to i64*
  store i64 %810, i64* %811, align 8
  br label %812

812:                                              ; preds = %836, %799
  %813 = phi i32 [ %781, %799 ], [ %840, %836 ]
  %814 = phi i32 [ %795, %799 ], [ %839, %836 ]
  %815 = phi i32 [ %783, %799 ], [ %841, %836 ]
  %816 = icmp eq i32 %815, 0
  br i1 %816, label %817, label %836

817:                                              ; preds = %812
  %818 = load i8*, i8** %31, align 8
  %819 = getelementptr inbounds i8, i8* %818, i64 1
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i32
  %822 = load i8, i8* %818, align 1
  %823 = icmp eq i8 %822, -1
  br i1 %823, label %824, label %833

824:                                              ; preds = %817
  %825 = icmp ugt i8 %820, -113
  br i1 %825, label %826, label %830

826:                                              ; preds = %824
  %827 = add i32 %813, 65280
  %828 = load i32, i32* %32, align 4
  %829 = add i32 %828, 1
  store i32 %829, i32* %32, align 4
  br label %836

830:                                              ; preds = %824
  store i8* %819, i8** %31, align 8
  %831 = shl nuw nsw i32 %821, 9
  %832 = add i32 %831, %813
  br label %836

833:                                              ; preds = %817
  store i8* %819, i8** %31, align 8
  %834 = shl nuw nsw i32 %821, 8
  %835 = add i32 %834, %813
  br label %836

836:                                              ; preds = %833, %830, %826, %812
  %837 = phi i32 [ %813, %812 ], [ %827, %826 ], [ %832, %830 ], [ %835, %833 ]
  %838 = phi i32 [ %815, %812 ], [ 8, %826 ], [ 7, %830 ], [ 8, %833 ]
  %839 = shl i32 %814, 1
  %840 = shl i32 %837, 1
  %841 = add i32 %838, -1
  %842 = icmp ult i32 %839, 32768
  br i1 %842, label %812, label %895

843:                                              ; preds = %780
  %844 = shl i32 %795, 16
  %845 = sub i32 %781, %844
  %846 = trunc i32 %796 to i16
  %847 = icmp sgt i16 %846, -1
  br i1 %847, label %848, label %892

848:                                              ; preds = %843
  %849 = icmp ult i32 %796, %795
  %850 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 1
  %851 = load i32, i32* %850, align 4
  %852 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 2
  %853 = icmp eq i32 %851, 0
  %854 = zext i1 %853 to i32
  %855 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 3
  %856 = select i1 %849, %struct.opj_mqc_state** %855, %struct.opj_mqc_state** %852
  %857 = select i1 %849, i32 %854, i32 %851
  %858 = bitcast %struct.opj_mqc_state** %856 to i64*
  %859 = load i64, i64* %858, align 8
  %860 = bitcast %struct.opj_mqc_state** %792 to i64*
  store i64 %859, i64* %860, align 8
  br label %861

861:                                              ; preds = %885, %848
  %862 = phi i32 [ %845, %848 ], [ %889, %885 ]
  %863 = phi i32 [ %796, %848 ], [ %888, %885 ]
  %864 = phi i32 [ %783, %848 ], [ %890, %885 ]
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %866, label %885

866:                                              ; preds = %861
  %867 = load i8*, i8** %31, align 8
  %868 = getelementptr inbounds i8, i8* %867, i64 1
  %869 = load i8, i8* %868, align 1
  %870 = zext i8 %869 to i32
  %871 = load i8, i8* %867, align 1
  %872 = icmp eq i8 %871, -1
  br i1 %872, label %873, label %882

873:                                              ; preds = %866
  %874 = icmp ugt i8 %869, -113
  br i1 %874, label %875, label %879

875:                                              ; preds = %873
  %876 = add i32 %862, 65280
  %877 = load i32, i32* %32, align 4
  %878 = add i32 %877, 1
  store i32 %878, i32* %32, align 4
  br label %885

879:                                              ; preds = %873
  store i8* %868, i8** %31, align 8
  %880 = shl nuw nsw i32 %870, 9
  %881 = add i32 %880, %862
  br label %885

882:                                              ; preds = %866
  store i8* %868, i8** %31, align 8
  %883 = shl nuw nsw i32 %870, 8
  %884 = add i32 %883, %862
  br label %885

885:                                              ; preds = %882, %879, %875, %861
  %886 = phi i32 [ %862, %861 ], [ %876, %875 ], [ %881, %879 ], [ %884, %882 ]
  %887 = phi i32 [ %864, %861 ], [ 8, %875 ], [ 7, %879 ], [ 8, %882 ]
  %888 = shl i32 %863, 1
  %889 = shl i32 %886, 1
  %890 = add i32 %887, -1
  %891 = icmp ult i32 %888, 32768
  br i1 %891, label %861, label %895

892:                                              ; preds = %843
  %893 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %793, i64 0, i32 1
  %894 = load i32, i32* %893, align 4
  br label %895

895:                                              ; preds = %885, %836, %892
  %896 = phi i32 [ %845, %892 ], [ %840, %836 ], [ %889, %885 ]
  %897 = phi i32 [ %796, %892 ], [ %839, %836 ], [ %888, %885 ]
  %898 = phi i32 [ %783, %892 ], [ %841, %836 ], [ %890, %885 ]
  %899 = phi i32 [ %894, %892 ], [ %808, %836 ], [ %857, %885 ]
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %1050, label %901

901:                                              ; preds = %377, %895
  %902 = phi i32 [ %784, %895 ], [ 0, %377 ]
  %903 = phi i32 [ %896, %895 ], [ %378, %377 ]
  %904 = phi i32 [ %897, %895 ], [ %379, %377 ]
  %905 = phi i32 [ %898, %895 ], [ %380, %377 ]
  %906 = getelementptr inbounds i32, i32* %49, i64 -1
  %907 = load i32, i32* %906, align 4
  %908 = getelementptr inbounds i32, i32* %49, i64 1
  %909 = load i32, i32* %908, align 4
  %910 = lshr i32 %902, 6
  %911 = and i32 %910, 170
  %912 = lshr i32 %907, 25
  %913 = and i32 %912, 1
  %914 = lshr i32 %909, 23
  %915 = and i32 %914, 4
  %916 = lshr i32 %902, 18
  %917 = and i32 %916, 16
  %918 = lshr i32 %902, 22
  %919 = and i32 %918, 64
  %920 = or i32 %919, %911
  %921 = or i32 %920, %917
  %922 = or i32 %921, %913
  %923 = or i32 %922, %915
  %924 = zext i32 %923 to i64
  %925 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %924
  %926 = load i8, i8* %925, align 1
  %927 = zext i8 %926 to i64
  %928 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %927
  %929 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %928, align 8
  %930 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 0
  %931 = load i32, i32* %930, align 8
  %932 = sub i32 %904, %931
  %933 = lshr i32 %903, 16
  %934 = icmp ult i32 %933, %931
  br i1 %934, label %935, label %979

935:                                              ; preds = %901
  %936 = icmp ult i32 %932, %931
  %937 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 1
  %938 = load i32, i32* %937, align 4
  %939 = icmp eq i32 %938, 0
  %940 = zext i1 %939 to i32
  %941 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 3
  %942 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 2
  %943 = select i1 %936, %struct.opj_mqc_state** %942, %struct.opj_mqc_state** %941
  %944 = select i1 %936, i32 %938, i32 %940
  %945 = bitcast %struct.opj_mqc_state** %943 to i64*
  %946 = load i64, i64* %945, align 8
  %947 = bitcast %struct.opj_mqc_state** %928 to i64*
  store i64 %946, i64* %947, align 8
  br label %948

948:                                              ; preds = %972, %935
  %949 = phi i32 [ %903, %935 ], [ %976, %972 ]
  %950 = phi i32 [ %931, %935 ], [ %975, %972 ]
  %951 = phi i32 [ %905, %935 ], [ %977, %972 ]
  %952 = icmp eq i32 %951, 0
  br i1 %952, label %953, label %972

953:                                              ; preds = %948
  %954 = load i8*, i8** %31, align 8
  %955 = getelementptr inbounds i8, i8* %954, i64 1
  %956 = load i8, i8* %955, align 1
  %957 = zext i8 %956 to i32
  %958 = load i8, i8* %954, align 1
  %959 = icmp eq i8 %958, -1
  br i1 %959, label %960, label %969

960:                                              ; preds = %953
  %961 = icmp ugt i8 %956, -113
  br i1 %961, label %962, label %966

962:                                              ; preds = %960
  %963 = add i32 %949, 65280
  %964 = load i32, i32* %32, align 4
  %965 = add i32 %964, 1
  store i32 %965, i32* %32, align 4
  br label %972

966:                                              ; preds = %960
  store i8* %955, i8** %31, align 8
  %967 = shl nuw nsw i32 %957, 9
  %968 = add i32 %967, %949
  br label %972

969:                                              ; preds = %953
  store i8* %955, i8** %31, align 8
  %970 = shl nuw nsw i32 %957, 8
  %971 = add i32 %970, %949
  br label %972

972:                                              ; preds = %969, %966, %962, %948
  %973 = phi i32 [ %949, %948 ], [ %963, %962 ], [ %968, %966 ], [ %971, %969 ]
  %974 = phi i32 [ %951, %948 ], [ 8, %962 ], [ 7, %966 ], [ 8, %969 ]
  %975 = shl i32 %950, 1
  %976 = shl i32 %973, 1
  %977 = add i32 %974, -1
  %978 = icmp ult i32 %975, 32768
  br i1 %978, label %948, label %1031

979:                                              ; preds = %901
  %980 = shl i32 %931, 16
  %981 = sub i32 %903, %980
  %982 = trunc i32 %932 to i16
  %983 = icmp sgt i16 %982, -1
  br i1 %983, label %984, label %1028

984:                                              ; preds = %979
  %985 = icmp ult i32 %932, %931
  %986 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 1
  %987 = load i32, i32* %986, align 4
  %988 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 2
  %989 = icmp eq i32 %987, 0
  %990 = zext i1 %989 to i32
  %991 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 3
  %992 = select i1 %985, %struct.opj_mqc_state** %991, %struct.opj_mqc_state** %988
  %993 = select i1 %985, i32 %990, i32 %987
  %994 = bitcast %struct.opj_mqc_state** %992 to i64*
  %995 = load i64, i64* %994, align 8
  %996 = bitcast %struct.opj_mqc_state** %928 to i64*
  store i64 %995, i64* %996, align 8
  br label %997

997:                                              ; preds = %1021, %984
  %998 = phi i32 [ %981, %984 ], [ %1025, %1021 ]
  %999 = phi i32 [ %932, %984 ], [ %1024, %1021 ]
  %1000 = phi i32 [ %905, %984 ], [ %1026, %1021 ]
  %1001 = icmp eq i32 %1000, 0
  br i1 %1001, label %1002, label %1021

1002:                                             ; preds = %997
  %1003 = load i8*, i8** %31, align 8
  %1004 = getelementptr inbounds i8, i8* %1003, i64 1
  %1005 = load i8, i8* %1004, align 1
  %1006 = zext i8 %1005 to i32
  %1007 = load i8, i8* %1003, align 1
  %1008 = icmp eq i8 %1007, -1
  br i1 %1008, label %1009, label %1018

1009:                                             ; preds = %1002
  %1010 = icmp ugt i8 %1005, -113
  br i1 %1010, label %1011, label %1015

1011:                                             ; preds = %1009
  %1012 = add i32 %998, 65280
  %1013 = load i32, i32* %32, align 4
  %1014 = add i32 %1013, 1
  store i32 %1014, i32* %32, align 4
  br label %1021

1015:                                             ; preds = %1009
  store i8* %1004, i8** %31, align 8
  %1016 = shl nuw nsw i32 %1006, 9
  %1017 = add i32 %1016, %998
  br label %1021

1018:                                             ; preds = %1002
  store i8* %1004, i8** %31, align 8
  %1019 = shl nuw nsw i32 %1006, 8
  %1020 = add i32 %1019, %998
  br label %1021

1021:                                             ; preds = %1018, %1015, %1011, %997
  %1022 = phi i32 [ %998, %997 ], [ %1012, %1011 ], [ %1017, %1015 ], [ %1020, %1018 ]
  %1023 = phi i32 [ %1000, %997 ], [ 8, %1011 ], [ 7, %1015 ], [ 8, %1018 ]
  %1024 = shl i32 %999, 1
  %1025 = shl i32 %1022, 1
  %1026 = add i32 %1023, -1
  %1027 = icmp ult i32 %1024, 32768
  br i1 %1027, label %997, label %1031

1028:                                             ; preds = %979
  %1029 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %929, i64 0, i32 1
  %1030 = load i32, i32* %1029, align 4
  br label %1031

1031:                                             ; preds = %1021, %972, %1028
  %1032 = phi i32 [ %981, %1028 ], [ %976, %972 ], [ %1025, %1021 ]
  %1033 = phi i32 [ %932, %1028 ], [ %975, %972 ], [ %1024, %1021 ]
  %1034 = phi i32 [ %905, %1028 ], [ %977, %972 ], [ %1026, %1021 ]
  %1035 = phi i32 [ %1030, %1028 ], [ %944, %972 ], [ %993, %1021 ]
  %1036 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %924
  %1037 = load i8, i8* %1036, align 1
  %1038 = zext i8 %1037 to i32
  %1039 = xor i32 %1035, %1038
  %1040 = icmp eq i32 %1039, 0
  %1041 = select i1 %1040, i32 %29, i32 %33
  %1042 = getelementptr inbounds i32, i32* %48, i64 128
  store i32 %1041, i32* %1042, align 4
  %1043 = load i32, i32* %906, align 4
  %1044 = or i32 %1043, 2048
  store i32 %1044, i32* %906, align 4
  %1045 = shl i32 %1039, 25
  %1046 = or i32 %902, %1045
  %1047 = or i32 %1046, 1024
  %1048 = load i32, i32* %908, align 4
  %1049 = or i32 %1048, 512
  store i32 %1049, i32* %908, align 4
  br label %1050

1050:                                             ; preds = %1031, %895
  %1051 = phi i32 [ %896, %895 ], [ %1032, %1031 ]
  %1052 = phi i32 [ %897, %895 ], [ %1033, %1031 ]
  %1053 = phi i32 [ %898, %895 ], [ %1034, %1031 ]
  %1054 = phi i32 [ %784, %895 ], [ %1047, %1031 ]
  %1055 = lshr i32 %1054, 9
  %1056 = load i8*, i8** %30, align 8
  %1057 = and i32 %1055, 495
  %1058 = zext i32 %1057 to i64
  %1059 = getelementptr inbounds i8, i8* %1056, i64 %1058
  %1060 = load i8, i8* %1059, align 1
  %1061 = zext i8 %1060 to i64
  %1062 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1061
  %1063 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1062, align 8
  %1064 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 0
  %1065 = load i32, i32* %1064, align 8
  %1066 = sub i32 %1052, %1065
  %1067 = lshr i32 %1051, 16
  %1068 = icmp ult i32 %1067, %1065
  br i1 %1068, label %1069, label %1113

1069:                                             ; preds = %1050
  %1070 = icmp ult i32 %1066, %1065
  %1071 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 1
  %1072 = load i32, i32* %1071, align 4
  %1073 = icmp eq i32 %1072, 0
  %1074 = zext i1 %1073 to i32
  %1075 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 3
  %1076 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 2
  %1077 = select i1 %1070, %struct.opj_mqc_state** %1076, %struct.opj_mqc_state** %1075
  %1078 = select i1 %1070, i32 %1072, i32 %1074
  %1079 = bitcast %struct.opj_mqc_state** %1077 to i64*
  %1080 = load i64, i64* %1079, align 8
  %1081 = bitcast %struct.opj_mqc_state** %1062 to i64*
  store i64 %1080, i64* %1081, align 8
  br label %1082

1082:                                             ; preds = %1106, %1069
  %1083 = phi i32 [ %1051, %1069 ], [ %1110, %1106 ]
  %1084 = phi i32 [ %1065, %1069 ], [ %1109, %1106 ]
  %1085 = phi i32 [ %1053, %1069 ], [ %1111, %1106 ]
  %1086 = icmp eq i32 %1085, 0
  br i1 %1086, label %1087, label %1106

1087:                                             ; preds = %1082
  %1088 = load i8*, i8** %31, align 8
  %1089 = getelementptr inbounds i8, i8* %1088, i64 1
  %1090 = load i8, i8* %1089, align 1
  %1091 = zext i8 %1090 to i32
  %1092 = load i8, i8* %1088, align 1
  %1093 = icmp eq i8 %1092, -1
  br i1 %1093, label %1094, label %1103

1094:                                             ; preds = %1087
  %1095 = icmp ugt i8 %1090, -113
  br i1 %1095, label %1096, label %1100

1096:                                             ; preds = %1094
  %1097 = add i32 %1083, 65280
  %1098 = load i32, i32* %32, align 4
  %1099 = add i32 %1098, 1
  store i32 %1099, i32* %32, align 4
  br label %1106

1100:                                             ; preds = %1094
  store i8* %1089, i8** %31, align 8
  %1101 = shl nuw nsw i32 %1091, 9
  %1102 = add i32 %1101, %1083
  br label %1106

1103:                                             ; preds = %1087
  store i8* %1089, i8** %31, align 8
  %1104 = shl nuw nsw i32 %1091, 8
  %1105 = add i32 %1104, %1083
  br label %1106

1106:                                             ; preds = %1103, %1100, %1096, %1082
  %1107 = phi i32 [ %1083, %1082 ], [ %1097, %1096 ], [ %1102, %1100 ], [ %1105, %1103 ]
  %1108 = phi i32 [ %1085, %1082 ], [ 8, %1096 ], [ 7, %1100 ], [ 8, %1103 ]
  %1109 = shl i32 %1084, 1
  %1110 = shl i32 %1107, 1
  %1111 = add i32 %1108, -1
  %1112 = icmp ult i32 %1109, 32768
  br i1 %1112, label %1082, label %1165

1113:                                             ; preds = %1050
  %1114 = shl i32 %1065, 16
  %1115 = sub i32 %1051, %1114
  %1116 = trunc i32 %1066 to i16
  %1117 = icmp sgt i16 %1116, -1
  br i1 %1117, label %1118, label %1162

1118:                                             ; preds = %1113
  %1119 = icmp ult i32 %1066, %1065
  %1120 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 1
  %1121 = load i32, i32* %1120, align 4
  %1122 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 2
  %1123 = icmp eq i32 %1121, 0
  %1124 = zext i1 %1123 to i32
  %1125 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 3
  %1126 = select i1 %1119, %struct.opj_mqc_state** %1125, %struct.opj_mqc_state** %1122
  %1127 = select i1 %1119, i32 %1124, i32 %1121
  %1128 = bitcast %struct.opj_mqc_state** %1126 to i64*
  %1129 = load i64, i64* %1128, align 8
  %1130 = bitcast %struct.opj_mqc_state** %1062 to i64*
  store i64 %1129, i64* %1130, align 8
  br label %1131

1131:                                             ; preds = %1155, %1118
  %1132 = phi i32 [ %1115, %1118 ], [ %1159, %1155 ]
  %1133 = phi i32 [ %1066, %1118 ], [ %1158, %1155 ]
  %1134 = phi i32 [ %1053, %1118 ], [ %1160, %1155 ]
  %1135 = icmp eq i32 %1134, 0
  br i1 %1135, label %1136, label %1155

1136:                                             ; preds = %1131
  %1137 = load i8*, i8** %31, align 8
  %1138 = getelementptr inbounds i8, i8* %1137, i64 1
  %1139 = load i8, i8* %1138, align 1
  %1140 = zext i8 %1139 to i32
  %1141 = load i8, i8* %1137, align 1
  %1142 = icmp eq i8 %1141, -1
  br i1 %1142, label %1143, label %1152

1143:                                             ; preds = %1136
  %1144 = icmp ugt i8 %1139, -113
  br i1 %1144, label %1145, label %1149

1145:                                             ; preds = %1143
  %1146 = add i32 %1132, 65280
  %1147 = load i32, i32* %32, align 4
  %1148 = add i32 %1147, 1
  store i32 %1148, i32* %32, align 4
  br label %1155

1149:                                             ; preds = %1143
  store i8* %1138, i8** %31, align 8
  %1150 = shl nuw nsw i32 %1140, 9
  %1151 = add i32 %1150, %1132
  br label %1155

1152:                                             ; preds = %1136
  store i8* %1138, i8** %31, align 8
  %1153 = shl nuw nsw i32 %1140, 8
  %1154 = add i32 %1153, %1132
  br label %1155

1155:                                             ; preds = %1152, %1149, %1145, %1131
  %1156 = phi i32 [ %1132, %1131 ], [ %1146, %1145 ], [ %1151, %1149 ], [ %1154, %1152 ]
  %1157 = phi i32 [ %1134, %1131 ], [ 8, %1145 ], [ 7, %1149 ], [ 8, %1152 ]
  %1158 = shl i32 %1133, 1
  %1159 = shl i32 %1156, 1
  %1160 = add i32 %1157, -1
  %1161 = icmp ult i32 %1158, 32768
  br i1 %1161, label %1131, label %1165

1162:                                             ; preds = %1113
  %1163 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1063, i64 0, i32 1
  %1164 = load i32, i32* %1163, align 4
  br label %1165

1165:                                             ; preds = %1155, %1106, %1162
  %1166 = phi i32 [ %1115, %1162 ], [ %1110, %1106 ], [ %1159, %1155 ]
  %1167 = phi i32 [ %1066, %1162 ], [ %1109, %1106 ], [ %1158, %1155 ]
  %1168 = phi i32 [ %1053, %1162 ], [ %1111, %1106 ], [ %1160, %1155 ]
  %1169 = phi i32 [ %1164, %1162 ], [ %1078, %1106 ], [ %1127, %1155 ]
  %1170 = icmp eq i32 %1169, 0
  br i1 %1170, label %2411, label %1171

1171:                                             ; preds = %377, %1165
  %1172 = phi i32 [ %1054, %1165 ], [ 0, %377 ]
  %1173 = phi i32 [ %1166, %1165 ], [ %378, %377 ]
  %1174 = phi i32 [ %1167, %1165 ], [ %379, %377 ]
  %1175 = phi i32 [ %1168, %1165 ], [ %380, %377 ]
  %1176 = getelementptr inbounds i32, i32* %49, i64 -1
  %1177 = load i32, i32* %1176, align 4
  %1178 = getelementptr inbounds i32, i32* %49, i64 1
  %1179 = load i32, i32* %1178, align 4
  %1180 = lshr i32 %1172, 9
  %1181 = and i32 %1180, 170
  %1182 = lshr i32 %1177, 28
  %1183 = and i32 %1182, 1
  %1184 = lshr i32 %1179, 26
  %1185 = and i32 %1184, 4
  %1186 = lshr i32 %1172, 21
  %1187 = and i32 %1186, 16
  %1188 = lshr i32 %1172, 25
  %1189 = and i32 %1188, 64
  %1190 = or i32 %1189, %1181
  %1191 = or i32 %1190, %1187
  %1192 = or i32 %1191, %1183
  %1193 = or i32 %1192, %1185
  %1194 = zext i32 %1193 to i64
  %1195 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1194
  %1196 = load i8, i8* %1195, align 1
  %1197 = zext i8 %1196 to i64
  %1198 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1197
  %1199 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1198, align 8
  %1200 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 0
  %1201 = load i32, i32* %1200, align 8
  %1202 = sub i32 %1174, %1201
  %1203 = lshr i32 %1173, 16
  %1204 = icmp ult i32 %1203, %1201
  br i1 %1204, label %1205, label %1249

1205:                                             ; preds = %1171
  %1206 = icmp ult i32 %1202, %1201
  %1207 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 1
  %1208 = load i32, i32* %1207, align 4
  %1209 = icmp eq i32 %1208, 0
  %1210 = zext i1 %1209 to i32
  %1211 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 3
  %1212 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 2
  %1213 = select i1 %1206, %struct.opj_mqc_state** %1212, %struct.opj_mqc_state** %1211
  %1214 = select i1 %1206, i32 %1208, i32 %1210
  %1215 = bitcast %struct.opj_mqc_state** %1213 to i64*
  %1216 = load i64, i64* %1215, align 8
  %1217 = bitcast %struct.opj_mqc_state** %1198 to i64*
  store i64 %1216, i64* %1217, align 8
  br label %1218

1218:                                             ; preds = %1242, %1205
  %1219 = phi i32 [ %1173, %1205 ], [ %1246, %1242 ]
  %1220 = phi i32 [ %1201, %1205 ], [ %1245, %1242 ]
  %1221 = phi i32 [ %1175, %1205 ], [ %1247, %1242 ]
  %1222 = icmp eq i32 %1221, 0
  br i1 %1222, label %1223, label %1242

1223:                                             ; preds = %1218
  %1224 = load i8*, i8** %31, align 8
  %1225 = getelementptr inbounds i8, i8* %1224, i64 1
  %1226 = load i8, i8* %1225, align 1
  %1227 = zext i8 %1226 to i32
  %1228 = load i8, i8* %1224, align 1
  %1229 = icmp eq i8 %1228, -1
  br i1 %1229, label %1230, label %1239

1230:                                             ; preds = %1223
  %1231 = icmp ugt i8 %1226, -113
  br i1 %1231, label %1232, label %1236

1232:                                             ; preds = %1230
  %1233 = add i32 %1219, 65280
  %1234 = load i32, i32* %32, align 4
  %1235 = add i32 %1234, 1
  store i32 %1235, i32* %32, align 4
  br label %1242

1236:                                             ; preds = %1230
  store i8* %1225, i8** %31, align 8
  %1237 = shl nuw nsw i32 %1227, 9
  %1238 = add i32 %1237, %1219
  br label %1242

1239:                                             ; preds = %1223
  store i8* %1225, i8** %31, align 8
  %1240 = shl nuw nsw i32 %1227, 8
  %1241 = add i32 %1240, %1219
  br label %1242

1242:                                             ; preds = %1239, %1236, %1232, %1218
  %1243 = phi i32 [ %1219, %1218 ], [ %1233, %1232 ], [ %1238, %1236 ], [ %1241, %1239 ]
  %1244 = phi i32 [ %1221, %1218 ], [ 8, %1232 ], [ 7, %1236 ], [ 8, %1239 ]
  %1245 = shl i32 %1220, 1
  %1246 = shl i32 %1243, 1
  %1247 = add i32 %1244, -1
  %1248 = icmp ult i32 %1245, 32768
  br i1 %1248, label %1218, label %1301

1249:                                             ; preds = %1171
  %1250 = shl i32 %1201, 16
  %1251 = sub i32 %1173, %1250
  %1252 = trunc i32 %1202 to i16
  %1253 = icmp sgt i16 %1252, -1
  br i1 %1253, label %1254, label %1298

1254:                                             ; preds = %1249
  %1255 = icmp ult i32 %1202, %1201
  %1256 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 1
  %1257 = load i32, i32* %1256, align 4
  %1258 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 2
  %1259 = icmp eq i32 %1257, 0
  %1260 = zext i1 %1259 to i32
  %1261 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 3
  %1262 = select i1 %1255, %struct.opj_mqc_state** %1261, %struct.opj_mqc_state** %1258
  %1263 = select i1 %1255, i32 %1260, i32 %1257
  %1264 = bitcast %struct.opj_mqc_state** %1262 to i64*
  %1265 = load i64, i64* %1264, align 8
  %1266 = bitcast %struct.opj_mqc_state** %1198 to i64*
  store i64 %1265, i64* %1266, align 8
  br label %1267

1267:                                             ; preds = %1291, %1254
  %1268 = phi i32 [ %1251, %1254 ], [ %1295, %1291 ]
  %1269 = phi i32 [ %1202, %1254 ], [ %1294, %1291 ]
  %1270 = phi i32 [ %1175, %1254 ], [ %1296, %1291 ]
  %1271 = icmp eq i32 %1270, 0
  br i1 %1271, label %1272, label %1291

1272:                                             ; preds = %1267
  %1273 = load i8*, i8** %31, align 8
  %1274 = getelementptr inbounds i8, i8* %1273, i64 1
  %1275 = load i8, i8* %1274, align 1
  %1276 = zext i8 %1275 to i32
  %1277 = load i8, i8* %1273, align 1
  %1278 = icmp eq i8 %1277, -1
  br i1 %1278, label %1279, label %1288

1279:                                             ; preds = %1272
  %1280 = icmp ugt i8 %1275, -113
  br i1 %1280, label %1281, label %1285

1281:                                             ; preds = %1279
  %1282 = add i32 %1268, 65280
  %1283 = load i32, i32* %32, align 4
  %1284 = add i32 %1283, 1
  store i32 %1284, i32* %32, align 4
  br label %1291

1285:                                             ; preds = %1279
  store i8* %1274, i8** %31, align 8
  %1286 = shl nuw nsw i32 %1276, 9
  %1287 = add i32 %1286, %1268
  br label %1291

1288:                                             ; preds = %1272
  store i8* %1274, i8** %31, align 8
  %1289 = shl nuw nsw i32 %1276, 8
  %1290 = add i32 %1289, %1268
  br label %1291

1291:                                             ; preds = %1288, %1285, %1281, %1267
  %1292 = phi i32 [ %1268, %1267 ], [ %1282, %1281 ], [ %1287, %1285 ], [ %1290, %1288 ]
  %1293 = phi i32 [ %1270, %1267 ], [ 8, %1281 ], [ 7, %1285 ], [ 8, %1288 ]
  %1294 = shl i32 %1269, 1
  %1295 = shl i32 %1292, 1
  %1296 = add i32 %1293, -1
  %1297 = icmp ult i32 %1294, 32768
  br i1 %1297, label %1267, label %1301

1298:                                             ; preds = %1249
  %1299 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1199, i64 0, i32 1
  %1300 = load i32, i32* %1299, align 4
  br label %1301

1301:                                             ; preds = %1291, %1242, %1298
  %1302 = phi i32 [ %1251, %1298 ], [ %1246, %1242 ], [ %1295, %1291 ]
  %1303 = phi i32 [ %1202, %1298 ], [ %1245, %1242 ], [ %1294, %1291 ]
  %1304 = phi i32 [ %1175, %1298 ], [ %1247, %1242 ], [ %1296, %1291 ]
  %1305 = phi i32 [ %1300, %1298 ], [ %1214, %1242 ], [ %1263, %1291 ]
  %1306 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1194
  %1307 = load i8, i8* %1306, align 1
  %1308 = zext i8 %1307 to i32
  %1309 = xor i32 %1305, %1308
  %1310 = icmp eq i32 %1309, 0
  %1311 = select i1 %1310, i32 %29, i32 %33
  %1312 = getelementptr inbounds i32, i32* %48, i64 192
  store i32 %1311, i32* %1312, align 4
  %1313 = load i32, i32* %1176, align 4
  %1314 = or i32 %1313, 16384
  store i32 %1314, i32* %1176, align 4
  %1315 = shl i32 %1309, 28
  %1316 = or i32 %1172, %1315
  %1317 = or i32 %1316, 8192
  %1318 = load i32, i32* %1178, align 4
  %1319 = or i32 %1318, 4096
  store i32 %1319, i32* %1178, align 4
  %1320 = getelementptr inbounds i32, i32* %49, i64 66
  %1321 = shl i32 %1309, 18
  %1322 = load i32, i32* %1320, align 4
  %1323 = or i32 %1321, %1322
  %1324 = or i32 %1323, 2
  store i32 %1324, i32* %1320, align 4
  %1325 = getelementptr inbounds i32, i32* %49, i64 65
  %1326 = load i32, i32* %1325, align 4
  %1327 = or i32 %1326, 4
  store i32 %1327, i32* %1325, align 4
  %1328 = getelementptr inbounds i32, i32* %49, i64 67
  %1329 = load i32, i32* %1328, align 4
  %1330 = or i32 %1329, 1
  store i32 %1330, i32* %1328, align 4
  br label %2411

1331:                                             ; preds = %46
  %1332 = and i32 %54, 2097168
  %1333 = icmp eq i32 %1332, 0
  br i1 %1333, label %1334, label %1593

1334:                                             ; preds = %1331
  %1335 = load i8*, i8** %30, align 8
  %1336 = and i32 %54, 495
  %1337 = zext i32 %1336 to i64
  %1338 = getelementptr inbounds i8, i8* %1335, i64 %1337
  %1339 = load i8, i8* %1338, align 1
  %1340 = zext i8 %1339 to i64
  %1341 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1340
  %1342 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1341, align 8
  %1343 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 0
  %1344 = load i32, i32* %1343, align 8
  %1345 = sub i32 %52, %1344
  %1346 = lshr i32 %53, 16
  %1347 = icmp ult i32 %1346, %1344
  br i1 %1347, label %1348, label %1392

1348:                                             ; preds = %1334
  %1349 = icmp ult i32 %1345, %1344
  %1350 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 1
  %1351 = load i32, i32* %1350, align 4
  %1352 = icmp eq i32 %1351, 0
  %1353 = zext i1 %1352 to i32
  %1354 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 3
  %1355 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 2
  %1356 = select i1 %1349, %struct.opj_mqc_state** %1355, %struct.opj_mqc_state** %1354
  %1357 = select i1 %1349, i32 %1351, i32 %1353
  %1358 = bitcast %struct.opj_mqc_state** %1356 to i64*
  %1359 = load i64, i64* %1358, align 8
  %1360 = bitcast %struct.opj_mqc_state** %1341 to i64*
  store i64 %1359, i64* %1360, align 8
  br label %1361

1361:                                             ; preds = %1385, %1348
  %1362 = phi i32 [ %53, %1348 ], [ %1389, %1385 ]
  %1363 = phi i32 [ %1344, %1348 ], [ %1388, %1385 ]
  %1364 = phi i32 [ %51, %1348 ], [ %1390, %1385 ]
  %1365 = icmp eq i32 %1364, 0
  br i1 %1365, label %1366, label %1385

1366:                                             ; preds = %1361
  %1367 = load i8*, i8** %31, align 8
  %1368 = getelementptr inbounds i8, i8* %1367, i64 1
  %1369 = load i8, i8* %1368, align 1
  %1370 = zext i8 %1369 to i32
  %1371 = load i8, i8* %1367, align 1
  %1372 = icmp eq i8 %1371, -1
  br i1 %1372, label %1373, label %1382

1373:                                             ; preds = %1366
  %1374 = icmp ugt i8 %1369, -113
  br i1 %1374, label %1375, label %1379

1375:                                             ; preds = %1373
  %1376 = add i32 %1362, 65280
  %1377 = load i32, i32* %32, align 4
  %1378 = add i32 %1377, 1
  store i32 %1378, i32* %32, align 4
  br label %1385

1379:                                             ; preds = %1373
  store i8* %1368, i8** %31, align 8
  %1380 = shl nuw nsw i32 %1370, 9
  %1381 = add i32 %1380, %1362
  br label %1385

1382:                                             ; preds = %1366
  store i8* %1368, i8** %31, align 8
  %1383 = shl nuw nsw i32 %1370, 8
  %1384 = add i32 %1383, %1362
  br label %1385

1385:                                             ; preds = %1382, %1379, %1375, %1361
  %1386 = phi i32 [ %1362, %1361 ], [ %1376, %1375 ], [ %1381, %1379 ], [ %1384, %1382 ]
  %1387 = phi i32 [ %1364, %1361 ], [ 8, %1375 ], [ 7, %1379 ], [ 8, %1382 ]
  %1388 = shl i32 %1363, 1
  %1389 = shl i32 %1386, 1
  %1390 = add i32 %1387, -1
  %1391 = icmp ult i32 %1388, 32768
  br i1 %1391, label %1361, label %1444

1392:                                             ; preds = %1334
  %1393 = shl i32 %1344, 16
  %1394 = sub i32 %53, %1393
  %1395 = trunc i32 %1345 to i16
  %1396 = icmp sgt i16 %1395, -1
  br i1 %1396, label %1397, label %1441

1397:                                             ; preds = %1392
  %1398 = icmp ult i32 %1345, %1344
  %1399 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 1
  %1400 = load i32, i32* %1399, align 4
  %1401 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 2
  %1402 = icmp eq i32 %1400, 0
  %1403 = zext i1 %1402 to i32
  %1404 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 3
  %1405 = select i1 %1398, %struct.opj_mqc_state** %1404, %struct.opj_mqc_state** %1401
  %1406 = select i1 %1398, i32 %1403, i32 %1400
  %1407 = bitcast %struct.opj_mqc_state** %1405 to i64*
  %1408 = load i64, i64* %1407, align 8
  %1409 = bitcast %struct.opj_mqc_state** %1341 to i64*
  store i64 %1408, i64* %1409, align 8
  br label %1410

1410:                                             ; preds = %1434, %1397
  %1411 = phi i32 [ %1394, %1397 ], [ %1438, %1434 ]
  %1412 = phi i32 [ %1345, %1397 ], [ %1437, %1434 ]
  %1413 = phi i32 [ %51, %1397 ], [ %1439, %1434 ]
  %1414 = icmp eq i32 %1413, 0
  br i1 %1414, label %1415, label %1434

1415:                                             ; preds = %1410
  %1416 = load i8*, i8** %31, align 8
  %1417 = getelementptr inbounds i8, i8* %1416, i64 1
  %1418 = load i8, i8* %1417, align 1
  %1419 = zext i8 %1418 to i32
  %1420 = load i8, i8* %1416, align 1
  %1421 = icmp eq i8 %1420, -1
  br i1 %1421, label %1422, label %1431

1422:                                             ; preds = %1415
  %1423 = icmp ugt i8 %1418, -113
  br i1 %1423, label %1424, label %1428

1424:                                             ; preds = %1422
  %1425 = add i32 %1411, 65280
  %1426 = load i32, i32* %32, align 4
  %1427 = add i32 %1426, 1
  store i32 %1427, i32* %32, align 4
  br label %1434

1428:                                             ; preds = %1422
  store i8* %1417, i8** %31, align 8
  %1429 = shl nuw nsw i32 %1419, 9
  %1430 = add i32 %1429, %1411
  br label %1434

1431:                                             ; preds = %1415
  store i8* %1417, i8** %31, align 8
  %1432 = shl nuw nsw i32 %1419, 8
  %1433 = add i32 %1432, %1411
  br label %1434

1434:                                             ; preds = %1431, %1428, %1424, %1410
  %1435 = phi i32 [ %1411, %1410 ], [ %1425, %1424 ], [ %1430, %1428 ], [ %1433, %1431 ]
  %1436 = phi i32 [ %1413, %1410 ], [ 8, %1424 ], [ 7, %1428 ], [ 8, %1431 ]
  %1437 = shl i32 %1412, 1
  %1438 = shl i32 %1435, 1
  %1439 = add i32 %1436, -1
  %1440 = icmp ult i32 %1437, 32768
  br i1 %1440, label %1410, label %1444

1441:                                             ; preds = %1392
  %1442 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1342, i64 0, i32 1
  %1443 = load i32, i32* %1442, align 4
  br label %1444

1444:                                             ; preds = %1434, %1385, %1441
  %1445 = phi i32 [ %1394, %1441 ], [ %1389, %1385 ], [ %1438, %1434 ]
  %1446 = phi i32 [ %1345, %1441 ], [ %1388, %1385 ], [ %1437, %1434 ]
  %1447 = phi i32 [ %51, %1441 ], [ %1390, %1385 ], [ %1439, %1434 ]
  %1448 = phi i32 [ %1443, %1441 ], [ %1357, %1385 ], [ %1406, %1434 ]
  %1449 = icmp eq i32 %1448, 0
  br i1 %1449, label %1593, label %1450

1450:                                             ; preds = %1444
  %1451 = getelementptr inbounds i32, i32* %49, i64 -1
  %1452 = load i32, i32* %1451, align 4
  %1453 = getelementptr inbounds i32, i32* %49, i64 1
  %1454 = load i32, i32* %1453, align 4
  %1455 = and i32 %54, 170
  %1456 = lshr i32 %1452, 19
  %1457 = and i32 %1456, 1
  %1458 = lshr i32 %1454, 17
  %1459 = and i32 %1458, 4
  %1460 = lshr i32 %54, 14
  %1461 = and i32 %1460, 16
  %1462 = lshr i32 %54, 16
  %1463 = and i32 %1462, 64
  %1464 = or i32 %1463, %1455
  %1465 = or i32 %1464, %1461
  %1466 = or i32 %1465, %1457
  %1467 = or i32 %1466, %1459
  %1468 = zext i32 %1467 to i64
  %1469 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1468
  %1470 = load i8, i8* %1469, align 1
  %1471 = zext i8 %1470 to i64
  %1472 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1471
  %1473 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1472, align 8
  %1474 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 0
  %1475 = load i32, i32* %1474, align 8
  %1476 = sub i32 %1446, %1475
  %1477 = lshr i32 %1445, 16
  %1478 = icmp ult i32 %1477, %1475
  br i1 %1478, label %1479, label %1523

1479:                                             ; preds = %1450
  %1480 = icmp ult i32 %1476, %1475
  %1481 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 1
  %1482 = load i32, i32* %1481, align 4
  %1483 = icmp eq i32 %1482, 0
  %1484 = zext i1 %1483 to i32
  %1485 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 3
  %1486 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 2
  %1487 = select i1 %1480, %struct.opj_mqc_state** %1486, %struct.opj_mqc_state** %1485
  %1488 = select i1 %1480, i32 %1482, i32 %1484
  %1489 = bitcast %struct.opj_mqc_state** %1487 to i64*
  %1490 = load i64, i64* %1489, align 8
  %1491 = bitcast %struct.opj_mqc_state** %1472 to i64*
  store i64 %1490, i64* %1491, align 8
  br label %1492

1492:                                             ; preds = %1516, %1479
  %1493 = phi i32 [ %1445, %1479 ], [ %1520, %1516 ]
  %1494 = phi i32 [ %1475, %1479 ], [ %1519, %1516 ]
  %1495 = phi i32 [ %1447, %1479 ], [ %1521, %1516 ]
  %1496 = icmp eq i32 %1495, 0
  br i1 %1496, label %1497, label %1516

1497:                                             ; preds = %1492
  %1498 = load i8*, i8** %31, align 8
  %1499 = getelementptr inbounds i8, i8* %1498, i64 1
  %1500 = load i8, i8* %1499, align 1
  %1501 = zext i8 %1500 to i32
  %1502 = load i8, i8* %1498, align 1
  %1503 = icmp eq i8 %1502, -1
  br i1 %1503, label %1504, label %1513

1504:                                             ; preds = %1497
  %1505 = icmp ugt i8 %1500, -113
  br i1 %1505, label %1506, label %1510

1506:                                             ; preds = %1504
  %1507 = add i32 %1493, 65280
  %1508 = load i32, i32* %32, align 4
  %1509 = add i32 %1508, 1
  store i32 %1509, i32* %32, align 4
  br label %1516

1510:                                             ; preds = %1504
  store i8* %1499, i8** %31, align 8
  %1511 = shl nuw nsw i32 %1501, 9
  %1512 = add i32 %1511, %1493
  br label %1516

1513:                                             ; preds = %1497
  store i8* %1499, i8** %31, align 8
  %1514 = shl nuw nsw i32 %1501, 8
  %1515 = add i32 %1514, %1493
  br label %1516

1516:                                             ; preds = %1513, %1510, %1506, %1492
  %1517 = phi i32 [ %1493, %1492 ], [ %1507, %1506 ], [ %1512, %1510 ], [ %1515, %1513 ]
  %1518 = phi i32 [ %1495, %1492 ], [ 8, %1506 ], [ 7, %1510 ], [ 8, %1513 ]
  %1519 = shl i32 %1494, 1
  %1520 = shl i32 %1517, 1
  %1521 = add i32 %1518, -1
  %1522 = icmp ult i32 %1519, 32768
  br i1 %1522, label %1492, label %1575

1523:                                             ; preds = %1450
  %1524 = shl i32 %1475, 16
  %1525 = sub i32 %1445, %1524
  %1526 = trunc i32 %1476 to i16
  %1527 = icmp sgt i16 %1526, -1
  br i1 %1527, label %1528, label %1572

1528:                                             ; preds = %1523
  %1529 = icmp ult i32 %1476, %1475
  %1530 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 1
  %1531 = load i32, i32* %1530, align 4
  %1532 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 2
  %1533 = icmp eq i32 %1531, 0
  %1534 = zext i1 %1533 to i32
  %1535 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 3
  %1536 = select i1 %1529, %struct.opj_mqc_state** %1535, %struct.opj_mqc_state** %1532
  %1537 = select i1 %1529, i32 %1534, i32 %1531
  %1538 = bitcast %struct.opj_mqc_state** %1536 to i64*
  %1539 = load i64, i64* %1538, align 8
  %1540 = bitcast %struct.opj_mqc_state** %1472 to i64*
  store i64 %1539, i64* %1540, align 8
  br label %1541

1541:                                             ; preds = %1565, %1528
  %1542 = phi i32 [ %1525, %1528 ], [ %1569, %1565 ]
  %1543 = phi i32 [ %1476, %1528 ], [ %1568, %1565 ]
  %1544 = phi i32 [ %1447, %1528 ], [ %1570, %1565 ]
  %1545 = icmp eq i32 %1544, 0
  br i1 %1545, label %1546, label %1565

1546:                                             ; preds = %1541
  %1547 = load i8*, i8** %31, align 8
  %1548 = getelementptr inbounds i8, i8* %1547, i64 1
  %1549 = load i8, i8* %1548, align 1
  %1550 = zext i8 %1549 to i32
  %1551 = load i8, i8* %1547, align 1
  %1552 = icmp eq i8 %1551, -1
  br i1 %1552, label %1553, label %1562

1553:                                             ; preds = %1546
  %1554 = icmp ugt i8 %1549, -113
  br i1 %1554, label %1555, label %1559

1555:                                             ; preds = %1553
  %1556 = add i32 %1542, 65280
  %1557 = load i32, i32* %32, align 4
  %1558 = add i32 %1557, 1
  store i32 %1558, i32* %32, align 4
  br label %1565

1559:                                             ; preds = %1553
  store i8* %1548, i8** %31, align 8
  %1560 = shl nuw nsw i32 %1550, 9
  %1561 = add i32 %1560, %1542
  br label %1565

1562:                                             ; preds = %1546
  store i8* %1548, i8** %31, align 8
  %1563 = shl nuw nsw i32 %1550, 8
  %1564 = add i32 %1563, %1542
  br label %1565

1565:                                             ; preds = %1562, %1559, %1555, %1541
  %1566 = phi i32 [ %1542, %1541 ], [ %1556, %1555 ], [ %1561, %1559 ], [ %1564, %1562 ]
  %1567 = phi i32 [ %1544, %1541 ], [ 8, %1555 ], [ 7, %1559 ], [ 8, %1562 ]
  %1568 = shl i32 %1543, 1
  %1569 = shl i32 %1566, 1
  %1570 = add i32 %1567, -1
  %1571 = icmp ult i32 %1568, 32768
  br i1 %1571, label %1541, label %1575

1572:                                             ; preds = %1523
  %1573 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1473, i64 0, i32 1
  %1574 = load i32, i32* %1573, align 4
  br label %1575

1575:                                             ; preds = %1565, %1516, %1572
  %1576 = phi i32 [ %1525, %1572 ], [ %1520, %1516 ], [ %1569, %1565 ]
  %1577 = phi i32 [ %1476, %1572 ], [ %1519, %1516 ], [ %1568, %1565 ]
  %1578 = phi i32 [ %1447, %1572 ], [ %1521, %1516 ], [ %1570, %1565 ]
  %1579 = phi i32 [ %1574, %1572 ], [ %1488, %1516 ], [ %1537, %1565 ]
  %1580 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1468
  %1581 = load i8, i8* %1580, align 1
  %1582 = zext i8 %1581 to i32
  %1583 = xor i32 %1579, %1582
  %1584 = icmp eq i32 %1583, 0
  %1585 = select i1 %1584, i32 %29, i32 %33
  store i32 %1585, i32* %48, align 4
  %1586 = load i32, i32* %1451, align 4
  %1587 = or i32 %1586, 32
  store i32 %1587, i32* %1451, align 4
  %1588 = shl i32 %1583, 19
  %1589 = or i32 %54, %1588
  %1590 = or i32 %1589, 16
  %1591 = load i32, i32* %1453, align 4
  %1592 = or i32 %1591, 8
  store i32 %1592, i32* %1453, align 4
  br label %1593

1593:                                             ; preds = %1575, %1444, %1331
  %1594 = phi i32 [ %53, %1331 ], [ %1576, %1575 ], [ %1445, %1444 ]
  %1595 = phi i32 [ %52, %1331 ], [ %1577, %1575 ], [ %1446, %1444 ]
  %1596 = phi i32 [ %51, %1331 ], [ %1578, %1575 ], [ %1447, %1444 ]
  %1597 = phi i32 [ %54, %1331 ], [ %1590, %1575 ], [ %54, %1444 ]
  %1598 = phi %struct.opj_mqc_state** [ %50, %1331 ], [ %1472, %1575 ], [ %1341, %1444 ]
  %1599 = and i32 %1597, 16777344
  %1600 = icmp eq i32 %1599, 0
  br i1 %1600, label %1601, label %1862

1601:                                             ; preds = %1593
  %1602 = lshr i32 %1597, 3
  %1603 = load i8*, i8** %30, align 8
  %1604 = and i32 %1602, 495
  %1605 = zext i32 %1604 to i64
  %1606 = getelementptr inbounds i8, i8* %1603, i64 %1605
  %1607 = load i8, i8* %1606, align 1
  %1608 = zext i8 %1607 to i64
  %1609 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1608
  %1610 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1609, align 8
  %1611 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 0
  %1612 = load i32, i32* %1611, align 8
  %1613 = sub i32 %1595, %1612
  %1614 = lshr i32 %1594, 16
  %1615 = icmp ult i32 %1614, %1612
  br i1 %1615, label %1616, label %1660

1616:                                             ; preds = %1601
  %1617 = icmp ult i32 %1613, %1612
  %1618 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 1
  %1619 = load i32, i32* %1618, align 4
  %1620 = icmp eq i32 %1619, 0
  %1621 = zext i1 %1620 to i32
  %1622 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 3
  %1623 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 2
  %1624 = select i1 %1617, %struct.opj_mqc_state** %1623, %struct.opj_mqc_state** %1622
  %1625 = select i1 %1617, i32 %1619, i32 %1621
  %1626 = bitcast %struct.opj_mqc_state** %1624 to i64*
  %1627 = load i64, i64* %1626, align 8
  %1628 = bitcast %struct.opj_mqc_state** %1609 to i64*
  store i64 %1627, i64* %1628, align 8
  br label %1629

1629:                                             ; preds = %1653, %1616
  %1630 = phi i32 [ %1594, %1616 ], [ %1657, %1653 ]
  %1631 = phi i32 [ %1612, %1616 ], [ %1656, %1653 ]
  %1632 = phi i32 [ %1596, %1616 ], [ %1658, %1653 ]
  %1633 = icmp eq i32 %1632, 0
  br i1 %1633, label %1634, label %1653

1634:                                             ; preds = %1629
  %1635 = load i8*, i8** %31, align 8
  %1636 = getelementptr inbounds i8, i8* %1635, i64 1
  %1637 = load i8, i8* %1636, align 1
  %1638 = zext i8 %1637 to i32
  %1639 = load i8, i8* %1635, align 1
  %1640 = icmp eq i8 %1639, -1
  br i1 %1640, label %1641, label %1650

1641:                                             ; preds = %1634
  %1642 = icmp ugt i8 %1637, -113
  br i1 %1642, label %1643, label %1647

1643:                                             ; preds = %1641
  %1644 = add i32 %1630, 65280
  %1645 = load i32, i32* %32, align 4
  %1646 = add i32 %1645, 1
  store i32 %1646, i32* %32, align 4
  br label %1653

1647:                                             ; preds = %1641
  store i8* %1636, i8** %31, align 8
  %1648 = shl nuw nsw i32 %1638, 9
  %1649 = add i32 %1648, %1630
  br label %1653

1650:                                             ; preds = %1634
  store i8* %1636, i8** %31, align 8
  %1651 = shl nuw nsw i32 %1638, 8
  %1652 = add i32 %1651, %1630
  br label %1653

1653:                                             ; preds = %1650, %1647, %1643, %1629
  %1654 = phi i32 [ %1630, %1629 ], [ %1644, %1643 ], [ %1649, %1647 ], [ %1652, %1650 ]
  %1655 = phi i32 [ %1632, %1629 ], [ 8, %1643 ], [ 7, %1647 ], [ 8, %1650 ]
  %1656 = shl i32 %1631, 1
  %1657 = shl i32 %1654, 1
  %1658 = add i32 %1655, -1
  %1659 = icmp ult i32 %1656, 32768
  br i1 %1659, label %1629, label %1712

1660:                                             ; preds = %1601
  %1661 = shl i32 %1612, 16
  %1662 = sub i32 %1594, %1661
  %1663 = trunc i32 %1613 to i16
  %1664 = icmp sgt i16 %1663, -1
  br i1 %1664, label %1665, label %1709

1665:                                             ; preds = %1660
  %1666 = icmp ult i32 %1613, %1612
  %1667 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 1
  %1668 = load i32, i32* %1667, align 4
  %1669 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 2
  %1670 = icmp eq i32 %1668, 0
  %1671 = zext i1 %1670 to i32
  %1672 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 3
  %1673 = select i1 %1666, %struct.opj_mqc_state** %1672, %struct.opj_mqc_state** %1669
  %1674 = select i1 %1666, i32 %1671, i32 %1668
  %1675 = bitcast %struct.opj_mqc_state** %1673 to i64*
  %1676 = load i64, i64* %1675, align 8
  %1677 = bitcast %struct.opj_mqc_state** %1609 to i64*
  store i64 %1676, i64* %1677, align 8
  br label %1678

1678:                                             ; preds = %1702, %1665
  %1679 = phi i32 [ %1662, %1665 ], [ %1706, %1702 ]
  %1680 = phi i32 [ %1613, %1665 ], [ %1705, %1702 ]
  %1681 = phi i32 [ %1596, %1665 ], [ %1707, %1702 ]
  %1682 = icmp eq i32 %1681, 0
  br i1 %1682, label %1683, label %1702

1683:                                             ; preds = %1678
  %1684 = load i8*, i8** %31, align 8
  %1685 = getelementptr inbounds i8, i8* %1684, i64 1
  %1686 = load i8, i8* %1685, align 1
  %1687 = zext i8 %1686 to i32
  %1688 = load i8, i8* %1684, align 1
  %1689 = icmp eq i8 %1688, -1
  br i1 %1689, label %1690, label %1699

1690:                                             ; preds = %1683
  %1691 = icmp ugt i8 %1686, -113
  br i1 %1691, label %1692, label %1696

1692:                                             ; preds = %1690
  %1693 = add i32 %1679, 65280
  %1694 = load i32, i32* %32, align 4
  %1695 = add i32 %1694, 1
  store i32 %1695, i32* %32, align 4
  br label %1702

1696:                                             ; preds = %1690
  store i8* %1685, i8** %31, align 8
  %1697 = shl nuw nsw i32 %1687, 9
  %1698 = add i32 %1697, %1679
  br label %1702

1699:                                             ; preds = %1683
  store i8* %1685, i8** %31, align 8
  %1700 = shl nuw nsw i32 %1687, 8
  %1701 = add i32 %1700, %1679
  br label %1702

1702:                                             ; preds = %1699, %1696, %1692, %1678
  %1703 = phi i32 [ %1679, %1678 ], [ %1693, %1692 ], [ %1698, %1696 ], [ %1701, %1699 ]
  %1704 = phi i32 [ %1681, %1678 ], [ 8, %1692 ], [ 7, %1696 ], [ 8, %1699 ]
  %1705 = shl i32 %1680, 1
  %1706 = shl i32 %1703, 1
  %1707 = add i32 %1704, -1
  %1708 = icmp ult i32 %1705, 32768
  br i1 %1708, label %1678, label %1712

1709:                                             ; preds = %1660
  %1710 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1610, i64 0, i32 1
  %1711 = load i32, i32* %1710, align 4
  br label %1712

1712:                                             ; preds = %1702, %1653, %1709
  %1713 = phi i32 [ %1662, %1709 ], [ %1657, %1653 ], [ %1706, %1702 ]
  %1714 = phi i32 [ %1613, %1709 ], [ %1656, %1653 ], [ %1705, %1702 ]
  %1715 = phi i32 [ %1596, %1709 ], [ %1658, %1653 ], [ %1707, %1702 ]
  %1716 = phi i32 [ %1711, %1709 ], [ %1625, %1653 ], [ %1674, %1702 ]
  %1717 = icmp eq i32 %1716, 0
  br i1 %1717, label %1862, label %1718

1718:                                             ; preds = %1712
  %1719 = getelementptr inbounds i32, i32* %49, i64 -1
  %1720 = load i32, i32* %1719, align 4
  %1721 = getelementptr inbounds i32, i32* %49, i64 1
  %1722 = load i32, i32* %1721, align 4
  %1723 = and i32 %1602, 170
  %1724 = lshr i32 %1720, 22
  %1725 = and i32 %1724, 1
  %1726 = lshr i32 %1722, 20
  %1727 = and i32 %1726, 4
  %1728 = lshr i32 %1597, 15
  %1729 = and i32 %1728, 16
  %1730 = lshr i32 %1597, 19
  %1731 = and i32 %1730, 64
  %1732 = or i32 %1731, %1723
  %1733 = or i32 %1732, %1729
  %1734 = or i32 %1733, %1725
  %1735 = or i32 %1734, %1727
  %1736 = zext i32 %1735 to i64
  %1737 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %1736
  %1738 = load i8, i8* %1737, align 1
  %1739 = zext i8 %1738 to i64
  %1740 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1739
  %1741 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1740, align 8
  %1742 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 0
  %1743 = load i32, i32* %1742, align 8
  %1744 = sub i32 %1714, %1743
  %1745 = lshr i32 %1713, 16
  %1746 = icmp ult i32 %1745, %1743
  br i1 %1746, label %1747, label %1791

1747:                                             ; preds = %1718
  %1748 = icmp ult i32 %1744, %1743
  %1749 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 1
  %1750 = load i32, i32* %1749, align 4
  %1751 = icmp eq i32 %1750, 0
  %1752 = zext i1 %1751 to i32
  %1753 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 3
  %1754 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 2
  %1755 = select i1 %1748, %struct.opj_mqc_state** %1754, %struct.opj_mqc_state** %1753
  %1756 = select i1 %1748, i32 %1750, i32 %1752
  %1757 = bitcast %struct.opj_mqc_state** %1755 to i64*
  %1758 = load i64, i64* %1757, align 8
  %1759 = bitcast %struct.opj_mqc_state** %1740 to i64*
  store i64 %1758, i64* %1759, align 8
  br label %1760

1760:                                             ; preds = %1784, %1747
  %1761 = phi i32 [ %1713, %1747 ], [ %1788, %1784 ]
  %1762 = phi i32 [ %1743, %1747 ], [ %1787, %1784 ]
  %1763 = phi i32 [ %1715, %1747 ], [ %1789, %1784 ]
  %1764 = icmp eq i32 %1763, 0
  br i1 %1764, label %1765, label %1784

1765:                                             ; preds = %1760
  %1766 = load i8*, i8** %31, align 8
  %1767 = getelementptr inbounds i8, i8* %1766, i64 1
  %1768 = load i8, i8* %1767, align 1
  %1769 = zext i8 %1768 to i32
  %1770 = load i8, i8* %1766, align 1
  %1771 = icmp eq i8 %1770, -1
  br i1 %1771, label %1772, label %1781

1772:                                             ; preds = %1765
  %1773 = icmp ugt i8 %1768, -113
  br i1 %1773, label %1774, label %1778

1774:                                             ; preds = %1772
  %1775 = add i32 %1761, 65280
  %1776 = load i32, i32* %32, align 4
  %1777 = add i32 %1776, 1
  store i32 %1777, i32* %32, align 4
  br label %1784

1778:                                             ; preds = %1772
  store i8* %1767, i8** %31, align 8
  %1779 = shl nuw nsw i32 %1769, 9
  %1780 = add i32 %1779, %1761
  br label %1784

1781:                                             ; preds = %1765
  store i8* %1767, i8** %31, align 8
  %1782 = shl nuw nsw i32 %1769, 8
  %1783 = add i32 %1782, %1761
  br label %1784

1784:                                             ; preds = %1781, %1778, %1774, %1760
  %1785 = phi i32 [ %1761, %1760 ], [ %1775, %1774 ], [ %1780, %1778 ], [ %1783, %1781 ]
  %1786 = phi i32 [ %1763, %1760 ], [ 8, %1774 ], [ 7, %1778 ], [ 8, %1781 ]
  %1787 = shl i32 %1762, 1
  %1788 = shl i32 %1785, 1
  %1789 = add i32 %1786, -1
  %1790 = icmp ult i32 %1787, 32768
  br i1 %1790, label %1760, label %1843

1791:                                             ; preds = %1718
  %1792 = shl i32 %1743, 16
  %1793 = sub i32 %1713, %1792
  %1794 = trunc i32 %1744 to i16
  %1795 = icmp sgt i16 %1794, -1
  br i1 %1795, label %1796, label %1840

1796:                                             ; preds = %1791
  %1797 = icmp ult i32 %1744, %1743
  %1798 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 1
  %1799 = load i32, i32* %1798, align 4
  %1800 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 2
  %1801 = icmp eq i32 %1799, 0
  %1802 = zext i1 %1801 to i32
  %1803 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 3
  %1804 = select i1 %1797, %struct.opj_mqc_state** %1803, %struct.opj_mqc_state** %1800
  %1805 = select i1 %1797, i32 %1802, i32 %1799
  %1806 = bitcast %struct.opj_mqc_state** %1804 to i64*
  %1807 = load i64, i64* %1806, align 8
  %1808 = bitcast %struct.opj_mqc_state** %1740 to i64*
  store i64 %1807, i64* %1808, align 8
  br label %1809

1809:                                             ; preds = %1833, %1796
  %1810 = phi i32 [ %1793, %1796 ], [ %1837, %1833 ]
  %1811 = phi i32 [ %1744, %1796 ], [ %1836, %1833 ]
  %1812 = phi i32 [ %1715, %1796 ], [ %1838, %1833 ]
  %1813 = icmp eq i32 %1812, 0
  br i1 %1813, label %1814, label %1833

1814:                                             ; preds = %1809
  %1815 = load i8*, i8** %31, align 8
  %1816 = getelementptr inbounds i8, i8* %1815, i64 1
  %1817 = load i8, i8* %1816, align 1
  %1818 = zext i8 %1817 to i32
  %1819 = load i8, i8* %1815, align 1
  %1820 = icmp eq i8 %1819, -1
  br i1 %1820, label %1821, label %1830

1821:                                             ; preds = %1814
  %1822 = icmp ugt i8 %1817, -113
  br i1 %1822, label %1823, label %1827

1823:                                             ; preds = %1821
  %1824 = add i32 %1810, 65280
  %1825 = load i32, i32* %32, align 4
  %1826 = add i32 %1825, 1
  store i32 %1826, i32* %32, align 4
  br label %1833

1827:                                             ; preds = %1821
  store i8* %1816, i8** %31, align 8
  %1828 = shl nuw nsw i32 %1818, 9
  %1829 = add i32 %1828, %1810
  br label %1833

1830:                                             ; preds = %1814
  store i8* %1816, i8** %31, align 8
  %1831 = shl nuw nsw i32 %1818, 8
  %1832 = add i32 %1831, %1810
  br label %1833

1833:                                             ; preds = %1830, %1827, %1823, %1809
  %1834 = phi i32 [ %1810, %1809 ], [ %1824, %1823 ], [ %1829, %1827 ], [ %1832, %1830 ]
  %1835 = phi i32 [ %1812, %1809 ], [ 8, %1823 ], [ 7, %1827 ], [ 8, %1830 ]
  %1836 = shl i32 %1811, 1
  %1837 = shl i32 %1834, 1
  %1838 = add i32 %1835, -1
  %1839 = icmp ult i32 %1836, 32768
  br i1 %1839, label %1809, label %1843

1840:                                             ; preds = %1791
  %1841 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1741, i64 0, i32 1
  %1842 = load i32, i32* %1841, align 4
  br label %1843

1843:                                             ; preds = %1833, %1784, %1840
  %1844 = phi i32 [ %1793, %1840 ], [ %1788, %1784 ], [ %1837, %1833 ]
  %1845 = phi i32 [ %1744, %1840 ], [ %1787, %1784 ], [ %1836, %1833 ]
  %1846 = phi i32 [ %1715, %1840 ], [ %1789, %1784 ], [ %1838, %1833 ]
  %1847 = phi i32 [ %1842, %1840 ], [ %1756, %1784 ], [ %1805, %1833 ]
  %1848 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %1736
  %1849 = load i8, i8* %1848, align 1
  %1850 = zext i8 %1849 to i32
  %1851 = xor i32 %1847, %1850
  %1852 = icmp eq i32 %1851, 0
  %1853 = select i1 %1852, i32 %29, i32 %33
  %1854 = getelementptr inbounds i32, i32* %48, i64 64
  store i32 %1853, i32* %1854, align 4
  %1855 = load i32, i32* %1719, align 4
  %1856 = or i32 %1855, 256
  store i32 %1856, i32* %1719, align 4
  %1857 = shl i32 %1851, 22
  %1858 = or i32 %1597, %1857
  %1859 = or i32 %1858, 128
  %1860 = load i32, i32* %1721, align 4
  %1861 = or i32 %1860, 64
  store i32 %1861, i32* %1721, align 4
  br label %1862

1862:                                             ; preds = %1843, %1712, %1593
  %1863 = phi i32 [ %1594, %1593 ], [ %1844, %1843 ], [ %1713, %1712 ]
  %1864 = phi i32 [ %1595, %1593 ], [ %1845, %1843 ], [ %1714, %1712 ]
  %1865 = phi i32 [ %1596, %1593 ], [ %1846, %1843 ], [ %1715, %1712 ]
  %1866 = phi i32 [ %1597, %1593 ], [ %1859, %1843 ], [ %1597, %1712 ]
  %1867 = phi %struct.opj_mqc_state** [ %1598, %1593 ], [ %1740, %1843 ], [ %1609, %1712 ]
  %1868 = and i32 %1866, 134218752
  %1869 = icmp eq i32 %1868, 0
  br i1 %1869, label %1870, label %2131

1870:                                             ; preds = %1862
  %1871 = lshr i32 %1866, 6
  %1872 = load i8*, i8** %30, align 8
  %1873 = and i32 %1871, 495
  %1874 = zext i32 %1873 to i64
  %1875 = getelementptr inbounds i8, i8* %1872, i64 %1874
  %1876 = load i8, i8* %1875, align 1
  %1877 = zext i8 %1876 to i64
  %1878 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %1877
  %1879 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %1878, align 8
  %1880 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 0
  %1881 = load i32, i32* %1880, align 8
  %1882 = sub i32 %1864, %1881
  %1883 = lshr i32 %1863, 16
  %1884 = icmp ult i32 %1883, %1881
  br i1 %1884, label %1885, label %1929

1885:                                             ; preds = %1870
  %1886 = icmp ult i32 %1882, %1881
  %1887 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 1
  %1888 = load i32, i32* %1887, align 4
  %1889 = icmp eq i32 %1888, 0
  %1890 = zext i1 %1889 to i32
  %1891 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 3
  %1892 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 2
  %1893 = select i1 %1886, %struct.opj_mqc_state** %1892, %struct.opj_mqc_state** %1891
  %1894 = select i1 %1886, i32 %1888, i32 %1890
  %1895 = bitcast %struct.opj_mqc_state** %1893 to i64*
  %1896 = load i64, i64* %1895, align 8
  %1897 = bitcast %struct.opj_mqc_state** %1878 to i64*
  store i64 %1896, i64* %1897, align 8
  br label %1898

1898:                                             ; preds = %1922, %1885
  %1899 = phi i32 [ %1863, %1885 ], [ %1926, %1922 ]
  %1900 = phi i32 [ %1881, %1885 ], [ %1925, %1922 ]
  %1901 = phi i32 [ %1865, %1885 ], [ %1927, %1922 ]
  %1902 = icmp eq i32 %1901, 0
  br i1 %1902, label %1903, label %1922

1903:                                             ; preds = %1898
  %1904 = load i8*, i8** %31, align 8
  %1905 = getelementptr inbounds i8, i8* %1904, i64 1
  %1906 = load i8, i8* %1905, align 1
  %1907 = zext i8 %1906 to i32
  %1908 = load i8, i8* %1904, align 1
  %1909 = icmp eq i8 %1908, -1
  br i1 %1909, label %1910, label %1919

1910:                                             ; preds = %1903
  %1911 = icmp ugt i8 %1906, -113
  br i1 %1911, label %1912, label %1916

1912:                                             ; preds = %1910
  %1913 = add i32 %1899, 65280
  %1914 = load i32, i32* %32, align 4
  %1915 = add i32 %1914, 1
  store i32 %1915, i32* %32, align 4
  br label %1922

1916:                                             ; preds = %1910
  store i8* %1905, i8** %31, align 8
  %1917 = shl nuw nsw i32 %1907, 9
  %1918 = add i32 %1917, %1899
  br label %1922

1919:                                             ; preds = %1903
  store i8* %1905, i8** %31, align 8
  %1920 = shl nuw nsw i32 %1907, 8
  %1921 = add i32 %1920, %1899
  br label %1922

1922:                                             ; preds = %1919, %1916, %1912, %1898
  %1923 = phi i32 [ %1899, %1898 ], [ %1913, %1912 ], [ %1918, %1916 ], [ %1921, %1919 ]
  %1924 = phi i32 [ %1901, %1898 ], [ 8, %1912 ], [ 7, %1916 ], [ 8, %1919 ]
  %1925 = shl i32 %1900, 1
  %1926 = shl i32 %1923, 1
  %1927 = add i32 %1924, -1
  %1928 = icmp ult i32 %1925, 32768
  br i1 %1928, label %1898, label %1981

1929:                                             ; preds = %1870
  %1930 = shl i32 %1881, 16
  %1931 = sub i32 %1863, %1930
  %1932 = trunc i32 %1882 to i16
  %1933 = icmp sgt i16 %1932, -1
  br i1 %1933, label %1934, label %1978

1934:                                             ; preds = %1929
  %1935 = icmp ult i32 %1882, %1881
  %1936 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 1
  %1937 = load i32, i32* %1936, align 4
  %1938 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 2
  %1939 = icmp eq i32 %1937, 0
  %1940 = zext i1 %1939 to i32
  %1941 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 3
  %1942 = select i1 %1935, %struct.opj_mqc_state** %1941, %struct.opj_mqc_state** %1938
  %1943 = select i1 %1935, i32 %1940, i32 %1937
  %1944 = bitcast %struct.opj_mqc_state** %1942 to i64*
  %1945 = load i64, i64* %1944, align 8
  %1946 = bitcast %struct.opj_mqc_state** %1878 to i64*
  store i64 %1945, i64* %1946, align 8
  br label %1947

1947:                                             ; preds = %1971, %1934
  %1948 = phi i32 [ %1931, %1934 ], [ %1975, %1971 ]
  %1949 = phi i32 [ %1882, %1934 ], [ %1974, %1971 ]
  %1950 = phi i32 [ %1865, %1934 ], [ %1976, %1971 ]
  %1951 = icmp eq i32 %1950, 0
  br i1 %1951, label %1952, label %1971

1952:                                             ; preds = %1947
  %1953 = load i8*, i8** %31, align 8
  %1954 = getelementptr inbounds i8, i8* %1953, i64 1
  %1955 = load i8, i8* %1954, align 1
  %1956 = zext i8 %1955 to i32
  %1957 = load i8, i8* %1953, align 1
  %1958 = icmp eq i8 %1957, -1
  br i1 %1958, label %1959, label %1968

1959:                                             ; preds = %1952
  %1960 = icmp ugt i8 %1955, -113
  br i1 %1960, label %1961, label %1965

1961:                                             ; preds = %1959
  %1962 = add i32 %1948, 65280
  %1963 = load i32, i32* %32, align 4
  %1964 = add i32 %1963, 1
  store i32 %1964, i32* %32, align 4
  br label %1971

1965:                                             ; preds = %1959
  store i8* %1954, i8** %31, align 8
  %1966 = shl nuw nsw i32 %1956, 9
  %1967 = add i32 %1966, %1948
  br label %1971

1968:                                             ; preds = %1952
  store i8* %1954, i8** %31, align 8
  %1969 = shl nuw nsw i32 %1956, 8
  %1970 = add i32 %1969, %1948
  br label %1971

1971:                                             ; preds = %1968, %1965, %1961, %1947
  %1972 = phi i32 [ %1948, %1947 ], [ %1962, %1961 ], [ %1967, %1965 ], [ %1970, %1968 ]
  %1973 = phi i32 [ %1950, %1947 ], [ 8, %1961 ], [ 7, %1965 ], [ 8, %1968 ]
  %1974 = shl i32 %1949, 1
  %1975 = shl i32 %1972, 1
  %1976 = add i32 %1973, -1
  %1977 = icmp ult i32 %1974, 32768
  br i1 %1977, label %1947, label %1981

1978:                                             ; preds = %1929
  %1979 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %1879, i64 0, i32 1
  %1980 = load i32, i32* %1979, align 4
  br label %1981

1981:                                             ; preds = %1971, %1922, %1978
  %1982 = phi i32 [ %1931, %1978 ], [ %1926, %1922 ], [ %1975, %1971 ]
  %1983 = phi i32 [ %1882, %1978 ], [ %1925, %1922 ], [ %1974, %1971 ]
  %1984 = phi i32 [ %1865, %1978 ], [ %1927, %1922 ], [ %1976, %1971 ]
  %1985 = phi i32 [ %1980, %1978 ], [ %1894, %1922 ], [ %1943, %1971 ]
  %1986 = icmp eq i32 %1985, 0
  br i1 %1986, label %2131, label %1987

1987:                                             ; preds = %1981
  %1988 = getelementptr inbounds i32, i32* %49, i64 -1
  %1989 = load i32, i32* %1988, align 4
  %1990 = getelementptr inbounds i32, i32* %49, i64 1
  %1991 = load i32, i32* %1990, align 4
  %1992 = and i32 %1871, 170
  %1993 = lshr i32 %1989, 25
  %1994 = and i32 %1993, 1
  %1995 = lshr i32 %1991, 23
  %1996 = and i32 %1995, 4
  %1997 = lshr i32 %1866, 18
  %1998 = and i32 %1997, 16
  %1999 = lshr i32 %1866, 22
  %2000 = and i32 %1999, 64
  %2001 = or i32 %2000, %1992
  %2002 = or i32 %2001, %1998
  %2003 = or i32 %2002, %1994
  %2004 = or i32 %2003, %1996
  %2005 = zext i32 %2004 to i64
  %2006 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %2005
  %2007 = load i8, i8* %2006, align 1
  %2008 = zext i8 %2007 to i64
  %2009 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2008
  %2010 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2009, align 8
  %2011 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 0
  %2012 = load i32, i32* %2011, align 8
  %2013 = sub i32 %1983, %2012
  %2014 = lshr i32 %1982, 16
  %2015 = icmp ult i32 %2014, %2012
  br i1 %2015, label %2016, label %2060

2016:                                             ; preds = %1987
  %2017 = icmp ult i32 %2013, %2012
  %2018 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 1
  %2019 = load i32, i32* %2018, align 4
  %2020 = icmp eq i32 %2019, 0
  %2021 = zext i1 %2020 to i32
  %2022 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 3
  %2023 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 2
  %2024 = select i1 %2017, %struct.opj_mqc_state** %2023, %struct.opj_mqc_state** %2022
  %2025 = select i1 %2017, i32 %2019, i32 %2021
  %2026 = bitcast %struct.opj_mqc_state** %2024 to i64*
  %2027 = load i64, i64* %2026, align 8
  %2028 = bitcast %struct.opj_mqc_state** %2009 to i64*
  store i64 %2027, i64* %2028, align 8
  br label %2029

2029:                                             ; preds = %2053, %2016
  %2030 = phi i32 [ %1982, %2016 ], [ %2057, %2053 ]
  %2031 = phi i32 [ %2012, %2016 ], [ %2056, %2053 ]
  %2032 = phi i32 [ %1984, %2016 ], [ %2058, %2053 ]
  %2033 = icmp eq i32 %2032, 0
  br i1 %2033, label %2034, label %2053

2034:                                             ; preds = %2029
  %2035 = load i8*, i8** %31, align 8
  %2036 = getelementptr inbounds i8, i8* %2035, i64 1
  %2037 = load i8, i8* %2036, align 1
  %2038 = zext i8 %2037 to i32
  %2039 = load i8, i8* %2035, align 1
  %2040 = icmp eq i8 %2039, -1
  br i1 %2040, label %2041, label %2050

2041:                                             ; preds = %2034
  %2042 = icmp ugt i8 %2037, -113
  br i1 %2042, label %2043, label %2047

2043:                                             ; preds = %2041
  %2044 = add i32 %2030, 65280
  %2045 = load i32, i32* %32, align 4
  %2046 = add i32 %2045, 1
  store i32 %2046, i32* %32, align 4
  br label %2053

2047:                                             ; preds = %2041
  store i8* %2036, i8** %31, align 8
  %2048 = shl nuw nsw i32 %2038, 9
  %2049 = add i32 %2048, %2030
  br label %2053

2050:                                             ; preds = %2034
  store i8* %2036, i8** %31, align 8
  %2051 = shl nuw nsw i32 %2038, 8
  %2052 = add i32 %2051, %2030
  br label %2053

2053:                                             ; preds = %2050, %2047, %2043, %2029
  %2054 = phi i32 [ %2030, %2029 ], [ %2044, %2043 ], [ %2049, %2047 ], [ %2052, %2050 ]
  %2055 = phi i32 [ %2032, %2029 ], [ 8, %2043 ], [ 7, %2047 ], [ 8, %2050 ]
  %2056 = shl i32 %2031, 1
  %2057 = shl i32 %2054, 1
  %2058 = add i32 %2055, -1
  %2059 = icmp ult i32 %2056, 32768
  br i1 %2059, label %2029, label %2112

2060:                                             ; preds = %1987
  %2061 = shl i32 %2012, 16
  %2062 = sub i32 %1982, %2061
  %2063 = trunc i32 %2013 to i16
  %2064 = icmp sgt i16 %2063, -1
  br i1 %2064, label %2065, label %2109

2065:                                             ; preds = %2060
  %2066 = icmp ult i32 %2013, %2012
  %2067 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 1
  %2068 = load i32, i32* %2067, align 4
  %2069 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 2
  %2070 = icmp eq i32 %2068, 0
  %2071 = zext i1 %2070 to i32
  %2072 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 3
  %2073 = select i1 %2066, %struct.opj_mqc_state** %2072, %struct.opj_mqc_state** %2069
  %2074 = select i1 %2066, i32 %2071, i32 %2068
  %2075 = bitcast %struct.opj_mqc_state** %2073 to i64*
  %2076 = load i64, i64* %2075, align 8
  %2077 = bitcast %struct.opj_mqc_state** %2009 to i64*
  store i64 %2076, i64* %2077, align 8
  br label %2078

2078:                                             ; preds = %2102, %2065
  %2079 = phi i32 [ %2062, %2065 ], [ %2106, %2102 ]
  %2080 = phi i32 [ %2013, %2065 ], [ %2105, %2102 ]
  %2081 = phi i32 [ %1984, %2065 ], [ %2107, %2102 ]
  %2082 = icmp eq i32 %2081, 0
  br i1 %2082, label %2083, label %2102

2083:                                             ; preds = %2078
  %2084 = load i8*, i8** %31, align 8
  %2085 = getelementptr inbounds i8, i8* %2084, i64 1
  %2086 = load i8, i8* %2085, align 1
  %2087 = zext i8 %2086 to i32
  %2088 = load i8, i8* %2084, align 1
  %2089 = icmp eq i8 %2088, -1
  br i1 %2089, label %2090, label %2099

2090:                                             ; preds = %2083
  %2091 = icmp ugt i8 %2086, -113
  br i1 %2091, label %2092, label %2096

2092:                                             ; preds = %2090
  %2093 = add i32 %2079, 65280
  %2094 = load i32, i32* %32, align 4
  %2095 = add i32 %2094, 1
  store i32 %2095, i32* %32, align 4
  br label %2102

2096:                                             ; preds = %2090
  store i8* %2085, i8** %31, align 8
  %2097 = shl nuw nsw i32 %2087, 9
  %2098 = add i32 %2097, %2079
  br label %2102

2099:                                             ; preds = %2083
  store i8* %2085, i8** %31, align 8
  %2100 = shl nuw nsw i32 %2087, 8
  %2101 = add i32 %2100, %2079
  br label %2102

2102:                                             ; preds = %2099, %2096, %2092, %2078
  %2103 = phi i32 [ %2079, %2078 ], [ %2093, %2092 ], [ %2098, %2096 ], [ %2101, %2099 ]
  %2104 = phi i32 [ %2081, %2078 ], [ 8, %2092 ], [ 7, %2096 ], [ 8, %2099 ]
  %2105 = shl i32 %2080, 1
  %2106 = shl i32 %2103, 1
  %2107 = add i32 %2104, -1
  %2108 = icmp ult i32 %2105, 32768
  br i1 %2108, label %2078, label %2112

2109:                                             ; preds = %2060
  %2110 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2010, i64 0, i32 1
  %2111 = load i32, i32* %2110, align 4
  br label %2112

2112:                                             ; preds = %2102, %2053, %2109
  %2113 = phi i32 [ %2062, %2109 ], [ %2057, %2053 ], [ %2106, %2102 ]
  %2114 = phi i32 [ %2013, %2109 ], [ %2056, %2053 ], [ %2105, %2102 ]
  %2115 = phi i32 [ %1984, %2109 ], [ %2058, %2053 ], [ %2107, %2102 ]
  %2116 = phi i32 [ %2111, %2109 ], [ %2025, %2053 ], [ %2074, %2102 ]
  %2117 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %2005
  %2118 = load i8, i8* %2117, align 1
  %2119 = zext i8 %2118 to i32
  %2120 = xor i32 %2116, %2119
  %2121 = icmp eq i32 %2120, 0
  %2122 = select i1 %2121, i32 %29, i32 %33
  %2123 = getelementptr inbounds i32, i32* %48, i64 128
  store i32 %2122, i32* %2123, align 4
  %2124 = load i32, i32* %1988, align 4
  %2125 = or i32 %2124, 2048
  store i32 %2125, i32* %1988, align 4
  %2126 = shl i32 %2120, 25
  %2127 = or i32 %1866, %2126
  %2128 = or i32 %2127, 1024
  %2129 = load i32, i32* %1990, align 4
  %2130 = or i32 %2129, 512
  store i32 %2130, i32* %1990, align 4
  br label %2131

2131:                                             ; preds = %2112, %1981, %1862
  %2132 = phi i32 [ %1863, %1862 ], [ %2113, %2112 ], [ %1982, %1981 ]
  %2133 = phi i32 [ %1864, %1862 ], [ %2114, %2112 ], [ %1983, %1981 ]
  %2134 = phi i32 [ %1865, %1862 ], [ %2115, %2112 ], [ %1984, %1981 ]
  %2135 = phi i32 [ %1866, %1862 ], [ %2128, %2112 ], [ %1866, %1981 ]
  %2136 = phi %struct.opj_mqc_state** [ %1867, %1862 ], [ %2009, %2112 ], [ %1878, %1981 ]
  %2137 = and i32 %2135, 1073750016
  %2138 = icmp eq i32 %2137, 0
  br i1 %2138, label %2139, label %2411

2139:                                             ; preds = %2131
  %2140 = lshr i32 %2135, 9
  %2141 = load i8*, i8** %30, align 8
  %2142 = and i32 %2140, 495
  %2143 = zext i32 %2142 to i64
  %2144 = getelementptr inbounds i8, i8* %2141, i64 %2143
  %2145 = load i8, i8* %2144, align 1
  %2146 = zext i8 %2145 to i64
  %2147 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2146
  %2148 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2147, align 8
  %2149 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 0
  %2150 = load i32, i32* %2149, align 8
  %2151 = sub i32 %2133, %2150
  %2152 = lshr i32 %2132, 16
  %2153 = icmp ult i32 %2152, %2150
  br i1 %2153, label %2154, label %2198

2154:                                             ; preds = %2139
  %2155 = icmp ult i32 %2151, %2150
  %2156 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 1
  %2157 = load i32, i32* %2156, align 4
  %2158 = icmp eq i32 %2157, 0
  %2159 = zext i1 %2158 to i32
  %2160 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 3
  %2161 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 2
  %2162 = select i1 %2155, %struct.opj_mqc_state** %2161, %struct.opj_mqc_state** %2160
  %2163 = select i1 %2155, i32 %2157, i32 %2159
  %2164 = bitcast %struct.opj_mqc_state** %2162 to i64*
  %2165 = load i64, i64* %2164, align 8
  %2166 = bitcast %struct.opj_mqc_state** %2147 to i64*
  store i64 %2165, i64* %2166, align 8
  br label %2167

2167:                                             ; preds = %2191, %2154
  %2168 = phi i32 [ %2132, %2154 ], [ %2195, %2191 ]
  %2169 = phi i32 [ %2150, %2154 ], [ %2194, %2191 ]
  %2170 = phi i32 [ %2134, %2154 ], [ %2196, %2191 ]
  %2171 = icmp eq i32 %2170, 0
  br i1 %2171, label %2172, label %2191

2172:                                             ; preds = %2167
  %2173 = load i8*, i8** %31, align 8
  %2174 = getelementptr inbounds i8, i8* %2173, i64 1
  %2175 = load i8, i8* %2174, align 1
  %2176 = zext i8 %2175 to i32
  %2177 = load i8, i8* %2173, align 1
  %2178 = icmp eq i8 %2177, -1
  br i1 %2178, label %2179, label %2188

2179:                                             ; preds = %2172
  %2180 = icmp ugt i8 %2175, -113
  br i1 %2180, label %2181, label %2185

2181:                                             ; preds = %2179
  %2182 = add i32 %2168, 65280
  %2183 = load i32, i32* %32, align 4
  %2184 = add i32 %2183, 1
  store i32 %2184, i32* %32, align 4
  br label %2191

2185:                                             ; preds = %2179
  store i8* %2174, i8** %31, align 8
  %2186 = shl nuw nsw i32 %2176, 9
  %2187 = add i32 %2186, %2168
  br label %2191

2188:                                             ; preds = %2172
  store i8* %2174, i8** %31, align 8
  %2189 = shl nuw nsw i32 %2176, 8
  %2190 = add i32 %2189, %2168
  br label %2191

2191:                                             ; preds = %2188, %2185, %2181, %2167
  %2192 = phi i32 [ %2168, %2167 ], [ %2182, %2181 ], [ %2187, %2185 ], [ %2190, %2188 ]
  %2193 = phi i32 [ %2170, %2167 ], [ 8, %2181 ], [ 7, %2185 ], [ 8, %2188 ]
  %2194 = shl i32 %2169, 1
  %2195 = shl i32 %2192, 1
  %2196 = add i32 %2193, -1
  %2197 = icmp ult i32 %2194, 32768
  br i1 %2197, label %2167, label %2250

2198:                                             ; preds = %2139
  %2199 = shl i32 %2150, 16
  %2200 = sub i32 %2132, %2199
  %2201 = trunc i32 %2151 to i16
  %2202 = icmp sgt i16 %2201, -1
  br i1 %2202, label %2203, label %2247

2203:                                             ; preds = %2198
  %2204 = icmp ult i32 %2151, %2150
  %2205 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 1
  %2206 = load i32, i32* %2205, align 4
  %2207 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 2
  %2208 = icmp eq i32 %2206, 0
  %2209 = zext i1 %2208 to i32
  %2210 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 3
  %2211 = select i1 %2204, %struct.opj_mqc_state** %2210, %struct.opj_mqc_state** %2207
  %2212 = select i1 %2204, i32 %2209, i32 %2206
  %2213 = bitcast %struct.opj_mqc_state** %2211 to i64*
  %2214 = load i64, i64* %2213, align 8
  %2215 = bitcast %struct.opj_mqc_state** %2147 to i64*
  store i64 %2214, i64* %2215, align 8
  br label %2216

2216:                                             ; preds = %2240, %2203
  %2217 = phi i32 [ %2200, %2203 ], [ %2244, %2240 ]
  %2218 = phi i32 [ %2151, %2203 ], [ %2243, %2240 ]
  %2219 = phi i32 [ %2134, %2203 ], [ %2245, %2240 ]
  %2220 = icmp eq i32 %2219, 0
  br i1 %2220, label %2221, label %2240

2221:                                             ; preds = %2216
  %2222 = load i8*, i8** %31, align 8
  %2223 = getelementptr inbounds i8, i8* %2222, i64 1
  %2224 = load i8, i8* %2223, align 1
  %2225 = zext i8 %2224 to i32
  %2226 = load i8, i8* %2222, align 1
  %2227 = icmp eq i8 %2226, -1
  br i1 %2227, label %2228, label %2237

2228:                                             ; preds = %2221
  %2229 = icmp ugt i8 %2224, -113
  br i1 %2229, label %2230, label %2234

2230:                                             ; preds = %2228
  %2231 = add i32 %2217, 65280
  %2232 = load i32, i32* %32, align 4
  %2233 = add i32 %2232, 1
  store i32 %2233, i32* %32, align 4
  br label %2240

2234:                                             ; preds = %2228
  store i8* %2223, i8** %31, align 8
  %2235 = shl nuw nsw i32 %2225, 9
  %2236 = add i32 %2235, %2217
  br label %2240

2237:                                             ; preds = %2221
  store i8* %2223, i8** %31, align 8
  %2238 = shl nuw nsw i32 %2225, 8
  %2239 = add i32 %2238, %2217
  br label %2240

2240:                                             ; preds = %2237, %2234, %2230, %2216
  %2241 = phi i32 [ %2217, %2216 ], [ %2231, %2230 ], [ %2236, %2234 ], [ %2239, %2237 ]
  %2242 = phi i32 [ %2219, %2216 ], [ 8, %2230 ], [ 7, %2234 ], [ 8, %2237 ]
  %2243 = shl i32 %2218, 1
  %2244 = shl i32 %2241, 1
  %2245 = add i32 %2242, -1
  %2246 = icmp ult i32 %2243, 32768
  br i1 %2246, label %2216, label %2250

2247:                                             ; preds = %2198
  %2248 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2148, i64 0, i32 1
  %2249 = load i32, i32* %2248, align 4
  br label %2250

2250:                                             ; preds = %2240, %2191, %2247
  %2251 = phi i32 [ %2200, %2247 ], [ %2195, %2191 ], [ %2244, %2240 ]
  %2252 = phi i32 [ %2151, %2247 ], [ %2194, %2191 ], [ %2243, %2240 ]
  %2253 = phi i32 [ %2134, %2247 ], [ %2196, %2191 ], [ %2245, %2240 ]
  %2254 = phi i32 [ %2249, %2247 ], [ %2163, %2191 ], [ %2212, %2240 ]
  %2255 = icmp eq i32 %2254, 0
  br i1 %2255, label %2411, label %2256

2256:                                             ; preds = %2250
  %2257 = getelementptr inbounds i32, i32* %49, i64 -1
  %2258 = load i32, i32* %2257, align 4
  %2259 = getelementptr inbounds i32, i32* %49, i64 1
  %2260 = load i32, i32* %2259, align 4
  %2261 = and i32 %2140, 170
  %2262 = lshr i32 %2258, 28
  %2263 = and i32 %2262, 1
  %2264 = lshr i32 %2260, 26
  %2265 = and i32 %2264, 4
  %2266 = lshr i32 %2135, 21
  %2267 = and i32 %2266, 16
  %2268 = lshr i32 %2135, 25
  %2269 = and i32 %2268, 64
  %2270 = or i32 %2269, %2261
  %2271 = or i32 %2270, %2267
  %2272 = or i32 %2271, %2263
  %2273 = or i32 %2272, %2265
  %2274 = zext i32 %2273 to i64
  %2275 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %2274
  %2276 = load i8, i8* %2275, align 1
  %2277 = zext i8 %2276 to i64
  %2278 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2277
  %2279 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2278, align 8
  %2280 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 0
  %2281 = load i32, i32* %2280, align 8
  %2282 = sub i32 %2252, %2281
  %2283 = lshr i32 %2251, 16
  %2284 = icmp ult i32 %2283, %2281
  br i1 %2284, label %2285, label %2329

2285:                                             ; preds = %2256
  %2286 = icmp ult i32 %2282, %2281
  %2287 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 1
  %2288 = load i32, i32* %2287, align 4
  %2289 = icmp eq i32 %2288, 0
  %2290 = zext i1 %2289 to i32
  %2291 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 3
  %2292 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 2
  %2293 = select i1 %2286, %struct.opj_mqc_state** %2292, %struct.opj_mqc_state** %2291
  %2294 = select i1 %2286, i32 %2288, i32 %2290
  %2295 = bitcast %struct.opj_mqc_state** %2293 to i64*
  %2296 = load i64, i64* %2295, align 8
  %2297 = bitcast %struct.opj_mqc_state** %2278 to i64*
  store i64 %2296, i64* %2297, align 8
  br label %2298

2298:                                             ; preds = %2322, %2285
  %2299 = phi i32 [ %2251, %2285 ], [ %2326, %2322 ]
  %2300 = phi i32 [ %2281, %2285 ], [ %2325, %2322 ]
  %2301 = phi i32 [ %2253, %2285 ], [ %2327, %2322 ]
  %2302 = icmp eq i32 %2301, 0
  br i1 %2302, label %2303, label %2322

2303:                                             ; preds = %2298
  %2304 = load i8*, i8** %31, align 8
  %2305 = getelementptr inbounds i8, i8* %2304, i64 1
  %2306 = load i8, i8* %2305, align 1
  %2307 = zext i8 %2306 to i32
  %2308 = load i8, i8* %2304, align 1
  %2309 = icmp eq i8 %2308, -1
  br i1 %2309, label %2310, label %2319

2310:                                             ; preds = %2303
  %2311 = icmp ugt i8 %2306, -113
  br i1 %2311, label %2312, label %2316

2312:                                             ; preds = %2310
  %2313 = add i32 %2299, 65280
  %2314 = load i32, i32* %32, align 4
  %2315 = add i32 %2314, 1
  store i32 %2315, i32* %32, align 4
  br label %2322

2316:                                             ; preds = %2310
  store i8* %2305, i8** %31, align 8
  %2317 = shl nuw nsw i32 %2307, 9
  %2318 = add i32 %2317, %2299
  br label %2322

2319:                                             ; preds = %2303
  store i8* %2305, i8** %31, align 8
  %2320 = shl nuw nsw i32 %2307, 8
  %2321 = add i32 %2320, %2299
  br label %2322

2322:                                             ; preds = %2319, %2316, %2312, %2298
  %2323 = phi i32 [ %2299, %2298 ], [ %2313, %2312 ], [ %2318, %2316 ], [ %2321, %2319 ]
  %2324 = phi i32 [ %2301, %2298 ], [ 8, %2312 ], [ 7, %2316 ], [ 8, %2319 ]
  %2325 = shl i32 %2300, 1
  %2326 = shl i32 %2323, 1
  %2327 = add i32 %2324, -1
  %2328 = icmp ult i32 %2325, 32768
  br i1 %2328, label %2298, label %2381

2329:                                             ; preds = %2256
  %2330 = shl i32 %2281, 16
  %2331 = sub i32 %2251, %2330
  %2332 = trunc i32 %2282 to i16
  %2333 = icmp sgt i16 %2332, -1
  br i1 %2333, label %2334, label %2378

2334:                                             ; preds = %2329
  %2335 = icmp ult i32 %2282, %2281
  %2336 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 1
  %2337 = load i32, i32* %2336, align 4
  %2338 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 2
  %2339 = icmp eq i32 %2337, 0
  %2340 = zext i1 %2339 to i32
  %2341 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 3
  %2342 = select i1 %2335, %struct.opj_mqc_state** %2341, %struct.opj_mqc_state** %2338
  %2343 = select i1 %2335, i32 %2340, i32 %2337
  %2344 = bitcast %struct.opj_mqc_state** %2342 to i64*
  %2345 = load i64, i64* %2344, align 8
  %2346 = bitcast %struct.opj_mqc_state** %2278 to i64*
  store i64 %2345, i64* %2346, align 8
  br label %2347

2347:                                             ; preds = %2371, %2334
  %2348 = phi i32 [ %2331, %2334 ], [ %2375, %2371 ]
  %2349 = phi i32 [ %2282, %2334 ], [ %2374, %2371 ]
  %2350 = phi i32 [ %2253, %2334 ], [ %2376, %2371 ]
  %2351 = icmp eq i32 %2350, 0
  br i1 %2351, label %2352, label %2371

2352:                                             ; preds = %2347
  %2353 = load i8*, i8** %31, align 8
  %2354 = getelementptr inbounds i8, i8* %2353, i64 1
  %2355 = load i8, i8* %2354, align 1
  %2356 = zext i8 %2355 to i32
  %2357 = load i8, i8* %2353, align 1
  %2358 = icmp eq i8 %2357, -1
  br i1 %2358, label %2359, label %2368

2359:                                             ; preds = %2352
  %2360 = icmp ugt i8 %2355, -113
  br i1 %2360, label %2361, label %2365

2361:                                             ; preds = %2359
  %2362 = add i32 %2348, 65280
  %2363 = load i32, i32* %32, align 4
  %2364 = add i32 %2363, 1
  store i32 %2364, i32* %32, align 4
  br label %2371

2365:                                             ; preds = %2359
  store i8* %2354, i8** %31, align 8
  %2366 = shl nuw nsw i32 %2356, 9
  %2367 = add i32 %2366, %2348
  br label %2371

2368:                                             ; preds = %2352
  store i8* %2354, i8** %31, align 8
  %2369 = shl nuw nsw i32 %2356, 8
  %2370 = add i32 %2369, %2348
  br label %2371

2371:                                             ; preds = %2368, %2365, %2361, %2347
  %2372 = phi i32 [ %2348, %2347 ], [ %2362, %2361 ], [ %2367, %2365 ], [ %2370, %2368 ]
  %2373 = phi i32 [ %2350, %2347 ], [ 8, %2361 ], [ 7, %2365 ], [ 8, %2368 ]
  %2374 = shl i32 %2349, 1
  %2375 = shl i32 %2372, 1
  %2376 = add i32 %2373, -1
  %2377 = icmp ult i32 %2374, 32768
  br i1 %2377, label %2347, label %2381

2378:                                             ; preds = %2329
  %2379 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2279, i64 0, i32 1
  %2380 = load i32, i32* %2379, align 4
  br label %2381

2381:                                             ; preds = %2371, %2322, %2378
  %2382 = phi i32 [ %2331, %2378 ], [ %2326, %2322 ], [ %2375, %2371 ]
  %2383 = phi i32 [ %2282, %2378 ], [ %2325, %2322 ], [ %2374, %2371 ]
  %2384 = phi i32 [ %2253, %2378 ], [ %2327, %2322 ], [ %2376, %2371 ]
  %2385 = phi i32 [ %2380, %2378 ], [ %2294, %2322 ], [ %2343, %2371 ]
  %2386 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %2274
  %2387 = load i8, i8* %2386, align 1
  %2388 = zext i8 %2387 to i32
  %2389 = xor i32 %2385, %2388
  %2390 = icmp eq i32 %2389, 0
  %2391 = select i1 %2390, i32 %29, i32 %33
  %2392 = getelementptr inbounds i32, i32* %48, i64 192
  store i32 %2391, i32* %2392, align 4
  %2393 = load i32, i32* %2257, align 4
  %2394 = or i32 %2393, 16384
  store i32 %2394, i32* %2257, align 4
  %2395 = shl i32 %2389, 28
  %2396 = or i32 %2135, %2395
  %2397 = or i32 %2396, 8192
  %2398 = load i32, i32* %2259, align 4
  %2399 = or i32 %2398, 4096
  store i32 %2399, i32* %2259, align 4
  %2400 = getelementptr inbounds i32, i32* %49, i64 66
  %2401 = shl i32 %2389, 18
  %2402 = load i32, i32* %2400, align 4
  %2403 = or i32 %2401, %2402
  %2404 = or i32 %2403, 2
  store i32 %2404, i32* %2400, align 4
  %2405 = getelementptr inbounds i32, i32* %49, i64 65
  %2406 = load i32, i32* %2405, align 4
  %2407 = or i32 %2406, 4
  store i32 %2407, i32* %2405, align 4
  %2408 = getelementptr inbounds i32, i32* %49, i64 67
  %2409 = load i32, i32* %2408, align 4
  %2410 = or i32 %2409, 1
  store i32 %2410, i32* %2408, align 4
  br label %2411

2411:                                             ; preds = %2381, %2250, %2131, %1301, %1165, %377
  %2412 = phi i32 [ %2132, %2131 ], [ %2382, %2381 ], [ %2251, %2250 ], [ %1166, %1165 ], [ %1302, %1301 ], [ %378, %377 ]
  %2413 = phi i32 [ %2133, %2131 ], [ %2383, %2381 ], [ %2252, %2250 ], [ %1167, %1165 ], [ %1303, %1301 ], [ %379, %377 ]
  %2414 = phi i32 [ %2134, %2131 ], [ %2384, %2381 ], [ %2253, %2250 ], [ %1168, %1165 ], [ %1304, %1301 ], [ %380, %377 ]
  %2415 = phi i32 [ %2135, %2131 ], [ %2397, %2381 ], [ %2135, %2250 ], [ %1054, %1165 ], [ %1317, %1301 ], [ 0, %377 ]
  %2416 = phi %struct.opj_mqc_state** [ %2136, %2131 ], [ %2278, %2381 ], [ %2147, %2250 ], [ %1062, %1165 ], [ %1198, %1301 ], [ %36, %377 ]
  %2417 = and i32 %2415, -1226833921
  store i32 %2417, i32* %49, align 4
  br label %2418

2418:                                             ; preds = %2411, %159
  %2419 = phi i32 [ %2412, %2411 ], [ %160, %159 ]
  %2420 = phi i32 [ %2413, %2411 ], [ %161, %159 ]
  %2421 = phi i32 [ %2414, %2411 ], [ %162, %159 ]
  %2422 = phi %struct.opj_mqc_state** [ %2416, %2411 ], [ %34, %159 ]
  %2423 = add nuw nsw i32 %47, 1
  %2424 = getelementptr inbounds i32, i32* %48, i64 1
  %2425 = getelementptr inbounds i32, i32* %49, i64 1
  %2426 = icmp eq i32 %2423, 64
  br i1 %2426, label %2427, label %46

2427:                                             ; preds = %2418
  %2428 = add nuw nsw i32 %39, 4
  %2429 = getelementptr inbounds i32, i32* %48, i64 193
  %2430 = getelementptr inbounds i32, i32* %49, i64 3
  %2431 = icmp ult i32 %2428, 64
  br i1 %2431, label %38, label %2432

2432:                                             ; preds = %2427
  store %struct.opj_mqc_state** %2422, %struct.opj_mqc_state*** %19, align 8
  store i32 %2419, i32* %21, align 8
  store i32 %2420, i32* %23, align 4
  store i32 %2421, i32* %25, align 8
  br label %9827

2433:                                             ; preds = %17, %4844
  %2434 = phi i32 [ %4845, %4844 ], [ 0, %17 ]
  %2435 = phi i32* [ %4846, %4844 ], [ %14, %17 ]
  %2436 = phi i32* [ %4847, %4844 ], [ %18, %17 ]
  %2437 = phi %struct.opj_mqc_state** [ %4839, %4844 ], [ %20, %17 ]
  %2438 = phi i32 [ %4838, %4844 ], [ %22, %17 ]
  %2439 = phi i32 [ %4837, %4844 ], [ %24, %17 ]
  %2440 = phi i32 [ %4836, %4844 ], [ %26, %17 ]
  br label %2441

2441:                                             ; preds = %4835, %2433
  %2442 = phi i32 [ 0, %2433 ], [ %4840, %4835 ]
  %2443 = phi i32* [ %2435, %2433 ], [ %4841, %4835 ]
  %2444 = phi i32* [ %2436, %2433 ], [ %4842, %4835 ]
  %2445 = phi %struct.opj_mqc_state** [ %2437, %2433 ], [ %4839, %4835 ]
  %2446 = phi i32 [ %2438, %2433 ], [ %4838, %4835 ]
  %2447 = phi i32 [ %2439, %2433 ], [ %4837, %4835 ]
  %2448 = phi i32 [ %2440, %2433 ], [ %4836, %4835 ]
  %2449 = load i32, i32* %2444, align 4
  %2450 = icmp eq i32 %2449, 0
  br i1 %2450, label %2451, label %3737

2451:                                             ; preds = %2441
  %2452 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %34, align 8
  %2453 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 0
  %2454 = load i32, i32* %2453, align 8
  %2455 = sub i32 %2447, %2454
  %2456 = lshr i32 %2446, 16
  %2457 = icmp ult i32 %2456, %2454
  br i1 %2457, label %2458, label %2499

2458:                                             ; preds = %2451
  %2459 = icmp ult i32 %2455, %2454
  %2460 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 1
  %2461 = load i32, i32* %2460, align 4
  %2462 = icmp eq i32 %2461, 0
  %2463 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 3
  %2464 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 2
  %2465 = select i1 %2459, %struct.opj_mqc_state** %2464, %struct.opj_mqc_state** %2463
  %2466 = bitcast %struct.opj_mqc_state** %2465 to i64*
  %2467 = load i64, i64* %2466, align 8
  store i64 %2467, i64* %35, align 8
  br label %2468

2468:                                             ; preds = %2492, %2458
  %2469 = phi i32 [ %2448, %2458 ], [ %2497, %2492 ]
  %2470 = phi i32 [ %2454, %2458 ], [ %2495, %2492 ]
  %2471 = phi i32 [ %2446, %2458 ], [ %2496, %2492 ]
  %2472 = icmp eq i32 %2469, 0
  br i1 %2472, label %2473, label %2492

2473:                                             ; preds = %2468
  %2474 = load i8*, i8** %31, align 8
  %2475 = getelementptr inbounds i8, i8* %2474, i64 1
  %2476 = load i8, i8* %2475, align 1
  %2477 = zext i8 %2476 to i32
  %2478 = load i8, i8* %2474, align 1
  %2479 = icmp eq i8 %2478, -1
  br i1 %2479, label %2480, label %2489

2480:                                             ; preds = %2473
  %2481 = icmp ugt i8 %2476, -113
  br i1 %2481, label %2482, label %2486

2482:                                             ; preds = %2480
  %2483 = add i32 %2471, 65280
  %2484 = load i32, i32* %32, align 4
  %2485 = add i32 %2484, 1
  store i32 %2485, i32* %32, align 4
  br label %2492

2486:                                             ; preds = %2480
  store i8* %2475, i8** %31, align 8
  %2487 = shl nuw nsw i32 %2477, 9
  %2488 = add i32 %2487, %2471
  br label %2492

2489:                                             ; preds = %2473
  store i8* %2475, i8** %31, align 8
  %2490 = shl nuw nsw i32 %2477, 8
  %2491 = add i32 %2490, %2471
  br label %2492

2492:                                             ; preds = %2489, %2486, %2482, %2468
  %2493 = phi i32 [ %2469, %2468 ], [ 8, %2482 ], [ 7, %2486 ], [ 8, %2489 ]
  %2494 = phi i32 [ %2471, %2468 ], [ %2483, %2482 ], [ %2488, %2486 ], [ %2491, %2489 ]
  %2495 = shl i32 %2470, 1
  %2496 = shl i32 %2494, 1
  %2497 = add i32 %2493, -1
  %2498 = icmp ult i32 %2495, 32768
  br i1 %2498, label %2468, label %2548

2499:                                             ; preds = %2451
  %2500 = shl i32 %2454, 16
  %2501 = sub i32 %2446, %2500
  %2502 = trunc i32 %2455 to i16
  %2503 = icmp sgt i16 %2502, -1
  br i1 %2503, label %2504, label %2545

2504:                                             ; preds = %2499
  %2505 = icmp ult i32 %2455, %2454
  %2506 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 1
  %2507 = load i32, i32* %2506, align 4
  %2508 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 2
  %2509 = icmp eq i32 %2507, 0
  %2510 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 3
  %2511 = select i1 %2505, %struct.opj_mqc_state** %2510, %struct.opj_mqc_state** %2508
  %2512 = bitcast %struct.opj_mqc_state** %2511 to i64*
  %2513 = load i64, i64* %2512, align 8
  store i64 %2513, i64* %35, align 8
  br label %2514

2514:                                             ; preds = %2538, %2504
  %2515 = phi i32 [ %2448, %2504 ], [ %2543, %2538 ]
  %2516 = phi i32 [ %2455, %2504 ], [ %2541, %2538 ]
  %2517 = phi i32 [ %2501, %2504 ], [ %2542, %2538 ]
  %2518 = icmp eq i32 %2515, 0
  br i1 %2518, label %2519, label %2538

2519:                                             ; preds = %2514
  %2520 = load i8*, i8** %31, align 8
  %2521 = getelementptr inbounds i8, i8* %2520, i64 1
  %2522 = load i8, i8* %2521, align 1
  %2523 = zext i8 %2522 to i32
  %2524 = load i8, i8* %2520, align 1
  %2525 = icmp eq i8 %2524, -1
  br i1 %2525, label %2526, label %2535

2526:                                             ; preds = %2519
  %2527 = icmp ugt i8 %2522, -113
  br i1 %2527, label %2528, label %2532

2528:                                             ; preds = %2526
  %2529 = add i32 %2517, 65280
  %2530 = load i32, i32* %32, align 4
  %2531 = add i32 %2530, 1
  store i32 %2531, i32* %32, align 4
  br label %2538

2532:                                             ; preds = %2526
  store i8* %2521, i8** %31, align 8
  %2533 = shl nuw nsw i32 %2523, 9
  %2534 = add i32 %2533, %2517
  br label %2538

2535:                                             ; preds = %2519
  store i8* %2521, i8** %31, align 8
  %2536 = shl nuw nsw i32 %2523, 8
  %2537 = add i32 %2536, %2517
  br label %2538

2538:                                             ; preds = %2535, %2532, %2528, %2514
  %2539 = phi i32 [ %2515, %2514 ], [ 8, %2528 ], [ 7, %2532 ], [ 8, %2535 ]
  %2540 = phi i32 [ %2517, %2514 ], [ %2529, %2528 ], [ %2534, %2532 ], [ %2537, %2535 ]
  %2541 = shl i32 %2516, 1
  %2542 = shl i32 %2540, 1
  %2543 = add i32 %2539, -1
  %2544 = icmp ult i32 %2541, 32768
  br i1 %2544, label %2514, label %2551

2545:                                             ; preds = %2499
  %2546 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2452, i64 0, i32 1
  %2547 = load i32, i32* %2546, align 4
  br label %2554

2548:                                             ; preds = %2492
  %2549 = zext i1 %2462 to i32
  %2550 = select i1 %2459, i32 %2461, i32 %2549
  br label %2554

2551:                                             ; preds = %2538
  %2552 = zext i1 %2509 to i32
  %2553 = select i1 %2505, i32 %2552, i32 %2507
  br label %2554

2554:                                             ; preds = %2551, %2548, %2545
  %2555 = phi i32 [ %2448, %2545 ], [ %2497, %2548 ], [ %2543, %2551 ]
  %2556 = phi i32 [ %2547, %2545 ], [ %2550, %2548 ], [ %2553, %2551 ]
  %2557 = phi i32 [ %2455, %2545 ], [ %2495, %2548 ], [ %2541, %2551 ]
  %2558 = phi i32 [ %2501, %2545 ], [ %2496, %2548 ], [ %2542, %2551 ]
  %2559 = icmp eq i32 %2556, 0
  br i1 %2559, label %4835, label %2560

2560:                                             ; preds = %2554
  %2561 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %36, align 8
  %2562 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 0
  %2563 = load i32, i32* %2562, align 8
  %2564 = sub i32 %2557, %2563
  %2565 = lshr i32 %2558, 16
  %2566 = icmp ult i32 %2565, %2563
  br i1 %2566, label %2567, label %2608

2567:                                             ; preds = %2560
  %2568 = icmp ult i32 %2564, %2563
  %2569 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 1
  %2570 = load i32, i32* %2569, align 4
  %2571 = icmp eq i32 %2570, 0
  %2572 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 3
  %2573 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 2
  %2574 = select i1 %2568, %struct.opj_mqc_state** %2573, %struct.opj_mqc_state** %2572
  %2575 = bitcast %struct.opj_mqc_state** %2574 to i64*
  %2576 = load i64, i64* %2575, align 8
  store i64 %2576, i64* %37, align 8
  br label %2577

2577:                                             ; preds = %2601, %2567
  %2578 = phi i32 [ %2555, %2567 ], [ %2606, %2601 ]
  %2579 = phi i32 [ %2563, %2567 ], [ %2604, %2601 ]
  %2580 = phi i32 [ %2558, %2567 ], [ %2605, %2601 ]
  %2581 = icmp eq i32 %2578, 0
  br i1 %2581, label %2582, label %2601

2582:                                             ; preds = %2577
  %2583 = load i8*, i8** %31, align 8
  %2584 = getelementptr inbounds i8, i8* %2583, i64 1
  %2585 = load i8, i8* %2584, align 1
  %2586 = zext i8 %2585 to i32
  %2587 = load i8, i8* %2583, align 1
  %2588 = icmp eq i8 %2587, -1
  br i1 %2588, label %2589, label %2598

2589:                                             ; preds = %2582
  %2590 = icmp ugt i8 %2585, -113
  br i1 %2590, label %2591, label %2595

2591:                                             ; preds = %2589
  %2592 = add i32 %2580, 65280
  %2593 = load i32, i32* %32, align 4
  %2594 = add i32 %2593, 1
  store i32 %2594, i32* %32, align 4
  br label %2601

2595:                                             ; preds = %2589
  store i8* %2584, i8** %31, align 8
  %2596 = shl nuw nsw i32 %2586, 9
  %2597 = add i32 %2596, %2580
  br label %2601

2598:                                             ; preds = %2582
  store i8* %2584, i8** %31, align 8
  %2599 = shl nuw nsw i32 %2586, 8
  %2600 = add i32 %2599, %2580
  br label %2601

2601:                                             ; preds = %2598, %2595, %2591, %2577
  %2602 = phi i32 [ %2578, %2577 ], [ 8, %2591 ], [ 7, %2595 ], [ 8, %2598 ]
  %2603 = phi i32 [ %2580, %2577 ], [ %2592, %2591 ], [ %2597, %2595 ], [ %2600, %2598 ]
  %2604 = shl i32 %2579, 1
  %2605 = shl i32 %2603, 1
  %2606 = add i32 %2602, -1
  %2607 = icmp ult i32 %2604, 32768
  br i1 %2607, label %2577, label %2657

2608:                                             ; preds = %2560
  %2609 = shl i32 %2563, 16
  %2610 = sub i32 %2558, %2609
  %2611 = trunc i32 %2564 to i16
  %2612 = icmp sgt i16 %2611, -1
  br i1 %2612, label %2613, label %2654

2613:                                             ; preds = %2608
  %2614 = icmp ult i32 %2564, %2563
  %2615 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 1
  %2616 = load i32, i32* %2615, align 4
  %2617 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 2
  %2618 = icmp eq i32 %2616, 0
  %2619 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 3
  %2620 = select i1 %2614, %struct.opj_mqc_state** %2619, %struct.opj_mqc_state** %2617
  %2621 = bitcast %struct.opj_mqc_state** %2620 to i64*
  %2622 = load i64, i64* %2621, align 8
  store i64 %2622, i64* %37, align 8
  br label %2623

2623:                                             ; preds = %2647, %2613
  %2624 = phi i32 [ %2555, %2613 ], [ %2652, %2647 ]
  %2625 = phi i32 [ %2564, %2613 ], [ %2650, %2647 ]
  %2626 = phi i32 [ %2610, %2613 ], [ %2651, %2647 ]
  %2627 = icmp eq i32 %2624, 0
  br i1 %2627, label %2628, label %2647

2628:                                             ; preds = %2623
  %2629 = load i8*, i8** %31, align 8
  %2630 = getelementptr inbounds i8, i8* %2629, i64 1
  %2631 = load i8, i8* %2630, align 1
  %2632 = zext i8 %2631 to i32
  %2633 = load i8, i8* %2629, align 1
  %2634 = icmp eq i8 %2633, -1
  br i1 %2634, label %2635, label %2644

2635:                                             ; preds = %2628
  %2636 = icmp ugt i8 %2631, -113
  br i1 %2636, label %2637, label %2641

2637:                                             ; preds = %2635
  %2638 = add i32 %2626, 65280
  %2639 = load i32, i32* %32, align 4
  %2640 = add i32 %2639, 1
  store i32 %2640, i32* %32, align 4
  br label %2647

2641:                                             ; preds = %2635
  store i8* %2630, i8** %31, align 8
  %2642 = shl nuw nsw i32 %2632, 9
  %2643 = add i32 %2642, %2626
  br label %2647

2644:                                             ; preds = %2628
  store i8* %2630, i8** %31, align 8
  %2645 = shl nuw nsw i32 %2632, 8
  %2646 = add i32 %2645, %2626
  br label %2647

2647:                                             ; preds = %2644, %2641, %2637, %2623
  %2648 = phi i32 [ %2624, %2623 ], [ 8, %2637 ], [ 7, %2641 ], [ 8, %2644 ]
  %2649 = phi i32 [ %2626, %2623 ], [ %2638, %2637 ], [ %2643, %2641 ], [ %2646, %2644 ]
  %2650 = shl i32 %2625, 1
  %2651 = shl i32 %2649, 1
  %2652 = add i32 %2648, -1
  %2653 = icmp ult i32 %2650, 32768
  br i1 %2653, label %2623, label %2661

2654:                                             ; preds = %2608
  %2655 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2561, i64 0, i32 1
  %2656 = load i32, i32* %2655, align 4
  br label %2665

2657:                                             ; preds = %2601
  %2658 = zext i1 %2571 to i32
  %2659 = select i1 %2568, i32 %2570, i32 %2658
  %2660 = inttoptr i64 %2576 to %struct.opj_mqc_state*
  br label %2665

2661:                                             ; preds = %2647
  %2662 = zext i1 %2618 to i32
  %2663 = select i1 %2614, i32 %2662, i32 %2616
  %2664 = inttoptr i64 %2622 to %struct.opj_mqc_state*
  br label %2665

2665:                                             ; preds = %2661, %2657, %2654
  %2666 = phi %struct.opj_mqc_state* [ %2561, %2654 ], [ %2660, %2657 ], [ %2664, %2661 ]
  %2667 = phi i32 [ %2555, %2654 ], [ %2606, %2657 ], [ %2652, %2661 ]
  %2668 = phi i32 [ %2564, %2654 ], [ %2604, %2657 ], [ %2650, %2661 ]
  %2669 = phi i32 [ %2610, %2654 ], [ %2605, %2657 ], [ %2651, %2661 ]
  %2670 = phi i32 [ %2656, %2654 ], [ %2659, %2657 ], [ %2663, %2661 ]
  %2671 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 0
  %2672 = load i32, i32* %2671, align 8
  %2673 = sub i32 %2668, %2672
  %2674 = lshr i32 %2669, 16
  %2675 = icmp ult i32 %2674, %2672
  br i1 %2675, label %2676, label %2717

2676:                                             ; preds = %2665
  %2677 = icmp ult i32 %2673, %2672
  %2678 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 1
  %2679 = load i32, i32* %2678, align 4
  %2680 = icmp eq i32 %2679, 0
  %2681 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 3
  %2682 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 2
  %2683 = select i1 %2677, %struct.opj_mqc_state** %2682, %struct.opj_mqc_state** %2681
  %2684 = bitcast %struct.opj_mqc_state** %2683 to i64*
  %2685 = load i64, i64* %2684, align 8
  store i64 %2685, i64* %37, align 8
  br label %2686

2686:                                             ; preds = %2710, %2676
  %2687 = phi i32 [ %2667, %2676 ], [ %2715, %2710 ]
  %2688 = phi i32 [ %2672, %2676 ], [ %2713, %2710 ]
  %2689 = phi i32 [ %2669, %2676 ], [ %2714, %2710 ]
  %2690 = icmp eq i32 %2687, 0
  br i1 %2690, label %2691, label %2710

2691:                                             ; preds = %2686
  %2692 = load i8*, i8** %31, align 8
  %2693 = getelementptr inbounds i8, i8* %2692, i64 1
  %2694 = load i8, i8* %2693, align 1
  %2695 = zext i8 %2694 to i32
  %2696 = load i8, i8* %2692, align 1
  %2697 = icmp eq i8 %2696, -1
  br i1 %2697, label %2698, label %2707

2698:                                             ; preds = %2691
  %2699 = icmp ugt i8 %2694, -113
  br i1 %2699, label %2700, label %2704

2700:                                             ; preds = %2698
  %2701 = add i32 %2689, 65280
  %2702 = load i32, i32* %32, align 4
  %2703 = add i32 %2702, 1
  store i32 %2703, i32* %32, align 4
  br label %2710

2704:                                             ; preds = %2698
  store i8* %2693, i8** %31, align 8
  %2705 = shl nuw nsw i32 %2695, 9
  %2706 = add i32 %2705, %2689
  br label %2710

2707:                                             ; preds = %2691
  store i8* %2693, i8** %31, align 8
  %2708 = shl nuw nsw i32 %2695, 8
  %2709 = add i32 %2708, %2689
  br label %2710

2710:                                             ; preds = %2707, %2704, %2700, %2686
  %2711 = phi i32 [ %2687, %2686 ], [ 8, %2700 ], [ 7, %2704 ], [ 8, %2707 ]
  %2712 = phi i32 [ %2689, %2686 ], [ %2701, %2700 ], [ %2706, %2704 ], [ %2709, %2707 ]
  %2713 = shl i32 %2688, 1
  %2714 = shl i32 %2712, 1
  %2715 = add i32 %2711, -1
  %2716 = icmp ult i32 %2713, 32768
  br i1 %2716, label %2686, label %2766

2717:                                             ; preds = %2665
  %2718 = shl i32 %2672, 16
  %2719 = sub i32 %2669, %2718
  %2720 = trunc i32 %2673 to i16
  %2721 = icmp sgt i16 %2720, -1
  br i1 %2721, label %2722, label %2763

2722:                                             ; preds = %2717
  %2723 = icmp ult i32 %2673, %2672
  %2724 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 1
  %2725 = load i32, i32* %2724, align 4
  %2726 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 2
  %2727 = icmp eq i32 %2725, 0
  %2728 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 3
  %2729 = select i1 %2723, %struct.opj_mqc_state** %2728, %struct.opj_mqc_state** %2726
  %2730 = bitcast %struct.opj_mqc_state** %2729 to i64*
  %2731 = load i64, i64* %2730, align 8
  store i64 %2731, i64* %37, align 8
  br label %2732

2732:                                             ; preds = %2756, %2722
  %2733 = phi i32 [ %2667, %2722 ], [ %2761, %2756 ]
  %2734 = phi i32 [ %2673, %2722 ], [ %2759, %2756 ]
  %2735 = phi i32 [ %2719, %2722 ], [ %2760, %2756 ]
  %2736 = icmp eq i32 %2733, 0
  br i1 %2736, label %2737, label %2756

2737:                                             ; preds = %2732
  %2738 = load i8*, i8** %31, align 8
  %2739 = getelementptr inbounds i8, i8* %2738, i64 1
  %2740 = load i8, i8* %2739, align 1
  %2741 = zext i8 %2740 to i32
  %2742 = load i8, i8* %2738, align 1
  %2743 = icmp eq i8 %2742, -1
  br i1 %2743, label %2744, label %2753

2744:                                             ; preds = %2737
  %2745 = icmp ugt i8 %2740, -113
  br i1 %2745, label %2746, label %2750

2746:                                             ; preds = %2744
  %2747 = add i32 %2735, 65280
  %2748 = load i32, i32* %32, align 4
  %2749 = add i32 %2748, 1
  store i32 %2749, i32* %32, align 4
  br label %2756

2750:                                             ; preds = %2744
  store i8* %2739, i8** %31, align 8
  %2751 = shl nuw nsw i32 %2741, 9
  %2752 = add i32 %2751, %2735
  br label %2756

2753:                                             ; preds = %2737
  store i8* %2739, i8** %31, align 8
  %2754 = shl nuw nsw i32 %2741, 8
  %2755 = add i32 %2754, %2735
  br label %2756

2756:                                             ; preds = %2753, %2750, %2746, %2732
  %2757 = phi i32 [ %2733, %2732 ], [ 8, %2746 ], [ 7, %2750 ], [ 8, %2753 ]
  %2758 = phi i32 [ %2735, %2732 ], [ %2747, %2746 ], [ %2752, %2750 ], [ %2755, %2753 ]
  %2759 = shl i32 %2734, 1
  %2760 = shl i32 %2758, 1
  %2761 = add i32 %2757, -1
  %2762 = icmp ult i32 %2759, 32768
  br i1 %2762, label %2732, label %2769

2763:                                             ; preds = %2717
  %2764 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2666, i64 0, i32 1
  %2765 = load i32, i32* %2764, align 4
  br label %2772

2766:                                             ; preds = %2710
  %2767 = zext i1 %2680 to i32
  %2768 = select i1 %2677, i32 %2679, i32 %2767
  br label %2772

2769:                                             ; preds = %2756
  %2770 = zext i1 %2727 to i32
  %2771 = select i1 %2723, i32 %2770, i32 %2725
  br label %2772

2772:                                             ; preds = %2769, %2766, %2763
  %2773 = phi i32 [ %2667, %2763 ], [ %2715, %2766 ], [ %2761, %2769 ]
  %2774 = phi i32 [ %2765, %2763 ], [ %2768, %2766 ], [ %2771, %2769 ]
  %2775 = phi i32 [ %2673, %2763 ], [ %2713, %2766 ], [ %2759, %2769 ]
  %2776 = phi i32 [ %2719, %2763 ], [ %2714, %2766 ], [ %2760, %2769 ]
  %2777 = shl i32 %2670, 1
  %2778 = or i32 %2774, %2777
  switch i32 %2778, label %4828 [
    i32 0, label %2779
    i32 1, label %3037
    i32 2, label %3307
    i32 3, label %3577
  ]

2779:                                             ; preds = %2772
  %2780 = getelementptr inbounds i32, i32* %2444, i64 -1
  %2781 = load i32, i32* %2780, align 4
  %2782 = getelementptr inbounds i32, i32* %2444, i64 1
  %2783 = load i32, i32* %2782, align 4
  %2784 = lshr i32 %2781, 19
  %2785 = and i32 %2784, 1
  %2786 = lshr i32 %2783, 17
  %2787 = and i32 %2786, 4
  %2788 = or i32 %2787, %2785
  %2789 = zext i32 %2788 to i64
  %2790 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %2789
  %2791 = load i8, i8* %2790, align 1
  %2792 = zext i8 %2791 to i64
  %2793 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2792
  %2794 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2793, align 8
  %2795 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 0
  %2796 = load i32, i32* %2795, align 8
  %2797 = sub i32 %2775, %2796
  %2798 = lshr i32 %2776, 16
  %2799 = icmp ult i32 %2798, %2796
  br i1 %2799, label %2800, label %2844

2800:                                             ; preds = %2779
  %2801 = icmp ult i32 %2797, %2796
  %2802 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 1
  %2803 = load i32, i32* %2802, align 4
  %2804 = icmp eq i32 %2803, 0
  %2805 = zext i1 %2804 to i32
  %2806 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 3
  %2807 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 2
  %2808 = select i1 %2801, %struct.opj_mqc_state** %2807, %struct.opj_mqc_state** %2806
  %2809 = select i1 %2801, i32 %2803, i32 %2805
  %2810 = bitcast %struct.opj_mqc_state** %2808 to i64*
  %2811 = load i64, i64* %2810, align 8
  %2812 = bitcast %struct.opj_mqc_state** %2793 to i64*
  store i64 %2811, i64* %2812, align 8
  br label %2813

2813:                                             ; preds = %2837, %2800
  %2814 = phi i32 [ %2773, %2800 ], [ %2842, %2837 ]
  %2815 = phi i32 [ %2796, %2800 ], [ %2840, %2837 ]
  %2816 = phi i32 [ %2776, %2800 ], [ %2841, %2837 ]
  %2817 = icmp eq i32 %2814, 0
  br i1 %2817, label %2818, label %2837

2818:                                             ; preds = %2813
  %2819 = load i8*, i8** %31, align 8
  %2820 = getelementptr inbounds i8, i8* %2819, i64 1
  %2821 = load i8, i8* %2820, align 1
  %2822 = zext i8 %2821 to i32
  %2823 = load i8, i8* %2819, align 1
  %2824 = icmp eq i8 %2823, -1
  br i1 %2824, label %2825, label %2834

2825:                                             ; preds = %2818
  %2826 = icmp ugt i8 %2821, -113
  br i1 %2826, label %2827, label %2831

2827:                                             ; preds = %2825
  %2828 = add i32 %2816, 65280
  %2829 = load i32, i32* %32, align 4
  %2830 = add i32 %2829, 1
  store i32 %2830, i32* %32, align 4
  br label %2837

2831:                                             ; preds = %2825
  store i8* %2820, i8** %31, align 8
  %2832 = shl nuw nsw i32 %2822, 9
  %2833 = add i32 %2832, %2816
  br label %2837

2834:                                             ; preds = %2818
  store i8* %2820, i8** %31, align 8
  %2835 = shl nuw nsw i32 %2822, 8
  %2836 = add i32 %2835, %2816
  br label %2837

2837:                                             ; preds = %2834, %2831, %2827, %2813
  %2838 = phi i32 [ %2814, %2813 ], [ 8, %2827 ], [ 7, %2831 ], [ 8, %2834 ]
  %2839 = phi i32 [ %2816, %2813 ], [ %2828, %2827 ], [ %2833, %2831 ], [ %2836, %2834 ]
  %2840 = shl i32 %2815, 1
  %2841 = shl i32 %2839, 1
  %2842 = add i32 %2838, -1
  %2843 = icmp ult i32 %2840, 32768
  br i1 %2843, label %2813, label %2896

2844:                                             ; preds = %2779
  %2845 = shl i32 %2796, 16
  %2846 = sub i32 %2776, %2845
  %2847 = trunc i32 %2797 to i16
  %2848 = icmp sgt i16 %2847, -1
  br i1 %2848, label %2849, label %2893

2849:                                             ; preds = %2844
  %2850 = icmp ult i32 %2797, %2796
  %2851 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 1
  %2852 = load i32, i32* %2851, align 4
  %2853 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 2
  %2854 = icmp eq i32 %2852, 0
  %2855 = zext i1 %2854 to i32
  %2856 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 3
  %2857 = select i1 %2850, %struct.opj_mqc_state** %2856, %struct.opj_mqc_state** %2853
  %2858 = select i1 %2850, i32 %2855, i32 %2852
  %2859 = bitcast %struct.opj_mqc_state** %2857 to i64*
  %2860 = load i64, i64* %2859, align 8
  %2861 = bitcast %struct.opj_mqc_state** %2793 to i64*
  store i64 %2860, i64* %2861, align 8
  br label %2862

2862:                                             ; preds = %2886, %2849
  %2863 = phi i32 [ %2773, %2849 ], [ %2891, %2886 ]
  %2864 = phi i32 [ %2797, %2849 ], [ %2889, %2886 ]
  %2865 = phi i32 [ %2846, %2849 ], [ %2890, %2886 ]
  %2866 = icmp eq i32 %2863, 0
  br i1 %2866, label %2867, label %2886

2867:                                             ; preds = %2862
  %2868 = load i8*, i8** %31, align 8
  %2869 = getelementptr inbounds i8, i8* %2868, i64 1
  %2870 = load i8, i8* %2869, align 1
  %2871 = zext i8 %2870 to i32
  %2872 = load i8, i8* %2868, align 1
  %2873 = icmp eq i8 %2872, -1
  br i1 %2873, label %2874, label %2883

2874:                                             ; preds = %2867
  %2875 = icmp ugt i8 %2870, -113
  br i1 %2875, label %2876, label %2880

2876:                                             ; preds = %2874
  %2877 = add i32 %2865, 65280
  %2878 = load i32, i32* %32, align 4
  %2879 = add i32 %2878, 1
  store i32 %2879, i32* %32, align 4
  br label %2886

2880:                                             ; preds = %2874
  store i8* %2869, i8** %31, align 8
  %2881 = shl nuw nsw i32 %2871, 9
  %2882 = add i32 %2881, %2865
  br label %2886

2883:                                             ; preds = %2867
  store i8* %2869, i8** %31, align 8
  %2884 = shl nuw nsw i32 %2871, 8
  %2885 = add i32 %2884, %2865
  br label %2886

2886:                                             ; preds = %2883, %2880, %2876, %2862
  %2887 = phi i32 [ %2863, %2862 ], [ 8, %2876 ], [ 7, %2880 ], [ 8, %2883 ]
  %2888 = phi i32 [ %2865, %2862 ], [ %2877, %2876 ], [ %2882, %2880 ], [ %2885, %2883 ]
  %2889 = shl i32 %2864, 1
  %2890 = shl i32 %2888, 1
  %2891 = add i32 %2887, -1
  %2892 = icmp ult i32 %2889, 32768
  br i1 %2892, label %2862, label %2896

2893:                                             ; preds = %2844
  %2894 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2794, i64 0, i32 1
  %2895 = load i32, i32* %2894, align 4
  br label %2896

2896:                                             ; preds = %2886, %2837, %2893
  %2897 = phi i32 [ %2773, %2893 ], [ %2842, %2837 ], [ %2891, %2886 ]
  %2898 = phi i32 [ %2895, %2893 ], [ %2809, %2837 ], [ %2858, %2886 ]
  %2899 = phi i32 [ %2797, %2893 ], [ %2840, %2837 ], [ %2889, %2886 ]
  %2900 = phi i32 [ %2846, %2893 ], [ %2841, %2837 ], [ %2890, %2886 ]
  %2901 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %2789
  %2902 = load i8, i8* %2901, align 1
  %2903 = zext i8 %2902 to i32
  %2904 = xor i32 %2898, %2903
  %2905 = icmp eq i32 %2904, 0
  %2906 = select i1 %2905, i32 %29, i32 %33
  store i32 %2906, i32* %2443, align 4
  %2907 = load i32, i32* %2780, align 4
  %2908 = or i32 %2907, 32
  store i32 %2908, i32* %2780, align 4
  %2909 = shl i32 %2904, 19
  %2910 = or i32 %2909, 16
  %2911 = load i32, i32* %2782, align 4
  %2912 = or i32 %2911, 8
  store i32 %2912, i32* %2782, align 4
  %2913 = getelementptr inbounds i32, i32* %2444, i64 -66
  %2914 = shl i32 %2904, 31
  %2915 = load i32, i32* %2913, align 4
  %2916 = or i32 %2914, %2915
  %2917 = or i32 %2916, 65536
  store i32 %2917, i32* %2913, align 4
  %2918 = getelementptr inbounds i32, i32* %2444, i64 -67
  %2919 = load i32, i32* %2918, align 4
  %2920 = or i32 %2919, 131072
  store i32 %2920, i32* %2918, align 4
  %2921 = getelementptr inbounds i32, i32* %2444, i64 -65
  %2922 = load i32, i32* %2921, align 4
  %2923 = or i32 %2922, 32768
  store i32 %2923, i32* %2921, align 4
  %2924 = load i8*, i8** %30, align 8
  %2925 = getelementptr inbounds i8, i8* %2924, i64 2
  %2926 = load i8, i8* %2925, align 1
  %2927 = zext i8 %2926 to i64
  %2928 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %2927
  %2929 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %2928, align 8
  %2930 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 0
  %2931 = load i32, i32* %2930, align 8
  %2932 = sub i32 %2899, %2931
  %2933 = lshr i32 %2900, 16
  %2934 = icmp ult i32 %2933, %2931
  br i1 %2934, label %2935, label %2979

2935:                                             ; preds = %2896
  %2936 = icmp ult i32 %2932, %2931
  %2937 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 1
  %2938 = load i32, i32* %2937, align 4
  %2939 = icmp eq i32 %2938, 0
  %2940 = zext i1 %2939 to i32
  %2941 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 3
  %2942 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 2
  %2943 = select i1 %2936, %struct.opj_mqc_state** %2942, %struct.opj_mqc_state** %2941
  %2944 = select i1 %2936, i32 %2938, i32 %2940
  %2945 = bitcast %struct.opj_mqc_state** %2943 to i64*
  %2946 = load i64, i64* %2945, align 8
  %2947 = bitcast %struct.opj_mqc_state** %2928 to i64*
  store i64 %2946, i64* %2947, align 8
  br label %2948

2948:                                             ; preds = %2972, %2935
  %2949 = phi i32 [ %2897, %2935 ], [ %2977, %2972 ]
  %2950 = phi i32 [ %2931, %2935 ], [ %2975, %2972 ]
  %2951 = phi i32 [ %2900, %2935 ], [ %2976, %2972 ]
  %2952 = icmp eq i32 %2949, 0
  br i1 %2952, label %2953, label %2972

2953:                                             ; preds = %2948
  %2954 = load i8*, i8** %31, align 8
  %2955 = getelementptr inbounds i8, i8* %2954, i64 1
  %2956 = load i8, i8* %2955, align 1
  %2957 = zext i8 %2956 to i32
  %2958 = load i8, i8* %2954, align 1
  %2959 = icmp eq i8 %2958, -1
  br i1 %2959, label %2960, label %2969

2960:                                             ; preds = %2953
  %2961 = icmp ugt i8 %2956, -113
  br i1 %2961, label %2962, label %2966

2962:                                             ; preds = %2960
  %2963 = add i32 %2951, 65280
  %2964 = load i32, i32* %32, align 4
  %2965 = add i32 %2964, 1
  store i32 %2965, i32* %32, align 4
  br label %2972

2966:                                             ; preds = %2960
  store i8* %2955, i8** %31, align 8
  %2967 = shl nuw nsw i32 %2957, 9
  %2968 = add i32 %2967, %2951
  br label %2972

2969:                                             ; preds = %2953
  store i8* %2955, i8** %31, align 8
  %2970 = shl nuw nsw i32 %2957, 8
  %2971 = add i32 %2970, %2951
  br label %2972

2972:                                             ; preds = %2969, %2966, %2962, %2948
  %2973 = phi i32 [ %2949, %2948 ], [ 8, %2962 ], [ 7, %2966 ], [ 8, %2969 ]
  %2974 = phi i32 [ %2951, %2948 ], [ %2963, %2962 ], [ %2968, %2966 ], [ %2971, %2969 ]
  %2975 = shl i32 %2950, 1
  %2976 = shl i32 %2974, 1
  %2977 = add i32 %2973, -1
  %2978 = icmp ult i32 %2975, 32768
  br i1 %2978, label %2948, label %3031

2979:                                             ; preds = %2896
  %2980 = shl i32 %2931, 16
  %2981 = sub i32 %2900, %2980
  %2982 = trunc i32 %2932 to i16
  %2983 = icmp sgt i16 %2982, -1
  br i1 %2983, label %2984, label %3028

2984:                                             ; preds = %2979
  %2985 = icmp ult i32 %2932, %2931
  %2986 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 1
  %2987 = load i32, i32* %2986, align 4
  %2988 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 2
  %2989 = icmp eq i32 %2987, 0
  %2990 = zext i1 %2989 to i32
  %2991 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 3
  %2992 = select i1 %2985, %struct.opj_mqc_state** %2991, %struct.opj_mqc_state** %2988
  %2993 = select i1 %2985, i32 %2990, i32 %2987
  %2994 = bitcast %struct.opj_mqc_state** %2992 to i64*
  %2995 = load i64, i64* %2994, align 8
  %2996 = bitcast %struct.opj_mqc_state** %2928 to i64*
  store i64 %2995, i64* %2996, align 8
  br label %2997

2997:                                             ; preds = %3021, %2984
  %2998 = phi i32 [ %2897, %2984 ], [ %3026, %3021 ]
  %2999 = phi i32 [ %2932, %2984 ], [ %3024, %3021 ]
  %3000 = phi i32 [ %2981, %2984 ], [ %3025, %3021 ]
  %3001 = icmp eq i32 %2998, 0
  br i1 %3001, label %3002, label %3021

3002:                                             ; preds = %2997
  %3003 = load i8*, i8** %31, align 8
  %3004 = getelementptr inbounds i8, i8* %3003, i64 1
  %3005 = load i8, i8* %3004, align 1
  %3006 = zext i8 %3005 to i32
  %3007 = load i8, i8* %3003, align 1
  %3008 = icmp eq i8 %3007, -1
  br i1 %3008, label %3009, label %3018

3009:                                             ; preds = %3002
  %3010 = icmp ugt i8 %3005, -113
  br i1 %3010, label %3011, label %3015

3011:                                             ; preds = %3009
  %3012 = add i32 %3000, 65280
  %3013 = load i32, i32* %32, align 4
  %3014 = add i32 %3013, 1
  store i32 %3014, i32* %32, align 4
  br label %3021

3015:                                             ; preds = %3009
  store i8* %3004, i8** %31, align 8
  %3016 = shl nuw nsw i32 %3006, 9
  %3017 = add i32 %3016, %3000
  br label %3021

3018:                                             ; preds = %3002
  store i8* %3004, i8** %31, align 8
  %3019 = shl nuw nsw i32 %3006, 8
  %3020 = add i32 %3019, %3000
  br label %3021

3021:                                             ; preds = %3018, %3015, %3011, %2997
  %3022 = phi i32 [ %2998, %2997 ], [ 8, %3011 ], [ 7, %3015 ], [ 8, %3018 ]
  %3023 = phi i32 [ %3000, %2997 ], [ %3012, %3011 ], [ %3017, %3015 ], [ %3020, %3018 ]
  %3024 = shl i32 %2999, 1
  %3025 = shl i32 %3023, 1
  %3026 = add i32 %3022, -1
  %3027 = icmp ult i32 %3024, 32768
  br i1 %3027, label %2997, label %3031

3028:                                             ; preds = %2979
  %3029 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %2929, i64 0, i32 1
  %3030 = load i32, i32* %3029, align 4
  br label %3031

3031:                                             ; preds = %3021, %2972, %3028
  %3032 = phi i32 [ %2897, %3028 ], [ %2977, %2972 ], [ %3026, %3021 ]
  %3033 = phi i32 [ %3030, %3028 ], [ %2944, %2972 ], [ %2993, %3021 ]
  %3034 = phi i32 [ %2932, %3028 ], [ %2975, %2972 ], [ %3024, %3021 ]
  %3035 = phi i32 [ %2981, %3028 ], [ %2976, %2972 ], [ %3025, %3021 ]
  %3036 = icmp eq i32 %3033, 0
  br i1 %3036, label %3186, label %3037

3037:                                             ; preds = %3031, %2772
  %3038 = phi i32 [ %2910, %3031 ], [ 0, %2772 ]
  %3039 = phi i32 [ %3032, %3031 ], [ %2773, %2772 ]
  %3040 = phi i32 [ %3034, %3031 ], [ %2775, %2772 ]
  %3041 = phi i32 [ %3035, %3031 ], [ %2776, %2772 ]
  %3042 = getelementptr inbounds i32, i32* %2444, i64 -1
  %3043 = load i32, i32* %3042, align 4
  %3044 = getelementptr inbounds i32, i32* %2444, i64 1
  %3045 = load i32, i32* %3044, align 4
  %3046 = lshr i32 %3038, 3
  %3047 = and i32 %3046, 170
  %3048 = lshr i32 %3043, 22
  %3049 = and i32 %3048, 1
  %3050 = lshr i32 %3045, 20
  %3051 = and i32 %3050, 4
  %3052 = lshr i32 %3038, 15
  %3053 = and i32 %3052, 16
  %3054 = lshr i32 %3038, 19
  %3055 = and i32 %3054, 64
  %3056 = or i32 %3055, %3047
  %3057 = or i32 %3056, %3053
  %3058 = or i32 %3057, %3049
  %3059 = or i32 %3058, %3051
  %3060 = zext i32 %3059 to i64
  %3061 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3060
  %3062 = load i8, i8* %3061, align 1
  %3063 = zext i8 %3062 to i64
  %3064 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3063
  %3065 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3064, align 8
  %3066 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 0
  %3067 = load i32, i32* %3066, align 8
  %3068 = sub i32 %3040, %3067
  %3069 = lshr i32 %3041, 16
  %3070 = icmp ult i32 %3069, %3067
  br i1 %3070, label %3071, label %3115

3071:                                             ; preds = %3037
  %3072 = icmp ult i32 %3068, %3067
  %3073 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 1
  %3074 = load i32, i32* %3073, align 4
  %3075 = icmp eq i32 %3074, 0
  %3076 = zext i1 %3075 to i32
  %3077 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 3
  %3078 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 2
  %3079 = select i1 %3072, %struct.opj_mqc_state** %3078, %struct.opj_mqc_state** %3077
  %3080 = select i1 %3072, i32 %3074, i32 %3076
  %3081 = bitcast %struct.opj_mqc_state** %3079 to i64*
  %3082 = load i64, i64* %3081, align 8
  %3083 = bitcast %struct.opj_mqc_state** %3064 to i64*
  store i64 %3082, i64* %3083, align 8
  br label %3084

3084:                                             ; preds = %3108, %3071
  %3085 = phi i32 [ %3039, %3071 ], [ %3113, %3108 ]
  %3086 = phi i32 [ %3067, %3071 ], [ %3111, %3108 ]
  %3087 = phi i32 [ %3041, %3071 ], [ %3112, %3108 ]
  %3088 = icmp eq i32 %3085, 0
  br i1 %3088, label %3089, label %3108

3089:                                             ; preds = %3084
  %3090 = load i8*, i8** %31, align 8
  %3091 = getelementptr inbounds i8, i8* %3090, i64 1
  %3092 = load i8, i8* %3091, align 1
  %3093 = zext i8 %3092 to i32
  %3094 = load i8, i8* %3090, align 1
  %3095 = icmp eq i8 %3094, -1
  br i1 %3095, label %3096, label %3105

3096:                                             ; preds = %3089
  %3097 = icmp ugt i8 %3092, -113
  br i1 %3097, label %3098, label %3102

3098:                                             ; preds = %3096
  %3099 = add i32 %3087, 65280
  %3100 = load i32, i32* %32, align 4
  %3101 = add i32 %3100, 1
  store i32 %3101, i32* %32, align 4
  br label %3108

3102:                                             ; preds = %3096
  store i8* %3091, i8** %31, align 8
  %3103 = shl nuw nsw i32 %3093, 9
  %3104 = add i32 %3103, %3087
  br label %3108

3105:                                             ; preds = %3089
  store i8* %3091, i8** %31, align 8
  %3106 = shl nuw nsw i32 %3093, 8
  %3107 = add i32 %3106, %3087
  br label %3108

3108:                                             ; preds = %3105, %3102, %3098, %3084
  %3109 = phi i32 [ %3085, %3084 ], [ 8, %3098 ], [ 7, %3102 ], [ 8, %3105 ]
  %3110 = phi i32 [ %3087, %3084 ], [ %3099, %3098 ], [ %3104, %3102 ], [ %3107, %3105 ]
  %3111 = shl i32 %3086, 1
  %3112 = shl i32 %3110, 1
  %3113 = add i32 %3109, -1
  %3114 = icmp ult i32 %3111, 32768
  br i1 %3114, label %3084, label %3167

3115:                                             ; preds = %3037
  %3116 = shl i32 %3067, 16
  %3117 = sub i32 %3041, %3116
  %3118 = trunc i32 %3068 to i16
  %3119 = icmp sgt i16 %3118, -1
  br i1 %3119, label %3120, label %3164

3120:                                             ; preds = %3115
  %3121 = icmp ult i32 %3068, %3067
  %3122 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 1
  %3123 = load i32, i32* %3122, align 4
  %3124 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 2
  %3125 = icmp eq i32 %3123, 0
  %3126 = zext i1 %3125 to i32
  %3127 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 3
  %3128 = select i1 %3121, %struct.opj_mqc_state** %3127, %struct.opj_mqc_state** %3124
  %3129 = select i1 %3121, i32 %3126, i32 %3123
  %3130 = bitcast %struct.opj_mqc_state** %3128 to i64*
  %3131 = load i64, i64* %3130, align 8
  %3132 = bitcast %struct.opj_mqc_state** %3064 to i64*
  store i64 %3131, i64* %3132, align 8
  br label %3133

3133:                                             ; preds = %3157, %3120
  %3134 = phi i32 [ %3039, %3120 ], [ %3162, %3157 ]
  %3135 = phi i32 [ %3068, %3120 ], [ %3160, %3157 ]
  %3136 = phi i32 [ %3117, %3120 ], [ %3161, %3157 ]
  %3137 = icmp eq i32 %3134, 0
  br i1 %3137, label %3138, label %3157

3138:                                             ; preds = %3133
  %3139 = load i8*, i8** %31, align 8
  %3140 = getelementptr inbounds i8, i8* %3139, i64 1
  %3141 = load i8, i8* %3140, align 1
  %3142 = zext i8 %3141 to i32
  %3143 = load i8, i8* %3139, align 1
  %3144 = icmp eq i8 %3143, -1
  br i1 %3144, label %3145, label %3154

3145:                                             ; preds = %3138
  %3146 = icmp ugt i8 %3141, -113
  br i1 %3146, label %3147, label %3151

3147:                                             ; preds = %3145
  %3148 = add i32 %3136, 65280
  %3149 = load i32, i32* %32, align 4
  %3150 = add i32 %3149, 1
  store i32 %3150, i32* %32, align 4
  br label %3157

3151:                                             ; preds = %3145
  store i8* %3140, i8** %31, align 8
  %3152 = shl nuw nsw i32 %3142, 9
  %3153 = add i32 %3152, %3136
  br label %3157

3154:                                             ; preds = %3138
  store i8* %3140, i8** %31, align 8
  %3155 = shl nuw nsw i32 %3142, 8
  %3156 = add i32 %3155, %3136
  br label %3157

3157:                                             ; preds = %3154, %3151, %3147, %3133
  %3158 = phi i32 [ %3134, %3133 ], [ 8, %3147 ], [ 7, %3151 ], [ 8, %3154 ]
  %3159 = phi i32 [ %3136, %3133 ], [ %3148, %3147 ], [ %3153, %3151 ], [ %3156, %3154 ]
  %3160 = shl i32 %3135, 1
  %3161 = shl i32 %3159, 1
  %3162 = add i32 %3158, -1
  %3163 = icmp ult i32 %3160, 32768
  br i1 %3163, label %3133, label %3167

3164:                                             ; preds = %3115
  %3165 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3065, i64 0, i32 1
  %3166 = load i32, i32* %3165, align 4
  br label %3167

3167:                                             ; preds = %3157, %3108, %3164
  %3168 = phi i32 [ %3039, %3164 ], [ %3113, %3108 ], [ %3162, %3157 ]
  %3169 = phi i32 [ %3166, %3164 ], [ %3080, %3108 ], [ %3129, %3157 ]
  %3170 = phi i32 [ %3068, %3164 ], [ %3111, %3108 ], [ %3160, %3157 ]
  %3171 = phi i32 [ %3117, %3164 ], [ %3112, %3108 ], [ %3161, %3157 ]
  %3172 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3060
  %3173 = load i8, i8* %3172, align 1
  %3174 = zext i8 %3173 to i32
  %3175 = xor i32 %3169, %3174
  %3176 = icmp eq i32 %3175, 0
  %3177 = select i1 %3176, i32 %29, i32 %33
  %3178 = getelementptr inbounds i32, i32* %2443, i64 64
  store i32 %3177, i32* %3178, align 4
  %3179 = load i32, i32* %3042, align 4
  %3180 = or i32 %3179, 256
  store i32 %3180, i32* %3042, align 4
  %3181 = shl i32 %3175, 22
  %3182 = or i32 %3038, %3181
  %3183 = or i32 %3182, 128
  %3184 = load i32, i32* %3044, align 4
  %3185 = or i32 %3184, 64
  store i32 %3185, i32* %3044, align 4
  br label %3186

3186:                                             ; preds = %3167, %3031
  %3187 = phi i32 [ %3032, %3031 ], [ %3168, %3167 ]
  %3188 = phi i32 [ %2910, %3031 ], [ %3183, %3167 ]
  %3189 = phi i32 [ %3034, %3031 ], [ %3170, %3167 ]
  %3190 = phi i32 [ %3035, %3031 ], [ %3171, %3167 ]
  %3191 = lshr i32 %3188, 6
  %3192 = load i8*, i8** %30, align 8
  %3193 = and i32 %3191, 495
  %3194 = zext i32 %3193 to i64
  %3195 = getelementptr inbounds i8, i8* %3192, i64 %3194
  %3196 = load i8, i8* %3195, align 1
  %3197 = zext i8 %3196 to i64
  %3198 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3197
  %3199 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3198, align 8
  %3200 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 0
  %3201 = load i32, i32* %3200, align 8
  %3202 = sub i32 %3189, %3201
  %3203 = lshr i32 %3190, 16
  %3204 = icmp ult i32 %3203, %3201
  br i1 %3204, label %3205, label %3249

3205:                                             ; preds = %3186
  %3206 = icmp ult i32 %3202, %3201
  %3207 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 1
  %3208 = load i32, i32* %3207, align 4
  %3209 = icmp eq i32 %3208, 0
  %3210 = zext i1 %3209 to i32
  %3211 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 3
  %3212 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 2
  %3213 = select i1 %3206, %struct.opj_mqc_state** %3212, %struct.opj_mqc_state** %3211
  %3214 = select i1 %3206, i32 %3208, i32 %3210
  %3215 = bitcast %struct.opj_mqc_state** %3213 to i64*
  %3216 = load i64, i64* %3215, align 8
  %3217 = bitcast %struct.opj_mqc_state** %3198 to i64*
  store i64 %3216, i64* %3217, align 8
  br label %3218

3218:                                             ; preds = %3242, %3205
  %3219 = phi i32 [ %3187, %3205 ], [ %3247, %3242 ]
  %3220 = phi i32 [ %3201, %3205 ], [ %3245, %3242 ]
  %3221 = phi i32 [ %3190, %3205 ], [ %3246, %3242 ]
  %3222 = icmp eq i32 %3219, 0
  br i1 %3222, label %3223, label %3242

3223:                                             ; preds = %3218
  %3224 = load i8*, i8** %31, align 8
  %3225 = getelementptr inbounds i8, i8* %3224, i64 1
  %3226 = load i8, i8* %3225, align 1
  %3227 = zext i8 %3226 to i32
  %3228 = load i8, i8* %3224, align 1
  %3229 = icmp eq i8 %3228, -1
  br i1 %3229, label %3230, label %3239

3230:                                             ; preds = %3223
  %3231 = icmp ugt i8 %3226, -113
  br i1 %3231, label %3232, label %3236

3232:                                             ; preds = %3230
  %3233 = add i32 %3221, 65280
  %3234 = load i32, i32* %32, align 4
  %3235 = add i32 %3234, 1
  store i32 %3235, i32* %32, align 4
  br label %3242

3236:                                             ; preds = %3230
  store i8* %3225, i8** %31, align 8
  %3237 = shl nuw nsw i32 %3227, 9
  %3238 = add i32 %3237, %3221
  br label %3242

3239:                                             ; preds = %3223
  store i8* %3225, i8** %31, align 8
  %3240 = shl nuw nsw i32 %3227, 8
  %3241 = add i32 %3240, %3221
  br label %3242

3242:                                             ; preds = %3239, %3236, %3232, %3218
  %3243 = phi i32 [ %3219, %3218 ], [ 8, %3232 ], [ 7, %3236 ], [ 8, %3239 ]
  %3244 = phi i32 [ %3221, %3218 ], [ %3233, %3232 ], [ %3238, %3236 ], [ %3241, %3239 ]
  %3245 = shl i32 %3220, 1
  %3246 = shl i32 %3244, 1
  %3247 = add i32 %3243, -1
  %3248 = icmp ult i32 %3245, 32768
  br i1 %3248, label %3218, label %3301

3249:                                             ; preds = %3186
  %3250 = shl i32 %3201, 16
  %3251 = sub i32 %3190, %3250
  %3252 = trunc i32 %3202 to i16
  %3253 = icmp sgt i16 %3252, -1
  br i1 %3253, label %3254, label %3298

3254:                                             ; preds = %3249
  %3255 = icmp ult i32 %3202, %3201
  %3256 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 1
  %3257 = load i32, i32* %3256, align 4
  %3258 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 2
  %3259 = icmp eq i32 %3257, 0
  %3260 = zext i1 %3259 to i32
  %3261 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 3
  %3262 = select i1 %3255, %struct.opj_mqc_state** %3261, %struct.opj_mqc_state** %3258
  %3263 = select i1 %3255, i32 %3260, i32 %3257
  %3264 = bitcast %struct.opj_mqc_state** %3262 to i64*
  %3265 = load i64, i64* %3264, align 8
  %3266 = bitcast %struct.opj_mqc_state** %3198 to i64*
  store i64 %3265, i64* %3266, align 8
  br label %3267

3267:                                             ; preds = %3291, %3254
  %3268 = phi i32 [ %3187, %3254 ], [ %3296, %3291 ]
  %3269 = phi i32 [ %3202, %3254 ], [ %3294, %3291 ]
  %3270 = phi i32 [ %3251, %3254 ], [ %3295, %3291 ]
  %3271 = icmp eq i32 %3268, 0
  br i1 %3271, label %3272, label %3291

3272:                                             ; preds = %3267
  %3273 = load i8*, i8** %31, align 8
  %3274 = getelementptr inbounds i8, i8* %3273, i64 1
  %3275 = load i8, i8* %3274, align 1
  %3276 = zext i8 %3275 to i32
  %3277 = load i8, i8* %3273, align 1
  %3278 = icmp eq i8 %3277, -1
  br i1 %3278, label %3279, label %3288

3279:                                             ; preds = %3272
  %3280 = icmp ugt i8 %3275, -113
  br i1 %3280, label %3281, label %3285

3281:                                             ; preds = %3279
  %3282 = add i32 %3270, 65280
  %3283 = load i32, i32* %32, align 4
  %3284 = add i32 %3283, 1
  store i32 %3284, i32* %32, align 4
  br label %3291

3285:                                             ; preds = %3279
  store i8* %3274, i8** %31, align 8
  %3286 = shl nuw nsw i32 %3276, 9
  %3287 = add i32 %3286, %3270
  br label %3291

3288:                                             ; preds = %3272
  store i8* %3274, i8** %31, align 8
  %3289 = shl nuw nsw i32 %3276, 8
  %3290 = add i32 %3289, %3270
  br label %3291

3291:                                             ; preds = %3288, %3285, %3281, %3267
  %3292 = phi i32 [ %3268, %3267 ], [ 8, %3281 ], [ 7, %3285 ], [ 8, %3288 ]
  %3293 = phi i32 [ %3270, %3267 ], [ %3282, %3281 ], [ %3287, %3285 ], [ %3290, %3288 ]
  %3294 = shl i32 %3269, 1
  %3295 = shl i32 %3293, 1
  %3296 = add i32 %3292, -1
  %3297 = icmp ult i32 %3294, 32768
  br i1 %3297, label %3267, label %3301

3298:                                             ; preds = %3249
  %3299 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3199, i64 0, i32 1
  %3300 = load i32, i32* %3299, align 4
  br label %3301

3301:                                             ; preds = %3291, %3242, %3298
  %3302 = phi i32 [ %3187, %3298 ], [ %3247, %3242 ], [ %3296, %3291 ]
  %3303 = phi i32 [ %3300, %3298 ], [ %3214, %3242 ], [ %3263, %3291 ]
  %3304 = phi i32 [ %3202, %3298 ], [ %3245, %3242 ], [ %3294, %3291 ]
  %3305 = phi i32 [ %3251, %3298 ], [ %3246, %3242 ], [ %3295, %3291 ]
  %3306 = icmp eq i32 %3303, 0
  br i1 %3306, label %3456, label %3307

3307:                                             ; preds = %2772, %3301
  %3308 = phi i32 [ %3188, %3301 ], [ 0, %2772 ]
  %3309 = phi i32 [ %3302, %3301 ], [ %2773, %2772 ]
  %3310 = phi i32 [ %3304, %3301 ], [ %2775, %2772 ]
  %3311 = phi i32 [ %3305, %3301 ], [ %2776, %2772 ]
  %3312 = getelementptr inbounds i32, i32* %2444, i64 -1
  %3313 = load i32, i32* %3312, align 4
  %3314 = getelementptr inbounds i32, i32* %2444, i64 1
  %3315 = load i32, i32* %3314, align 4
  %3316 = lshr i32 %3308, 6
  %3317 = and i32 %3316, 170
  %3318 = lshr i32 %3313, 25
  %3319 = and i32 %3318, 1
  %3320 = lshr i32 %3315, 23
  %3321 = and i32 %3320, 4
  %3322 = lshr i32 %3308, 18
  %3323 = and i32 %3322, 16
  %3324 = lshr i32 %3308, 22
  %3325 = and i32 %3324, 64
  %3326 = or i32 %3325, %3317
  %3327 = or i32 %3326, %3323
  %3328 = or i32 %3327, %3319
  %3329 = or i32 %3328, %3321
  %3330 = zext i32 %3329 to i64
  %3331 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3330
  %3332 = load i8, i8* %3331, align 1
  %3333 = zext i8 %3332 to i64
  %3334 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3333
  %3335 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3334, align 8
  %3336 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 0
  %3337 = load i32, i32* %3336, align 8
  %3338 = sub i32 %3310, %3337
  %3339 = lshr i32 %3311, 16
  %3340 = icmp ult i32 %3339, %3337
  br i1 %3340, label %3341, label %3385

3341:                                             ; preds = %3307
  %3342 = icmp ult i32 %3338, %3337
  %3343 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 1
  %3344 = load i32, i32* %3343, align 4
  %3345 = icmp eq i32 %3344, 0
  %3346 = zext i1 %3345 to i32
  %3347 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 3
  %3348 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 2
  %3349 = select i1 %3342, %struct.opj_mqc_state** %3348, %struct.opj_mqc_state** %3347
  %3350 = select i1 %3342, i32 %3344, i32 %3346
  %3351 = bitcast %struct.opj_mqc_state** %3349 to i64*
  %3352 = load i64, i64* %3351, align 8
  %3353 = bitcast %struct.opj_mqc_state** %3334 to i64*
  store i64 %3352, i64* %3353, align 8
  br label %3354

3354:                                             ; preds = %3378, %3341
  %3355 = phi i32 [ %3309, %3341 ], [ %3383, %3378 ]
  %3356 = phi i32 [ %3337, %3341 ], [ %3381, %3378 ]
  %3357 = phi i32 [ %3311, %3341 ], [ %3382, %3378 ]
  %3358 = icmp eq i32 %3355, 0
  br i1 %3358, label %3359, label %3378

3359:                                             ; preds = %3354
  %3360 = load i8*, i8** %31, align 8
  %3361 = getelementptr inbounds i8, i8* %3360, i64 1
  %3362 = load i8, i8* %3361, align 1
  %3363 = zext i8 %3362 to i32
  %3364 = load i8, i8* %3360, align 1
  %3365 = icmp eq i8 %3364, -1
  br i1 %3365, label %3366, label %3375

3366:                                             ; preds = %3359
  %3367 = icmp ugt i8 %3362, -113
  br i1 %3367, label %3368, label %3372

3368:                                             ; preds = %3366
  %3369 = add i32 %3357, 65280
  %3370 = load i32, i32* %32, align 4
  %3371 = add i32 %3370, 1
  store i32 %3371, i32* %32, align 4
  br label %3378

3372:                                             ; preds = %3366
  store i8* %3361, i8** %31, align 8
  %3373 = shl nuw nsw i32 %3363, 9
  %3374 = add i32 %3373, %3357
  br label %3378

3375:                                             ; preds = %3359
  store i8* %3361, i8** %31, align 8
  %3376 = shl nuw nsw i32 %3363, 8
  %3377 = add i32 %3376, %3357
  br label %3378

3378:                                             ; preds = %3375, %3372, %3368, %3354
  %3379 = phi i32 [ %3355, %3354 ], [ 8, %3368 ], [ 7, %3372 ], [ 8, %3375 ]
  %3380 = phi i32 [ %3357, %3354 ], [ %3369, %3368 ], [ %3374, %3372 ], [ %3377, %3375 ]
  %3381 = shl i32 %3356, 1
  %3382 = shl i32 %3380, 1
  %3383 = add i32 %3379, -1
  %3384 = icmp ult i32 %3381, 32768
  br i1 %3384, label %3354, label %3437

3385:                                             ; preds = %3307
  %3386 = shl i32 %3337, 16
  %3387 = sub i32 %3311, %3386
  %3388 = trunc i32 %3338 to i16
  %3389 = icmp sgt i16 %3388, -1
  br i1 %3389, label %3390, label %3434

3390:                                             ; preds = %3385
  %3391 = icmp ult i32 %3338, %3337
  %3392 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 1
  %3393 = load i32, i32* %3392, align 4
  %3394 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 2
  %3395 = icmp eq i32 %3393, 0
  %3396 = zext i1 %3395 to i32
  %3397 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 3
  %3398 = select i1 %3391, %struct.opj_mqc_state** %3397, %struct.opj_mqc_state** %3394
  %3399 = select i1 %3391, i32 %3396, i32 %3393
  %3400 = bitcast %struct.opj_mqc_state** %3398 to i64*
  %3401 = load i64, i64* %3400, align 8
  %3402 = bitcast %struct.opj_mqc_state** %3334 to i64*
  store i64 %3401, i64* %3402, align 8
  br label %3403

3403:                                             ; preds = %3427, %3390
  %3404 = phi i32 [ %3309, %3390 ], [ %3432, %3427 ]
  %3405 = phi i32 [ %3338, %3390 ], [ %3430, %3427 ]
  %3406 = phi i32 [ %3387, %3390 ], [ %3431, %3427 ]
  %3407 = icmp eq i32 %3404, 0
  br i1 %3407, label %3408, label %3427

3408:                                             ; preds = %3403
  %3409 = load i8*, i8** %31, align 8
  %3410 = getelementptr inbounds i8, i8* %3409, i64 1
  %3411 = load i8, i8* %3410, align 1
  %3412 = zext i8 %3411 to i32
  %3413 = load i8, i8* %3409, align 1
  %3414 = icmp eq i8 %3413, -1
  br i1 %3414, label %3415, label %3424

3415:                                             ; preds = %3408
  %3416 = icmp ugt i8 %3411, -113
  br i1 %3416, label %3417, label %3421

3417:                                             ; preds = %3415
  %3418 = add i32 %3406, 65280
  %3419 = load i32, i32* %32, align 4
  %3420 = add i32 %3419, 1
  store i32 %3420, i32* %32, align 4
  br label %3427

3421:                                             ; preds = %3415
  store i8* %3410, i8** %31, align 8
  %3422 = shl nuw nsw i32 %3412, 9
  %3423 = add i32 %3422, %3406
  br label %3427

3424:                                             ; preds = %3408
  store i8* %3410, i8** %31, align 8
  %3425 = shl nuw nsw i32 %3412, 8
  %3426 = add i32 %3425, %3406
  br label %3427

3427:                                             ; preds = %3424, %3421, %3417, %3403
  %3428 = phi i32 [ %3404, %3403 ], [ 8, %3417 ], [ 7, %3421 ], [ 8, %3424 ]
  %3429 = phi i32 [ %3406, %3403 ], [ %3418, %3417 ], [ %3423, %3421 ], [ %3426, %3424 ]
  %3430 = shl i32 %3405, 1
  %3431 = shl i32 %3429, 1
  %3432 = add i32 %3428, -1
  %3433 = icmp ult i32 %3430, 32768
  br i1 %3433, label %3403, label %3437

3434:                                             ; preds = %3385
  %3435 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3335, i64 0, i32 1
  %3436 = load i32, i32* %3435, align 4
  br label %3437

3437:                                             ; preds = %3427, %3378, %3434
  %3438 = phi i32 [ %3309, %3434 ], [ %3383, %3378 ], [ %3432, %3427 ]
  %3439 = phi i32 [ %3436, %3434 ], [ %3350, %3378 ], [ %3399, %3427 ]
  %3440 = phi i32 [ %3338, %3434 ], [ %3381, %3378 ], [ %3430, %3427 ]
  %3441 = phi i32 [ %3387, %3434 ], [ %3382, %3378 ], [ %3431, %3427 ]
  %3442 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3330
  %3443 = load i8, i8* %3442, align 1
  %3444 = zext i8 %3443 to i32
  %3445 = xor i32 %3439, %3444
  %3446 = icmp eq i32 %3445, 0
  %3447 = select i1 %3446, i32 %29, i32 %33
  %3448 = getelementptr inbounds i32, i32* %2443, i64 128
  store i32 %3447, i32* %3448, align 4
  %3449 = load i32, i32* %3312, align 4
  %3450 = or i32 %3449, 2048
  store i32 %3450, i32* %3312, align 4
  %3451 = shl i32 %3445, 25
  %3452 = or i32 %3308, %3451
  %3453 = or i32 %3452, 1024
  %3454 = load i32, i32* %3314, align 4
  %3455 = or i32 %3454, 512
  store i32 %3455, i32* %3314, align 4
  br label %3456

3456:                                             ; preds = %3437, %3301
  %3457 = phi i32 [ %3302, %3301 ], [ %3438, %3437 ]
  %3458 = phi i32 [ %3188, %3301 ], [ %3453, %3437 ]
  %3459 = phi i32 [ %3304, %3301 ], [ %3440, %3437 ]
  %3460 = phi i32 [ %3305, %3301 ], [ %3441, %3437 ]
  %3461 = lshr i32 %3458, 9
  %3462 = load i8*, i8** %30, align 8
  %3463 = and i32 %3461, 495
  %3464 = zext i32 %3463 to i64
  %3465 = getelementptr inbounds i8, i8* %3462, i64 %3464
  %3466 = load i8, i8* %3465, align 1
  %3467 = zext i8 %3466 to i64
  %3468 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3467
  %3469 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3468, align 8
  %3470 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 0
  %3471 = load i32, i32* %3470, align 8
  %3472 = sub i32 %3459, %3471
  %3473 = lshr i32 %3460, 16
  %3474 = icmp ult i32 %3473, %3471
  br i1 %3474, label %3475, label %3519

3475:                                             ; preds = %3456
  %3476 = icmp ult i32 %3472, %3471
  %3477 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 1
  %3478 = load i32, i32* %3477, align 4
  %3479 = icmp eq i32 %3478, 0
  %3480 = zext i1 %3479 to i32
  %3481 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 3
  %3482 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 2
  %3483 = select i1 %3476, %struct.opj_mqc_state** %3482, %struct.opj_mqc_state** %3481
  %3484 = select i1 %3476, i32 %3478, i32 %3480
  %3485 = bitcast %struct.opj_mqc_state** %3483 to i64*
  %3486 = load i64, i64* %3485, align 8
  %3487 = bitcast %struct.opj_mqc_state** %3468 to i64*
  store i64 %3486, i64* %3487, align 8
  br label %3488

3488:                                             ; preds = %3512, %3475
  %3489 = phi i32 [ %3457, %3475 ], [ %3517, %3512 ]
  %3490 = phi i32 [ %3471, %3475 ], [ %3515, %3512 ]
  %3491 = phi i32 [ %3460, %3475 ], [ %3516, %3512 ]
  %3492 = icmp eq i32 %3489, 0
  br i1 %3492, label %3493, label %3512

3493:                                             ; preds = %3488
  %3494 = load i8*, i8** %31, align 8
  %3495 = getelementptr inbounds i8, i8* %3494, i64 1
  %3496 = load i8, i8* %3495, align 1
  %3497 = zext i8 %3496 to i32
  %3498 = load i8, i8* %3494, align 1
  %3499 = icmp eq i8 %3498, -1
  br i1 %3499, label %3500, label %3509

3500:                                             ; preds = %3493
  %3501 = icmp ugt i8 %3496, -113
  br i1 %3501, label %3502, label %3506

3502:                                             ; preds = %3500
  %3503 = add i32 %3491, 65280
  %3504 = load i32, i32* %32, align 4
  %3505 = add i32 %3504, 1
  store i32 %3505, i32* %32, align 4
  br label %3512

3506:                                             ; preds = %3500
  store i8* %3495, i8** %31, align 8
  %3507 = shl nuw nsw i32 %3497, 9
  %3508 = add i32 %3507, %3491
  br label %3512

3509:                                             ; preds = %3493
  store i8* %3495, i8** %31, align 8
  %3510 = shl nuw nsw i32 %3497, 8
  %3511 = add i32 %3510, %3491
  br label %3512

3512:                                             ; preds = %3509, %3506, %3502, %3488
  %3513 = phi i32 [ %3489, %3488 ], [ 8, %3502 ], [ 7, %3506 ], [ 8, %3509 ]
  %3514 = phi i32 [ %3491, %3488 ], [ %3503, %3502 ], [ %3508, %3506 ], [ %3511, %3509 ]
  %3515 = shl i32 %3490, 1
  %3516 = shl i32 %3514, 1
  %3517 = add i32 %3513, -1
  %3518 = icmp ult i32 %3515, 32768
  br i1 %3518, label %3488, label %3571

3519:                                             ; preds = %3456
  %3520 = shl i32 %3471, 16
  %3521 = sub i32 %3460, %3520
  %3522 = trunc i32 %3472 to i16
  %3523 = icmp sgt i16 %3522, -1
  br i1 %3523, label %3524, label %3568

3524:                                             ; preds = %3519
  %3525 = icmp ult i32 %3472, %3471
  %3526 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 1
  %3527 = load i32, i32* %3526, align 4
  %3528 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 2
  %3529 = icmp eq i32 %3527, 0
  %3530 = zext i1 %3529 to i32
  %3531 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 3
  %3532 = select i1 %3525, %struct.opj_mqc_state** %3531, %struct.opj_mqc_state** %3528
  %3533 = select i1 %3525, i32 %3530, i32 %3527
  %3534 = bitcast %struct.opj_mqc_state** %3532 to i64*
  %3535 = load i64, i64* %3534, align 8
  %3536 = bitcast %struct.opj_mqc_state** %3468 to i64*
  store i64 %3535, i64* %3536, align 8
  br label %3537

3537:                                             ; preds = %3561, %3524
  %3538 = phi i32 [ %3457, %3524 ], [ %3566, %3561 ]
  %3539 = phi i32 [ %3472, %3524 ], [ %3564, %3561 ]
  %3540 = phi i32 [ %3521, %3524 ], [ %3565, %3561 ]
  %3541 = icmp eq i32 %3538, 0
  br i1 %3541, label %3542, label %3561

3542:                                             ; preds = %3537
  %3543 = load i8*, i8** %31, align 8
  %3544 = getelementptr inbounds i8, i8* %3543, i64 1
  %3545 = load i8, i8* %3544, align 1
  %3546 = zext i8 %3545 to i32
  %3547 = load i8, i8* %3543, align 1
  %3548 = icmp eq i8 %3547, -1
  br i1 %3548, label %3549, label %3558

3549:                                             ; preds = %3542
  %3550 = icmp ugt i8 %3545, -113
  br i1 %3550, label %3551, label %3555

3551:                                             ; preds = %3549
  %3552 = add i32 %3540, 65280
  %3553 = load i32, i32* %32, align 4
  %3554 = add i32 %3553, 1
  store i32 %3554, i32* %32, align 4
  br label %3561

3555:                                             ; preds = %3549
  store i8* %3544, i8** %31, align 8
  %3556 = shl nuw nsw i32 %3546, 9
  %3557 = add i32 %3556, %3540
  br label %3561

3558:                                             ; preds = %3542
  store i8* %3544, i8** %31, align 8
  %3559 = shl nuw nsw i32 %3546, 8
  %3560 = add i32 %3559, %3540
  br label %3561

3561:                                             ; preds = %3558, %3555, %3551, %3537
  %3562 = phi i32 [ %3538, %3537 ], [ 8, %3551 ], [ 7, %3555 ], [ 8, %3558 ]
  %3563 = phi i32 [ %3540, %3537 ], [ %3552, %3551 ], [ %3557, %3555 ], [ %3560, %3558 ]
  %3564 = shl i32 %3539, 1
  %3565 = shl i32 %3563, 1
  %3566 = add i32 %3562, -1
  %3567 = icmp ult i32 %3564, 32768
  br i1 %3567, label %3537, label %3571

3568:                                             ; preds = %3519
  %3569 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3469, i64 0, i32 1
  %3570 = load i32, i32* %3569, align 4
  br label %3571

3571:                                             ; preds = %3561, %3512, %3568
  %3572 = phi i32 [ %3457, %3568 ], [ %3517, %3512 ], [ %3566, %3561 ]
  %3573 = phi i32 [ %3570, %3568 ], [ %3484, %3512 ], [ %3533, %3561 ]
  %3574 = phi i32 [ %3472, %3568 ], [ %3515, %3512 ], [ %3564, %3561 ]
  %3575 = phi i32 [ %3521, %3568 ], [ %3516, %3512 ], [ %3565, %3561 ]
  %3576 = icmp eq i32 %3573, 0
  br i1 %3576, label %4828, label %3577

3577:                                             ; preds = %2772, %3571
  %3578 = phi i32 [ %3458, %3571 ], [ 0, %2772 ]
  %3579 = phi i32 [ %3572, %3571 ], [ %2773, %2772 ]
  %3580 = phi i32 [ %3574, %3571 ], [ %2775, %2772 ]
  %3581 = phi i32 [ %3575, %3571 ], [ %2776, %2772 ]
  %3582 = getelementptr inbounds i32, i32* %2444, i64 -1
  %3583 = load i32, i32* %3582, align 4
  %3584 = getelementptr inbounds i32, i32* %2444, i64 1
  %3585 = load i32, i32* %3584, align 4
  %3586 = lshr i32 %3578, 9
  %3587 = and i32 %3586, 170
  %3588 = lshr i32 %3583, 28
  %3589 = and i32 %3588, 1
  %3590 = lshr i32 %3585, 26
  %3591 = and i32 %3590, 4
  %3592 = lshr i32 %3578, 21
  %3593 = and i32 %3592, 16
  %3594 = lshr i32 %3578, 25
  %3595 = and i32 %3594, 64
  %3596 = or i32 %3595, %3587
  %3597 = or i32 %3596, %3593
  %3598 = or i32 %3597, %3589
  %3599 = or i32 %3598, %3591
  %3600 = zext i32 %3599 to i64
  %3601 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3600
  %3602 = load i8, i8* %3601, align 1
  %3603 = zext i8 %3602 to i64
  %3604 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3603
  %3605 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3604, align 8
  %3606 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 0
  %3607 = load i32, i32* %3606, align 8
  %3608 = sub i32 %3580, %3607
  %3609 = lshr i32 %3581, 16
  %3610 = icmp ult i32 %3609, %3607
  br i1 %3610, label %3611, label %3655

3611:                                             ; preds = %3577
  %3612 = icmp ult i32 %3608, %3607
  %3613 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 1
  %3614 = load i32, i32* %3613, align 4
  %3615 = icmp eq i32 %3614, 0
  %3616 = zext i1 %3615 to i32
  %3617 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 3
  %3618 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 2
  %3619 = select i1 %3612, %struct.opj_mqc_state** %3618, %struct.opj_mqc_state** %3617
  %3620 = select i1 %3612, i32 %3614, i32 %3616
  %3621 = bitcast %struct.opj_mqc_state** %3619 to i64*
  %3622 = load i64, i64* %3621, align 8
  %3623 = bitcast %struct.opj_mqc_state** %3604 to i64*
  store i64 %3622, i64* %3623, align 8
  br label %3624

3624:                                             ; preds = %3648, %3611
  %3625 = phi i32 [ %3579, %3611 ], [ %3653, %3648 ]
  %3626 = phi i32 [ %3607, %3611 ], [ %3651, %3648 ]
  %3627 = phi i32 [ %3581, %3611 ], [ %3652, %3648 ]
  %3628 = icmp eq i32 %3625, 0
  br i1 %3628, label %3629, label %3648

3629:                                             ; preds = %3624
  %3630 = load i8*, i8** %31, align 8
  %3631 = getelementptr inbounds i8, i8* %3630, i64 1
  %3632 = load i8, i8* %3631, align 1
  %3633 = zext i8 %3632 to i32
  %3634 = load i8, i8* %3630, align 1
  %3635 = icmp eq i8 %3634, -1
  br i1 %3635, label %3636, label %3645

3636:                                             ; preds = %3629
  %3637 = icmp ugt i8 %3632, -113
  br i1 %3637, label %3638, label %3642

3638:                                             ; preds = %3636
  %3639 = add i32 %3627, 65280
  %3640 = load i32, i32* %32, align 4
  %3641 = add i32 %3640, 1
  store i32 %3641, i32* %32, align 4
  br label %3648

3642:                                             ; preds = %3636
  store i8* %3631, i8** %31, align 8
  %3643 = shl nuw nsw i32 %3633, 9
  %3644 = add i32 %3643, %3627
  br label %3648

3645:                                             ; preds = %3629
  store i8* %3631, i8** %31, align 8
  %3646 = shl nuw nsw i32 %3633, 8
  %3647 = add i32 %3646, %3627
  br label %3648

3648:                                             ; preds = %3645, %3642, %3638, %3624
  %3649 = phi i32 [ %3625, %3624 ], [ 8, %3638 ], [ 7, %3642 ], [ 8, %3645 ]
  %3650 = phi i32 [ %3627, %3624 ], [ %3639, %3638 ], [ %3644, %3642 ], [ %3647, %3645 ]
  %3651 = shl i32 %3626, 1
  %3652 = shl i32 %3650, 1
  %3653 = add i32 %3649, -1
  %3654 = icmp ult i32 %3651, 32768
  br i1 %3654, label %3624, label %3707

3655:                                             ; preds = %3577
  %3656 = shl i32 %3607, 16
  %3657 = sub i32 %3581, %3656
  %3658 = trunc i32 %3608 to i16
  %3659 = icmp sgt i16 %3658, -1
  br i1 %3659, label %3660, label %3704

3660:                                             ; preds = %3655
  %3661 = icmp ult i32 %3608, %3607
  %3662 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 1
  %3663 = load i32, i32* %3662, align 4
  %3664 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 2
  %3665 = icmp eq i32 %3663, 0
  %3666 = zext i1 %3665 to i32
  %3667 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 3
  %3668 = select i1 %3661, %struct.opj_mqc_state** %3667, %struct.opj_mqc_state** %3664
  %3669 = select i1 %3661, i32 %3666, i32 %3663
  %3670 = bitcast %struct.opj_mqc_state** %3668 to i64*
  %3671 = load i64, i64* %3670, align 8
  %3672 = bitcast %struct.opj_mqc_state** %3604 to i64*
  store i64 %3671, i64* %3672, align 8
  br label %3673

3673:                                             ; preds = %3697, %3660
  %3674 = phi i32 [ %3579, %3660 ], [ %3702, %3697 ]
  %3675 = phi i32 [ %3608, %3660 ], [ %3700, %3697 ]
  %3676 = phi i32 [ %3657, %3660 ], [ %3701, %3697 ]
  %3677 = icmp eq i32 %3674, 0
  br i1 %3677, label %3678, label %3697

3678:                                             ; preds = %3673
  %3679 = load i8*, i8** %31, align 8
  %3680 = getelementptr inbounds i8, i8* %3679, i64 1
  %3681 = load i8, i8* %3680, align 1
  %3682 = zext i8 %3681 to i32
  %3683 = load i8, i8* %3679, align 1
  %3684 = icmp eq i8 %3683, -1
  br i1 %3684, label %3685, label %3694

3685:                                             ; preds = %3678
  %3686 = icmp ugt i8 %3681, -113
  br i1 %3686, label %3687, label %3691

3687:                                             ; preds = %3685
  %3688 = add i32 %3676, 65280
  %3689 = load i32, i32* %32, align 4
  %3690 = add i32 %3689, 1
  store i32 %3690, i32* %32, align 4
  br label %3697

3691:                                             ; preds = %3685
  store i8* %3680, i8** %31, align 8
  %3692 = shl nuw nsw i32 %3682, 9
  %3693 = add i32 %3692, %3676
  br label %3697

3694:                                             ; preds = %3678
  store i8* %3680, i8** %31, align 8
  %3695 = shl nuw nsw i32 %3682, 8
  %3696 = add i32 %3695, %3676
  br label %3697

3697:                                             ; preds = %3694, %3691, %3687, %3673
  %3698 = phi i32 [ %3674, %3673 ], [ 8, %3687 ], [ 7, %3691 ], [ 8, %3694 ]
  %3699 = phi i32 [ %3676, %3673 ], [ %3688, %3687 ], [ %3693, %3691 ], [ %3696, %3694 ]
  %3700 = shl i32 %3675, 1
  %3701 = shl i32 %3699, 1
  %3702 = add i32 %3698, -1
  %3703 = icmp ult i32 %3700, 32768
  br i1 %3703, label %3673, label %3707

3704:                                             ; preds = %3655
  %3705 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3605, i64 0, i32 1
  %3706 = load i32, i32* %3705, align 4
  br label %3707

3707:                                             ; preds = %3697, %3648, %3704
  %3708 = phi i32 [ %3579, %3704 ], [ %3653, %3648 ], [ %3702, %3697 ]
  %3709 = phi i32 [ %3706, %3704 ], [ %3620, %3648 ], [ %3669, %3697 ]
  %3710 = phi i32 [ %3608, %3704 ], [ %3651, %3648 ], [ %3700, %3697 ]
  %3711 = phi i32 [ %3657, %3704 ], [ %3652, %3648 ], [ %3701, %3697 ]
  %3712 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3600
  %3713 = load i8, i8* %3712, align 1
  %3714 = zext i8 %3713 to i32
  %3715 = xor i32 %3709, %3714
  %3716 = icmp eq i32 %3715, 0
  %3717 = select i1 %3716, i32 %29, i32 %33
  %3718 = getelementptr inbounds i32, i32* %2443, i64 192
  store i32 %3717, i32* %3718, align 4
  %3719 = load i32, i32* %3582, align 4
  %3720 = or i32 %3719, 16384
  store i32 %3720, i32* %3582, align 4
  %3721 = shl i32 %3715, 28
  %3722 = or i32 %3578, %3721
  %3723 = or i32 %3722, 8192
  %3724 = load i32, i32* %3584, align 4
  %3725 = or i32 %3724, 4096
  store i32 %3725, i32* %3584, align 4
  %3726 = getelementptr inbounds i32, i32* %2444, i64 66
  %3727 = shl i32 %3715, 18
  %3728 = load i32, i32* %3726, align 4
  %3729 = or i32 %3727, %3728
  %3730 = or i32 %3729, 2
  store i32 %3730, i32* %3726, align 4
  %3731 = getelementptr inbounds i32, i32* %2444, i64 65
  %3732 = load i32, i32* %3731, align 4
  %3733 = or i32 %3732, 4
  store i32 %3733, i32* %3731, align 4
  %3734 = getelementptr inbounds i32, i32* %2444, i64 67
  %3735 = load i32, i32* %3734, align 4
  %3736 = or i32 %3735, 1
  store i32 %3736, i32* %3734, align 4
  br label %4828

3737:                                             ; preds = %2441
  %3738 = and i32 %2449, 2097168
  %3739 = icmp eq i32 %3738, 0
  br i1 %3739, label %3740, label %4010

3740:                                             ; preds = %3737
  %3741 = load i8*, i8** %30, align 8
  %3742 = and i32 %2449, 495
  %3743 = zext i32 %3742 to i64
  %3744 = getelementptr inbounds i8, i8* %3741, i64 %3743
  %3745 = load i8, i8* %3744, align 1
  %3746 = zext i8 %3745 to i64
  %3747 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3746
  %3748 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3747, align 8
  %3749 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 0
  %3750 = load i32, i32* %3749, align 8
  %3751 = sub i32 %2447, %3750
  %3752 = lshr i32 %2446, 16
  %3753 = icmp ult i32 %3752, %3750
  br i1 %3753, label %3754, label %3798

3754:                                             ; preds = %3740
  %3755 = icmp ult i32 %3751, %3750
  %3756 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 1
  %3757 = load i32, i32* %3756, align 4
  %3758 = icmp eq i32 %3757, 0
  %3759 = zext i1 %3758 to i32
  %3760 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 3
  %3761 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 2
  %3762 = select i1 %3755, %struct.opj_mqc_state** %3761, %struct.opj_mqc_state** %3760
  %3763 = select i1 %3755, i32 %3757, i32 %3759
  %3764 = bitcast %struct.opj_mqc_state** %3762 to i64*
  %3765 = load i64, i64* %3764, align 8
  %3766 = bitcast %struct.opj_mqc_state** %3747 to i64*
  store i64 %3765, i64* %3766, align 8
  br label %3767

3767:                                             ; preds = %3791, %3754
  %3768 = phi i32 [ %2448, %3754 ], [ %3796, %3791 ]
  %3769 = phi i32 [ %3750, %3754 ], [ %3794, %3791 ]
  %3770 = phi i32 [ %2446, %3754 ], [ %3795, %3791 ]
  %3771 = icmp eq i32 %3768, 0
  br i1 %3771, label %3772, label %3791

3772:                                             ; preds = %3767
  %3773 = load i8*, i8** %31, align 8
  %3774 = getelementptr inbounds i8, i8* %3773, i64 1
  %3775 = load i8, i8* %3774, align 1
  %3776 = zext i8 %3775 to i32
  %3777 = load i8, i8* %3773, align 1
  %3778 = icmp eq i8 %3777, -1
  br i1 %3778, label %3779, label %3788

3779:                                             ; preds = %3772
  %3780 = icmp ugt i8 %3775, -113
  br i1 %3780, label %3781, label %3785

3781:                                             ; preds = %3779
  %3782 = add i32 %3770, 65280
  %3783 = load i32, i32* %32, align 4
  %3784 = add i32 %3783, 1
  store i32 %3784, i32* %32, align 4
  br label %3791

3785:                                             ; preds = %3779
  store i8* %3774, i8** %31, align 8
  %3786 = shl nuw nsw i32 %3776, 9
  %3787 = add i32 %3786, %3770
  br label %3791

3788:                                             ; preds = %3772
  store i8* %3774, i8** %31, align 8
  %3789 = shl nuw nsw i32 %3776, 8
  %3790 = add i32 %3789, %3770
  br label %3791

3791:                                             ; preds = %3788, %3785, %3781, %3767
  %3792 = phi i32 [ %3768, %3767 ], [ 8, %3781 ], [ 7, %3785 ], [ 8, %3788 ]
  %3793 = phi i32 [ %3770, %3767 ], [ %3782, %3781 ], [ %3787, %3785 ], [ %3790, %3788 ]
  %3794 = shl i32 %3769, 1
  %3795 = shl i32 %3793, 1
  %3796 = add i32 %3792, -1
  %3797 = icmp ult i32 %3794, 32768
  br i1 %3797, label %3767, label %3850

3798:                                             ; preds = %3740
  %3799 = shl i32 %3750, 16
  %3800 = sub i32 %2446, %3799
  %3801 = trunc i32 %3751 to i16
  %3802 = icmp sgt i16 %3801, -1
  br i1 %3802, label %3803, label %3847

3803:                                             ; preds = %3798
  %3804 = icmp ult i32 %3751, %3750
  %3805 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 1
  %3806 = load i32, i32* %3805, align 4
  %3807 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 2
  %3808 = icmp eq i32 %3806, 0
  %3809 = zext i1 %3808 to i32
  %3810 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 3
  %3811 = select i1 %3804, %struct.opj_mqc_state** %3810, %struct.opj_mqc_state** %3807
  %3812 = select i1 %3804, i32 %3809, i32 %3806
  %3813 = bitcast %struct.opj_mqc_state** %3811 to i64*
  %3814 = load i64, i64* %3813, align 8
  %3815 = bitcast %struct.opj_mqc_state** %3747 to i64*
  store i64 %3814, i64* %3815, align 8
  br label %3816

3816:                                             ; preds = %3840, %3803
  %3817 = phi i32 [ %2448, %3803 ], [ %3845, %3840 ]
  %3818 = phi i32 [ %3751, %3803 ], [ %3843, %3840 ]
  %3819 = phi i32 [ %3800, %3803 ], [ %3844, %3840 ]
  %3820 = icmp eq i32 %3817, 0
  br i1 %3820, label %3821, label %3840

3821:                                             ; preds = %3816
  %3822 = load i8*, i8** %31, align 8
  %3823 = getelementptr inbounds i8, i8* %3822, i64 1
  %3824 = load i8, i8* %3823, align 1
  %3825 = zext i8 %3824 to i32
  %3826 = load i8, i8* %3822, align 1
  %3827 = icmp eq i8 %3826, -1
  br i1 %3827, label %3828, label %3837

3828:                                             ; preds = %3821
  %3829 = icmp ugt i8 %3824, -113
  br i1 %3829, label %3830, label %3834

3830:                                             ; preds = %3828
  %3831 = add i32 %3819, 65280
  %3832 = load i32, i32* %32, align 4
  %3833 = add i32 %3832, 1
  store i32 %3833, i32* %32, align 4
  br label %3840

3834:                                             ; preds = %3828
  store i8* %3823, i8** %31, align 8
  %3835 = shl nuw nsw i32 %3825, 9
  %3836 = add i32 %3835, %3819
  br label %3840

3837:                                             ; preds = %3821
  store i8* %3823, i8** %31, align 8
  %3838 = shl nuw nsw i32 %3825, 8
  %3839 = add i32 %3838, %3819
  br label %3840

3840:                                             ; preds = %3837, %3834, %3830, %3816
  %3841 = phi i32 [ %3817, %3816 ], [ 8, %3830 ], [ 7, %3834 ], [ 8, %3837 ]
  %3842 = phi i32 [ %3819, %3816 ], [ %3831, %3830 ], [ %3836, %3834 ], [ %3839, %3837 ]
  %3843 = shl i32 %3818, 1
  %3844 = shl i32 %3842, 1
  %3845 = add i32 %3841, -1
  %3846 = icmp ult i32 %3843, 32768
  br i1 %3846, label %3816, label %3850

3847:                                             ; preds = %3798
  %3848 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3748, i64 0, i32 1
  %3849 = load i32, i32* %3848, align 4
  br label %3850

3850:                                             ; preds = %3840, %3791, %3847
  %3851 = phi i32 [ %2448, %3847 ], [ %3796, %3791 ], [ %3845, %3840 ]
  %3852 = phi i32 [ %3849, %3847 ], [ %3763, %3791 ], [ %3812, %3840 ]
  %3853 = phi i32 [ %3751, %3847 ], [ %3794, %3791 ], [ %3843, %3840 ]
  %3854 = phi i32 [ %3800, %3847 ], [ %3795, %3791 ], [ %3844, %3840 ]
  %3855 = icmp eq i32 %3852, 0
  br i1 %3855, label %4010, label %3856

3856:                                             ; preds = %3850
  %3857 = getelementptr inbounds i32, i32* %2444, i64 -1
  %3858 = load i32, i32* %3857, align 4
  %3859 = getelementptr inbounds i32, i32* %2444, i64 1
  %3860 = load i32, i32* %3859, align 4
  %3861 = and i32 %2449, 170
  %3862 = lshr i32 %3858, 19
  %3863 = and i32 %3862, 1
  %3864 = lshr i32 %3860, 17
  %3865 = and i32 %3864, 4
  %3866 = lshr i32 %2449, 14
  %3867 = and i32 %3866, 16
  %3868 = lshr i32 %2449, 16
  %3869 = and i32 %3868, 64
  %3870 = or i32 %3869, %3861
  %3871 = or i32 %3870, %3867
  %3872 = or i32 %3871, %3863
  %3873 = or i32 %3872, %3865
  %3874 = zext i32 %3873 to i64
  %3875 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %3874
  %3876 = load i8, i8* %3875, align 1
  %3877 = zext i8 %3876 to i64
  %3878 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %3877
  %3879 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %3878, align 8
  %3880 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 0
  %3881 = load i32, i32* %3880, align 8
  %3882 = sub i32 %3853, %3881
  %3883 = lshr i32 %3854, 16
  %3884 = icmp ult i32 %3883, %3881
  br i1 %3884, label %3885, label %3929

3885:                                             ; preds = %3856
  %3886 = icmp ult i32 %3882, %3881
  %3887 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 1
  %3888 = load i32, i32* %3887, align 4
  %3889 = icmp eq i32 %3888, 0
  %3890 = zext i1 %3889 to i32
  %3891 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 3
  %3892 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 2
  %3893 = select i1 %3886, %struct.opj_mqc_state** %3892, %struct.opj_mqc_state** %3891
  %3894 = select i1 %3886, i32 %3888, i32 %3890
  %3895 = bitcast %struct.opj_mqc_state** %3893 to i64*
  %3896 = load i64, i64* %3895, align 8
  %3897 = bitcast %struct.opj_mqc_state** %3878 to i64*
  store i64 %3896, i64* %3897, align 8
  br label %3898

3898:                                             ; preds = %3922, %3885
  %3899 = phi i32 [ %3851, %3885 ], [ %3927, %3922 ]
  %3900 = phi i32 [ %3881, %3885 ], [ %3925, %3922 ]
  %3901 = phi i32 [ %3854, %3885 ], [ %3926, %3922 ]
  %3902 = icmp eq i32 %3899, 0
  br i1 %3902, label %3903, label %3922

3903:                                             ; preds = %3898
  %3904 = load i8*, i8** %31, align 8
  %3905 = getelementptr inbounds i8, i8* %3904, i64 1
  %3906 = load i8, i8* %3905, align 1
  %3907 = zext i8 %3906 to i32
  %3908 = load i8, i8* %3904, align 1
  %3909 = icmp eq i8 %3908, -1
  br i1 %3909, label %3910, label %3919

3910:                                             ; preds = %3903
  %3911 = icmp ugt i8 %3906, -113
  br i1 %3911, label %3912, label %3916

3912:                                             ; preds = %3910
  %3913 = add i32 %3901, 65280
  %3914 = load i32, i32* %32, align 4
  %3915 = add i32 %3914, 1
  store i32 %3915, i32* %32, align 4
  br label %3922

3916:                                             ; preds = %3910
  store i8* %3905, i8** %31, align 8
  %3917 = shl nuw nsw i32 %3907, 9
  %3918 = add i32 %3917, %3901
  br label %3922

3919:                                             ; preds = %3903
  store i8* %3905, i8** %31, align 8
  %3920 = shl nuw nsw i32 %3907, 8
  %3921 = add i32 %3920, %3901
  br label %3922

3922:                                             ; preds = %3919, %3916, %3912, %3898
  %3923 = phi i32 [ %3899, %3898 ], [ 8, %3912 ], [ 7, %3916 ], [ 8, %3919 ]
  %3924 = phi i32 [ %3901, %3898 ], [ %3913, %3912 ], [ %3918, %3916 ], [ %3921, %3919 ]
  %3925 = shl i32 %3900, 1
  %3926 = shl i32 %3924, 1
  %3927 = add i32 %3923, -1
  %3928 = icmp ult i32 %3925, 32768
  br i1 %3928, label %3898, label %3981

3929:                                             ; preds = %3856
  %3930 = shl i32 %3881, 16
  %3931 = sub i32 %3854, %3930
  %3932 = trunc i32 %3882 to i16
  %3933 = icmp sgt i16 %3932, -1
  br i1 %3933, label %3934, label %3978

3934:                                             ; preds = %3929
  %3935 = icmp ult i32 %3882, %3881
  %3936 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 1
  %3937 = load i32, i32* %3936, align 4
  %3938 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 2
  %3939 = icmp eq i32 %3937, 0
  %3940 = zext i1 %3939 to i32
  %3941 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 3
  %3942 = select i1 %3935, %struct.opj_mqc_state** %3941, %struct.opj_mqc_state** %3938
  %3943 = select i1 %3935, i32 %3940, i32 %3937
  %3944 = bitcast %struct.opj_mqc_state** %3942 to i64*
  %3945 = load i64, i64* %3944, align 8
  %3946 = bitcast %struct.opj_mqc_state** %3878 to i64*
  store i64 %3945, i64* %3946, align 8
  br label %3947

3947:                                             ; preds = %3971, %3934
  %3948 = phi i32 [ %3851, %3934 ], [ %3976, %3971 ]
  %3949 = phi i32 [ %3882, %3934 ], [ %3974, %3971 ]
  %3950 = phi i32 [ %3931, %3934 ], [ %3975, %3971 ]
  %3951 = icmp eq i32 %3948, 0
  br i1 %3951, label %3952, label %3971

3952:                                             ; preds = %3947
  %3953 = load i8*, i8** %31, align 8
  %3954 = getelementptr inbounds i8, i8* %3953, i64 1
  %3955 = load i8, i8* %3954, align 1
  %3956 = zext i8 %3955 to i32
  %3957 = load i8, i8* %3953, align 1
  %3958 = icmp eq i8 %3957, -1
  br i1 %3958, label %3959, label %3968

3959:                                             ; preds = %3952
  %3960 = icmp ugt i8 %3955, -113
  br i1 %3960, label %3961, label %3965

3961:                                             ; preds = %3959
  %3962 = add i32 %3950, 65280
  %3963 = load i32, i32* %32, align 4
  %3964 = add i32 %3963, 1
  store i32 %3964, i32* %32, align 4
  br label %3971

3965:                                             ; preds = %3959
  store i8* %3954, i8** %31, align 8
  %3966 = shl nuw nsw i32 %3956, 9
  %3967 = add i32 %3966, %3950
  br label %3971

3968:                                             ; preds = %3952
  store i8* %3954, i8** %31, align 8
  %3969 = shl nuw nsw i32 %3956, 8
  %3970 = add i32 %3969, %3950
  br label %3971

3971:                                             ; preds = %3968, %3965, %3961, %3947
  %3972 = phi i32 [ %3948, %3947 ], [ 8, %3961 ], [ 7, %3965 ], [ 8, %3968 ]
  %3973 = phi i32 [ %3950, %3947 ], [ %3962, %3961 ], [ %3967, %3965 ], [ %3970, %3968 ]
  %3974 = shl i32 %3949, 1
  %3975 = shl i32 %3973, 1
  %3976 = add i32 %3972, -1
  %3977 = icmp ult i32 %3974, 32768
  br i1 %3977, label %3947, label %3981

3978:                                             ; preds = %3929
  %3979 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %3879, i64 0, i32 1
  %3980 = load i32, i32* %3979, align 4
  br label %3981

3981:                                             ; preds = %3971, %3922, %3978
  %3982 = phi i32 [ %3851, %3978 ], [ %3927, %3922 ], [ %3976, %3971 ]
  %3983 = phi i32 [ %3980, %3978 ], [ %3894, %3922 ], [ %3943, %3971 ]
  %3984 = phi i32 [ %3882, %3978 ], [ %3925, %3922 ], [ %3974, %3971 ]
  %3985 = phi i32 [ %3931, %3978 ], [ %3926, %3922 ], [ %3975, %3971 ]
  %3986 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %3874
  %3987 = load i8, i8* %3986, align 1
  %3988 = zext i8 %3987 to i32
  %3989 = xor i32 %3983, %3988
  %3990 = icmp eq i32 %3989, 0
  %3991 = select i1 %3990, i32 %29, i32 %33
  store i32 %3991, i32* %2443, align 4
  %3992 = load i32, i32* %3857, align 4
  %3993 = or i32 %3992, 32
  store i32 %3993, i32* %3857, align 4
  %3994 = shl i32 %3989, 19
  %3995 = or i32 %2449, %3994
  %3996 = or i32 %3995, 16
  %3997 = load i32, i32* %3859, align 4
  %3998 = or i32 %3997, 8
  store i32 %3998, i32* %3859, align 4
  %3999 = getelementptr inbounds i32, i32* %2444, i64 -66
  %4000 = shl i32 %3989, 31
  %4001 = load i32, i32* %3999, align 4
  %4002 = or i32 %4000, %4001
  %4003 = or i32 %4002, 65536
  store i32 %4003, i32* %3999, align 4
  %4004 = getelementptr inbounds i32, i32* %2444, i64 -67
  %4005 = load i32, i32* %4004, align 4
  %4006 = or i32 %4005, 131072
  store i32 %4006, i32* %4004, align 4
  %4007 = getelementptr inbounds i32, i32* %2444, i64 -65
  %4008 = load i32, i32* %4007, align 4
  %4009 = or i32 %4008, 32768
  store i32 %4009, i32* %4007, align 4
  br label %4010

4010:                                             ; preds = %3981, %3850, %3737
  %4011 = phi i32 [ %2448, %3737 ], [ %3982, %3981 ], [ %3851, %3850 ]
  %4012 = phi i32 [ %2449, %3737 ], [ %3996, %3981 ], [ %2449, %3850 ]
  %4013 = phi i32 [ %2447, %3737 ], [ %3984, %3981 ], [ %3853, %3850 ]
  %4014 = phi i32 [ %2446, %3737 ], [ %3985, %3981 ], [ %3854, %3850 ]
  %4015 = phi %struct.opj_mqc_state** [ %2445, %3737 ], [ %3878, %3981 ], [ %3747, %3850 ]
  %4016 = and i32 %4012, 16777344
  %4017 = icmp eq i32 %4016, 0
  br i1 %4017, label %4018, label %4279

4018:                                             ; preds = %4010
  %4019 = lshr i32 %4012, 3
  %4020 = load i8*, i8** %30, align 8
  %4021 = and i32 %4019, 495
  %4022 = zext i32 %4021 to i64
  %4023 = getelementptr inbounds i8, i8* %4020, i64 %4022
  %4024 = load i8, i8* %4023, align 1
  %4025 = zext i8 %4024 to i64
  %4026 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4025
  %4027 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4026, align 8
  %4028 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 0
  %4029 = load i32, i32* %4028, align 8
  %4030 = sub i32 %4013, %4029
  %4031 = lshr i32 %4014, 16
  %4032 = icmp ult i32 %4031, %4029
  br i1 %4032, label %4033, label %4077

4033:                                             ; preds = %4018
  %4034 = icmp ult i32 %4030, %4029
  %4035 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 1
  %4036 = load i32, i32* %4035, align 4
  %4037 = icmp eq i32 %4036, 0
  %4038 = zext i1 %4037 to i32
  %4039 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 3
  %4040 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 2
  %4041 = select i1 %4034, %struct.opj_mqc_state** %4040, %struct.opj_mqc_state** %4039
  %4042 = select i1 %4034, i32 %4036, i32 %4038
  %4043 = bitcast %struct.opj_mqc_state** %4041 to i64*
  %4044 = load i64, i64* %4043, align 8
  %4045 = bitcast %struct.opj_mqc_state** %4026 to i64*
  store i64 %4044, i64* %4045, align 8
  br label %4046

4046:                                             ; preds = %4070, %4033
  %4047 = phi i32 [ %4011, %4033 ], [ %4075, %4070 ]
  %4048 = phi i32 [ %4029, %4033 ], [ %4073, %4070 ]
  %4049 = phi i32 [ %4014, %4033 ], [ %4074, %4070 ]
  %4050 = icmp eq i32 %4047, 0
  br i1 %4050, label %4051, label %4070

4051:                                             ; preds = %4046
  %4052 = load i8*, i8** %31, align 8
  %4053 = getelementptr inbounds i8, i8* %4052, i64 1
  %4054 = load i8, i8* %4053, align 1
  %4055 = zext i8 %4054 to i32
  %4056 = load i8, i8* %4052, align 1
  %4057 = icmp eq i8 %4056, -1
  br i1 %4057, label %4058, label %4067

4058:                                             ; preds = %4051
  %4059 = icmp ugt i8 %4054, -113
  br i1 %4059, label %4060, label %4064

4060:                                             ; preds = %4058
  %4061 = add i32 %4049, 65280
  %4062 = load i32, i32* %32, align 4
  %4063 = add i32 %4062, 1
  store i32 %4063, i32* %32, align 4
  br label %4070

4064:                                             ; preds = %4058
  store i8* %4053, i8** %31, align 8
  %4065 = shl nuw nsw i32 %4055, 9
  %4066 = add i32 %4065, %4049
  br label %4070

4067:                                             ; preds = %4051
  store i8* %4053, i8** %31, align 8
  %4068 = shl nuw nsw i32 %4055, 8
  %4069 = add i32 %4068, %4049
  br label %4070

4070:                                             ; preds = %4067, %4064, %4060, %4046
  %4071 = phi i32 [ %4047, %4046 ], [ 8, %4060 ], [ 7, %4064 ], [ 8, %4067 ]
  %4072 = phi i32 [ %4049, %4046 ], [ %4061, %4060 ], [ %4066, %4064 ], [ %4069, %4067 ]
  %4073 = shl i32 %4048, 1
  %4074 = shl i32 %4072, 1
  %4075 = add i32 %4071, -1
  %4076 = icmp ult i32 %4073, 32768
  br i1 %4076, label %4046, label %4129

4077:                                             ; preds = %4018
  %4078 = shl i32 %4029, 16
  %4079 = sub i32 %4014, %4078
  %4080 = trunc i32 %4030 to i16
  %4081 = icmp sgt i16 %4080, -1
  br i1 %4081, label %4082, label %4126

4082:                                             ; preds = %4077
  %4083 = icmp ult i32 %4030, %4029
  %4084 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 1
  %4085 = load i32, i32* %4084, align 4
  %4086 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 2
  %4087 = icmp eq i32 %4085, 0
  %4088 = zext i1 %4087 to i32
  %4089 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 3
  %4090 = select i1 %4083, %struct.opj_mqc_state** %4089, %struct.opj_mqc_state** %4086
  %4091 = select i1 %4083, i32 %4088, i32 %4085
  %4092 = bitcast %struct.opj_mqc_state** %4090 to i64*
  %4093 = load i64, i64* %4092, align 8
  %4094 = bitcast %struct.opj_mqc_state** %4026 to i64*
  store i64 %4093, i64* %4094, align 8
  br label %4095

4095:                                             ; preds = %4119, %4082
  %4096 = phi i32 [ %4011, %4082 ], [ %4124, %4119 ]
  %4097 = phi i32 [ %4030, %4082 ], [ %4122, %4119 ]
  %4098 = phi i32 [ %4079, %4082 ], [ %4123, %4119 ]
  %4099 = icmp eq i32 %4096, 0
  br i1 %4099, label %4100, label %4119

4100:                                             ; preds = %4095
  %4101 = load i8*, i8** %31, align 8
  %4102 = getelementptr inbounds i8, i8* %4101, i64 1
  %4103 = load i8, i8* %4102, align 1
  %4104 = zext i8 %4103 to i32
  %4105 = load i8, i8* %4101, align 1
  %4106 = icmp eq i8 %4105, -1
  br i1 %4106, label %4107, label %4116

4107:                                             ; preds = %4100
  %4108 = icmp ugt i8 %4103, -113
  br i1 %4108, label %4109, label %4113

4109:                                             ; preds = %4107
  %4110 = add i32 %4098, 65280
  %4111 = load i32, i32* %32, align 4
  %4112 = add i32 %4111, 1
  store i32 %4112, i32* %32, align 4
  br label %4119

4113:                                             ; preds = %4107
  store i8* %4102, i8** %31, align 8
  %4114 = shl nuw nsw i32 %4104, 9
  %4115 = add i32 %4114, %4098
  br label %4119

4116:                                             ; preds = %4100
  store i8* %4102, i8** %31, align 8
  %4117 = shl nuw nsw i32 %4104, 8
  %4118 = add i32 %4117, %4098
  br label %4119

4119:                                             ; preds = %4116, %4113, %4109, %4095
  %4120 = phi i32 [ %4096, %4095 ], [ 8, %4109 ], [ 7, %4113 ], [ 8, %4116 ]
  %4121 = phi i32 [ %4098, %4095 ], [ %4110, %4109 ], [ %4115, %4113 ], [ %4118, %4116 ]
  %4122 = shl i32 %4097, 1
  %4123 = shl i32 %4121, 1
  %4124 = add i32 %4120, -1
  %4125 = icmp ult i32 %4122, 32768
  br i1 %4125, label %4095, label %4129

4126:                                             ; preds = %4077
  %4127 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4027, i64 0, i32 1
  %4128 = load i32, i32* %4127, align 4
  br label %4129

4129:                                             ; preds = %4119, %4070, %4126
  %4130 = phi i32 [ %4011, %4126 ], [ %4075, %4070 ], [ %4124, %4119 ]
  %4131 = phi i32 [ %4128, %4126 ], [ %4042, %4070 ], [ %4091, %4119 ]
  %4132 = phi i32 [ %4030, %4126 ], [ %4073, %4070 ], [ %4122, %4119 ]
  %4133 = phi i32 [ %4079, %4126 ], [ %4074, %4070 ], [ %4123, %4119 ]
  %4134 = icmp eq i32 %4131, 0
  br i1 %4134, label %4279, label %4135

4135:                                             ; preds = %4129
  %4136 = getelementptr inbounds i32, i32* %2444, i64 -1
  %4137 = load i32, i32* %4136, align 4
  %4138 = getelementptr inbounds i32, i32* %2444, i64 1
  %4139 = load i32, i32* %4138, align 4
  %4140 = and i32 %4019, 170
  %4141 = lshr i32 %4137, 22
  %4142 = and i32 %4141, 1
  %4143 = lshr i32 %4139, 20
  %4144 = and i32 %4143, 4
  %4145 = lshr i32 %4012, 15
  %4146 = and i32 %4145, 16
  %4147 = lshr i32 %4012, 19
  %4148 = and i32 %4147, 64
  %4149 = or i32 %4148, %4140
  %4150 = or i32 %4149, %4146
  %4151 = or i32 %4150, %4142
  %4152 = or i32 %4151, %4144
  %4153 = zext i32 %4152 to i64
  %4154 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %4153
  %4155 = load i8, i8* %4154, align 1
  %4156 = zext i8 %4155 to i64
  %4157 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4156
  %4158 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4157, align 8
  %4159 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 0
  %4160 = load i32, i32* %4159, align 8
  %4161 = sub i32 %4132, %4160
  %4162 = lshr i32 %4133, 16
  %4163 = icmp ult i32 %4162, %4160
  br i1 %4163, label %4164, label %4208

4164:                                             ; preds = %4135
  %4165 = icmp ult i32 %4161, %4160
  %4166 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 1
  %4167 = load i32, i32* %4166, align 4
  %4168 = icmp eq i32 %4167, 0
  %4169 = zext i1 %4168 to i32
  %4170 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 3
  %4171 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 2
  %4172 = select i1 %4165, %struct.opj_mqc_state** %4171, %struct.opj_mqc_state** %4170
  %4173 = select i1 %4165, i32 %4167, i32 %4169
  %4174 = bitcast %struct.opj_mqc_state** %4172 to i64*
  %4175 = load i64, i64* %4174, align 8
  %4176 = bitcast %struct.opj_mqc_state** %4157 to i64*
  store i64 %4175, i64* %4176, align 8
  br label %4177

4177:                                             ; preds = %4201, %4164
  %4178 = phi i32 [ %4130, %4164 ], [ %4206, %4201 ]
  %4179 = phi i32 [ %4160, %4164 ], [ %4204, %4201 ]
  %4180 = phi i32 [ %4133, %4164 ], [ %4205, %4201 ]
  %4181 = icmp eq i32 %4178, 0
  br i1 %4181, label %4182, label %4201

4182:                                             ; preds = %4177
  %4183 = load i8*, i8** %31, align 8
  %4184 = getelementptr inbounds i8, i8* %4183, i64 1
  %4185 = load i8, i8* %4184, align 1
  %4186 = zext i8 %4185 to i32
  %4187 = load i8, i8* %4183, align 1
  %4188 = icmp eq i8 %4187, -1
  br i1 %4188, label %4189, label %4198

4189:                                             ; preds = %4182
  %4190 = icmp ugt i8 %4185, -113
  br i1 %4190, label %4191, label %4195

4191:                                             ; preds = %4189
  %4192 = add i32 %4180, 65280
  %4193 = load i32, i32* %32, align 4
  %4194 = add i32 %4193, 1
  store i32 %4194, i32* %32, align 4
  br label %4201

4195:                                             ; preds = %4189
  store i8* %4184, i8** %31, align 8
  %4196 = shl nuw nsw i32 %4186, 9
  %4197 = add i32 %4196, %4180
  br label %4201

4198:                                             ; preds = %4182
  store i8* %4184, i8** %31, align 8
  %4199 = shl nuw nsw i32 %4186, 8
  %4200 = add i32 %4199, %4180
  br label %4201

4201:                                             ; preds = %4198, %4195, %4191, %4177
  %4202 = phi i32 [ %4178, %4177 ], [ 8, %4191 ], [ 7, %4195 ], [ 8, %4198 ]
  %4203 = phi i32 [ %4180, %4177 ], [ %4192, %4191 ], [ %4197, %4195 ], [ %4200, %4198 ]
  %4204 = shl i32 %4179, 1
  %4205 = shl i32 %4203, 1
  %4206 = add i32 %4202, -1
  %4207 = icmp ult i32 %4204, 32768
  br i1 %4207, label %4177, label %4260

4208:                                             ; preds = %4135
  %4209 = shl i32 %4160, 16
  %4210 = sub i32 %4133, %4209
  %4211 = trunc i32 %4161 to i16
  %4212 = icmp sgt i16 %4211, -1
  br i1 %4212, label %4213, label %4257

4213:                                             ; preds = %4208
  %4214 = icmp ult i32 %4161, %4160
  %4215 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 1
  %4216 = load i32, i32* %4215, align 4
  %4217 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 2
  %4218 = icmp eq i32 %4216, 0
  %4219 = zext i1 %4218 to i32
  %4220 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 3
  %4221 = select i1 %4214, %struct.opj_mqc_state** %4220, %struct.opj_mqc_state** %4217
  %4222 = select i1 %4214, i32 %4219, i32 %4216
  %4223 = bitcast %struct.opj_mqc_state** %4221 to i64*
  %4224 = load i64, i64* %4223, align 8
  %4225 = bitcast %struct.opj_mqc_state** %4157 to i64*
  store i64 %4224, i64* %4225, align 8
  br label %4226

4226:                                             ; preds = %4250, %4213
  %4227 = phi i32 [ %4130, %4213 ], [ %4255, %4250 ]
  %4228 = phi i32 [ %4161, %4213 ], [ %4253, %4250 ]
  %4229 = phi i32 [ %4210, %4213 ], [ %4254, %4250 ]
  %4230 = icmp eq i32 %4227, 0
  br i1 %4230, label %4231, label %4250

4231:                                             ; preds = %4226
  %4232 = load i8*, i8** %31, align 8
  %4233 = getelementptr inbounds i8, i8* %4232, i64 1
  %4234 = load i8, i8* %4233, align 1
  %4235 = zext i8 %4234 to i32
  %4236 = load i8, i8* %4232, align 1
  %4237 = icmp eq i8 %4236, -1
  br i1 %4237, label %4238, label %4247

4238:                                             ; preds = %4231
  %4239 = icmp ugt i8 %4234, -113
  br i1 %4239, label %4240, label %4244

4240:                                             ; preds = %4238
  %4241 = add i32 %4229, 65280
  %4242 = load i32, i32* %32, align 4
  %4243 = add i32 %4242, 1
  store i32 %4243, i32* %32, align 4
  br label %4250

4244:                                             ; preds = %4238
  store i8* %4233, i8** %31, align 8
  %4245 = shl nuw nsw i32 %4235, 9
  %4246 = add i32 %4245, %4229
  br label %4250

4247:                                             ; preds = %4231
  store i8* %4233, i8** %31, align 8
  %4248 = shl nuw nsw i32 %4235, 8
  %4249 = add i32 %4248, %4229
  br label %4250

4250:                                             ; preds = %4247, %4244, %4240, %4226
  %4251 = phi i32 [ %4227, %4226 ], [ 8, %4240 ], [ 7, %4244 ], [ 8, %4247 ]
  %4252 = phi i32 [ %4229, %4226 ], [ %4241, %4240 ], [ %4246, %4244 ], [ %4249, %4247 ]
  %4253 = shl i32 %4228, 1
  %4254 = shl i32 %4252, 1
  %4255 = add i32 %4251, -1
  %4256 = icmp ult i32 %4253, 32768
  br i1 %4256, label %4226, label %4260

4257:                                             ; preds = %4208
  %4258 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4158, i64 0, i32 1
  %4259 = load i32, i32* %4258, align 4
  br label %4260

4260:                                             ; preds = %4250, %4201, %4257
  %4261 = phi i32 [ %4130, %4257 ], [ %4206, %4201 ], [ %4255, %4250 ]
  %4262 = phi i32 [ %4259, %4257 ], [ %4173, %4201 ], [ %4222, %4250 ]
  %4263 = phi i32 [ %4161, %4257 ], [ %4204, %4201 ], [ %4253, %4250 ]
  %4264 = phi i32 [ %4210, %4257 ], [ %4205, %4201 ], [ %4254, %4250 ]
  %4265 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %4153
  %4266 = load i8, i8* %4265, align 1
  %4267 = zext i8 %4266 to i32
  %4268 = xor i32 %4262, %4267
  %4269 = icmp eq i32 %4268, 0
  %4270 = select i1 %4269, i32 %29, i32 %33
  %4271 = getelementptr inbounds i32, i32* %2443, i64 64
  store i32 %4270, i32* %4271, align 4
  %4272 = load i32, i32* %4136, align 4
  %4273 = or i32 %4272, 256
  store i32 %4273, i32* %4136, align 4
  %4274 = shl i32 %4268, 22
  %4275 = or i32 %4012, %4274
  %4276 = or i32 %4275, 128
  %4277 = load i32, i32* %4138, align 4
  %4278 = or i32 %4277, 64
  store i32 %4278, i32* %4138, align 4
  br label %4279

4279:                                             ; preds = %4260, %4129, %4010
  %4280 = phi i32 [ %4011, %4010 ], [ %4261, %4260 ], [ %4130, %4129 ]
  %4281 = phi i32 [ %4012, %4010 ], [ %4276, %4260 ], [ %4012, %4129 ]
  %4282 = phi i32 [ %4013, %4010 ], [ %4263, %4260 ], [ %4132, %4129 ]
  %4283 = phi i32 [ %4014, %4010 ], [ %4264, %4260 ], [ %4133, %4129 ]
  %4284 = phi %struct.opj_mqc_state** [ %4015, %4010 ], [ %4157, %4260 ], [ %4026, %4129 ]
  %4285 = and i32 %4281, 134218752
  %4286 = icmp eq i32 %4285, 0
  br i1 %4286, label %4287, label %4548

4287:                                             ; preds = %4279
  %4288 = lshr i32 %4281, 6
  %4289 = load i8*, i8** %30, align 8
  %4290 = and i32 %4288, 495
  %4291 = zext i32 %4290 to i64
  %4292 = getelementptr inbounds i8, i8* %4289, i64 %4291
  %4293 = load i8, i8* %4292, align 1
  %4294 = zext i8 %4293 to i64
  %4295 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4294
  %4296 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4295, align 8
  %4297 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 0
  %4298 = load i32, i32* %4297, align 8
  %4299 = sub i32 %4282, %4298
  %4300 = lshr i32 %4283, 16
  %4301 = icmp ult i32 %4300, %4298
  br i1 %4301, label %4302, label %4346

4302:                                             ; preds = %4287
  %4303 = icmp ult i32 %4299, %4298
  %4304 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 1
  %4305 = load i32, i32* %4304, align 4
  %4306 = icmp eq i32 %4305, 0
  %4307 = zext i1 %4306 to i32
  %4308 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 3
  %4309 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 2
  %4310 = select i1 %4303, %struct.opj_mqc_state** %4309, %struct.opj_mqc_state** %4308
  %4311 = select i1 %4303, i32 %4305, i32 %4307
  %4312 = bitcast %struct.opj_mqc_state** %4310 to i64*
  %4313 = load i64, i64* %4312, align 8
  %4314 = bitcast %struct.opj_mqc_state** %4295 to i64*
  store i64 %4313, i64* %4314, align 8
  br label %4315

4315:                                             ; preds = %4339, %4302
  %4316 = phi i32 [ %4280, %4302 ], [ %4344, %4339 ]
  %4317 = phi i32 [ %4298, %4302 ], [ %4342, %4339 ]
  %4318 = phi i32 [ %4283, %4302 ], [ %4343, %4339 ]
  %4319 = icmp eq i32 %4316, 0
  br i1 %4319, label %4320, label %4339

4320:                                             ; preds = %4315
  %4321 = load i8*, i8** %31, align 8
  %4322 = getelementptr inbounds i8, i8* %4321, i64 1
  %4323 = load i8, i8* %4322, align 1
  %4324 = zext i8 %4323 to i32
  %4325 = load i8, i8* %4321, align 1
  %4326 = icmp eq i8 %4325, -1
  br i1 %4326, label %4327, label %4336

4327:                                             ; preds = %4320
  %4328 = icmp ugt i8 %4323, -113
  br i1 %4328, label %4329, label %4333

4329:                                             ; preds = %4327
  %4330 = add i32 %4318, 65280
  %4331 = load i32, i32* %32, align 4
  %4332 = add i32 %4331, 1
  store i32 %4332, i32* %32, align 4
  br label %4339

4333:                                             ; preds = %4327
  store i8* %4322, i8** %31, align 8
  %4334 = shl nuw nsw i32 %4324, 9
  %4335 = add i32 %4334, %4318
  br label %4339

4336:                                             ; preds = %4320
  store i8* %4322, i8** %31, align 8
  %4337 = shl nuw nsw i32 %4324, 8
  %4338 = add i32 %4337, %4318
  br label %4339

4339:                                             ; preds = %4336, %4333, %4329, %4315
  %4340 = phi i32 [ %4316, %4315 ], [ 8, %4329 ], [ 7, %4333 ], [ 8, %4336 ]
  %4341 = phi i32 [ %4318, %4315 ], [ %4330, %4329 ], [ %4335, %4333 ], [ %4338, %4336 ]
  %4342 = shl i32 %4317, 1
  %4343 = shl i32 %4341, 1
  %4344 = add i32 %4340, -1
  %4345 = icmp ult i32 %4342, 32768
  br i1 %4345, label %4315, label %4398

4346:                                             ; preds = %4287
  %4347 = shl i32 %4298, 16
  %4348 = sub i32 %4283, %4347
  %4349 = trunc i32 %4299 to i16
  %4350 = icmp sgt i16 %4349, -1
  br i1 %4350, label %4351, label %4395

4351:                                             ; preds = %4346
  %4352 = icmp ult i32 %4299, %4298
  %4353 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 1
  %4354 = load i32, i32* %4353, align 4
  %4355 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 2
  %4356 = icmp eq i32 %4354, 0
  %4357 = zext i1 %4356 to i32
  %4358 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 3
  %4359 = select i1 %4352, %struct.opj_mqc_state** %4358, %struct.opj_mqc_state** %4355
  %4360 = select i1 %4352, i32 %4357, i32 %4354
  %4361 = bitcast %struct.opj_mqc_state** %4359 to i64*
  %4362 = load i64, i64* %4361, align 8
  %4363 = bitcast %struct.opj_mqc_state** %4295 to i64*
  store i64 %4362, i64* %4363, align 8
  br label %4364

4364:                                             ; preds = %4388, %4351
  %4365 = phi i32 [ %4280, %4351 ], [ %4393, %4388 ]
  %4366 = phi i32 [ %4299, %4351 ], [ %4391, %4388 ]
  %4367 = phi i32 [ %4348, %4351 ], [ %4392, %4388 ]
  %4368 = icmp eq i32 %4365, 0
  br i1 %4368, label %4369, label %4388

4369:                                             ; preds = %4364
  %4370 = load i8*, i8** %31, align 8
  %4371 = getelementptr inbounds i8, i8* %4370, i64 1
  %4372 = load i8, i8* %4371, align 1
  %4373 = zext i8 %4372 to i32
  %4374 = load i8, i8* %4370, align 1
  %4375 = icmp eq i8 %4374, -1
  br i1 %4375, label %4376, label %4385

4376:                                             ; preds = %4369
  %4377 = icmp ugt i8 %4372, -113
  br i1 %4377, label %4378, label %4382

4378:                                             ; preds = %4376
  %4379 = add i32 %4367, 65280
  %4380 = load i32, i32* %32, align 4
  %4381 = add i32 %4380, 1
  store i32 %4381, i32* %32, align 4
  br label %4388

4382:                                             ; preds = %4376
  store i8* %4371, i8** %31, align 8
  %4383 = shl nuw nsw i32 %4373, 9
  %4384 = add i32 %4383, %4367
  br label %4388

4385:                                             ; preds = %4369
  store i8* %4371, i8** %31, align 8
  %4386 = shl nuw nsw i32 %4373, 8
  %4387 = add i32 %4386, %4367
  br label %4388

4388:                                             ; preds = %4385, %4382, %4378, %4364
  %4389 = phi i32 [ %4365, %4364 ], [ 8, %4378 ], [ 7, %4382 ], [ 8, %4385 ]
  %4390 = phi i32 [ %4367, %4364 ], [ %4379, %4378 ], [ %4384, %4382 ], [ %4387, %4385 ]
  %4391 = shl i32 %4366, 1
  %4392 = shl i32 %4390, 1
  %4393 = add i32 %4389, -1
  %4394 = icmp ult i32 %4391, 32768
  br i1 %4394, label %4364, label %4398

4395:                                             ; preds = %4346
  %4396 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4296, i64 0, i32 1
  %4397 = load i32, i32* %4396, align 4
  br label %4398

4398:                                             ; preds = %4388, %4339, %4395
  %4399 = phi i32 [ %4280, %4395 ], [ %4344, %4339 ], [ %4393, %4388 ]
  %4400 = phi i32 [ %4397, %4395 ], [ %4311, %4339 ], [ %4360, %4388 ]
  %4401 = phi i32 [ %4299, %4395 ], [ %4342, %4339 ], [ %4391, %4388 ]
  %4402 = phi i32 [ %4348, %4395 ], [ %4343, %4339 ], [ %4392, %4388 ]
  %4403 = icmp eq i32 %4400, 0
  br i1 %4403, label %4548, label %4404

4404:                                             ; preds = %4398
  %4405 = getelementptr inbounds i32, i32* %2444, i64 -1
  %4406 = load i32, i32* %4405, align 4
  %4407 = getelementptr inbounds i32, i32* %2444, i64 1
  %4408 = load i32, i32* %4407, align 4
  %4409 = and i32 %4288, 170
  %4410 = lshr i32 %4406, 25
  %4411 = and i32 %4410, 1
  %4412 = lshr i32 %4408, 23
  %4413 = and i32 %4412, 4
  %4414 = lshr i32 %4281, 18
  %4415 = and i32 %4414, 16
  %4416 = lshr i32 %4281, 22
  %4417 = and i32 %4416, 64
  %4418 = or i32 %4417, %4409
  %4419 = or i32 %4418, %4415
  %4420 = or i32 %4419, %4411
  %4421 = or i32 %4420, %4413
  %4422 = zext i32 %4421 to i64
  %4423 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %4422
  %4424 = load i8, i8* %4423, align 1
  %4425 = zext i8 %4424 to i64
  %4426 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4425
  %4427 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4426, align 8
  %4428 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 0
  %4429 = load i32, i32* %4428, align 8
  %4430 = sub i32 %4401, %4429
  %4431 = lshr i32 %4402, 16
  %4432 = icmp ult i32 %4431, %4429
  br i1 %4432, label %4433, label %4477

4433:                                             ; preds = %4404
  %4434 = icmp ult i32 %4430, %4429
  %4435 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 1
  %4436 = load i32, i32* %4435, align 4
  %4437 = icmp eq i32 %4436, 0
  %4438 = zext i1 %4437 to i32
  %4439 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 3
  %4440 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 2
  %4441 = select i1 %4434, %struct.opj_mqc_state** %4440, %struct.opj_mqc_state** %4439
  %4442 = select i1 %4434, i32 %4436, i32 %4438
  %4443 = bitcast %struct.opj_mqc_state** %4441 to i64*
  %4444 = load i64, i64* %4443, align 8
  %4445 = bitcast %struct.opj_mqc_state** %4426 to i64*
  store i64 %4444, i64* %4445, align 8
  br label %4446

4446:                                             ; preds = %4470, %4433
  %4447 = phi i32 [ %4399, %4433 ], [ %4475, %4470 ]
  %4448 = phi i32 [ %4429, %4433 ], [ %4473, %4470 ]
  %4449 = phi i32 [ %4402, %4433 ], [ %4474, %4470 ]
  %4450 = icmp eq i32 %4447, 0
  br i1 %4450, label %4451, label %4470

4451:                                             ; preds = %4446
  %4452 = load i8*, i8** %31, align 8
  %4453 = getelementptr inbounds i8, i8* %4452, i64 1
  %4454 = load i8, i8* %4453, align 1
  %4455 = zext i8 %4454 to i32
  %4456 = load i8, i8* %4452, align 1
  %4457 = icmp eq i8 %4456, -1
  br i1 %4457, label %4458, label %4467

4458:                                             ; preds = %4451
  %4459 = icmp ugt i8 %4454, -113
  br i1 %4459, label %4460, label %4464

4460:                                             ; preds = %4458
  %4461 = add i32 %4449, 65280
  %4462 = load i32, i32* %32, align 4
  %4463 = add i32 %4462, 1
  store i32 %4463, i32* %32, align 4
  br label %4470

4464:                                             ; preds = %4458
  store i8* %4453, i8** %31, align 8
  %4465 = shl nuw nsw i32 %4455, 9
  %4466 = add i32 %4465, %4449
  br label %4470

4467:                                             ; preds = %4451
  store i8* %4453, i8** %31, align 8
  %4468 = shl nuw nsw i32 %4455, 8
  %4469 = add i32 %4468, %4449
  br label %4470

4470:                                             ; preds = %4467, %4464, %4460, %4446
  %4471 = phi i32 [ %4447, %4446 ], [ 8, %4460 ], [ 7, %4464 ], [ 8, %4467 ]
  %4472 = phi i32 [ %4449, %4446 ], [ %4461, %4460 ], [ %4466, %4464 ], [ %4469, %4467 ]
  %4473 = shl i32 %4448, 1
  %4474 = shl i32 %4472, 1
  %4475 = add i32 %4471, -1
  %4476 = icmp ult i32 %4473, 32768
  br i1 %4476, label %4446, label %4529

4477:                                             ; preds = %4404
  %4478 = shl i32 %4429, 16
  %4479 = sub i32 %4402, %4478
  %4480 = trunc i32 %4430 to i16
  %4481 = icmp sgt i16 %4480, -1
  br i1 %4481, label %4482, label %4526

4482:                                             ; preds = %4477
  %4483 = icmp ult i32 %4430, %4429
  %4484 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 1
  %4485 = load i32, i32* %4484, align 4
  %4486 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 2
  %4487 = icmp eq i32 %4485, 0
  %4488 = zext i1 %4487 to i32
  %4489 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 3
  %4490 = select i1 %4483, %struct.opj_mqc_state** %4489, %struct.opj_mqc_state** %4486
  %4491 = select i1 %4483, i32 %4488, i32 %4485
  %4492 = bitcast %struct.opj_mqc_state** %4490 to i64*
  %4493 = load i64, i64* %4492, align 8
  %4494 = bitcast %struct.opj_mqc_state** %4426 to i64*
  store i64 %4493, i64* %4494, align 8
  br label %4495

4495:                                             ; preds = %4519, %4482
  %4496 = phi i32 [ %4399, %4482 ], [ %4524, %4519 ]
  %4497 = phi i32 [ %4430, %4482 ], [ %4522, %4519 ]
  %4498 = phi i32 [ %4479, %4482 ], [ %4523, %4519 ]
  %4499 = icmp eq i32 %4496, 0
  br i1 %4499, label %4500, label %4519

4500:                                             ; preds = %4495
  %4501 = load i8*, i8** %31, align 8
  %4502 = getelementptr inbounds i8, i8* %4501, i64 1
  %4503 = load i8, i8* %4502, align 1
  %4504 = zext i8 %4503 to i32
  %4505 = load i8, i8* %4501, align 1
  %4506 = icmp eq i8 %4505, -1
  br i1 %4506, label %4507, label %4516

4507:                                             ; preds = %4500
  %4508 = icmp ugt i8 %4503, -113
  br i1 %4508, label %4509, label %4513

4509:                                             ; preds = %4507
  %4510 = add i32 %4498, 65280
  %4511 = load i32, i32* %32, align 4
  %4512 = add i32 %4511, 1
  store i32 %4512, i32* %32, align 4
  br label %4519

4513:                                             ; preds = %4507
  store i8* %4502, i8** %31, align 8
  %4514 = shl nuw nsw i32 %4504, 9
  %4515 = add i32 %4514, %4498
  br label %4519

4516:                                             ; preds = %4500
  store i8* %4502, i8** %31, align 8
  %4517 = shl nuw nsw i32 %4504, 8
  %4518 = add i32 %4517, %4498
  br label %4519

4519:                                             ; preds = %4516, %4513, %4509, %4495
  %4520 = phi i32 [ %4496, %4495 ], [ 8, %4509 ], [ 7, %4513 ], [ 8, %4516 ]
  %4521 = phi i32 [ %4498, %4495 ], [ %4510, %4509 ], [ %4515, %4513 ], [ %4518, %4516 ]
  %4522 = shl i32 %4497, 1
  %4523 = shl i32 %4521, 1
  %4524 = add i32 %4520, -1
  %4525 = icmp ult i32 %4522, 32768
  br i1 %4525, label %4495, label %4529

4526:                                             ; preds = %4477
  %4527 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4427, i64 0, i32 1
  %4528 = load i32, i32* %4527, align 4
  br label %4529

4529:                                             ; preds = %4519, %4470, %4526
  %4530 = phi i32 [ %4399, %4526 ], [ %4475, %4470 ], [ %4524, %4519 ]
  %4531 = phi i32 [ %4528, %4526 ], [ %4442, %4470 ], [ %4491, %4519 ]
  %4532 = phi i32 [ %4430, %4526 ], [ %4473, %4470 ], [ %4522, %4519 ]
  %4533 = phi i32 [ %4479, %4526 ], [ %4474, %4470 ], [ %4523, %4519 ]
  %4534 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %4422
  %4535 = load i8, i8* %4534, align 1
  %4536 = zext i8 %4535 to i32
  %4537 = xor i32 %4531, %4536
  %4538 = icmp eq i32 %4537, 0
  %4539 = select i1 %4538, i32 %29, i32 %33
  %4540 = getelementptr inbounds i32, i32* %2443, i64 128
  store i32 %4539, i32* %4540, align 4
  %4541 = load i32, i32* %4405, align 4
  %4542 = or i32 %4541, 2048
  store i32 %4542, i32* %4405, align 4
  %4543 = shl i32 %4537, 25
  %4544 = or i32 %4281, %4543
  %4545 = or i32 %4544, 1024
  %4546 = load i32, i32* %4407, align 4
  %4547 = or i32 %4546, 512
  store i32 %4547, i32* %4407, align 4
  br label %4548

4548:                                             ; preds = %4529, %4398, %4279
  %4549 = phi i32 [ %4280, %4279 ], [ %4530, %4529 ], [ %4399, %4398 ]
  %4550 = phi i32 [ %4281, %4279 ], [ %4545, %4529 ], [ %4281, %4398 ]
  %4551 = phi i32 [ %4282, %4279 ], [ %4532, %4529 ], [ %4401, %4398 ]
  %4552 = phi i32 [ %4283, %4279 ], [ %4533, %4529 ], [ %4402, %4398 ]
  %4553 = phi %struct.opj_mqc_state** [ %4284, %4279 ], [ %4426, %4529 ], [ %4295, %4398 ]
  %4554 = and i32 %4550, 1073750016
  %4555 = icmp eq i32 %4554, 0
  br i1 %4555, label %4556, label %4828

4556:                                             ; preds = %4548
  %4557 = lshr i32 %4550, 9
  %4558 = load i8*, i8** %30, align 8
  %4559 = and i32 %4557, 495
  %4560 = zext i32 %4559 to i64
  %4561 = getelementptr inbounds i8, i8* %4558, i64 %4560
  %4562 = load i8, i8* %4561, align 1
  %4563 = zext i8 %4562 to i64
  %4564 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4563
  %4565 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4564, align 8
  %4566 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 0
  %4567 = load i32, i32* %4566, align 8
  %4568 = sub i32 %4551, %4567
  %4569 = lshr i32 %4552, 16
  %4570 = icmp ult i32 %4569, %4567
  br i1 %4570, label %4571, label %4615

4571:                                             ; preds = %4556
  %4572 = icmp ult i32 %4568, %4567
  %4573 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 1
  %4574 = load i32, i32* %4573, align 4
  %4575 = icmp eq i32 %4574, 0
  %4576 = zext i1 %4575 to i32
  %4577 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 3
  %4578 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 2
  %4579 = select i1 %4572, %struct.opj_mqc_state** %4578, %struct.opj_mqc_state** %4577
  %4580 = select i1 %4572, i32 %4574, i32 %4576
  %4581 = bitcast %struct.opj_mqc_state** %4579 to i64*
  %4582 = load i64, i64* %4581, align 8
  %4583 = bitcast %struct.opj_mqc_state** %4564 to i64*
  store i64 %4582, i64* %4583, align 8
  br label %4584

4584:                                             ; preds = %4608, %4571
  %4585 = phi i32 [ %4549, %4571 ], [ %4613, %4608 ]
  %4586 = phi i32 [ %4567, %4571 ], [ %4611, %4608 ]
  %4587 = phi i32 [ %4552, %4571 ], [ %4612, %4608 ]
  %4588 = icmp eq i32 %4585, 0
  br i1 %4588, label %4589, label %4608

4589:                                             ; preds = %4584
  %4590 = load i8*, i8** %31, align 8
  %4591 = getelementptr inbounds i8, i8* %4590, i64 1
  %4592 = load i8, i8* %4591, align 1
  %4593 = zext i8 %4592 to i32
  %4594 = load i8, i8* %4590, align 1
  %4595 = icmp eq i8 %4594, -1
  br i1 %4595, label %4596, label %4605

4596:                                             ; preds = %4589
  %4597 = icmp ugt i8 %4592, -113
  br i1 %4597, label %4598, label %4602

4598:                                             ; preds = %4596
  %4599 = add i32 %4587, 65280
  %4600 = load i32, i32* %32, align 4
  %4601 = add i32 %4600, 1
  store i32 %4601, i32* %32, align 4
  br label %4608

4602:                                             ; preds = %4596
  store i8* %4591, i8** %31, align 8
  %4603 = shl nuw nsw i32 %4593, 9
  %4604 = add i32 %4603, %4587
  br label %4608

4605:                                             ; preds = %4589
  store i8* %4591, i8** %31, align 8
  %4606 = shl nuw nsw i32 %4593, 8
  %4607 = add i32 %4606, %4587
  br label %4608

4608:                                             ; preds = %4605, %4602, %4598, %4584
  %4609 = phi i32 [ %4585, %4584 ], [ 8, %4598 ], [ 7, %4602 ], [ 8, %4605 ]
  %4610 = phi i32 [ %4587, %4584 ], [ %4599, %4598 ], [ %4604, %4602 ], [ %4607, %4605 ]
  %4611 = shl i32 %4586, 1
  %4612 = shl i32 %4610, 1
  %4613 = add i32 %4609, -1
  %4614 = icmp ult i32 %4611, 32768
  br i1 %4614, label %4584, label %4667

4615:                                             ; preds = %4556
  %4616 = shl i32 %4567, 16
  %4617 = sub i32 %4552, %4616
  %4618 = trunc i32 %4568 to i16
  %4619 = icmp sgt i16 %4618, -1
  br i1 %4619, label %4620, label %4664

4620:                                             ; preds = %4615
  %4621 = icmp ult i32 %4568, %4567
  %4622 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 1
  %4623 = load i32, i32* %4622, align 4
  %4624 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 2
  %4625 = icmp eq i32 %4623, 0
  %4626 = zext i1 %4625 to i32
  %4627 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 3
  %4628 = select i1 %4621, %struct.opj_mqc_state** %4627, %struct.opj_mqc_state** %4624
  %4629 = select i1 %4621, i32 %4626, i32 %4623
  %4630 = bitcast %struct.opj_mqc_state** %4628 to i64*
  %4631 = load i64, i64* %4630, align 8
  %4632 = bitcast %struct.opj_mqc_state** %4564 to i64*
  store i64 %4631, i64* %4632, align 8
  br label %4633

4633:                                             ; preds = %4657, %4620
  %4634 = phi i32 [ %4549, %4620 ], [ %4662, %4657 ]
  %4635 = phi i32 [ %4568, %4620 ], [ %4660, %4657 ]
  %4636 = phi i32 [ %4617, %4620 ], [ %4661, %4657 ]
  %4637 = icmp eq i32 %4634, 0
  br i1 %4637, label %4638, label %4657

4638:                                             ; preds = %4633
  %4639 = load i8*, i8** %31, align 8
  %4640 = getelementptr inbounds i8, i8* %4639, i64 1
  %4641 = load i8, i8* %4640, align 1
  %4642 = zext i8 %4641 to i32
  %4643 = load i8, i8* %4639, align 1
  %4644 = icmp eq i8 %4643, -1
  br i1 %4644, label %4645, label %4654

4645:                                             ; preds = %4638
  %4646 = icmp ugt i8 %4641, -113
  br i1 %4646, label %4647, label %4651

4647:                                             ; preds = %4645
  %4648 = add i32 %4636, 65280
  %4649 = load i32, i32* %32, align 4
  %4650 = add i32 %4649, 1
  store i32 %4650, i32* %32, align 4
  br label %4657

4651:                                             ; preds = %4645
  store i8* %4640, i8** %31, align 8
  %4652 = shl nuw nsw i32 %4642, 9
  %4653 = add i32 %4652, %4636
  br label %4657

4654:                                             ; preds = %4638
  store i8* %4640, i8** %31, align 8
  %4655 = shl nuw nsw i32 %4642, 8
  %4656 = add i32 %4655, %4636
  br label %4657

4657:                                             ; preds = %4654, %4651, %4647, %4633
  %4658 = phi i32 [ %4634, %4633 ], [ 8, %4647 ], [ 7, %4651 ], [ 8, %4654 ]
  %4659 = phi i32 [ %4636, %4633 ], [ %4648, %4647 ], [ %4653, %4651 ], [ %4656, %4654 ]
  %4660 = shl i32 %4635, 1
  %4661 = shl i32 %4659, 1
  %4662 = add i32 %4658, -1
  %4663 = icmp ult i32 %4660, 32768
  br i1 %4663, label %4633, label %4667

4664:                                             ; preds = %4615
  %4665 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4565, i64 0, i32 1
  %4666 = load i32, i32* %4665, align 4
  br label %4667

4667:                                             ; preds = %4657, %4608, %4664
  %4668 = phi i32 [ %4549, %4664 ], [ %4613, %4608 ], [ %4662, %4657 ]
  %4669 = phi i32 [ %4666, %4664 ], [ %4580, %4608 ], [ %4629, %4657 ]
  %4670 = phi i32 [ %4568, %4664 ], [ %4611, %4608 ], [ %4660, %4657 ]
  %4671 = phi i32 [ %4617, %4664 ], [ %4612, %4608 ], [ %4661, %4657 ]
  %4672 = icmp eq i32 %4669, 0
  br i1 %4672, label %4828, label %4673

4673:                                             ; preds = %4667
  %4674 = getelementptr inbounds i32, i32* %2444, i64 -1
  %4675 = load i32, i32* %4674, align 4
  %4676 = getelementptr inbounds i32, i32* %2444, i64 1
  %4677 = load i32, i32* %4676, align 4
  %4678 = and i32 %4557, 170
  %4679 = lshr i32 %4675, 28
  %4680 = and i32 %4679, 1
  %4681 = lshr i32 %4677, 26
  %4682 = and i32 %4681, 4
  %4683 = lshr i32 %4550, 21
  %4684 = and i32 %4683, 16
  %4685 = lshr i32 %4550, 25
  %4686 = and i32 %4685, 64
  %4687 = or i32 %4686, %4678
  %4688 = or i32 %4687, %4684
  %4689 = or i32 %4688, %4680
  %4690 = or i32 %4689, %4682
  %4691 = zext i32 %4690 to i64
  %4692 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %4691
  %4693 = load i8, i8* %4692, align 1
  %4694 = zext i8 %4693 to i64
  %4695 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %4694
  %4696 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4695, align 8
  %4697 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 0
  %4698 = load i32, i32* %4697, align 8
  %4699 = sub i32 %4670, %4698
  %4700 = lshr i32 %4671, 16
  %4701 = icmp ult i32 %4700, %4698
  br i1 %4701, label %4702, label %4746

4702:                                             ; preds = %4673
  %4703 = icmp ult i32 %4699, %4698
  %4704 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 1
  %4705 = load i32, i32* %4704, align 4
  %4706 = icmp eq i32 %4705, 0
  %4707 = zext i1 %4706 to i32
  %4708 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 3
  %4709 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 2
  %4710 = select i1 %4703, %struct.opj_mqc_state** %4709, %struct.opj_mqc_state** %4708
  %4711 = select i1 %4703, i32 %4705, i32 %4707
  %4712 = bitcast %struct.opj_mqc_state** %4710 to i64*
  %4713 = load i64, i64* %4712, align 8
  %4714 = bitcast %struct.opj_mqc_state** %4695 to i64*
  store i64 %4713, i64* %4714, align 8
  br label %4715

4715:                                             ; preds = %4739, %4702
  %4716 = phi i32 [ %4668, %4702 ], [ %4744, %4739 ]
  %4717 = phi i32 [ %4698, %4702 ], [ %4742, %4739 ]
  %4718 = phi i32 [ %4671, %4702 ], [ %4743, %4739 ]
  %4719 = icmp eq i32 %4716, 0
  br i1 %4719, label %4720, label %4739

4720:                                             ; preds = %4715
  %4721 = load i8*, i8** %31, align 8
  %4722 = getelementptr inbounds i8, i8* %4721, i64 1
  %4723 = load i8, i8* %4722, align 1
  %4724 = zext i8 %4723 to i32
  %4725 = load i8, i8* %4721, align 1
  %4726 = icmp eq i8 %4725, -1
  br i1 %4726, label %4727, label %4736

4727:                                             ; preds = %4720
  %4728 = icmp ugt i8 %4723, -113
  br i1 %4728, label %4729, label %4733

4729:                                             ; preds = %4727
  %4730 = add i32 %4718, 65280
  %4731 = load i32, i32* %32, align 4
  %4732 = add i32 %4731, 1
  store i32 %4732, i32* %32, align 4
  br label %4739

4733:                                             ; preds = %4727
  store i8* %4722, i8** %31, align 8
  %4734 = shl nuw nsw i32 %4724, 9
  %4735 = add i32 %4734, %4718
  br label %4739

4736:                                             ; preds = %4720
  store i8* %4722, i8** %31, align 8
  %4737 = shl nuw nsw i32 %4724, 8
  %4738 = add i32 %4737, %4718
  br label %4739

4739:                                             ; preds = %4736, %4733, %4729, %4715
  %4740 = phi i32 [ %4716, %4715 ], [ 8, %4729 ], [ 7, %4733 ], [ 8, %4736 ]
  %4741 = phi i32 [ %4718, %4715 ], [ %4730, %4729 ], [ %4735, %4733 ], [ %4738, %4736 ]
  %4742 = shl i32 %4717, 1
  %4743 = shl i32 %4741, 1
  %4744 = add i32 %4740, -1
  %4745 = icmp ult i32 %4742, 32768
  br i1 %4745, label %4715, label %4798

4746:                                             ; preds = %4673
  %4747 = shl i32 %4698, 16
  %4748 = sub i32 %4671, %4747
  %4749 = trunc i32 %4699 to i16
  %4750 = icmp sgt i16 %4749, -1
  br i1 %4750, label %4751, label %4795

4751:                                             ; preds = %4746
  %4752 = icmp ult i32 %4699, %4698
  %4753 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 1
  %4754 = load i32, i32* %4753, align 4
  %4755 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 2
  %4756 = icmp eq i32 %4754, 0
  %4757 = zext i1 %4756 to i32
  %4758 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 3
  %4759 = select i1 %4752, %struct.opj_mqc_state** %4758, %struct.opj_mqc_state** %4755
  %4760 = select i1 %4752, i32 %4757, i32 %4754
  %4761 = bitcast %struct.opj_mqc_state** %4759 to i64*
  %4762 = load i64, i64* %4761, align 8
  %4763 = bitcast %struct.opj_mqc_state** %4695 to i64*
  store i64 %4762, i64* %4763, align 8
  br label %4764

4764:                                             ; preds = %4788, %4751
  %4765 = phi i32 [ %4668, %4751 ], [ %4793, %4788 ]
  %4766 = phi i32 [ %4699, %4751 ], [ %4791, %4788 ]
  %4767 = phi i32 [ %4748, %4751 ], [ %4792, %4788 ]
  %4768 = icmp eq i32 %4765, 0
  br i1 %4768, label %4769, label %4788

4769:                                             ; preds = %4764
  %4770 = load i8*, i8** %31, align 8
  %4771 = getelementptr inbounds i8, i8* %4770, i64 1
  %4772 = load i8, i8* %4771, align 1
  %4773 = zext i8 %4772 to i32
  %4774 = load i8, i8* %4770, align 1
  %4775 = icmp eq i8 %4774, -1
  br i1 %4775, label %4776, label %4785

4776:                                             ; preds = %4769
  %4777 = icmp ugt i8 %4772, -113
  br i1 %4777, label %4778, label %4782

4778:                                             ; preds = %4776
  %4779 = add i32 %4767, 65280
  %4780 = load i32, i32* %32, align 4
  %4781 = add i32 %4780, 1
  store i32 %4781, i32* %32, align 4
  br label %4788

4782:                                             ; preds = %4776
  store i8* %4771, i8** %31, align 8
  %4783 = shl nuw nsw i32 %4773, 9
  %4784 = add i32 %4783, %4767
  br label %4788

4785:                                             ; preds = %4769
  store i8* %4771, i8** %31, align 8
  %4786 = shl nuw nsw i32 %4773, 8
  %4787 = add i32 %4786, %4767
  br label %4788

4788:                                             ; preds = %4785, %4782, %4778, %4764
  %4789 = phi i32 [ %4765, %4764 ], [ 8, %4778 ], [ 7, %4782 ], [ 8, %4785 ]
  %4790 = phi i32 [ %4767, %4764 ], [ %4779, %4778 ], [ %4784, %4782 ], [ %4787, %4785 ]
  %4791 = shl i32 %4766, 1
  %4792 = shl i32 %4790, 1
  %4793 = add i32 %4789, -1
  %4794 = icmp ult i32 %4791, 32768
  br i1 %4794, label %4764, label %4798

4795:                                             ; preds = %4746
  %4796 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4696, i64 0, i32 1
  %4797 = load i32, i32* %4796, align 4
  br label %4798

4798:                                             ; preds = %4788, %4739, %4795
  %4799 = phi i32 [ %4668, %4795 ], [ %4744, %4739 ], [ %4793, %4788 ]
  %4800 = phi i32 [ %4797, %4795 ], [ %4711, %4739 ], [ %4760, %4788 ]
  %4801 = phi i32 [ %4699, %4795 ], [ %4742, %4739 ], [ %4791, %4788 ]
  %4802 = phi i32 [ %4748, %4795 ], [ %4743, %4739 ], [ %4792, %4788 ]
  %4803 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %4691
  %4804 = load i8, i8* %4803, align 1
  %4805 = zext i8 %4804 to i32
  %4806 = xor i32 %4800, %4805
  %4807 = icmp eq i32 %4806, 0
  %4808 = select i1 %4807, i32 %29, i32 %33
  %4809 = getelementptr inbounds i32, i32* %2443, i64 192
  store i32 %4808, i32* %4809, align 4
  %4810 = load i32, i32* %4674, align 4
  %4811 = or i32 %4810, 16384
  store i32 %4811, i32* %4674, align 4
  %4812 = shl i32 %4806, 28
  %4813 = or i32 %4550, %4812
  %4814 = or i32 %4813, 8192
  %4815 = load i32, i32* %4676, align 4
  %4816 = or i32 %4815, 4096
  store i32 %4816, i32* %4676, align 4
  %4817 = getelementptr inbounds i32, i32* %2444, i64 66
  %4818 = shl i32 %4806, 18
  %4819 = load i32, i32* %4817, align 4
  %4820 = or i32 %4818, %4819
  %4821 = or i32 %4820, 2
  store i32 %4821, i32* %4817, align 4
  %4822 = getelementptr inbounds i32, i32* %2444, i64 65
  %4823 = load i32, i32* %4822, align 4
  %4824 = or i32 %4823, 4
  store i32 %4824, i32* %4822, align 4
  %4825 = getelementptr inbounds i32, i32* %2444, i64 67
  %4826 = load i32, i32* %4825, align 4
  %4827 = or i32 %4826, 1
  store i32 %4827, i32* %4825, align 4
  br label %4828

4828:                                             ; preds = %4798, %4667, %4548, %3707, %3571, %2772
  %4829 = phi i32 [ %4549, %4548 ], [ %4799, %4798 ], [ %4668, %4667 ], [ %3572, %3571 ], [ %3708, %3707 ], [ %2773, %2772 ]
  %4830 = phi i32 [ %4550, %4548 ], [ %4814, %4798 ], [ %4550, %4667 ], [ %3458, %3571 ], [ %3723, %3707 ], [ 0, %2772 ]
  %4831 = phi i32 [ %4551, %4548 ], [ %4801, %4798 ], [ %4670, %4667 ], [ %3574, %3571 ], [ %3710, %3707 ], [ %2775, %2772 ]
  %4832 = phi i32 [ %4552, %4548 ], [ %4802, %4798 ], [ %4671, %4667 ], [ %3575, %3571 ], [ %3711, %3707 ], [ %2776, %2772 ]
  %4833 = phi %struct.opj_mqc_state** [ %4553, %4548 ], [ %4695, %4798 ], [ %4564, %4667 ], [ %3468, %3571 ], [ %3604, %3707 ], [ %36, %2772 ]
  %4834 = and i32 %4830, -1226833921
  store i32 %4834, i32* %2444, align 4
  br label %4835

4835:                                             ; preds = %4828, %2554
  %4836 = phi i32 [ %4829, %4828 ], [ %2555, %2554 ]
  %4837 = phi i32 [ %4831, %4828 ], [ %2557, %2554 ]
  %4838 = phi i32 [ %4832, %4828 ], [ %2558, %2554 ]
  %4839 = phi %struct.opj_mqc_state** [ %4833, %4828 ], [ %34, %2554 ]
  %4840 = add nuw nsw i32 %2442, 1
  %4841 = getelementptr inbounds i32, i32* %2443, i64 1
  %4842 = getelementptr inbounds i32, i32* %2444, i64 1
  %4843 = icmp eq i32 %4840, 64
  br i1 %4843, label %4844, label %2441

4844:                                             ; preds = %4835
  %4845 = add nuw nsw i32 %2434, 4
  %4846 = getelementptr inbounds i32, i32* %2443, i64 193
  %4847 = getelementptr inbounds i32, i32* %2444, i64 3
  %4848 = icmp ult i32 %4845, 64
  br i1 %4848, label %2433, label %4849

4849:                                             ; preds = %4844
  store %struct.opj_mqc_state** %4839, %struct.opj_mqc_state*** %19, align 8
  store i32 %4838, i32* %21, align 8
  store i32 %4837, i32* %23, align 4
  store i32 %4836, i32* %25, align 8
  br label %9827

4850:                                             ; preds = %3
  %4851 = add i32 %5, 3
  %4852 = zext i32 %4851 to i64
  %4853 = getelementptr inbounds i32, i32* %16, i64 %4852
  %4854 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  %4855 = load %struct.opj_mqc_state**, %struct.opj_mqc_state*** %4854, align 8
  %4856 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %4857 = load i32, i32* %4856, align 8
  %4858 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %4859 = load i32, i32* %4858, align 4
  %4860 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %4861 = load i32, i32* %4860, align 8
  %4862 = shl i32 1, %1
  %4863 = ashr i32 %4862, 1
  %4864 = or i32 %4863, %4862
  %4865 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 4
  %4866 = icmp ugt i32 %8, 3
  br i1 %12, label %7332, label %4867

4867:                                             ; preds = %4850
  br i1 %4866, label %4868, label %7294

4868:                                             ; preds = %4867
  %4869 = icmp eq i32 %5, 0
  %4870 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %4871 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %4872 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %4873 = sub nsw i32 0, %4864
  %4874 = zext i32 %5 to i64
  %4875 = shl i32 %5, 1
  %4876 = zext i32 %4875 to i64
  %4877 = mul i32 %5, 3
  %4878 = zext i32 %4877 to i64
  %4879 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 17
  %4880 = bitcast %struct.opj_mqc_state** %4879 to i64*
  %4881 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 18
  %4882 = bitcast %struct.opj_mqc_state** %4881 to i64*
  br label %4883

4883:                                             ; preds = %7281, %4868
  %4884 = phi i32 [ %8, %4868 ], [ %7282, %7281 ]
  %4885 = phi i32 [ 0, %4868 ], [ %7289, %7281 ]
  %4886 = phi i32* [ %14, %4868 ], [ %7290, %7281 ]
  %4887 = phi i32* [ %4853, %4868 ], [ %7291, %7281 ]
  %4888 = phi i32 [ %4861, %4868 ], [ %7286, %7281 ]
  %4889 = phi i32 [ %4859, %4868 ], [ %7285, %7281 ]
  %4890 = phi i32 [ %4857, %4868 ], [ %7284, %7281 ]
  %4891 = phi %struct.opj_mqc_state** [ %4855, %4868 ], [ %7283, %7281 ]
  br i1 %4869, label %7281, label %4892

4892:                                             ; preds = %4883, %7270
  %4893 = phi i32 [ %7275, %7270 ], [ 0, %4883 ]
  %4894 = phi i32* [ %7276, %7270 ], [ %4886, %4883 ]
  %4895 = phi i32* [ %7277, %7270 ], [ %4887, %4883 ]
  %4896 = phi i32 [ %7274, %7270 ], [ %4888, %4883 ]
  %4897 = phi i32 [ %7273, %7270 ], [ %4889, %4883 ]
  %4898 = phi i32 [ %7272, %7270 ], [ %4890, %4883 ]
  %4899 = phi %struct.opj_mqc_state** [ %7271, %7270 ], [ %4891, %4883 ]
  %4900 = load i32, i32* %4895, align 4
  %4901 = icmp eq i32 %4900, 0
  br i1 %4901, label %4902, label %6180

4902:                                             ; preds = %4892
  %4903 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4879, align 8
  %4904 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 0
  %4905 = load i32, i32* %4904, align 8
  %4906 = sub i32 %4897, %4905
  %4907 = lshr i32 %4898, 16
  %4908 = icmp ult i32 %4907, %4905
  br i1 %4908, label %4909, label %4950

4909:                                             ; preds = %4902
  %4910 = icmp ult i32 %4906, %4905
  %4911 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 1
  %4912 = load i32, i32* %4911, align 4
  %4913 = icmp eq i32 %4912, 0
  %4914 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 3
  %4915 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 2
  %4916 = select i1 %4910, %struct.opj_mqc_state** %4915, %struct.opj_mqc_state** %4914
  %4917 = bitcast %struct.opj_mqc_state** %4916 to i64*
  %4918 = load i64, i64* %4917, align 8
  store i64 %4918, i64* %4880, align 8
  br label %4919

4919:                                             ; preds = %4943, %4909
  %4920 = phi i32 [ %4898, %4909 ], [ %4947, %4943 ]
  %4921 = phi i32 [ %4905, %4909 ], [ %4946, %4943 ]
  %4922 = phi i32 [ %4896, %4909 ], [ %4948, %4943 ]
  %4923 = icmp eq i32 %4922, 0
  br i1 %4923, label %4924, label %4943

4924:                                             ; preds = %4919
  %4925 = load i8*, i8** %4871, align 8
  %4926 = getelementptr inbounds i8, i8* %4925, i64 1
  %4927 = load i8, i8* %4926, align 1
  %4928 = zext i8 %4927 to i32
  %4929 = load i8, i8* %4925, align 1
  %4930 = icmp eq i8 %4929, -1
  br i1 %4930, label %4931, label %4940

4931:                                             ; preds = %4924
  %4932 = icmp ugt i8 %4927, -113
  br i1 %4932, label %4933, label %4937

4933:                                             ; preds = %4931
  %4934 = add i32 %4920, 65280
  %4935 = load i32, i32* %4872, align 4
  %4936 = add i32 %4935, 1
  store i32 %4936, i32* %4872, align 4
  br label %4943

4937:                                             ; preds = %4931
  store i8* %4926, i8** %4871, align 8
  %4938 = shl nuw nsw i32 %4928, 9
  %4939 = add i32 %4938, %4920
  br label %4943

4940:                                             ; preds = %4924
  store i8* %4926, i8** %4871, align 8
  %4941 = shl nuw nsw i32 %4928, 8
  %4942 = add i32 %4941, %4920
  br label %4943

4943:                                             ; preds = %4940, %4937, %4933, %4919
  %4944 = phi i32 [ %4920, %4919 ], [ %4934, %4933 ], [ %4939, %4937 ], [ %4942, %4940 ]
  %4945 = phi i32 [ %4922, %4919 ], [ 8, %4933 ], [ 7, %4937 ], [ 8, %4940 ]
  %4946 = shl i32 %4921, 1
  %4947 = shl i32 %4944, 1
  %4948 = add i32 %4945, -1
  %4949 = icmp ult i32 %4946, 32768
  br i1 %4949, label %4919, label %4999

4950:                                             ; preds = %4902
  %4951 = shl i32 %4905, 16
  %4952 = sub i32 %4898, %4951
  %4953 = trunc i32 %4906 to i16
  %4954 = icmp sgt i16 %4953, -1
  br i1 %4954, label %4955, label %4996

4955:                                             ; preds = %4950
  %4956 = icmp ult i32 %4906, %4905
  %4957 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 1
  %4958 = load i32, i32* %4957, align 4
  %4959 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 2
  %4960 = icmp eq i32 %4958, 0
  %4961 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 3
  %4962 = select i1 %4956, %struct.opj_mqc_state** %4961, %struct.opj_mqc_state** %4959
  %4963 = bitcast %struct.opj_mqc_state** %4962 to i64*
  %4964 = load i64, i64* %4963, align 8
  store i64 %4964, i64* %4880, align 8
  br label %4965

4965:                                             ; preds = %4989, %4955
  %4966 = phi i32 [ %4952, %4955 ], [ %4993, %4989 ]
  %4967 = phi i32 [ %4906, %4955 ], [ %4992, %4989 ]
  %4968 = phi i32 [ %4896, %4955 ], [ %4994, %4989 ]
  %4969 = icmp eq i32 %4968, 0
  br i1 %4969, label %4970, label %4989

4970:                                             ; preds = %4965
  %4971 = load i8*, i8** %4871, align 8
  %4972 = getelementptr inbounds i8, i8* %4971, i64 1
  %4973 = load i8, i8* %4972, align 1
  %4974 = zext i8 %4973 to i32
  %4975 = load i8, i8* %4971, align 1
  %4976 = icmp eq i8 %4975, -1
  br i1 %4976, label %4977, label %4986

4977:                                             ; preds = %4970
  %4978 = icmp ugt i8 %4973, -113
  br i1 %4978, label %4979, label %4983

4979:                                             ; preds = %4977
  %4980 = add i32 %4966, 65280
  %4981 = load i32, i32* %4872, align 4
  %4982 = add i32 %4981, 1
  store i32 %4982, i32* %4872, align 4
  br label %4989

4983:                                             ; preds = %4977
  store i8* %4972, i8** %4871, align 8
  %4984 = shl nuw nsw i32 %4974, 9
  %4985 = add i32 %4984, %4966
  br label %4989

4986:                                             ; preds = %4970
  store i8* %4972, i8** %4871, align 8
  %4987 = shl nuw nsw i32 %4974, 8
  %4988 = add i32 %4987, %4966
  br label %4989

4989:                                             ; preds = %4986, %4983, %4979, %4965
  %4990 = phi i32 [ %4966, %4965 ], [ %4980, %4979 ], [ %4985, %4983 ], [ %4988, %4986 ]
  %4991 = phi i32 [ %4968, %4965 ], [ 8, %4979 ], [ 7, %4983 ], [ 8, %4986 ]
  %4992 = shl i32 %4967, 1
  %4993 = shl i32 %4990, 1
  %4994 = add i32 %4991, -1
  %4995 = icmp ult i32 %4992, 32768
  br i1 %4995, label %4965, label %5002

4996:                                             ; preds = %4950
  %4997 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %4903, i64 0, i32 1
  %4998 = load i32, i32* %4997, align 4
  br label %5005

4999:                                             ; preds = %4943
  %5000 = zext i1 %4913 to i32
  %5001 = select i1 %4910, i32 %4912, i32 %5000
  br label %5005

5002:                                             ; preds = %4989
  %5003 = zext i1 %4960 to i32
  %5004 = select i1 %4956, i32 %5003, i32 %4958
  br label %5005

5005:                                             ; preds = %5002, %4999, %4996
  %5006 = phi i32 [ %4952, %4996 ], [ %4947, %4999 ], [ %4993, %5002 ]
  %5007 = phi i32 [ %4906, %4996 ], [ %4946, %4999 ], [ %4992, %5002 ]
  %5008 = phi i32 [ %4896, %4996 ], [ %4948, %4999 ], [ %4994, %5002 ]
  %5009 = phi i32 [ %4998, %4996 ], [ %5001, %4999 ], [ %5004, %5002 ]
  %5010 = icmp eq i32 %5009, 0
  br i1 %5010, label %7270, label %5011

5011:                                             ; preds = %5005
  %5012 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %4881, align 8
  %5013 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 0
  %5014 = load i32, i32* %5013, align 8
  %5015 = sub i32 %5007, %5014
  %5016 = lshr i32 %5006, 16
  %5017 = icmp ult i32 %5016, %5014
  br i1 %5017, label %5018, label %5059

5018:                                             ; preds = %5011
  %5019 = icmp ult i32 %5015, %5014
  %5020 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 1
  %5021 = load i32, i32* %5020, align 4
  %5022 = icmp eq i32 %5021, 0
  %5023 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 3
  %5024 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 2
  %5025 = select i1 %5019, %struct.opj_mqc_state** %5024, %struct.opj_mqc_state** %5023
  %5026 = bitcast %struct.opj_mqc_state** %5025 to i64*
  %5027 = load i64, i64* %5026, align 8
  store i64 %5027, i64* %4882, align 8
  br label %5028

5028:                                             ; preds = %5052, %5018
  %5029 = phi i32 [ %5006, %5018 ], [ %5056, %5052 ]
  %5030 = phi i32 [ %5014, %5018 ], [ %5055, %5052 ]
  %5031 = phi i32 [ %5008, %5018 ], [ %5057, %5052 ]
  %5032 = icmp eq i32 %5031, 0
  br i1 %5032, label %5033, label %5052

5033:                                             ; preds = %5028
  %5034 = load i8*, i8** %4871, align 8
  %5035 = getelementptr inbounds i8, i8* %5034, i64 1
  %5036 = load i8, i8* %5035, align 1
  %5037 = zext i8 %5036 to i32
  %5038 = load i8, i8* %5034, align 1
  %5039 = icmp eq i8 %5038, -1
  br i1 %5039, label %5040, label %5049

5040:                                             ; preds = %5033
  %5041 = icmp ugt i8 %5036, -113
  br i1 %5041, label %5042, label %5046

5042:                                             ; preds = %5040
  %5043 = add i32 %5029, 65280
  %5044 = load i32, i32* %4872, align 4
  %5045 = add i32 %5044, 1
  store i32 %5045, i32* %4872, align 4
  br label %5052

5046:                                             ; preds = %5040
  store i8* %5035, i8** %4871, align 8
  %5047 = shl nuw nsw i32 %5037, 9
  %5048 = add i32 %5047, %5029
  br label %5052

5049:                                             ; preds = %5033
  store i8* %5035, i8** %4871, align 8
  %5050 = shl nuw nsw i32 %5037, 8
  %5051 = add i32 %5050, %5029
  br label %5052

5052:                                             ; preds = %5049, %5046, %5042, %5028
  %5053 = phi i32 [ %5029, %5028 ], [ %5043, %5042 ], [ %5048, %5046 ], [ %5051, %5049 ]
  %5054 = phi i32 [ %5031, %5028 ], [ 8, %5042 ], [ 7, %5046 ], [ 8, %5049 ]
  %5055 = shl i32 %5030, 1
  %5056 = shl i32 %5053, 1
  %5057 = add i32 %5054, -1
  %5058 = icmp ult i32 %5055, 32768
  br i1 %5058, label %5028, label %5108

5059:                                             ; preds = %5011
  %5060 = shl i32 %5014, 16
  %5061 = sub i32 %5006, %5060
  %5062 = trunc i32 %5015 to i16
  %5063 = icmp sgt i16 %5062, -1
  br i1 %5063, label %5064, label %5105

5064:                                             ; preds = %5059
  %5065 = icmp ult i32 %5015, %5014
  %5066 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 1
  %5067 = load i32, i32* %5066, align 4
  %5068 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 2
  %5069 = icmp eq i32 %5067, 0
  %5070 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 3
  %5071 = select i1 %5065, %struct.opj_mqc_state** %5070, %struct.opj_mqc_state** %5068
  %5072 = bitcast %struct.opj_mqc_state** %5071 to i64*
  %5073 = load i64, i64* %5072, align 8
  store i64 %5073, i64* %4882, align 8
  br label %5074

5074:                                             ; preds = %5098, %5064
  %5075 = phi i32 [ %5061, %5064 ], [ %5102, %5098 ]
  %5076 = phi i32 [ %5015, %5064 ], [ %5101, %5098 ]
  %5077 = phi i32 [ %5008, %5064 ], [ %5103, %5098 ]
  %5078 = icmp eq i32 %5077, 0
  br i1 %5078, label %5079, label %5098

5079:                                             ; preds = %5074
  %5080 = load i8*, i8** %4871, align 8
  %5081 = getelementptr inbounds i8, i8* %5080, i64 1
  %5082 = load i8, i8* %5081, align 1
  %5083 = zext i8 %5082 to i32
  %5084 = load i8, i8* %5080, align 1
  %5085 = icmp eq i8 %5084, -1
  br i1 %5085, label %5086, label %5095

5086:                                             ; preds = %5079
  %5087 = icmp ugt i8 %5082, -113
  br i1 %5087, label %5088, label %5092

5088:                                             ; preds = %5086
  %5089 = add i32 %5075, 65280
  %5090 = load i32, i32* %4872, align 4
  %5091 = add i32 %5090, 1
  store i32 %5091, i32* %4872, align 4
  br label %5098

5092:                                             ; preds = %5086
  store i8* %5081, i8** %4871, align 8
  %5093 = shl nuw nsw i32 %5083, 9
  %5094 = add i32 %5093, %5075
  br label %5098

5095:                                             ; preds = %5079
  store i8* %5081, i8** %4871, align 8
  %5096 = shl nuw nsw i32 %5083, 8
  %5097 = add i32 %5096, %5075
  br label %5098

5098:                                             ; preds = %5095, %5092, %5088, %5074
  %5099 = phi i32 [ %5075, %5074 ], [ %5089, %5088 ], [ %5094, %5092 ], [ %5097, %5095 ]
  %5100 = phi i32 [ %5077, %5074 ], [ 8, %5088 ], [ 7, %5092 ], [ 8, %5095 ]
  %5101 = shl i32 %5076, 1
  %5102 = shl i32 %5099, 1
  %5103 = add i32 %5100, -1
  %5104 = icmp ult i32 %5101, 32768
  br i1 %5104, label %5074, label %5112

5105:                                             ; preds = %5059
  %5106 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5012, i64 0, i32 1
  %5107 = load i32, i32* %5106, align 4
  br label %5116

5108:                                             ; preds = %5052
  %5109 = zext i1 %5022 to i32
  %5110 = select i1 %5019, i32 %5021, i32 %5109
  %5111 = inttoptr i64 %5027 to %struct.opj_mqc_state*
  br label %5116

5112:                                             ; preds = %5098
  %5113 = zext i1 %5069 to i32
  %5114 = select i1 %5065, i32 %5113, i32 %5067
  %5115 = inttoptr i64 %5073 to %struct.opj_mqc_state*
  br label %5116

5116:                                             ; preds = %5112, %5108, %5105
  %5117 = phi %struct.opj_mqc_state* [ %5012, %5105 ], [ %5111, %5108 ], [ %5115, %5112 ]
  %5118 = phi i32 [ %5061, %5105 ], [ %5056, %5108 ], [ %5102, %5112 ]
  %5119 = phi i32 [ %5015, %5105 ], [ %5055, %5108 ], [ %5101, %5112 ]
  %5120 = phi i32 [ %5008, %5105 ], [ %5057, %5108 ], [ %5103, %5112 ]
  %5121 = phi i32 [ %5107, %5105 ], [ %5110, %5108 ], [ %5114, %5112 ]
  %5122 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 0
  %5123 = load i32, i32* %5122, align 8
  %5124 = sub i32 %5119, %5123
  %5125 = lshr i32 %5118, 16
  %5126 = icmp ult i32 %5125, %5123
  br i1 %5126, label %5127, label %5168

5127:                                             ; preds = %5116
  %5128 = icmp ult i32 %5124, %5123
  %5129 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 1
  %5130 = load i32, i32* %5129, align 4
  %5131 = icmp eq i32 %5130, 0
  %5132 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 3
  %5133 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 2
  %5134 = select i1 %5128, %struct.opj_mqc_state** %5133, %struct.opj_mqc_state** %5132
  %5135 = bitcast %struct.opj_mqc_state** %5134 to i64*
  %5136 = load i64, i64* %5135, align 8
  store i64 %5136, i64* %4882, align 8
  br label %5137

5137:                                             ; preds = %5161, %5127
  %5138 = phi i32 [ %5118, %5127 ], [ %5165, %5161 ]
  %5139 = phi i32 [ %5123, %5127 ], [ %5164, %5161 ]
  %5140 = phi i32 [ %5120, %5127 ], [ %5166, %5161 ]
  %5141 = icmp eq i32 %5140, 0
  br i1 %5141, label %5142, label %5161

5142:                                             ; preds = %5137
  %5143 = load i8*, i8** %4871, align 8
  %5144 = getelementptr inbounds i8, i8* %5143, i64 1
  %5145 = load i8, i8* %5144, align 1
  %5146 = zext i8 %5145 to i32
  %5147 = load i8, i8* %5143, align 1
  %5148 = icmp eq i8 %5147, -1
  br i1 %5148, label %5149, label %5158

5149:                                             ; preds = %5142
  %5150 = icmp ugt i8 %5145, -113
  br i1 %5150, label %5151, label %5155

5151:                                             ; preds = %5149
  %5152 = add i32 %5138, 65280
  %5153 = load i32, i32* %4872, align 4
  %5154 = add i32 %5153, 1
  store i32 %5154, i32* %4872, align 4
  br label %5161

5155:                                             ; preds = %5149
  store i8* %5144, i8** %4871, align 8
  %5156 = shl nuw nsw i32 %5146, 9
  %5157 = add i32 %5156, %5138
  br label %5161

5158:                                             ; preds = %5142
  store i8* %5144, i8** %4871, align 8
  %5159 = shl nuw nsw i32 %5146, 8
  %5160 = add i32 %5159, %5138
  br label %5161

5161:                                             ; preds = %5158, %5155, %5151, %5137
  %5162 = phi i32 [ %5138, %5137 ], [ %5152, %5151 ], [ %5157, %5155 ], [ %5160, %5158 ]
  %5163 = phi i32 [ %5140, %5137 ], [ 8, %5151 ], [ 7, %5155 ], [ 8, %5158 ]
  %5164 = shl i32 %5139, 1
  %5165 = shl i32 %5162, 1
  %5166 = add i32 %5163, -1
  %5167 = icmp ult i32 %5164, 32768
  br i1 %5167, label %5137, label %5217

5168:                                             ; preds = %5116
  %5169 = shl i32 %5123, 16
  %5170 = sub i32 %5118, %5169
  %5171 = trunc i32 %5124 to i16
  %5172 = icmp sgt i16 %5171, -1
  br i1 %5172, label %5173, label %5214

5173:                                             ; preds = %5168
  %5174 = icmp ult i32 %5124, %5123
  %5175 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 1
  %5176 = load i32, i32* %5175, align 4
  %5177 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 2
  %5178 = icmp eq i32 %5176, 0
  %5179 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 3
  %5180 = select i1 %5174, %struct.opj_mqc_state** %5179, %struct.opj_mqc_state** %5177
  %5181 = bitcast %struct.opj_mqc_state** %5180 to i64*
  %5182 = load i64, i64* %5181, align 8
  store i64 %5182, i64* %4882, align 8
  br label %5183

5183:                                             ; preds = %5207, %5173
  %5184 = phi i32 [ %5170, %5173 ], [ %5211, %5207 ]
  %5185 = phi i32 [ %5124, %5173 ], [ %5210, %5207 ]
  %5186 = phi i32 [ %5120, %5173 ], [ %5212, %5207 ]
  %5187 = icmp eq i32 %5186, 0
  br i1 %5187, label %5188, label %5207

5188:                                             ; preds = %5183
  %5189 = load i8*, i8** %4871, align 8
  %5190 = getelementptr inbounds i8, i8* %5189, i64 1
  %5191 = load i8, i8* %5190, align 1
  %5192 = zext i8 %5191 to i32
  %5193 = load i8, i8* %5189, align 1
  %5194 = icmp eq i8 %5193, -1
  br i1 %5194, label %5195, label %5204

5195:                                             ; preds = %5188
  %5196 = icmp ugt i8 %5191, -113
  br i1 %5196, label %5197, label %5201

5197:                                             ; preds = %5195
  %5198 = add i32 %5184, 65280
  %5199 = load i32, i32* %4872, align 4
  %5200 = add i32 %5199, 1
  store i32 %5200, i32* %4872, align 4
  br label %5207

5201:                                             ; preds = %5195
  store i8* %5190, i8** %4871, align 8
  %5202 = shl nuw nsw i32 %5192, 9
  %5203 = add i32 %5202, %5184
  br label %5207

5204:                                             ; preds = %5188
  store i8* %5190, i8** %4871, align 8
  %5205 = shl nuw nsw i32 %5192, 8
  %5206 = add i32 %5205, %5184
  br label %5207

5207:                                             ; preds = %5204, %5201, %5197, %5183
  %5208 = phi i32 [ %5184, %5183 ], [ %5198, %5197 ], [ %5203, %5201 ], [ %5206, %5204 ]
  %5209 = phi i32 [ %5186, %5183 ], [ 8, %5197 ], [ 7, %5201 ], [ 8, %5204 ]
  %5210 = shl i32 %5185, 1
  %5211 = shl i32 %5208, 1
  %5212 = add i32 %5209, -1
  %5213 = icmp ult i32 %5210, 32768
  br i1 %5213, label %5183, label %5220

5214:                                             ; preds = %5168
  %5215 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5117, i64 0, i32 1
  %5216 = load i32, i32* %5215, align 4
  br label %5223

5217:                                             ; preds = %5161
  %5218 = zext i1 %5131 to i32
  %5219 = select i1 %5128, i32 %5130, i32 %5218
  br label %5223

5220:                                             ; preds = %5207
  %5221 = zext i1 %5178 to i32
  %5222 = select i1 %5174, i32 %5221, i32 %5176
  br label %5223

5223:                                             ; preds = %5220, %5217, %5214
  %5224 = phi i32 [ %5170, %5214 ], [ %5165, %5217 ], [ %5211, %5220 ]
  %5225 = phi i32 [ %5124, %5214 ], [ %5164, %5217 ], [ %5210, %5220 ]
  %5226 = phi i32 [ %5120, %5214 ], [ %5166, %5217 ], [ %5212, %5220 ]
  %5227 = phi i32 [ %5216, %5214 ], [ %5219, %5217 ], [ %5222, %5220 ]
  %5228 = shl i32 %5121, 1
  %5229 = or i32 %5227, %5228
  switch i32 %5229, label %7263 [
    i32 0, label %5230
    i32 1, label %5477
    i32 2, label %5747
    i32 3, label %6017
  ]

5230:                                             ; preds = %5223
  %5231 = getelementptr inbounds i32, i32* %4895, i64 -1
  %5232 = load i32, i32* %5231, align 4
  %5233 = getelementptr inbounds i32, i32* %4895, i64 1
  %5234 = load i32, i32* %5233, align 4
  %5235 = lshr i32 %5232, 19
  %5236 = and i32 %5235, 1
  %5237 = lshr i32 %5234, 17
  %5238 = and i32 %5237, 4
  %5239 = or i32 %5238, %5236
  %5240 = zext i32 %5239 to i64
  %5241 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %5240
  %5242 = load i8, i8* %5241, align 1
  %5243 = zext i8 %5242 to i64
  %5244 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %5243
  %5245 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %5244, align 8
  %5246 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 0
  %5247 = load i32, i32* %5246, align 8
  %5248 = sub i32 %5225, %5247
  %5249 = lshr i32 %5224, 16
  %5250 = icmp ult i32 %5249, %5247
  br i1 %5250, label %5251, label %5295

5251:                                             ; preds = %5230
  %5252 = icmp ult i32 %5248, %5247
  %5253 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 1
  %5254 = load i32, i32* %5253, align 4
  %5255 = icmp eq i32 %5254, 0
  %5256 = zext i1 %5255 to i32
  %5257 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 3
  %5258 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 2
  %5259 = select i1 %5252, %struct.opj_mqc_state** %5258, %struct.opj_mqc_state** %5257
  %5260 = select i1 %5252, i32 %5254, i32 %5256
  %5261 = bitcast %struct.opj_mqc_state** %5259 to i64*
  %5262 = load i64, i64* %5261, align 8
  %5263 = bitcast %struct.opj_mqc_state** %5244 to i64*
  store i64 %5262, i64* %5263, align 8
  br label %5264

5264:                                             ; preds = %5288, %5251
  %5265 = phi i32 [ %5224, %5251 ], [ %5292, %5288 ]
  %5266 = phi i32 [ %5247, %5251 ], [ %5291, %5288 ]
  %5267 = phi i32 [ %5226, %5251 ], [ %5293, %5288 ]
  %5268 = icmp eq i32 %5267, 0
  br i1 %5268, label %5269, label %5288

5269:                                             ; preds = %5264
  %5270 = load i8*, i8** %4871, align 8
  %5271 = getelementptr inbounds i8, i8* %5270, i64 1
  %5272 = load i8, i8* %5271, align 1
  %5273 = zext i8 %5272 to i32
  %5274 = load i8, i8* %5270, align 1
  %5275 = icmp eq i8 %5274, -1
  br i1 %5275, label %5276, label %5285

5276:                                             ; preds = %5269
  %5277 = icmp ugt i8 %5272, -113
  br i1 %5277, label %5278, label %5282

5278:                                             ; preds = %5276
  %5279 = add i32 %5265, 65280
  %5280 = load i32, i32* %4872, align 4
  %5281 = add i32 %5280, 1
  store i32 %5281, i32* %4872, align 4
  br label %5288

5282:                                             ; preds = %5276
  store i8* %5271, i8** %4871, align 8
  %5283 = shl nuw nsw i32 %5273, 9
  %5284 = add i32 %5283, %5265
  br label %5288

5285:                                             ; preds = %5269
  store i8* %5271, i8** %4871, align 8
  %5286 = shl nuw nsw i32 %5273, 8
  %5287 = add i32 %5286, %5265
  br label %5288

5288:                                             ; preds = %5285, %5282, %5278, %5264
  %5289 = phi i32 [ %5265, %5264 ], [ %5279, %5278 ], [ %5284, %5282 ], [ %5287, %5285 ]
  %5290 = phi i32 [ %5267, %5264 ], [ 8, %5278 ], [ 7, %5282 ], [ 8, %5285 ]
  %5291 = shl i32 %5266, 1
  %5292 = shl i32 %5289, 1
  %5293 = add i32 %5290, -1
  %5294 = icmp ult i32 %5291, 32768
  br i1 %5294, label %5264, label %5347

5295:                                             ; preds = %5230
  %5296 = shl i32 %5247, 16
  %5297 = sub i32 %5224, %5296
  %5298 = trunc i32 %5248 to i16
  %5299 = icmp sgt i16 %5298, -1
  br i1 %5299, label %5300, label %5344

5300:                                             ; preds = %5295
  %5301 = icmp ult i32 %5248, %5247
  %5302 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 1
  %5303 = load i32, i32* %5302, align 4
  %5304 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 2
  %5305 = icmp eq i32 %5303, 0
  %5306 = zext i1 %5305 to i32
  %5307 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 3
  %5308 = select i1 %5301, %struct.opj_mqc_state** %5307, %struct.opj_mqc_state** %5304
  %5309 = select i1 %5301, i32 %5306, i32 %5303
  %5310 = bitcast %struct.opj_mqc_state** %5308 to i64*
  %5311 = load i64, i64* %5310, align 8
  %5312 = bitcast %struct.opj_mqc_state** %5244 to i64*
  store i64 %5311, i64* %5312, align 8
  br label %5313

5313:                                             ; preds = %5337, %5300
  %5314 = phi i32 [ %5297, %5300 ], [ %5341, %5337 ]
  %5315 = phi i32 [ %5248, %5300 ], [ %5340, %5337 ]
  %5316 = phi i32 [ %5226, %5300 ], [ %5342, %5337 ]
  %5317 = icmp eq i32 %5316, 0
  br i1 %5317, label %5318, label %5337

5318:                                             ; preds = %5313
  %5319 = load i8*, i8** %4871, align 8
  %5320 = getelementptr inbounds i8, i8* %5319, i64 1
  %5321 = load i8, i8* %5320, align 1
  %5322 = zext i8 %5321 to i32
  %5323 = load i8, i8* %5319, align 1
  %5324 = icmp eq i8 %5323, -1
  br i1 %5324, label %5325, label %5334

5325:                                             ; preds = %5318
  %5326 = icmp ugt i8 %5321, -113
  br i1 %5326, label %5327, label %5331

5327:                                             ; preds = %5325
  %5328 = add i32 %5314, 65280
  %5329 = load i32, i32* %4872, align 4
  %5330 = add i32 %5329, 1
  store i32 %5330, i32* %4872, align 4
  br label %5337

5331:                                             ; preds = %5325
  store i8* %5320, i8** %4871, align 8
  %5332 = shl nuw nsw i32 %5322, 9
  %5333 = add i32 %5332, %5314
  br label %5337

5334:                                             ; preds = %5318
  store i8* %5320, i8** %4871, align 8
  %5335 = shl nuw nsw i32 %5322, 8
  %5336 = add i32 %5335, %5314
  br label %5337

5337:                                             ; preds = %5334, %5331, %5327, %5313
  %5338 = phi i32 [ %5314, %5313 ], [ %5328, %5327 ], [ %5333, %5331 ], [ %5336, %5334 ]
  %5339 = phi i32 [ %5316, %5313 ], [ 8, %5327 ], [ 7, %5331 ], [ 8, %5334 ]
  %5340 = shl i32 %5315, 1
  %5341 = shl i32 %5338, 1
  %5342 = add i32 %5339, -1
  %5343 = icmp ult i32 %5340, 32768
  br i1 %5343, label %5313, label %5347

5344:                                             ; preds = %5295
  %5345 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5245, i64 0, i32 1
  %5346 = load i32, i32* %5345, align 4
  br label %5347

5347:                                             ; preds = %5337, %5288, %5344
  %5348 = phi i32 [ %5297, %5344 ], [ %5292, %5288 ], [ %5341, %5337 ]
  %5349 = phi i32 [ %5248, %5344 ], [ %5291, %5288 ], [ %5340, %5337 ]
  %5350 = phi i32 [ %5226, %5344 ], [ %5293, %5288 ], [ %5342, %5337 ]
  %5351 = phi i32 [ %5346, %5344 ], [ %5260, %5288 ], [ %5309, %5337 ]
  %5352 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %5240
  %5353 = load i8, i8* %5352, align 1
  %5354 = zext i8 %5353 to i32
  %5355 = xor i32 %5351, %5354
  %5356 = icmp eq i32 %5355, 0
  %5357 = select i1 %5356, i32 %4864, i32 %4873
  store i32 %5357, i32* %4894, align 4
  %5358 = load i32, i32* %5231, align 4
  %5359 = or i32 %5358, 32
  store i32 %5359, i32* %5231, align 4
  %5360 = shl i32 %5355, 19
  %5361 = or i32 %5360, 16
  %5362 = load i32, i32* %5233, align 4
  %5363 = or i32 %5362, 8
  store i32 %5363, i32* %5233, align 4
  %5364 = load i8*, i8** %4870, align 8
  %5365 = getelementptr inbounds i8, i8* %5364, i64 2
  %5366 = load i8, i8* %5365, align 1
  %5367 = zext i8 %5366 to i64
  %5368 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %5367
  %5369 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %5368, align 8
  %5370 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 0
  %5371 = load i32, i32* %5370, align 8
  %5372 = sub i32 %5349, %5371
  %5373 = lshr i32 %5348, 16
  %5374 = icmp ult i32 %5373, %5371
  br i1 %5374, label %5375, label %5419

5375:                                             ; preds = %5347
  %5376 = icmp ult i32 %5372, %5371
  %5377 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 1
  %5378 = load i32, i32* %5377, align 4
  %5379 = icmp eq i32 %5378, 0
  %5380 = zext i1 %5379 to i32
  %5381 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 3
  %5382 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 2
  %5383 = select i1 %5376, %struct.opj_mqc_state** %5382, %struct.opj_mqc_state** %5381
  %5384 = select i1 %5376, i32 %5378, i32 %5380
  %5385 = bitcast %struct.opj_mqc_state** %5383 to i64*
  %5386 = load i64, i64* %5385, align 8
  %5387 = bitcast %struct.opj_mqc_state** %5368 to i64*
  store i64 %5386, i64* %5387, align 8
  br label %5388

5388:                                             ; preds = %5412, %5375
  %5389 = phi i32 [ %5348, %5375 ], [ %5416, %5412 ]
  %5390 = phi i32 [ %5371, %5375 ], [ %5415, %5412 ]
  %5391 = phi i32 [ %5350, %5375 ], [ %5417, %5412 ]
  %5392 = icmp eq i32 %5391, 0
  br i1 %5392, label %5393, label %5412

5393:                                             ; preds = %5388
  %5394 = load i8*, i8** %4871, align 8
  %5395 = getelementptr inbounds i8, i8* %5394, i64 1
  %5396 = load i8, i8* %5395, align 1
  %5397 = zext i8 %5396 to i32
  %5398 = load i8, i8* %5394, align 1
  %5399 = icmp eq i8 %5398, -1
  br i1 %5399, label %5400, label %5409

5400:                                             ; preds = %5393
  %5401 = icmp ugt i8 %5396, -113
  br i1 %5401, label %5402, label %5406

5402:                                             ; preds = %5400
  %5403 = add i32 %5389, 65280
  %5404 = load i32, i32* %4872, align 4
  %5405 = add i32 %5404, 1
  store i32 %5405, i32* %4872, align 4
  br label %5412

5406:                                             ; preds = %5400
  store i8* %5395, i8** %4871, align 8
  %5407 = shl nuw nsw i32 %5397, 9
  %5408 = add i32 %5407, %5389
  br label %5412

5409:                                             ; preds = %5393
  store i8* %5395, i8** %4871, align 8
  %5410 = shl nuw nsw i32 %5397, 8
  %5411 = add i32 %5410, %5389
  br label %5412

5412:                                             ; preds = %5409, %5406, %5402, %5388
  %5413 = phi i32 [ %5389, %5388 ], [ %5403, %5402 ], [ %5408, %5406 ], [ %5411, %5409 ]
  %5414 = phi i32 [ %5391, %5388 ], [ 8, %5402 ], [ 7, %5406 ], [ 8, %5409 ]
  %5415 = shl i32 %5390, 1
  %5416 = shl i32 %5413, 1
  %5417 = add i32 %5414, -1
  %5418 = icmp ult i32 %5415, 32768
  br i1 %5418, label %5388, label %5471

5419:                                             ; preds = %5347
  %5420 = shl i32 %5371, 16
  %5421 = sub i32 %5348, %5420
  %5422 = trunc i32 %5372 to i16
  %5423 = icmp sgt i16 %5422, -1
  br i1 %5423, label %5424, label %5468

5424:                                             ; preds = %5419
  %5425 = icmp ult i32 %5372, %5371
  %5426 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 1
  %5427 = load i32, i32* %5426, align 4
  %5428 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 2
  %5429 = icmp eq i32 %5427, 0
  %5430 = zext i1 %5429 to i32
  %5431 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 3
  %5432 = select i1 %5425, %struct.opj_mqc_state** %5431, %struct.opj_mqc_state** %5428
  %5433 = select i1 %5425, i32 %5430, i32 %5427
  %5434 = bitcast %struct.opj_mqc_state** %5432 to i64*
  %5435 = load i64, i64* %5434, align 8
  %5436 = bitcast %struct.opj_mqc_state** %5368 to i64*
  store i64 %5435, i64* %5436, align 8
  br label %5437

5437:                                             ; preds = %5461, %5424
  %5438 = phi i32 [ %5421, %5424 ], [ %5465, %5461 ]
  %5439 = phi i32 [ %5372, %5424 ], [ %5464, %5461 ]
  %5440 = phi i32 [ %5350, %5424 ], [ %5466, %5461 ]
  %5441 = icmp eq i32 %5440, 0
  br i1 %5441, label %5442, label %5461

5442:                                             ; preds = %5437
  %5443 = load i8*, i8** %4871, align 8
  %5444 = getelementptr inbounds i8, i8* %5443, i64 1
  %5445 = load i8, i8* %5444, align 1
  %5446 = zext i8 %5445 to i32
  %5447 = load i8, i8* %5443, align 1
  %5448 = icmp eq i8 %5447, -1
  br i1 %5448, label %5449, label %5458

5449:                                             ; preds = %5442
  %5450 = icmp ugt i8 %5445, -113
  br i1 %5450, label %5451, label %5455

5451:                                             ; preds = %5449
  %5452 = add i32 %5438, 65280
  %5453 = load i32, i32* %4872, align 4
  %5454 = add i32 %5453, 1
  store i32 %5454, i32* %4872, align 4
  br label %5461

5455:                                             ; preds = %5449
  store i8* %5444, i8** %4871, align 8
  %5456 = shl nuw nsw i32 %5446, 9
  %5457 = add i32 %5456, %5438
  br label %5461

5458:                                             ; preds = %5442
  store i8* %5444, i8** %4871, align 8
  %5459 = shl nuw nsw i32 %5446, 8
  %5460 = add i32 %5459, %5438
  br label %5461

5461:                                             ; preds = %5458, %5455, %5451, %5437
  %5462 = phi i32 [ %5438, %5437 ], [ %5452, %5451 ], [ %5457, %5455 ], [ %5460, %5458 ]
  %5463 = phi i32 [ %5440, %5437 ], [ 8, %5451 ], [ 7, %5455 ], [ 8, %5458 ]
  %5464 = shl i32 %5439, 1
  %5465 = shl i32 %5462, 1
  %5466 = add i32 %5463, -1
  %5467 = icmp ult i32 %5464, 32768
  br i1 %5467, label %5437, label %5471

5468:                                             ; preds = %5419
  %5469 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5369, i64 0, i32 1
  %5470 = load i32, i32* %5469, align 4
  br label %5471

5471:                                             ; preds = %5461, %5412, %5468
  %5472 = phi i32 [ %5421, %5468 ], [ %5416, %5412 ], [ %5465, %5461 ]
  %5473 = phi i32 [ %5372, %5468 ], [ %5415, %5412 ], [ %5464, %5461 ]
  %5474 = phi i32 [ %5350, %5468 ], [ %5417, %5412 ], [ %5466, %5461 ]
  %5475 = phi i32 [ %5470, %5468 ], [ %5384, %5412 ], [ %5433, %5461 ]
  %5476 = icmp eq i32 %5475, 0
  br i1 %5476, label %5626, label %5477

5477:                                             ; preds = %5471, %5223
  %5478 = phi i32 [ %5361, %5471 ], [ 0, %5223 ]
  %5479 = phi i32 [ %5472, %5471 ], [ %5224, %5223 ]
  %5480 = phi i32 [ %5473, %5471 ], [ %5225, %5223 ]
  %5481 = phi i32 [ %5474, %5471 ], [ %5226, %5223 ]
  %5482 = getelementptr inbounds i32, i32* %4895, i64 -1
  %5483 = load i32, i32* %5482, align 4
  %5484 = getelementptr inbounds i32, i32* %4895, i64 1
  %5485 = load i32, i32* %5484, align 4
  %5486 = lshr i32 %5478, 3
  %5487 = and i32 %5486, 170
  %5488 = lshr i32 %5483, 22
  %5489 = and i32 %5488, 1
  %5490 = lshr i32 %5485, 20
  %5491 = and i32 %5490, 4
  %5492 = lshr i32 %5478, 15
  %5493 = and i32 %5492, 16
  %5494 = lshr i32 %5478, 19
  %5495 = and i32 %5494, 64
  %5496 = or i32 %5495, %5487
  %5497 = or i32 %5496, %5493
  %5498 = or i32 %5497, %5489
  %5499 = or i32 %5498, %5491
  %5500 = zext i32 %5499 to i64
  %5501 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %5500
  %5502 = load i8, i8* %5501, align 1
  %5503 = zext i8 %5502 to i64
  %5504 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %5503
  %5505 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %5504, align 8
  %5506 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 0
  %5507 = load i32, i32* %5506, align 8
  %5508 = sub i32 %5480, %5507
  %5509 = lshr i32 %5479, 16
  %5510 = icmp ult i32 %5509, %5507
  br i1 %5510, label %5511, label %5555

5511:                                             ; preds = %5477
  %5512 = icmp ult i32 %5508, %5507
  %5513 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 1
  %5514 = load i32, i32* %5513, align 4
  %5515 = icmp eq i32 %5514, 0
  %5516 = zext i1 %5515 to i32
  %5517 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 3
  %5518 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 2
  %5519 = select i1 %5512, %struct.opj_mqc_state** %5518, %struct.opj_mqc_state** %5517
  %5520 = select i1 %5512, i32 %5514, i32 %5516
  %5521 = bitcast %struct.opj_mqc_state** %5519 to i64*
  %5522 = load i64, i64* %5521, align 8
  %5523 = bitcast %struct.opj_mqc_state** %5504 to i64*
  store i64 %5522, i64* %5523, align 8
  br label %5524

5524:                                             ; preds = %5548, %5511
  %5525 = phi i32 [ %5479, %5511 ], [ %5552, %5548 ]
  %5526 = phi i32 [ %5507, %5511 ], [ %5551, %5548 ]
  %5527 = phi i32 [ %5481, %5511 ], [ %5553, %5548 ]
  %5528 = icmp eq i32 %5527, 0
  br i1 %5528, label %5529, label %5548

5529:                                             ; preds = %5524
  %5530 = load i8*, i8** %4871, align 8
  %5531 = getelementptr inbounds i8, i8* %5530, i64 1
  %5532 = load i8, i8* %5531, align 1
  %5533 = zext i8 %5532 to i32
  %5534 = load i8, i8* %5530, align 1
  %5535 = icmp eq i8 %5534, -1
  br i1 %5535, label %5536, label %5545

5536:                                             ; preds = %5529
  %5537 = icmp ugt i8 %5532, -113
  br i1 %5537, label %5538, label %5542

5538:                                             ; preds = %5536
  %5539 = add i32 %5525, 65280
  %5540 = load i32, i32* %4872, align 4
  %5541 = add i32 %5540, 1
  store i32 %5541, i32* %4872, align 4
  br label %5548

5542:                                             ; preds = %5536
  store i8* %5531, i8** %4871, align 8
  %5543 = shl nuw nsw i32 %5533, 9
  %5544 = add i32 %5543, %5525
  br label %5548

5545:                                             ; preds = %5529
  store i8* %5531, i8** %4871, align 8
  %5546 = shl nuw nsw i32 %5533, 8
  %5547 = add i32 %5546, %5525
  br label %5548

5548:                                             ; preds = %5545, %5542, %5538, %5524
  %5549 = phi i32 [ %5525, %5524 ], [ %5539, %5538 ], [ %5544, %5542 ], [ %5547, %5545 ]
  %5550 = phi i32 [ %5527, %5524 ], [ 8, %5538 ], [ 7, %5542 ], [ 8, %5545 ]
  %5551 = shl i32 %5526, 1
  %5552 = shl i32 %5549, 1
  %5553 = add i32 %5550, -1
  %5554 = icmp ult i32 %5551, 32768
  br i1 %5554, label %5524, label %5607

5555:                                             ; preds = %5477
  %5556 = shl i32 %5507, 16
  %5557 = sub i32 %5479, %5556
  %5558 = trunc i32 %5508 to i16
  %5559 = icmp sgt i16 %5558, -1
  br i1 %5559, label %5560, label %5604

5560:                                             ; preds = %5555
  %5561 = icmp ult i32 %5508, %5507
  %5562 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 1
  %5563 = load i32, i32* %5562, align 4
  %5564 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 2
  %5565 = icmp eq i32 %5563, 0
  %5566 = zext i1 %5565 to i32
  %5567 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 3
  %5568 = select i1 %5561, %struct.opj_mqc_state** %5567, %struct.opj_mqc_state** %5564
  %5569 = select i1 %5561, i32 %5566, i32 %5563
  %5570 = bitcast %struct.opj_mqc_state** %5568 to i64*
  %5571 = load i64, i64* %5570, align 8
  %5572 = bitcast %struct.opj_mqc_state** %5504 to i64*
  store i64 %5571, i64* %5572, align 8
  br label %5573

5573:                                             ; preds = %5597, %5560
  %5574 = phi i32 [ %5557, %5560 ], [ %5601, %5597 ]
  %5575 = phi i32 [ %5508, %5560 ], [ %5600, %5597 ]
  %5576 = phi i32 [ %5481, %5560 ], [ %5602, %5597 ]
  %5577 = icmp eq i32 %5576, 0
  br i1 %5577, label %5578, label %5597

5578:                                             ; preds = %5573
  %5579 = load i8*, i8** %4871, align 8
  %5580 = getelementptr inbounds i8, i8* %5579, i64 1
  %5581 = load i8, i8* %5580, align 1
  %5582 = zext i8 %5581 to i32
  %5583 = load i8, i8* %5579, align 1
  %5584 = icmp eq i8 %5583, -1
  br i1 %5584, label %5585, label %5594

5585:                                             ; preds = %5578
  %5586 = icmp ugt i8 %5581, -113
  br i1 %5586, label %5587, label %5591

5587:                                             ; preds = %5585
  %5588 = add i32 %5574, 65280
  %5589 = load i32, i32* %4872, align 4
  %5590 = add i32 %5589, 1
  store i32 %5590, i32* %4872, align 4
  br label %5597

5591:                                             ; preds = %5585
  store i8* %5580, i8** %4871, align 8
  %5592 = shl nuw nsw i32 %5582, 9
  %5593 = add i32 %5592, %5574
  br label %5597

5594:                                             ; preds = %5578
  store i8* %5580, i8** %4871, align 8
  %5595 = shl nuw nsw i32 %5582, 8
  %5596 = add i32 %5595, %5574
  br label %5597

5597:                                             ; preds = %5594, %5591, %5587, %5573
  %5598 = phi i32 [ %5574, %5573 ], [ %5588, %5587 ], [ %5593, %5591 ], [ %5596, %5594 ]
  %5599 = phi i32 [ %5576, %5573 ], [ 8, %5587 ], [ 7, %5591 ], [ 8, %5594 ]
  %5600 = shl i32 %5575, 1
  %5601 = shl i32 %5598, 1
  %5602 = add i32 %5599, -1
  %5603 = icmp ult i32 %5600, 32768
  br i1 %5603, label %5573, label %5607

5604:                                             ; preds = %5555
  %5605 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5505, i64 0, i32 1
  %5606 = load i32, i32* %5605, align 4
  br label %5607

5607:                                             ; preds = %5597, %5548, %5604
  %5608 = phi i32 [ %5557, %5604 ], [ %5552, %5548 ], [ %5601, %5597 ]
  %5609 = phi i32 [ %5508, %5604 ], [ %5551, %5548 ], [ %5600, %5597 ]
  %5610 = phi i32 [ %5481, %5604 ], [ %5553, %5548 ], [ %5602, %5597 ]
  %5611 = phi i32 [ %5606, %5604 ], [ %5520, %5548 ], [ %5569, %5597 ]
  %5612 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %5500
  %5613 = load i8, i8* %5612, align 1
  %5614 = zext i8 %5613 to i32
  %5615 = xor i32 %5611, %5614
  %5616 = icmp eq i32 %5615, 0
  %5617 = select i1 %5616, i32 %4864, i32 %4873
  %5618 = getelementptr inbounds i32, i32* %4894, i64 %4874
  store i32 %5617, i32* %5618, align 4
  %5619 = load i32, i32* %5482, align 4
  %5620 = or i32 %5619, 256
  store i32 %5620, i32* %5482, align 4
  %5621 = shl i32 %5615, 22
  %5622 = or i32 %5478, %5621
  %5623 = or i32 %5622, 128
  %5624 = load i32, i32* %5484, align 4
  %5625 = or i32 %5624, 64
  store i32 %5625, i32* %5484, align 4
  br label %5626

5626:                                             ; preds = %5607, %5471
  %5627 = phi i32 [ %5472, %5471 ], [ %5608, %5607 ]
  %5628 = phi i32 [ %5473, %5471 ], [ %5609, %5607 ]
  %5629 = phi i32 [ %5474, %5471 ], [ %5610, %5607 ]
  %5630 = phi i32 [ %5361, %5471 ], [ %5623, %5607 ]
  %5631 = lshr i32 %5630, 6
  %5632 = load i8*, i8** %4870, align 8
  %5633 = and i32 %5631, 495
  %5634 = zext i32 %5633 to i64
  %5635 = getelementptr inbounds i8, i8* %5632, i64 %5634
  %5636 = load i8, i8* %5635, align 1
  %5637 = zext i8 %5636 to i64
  %5638 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %5637
  %5639 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %5638, align 8
  %5640 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 0
  %5641 = load i32, i32* %5640, align 8
  %5642 = sub i32 %5628, %5641
  %5643 = lshr i32 %5627, 16
  %5644 = icmp ult i32 %5643, %5641
  br i1 %5644, label %5645, label %5689

5645:                                             ; preds = %5626
  %5646 = icmp ult i32 %5642, %5641
  %5647 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 1
  %5648 = load i32, i32* %5647, align 4
  %5649 = icmp eq i32 %5648, 0
  %5650 = zext i1 %5649 to i32
  %5651 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 3
  %5652 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 2
  %5653 = select i1 %5646, %struct.opj_mqc_state** %5652, %struct.opj_mqc_state** %5651
  %5654 = select i1 %5646, i32 %5648, i32 %5650
  %5655 = bitcast %struct.opj_mqc_state** %5653 to i64*
  %5656 = load i64, i64* %5655, align 8
  %5657 = bitcast %struct.opj_mqc_state** %5638 to i64*
  store i64 %5656, i64* %5657, align 8
  br label %5658

5658:                                             ; preds = %5682, %5645
  %5659 = phi i32 [ %5627, %5645 ], [ %5686, %5682 ]
  %5660 = phi i32 [ %5641, %5645 ], [ %5685, %5682 ]
  %5661 = phi i32 [ %5629, %5645 ], [ %5687, %5682 ]
  %5662 = icmp eq i32 %5661, 0
  br i1 %5662, label %5663, label %5682

5663:                                             ; preds = %5658
  %5664 = load i8*, i8** %4871, align 8
  %5665 = getelementptr inbounds i8, i8* %5664, i64 1
  %5666 = load i8, i8* %5665, align 1
  %5667 = zext i8 %5666 to i32
  %5668 = load i8, i8* %5664, align 1
  %5669 = icmp eq i8 %5668, -1
  br i1 %5669, label %5670, label %5679

5670:                                             ; preds = %5663
  %5671 = icmp ugt i8 %5666, -113
  br i1 %5671, label %5672, label %5676

5672:                                             ; preds = %5670
  %5673 = add i32 %5659, 65280
  %5674 = load i32, i32* %4872, align 4
  %5675 = add i32 %5674, 1
  store i32 %5675, i32* %4872, align 4
  br label %5682

5676:                                             ; preds = %5670
  store i8* %5665, i8** %4871, align 8
  %5677 = shl nuw nsw i32 %5667, 9
  %5678 = add i32 %5677, %5659
  br label %5682

5679:                                             ; preds = %5663
  store i8* %5665, i8** %4871, align 8
  %5680 = shl nuw nsw i32 %5667, 8
  %5681 = add i32 %5680, %5659
  br label %5682

5682:                                             ; preds = %5679, %5676, %5672, %5658
  %5683 = phi i32 [ %5659, %5658 ], [ %5673, %5672 ], [ %5678, %5676 ], [ %5681, %5679 ]
  %5684 = phi i32 [ %5661, %5658 ], [ 8, %5672 ], [ 7, %5676 ], [ 8, %5679 ]
  %5685 = shl i32 %5660, 1
  %5686 = shl i32 %5683, 1
  %5687 = add i32 %5684, -1
  %5688 = icmp ult i32 %5685, 32768
  br i1 %5688, label %5658, label %5741

5689:                                             ; preds = %5626
  %5690 = shl i32 %5641, 16
  %5691 = sub i32 %5627, %5690
  %5692 = trunc i32 %5642 to i16
  %5693 = icmp sgt i16 %5692, -1
  br i1 %5693, label %5694, label %5738

5694:                                             ; preds = %5689
  %5695 = icmp ult i32 %5642, %5641
  %5696 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 1
  %5697 = load i32, i32* %5696, align 4
  %5698 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 2
  %5699 = icmp eq i32 %5697, 0
  %5700 = zext i1 %5699 to i32
  %5701 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 3
  %5702 = select i1 %5695, %struct.opj_mqc_state** %5701, %struct.opj_mqc_state** %5698
  %5703 = select i1 %5695, i32 %5700, i32 %5697
  %5704 = bitcast %struct.opj_mqc_state** %5702 to i64*
  %5705 = load i64, i64* %5704, align 8
  %5706 = bitcast %struct.opj_mqc_state** %5638 to i64*
  store i64 %5705, i64* %5706, align 8
  br label %5707

5707:                                             ; preds = %5731, %5694
  %5708 = phi i32 [ %5691, %5694 ], [ %5735, %5731 ]
  %5709 = phi i32 [ %5642, %5694 ], [ %5734, %5731 ]
  %5710 = phi i32 [ %5629, %5694 ], [ %5736, %5731 ]
  %5711 = icmp eq i32 %5710, 0
  br i1 %5711, label %5712, label %5731

5712:                                             ; preds = %5707
  %5713 = load i8*, i8** %4871, align 8
  %5714 = getelementptr inbounds i8, i8* %5713, i64 1
  %5715 = load i8, i8* %5714, align 1
  %5716 = zext i8 %5715 to i32
  %5717 = load i8, i8* %5713, align 1
  %5718 = icmp eq i8 %5717, -1
  br i1 %5718, label %5719, label %5728

5719:                                             ; preds = %5712
  %5720 = icmp ugt i8 %5715, -113
  br i1 %5720, label %5721, label %5725

5721:                                             ; preds = %5719
  %5722 = add i32 %5708, 65280
  %5723 = load i32, i32* %4872, align 4
  %5724 = add i32 %5723, 1
  store i32 %5724, i32* %4872, align 4
  br label %5731

5725:                                             ; preds = %5719
  store i8* %5714, i8** %4871, align 8
  %5726 = shl nuw nsw i32 %5716, 9
  %5727 = add i32 %5726, %5708
  br label %5731

5728:                                             ; preds = %5712
  store i8* %5714, i8** %4871, align 8
  %5729 = shl nuw nsw i32 %5716, 8
  %5730 = add i32 %5729, %5708
  br label %5731

5731:                                             ; preds = %5728, %5725, %5721, %5707
  %5732 = phi i32 [ %5708, %5707 ], [ %5722, %5721 ], [ %5727, %5725 ], [ %5730, %5728 ]
  %5733 = phi i32 [ %5710, %5707 ], [ 8, %5721 ], [ 7, %5725 ], [ 8, %5728 ]
  %5734 = shl i32 %5709, 1
  %5735 = shl i32 %5732, 1
  %5736 = add i32 %5733, -1
  %5737 = icmp ult i32 %5734, 32768
  br i1 %5737, label %5707, label %5741

5738:                                             ; preds = %5689
  %5739 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5639, i64 0, i32 1
  %5740 = load i32, i32* %5739, align 4
  br label %5741

5741:                                             ; preds = %5731, %5682, %5738
  %5742 = phi i32 [ %5691, %5738 ], [ %5686, %5682 ], [ %5735, %5731 ]
  %5743 = phi i32 [ %5642, %5738 ], [ %5685, %5682 ], [ %5734, %5731 ]
  %5744 = phi i32 [ %5629, %5738 ], [ %5687, %5682 ], [ %5736, %5731 ]
  %5745 = phi i32 [ %5740, %5738 ], [ %5654, %5682 ], [ %5703, %5731 ]
  %5746 = icmp eq i32 %5745, 0
  br i1 %5746, label %5896, label %5747

5747:                                             ; preds = %5223, %5741
  %5748 = phi i32 [ %5630, %5741 ], [ 0, %5223 ]
  %5749 = phi i32 [ %5742, %5741 ], [ %5224, %5223 ]
  %5750 = phi i32 [ %5743, %5741 ], [ %5225, %5223 ]
  %5751 = phi i32 [ %5744, %5741 ], [ %5226, %5223 ]
  %5752 = getelementptr inbounds i32, i32* %4895, i64 -1
  %5753 = load i32, i32* %5752, align 4
  %5754 = getelementptr inbounds i32, i32* %4895, i64 1
  %5755 = load i32, i32* %5754, align 4
  %5756 = lshr i32 %5748, 6
  %5757 = and i32 %5756, 170
  %5758 = lshr i32 %5753, 25
  %5759 = and i32 %5758, 1
  %5760 = lshr i32 %5755, 23
  %5761 = and i32 %5760, 4
  %5762 = lshr i32 %5748, 18
  %5763 = and i32 %5762, 16
  %5764 = lshr i32 %5748, 22
  %5765 = and i32 %5764, 64
  %5766 = or i32 %5765, %5757
  %5767 = or i32 %5766, %5763
  %5768 = or i32 %5767, %5759
  %5769 = or i32 %5768, %5761
  %5770 = zext i32 %5769 to i64
  %5771 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %5770
  %5772 = load i8, i8* %5771, align 1
  %5773 = zext i8 %5772 to i64
  %5774 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %5773
  %5775 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %5774, align 8
  %5776 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 0
  %5777 = load i32, i32* %5776, align 8
  %5778 = sub i32 %5750, %5777
  %5779 = lshr i32 %5749, 16
  %5780 = icmp ult i32 %5779, %5777
  br i1 %5780, label %5781, label %5825

5781:                                             ; preds = %5747
  %5782 = icmp ult i32 %5778, %5777
  %5783 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 1
  %5784 = load i32, i32* %5783, align 4
  %5785 = icmp eq i32 %5784, 0
  %5786 = zext i1 %5785 to i32
  %5787 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 3
  %5788 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 2
  %5789 = select i1 %5782, %struct.opj_mqc_state** %5788, %struct.opj_mqc_state** %5787
  %5790 = select i1 %5782, i32 %5784, i32 %5786
  %5791 = bitcast %struct.opj_mqc_state** %5789 to i64*
  %5792 = load i64, i64* %5791, align 8
  %5793 = bitcast %struct.opj_mqc_state** %5774 to i64*
  store i64 %5792, i64* %5793, align 8
  br label %5794

5794:                                             ; preds = %5818, %5781
  %5795 = phi i32 [ %5749, %5781 ], [ %5822, %5818 ]
  %5796 = phi i32 [ %5777, %5781 ], [ %5821, %5818 ]
  %5797 = phi i32 [ %5751, %5781 ], [ %5823, %5818 ]
  %5798 = icmp eq i32 %5797, 0
  br i1 %5798, label %5799, label %5818

5799:                                             ; preds = %5794
  %5800 = load i8*, i8** %4871, align 8
  %5801 = getelementptr inbounds i8, i8* %5800, i64 1
  %5802 = load i8, i8* %5801, align 1
  %5803 = zext i8 %5802 to i32
  %5804 = load i8, i8* %5800, align 1
  %5805 = icmp eq i8 %5804, -1
  br i1 %5805, label %5806, label %5815

5806:                                             ; preds = %5799
  %5807 = icmp ugt i8 %5802, -113
  br i1 %5807, label %5808, label %5812

5808:                                             ; preds = %5806
  %5809 = add i32 %5795, 65280
  %5810 = load i32, i32* %4872, align 4
  %5811 = add i32 %5810, 1
  store i32 %5811, i32* %4872, align 4
  br label %5818

5812:                                             ; preds = %5806
  store i8* %5801, i8** %4871, align 8
  %5813 = shl nuw nsw i32 %5803, 9
  %5814 = add i32 %5813, %5795
  br label %5818

5815:                                             ; preds = %5799
  store i8* %5801, i8** %4871, align 8
  %5816 = shl nuw nsw i32 %5803, 8
  %5817 = add i32 %5816, %5795
  br label %5818

5818:                                             ; preds = %5815, %5812, %5808, %5794
  %5819 = phi i32 [ %5795, %5794 ], [ %5809, %5808 ], [ %5814, %5812 ], [ %5817, %5815 ]
  %5820 = phi i32 [ %5797, %5794 ], [ 8, %5808 ], [ 7, %5812 ], [ 8, %5815 ]
  %5821 = shl i32 %5796, 1
  %5822 = shl i32 %5819, 1
  %5823 = add i32 %5820, -1
  %5824 = icmp ult i32 %5821, 32768
  br i1 %5824, label %5794, label %5877

5825:                                             ; preds = %5747
  %5826 = shl i32 %5777, 16
  %5827 = sub i32 %5749, %5826
  %5828 = trunc i32 %5778 to i16
  %5829 = icmp sgt i16 %5828, -1
  br i1 %5829, label %5830, label %5874

5830:                                             ; preds = %5825
  %5831 = icmp ult i32 %5778, %5777
  %5832 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 1
  %5833 = load i32, i32* %5832, align 4
  %5834 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 2
  %5835 = icmp eq i32 %5833, 0
  %5836 = zext i1 %5835 to i32
  %5837 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 3
  %5838 = select i1 %5831, %struct.opj_mqc_state** %5837, %struct.opj_mqc_state** %5834
  %5839 = select i1 %5831, i32 %5836, i32 %5833
  %5840 = bitcast %struct.opj_mqc_state** %5838 to i64*
  %5841 = load i64, i64* %5840, align 8
  %5842 = bitcast %struct.opj_mqc_state** %5774 to i64*
  store i64 %5841, i64* %5842, align 8
  br label %5843

5843:                                             ; preds = %5867, %5830
  %5844 = phi i32 [ %5827, %5830 ], [ %5871, %5867 ]
  %5845 = phi i32 [ %5778, %5830 ], [ %5870, %5867 ]
  %5846 = phi i32 [ %5751, %5830 ], [ %5872, %5867 ]
  %5847 = icmp eq i32 %5846, 0
  br i1 %5847, label %5848, label %5867

5848:                                             ; preds = %5843
  %5849 = load i8*, i8** %4871, align 8
  %5850 = getelementptr inbounds i8, i8* %5849, i64 1
  %5851 = load i8, i8* %5850, align 1
  %5852 = zext i8 %5851 to i32
  %5853 = load i8, i8* %5849, align 1
  %5854 = icmp eq i8 %5853, -1
  br i1 %5854, label %5855, label %5864

5855:                                             ; preds = %5848
  %5856 = icmp ugt i8 %5851, -113
  br i1 %5856, label %5857, label %5861

5857:                                             ; preds = %5855
  %5858 = add i32 %5844, 65280
  %5859 = load i32, i32* %4872, align 4
  %5860 = add i32 %5859, 1
  store i32 %5860, i32* %4872, align 4
  br label %5867

5861:                                             ; preds = %5855
  store i8* %5850, i8** %4871, align 8
  %5862 = shl nuw nsw i32 %5852, 9
  %5863 = add i32 %5862, %5844
  br label %5867

5864:                                             ; preds = %5848
  store i8* %5850, i8** %4871, align 8
  %5865 = shl nuw nsw i32 %5852, 8
  %5866 = add i32 %5865, %5844
  br label %5867

5867:                                             ; preds = %5864, %5861, %5857, %5843
  %5868 = phi i32 [ %5844, %5843 ], [ %5858, %5857 ], [ %5863, %5861 ], [ %5866, %5864 ]
  %5869 = phi i32 [ %5846, %5843 ], [ 8, %5857 ], [ 7, %5861 ], [ 8, %5864 ]
  %5870 = shl i32 %5845, 1
  %5871 = shl i32 %5868, 1
  %5872 = add i32 %5869, -1
  %5873 = icmp ult i32 %5870, 32768
  br i1 %5873, label %5843, label %5877

5874:                                             ; preds = %5825
  %5875 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5775, i64 0, i32 1
  %5876 = load i32, i32* %5875, align 4
  br label %5877

5877:                                             ; preds = %5867, %5818, %5874
  %5878 = phi i32 [ %5827, %5874 ], [ %5822, %5818 ], [ %5871, %5867 ]
  %5879 = phi i32 [ %5778, %5874 ], [ %5821, %5818 ], [ %5870, %5867 ]
  %5880 = phi i32 [ %5751, %5874 ], [ %5823, %5818 ], [ %5872, %5867 ]
  %5881 = phi i32 [ %5876, %5874 ], [ %5790, %5818 ], [ %5839, %5867 ]
  %5882 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %5770
  %5883 = load i8, i8* %5882, align 1
  %5884 = zext i8 %5883 to i32
  %5885 = xor i32 %5881, %5884
  %5886 = icmp eq i32 %5885, 0
  %5887 = select i1 %5886, i32 %4864, i32 %4873
  %5888 = getelementptr inbounds i32, i32* %4894, i64 %4876
  store i32 %5887, i32* %5888, align 4
  %5889 = load i32, i32* %5752, align 4
  %5890 = or i32 %5889, 2048
  store i32 %5890, i32* %5752, align 4
  %5891 = shl i32 %5885, 25
  %5892 = or i32 %5748, %5891
  %5893 = or i32 %5892, 1024
  %5894 = load i32, i32* %5754, align 4
  %5895 = or i32 %5894, 512
  store i32 %5895, i32* %5754, align 4
  br label %5896

5896:                                             ; preds = %5877, %5741
  %5897 = phi i32 [ %5742, %5741 ], [ %5878, %5877 ]
  %5898 = phi i32 [ %5743, %5741 ], [ %5879, %5877 ]
  %5899 = phi i32 [ %5744, %5741 ], [ %5880, %5877 ]
  %5900 = phi i32 [ %5630, %5741 ], [ %5893, %5877 ]
  %5901 = lshr i32 %5900, 9
  %5902 = load i8*, i8** %4870, align 8
  %5903 = and i32 %5901, 495
  %5904 = zext i32 %5903 to i64
  %5905 = getelementptr inbounds i8, i8* %5902, i64 %5904
  %5906 = load i8, i8* %5905, align 1
  %5907 = zext i8 %5906 to i64
  %5908 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %5907
  %5909 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %5908, align 8
  %5910 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 0
  %5911 = load i32, i32* %5910, align 8
  %5912 = sub i32 %5898, %5911
  %5913 = lshr i32 %5897, 16
  %5914 = icmp ult i32 %5913, %5911
  br i1 %5914, label %5915, label %5959

5915:                                             ; preds = %5896
  %5916 = icmp ult i32 %5912, %5911
  %5917 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 1
  %5918 = load i32, i32* %5917, align 4
  %5919 = icmp eq i32 %5918, 0
  %5920 = zext i1 %5919 to i32
  %5921 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 3
  %5922 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 2
  %5923 = select i1 %5916, %struct.opj_mqc_state** %5922, %struct.opj_mqc_state** %5921
  %5924 = select i1 %5916, i32 %5918, i32 %5920
  %5925 = bitcast %struct.opj_mqc_state** %5923 to i64*
  %5926 = load i64, i64* %5925, align 8
  %5927 = bitcast %struct.opj_mqc_state** %5908 to i64*
  store i64 %5926, i64* %5927, align 8
  br label %5928

5928:                                             ; preds = %5952, %5915
  %5929 = phi i32 [ %5897, %5915 ], [ %5956, %5952 ]
  %5930 = phi i32 [ %5911, %5915 ], [ %5955, %5952 ]
  %5931 = phi i32 [ %5899, %5915 ], [ %5957, %5952 ]
  %5932 = icmp eq i32 %5931, 0
  br i1 %5932, label %5933, label %5952

5933:                                             ; preds = %5928
  %5934 = load i8*, i8** %4871, align 8
  %5935 = getelementptr inbounds i8, i8* %5934, i64 1
  %5936 = load i8, i8* %5935, align 1
  %5937 = zext i8 %5936 to i32
  %5938 = load i8, i8* %5934, align 1
  %5939 = icmp eq i8 %5938, -1
  br i1 %5939, label %5940, label %5949

5940:                                             ; preds = %5933
  %5941 = icmp ugt i8 %5936, -113
  br i1 %5941, label %5942, label %5946

5942:                                             ; preds = %5940
  %5943 = add i32 %5929, 65280
  %5944 = load i32, i32* %4872, align 4
  %5945 = add i32 %5944, 1
  store i32 %5945, i32* %4872, align 4
  br label %5952

5946:                                             ; preds = %5940
  store i8* %5935, i8** %4871, align 8
  %5947 = shl nuw nsw i32 %5937, 9
  %5948 = add i32 %5947, %5929
  br label %5952

5949:                                             ; preds = %5933
  store i8* %5935, i8** %4871, align 8
  %5950 = shl nuw nsw i32 %5937, 8
  %5951 = add i32 %5950, %5929
  br label %5952

5952:                                             ; preds = %5949, %5946, %5942, %5928
  %5953 = phi i32 [ %5929, %5928 ], [ %5943, %5942 ], [ %5948, %5946 ], [ %5951, %5949 ]
  %5954 = phi i32 [ %5931, %5928 ], [ 8, %5942 ], [ 7, %5946 ], [ 8, %5949 ]
  %5955 = shl i32 %5930, 1
  %5956 = shl i32 %5953, 1
  %5957 = add i32 %5954, -1
  %5958 = icmp ult i32 %5955, 32768
  br i1 %5958, label %5928, label %6011

5959:                                             ; preds = %5896
  %5960 = shl i32 %5911, 16
  %5961 = sub i32 %5897, %5960
  %5962 = trunc i32 %5912 to i16
  %5963 = icmp sgt i16 %5962, -1
  br i1 %5963, label %5964, label %6008

5964:                                             ; preds = %5959
  %5965 = icmp ult i32 %5912, %5911
  %5966 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 1
  %5967 = load i32, i32* %5966, align 4
  %5968 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 2
  %5969 = icmp eq i32 %5967, 0
  %5970 = zext i1 %5969 to i32
  %5971 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 3
  %5972 = select i1 %5965, %struct.opj_mqc_state** %5971, %struct.opj_mqc_state** %5968
  %5973 = select i1 %5965, i32 %5970, i32 %5967
  %5974 = bitcast %struct.opj_mqc_state** %5972 to i64*
  %5975 = load i64, i64* %5974, align 8
  %5976 = bitcast %struct.opj_mqc_state** %5908 to i64*
  store i64 %5975, i64* %5976, align 8
  br label %5977

5977:                                             ; preds = %6001, %5964
  %5978 = phi i32 [ %5961, %5964 ], [ %6005, %6001 ]
  %5979 = phi i32 [ %5912, %5964 ], [ %6004, %6001 ]
  %5980 = phi i32 [ %5899, %5964 ], [ %6006, %6001 ]
  %5981 = icmp eq i32 %5980, 0
  br i1 %5981, label %5982, label %6001

5982:                                             ; preds = %5977
  %5983 = load i8*, i8** %4871, align 8
  %5984 = getelementptr inbounds i8, i8* %5983, i64 1
  %5985 = load i8, i8* %5984, align 1
  %5986 = zext i8 %5985 to i32
  %5987 = load i8, i8* %5983, align 1
  %5988 = icmp eq i8 %5987, -1
  br i1 %5988, label %5989, label %5998

5989:                                             ; preds = %5982
  %5990 = icmp ugt i8 %5985, -113
  br i1 %5990, label %5991, label %5995

5991:                                             ; preds = %5989
  %5992 = add i32 %5978, 65280
  %5993 = load i32, i32* %4872, align 4
  %5994 = add i32 %5993, 1
  store i32 %5994, i32* %4872, align 4
  br label %6001

5995:                                             ; preds = %5989
  store i8* %5984, i8** %4871, align 8
  %5996 = shl nuw nsw i32 %5986, 9
  %5997 = add i32 %5996, %5978
  br label %6001

5998:                                             ; preds = %5982
  store i8* %5984, i8** %4871, align 8
  %5999 = shl nuw nsw i32 %5986, 8
  %6000 = add i32 %5999, %5978
  br label %6001

6001:                                             ; preds = %5998, %5995, %5991, %5977
  %6002 = phi i32 [ %5978, %5977 ], [ %5992, %5991 ], [ %5997, %5995 ], [ %6000, %5998 ]
  %6003 = phi i32 [ %5980, %5977 ], [ 8, %5991 ], [ 7, %5995 ], [ 8, %5998 ]
  %6004 = shl i32 %5979, 1
  %6005 = shl i32 %6002, 1
  %6006 = add i32 %6003, -1
  %6007 = icmp ult i32 %6004, 32768
  br i1 %6007, label %5977, label %6011

6008:                                             ; preds = %5959
  %6009 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %5909, i64 0, i32 1
  %6010 = load i32, i32* %6009, align 4
  br label %6011

6011:                                             ; preds = %6001, %5952, %6008
  %6012 = phi i32 [ %5961, %6008 ], [ %5956, %5952 ], [ %6005, %6001 ]
  %6013 = phi i32 [ %5912, %6008 ], [ %5955, %5952 ], [ %6004, %6001 ]
  %6014 = phi i32 [ %5899, %6008 ], [ %5957, %5952 ], [ %6006, %6001 ]
  %6015 = phi i32 [ %6010, %6008 ], [ %5924, %5952 ], [ %5973, %6001 ]
  %6016 = icmp eq i32 %6015, 0
  br i1 %6016, label %7263, label %6017

6017:                                             ; preds = %5223, %6011
  %6018 = phi i32 [ %5900, %6011 ], [ 0, %5223 ]
  %6019 = phi i32 [ %6012, %6011 ], [ %5224, %5223 ]
  %6020 = phi i32 [ %6013, %6011 ], [ %5225, %5223 ]
  %6021 = phi i32 [ %6014, %6011 ], [ %5226, %5223 ]
  %6022 = getelementptr inbounds i32, i32* %4895, i64 -1
  %6023 = load i32, i32* %6022, align 4
  %6024 = getelementptr inbounds i32, i32* %4895, i64 1
  %6025 = load i32, i32* %6024, align 4
  %6026 = lshr i32 %6018, 9
  %6027 = and i32 %6026, 170
  %6028 = lshr i32 %6023, 28
  %6029 = and i32 %6028, 1
  %6030 = lshr i32 %6025, 26
  %6031 = and i32 %6030, 4
  %6032 = lshr i32 %6018, 21
  %6033 = and i32 %6032, 16
  %6034 = lshr i32 %6018, 25
  %6035 = and i32 %6034, 64
  %6036 = or i32 %6035, %6027
  %6037 = or i32 %6036, %6033
  %6038 = or i32 %6037, %6029
  %6039 = or i32 %6038, %6031
  %6040 = zext i32 %6039 to i64
  %6041 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %6040
  %6042 = load i8, i8* %6041, align 1
  %6043 = zext i8 %6042 to i64
  %6044 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6043
  %6045 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6044, align 8
  %6046 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 0
  %6047 = load i32, i32* %6046, align 8
  %6048 = sub i32 %6020, %6047
  %6049 = lshr i32 %6019, 16
  %6050 = icmp ult i32 %6049, %6047
  br i1 %6050, label %6051, label %6095

6051:                                             ; preds = %6017
  %6052 = icmp ult i32 %6048, %6047
  %6053 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 1
  %6054 = load i32, i32* %6053, align 4
  %6055 = icmp eq i32 %6054, 0
  %6056 = zext i1 %6055 to i32
  %6057 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 3
  %6058 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 2
  %6059 = select i1 %6052, %struct.opj_mqc_state** %6058, %struct.opj_mqc_state** %6057
  %6060 = select i1 %6052, i32 %6054, i32 %6056
  %6061 = bitcast %struct.opj_mqc_state** %6059 to i64*
  %6062 = load i64, i64* %6061, align 8
  %6063 = bitcast %struct.opj_mqc_state** %6044 to i64*
  store i64 %6062, i64* %6063, align 8
  br label %6064

6064:                                             ; preds = %6088, %6051
  %6065 = phi i32 [ %6019, %6051 ], [ %6092, %6088 ]
  %6066 = phi i32 [ %6047, %6051 ], [ %6091, %6088 ]
  %6067 = phi i32 [ %6021, %6051 ], [ %6093, %6088 ]
  %6068 = icmp eq i32 %6067, 0
  br i1 %6068, label %6069, label %6088

6069:                                             ; preds = %6064
  %6070 = load i8*, i8** %4871, align 8
  %6071 = getelementptr inbounds i8, i8* %6070, i64 1
  %6072 = load i8, i8* %6071, align 1
  %6073 = zext i8 %6072 to i32
  %6074 = load i8, i8* %6070, align 1
  %6075 = icmp eq i8 %6074, -1
  br i1 %6075, label %6076, label %6085

6076:                                             ; preds = %6069
  %6077 = icmp ugt i8 %6072, -113
  br i1 %6077, label %6078, label %6082

6078:                                             ; preds = %6076
  %6079 = add i32 %6065, 65280
  %6080 = load i32, i32* %4872, align 4
  %6081 = add i32 %6080, 1
  store i32 %6081, i32* %4872, align 4
  br label %6088

6082:                                             ; preds = %6076
  store i8* %6071, i8** %4871, align 8
  %6083 = shl nuw nsw i32 %6073, 9
  %6084 = add i32 %6083, %6065
  br label %6088

6085:                                             ; preds = %6069
  store i8* %6071, i8** %4871, align 8
  %6086 = shl nuw nsw i32 %6073, 8
  %6087 = add i32 %6086, %6065
  br label %6088

6088:                                             ; preds = %6085, %6082, %6078, %6064
  %6089 = phi i32 [ %6065, %6064 ], [ %6079, %6078 ], [ %6084, %6082 ], [ %6087, %6085 ]
  %6090 = phi i32 [ %6067, %6064 ], [ 8, %6078 ], [ 7, %6082 ], [ 8, %6085 ]
  %6091 = shl i32 %6066, 1
  %6092 = shl i32 %6089, 1
  %6093 = add i32 %6090, -1
  %6094 = icmp ult i32 %6091, 32768
  br i1 %6094, label %6064, label %6147

6095:                                             ; preds = %6017
  %6096 = shl i32 %6047, 16
  %6097 = sub i32 %6019, %6096
  %6098 = trunc i32 %6048 to i16
  %6099 = icmp sgt i16 %6098, -1
  br i1 %6099, label %6100, label %6144

6100:                                             ; preds = %6095
  %6101 = icmp ult i32 %6048, %6047
  %6102 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 1
  %6103 = load i32, i32* %6102, align 4
  %6104 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 2
  %6105 = icmp eq i32 %6103, 0
  %6106 = zext i1 %6105 to i32
  %6107 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 3
  %6108 = select i1 %6101, %struct.opj_mqc_state** %6107, %struct.opj_mqc_state** %6104
  %6109 = select i1 %6101, i32 %6106, i32 %6103
  %6110 = bitcast %struct.opj_mqc_state** %6108 to i64*
  %6111 = load i64, i64* %6110, align 8
  %6112 = bitcast %struct.opj_mqc_state** %6044 to i64*
  store i64 %6111, i64* %6112, align 8
  br label %6113

6113:                                             ; preds = %6137, %6100
  %6114 = phi i32 [ %6097, %6100 ], [ %6141, %6137 ]
  %6115 = phi i32 [ %6048, %6100 ], [ %6140, %6137 ]
  %6116 = phi i32 [ %6021, %6100 ], [ %6142, %6137 ]
  %6117 = icmp eq i32 %6116, 0
  br i1 %6117, label %6118, label %6137

6118:                                             ; preds = %6113
  %6119 = load i8*, i8** %4871, align 8
  %6120 = getelementptr inbounds i8, i8* %6119, i64 1
  %6121 = load i8, i8* %6120, align 1
  %6122 = zext i8 %6121 to i32
  %6123 = load i8, i8* %6119, align 1
  %6124 = icmp eq i8 %6123, -1
  br i1 %6124, label %6125, label %6134

6125:                                             ; preds = %6118
  %6126 = icmp ugt i8 %6121, -113
  br i1 %6126, label %6127, label %6131

6127:                                             ; preds = %6125
  %6128 = add i32 %6114, 65280
  %6129 = load i32, i32* %4872, align 4
  %6130 = add i32 %6129, 1
  store i32 %6130, i32* %4872, align 4
  br label %6137

6131:                                             ; preds = %6125
  store i8* %6120, i8** %4871, align 8
  %6132 = shl nuw nsw i32 %6122, 9
  %6133 = add i32 %6132, %6114
  br label %6137

6134:                                             ; preds = %6118
  store i8* %6120, i8** %4871, align 8
  %6135 = shl nuw nsw i32 %6122, 8
  %6136 = add i32 %6135, %6114
  br label %6137

6137:                                             ; preds = %6134, %6131, %6127, %6113
  %6138 = phi i32 [ %6114, %6113 ], [ %6128, %6127 ], [ %6133, %6131 ], [ %6136, %6134 ]
  %6139 = phi i32 [ %6116, %6113 ], [ 8, %6127 ], [ 7, %6131 ], [ 8, %6134 ]
  %6140 = shl i32 %6115, 1
  %6141 = shl i32 %6138, 1
  %6142 = add i32 %6139, -1
  %6143 = icmp ult i32 %6140, 32768
  br i1 %6143, label %6113, label %6147

6144:                                             ; preds = %6095
  %6145 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6045, i64 0, i32 1
  %6146 = load i32, i32* %6145, align 4
  br label %6147

6147:                                             ; preds = %6137, %6088, %6144
  %6148 = phi i32 [ %6097, %6144 ], [ %6092, %6088 ], [ %6141, %6137 ]
  %6149 = phi i32 [ %6048, %6144 ], [ %6091, %6088 ], [ %6140, %6137 ]
  %6150 = phi i32 [ %6021, %6144 ], [ %6093, %6088 ], [ %6142, %6137 ]
  %6151 = phi i32 [ %6146, %6144 ], [ %6060, %6088 ], [ %6109, %6137 ]
  %6152 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %6040
  %6153 = load i8, i8* %6152, align 1
  %6154 = zext i8 %6153 to i32
  %6155 = xor i32 %6151, %6154
  %6156 = icmp eq i32 %6155, 0
  %6157 = select i1 %6156, i32 %4864, i32 %4873
  %6158 = getelementptr inbounds i32, i32* %4894, i64 %4878
  store i32 %6157, i32* %6158, align 4
  %6159 = load i32, i32* %6022, align 4
  %6160 = or i32 %6159, 16384
  store i32 %6160, i32* %6022, align 4
  %6161 = shl i32 %6155, 28
  %6162 = or i32 %6018, %6161
  %6163 = or i32 %6162, 8192
  %6164 = load i32, i32* %6024, align 4
  %6165 = or i32 %6164, 4096
  store i32 %6165, i32* %6024, align 4
  %6166 = load i32, i32* %4, align 8
  %6167 = add i32 %6166, 2
  %6168 = zext i32 %6167 to i64
  %6169 = getelementptr inbounds i32, i32* %4895, i64 %6168
  %6170 = shl i32 %6155, 18
  %6171 = load i32, i32* %6169, align 4
  %6172 = or i32 %6170, %6171
  %6173 = or i32 %6172, 2
  store i32 %6173, i32* %6169, align 4
  %6174 = getelementptr inbounds i32, i32* %6169, i64 -1
  %6175 = load i32, i32* %6174, align 4
  %6176 = or i32 %6175, 4
  store i32 %6176, i32* %6174, align 4
  %6177 = getelementptr inbounds i32, i32* %6169, i64 1
  %6178 = load i32, i32* %6177, align 4
  %6179 = or i32 %6178, 1
  store i32 %6179, i32* %6177, align 4
  br label %7263

6180:                                             ; preds = %4892
  %6181 = and i32 %4900, 2097168
  %6182 = icmp eq i32 %6181, 0
  br i1 %6182, label %6183, label %6442

6183:                                             ; preds = %6180
  %6184 = load i8*, i8** %4870, align 8
  %6185 = and i32 %4900, 495
  %6186 = zext i32 %6185 to i64
  %6187 = getelementptr inbounds i8, i8* %6184, i64 %6186
  %6188 = load i8, i8* %6187, align 1
  %6189 = zext i8 %6188 to i64
  %6190 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6189
  %6191 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6190, align 8
  %6192 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 0
  %6193 = load i32, i32* %6192, align 8
  %6194 = sub i32 %4897, %6193
  %6195 = lshr i32 %4898, 16
  %6196 = icmp ult i32 %6195, %6193
  br i1 %6196, label %6197, label %6241

6197:                                             ; preds = %6183
  %6198 = icmp ult i32 %6194, %6193
  %6199 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 1
  %6200 = load i32, i32* %6199, align 4
  %6201 = icmp eq i32 %6200, 0
  %6202 = zext i1 %6201 to i32
  %6203 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 3
  %6204 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 2
  %6205 = select i1 %6198, %struct.opj_mqc_state** %6204, %struct.opj_mqc_state** %6203
  %6206 = select i1 %6198, i32 %6200, i32 %6202
  %6207 = bitcast %struct.opj_mqc_state** %6205 to i64*
  %6208 = load i64, i64* %6207, align 8
  %6209 = bitcast %struct.opj_mqc_state** %6190 to i64*
  store i64 %6208, i64* %6209, align 8
  br label %6210

6210:                                             ; preds = %6234, %6197
  %6211 = phi i32 [ %4898, %6197 ], [ %6238, %6234 ]
  %6212 = phi i32 [ %6193, %6197 ], [ %6237, %6234 ]
  %6213 = phi i32 [ %4896, %6197 ], [ %6239, %6234 ]
  %6214 = icmp eq i32 %6213, 0
  br i1 %6214, label %6215, label %6234

6215:                                             ; preds = %6210
  %6216 = load i8*, i8** %4871, align 8
  %6217 = getelementptr inbounds i8, i8* %6216, i64 1
  %6218 = load i8, i8* %6217, align 1
  %6219 = zext i8 %6218 to i32
  %6220 = load i8, i8* %6216, align 1
  %6221 = icmp eq i8 %6220, -1
  br i1 %6221, label %6222, label %6231

6222:                                             ; preds = %6215
  %6223 = icmp ugt i8 %6218, -113
  br i1 %6223, label %6224, label %6228

6224:                                             ; preds = %6222
  %6225 = add i32 %6211, 65280
  %6226 = load i32, i32* %4872, align 4
  %6227 = add i32 %6226, 1
  store i32 %6227, i32* %4872, align 4
  br label %6234

6228:                                             ; preds = %6222
  store i8* %6217, i8** %4871, align 8
  %6229 = shl nuw nsw i32 %6219, 9
  %6230 = add i32 %6229, %6211
  br label %6234

6231:                                             ; preds = %6215
  store i8* %6217, i8** %4871, align 8
  %6232 = shl nuw nsw i32 %6219, 8
  %6233 = add i32 %6232, %6211
  br label %6234

6234:                                             ; preds = %6231, %6228, %6224, %6210
  %6235 = phi i32 [ %6211, %6210 ], [ %6225, %6224 ], [ %6230, %6228 ], [ %6233, %6231 ]
  %6236 = phi i32 [ %6213, %6210 ], [ 8, %6224 ], [ 7, %6228 ], [ 8, %6231 ]
  %6237 = shl i32 %6212, 1
  %6238 = shl i32 %6235, 1
  %6239 = add i32 %6236, -1
  %6240 = icmp ult i32 %6237, 32768
  br i1 %6240, label %6210, label %6293

6241:                                             ; preds = %6183
  %6242 = shl i32 %6193, 16
  %6243 = sub i32 %4898, %6242
  %6244 = trunc i32 %6194 to i16
  %6245 = icmp sgt i16 %6244, -1
  br i1 %6245, label %6246, label %6290

6246:                                             ; preds = %6241
  %6247 = icmp ult i32 %6194, %6193
  %6248 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 1
  %6249 = load i32, i32* %6248, align 4
  %6250 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 2
  %6251 = icmp eq i32 %6249, 0
  %6252 = zext i1 %6251 to i32
  %6253 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 3
  %6254 = select i1 %6247, %struct.opj_mqc_state** %6253, %struct.opj_mqc_state** %6250
  %6255 = select i1 %6247, i32 %6252, i32 %6249
  %6256 = bitcast %struct.opj_mqc_state** %6254 to i64*
  %6257 = load i64, i64* %6256, align 8
  %6258 = bitcast %struct.opj_mqc_state** %6190 to i64*
  store i64 %6257, i64* %6258, align 8
  br label %6259

6259:                                             ; preds = %6283, %6246
  %6260 = phi i32 [ %6243, %6246 ], [ %6287, %6283 ]
  %6261 = phi i32 [ %6194, %6246 ], [ %6286, %6283 ]
  %6262 = phi i32 [ %4896, %6246 ], [ %6288, %6283 ]
  %6263 = icmp eq i32 %6262, 0
  br i1 %6263, label %6264, label %6283

6264:                                             ; preds = %6259
  %6265 = load i8*, i8** %4871, align 8
  %6266 = getelementptr inbounds i8, i8* %6265, i64 1
  %6267 = load i8, i8* %6266, align 1
  %6268 = zext i8 %6267 to i32
  %6269 = load i8, i8* %6265, align 1
  %6270 = icmp eq i8 %6269, -1
  br i1 %6270, label %6271, label %6280

6271:                                             ; preds = %6264
  %6272 = icmp ugt i8 %6267, -113
  br i1 %6272, label %6273, label %6277

6273:                                             ; preds = %6271
  %6274 = add i32 %6260, 65280
  %6275 = load i32, i32* %4872, align 4
  %6276 = add i32 %6275, 1
  store i32 %6276, i32* %4872, align 4
  br label %6283

6277:                                             ; preds = %6271
  store i8* %6266, i8** %4871, align 8
  %6278 = shl nuw nsw i32 %6268, 9
  %6279 = add i32 %6278, %6260
  br label %6283

6280:                                             ; preds = %6264
  store i8* %6266, i8** %4871, align 8
  %6281 = shl nuw nsw i32 %6268, 8
  %6282 = add i32 %6281, %6260
  br label %6283

6283:                                             ; preds = %6280, %6277, %6273, %6259
  %6284 = phi i32 [ %6260, %6259 ], [ %6274, %6273 ], [ %6279, %6277 ], [ %6282, %6280 ]
  %6285 = phi i32 [ %6262, %6259 ], [ 8, %6273 ], [ 7, %6277 ], [ 8, %6280 ]
  %6286 = shl i32 %6261, 1
  %6287 = shl i32 %6284, 1
  %6288 = add i32 %6285, -1
  %6289 = icmp ult i32 %6286, 32768
  br i1 %6289, label %6259, label %6293

6290:                                             ; preds = %6241
  %6291 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6191, i64 0, i32 1
  %6292 = load i32, i32* %6291, align 4
  br label %6293

6293:                                             ; preds = %6283, %6234, %6290
  %6294 = phi i32 [ %6243, %6290 ], [ %6238, %6234 ], [ %6287, %6283 ]
  %6295 = phi i32 [ %6194, %6290 ], [ %6237, %6234 ], [ %6286, %6283 ]
  %6296 = phi i32 [ %4896, %6290 ], [ %6239, %6234 ], [ %6288, %6283 ]
  %6297 = phi i32 [ %6292, %6290 ], [ %6206, %6234 ], [ %6255, %6283 ]
  %6298 = icmp eq i32 %6297, 0
  br i1 %6298, label %6442, label %6299

6299:                                             ; preds = %6293
  %6300 = getelementptr inbounds i32, i32* %4895, i64 -1
  %6301 = load i32, i32* %6300, align 4
  %6302 = getelementptr inbounds i32, i32* %4895, i64 1
  %6303 = load i32, i32* %6302, align 4
  %6304 = and i32 %4900, 170
  %6305 = lshr i32 %6301, 19
  %6306 = and i32 %6305, 1
  %6307 = lshr i32 %6303, 17
  %6308 = and i32 %6307, 4
  %6309 = lshr i32 %4900, 14
  %6310 = and i32 %6309, 16
  %6311 = lshr i32 %4900, 16
  %6312 = and i32 %6311, 64
  %6313 = or i32 %6312, %6304
  %6314 = or i32 %6313, %6310
  %6315 = or i32 %6314, %6306
  %6316 = or i32 %6315, %6308
  %6317 = zext i32 %6316 to i64
  %6318 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %6317
  %6319 = load i8, i8* %6318, align 1
  %6320 = zext i8 %6319 to i64
  %6321 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6320
  %6322 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6321, align 8
  %6323 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 0
  %6324 = load i32, i32* %6323, align 8
  %6325 = sub i32 %6295, %6324
  %6326 = lshr i32 %6294, 16
  %6327 = icmp ult i32 %6326, %6324
  br i1 %6327, label %6328, label %6372

6328:                                             ; preds = %6299
  %6329 = icmp ult i32 %6325, %6324
  %6330 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 1
  %6331 = load i32, i32* %6330, align 4
  %6332 = icmp eq i32 %6331, 0
  %6333 = zext i1 %6332 to i32
  %6334 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 3
  %6335 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 2
  %6336 = select i1 %6329, %struct.opj_mqc_state** %6335, %struct.opj_mqc_state** %6334
  %6337 = select i1 %6329, i32 %6331, i32 %6333
  %6338 = bitcast %struct.opj_mqc_state** %6336 to i64*
  %6339 = load i64, i64* %6338, align 8
  %6340 = bitcast %struct.opj_mqc_state** %6321 to i64*
  store i64 %6339, i64* %6340, align 8
  br label %6341

6341:                                             ; preds = %6365, %6328
  %6342 = phi i32 [ %6294, %6328 ], [ %6369, %6365 ]
  %6343 = phi i32 [ %6324, %6328 ], [ %6368, %6365 ]
  %6344 = phi i32 [ %6296, %6328 ], [ %6370, %6365 ]
  %6345 = icmp eq i32 %6344, 0
  br i1 %6345, label %6346, label %6365

6346:                                             ; preds = %6341
  %6347 = load i8*, i8** %4871, align 8
  %6348 = getelementptr inbounds i8, i8* %6347, i64 1
  %6349 = load i8, i8* %6348, align 1
  %6350 = zext i8 %6349 to i32
  %6351 = load i8, i8* %6347, align 1
  %6352 = icmp eq i8 %6351, -1
  br i1 %6352, label %6353, label %6362

6353:                                             ; preds = %6346
  %6354 = icmp ugt i8 %6349, -113
  br i1 %6354, label %6355, label %6359

6355:                                             ; preds = %6353
  %6356 = add i32 %6342, 65280
  %6357 = load i32, i32* %4872, align 4
  %6358 = add i32 %6357, 1
  store i32 %6358, i32* %4872, align 4
  br label %6365

6359:                                             ; preds = %6353
  store i8* %6348, i8** %4871, align 8
  %6360 = shl nuw nsw i32 %6350, 9
  %6361 = add i32 %6360, %6342
  br label %6365

6362:                                             ; preds = %6346
  store i8* %6348, i8** %4871, align 8
  %6363 = shl nuw nsw i32 %6350, 8
  %6364 = add i32 %6363, %6342
  br label %6365

6365:                                             ; preds = %6362, %6359, %6355, %6341
  %6366 = phi i32 [ %6342, %6341 ], [ %6356, %6355 ], [ %6361, %6359 ], [ %6364, %6362 ]
  %6367 = phi i32 [ %6344, %6341 ], [ 8, %6355 ], [ 7, %6359 ], [ 8, %6362 ]
  %6368 = shl i32 %6343, 1
  %6369 = shl i32 %6366, 1
  %6370 = add i32 %6367, -1
  %6371 = icmp ult i32 %6368, 32768
  br i1 %6371, label %6341, label %6424

6372:                                             ; preds = %6299
  %6373 = shl i32 %6324, 16
  %6374 = sub i32 %6294, %6373
  %6375 = trunc i32 %6325 to i16
  %6376 = icmp sgt i16 %6375, -1
  br i1 %6376, label %6377, label %6421

6377:                                             ; preds = %6372
  %6378 = icmp ult i32 %6325, %6324
  %6379 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 1
  %6380 = load i32, i32* %6379, align 4
  %6381 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 2
  %6382 = icmp eq i32 %6380, 0
  %6383 = zext i1 %6382 to i32
  %6384 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 3
  %6385 = select i1 %6378, %struct.opj_mqc_state** %6384, %struct.opj_mqc_state** %6381
  %6386 = select i1 %6378, i32 %6383, i32 %6380
  %6387 = bitcast %struct.opj_mqc_state** %6385 to i64*
  %6388 = load i64, i64* %6387, align 8
  %6389 = bitcast %struct.opj_mqc_state** %6321 to i64*
  store i64 %6388, i64* %6389, align 8
  br label %6390

6390:                                             ; preds = %6414, %6377
  %6391 = phi i32 [ %6374, %6377 ], [ %6418, %6414 ]
  %6392 = phi i32 [ %6325, %6377 ], [ %6417, %6414 ]
  %6393 = phi i32 [ %6296, %6377 ], [ %6419, %6414 ]
  %6394 = icmp eq i32 %6393, 0
  br i1 %6394, label %6395, label %6414

6395:                                             ; preds = %6390
  %6396 = load i8*, i8** %4871, align 8
  %6397 = getelementptr inbounds i8, i8* %6396, i64 1
  %6398 = load i8, i8* %6397, align 1
  %6399 = zext i8 %6398 to i32
  %6400 = load i8, i8* %6396, align 1
  %6401 = icmp eq i8 %6400, -1
  br i1 %6401, label %6402, label %6411

6402:                                             ; preds = %6395
  %6403 = icmp ugt i8 %6398, -113
  br i1 %6403, label %6404, label %6408

6404:                                             ; preds = %6402
  %6405 = add i32 %6391, 65280
  %6406 = load i32, i32* %4872, align 4
  %6407 = add i32 %6406, 1
  store i32 %6407, i32* %4872, align 4
  br label %6414

6408:                                             ; preds = %6402
  store i8* %6397, i8** %4871, align 8
  %6409 = shl nuw nsw i32 %6399, 9
  %6410 = add i32 %6409, %6391
  br label %6414

6411:                                             ; preds = %6395
  store i8* %6397, i8** %4871, align 8
  %6412 = shl nuw nsw i32 %6399, 8
  %6413 = add i32 %6412, %6391
  br label %6414

6414:                                             ; preds = %6411, %6408, %6404, %6390
  %6415 = phi i32 [ %6391, %6390 ], [ %6405, %6404 ], [ %6410, %6408 ], [ %6413, %6411 ]
  %6416 = phi i32 [ %6393, %6390 ], [ 8, %6404 ], [ 7, %6408 ], [ 8, %6411 ]
  %6417 = shl i32 %6392, 1
  %6418 = shl i32 %6415, 1
  %6419 = add i32 %6416, -1
  %6420 = icmp ult i32 %6417, 32768
  br i1 %6420, label %6390, label %6424

6421:                                             ; preds = %6372
  %6422 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6322, i64 0, i32 1
  %6423 = load i32, i32* %6422, align 4
  br label %6424

6424:                                             ; preds = %6414, %6365, %6421
  %6425 = phi i32 [ %6374, %6421 ], [ %6369, %6365 ], [ %6418, %6414 ]
  %6426 = phi i32 [ %6325, %6421 ], [ %6368, %6365 ], [ %6417, %6414 ]
  %6427 = phi i32 [ %6296, %6421 ], [ %6370, %6365 ], [ %6419, %6414 ]
  %6428 = phi i32 [ %6423, %6421 ], [ %6337, %6365 ], [ %6386, %6414 ]
  %6429 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %6317
  %6430 = load i8, i8* %6429, align 1
  %6431 = zext i8 %6430 to i32
  %6432 = xor i32 %6428, %6431
  %6433 = icmp eq i32 %6432, 0
  %6434 = select i1 %6433, i32 %4864, i32 %4873
  store i32 %6434, i32* %4894, align 4
  %6435 = load i32, i32* %6300, align 4
  %6436 = or i32 %6435, 32
  store i32 %6436, i32* %6300, align 4
  %6437 = shl i32 %6432, 19
  %6438 = or i32 %4900, %6437
  %6439 = or i32 %6438, 16
  %6440 = load i32, i32* %6302, align 4
  %6441 = or i32 %6440, 8
  store i32 %6441, i32* %6302, align 4
  br label %6442

6442:                                             ; preds = %6424, %6293, %6180
  %6443 = phi %struct.opj_mqc_state** [ %4899, %6180 ], [ %6321, %6424 ], [ %6190, %6293 ]
  %6444 = phi i32 [ %4898, %6180 ], [ %6425, %6424 ], [ %6294, %6293 ]
  %6445 = phi i32 [ %4897, %6180 ], [ %6426, %6424 ], [ %6295, %6293 ]
  %6446 = phi i32 [ %4896, %6180 ], [ %6427, %6424 ], [ %6296, %6293 ]
  %6447 = phi i32 [ %4900, %6180 ], [ %6439, %6424 ], [ %4900, %6293 ]
  %6448 = and i32 %6447, 16777344
  %6449 = icmp eq i32 %6448, 0
  br i1 %6449, label %6450, label %6711

6450:                                             ; preds = %6442
  %6451 = lshr i32 %6447, 3
  %6452 = load i8*, i8** %4870, align 8
  %6453 = and i32 %6451, 495
  %6454 = zext i32 %6453 to i64
  %6455 = getelementptr inbounds i8, i8* %6452, i64 %6454
  %6456 = load i8, i8* %6455, align 1
  %6457 = zext i8 %6456 to i64
  %6458 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6457
  %6459 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6458, align 8
  %6460 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 0
  %6461 = load i32, i32* %6460, align 8
  %6462 = sub i32 %6445, %6461
  %6463 = lshr i32 %6444, 16
  %6464 = icmp ult i32 %6463, %6461
  br i1 %6464, label %6465, label %6509

6465:                                             ; preds = %6450
  %6466 = icmp ult i32 %6462, %6461
  %6467 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 1
  %6468 = load i32, i32* %6467, align 4
  %6469 = icmp eq i32 %6468, 0
  %6470 = zext i1 %6469 to i32
  %6471 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 3
  %6472 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 2
  %6473 = select i1 %6466, %struct.opj_mqc_state** %6472, %struct.opj_mqc_state** %6471
  %6474 = select i1 %6466, i32 %6468, i32 %6470
  %6475 = bitcast %struct.opj_mqc_state** %6473 to i64*
  %6476 = load i64, i64* %6475, align 8
  %6477 = bitcast %struct.opj_mqc_state** %6458 to i64*
  store i64 %6476, i64* %6477, align 8
  br label %6478

6478:                                             ; preds = %6502, %6465
  %6479 = phi i32 [ %6444, %6465 ], [ %6506, %6502 ]
  %6480 = phi i32 [ %6461, %6465 ], [ %6505, %6502 ]
  %6481 = phi i32 [ %6446, %6465 ], [ %6507, %6502 ]
  %6482 = icmp eq i32 %6481, 0
  br i1 %6482, label %6483, label %6502

6483:                                             ; preds = %6478
  %6484 = load i8*, i8** %4871, align 8
  %6485 = getelementptr inbounds i8, i8* %6484, i64 1
  %6486 = load i8, i8* %6485, align 1
  %6487 = zext i8 %6486 to i32
  %6488 = load i8, i8* %6484, align 1
  %6489 = icmp eq i8 %6488, -1
  br i1 %6489, label %6490, label %6499

6490:                                             ; preds = %6483
  %6491 = icmp ugt i8 %6486, -113
  br i1 %6491, label %6492, label %6496

6492:                                             ; preds = %6490
  %6493 = add i32 %6479, 65280
  %6494 = load i32, i32* %4872, align 4
  %6495 = add i32 %6494, 1
  store i32 %6495, i32* %4872, align 4
  br label %6502

6496:                                             ; preds = %6490
  store i8* %6485, i8** %4871, align 8
  %6497 = shl nuw nsw i32 %6487, 9
  %6498 = add i32 %6497, %6479
  br label %6502

6499:                                             ; preds = %6483
  store i8* %6485, i8** %4871, align 8
  %6500 = shl nuw nsw i32 %6487, 8
  %6501 = add i32 %6500, %6479
  br label %6502

6502:                                             ; preds = %6499, %6496, %6492, %6478
  %6503 = phi i32 [ %6479, %6478 ], [ %6493, %6492 ], [ %6498, %6496 ], [ %6501, %6499 ]
  %6504 = phi i32 [ %6481, %6478 ], [ 8, %6492 ], [ 7, %6496 ], [ 8, %6499 ]
  %6505 = shl i32 %6480, 1
  %6506 = shl i32 %6503, 1
  %6507 = add i32 %6504, -1
  %6508 = icmp ult i32 %6505, 32768
  br i1 %6508, label %6478, label %6561

6509:                                             ; preds = %6450
  %6510 = shl i32 %6461, 16
  %6511 = sub i32 %6444, %6510
  %6512 = trunc i32 %6462 to i16
  %6513 = icmp sgt i16 %6512, -1
  br i1 %6513, label %6514, label %6558

6514:                                             ; preds = %6509
  %6515 = icmp ult i32 %6462, %6461
  %6516 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 1
  %6517 = load i32, i32* %6516, align 4
  %6518 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 2
  %6519 = icmp eq i32 %6517, 0
  %6520 = zext i1 %6519 to i32
  %6521 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 3
  %6522 = select i1 %6515, %struct.opj_mqc_state** %6521, %struct.opj_mqc_state** %6518
  %6523 = select i1 %6515, i32 %6520, i32 %6517
  %6524 = bitcast %struct.opj_mqc_state** %6522 to i64*
  %6525 = load i64, i64* %6524, align 8
  %6526 = bitcast %struct.opj_mqc_state** %6458 to i64*
  store i64 %6525, i64* %6526, align 8
  br label %6527

6527:                                             ; preds = %6551, %6514
  %6528 = phi i32 [ %6511, %6514 ], [ %6555, %6551 ]
  %6529 = phi i32 [ %6462, %6514 ], [ %6554, %6551 ]
  %6530 = phi i32 [ %6446, %6514 ], [ %6556, %6551 ]
  %6531 = icmp eq i32 %6530, 0
  br i1 %6531, label %6532, label %6551

6532:                                             ; preds = %6527
  %6533 = load i8*, i8** %4871, align 8
  %6534 = getelementptr inbounds i8, i8* %6533, i64 1
  %6535 = load i8, i8* %6534, align 1
  %6536 = zext i8 %6535 to i32
  %6537 = load i8, i8* %6533, align 1
  %6538 = icmp eq i8 %6537, -1
  br i1 %6538, label %6539, label %6548

6539:                                             ; preds = %6532
  %6540 = icmp ugt i8 %6535, -113
  br i1 %6540, label %6541, label %6545

6541:                                             ; preds = %6539
  %6542 = add i32 %6528, 65280
  %6543 = load i32, i32* %4872, align 4
  %6544 = add i32 %6543, 1
  store i32 %6544, i32* %4872, align 4
  br label %6551

6545:                                             ; preds = %6539
  store i8* %6534, i8** %4871, align 8
  %6546 = shl nuw nsw i32 %6536, 9
  %6547 = add i32 %6546, %6528
  br label %6551

6548:                                             ; preds = %6532
  store i8* %6534, i8** %4871, align 8
  %6549 = shl nuw nsw i32 %6536, 8
  %6550 = add i32 %6549, %6528
  br label %6551

6551:                                             ; preds = %6548, %6545, %6541, %6527
  %6552 = phi i32 [ %6528, %6527 ], [ %6542, %6541 ], [ %6547, %6545 ], [ %6550, %6548 ]
  %6553 = phi i32 [ %6530, %6527 ], [ 8, %6541 ], [ 7, %6545 ], [ 8, %6548 ]
  %6554 = shl i32 %6529, 1
  %6555 = shl i32 %6552, 1
  %6556 = add i32 %6553, -1
  %6557 = icmp ult i32 %6554, 32768
  br i1 %6557, label %6527, label %6561

6558:                                             ; preds = %6509
  %6559 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6459, i64 0, i32 1
  %6560 = load i32, i32* %6559, align 4
  br label %6561

6561:                                             ; preds = %6551, %6502, %6558
  %6562 = phi i32 [ %6511, %6558 ], [ %6506, %6502 ], [ %6555, %6551 ]
  %6563 = phi i32 [ %6462, %6558 ], [ %6505, %6502 ], [ %6554, %6551 ]
  %6564 = phi i32 [ %6446, %6558 ], [ %6507, %6502 ], [ %6556, %6551 ]
  %6565 = phi i32 [ %6560, %6558 ], [ %6474, %6502 ], [ %6523, %6551 ]
  %6566 = icmp eq i32 %6565, 0
  br i1 %6566, label %6711, label %6567

6567:                                             ; preds = %6561
  %6568 = getelementptr inbounds i32, i32* %4895, i64 -1
  %6569 = load i32, i32* %6568, align 4
  %6570 = getelementptr inbounds i32, i32* %4895, i64 1
  %6571 = load i32, i32* %6570, align 4
  %6572 = and i32 %6451, 170
  %6573 = lshr i32 %6569, 22
  %6574 = and i32 %6573, 1
  %6575 = lshr i32 %6571, 20
  %6576 = and i32 %6575, 4
  %6577 = lshr i32 %6447, 15
  %6578 = and i32 %6577, 16
  %6579 = lshr i32 %6447, 19
  %6580 = and i32 %6579, 64
  %6581 = or i32 %6580, %6572
  %6582 = or i32 %6581, %6578
  %6583 = or i32 %6582, %6574
  %6584 = or i32 %6583, %6576
  %6585 = zext i32 %6584 to i64
  %6586 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %6585
  %6587 = load i8, i8* %6586, align 1
  %6588 = zext i8 %6587 to i64
  %6589 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6588
  %6590 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6589, align 8
  %6591 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 0
  %6592 = load i32, i32* %6591, align 8
  %6593 = sub i32 %6563, %6592
  %6594 = lshr i32 %6562, 16
  %6595 = icmp ult i32 %6594, %6592
  br i1 %6595, label %6596, label %6640

6596:                                             ; preds = %6567
  %6597 = icmp ult i32 %6593, %6592
  %6598 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 1
  %6599 = load i32, i32* %6598, align 4
  %6600 = icmp eq i32 %6599, 0
  %6601 = zext i1 %6600 to i32
  %6602 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 3
  %6603 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 2
  %6604 = select i1 %6597, %struct.opj_mqc_state** %6603, %struct.opj_mqc_state** %6602
  %6605 = select i1 %6597, i32 %6599, i32 %6601
  %6606 = bitcast %struct.opj_mqc_state** %6604 to i64*
  %6607 = load i64, i64* %6606, align 8
  %6608 = bitcast %struct.opj_mqc_state** %6589 to i64*
  store i64 %6607, i64* %6608, align 8
  br label %6609

6609:                                             ; preds = %6633, %6596
  %6610 = phi i32 [ %6562, %6596 ], [ %6637, %6633 ]
  %6611 = phi i32 [ %6592, %6596 ], [ %6636, %6633 ]
  %6612 = phi i32 [ %6564, %6596 ], [ %6638, %6633 ]
  %6613 = icmp eq i32 %6612, 0
  br i1 %6613, label %6614, label %6633

6614:                                             ; preds = %6609
  %6615 = load i8*, i8** %4871, align 8
  %6616 = getelementptr inbounds i8, i8* %6615, i64 1
  %6617 = load i8, i8* %6616, align 1
  %6618 = zext i8 %6617 to i32
  %6619 = load i8, i8* %6615, align 1
  %6620 = icmp eq i8 %6619, -1
  br i1 %6620, label %6621, label %6630

6621:                                             ; preds = %6614
  %6622 = icmp ugt i8 %6617, -113
  br i1 %6622, label %6623, label %6627

6623:                                             ; preds = %6621
  %6624 = add i32 %6610, 65280
  %6625 = load i32, i32* %4872, align 4
  %6626 = add i32 %6625, 1
  store i32 %6626, i32* %4872, align 4
  br label %6633

6627:                                             ; preds = %6621
  store i8* %6616, i8** %4871, align 8
  %6628 = shl nuw nsw i32 %6618, 9
  %6629 = add i32 %6628, %6610
  br label %6633

6630:                                             ; preds = %6614
  store i8* %6616, i8** %4871, align 8
  %6631 = shl nuw nsw i32 %6618, 8
  %6632 = add i32 %6631, %6610
  br label %6633

6633:                                             ; preds = %6630, %6627, %6623, %6609
  %6634 = phi i32 [ %6610, %6609 ], [ %6624, %6623 ], [ %6629, %6627 ], [ %6632, %6630 ]
  %6635 = phi i32 [ %6612, %6609 ], [ 8, %6623 ], [ 7, %6627 ], [ 8, %6630 ]
  %6636 = shl i32 %6611, 1
  %6637 = shl i32 %6634, 1
  %6638 = add i32 %6635, -1
  %6639 = icmp ult i32 %6636, 32768
  br i1 %6639, label %6609, label %6692

6640:                                             ; preds = %6567
  %6641 = shl i32 %6592, 16
  %6642 = sub i32 %6562, %6641
  %6643 = trunc i32 %6593 to i16
  %6644 = icmp sgt i16 %6643, -1
  br i1 %6644, label %6645, label %6689

6645:                                             ; preds = %6640
  %6646 = icmp ult i32 %6593, %6592
  %6647 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 1
  %6648 = load i32, i32* %6647, align 4
  %6649 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 2
  %6650 = icmp eq i32 %6648, 0
  %6651 = zext i1 %6650 to i32
  %6652 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 3
  %6653 = select i1 %6646, %struct.opj_mqc_state** %6652, %struct.opj_mqc_state** %6649
  %6654 = select i1 %6646, i32 %6651, i32 %6648
  %6655 = bitcast %struct.opj_mqc_state** %6653 to i64*
  %6656 = load i64, i64* %6655, align 8
  %6657 = bitcast %struct.opj_mqc_state** %6589 to i64*
  store i64 %6656, i64* %6657, align 8
  br label %6658

6658:                                             ; preds = %6682, %6645
  %6659 = phi i32 [ %6642, %6645 ], [ %6686, %6682 ]
  %6660 = phi i32 [ %6593, %6645 ], [ %6685, %6682 ]
  %6661 = phi i32 [ %6564, %6645 ], [ %6687, %6682 ]
  %6662 = icmp eq i32 %6661, 0
  br i1 %6662, label %6663, label %6682

6663:                                             ; preds = %6658
  %6664 = load i8*, i8** %4871, align 8
  %6665 = getelementptr inbounds i8, i8* %6664, i64 1
  %6666 = load i8, i8* %6665, align 1
  %6667 = zext i8 %6666 to i32
  %6668 = load i8, i8* %6664, align 1
  %6669 = icmp eq i8 %6668, -1
  br i1 %6669, label %6670, label %6679

6670:                                             ; preds = %6663
  %6671 = icmp ugt i8 %6666, -113
  br i1 %6671, label %6672, label %6676

6672:                                             ; preds = %6670
  %6673 = add i32 %6659, 65280
  %6674 = load i32, i32* %4872, align 4
  %6675 = add i32 %6674, 1
  store i32 %6675, i32* %4872, align 4
  br label %6682

6676:                                             ; preds = %6670
  store i8* %6665, i8** %4871, align 8
  %6677 = shl nuw nsw i32 %6667, 9
  %6678 = add i32 %6677, %6659
  br label %6682

6679:                                             ; preds = %6663
  store i8* %6665, i8** %4871, align 8
  %6680 = shl nuw nsw i32 %6667, 8
  %6681 = add i32 %6680, %6659
  br label %6682

6682:                                             ; preds = %6679, %6676, %6672, %6658
  %6683 = phi i32 [ %6659, %6658 ], [ %6673, %6672 ], [ %6678, %6676 ], [ %6681, %6679 ]
  %6684 = phi i32 [ %6661, %6658 ], [ 8, %6672 ], [ 7, %6676 ], [ 8, %6679 ]
  %6685 = shl i32 %6660, 1
  %6686 = shl i32 %6683, 1
  %6687 = add i32 %6684, -1
  %6688 = icmp ult i32 %6685, 32768
  br i1 %6688, label %6658, label %6692

6689:                                             ; preds = %6640
  %6690 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6590, i64 0, i32 1
  %6691 = load i32, i32* %6690, align 4
  br label %6692

6692:                                             ; preds = %6682, %6633, %6689
  %6693 = phi i32 [ %6642, %6689 ], [ %6637, %6633 ], [ %6686, %6682 ]
  %6694 = phi i32 [ %6593, %6689 ], [ %6636, %6633 ], [ %6685, %6682 ]
  %6695 = phi i32 [ %6564, %6689 ], [ %6638, %6633 ], [ %6687, %6682 ]
  %6696 = phi i32 [ %6691, %6689 ], [ %6605, %6633 ], [ %6654, %6682 ]
  %6697 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %6585
  %6698 = load i8, i8* %6697, align 1
  %6699 = zext i8 %6698 to i32
  %6700 = xor i32 %6696, %6699
  %6701 = icmp eq i32 %6700, 0
  %6702 = select i1 %6701, i32 %4864, i32 %4873
  %6703 = getelementptr inbounds i32, i32* %4894, i64 %4874
  store i32 %6702, i32* %6703, align 4
  %6704 = load i32, i32* %6568, align 4
  %6705 = or i32 %6704, 256
  store i32 %6705, i32* %6568, align 4
  %6706 = shl i32 %6700, 22
  %6707 = or i32 %6447, %6706
  %6708 = or i32 %6707, 128
  %6709 = load i32, i32* %6570, align 4
  %6710 = or i32 %6709, 64
  store i32 %6710, i32* %6570, align 4
  br label %6711

6711:                                             ; preds = %6692, %6561, %6442
  %6712 = phi %struct.opj_mqc_state** [ %6443, %6442 ], [ %6589, %6692 ], [ %6458, %6561 ]
  %6713 = phi i32 [ %6444, %6442 ], [ %6693, %6692 ], [ %6562, %6561 ]
  %6714 = phi i32 [ %6445, %6442 ], [ %6694, %6692 ], [ %6563, %6561 ]
  %6715 = phi i32 [ %6446, %6442 ], [ %6695, %6692 ], [ %6564, %6561 ]
  %6716 = phi i32 [ %6447, %6442 ], [ %6708, %6692 ], [ %6447, %6561 ]
  %6717 = and i32 %6716, 134218752
  %6718 = icmp eq i32 %6717, 0
  br i1 %6718, label %6719, label %6980

6719:                                             ; preds = %6711
  %6720 = lshr i32 %6716, 6
  %6721 = load i8*, i8** %4870, align 8
  %6722 = and i32 %6720, 495
  %6723 = zext i32 %6722 to i64
  %6724 = getelementptr inbounds i8, i8* %6721, i64 %6723
  %6725 = load i8, i8* %6724, align 1
  %6726 = zext i8 %6725 to i64
  %6727 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6726
  %6728 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6727, align 8
  %6729 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 0
  %6730 = load i32, i32* %6729, align 8
  %6731 = sub i32 %6714, %6730
  %6732 = lshr i32 %6713, 16
  %6733 = icmp ult i32 %6732, %6730
  br i1 %6733, label %6734, label %6778

6734:                                             ; preds = %6719
  %6735 = icmp ult i32 %6731, %6730
  %6736 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 1
  %6737 = load i32, i32* %6736, align 4
  %6738 = icmp eq i32 %6737, 0
  %6739 = zext i1 %6738 to i32
  %6740 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 3
  %6741 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 2
  %6742 = select i1 %6735, %struct.opj_mqc_state** %6741, %struct.opj_mqc_state** %6740
  %6743 = select i1 %6735, i32 %6737, i32 %6739
  %6744 = bitcast %struct.opj_mqc_state** %6742 to i64*
  %6745 = load i64, i64* %6744, align 8
  %6746 = bitcast %struct.opj_mqc_state** %6727 to i64*
  store i64 %6745, i64* %6746, align 8
  br label %6747

6747:                                             ; preds = %6771, %6734
  %6748 = phi i32 [ %6713, %6734 ], [ %6775, %6771 ]
  %6749 = phi i32 [ %6730, %6734 ], [ %6774, %6771 ]
  %6750 = phi i32 [ %6715, %6734 ], [ %6776, %6771 ]
  %6751 = icmp eq i32 %6750, 0
  br i1 %6751, label %6752, label %6771

6752:                                             ; preds = %6747
  %6753 = load i8*, i8** %4871, align 8
  %6754 = getelementptr inbounds i8, i8* %6753, i64 1
  %6755 = load i8, i8* %6754, align 1
  %6756 = zext i8 %6755 to i32
  %6757 = load i8, i8* %6753, align 1
  %6758 = icmp eq i8 %6757, -1
  br i1 %6758, label %6759, label %6768

6759:                                             ; preds = %6752
  %6760 = icmp ugt i8 %6755, -113
  br i1 %6760, label %6761, label %6765

6761:                                             ; preds = %6759
  %6762 = add i32 %6748, 65280
  %6763 = load i32, i32* %4872, align 4
  %6764 = add i32 %6763, 1
  store i32 %6764, i32* %4872, align 4
  br label %6771

6765:                                             ; preds = %6759
  store i8* %6754, i8** %4871, align 8
  %6766 = shl nuw nsw i32 %6756, 9
  %6767 = add i32 %6766, %6748
  br label %6771

6768:                                             ; preds = %6752
  store i8* %6754, i8** %4871, align 8
  %6769 = shl nuw nsw i32 %6756, 8
  %6770 = add i32 %6769, %6748
  br label %6771

6771:                                             ; preds = %6768, %6765, %6761, %6747
  %6772 = phi i32 [ %6748, %6747 ], [ %6762, %6761 ], [ %6767, %6765 ], [ %6770, %6768 ]
  %6773 = phi i32 [ %6750, %6747 ], [ 8, %6761 ], [ 7, %6765 ], [ 8, %6768 ]
  %6774 = shl i32 %6749, 1
  %6775 = shl i32 %6772, 1
  %6776 = add i32 %6773, -1
  %6777 = icmp ult i32 %6774, 32768
  br i1 %6777, label %6747, label %6830

6778:                                             ; preds = %6719
  %6779 = shl i32 %6730, 16
  %6780 = sub i32 %6713, %6779
  %6781 = trunc i32 %6731 to i16
  %6782 = icmp sgt i16 %6781, -1
  br i1 %6782, label %6783, label %6827

6783:                                             ; preds = %6778
  %6784 = icmp ult i32 %6731, %6730
  %6785 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 1
  %6786 = load i32, i32* %6785, align 4
  %6787 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 2
  %6788 = icmp eq i32 %6786, 0
  %6789 = zext i1 %6788 to i32
  %6790 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 3
  %6791 = select i1 %6784, %struct.opj_mqc_state** %6790, %struct.opj_mqc_state** %6787
  %6792 = select i1 %6784, i32 %6789, i32 %6786
  %6793 = bitcast %struct.opj_mqc_state** %6791 to i64*
  %6794 = load i64, i64* %6793, align 8
  %6795 = bitcast %struct.opj_mqc_state** %6727 to i64*
  store i64 %6794, i64* %6795, align 8
  br label %6796

6796:                                             ; preds = %6820, %6783
  %6797 = phi i32 [ %6780, %6783 ], [ %6824, %6820 ]
  %6798 = phi i32 [ %6731, %6783 ], [ %6823, %6820 ]
  %6799 = phi i32 [ %6715, %6783 ], [ %6825, %6820 ]
  %6800 = icmp eq i32 %6799, 0
  br i1 %6800, label %6801, label %6820

6801:                                             ; preds = %6796
  %6802 = load i8*, i8** %4871, align 8
  %6803 = getelementptr inbounds i8, i8* %6802, i64 1
  %6804 = load i8, i8* %6803, align 1
  %6805 = zext i8 %6804 to i32
  %6806 = load i8, i8* %6802, align 1
  %6807 = icmp eq i8 %6806, -1
  br i1 %6807, label %6808, label %6817

6808:                                             ; preds = %6801
  %6809 = icmp ugt i8 %6804, -113
  br i1 %6809, label %6810, label %6814

6810:                                             ; preds = %6808
  %6811 = add i32 %6797, 65280
  %6812 = load i32, i32* %4872, align 4
  %6813 = add i32 %6812, 1
  store i32 %6813, i32* %4872, align 4
  br label %6820

6814:                                             ; preds = %6808
  store i8* %6803, i8** %4871, align 8
  %6815 = shl nuw nsw i32 %6805, 9
  %6816 = add i32 %6815, %6797
  br label %6820

6817:                                             ; preds = %6801
  store i8* %6803, i8** %4871, align 8
  %6818 = shl nuw nsw i32 %6805, 8
  %6819 = add i32 %6818, %6797
  br label %6820

6820:                                             ; preds = %6817, %6814, %6810, %6796
  %6821 = phi i32 [ %6797, %6796 ], [ %6811, %6810 ], [ %6816, %6814 ], [ %6819, %6817 ]
  %6822 = phi i32 [ %6799, %6796 ], [ 8, %6810 ], [ 7, %6814 ], [ 8, %6817 ]
  %6823 = shl i32 %6798, 1
  %6824 = shl i32 %6821, 1
  %6825 = add i32 %6822, -1
  %6826 = icmp ult i32 %6823, 32768
  br i1 %6826, label %6796, label %6830

6827:                                             ; preds = %6778
  %6828 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6728, i64 0, i32 1
  %6829 = load i32, i32* %6828, align 4
  br label %6830

6830:                                             ; preds = %6820, %6771, %6827
  %6831 = phi i32 [ %6780, %6827 ], [ %6775, %6771 ], [ %6824, %6820 ]
  %6832 = phi i32 [ %6731, %6827 ], [ %6774, %6771 ], [ %6823, %6820 ]
  %6833 = phi i32 [ %6715, %6827 ], [ %6776, %6771 ], [ %6825, %6820 ]
  %6834 = phi i32 [ %6829, %6827 ], [ %6743, %6771 ], [ %6792, %6820 ]
  %6835 = icmp eq i32 %6834, 0
  br i1 %6835, label %6980, label %6836

6836:                                             ; preds = %6830
  %6837 = getelementptr inbounds i32, i32* %4895, i64 -1
  %6838 = load i32, i32* %6837, align 4
  %6839 = getelementptr inbounds i32, i32* %4895, i64 1
  %6840 = load i32, i32* %6839, align 4
  %6841 = and i32 %6720, 170
  %6842 = lshr i32 %6838, 25
  %6843 = and i32 %6842, 1
  %6844 = lshr i32 %6840, 23
  %6845 = and i32 %6844, 4
  %6846 = lshr i32 %6716, 18
  %6847 = and i32 %6846, 16
  %6848 = lshr i32 %6716, 22
  %6849 = and i32 %6848, 64
  %6850 = or i32 %6849, %6841
  %6851 = or i32 %6850, %6847
  %6852 = or i32 %6851, %6843
  %6853 = or i32 %6852, %6845
  %6854 = zext i32 %6853 to i64
  %6855 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %6854
  %6856 = load i8, i8* %6855, align 1
  %6857 = zext i8 %6856 to i64
  %6858 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6857
  %6859 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6858, align 8
  %6860 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 0
  %6861 = load i32, i32* %6860, align 8
  %6862 = sub i32 %6832, %6861
  %6863 = lshr i32 %6831, 16
  %6864 = icmp ult i32 %6863, %6861
  br i1 %6864, label %6865, label %6909

6865:                                             ; preds = %6836
  %6866 = icmp ult i32 %6862, %6861
  %6867 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 1
  %6868 = load i32, i32* %6867, align 4
  %6869 = icmp eq i32 %6868, 0
  %6870 = zext i1 %6869 to i32
  %6871 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 3
  %6872 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 2
  %6873 = select i1 %6866, %struct.opj_mqc_state** %6872, %struct.opj_mqc_state** %6871
  %6874 = select i1 %6866, i32 %6868, i32 %6870
  %6875 = bitcast %struct.opj_mqc_state** %6873 to i64*
  %6876 = load i64, i64* %6875, align 8
  %6877 = bitcast %struct.opj_mqc_state** %6858 to i64*
  store i64 %6876, i64* %6877, align 8
  br label %6878

6878:                                             ; preds = %6902, %6865
  %6879 = phi i32 [ %6831, %6865 ], [ %6906, %6902 ]
  %6880 = phi i32 [ %6861, %6865 ], [ %6905, %6902 ]
  %6881 = phi i32 [ %6833, %6865 ], [ %6907, %6902 ]
  %6882 = icmp eq i32 %6881, 0
  br i1 %6882, label %6883, label %6902

6883:                                             ; preds = %6878
  %6884 = load i8*, i8** %4871, align 8
  %6885 = getelementptr inbounds i8, i8* %6884, i64 1
  %6886 = load i8, i8* %6885, align 1
  %6887 = zext i8 %6886 to i32
  %6888 = load i8, i8* %6884, align 1
  %6889 = icmp eq i8 %6888, -1
  br i1 %6889, label %6890, label %6899

6890:                                             ; preds = %6883
  %6891 = icmp ugt i8 %6886, -113
  br i1 %6891, label %6892, label %6896

6892:                                             ; preds = %6890
  %6893 = add i32 %6879, 65280
  %6894 = load i32, i32* %4872, align 4
  %6895 = add i32 %6894, 1
  store i32 %6895, i32* %4872, align 4
  br label %6902

6896:                                             ; preds = %6890
  store i8* %6885, i8** %4871, align 8
  %6897 = shl nuw nsw i32 %6887, 9
  %6898 = add i32 %6897, %6879
  br label %6902

6899:                                             ; preds = %6883
  store i8* %6885, i8** %4871, align 8
  %6900 = shl nuw nsw i32 %6887, 8
  %6901 = add i32 %6900, %6879
  br label %6902

6902:                                             ; preds = %6899, %6896, %6892, %6878
  %6903 = phi i32 [ %6879, %6878 ], [ %6893, %6892 ], [ %6898, %6896 ], [ %6901, %6899 ]
  %6904 = phi i32 [ %6881, %6878 ], [ 8, %6892 ], [ 7, %6896 ], [ 8, %6899 ]
  %6905 = shl i32 %6880, 1
  %6906 = shl i32 %6903, 1
  %6907 = add i32 %6904, -1
  %6908 = icmp ult i32 %6905, 32768
  br i1 %6908, label %6878, label %6961

6909:                                             ; preds = %6836
  %6910 = shl i32 %6861, 16
  %6911 = sub i32 %6831, %6910
  %6912 = trunc i32 %6862 to i16
  %6913 = icmp sgt i16 %6912, -1
  br i1 %6913, label %6914, label %6958

6914:                                             ; preds = %6909
  %6915 = icmp ult i32 %6862, %6861
  %6916 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 1
  %6917 = load i32, i32* %6916, align 4
  %6918 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 2
  %6919 = icmp eq i32 %6917, 0
  %6920 = zext i1 %6919 to i32
  %6921 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 3
  %6922 = select i1 %6915, %struct.opj_mqc_state** %6921, %struct.opj_mqc_state** %6918
  %6923 = select i1 %6915, i32 %6920, i32 %6917
  %6924 = bitcast %struct.opj_mqc_state** %6922 to i64*
  %6925 = load i64, i64* %6924, align 8
  %6926 = bitcast %struct.opj_mqc_state** %6858 to i64*
  store i64 %6925, i64* %6926, align 8
  br label %6927

6927:                                             ; preds = %6951, %6914
  %6928 = phi i32 [ %6911, %6914 ], [ %6955, %6951 ]
  %6929 = phi i32 [ %6862, %6914 ], [ %6954, %6951 ]
  %6930 = phi i32 [ %6833, %6914 ], [ %6956, %6951 ]
  %6931 = icmp eq i32 %6930, 0
  br i1 %6931, label %6932, label %6951

6932:                                             ; preds = %6927
  %6933 = load i8*, i8** %4871, align 8
  %6934 = getelementptr inbounds i8, i8* %6933, i64 1
  %6935 = load i8, i8* %6934, align 1
  %6936 = zext i8 %6935 to i32
  %6937 = load i8, i8* %6933, align 1
  %6938 = icmp eq i8 %6937, -1
  br i1 %6938, label %6939, label %6948

6939:                                             ; preds = %6932
  %6940 = icmp ugt i8 %6935, -113
  br i1 %6940, label %6941, label %6945

6941:                                             ; preds = %6939
  %6942 = add i32 %6928, 65280
  %6943 = load i32, i32* %4872, align 4
  %6944 = add i32 %6943, 1
  store i32 %6944, i32* %4872, align 4
  br label %6951

6945:                                             ; preds = %6939
  store i8* %6934, i8** %4871, align 8
  %6946 = shl nuw nsw i32 %6936, 9
  %6947 = add i32 %6946, %6928
  br label %6951

6948:                                             ; preds = %6932
  store i8* %6934, i8** %4871, align 8
  %6949 = shl nuw nsw i32 %6936, 8
  %6950 = add i32 %6949, %6928
  br label %6951

6951:                                             ; preds = %6948, %6945, %6941, %6927
  %6952 = phi i32 [ %6928, %6927 ], [ %6942, %6941 ], [ %6947, %6945 ], [ %6950, %6948 ]
  %6953 = phi i32 [ %6930, %6927 ], [ 8, %6941 ], [ 7, %6945 ], [ 8, %6948 ]
  %6954 = shl i32 %6929, 1
  %6955 = shl i32 %6952, 1
  %6956 = add i32 %6953, -1
  %6957 = icmp ult i32 %6954, 32768
  br i1 %6957, label %6927, label %6961

6958:                                             ; preds = %6909
  %6959 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6859, i64 0, i32 1
  %6960 = load i32, i32* %6959, align 4
  br label %6961

6961:                                             ; preds = %6951, %6902, %6958
  %6962 = phi i32 [ %6911, %6958 ], [ %6906, %6902 ], [ %6955, %6951 ]
  %6963 = phi i32 [ %6862, %6958 ], [ %6905, %6902 ], [ %6954, %6951 ]
  %6964 = phi i32 [ %6833, %6958 ], [ %6907, %6902 ], [ %6956, %6951 ]
  %6965 = phi i32 [ %6960, %6958 ], [ %6874, %6902 ], [ %6923, %6951 ]
  %6966 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %6854
  %6967 = load i8, i8* %6966, align 1
  %6968 = zext i8 %6967 to i32
  %6969 = xor i32 %6965, %6968
  %6970 = icmp eq i32 %6969, 0
  %6971 = select i1 %6970, i32 %4864, i32 %4873
  %6972 = getelementptr inbounds i32, i32* %4894, i64 %4876
  store i32 %6971, i32* %6972, align 4
  %6973 = load i32, i32* %6837, align 4
  %6974 = or i32 %6973, 2048
  store i32 %6974, i32* %6837, align 4
  %6975 = shl i32 %6969, 25
  %6976 = or i32 %6716, %6975
  %6977 = or i32 %6976, 1024
  %6978 = load i32, i32* %6839, align 4
  %6979 = or i32 %6978, 512
  store i32 %6979, i32* %6839, align 4
  br label %6980

6980:                                             ; preds = %6961, %6830, %6711
  %6981 = phi %struct.opj_mqc_state** [ %6712, %6711 ], [ %6858, %6961 ], [ %6727, %6830 ]
  %6982 = phi i32 [ %6713, %6711 ], [ %6962, %6961 ], [ %6831, %6830 ]
  %6983 = phi i32 [ %6714, %6711 ], [ %6963, %6961 ], [ %6832, %6830 ]
  %6984 = phi i32 [ %6715, %6711 ], [ %6964, %6961 ], [ %6833, %6830 ]
  %6985 = phi i32 [ %6716, %6711 ], [ %6977, %6961 ], [ %6716, %6830 ]
  %6986 = and i32 %6985, 1073750016
  %6987 = icmp eq i32 %6986, 0
  br i1 %6987, label %6988, label %7263

6988:                                             ; preds = %6980
  %6989 = lshr i32 %6985, 9
  %6990 = load i8*, i8** %4870, align 8
  %6991 = and i32 %6989, 495
  %6992 = zext i32 %6991 to i64
  %6993 = getelementptr inbounds i8, i8* %6990, i64 %6992
  %6994 = load i8, i8* %6993, align 1
  %6995 = zext i8 %6994 to i64
  %6996 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %6995
  %6997 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %6996, align 8
  %6998 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 0
  %6999 = load i32, i32* %6998, align 8
  %7000 = sub i32 %6983, %6999
  %7001 = lshr i32 %6982, 16
  %7002 = icmp ult i32 %7001, %6999
  br i1 %7002, label %7003, label %7047

7003:                                             ; preds = %6988
  %7004 = icmp ult i32 %7000, %6999
  %7005 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 1
  %7006 = load i32, i32* %7005, align 4
  %7007 = icmp eq i32 %7006, 0
  %7008 = zext i1 %7007 to i32
  %7009 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 3
  %7010 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 2
  %7011 = select i1 %7004, %struct.opj_mqc_state** %7010, %struct.opj_mqc_state** %7009
  %7012 = select i1 %7004, i32 %7006, i32 %7008
  %7013 = bitcast %struct.opj_mqc_state** %7011 to i64*
  %7014 = load i64, i64* %7013, align 8
  %7015 = bitcast %struct.opj_mqc_state** %6996 to i64*
  store i64 %7014, i64* %7015, align 8
  br label %7016

7016:                                             ; preds = %7040, %7003
  %7017 = phi i32 [ %6982, %7003 ], [ %7044, %7040 ]
  %7018 = phi i32 [ %6999, %7003 ], [ %7043, %7040 ]
  %7019 = phi i32 [ %6984, %7003 ], [ %7045, %7040 ]
  %7020 = icmp eq i32 %7019, 0
  br i1 %7020, label %7021, label %7040

7021:                                             ; preds = %7016
  %7022 = load i8*, i8** %4871, align 8
  %7023 = getelementptr inbounds i8, i8* %7022, i64 1
  %7024 = load i8, i8* %7023, align 1
  %7025 = zext i8 %7024 to i32
  %7026 = load i8, i8* %7022, align 1
  %7027 = icmp eq i8 %7026, -1
  br i1 %7027, label %7028, label %7037

7028:                                             ; preds = %7021
  %7029 = icmp ugt i8 %7024, -113
  br i1 %7029, label %7030, label %7034

7030:                                             ; preds = %7028
  %7031 = add i32 %7017, 65280
  %7032 = load i32, i32* %4872, align 4
  %7033 = add i32 %7032, 1
  store i32 %7033, i32* %4872, align 4
  br label %7040

7034:                                             ; preds = %7028
  store i8* %7023, i8** %4871, align 8
  %7035 = shl nuw nsw i32 %7025, 9
  %7036 = add i32 %7035, %7017
  br label %7040

7037:                                             ; preds = %7021
  store i8* %7023, i8** %4871, align 8
  %7038 = shl nuw nsw i32 %7025, 8
  %7039 = add i32 %7038, %7017
  br label %7040

7040:                                             ; preds = %7037, %7034, %7030, %7016
  %7041 = phi i32 [ %7017, %7016 ], [ %7031, %7030 ], [ %7036, %7034 ], [ %7039, %7037 ]
  %7042 = phi i32 [ %7019, %7016 ], [ 8, %7030 ], [ 7, %7034 ], [ 8, %7037 ]
  %7043 = shl i32 %7018, 1
  %7044 = shl i32 %7041, 1
  %7045 = add i32 %7042, -1
  %7046 = icmp ult i32 %7043, 32768
  br i1 %7046, label %7016, label %7099

7047:                                             ; preds = %6988
  %7048 = shl i32 %6999, 16
  %7049 = sub i32 %6982, %7048
  %7050 = trunc i32 %7000 to i16
  %7051 = icmp sgt i16 %7050, -1
  br i1 %7051, label %7052, label %7096

7052:                                             ; preds = %7047
  %7053 = icmp ult i32 %7000, %6999
  %7054 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 1
  %7055 = load i32, i32* %7054, align 4
  %7056 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 2
  %7057 = icmp eq i32 %7055, 0
  %7058 = zext i1 %7057 to i32
  %7059 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 3
  %7060 = select i1 %7053, %struct.opj_mqc_state** %7059, %struct.opj_mqc_state** %7056
  %7061 = select i1 %7053, i32 %7058, i32 %7055
  %7062 = bitcast %struct.opj_mqc_state** %7060 to i64*
  %7063 = load i64, i64* %7062, align 8
  %7064 = bitcast %struct.opj_mqc_state** %6996 to i64*
  store i64 %7063, i64* %7064, align 8
  br label %7065

7065:                                             ; preds = %7089, %7052
  %7066 = phi i32 [ %7049, %7052 ], [ %7093, %7089 ]
  %7067 = phi i32 [ %7000, %7052 ], [ %7092, %7089 ]
  %7068 = phi i32 [ %6984, %7052 ], [ %7094, %7089 ]
  %7069 = icmp eq i32 %7068, 0
  br i1 %7069, label %7070, label %7089

7070:                                             ; preds = %7065
  %7071 = load i8*, i8** %4871, align 8
  %7072 = getelementptr inbounds i8, i8* %7071, i64 1
  %7073 = load i8, i8* %7072, align 1
  %7074 = zext i8 %7073 to i32
  %7075 = load i8, i8* %7071, align 1
  %7076 = icmp eq i8 %7075, -1
  br i1 %7076, label %7077, label %7086

7077:                                             ; preds = %7070
  %7078 = icmp ugt i8 %7073, -113
  br i1 %7078, label %7079, label %7083

7079:                                             ; preds = %7077
  %7080 = add i32 %7066, 65280
  %7081 = load i32, i32* %4872, align 4
  %7082 = add i32 %7081, 1
  store i32 %7082, i32* %4872, align 4
  br label %7089

7083:                                             ; preds = %7077
  store i8* %7072, i8** %4871, align 8
  %7084 = shl nuw nsw i32 %7074, 9
  %7085 = add i32 %7084, %7066
  br label %7089

7086:                                             ; preds = %7070
  store i8* %7072, i8** %4871, align 8
  %7087 = shl nuw nsw i32 %7074, 8
  %7088 = add i32 %7087, %7066
  br label %7089

7089:                                             ; preds = %7086, %7083, %7079, %7065
  %7090 = phi i32 [ %7066, %7065 ], [ %7080, %7079 ], [ %7085, %7083 ], [ %7088, %7086 ]
  %7091 = phi i32 [ %7068, %7065 ], [ 8, %7079 ], [ 7, %7083 ], [ 8, %7086 ]
  %7092 = shl i32 %7067, 1
  %7093 = shl i32 %7090, 1
  %7094 = add i32 %7091, -1
  %7095 = icmp ult i32 %7092, 32768
  br i1 %7095, label %7065, label %7099

7096:                                             ; preds = %7047
  %7097 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %6997, i64 0, i32 1
  %7098 = load i32, i32* %7097, align 4
  br label %7099

7099:                                             ; preds = %7089, %7040, %7096
  %7100 = phi i32 [ %7049, %7096 ], [ %7044, %7040 ], [ %7093, %7089 ]
  %7101 = phi i32 [ %7000, %7096 ], [ %7043, %7040 ], [ %7092, %7089 ]
  %7102 = phi i32 [ %6984, %7096 ], [ %7045, %7040 ], [ %7094, %7089 ]
  %7103 = phi i32 [ %7098, %7096 ], [ %7012, %7040 ], [ %7061, %7089 ]
  %7104 = icmp eq i32 %7103, 0
  br i1 %7104, label %7263, label %7105

7105:                                             ; preds = %7099
  %7106 = getelementptr inbounds i32, i32* %4895, i64 -1
  %7107 = load i32, i32* %7106, align 4
  %7108 = getelementptr inbounds i32, i32* %4895, i64 1
  %7109 = load i32, i32* %7108, align 4
  %7110 = and i32 %6989, 170
  %7111 = lshr i32 %7107, 28
  %7112 = and i32 %7111, 1
  %7113 = lshr i32 %7109, 26
  %7114 = and i32 %7113, 4
  %7115 = lshr i32 %6985, 21
  %7116 = and i32 %7115, 16
  %7117 = lshr i32 %6985, 25
  %7118 = and i32 %7117, 64
  %7119 = or i32 %7118, %7110
  %7120 = or i32 %7119, %7116
  %7121 = or i32 %7120, %7112
  %7122 = or i32 %7121, %7114
  %7123 = zext i32 %7122 to i64
  %7124 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %7123
  %7125 = load i8, i8* %7124, align 1
  %7126 = zext i8 %7125 to i64
  %7127 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %7126
  %7128 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %7127, align 8
  %7129 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 0
  %7130 = load i32, i32* %7129, align 8
  %7131 = sub i32 %7101, %7130
  %7132 = lshr i32 %7100, 16
  %7133 = icmp ult i32 %7132, %7130
  br i1 %7133, label %7134, label %7178

7134:                                             ; preds = %7105
  %7135 = icmp ult i32 %7131, %7130
  %7136 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 1
  %7137 = load i32, i32* %7136, align 4
  %7138 = icmp eq i32 %7137, 0
  %7139 = zext i1 %7138 to i32
  %7140 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 3
  %7141 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 2
  %7142 = select i1 %7135, %struct.opj_mqc_state** %7141, %struct.opj_mqc_state** %7140
  %7143 = select i1 %7135, i32 %7137, i32 %7139
  %7144 = bitcast %struct.opj_mqc_state** %7142 to i64*
  %7145 = load i64, i64* %7144, align 8
  %7146 = bitcast %struct.opj_mqc_state** %7127 to i64*
  store i64 %7145, i64* %7146, align 8
  br label %7147

7147:                                             ; preds = %7171, %7134
  %7148 = phi i32 [ %7100, %7134 ], [ %7175, %7171 ]
  %7149 = phi i32 [ %7130, %7134 ], [ %7174, %7171 ]
  %7150 = phi i32 [ %7102, %7134 ], [ %7176, %7171 ]
  %7151 = icmp eq i32 %7150, 0
  br i1 %7151, label %7152, label %7171

7152:                                             ; preds = %7147
  %7153 = load i8*, i8** %4871, align 8
  %7154 = getelementptr inbounds i8, i8* %7153, i64 1
  %7155 = load i8, i8* %7154, align 1
  %7156 = zext i8 %7155 to i32
  %7157 = load i8, i8* %7153, align 1
  %7158 = icmp eq i8 %7157, -1
  br i1 %7158, label %7159, label %7168

7159:                                             ; preds = %7152
  %7160 = icmp ugt i8 %7155, -113
  br i1 %7160, label %7161, label %7165

7161:                                             ; preds = %7159
  %7162 = add i32 %7148, 65280
  %7163 = load i32, i32* %4872, align 4
  %7164 = add i32 %7163, 1
  store i32 %7164, i32* %4872, align 4
  br label %7171

7165:                                             ; preds = %7159
  store i8* %7154, i8** %4871, align 8
  %7166 = shl nuw nsw i32 %7156, 9
  %7167 = add i32 %7166, %7148
  br label %7171

7168:                                             ; preds = %7152
  store i8* %7154, i8** %4871, align 8
  %7169 = shl nuw nsw i32 %7156, 8
  %7170 = add i32 %7169, %7148
  br label %7171

7171:                                             ; preds = %7168, %7165, %7161, %7147
  %7172 = phi i32 [ %7148, %7147 ], [ %7162, %7161 ], [ %7167, %7165 ], [ %7170, %7168 ]
  %7173 = phi i32 [ %7150, %7147 ], [ 8, %7161 ], [ 7, %7165 ], [ 8, %7168 ]
  %7174 = shl i32 %7149, 1
  %7175 = shl i32 %7172, 1
  %7176 = add i32 %7173, -1
  %7177 = icmp ult i32 %7174, 32768
  br i1 %7177, label %7147, label %7230

7178:                                             ; preds = %7105
  %7179 = shl i32 %7130, 16
  %7180 = sub i32 %7100, %7179
  %7181 = trunc i32 %7131 to i16
  %7182 = icmp sgt i16 %7181, -1
  br i1 %7182, label %7183, label %7227

7183:                                             ; preds = %7178
  %7184 = icmp ult i32 %7131, %7130
  %7185 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 1
  %7186 = load i32, i32* %7185, align 4
  %7187 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 2
  %7188 = icmp eq i32 %7186, 0
  %7189 = zext i1 %7188 to i32
  %7190 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 3
  %7191 = select i1 %7184, %struct.opj_mqc_state** %7190, %struct.opj_mqc_state** %7187
  %7192 = select i1 %7184, i32 %7189, i32 %7186
  %7193 = bitcast %struct.opj_mqc_state** %7191 to i64*
  %7194 = load i64, i64* %7193, align 8
  %7195 = bitcast %struct.opj_mqc_state** %7127 to i64*
  store i64 %7194, i64* %7195, align 8
  br label %7196

7196:                                             ; preds = %7220, %7183
  %7197 = phi i32 [ %7180, %7183 ], [ %7224, %7220 ]
  %7198 = phi i32 [ %7131, %7183 ], [ %7223, %7220 ]
  %7199 = phi i32 [ %7102, %7183 ], [ %7225, %7220 ]
  %7200 = icmp eq i32 %7199, 0
  br i1 %7200, label %7201, label %7220

7201:                                             ; preds = %7196
  %7202 = load i8*, i8** %4871, align 8
  %7203 = getelementptr inbounds i8, i8* %7202, i64 1
  %7204 = load i8, i8* %7203, align 1
  %7205 = zext i8 %7204 to i32
  %7206 = load i8, i8* %7202, align 1
  %7207 = icmp eq i8 %7206, -1
  br i1 %7207, label %7208, label %7217

7208:                                             ; preds = %7201
  %7209 = icmp ugt i8 %7204, -113
  br i1 %7209, label %7210, label %7214

7210:                                             ; preds = %7208
  %7211 = add i32 %7197, 65280
  %7212 = load i32, i32* %4872, align 4
  %7213 = add i32 %7212, 1
  store i32 %7213, i32* %4872, align 4
  br label %7220

7214:                                             ; preds = %7208
  store i8* %7203, i8** %4871, align 8
  %7215 = shl nuw nsw i32 %7205, 9
  %7216 = add i32 %7215, %7197
  br label %7220

7217:                                             ; preds = %7201
  store i8* %7203, i8** %4871, align 8
  %7218 = shl nuw nsw i32 %7205, 8
  %7219 = add i32 %7218, %7197
  br label %7220

7220:                                             ; preds = %7217, %7214, %7210, %7196
  %7221 = phi i32 [ %7197, %7196 ], [ %7211, %7210 ], [ %7216, %7214 ], [ %7219, %7217 ]
  %7222 = phi i32 [ %7199, %7196 ], [ 8, %7210 ], [ 7, %7214 ], [ 8, %7217 ]
  %7223 = shl i32 %7198, 1
  %7224 = shl i32 %7221, 1
  %7225 = add i32 %7222, -1
  %7226 = icmp ult i32 %7223, 32768
  br i1 %7226, label %7196, label %7230

7227:                                             ; preds = %7178
  %7228 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7128, i64 0, i32 1
  %7229 = load i32, i32* %7228, align 4
  br label %7230

7230:                                             ; preds = %7220, %7171, %7227
  %7231 = phi i32 [ %7180, %7227 ], [ %7175, %7171 ], [ %7224, %7220 ]
  %7232 = phi i32 [ %7131, %7227 ], [ %7174, %7171 ], [ %7223, %7220 ]
  %7233 = phi i32 [ %7102, %7227 ], [ %7176, %7171 ], [ %7225, %7220 ]
  %7234 = phi i32 [ %7229, %7227 ], [ %7143, %7171 ], [ %7192, %7220 ]
  %7235 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %7123
  %7236 = load i8, i8* %7235, align 1
  %7237 = zext i8 %7236 to i32
  %7238 = xor i32 %7234, %7237
  %7239 = icmp eq i32 %7238, 0
  %7240 = select i1 %7239, i32 %4864, i32 %4873
  %7241 = getelementptr inbounds i32, i32* %4894, i64 %4878
  store i32 %7240, i32* %7241, align 4
  %7242 = load i32, i32* %7106, align 4
  %7243 = or i32 %7242, 16384
  store i32 %7243, i32* %7106, align 4
  %7244 = shl i32 %7238, 28
  %7245 = or i32 %6985, %7244
  %7246 = or i32 %7245, 8192
  %7247 = load i32, i32* %7108, align 4
  %7248 = or i32 %7247, 4096
  store i32 %7248, i32* %7108, align 4
  %7249 = load i32, i32* %4, align 8
  %7250 = add i32 %7249, 2
  %7251 = zext i32 %7250 to i64
  %7252 = getelementptr inbounds i32, i32* %4895, i64 %7251
  %7253 = shl i32 %7238, 18
  %7254 = load i32, i32* %7252, align 4
  %7255 = or i32 %7253, %7254
  %7256 = or i32 %7255, 2
  store i32 %7256, i32* %7252, align 4
  %7257 = getelementptr inbounds i32, i32* %7252, i64 -1
  %7258 = load i32, i32* %7257, align 4
  %7259 = or i32 %7258, 4
  store i32 %7259, i32* %7257, align 4
  %7260 = getelementptr inbounds i32, i32* %7252, i64 1
  %7261 = load i32, i32* %7260, align 4
  %7262 = or i32 %7261, 1
  store i32 %7262, i32* %7260, align 4
  br label %7263

7263:                                             ; preds = %7230, %7099, %6980, %6147, %6011, %5223
  %7264 = phi %struct.opj_mqc_state** [ %6981, %6980 ], [ %7127, %7230 ], [ %6996, %7099 ], [ %5908, %6011 ], [ %6044, %6147 ], [ %4881, %5223 ]
  %7265 = phi i32 [ %6982, %6980 ], [ %7231, %7230 ], [ %7100, %7099 ], [ %6012, %6011 ], [ %6148, %6147 ], [ %5224, %5223 ]
  %7266 = phi i32 [ %6983, %6980 ], [ %7232, %7230 ], [ %7101, %7099 ], [ %6013, %6011 ], [ %6149, %6147 ], [ %5225, %5223 ]
  %7267 = phi i32 [ %6984, %6980 ], [ %7233, %7230 ], [ %7102, %7099 ], [ %6014, %6011 ], [ %6150, %6147 ], [ %5226, %5223 ]
  %7268 = phi i32 [ %6985, %6980 ], [ %7246, %7230 ], [ %6985, %7099 ], [ %5900, %6011 ], [ %6163, %6147 ], [ 0, %5223 ]
  %7269 = and i32 %7268, -1226833921
  store i32 %7269, i32* %4895, align 4
  br label %7270

7270:                                             ; preds = %7263, %5005
  %7271 = phi %struct.opj_mqc_state** [ %7264, %7263 ], [ %4879, %5005 ]
  %7272 = phi i32 [ %7265, %7263 ], [ %5006, %5005 ]
  %7273 = phi i32 [ %7266, %7263 ], [ %5007, %5005 ]
  %7274 = phi i32 [ %7267, %7263 ], [ %5008, %5005 ]
  %7275 = add nuw i32 %4893, 1
  %7276 = getelementptr inbounds i32, i32* %4894, i64 1
  %7277 = getelementptr inbounds i32, i32* %4895, i64 1
  %7278 = icmp eq i32 %7275, %5
  br i1 %7278, label %7279, label %4892

7279:                                             ; preds = %7270
  %7280 = load i32, i32* %4865, align 4
  br label %7281

7281:                                             ; preds = %7279, %4883
  %7282 = phi i32 [ %4884, %4883 ], [ %7280, %7279 ]
  %7283 = phi %struct.opj_mqc_state** [ %4891, %4883 ], [ %7271, %7279 ]
  %7284 = phi i32 [ %4890, %4883 ], [ %7272, %7279 ]
  %7285 = phi i32 [ %4889, %4883 ], [ %7273, %7279 ]
  %7286 = phi i32 [ %4888, %4883 ], [ %7274, %7279 ]
  %7287 = phi i32* [ %4887, %4883 ], [ %7277, %7279 ]
  %7288 = phi i32* [ %4886, %4883 ], [ %7276, %7279 ]
  %7289 = add nuw i32 %4885, 4
  %7290 = getelementptr inbounds i32, i32* %7288, i64 %4878
  %7291 = getelementptr inbounds i32, i32* %7287, i64 2
  %7292 = and i32 %7282, -4
  %7293 = icmp ult i32 %7289, %7292
  br i1 %7293, label %4883, label %7294

7294:                                             ; preds = %7281, %4867
  %7295 = phi %struct.opj_mqc_state** [ %4855, %4867 ], [ %7283, %7281 ]
  %7296 = phi i32 [ %4857, %4867 ], [ %7284, %7281 ]
  %7297 = phi i32 [ %4859, %4867 ], [ %7285, %7281 ]
  %7298 = phi i32 [ %4861, %4867 ], [ %7286, %7281 ]
  %7299 = phi i32* [ %4853, %4867 ], [ %7291, %7281 ]
  %7300 = phi i32* [ %14, %4867 ], [ %7290, %7281 ]
  %7301 = phi i32 [ 0, %4867 ], [ %7289, %7281 ]
  %7302 = phi i32 [ %8, %4867 ], [ %7282, %7281 ]
  store %struct.opj_mqc_state** %7295, %struct.opj_mqc_state*** %4854, align 8
  store i32 %7296, i32* %4856, align 8
  store i32 %7297, i32* %4858, align 4
  store i32 %7298, i32* %4860, align 8
  %7303 = icmp ult i32 %7301, %7302
  %7304 = icmp ne i32 %5, 0
  %7305 = and i1 %7304, %7303
  br i1 %7305, label %7306, label %9827

7306:                                             ; preds = %7294, %7328
  %7307 = phi i32 [ %7331, %7328 ], [ %7302, %7294 ]
  %7308 = phi i32 [ %7326, %7328 ], [ 0, %7294 ]
  %7309 = phi i32* [ %7329, %7328 ], [ %7300, %7294 ]
  %7310 = phi i32* [ %7330, %7328 ], [ %7299, %7294 ]
  %7311 = icmp eq i32 %7307, %7301
  br i1 %7311, label %7323, label %7312

7312:                                             ; preds = %7306, %7312
  %7313 = phi i64 [ %7318, %7312 ], [ 0, %7306 ]
  %7314 = trunc i64 %7313 to i32
  %7315 = mul i32 %5, %7314
  %7316 = zext i32 %7315 to i64
  %7317 = getelementptr inbounds i32, i32* %7309, i64 %7316
  tail call fastcc void @opj_t1_dec_clnpass_step(%struct.opj_t1* %0, i32* %7310, i32* %7317, i32 %4864, i32 %7314, i32 1) #7
  %7318 = add nuw nsw i64 %7313, 1
  %7319 = load i32, i32* %4865, align 4
  %7320 = sub i32 %7319, %7301
  %7321 = zext i32 %7320 to i64
  %7322 = icmp ult i64 %7318, %7321
  br i1 %7322, label %7312, label %7323

7323:                                             ; preds = %7312, %7306
  %7324 = load i32, i32* %7310, align 4
  %7325 = and i32 %7324, -1226833921
  store i32 %7325, i32* %7310, align 4
  %7326 = add nuw i32 %7308, 1
  %7327 = icmp eq i32 %7326, %5
  br i1 %7327, label %9827, label %7328

7328:                                             ; preds = %7323
  %7329 = getelementptr inbounds i32, i32* %7309, i64 1
  %7330 = getelementptr inbounds i32, i32* %7310, i64 1
  %7331 = load i32, i32* %4865, align 4
  br label %7306

7332:                                             ; preds = %4850
  br i1 %4866, label %7333, label %9789

7333:                                             ; preds = %7332
  %7334 = icmp eq i32 %5, 0
  %7335 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %7336 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %7337 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %7338 = sub nsw i32 0, %4864
  %7339 = zext i32 %5 to i64
  %7340 = shl i32 %5, 1
  %7341 = zext i32 %7340 to i64
  %7342 = mul i32 %5, 3
  %7343 = zext i32 %7342 to i64
  %7344 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 17
  %7345 = bitcast %struct.opj_mqc_state** %7344 to i64*
  %7346 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 18
  %7347 = bitcast %struct.opj_mqc_state** %7346 to i64*
  br label %7348

7348:                                             ; preds = %9776, %7333
  %7349 = phi i32 [ %8, %7333 ], [ %9777, %9776 ]
  %7350 = phi i32 [ 0, %7333 ], [ %9784, %9776 ]
  %7351 = phi i32* [ %14, %7333 ], [ %9785, %9776 ]
  %7352 = phi i32* [ %4853, %7333 ], [ %9786, %9776 ]
  %7353 = phi %struct.opj_mqc_state** [ %4855, %7333 ], [ %9781, %9776 ]
  %7354 = phi i32 [ %4857, %7333 ], [ %9780, %9776 ]
  %7355 = phi i32 [ %4861, %7333 ], [ %9779, %9776 ]
  %7356 = phi i32 [ %4859, %7333 ], [ %9778, %9776 ]
  br i1 %7334, label %9776, label %7357

7357:                                             ; preds = %7348, %9765
  %7358 = phi i32 [ %9770, %9765 ], [ 0, %7348 ]
  %7359 = phi i32* [ %9771, %9765 ], [ %7351, %7348 ]
  %7360 = phi i32* [ %9772, %9765 ], [ %7352, %7348 ]
  %7361 = phi %struct.opj_mqc_state** [ %9769, %9765 ], [ %7353, %7348 ]
  %7362 = phi i32 [ %9768, %9765 ], [ %7354, %7348 ]
  %7363 = phi i32 [ %9767, %9765 ], [ %7355, %7348 ]
  %7364 = phi i32 [ %9766, %9765 ], [ %7356, %7348 ]
  %7365 = load i32, i32* %7360, align 4
  %7366 = icmp eq i32 %7365, 0
  br i1 %7366, label %7367, label %8660

7367:                                             ; preds = %7357
  %7368 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %7344, align 8
  %7369 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 0
  %7370 = load i32, i32* %7369, align 8
  %7371 = sub i32 %7364, %7370
  %7372 = lshr i32 %7362, 16
  %7373 = icmp ult i32 %7372, %7370
  br i1 %7373, label %7374, label %7415

7374:                                             ; preds = %7367
  %7375 = icmp ult i32 %7371, %7370
  %7376 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 1
  %7377 = load i32, i32* %7376, align 4
  %7378 = icmp eq i32 %7377, 0
  %7379 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 3
  %7380 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 2
  %7381 = select i1 %7375, %struct.opj_mqc_state** %7380, %struct.opj_mqc_state** %7379
  %7382 = bitcast %struct.opj_mqc_state** %7381 to i64*
  %7383 = load i64, i64* %7382, align 8
  store i64 %7383, i64* %7345, align 8
  br label %7384

7384:                                             ; preds = %7408, %7374
  %7385 = phi i32 [ %7370, %7374 ], [ %7411, %7408 ]
  %7386 = phi i32 [ %7363, %7374 ], [ %7413, %7408 ]
  %7387 = phi i32 [ %7362, %7374 ], [ %7412, %7408 ]
  %7388 = icmp eq i32 %7386, 0
  br i1 %7388, label %7389, label %7408

7389:                                             ; preds = %7384
  %7390 = load i8*, i8** %7336, align 8
  %7391 = getelementptr inbounds i8, i8* %7390, i64 1
  %7392 = load i8, i8* %7391, align 1
  %7393 = zext i8 %7392 to i32
  %7394 = load i8, i8* %7390, align 1
  %7395 = icmp eq i8 %7394, -1
  br i1 %7395, label %7396, label %7405

7396:                                             ; preds = %7389
  %7397 = icmp ugt i8 %7392, -113
  br i1 %7397, label %7398, label %7402

7398:                                             ; preds = %7396
  %7399 = add i32 %7387, 65280
  %7400 = load i32, i32* %7337, align 4
  %7401 = add i32 %7400, 1
  store i32 %7401, i32* %7337, align 4
  br label %7408

7402:                                             ; preds = %7396
  store i8* %7391, i8** %7336, align 8
  %7403 = shl nuw nsw i32 %7393, 9
  %7404 = add i32 %7403, %7387
  br label %7408

7405:                                             ; preds = %7389
  store i8* %7391, i8** %7336, align 8
  %7406 = shl nuw nsw i32 %7393, 8
  %7407 = add i32 %7406, %7387
  br label %7408

7408:                                             ; preds = %7405, %7402, %7398, %7384
  %7409 = phi i32 [ %7386, %7384 ], [ 8, %7398 ], [ 7, %7402 ], [ 8, %7405 ]
  %7410 = phi i32 [ %7387, %7384 ], [ %7399, %7398 ], [ %7404, %7402 ], [ %7407, %7405 ]
  %7411 = shl i32 %7385, 1
  %7412 = shl i32 %7410, 1
  %7413 = add i32 %7409, -1
  %7414 = icmp ult i32 %7411, 32768
  br i1 %7414, label %7384, label %7464

7415:                                             ; preds = %7367
  %7416 = shl i32 %7370, 16
  %7417 = sub i32 %7362, %7416
  %7418 = trunc i32 %7371 to i16
  %7419 = icmp sgt i16 %7418, -1
  br i1 %7419, label %7420, label %7461

7420:                                             ; preds = %7415
  %7421 = icmp ult i32 %7371, %7370
  %7422 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 1
  %7423 = load i32, i32* %7422, align 4
  %7424 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 2
  %7425 = icmp eq i32 %7423, 0
  %7426 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 3
  %7427 = select i1 %7421, %struct.opj_mqc_state** %7426, %struct.opj_mqc_state** %7424
  %7428 = bitcast %struct.opj_mqc_state** %7427 to i64*
  %7429 = load i64, i64* %7428, align 8
  store i64 %7429, i64* %7345, align 8
  br label %7430

7430:                                             ; preds = %7454, %7420
  %7431 = phi i32 [ %7371, %7420 ], [ %7457, %7454 ]
  %7432 = phi i32 [ %7363, %7420 ], [ %7459, %7454 ]
  %7433 = phi i32 [ %7417, %7420 ], [ %7458, %7454 ]
  %7434 = icmp eq i32 %7432, 0
  br i1 %7434, label %7435, label %7454

7435:                                             ; preds = %7430
  %7436 = load i8*, i8** %7336, align 8
  %7437 = getelementptr inbounds i8, i8* %7436, i64 1
  %7438 = load i8, i8* %7437, align 1
  %7439 = zext i8 %7438 to i32
  %7440 = load i8, i8* %7436, align 1
  %7441 = icmp eq i8 %7440, -1
  br i1 %7441, label %7442, label %7451

7442:                                             ; preds = %7435
  %7443 = icmp ugt i8 %7438, -113
  br i1 %7443, label %7444, label %7448

7444:                                             ; preds = %7442
  %7445 = add i32 %7433, 65280
  %7446 = load i32, i32* %7337, align 4
  %7447 = add i32 %7446, 1
  store i32 %7447, i32* %7337, align 4
  br label %7454

7448:                                             ; preds = %7442
  store i8* %7437, i8** %7336, align 8
  %7449 = shl nuw nsw i32 %7439, 9
  %7450 = add i32 %7449, %7433
  br label %7454

7451:                                             ; preds = %7435
  store i8* %7437, i8** %7336, align 8
  %7452 = shl nuw nsw i32 %7439, 8
  %7453 = add i32 %7452, %7433
  br label %7454

7454:                                             ; preds = %7451, %7448, %7444, %7430
  %7455 = phi i32 [ %7432, %7430 ], [ 8, %7444 ], [ 7, %7448 ], [ 8, %7451 ]
  %7456 = phi i32 [ %7433, %7430 ], [ %7445, %7444 ], [ %7450, %7448 ], [ %7453, %7451 ]
  %7457 = shl i32 %7431, 1
  %7458 = shl i32 %7456, 1
  %7459 = add i32 %7455, -1
  %7460 = icmp ult i32 %7457, 32768
  br i1 %7460, label %7430, label %7467

7461:                                             ; preds = %7415
  %7462 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7368, i64 0, i32 1
  %7463 = load i32, i32* %7462, align 4
  br label %7470

7464:                                             ; preds = %7408
  %7465 = zext i1 %7378 to i32
  %7466 = select i1 %7375, i32 %7377, i32 %7465
  br label %7470

7467:                                             ; preds = %7454
  %7468 = zext i1 %7425 to i32
  %7469 = select i1 %7421, i32 %7468, i32 %7423
  br label %7470

7470:                                             ; preds = %7467, %7464, %7461
  %7471 = phi i32 [ %7371, %7461 ], [ %7411, %7464 ], [ %7457, %7467 ]
  %7472 = phi i32 [ %7363, %7461 ], [ %7413, %7464 ], [ %7459, %7467 ]
  %7473 = phi i32 [ %7463, %7461 ], [ %7466, %7464 ], [ %7469, %7467 ]
  %7474 = phi i32 [ %7417, %7461 ], [ %7412, %7464 ], [ %7458, %7467 ]
  %7475 = icmp eq i32 %7473, 0
  br i1 %7475, label %9765, label %7476

7476:                                             ; preds = %7470
  %7477 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %7346, align 8
  %7478 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 0
  %7479 = load i32, i32* %7478, align 8
  %7480 = sub i32 %7471, %7479
  %7481 = lshr i32 %7474, 16
  %7482 = icmp ult i32 %7481, %7479
  br i1 %7482, label %7483, label %7524

7483:                                             ; preds = %7476
  %7484 = icmp ult i32 %7480, %7479
  %7485 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 1
  %7486 = load i32, i32* %7485, align 4
  %7487 = icmp eq i32 %7486, 0
  %7488 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 3
  %7489 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 2
  %7490 = select i1 %7484, %struct.opj_mqc_state** %7489, %struct.opj_mqc_state** %7488
  %7491 = bitcast %struct.opj_mqc_state** %7490 to i64*
  %7492 = load i64, i64* %7491, align 8
  store i64 %7492, i64* %7347, align 8
  br label %7493

7493:                                             ; preds = %7517, %7483
  %7494 = phi i32 [ %7479, %7483 ], [ %7520, %7517 ]
  %7495 = phi i32 [ %7472, %7483 ], [ %7522, %7517 ]
  %7496 = phi i32 [ %7474, %7483 ], [ %7521, %7517 ]
  %7497 = icmp eq i32 %7495, 0
  br i1 %7497, label %7498, label %7517

7498:                                             ; preds = %7493
  %7499 = load i8*, i8** %7336, align 8
  %7500 = getelementptr inbounds i8, i8* %7499, i64 1
  %7501 = load i8, i8* %7500, align 1
  %7502 = zext i8 %7501 to i32
  %7503 = load i8, i8* %7499, align 1
  %7504 = icmp eq i8 %7503, -1
  br i1 %7504, label %7505, label %7514

7505:                                             ; preds = %7498
  %7506 = icmp ugt i8 %7501, -113
  br i1 %7506, label %7507, label %7511

7507:                                             ; preds = %7505
  %7508 = add i32 %7496, 65280
  %7509 = load i32, i32* %7337, align 4
  %7510 = add i32 %7509, 1
  store i32 %7510, i32* %7337, align 4
  br label %7517

7511:                                             ; preds = %7505
  store i8* %7500, i8** %7336, align 8
  %7512 = shl nuw nsw i32 %7502, 9
  %7513 = add i32 %7512, %7496
  br label %7517

7514:                                             ; preds = %7498
  store i8* %7500, i8** %7336, align 8
  %7515 = shl nuw nsw i32 %7502, 8
  %7516 = add i32 %7515, %7496
  br label %7517

7517:                                             ; preds = %7514, %7511, %7507, %7493
  %7518 = phi i32 [ %7495, %7493 ], [ 8, %7507 ], [ 7, %7511 ], [ 8, %7514 ]
  %7519 = phi i32 [ %7496, %7493 ], [ %7508, %7507 ], [ %7513, %7511 ], [ %7516, %7514 ]
  %7520 = shl i32 %7494, 1
  %7521 = shl i32 %7519, 1
  %7522 = add i32 %7518, -1
  %7523 = icmp ult i32 %7520, 32768
  br i1 %7523, label %7493, label %7573

7524:                                             ; preds = %7476
  %7525 = shl i32 %7479, 16
  %7526 = sub i32 %7474, %7525
  %7527 = trunc i32 %7480 to i16
  %7528 = icmp sgt i16 %7527, -1
  br i1 %7528, label %7529, label %7570

7529:                                             ; preds = %7524
  %7530 = icmp ult i32 %7480, %7479
  %7531 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 1
  %7532 = load i32, i32* %7531, align 4
  %7533 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 2
  %7534 = icmp eq i32 %7532, 0
  %7535 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 3
  %7536 = select i1 %7530, %struct.opj_mqc_state** %7535, %struct.opj_mqc_state** %7533
  %7537 = bitcast %struct.opj_mqc_state** %7536 to i64*
  %7538 = load i64, i64* %7537, align 8
  store i64 %7538, i64* %7347, align 8
  br label %7539

7539:                                             ; preds = %7563, %7529
  %7540 = phi i32 [ %7480, %7529 ], [ %7566, %7563 ]
  %7541 = phi i32 [ %7472, %7529 ], [ %7568, %7563 ]
  %7542 = phi i32 [ %7526, %7529 ], [ %7567, %7563 ]
  %7543 = icmp eq i32 %7541, 0
  br i1 %7543, label %7544, label %7563

7544:                                             ; preds = %7539
  %7545 = load i8*, i8** %7336, align 8
  %7546 = getelementptr inbounds i8, i8* %7545, i64 1
  %7547 = load i8, i8* %7546, align 1
  %7548 = zext i8 %7547 to i32
  %7549 = load i8, i8* %7545, align 1
  %7550 = icmp eq i8 %7549, -1
  br i1 %7550, label %7551, label %7560

7551:                                             ; preds = %7544
  %7552 = icmp ugt i8 %7547, -113
  br i1 %7552, label %7553, label %7557

7553:                                             ; preds = %7551
  %7554 = add i32 %7542, 65280
  %7555 = load i32, i32* %7337, align 4
  %7556 = add i32 %7555, 1
  store i32 %7556, i32* %7337, align 4
  br label %7563

7557:                                             ; preds = %7551
  store i8* %7546, i8** %7336, align 8
  %7558 = shl nuw nsw i32 %7548, 9
  %7559 = add i32 %7558, %7542
  br label %7563

7560:                                             ; preds = %7544
  store i8* %7546, i8** %7336, align 8
  %7561 = shl nuw nsw i32 %7548, 8
  %7562 = add i32 %7561, %7542
  br label %7563

7563:                                             ; preds = %7560, %7557, %7553, %7539
  %7564 = phi i32 [ %7541, %7539 ], [ 8, %7553 ], [ 7, %7557 ], [ 8, %7560 ]
  %7565 = phi i32 [ %7542, %7539 ], [ %7554, %7553 ], [ %7559, %7557 ], [ %7562, %7560 ]
  %7566 = shl i32 %7540, 1
  %7567 = shl i32 %7565, 1
  %7568 = add i32 %7564, -1
  %7569 = icmp ult i32 %7566, 32768
  br i1 %7569, label %7539, label %7577

7570:                                             ; preds = %7524
  %7571 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7477, i64 0, i32 1
  %7572 = load i32, i32* %7571, align 4
  br label %7581

7573:                                             ; preds = %7517
  %7574 = zext i1 %7487 to i32
  %7575 = select i1 %7484, i32 %7486, i32 %7574
  %7576 = inttoptr i64 %7492 to %struct.opj_mqc_state*
  br label %7581

7577:                                             ; preds = %7563
  %7578 = zext i1 %7534 to i32
  %7579 = select i1 %7530, i32 %7578, i32 %7532
  %7580 = inttoptr i64 %7538 to %struct.opj_mqc_state*
  br label %7581

7581:                                             ; preds = %7577, %7573, %7570
  %7582 = phi %struct.opj_mqc_state* [ %7477, %7570 ], [ %7576, %7573 ], [ %7580, %7577 ]
  %7583 = phi i32 [ %7480, %7570 ], [ %7520, %7573 ], [ %7566, %7577 ]
  %7584 = phi i32 [ %7472, %7570 ], [ %7522, %7573 ], [ %7568, %7577 ]
  %7585 = phi i32 [ %7526, %7570 ], [ %7521, %7573 ], [ %7567, %7577 ]
  %7586 = phi i32 [ %7572, %7570 ], [ %7575, %7573 ], [ %7579, %7577 ]
  %7587 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 0
  %7588 = load i32, i32* %7587, align 8
  %7589 = sub i32 %7583, %7588
  %7590 = lshr i32 %7585, 16
  %7591 = icmp ult i32 %7590, %7588
  br i1 %7591, label %7592, label %7633

7592:                                             ; preds = %7581
  %7593 = icmp ult i32 %7589, %7588
  %7594 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 1
  %7595 = load i32, i32* %7594, align 4
  %7596 = icmp eq i32 %7595, 0
  %7597 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 3
  %7598 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 2
  %7599 = select i1 %7593, %struct.opj_mqc_state** %7598, %struct.opj_mqc_state** %7597
  %7600 = bitcast %struct.opj_mqc_state** %7599 to i64*
  %7601 = load i64, i64* %7600, align 8
  store i64 %7601, i64* %7347, align 8
  br label %7602

7602:                                             ; preds = %7626, %7592
  %7603 = phi i32 [ %7588, %7592 ], [ %7629, %7626 ]
  %7604 = phi i32 [ %7584, %7592 ], [ %7631, %7626 ]
  %7605 = phi i32 [ %7585, %7592 ], [ %7630, %7626 ]
  %7606 = icmp eq i32 %7604, 0
  br i1 %7606, label %7607, label %7626

7607:                                             ; preds = %7602
  %7608 = load i8*, i8** %7336, align 8
  %7609 = getelementptr inbounds i8, i8* %7608, i64 1
  %7610 = load i8, i8* %7609, align 1
  %7611 = zext i8 %7610 to i32
  %7612 = load i8, i8* %7608, align 1
  %7613 = icmp eq i8 %7612, -1
  br i1 %7613, label %7614, label %7623

7614:                                             ; preds = %7607
  %7615 = icmp ugt i8 %7610, -113
  br i1 %7615, label %7616, label %7620

7616:                                             ; preds = %7614
  %7617 = add i32 %7605, 65280
  %7618 = load i32, i32* %7337, align 4
  %7619 = add i32 %7618, 1
  store i32 %7619, i32* %7337, align 4
  br label %7626

7620:                                             ; preds = %7614
  store i8* %7609, i8** %7336, align 8
  %7621 = shl nuw nsw i32 %7611, 9
  %7622 = add i32 %7621, %7605
  br label %7626

7623:                                             ; preds = %7607
  store i8* %7609, i8** %7336, align 8
  %7624 = shl nuw nsw i32 %7611, 8
  %7625 = add i32 %7624, %7605
  br label %7626

7626:                                             ; preds = %7623, %7620, %7616, %7602
  %7627 = phi i32 [ %7604, %7602 ], [ 8, %7616 ], [ 7, %7620 ], [ 8, %7623 ]
  %7628 = phi i32 [ %7605, %7602 ], [ %7617, %7616 ], [ %7622, %7620 ], [ %7625, %7623 ]
  %7629 = shl i32 %7603, 1
  %7630 = shl i32 %7628, 1
  %7631 = add i32 %7627, -1
  %7632 = icmp ult i32 %7629, 32768
  br i1 %7632, label %7602, label %7682

7633:                                             ; preds = %7581
  %7634 = shl i32 %7588, 16
  %7635 = sub i32 %7585, %7634
  %7636 = trunc i32 %7589 to i16
  %7637 = icmp sgt i16 %7636, -1
  br i1 %7637, label %7638, label %7679

7638:                                             ; preds = %7633
  %7639 = icmp ult i32 %7589, %7588
  %7640 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 1
  %7641 = load i32, i32* %7640, align 4
  %7642 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 2
  %7643 = icmp eq i32 %7641, 0
  %7644 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 3
  %7645 = select i1 %7639, %struct.opj_mqc_state** %7644, %struct.opj_mqc_state** %7642
  %7646 = bitcast %struct.opj_mqc_state** %7645 to i64*
  %7647 = load i64, i64* %7646, align 8
  store i64 %7647, i64* %7347, align 8
  br label %7648

7648:                                             ; preds = %7672, %7638
  %7649 = phi i32 [ %7589, %7638 ], [ %7675, %7672 ]
  %7650 = phi i32 [ %7584, %7638 ], [ %7677, %7672 ]
  %7651 = phi i32 [ %7635, %7638 ], [ %7676, %7672 ]
  %7652 = icmp eq i32 %7650, 0
  br i1 %7652, label %7653, label %7672

7653:                                             ; preds = %7648
  %7654 = load i8*, i8** %7336, align 8
  %7655 = getelementptr inbounds i8, i8* %7654, i64 1
  %7656 = load i8, i8* %7655, align 1
  %7657 = zext i8 %7656 to i32
  %7658 = load i8, i8* %7654, align 1
  %7659 = icmp eq i8 %7658, -1
  br i1 %7659, label %7660, label %7669

7660:                                             ; preds = %7653
  %7661 = icmp ugt i8 %7656, -113
  br i1 %7661, label %7662, label %7666

7662:                                             ; preds = %7660
  %7663 = add i32 %7651, 65280
  %7664 = load i32, i32* %7337, align 4
  %7665 = add i32 %7664, 1
  store i32 %7665, i32* %7337, align 4
  br label %7672

7666:                                             ; preds = %7660
  store i8* %7655, i8** %7336, align 8
  %7667 = shl nuw nsw i32 %7657, 9
  %7668 = add i32 %7667, %7651
  br label %7672

7669:                                             ; preds = %7653
  store i8* %7655, i8** %7336, align 8
  %7670 = shl nuw nsw i32 %7657, 8
  %7671 = add i32 %7670, %7651
  br label %7672

7672:                                             ; preds = %7669, %7666, %7662, %7648
  %7673 = phi i32 [ %7650, %7648 ], [ 8, %7662 ], [ 7, %7666 ], [ 8, %7669 ]
  %7674 = phi i32 [ %7651, %7648 ], [ %7663, %7662 ], [ %7668, %7666 ], [ %7671, %7669 ]
  %7675 = shl i32 %7649, 1
  %7676 = shl i32 %7674, 1
  %7677 = add i32 %7673, -1
  %7678 = icmp ult i32 %7675, 32768
  br i1 %7678, label %7648, label %7685

7679:                                             ; preds = %7633
  %7680 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7582, i64 0, i32 1
  %7681 = load i32, i32* %7680, align 4
  br label %7688

7682:                                             ; preds = %7626
  %7683 = zext i1 %7596 to i32
  %7684 = select i1 %7593, i32 %7595, i32 %7683
  br label %7688

7685:                                             ; preds = %7672
  %7686 = zext i1 %7643 to i32
  %7687 = select i1 %7639, i32 %7686, i32 %7641
  br label %7688

7688:                                             ; preds = %7685, %7682, %7679
  %7689 = phi i32 [ %7589, %7679 ], [ %7629, %7682 ], [ %7675, %7685 ]
  %7690 = phi i32 [ %7584, %7679 ], [ %7631, %7682 ], [ %7677, %7685 ]
  %7691 = phi i32 [ %7681, %7679 ], [ %7684, %7682 ], [ %7687, %7685 ]
  %7692 = phi i32 [ %7635, %7679 ], [ %7630, %7682 ], [ %7676, %7685 ]
  %7693 = shl i32 %7586, 1
  %7694 = or i32 %7691, %7693
  switch i32 %7694, label %9758 [
    i32 0, label %7695
    i32 1, label %7957
    i32 2, label %8227
    i32 3, label %8497
  ]

7695:                                             ; preds = %7688
  %7696 = getelementptr inbounds i32, i32* %7360, i64 -1
  %7697 = load i32, i32* %7696, align 4
  %7698 = getelementptr inbounds i32, i32* %7360, i64 1
  %7699 = load i32, i32* %7698, align 4
  %7700 = lshr i32 %7697, 19
  %7701 = and i32 %7700, 1
  %7702 = lshr i32 %7699, 17
  %7703 = and i32 %7702, 4
  %7704 = or i32 %7703, %7701
  %7705 = zext i32 %7704 to i64
  %7706 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %7705
  %7707 = load i8, i8* %7706, align 1
  %7708 = zext i8 %7707 to i64
  %7709 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %7708
  %7710 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %7709, align 8
  %7711 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 0
  %7712 = load i32, i32* %7711, align 8
  %7713 = sub i32 %7689, %7712
  %7714 = lshr i32 %7692, 16
  %7715 = icmp ult i32 %7714, %7712
  br i1 %7715, label %7716, label %7760

7716:                                             ; preds = %7695
  %7717 = icmp ult i32 %7713, %7712
  %7718 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 1
  %7719 = load i32, i32* %7718, align 4
  %7720 = icmp eq i32 %7719, 0
  %7721 = zext i1 %7720 to i32
  %7722 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 3
  %7723 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 2
  %7724 = select i1 %7717, %struct.opj_mqc_state** %7723, %struct.opj_mqc_state** %7722
  %7725 = select i1 %7717, i32 %7719, i32 %7721
  %7726 = bitcast %struct.opj_mqc_state** %7724 to i64*
  %7727 = load i64, i64* %7726, align 8
  %7728 = bitcast %struct.opj_mqc_state** %7709 to i64*
  store i64 %7727, i64* %7728, align 8
  br label %7729

7729:                                             ; preds = %7753, %7716
  %7730 = phi i32 [ %7712, %7716 ], [ %7756, %7753 ]
  %7731 = phi i32 [ %7690, %7716 ], [ %7758, %7753 ]
  %7732 = phi i32 [ %7692, %7716 ], [ %7757, %7753 ]
  %7733 = icmp eq i32 %7731, 0
  br i1 %7733, label %7734, label %7753

7734:                                             ; preds = %7729
  %7735 = load i8*, i8** %7336, align 8
  %7736 = getelementptr inbounds i8, i8* %7735, i64 1
  %7737 = load i8, i8* %7736, align 1
  %7738 = zext i8 %7737 to i32
  %7739 = load i8, i8* %7735, align 1
  %7740 = icmp eq i8 %7739, -1
  br i1 %7740, label %7741, label %7750

7741:                                             ; preds = %7734
  %7742 = icmp ugt i8 %7737, -113
  br i1 %7742, label %7743, label %7747

7743:                                             ; preds = %7741
  %7744 = add i32 %7732, 65280
  %7745 = load i32, i32* %7337, align 4
  %7746 = add i32 %7745, 1
  store i32 %7746, i32* %7337, align 4
  br label %7753

7747:                                             ; preds = %7741
  store i8* %7736, i8** %7336, align 8
  %7748 = shl nuw nsw i32 %7738, 9
  %7749 = add i32 %7748, %7732
  br label %7753

7750:                                             ; preds = %7734
  store i8* %7736, i8** %7336, align 8
  %7751 = shl nuw nsw i32 %7738, 8
  %7752 = add i32 %7751, %7732
  br label %7753

7753:                                             ; preds = %7750, %7747, %7743, %7729
  %7754 = phi i32 [ %7731, %7729 ], [ 8, %7743 ], [ 7, %7747 ], [ 8, %7750 ]
  %7755 = phi i32 [ %7732, %7729 ], [ %7744, %7743 ], [ %7749, %7747 ], [ %7752, %7750 ]
  %7756 = shl i32 %7730, 1
  %7757 = shl i32 %7755, 1
  %7758 = add i32 %7754, -1
  %7759 = icmp ult i32 %7756, 32768
  br i1 %7759, label %7729, label %7812

7760:                                             ; preds = %7695
  %7761 = shl i32 %7712, 16
  %7762 = sub i32 %7692, %7761
  %7763 = trunc i32 %7713 to i16
  %7764 = icmp sgt i16 %7763, -1
  br i1 %7764, label %7765, label %7809

7765:                                             ; preds = %7760
  %7766 = icmp ult i32 %7713, %7712
  %7767 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 1
  %7768 = load i32, i32* %7767, align 4
  %7769 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 2
  %7770 = icmp eq i32 %7768, 0
  %7771 = zext i1 %7770 to i32
  %7772 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 3
  %7773 = select i1 %7766, %struct.opj_mqc_state** %7772, %struct.opj_mqc_state** %7769
  %7774 = select i1 %7766, i32 %7771, i32 %7768
  %7775 = bitcast %struct.opj_mqc_state** %7773 to i64*
  %7776 = load i64, i64* %7775, align 8
  %7777 = bitcast %struct.opj_mqc_state** %7709 to i64*
  store i64 %7776, i64* %7777, align 8
  br label %7778

7778:                                             ; preds = %7802, %7765
  %7779 = phi i32 [ %7713, %7765 ], [ %7805, %7802 ]
  %7780 = phi i32 [ %7690, %7765 ], [ %7807, %7802 ]
  %7781 = phi i32 [ %7762, %7765 ], [ %7806, %7802 ]
  %7782 = icmp eq i32 %7780, 0
  br i1 %7782, label %7783, label %7802

7783:                                             ; preds = %7778
  %7784 = load i8*, i8** %7336, align 8
  %7785 = getelementptr inbounds i8, i8* %7784, i64 1
  %7786 = load i8, i8* %7785, align 1
  %7787 = zext i8 %7786 to i32
  %7788 = load i8, i8* %7784, align 1
  %7789 = icmp eq i8 %7788, -1
  br i1 %7789, label %7790, label %7799

7790:                                             ; preds = %7783
  %7791 = icmp ugt i8 %7786, -113
  br i1 %7791, label %7792, label %7796

7792:                                             ; preds = %7790
  %7793 = add i32 %7781, 65280
  %7794 = load i32, i32* %7337, align 4
  %7795 = add i32 %7794, 1
  store i32 %7795, i32* %7337, align 4
  br label %7802

7796:                                             ; preds = %7790
  store i8* %7785, i8** %7336, align 8
  %7797 = shl nuw nsw i32 %7787, 9
  %7798 = add i32 %7797, %7781
  br label %7802

7799:                                             ; preds = %7783
  store i8* %7785, i8** %7336, align 8
  %7800 = shl nuw nsw i32 %7787, 8
  %7801 = add i32 %7800, %7781
  br label %7802

7802:                                             ; preds = %7799, %7796, %7792, %7778
  %7803 = phi i32 [ %7780, %7778 ], [ 8, %7792 ], [ 7, %7796 ], [ 8, %7799 ]
  %7804 = phi i32 [ %7781, %7778 ], [ %7793, %7792 ], [ %7798, %7796 ], [ %7801, %7799 ]
  %7805 = shl i32 %7779, 1
  %7806 = shl i32 %7804, 1
  %7807 = add i32 %7803, -1
  %7808 = icmp ult i32 %7805, 32768
  br i1 %7808, label %7778, label %7812

7809:                                             ; preds = %7760
  %7810 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7710, i64 0, i32 1
  %7811 = load i32, i32* %7810, align 4
  br label %7812

7812:                                             ; preds = %7802, %7753, %7809
  %7813 = phi i32 [ %7713, %7809 ], [ %7756, %7753 ], [ %7805, %7802 ]
  %7814 = phi i32 [ %7690, %7809 ], [ %7758, %7753 ], [ %7807, %7802 ]
  %7815 = phi i32 [ %7811, %7809 ], [ %7725, %7753 ], [ %7774, %7802 ]
  %7816 = phi i32 [ %7762, %7809 ], [ %7757, %7753 ], [ %7806, %7802 ]
  %7817 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %7705
  %7818 = load i8, i8* %7817, align 1
  %7819 = zext i8 %7818 to i32
  %7820 = xor i32 %7815, %7819
  %7821 = icmp eq i32 %7820, 0
  %7822 = select i1 %7821, i32 %4864, i32 %7338
  store i32 %7822, i32* %7359, align 4
  %7823 = load i32, i32* %7696, align 4
  %7824 = or i32 %7823, 32
  store i32 %7824, i32* %7696, align 4
  %7825 = shl i32 %7820, 19
  %7826 = or i32 %7825, 16
  %7827 = load i32, i32* %7698, align 4
  %7828 = or i32 %7827, 8
  store i32 %7828, i32* %7698, align 4
  %7829 = load i32, i32* %4, align 8
  %7830 = add i32 %7829, 2
  %7831 = zext i32 %7830 to i64
  %7832 = sub nsw i64 0, %7831
  %7833 = getelementptr inbounds i32, i32* %7360, i64 %7832
  %7834 = shl i32 %7820, 31
  %7835 = load i32, i32* %7833, align 4
  %7836 = or i32 %7834, %7835
  %7837 = or i32 %7836, 65536
  store i32 %7837, i32* %7833, align 4
  %7838 = getelementptr inbounds i32, i32* %7833, i64 -1
  %7839 = load i32, i32* %7838, align 4
  %7840 = or i32 %7839, 131072
  store i32 %7840, i32* %7838, align 4
  %7841 = getelementptr inbounds i32, i32* %7833, i64 1
  %7842 = load i32, i32* %7841, align 4
  %7843 = or i32 %7842, 32768
  store i32 %7843, i32* %7841, align 4
  %7844 = load i8*, i8** %7335, align 8
  %7845 = getelementptr inbounds i8, i8* %7844, i64 2
  %7846 = load i8, i8* %7845, align 1
  %7847 = zext i8 %7846 to i64
  %7848 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %7847
  %7849 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %7848, align 8
  %7850 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 0
  %7851 = load i32, i32* %7850, align 8
  %7852 = sub i32 %7813, %7851
  %7853 = lshr i32 %7816, 16
  %7854 = icmp ult i32 %7853, %7851
  br i1 %7854, label %7855, label %7899

7855:                                             ; preds = %7812
  %7856 = icmp ult i32 %7852, %7851
  %7857 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 1
  %7858 = load i32, i32* %7857, align 4
  %7859 = icmp eq i32 %7858, 0
  %7860 = zext i1 %7859 to i32
  %7861 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 3
  %7862 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 2
  %7863 = select i1 %7856, %struct.opj_mqc_state** %7862, %struct.opj_mqc_state** %7861
  %7864 = select i1 %7856, i32 %7858, i32 %7860
  %7865 = bitcast %struct.opj_mqc_state** %7863 to i64*
  %7866 = load i64, i64* %7865, align 8
  %7867 = bitcast %struct.opj_mqc_state** %7848 to i64*
  store i64 %7866, i64* %7867, align 8
  br label %7868

7868:                                             ; preds = %7892, %7855
  %7869 = phi i32 [ %7851, %7855 ], [ %7895, %7892 ]
  %7870 = phi i32 [ %7814, %7855 ], [ %7897, %7892 ]
  %7871 = phi i32 [ %7816, %7855 ], [ %7896, %7892 ]
  %7872 = icmp eq i32 %7870, 0
  br i1 %7872, label %7873, label %7892

7873:                                             ; preds = %7868
  %7874 = load i8*, i8** %7336, align 8
  %7875 = getelementptr inbounds i8, i8* %7874, i64 1
  %7876 = load i8, i8* %7875, align 1
  %7877 = zext i8 %7876 to i32
  %7878 = load i8, i8* %7874, align 1
  %7879 = icmp eq i8 %7878, -1
  br i1 %7879, label %7880, label %7889

7880:                                             ; preds = %7873
  %7881 = icmp ugt i8 %7876, -113
  br i1 %7881, label %7882, label %7886

7882:                                             ; preds = %7880
  %7883 = add i32 %7871, 65280
  %7884 = load i32, i32* %7337, align 4
  %7885 = add i32 %7884, 1
  store i32 %7885, i32* %7337, align 4
  br label %7892

7886:                                             ; preds = %7880
  store i8* %7875, i8** %7336, align 8
  %7887 = shl nuw nsw i32 %7877, 9
  %7888 = add i32 %7887, %7871
  br label %7892

7889:                                             ; preds = %7873
  store i8* %7875, i8** %7336, align 8
  %7890 = shl nuw nsw i32 %7877, 8
  %7891 = add i32 %7890, %7871
  br label %7892

7892:                                             ; preds = %7889, %7886, %7882, %7868
  %7893 = phi i32 [ %7870, %7868 ], [ 8, %7882 ], [ 7, %7886 ], [ 8, %7889 ]
  %7894 = phi i32 [ %7871, %7868 ], [ %7883, %7882 ], [ %7888, %7886 ], [ %7891, %7889 ]
  %7895 = shl i32 %7869, 1
  %7896 = shl i32 %7894, 1
  %7897 = add i32 %7893, -1
  %7898 = icmp ult i32 %7895, 32768
  br i1 %7898, label %7868, label %7951

7899:                                             ; preds = %7812
  %7900 = shl i32 %7851, 16
  %7901 = sub i32 %7816, %7900
  %7902 = trunc i32 %7852 to i16
  %7903 = icmp sgt i16 %7902, -1
  br i1 %7903, label %7904, label %7948

7904:                                             ; preds = %7899
  %7905 = icmp ult i32 %7852, %7851
  %7906 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 1
  %7907 = load i32, i32* %7906, align 4
  %7908 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 2
  %7909 = icmp eq i32 %7907, 0
  %7910 = zext i1 %7909 to i32
  %7911 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 3
  %7912 = select i1 %7905, %struct.opj_mqc_state** %7911, %struct.opj_mqc_state** %7908
  %7913 = select i1 %7905, i32 %7910, i32 %7907
  %7914 = bitcast %struct.opj_mqc_state** %7912 to i64*
  %7915 = load i64, i64* %7914, align 8
  %7916 = bitcast %struct.opj_mqc_state** %7848 to i64*
  store i64 %7915, i64* %7916, align 8
  br label %7917

7917:                                             ; preds = %7941, %7904
  %7918 = phi i32 [ %7852, %7904 ], [ %7944, %7941 ]
  %7919 = phi i32 [ %7814, %7904 ], [ %7946, %7941 ]
  %7920 = phi i32 [ %7901, %7904 ], [ %7945, %7941 ]
  %7921 = icmp eq i32 %7919, 0
  br i1 %7921, label %7922, label %7941

7922:                                             ; preds = %7917
  %7923 = load i8*, i8** %7336, align 8
  %7924 = getelementptr inbounds i8, i8* %7923, i64 1
  %7925 = load i8, i8* %7924, align 1
  %7926 = zext i8 %7925 to i32
  %7927 = load i8, i8* %7923, align 1
  %7928 = icmp eq i8 %7927, -1
  br i1 %7928, label %7929, label %7938

7929:                                             ; preds = %7922
  %7930 = icmp ugt i8 %7925, -113
  br i1 %7930, label %7931, label %7935

7931:                                             ; preds = %7929
  %7932 = add i32 %7920, 65280
  %7933 = load i32, i32* %7337, align 4
  %7934 = add i32 %7933, 1
  store i32 %7934, i32* %7337, align 4
  br label %7941

7935:                                             ; preds = %7929
  store i8* %7924, i8** %7336, align 8
  %7936 = shl nuw nsw i32 %7926, 9
  %7937 = add i32 %7936, %7920
  br label %7941

7938:                                             ; preds = %7922
  store i8* %7924, i8** %7336, align 8
  %7939 = shl nuw nsw i32 %7926, 8
  %7940 = add i32 %7939, %7920
  br label %7941

7941:                                             ; preds = %7938, %7935, %7931, %7917
  %7942 = phi i32 [ %7919, %7917 ], [ 8, %7931 ], [ 7, %7935 ], [ 8, %7938 ]
  %7943 = phi i32 [ %7920, %7917 ], [ %7932, %7931 ], [ %7937, %7935 ], [ %7940, %7938 ]
  %7944 = shl i32 %7918, 1
  %7945 = shl i32 %7943, 1
  %7946 = add i32 %7942, -1
  %7947 = icmp ult i32 %7944, 32768
  br i1 %7947, label %7917, label %7951

7948:                                             ; preds = %7899
  %7949 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7849, i64 0, i32 1
  %7950 = load i32, i32* %7949, align 4
  br label %7951

7951:                                             ; preds = %7941, %7892, %7948
  %7952 = phi i32 [ %7852, %7948 ], [ %7895, %7892 ], [ %7944, %7941 ]
  %7953 = phi i32 [ %7814, %7948 ], [ %7897, %7892 ], [ %7946, %7941 ]
  %7954 = phi i32 [ %7950, %7948 ], [ %7864, %7892 ], [ %7913, %7941 ]
  %7955 = phi i32 [ %7901, %7948 ], [ %7896, %7892 ], [ %7945, %7941 ]
  %7956 = icmp eq i32 %7954, 0
  br i1 %7956, label %8106, label %7957

7957:                                             ; preds = %7951, %7688
  %7958 = phi i32 [ %7826, %7951 ], [ 0, %7688 ]
  %7959 = phi i32 [ %7952, %7951 ], [ %7689, %7688 ]
  %7960 = phi i32 [ %7953, %7951 ], [ %7690, %7688 ]
  %7961 = phi i32 [ %7955, %7951 ], [ %7692, %7688 ]
  %7962 = getelementptr inbounds i32, i32* %7360, i64 -1
  %7963 = load i32, i32* %7962, align 4
  %7964 = getelementptr inbounds i32, i32* %7360, i64 1
  %7965 = load i32, i32* %7964, align 4
  %7966 = lshr i32 %7958, 3
  %7967 = and i32 %7966, 170
  %7968 = lshr i32 %7963, 22
  %7969 = and i32 %7968, 1
  %7970 = lshr i32 %7965, 20
  %7971 = and i32 %7970, 4
  %7972 = lshr i32 %7958, 15
  %7973 = and i32 %7972, 16
  %7974 = lshr i32 %7958, 19
  %7975 = and i32 %7974, 64
  %7976 = or i32 %7975, %7967
  %7977 = or i32 %7976, %7973
  %7978 = or i32 %7977, %7969
  %7979 = or i32 %7978, %7971
  %7980 = zext i32 %7979 to i64
  %7981 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %7980
  %7982 = load i8, i8* %7981, align 1
  %7983 = zext i8 %7982 to i64
  %7984 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %7983
  %7985 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %7984, align 8
  %7986 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 0
  %7987 = load i32, i32* %7986, align 8
  %7988 = sub i32 %7959, %7987
  %7989 = lshr i32 %7961, 16
  %7990 = icmp ult i32 %7989, %7987
  br i1 %7990, label %7991, label %8035

7991:                                             ; preds = %7957
  %7992 = icmp ult i32 %7988, %7987
  %7993 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 1
  %7994 = load i32, i32* %7993, align 4
  %7995 = icmp eq i32 %7994, 0
  %7996 = zext i1 %7995 to i32
  %7997 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 3
  %7998 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 2
  %7999 = select i1 %7992, %struct.opj_mqc_state** %7998, %struct.opj_mqc_state** %7997
  %8000 = select i1 %7992, i32 %7994, i32 %7996
  %8001 = bitcast %struct.opj_mqc_state** %7999 to i64*
  %8002 = load i64, i64* %8001, align 8
  %8003 = bitcast %struct.opj_mqc_state** %7984 to i64*
  store i64 %8002, i64* %8003, align 8
  br label %8004

8004:                                             ; preds = %8028, %7991
  %8005 = phi i32 [ %7987, %7991 ], [ %8031, %8028 ]
  %8006 = phi i32 [ %7960, %7991 ], [ %8033, %8028 ]
  %8007 = phi i32 [ %7961, %7991 ], [ %8032, %8028 ]
  %8008 = icmp eq i32 %8006, 0
  br i1 %8008, label %8009, label %8028

8009:                                             ; preds = %8004
  %8010 = load i8*, i8** %7336, align 8
  %8011 = getelementptr inbounds i8, i8* %8010, i64 1
  %8012 = load i8, i8* %8011, align 1
  %8013 = zext i8 %8012 to i32
  %8014 = load i8, i8* %8010, align 1
  %8015 = icmp eq i8 %8014, -1
  br i1 %8015, label %8016, label %8025

8016:                                             ; preds = %8009
  %8017 = icmp ugt i8 %8012, -113
  br i1 %8017, label %8018, label %8022

8018:                                             ; preds = %8016
  %8019 = add i32 %8007, 65280
  %8020 = load i32, i32* %7337, align 4
  %8021 = add i32 %8020, 1
  store i32 %8021, i32* %7337, align 4
  br label %8028

8022:                                             ; preds = %8016
  store i8* %8011, i8** %7336, align 8
  %8023 = shl nuw nsw i32 %8013, 9
  %8024 = add i32 %8023, %8007
  br label %8028

8025:                                             ; preds = %8009
  store i8* %8011, i8** %7336, align 8
  %8026 = shl nuw nsw i32 %8013, 8
  %8027 = add i32 %8026, %8007
  br label %8028

8028:                                             ; preds = %8025, %8022, %8018, %8004
  %8029 = phi i32 [ %8006, %8004 ], [ 8, %8018 ], [ 7, %8022 ], [ 8, %8025 ]
  %8030 = phi i32 [ %8007, %8004 ], [ %8019, %8018 ], [ %8024, %8022 ], [ %8027, %8025 ]
  %8031 = shl i32 %8005, 1
  %8032 = shl i32 %8030, 1
  %8033 = add i32 %8029, -1
  %8034 = icmp ult i32 %8031, 32768
  br i1 %8034, label %8004, label %8087

8035:                                             ; preds = %7957
  %8036 = shl i32 %7987, 16
  %8037 = sub i32 %7961, %8036
  %8038 = trunc i32 %7988 to i16
  %8039 = icmp sgt i16 %8038, -1
  br i1 %8039, label %8040, label %8084

8040:                                             ; preds = %8035
  %8041 = icmp ult i32 %7988, %7987
  %8042 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 1
  %8043 = load i32, i32* %8042, align 4
  %8044 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 2
  %8045 = icmp eq i32 %8043, 0
  %8046 = zext i1 %8045 to i32
  %8047 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 3
  %8048 = select i1 %8041, %struct.opj_mqc_state** %8047, %struct.opj_mqc_state** %8044
  %8049 = select i1 %8041, i32 %8046, i32 %8043
  %8050 = bitcast %struct.opj_mqc_state** %8048 to i64*
  %8051 = load i64, i64* %8050, align 8
  %8052 = bitcast %struct.opj_mqc_state** %7984 to i64*
  store i64 %8051, i64* %8052, align 8
  br label %8053

8053:                                             ; preds = %8077, %8040
  %8054 = phi i32 [ %7988, %8040 ], [ %8080, %8077 ]
  %8055 = phi i32 [ %7960, %8040 ], [ %8082, %8077 ]
  %8056 = phi i32 [ %8037, %8040 ], [ %8081, %8077 ]
  %8057 = icmp eq i32 %8055, 0
  br i1 %8057, label %8058, label %8077

8058:                                             ; preds = %8053
  %8059 = load i8*, i8** %7336, align 8
  %8060 = getelementptr inbounds i8, i8* %8059, i64 1
  %8061 = load i8, i8* %8060, align 1
  %8062 = zext i8 %8061 to i32
  %8063 = load i8, i8* %8059, align 1
  %8064 = icmp eq i8 %8063, -1
  br i1 %8064, label %8065, label %8074

8065:                                             ; preds = %8058
  %8066 = icmp ugt i8 %8061, -113
  br i1 %8066, label %8067, label %8071

8067:                                             ; preds = %8065
  %8068 = add i32 %8056, 65280
  %8069 = load i32, i32* %7337, align 4
  %8070 = add i32 %8069, 1
  store i32 %8070, i32* %7337, align 4
  br label %8077

8071:                                             ; preds = %8065
  store i8* %8060, i8** %7336, align 8
  %8072 = shl nuw nsw i32 %8062, 9
  %8073 = add i32 %8072, %8056
  br label %8077

8074:                                             ; preds = %8058
  store i8* %8060, i8** %7336, align 8
  %8075 = shl nuw nsw i32 %8062, 8
  %8076 = add i32 %8075, %8056
  br label %8077

8077:                                             ; preds = %8074, %8071, %8067, %8053
  %8078 = phi i32 [ %8055, %8053 ], [ 8, %8067 ], [ 7, %8071 ], [ 8, %8074 ]
  %8079 = phi i32 [ %8056, %8053 ], [ %8068, %8067 ], [ %8073, %8071 ], [ %8076, %8074 ]
  %8080 = shl i32 %8054, 1
  %8081 = shl i32 %8079, 1
  %8082 = add i32 %8078, -1
  %8083 = icmp ult i32 %8080, 32768
  br i1 %8083, label %8053, label %8087

8084:                                             ; preds = %8035
  %8085 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %7985, i64 0, i32 1
  %8086 = load i32, i32* %8085, align 4
  br label %8087

8087:                                             ; preds = %8077, %8028, %8084
  %8088 = phi i32 [ %7988, %8084 ], [ %8031, %8028 ], [ %8080, %8077 ]
  %8089 = phi i32 [ %7960, %8084 ], [ %8033, %8028 ], [ %8082, %8077 ]
  %8090 = phi i32 [ %8086, %8084 ], [ %8000, %8028 ], [ %8049, %8077 ]
  %8091 = phi i32 [ %8037, %8084 ], [ %8032, %8028 ], [ %8081, %8077 ]
  %8092 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %7980
  %8093 = load i8, i8* %8092, align 1
  %8094 = zext i8 %8093 to i32
  %8095 = xor i32 %8090, %8094
  %8096 = icmp eq i32 %8095, 0
  %8097 = select i1 %8096, i32 %4864, i32 %7338
  %8098 = getelementptr inbounds i32, i32* %7359, i64 %7339
  store i32 %8097, i32* %8098, align 4
  %8099 = load i32, i32* %7962, align 4
  %8100 = or i32 %8099, 256
  store i32 %8100, i32* %7962, align 4
  %8101 = shl i32 %8095, 22
  %8102 = or i32 %7958, %8101
  %8103 = or i32 %8102, 128
  %8104 = load i32, i32* %7964, align 4
  %8105 = or i32 %8104, 64
  store i32 %8105, i32* %7964, align 4
  br label %8106

8106:                                             ; preds = %8087, %7951
  %8107 = phi i32 [ %7952, %7951 ], [ %8088, %8087 ]
  %8108 = phi i32 [ %7953, %7951 ], [ %8089, %8087 ]
  %8109 = phi i32 [ %7826, %7951 ], [ %8103, %8087 ]
  %8110 = phi i32 [ %7955, %7951 ], [ %8091, %8087 ]
  %8111 = lshr i32 %8109, 6
  %8112 = load i8*, i8** %7335, align 8
  %8113 = and i32 %8111, 495
  %8114 = zext i32 %8113 to i64
  %8115 = getelementptr inbounds i8, i8* %8112, i64 %8114
  %8116 = load i8, i8* %8115, align 1
  %8117 = zext i8 %8116 to i64
  %8118 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8117
  %8119 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8118, align 8
  %8120 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 0
  %8121 = load i32, i32* %8120, align 8
  %8122 = sub i32 %8107, %8121
  %8123 = lshr i32 %8110, 16
  %8124 = icmp ult i32 %8123, %8121
  br i1 %8124, label %8125, label %8169

8125:                                             ; preds = %8106
  %8126 = icmp ult i32 %8122, %8121
  %8127 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 1
  %8128 = load i32, i32* %8127, align 4
  %8129 = icmp eq i32 %8128, 0
  %8130 = zext i1 %8129 to i32
  %8131 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 3
  %8132 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 2
  %8133 = select i1 %8126, %struct.opj_mqc_state** %8132, %struct.opj_mqc_state** %8131
  %8134 = select i1 %8126, i32 %8128, i32 %8130
  %8135 = bitcast %struct.opj_mqc_state** %8133 to i64*
  %8136 = load i64, i64* %8135, align 8
  %8137 = bitcast %struct.opj_mqc_state** %8118 to i64*
  store i64 %8136, i64* %8137, align 8
  br label %8138

8138:                                             ; preds = %8162, %8125
  %8139 = phi i32 [ %8121, %8125 ], [ %8165, %8162 ]
  %8140 = phi i32 [ %8108, %8125 ], [ %8167, %8162 ]
  %8141 = phi i32 [ %8110, %8125 ], [ %8166, %8162 ]
  %8142 = icmp eq i32 %8140, 0
  br i1 %8142, label %8143, label %8162

8143:                                             ; preds = %8138
  %8144 = load i8*, i8** %7336, align 8
  %8145 = getelementptr inbounds i8, i8* %8144, i64 1
  %8146 = load i8, i8* %8145, align 1
  %8147 = zext i8 %8146 to i32
  %8148 = load i8, i8* %8144, align 1
  %8149 = icmp eq i8 %8148, -1
  br i1 %8149, label %8150, label %8159

8150:                                             ; preds = %8143
  %8151 = icmp ugt i8 %8146, -113
  br i1 %8151, label %8152, label %8156

8152:                                             ; preds = %8150
  %8153 = add i32 %8141, 65280
  %8154 = load i32, i32* %7337, align 4
  %8155 = add i32 %8154, 1
  store i32 %8155, i32* %7337, align 4
  br label %8162

8156:                                             ; preds = %8150
  store i8* %8145, i8** %7336, align 8
  %8157 = shl nuw nsw i32 %8147, 9
  %8158 = add i32 %8157, %8141
  br label %8162

8159:                                             ; preds = %8143
  store i8* %8145, i8** %7336, align 8
  %8160 = shl nuw nsw i32 %8147, 8
  %8161 = add i32 %8160, %8141
  br label %8162

8162:                                             ; preds = %8159, %8156, %8152, %8138
  %8163 = phi i32 [ %8140, %8138 ], [ 8, %8152 ], [ 7, %8156 ], [ 8, %8159 ]
  %8164 = phi i32 [ %8141, %8138 ], [ %8153, %8152 ], [ %8158, %8156 ], [ %8161, %8159 ]
  %8165 = shl i32 %8139, 1
  %8166 = shl i32 %8164, 1
  %8167 = add i32 %8163, -1
  %8168 = icmp ult i32 %8165, 32768
  br i1 %8168, label %8138, label %8221

8169:                                             ; preds = %8106
  %8170 = shl i32 %8121, 16
  %8171 = sub i32 %8110, %8170
  %8172 = trunc i32 %8122 to i16
  %8173 = icmp sgt i16 %8172, -1
  br i1 %8173, label %8174, label %8218

8174:                                             ; preds = %8169
  %8175 = icmp ult i32 %8122, %8121
  %8176 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 1
  %8177 = load i32, i32* %8176, align 4
  %8178 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 2
  %8179 = icmp eq i32 %8177, 0
  %8180 = zext i1 %8179 to i32
  %8181 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 3
  %8182 = select i1 %8175, %struct.opj_mqc_state** %8181, %struct.opj_mqc_state** %8178
  %8183 = select i1 %8175, i32 %8180, i32 %8177
  %8184 = bitcast %struct.opj_mqc_state** %8182 to i64*
  %8185 = load i64, i64* %8184, align 8
  %8186 = bitcast %struct.opj_mqc_state** %8118 to i64*
  store i64 %8185, i64* %8186, align 8
  br label %8187

8187:                                             ; preds = %8211, %8174
  %8188 = phi i32 [ %8122, %8174 ], [ %8214, %8211 ]
  %8189 = phi i32 [ %8108, %8174 ], [ %8216, %8211 ]
  %8190 = phi i32 [ %8171, %8174 ], [ %8215, %8211 ]
  %8191 = icmp eq i32 %8189, 0
  br i1 %8191, label %8192, label %8211

8192:                                             ; preds = %8187
  %8193 = load i8*, i8** %7336, align 8
  %8194 = getelementptr inbounds i8, i8* %8193, i64 1
  %8195 = load i8, i8* %8194, align 1
  %8196 = zext i8 %8195 to i32
  %8197 = load i8, i8* %8193, align 1
  %8198 = icmp eq i8 %8197, -1
  br i1 %8198, label %8199, label %8208

8199:                                             ; preds = %8192
  %8200 = icmp ugt i8 %8195, -113
  br i1 %8200, label %8201, label %8205

8201:                                             ; preds = %8199
  %8202 = add i32 %8190, 65280
  %8203 = load i32, i32* %7337, align 4
  %8204 = add i32 %8203, 1
  store i32 %8204, i32* %7337, align 4
  br label %8211

8205:                                             ; preds = %8199
  store i8* %8194, i8** %7336, align 8
  %8206 = shl nuw nsw i32 %8196, 9
  %8207 = add i32 %8206, %8190
  br label %8211

8208:                                             ; preds = %8192
  store i8* %8194, i8** %7336, align 8
  %8209 = shl nuw nsw i32 %8196, 8
  %8210 = add i32 %8209, %8190
  br label %8211

8211:                                             ; preds = %8208, %8205, %8201, %8187
  %8212 = phi i32 [ %8189, %8187 ], [ 8, %8201 ], [ 7, %8205 ], [ 8, %8208 ]
  %8213 = phi i32 [ %8190, %8187 ], [ %8202, %8201 ], [ %8207, %8205 ], [ %8210, %8208 ]
  %8214 = shl i32 %8188, 1
  %8215 = shl i32 %8213, 1
  %8216 = add i32 %8212, -1
  %8217 = icmp ult i32 %8214, 32768
  br i1 %8217, label %8187, label %8221

8218:                                             ; preds = %8169
  %8219 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8119, i64 0, i32 1
  %8220 = load i32, i32* %8219, align 4
  br label %8221

8221:                                             ; preds = %8211, %8162, %8218
  %8222 = phi i32 [ %8122, %8218 ], [ %8165, %8162 ], [ %8214, %8211 ]
  %8223 = phi i32 [ %8108, %8218 ], [ %8167, %8162 ], [ %8216, %8211 ]
  %8224 = phi i32 [ %8220, %8218 ], [ %8134, %8162 ], [ %8183, %8211 ]
  %8225 = phi i32 [ %8171, %8218 ], [ %8166, %8162 ], [ %8215, %8211 ]
  %8226 = icmp eq i32 %8224, 0
  br i1 %8226, label %8376, label %8227

8227:                                             ; preds = %7688, %8221
  %8228 = phi i32 [ %8109, %8221 ], [ 0, %7688 ]
  %8229 = phi i32 [ %8222, %8221 ], [ %7689, %7688 ]
  %8230 = phi i32 [ %8223, %8221 ], [ %7690, %7688 ]
  %8231 = phi i32 [ %8225, %8221 ], [ %7692, %7688 ]
  %8232 = getelementptr inbounds i32, i32* %7360, i64 -1
  %8233 = load i32, i32* %8232, align 4
  %8234 = getelementptr inbounds i32, i32* %7360, i64 1
  %8235 = load i32, i32* %8234, align 4
  %8236 = lshr i32 %8228, 6
  %8237 = and i32 %8236, 170
  %8238 = lshr i32 %8233, 25
  %8239 = and i32 %8238, 1
  %8240 = lshr i32 %8235, 23
  %8241 = and i32 %8240, 4
  %8242 = lshr i32 %8228, 18
  %8243 = and i32 %8242, 16
  %8244 = lshr i32 %8228, 22
  %8245 = and i32 %8244, 64
  %8246 = or i32 %8245, %8237
  %8247 = or i32 %8246, %8243
  %8248 = or i32 %8247, %8239
  %8249 = or i32 %8248, %8241
  %8250 = zext i32 %8249 to i64
  %8251 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %8250
  %8252 = load i8, i8* %8251, align 1
  %8253 = zext i8 %8252 to i64
  %8254 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8253
  %8255 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8254, align 8
  %8256 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 0
  %8257 = load i32, i32* %8256, align 8
  %8258 = sub i32 %8229, %8257
  %8259 = lshr i32 %8231, 16
  %8260 = icmp ult i32 %8259, %8257
  br i1 %8260, label %8261, label %8305

8261:                                             ; preds = %8227
  %8262 = icmp ult i32 %8258, %8257
  %8263 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 1
  %8264 = load i32, i32* %8263, align 4
  %8265 = icmp eq i32 %8264, 0
  %8266 = zext i1 %8265 to i32
  %8267 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 3
  %8268 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 2
  %8269 = select i1 %8262, %struct.opj_mqc_state** %8268, %struct.opj_mqc_state** %8267
  %8270 = select i1 %8262, i32 %8264, i32 %8266
  %8271 = bitcast %struct.opj_mqc_state** %8269 to i64*
  %8272 = load i64, i64* %8271, align 8
  %8273 = bitcast %struct.opj_mqc_state** %8254 to i64*
  store i64 %8272, i64* %8273, align 8
  br label %8274

8274:                                             ; preds = %8298, %8261
  %8275 = phi i32 [ %8257, %8261 ], [ %8301, %8298 ]
  %8276 = phi i32 [ %8230, %8261 ], [ %8303, %8298 ]
  %8277 = phi i32 [ %8231, %8261 ], [ %8302, %8298 ]
  %8278 = icmp eq i32 %8276, 0
  br i1 %8278, label %8279, label %8298

8279:                                             ; preds = %8274
  %8280 = load i8*, i8** %7336, align 8
  %8281 = getelementptr inbounds i8, i8* %8280, i64 1
  %8282 = load i8, i8* %8281, align 1
  %8283 = zext i8 %8282 to i32
  %8284 = load i8, i8* %8280, align 1
  %8285 = icmp eq i8 %8284, -1
  br i1 %8285, label %8286, label %8295

8286:                                             ; preds = %8279
  %8287 = icmp ugt i8 %8282, -113
  br i1 %8287, label %8288, label %8292

8288:                                             ; preds = %8286
  %8289 = add i32 %8277, 65280
  %8290 = load i32, i32* %7337, align 4
  %8291 = add i32 %8290, 1
  store i32 %8291, i32* %7337, align 4
  br label %8298

8292:                                             ; preds = %8286
  store i8* %8281, i8** %7336, align 8
  %8293 = shl nuw nsw i32 %8283, 9
  %8294 = add i32 %8293, %8277
  br label %8298

8295:                                             ; preds = %8279
  store i8* %8281, i8** %7336, align 8
  %8296 = shl nuw nsw i32 %8283, 8
  %8297 = add i32 %8296, %8277
  br label %8298

8298:                                             ; preds = %8295, %8292, %8288, %8274
  %8299 = phi i32 [ %8276, %8274 ], [ 8, %8288 ], [ 7, %8292 ], [ 8, %8295 ]
  %8300 = phi i32 [ %8277, %8274 ], [ %8289, %8288 ], [ %8294, %8292 ], [ %8297, %8295 ]
  %8301 = shl i32 %8275, 1
  %8302 = shl i32 %8300, 1
  %8303 = add i32 %8299, -1
  %8304 = icmp ult i32 %8301, 32768
  br i1 %8304, label %8274, label %8357

8305:                                             ; preds = %8227
  %8306 = shl i32 %8257, 16
  %8307 = sub i32 %8231, %8306
  %8308 = trunc i32 %8258 to i16
  %8309 = icmp sgt i16 %8308, -1
  br i1 %8309, label %8310, label %8354

8310:                                             ; preds = %8305
  %8311 = icmp ult i32 %8258, %8257
  %8312 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 1
  %8313 = load i32, i32* %8312, align 4
  %8314 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 2
  %8315 = icmp eq i32 %8313, 0
  %8316 = zext i1 %8315 to i32
  %8317 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 3
  %8318 = select i1 %8311, %struct.opj_mqc_state** %8317, %struct.opj_mqc_state** %8314
  %8319 = select i1 %8311, i32 %8316, i32 %8313
  %8320 = bitcast %struct.opj_mqc_state** %8318 to i64*
  %8321 = load i64, i64* %8320, align 8
  %8322 = bitcast %struct.opj_mqc_state** %8254 to i64*
  store i64 %8321, i64* %8322, align 8
  br label %8323

8323:                                             ; preds = %8347, %8310
  %8324 = phi i32 [ %8258, %8310 ], [ %8350, %8347 ]
  %8325 = phi i32 [ %8230, %8310 ], [ %8352, %8347 ]
  %8326 = phi i32 [ %8307, %8310 ], [ %8351, %8347 ]
  %8327 = icmp eq i32 %8325, 0
  br i1 %8327, label %8328, label %8347

8328:                                             ; preds = %8323
  %8329 = load i8*, i8** %7336, align 8
  %8330 = getelementptr inbounds i8, i8* %8329, i64 1
  %8331 = load i8, i8* %8330, align 1
  %8332 = zext i8 %8331 to i32
  %8333 = load i8, i8* %8329, align 1
  %8334 = icmp eq i8 %8333, -1
  br i1 %8334, label %8335, label %8344

8335:                                             ; preds = %8328
  %8336 = icmp ugt i8 %8331, -113
  br i1 %8336, label %8337, label %8341

8337:                                             ; preds = %8335
  %8338 = add i32 %8326, 65280
  %8339 = load i32, i32* %7337, align 4
  %8340 = add i32 %8339, 1
  store i32 %8340, i32* %7337, align 4
  br label %8347

8341:                                             ; preds = %8335
  store i8* %8330, i8** %7336, align 8
  %8342 = shl nuw nsw i32 %8332, 9
  %8343 = add i32 %8342, %8326
  br label %8347

8344:                                             ; preds = %8328
  store i8* %8330, i8** %7336, align 8
  %8345 = shl nuw nsw i32 %8332, 8
  %8346 = add i32 %8345, %8326
  br label %8347

8347:                                             ; preds = %8344, %8341, %8337, %8323
  %8348 = phi i32 [ %8325, %8323 ], [ 8, %8337 ], [ 7, %8341 ], [ 8, %8344 ]
  %8349 = phi i32 [ %8326, %8323 ], [ %8338, %8337 ], [ %8343, %8341 ], [ %8346, %8344 ]
  %8350 = shl i32 %8324, 1
  %8351 = shl i32 %8349, 1
  %8352 = add i32 %8348, -1
  %8353 = icmp ult i32 %8350, 32768
  br i1 %8353, label %8323, label %8357

8354:                                             ; preds = %8305
  %8355 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8255, i64 0, i32 1
  %8356 = load i32, i32* %8355, align 4
  br label %8357

8357:                                             ; preds = %8347, %8298, %8354
  %8358 = phi i32 [ %8258, %8354 ], [ %8301, %8298 ], [ %8350, %8347 ]
  %8359 = phi i32 [ %8230, %8354 ], [ %8303, %8298 ], [ %8352, %8347 ]
  %8360 = phi i32 [ %8356, %8354 ], [ %8270, %8298 ], [ %8319, %8347 ]
  %8361 = phi i32 [ %8307, %8354 ], [ %8302, %8298 ], [ %8351, %8347 ]
  %8362 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %8250
  %8363 = load i8, i8* %8362, align 1
  %8364 = zext i8 %8363 to i32
  %8365 = xor i32 %8360, %8364
  %8366 = icmp eq i32 %8365, 0
  %8367 = select i1 %8366, i32 %4864, i32 %7338
  %8368 = getelementptr inbounds i32, i32* %7359, i64 %7341
  store i32 %8367, i32* %8368, align 4
  %8369 = load i32, i32* %8232, align 4
  %8370 = or i32 %8369, 2048
  store i32 %8370, i32* %8232, align 4
  %8371 = shl i32 %8365, 25
  %8372 = or i32 %8228, %8371
  %8373 = or i32 %8372, 1024
  %8374 = load i32, i32* %8234, align 4
  %8375 = or i32 %8374, 512
  store i32 %8375, i32* %8234, align 4
  br label %8376

8376:                                             ; preds = %8357, %8221
  %8377 = phi i32 [ %8222, %8221 ], [ %8358, %8357 ]
  %8378 = phi i32 [ %8223, %8221 ], [ %8359, %8357 ]
  %8379 = phi i32 [ %8109, %8221 ], [ %8373, %8357 ]
  %8380 = phi i32 [ %8225, %8221 ], [ %8361, %8357 ]
  %8381 = lshr i32 %8379, 9
  %8382 = load i8*, i8** %7335, align 8
  %8383 = and i32 %8381, 495
  %8384 = zext i32 %8383 to i64
  %8385 = getelementptr inbounds i8, i8* %8382, i64 %8384
  %8386 = load i8, i8* %8385, align 1
  %8387 = zext i8 %8386 to i64
  %8388 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8387
  %8389 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8388, align 8
  %8390 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 0
  %8391 = load i32, i32* %8390, align 8
  %8392 = sub i32 %8377, %8391
  %8393 = lshr i32 %8380, 16
  %8394 = icmp ult i32 %8393, %8391
  br i1 %8394, label %8395, label %8439

8395:                                             ; preds = %8376
  %8396 = icmp ult i32 %8392, %8391
  %8397 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 1
  %8398 = load i32, i32* %8397, align 4
  %8399 = icmp eq i32 %8398, 0
  %8400 = zext i1 %8399 to i32
  %8401 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 3
  %8402 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 2
  %8403 = select i1 %8396, %struct.opj_mqc_state** %8402, %struct.opj_mqc_state** %8401
  %8404 = select i1 %8396, i32 %8398, i32 %8400
  %8405 = bitcast %struct.opj_mqc_state** %8403 to i64*
  %8406 = load i64, i64* %8405, align 8
  %8407 = bitcast %struct.opj_mqc_state** %8388 to i64*
  store i64 %8406, i64* %8407, align 8
  br label %8408

8408:                                             ; preds = %8432, %8395
  %8409 = phi i32 [ %8391, %8395 ], [ %8435, %8432 ]
  %8410 = phi i32 [ %8378, %8395 ], [ %8437, %8432 ]
  %8411 = phi i32 [ %8380, %8395 ], [ %8436, %8432 ]
  %8412 = icmp eq i32 %8410, 0
  br i1 %8412, label %8413, label %8432

8413:                                             ; preds = %8408
  %8414 = load i8*, i8** %7336, align 8
  %8415 = getelementptr inbounds i8, i8* %8414, i64 1
  %8416 = load i8, i8* %8415, align 1
  %8417 = zext i8 %8416 to i32
  %8418 = load i8, i8* %8414, align 1
  %8419 = icmp eq i8 %8418, -1
  br i1 %8419, label %8420, label %8429

8420:                                             ; preds = %8413
  %8421 = icmp ugt i8 %8416, -113
  br i1 %8421, label %8422, label %8426

8422:                                             ; preds = %8420
  %8423 = add i32 %8411, 65280
  %8424 = load i32, i32* %7337, align 4
  %8425 = add i32 %8424, 1
  store i32 %8425, i32* %7337, align 4
  br label %8432

8426:                                             ; preds = %8420
  store i8* %8415, i8** %7336, align 8
  %8427 = shl nuw nsw i32 %8417, 9
  %8428 = add i32 %8427, %8411
  br label %8432

8429:                                             ; preds = %8413
  store i8* %8415, i8** %7336, align 8
  %8430 = shl nuw nsw i32 %8417, 8
  %8431 = add i32 %8430, %8411
  br label %8432

8432:                                             ; preds = %8429, %8426, %8422, %8408
  %8433 = phi i32 [ %8410, %8408 ], [ 8, %8422 ], [ 7, %8426 ], [ 8, %8429 ]
  %8434 = phi i32 [ %8411, %8408 ], [ %8423, %8422 ], [ %8428, %8426 ], [ %8431, %8429 ]
  %8435 = shl i32 %8409, 1
  %8436 = shl i32 %8434, 1
  %8437 = add i32 %8433, -1
  %8438 = icmp ult i32 %8435, 32768
  br i1 %8438, label %8408, label %8491

8439:                                             ; preds = %8376
  %8440 = shl i32 %8391, 16
  %8441 = sub i32 %8380, %8440
  %8442 = trunc i32 %8392 to i16
  %8443 = icmp sgt i16 %8442, -1
  br i1 %8443, label %8444, label %8488

8444:                                             ; preds = %8439
  %8445 = icmp ult i32 %8392, %8391
  %8446 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 1
  %8447 = load i32, i32* %8446, align 4
  %8448 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 2
  %8449 = icmp eq i32 %8447, 0
  %8450 = zext i1 %8449 to i32
  %8451 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 3
  %8452 = select i1 %8445, %struct.opj_mqc_state** %8451, %struct.opj_mqc_state** %8448
  %8453 = select i1 %8445, i32 %8450, i32 %8447
  %8454 = bitcast %struct.opj_mqc_state** %8452 to i64*
  %8455 = load i64, i64* %8454, align 8
  %8456 = bitcast %struct.opj_mqc_state** %8388 to i64*
  store i64 %8455, i64* %8456, align 8
  br label %8457

8457:                                             ; preds = %8481, %8444
  %8458 = phi i32 [ %8392, %8444 ], [ %8484, %8481 ]
  %8459 = phi i32 [ %8378, %8444 ], [ %8486, %8481 ]
  %8460 = phi i32 [ %8441, %8444 ], [ %8485, %8481 ]
  %8461 = icmp eq i32 %8459, 0
  br i1 %8461, label %8462, label %8481

8462:                                             ; preds = %8457
  %8463 = load i8*, i8** %7336, align 8
  %8464 = getelementptr inbounds i8, i8* %8463, i64 1
  %8465 = load i8, i8* %8464, align 1
  %8466 = zext i8 %8465 to i32
  %8467 = load i8, i8* %8463, align 1
  %8468 = icmp eq i8 %8467, -1
  br i1 %8468, label %8469, label %8478

8469:                                             ; preds = %8462
  %8470 = icmp ugt i8 %8465, -113
  br i1 %8470, label %8471, label %8475

8471:                                             ; preds = %8469
  %8472 = add i32 %8460, 65280
  %8473 = load i32, i32* %7337, align 4
  %8474 = add i32 %8473, 1
  store i32 %8474, i32* %7337, align 4
  br label %8481

8475:                                             ; preds = %8469
  store i8* %8464, i8** %7336, align 8
  %8476 = shl nuw nsw i32 %8466, 9
  %8477 = add i32 %8476, %8460
  br label %8481

8478:                                             ; preds = %8462
  store i8* %8464, i8** %7336, align 8
  %8479 = shl nuw nsw i32 %8466, 8
  %8480 = add i32 %8479, %8460
  br label %8481

8481:                                             ; preds = %8478, %8475, %8471, %8457
  %8482 = phi i32 [ %8459, %8457 ], [ 8, %8471 ], [ 7, %8475 ], [ 8, %8478 ]
  %8483 = phi i32 [ %8460, %8457 ], [ %8472, %8471 ], [ %8477, %8475 ], [ %8480, %8478 ]
  %8484 = shl i32 %8458, 1
  %8485 = shl i32 %8483, 1
  %8486 = add i32 %8482, -1
  %8487 = icmp ult i32 %8484, 32768
  br i1 %8487, label %8457, label %8491

8488:                                             ; preds = %8439
  %8489 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8389, i64 0, i32 1
  %8490 = load i32, i32* %8489, align 4
  br label %8491

8491:                                             ; preds = %8481, %8432, %8488
  %8492 = phi i32 [ %8392, %8488 ], [ %8435, %8432 ], [ %8484, %8481 ]
  %8493 = phi i32 [ %8378, %8488 ], [ %8437, %8432 ], [ %8486, %8481 ]
  %8494 = phi i32 [ %8490, %8488 ], [ %8404, %8432 ], [ %8453, %8481 ]
  %8495 = phi i32 [ %8441, %8488 ], [ %8436, %8432 ], [ %8485, %8481 ]
  %8496 = icmp eq i32 %8494, 0
  br i1 %8496, label %9758, label %8497

8497:                                             ; preds = %7688, %8491
  %8498 = phi i32 [ %8379, %8491 ], [ 0, %7688 ]
  %8499 = phi i32 [ %8492, %8491 ], [ %7689, %7688 ]
  %8500 = phi i32 [ %8493, %8491 ], [ %7690, %7688 ]
  %8501 = phi i32 [ %8495, %8491 ], [ %7692, %7688 ]
  %8502 = getelementptr inbounds i32, i32* %7360, i64 -1
  %8503 = load i32, i32* %8502, align 4
  %8504 = getelementptr inbounds i32, i32* %7360, i64 1
  %8505 = load i32, i32* %8504, align 4
  %8506 = lshr i32 %8498, 9
  %8507 = and i32 %8506, 170
  %8508 = lshr i32 %8503, 28
  %8509 = and i32 %8508, 1
  %8510 = lshr i32 %8505, 26
  %8511 = and i32 %8510, 4
  %8512 = lshr i32 %8498, 21
  %8513 = and i32 %8512, 16
  %8514 = lshr i32 %8498, 25
  %8515 = and i32 %8514, 64
  %8516 = or i32 %8515, %8507
  %8517 = or i32 %8516, %8513
  %8518 = or i32 %8517, %8509
  %8519 = or i32 %8518, %8511
  %8520 = zext i32 %8519 to i64
  %8521 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %8520
  %8522 = load i8, i8* %8521, align 1
  %8523 = zext i8 %8522 to i64
  %8524 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8523
  %8525 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8524, align 8
  %8526 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 0
  %8527 = load i32, i32* %8526, align 8
  %8528 = sub i32 %8499, %8527
  %8529 = lshr i32 %8501, 16
  %8530 = icmp ult i32 %8529, %8527
  br i1 %8530, label %8531, label %8575

8531:                                             ; preds = %8497
  %8532 = icmp ult i32 %8528, %8527
  %8533 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 1
  %8534 = load i32, i32* %8533, align 4
  %8535 = icmp eq i32 %8534, 0
  %8536 = zext i1 %8535 to i32
  %8537 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 3
  %8538 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 2
  %8539 = select i1 %8532, %struct.opj_mqc_state** %8538, %struct.opj_mqc_state** %8537
  %8540 = select i1 %8532, i32 %8534, i32 %8536
  %8541 = bitcast %struct.opj_mqc_state** %8539 to i64*
  %8542 = load i64, i64* %8541, align 8
  %8543 = bitcast %struct.opj_mqc_state** %8524 to i64*
  store i64 %8542, i64* %8543, align 8
  br label %8544

8544:                                             ; preds = %8568, %8531
  %8545 = phi i32 [ %8527, %8531 ], [ %8571, %8568 ]
  %8546 = phi i32 [ %8500, %8531 ], [ %8573, %8568 ]
  %8547 = phi i32 [ %8501, %8531 ], [ %8572, %8568 ]
  %8548 = icmp eq i32 %8546, 0
  br i1 %8548, label %8549, label %8568

8549:                                             ; preds = %8544
  %8550 = load i8*, i8** %7336, align 8
  %8551 = getelementptr inbounds i8, i8* %8550, i64 1
  %8552 = load i8, i8* %8551, align 1
  %8553 = zext i8 %8552 to i32
  %8554 = load i8, i8* %8550, align 1
  %8555 = icmp eq i8 %8554, -1
  br i1 %8555, label %8556, label %8565

8556:                                             ; preds = %8549
  %8557 = icmp ugt i8 %8552, -113
  br i1 %8557, label %8558, label %8562

8558:                                             ; preds = %8556
  %8559 = add i32 %8547, 65280
  %8560 = load i32, i32* %7337, align 4
  %8561 = add i32 %8560, 1
  store i32 %8561, i32* %7337, align 4
  br label %8568

8562:                                             ; preds = %8556
  store i8* %8551, i8** %7336, align 8
  %8563 = shl nuw nsw i32 %8553, 9
  %8564 = add i32 %8563, %8547
  br label %8568

8565:                                             ; preds = %8549
  store i8* %8551, i8** %7336, align 8
  %8566 = shl nuw nsw i32 %8553, 8
  %8567 = add i32 %8566, %8547
  br label %8568

8568:                                             ; preds = %8565, %8562, %8558, %8544
  %8569 = phi i32 [ %8546, %8544 ], [ 8, %8558 ], [ 7, %8562 ], [ 8, %8565 ]
  %8570 = phi i32 [ %8547, %8544 ], [ %8559, %8558 ], [ %8564, %8562 ], [ %8567, %8565 ]
  %8571 = shl i32 %8545, 1
  %8572 = shl i32 %8570, 1
  %8573 = add i32 %8569, -1
  %8574 = icmp ult i32 %8571, 32768
  br i1 %8574, label %8544, label %8627

8575:                                             ; preds = %8497
  %8576 = shl i32 %8527, 16
  %8577 = sub i32 %8501, %8576
  %8578 = trunc i32 %8528 to i16
  %8579 = icmp sgt i16 %8578, -1
  br i1 %8579, label %8580, label %8624

8580:                                             ; preds = %8575
  %8581 = icmp ult i32 %8528, %8527
  %8582 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 1
  %8583 = load i32, i32* %8582, align 4
  %8584 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 2
  %8585 = icmp eq i32 %8583, 0
  %8586 = zext i1 %8585 to i32
  %8587 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 3
  %8588 = select i1 %8581, %struct.opj_mqc_state** %8587, %struct.opj_mqc_state** %8584
  %8589 = select i1 %8581, i32 %8586, i32 %8583
  %8590 = bitcast %struct.opj_mqc_state** %8588 to i64*
  %8591 = load i64, i64* %8590, align 8
  %8592 = bitcast %struct.opj_mqc_state** %8524 to i64*
  store i64 %8591, i64* %8592, align 8
  br label %8593

8593:                                             ; preds = %8617, %8580
  %8594 = phi i32 [ %8528, %8580 ], [ %8620, %8617 ]
  %8595 = phi i32 [ %8500, %8580 ], [ %8622, %8617 ]
  %8596 = phi i32 [ %8577, %8580 ], [ %8621, %8617 ]
  %8597 = icmp eq i32 %8595, 0
  br i1 %8597, label %8598, label %8617

8598:                                             ; preds = %8593
  %8599 = load i8*, i8** %7336, align 8
  %8600 = getelementptr inbounds i8, i8* %8599, i64 1
  %8601 = load i8, i8* %8600, align 1
  %8602 = zext i8 %8601 to i32
  %8603 = load i8, i8* %8599, align 1
  %8604 = icmp eq i8 %8603, -1
  br i1 %8604, label %8605, label %8614

8605:                                             ; preds = %8598
  %8606 = icmp ugt i8 %8601, -113
  br i1 %8606, label %8607, label %8611

8607:                                             ; preds = %8605
  %8608 = add i32 %8596, 65280
  %8609 = load i32, i32* %7337, align 4
  %8610 = add i32 %8609, 1
  store i32 %8610, i32* %7337, align 4
  br label %8617

8611:                                             ; preds = %8605
  store i8* %8600, i8** %7336, align 8
  %8612 = shl nuw nsw i32 %8602, 9
  %8613 = add i32 %8612, %8596
  br label %8617

8614:                                             ; preds = %8598
  store i8* %8600, i8** %7336, align 8
  %8615 = shl nuw nsw i32 %8602, 8
  %8616 = add i32 %8615, %8596
  br label %8617

8617:                                             ; preds = %8614, %8611, %8607, %8593
  %8618 = phi i32 [ %8595, %8593 ], [ 8, %8607 ], [ 7, %8611 ], [ 8, %8614 ]
  %8619 = phi i32 [ %8596, %8593 ], [ %8608, %8607 ], [ %8613, %8611 ], [ %8616, %8614 ]
  %8620 = shl i32 %8594, 1
  %8621 = shl i32 %8619, 1
  %8622 = add i32 %8618, -1
  %8623 = icmp ult i32 %8620, 32768
  br i1 %8623, label %8593, label %8627

8624:                                             ; preds = %8575
  %8625 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8525, i64 0, i32 1
  %8626 = load i32, i32* %8625, align 4
  br label %8627

8627:                                             ; preds = %8617, %8568, %8624
  %8628 = phi i32 [ %8528, %8624 ], [ %8571, %8568 ], [ %8620, %8617 ]
  %8629 = phi i32 [ %8500, %8624 ], [ %8573, %8568 ], [ %8622, %8617 ]
  %8630 = phi i32 [ %8626, %8624 ], [ %8540, %8568 ], [ %8589, %8617 ]
  %8631 = phi i32 [ %8577, %8624 ], [ %8572, %8568 ], [ %8621, %8617 ]
  %8632 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %8520
  %8633 = load i8, i8* %8632, align 1
  %8634 = zext i8 %8633 to i32
  %8635 = xor i32 %8630, %8634
  %8636 = icmp eq i32 %8635, 0
  %8637 = select i1 %8636, i32 %4864, i32 %7338
  %8638 = getelementptr inbounds i32, i32* %7359, i64 %7343
  store i32 %8637, i32* %8638, align 4
  %8639 = load i32, i32* %8502, align 4
  %8640 = or i32 %8639, 16384
  store i32 %8640, i32* %8502, align 4
  %8641 = shl i32 %8635, 28
  %8642 = or i32 %8498, %8641
  %8643 = or i32 %8642, 8192
  %8644 = load i32, i32* %8504, align 4
  %8645 = or i32 %8644, 4096
  store i32 %8645, i32* %8504, align 4
  %8646 = load i32, i32* %4, align 8
  %8647 = add i32 %8646, 2
  %8648 = zext i32 %8647 to i64
  %8649 = getelementptr inbounds i32, i32* %7360, i64 %8648
  %8650 = shl i32 %8635, 18
  %8651 = load i32, i32* %8649, align 4
  %8652 = or i32 %8650, %8651
  %8653 = or i32 %8652, 2
  store i32 %8653, i32* %8649, align 4
  %8654 = getelementptr inbounds i32, i32* %8649, i64 -1
  %8655 = load i32, i32* %8654, align 4
  %8656 = or i32 %8655, 4
  store i32 %8656, i32* %8654, align 4
  %8657 = getelementptr inbounds i32, i32* %8649, i64 1
  %8658 = load i32, i32* %8657, align 4
  %8659 = or i32 %8658, 1
  store i32 %8659, i32* %8657, align 4
  br label %9758

8660:                                             ; preds = %7357
  %8661 = and i32 %7365, 2097168
  %8662 = icmp eq i32 %8661, 0
  br i1 %8662, label %8663, label %8937

8663:                                             ; preds = %8660
  %8664 = load i8*, i8** %7335, align 8
  %8665 = and i32 %7365, 495
  %8666 = zext i32 %8665 to i64
  %8667 = getelementptr inbounds i8, i8* %8664, i64 %8666
  %8668 = load i8, i8* %8667, align 1
  %8669 = zext i8 %8668 to i64
  %8670 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8669
  %8671 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8670, align 8
  %8672 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 0
  %8673 = load i32, i32* %8672, align 8
  %8674 = sub i32 %7364, %8673
  %8675 = lshr i32 %7362, 16
  %8676 = icmp ult i32 %8675, %8673
  br i1 %8676, label %8677, label %8721

8677:                                             ; preds = %8663
  %8678 = icmp ult i32 %8674, %8673
  %8679 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 1
  %8680 = load i32, i32* %8679, align 4
  %8681 = icmp eq i32 %8680, 0
  %8682 = zext i1 %8681 to i32
  %8683 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 3
  %8684 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 2
  %8685 = select i1 %8678, %struct.opj_mqc_state** %8684, %struct.opj_mqc_state** %8683
  %8686 = select i1 %8678, i32 %8680, i32 %8682
  %8687 = bitcast %struct.opj_mqc_state** %8685 to i64*
  %8688 = load i64, i64* %8687, align 8
  %8689 = bitcast %struct.opj_mqc_state** %8670 to i64*
  store i64 %8688, i64* %8689, align 8
  br label %8690

8690:                                             ; preds = %8714, %8677
  %8691 = phi i32 [ %8673, %8677 ], [ %8717, %8714 ]
  %8692 = phi i32 [ %7363, %8677 ], [ %8719, %8714 ]
  %8693 = phi i32 [ %7362, %8677 ], [ %8718, %8714 ]
  %8694 = icmp eq i32 %8692, 0
  br i1 %8694, label %8695, label %8714

8695:                                             ; preds = %8690
  %8696 = load i8*, i8** %7336, align 8
  %8697 = getelementptr inbounds i8, i8* %8696, i64 1
  %8698 = load i8, i8* %8697, align 1
  %8699 = zext i8 %8698 to i32
  %8700 = load i8, i8* %8696, align 1
  %8701 = icmp eq i8 %8700, -1
  br i1 %8701, label %8702, label %8711

8702:                                             ; preds = %8695
  %8703 = icmp ugt i8 %8698, -113
  br i1 %8703, label %8704, label %8708

8704:                                             ; preds = %8702
  %8705 = add i32 %8693, 65280
  %8706 = load i32, i32* %7337, align 4
  %8707 = add i32 %8706, 1
  store i32 %8707, i32* %7337, align 4
  br label %8714

8708:                                             ; preds = %8702
  store i8* %8697, i8** %7336, align 8
  %8709 = shl nuw nsw i32 %8699, 9
  %8710 = add i32 %8709, %8693
  br label %8714

8711:                                             ; preds = %8695
  store i8* %8697, i8** %7336, align 8
  %8712 = shl nuw nsw i32 %8699, 8
  %8713 = add i32 %8712, %8693
  br label %8714

8714:                                             ; preds = %8711, %8708, %8704, %8690
  %8715 = phi i32 [ %8692, %8690 ], [ 8, %8704 ], [ 7, %8708 ], [ 8, %8711 ]
  %8716 = phi i32 [ %8693, %8690 ], [ %8705, %8704 ], [ %8710, %8708 ], [ %8713, %8711 ]
  %8717 = shl i32 %8691, 1
  %8718 = shl i32 %8716, 1
  %8719 = add i32 %8715, -1
  %8720 = icmp ult i32 %8717, 32768
  br i1 %8720, label %8690, label %8773

8721:                                             ; preds = %8663
  %8722 = shl i32 %8673, 16
  %8723 = sub i32 %7362, %8722
  %8724 = trunc i32 %8674 to i16
  %8725 = icmp sgt i16 %8724, -1
  br i1 %8725, label %8726, label %8770

8726:                                             ; preds = %8721
  %8727 = icmp ult i32 %8674, %8673
  %8728 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 1
  %8729 = load i32, i32* %8728, align 4
  %8730 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 2
  %8731 = icmp eq i32 %8729, 0
  %8732 = zext i1 %8731 to i32
  %8733 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 3
  %8734 = select i1 %8727, %struct.opj_mqc_state** %8733, %struct.opj_mqc_state** %8730
  %8735 = select i1 %8727, i32 %8732, i32 %8729
  %8736 = bitcast %struct.opj_mqc_state** %8734 to i64*
  %8737 = load i64, i64* %8736, align 8
  %8738 = bitcast %struct.opj_mqc_state** %8670 to i64*
  store i64 %8737, i64* %8738, align 8
  br label %8739

8739:                                             ; preds = %8763, %8726
  %8740 = phi i32 [ %8674, %8726 ], [ %8766, %8763 ]
  %8741 = phi i32 [ %7363, %8726 ], [ %8768, %8763 ]
  %8742 = phi i32 [ %8723, %8726 ], [ %8767, %8763 ]
  %8743 = icmp eq i32 %8741, 0
  br i1 %8743, label %8744, label %8763

8744:                                             ; preds = %8739
  %8745 = load i8*, i8** %7336, align 8
  %8746 = getelementptr inbounds i8, i8* %8745, i64 1
  %8747 = load i8, i8* %8746, align 1
  %8748 = zext i8 %8747 to i32
  %8749 = load i8, i8* %8745, align 1
  %8750 = icmp eq i8 %8749, -1
  br i1 %8750, label %8751, label %8760

8751:                                             ; preds = %8744
  %8752 = icmp ugt i8 %8747, -113
  br i1 %8752, label %8753, label %8757

8753:                                             ; preds = %8751
  %8754 = add i32 %8742, 65280
  %8755 = load i32, i32* %7337, align 4
  %8756 = add i32 %8755, 1
  store i32 %8756, i32* %7337, align 4
  br label %8763

8757:                                             ; preds = %8751
  store i8* %8746, i8** %7336, align 8
  %8758 = shl nuw nsw i32 %8748, 9
  %8759 = add i32 %8758, %8742
  br label %8763

8760:                                             ; preds = %8744
  store i8* %8746, i8** %7336, align 8
  %8761 = shl nuw nsw i32 %8748, 8
  %8762 = add i32 %8761, %8742
  br label %8763

8763:                                             ; preds = %8760, %8757, %8753, %8739
  %8764 = phi i32 [ %8741, %8739 ], [ 8, %8753 ], [ 7, %8757 ], [ 8, %8760 ]
  %8765 = phi i32 [ %8742, %8739 ], [ %8754, %8753 ], [ %8759, %8757 ], [ %8762, %8760 ]
  %8766 = shl i32 %8740, 1
  %8767 = shl i32 %8765, 1
  %8768 = add i32 %8764, -1
  %8769 = icmp ult i32 %8766, 32768
  br i1 %8769, label %8739, label %8773

8770:                                             ; preds = %8721
  %8771 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8671, i64 0, i32 1
  %8772 = load i32, i32* %8771, align 4
  br label %8773

8773:                                             ; preds = %8763, %8714, %8770
  %8774 = phi i32 [ %8674, %8770 ], [ %8717, %8714 ], [ %8766, %8763 ]
  %8775 = phi i32 [ %7363, %8770 ], [ %8719, %8714 ], [ %8768, %8763 ]
  %8776 = phi i32 [ %8772, %8770 ], [ %8686, %8714 ], [ %8735, %8763 ]
  %8777 = phi i32 [ %8723, %8770 ], [ %8718, %8714 ], [ %8767, %8763 ]
  %8778 = icmp eq i32 %8776, 0
  br i1 %8778, label %8937, label %8779

8779:                                             ; preds = %8773
  %8780 = getelementptr inbounds i32, i32* %7360, i64 -1
  %8781 = load i32, i32* %8780, align 4
  %8782 = getelementptr inbounds i32, i32* %7360, i64 1
  %8783 = load i32, i32* %8782, align 4
  %8784 = and i32 %7365, 170
  %8785 = lshr i32 %8781, 19
  %8786 = and i32 %8785, 1
  %8787 = lshr i32 %8783, 17
  %8788 = and i32 %8787, 4
  %8789 = lshr i32 %7365, 14
  %8790 = and i32 %8789, 16
  %8791 = lshr i32 %7365, 16
  %8792 = and i32 %8791, 64
  %8793 = or i32 %8792, %8784
  %8794 = or i32 %8793, %8790
  %8795 = or i32 %8794, %8786
  %8796 = or i32 %8795, %8788
  %8797 = zext i32 %8796 to i64
  %8798 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %8797
  %8799 = load i8, i8* %8798, align 1
  %8800 = zext i8 %8799 to i64
  %8801 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8800
  %8802 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8801, align 8
  %8803 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 0
  %8804 = load i32, i32* %8803, align 8
  %8805 = sub i32 %8774, %8804
  %8806 = lshr i32 %8777, 16
  %8807 = icmp ult i32 %8806, %8804
  br i1 %8807, label %8808, label %8852

8808:                                             ; preds = %8779
  %8809 = icmp ult i32 %8805, %8804
  %8810 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 1
  %8811 = load i32, i32* %8810, align 4
  %8812 = icmp eq i32 %8811, 0
  %8813 = zext i1 %8812 to i32
  %8814 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 3
  %8815 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 2
  %8816 = select i1 %8809, %struct.opj_mqc_state** %8815, %struct.opj_mqc_state** %8814
  %8817 = select i1 %8809, i32 %8811, i32 %8813
  %8818 = bitcast %struct.opj_mqc_state** %8816 to i64*
  %8819 = load i64, i64* %8818, align 8
  %8820 = bitcast %struct.opj_mqc_state** %8801 to i64*
  store i64 %8819, i64* %8820, align 8
  br label %8821

8821:                                             ; preds = %8845, %8808
  %8822 = phi i32 [ %8804, %8808 ], [ %8848, %8845 ]
  %8823 = phi i32 [ %8775, %8808 ], [ %8850, %8845 ]
  %8824 = phi i32 [ %8777, %8808 ], [ %8849, %8845 ]
  %8825 = icmp eq i32 %8823, 0
  br i1 %8825, label %8826, label %8845

8826:                                             ; preds = %8821
  %8827 = load i8*, i8** %7336, align 8
  %8828 = getelementptr inbounds i8, i8* %8827, i64 1
  %8829 = load i8, i8* %8828, align 1
  %8830 = zext i8 %8829 to i32
  %8831 = load i8, i8* %8827, align 1
  %8832 = icmp eq i8 %8831, -1
  br i1 %8832, label %8833, label %8842

8833:                                             ; preds = %8826
  %8834 = icmp ugt i8 %8829, -113
  br i1 %8834, label %8835, label %8839

8835:                                             ; preds = %8833
  %8836 = add i32 %8824, 65280
  %8837 = load i32, i32* %7337, align 4
  %8838 = add i32 %8837, 1
  store i32 %8838, i32* %7337, align 4
  br label %8845

8839:                                             ; preds = %8833
  store i8* %8828, i8** %7336, align 8
  %8840 = shl nuw nsw i32 %8830, 9
  %8841 = add i32 %8840, %8824
  br label %8845

8842:                                             ; preds = %8826
  store i8* %8828, i8** %7336, align 8
  %8843 = shl nuw nsw i32 %8830, 8
  %8844 = add i32 %8843, %8824
  br label %8845

8845:                                             ; preds = %8842, %8839, %8835, %8821
  %8846 = phi i32 [ %8823, %8821 ], [ 8, %8835 ], [ 7, %8839 ], [ 8, %8842 ]
  %8847 = phi i32 [ %8824, %8821 ], [ %8836, %8835 ], [ %8841, %8839 ], [ %8844, %8842 ]
  %8848 = shl i32 %8822, 1
  %8849 = shl i32 %8847, 1
  %8850 = add i32 %8846, -1
  %8851 = icmp ult i32 %8848, 32768
  br i1 %8851, label %8821, label %8904

8852:                                             ; preds = %8779
  %8853 = shl i32 %8804, 16
  %8854 = sub i32 %8777, %8853
  %8855 = trunc i32 %8805 to i16
  %8856 = icmp sgt i16 %8855, -1
  br i1 %8856, label %8857, label %8901

8857:                                             ; preds = %8852
  %8858 = icmp ult i32 %8805, %8804
  %8859 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 1
  %8860 = load i32, i32* %8859, align 4
  %8861 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 2
  %8862 = icmp eq i32 %8860, 0
  %8863 = zext i1 %8862 to i32
  %8864 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 3
  %8865 = select i1 %8858, %struct.opj_mqc_state** %8864, %struct.opj_mqc_state** %8861
  %8866 = select i1 %8858, i32 %8863, i32 %8860
  %8867 = bitcast %struct.opj_mqc_state** %8865 to i64*
  %8868 = load i64, i64* %8867, align 8
  %8869 = bitcast %struct.opj_mqc_state** %8801 to i64*
  store i64 %8868, i64* %8869, align 8
  br label %8870

8870:                                             ; preds = %8894, %8857
  %8871 = phi i32 [ %8805, %8857 ], [ %8897, %8894 ]
  %8872 = phi i32 [ %8775, %8857 ], [ %8899, %8894 ]
  %8873 = phi i32 [ %8854, %8857 ], [ %8898, %8894 ]
  %8874 = icmp eq i32 %8872, 0
  br i1 %8874, label %8875, label %8894

8875:                                             ; preds = %8870
  %8876 = load i8*, i8** %7336, align 8
  %8877 = getelementptr inbounds i8, i8* %8876, i64 1
  %8878 = load i8, i8* %8877, align 1
  %8879 = zext i8 %8878 to i32
  %8880 = load i8, i8* %8876, align 1
  %8881 = icmp eq i8 %8880, -1
  br i1 %8881, label %8882, label %8891

8882:                                             ; preds = %8875
  %8883 = icmp ugt i8 %8878, -113
  br i1 %8883, label %8884, label %8888

8884:                                             ; preds = %8882
  %8885 = add i32 %8873, 65280
  %8886 = load i32, i32* %7337, align 4
  %8887 = add i32 %8886, 1
  store i32 %8887, i32* %7337, align 4
  br label %8894

8888:                                             ; preds = %8882
  store i8* %8877, i8** %7336, align 8
  %8889 = shl nuw nsw i32 %8879, 9
  %8890 = add i32 %8889, %8873
  br label %8894

8891:                                             ; preds = %8875
  store i8* %8877, i8** %7336, align 8
  %8892 = shl nuw nsw i32 %8879, 8
  %8893 = add i32 %8892, %8873
  br label %8894

8894:                                             ; preds = %8891, %8888, %8884, %8870
  %8895 = phi i32 [ %8872, %8870 ], [ 8, %8884 ], [ 7, %8888 ], [ 8, %8891 ]
  %8896 = phi i32 [ %8873, %8870 ], [ %8885, %8884 ], [ %8890, %8888 ], [ %8893, %8891 ]
  %8897 = shl i32 %8871, 1
  %8898 = shl i32 %8896, 1
  %8899 = add i32 %8895, -1
  %8900 = icmp ult i32 %8897, 32768
  br i1 %8900, label %8870, label %8904

8901:                                             ; preds = %8852
  %8902 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8802, i64 0, i32 1
  %8903 = load i32, i32* %8902, align 4
  br label %8904

8904:                                             ; preds = %8894, %8845, %8901
  %8905 = phi i32 [ %8805, %8901 ], [ %8848, %8845 ], [ %8897, %8894 ]
  %8906 = phi i32 [ %8775, %8901 ], [ %8850, %8845 ], [ %8899, %8894 ]
  %8907 = phi i32 [ %8903, %8901 ], [ %8817, %8845 ], [ %8866, %8894 ]
  %8908 = phi i32 [ %8854, %8901 ], [ %8849, %8845 ], [ %8898, %8894 ]
  %8909 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %8797
  %8910 = load i8, i8* %8909, align 1
  %8911 = zext i8 %8910 to i32
  %8912 = xor i32 %8907, %8911
  %8913 = icmp eq i32 %8912, 0
  %8914 = select i1 %8913, i32 %4864, i32 %7338
  store i32 %8914, i32* %7359, align 4
  %8915 = load i32, i32* %8780, align 4
  %8916 = or i32 %8915, 32
  store i32 %8916, i32* %8780, align 4
  %8917 = shl i32 %8912, 19
  %8918 = or i32 %7365, %8917
  %8919 = or i32 %8918, 16
  %8920 = load i32, i32* %8782, align 4
  %8921 = or i32 %8920, 8
  store i32 %8921, i32* %8782, align 4
  %8922 = load i32, i32* %4, align 8
  %8923 = add i32 %8922, 2
  %8924 = zext i32 %8923 to i64
  %8925 = sub nsw i64 0, %8924
  %8926 = getelementptr inbounds i32, i32* %7360, i64 %8925
  %8927 = shl i32 %8912, 31
  %8928 = load i32, i32* %8926, align 4
  %8929 = or i32 %8927, %8928
  %8930 = or i32 %8929, 65536
  store i32 %8930, i32* %8926, align 4
  %8931 = getelementptr inbounds i32, i32* %8926, i64 -1
  %8932 = load i32, i32* %8931, align 4
  %8933 = or i32 %8932, 131072
  store i32 %8933, i32* %8931, align 4
  %8934 = getelementptr inbounds i32, i32* %8926, i64 1
  %8935 = load i32, i32* %8934, align 4
  %8936 = or i32 %8935, 32768
  store i32 %8936, i32* %8934, align 4
  br label %8937

8937:                                             ; preds = %8904, %8773, %8660
  %8938 = phi i32 [ %7364, %8660 ], [ %8905, %8904 ], [ %8774, %8773 ]
  %8939 = phi i32 [ %7363, %8660 ], [ %8906, %8904 ], [ %8775, %8773 ]
  %8940 = phi i32 [ %7365, %8660 ], [ %8919, %8904 ], [ %7365, %8773 ]
  %8941 = phi i32 [ %7362, %8660 ], [ %8908, %8904 ], [ %8777, %8773 ]
  %8942 = phi %struct.opj_mqc_state** [ %7361, %8660 ], [ %8801, %8904 ], [ %8670, %8773 ]
  %8943 = and i32 %8940, 16777344
  %8944 = icmp eq i32 %8943, 0
  br i1 %8944, label %8945, label %9206

8945:                                             ; preds = %8937
  %8946 = lshr i32 %8940, 3
  %8947 = load i8*, i8** %7335, align 8
  %8948 = and i32 %8946, 495
  %8949 = zext i32 %8948 to i64
  %8950 = getelementptr inbounds i8, i8* %8947, i64 %8949
  %8951 = load i8, i8* %8950, align 1
  %8952 = zext i8 %8951 to i64
  %8953 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %8952
  %8954 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %8953, align 8
  %8955 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 0
  %8956 = load i32, i32* %8955, align 8
  %8957 = sub i32 %8938, %8956
  %8958 = lshr i32 %8941, 16
  %8959 = icmp ult i32 %8958, %8956
  br i1 %8959, label %8960, label %9004

8960:                                             ; preds = %8945
  %8961 = icmp ult i32 %8957, %8956
  %8962 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 1
  %8963 = load i32, i32* %8962, align 4
  %8964 = icmp eq i32 %8963, 0
  %8965 = zext i1 %8964 to i32
  %8966 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 3
  %8967 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 2
  %8968 = select i1 %8961, %struct.opj_mqc_state** %8967, %struct.opj_mqc_state** %8966
  %8969 = select i1 %8961, i32 %8963, i32 %8965
  %8970 = bitcast %struct.opj_mqc_state** %8968 to i64*
  %8971 = load i64, i64* %8970, align 8
  %8972 = bitcast %struct.opj_mqc_state** %8953 to i64*
  store i64 %8971, i64* %8972, align 8
  br label %8973

8973:                                             ; preds = %8997, %8960
  %8974 = phi i32 [ %8956, %8960 ], [ %9000, %8997 ]
  %8975 = phi i32 [ %8939, %8960 ], [ %9002, %8997 ]
  %8976 = phi i32 [ %8941, %8960 ], [ %9001, %8997 ]
  %8977 = icmp eq i32 %8975, 0
  br i1 %8977, label %8978, label %8997

8978:                                             ; preds = %8973
  %8979 = load i8*, i8** %7336, align 8
  %8980 = getelementptr inbounds i8, i8* %8979, i64 1
  %8981 = load i8, i8* %8980, align 1
  %8982 = zext i8 %8981 to i32
  %8983 = load i8, i8* %8979, align 1
  %8984 = icmp eq i8 %8983, -1
  br i1 %8984, label %8985, label %8994

8985:                                             ; preds = %8978
  %8986 = icmp ugt i8 %8981, -113
  br i1 %8986, label %8987, label %8991

8987:                                             ; preds = %8985
  %8988 = add i32 %8976, 65280
  %8989 = load i32, i32* %7337, align 4
  %8990 = add i32 %8989, 1
  store i32 %8990, i32* %7337, align 4
  br label %8997

8991:                                             ; preds = %8985
  store i8* %8980, i8** %7336, align 8
  %8992 = shl nuw nsw i32 %8982, 9
  %8993 = add i32 %8992, %8976
  br label %8997

8994:                                             ; preds = %8978
  store i8* %8980, i8** %7336, align 8
  %8995 = shl nuw nsw i32 %8982, 8
  %8996 = add i32 %8995, %8976
  br label %8997

8997:                                             ; preds = %8994, %8991, %8987, %8973
  %8998 = phi i32 [ %8975, %8973 ], [ 8, %8987 ], [ 7, %8991 ], [ 8, %8994 ]
  %8999 = phi i32 [ %8976, %8973 ], [ %8988, %8987 ], [ %8993, %8991 ], [ %8996, %8994 ]
  %9000 = shl i32 %8974, 1
  %9001 = shl i32 %8999, 1
  %9002 = add i32 %8998, -1
  %9003 = icmp ult i32 %9000, 32768
  br i1 %9003, label %8973, label %9056

9004:                                             ; preds = %8945
  %9005 = shl i32 %8956, 16
  %9006 = sub i32 %8941, %9005
  %9007 = trunc i32 %8957 to i16
  %9008 = icmp sgt i16 %9007, -1
  br i1 %9008, label %9009, label %9053

9009:                                             ; preds = %9004
  %9010 = icmp ult i32 %8957, %8956
  %9011 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 1
  %9012 = load i32, i32* %9011, align 4
  %9013 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 2
  %9014 = icmp eq i32 %9012, 0
  %9015 = zext i1 %9014 to i32
  %9016 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 3
  %9017 = select i1 %9010, %struct.opj_mqc_state** %9016, %struct.opj_mqc_state** %9013
  %9018 = select i1 %9010, i32 %9015, i32 %9012
  %9019 = bitcast %struct.opj_mqc_state** %9017 to i64*
  %9020 = load i64, i64* %9019, align 8
  %9021 = bitcast %struct.opj_mqc_state** %8953 to i64*
  store i64 %9020, i64* %9021, align 8
  br label %9022

9022:                                             ; preds = %9046, %9009
  %9023 = phi i32 [ %8957, %9009 ], [ %9049, %9046 ]
  %9024 = phi i32 [ %8939, %9009 ], [ %9051, %9046 ]
  %9025 = phi i32 [ %9006, %9009 ], [ %9050, %9046 ]
  %9026 = icmp eq i32 %9024, 0
  br i1 %9026, label %9027, label %9046

9027:                                             ; preds = %9022
  %9028 = load i8*, i8** %7336, align 8
  %9029 = getelementptr inbounds i8, i8* %9028, i64 1
  %9030 = load i8, i8* %9029, align 1
  %9031 = zext i8 %9030 to i32
  %9032 = load i8, i8* %9028, align 1
  %9033 = icmp eq i8 %9032, -1
  br i1 %9033, label %9034, label %9043

9034:                                             ; preds = %9027
  %9035 = icmp ugt i8 %9030, -113
  br i1 %9035, label %9036, label %9040

9036:                                             ; preds = %9034
  %9037 = add i32 %9025, 65280
  %9038 = load i32, i32* %7337, align 4
  %9039 = add i32 %9038, 1
  store i32 %9039, i32* %7337, align 4
  br label %9046

9040:                                             ; preds = %9034
  store i8* %9029, i8** %7336, align 8
  %9041 = shl nuw nsw i32 %9031, 9
  %9042 = add i32 %9041, %9025
  br label %9046

9043:                                             ; preds = %9027
  store i8* %9029, i8** %7336, align 8
  %9044 = shl nuw nsw i32 %9031, 8
  %9045 = add i32 %9044, %9025
  br label %9046

9046:                                             ; preds = %9043, %9040, %9036, %9022
  %9047 = phi i32 [ %9024, %9022 ], [ 8, %9036 ], [ 7, %9040 ], [ 8, %9043 ]
  %9048 = phi i32 [ %9025, %9022 ], [ %9037, %9036 ], [ %9042, %9040 ], [ %9045, %9043 ]
  %9049 = shl i32 %9023, 1
  %9050 = shl i32 %9048, 1
  %9051 = add i32 %9047, -1
  %9052 = icmp ult i32 %9049, 32768
  br i1 %9052, label %9022, label %9056

9053:                                             ; preds = %9004
  %9054 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %8954, i64 0, i32 1
  %9055 = load i32, i32* %9054, align 4
  br label %9056

9056:                                             ; preds = %9046, %8997, %9053
  %9057 = phi i32 [ %8957, %9053 ], [ %9000, %8997 ], [ %9049, %9046 ]
  %9058 = phi i32 [ %8939, %9053 ], [ %9002, %8997 ], [ %9051, %9046 ]
  %9059 = phi i32 [ %9055, %9053 ], [ %8969, %8997 ], [ %9018, %9046 ]
  %9060 = phi i32 [ %9006, %9053 ], [ %9001, %8997 ], [ %9050, %9046 ]
  %9061 = icmp eq i32 %9059, 0
  br i1 %9061, label %9206, label %9062

9062:                                             ; preds = %9056
  %9063 = getelementptr inbounds i32, i32* %7360, i64 -1
  %9064 = load i32, i32* %9063, align 4
  %9065 = getelementptr inbounds i32, i32* %7360, i64 1
  %9066 = load i32, i32* %9065, align 4
  %9067 = and i32 %8946, 170
  %9068 = lshr i32 %9064, 22
  %9069 = and i32 %9068, 1
  %9070 = lshr i32 %9066, 20
  %9071 = and i32 %9070, 4
  %9072 = lshr i32 %8940, 15
  %9073 = and i32 %9072, 16
  %9074 = lshr i32 %8940, 19
  %9075 = and i32 %9074, 64
  %9076 = or i32 %9075, %9067
  %9077 = or i32 %9076, %9073
  %9078 = or i32 %9077, %9069
  %9079 = or i32 %9078, %9071
  %9080 = zext i32 %9079 to i64
  %9081 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %9080
  %9082 = load i8, i8* %9081, align 1
  %9083 = zext i8 %9082 to i64
  %9084 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %9083
  %9085 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %9084, align 8
  %9086 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 0
  %9087 = load i32, i32* %9086, align 8
  %9088 = sub i32 %9057, %9087
  %9089 = lshr i32 %9060, 16
  %9090 = icmp ult i32 %9089, %9087
  br i1 %9090, label %9091, label %9135

9091:                                             ; preds = %9062
  %9092 = icmp ult i32 %9088, %9087
  %9093 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 1
  %9094 = load i32, i32* %9093, align 4
  %9095 = icmp eq i32 %9094, 0
  %9096 = zext i1 %9095 to i32
  %9097 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 3
  %9098 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 2
  %9099 = select i1 %9092, %struct.opj_mqc_state** %9098, %struct.opj_mqc_state** %9097
  %9100 = select i1 %9092, i32 %9094, i32 %9096
  %9101 = bitcast %struct.opj_mqc_state** %9099 to i64*
  %9102 = load i64, i64* %9101, align 8
  %9103 = bitcast %struct.opj_mqc_state** %9084 to i64*
  store i64 %9102, i64* %9103, align 8
  br label %9104

9104:                                             ; preds = %9128, %9091
  %9105 = phi i32 [ %9087, %9091 ], [ %9131, %9128 ]
  %9106 = phi i32 [ %9058, %9091 ], [ %9133, %9128 ]
  %9107 = phi i32 [ %9060, %9091 ], [ %9132, %9128 ]
  %9108 = icmp eq i32 %9106, 0
  br i1 %9108, label %9109, label %9128

9109:                                             ; preds = %9104
  %9110 = load i8*, i8** %7336, align 8
  %9111 = getelementptr inbounds i8, i8* %9110, i64 1
  %9112 = load i8, i8* %9111, align 1
  %9113 = zext i8 %9112 to i32
  %9114 = load i8, i8* %9110, align 1
  %9115 = icmp eq i8 %9114, -1
  br i1 %9115, label %9116, label %9125

9116:                                             ; preds = %9109
  %9117 = icmp ugt i8 %9112, -113
  br i1 %9117, label %9118, label %9122

9118:                                             ; preds = %9116
  %9119 = add i32 %9107, 65280
  %9120 = load i32, i32* %7337, align 4
  %9121 = add i32 %9120, 1
  store i32 %9121, i32* %7337, align 4
  br label %9128

9122:                                             ; preds = %9116
  store i8* %9111, i8** %7336, align 8
  %9123 = shl nuw nsw i32 %9113, 9
  %9124 = add i32 %9123, %9107
  br label %9128

9125:                                             ; preds = %9109
  store i8* %9111, i8** %7336, align 8
  %9126 = shl nuw nsw i32 %9113, 8
  %9127 = add i32 %9126, %9107
  br label %9128

9128:                                             ; preds = %9125, %9122, %9118, %9104
  %9129 = phi i32 [ %9106, %9104 ], [ 8, %9118 ], [ 7, %9122 ], [ 8, %9125 ]
  %9130 = phi i32 [ %9107, %9104 ], [ %9119, %9118 ], [ %9124, %9122 ], [ %9127, %9125 ]
  %9131 = shl i32 %9105, 1
  %9132 = shl i32 %9130, 1
  %9133 = add i32 %9129, -1
  %9134 = icmp ult i32 %9131, 32768
  br i1 %9134, label %9104, label %9187

9135:                                             ; preds = %9062
  %9136 = shl i32 %9087, 16
  %9137 = sub i32 %9060, %9136
  %9138 = trunc i32 %9088 to i16
  %9139 = icmp sgt i16 %9138, -1
  br i1 %9139, label %9140, label %9184

9140:                                             ; preds = %9135
  %9141 = icmp ult i32 %9088, %9087
  %9142 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 1
  %9143 = load i32, i32* %9142, align 4
  %9144 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 2
  %9145 = icmp eq i32 %9143, 0
  %9146 = zext i1 %9145 to i32
  %9147 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 3
  %9148 = select i1 %9141, %struct.opj_mqc_state** %9147, %struct.opj_mqc_state** %9144
  %9149 = select i1 %9141, i32 %9146, i32 %9143
  %9150 = bitcast %struct.opj_mqc_state** %9148 to i64*
  %9151 = load i64, i64* %9150, align 8
  %9152 = bitcast %struct.opj_mqc_state** %9084 to i64*
  store i64 %9151, i64* %9152, align 8
  br label %9153

9153:                                             ; preds = %9177, %9140
  %9154 = phi i32 [ %9088, %9140 ], [ %9180, %9177 ]
  %9155 = phi i32 [ %9058, %9140 ], [ %9182, %9177 ]
  %9156 = phi i32 [ %9137, %9140 ], [ %9181, %9177 ]
  %9157 = icmp eq i32 %9155, 0
  br i1 %9157, label %9158, label %9177

9158:                                             ; preds = %9153
  %9159 = load i8*, i8** %7336, align 8
  %9160 = getelementptr inbounds i8, i8* %9159, i64 1
  %9161 = load i8, i8* %9160, align 1
  %9162 = zext i8 %9161 to i32
  %9163 = load i8, i8* %9159, align 1
  %9164 = icmp eq i8 %9163, -1
  br i1 %9164, label %9165, label %9174

9165:                                             ; preds = %9158
  %9166 = icmp ugt i8 %9161, -113
  br i1 %9166, label %9167, label %9171

9167:                                             ; preds = %9165
  %9168 = add i32 %9156, 65280
  %9169 = load i32, i32* %7337, align 4
  %9170 = add i32 %9169, 1
  store i32 %9170, i32* %7337, align 4
  br label %9177

9171:                                             ; preds = %9165
  store i8* %9160, i8** %7336, align 8
  %9172 = shl nuw nsw i32 %9162, 9
  %9173 = add i32 %9172, %9156
  br label %9177

9174:                                             ; preds = %9158
  store i8* %9160, i8** %7336, align 8
  %9175 = shl nuw nsw i32 %9162, 8
  %9176 = add i32 %9175, %9156
  br label %9177

9177:                                             ; preds = %9174, %9171, %9167, %9153
  %9178 = phi i32 [ %9155, %9153 ], [ 8, %9167 ], [ 7, %9171 ], [ 8, %9174 ]
  %9179 = phi i32 [ %9156, %9153 ], [ %9168, %9167 ], [ %9173, %9171 ], [ %9176, %9174 ]
  %9180 = shl i32 %9154, 1
  %9181 = shl i32 %9179, 1
  %9182 = add i32 %9178, -1
  %9183 = icmp ult i32 %9180, 32768
  br i1 %9183, label %9153, label %9187

9184:                                             ; preds = %9135
  %9185 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9085, i64 0, i32 1
  %9186 = load i32, i32* %9185, align 4
  br label %9187

9187:                                             ; preds = %9177, %9128, %9184
  %9188 = phi i32 [ %9088, %9184 ], [ %9131, %9128 ], [ %9180, %9177 ]
  %9189 = phi i32 [ %9058, %9184 ], [ %9133, %9128 ], [ %9182, %9177 ]
  %9190 = phi i32 [ %9186, %9184 ], [ %9100, %9128 ], [ %9149, %9177 ]
  %9191 = phi i32 [ %9137, %9184 ], [ %9132, %9128 ], [ %9181, %9177 ]
  %9192 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %9080
  %9193 = load i8, i8* %9192, align 1
  %9194 = zext i8 %9193 to i32
  %9195 = xor i32 %9190, %9194
  %9196 = icmp eq i32 %9195, 0
  %9197 = select i1 %9196, i32 %4864, i32 %7338
  %9198 = getelementptr inbounds i32, i32* %7359, i64 %7339
  store i32 %9197, i32* %9198, align 4
  %9199 = load i32, i32* %9063, align 4
  %9200 = or i32 %9199, 256
  store i32 %9200, i32* %9063, align 4
  %9201 = shl i32 %9195, 22
  %9202 = or i32 %8940, %9201
  %9203 = or i32 %9202, 128
  %9204 = load i32, i32* %9065, align 4
  %9205 = or i32 %9204, 64
  store i32 %9205, i32* %9065, align 4
  br label %9206

9206:                                             ; preds = %9187, %9056, %8937
  %9207 = phi i32 [ %8938, %8937 ], [ %9188, %9187 ], [ %9057, %9056 ]
  %9208 = phi i32 [ %8939, %8937 ], [ %9189, %9187 ], [ %9058, %9056 ]
  %9209 = phi i32 [ %8940, %8937 ], [ %9203, %9187 ], [ %8940, %9056 ]
  %9210 = phi i32 [ %8941, %8937 ], [ %9191, %9187 ], [ %9060, %9056 ]
  %9211 = phi %struct.opj_mqc_state** [ %8942, %8937 ], [ %9084, %9187 ], [ %8953, %9056 ]
  %9212 = and i32 %9209, 134218752
  %9213 = icmp eq i32 %9212, 0
  br i1 %9213, label %9214, label %9475

9214:                                             ; preds = %9206
  %9215 = lshr i32 %9209, 6
  %9216 = load i8*, i8** %7335, align 8
  %9217 = and i32 %9215, 495
  %9218 = zext i32 %9217 to i64
  %9219 = getelementptr inbounds i8, i8* %9216, i64 %9218
  %9220 = load i8, i8* %9219, align 1
  %9221 = zext i8 %9220 to i64
  %9222 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %9221
  %9223 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %9222, align 8
  %9224 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 0
  %9225 = load i32, i32* %9224, align 8
  %9226 = sub i32 %9207, %9225
  %9227 = lshr i32 %9210, 16
  %9228 = icmp ult i32 %9227, %9225
  br i1 %9228, label %9229, label %9273

9229:                                             ; preds = %9214
  %9230 = icmp ult i32 %9226, %9225
  %9231 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 1
  %9232 = load i32, i32* %9231, align 4
  %9233 = icmp eq i32 %9232, 0
  %9234 = zext i1 %9233 to i32
  %9235 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 3
  %9236 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 2
  %9237 = select i1 %9230, %struct.opj_mqc_state** %9236, %struct.opj_mqc_state** %9235
  %9238 = select i1 %9230, i32 %9232, i32 %9234
  %9239 = bitcast %struct.opj_mqc_state** %9237 to i64*
  %9240 = load i64, i64* %9239, align 8
  %9241 = bitcast %struct.opj_mqc_state** %9222 to i64*
  store i64 %9240, i64* %9241, align 8
  br label %9242

9242:                                             ; preds = %9266, %9229
  %9243 = phi i32 [ %9225, %9229 ], [ %9269, %9266 ]
  %9244 = phi i32 [ %9208, %9229 ], [ %9271, %9266 ]
  %9245 = phi i32 [ %9210, %9229 ], [ %9270, %9266 ]
  %9246 = icmp eq i32 %9244, 0
  br i1 %9246, label %9247, label %9266

9247:                                             ; preds = %9242
  %9248 = load i8*, i8** %7336, align 8
  %9249 = getelementptr inbounds i8, i8* %9248, i64 1
  %9250 = load i8, i8* %9249, align 1
  %9251 = zext i8 %9250 to i32
  %9252 = load i8, i8* %9248, align 1
  %9253 = icmp eq i8 %9252, -1
  br i1 %9253, label %9254, label %9263

9254:                                             ; preds = %9247
  %9255 = icmp ugt i8 %9250, -113
  br i1 %9255, label %9256, label %9260

9256:                                             ; preds = %9254
  %9257 = add i32 %9245, 65280
  %9258 = load i32, i32* %7337, align 4
  %9259 = add i32 %9258, 1
  store i32 %9259, i32* %7337, align 4
  br label %9266

9260:                                             ; preds = %9254
  store i8* %9249, i8** %7336, align 8
  %9261 = shl nuw nsw i32 %9251, 9
  %9262 = add i32 %9261, %9245
  br label %9266

9263:                                             ; preds = %9247
  store i8* %9249, i8** %7336, align 8
  %9264 = shl nuw nsw i32 %9251, 8
  %9265 = add i32 %9264, %9245
  br label %9266

9266:                                             ; preds = %9263, %9260, %9256, %9242
  %9267 = phi i32 [ %9244, %9242 ], [ 8, %9256 ], [ 7, %9260 ], [ 8, %9263 ]
  %9268 = phi i32 [ %9245, %9242 ], [ %9257, %9256 ], [ %9262, %9260 ], [ %9265, %9263 ]
  %9269 = shl i32 %9243, 1
  %9270 = shl i32 %9268, 1
  %9271 = add i32 %9267, -1
  %9272 = icmp ult i32 %9269, 32768
  br i1 %9272, label %9242, label %9325

9273:                                             ; preds = %9214
  %9274 = shl i32 %9225, 16
  %9275 = sub i32 %9210, %9274
  %9276 = trunc i32 %9226 to i16
  %9277 = icmp sgt i16 %9276, -1
  br i1 %9277, label %9278, label %9322

9278:                                             ; preds = %9273
  %9279 = icmp ult i32 %9226, %9225
  %9280 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 1
  %9281 = load i32, i32* %9280, align 4
  %9282 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 2
  %9283 = icmp eq i32 %9281, 0
  %9284 = zext i1 %9283 to i32
  %9285 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 3
  %9286 = select i1 %9279, %struct.opj_mqc_state** %9285, %struct.opj_mqc_state** %9282
  %9287 = select i1 %9279, i32 %9284, i32 %9281
  %9288 = bitcast %struct.opj_mqc_state** %9286 to i64*
  %9289 = load i64, i64* %9288, align 8
  %9290 = bitcast %struct.opj_mqc_state** %9222 to i64*
  store i64 %9289, i64* %9290, align 8
  br label %9291

9291:                                             ; preds = %9315, %9278
  %9292 = phi i32 [ %9226, %9278 ], [ %9318, %9315 ]
  %9293 = phi i32 [ %9208, %9278 ], [ %9320, %9315 ]
  %9294 = phi i32 [ %9275, %9278 ], [ %9319, %9315 ]
  %9295 = icmp eq i32 %9293, 0
  br i1 %9295, label %9296, label %9315

9296:                                             ; preds = %9291
  %9297 = load i8*, i8** %7336, align 8
  %9298 = getelementptr inbounds i8, i8* %9297, i64 1
  %9299 = load i8, i8* %9298, align 1
  %9300 = zext i8 %9299 to i32
  %9301 = load i8, i8* %9297, align 1
  %9302 = icmp eq i8 %9301, -1
  br i1 %9302, label %9303, label %9312

9303:                                             ; preds = %9296
  %9304 = icmp ugt i8 %9299, -113
  br i1 %9304, label %9305, label %9309

9305:                                             ; preds = %9303
  %9306 = add i32 %9294, 65280
  %9307 = load i32, i32* %7337, align 4
  %9308 = add i32 %9307, 1
  store i32 %9308, i32* %7337, align 4
  br label %9315

9309:                                             ; preds = %9303
  store i8* %9298, i8** %7336, align 8
  %9310 = shl nuw nsw i32 %9300, 9
  %9311 = add i32 %9310, %9294
  br label %9315

9312:                                             ; preds = %9296
  store i8* %9298, i8** %7336, align 8
  %9313 = shl nuw nsw i32 %9300, 8
  %9314 = add i32 %9313, %9294
  br label %9315

9315:                                             ; preds = %9312, %9309, %9305, %9291
  %9316 = phi i32 [ %9293, %9291 ], [ 8, %9305 ], [ 7, %9309 ], [ 8, %9312 ]
  %9317 = phi i32 [ %9294, %9291 ], [ %9306, %9305 ], [ %9311, %9309 ], [ %9314, %9312 ]
  %9318 = shl i32 %9292, 1
  %9319 = shl i32 %9317, 1
  %9320 = add i32 %9316, -1
  %9321 = icmp ult i32 %9318, 32768
  br i1 %9321, label %9291, label %9325

9322:                                             ; preds = %9273
  %9323 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9223, i64 0, i32 1
  %9324 = load i32, i32* %9323, align 4
  br label %9325

9325:                                             ; preds = %9315, %9266, %9322
  %9326 = phi i32 [ %9226, %9322 ], [ %9269, %9266 ], [ %9318, %9315 ]
  %9327 = phi i32 [ %9208, %9322 ], [ %9271, %9266 ], [ %9320, %9315 ]
  %9328 = phi i32 [ %9324, %9322 ], [ %9238, %9266 ], [ %9287, %9315 ]
  %9329 = phi i32 [ %9275, %9322 ], [ %9270, %9266 ], [ %9319, %9315 ]
  %9330 = icmp eq i32 %9328, 0
  br i1 %9330, label %9475, label %9331

9331:                                             ; preds = %9325
  %9332 = getelementptr inbounds i32, i32* %7360, i64 -1
  %9333 = load i32, i32* %9332, align 4
  %9334 = getelementptr inbounds i32, i32* %7360, i64 1
  %9335 = load i32, i32* %9334, align 4
  %9336 = and i32 %9215, 170
  %9337 = lshr i32 %9333, 25
  %9338 = and i32 %9337, 1
  %9339 = lshr i32 %9335, 23
  %9340 = and i32 %9339, 4
  %9341 = lshr i32 %9209, 18
  %9342 = and i32 %9341, 16
  %9343 = lshr i32 %9209, 22
  %9344 = and i32 %9343, 64
  %9345 = or i32 %9344, %9336
  %9346 = or i32 %9345, %9342
  %9347 = or i32 %9346, %9338
  %9348 = or i32 %9347, %9340
  %9349 = zext i32 %9348 to i64
  %9350 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %9349
  %9351 = load i8, i8* %9350, align 1
  %9352 = zext i8 %9351 to i64
  %9353 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %9352
  %9354 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %9353, align 8
  %9355 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 0
  %9356 = load i32, i32* %9355, align 8
  %9357 = sub i32 %9326, %9356
  %9358 = lshr i32 %9329, 16
  %9359 = icmp ult i32 %9358, %9356
  br i1 %9359, label %9360, label %9404

9360:                                             ; preds = %9331
  %9361 = icmp ult i32 %9357, %9356
  %9362 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 1
  %9363 = load i32, i32* %9362, align 4
  %9364 = icmp eq i32 %9363, 0
  %9365 = zext i1 %9364 to i32
  %9366 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 3
  %9367 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 2
  %9368 = select i1 %9361, %struct.opj_mqc_state** %9367, %struct.opj_mqc_state** %9366
  %9369 = select i1 %9361, i32 %9363, i32 %9365
  %9370 = bitcast %struct.opj_mqc_state** %9368 to i64*
  %9371 = load i64, i64* %9370, align 8
  %9372 = bitcast %struct.opj_mqc_state** %9353 to i64*
  store i64 %9371, i64* %9372, align 8
  br label %9373

9373:                                             ; preds = %9397, %9360
  %9374 = phi i32 [ %9356, %9360 ], [ %9400, %9397 ]
  %9375 = phi i32 [ %9327, %9360 ], [ %9402, %9397 ]
  %9376 = phi i32 [ %9329, %9360 ], [ %9401, %9397 ]
  %9377 = icmp eq i32 %9375, 0
  br i1 %9377, label %9378, label %9397

9378:                                             ; preds = %9373
  %9379 = load i8*, i8** %7336, align 8
  %9380 = getelementptr inbounds i8, i8* %9379, i64 1
  %9381 = load i8, i8* %9380, align 1
  %9382 = zext i8 %9381 to i32
  %9383 = load i8, i8* %9379, align 1
  %9384 = icmp eq i8 %9383, -1
  br i1 %9384, label %9385, label %9394

9385:                                             ; preds = %9378
  %9386 = icmp ugt i8 %9381, -113
  br i1 %9386, label %9387, label %9391

9387:                                             ; preds = %9385
  %9388 = add i32 %9376, 65280
  %9389 = load i32, i32* %7337, align 4
  %9390 = add i32 %9389, 1
  store i32 %9390, i32* %7337, align 4
  br label %9397

9391:                                             ; preds = %9385
  store i8* %9380, i8** %7336, align 8
  %9392 = shl nuw nsw i32 %9382, 9
  %9393 = add i32 %9392, %9376
  br label %9397

9394:                                             ; preds = %9378
  store i8* %9380, i8** %7336, align 8
  %9395 = shl nuw nsw i32 %9382, 8
  %9396 = add i32 %9395, %9376
  br label %9397

9397:                                             ; preds = %9394, %9391, %9387, %9373
  %9398 = phi i32 [ %9375, %9373 ], [ 8, %9387 ], [ 7, %9391 ], [ 8, %9394 ]
  %9399 = phi i32 [ %9376, %9373 ], [ %9388, %9387 ], [ %9393, %9391 ], [ %9396, %9394 ]
  %9400 = shl i32 %9374, 1
  %9401 = shl i32 %9399, 1
  %9402 = add i32 %9398, -1
  %9403 = icmp ult i32 %9400, 32768
  br i1 %9403, label %9373, label %9456

9404:                                             ; preds = %9331
  %9405 = shl i32 %9356, 16
  %9406 = sub i32 %9329, %9405
  %9407 = trunc i32 %9357 to i16
  %9408 = icmp sgt i16 %9407, -1
  br i1 %9408, label %9409, label %9453

9409:                                             ; preds = %9404
  %9410 = icmp ult i32 %9357, %9356
  %9411 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 1
  %9412 = load i32, i32* %9411, align 4
  %9413 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 2
  %9414 = icmp eq i32 %9412, 0
  %9415 = zext i1 %9414 to i32
  %9416 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 3
  %9417 = select i1 %9410, %struct.opj_mqc_state** %9416, %struct.opj_mqc_state** %9413
  %9418 = select i1 %9410, i32 %9415, i32 %9412
  %9419 = bitcast %struct.opj_mqc_state** %9417 to i64*
  %9420 = load i64, i64* %9419, align 8
  %9421 = bitcast %struct.opj_mqc_state** %9353 to i64*
  store i64 %9420, i64* %9421, align 8
  br label %9422

9422:                                             ; preds = %9446, %9409
  %9423 = phi i32 [ %9357, %9409 ], [ %9449, %9446 ]
  %9424 = phi i32 [ %9327, %9409 ], [ %9451, %9446 ]
  %9425 = phi i32 [ %9406, %9409 ], [ %9450, %9446 ]
  %9426 = icmp eq i32 %9424, 0
  br i1 %9426, label %9427, label %9446

9427:                                             ; preds = %9422
  %9428 = load i8*, i8** %7336, align 8
  %9429 = getelementptr inbounds i8, i8* %9428, i64 1
  %9430 = load i8, i8* %9429, align 1
  %9431 = zext i8 %9430 to i32
  %9432 = load i8, i8* %9428, align 1
  %9433 = icmp eq i8 %9432, -1
  br i1 %9433, label %9434, label %9443

9434:                                             ; preds = %9427
  %9435 = icmp ugt i8 %9430, -113
  br i1 %9435, label %9436, label %9440

9436:                                             ; preds = %9434
  %9437 = add i32 %9425, 65280
  %9438 = load i32, i32* %7337, align 4
  %9439 = add i32 %9438, 1
  store i32 %9439, i32* %7337, align 4
  br label %9446

9440:                                             ; preds = %9434
  store i8* %9429, i8** %7336, align 8
  %9441 = shl nuw nsw i32 %9431, 9
  %9442 = add i32 %9441, %9425
  br label %9446

9443:                                             ; preds = %9427
  store i8* %9429, i8** %7336, align 8
  %9444 = shl nuw nsw i32 %9431, 8
  %9445 = add i32 %9444, %9425
  br label %9446

9446:                                             ; preds = %9443, %9440, %9436, %9422
  %9447 = phi i32 [ %9424, %9422 ], [ 8, %9436 ], [ 7, %9440 ], [ 8, %9443 ]
  %9448 = phi i32 [ %9425, %9422 ], [ %9437, %9436 ], [ %9442, %9440 ], [ %9445, %9443 ]
  %9449 = shl i32 %9423, 1
  %9450 = shl i32 %9448, 1
  %9451 = add i32 %9447, -1
  %9452 = icmp ult i32 %9449, 32768
  br i1 %9452, label %9422, label %9456

9453:                                             ; preds = %9404
  %9454 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9354, i64 0, i32 1
  %9455 = load i32, i32* %9454, align 4
  br label %9456

9456:                                             ; preds = %9446, %9397, %9453
  %9457 = phi i32 [ %9357, %9453 ], [ %9400, %9397 ], [ %9449, %9446 ]
  %9458 = phi i32 [ %9327, %9453 ], [ %9402, %9397 ], [ %9451, %9446 ]
  %9459 = phi i32 [ %9455, %9453 ], [ %9369, %9397 ], [ %9418, %9446 ]
  %9460 = phi i32 [ %9406, %9453 ], [ %9401, %9397 ], [ %9450, %9446 ]
  %9461 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %9349
  %9462 = load i8, i8* %9461, align 1
  %9463 = zext i8 %9462 to i32
  %9464 = xor i32 %9459, %9463
  %9465 = icmp eq i32 %9464, 0
  %9466 = select i1 %9465, i32 %4864, i32 %7338
  %9467 = getelementptr inbounds i32, i32* %7359, i64 %7341
  store i32 %9466, i32* %9467, align 4
  %9468 = load i32, i32* %9332, align 4
  %9469 = or i32 %9468, 2048
  store i32 %9469, i32* %9332, align 4
  %9470 = shl i32 %9464, 25
  %9471 = or i32 %9209, %9470
  %9472 = or i32 %9471, 1024
  %9473 = load i32, i32* %9334, align 4
  %9474 = or i32 %9473, 512
  store i32 %9474, i32* %9334, align 4
  br label %9475

9475:                                             ; preds = %9456, %9325, %9206
  %9476 = phi i32 [ %9207, %9206 ], [ %9457, %9456 ], [ %9326, %9325 ]
  %9477 = phi i32 [ %9208, %9206 ], [ %9458, %9456 ], [ %9327, %9325 ]
  %9478 = phi i32 [ %9209, %9206 ], [ %9472, %9456 ], [ %9209, %9325 ]
  %9479 = phi i32 [ %9210, %9206 ], [ %9460, %9456 ], [ %9329, %9325 ]
  %9480 = phi %struct.opj_mqc_state** [ %9211, %9206 ], [ %9353, %9456 ], [ %9222, %9325 ]
  %9481 = and i32 %9478, 1073750016
  %9482 = icmp eq i32 %9481, 0
  br i1 %9482, label %9483, label %9758

9483:                                             ; preds = %9475
  %9484 = lshr i32 %9478, 9
  %9485 = load i8*, i8** %7335, align 8
  %9486 = and i32 %9484, 495
  %9487 = zext i32 %9486 to i64
  %9488 = getelementptr inbounds i8, i8* %9485, i64 %9487
  %9489 = load i8, i8* %9488, align 1
  %9490 = zext i8 %9489 to i64
  %9491 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %9490
  %9492 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %9491, align 8
  %9493 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 0
  %9494 = load i32, i32* %9493, align 8
  %9495 = sub i32 %9476, %9494
  %9496 = lshr i32 %9479, 16
  %9497 = icmp ult i32 %9496, %9494
  br i1 %9497, label %9498, label %9542

9498:                                             ; preds = %9483
  %9499 = icmp ult i32 %9495, %9494
  %9500 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 1
  %9501 = load i32, i32* %9500, align 4
  %9502 = icmp eq i32 %9501, 0
  %9503 = zext i1 %9502 to i32
  %9504 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 3
  %9505 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 2
  %9506 = select i1 %9499, %struct.opj_mqc_state** %9505, %struct.opj_mqc_state** %9504
  %9507 = select i1 %9499, i32 %9501, i32 %9503
  %9508 = bitcast %struct.opj_mqc_state** %9506 to i64*
  %9509 = load i64, i64* %9508, align 8
  %9510 = bitcast %struct.opj_mqc_state** %9491 to i64*
  store i64 %9509, i64* %9510, align 8
  br label %9511

9511:                                             ; preds = %9535, %9498
  %9512 = phi i32 [ %9494, %9498 ], [ %9538, %9535 ]
  %9513 = phi i32 [ %9477, %9498 ], [ %9540, %9535 ]
  %9514 = phi i32 [ %9479, %9498 ], [ %9539, %9535 ]
  %9515 = icmp eq i32 %9513, 0
  br i1 %9515, label %9516, label %9535

9516:                                             ; preds = %9511
  %9517 = load i8*, i8** %7336, align 8
  %9518 = getelementptr inbounds i8, i8* %9517, i64 1
  %9519 = load i8, i8* %9518, align 1
  %9520 = zext i8 %9519 to i32
  %9521 = load i8, i8* %9517, align 1
  %9522 = icmp eq i8 %9521, -1
  br i1 %9522, label %9523, label %9532

9523:                                             ; preds = %9516
  %9524 = icmp ugt i8 %9519, -113
  br i1 %9524, label %9525, label %9529

9525:                                             ; preds = %9523
  %9526 = add i32 %9514, 65280
  %9527 = load i32, i32* %7337, align 4
  %9528 = add i32 %9527, 1
  store i32 %9528, i32* %7337, align 4
  br label %9535

9529:                                             ; preds = %9523
  store i8* %9518, i8** %7336, align 8
  %9530 = shl nuw nsw i32 %9520, 9
  %9531 = add i32 %9530, %9514
  br label %9535

9532:                                             ; preds = %9516
  store i8* %9518, i8** %7336, align 8
  %9533 = shl nuw nsw i32 %9520, 8
  %9534 = add i32 %9533, %9514
  br label %9535

9535:                                             ; preds = %9532, %9529, %9525, %9511
  %9536 = phi i32 [ %9513, %9511 ], [ 8, %9525 ], [ 7, %9529 ], [ 8, %9532 ]
  %9537 = phi i32 [ %9514, %9511 ], [ %9526, %9525 ], [ %9531, %9529 ], [ %9534, %9532 ]
  %9538 = shl i32 %9512, 1
  %9539 = shl i32 %9537, 1
  %9540 = add i32 %9536, -1
  %9541 = icmp ult i32 %9538, 32768
  br i1 %9541, label %9511, label %9594

9542:                                             ; preds = %9483
  %9543 = shl i32 %9494, 16
  %9544 = sub i32 %9479, %9543
  %9545 = trunc i32 %9495 to i16
  %9546 = icmp sgt i16 %9545, -1
  br i1 %9546, label %9547, label %9591

9547:                                             ; preds = %9542
  %9548 = icmp ult i32 %9495, %9494
  %9549 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 1
  %9550 = load i32, i32* %9549, align 4
  %9551 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 2
  %9552 = icmp eq i32 %9550, 0
  %9553 = zext i1 %9552 to i32
  %9554 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 3
  %9555 = select i1 %9548, %struct.opj_mqc_state** %9554, %struct.opj_mqc_state** %9551
  %9556 = select i1 %9548, i32 %9553, i32 %9550
  %9557 = bitcast %struct.opj_mqc_state** %9555 to i64*
  %9558 = load i64, i64* %9557, align 8
  %9559 = bitcast %struct.opj_mqc_state** %9491 to i64*
  store i64 %9558, i64* %9559, align 8
  br label %9560

9560:                                             ; preds = %9584, %9547
  %9561 = phi i32 [ %9495, %9547 ], [ %9587, %9584 ]
  %9562 = phi i32 [ %9477, %9547 ], [ %9589, %9584 ]
  %9563 = phi i32 [ %9544, %9547 ], [ %9588, %9584 ]
  %9564 = icmp eq i32 %9562, 0
  br i1 %9564, label %9565, label %9584

9565:                                             ; preds = %9560
  %9566 = load i8*, i8** %7336, align 8
  %9567 = getelementptr inbounds i8, i8* %9566, i64 1
  %9568 = load i8, i8* %9567, align 1
  %9569 = zext i8 %9568 to i32
  %9570 = load i8, i8* %9566, align 1
  %9571 = icmp eq i8 %9570, -1
  br i1 %9571, label %9572, label %9581

9572:                                             ; preds = %9565
  %9573 = icmp ugt i8 %9568, -113
  br i1 %9573, label %9574, label %9578

9574:                                             ; preds = %9572
  %9575 = add i32 %9563, 65280
  %9576 = load i32, i32* %7337, align 4
  %9577 = add i32 %9576, 1
  store i32 %9577, i32* %7337, align 4
  br label %9584

9578:                                             ; preds = %9572
  store i8* %9567, i8** %7336, align 8
  %9579 = shl nuw nsw i32 %9569, 9
  %9580 = add i32 %9579, %9563
  br label %9584

9581:                                             ; preds = %9565
  store i8* %9567, i8** %7336, align 8
  %9582 = shl nuw nsw i32 %9569, 8
  %9583 = add i32 %9582, %9563
  br label %9584

9584:                                             ; preds = %9581, %9578, %9574, %9560
  %9585 = phi i32 [ %9562, %9560 ], [ 8, %9574 ], [ 7, %9578 ], [ 8, %9581 ]
  %9586 = phi i32 [ %9563, %9560 ], [ %9575, %9574 ], [ %9580, %9578 ], [ %9583, %9581 ]
  %9587 = shl i32 %9561, 1
  %9588 = shl i32 %9586, 1
  %9589 = add i32 %9585, -1
  %9590 = icmp ult i32 %9587, 32768
  br i1 %9590, label %9560, label %9594

9591:                                             ; preds = %9542
  %9592 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9492, i64 0, i32 1
  %9593 = load i32, i32* %9592, align 4
  br label %9594

9594:                                             ; preds = %9584, %9535, %9591
  %9595 = phi i32 [ %9495, %9591 ], [ %9538, %9535 ], [ %9587, %9584 ]
  %9596 = phi i32 [ %9477, %9591 ], [ %9540, %9535 ], [ %9589, %9584 ]
  %9597 = phi i32 [ %9593, %9591 ], [ %9507, %9535 ], [ %9556, %9584 ]
  %9598 = phi i32 [ %9544, %9591 ], [ %9539, %9535 ], [ %9588, %9584 ]
  %9599 = icmp eq i32 %9597, 0
  br i1 %9599, label %9758, label %9600

9600:                                             ; preds = %9594
  %9601 = getelementptr inbounds i32, i32* %7360, i64 -1
  %9602 = load i32, i32* %9601, align 4
  %9603 = getelementptr inbounds i32, i32* %7360, i64 1
  %9604 = load i32, i32* %9603, align 4
  %9605 = and i32 %9484, 170
  %9606 = lshr i32 %9602, 28
  %9607 = and i32 %9606, 1
  %9608 = lshr i32 %9604, 26
  %9609 = and i32 %9608, 4
  %9610 = lshr i32 %9478, 21
  %9611 = and i32 %9610, 16
  %9612 = lshr i32 %9478, 25
  %9613 = and i32 %9612, 64
  %9614 = or i32 %9613, %9605
  %9615 = or i32 %9614, %9611
  %9616 = or i32 %9615, %9607
  %9617 = or i32 %9616, %9609
  %9618 = zext i32 %9617 to i64
  %9619 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %9618
  %9620 = load i8, i8* %9619, align 1
  %9621 = zext i8 %9620 to i64
  %9622 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %9621
  %9623 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %9622, align 8
  %9624 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 0
  %9625 = load i32, i32* %9624, align 8
  %9626 = sub i32 %9595, %9625
  %9627 = lshr i32 %9598, 16
  %9628 = icmp ult i32 %9627, %9625
  br i1 %9628, label %9629, label %9673

9629:                                             ; preds = %9600
  %9630 = icmp ult i32 %9626, %9625
  %9631 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 1
  %9632 = load i32, i32* %9631, align 4
  %9633 = icmp eq i32 %9632, 0
  %9634 = zext i1 %9633 to i32
  %9635 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 3
  %9636 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 2
  %9637 = select i1 %9630, %struct.opj_mqc_state** %9636, %struct.opj_mqc_state** %9635
  %9638 = select i1 %9630, i32 %9632, i32 %9634
  %9639 = bitcast %struct.opj_mqc_state** %9637 to i64*
  %9640 = load i64, i64* %9639, align 8
  %9641 = bitcast %struct.opj_mqc_state** %9622 to i64*
  store i64 %9640, i64* %9641, align 8
  br label %9642

9642:                                             ; preds = %9666, %9629
  %9643 = phi i32 [ %9625, %9629 ], [ %9669, %9666 ]
  %9644 = phi i32 [ %9596, %9629 ], [ %9671, %9666 ]
  %9645 = phi i32 [ %9598, %9629 ], [ %9670, %9666 ]
  %9646 = icmp eq i32 %9644, 0
  br i1 %9646, label %9647, label %9666

9647:                                             ; preds = %9642
  %9648 = load i8*, i8** %7336, align 8
  %9649 = getelementptr inbounds i8, i8* %9648, i64 1
  %9650 = load i8, i8* %9649, align 1
  %9651 = zext i8 %9650 to i32
  %9652 = load i8, i8* %9648, align 1
  %9653 = icmp eq i8 %9652, -1
  br i1 %9653, label %9654, label %9663

9654:                                             ; preds = %9647
  %9655 = icmp ugt i8 %9650, -113
  br i1 %9655, label %9656, label %9660

9656:                                             ; preds = %9654
  %9657 = add i32 %9645, 65280
  %9658 = load i32, i32* %7337, align 4
  %9659 = add i32 %9658, 1
  store i32 %9659, i32* %7337, align 4
  br label %9666

9660:                                             ; preds = %9654
  store i8* %9649, i8** %7336, align 8
  %9661 = shl nuw nsw i32 %9651, 9
  %9662 = add i32 %9661, %9645
  br label %9666

9663:                                             ; preds = %9647
  store i8* %9649, i8** %7336, align 8
  %9664 = shl nuw nsw i32 %9651, 8
  %9665 = add i32 %9664, %9645
  br label %9666

9666:                                             ; preds = %9663, %9660, %9656, %9642
  %9667 = phi i32 [ %9644, %9642 ], [ 8, %9656 ], [ 7, %9660 ], [ 8, %9663 ]
  %9668 = phi i32 [ %9645, %9642 ], [ %9657, %9656 ], [ %9662, %9660 ], [ %9665, %9663 ]
  %9669 = shl i32 %9643, 1
  %9670 = shl i32 %9668, 1
  %9671 = add i32 %9667, -1
  %9672 = icmp ult i32 %9669, 32768
  br i1 %9672, label %9642, label %9725

9673:                                             ; preds = %9600
  %9674 = shl i32 %9625, 16
  %9675 = sub i32 %9598, %9674
  %9676 = trunc i32 %9626 to i16
  %9677 = icmp sgt i16 %9676, -1
  br i1 %9677, label %9678, label %9722

9678:                                             ; preds = %9673
  %9679 = icmp ult i32 %9626, %9625
  %9680 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 1
  %9681 = load i32, i32* %9680, align 4
  %9682 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 2
  %9683 = icmp eq i32 %9681, 0
  %9684 = zext i1 %9683 to i32
  %9685 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 3
  %9686 = select i1 %9679, %struct.opj_mqc_state** %9685, %struct.opj_mqc_state** %9682
  %9687 = select i1 %9679, i32 %9684, i32 %9681
  %9688 = bitcast %struct.opj_mqc_state** %9686 to i64*
  %9689 = load i64, i64* %9688, align 8
  %9690 = bitcast %struct.opj_mqc_state** %9622 to i64*
  store i64 %9689, i64* %9690, align 8
  br label %9691

9691:                                             ; preds = %9715, %9678
  %9692 = phi i32 [ %9626, %9678 ], [ %9718, %9715 ]
  %9693 = phi i32 [ %9596, %9678 ], [ %9720, %9715 ]
  %9694 = phi i32 [ %9675, %9678 ], [ %9719, %9715 ]
  %9695 = icmp eq i32 %9693, 0
  br i1 %9695, label %9696, label %9715

9696:                                             ; preds = %9691
  %9697 = load i8*, i8** %7336, align 8
  %9698 = getelementptr inbounds i8, i8* %9697, i64 1
  %9699 = load i8, i8* %9698, align 1
  %9700 = zext i8 %9699 to i32
  %9701 = load i8, i8* %9697, align 1
  %9702 = icmp eq i8 %9701, -1
  br i1 %9702, label %9703, label %9712

9703:                                             ; preds = %9696
  %9704 = icmp ugt i8 %9699, -113
  br i1 %9704, label %9705, label %9709

9705:                                             ; preds = %9703
  %9706 = add i32 %9694, 65280
  %9707 = load i32, i32* %7337, align 4
  %9708 = add i32 %9707, 1
  store i32 %9708, i32* %7337, align 4
  br label %9715

9709:                                             ; preds = %9703
  store i8* %9698, i8** %7336, align 8
  %9710 = shl nuw nsw i32 %9700, 9
  %9711 = add i32 %9710, %9694
  br label %9715

9712:                                             ; preds = %9696
  store i8* %9698, i8** %7336, align 8
  %9713 = shl nuw nsw i32 %9700, 8
  %9714 = add i32 %9713, %9694
  br label %9715

9715:                                             ; preds = %9712, %9709, %9705, %9691
  %9716 = phi i32 [ %9693, %9691 ], [ 8, %9705 ], [ 7, %9709 ], [ 8, %9712 ]
  %9717 = phi i32 [ %9694, %9691 ], [ %9706, %9705 ], [ %9711, %9709 ], [ %9714, %9712 ]
  %9718 = shl i32 %9692, 1
  %9719 = shl i32 %9717, 1
  %9720 = add i32 %9716, -1
  %9721 = icmp ult i32 %9718, 32768
  br i1 %9721, label %9691, label %9725

9722:                                             ; preds = %9673
  %9723 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9623, i64 0, i32 1
  %9724 = load i32, i32* %9723, align 4
  br label %9725

9725:                                             ; preds = %9715, %9666, %9722
  %9726 = phi i32 [ %9626, %9722 ], [ %9669, %9666 ], [ %9718, %9715 ]
  %9727 = phi i32 [ %9596, %9722 ], [ %9671, %9666 ], [ %9720, %9715 ]
  %9728 = phi i32 [ %9724, %9722 ], [ %9638, %9666 ], [ %9687, %9715 ]
  %9729 = phi i32 [ %9675, %9722 ], [ %9670, %9666 ], [ %9719, %9715 ]
  %9730 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %9618
  %9731 = load i8, i8* %9730, align 1
  %9732 = zext i8 %9731 to i32
  %9733 = xor i32 %9728, %9732
  %9734 = icmp eq i32 %9733, 0
  %9735 = select i1 %9734, i32 %4864, i32 %7338
  %9736 = getelementptr inbounds i32, i32* %7359, i64 %7343
  store i32 %9735, i32* %9736, align 4
  %9737 = load i32, i32* %9601, align 4
  %9738 = or i32 %9737, 16384
  store i32 %9738, i32* %9601, align 4
  %9739 = shl i32 %9733, 28
  %9740 = or i32 %9478, %9739
  %9741 = or i32 %9740, 8192
  %9742 = load i32, i32* %9603, align 4
  %9743 = or i32 %9742, 4096
  store i32 %9743, i32* %9603, align 4
  %9744 = load i32, i32* %4, align 8
  %9745 = add i32 %9744, 2
  %9746 = zext i32 %9745 to i64
  %9747 = getelementptr inbounds i32, i32* %7360, i64 %9746
  %9748 = shl i32 %9733, 18
  %9749 = load i32, i32* %9747, align 4
  %9750 = or i32 %9748, %9749
  %9751 = or i32 %9750, 2
  store i32 %9751, i32* %9747, align 4
  %9752 = getelementptr inbounds i32, i32* %9747, i64 -1
  %9753 = load i32, i32* %9752, align 4
  %9754 = or i32 %9753, 4
  store i32 %9754, i32* %9752, align 4
  %9755 = getelementptr inbounds i32, i32* %9747, i64 1
  %9756 = load i32, i32* %9755, align 4
  %9757 = or i32 %9756, 1
  store i32 %9757, i32* %9755, align 4
  br label %9758

9758:                                             ; preds = %9725, %9594, %9475, %8627, %8491, %7688
  %9759 = phi i32 [ %9476, %9475 ], [ %9726, %9725 ], [ %9595, %9594 ], [ %8492, %8491 ], [ %8628, %8627 ], [ %7689, %7688 ]
  %9760 = phi i32 [ %9477, %9475 ], [ %9727, %9725 ], [ %9596, %9594 ], [ %8493, %8491 ], [ %8629, %8627 ], [ %7690, %7688 ]
  %9761 = phi i32 [ %9478, %9475 ], [ %9741, %9725 ], [ %9478, %9594 ], [ %8379, %8491 ], [ %8643, %8627 ], [ 0, %7688 ]
  %9762 = phi i32 [ %9479, %9475 ], [ %9729, %9725 ], [ %9598, %9594 ], [ %8495, %8491 ], [ %8631, %8627 ], [ %7692, %7688 ]
  %9763 = phi %struct.opj_mqc_state** [ %9480, %9475 ], [ %9622, %9725 ], [ %9491, %9594 ], [ %8388, %8491 ], [ %8524, %8627 ], [ %7346, %7688 ]
  %9764 = and i32 %9761, -1226833921
  store i32 %9764, i32* %7360, align 4
  br label %9765

9765:                                             ; preds = %9758, %7470
  %9766 = phi i32 [ %9759, %9758 ], [ %7471, %7470 ]
  %9767 = phi i32 [ %9760, %9758 ], [ %7472, %7470 ]
  %9768 = phi i32 [ %9762, %9758 ], [ %7474, %7470 ]
  %9769 = phi %struct.opj_mqc_state** [ %9763, %9758 ], [ %7344, %7470 ]
  %9770 = add nuw i32 %7358, 1
  %9771 = getelementptr inbounds i32, i32* %7359, i64 1
  %9772 = getelementptr inbounds i32, i32* %7360, i64 1
  %9773 = icmp eq i32 %9770, %5
  br i1 %9773, label %9774, label %7357

9774:                                             ; preds = %9765
  %9775 = load i32, i32* %4865, align 4
  br label %9776

9776:                                             ; preds = %9774, %7348
  %9777 = phi i32 [ %7349, %7348 ], [ %9775, %9774 ]
  %9778 = phi i32 [ %7356, %7348 ], [ %9766, %9774 ]
  %9779 = phi i32 [ %7355, %7348 ], [ %9767, %9774 ]
  %9780 = phi i32 [ %7354, %7348 ], [ %9768, %9774 ]
  %9781 = phi %struct.opj_mqc_state** [ %7353, %7348 ], [ %9769, %9774 ]
  %9782 = phi i32* [ %7352, %7348 ], [ %9772, %9774 ]
  %9783 = phi i32* [ %7351, %7348 ], [ %9771, %9774 ]
  %9784 = add nuw i32 %7350, 4
  %9785 = getelementptr inbounds i32, i32* %9783, i64 %7343
  %9786 = getelementptr inbounds i32, i32* %9782, i64 2
  %9787 = and i32 %9777, -4
  %9788 = icmp ult i32 %9784, %9787
  br i1 %9788, label %7348, label %9789

9789:                                             ; preds = %9776, %7332
  %9790 = phi i32 [ %4859, %7332 ], [ %9778, %9776 ]
  %9791 = phi i32 [ %4861, %7332 ], [ %9779, %9776 ]
  %9792 = phi i32 [ %4857, %7332 ], [ %9780, %9776 ]
  %9793 = phi %struct.opj_mqc_state** [ %4855, %7332 ], [ %9781, %9776 ]
  %9794 = phi i32* [ %4853, %7332 ], [ %9786, %9776 ]
  %9795 = phi i32* [ %14, %7332 ], [ %9785, %9776 ]
  %9796 = phi i32 [ 0, %7332 ], [ %9784, %9776 ]
  %9797 = phi i32 [ %8, %7332 ], [ %9777, %9776 ]
  store %struct.opj_mqc_state** %9793, %struct.opj_mqc_state*** %4854, align 8
  store i32 %9792, i32* %4856, align 8
  store i32 %9790, i32* %4858, align 4
  store i32 %9791, i32* %4860, align 8
  %9798 = icmp ult i32 %9796, %9797
  %9799 = icmp ne i32 %5, 0
  %9800 = and i1 %9799, %9798
  br i1 %9800, label %9801, label %9827

9801:                                             ; preds = %9789, %9823
  %9802 = phi i32 [ %9826, %9823 ], [ %9797, %9789 ]
  %9803 = phi i32 [ %9821, %9823 ], [ 0, %9789 ]
  %9804 = phi i32* [ %9824, %9823 ], [ %9795, %9789 ]
  %9805 = phi i32* [ %9825, %9823 ], [ %9794, %9789 ]
  %9806 = icmp eq i32 %9802, %9796
  br i1 %9806, label %9818, label %9807

9807:                                             ; preds = %9801, %9807
  %9808 = phi i64 [ %9813, %9807 ], [ 0, %9801 ]
  %9809 = trunc i64 %9808 to i32
  %9810 = mul i32 %5, %9809
  %9811 = zext i32 %9810 to i64
  %9812 = getelementptr inbounds i32, i32* %9804, i64 %9811
  tail call fastcc void @opj_t1_dec_clnpass_step(%struct.opj_t1* %0, i32* %9805, i32* %9812, i32 %4864, i32 %9809, i32 0) #7
  %9813 = add nuw nsw i64 %9808, 1
  %9814 = load i32, i32* %4865, align 4
  %9815 = sub i32 %9814, %9796
  %9816 = zext i32 %9815 to i64
  %9817 = icmp ult i64 %9813, %9816
  br i1 %9817, label %9807, label %9818

9818:                                             ; preds = %9807, %9801
  %9819 = load i32, i32* %9805, align 4
  %9820 = and i32 %9819, -1226833921
  store i32 %9820, i32* %9805, align 4
  %9821 = add nuw i32 %9803, 1
  %9822 = icmp eq i32 %9821, %5
  br i1 %9822, label %9827, label %9823

9823:                                             ; preds = %9818
  %9824 = getelementptr inbounds i32, i32* %9804, i64 1
  %9825 = getelementptr inbounds i32, i32* %9805, i64 1
  %9826 = load i32, i32* %4865, align 4
  br label %9801

9827:                                             ; preds = %7323, %9818, %9789, %7294, %2432, %4849
  %9828 = and i32 %2, 32
  %9829 = icmp eq i32 %9828, 0
  br i1 %9829, label %10254, label %9830

9830:                                             ; preds = %9827
  %9831 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 18
  %9832 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  store %struct.opj_mqc_state** %9831, %struct.opj_mqc_state*** %9832, align 8
  %9833 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %9831, align 8
  %9834 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9833, i64 0, i32 0
  %9835 = load i32, i32* %9834, align 8
  %9836 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %9837 = load i32, i32* %9836, align 4
  %9838 = sub i32 %9837, %9835
  store i32 %9838, i32* %9836, align 4
  %9839 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %9840 = load i32, i32* %9839, align 8
  %9841 = lshr i32 %9840, 16
  %9842 = load i32, i32* %9834, align 8
  %9843 = icmp ult i32 %9841, %9842
  br i1 %9843, label %9844, label %9887

9844:                                             ; preds = %9830
  %9845 = icmp ult i32 %9838, %9842
  store i32 %9842, i32* %9836, align 4
  %9846 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9833, i64 0, i32 3
  %9847 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9833, i64 0, i32 2
  %9848 = select i1 %9845, %struct.opj_mqc_state** %9847, %struct.opj_mqc_state** %9846
  %9849 = bitcast %struct.opj_mqc_state** %9848 to i64*
  %9850 = load i64, i64* %9849, align 8
  %9851 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %9850, i64* %9851, align 8
  %9852 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %9853 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %9854 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %9855 = load i32, i32* %9852, align 8
  br label %9856

9856:                                             ; preds = %9880, %9844
  %9857 = phi i32 [ %9883, %9880 ], [ %9842, %9844 ]
  %9858 = phi i32 [ %9884, %9880 ], [ %9840, %9844 ]
  %9859 = phi i32 [ %9885, %9880 ], [ %9855, %9844 ]
  %9860 = icmp eq i32 %9859, 0
  br i1 %9860, label %9861, label %9880

9861:                                             ; preds = %9856
  %9862 = load i8*, i8** %9853, align 8
  %9863 = getelementptr inbounds i8, i8* %9862, i64 1
  %9864 = load i8, i8* %9863, align 1
  %9865 = zext i8 %9864 to i32
  %9866 = load i8, i8* %9862, align 1
  %9867 = icmp eq i8 %9866, -1
  br i1 %9867, label %9868, label %9877

9868:                                             ; preds = %9861
  %9869 = icmp ugt i8 %9864, -113
  br i1 %9869, label %9870, label %9874

9870:                                             ; preds = %9868
  %9871 = add i32 %9858, 65280
  store i32 %9871, i32* %9839, align 8
  store i32 8, i32* %9852, align 8
  %9872 = load i32, i32* %9854, align 4
  %9873 = add i32 %9872, 1
  store i32 %9873, i32* %9854, align 4
  br label %9880

9874:                                             ; preds = %9868
  store i8* %9863, i8** %9853, align 8
  %9875 = shl nuw nsw i32 %9865, 9
  %9876 = add i32 %9875, %9858
  store i32 %9876, i32* %9839, align 8
  store i32 7, i32* %9852, align 8
  br label %9880

9877:                                             ; preds = %9861
  store i8* %9863, i8** %9853, align 8
  %9878 = shl nuw nsw i32 %9865, 8
  %9879 = add i32 %9878, %9858
  store i32 %9879, i32* %9839, align 8
  store i32 8, i32* %9852, align 8
  br label %9880

9880:                                             ; preds = %9877, %9874, %9870, %9856
  %9881 = phi i32 [ 8, %9877 ], [ 7, %9874 ], [ 8, %9870 ], [ %9859, %9856 ]
  %9882 = phi i32 [ %9879, %9877 ], [ %9876, %9874 ], [ %9871, %9870 ], [ %9858, %9856 ]
  %9883 = shl i32 %9857, 1
  store i32 %9883, i32* %9836, align 4
  %9884 = shl i32 %9882, 1
  store i32 %9884, i32* %9839, align 8
  %9885 = add i32 %9881, -1
  store i32 %9885, i32* %9852, align 8
  %9886 = icmp ult i32 %9883, 32768
  br i1 %9886, label %9856, label %9936

9887:                                             ; preds = %9830
  %9888 = shl i32 %9842, 16
  %9889 = sub i32 %9840, %9888
  store i32 %9889, i32* %9839, align 8
  %9890 = trunc i32 %9838 to i16
  %9891 = icmp sgt i16 %9890, -1
  br i1 %9891, label %9892, label %9940

9892:                                             ; preds = %9887
  %9893 = load i32, i32* %9834, align 8
  %9894 = icmp ult i32 %9838, %9893
  %9895 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9833, i64 0, i32 2
  %9896 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9833, i64 0, i32 3
  %9897 = select i1 %9894, %struct.opj_mqc_state** %9896, %struct.opj_mqc_state** %9895
  %9898 = bitcast %struct.opj_mqc_state** %9897 to i64*
  %9899 = load i64, i64* %9898, align 8
  %9900 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %9899, i64* %9900, align 8
  %9901 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %9902 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %9903 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %9904 = load i32, i32* %9901, align 8
  br label %9905

9905:                                             ; preds = %9929, %9892
  %9906 = phi i32 [ %9932, %9929 ], [ %9838, %9892 ]
  %9907 = phi i32 [ %9933, %9929 ], [ %9889, %9892 ]
  %9908 = phi i32 [ %9934, %9929 ], [ %9904, %9892 ]
  %9909 = icmp eq i32 %9908, 0
  br i1 %9909, label %9910, label %9929

9910:                                             ; preds = %9905
  %9911 = load i8*, i8** %9902, align 8
  %9912 = getelementptr inbounds i8, i8* %9911, i64 1
  %9913 = load i8, i8* %9912, align 1
  %9914 = zext i8 %9913 to i32
  %9915 = load i8, i8* %9911, align 1
  %9916 = icmp eq i8 %9915, -1
  br i1 %9916, label %9917, label %9926

9917:                                             ; preds = %9910
  %9918 = icmp ugt i8 %9913, -113
  br i1 %9918, label %9919, label %9923

9919:                                             ; preds = %9917
  %9920 = add i32 %9907, 65280
  store i32 %9920, i32* %9839, align 8
  store i32 8, i32* %9901, align 8
  %9921 = load i32, i32* %9903, align 4
  %9922 = add i32 %9921, 1
  store i32 %9922, i32* %9903, align 4
  br label %9929

9923:                                             ; preds = %9917
  store i8* %9912, i8** %9902, align 8
  %9924 = shl nuw nsw i32 %9914, 9
  %9925 = add i32 %9924, %9907
  store i32 %9925, i32* %9839, align 8
  store i32 7, i32* %9901, align 8
  br label %9929

9926:                                             ; preds = %9910
  store i8* %9912, i8** %9902, align 8
  %9927 = shl nuw nsw i32 %9914, 8
  %9928 = add i32 %9927, %9907
  store i32 %9928, i32* %9839, align 8
  store i32 8, i32* %9901, align 8
  br label %9929

9929:                                             ; preds = %9926, %9923, %9919, %9905
  %9930 = phi i32 [ 8, %9926 ], [ 7, %9923 ], [ 8, %9919 ], [ %9908, %9905 ]
  %9931 = phi i32 [ %9928, %9926 ], [ %9925, %9923 ], [ %9920, %9919 ], [ %9907, %9905 ]
  %9932 = shl i32 %9906, 1
  store i32 %9932, i32* %9836, align 4
  %9933 = shl i32 %9931, 1
  store i32 %9933, i32* %9839, align 8
  %9934 = add i32 %9930, -1
  store i32 %9934, i32* %9901, align 8
  %9935 = icmp ult i32 %9932, 32768
  br i1 %9935, label %9905, label %9938

9936:                                             ; preds = %9880
  %9937 = inttoptr i64 %9850 to %struct.opj_mqc_state*
  br label %9940

9938:                                             ; preds = %9929
  %9939 = inttoptr i64 %9899 to %struct.opj_mqc_state*
  br label %9940

9940:                                             ; preds = %9938, %9936, %9887
  %9941 = phi %struct.opj_mqc_state* [ %9833, %9887 ], [ %9937, %9936 ], [ %9939, %9938 ]
  %9942 = phi i32 [ %9889, %9887 ], [ %9884, %9936 ], [ %9933, %9938 ]
  %9943 = phi i32 [ %9838, %9887 ], [ %9883, %9936 ], [ %9932, %9938 ]
  %9944 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9941, i64 0, i32 0
  %9945 = load i32, i32* %9944, align 8
  %9946 = sub i32 %9943, %9945
  store i32 %9946, i32* %9836, align 4
  %9947 = lshr i32 %9942, 16
  %9948 = load i32, i32* %9944, align 8
  %9949 = icmp ult i32 %9947, %9948
  br i1 %9949, label %9950, label %9993

9950:                                             ; preds = %9940
  %9951 = icmp ult i32 %9946, %9948
  store i32 %9948, i32* %9836, align 4
  %9952 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9941, i64 0, i32 3
  %9953 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9941, i64 0, i32 2
  %9954 = select i1 %9951, %struct.opj_mqc_state** %9953, %struct.opj_mqc_state** %9952
  %9955 = bitcast %struct.opj_mqc_state** %9954 to i64*
  %9956 = load i64, i64* %9955, align 8
  %9957 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %9956, i64* %9957, align 8
  %9958 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %9959 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %9960 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %9961 = load i32, i32* %9958, align 8
  br label %9962

9962:                                             ; preds = %9986, %9950
  %9963 = phi i32 [ %9989, %9986 ], [ %9948, %9950 ]
  %9964 = phi i32 [ %9990, %9986 ], [ %9942, %9950 ]
  %9965 = phi i32 [ %9991, %9986 ], [ %9961, %9950 ]
  %9966 = icmp eq i32 %9965, 0
  br i1 %9966, label %9967, label %9986

9967:                                             ; preds = %9962
  %9968 = load i8*, i8** %9959, align 8
  %9969 = getelementptr inbounds i8, i8* %9968, i64 1
  %9970 = load i8, i8* %9969, align 1
  %9971 = zext i8 %9970 to i32
  %9972 = load i8, i8* %9968, align 1
  %9973 = icmp eq i8 %9972, -1
  br i1 %9973, label %9974, label %9983

9974:                                             ; preds = %9967
  %9975 = icmp ugt i8 %9970, -113
  br i1 %9975, label %9976, label %9980

9976:                                             ; preds = %9974
  %9977 = add i32 %9964, 65280
  store i32 %9977, i32* %9839, align 8
  store i32 8, i32* %9958, align 8
  %9978 = load i32, i32* %9960, align 4
  %9979 = add i32 %9978, 1
  store i32 %9979, i32* %9960, align 4
  br label %9986

9980:                                             ; preds = %9974
  store i8* %9969, i8** %9959, align 8
  %9981 = shl nuw nsw i32 %9971, 9
  %9982 = add i32 %9981, %9964
  store i32 %9982, i32* %9839, align 8
  store i32 7, i32* %9958, align 8
  br label %9986

9983:                                             ; preds = %9967
  store i8* %9969, i8** %9959, align 8
  %9984 = shl nuw nsw i32 %9971, 8
  %9985 = add i32 %9984, %9964
  store i32 %9985, i32* %9839, align 8
  store i32 8, i32* %9958, align 8
  br label %9986

9986:                                             ; preds = %9983, %9980, %9976, %9962
  %9987 = phi i32 [ 8, %9983 ], [ 7, %9980 ], [ 8, %9976 ], [ %9965, %9962 ]
  %9988 = phi i32 [ %9985, %9983 ], [ %9982, %9980 ], [ %9977, %9976 ], [ %9964, %9962 ]
  %9989 = shl i32 %9963, 1
  store i32 %9989, i32* %9836, align 4
  %9990 = shl i32 %9988, 1
  store i32 %9990, i32* %9839, align 8
  %9991 = add i32 %9987, -1
  store i32 %9991, i32* %9958, align 8
  %9992 = icmp ult i32 %9989, 32768
  br i1 %9992, label %9962, label %10042

9993:                                             ; preds = %9940
  %9994 = shl i32 %9948, 16
  %9995 = sub i32 %9942, %9994
  store i32 %9995, i32* %9839, align 8
  %9996 = trunc i32 %9946 to i16
  %9997 = icmp sgt i16 %9996, -1
  br i1 %9997, label %9998, label %10046

9998:                                             ; preds = %9993
  %9999 = load i32, i32* %9944, align 8
  %10000 = icmp ult i32 %9946, %9999
  %10001 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9941, i64 0, i32 2
  %10002 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %9941, i64 0, i32 3
  %10003 = select i1 %10000, %struct.opj_mqc_state** %10002, %struct.opj_mqc_state** %10001
  %10004 = bitcast %struct.opj_mqc_state** %10003 to i64*
  %10005 = load i64, i64* %10004, align 8
  %10006 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %10005, i64* %10006, align 8
  %10007 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %10008 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %10009 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %10010 = load i32, i32* %10007, align 8
  br label %10011

10011:                                            ; preds = %10035, %9998
  %10012 = phi i32 [ %10038, %10035 ], [ %9946, %9998 ]
  %10013 = phi i32 [ %10039, %10035 ], [ %9995, %9998 ]
  %10014 = phi i32 [ %10040, %10035 ], [ %10010, %9998 ]
  %10015 = icmp eq i32 %10014, 0
  br i1 %10015, label %10016, label %10035

10016:                                            ; preds = %10011
  %10017 = load i8*, i8** %10008, align 8
  %10018 = getelementptr inbounds i8, i8* %10017, i64 1
  %10019 = load i8, i8* %10018, align 1
  %10020 = zext i8 %10019 to i32
  %10021 = load i8, i8* %10017, align 1
  %10022 = icmp eq i8 %10021, -1
  br i1 %10022, label %10023, label %10032

10023:                                            ; preds = %10016
  %10024 = icmp ugt i8 %10019, -113
  br i1 %10024, label %10025, label %10029

10025:                                            ; preds = %10023
  %10026 = add i32 %10013, 65280
  store i32 %10026, i32* %9839, align 8
  store i32 8, i32* %10007, align 8
  %10027 = load i32, i32* %10009, align 4
  %10028 = add i32 %10027, 1
  store i32 %10028, i32* %10009, align 4
  br label %10035

10029:                                            ; preds = %10023
  store i8* %10018, i8** %10008, align 8
  %10030 = shl nuw nsw i32 %10020, 9
  %10031 = add i32 %10030, %10013
  store i32 %10031, i32* %9839, align 8
  store i32 7, i32* %10007, align 8
  br label %10035

10032:                                            ; preds = %10016
  store i8* %10018, i8** %10008, align 8
  %10033 = shl nuw nsw i32 %10020, 8
  %10034 = add i32 %10033, %10013
  store i32 %10034, i32* %9839, align 8
  store i32 8, i32* %10007, align 8
  br label %10035

10035:                                            ; preds = %10032, %10029, %10025, %10011
  %10036 = phi i32 [ 8, %10032 ], [ 7, %10029 ], [ 8, %10025 ], [ %10014, %10011 ]
  %10037 = phi i32 [ %10034, %10032 ], [ %10031, %10029 ], [ %10026, %10025 ], [ %10013, %10011 ]
  %10038 = shl i32 %10012, 1
  store i32 %10038, i32* %9836, align 4
  %10039 = shl i32 %10037, 1
  store i32 %10039, i32* %9839, align 8
  %10040 = add i32 %10036, -1
  store i32 %10040, i32* %10007, align 8
  %10041 = icmp ult i32 %10038, 32768
  br i1 %10041, label %10011, label %10044

10042:                                            ; preds = %9986
  %10043 = inttoptr i64 %9956 to %struct.opj_mqc_state*
  br label %10046

10044:                                            ; preds = %10035
  %10045 = inttoptr i64 %10005 to %struct.opj_mqc_state*
  br label %10046

10046:                                            ; preds = %10044, %10042, %9993
  %10047 = phi %struct.opj_mqc_state* [ %9941, %9993 ], [ %10043, %10042 ], [ %10045, %10044 ]
  %10048 = phi i32 [ %9995, %9993 ], [ %9990, %10042 ], [ %10039, %10044 ]
  %10049 = phi i32 [ %9946, %9993 ], [ %9989, %10042 ], [ %10038, %10044 ]
  %10050 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10047, i64 0, i32 0
  %10051 = load i32, i32* %10050, align 8
  %10052 = sub i32 %10049, %10051
  store i32 %10052, i32* %9836, align 4
  %10053 = lshr i32 %10048, 16
  %10054 = load i32, i32* %10050, align 8
  %10055 = icmp ult i32 %10053, %10054
  br i1 %10055, label %10056, label %10099

10056:                                            ; preds = %10046
  %10057 = icmp ult i32 %10052, %10054
  store i32 %10054, i32* %9836, align 4
  %10058 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10047, i64 0, i32 3
  %10059 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10047, i64 0, i32 2
  %10060 = select i1 %10057, %struct.opj_mqc_state** %10059, %struct.opj_mqc_state** %10058
  %10061 = bitcast %struct.opj_mqc_state** %10060 to i64*
  %10062 = load i64, i64* %10061, align 8
  %10063 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %10062, i64* %10063, align 8
  %10064 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %10065 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %10066 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %10067 = load i32, i32* %10064, align 8
  br label %10068

10068:                                            ; preds = %10092, %10056
  %10069 = phi i32 [ %10095, %10092 ], [ %10054, %10056 ]
  %10070 = phi i32 [ %10096, %10092 ], [ %10048, %10056 ]
  %10071 = phi i32 [ %10097, %10092 ], [ %10067, %10056 ]
  %10072 = icmp eq i32 %10071, 0
  br i1 %10072, label %10073, label %10092

10073:                                            ; preds = %10068
  %10074 = load i8*, i8** %10065, align 8
  %10075 = getelementptr inbounds i8, i8* %10074, i64 1
  %10076 = load i8, i8* %10075, align 1
  %10077 = zext i8 %10076 to i32
  %10078 = load i8, i8* %10074, align 1
  %10079 = icmp eq i8 %10078, -1
  br i1 %10079, label %10080, label %10089

10080:                                            ; preds = %10073
  %10081 = icmp ugt i8 %10076, -113
  br i1 %10081, label %10082, label %10086

10082:                                            ; preds = %10080
  %10083 = add i32 %10070, 65280
  store i32 %10083, i32* %9839, align 8
  store i32 8, i32* %10064, align 8
  %10084 = load i32, i32* %10066, align 4
  %10085 = add i32 %10084, 1
  store i32 %10085, i32* %10066, align 4
  br label %10092

10086:                                            ; preds = %10080
  store i8* %10075, i8** %10065, align 8
  %10087 = shl nuw nsw i32 %10077, 9
  %10088 = add i32 %10087, %10070
  store i32 %10088, i32* %9839, align 8
  store i32 7, i32* %10064, align 8
  br label %10092

10089:                                            ; preds = %10073
  store i8* %10075, i8** %10065, align 8
  %10090 = shl nuw nsw i32 %10077, 8
  %10091 = add i32 %10090, %10070
  store i32 %10091, i32* %9839, align 8
  store i32 8, i32* %10064, align 8
  br label %10092

10092:                                            ; preds = %10089, %10086, %10082, %10068
  %10093 = phi i32 [ 8, %10089 ], [ 7, %10086 ], [ 8, %10082 ], [ %10071, %10068 ]
  %10094 = phi i32 [ %10091, %10089 ], [ %10088, %10086 ], [ %10083, %10082 ], [ %10070, %10068 ]
  %10095 = shl i32 %10069, 1
  store i32 %10095, i32* %9836, align 4
  %10096 = shl i32 %10094, 1
  store i32 %10096, i32* %9839, align 8
  %10097 = add i32 %10093, -1
  store i32 %10097, i32* %10064, align 8
  %10098 = icmp ult i32 %10095, 32768
  br i1 %10098, label %10068, label %10148

10099:                                            ; preds = %10046
  %10100 = shl i32 %10054, 16
  %10101 = sub i32 %10048, %10100
  store i32 %10101, i32* %9839, align 8
  %10102 = trunc i32 %10052 to i16
  %10103 = icmp sgt i16 %10102, -1
  br i1 %10103, label %10104, label %10152

10104:                                            ; preds = %10099
  %10105 = load i32, i32* %10050, align 8
  %10106 = icmp ult i32 %10052, %10105
  %10107 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10047, i64 0, i32 2
  %10108 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10047, i64 0, i32 3
  %10109 = select i1 %10106, %struct.opj_mqc_state** %10108, %struct.opj_mqc_state** %10107
  %10110 = bitcast %struct.opj_mqc_state** %10109 to i64*
  %10111 = load i64, i64* %10110, align 8
  %10112 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %10111, i64* %10112, align 8
  %10113 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %10114 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %10115 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %10116 = load i32, i32* %10113, align 8
  br label %10117

10117:                                            ; preds = %10141, %10104
  %10118 = phi i32 [ %10144, %10141 ], [ %10052, %10104 ]
  %10119 = phi i32 [ %10145, %10141 ], [ %10101, %10104 ]
  %10120 = phi i32 [ %10146, %10141 ], [ %10116, %10104 ]
  %10121 = icmp eq i32 %10120, 0
  br i1 %10121, label %10122, label %10141

10122:                                            ; preds = %10117
  %10123 = load i8*, i8** %10114, align 8
  %10124 = getelementptr inbounds i8, i8* %10123, i64 1
  %10125 = load i8, i8* %10124, align 1
  %10126 = zext i8 %10125 to i32
  %10127 = load i8, i8* %10123, align 1
  %10128 = icmp eq i8 %10127, -1
  br i1 %10128, label %10129, label %10138

10129:                                            ; preds = %10122
  %10130 = icmp ugt i8 %10125, -113
  br i1 %10130, label %10131, label %10135

10131:                                            ; preds = %10129
  %10132 = add i32 %10119, 65280
  store i32 %10132, i32* %9839, align 8
  store i32 8, i32* %10113, align 8
  %10133 = load i32, i32* %10115, align 4
  %10134 = add i32 %10133, 1
  store i32 %10134, i32* %10115, align 4
  br label %10141

10135:                                            ; preds = %10129
  store i8* %10124, i8** %10114, align 8
  %10136 = shl nuw nsw i32 %10126, 9
  %10137 = add i32 %10136, %10119
  store i32 %10137, i32* %9839, align 8
  store i32 7, i32* %10113, align 8
  br label %10141

10138:                                            ; preds = %10122
  store i8* %10124, i8** %10114, align 8
  %10139 = shl nuw nsw i32 %10126, 8
  %10140 = add i32 %10139, %10119
  store i32 %10140, i32* %9839, align 8
  store i32 8, i32* %10113, align 8
  br label %10141

10141:                                            ; preds = %10138, %10135, %10131, %10117
  %10142 = phi i32 [ 8, %10138 ], [ 7, %10135 ], [ 8, %10131 ], [ %10120, %10117 ]
  %10143 = phi i32 [ %10140, %10138 ], [ %10137, %10135 ], [ %10132, %10131 ], [ %10119, %10117 ]
  %10144 = shl i32 %10118, 1
  store i32 %10144, i32* %9836, align 4
  %10145 = shl i32 %10143, 1
  store i32 %10145, i32* %9839, align 8
  %10146 = add i32 %10142, -1
  store i32 %10146, i32* %10113, align 8
  %10147 = icmp ult i32 %10144, 32768
  br i1 %10147, label %10117, label %10150

10148:                                            ; preds = %10092
  %10149 = inttoptr i64 %10062 to %struct.opj_mqc_state*
  br label %10152

10150:                                            ; preds = %10141
  %10151 = inttoptr i64 %10111 to %struct.opj_mqc_state*
  br label %10152

10152:                                            ; preds = %10150, %10148, %10099
  %10153 = phi %struct.opj_mqc_state* [ %10047, %10099 ], [ %10149, %10148 ], [ %10151, %10150 ]
  %10154 = phi i32 [ %10101, %10099 ], [ %10096, %10148 ], [ %10145, %10150 ]
  %10155 = phi i32 [ %10052, %10099 ], [ %10095, %10148 ], [ %10144, %10150 ]
  %10156 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10153, i64 0, i32 0
  %10157 = load i32, i32* %10156, align 8
  %10158 = sub i32 %10155, %10157
  store i32 %10158, i32* %9836, align 4
  %10159 = lshr i32 %10154, 16
  %10160 = load i32, i32* %10156, align 8
  %10161 = icmp ult i32 %10159, %10160
  br i1 %10161, label %10162, label %10205

10162:                                            ; preds = %10152
  %10163 = icmp ult i32 %10158, %10160
  store i32 %10160, i32* %9836, align 4
  %10164 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10153, i64 0, i32 3
  %10165 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10153, i64 0, i32 2
  %10166 = select i1 %10163, %struct.opj_mqc_state** %10165, %struct.opj_mqc_state** %10164
  %10167 = bitcast %struct.opj_mqc_state** %10166 to i64*
  %10168 = load i64, i64* %10167, align 8
  %10169 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %10168, i64* %10169, align 8
  %10170 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %10171 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %10172 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %10173 = load i32, i32* %10170, align 8
  br label %10174

10174:                                            ; preds = %10198, %10162
  %10175 = phi i32 [ %10201, %10198 ], [ %10160, %10162 ]
  %10176 = phi i32 [ %10202, %10198 ], [ %10154, %10162 ]
  %10177 = phi i32 [ %10203, %10198 ], [ %10173, %10162 ]
  %10178 = icmp eq i32 %10177, 0
  br i1 %10178, label %10179, label %10198

10179:                                            ; preds = %10174
  %10180 = load i8*, i8** %10171, align 8
  %10181 = getelementptr inbounds i8, i8* %10180, i64 1
  %10182 = load i8, i8* %10181, align 1
  %10183 = zext i8 %10182 to i32
  %10184 = load i8, i8* %10180, align 1
  %10185 = icmp eq i8 %10184, -1
  br i1 %10185, label %10186, label %10195

10186:                                            ; preds = %10179
  %10187 = icmp ugt i8 %10182, -113
  br i1 %10187, label %10188, label %10192

10188:                                            ; preds = %10186
  %10189 = add i32 %10176, 65280
  store i32 %10189, i32* %9839, align 8
  store i32 8, i32* %10170, align 8
  %10190 = load i32, i32* %10172, align 4
  %10191 = add i32 %10190, 1
  store i32 %10191, i32* %10172, align 4
  br label %10198

10192:                                            ; preds = %10186
  store i8* %10181, i8** %10171, align 8
  %10193 = shl nuw nsw i32 %10183, 9
  %10194 = add i32 %10193, %10176
  store i32 %10194, i32* %9839, align 8
  store i32 7, i32* %10170, align 8
  br label %10198

10195:                                            ; preds = %10179
  store i8* %10181, i8** %10171, align 8
  %10196 = shl nuw nsw i32 %10183, 8
  %10197 = add i32 %10196, %10176
  store i32 %10197, i32* %9839, align 8
  store i32 8, i32* %10170, align 8
  br label %10198

10198:                                            ; preds = %10195, %10192, %10188, %10174
  %10199 = phi i32 [ 8, %10195 ], [ 7, %10192 ], [ 8, %10188 ], [ %10177, %10174 ]
  %10200 = phi i32 [ %10197, %10195 ], [ %10194, %10192 ], [ %10189, %10188 ], [ %10176, %10174 ]
  %10201 = shl i32 %10175, 1
  store i32 %10201, i32* %9836, align 4
  %10202 = shl i32 %10200, 1
  store i32 %10202, i32* %9839, align 8
  %10203 = add i32 %10199, -1
  store i32 %10203, i32* %10170, align 8
  %10204 = icmp ult i32 %10201, 32768
  br i1 %10204, label %10174, label %10254

10205:                                            ; preds = %10152
  %10206 = shl i32 %10160, 16
  %10207 = sub i32 %10154, %10206
  store i32 %10207, i32* %9839, align 8
  %10208 = trunc i32 %10158 to i16
  %10209 = icmp sgt i16 %10208, -1
  br i1 %10209, label %10210, label %10254

10210:                                            ; preds = %10205
  %10211 = load i32, i32* %10156, align 8
  %10212 = icmp ult i32 %10158, %10211
  %10213 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10153, i64 0, i32 2
  %10214 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %10153, i64 0, i32 3
  %10215 = select i1 %10212, %struct.opj_mqc_state** %10214, %struct.opj_mqc_state** %10213
  %10216 = bitcast %struct.opj_mqc_state** %10215 to i64*
  %10217 = load i64, i64* %10216, align 8
  %10218 = bitcast %struct.opj_mqc_state** %9831 to i64*
  store i64 %10217, i64* %10218, align 8
  %10219 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %10220 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %10221 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %10222 = load i32, i32* %10219, align 8
  br label %10223

10223:                                            ; preds = %10247, %10210
  %10224 = phi i32 [ %10250, %10247 ], [ %10158, %10210 ]
  %10225 = phi i32 [ %10251, %10247 ], [ %10207, %10210 ]
  %10226 = phi i32 [ %10252, %10247 ], [ %10222, %10210 ]
  %10227 = icmp eq i32 %10226, 0
  br i1 %10227, label %10228, label %10247

10228:                                            ; preds = %10223
  %10229 = load i8*, i8** %10220, align 8
  %10230 = getelementptr inbounds i8, i8* %10229, i64 1
  %10231 = load i8, i8* %10230, align 1
  %10232 = zext i8 %10231 to i32
  %10233 = load i8, i8* %10229, align 1
  %10234 = icmp eq i8 %10233, -1
  br i1 %10234, label %10235, label %10244

10235:                                            ; preds = %10228
  %10236 = icmp ugt i8 %10231, -113
  br i1 %10236, label %10237, label %10241

10237:                                            ; preds = %10235
  %10238 = add i32 %10225, 65280
  store i32 %10238, i32* %9839, align 8
  store i32 8, i32* %10219, align 8
  %10239 = load i32, i32* %10221, align 4
  %10240 = add i32 %10239, 1
  store i32 %10240, i32* %10221, align 4
  br label %10247

10241:                                            ; preds = %10235
  store i8* %10230, i8** %10220, align 8
  %10242 = shl nuw nsw i32 %10232, 9
  %10243 = add i32 %10242, %10225
  store i32 %10243, i32* %9839, align 8
  store i32 7, i32* %10219, align 8
  br label %10247

10244:                                            ; preds = %10228
  store i8* %10230, i8** %10220, align 8
  %10245 = shl nuw nsw i32 %10232, 8
  %10246 = add i32 %10245, %10225
  store i32 %10246, i32* %9839, align 8
  store i32 8, i32* %10219, align 8
  br label %10247

10247:                                            ; preds = %10244, %10241, %10237, %10223
  %10248 = phi i32 [ 8, %10244 ], [ 7, %10241 ], [ 8, %10237 ], [ %10226, %10223 ]
  %10249 = phi i32 [ %10246, %10244 ], [ %10243, %10241 ], [ %10238, %10237 ], [ %10225, %10223 ]
  %10250 = shl i32 %10224, 1
  store i32 %10250, i32* %9836, align 4
  %10251 = shl i32 %10249, 1
  store i32 %10251, i32* %9839, align 8
  %10252 = add i32 %10248, -1
  store i32 %10252, i32* %10219, align 8
  %10253 = icmp ult i32 %10250, 32768
  br i1 %10253, label %10223, label %10254

10254:                                            ; preds = %10247, %10198, %9827, %10205
  ret void
}

declare void @opq_mqc_finish_dec(%struct.opj_mqc*) local_unnamed_addr #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_t1_dec_sigpass_step_raw(%struct.opj_t1* nocapture, i32* nocapture, i32* nocapture, i32, i32, i32) unnamed_addr #5 {
  %7 = load i32, i32* %1, align 4
  %8 = mul i32 %5, 3
  %9 = shl i32 2097168, %8
  %10 = and i32 %7, %9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %119

12:                                               ; preds = %6
  %13 = shl i32 495, %8
  %14 = and i32 %7, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %119, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 8
  br i1 %19, label %24, label %22

22:                                               ; preds = %16
  %23 = add i32 %18, -1
  br label %37

24:                                               ; preds = %16
  %25 = icmp eq i32 %21, 255
  %26 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %27 = load i8*, i8** %26, align 8
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  br i1 %25, label %30, label %35

30:                                               ; preds = %24
  %31 = icmp ugt i8 %28, -113
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  store i32 255, i32* %20, align 8
  store i32 8, i32* %17, align 8
  br label %37

33:                                               ; preds = %30
  store i32 %29, i32* %20, align 8
  %34 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %34, i8** %26, align 8
  store i32 7, i32* %17, align 8
  br label %37

35:                                               ; preds = %24
  store i32 %29, i32* %20, align 8
  %36 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %36, i8** %26, align 8
  store i32 8, i32* %17, align 8
  br label %37

37:                                               ; preds = %22, %32, %33, %35
  %38 = phi i32 [ %29, %35 ], [ %29, %33 ], [ 255, %32 ], [ %21, %22 ]
  %39 = phi i32 [ 7, %35 ], [ 6, %33 ], [ 7, %32 ], [ %23, %22 ]
  store i32 %39, i32* %17, align 8
  %40 = shl i32 1, %39
  %41 = and i32 %40, %38
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %115, label %43

43:                                               ; preds = %37
  %44 = icmp eq i32 %39, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %43
  %46 = add i32 %39, -1
  br label %60

47:                                               ; preds = %43
  %48 = icmp eq i32 %38, 255
  %49 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %50 = load i8*, i8** %49, align 8
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  br i1 %48, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp ugt i8 %51, -113
  br i1 %54, label %55, label %56

55:                                               ; preds = %53
  store i32 255, i32* %20, align 8
  store i32 8, i32* %17, align 8
  br label %60

56:                                               ; preds = %53
  store i32 %52, i32* %20, align 8
  %57 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %57, i8** %49, align 8
  store i32 7, i32* %17, align 8
  br label %60

58:                                               ; preds = %47
  store i32 %52, i32* %20, align 8
  %59 = getelementptr inbounds i8, i8* %50, i64 1
  store i8* %59, i8** %49, align 8
  store i32 8, i32* %17, align 8
  br label %60

60:                                               ; preds = %45, %55, %56, %58
  %61 = phi i32 [ %52, %58 ], [ %52, %56 ], [ 255, %55 ], [ %38, %45 ]
  %62 = phi i32 [ 7, %58 ], [ 6, %56 ], [ 7, %55 ], [ %46, %45 ]
  store i32 %62, i32* %17, align 8
  %63 = lshr i32 %61, %62
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = sub nsw i32 0, %3
  %67 = select i1 %65, i32 %3, i32 %66
  store i32 %67, i32* %2, align 4
  %68 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = add i32 %69, 2
  %71 = shl i32 32, %8
  %72 = getelementptr inbounds i32, i32* %1, i64 -1
  %73 = load i32, i32* %72, align 4
  %74 = or i32 %73, %71
  store i32 %74, i32* %72, align 4
  %75 = shl nuw nsw i32 %64, 19
  %76 = or i32 %75, 16
  %77 = shl i32 %76, %8
  %78 = load i32, i32* %1, align 4
  %79 = or i32 %78, %77
  store i32 %79, i32* %1, align 4
  %80 = shl i32 8, %8
  %81 = getelementptr inbounds i32, i32* %1, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = or i32 %82, %80
  store i32 %83, i32* %81, align 4
  %84 = or i32 %5, %4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %100

86:                                               ; preds = %60
  %87 = zext i32 %70 to i64
  %88 = sub nsw i64 0, %87
  %89 = getelementptr inbounds i32, i32* %1, i64 %88
  %90 = shl i32 %63, 31
  %91 = load i32, i32* %89, align 4
  %92 = or i32 %90, %91
  %93 = or i32 %92, 65536
  store i32 %93, i32* %89, align 4
  %94 = getelementptr inbounds i32, i32* %89, i64 -1
  %95 = load i32, i32* %94, align 4
  %96 = or i32 %95, 131072
  store i32 %96, i32* %94, align 4
  %97 = getelementptr inbounds i32, i32* %89, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = or i32 %98, 32768
  store i32 %99, i32* %97, align 4
  br label %100

100:                                              ; preds = %86, %60
  %101 = icmp eq i32 %5, 3
  br i1 %101, label %102, label %115

102:                                              ; preds = %100
  %103 = zext i32 %70 to i64
  %104 = getelementptr inbounds i32, i32* %1, i64 %103
  %105 = shl nuw nsw i32 %64, 18
  %106 = load i32, i32* %104, align 4
  %107 = or i32 %105, %106
  %108 = or i32 %107, 2
  store i32 %108, i32* %104, align 4
  %109 = getelementptr inbounds i32, i32* %104, i64 -1
  %110 = load i32, i32* %109, align 4
  %111 = or i32 %110, 4
  store i32 %111, i32* %109, align 4
  %112 = getelementptr inbounds i32, i32* %104, i64 1
  %113 = load i32, i32* %112, align 4
  %114 = or i32 %113, 1
  store i32 %114, i32* %112, align 4
  br label %115

115:                                              ; preds = %102, %100, %37
  %116 = shl i32 2097152, %8
  %117 = load i32, i32* %1, align 4
  %118 = or i32 %117, %116
  store i32 %118, i32* %1, align 4
  br label %119

119:                                              ; preds = %12, %115, %6
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_t1_dec_sigpass_step_mqc(%struct.opj_t1*, i32* nocapture, i32* nocapture, i32, i32, i32, i32) unnamed_addr #5 {
  %8 = load i32, i32* %1, align 4
  %9 = mul i32 %4, 3
  %10 = shl i32 2097168, %9
  %11 = and i32 %8, %10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %353

13:                                               ; preds = %7
  %14 = shl i32 495, %9
  %15 = and i32 %8, %14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %353, label %17

17:                                               ; preds = %13
  %18 = lshr i32 %8, %9
  %19 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %20 = load i8*, i8** %19, align 8
  %21 = and i32 %18, 495
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %20, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %25
  %27 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  store %struct.opj_mqc_state** %26, %struct.opj_mqc_state*** %27, align 8
  %28 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %26, align 8
  %29 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sub i32 %32, %30
  store i32 %33, i32* %31, align 4
  %34 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = lshr i32 %35, 16
  %37 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %26, align 8
  %38 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %37, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp ult i32 %36, %39
  br i1 %40, label %41, label %90

41:                                               ; preds = %17
  %42 = icmp ult i32 %33, %39
  store i32 %39, i32* %31, align 4
  %43 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %26, align 8
  %44 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %43, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  %47 = zext i1 %46 to i32
  %48 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %43, i64 0, i32 3
  %49 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %43, i64 0, i32 2
  %50 = select i1 %42, %struct.opj_mqc_state** %49, %struct.opj_mqc_state** %48
  %51 = select i1 %42, i32 %45, i32 %47
  %52 = bitcast %struct.opj_mqc_state** %50 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %struct.opj_mqc_state** %26 to i64*
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %56 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %57 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %58 = load i32, i32* %55, align 8
  br label %59

59:                                               ; preds = %83, %41
  %60 = phi i32 [ %86, %83 ], [ %39, %41 ]
  %61 = phi i32 [ %87, %83 ], [ %35, %41 ]
  %62 = phi i32 [ %88, %83 ], [ %58, %41 ]
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %83

64:                                               ; preds = %59
  %65 = load i8*, i8** %56, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = load i8, i8* %65, align 1
  %70 = icmp eq i8 %69, -1
  br i1 %70, label %71, label %80

71:                                               ; preds = %64
  %72 = icmp ugt i8 %67, -113
  br i1 %72, label %73, label %77

73:                                               ; preds = %71
  %74 = add i32 %61, 65280
  store i32 %74, i32* %34, align 8
  store i32 8, i32* %55, align 8
  %75 = load i32, i32* %57, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %57, align 4
  br label %83

77:                                               ; preds = %71
  store i8* %66, i8** %56, align 8
  %78 = shl nuw nsw i32 %68, 9
  %79 = add i32 %61, %78
  store i32 %79, i32* %34, align 8
  store i32 7, i32* %55, align 8
  br label %83

80:                                               ; preds = %64
  store i8* %66, i8** %56, align 8
  %81 = shl nuw nsw i32 %68, 8
  %82 = add i32 %61, %81
  store i32 %82, i32* %34, align 8
  store i32 8, i32* %55, align 8
  br label %83

83:                                               ; preds = %80, %77, %73, %59
  %84 = phi i32 [ 8, %80 ], [ 7, %77 ], [ 8, %73 ], [ %62, %59 ]
  %85 = phi i32 [ %82, %80 ], [ %79, %77 ], [ %74, %73 ], [ %61, %59 ]
  %86 = shl i32 %60, 1
  store i32 %86, i32* %31, align 4
  %87 = shl i32 %85, 1
  store i32 %87, i32* %34, align 8
  %88 = add i32 %84, -1
  store i32 %88, i32* %55, align 8
  %89 = icmp ult i32 %86, 32768
  br i1 %89, label %59, label %147

90:                                               ; preds = %17
  %91 = shl i32 %39, 16
  %92 = sub i32 %35, %91
  store i32 %92, i32* %34, align 8
  %93 = trunc i32 %33 to i16
  %94 = icmp sgt i16 %93, -1
  br i1 %94, label %95, label %144

95:                                               ; preds = %90
  %96 = load i32, i32* %38, align 8
  %97 = icmp ult i32 %33, %96
  %98 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %37, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %37, i64 0, i32 2
  %101 = icmp eq i32 %99, 0
  %102 = zext i1 %101 to i32
  %103 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %37, i64 0, i32 3
  %104 = select i1 %97, %struct.opj_mqc_state** %103, %struct.opj_mqc_state** %100
  %105 = select i1 %97, i32 %102, i32 %99
  %106 = bitcast %struct.opj_mqc_state** %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %struct.opj_mqc_state** %26 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %110 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %111 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %112 = load i32, i32* %109, align 8
  br label %113

113:                                              ; preds = %137, %95
  %114 = phi i32 [ %140, %137 ], [ %33, %95 ]
  %115 = phi i32 [ %141, %137 ], [ %92, %95 ]
  %116 = phi i32 [ %142, %137 ], [ %112, %95 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %137

118:                                              ; preds = %113
  %119 = load i8*, i8** %110, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = load i8, i8* %119, align 1
  %124 = icmp eq i8 %123, -1
  br i1 %124, label %125, label %134

125:                                              ; preds = %118
  %126 = icmp ugt i8 %121, -113
  br i1 %126, label %127, label %131

127:                                              ; preds = %125
  %128 = add i32 %115, 65280
  store i32 %128, i32* %34, align 8
  store i32 8, i32* %109, align 8
  %129 = load i32, i32* %111, align 4
  %130 = add i32 %129, 1
  store i32 %130, i32* %111, align 4
  br label %137

131:                                              ; preds = %125
  store i8* %120, i8** %110, align 8
  %132 = shl nuw nsw i32 %122, 9
  %133 = add i32 %115, %132
  store i32 %133, i32* %34, align 8
  store i32 7, i32* %109, align 8
  br label %137

134:                                              ; preds = %118
  store i8* %120, i8** %110, align 8
  %135 = shl nuw nsw i32 %122, 8
  %136 = add i32 %115, %135
  store i32 %136, i32* %34, align 8
  store i32 8, i32* %109, align 8
  br label %137

137:                                              ; preds = %134, %131, %127, %113
  %138 = phi i32 [ 8, %134 ], [ 7, %131 ], [ 8, %127 ], [ %116, %113 ]
  %139 = phi i32 [ %136, %134 ], [ %133, %131 ], [ %128, %127 ], [ %115, %113 ]
  %140 = shl i32 %114, 1
  store i32 %140, i32* %31, align 4
  %141 = shl i32 %139, 1
  store i32 %141, i32* %34, align 8
  %142 = add i32 %138, -1
  store i32 %142, i32* %109, align 8
  %143 = icmp ult i32 %140, 32768
  br i1 %143, label %113, label %147

144:                                              ; preds = %90
  %145 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %37, i64 0, i32 1
  %146 = load i32, i32* %145, align 4
  br label %147

147:                                              ; preds = %137, %83, %144
  %148 = phi i32 [ %92, %144 ], [ %87, %83 ], [ %141, %137 ]
  %149 = phi i32 [ %33, %144 ], [ %86, %83 ], [ %140, %137 ]
  %150 = phi i32 [ %146, %144 ], [ %51, %83 ], [ %105, %137 ]
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %349, label %152

152:                                              ; preds = %147
  %153 = load i32, i32* %1, align 4
  %154 = getelementptr inbounds i32, i32* %1, i64 -1
  %155 = load i32, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %1, i64 1
  %157 = load i32, i32* %156, align 4
  %158 = lshr i32 %153, %9
  %159 = and i32 %158, 170
  %160 = add i32 %9, 19
  %161 = lshr i32 %155, %160
  %162 = and i32 %161, 1
  %163 = add i32 %9, 17
  %164 = lshr i32 %157, %163
  %165 = and i32 %164, 4
  %166 = icmp eq i32 %4, 0
  %167 = add i32 %9, 12
  %168 = select i1 %166, i32 14, i32 %167
  %169 = lshr i32 %153, %168
  %170 = and i32 %169, 16
  %171 = add i32 %9, 16
  %172 = lshr i32 %153, %171
  %173 = and i32 %172, 64
  %174 = or i32 %173, %159
  %175 = or i32 %174, %170
  %176 = or i32 %175, %162
  %177 = or i32 %176, %165
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %178
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = zext i8 %180 to i64
  %185 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %184
  store %struct.opj_mqc_state** %185, %struct.opj_mqc_state*** %27, align 8
  %186 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %185, align 8
  %187 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %186, i64 0, i32 0
  %188 = load i32, i32* %187, align 8
  %189 = sub i32 %149, %188
  store i32 %189, i32* %31, align 4
  %190 = lshr i32 %148, 16
  %191 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %185, align 8
  %192 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %191, i64 0, i32 0
  %193 = load i32, i32* %192, align 8
  %194 = icmp ult i32 %190, %193
  br i1 %194, label %195, label %244

195:                                              ; preds = %152
  %196 = icmp ult i32 %189, %193
  store i32 %193, i32* %31, align 4
  %197 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %185, align 8
  %198 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %197, i64 0, i32 1
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 0
  %201 = zext i1 %200 to i32
  %202 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %197, i64 0, i32 3
  %203 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %197, i64 0, i32 2
  %204 = select i1 %196, %struct.opj_mqc_state** %203, %struct.opj_mqc_state** %202
  %205 = select i1 %196, i32 %199, i32 %201
  %206 = bitcast %struct.opj_mqc_state** %204 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %struct.opj_mqc_state** %185 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %210 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %211 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %212 = load i32, i32* %209, align 8
  br label %213

213:                                              ; preds = %237, %195
  %214 = phi i32 [ %240, %237 ], [ %193, %195 ]
  %215 = phi i32 [ %241, %237 ], [ %148, %195 ]
  %216 = phi i32 [ %242, %237 ], [ %212, %195 ]
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %237

218:                                              ; preds = %213
  %219 = load i8*, i8** %210, align 8
  %220 = getelementptr inbounds i8, i8* %219, i64 1
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = load i8, i8* %219, align 1
  %224 = icmp eq i8 %223, -1
  br i1 %224, label %225, label %234

225:                                              ; preds = %218
  %226 = icmp ugt i8 %221, -113
  br i1 %226, label %227, label %231

227:                                              ; preds = %225
  %228 = add i32 %215, 65280
  store i32 %228, i32* %34, align 8
  store i32 8, i32* %209, align 8
  %229 = load i32, i32* %211, align 4
  %230 = add i32 %229, 1
  store i32 %230, i32* %211, align 4
  br label %237

231:                                              ; preds = %225
  store i8* %220, i8** %210, align 8
  %232 = shl nuw nsw i32 %222, 9
  %233 = add i32 %215, %232
  store i32 %233, i32* %34, align 8
  store i32 7, i32* %209, align 8
  br label %237

234:                                              ; preds = %218
  store i8* %220, i8** %210, align 8
  %235 = shl nuw nsw i32 %222, 8
  %236 = add i32 %215, %235
  store i32 %236, i32* %34, align 8
  store i32 8, i32* %209, align 8
  br label %237

237:                                              ; preds = %234, %231, %227, %213
  %238 = phi i32 [ 8, %234 ], [ 7, %231 ], [ 8, %227 ], [ %216, %213 ]
  %239 = phi i32 [ %236, %234 ], [ %233, %231 ], [ %228, %227 ], [ %215, %213 ]
  %240 = shl i32 %214, 1
  store i32 %240, i32* %31, align 4
  %241 = shl i32 %239, 1
  store i32 %241, i32* %34, align 8
  %242 = add i32 %238, -1
  store i32 %242, i32* %209, align 8
  %243 = icmp ult i32 %240, 32768
  br i1 %243, label %213, label %301

244:                                              ; preds = %152
  %245 = shl i32 %193, 16
  %246 = sub i32 %148, %245
  store i32 %246, i32* %34, align 8
  %247 = trunc i32 %189 to i16
  %248 = icmp sgt i16 %247, -1
  br i1 %248, label %249, label %298

249:                                              ; preds = %244
  %250 = load i32, i32* %192, align 8
  %251 = icmp ult i32 %189, %250
  %252 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %191, i64 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %191, i64 0, i32 2
  %255 = icmp eq i32 %253, 0
  %256 = zext i1 %255 to i32
  %257 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %191, i64 0, i32 3
  %258 = select i1 %251, %struct.opj_mqc_state** %257, %struct.opj_mqc_state** %254
  %259 = select i1 %251, i32 %256, i32 %253
  %260 = bitcast %struct.opj_mqc_state** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast %struct.opj_mqc_state** %185 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %264 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %265 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %266 = load i32, i32* %263, align 8
  br label %267

267:                                              ; preds = %291, %249
  %268 = phi i32 [ %294, %291 ], [ %189, %249 ]
  %269 = phi i32 [ %295, %291 ], [ %246, %249 ]
  %270 = phi i32 [ %296, %291 ], [ %266, %249 ]
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %291

272:                                              ; preds = %267
  %273 = load i8*, i8** %264, align 8
  %274 = getelementptr inbounds i8, i8* %273, i64 1
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = load i8, i8* %273, align 1
  %278 = icmp eq i8 %277, -1
  br i1 %278, label %279, label %288

279:                                              ; preds = %272
  %280 = icmp ugt i8 %275, -113
  br i1 %280, label %281, label %285

281:                                              ; preds = %279
  %282 = add i32 %269, 65280
  store i32 %282, i32* %34, align 8
  store i32 8, i32* %263, align 8
  %283 = load i32, i32* %265, align 4
  %284 = add i32 %283, 1
  store i32 %284, i32* %265, align 4
  br label %291

285:                                              ; preds = %279
  store i8* %274, i8** %264, align 8
  %286 = shl nuw nsw i32 %276, 9
  %287 = add i32 %269, %286
  store i32 %287, i32* %34, align 8
  store i32 7, i32* %263, align 8
  br label %291

288:                                              ; preds = %272
  store i8* %274, i8** %264, align 8
  %289 = shl nuw nsw i32 %276, 8
  %290 = add i32 %269, %289
  store i32 %290, i32* %34, align 8
  store i32 8, i32* %263, align 8
  br label %291

291:                                              ; preds = %288, %285, %281, %267
  %292 = phi i32 [ 8, %288 ], [ 7, %285 ], [ 8, %281 ], [ %270, %267 ]
  %293 = phi i32 [ %290, %288 ], [ %287, %285 ], [ %282, %281 ], [ %269, %267 ]
  %294 = shl i32 %268, 1
  store i32 %294, i32* %31, align 4
  %295 = shl i32 %293, 1
  store i32 %295, i32* %34, align 8
  %296 = add i32 %292, -1
  store i32 %296, i32* %263, align 8
  %297 = icmp ult i32 %294, 32768
  br i1 %297, label %267, label %301

298:                                              ; preds = %244
  %299 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %191, i64 0, i32 1
  %300 = load i32, i32* %299, align 4
  br label %301

301:                                              ; preds = %291, %237, %298
  %302 = phi i32 [ %300, %298 ], [ %205, %237 ], [ %259, %291 ]
  %303 = xor i32 %302, %183
  %304 = icmp eq i32 %303, 0
  %305 = sub nsw i32 0, %3
  %306 = select i1 %304, i32 %3, i32 %305
  store i32 %306, i32* %2, align 4
  %307 = shl i32 32, %9
  %308 = load i32, i32* %154, align 4
  %309 = or i32 %308, %307
  store i32 %309, i32* %154, align 4
  %310 = shl i32 %303, 19
  %311 = or i32 %310, 16
  %312 = shl i32 %311, %9
  %313 = load i32, i32* %1, align 4
  %314 = or i32 %313, %312
  store i32 %314, i32* %1, align 4
  %315 = shl i32 8, %9
  %316 = load i32, i32* %156, align 4
  %317 = or i32 %316, %315
  store i32 %317, i32* %156, align 4
  %318 = or i32 %6, %4
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %334

320:                                              ; preds = %301
  %321 = zext i32 %5 to i64
  %322 = sub nsw i64 0, %321
  %323 = getelementptr inbounds i32, i32* %1, i64 %322
  %324 = shl i32 %303, 31
  %325 = load i32, i32* %323, align 4
  %326 = or i32 %324, %325
  %327 = or i32 %326, 65536
  store i32 %327, i32* %323, align 4
  %328 = getelementptr inbounds i32, i32* %323, i64 -1
  %329 = load i32, i32* %328, align 4
  %330 = or i32 %329, 131072
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %323, i64 1
  %332 = load i32, i32* %331, align 4
  %333 = or i32 %332, 32768
  store i32 %333, i32* %331, align 4
  br label %334

334:                                              ; preds = %301, %320
  %335 = icmp eq i32 %4, 3
  br i1 %335, label %336, label %349

336:                                              ; preds = %334
  %337 = zext i32 %5 to i64
  %338 = getelementptr inbounds i32, i32* %1, i64 %337
  %339 = shl i32 %303, 18
  %340 = load i32, i32* %338, align 4
  %341 = or i32 %339, %340
  %342 = or i32 %341, 2
  store i32 %342, i32* %338, align 4
  %343 = getelementptr inbounds i32, i32* %338, i64 -1
  %344 = load i32, i32* %343, align 4
  %345 = or i32 %344, 4
  store i32 %345, i32* %343, align 4
  %346 = getelementptr inbounds i32, i32* %338, i64 1
  %347 = load i32, i32* %346, align 4
  %348 = or i32 %347, 1
  store i32 %348, i32* %346, align 4
  br label %349

349:                                              ; preds = %334, %336, %147
  %350 = shl i32 2097152, %9
  %351 = load i32, i32* %1, align 4
  %352 = or i32 %351, %350
  store i32 %352, i32* %1, align 4
  br label %353

353:                                              ; preds = %13, %349, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_t1_dec_clnpass_step(%struct.opj_t1*, i32* nocapture, i32* nocapture, i32, i32, i32) unnamed_addr #4 {
  %7 = load i32, i32* %1, align 4
  %8 = mul i32 %4, 3
  %9 = shl i32 2097168, %8
  %10 = and i32 %7, %9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %350

12:                                               ; preds = %6
  %13 = lshr i32 %7, %8
  %14 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 9
  %15 = load i8*, i8** %14, align 8
  %16 = and i32 %13, 495
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %20
  %22 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 8
  store %struct.opj_mqc_state** %21, %struct.opj_mqc_state*** %22, align 8
  %23 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %21, align 8
  %24 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %23, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %27, %25
  store i32 %28, i32* %26, align 4
  %29 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = lshr i32 %30, 16
  %32 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %21, align 8
  %33 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp ult i32 %31, %34
  br i1 %35, label %36, label %85

36:                                               ; preds = %12
  %37 = icmp ult i32 %28, %34
  store i32 %34, i32* %26, align 4
  %38 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %21, align 8
  %39 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %38, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  %42 = zext i1 %41 to i32
  %43 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %38, i64 0, i32 3
  %44 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %38, i64 0, i32 2
  %45 = select i1 %37, %struct.opj_mqc_state** %44, %struct.opj_mqc_state** %43
  %46 = select i1 %37, i32 %40, i32 %42
  %47 = bitcast %struct.opj_mqc_state** %45 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %struct.opj_mqc_state** %21 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %51 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %52 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %53 = load i32, i32* %50, align 8
  br label %54

54:                                               ; preds = %78, %36
  %55 = phi i32 [ %81, %78 ], [ %34, %36 ]
  %56 = phi i32 [ %82, %78 ], [ %30, %36 ]
  %57 = phi i32 [ %83, %78 ], [ %53, %36 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %78

59:                                               ; preds = %54
  %60 = load i8*, i8** %51, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = load i8, i8* %60, align 1
  %65 = icmp eq i8 %64, -1
  br i1 %65, label %66, label %75

66:                                               ; preds = %59
  %67 = icmp ugt i8 %62, -113
  br i1 %67, label %68, label %72

68:                                               ; preds = %66
  %69 = add i32 %56, 65280
  store i32 %69, i32* %29, align 8
  store i32 8, i32* %50, align 8
  %70 = load i32, i32* %52, align 4
  %71 = add i32 %70, 1
  store i32 %71, i32* %52, align 4
  br label %78

72:                                               ; preds = %66
  store i8* %61, i8** %51, align 8
  %73 = shl nuw nsw i32 %63, 9
  %74 = add i32 %56, %73
  store i32 %74, i32* %29, align 8
  store i32 7, i32* %50, align 8
  br label %78

75:                                               ; preds = %59
  store i8* %61, i8** %51, align 8
  %76 = shl nuw nsw i32 %63, 8
  %77 = add i32 %56, %76
  store i32 %77, i32* %29, align 8
  store i32 8, i32* %50, align 8
  br label %78

78:                                               ; preds = %75, %72, %68, %54
  %79 = phi i32 [ 8, %75 ], [ 7, %72 ], [ 8, %68 ], [ %57, %54 ]
  %80 = phi i32 [ %77, %75 ], [ %74, %72 ], [ %69, %68 ], [ %56, %54 ]
  %81 = shl i32 %55, 1
  store i32 %81, i32* %26, align 4
  %82 = shl i32 %80, 1
  store i32 %82, i32* %29, align 8
  %83 = add i32 %79, -1
  store i32 %83, i32* %50, align 8
  %84 = icmp ult i32 %81, 32768
  br i1 %84, label %54, label %142

85:                                               ; preds = %12
  %86 = shl i32 %34, 16
  %87 = sub i32 %30, %86
  store i32 %87, i32* %29, align 8
  %88 = trunc i32 %28 to i16
  %89 = icmp sgt i16 %88, -1
  br i1 %89, label %90, label %139

90:                                               ; preds = %85
  %91 = load i32, i32* %33, align 8
  %92 = icmp ult i32 %28, %91
  %93 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %32, i64 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %32, i64 0, i32 2
  %96 = icmp eq i32 %94, 0
  %97 = zext i1 %96 to i32
  %98 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %32, i64 0, i32 3
  %99 = select i1 %92, %struct.opj_mqc_state** %98, %struct.opj_mqc_state** %95
  %100 = select i1 %92, i32 %97, i32 %94
  %101 = bitcast %struct.opj_mqc_state** %99 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %struct.opj_mqc_state** %21 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %105 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %106 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %107 = load i32, i32* %104, align 8
  br label %108

108:                                              ; preds = %132, %90
  %109 = phi i32 [ %135, %132 ], [ %28, %90 ]
  %110 = phi i32 [ %136, %132 ], [ %87, %90 ]
  %111 = phi i32 [ %137, %132 ], [ %107, %90 ]
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %132

113:                                              ; preds = %108
  %114 = load i8*, i8** %105, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 1
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %114, align 1
  %119 = icmp eq i8 %118, -1
  br i1 %119, label %120, label %129

120:                                              ; preds = %113
  %121 = icmp ugt i8 %116, -113
  br i1 %121, label %122, label %126

122:                                              ; preds = %120
  %123 = add i32 %110, 65280
  store i32 %123, i32* %29, align 8
  store i32 8, i32* %104, align 8
  %124 = load i32, i32* %106, align 4
  %125 = add i32 %124, 1
  store i32 %125, i32* %106, align 4
  br label %132

126:                                              ; preds = %120
  store i8* %115, i8** %105, align 8
  %127 = shl nuw nsw i32 %117, 9
  %128 = add i32 %110, %127
  store i32 %128, i32* %29, align 8
  store i32 7, i32* %104, align 8
  br label %132

129:                                              ; preds = %113
  store i8* %115, i8** %105, align 8
  %130 = shl nuw nsw i32 %117, 8
  %131 = add i32 %110, %130
  store i32 %131, i32* %29, align 8
  store i32 8, i32* %104, align 8
  br label %132

132:                                              ; preds = %129, %126, %122, %108
  %133 = phi i32 [ 8, %129 ], [ 7, %126 ], [ 8, %122 ], [ %111, %108 ]
  %134 = phi i32 [ %131, %129 ], [ %128, %126 ], [ %123, %122 ], [ %110, %108 ]
  %135 = shl i32 %109, 1
  store i32 %135, i32* %26, align 4
  %136 = shl i32 %134, 1
  store i32 %136, i32* %29, align 8
  %137 = add i32 %133, -1
  store i32 %137, i32* %104, align 8
  %138 = icmp ult i32 %135, 32768
  br i1 %138, label %108, label %142

139:                                              ; preds = %85
  %140 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %32, i64 0, i32 1
  %141 = load i32, i32* %140, align 4
  br label %142

142:                                              ; preds = %132, %78, %139
  %143 = phi i32 [ %87, %139 ], [ %82, %78 ], [ %136, %132 ]
  %144 = phi i32 [ %28, %139 ], [ %81, %78 ], [ %135, %132 ]
  %145 = phi i32 [ %141, %139 ], [ %46, %78 ], [ %100, %132 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %350, label %147

147:                                              ; preds = %142
  %148 = load i32, i32* %1, align 4
  %149 = getelementptr inbounds i32, i32* %1, i64 -1
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds i32, i32* %1, i64 1
  %152 = load i32, i32* %151, align 4
  %153 = lshr i32 %148, %8
  %154 = and i32 %153, 170
  %155 = add i32 %8, 19
  %156 = lshr i32 %150, %155
  %157 = and i32 %156, 1
  %158 = add i32 %8, 17
  %159 = lshr i32 %152, %158
  %160 = and i32 %159, 4
  %161 = icmp eq i32 %4, 0
  %162 = add i32 %8, 12
  %163 = select i1 %161, i32 14, i32 %162
  %164 = lshr i32 %148, %163
  %165 = and i32 %164, 16
  %166 = add i32 %8, 16
  %167 = lshr i32 %148, %166
  %168 = and i32 %167, 64
  %169 = or i32 %168, %154
  %170 = or i32 %169, %165
  %171 = or i32 %170, %157
  %172 = or i32 %171, %160
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_ctxno_sc, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i64
  %177 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 7, i64 %176
  store %struct.opj_mqc_state** %177, %struct.opj_mqc_state*** %22, align 8
  %178 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %177, align 8
  %179 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %178, i64 0, i32 0
  %180 = load i32, i32* %179, align 8
  %181 = sub i32 %144, %180
  store i32 %181, i32* %26, align 4
  %182 = lshr i32 %143, 16
  %183 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %177, align 8
  %184 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %183, i64 0, i32 0
  %185 = load i32, i32* %184, align 8
  %186 = icmp ult i32 %182, %185
  br i1 %186, label %187, label %236

187:                                              ; preds = %147
  %188 = icmp ult i32 %181, %185
  store i32 %185, i32* %26, align 4
  %189 = load %struct.opj_mqc_state*, %struct.opj_mqc_state** %177, align 8
  %190 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %189, i64 0, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  %193 = zext i1 %192 to i32
  %194 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %189, i64 0, i32 3
  %195 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %189, i64 0, i32 2
  %196 = select i1 %188, %struct.opj_mqc_state** %195, %struct.opj_mqc_state** %194
  %197 = select i1 %188, i32 %191, i32 %193
  %198 = bitcast %struct.opj_mqc_state** %196 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = bitcast %struct.opj_mqc_state** %177 to i64*
  store i64 %199, i64* %200, align 8
  %201 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %202 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %203 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %204 = load i32, i32* %201, align 8
  br label %205

205:                                              ; preds = %229, %187
  %206 = phi i32 [ %232, %229 ], [ %185, %187 ]
  %207 = phi i32 [ %233, %229 ], [ %143, %187 ]
  %208 = phi i32 [ %234, %229 ], [ %204, %187 ]
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %229

210:                                              ; preds = %205
  %211 = load i8*, i8** %202, align 8
  %212 = getelementptr inbounds i8, i8* %211, i64 1
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = load i8, i8* %211, align 1
  %216 = icmp eq i8 %215, -1
  br i1 %216, label %217, label %226

217:                                              ; preds = %210
  %218 = icmp ugt i8 %213, -113
  br i1 %218, label %219, label %223

219:                                              ; preds = %217
  %220 = add i32 %207, 65280
  store i32 %220, i32* %29, align 8
  store i32 8, i32* %201, align 8
  %221 = load i32, i32* %203, align 4
  %222 = add i32 %221, 1
  store i32 %222, i32* %203, align 4
  br label %229

223:                                              ; preds = %217
  store i8* %212, i8** %202, align 8
  %224 = shl nuw nsw i32 %214, 9
  %225 = add i32 %207, %224
  store i32 %225, i32* %29, align 8
  store i32 7, i32* %201, align 8
  br label %229

226:                                              ; preds = %210
  store i8* %212, i8** %202, align 8
  %227 = shl nuw nsw i32 %214, 8
  %228 = add i32 %207, %227
  store i32 %228, i32* %29, align 8
  store i32 8, i32* %201, align 8
  br label %229

229:                                              ; preds = %226, %223, %219, %205
  %230 = phi i32 [ 8, %226 ], [ 7, %223 ], [ 8, %219 ], [ %208, %205 ]
  %231 = phi i32 [ %228, %226 ], [ %225, %223 ], [ %220, %219 ], [ %207, %205 ]
  %232 = shl i32 %206, 1
  store i32 %232, i32* %26, align 4
  %233 = shl i32 %231, 1
  store i32 %233, i32* %29, align 8
  %234 = add i32 %230, -1
  store i32 %234, i32* %201, align 8
  %235 = icmp ult i32 %232, 32768
  br i1 %235, label %205, label %293

236:                                              ; preds = %147
  %237 = shl i32 %185, 16
  %238 = sub i32 %143, %237
  store i32 %238, i32* %29, align 8
  %239 = trunc i32 %181 to i16
  %240 = icmp sgt i16 %239, -1
  br i1 %240, label %241, label %290

241:                                              ; preds = %236
  %242 = load i32, i32* %184, align 8
  %243 = icmp ult i32 %181, %242
  %244 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %183, i64 0, i32 1
  %245 = load i32, i32* %244, align 4
  %246 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %183, i64 0, i32 2
  %247 = icmp eq i32 %245, 0
  %248 = zext i1 %247 to i32
  %249 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %183, i64 0, i32 3
  %250 = select i1 %243, %struct.opj_mqc_state** %249, %struct.opj_mqc_state** %246
  %251 = select i1 %243, i32 %248, i32 %245
  %252 = bitcast %struct.opj_mqc_state** %250 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %struct.opj_mqc_state** %177 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 2
  %256 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 4
  %257 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 0, i32 3
  %258 = load i32, i32* %255, align 8
  br label %259

259:                                              ; preds = %283, %241
  %260 = phi i32 [ %286, %283 ], [ %181, %241 ]
  %261 = phi i32 [ %287, %283 ], [ %238, %241 ]
  %262 = phi i32 [ %288, %283 ], [ %258, %241 ]
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %283

264:                                              ; preds = %259
  %265 = load i8*, i8** %256, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 1
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = load i8, i8* %265, align 1
  %270 = icmp eq i8 %269, -1
  br i1 %270, label %271, label %280

271:                                              ; preds = %264
  %272 = icmp ugt i8 %267, -113
  br i1 %272, label %273, label %277

273:                                              ; preds = %271
  %274 = add i32 %261, 65280
  store i32 %274, i32* %29, align 8
  store i32 8, i32* %255, align 8
  %275 = load i32, i32* %257, align 4
  %276 = add i32 %275, 1
  store i32 %276, i32* %257, align 4
  br label %283

277:                                              ; preds = %271
  store i8* %266, i8** %256, align 8
  %278 = shl nuw nsw i32 %268, 9
  %279 = add i32 %261, %278
  store i32 %279, i32* %29, align 8
  store i32 7, i32* %255, align 8
  br label %283

280:                                              ; preds = %264
  store i8* %266, i8** %256, align 8
  %281 = shl nuw nsw i32 %268, 8
  %282 = add i32 %261, %281
  store i32 %282, i32* %29, align 8
  store i32 8, i32* %255, align 8
  br label %283

283:                                              ; preds = %280, %277, %273, %259
  %284 = phi i32 [ 8, %280 ], [ 7, %277 ], [ 8, %273 ], [ %262, %259 ]
  %285 = phi i32 [ %282, %280 ], [ %279, %277 ], [ %274, %273 ], [ %261, %259 ]
  %286 = shl i32 %260, 1
  store i32 %286, i32* %26, align 4
  %287 = shl i32 %285, 1
  store i32 %287, i32* %29, align 8
  %288 = add i32 %284, -1
  store i32 %288, i32* %255, align 8
  %289 = icmp ult i32 %286, 32768
  br i1 %289, label %259, label %293

290:                                              ; preds = %236
  %291 = getelementptr inbounds %struct.opj_mqc_state, %struct.opj_mqc_state* %183, i64 0, i32 1
  %292 = load i32, i32* %291, align 4
  br label %293

293:                                              ; preds = %283, %229, %290
  %294 = phi i32 [ %292, %290 ], [ %197, %229 ], [ %251, %283 ]
  %295 = getelementptr inbounds [256 x i8], [256 x i8]* @lut_spb, i64 0, i64 %173
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i32
  %298 = xor i32 %294, %297
  %299 = icmp eq i32 %298, 0
  %300 = sub nsw i32 0, %3
  %301 = select i1 %299, i32 %3, i32 %300
  store i32 %301, i32* %2, align 4
  %302 = shl i32 32, %8
  %303 = load i32, i32* %149, align 4
  %304 = or i32 %303, %302
  store i32 %304, i32* %149, align 4
  %305 = shl i32 %298, 19
  %306 = or i32 %305, 16
  %307 = shl i32 %306, %8
  %308 = load i32, i32* %1, align 4
  %309 = or i32 %307, %308
  store i32 %309, i32* %1, align 4
  %310 = shl i32 8, %8
  %311 = load i32, i32* %151, align 4
  %312 = or i32 %311, %310
  store i32 %312, i32* %151, align 4
  %313 = or i32 %5, %4
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %332

315:                                              ; preds = %293
  %316 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %317 = load i32, i32* %316, align 8
  %318 = add i32 %317, 2
  %319 = zext i32 %318 to i64
  %320 = sub nsw i64 0, %319
  %321 = getelementptr inbounds i32, i32* %1, i64 %320
  %322 = shl i32 %298, 31
  %323 = load i32, i32* %321, align 4
  %324 = or i32 %322, %323
  %325 = or i32 %324, 65536
  store i32 %325, i32* %321, align 4
  %326 = getelementptr inbounds i32, i32* %321, i64 -1
  %327 = load i32, i32* %326, align 4
  %328 = or i32 %327, 131072
  store i32 %328, i32* %326, align 4
  %329 = getelementptr inbounds i32, i32* %321, i64 1
  %330 = load i32, i32* %329, align 4
  %331 = or i32 %330, 32768
  store i32 %331, i32* %329, align 4
  br label %332

332:                                              ; preds = %293, %315
  %333 = icmp eq i32 %4, 3
  br i1 %333, label %334, label %350

334:                                              ; preds = %332
  %335 = getelementptr inbounds %struct.opj_t1, %struct.opj_t1* %0, i64 0, i32 3
  %336 = load i32, i32* %335, align 8
  %337 = add i32 %336, 2
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds i32, i32* %1, i64 %338
  %340 = shl i32 %298, 18
  %341 = load i32, i32* %339, align 4
  %342 = or i32 %340, %341
  %343 = or i32 %342, 2
  store i32 %343, i32* %339, align 4
  %344 = getelementptr inbounds i32, i32* %339, i64 -1
  %345 = load i32, i32* %344, align 4
  %346 = or i32 %345, 4
  store i32 %346, i32* %344, align 4
  %347 = getelementptr inbounds i32, i32* %339, i64 1
  %348 = load i32, i32* %347, align 4
  %349 = or i32 %348, 1
  store i32 %349, i32* %347, align 4
  br label %350

350:                                              ; preds = %142, %332, %334, %6
  ret void
}

; Function Attrs: nounwind
declare i64 @lrintf(float) local_unnamed_addr #6

declare void @opj_mqc_init_enc(%struct.opj_mqc*, i8*) local_unnamed_addr #2

declare void @opj_mqc_bypass_init_enc(%struct.opj_mqc*) local_unnamed_addr #2

declare void @opj_mqc_restart_init_enc(%struct.opj_mqc*) local_unnamed_addr #2

declare void @opj_mqc_segmark_enc(%struct.opj_mqc*) local_unnamed_addr #2

declare void @opj_mqc_bypass_flush_enc(%struct.opj_mqc*, i32) local_unnamed_addr #2

declare void @opj_mqc_erterm_enc(%struct.opj_mqc*) local_unnamed_addr #2

declare void @opj_mqc_flush(%struct.opj_mqc*) local_unnamed_addr #2

declare i32 @opj_mqc_numbytes(%struct.opj_mqc*) local_unnamed_addr #2

declare i32 @opj_mqc_bypass_get_extra_bytes(%struct.opj_mqc*, i32) local_unnamed_addr #2

declare void @opj_mqc_reset_enc(%struct.opj_mqc*) local_unnamed_addr #2

declare void @opj_mqc_byteout(%struct.opj_mqc*) local_unnamed_addr #2

declare double @opj_dwt_getnorm(i32, i32) local_unnamed_addr #2

declare double @opj_dwt_getnorm_real(i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !5, !3}
!13 = distinct !{!13, !8}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !3}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = !{!35}
!35 = distinct !{!35, !31}
!36 = !{!37}
!37 = distinct !{!37, !31}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !5, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !8}
!46 = distinct !{!46, !5, !3}
!47 = distinct !{!47, !3}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !5, !3}
