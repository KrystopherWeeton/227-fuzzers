; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/intrapred_cfl_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/intrapred_cfl_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

$_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask = comdat any

@_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask = linkonce_odr hidden local_unnamed_addr constant [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", comdat, align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp23IntraPredCflInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #6
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 0, i64 2
  %3 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 1, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %3, align 8
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 2, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %4, align 8
  %5 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 3, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %5, align 8
  %6 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 4, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %6, align 8
  %7 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 5, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %7, align 8
  %8 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 6, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %8, align 8
  %9 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 7, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %9, align 8
  %10 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 8, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %10, align 8
  %11 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 9, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %11, align 8
  %12 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 10, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %12, align 8
  %13 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 12, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %13, align 8
  %14 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 13, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %14, align 8
  %15 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 14, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %15, align 8
  %16 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 0, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %16, align 8
  %17 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %2 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi3EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %17, align 8
  %18 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 2, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %18, align 8
  %19 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 3, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %19, align 8
  %20 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 4, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %20, align 8
  %21 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 5, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %21, align 8
  %22 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 6, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %22, align 8
  %23 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 7, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %23, align 8
  %24 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 8, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %24, align 8
  %25 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 9, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %25, align 8
  %26 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 10, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %26, align 8
  %27 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 12, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi5ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %27, align 8
  %28 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 13, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi5ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %28, align 8
  %29 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 14, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi5ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %29, align 8
  %30 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 0
  %31 = bitcast void (i8*, i64, [32 x i16]*, i32)** %30 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi4ELi4EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi4ELi8EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %31, align 8
  %32 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 2
  %33 = bitcast void (i8*, i64, [32 x i16]*, i32)** %32 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi4ELi16EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi4EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %33, align 8
  %34 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 4
  %35 = bitcast void (i8*, i64, [32 x i16]*, i32)** %34 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi8EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi16EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %35, align 8
  %36 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 6
  %37 = bitcast void (i8*, i64, [32 x i16]*, i32)** %36 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi32EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi4EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %37, align 8
  %38 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 8
  %39 = bitcast void (i8*, i64, [32 x i16]*, i32)** %38 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi8EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi16EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %39, align 8
  %40 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 10
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi32EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %40, align 8
  %41 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 12
  %42 = bitcast void (i8*, i64, [32 x i16]*, i32)** %41 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi32ELi8EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi32ELi16EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %42, align 8
  %43 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 14
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi32ELi32EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %43, align 8
  %44 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #6
  %45 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 0
  %46 = bitcast void (i8*, i64, [32 x i16]*, i32)** %45 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi4ELi4EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi4ELi8EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %46, align 8
  %47 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 2
  %48 = bitcast void (i8*, i64, [32 x i16]*, i32)** %47 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi4ELi16EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi4EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %48, align 8
  %49 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 4
  %50 = bitcast void (i8*, i64, [32 x i16]*, i32)** %49 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi8EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi16EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %50, align 8
  %51 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 6
  %52 = bitcast void (i8*, i64, [32 x i16]*, i32)** %51 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi32EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi4EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %52, align 8
  %53 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 8
  %54 = bitcast void (i8*, i64, [32 x i16]*, i32)** %53 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi8EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi16EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %54, align 8
  %55 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 10
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi32EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %55, align 8
  %56 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 12
  %57 = bitcast void (i8*, i64, [32 x i16]*, i32)** %56 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi32ELi8EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi32ELi16EEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %57, align 8
  %58 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 3, i64 14
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi32ELi32EEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %58, align 8
  %59 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 0, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %59, align 8
  %60 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 1, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %60, align 8
  %61 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 2, i64 2
  %62 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 3, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %62, align 8
  %63 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 4, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %63, align 8
  %64 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 5, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %64, align 8
  %65 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 6, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %65, align 8
  %66 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 7, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %66, align 8
  %67 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 8, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %67, align 8
  %68 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 9, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %68, align 8
  %69 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 10, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %69, align 8
  %70 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 12, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %70, align 8
  %71 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 13, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %71, align 8
  %72 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 14, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %72, align 8
  %73 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 0, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %73, align 8
  %74 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 1, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %74, align 8
  %75 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 2, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %75, align 8
  %76 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %61 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi2EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %76, align 8
  %77 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 4, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %77, align 8
  %78 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 5, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %78, align 8
  %79 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 6, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %79, align 8
  %80 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 7, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi2EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %80, align 8
  %81 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 8, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %81, align 8
  %82 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 9, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %82, align 8
  %83 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 10, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %83, align 8
  %84 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 12, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi5ELi3EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %84, align 8
  %85 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 13, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi5ELi4EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %85, align 8
  %86 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %44, i64 0, i32 4, i64 14, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi5ELi5EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %86, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = insertelement <2 x i64> undef, i64 %7, i32 0
  %9 = bitcast <2 x i64> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11 = zext <8 x i8> %10 to <8 x i16>
  %12 = getelementptr inbounds i8, i8* %3, i64 %4
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %18 = zext <8 x i8> %17 to <8 x i16>
  %19 = getelementptr inbounds i8, i8* %12, i64 %4
  %20 = add nuw nsw <8 x i16> %18, %11
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %26 = zext <8 x i8> %25 to <8 x i16>
  %27 = getelementptr inbounds i8, i8* %19, i64 %4
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %33 = zext <8 x i8> %32 to <8 x i16>
  %34 = getelementptr inbounds i8, i8* %27, i64 %4
  %35 = add nuw nsw <8 x i16> %33, %26
  %36 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %20, <8 x i16> %35) #6
  %37 = shl <8 x i16> %36, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %38 = bitcast <8 x i16> %37 to <2 x i64>
  %39 = extractelement <2 x i64> %38, i32 0
  %40 = bitcast [32 x i16]* %0 to i64*
  store i64 %39, i64* %40, align 1
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %42 = bitcast <8 x i16> %37 to <4 x float>
  %43 = bitcast <8 x i16> %37 to <2 x i64>
  %44 = shufflevector <4 x float> %42, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast i16* %41 to <2 x float>*
  store <2 x float> %44, <2 x float>* %45, align 1
  %46 = bitcast i8* %34 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = bitcast <2 x i64> %48 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = getelementptr inbounds i8, i8* %34, i64 %4
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = bitcast <2 x i64> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %58 = zext <8 x i8> %57 to <8 x i16>
  %59 = getelementptr inbounds i8, i8* %52, i64 %4
  %60 = add nuw nsw <8 x i16> %58, %51
  %61 = bitcast i8* %59 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %66 = zext <8 x i8> %65 to <8 x i16>
  %67 = getelementptr inbounds i8, i8* %59, i64 %4
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = bitcast <2 x i64> %70 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %73 = zext <8 x i8> %72 to <8 x i16>
  %74 = add nuw nsw <8 x i16> %73, %66
  %75 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %60, <8 x i16> %74) #6
  %76 = shl <8 x i16> %75, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %77 = bitcast <8 x i16> %76 to <2 x i64>
  %78 = add <8 x i16> %76, %37
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %80 = zext <4 x i16> %79 to <4 x i32>
  %81 = shufflevector <8 x i16> %78, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %82 = bitcast <8 x i16> %81 to <4 x i32>
  %83 = add <4 x i32> %80, %82
  %84 = bitcast <4 x i32> %83 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %86 = bitcast <16 x i8> %85 to <4 x i32>
  %87 = add <4 x i32> %83, %86
  %88 = bitcast <4 x i32> %87 to <16 x i8>
  %89 = shufflevector <16 x i8> %88, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %90 = bitcast <16 x i8> %89 to <4 x i32>
  %91 = add <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %92 = add <4 x i32> %91, %90
  %93 = lshr <4 x i32> %92, <i32 4, i32 4, i32 4, i32 4>
  %94 = bitcast <4 x i32> %93 to <8 x i16>
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = sub <8 x i16> %37, %95
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = extractelement <2 x i64> %97, i32 0
  store i64 %98, i64* %40, align 1
  %99 = bitcast i16* %41 to i64*
  %100 = shufflevector <2 x i64> %43, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %101 = bitcast <2 x i64> %100 to <8 x i16>
  %102 = sub <8 x i16> %101, %95
  %103 = bitcast <8 x i16> %102 to <2 x i64>
  %104 = extractelement <2 x i64> %103, i32 0
  store i64 %104, i64* %99, align 1
  %105 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %106 = bitcast i16* %105 to i64*
  %107 = sub <8 x i16> %76, %95
  %108 = bitcast <8 x i16> %107 to <2 x i64>
  %109 = extractelement <2 x i64> %108, i32 0
  store i64 %109, i64* %106, align 1
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %111 = bitcast i16* %110 to i64*
  %112 = shufflevector <2 x i64> %77, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %113 = bitcast <2 x i64> %112 to <8 x i16>
  %114 = sub <8 x i16> %113, %95
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = extractelement <2 x i64> %115, i32 0
  store i64 %116, i64* %111, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 8
  %9 = select i1 %8, i32 %7, i32 8
  br label %10

10:                                               ; preds = %10, %5
  %11 = phi i32 [ 0, %5 ], [ %102, %10 ]
  %12 = phi <4 x i32> [ zeroinitializer, %5 ], [ %101, %10 ]
  %13 = phi i16* [ %6, %5 ], [ %95, %10 ]
  %14 = phi i8* [ %3, %5 ], [ %83, %10 ]
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = shufflevector <16 x i8> %18, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = zext <8 x i8> %19 to <8 x i16>
  %21 = getelementptr inbounds i8, i8* %14, i64 %4
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> undef, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = getelementptr inbounds i8, i8* %21, i64 %4
  %29 = add nuw nsw <8 x i16> %27, %20
  %30 = bitcast i8* %28 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = getelementptr inbounds i8, i8* %28, i64 %4
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = zext <8 x i8> %41 to <8 x i16>
  %43 = getelementptr inbounds i8, i8* %36, i64 %4
  %44 = add nuw nsw <8 x i16> %42, %35
  %45 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %29, <8 x i16> %44) #6
  %46 = shl <8 x i16> %45, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = extractelement <2 x i64> %47, i32 0
  %49 = bitcast i16* %13 to i64*
  store i64 %48, i64* %49, align 1
  %50 = getelementptr inbounds i16, i16* %13, i64 32
  %51 = bitcast <8 x i16> %46 to <4 x float>
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast i16* %50 to <2 x float>*
  store <2 x float> %52, <2 x float>* %53, align 1
  %54 = getelementptr inbounds i16, i16* %13, i64 64
  %55 = bitcast i8* %43 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = insertelement <2 x i64> undef, i64 %56, i32 0
  %58 = bitcast <2 x i64> %57 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %60 = zext <8 x i8> %59 to <8 x i16>
  %61 = getelementptr inbounds i8, i8* %43, i64 %4
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = insertelement <2 x i64> undef, i64 %63, i32 0
  %65 = bitcast <2 x i64> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %67 = zext <8 x i8> %66 to <8 x i16>
  %68 = getelementptr inbounds i8, i8* %61, i64 %4
  %69 = add nuw nsw <8 x i16> %67, %60
  %70 = bitcast i8* %68 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %75 = zext <8 x i8> %74 to <8 x i16>
  %76 = getelementptr inbounds i8, i8* %68, i64 %4
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = bitcast <2 x i64> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %82 = zext <8 x i8> %81 to <8 x i16>
  %83 = getelementptr inbounds i8, i8* %76, i64 %4
  %84 = add nuw nsw <8 x i16> %82, %75
  %85 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %69, <8 x i16> %84) #6
  %86 = shl <8 x i16> %85, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %87 = bitcast <8 x i16> %86 to <2 x i64>
  %88 = extractelement <2 x i64> %87, i32 0
  %89 = bitcast i16* %54 to i64*
  store i64 %88, i64* %89, align 1
  %90 = getelementptr inbounds i16, i16* %13, i64 96
  %91 = bitcast <8 x i16> %86 to <4 x float>
  %92 = shufflevector <4 x float> %91, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %93 = bitcast i16* %90 to <2 x float>*
  store <2 x float> %92, <2 x float>* %93, align 1
  %94 = add <8 x i16> %86, %46
  %95 = getelementptr inbounds i16, i16* %13, i64 128
  %96 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %97 = zext <4 x i16> %96 to <4 x i32>
  %98 = add <4 x i32> %12, %97
  %99 = shufflevector <8 x i16> %94, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = bitcast <8 x i16> %99 to <4 x i32>
  %101 = add <4 x i32> %98, %100
  %102 = add nuw nsw i32 %11, 4
  %103 = icmp slt i32 %102, %9
  br i1 %103, label %10, label %104

104:                                              ; preds = %10
  %105 = bitcast <8 x i16> %86 to <2 x i64>
  %106 = extractelement <2 x i64> %105, i32 1
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %108 = bitcast <2 x i64> %107 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %110 = zext <4 x i16> %109 to <4 x i32>
  %111 = icmp ult i32 %102, 8
  br i1 %111, label %112, label %158

112:                                              ; preds = %104
  %113 = sub nsw i32 4, %11
  %114 = sub nsw i32 3, %11
  %115 = and i32 %113, 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %126, label %117

117:                                              ; preds = %112, %117
  %118 = phi i16* [ %122, %117 ], [ %95, %112 ]
  %119 = phi <4 x i32> [ %123, %117 ], [ %101, %112 ]
  %120 = phi i32 [ %124, %117 ], [ %115, %112 ]
  %121 = bitcast i16* %118 to i64*
  store i64 %106, i64* %121, align 1
  %122 = getelementptr inbounds i16, i16* %118, i64 32
  %123 = add <4 x i32> %119, %110
  %124 = add i32 %120, -1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %117, !llvm.loop !2

126:                                              ; preds = %117, %112
  %127 = phi <4 x i32> [ undef, %112 ], [ %123, %117 ]
  %128 = phi i16* [ %95, %112 ], [ %122, %117 ]
  %129 = phi <4 x i32> [ %101, %112 ], [ %123, %117 ]
  %130 = icmp ult i32 %114, 7
  br i1 %130, label %158, label %131

131:                                              ; preds = %126, %131
  %132 = phi i16* [ %156, %131 ], [ %128, %126 ]
  %133 = phi <4 x i32> [ %157, %131 ], [ %129, %126 ]
  %134 = bitcast i16* %132 to i64*
  store i64 %106, i64* %134, align 1
  %135 = getelementptr inbounds i16, i16* %132, i64 32
  %136 = add <4 x i32> %133, %110
  %137 = bitcast i16* %135 to i64*
  store i64 %106, i64* %137, align 1
  %138 = getelementptr inbounds i16, i16* %132, i64 64
  %139 = add <4 x i32> %136, %110
  %140 = bitcast i16* %138 to i64*
  store i64 %106, i64* %140, align 1
  %141 = getelementptr inbounds i16, i16* %132, i64 96
  %142 = add <4 x i32> %139, %110
  %143 = bitcast i16* %141 to i64*
  store i64 %106, i64* %143, align 1
  %144 = getelementptr inbounds i16, i16* %132, i64 128
  %145 = add <4 x i32> %142, %110
  %146 = bitcast i16* %144 to i64*
  store i64 %106, i64* %146, align 1
  %147 = getelementptr inbounds i16, i16* %132, i64 160
  %148 = add <4 x i32> %145, %110
  %149 = bitcast i16* %147 to i64*
  store i64 %106, i64* %149, align 1
  %150 = getelementptr inbounds i16, i16* %132, i64 192
  %151 = add <4 x i32> %148, %110
  %152 = bitcast i16* %150 to i64*
  store i64 %106, i64* %152, align 1
  %153 = getelementptr inbounds i16, i16* %132, i64 224
  %154 = add <4 x i32> %151, %110
  %155 = bitcast i16* %153 to i64*
  store i64 %106, i64* %155, align 1
  %156 = getelementptr inbounds i16, i16* %132, i64 256
  %157 = add <4 x i32> %154, %110
  br label %131

158:                                              ; preds = %126, %104
  %159 = phi <4 x i32> [ %101, %104 ], [ %127, %126 ]
  %160 = bitcast <4 x i32> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = add <4 x i32> %159, %162
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %163, <i32 16, i32 16, i32 16, i32 16>
  %168 = add <4 x i32> %167, %166
  %169 = lshr <4 x i32> %168, <i32 5, i32 5, i32 5, i32 5>
  %170 = bitcast <4 x i32> %169 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = bitcast [32 x i16]* %0 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = insertelement <2 x i64> undef, i64 %173, i32 0
  %175 = bitcast <2 x i64> %174 to <8 x i16>
  %176 = sub <8 x i16> %175, %171
  %177 = bitcast <8 x i16> %176 to <2 x i64>
  %178 = extractelement <2 x i64> %177, i32 0
  store i64 %178, i64* %172, align 1
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %180 = bitcast i16* %179 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = insertelement <2 x i64> undef, i64 %181, i32 0
  %183 = bitcast <2 x i64> %182 to <8 x i16>
  %184 = sub <8 x i16> %183, %171
  %185 = bitcast <8 x i16> %184 to <2 x i64>
  %186 = extractelement <2 x i64> %185, i32 0
  store i64 %186, i64* %180, align 1
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %188 = bitcast i16* %187 to i64*
  %189 = load i64, i64* %188, align 1
  %190 = insertelement <2 x i64> undef, i64 %189, i32 0
  %191 = bitcast <2 x i64> %190 to <8 x i16>
  %192 = sub <8 x i16> %191, %171
  %193 = bitcast <8 x i16> %192 to <2 x i64>
  %194 = extractelement <2 x i64> %193, i32 0
  store i64 %194, i64* %188, align 1
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %196 = bitcast i16* %195 to i64*
  %197 = load i64, i64* %196, align 1
  %198 = insertelement <2 x i64> undef, i64 %197, i32 0
  %199 = bitcast <2 x i64> %198 to <8 x i16>
  %200 = sub <8 x i16> %199, %171
  %201 = bitcast <8 x i16> %200 to <2 x i64>
  %202 = extractelement <2 x i64> %201, i32 0
  store i64 %202, i64* %196, align 1
  %203 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %204 = bitcast i16* %203 to i64*
  %205 = load i64, i64* %204, align 1
  %206 = insertelement <2 x i64> undef, i64 %205, i32 0
  %207 = bitcast <2 x i64> %206 to <8 x i16>
  %208 = sub <8 x i16> %207, %171
  %209 = bitcast <8 x i16> %208 to <2 x i64>
  %210 = extractelement <2 x i64> %209, i32 0
  store i64 %210, i64* %204, align 1
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %212 = bitcast i16* %211 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = insertelement <2 x i64> undef, i64 %213, i32 0
  %215 = bitcast <2 x i64> %214 to <8 x i16>
  %216 = sub <8 x i16> %215, %171
  %217 = bitcast <8 x i16> %216 to <2 x i64>
  %218 = extractelement <2 x i64> %217, i32 0
  store i64 %218, i64* %212, align 1
  %219 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %220 = bitcast i16* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> undef, i64 %221, i32 0
  %223 = bitcast <2 x i64> %222 to <8 x i16>
  %224 = sub <8 x i16> %223, %171
  %225 = bitcast <8 x i16> %224 to <2 x i64>
  %226 = extractelement <2 x i64> %225, i32 0
  store i64 %226, i64* %220, align 1
  %227 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %228 = bitcast i16* %227 to i64*
  %229 = load i64, i64* %228, align 1
  %230 = insertelement <2 x i64> undef, i64 %229, i32 0
  %231 = bitcast <2 x i64> %230 to <8 x i16>
  %232 = sub <8 x i16> %231, %171
  %233 = bitcast <8 x i16> %232 to <2 x i64>
  %234 = extractelement <2 x i64> %233, i32 0
  store i64 %234, i64* %228, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 16
  %9 = select i1 %8, i32 %7, i32 16
  br label %10

10:                                               ; preds = %10, %5
  %11 = phi i32 [ 0, %5 ], [ %102, %10 ]
  %12 = phi <4 x i32> [ zeroinitializer, %5 ], [ %101, %10 ]
  %13 = phi i16* [ %6, %5 ], [ %95, %10 ]
  %14 = phi i8* [ %3, %5 ], [ %83, %10 ]
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = shufflevector <16 x i8> %18, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = zext <8 x i8> %19 to <8 x i16>
  %21 = getelementptr inbounds i8, i8* %14, i64 %4
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> undef, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = getelementptr inbounds i8, i8* %21, i64 %4
  %29 = add nuw nsw <8 x i16> %27, %20
  %30 = bitcast i8* %28 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = getelementptr inbounds i8, i8* %28, i64 %4
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = zext <8 x i8> %41 to <8 x i16>
  %43 = getelementptr inbounds i8, i8* %36, i64 %4
  %44 = add nuw nsw <8 x i16> %42, %35
  %45 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %29, <8 x i16> %44) #6
  %46 = shl <8 x i16> %45, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = extractelement <2 x i64> %47, i32 0
  %49 = bitcast i16* %13 to i64*
  store i64 %48, i64* %49, align 1
  %50 = getelementptr inbounds i16, i16* %13, i64 32
  %51 = bitcast <8 x i16> %46 to <4 x float>
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast i16* %50 to <2 x float>*
  store <2 x float> %52, <2 x float>* %53, align 1
  %54 = getelementptr inbounds i16, i16* %13, i64 64
  %55 = bitcast i8* %43 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = insertelement <2 x i64> undef, i64 %56, i32 0
  %58 = bitcast <2 x i64> %57 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %60 = zext <8 x i8> %59 to <8 x i16>
  %61 = getelementptr inbounds i8, i8* %43, i64 %4
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = insertelement <2 x i64> undef, i64 %63, i32 0
  %65 = bitcast <2 x i64> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %67 = zext <8 x i8> %66 to <8 x i16>
  %68 = getelementptr inbounds i8, i8* %61, i64 %4
  %69 = add nuw nsw <8 x i16> %67, %60
  %70 = bitcast i8* %68 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %75 = zext <8 x i8> %74 to <8 x i16>
  %76 = getelementptr inbounds i8, i8* %68, i64 %4
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = bitcast <2 x i64> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %82 = zext <8 x i8> %81 to <8 x i16>
  %83 = getelementptr inbounds i8, i8* %76, i64 %4
  %84 = add nuw nsw <8 x i16> %82, %75
  %85 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %69, <8 x i16> %84) #6
  %86 = shl <8 x i16> %85, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %87 = bitcast <8 x i16> %86 to <2 x i64>
  %88 = extractelement <2 x i64> %87, i32 0
  %89 = bitcast i16* %54 to i64*
  store i64 %88, i64* %89, align 1
  %90 = getelementptr inbounds i16, i16* %13, i64 96
  %91 = bitcast <8 x i16> %86 to <4 x float>
  %92 = shufflevector <4 x float> %91, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %93 = bitcast i16* %90 to <2 x float>*
  store <2 x float> %92, <2 x float>* %93, align 1
  %94 = add <8 x i16> %86, %46
  %95 = getelementptr inbounds i16, i16* %13, i64 128
  %96 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %97 = zext <4 x i16> %96 to <4 x i32>
  %98 = add <4 x i32> %12, %97
  %99 = shufflevector <8 x i16> %94, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = bitcast <8 x i16> %99 to <4 x i32>
  %101 = add <4 x i32> %98, %100
  %102 = add nuw nsw i32 %11, 4
  %103 = icmp slt i32 %102, %9
  br i1 %103, label %10, label %104

104:                                              ; preds = %10
  %105 = bitcast <8 x i16> %86 to <2 x i64>
  %106 = extractelement <2 x i64> %105, i32 1
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %108 = bitcast <2 x i64> %107 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %110 = zext <4 x i16> %109 to <4 x i32>
  %111 = icmp ult i32 %102, 16
  br i1 %111, label %112, label %164

112:                                              ; preds = %104
  %113 = sub nsw i32 4, %11
  %114 = sub nsw i32 11, %11
  %115 = and i32 %113, 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %128, label %117

117:                                              ; preds = %112, %117
  %118 = phi i16* [ %123, %117 ], [ %95, %112 ]
  %119 = phi <4 x i32> [ %124, %117 ], [ %101, %112 ]
  %120 = phi i32 [ %125, %117 ], [ %102, %112 ]
  %121 = phi i32 [ %126, %117 ], [ %115, %112 ]
  %122 = bitcast i16* %118 to i64*
  store i64 %106, i64* %122, align 1
  %123 = getelementptr inbounds i16, i16* %118, i64 32
  %124 = add <4 x i32> %119, %110
  %125 = add nuw nsw i32 %120, 1
  %126 = add i32 %121, -1
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %117, !llvm.loop !4

128:                                              ; preds = %117, %112
  %129 = phi <4 x i32> [ undef, %112 ], [ %124, %117 ]
  %130 = phi i16* [ %95, %112 ], [ %123, %117 ]
  %131 = phi <4 x i32> [ %101, %112 ], [ %124, %117 ]
  %132 = phi i32 [ %102, %112 ], [ %125, %117 ]
  %133 = icmp ult i32 %114, 7
  br i1 %133, label %164, label %134

134:                                              ; preds = %128, %134
  %135 = phi i16* [ %160, %134 ], [ %130, %128 ]
  %136 = phi <4 x i32> [ %161, %134 ], [ %131, %128 ]
  %137 = phi i32 [ %162, %134 ], [ %132, %128 ]
  %138 = bitcast i16* %135 to i64*
  store i64 %106, i64* %138, align 1
  %139 = getelementptr inbounds i16, i16* %135, i64 32
  %140 = add <4 x i32> %136, %110
  %141 = bitcast i16* %139 to i64*
  store i64 %106, i64* %141, align 1
  %142 = getelementptr inbounds i16, i16* %135, i64 64
  %143 = add <4 x i32> %140, %110
  %144 = bitcast i16* %142 to i64*
  store i64 %106, i64* %144, align 1
  %145 = getelementptr inbounds i16, i16* %135, i64 96
  %146 = add <4 x i32> %143, %110
  %147 = bitcast i16* %145 to i64*
  store i64 %106, i64* %147, align 1
  %148 = getelementptr inbounds i16, i16* %135, i64 128
  %149 = add <4 x i32> %146, %110
  %150 = bitcast i16* %148 to i64*
  store i64 %106, i64* %150, align 1
  %151 = getelementptr inbounds i16, i16* %135, i64 160
  %152 = add <4 x i32> %149, %110
  %153 = bitcast i16* %151 to i64*
  store i64 %106, i64* %153, align 1
  %154 = getelementptr inbounds i16, i16* %135, i64 192
  %155 = add <4 x i32> %152, %110
  %156 = bitcast i16* %154 to i64*
  store i64 %106, i64* %156, align 1
  %157 = getelementptr inbounds i16, i16* %135, i64 224
  %158 = add <4 x i32> %155, %110
  %159 = bitcast i16* %157 to i64*
  store i64 %106, i64* %159, align 1
  %160 = getelementptr inbounds i16, i16* %135, i64 256
  %161 = add <4 x i32> %158, %110
  %162 = add nuw nsw i32 %137, 8
  %163 = icmp eq i32 %162, 16
  br i1 %163, label %164, label %134

164:                                              ; preds = %128, %134, %104
  %165 = phi <4 x i32> [ %101, %104 ], [ %129, %128 ], [ %161, %134 ]
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = add <4 x i32> %165, %168
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = add <4 x i32> %169, <i32 32, i32 32, i32 32, i32 32>
  %174 = add <4 x i32> %173, %172
  %175 = lshr <4 x i32> %174, <i32 6, i32 6, i32 6, i32 6>
  %176 = bitcast <4 x i32> %175 to <8 x i16>
  %177 = shufflevector <8 x i16> %176, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %178 = bitcast [32 x i16]* %0 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = bitcast <2 x i64> %180 to <8 x i16>
  %182 = sub <8 x i16> %181, %177
  %183 = bitcast <8 x i16> %182 to <2 x i64>
  %184 = extractelement <2 x i64> %183, i32 0
  store i64 %184, i64* %178, align 1
  %185 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %186 = bitcast i16* %185 to i64*
  %187 = load i64, i64* %186, align 1
  %188 = insertelement <2 x i64> undef, i64 %187, i32 0
  %189 = bitcast <2 x i64> %188 to <8 x i16>
  %190 = sub <8 x i16> %189, %177
  %191 = bitcast <8 x i16> %190 to <2 x i64>
  %192 = extractelement <2 x i64> %191, i32 0
  store i64 %192, i64* %186, align 1
  %193 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %194 = bitcast i16* %193 to i64*
  %195 = load i64, i64* %194, align 1
  %196 = insertelement <2 x i64> undef, i64 %195, i32 0
  %197 = bitcast <2 x i64> %196 to <8 x i16>
  %198 = sub <8 x i16> %197, %177
  %199 = bitcast <8 x i16> %198 to <2 x i64>
  %200 = extractelement <2 x i64> %199, i32 0
  store i64 %200, i64* %194, align 1
  %201 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %202 = bitcast i16* %201 to i64*
  %203 = load i64, i64* %202, align 1
  %204 = insertelement <2 x i64> undef, i64 %203, i32 0
  %205 = bitcast <2 x i64> %204 to <8 x i16>
  %206 = sub <8 x i16> %205, %177
  %207 = bitcast <8 x i16> %206 to <2 x i64>
  %208 = extractelement <2 x i64> %207, i32 0
  store i64 %208, i64* %202, align 1
  %209 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %210 = bitcast i16* %209 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = insertelement <2 x i64> undef, i64 %211, i32 0
  %213 = bitcast <2 x i64> %212 to <8 x i16>
  %214 = sub <8 x i16> %213, %177
  %215 = bitcast <8 x i16> %214 to <2 x i64>
  %216 = extractelement <2 x i64> %215, i32 0
  store i64 %216, i64* %210, align 1
  %217 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %218 = bitcast i16* %217 to i64*
  %219 = load i64, i64* %218, align 1
  %220 = insertelement <2 x i64> undef, i64 %219, i32 0
  %221 = bitcast <2 x i64> %220 to <8 x i16>
  %222 = sub <8 x i16> %221, %177
  %223 = bitcast <8 x i16> %222 to <2 x i64>
  %224 = extractelement <2 x i64> %223, i32 0
  store i64 %224, i64* %218, align 1
  %225 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %226 = bitcast i16* %225 to i64*
  %227 = load i64, i64* %226, align 1
  %228 = insertelement <2 x i64> undef, i64 %227, i32 0
  %229 = bitcast <2 x i64> %228 to <8 x i16>
  %230 = sub <8 x i16> %229, %177
  %231 = bitcast <8 x i16> %230 to <2 x i64>
  %232 = extractelement <2 x i64> %231, i32 0
  store i64 %232, i64* %226, align 1
  %233 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %234 = bitcast i16* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = insertelement <2 x i64> undef, i64 %235, i32 0
  %237 = bitcast <2 x i64> %236 to <8 x i16>
  %238 = sub <8 x i16> %237, %177
  %239 = bitcast <8 x i16> %238 to <2 x i64>
  %240 = extractelement <2 x i64> %239, i32 0
  store i64 %240, i64* %234, align 1
  %241 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %242 = bitcast i16* %241 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = insertelement <2 x i64> undef, i64 %243, i32 0
  %245 = bitcast <2 x i64> %244 to <8 x i16>
  %246 = sub <8 x i16> %245, %177
  %247 = bitcast <8 x i16> %246 to <2 x i64>
  %248 = extractelement <2 x i64> %247, i32 0
  store i64 %248, i64* %242, align 1
  %249 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %250 = bitcast i16* %249 to i64*
  %251 = load i64, i64* %250, align 1
  %252 = insertelement <2 x i64> undef, i64 %251, i32 0
  %253 = bitcast <2 x i64> %252 to <8 x i16>
  %254 = sub <8 x i16> %253, %177
  %255 = bitcast <8 x i16> %254 to <2 x i64>
  %256 = extractelement <2 x i64> %255, i32 0
  store i64 %256, i64* %250, align 1
  %257 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %258 = bitcast i16* %257 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = insertelement <2 x i64> undef, i64 %259, i32 0
  %261 = bitcast <2 x i64> %260 to <8 x i16>
  %262 = sub <8 x i16> %261, %177
  %263 = bitcast <8 x i16> %262 to <2 x i64>
  %264 = extractelement <2 x i64> %263, i32 0
  store i64 %264, i64* %258, align 1
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %266 = bitcast i16* %265 to i64*
  %267 = load i64, i64* %266, align 1
  %268 = insertelement <2 x i64> undef, i64 %267, i32 0
  %269 = bitcast <2 x i64> %268 to <8 x i16>
  %270 = sub <8 x i16> %269, %177
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = extractelement <2 x i64> %271, i32 0
  store i64 %272, i64* %266, align 1
  %273 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %274 = bitcast i16* %273 to i64*
  %275 = load i64, i64* %274, align 1
  %276 = insertelement <2 x i64> undef, i64 %275, i32 0
  %277 = bitcast <2 x i64> %276 to <8 x i16>
  %278 = sub <8 x i16> %277, %177
  %279 = bitcast <8 x i16> %278 to <2 x i64>
  %280 = extractelement <2 x i64> %279, i32 0
  store i64 %280, i64* %274, align 1
  %281 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %282 = bitcast i16* %281 to i64*
  %283 = load i64, i64* %282, align 1
  %284 = insertelement <2 x i64> undef, i64 %283, i32 0
  %285 = bitcast <2 x i64> %284 to <8 x i16>
  %286 = sub <8 x i16> %285, %177
  %287 = bitcast <8 x i16> %286 to <2 x i64>
  %288 = extractelement <2 x i64> %287, i32 0
  store i64 %288, i64* %282, align 1
  %289 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %290 = bitcast i16* %289 to i64*
  %291 = load i64, i64* %290, align 1
  %292 = insertelement <2 x i64> undef, i64 %291, i32 0
  %293 = bitcast <2 x i64> %292 to <8 x i16>
  %294 = sub <8 x i16> %293, %177
  %295 = bitcast <8 x i16> %294 to <2 x i64>
  %296 = extractelement <2 x i64> %295, i32 0
  store i64 %296, i64* %290, align 1
  %297 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %298 = bitcast i16* %297 to i64*
  %299 = load i64, i64* %298, align 1
  %300 = insertelement <2 x i64> undef, i64 %299, i32 0
  %301 = bitcast <2 x i64> %300 to <8 x i16>
  %302 = sub <8 x i16> %301, %177
  %303 = bitcast <8 x i16> %302 to <2 x i64>
  %304 = extractelement <2 x i64> %303, i32 0
  store i64 %304, i64* %298, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12 = zext <8 x i8> %11 to <8 x i16>
  br i1 %6, label %13, label %135

13:                                               ; preds = %5
  %14 = bitcast <8 x i16> %12 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %16 = getelementptr inbounds i8, i8* %3, i64 %4
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = zext <8 x i8> %21 to <8 x i16>
  %23 = bitcast <8 x i16> %22 to <4 x i32>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %25 = getelementptr inbounds i8, i8* %16, i64 %4
  %26 = add nuw nsw <8 x i16> %22, %12
  %27 = bitcast <4 x i32> %15 to <8 x i16>
  %28 = bitcast <4 x i32> %24 to <8 x i16>
  %29 = add <8 x i16> %28, %27
  %30 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %26, <8 x i16> %29) #6
  %31 = shl <8 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %32 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 1
  %33 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %34 = bitcast i8* %25 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %39 = zext <8 x i8> %38 to <8 x i16>
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %42 = getelementptr inbounds i8, i8* %25, i64 %4
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %48 = zext <8 x i8> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %51 = getelementptr inbounds i8, i8* %42, i64 %4
  %52 = add nuw nsw <8 x i16> %48, %39
  %53 = bitcast <4 x i32> %41 to <8 x i16>
  %54 = bitcast <4 x i32> %50 to <8 x i16>
  %55 = add <8 x i16> %54, %53
  %56 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %52, <8 x i16> %55) #6
  %57 = shl <8 x i16> %56, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %58 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %58, align 1
  %59 = add <8 x i16> %57, %31
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %61 = bitcast i8* %51 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %66 = zext <8 x i8> %65 to <8 x i16>
  %67 = bitcast <8 x i16> %66 to <4 x i32>
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %69 = getelementptr inbounds i8, i8* %51, i64 %4
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %75 = zext <8 x i8> %74 to <8 x i16>
  %76 = bitcast <8 x i16> %75 to <4 x i32>
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %78 = getelementptr inbounds i8, i8* %69, i64 %4
  %79 = add nuw nsw <8 x i16> %75, %66
  %80 = bitcast <4 x i32> %68 to <8 x i16>
  %81 = bitcast <4 x i32> %77 to <8 x i16>
  %82 = add <8 x i16> %81, %80
  %83 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %79, <8 x i16> %82) #6
  %84 = shl <8 x i16> %83, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %85 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 1
  %86 = add <8 x i16> %59, %84
  %87 = bitcast i8* %78 to i64*
  %88 = load i64, i64* %87, align 1
  %89 = insertelement <2 x i64> undef, i64 %88, i32 0
  %90 = bitcast <2 x i64> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %92 = zext <8 x i8> %91 to <8 x i16>
  %93 = bitcast <8 x i16> %92 to <4 x i32>
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %95 = getelementptr inbounds i8, i8* %78, i64 %4
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %101 = zext <8 x i8> %100 to <8 x i16>
  %102 = bitcast <8 x i16> %101 to <4 x i32>
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %104 = add nuw nsw <8 x i16> %101, %92
  %105 = bitcast <4 x i32> %94 to <8 x i16>
  %106 = bitcast <4 x i32> %103 to <8 x i16>
  %107 = add <8 x i16> %106, %105
  %108 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %104, <8 x i16> %107) #6
  %109 = shl <8 x i16> %108, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %110 = add <8 x i16> %86, %109
  %111 = shufflevector <8 x i16> %110, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %112 = zext <4 x i16> %111 to <4 x i32>
  %113 = shufflevector <8 x i16> %110, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = bitcast <8 x i16> %113 to <4 x i32>
  %115 = add <4 x i32> %112, %114
  %116 = bitcast <4 x i32> %115 to <16 x i8>
  %117 = shufflevector <16 x i8> %116, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %118 = bitcast <16 x i8> %117 to <4 x i32>
  %119 = add <4 x i32> %115, %118
  %120 = bitcast <4 x i32> %119 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %122 = bitcast <16 x i8> %121 to <4 x i32>
  %123 = add <4 x i32> %119, <i32 16, i32 16, i32 16, i32 16>
  %124 = add <4 x i32> %123, %122
  %125 = ashr <4 x i32> %124, <i32 5, i32 5, i32 5, i32 5>
  %126 = bitcast <4 x i32> %125 to <8 x i16>
  %127 = shufflevector <8 x i16> %126, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = bitcast <8 x i16> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = bitcast <4 x i32> %129 to <8 x i16>
  %131 = sub <8 x i16> %31, %130
  store <8 x i16> %131, <8 x i16>* %32, align 1
  %132 = sub <8 x i16> %57, %130
  store <8 x i16> %132, <8 x i16>* %58, align 1
  %133 = sub <8 x i16> %84, %130
  store <8 x i16> %133, <8 x i16>* %85, align 1
  %134 = sub <8 x i16> %109, %130
  br label %289

135:                                              ; preds = %5
  %136 = getelementptr inbounds i8, i8* %3, i64 8
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 1
  %139 = insertelement <2 x i64> undef, i64 %138, i32 0
  %140 = bitcast <2 x i64> %139 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %142 = zext <8 x i8> %141 to <8 x i16>
  %143 = getelementptr inbounds i8, i8* %3, i64 %4
  %144 = bitcast i8* %143 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = insertelement <2 x i64> undef, i64 %145, i32 0
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %149 = zext <8 x i8> %148 to <8 x i16>
  %150 = getelementptr inbounds i8, i8* %143, i64 8
  %151 = bitcast i8* %150 to i64*
  %152 = load i64, i64* %151, align 1
  %153 = insertelement <2 x i64> undef, i64 %152, i32 0
  %154 = bitcast <2 x i64> %153 to <16 x i8>
  %155 = shufflevector <16 x i8> %154, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %156 = zext <8 x i8> %155 to <8 x i16>
  %157 = getelementptr inbounds i8, i8* %143, i64 %4
  %158 = add nuw nsw <8 x i16> %149, %12
  %159 = add nuw nsw <8 x i16> %156, %142
  %160 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %158, <8 x i16> %159) #6
  %161 = shl <8 x i16> %160, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %162 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %164 = bitcast i8* %157 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <2 x i64> undef, i64 %165, i32 0
  %167 = bitcast <2 x i64> %166 to <16 x i8>
  %168 = shufflevector <16 x i8> %167, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %169 = zext <8 x i8> %168 to <8 x i16>
  %170 = getelementptr inbounds i8, i8* %157, i64 8
  %171 = bitcast i8* %170 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> undef, i64 %172, i32 0
  %174 = bitcast <2 x i64> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %176 = zext <8 x i8> %175 to <8 x i16>
  %177 = getelementptr inbounds i8, i8* %157, i64 %4
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = bitcast <2 x i64> %180 to <16 x i8>
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %183 = zext <8 x i8> %182 to <8 x i16>
  %184 = getelementptr inbounds i8, i8* %177, i64 8
  %185 = bitcast i8* %184 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> undef, i64 %186, i32 0
  %188 = bitcast <2 x i64> %187 to <16 x i8>
  %189 = shufflevector <16 x i8> %188, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %190 = zext <8 x i8> %189 to <8 x i16>
  %191 = getelementptr inbounds i8, i8* %177, i64 %4
  %192 = add nuw nsw <8 x i16> %183, %169
  %193 = add nuw nsw <8 x i16> %190, %176
  %194 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %192, <8 x i16> %193) #6
  %195 = shl <8 x i16> %194, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %196 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %196, align 1
  %197 = add <8 x i16> %195, %161
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %199 = bitcast i8* %191 to i64*
  %200 = load i64, i64* %199, align 1
  %201 = insertelement <2 x i64> undef, i64 %200, i32 0
  %202 = bitcast <2 x i64> %201 to <16 x i8>
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %204 = zext <8 x i8> %203 to <8 x i16>
  %205 = getelementptr inbounds i8, i8* %191, i64 8
  %206 = bitcast i8* %205 to i64*
  %207 = load i64, i64* %206, align 1
  %208 = insertelement <2 x i64> undef, i64 %207, i32 0
  %209 = bitcast <2 x i64> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %211 = zext <8 x i8> %210 to <8 x i16>
  %212 = getelementptr inbounds i8, i8* %191, i64 %4
  %213 = bitcast i8* %212 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = insertelement <2 x i64> undef, i64 %214, i32 0
  %216 = bitcast <2 x i64> %215 to <16 x i8>
  %217 = shufflevector <16 x i8> %216, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %218 = zext <8 x i8> %217 to <8 x i16>
  %219 = getelementptr inbounds i8, i8* %212, i64 8
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> undef, i64 %221, i32 0
  %223 = bitcast <2 x i64> %222 to <16 x i8>
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %225 = zext <8 x i8> %224 to <8 x i16>
  %226 = getelementptr inbounds i8, i8* %212, i64 %4
  %227 = add nuw nsw <8 x i16> %218, %204
  %228 = add nuw nsw <8 x i16> %225, %211
  %229 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %227, <8 x i16> %228) #6
  %230 = shl <8 x i16> %229, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %231 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %231, align 1
  %232 = add <8 x i16> %197, %230
  %233 = bitcast i8* %226 to i64*
  %234 = load i64, i64* %233, align 1
  %235 = insertelement <2 x i64> undef, i64 %234, i32 0
  %236 = bitcast <2 x i64> %235 to <16 x i8>
  %237 = shufflevector <16 x i8> %236, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %238 = zext <8 x i8> %237 to <8 x i16>
  %239 = getelementptr inbounds i8, i8* %226, i64 8
  %240 = bitcast i8* %239 to i64*
  %241 = load i64, i64* %240, align 1
  %242 = insertelement <2 x i64> undef, i64 %241, i32 0
  %243 = bitcast <2 x i64> %242 to <16 x i8>
  %244 = shufflevector <16 x i8> %243, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %245 = zext <8 x i8> %244 to <8 x i16>
  %246 = getelementptr inbounds i8, i8* %226, i64 %4
  %247 = bitcast i8* %246 to i64*
  %248 = load i64, i64* %247, align 1
  %249 = insertelement <2 x i64> undef, i64 %248, i32 0
  %250 = bitcast <2 x i64> %249 to <16 x i8>
  %251 = shufflevector <16 x i8> %250, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %252 = zext <8 x i8> %251 to <8 x i16>
  %253 = getelementptr inbounds i8, i8* %246, i64 8
  %254 = bitcast i8* %253 to i64*
  %255 = load i64, i64* %254, align 1
  %256 = insertelement <2 x i64> undef, i64 %255, i32 0
  %257 = bitcast <2 x i64> %256 to <16 x i8>
  %258 = shufflevector <16 x i8> %257, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %259 = zext <8 x i8> %258 to <8 x i16>
  %260 = add nuw nsw <8 x i16> %252, %238
  %261 = add nuw nsw <8 x i16> %259, %245
  %262 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %260, <8 x i16> %261) #6
  %263 = shl <8 x i16> %262, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %264 = add <8 x i16> %232, %263
  %265 = shufflevector <8 x i16> %264, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %266 = zext <4 x i16> %265 to <4 x i32>
  %267 = shufflevector <8 x i16> %264, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %268 = bitcast <8 x i16> %267 to <4 x i32>
  %269 = add <4 x i32> %266, %268
  %270 = bitcast <4 x i32> %269 to <16 x i8>
  %271 = shufflevector <16 x i8> %270, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %272 = bitcast <16 x i8> %271 to <4 x i32>
  %273 = add <4 x i32> %269, %272
  %274 = bitcast <4 x i32> %273 to <16 x i8>
  %275 = shufflevector <16 x i8> %274, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %276 = bitcast <16 x i8> %275 to <4 x i32>
  %277 = add <4 x i32> %273, <i32 16, i32 16, i32 16, i32 16>
  %278 = add <4 x i32> %277, %276
  %279 = ashr <4 x i32> %278, <i32 5, i32 5, i32 5, i32 5>
  %280 = bitcast <4 x i32> %279 to <8 x i16>
  %281 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %282 = bitcast <8 x i16> %281 to <4 x i32>
  %283 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> zeroinitializer
  %284 = bitcast <4 x i32> %283 to <8 x i16>
  %285 = sub <8 x i16> %161, %284
  store <8 x i16> %285, <8 x i16>* %162, align 1
  %286 = sub <8 x i16> %195, %284
  store <8 x i16> %286, <8 x i16>* %196, align 1
  %287 = sub <8 x i16> %230, %284
  store <8 x i16> %287, <8 x i16>* %231, align 1
  %288 = sub <8 x i16> %263, %284
  br label %289

289:                                              ; preds = %135, %13
  %290 = phi <8 x i16> [ %288, %135 ], [ %134, %13 ]
  %291 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %290, <8 x i16>* %292, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %8 = ashr i32 %2, 1
  %9 = icmp slt i32 %8, 8
  %10 = select i1 %9, i32 %8, i32 8
  br i1 %6, label %11, label %187

11:                                               ; preds = %5, %11
  %12 = phi i32 [ %129, %11 ], [ 0, %5 ]
  %13 = phi i16* [ %122, %11 ], [ %7, %5 ]
  %14 = phi <4 x i32> [ %128, %11 ], [ zeroinitializer, %5 ]
  %15 = phi i8* [ %113, %11 ], [ %3, %5 ]
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = getelementptr inbounds i8, i8* %15, i64 %4
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %30 = zext <8 x i8> %29 to <8 x i16>
  %31 = bitcast <8 x i16> %30 to <4 x i32>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %33 = getelementptr inbounds i8, i8* %24, i64 %4
  %34 = add nuw nsw <8 x i16> %30, %21
  %35 = bitcast <4 x i32> %23 to <8 x i16>
  %36 = bitcast <4 x i32> %32 to <8 x i16>
  %37 = add <8 x i16> %36, %35
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %34, <8 x i16> %37) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = getelementptr inbounds i16, i16* %13, i64 32
  %42 = bitcast i8* %33 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %47 = zext <8 x i8> %46 to <8 x i16>
  %48 = bitcast <8 x i16> %47 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %50 = getelementptr inbounds i8, i8* %33, i64 %4
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %56 = zext <8 x i8> %55 to <8 x i16>
  %57 = bitcast <8 x i16> %56 to <4 x i32>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %59 = getelementptr inbounds i8, i8* %50, i64 %4
  %60 = add nuw nsw <8 x i16> %56, %47
  %61 = bitcast <4 x i32> %49 to <8 x i16>
  %62 = bitcast <4 x i32> %58 to <8 x i16>
  %63 = add <8 x i16> %62, %61
  %64 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %60, <8 x i16> %63) #6
  %65 = shl <8 x i16> %64, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %66 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 1
  %67 = add <8 x i16> %65, %39
  %68 = getelementptr inbounds i16, i16* %13, i64 64
  %69 = bitcast i8* %59 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> undef, i64 %70, i32 0
  %72 = bitcast <2 x i64> %71 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %74 = zext <8 x i8> %73 to <8 x i16>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %77 = getelementptr inbounds i8, i8* %59, i64 %4
  %78 = bitcast i8* %77 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = bitcast <2 x i64> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = bitcast <8 x i16> %83 to <4 x i32>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %86 = getelementptr inbounds i8, i8* %77, i64 %4
  %87 = add nuw nsw <8 x i16> %83, %74
  %88 = bitcast <4 x i32> %76 to <8 x i16>
  %89 = bitcast <4 x i32> %85 to <8 x i16>
  %90 = add <8 x i16> %89, %88
  %91 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %87, <8 x i16> %90) #6
  %92 = shl <8 x i16> %91, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %93 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %93, align 1
  %94 = add <8 x i16> %67, %92
  %95 = getelementptr inbounds i16, i16* %13, i64 96
  %96 = bitcast i8* %86 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %101 = zext <8 x i8> %100 to <8 x i16>
  %102 = bitcast <8 x i16> %101 to <4 x i32>
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %104 = getelementptr inbounds i8, i8* %86, i64 %4
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = bitcast <2 x i64> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %110 = zext <8 x i8> %109 to <8 x i16>
  %111 = bitcast <8 x i16> %110 to <4 x i32>
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %113 = getelementptr inbounds i8, i8* %104, i64 %4
  %114 = add nuw nsw <8 x i16> %110, %101
  %115 = bitcast <4 x i32> %103 to <8 x i16>
  %116 = bitcast <4 x i32> %112 to <8 x i16>
  %117 = add <8 x i16> %116, %115
  %118 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %114, <8 x i16> %117) #6
  %119 = shl <8 x i16> %118, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %120 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 1
  %121 = add <8 x i16> %94, %119
  %122 = getelementptr inbounds i16, i16* %13, i64 128
  %123 = shufflevector <8 x i16> %121, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = zext <4 x i16> %123 to <4 x i32>
  %125 = add <4 x i32> %14, %124
  %126 = shufflevector <8 x i16> %121, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %127 = bitcast <8 x i16> %126 to <4 x i32>
  %128 = add <4 x i32> %125, %127
  %129 = add nuw nsw i32 %12, 4
  %130 = icmp slt i32 %129, %10
  br i1 %130, label %11, label %131

131:                                              ; preds = %11
  %132 = shufflevector <8 x i16> %119, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = sext <4 x i16> %132 to <4 x i32>
  %134 = bitcast <8 x i16> %119 to <16 x i8>
  %135 = shufflevector <16 x i8> %134, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = bitcast <16 x i8> %135 to <8 x i16>
  %137 = shufflevector <8 x i16> %136, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %138 = sext <4 x i16> %137 to <4 x i32>
  %139 = add nsw <4 x i32> %138, %133
  %140 = icmp ult i32 %129, 8
  br i1 %140, label %141, label %395

141:                                              ; preds = %131
  %142 = sub nsw i32 4, %12
  %143 = sub nsw i32 3, %12
  %144 = and i32 %142, 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %141, %146
  %147 = phi <4 x i32> [ %152, %146 ], [ %128, %141 ]
  %148 = phi i16* [ %151, %146 ], [ %122, %141 ]
  %149 = phi i32 [ %153, %146 ], [ %144, %141 ]
  %150 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %150, align 1
  %151 = getelementptr inbounds i16, i16* %148, i64 32
  %152 = add <4 x i32> %139, %147
  %153 = add i32 %149, -1
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !5

155:                                              ; preds = %146, %141
  %156 = phi <4 x i32> [ undef, %141 ], [ %152, %146 ]
  %157 = phi <4 x i32> [ %128, %141 ], [ %152, %146 ]
  %158 = phi i16* [ %122, %141 ], [ %151, %146 ]
  %159 = icmp ult i32 %143, 7
  br i1 %159, label %395, label %160

160:                                              ; preds = %155, %160
  %161 = phi <4 x i32> [ %186, %160 ], [ %157, %155 ]
  %162 = phi i16* [ %185, %160 ], [ %158, %155 ]
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %163, align 1
  %164 = getelementptr inbounds i16, i16* %162, i64 32
  %165 = add <4 x i32> %139, %161
  %166 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %166, align 1
  %167 = getelementptr inbounds i16, i16* %162, i64 64
  %168 = add <4 x i32> %139, %165
  %169 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %169, align 1
  %170 = getelementptr inbounds i16, i16* %162, i64 96
  %171 = add <4 x i32> %139, %168
  %172 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %172, align 1
  %173 = getelementptr inbounds i16, i16* %162, i64 128
  %174 = add <4 x i32> %139, %171
  %175 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %175, align 1
  %176 = getelementptr inbounds i16, i16* %162, i64 160
  %177 = add <4 x i32> %139, %174
  %178 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %178, align 1
  %179 = getelementptr inbounds i16, i16* %162, i64 192
  %180 = add <4 x i32> %139, %177
  %181 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %181, align 1
  %182 = getelementptr inbounds i16, i16* %162, i64 224
  %183 = add <4 x i32> %139, %180
  %184 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %184, align 1
  %185 = getelementptr inbounds i16, i16* %162, i64 256
  %186 = add <4 x i32> %139, %183
  br label %160

187:                                              ; preds = %5, %187
  %188 = phi i32 [ %337, %187 ], [ 0, %5 ]
  %189 = phi i16* [ %330, %187 ], [ %7, %5 ]
  %190 = phi <4 x i32> [ %336, %187 ], [ zeroinitializer, %5 ]
  %191 = phi i8* [ %323, %187 ], [ %3, %5 ]
  %192 = bitcast i8* %191 to i64*
  %193 = load i64, i64* %192, align 1
  %194 = insertelement <2 x i64> undef, i64 %193, i32 0
  %195 = bitcast <2 x i64> %194 to <16 x i8>
  %196 = shufflevector <16 x i8> %195, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %197 = zext <8 x i8> %196 to <8 x i16>
  %198 = getelementptr inbounds i8, i8* %191, i64 8
  %199 = bitcast i8* %198 to i64*
  %200 = load i64, i64* %199, align 1
  %201 = insertelement <2 x i64> undef, i64 %200, i32 0
  %202 = bitcast <2 x i64> %201 to <16 x i8>
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %204 = zext <8 x i8> %203 to <8 x i16>
  %205 = getelementptr inbounds i8, i8* %191, i64 %4
  %206 = bitcast i8* %205 to i64*
  %207 = load i64, i64* %206, align 1
  %208 = insertelement <2 x i64> undef, i64 %207, i32 0
  %209 = bitcast <2 x i64> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %211 = zext <8 x i8> %210 to <8 x i16>
  %212 = getelementptr inbounds i8, i8* %205, i64 8
  %213 = bitcast i8* %212 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = insertelement <2 x i64> undef, i64 %214, i32 0
  %216 = bitcast <2 x i64> %215 to <16 x i8>
  %217 = shufflevector <16 x i8> %216, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %218 = zext <8 x i8> %217 to <8 x i16>
  %219 = getelementptr inbounds i8, i8* %205, i64 %4
  %220 = add nuw nsw <8 x i16> %211, %197
  %221 = add nuw nsw <8 x i16> %218, %204
  %222 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %220, <8 x i16> %221) #6
  %223 = shl <8 x i16> %222, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %224 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %224, align 1
  %225 = getelementptr inbounds i16, i16* %189, i64 32
  %226 = bitcast i8* %219 to i64*
  %227 = load i64, i64* %226, align 1
  %228 = insertelement <2 x i64> undef, i64 %227, i32 0
  %229 = bitcast <2 x i64> %228 to <16 x i8>
  %230 = shufflevector <16 x i8> %229, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %231 = zext <8 x i8> %230 to <8 x i16>
  %232 = getelementptr inbounds i8, i8* %219, i64 8
  %233 = bitcast i8* %232 to i64*
  %234 = load i64, i64* %233, align 1
  %235 = insertelement <2 x i64> undef, i64 %234, i32 0
  %236 = bitcast <2 x i64> %235 to <16 x i8>
  %237 = shufflevector <16 x i8> %236, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %238 = zext <8 x i8> %237 to <8 x i16>
  %239 = getelementptr inbounds i8, i8* %219, i64 %4
  %240 = bitcast i8* %239 to i64*
  %241 = load i64, i64* %240, align 1
  %242 = insertelement <2 x i64> undef, i64 %241, i32 0
  %243 = bitcast <2 x i64> %242 to <16 x i8>
  %244 = shufflevector <16 x i8> %243, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %245 = zext <8 x i8> %244 to <8 x i16>
  %246 = getelementptr inbounds i8, i8* %239, i64 8
  %247 = bitcast i8* %246 to i64*
  %248 = load i64, i64* %247, align 1
  %249 = insertelement <2 x i64> undef, i64 %248, i32 0
  %250 = bitcast <2 x i64> %249 to <16 x i8>
  %251 = shufflevector <16 x i8> %250, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %252 = zext <8 x i8> %251 to <8 x i16>
  %253 = getelementptr inbounds i8, i8* %239, i64 %4
  %254 = add nuw nsw <8 x i16> %245, %231
  %255 = add nuw nsw <8 x i16> %252, %238
  %256 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %254, <8 x i16> %255) #6
  %257 = shl <8 x i16> %256, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %258 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %257, <8 x i16>* %258, align 1
  %259 = add <8 x i16> %257, %223
  %260 = getelementptr inbounds i16, i16* %189, i64 64
  %261 = bitcast i8* %253 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = insertelement <2 x i64> undef, i64 %262, i32 0
  %264 = bitcast <2 x i64> %263 to <16 x i8>
  %265 = shufflevector <16 x i8> %264, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %266 = zext <8 x i8> %265 to <8 x i16>
  %267 = getelementptr inbounds i8, i8* %253, i64 8
  %268 = bitcast i8* %267 to i64*
  %269 = load i64, i64* %268, align 1
  %270 = insertelement <2 x i64> undef, i64 %269, i32 0
  %271 = bitcast <2 x i64> %270 to <16 x i8>
  %272 = shufflevector <16 x i8> %271, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %273 = zext <8 x i8> %272 to <8 x i16>
  %274 = getelementptr inbounds i8, i8* %253, i64 %4
  %275 = bitcast i8* %274 to i64*
  %276 = load i64, i64* %275, align 1
  %277 = insertelement <2 x i64> undef, i64 %276, i32 0
  %278 = bitcast <2 x i64> %277 to <16 x i8>
  %279 = shufflevector <16 x i8> %278, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %280 = zext <8 x i8> %279 to <8 x i16>
  %281 = getelementptr inbounds i8, i8* %274, i64 8
  %282 = bitcast i8* %281 to i64*
  %283 = load i64, i64* %282, align 1
  %284 = insertelement <2 x i64> undef, i64 %283, i32 0
  %285 = bitcast <2 x i64> %284 to <16 x i8>
  %286 = shufflevector <16 x i8> %285, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %287 = zext <8 x i8> %286 to <8 x i16>
  %288 = getelementptr inbounds i8, i8* %274, i64 %4
  %289 = add nuw nsw <8 x i16> %280, %266
  %290 = add nuw nsw <8 x i16> %287, %273
  %291 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %289, <8 x i16> %290) #6
  %292 = shl <8 x i16> %291, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %293 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %293, align 1
  %294 = add <8 x i16> %259, %292
  %295 = getelementptr inbounds i16, i16* %189, i64 96
  %296 = bitcast i8* %288 to i64*
  %297 = load i64, i64* %296, align 1
  %298 = insertelement <2 x i64> undef, i64 %297, i32 0
  %299 = bitcast <2 x i64> %298 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %301 = zext <8 x i8> %300 to <8 x i16>
  %302 = getelementptr inbounds i8, i8* %288, i64 8
  %303 = bitcast i8* %302 to i64*
  %304 = load i64, i64* %303, align 1
  %305 = insertelement <2 x i64> undef, i64 %304, i32 0
  %306 = bitcast <2 x i64> %305 to <16 x i8>
  %307 = shufflevector <16 x i8> %306, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %308 = zext <8 x i8> %307 to <8 x i16>
  %309 = getelementptr inbounds i8, i8* %288, i64 %4
  %310 = bitcast i8* %309 to i64*
  %311 = load i64, i64* %310, align 1
  %312 = insertelement <2 x i64> undef, i64 %311, i32 0
  %313 = bitcast <2 x i64> %312 to <16 x i8>
  %314 = shufflevector <16 x i8> %313, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %315 = zext <8 x i8> %314 to <8 x i16>
  %316 = getelementptr inbounds i8, i8* %309, i64 8
  %317 = bitcast i8* %316 to i64*
  %318 = load i64, i64* %317, align 1
  %319 = insertelement <2 x i64> undef, i64 %318, i32 0
  %320 = bitcast <2 x i64> %319 to <16 x i8>
  %321 = shufflevector <16 x i8> %320, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %322 = zext <8 x i8> %321 to <8 x i16>
  %323 = getelementptr inbounds i8, i8* %309, i64 %4
  %324 = add nuw nsw <8 x i16> %315, %301
  %325 = add nuw nsw <8 x i16> %322, %308
  %326 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %324, <8 x i16> %325) #6
  %327 = shl <8 x i16> %326, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %328 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %328, align 1
  %329 = add <8 x i16> %294, %327
  %330 = getelementptr inbounds i16, i16* %189, i64 128
  %331 = shufflevector <8 x i16> %329, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %332 = zext <4 x i16> %331 to <4 x i32>
  %333 = add <4 x i32> %190, %332
  %334 = shufflevector <8 x i16> %329, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %335 = bitcast <8 x i16> %334 to <4 x i32>
  %336 = add <4 x i32> %333, %335
  %337 = add nuw nsw i32 %188, 4
  %338 = icmp slt i32 %337, %10
  br i1 %338, label %187, label %339

339:                                              ; preds = %187
  %340 = shufflevector <8 x i16> %327, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %341 = sext <4 x i16> %340 to <4 x i32>
  %342 = bitcast <8 x i16> %327 to <16 x i8>
  %343 = shufflevector <16 x i8> %342, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %344 = bitcast <16 x i8> %343 to <8 x i16>
  %345 = shufflevector <8 x i16> %344, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %346 = sext <4 x i16> %345 to <4 x i32>
  %347 = add nsw <4 x i32> %346, %341
  %348 = icmp ult i32 %337, 8
  br i1 %348, label %349, label %395

349:                                              ; preds = %339
  %350 = sub nsw i32 4, %188
  %351 = sub nsw i32 3, %188
  %352 = and i32 %350, 4
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %363, label %354

354:                                              ; preds = %349, %354
  %355 = phi <4 x i32> [ %360, %354 ], [ %336, %349 ]
  %356 = phi i16* [ %359, %354 ], [ %330, %349 ]
  %357 = phi i32 [ %361, %354 ], [ %352, %349 ]
  %358 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %358, align 1
  %359 = getelementptr inbounds i16, i16* %356, i64 32
  %360 = add <4 x i32> %347, %355
  %361 = add i32 %357, -1
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %354, !llvm.loop !6

363:                                              ; preds = %354, %349
  %364 = phi <4 x i32> [ undef, %349 ], [ %360, %354 ]
  %365 = phi <4 x i32> [ %336, %349 ], [ %360, %354 ]
  %366 = phi i16* [ %330, %349 ], [ %359, %354 ]
  %367 = icmp ult i32 %351, 7
  br i1 %367, label %395, label %368

368:                                              ; preds = %363, %368
  %369 = phi <4 x i32> [ %394, %368 ], [ %365, %363 ]
  %370 = phi i16* [ %393, %368 ], [ %366, %363 ]
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %371, align 1
  %372 = getelementptr inbounds i16, i16* %370, i64 32
  %373 = add <4 x i32> %347, %369
  %374 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %374, align 1
  %375 = getelementptr inbounds i16, i16* %370, i64 64
  %376 = add <4 x i32> %347, %373
  %377 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %377, align 1
  %378 = getelementptr inbounds i16, i16* %370, i64 96
  %379 = add <4 x i32> %347, %376
  %380 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %380, align 1
  %381 = getelementptr inbounds i16, i16* %370, i64 128
  %382 = add <4 x i32> %347, %379
  %383 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %383, align 1
  %384 = getelementptr inbounds i16, i16* %370, i64 160
  %385 = add <4 x i32> %347, %382
  %386 = bitcast i16* %384 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %386, align 1
  %387 = getelementptr inbounds i16, i16* %370, i64 192
  %388 = add <4 x i32> %347, %385
  %389 = bitcast i16* %387 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %389, align 1
  %390 = getelementptr inbounds i16, i16* %370, i64 224
  %391 = add <4 x i32> %347, %388
  %392 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %392, align 1
  %393 = getelementptr inbounds i16, i16* %370, i64 256
  %394 = add <4 x i32> %347, %391
  br label %368

395:                                              ; preds = %363, %155, %339, %131
  %396 = phi <4 x i32> [ %128, %131 ], [ %336, %339 ], [ %156, %155 ], [ %364, %363 ]
  %397 = bitcast <4 x i32> %396 to <16 x i8>
  %398 = shufflevector <16 x i8> %397, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %399 = bitcast <16 x i8> %398 to <4 x i32>
  %400 = add <4 x i32> %396, %399
  %401 = bitcast <4 x i32> %400 to <16 x i8>
  %402 = shufflevector <16 x i8> %401, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %403 = bitcast <16 x i8> %402 to <4 x i32>
  %404 = add <4 x i32> %400, <i32 32, i32 32, i32 32, i32 32>
  %405 = add <4 x i32> %404, %403
  %406 = ashr <4 x i32> %405, <i32 6, i32 6, i32 6, i32 6>
  %407 = bitcast <4 x i32> %406 to <8 x i16>
  %408 = shufflevector <8 x i16> %407, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %409 = bitcast <8 x i16> %408 to <4 x i32>
  %410 = shufflevector <4 x i32> %409, <4 x i32> undef, <4 x i32> zeroinitializer
  %411 = bitcast <4 x i32> %410 to <8 x i16>
  %412 = bitcast [32 x i16]* %0 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 1
  %414 = sub <8 x i16> %413, %411
  store <8 x i16> %414, <8 x i16>* %412, align 1
  %415 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %416 = bitcast i16* %415 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 1
  %418 = sub <8 x i16> %417, %411
  store <8 x i16> %418, <8 x i16>* %416, align 1
  %419 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 1
  %422 = sub <8 x i16> %421, %411
  store <8 x i16> %422, <8 x i16>* %420, align 1
  %423 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %424 = bitcast i16* %423 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 1
  %426 = sub <8 x i16> %425, %411
  store <8 x i16> %426, <8 x i16>* %424, align 1
  %427 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %428 = bitcast i16* %427 to <8 x i16>*
  %429 = load <8 x i16>, <8 x i16>* %428, align 1
  %430 = sub <8 x i16> %429, %411
  store <8 x i16> %430, <8 x i16>* %428, align 1
  %431 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %432 = bitcast i16* %431 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 1
  %434 = sub <8 x i16> %433, %411
  store <8 x i16> %434, <8 x i16>* %432, align 1
  %435 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 1
  %438 = sub <8 x i16> %437, %411
  store <8 x i16> %438, <8 x i16>* %436, align 1
  %439 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %440 = bitcast i16* %439 to <8 x i16>*
  %441 = load <8 x i16>, <8 x i16>* %440, align 1
  %442 = sub <8 x i16> %441, %411
  store <8 x i16> %442, <8 x i16>* %440, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %8 = ashr i32 %2, 1
  %9 = icmp slt i32 %8, 16
  %10 = select i1 %9, i32 %8, i32 16
  br i1 %6, label %11, label %193

11:                                               ; preds = %5, %11
  %12 = phi i32 [ %129, %11 ], [ 0, %5 ]
  %13 = phi i16* [ %122, %11 ], [ %7, %5 ]
  %14 = phi <4 x i32> [ %128, %11 ], [ zeroinitializer, %5 ]
  %15 = phi i8* [ %113, %11 ], [ %3, %5 ]
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = getelementptr inbounds i8, i8* %15, i64 %4
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %30 = zext <8 x i8> %29 to <8 x i16>
  %31 = bitcast <8 x i16> %30 to <4 x i32>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %33 = getelementptr inbounds i8, i8* %24, i64 %4
  %34 = add nuw nsw <8 x i16> %30, %21
  %35 = bitcast <4 x i32> %23 to <8 x i16>
  %36 = bitcast <4 x i32> %32 to <8 x i16>
  %37 = add <8 x i16> %36, %35
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %34, <8 x i16> %37) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = getelementptr inbounds i16, i16* %13, i64 32
  %42 = bitcast i8* %33 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %47 = zext <8 x i8> %46 to <8 x i16>
  %48 = bitcast <8 x i16> %47 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %50 = getelementptr inbounds i8, i8* %33, i64 %4
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %56 = zext <8 x i8> %55 to <8 x i16>
  %57 = bitcast <8 x i16> %56 to <4 x i32>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %59 = getelementptr inbounds i8, i8* %50, i64 %4
  %60 = add nuw nsw <8 x i16> %56, %47
  %61 = bitcast <4 x i32> %49 to <8 x i16>
  %62 = bitcast <4 x i32> %58 to <8 x i16>
  %63 = add <8 x i16> %62, %61
  %64 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %60, <8 x i16> %63) #6
  %65 = shl <8 x i16> %64, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %66 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 1
  %67 = add <8 x i16> %65, %39
  %68 = getelementptr inbounds i16, i16* %13, i64 64
  %69 = bitcast i8* %59 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> undef, i64 %70, i32 0
  %72 = bitcast <2 x i64> %71 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %74 = zext <8 x i8> %73 to <8 x i16>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %77 = getelementptr inbounds i8, i8* %59, i64 %4
  %78 = bitcast i8* %77 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = bitcast <2 x i64> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = bitcast <8 x i16> %83 to <4 x i32>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %86 = getelementptr inbounds i8, i8* %77, i64 %4
  %87 = add nuw nsw <8 x i16> %83, %74
  %88 = bitcast <4 x i32> %76 to <8 x i16>
  %89 = bitcast <4 x i32> %85 to <8 x i16>
  %90 = add <8 x i16> %89, %88
  %91 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %87, <8 x i16> %90) #6
  %92 = shl <8 x i16> %91, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %93 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %93, align 1
  %94 = add <8 x i16> %67, %92
  %95 = getelementptr inbounds i16, i16* %13, i64 96
  %96 = bitcast i8* %86 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %101 = zext <8 x i8> %100 to <8 x i16>
  %102 = bitcast <8 x i16> %101 to <4 x i32>
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %104 = getelementptr inbounds i8, i8* %86, i64 %4
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = bitcast <2 x i64> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %110 = zext <8 x i8> %109 to <8 x i16>
  %111 = bitcast <8 x i16> %110 to <4 x i32>
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %113 = getelementptr inbounds i8, i8* %104, i64 %4
  %114 = add nuw nsw <8 x i16> %110, %101
  %115 = bitcast <4 x i32> %103 to <8 x i16>
  %116 = bitcast <4 x i32> %112 to <8 x i16>
  %117 = add <8 x i16> %116, %115
  %118 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %114, <8 x i16> %117) #6
  %119 = shl <8 x i16> %118, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %120 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 1
  %121 = add <8 x i16> %94, %119
  %122 = getelementptr inbounds i16, i16* %13, i64 128
  %123 = shufflevector <8 x i16> %121, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = zext <4 x i16> %123 to <4 x i32>
  %125 = add <4 x i32> %14, %124
  %126 = shufflevector <8 x i16> %121, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %127 = bitcast <8 x i16> %126 to <4 x i32>
  %128 = add <4 x i32> %125, %127
  %129 = add nuw nsw i32 %12, 4
  %130 = icmp slt i32 %129, %10
  br i1 %130, label %11, label %131

131:                                              ; preds = %11
  %132 = shufflevector <8 x i16> %119, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = sext <4 x i16> %132 to <4 x i32>
  %134 = bitcast <8 x i16> %119 to <16 x i8>
  %135 = shufflevector <16 x i8> %134, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = bitcast <16 x i8> %135 to <8 x i16>
  %137 = shufflevector <8 x i16> %136, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %138 = sext <4 x i16> %137 to <4 x i32>
  %139 = add nsw <4 x i32> %138, %133
  %140 = icmp ult i32 %129, 16
  br i1 %140, label %141, label %407

141:                                              ; preds = %131
  %142 = sub nsw i32 4, %12
  %143 = sub nsw i32 11, %12
  %144 = and i32 %142, 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %141, %146
  %147 = phi <4 x i32> [ %153, %146 ], [ %128, %141 ]
  %148 = phi i16* [ %152, %146 ], [ %122, %141 ]
  %149 = phi i32 [ %154, %146 ], [ %129, %141 ]
  %150 = phi i32 [ %155, %146 ], [ %144, %141 ]
  %151 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %151, align 1
  %152 = getelementptr inbounds i16, i16* %148, i64 32
  %153 = add <4 x i32> %139, %147
  %154 = add nuw nsw i32 %149, 1
  %155 = add i32 %150, -1
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %146, !llvm.loop !7

157:                                              ; preds = %146, %141
  %158 = phi <4 x i32> [ undef, %141 ], [ %153, %146 ]
  %159 = phi <4 x i32> [ %128, %141 ], [ %153, %146 ]
  %160 = phi i16* [ %122, %141 ], [ %152, %146 ]
  %161 = phi i32 [ %129, %141 ], [ %154, %146 ]
  %162 = icmp ult i32 %143, 7
  br i1 %162, label %407, label %163

163:                                              ; preds = %157, %163
  %164 = phi <4 x i32> [ %190, %163 ], [ %159, %157 ]
  %165 = phi i16* [ %189, %163 ], [ %160, %157 ]
  %166 = phi i32 [ %191, %163 ], [ %161, %157 ]
  %167 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %165, i64 32
  %169 = add <4 x i32> %139, %164
  %170 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %170, align 1
  %171 = getelementptr inbounds i16, i16* %165, i64 64
  %172 = add <4 x i32> %139, %169
  %173 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %165, i64 96
  %175 = add <4 x i32> %139, %172
  %176 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %176, align 1
  %177 = getelementptr inbounds i16, i16* %165, i64 128
  %178 = add <4 x i32> %139, %175
  %179 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %179, align 1
  %180 = getelementptr inbounds i16, i16* %165, i64 160
  %181 = add <4 x i32> %139, %178
  %182 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %182, align 1
  %183 = getelementptr inbounds i16, i16* %165, i64 192
  %184 = add <4 x i32> %139, %181
  %185 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %185, align 1
  %186 = getelementptr inbounds i16, i16* %165, i64 224
  %187 = add <4 x i32> %139, %184
  %188 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %188, align 1
  %189 = getelementptr inbounds i16, i16* %165, i64 256
  %190 = add <4 x i32> %139, %187
  %191 = add nuw nsw i32 %166, 8
  %192 = icmp eq i32 %191, 16
  br i1 %192, label %407, label %163

193:                                              ; preds = %5, %193
  %194 = phi i32 [ %343, %193 ], [ 0, %5 ]
  %195 = phi i16* [ %336, %193 ], [ %7, %5 ]
  %196 = phi <4 x i32> [ %342, %193 ], [ zeroinitializer, %5 ]
  %197 = phi i8* [ %329, %193 ], [ %3, %5 ]
  %198 = bitcast i8* %197 to i64*
  %199 = load i64, i64* %198, align 1
  %200 = insertelement <2 x i64> undef, i64 %199, i32 0
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %203 = zext <8 x i8> %202 to <8 x i16>
  %204 = getelementptr inbounds i8, i8* %197, i64 8
  %205 = bitcast i8* %204 to i64*
  %206 = load i64, i64* %205, align 1
  %207 = insertelement <2 x i64> undef, i64 %206, i32 0
  %208 = bitcast <2 x i64> %207 to <16 x i8>
  %209 = shufflevector <16 x i8> %208, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %210 = zext <8 x i8> %209 to <8 x i16>
  %211 = getelementptr inbounds i8, i8* %197, i64 %4
  %212 = bitcast i8* %211 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = insertelement <2 x i64> undef, i64 %213, i32 0
  %215 = bitcast <2 x i64> %214 to <16 x i8>
  %216 = shufflevector <16 x i8> %215, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %217 = zext <8 x i8> %216 to <8 x i16>
  %218 = getelementptr inbounds i8, i8* %211, i64 8
  %219 = bitcast i8* %218 to i64*
  %220 = load i64, i64* %219, align 1
  %221 = insertelement <2 x i64> undef, i64 %220, i32 0
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %224 = zext <8 x i8> %223 to <8 x i16>
  %225 = getelementptr inbounds i8, i8* %211, i64 %4
  %226 = add nuw nsw <8 x i16> %217, %203
  %227 = add nuw nsw <8 x i16> %224, %210
  %228 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %226, <8 x i16> %227) #6
  %229 = shl <8 x i16> %228, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %230 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %230, align 1
  %231 = getelementptr inbounds i16, i16* %195, i64 32
  %232 = bitcast i8* %225 to i64*
  %233 = load i64, i64* %232, align 1
  %234 = insertelement <2 x i64> undef, i64 %233, i32 0
  %235 = bitcast <2 x i64> %234 to <16 x i8>
  %236 = shufflevector <16 x i8> %235, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %237 = zext <8 x i8> %236 to <8 x i16>
  %238 = getelementptr inbounds i8, i8* %225, i64 8
  %239 = bitcast i8* %238 to i64*
  %240 = load i64, i64* %239, align 1
  %241 = insertelement <2 x i64> undef, i64 %240, i32 0
  %242 = bitcast <2 x i64> %241 to <16 x i8>
  %243 = shufflevector <16 x i8> %242, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %244 = zext <8 x i8> %243 to <8 x i16>
  %245 = getelementptr inbounds i8, i8* %225, i64 %4
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> undef, i64 %247, i32 0
  %249 = bitcast <2 x i64> %248 to <16 x i8>
  %250 = shufflevector <16 x i8> %249, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %251 = zext <8 x i8> %250 to <8 x i16>
  %252 = getelementptr inbounds i8, i8* %245, i64 8
  %253 = bitcast i8* %252 to i64*
  %254 = load i64, i64* %253, align 1
  %255 = insertelement <2 x i64> undef, i64 %254, i32 0
  %256 = bitcast <2 x i64> %255 to <16 x i8>
  %257 = shufflevector <16 x i8> %256, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %258 = zext <8 x i8> %257 to <8 x i16>
  %259 = getelementptr inbounds i8, i8* %245, i64 %4
  %260 = add nuw nsw <8 x i16> %251, %237
  %261 = add nuw nsw <8 x i16> %258, %244
  %262 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %260, <8 x i16> %261) #6
  %263 = shl <8 x i16> %262, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %264 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %264, align 1
  %265 = add <8 x i16> %263, %229
  %266 = getelementptr inbounds i16, i16* %195, i64 64
  %267 = bitcast i8* %259 to i64*
  %268 = load i64, i64* %267, align 1
  %269 = insertelement <2 x i64> undef, i64 %268, i32 0
  %270 = bitcast <2 x i64> %269 to <16 x i8>
  %271 = shufflevector <16 x i8> %270, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %272 = zext <8 x i8> %271 to <8 x i16>
  %273 = getelementptr inbounds i8, i8* %259, i64 8
  %274 = bitcast i8* %273 to i64*
  %275 = load i64, i64* %274, align 1
  %276 = insertelement <2 x i64> undef, i64 %275, i32 0
  %277 = bitcast <2 x i64> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %279 = zext <8 x i8> %278 to <8 x i16>
  %280 = getelementptr inbounds i8, i8* %259, i64 %4
  %281 = bitcast i8* %280 to i64*
  %282 = load i64, i64* %281, align 1
  %283 = insertelement <2 x i64> undef, i64 %282, i32 0
  %284 = bitcast <2 x i64> %283 to <16 x i8>
  %285 = shufflevector <16 x i8> %284, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %286 = zext <8 x i8> %285 to <8 x i16>
  %287 = getelementptr inbounds i8, i8* %280, i64 8
  %288 = bitcast i8* %287 to i64*
  %289 = load i64, i64* %288, align 1
  %290 = insertelement <2 x i64> undef, i64 %289, i32 0
  %291 = bitcast <2 x i64> %290 to <16 x i8>
  %292 = shufflevector <16 x i8> %291, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %293 = zext <8 x i8> %292 to <8 x i16>
  %294 = getelementptr inbounds i8, i8* %280, i64 %4
  %295 = add nuw nsw <8 x i16> %286, %272
  %296 = add nuw nsw <8 x i16> %293, %279
  %297 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %295, <8 x i16> %296) #6
  %298 = shl <8 x i16> %297, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %299 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %299, align 1
  %300 = add <8 x i16> %265, %298
  %301 = getelementptr inbounds i16, i16* %195, i64 96
  %302 = bitcast i8* %294 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> undef, i64 %303, i32 0
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %307 = zext <8 x i8> %306 to <8 x i16>
  %308 = getelementptr inbounds i8, i8* %294, i64 8
  %309 = bitcast i8* %308 to i64*
  %310 = load i64, i64* %309, align 1
  %311 = insertelement <2 x i64> undef, i64 %310, i32 0
  %312 = bitcast <2 x i64> %311 to <16 x i8>
  %313 = shufflevector <16 x i8> %312, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %314 = zext <8 x i8> %313 to <8 x i16>
  %315 = getelementptr inbounds i8, i8* %294, i64 %4
  %316 = bitcast i8* %315 to i64*
  %317 = load i64, i64* %316, align 1
  %318 = insertelement <2 x i64> undef, i64 %317, i32 0
  %319 = bitcast <2 x i64> %318 to <16 x i8>
  %320 = shufflevector <16 x i8> %319, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %321 = zext <8 x i8> %320 to <8 x i16>
  %322 = getelementptr inbounds i8, i8* %315, i64 8
  %323 = bitcast i8* %322 to i64*
  %324 = load i64, i64* %323, align 1
  %325 = insertelement <2 x i64> undef, i64 %324, i32 0
  %326 = bitcast <2 x i64> %325 to <16 x i8>
  %327 = shufflevector <16 x i8> %326, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %328 = zext <8 x i8> %327 to <8 x i16>
  %329 = getelementptr inbounds i8, i8* %315, i64 %4
  %330 = add nuw nsw <8 x i16> %321, %307
  %331 = add nuw nsw <8 x i16> %328, %314
  %332 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %330, <8 x i16> %331) #6
  %333 = shl <8 x i16> %332, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %334 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %334, align 1
  %335 = add <8 x i16> %300, %333
  %336 = getelementptr inbounds i16, i16* %195, i64 128
  %337 = shufflevector <8 x i16> %335, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %338 = zext <4 x i16> %337 to <4 x i32>
  %339 = add <4 x i32> %196, %338
  %340 = shufflevector <8 x i16> %335, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %341 = bitcast <8 x i16> %340 to <4 x i32>
  %342 = add <4 x i32> %339, %341
  %343 = add nuw nsw i32 %194, 4
  %344 = icmp slt i32 %343, %10
  br i1 %344, label %193, label %345

345:                                              ; preds = %193
  %346 = shufflevector <8 x i16> %333, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %347 = sext <4 x i16> %346 to <4 x i32>
  %348 = bitcast <8 x i16> %333 to <16 x i8>
  %349 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %350 = bitcast <16 x i8> %349 to <8 x i16>
  %351 = shufflevector <8 x i16> %350, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %352 = sext <4 x i16> %351 to <4 x i32>
  %353 = add nsw <4 x i32> %352, %347
  %354 = icmp ult i32 %343, 16
  br i1 %354, label %355, label %407

355:                                              ; preds = %345
  %356 = sub nsw i32 4, %194
  %357 = sub nsw i32 11, %194
  %358 = and i32 %356, 4
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %371, label %360

360:                                              ; preds = %355, %360
  %361 = phi <4 x i32> [ %367, %360 ], [ %342, %355 ]
  %362 = phi i16* [ %366, %360 ], [ %336, %355 ]
  %363 = phi i32 [ %368, %360 ], [ %343, %355 ]
  %364 = phi i32 [ %369, %360 ], [ %358, %355 ]
  %365 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %365, align 1
  %366 = getelementptr inbounds i16, i16* %362, i64 32
  %367 = add <4 x i32> %353, %361
  %368 = add nuw nsw i32 %363, 1
  %369 = add i32 %364, -1
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %371, label %360, !llvm.loop !8

371:                                              ; preds = %360, %355
  %372 = phi <4 x i32> [ undef, %355 ], [ %367, %360 ]
  %373 = phi <4 x i32> [ %342, %355 ], [ %367, %360 ]
  %374 = phi i16* [ %336, %355 ], [ %366, %360 ]
  %375 = phi i32 [ %343, %355 ], [ %368, %360 ]
  %376 = icmp ult i32 %357, 7
  br i1 %376, label %407, label %377

377:                                              ; preds = %371, %377
  %378 = phi <4 x i32> [ %404, %377 ], [ %373, %371 ]
  %379 = phi i16* [ %403, %377 ], [ %374, %371 ]
  %380 = phi i32 [ %405, %377 ], [ %375, %371 ]
  %381 = bitcast i16* %379 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %381, align 1
  %382 = getelementptr inbounds i16, i16* %379, i64 32
  %383 = add <4 x i32> %353, %378
  %384 = bitcast i16* %382 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %384, align 1
  %385 = getelementptr inbounds i16, i16* %379, i64 64
  %386 = add <4 x i32> %353, %383
  %387 = bitcast i16* %385 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %387, align 1
  %388 = getelementptr inbounds i16, i16* %379, i64 96
  %389 = add <4 x i32> %353, %386
  %390 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %390, align 1
  %391 = getelementptr inbounds i16, i16* %379, i64 128
  %392 = add <4 x i32> %353, %389
  %393 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %393, align 1
  %394 = getelementptr inbounds i16, i16* %379, i64 160
  %395 = add <4 x i32> %353, %392
  %396 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %396, align 1
  %397 = getelementptr inbounds i16, i16* %379, i64 192
  %398 = add <4 x i32> %353, %395
  %399 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %399, align 1
  %400 = getelementptr inbounds i16, i16* %379, i64 224
  %401 = add <4 x i32> %353, %398
  %402 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %402, align 1
  %403 = getelementptr inbounds i16, i16* %379, i64 256
  %404 = add <4 x i32> %353, %401
  %405 = add nuw nsw i32 %380, 8
  %406 = icmp eq i32 %405, 16
  br i1 %406, label %407, label %377

407:                                              ; preds = %371, %377, %157, %163, %345, %131
  %408 = phi <4 x i32> [ %128, %131 ], [ %342, %345 ], [ %158, %157 ], [ %190, %163 ], [ %372, %371 ], [ %404, %377 ]
  %409 = bitcast <4 x i32> %408 to <16 x i8>
  %410 = shufflevector <16 x i8> %409, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %411 = bitcast <16 x i8> %410 to <4 x i32>
  %412 = add <4 x i32> %408, %411
  %413 = bitcast <4 x i32> %412 to <16 x i8>
  %414 = shufflevector <16 x i8> %413, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %415 = bitcast <16 x i8> %414 to <4 x i32>
  %416 = add <4 x i32> %412, <i32 64, i32 64, i32 64, i32 64>
  %417 = add <4 x i32> %416, %415
  %418 = ashr <4 x i32> %417, <i32 7, i32 7, i32 7, i32 7>
  %419 = bitcast <4 x i32> %418 to <8 x i16>
  %420 = shufflevector <8 x i16> %419, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %421 = bitcast <8 x i16> %420 to <4 x i32>
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> zeroinitializer
  %423 = bitcast <4 x i32> %422 to <8 x i16>
  %424 = bitcast [32 x i16]* %0 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 1
  %426 = sub <8 x i16> %425, %423
  store <8 x i16> %426, <8 x i16>* %424, align 1
  %427 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %428 = bitcast i16* %427 to <8 x i16>*
  %429 = load <8 x i16>, <8 x i16>* %428, align 1
  %430 = sub <8 x i16> %429, %423
  store <8 x i16> %430, <8 x i16>* %428, align 1
  %431 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %432 = bitcast i16* %431 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 1
  %434 = sub <8 x i16> %433, %423
  store <8 x i16> %434, <8 x i16>* %432, align 1
  %435 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 1
  %438 = sub <8 x i16> %437, %423
  store <8 x i16> %438, <8 x i16>* %436, align 1
  %439 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %440 = bitcast i16* %439 to <8 x i16>*
  %441 = load <8 x i16>, <8 x i16>* %440, align 1
  %442 = sub <8 x i16> %441, %423
  store <8 x i16> %442, <8 x i16>* %440, align 1
  %443 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 1
  %446 = sub <8 x i16> %445, %423
  store <8 x i16> %446, <8 x i16>* %444, align 1
  %447 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %448 = bitcast i16* %447 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 1
  %450 = sub <8 x i16> %449, %423
  store <8 x i16> %450, <8 x i16>* %448, align 1
  %451 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %452 = bitcast i16* %451 to <8 x i16>*
  %453 = load <8 x i16>, <8 x i16>* %452, align 1
  %454 = sub <8 x i16> %453, %423
  store <8 x i16> %454, <8 x i16>* %452, align 1
  %455 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %456 = bitcast i16* %455 to <8 x i16>*
  %457 = load <8 x i16>, <8 x i16>* %456, align 1
  %458 = sub <8 x i16> %457, %423
  store <8 x i16> %458, <8 x i16>* %456, align 1
  %459 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %460 = bitcast i16* %459 to <8 x i16>*
  %461 = load <8 x i16>, <8 x i16>* %460, align 1
  %462 = sub <8 x i16> %461, %423
  store <8 x i16> %462, <8 x i16>* %460, align 1
  %463 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %464 = bitcast i16* %463 to <8 x i16>*
  %465 = load <8 x i16>, <8 x i16>* %464, align 1
  %466 = sub <8 x i16> %465, %423
  store <8 x i16> %466, <8 x i16>* %464, align 1
  %467 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %468 = bitcast i16* %467 to <8 x i16>*
  %469 = load <8 x i16>, <8 x i16>* %468, align 1
  %470 = sub <8 x i16> %469, %423
  store <8 x i16> %470, <8 x i16>* %468, align 1
  %471 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %472 = bitcast i16* %471 to <8 x i16>*
  %473 = load <8 x i16>, <8 x i16>* %472, align 1
  %474 = sub <8 x i16> %473, %423
  store <8 x i16> %474, <8 x i16>* %472, align 1
  %475 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %476 = bitcast i16* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 1
  %478 = sub <8 x i16> %477, %423
  store <8 x i16> %478, <8 x i16>* %476, align 1
  %479 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %480 = bitcast i16* %479 to <8 x i16>*
  %481 = load <8 x i16>, <8 x i16>* %480, align 1
  %482 = sub <8 x i16> %481, %423
  store <8 x i16> %482, <8 x i16>* %480, align 1
  %483 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %484 = bitcast i16* %483 to <8 x i16>*
  %485 = load <8 x i16>, <8 x i16>* %484, align 1
  %486 = sub <8 x i16> %485, %423
  store <8 x i16> %486, <8 x i16>* %484, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi5EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %8 = ashr i32 %2, 1
  %9 = icmp slt i32 %8, 32
  %10 = select i1 %9, i32 %8, i32 32
  br i1 %6, label %11, label %193

11:                                               ; preds = %5, %11
  %12 = phi i32 [ %129, %11 ], [ 0, %5 ]
  %13 = phi i16* [ %122, %11 ], [ %7, %5 ]
  %14 = phi <4 x i32> [ %128, %11 ], [ zeroinitializer, %5 ]
  %15 = phi i8* [ %113, %11 ], [ %3, %5 ]
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = getelementptr inbounds i8, i8* %15, i64 %4
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %30 = zext <8 x i8> %29 to <8 x i16>
  %31 = bitcast <8 x i16> %30 to <4 x i32>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %33 = getelementptr inbounds i8, i8* %24, i64 %4
  %34 = add nuw nsw <8 x i16> %30, %21
  %35 = bitcast <4 x i32> %23 to <8 x i16>
  %36 = bitcast <4 x i32> %32 to <8 x i16>
  %37 = add <8 x i16> %36, %35
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %34, <8 x i16> %37) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = getelementptr inbounds i16, i16* %13, i64 32
  %42 = bitcast i8* %33 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %47 = zext <8 x i8> %46 to <8 x i16>
  %48 = bitcast <8 x i16> %47 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %50 = getelementptr inbounds i8, i8* %33, i64 %4
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %56 = zext <8 x i8> %55 to <8 x i16>
  %57 = bitcast <8 x i16> %56 to <4 x i32>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %59 = getelementptr inbounds i8, i8* %50, i64 %4
  %60 = add nuw nsw <8 x i16> %56, %47
  %61 = bitcast <4 x i32> %49 to <8 x i16>
  %62 = bitcast <4 x i32> %58 to <8 x i16>
  %63 = add <8 x i16> %62, %61
  %64 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %60, <8 x i16> %63) #6
  %65 = shl <8 x i16> %64, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %66 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 1
  %67 = add <8 x i16> %65, %39
  %68 = getelementptr inbounds i16, i16* %13, i64 64
  %69 = bitcast i8* %59 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> undef, i64 %70, i32 0
  %72 = bitcast <2 x i64> %71 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %74 = zext <8 x i8> %73 to <8 x i16>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %77 = getelementptr inbounds i8, i8* %59, i64 %4
  %78 = bitcast i8* %77 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = bitcast <2 x i64> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = bitcast <8 x i16> %83 to <4 x i32>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %86 = getelementptr inbounds i8, i8* %77, i64 %4
  %87 = add nuw nsw <8 x i16> %83, %74
  %88 = bitcast <4 x i32> %76 to <8 x i16>
  %89 = bitcast <4 x i32> %85 to <8 x i16>
  %90 = add <8 x i16> %89, %88
  %91 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %87, <8 x i16> %90) #6
  %92 = shl <8 x i16> %91, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %93 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %93, align 1
  %94 = add <8 x i16> %67, %92
  %95 = getelementptr inbounds i16, i16* %13, i64 96
  %96 = bitcast i8* %86 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %101 = zext <8 x i8> %100 to <8 x i16>
  %102 = bitcast <8 x i16> %101 to <4 x i32>
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %104 = getelementptr inbounds i8, i8* %86, i64 %4
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = bitcast <2 x i64> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %110 = zext <8 x i8> %109 to <8 x i16>
  %111 = bitcast <8 x i16> %110 to <4 x i32>
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %113 = getelementptr inbounds i8, i8* %104, i64 %4
  %114 = add nuw nsw <8 x i16> %110, %101
  %115 = bitcast <4 x i32> %103 to <8 x i16>
  %116 = bitcast <4 x i32> %112 to <8 x i16>
  %117 = add <8 x i16> %116, %115
  %118 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %114, <8 x i16> %117) #6
  %119 = shl <8 x i16> %118, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %120 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 1
  %121 = add <8 x i16> %94, %119
  %122 = getelementptr inbounds i16, i16* %13, i64 128
  %123 = shufflevector <8 x i16> %121, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = zext <4 x i16> %123 to <4 x i32>
  %125 = add <4 x i32> %14, %124
  %126 = shufflevector <8 x i16> %121, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %127 = bitcast <8 x i16> %126 to <4 x i32>
  %128 = add <4 x i32> %125, %127
  %129 = add nuw nsw i32 %12, 4
  %130 = icmp slt i32 %129, %10
  br i1 %130, label %11, label %131

131:                                              ; preds = %11
  %132 = shufflevector <8 x i16> %119, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = sext <4 x i16> %132 to <4 x i32>
  %134 = bitcast <8 x i16> %119 to <16 x i8>
  %135 = shufflevector <16 x i8> %134, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = bitcast <16 x i8> %135 to <8 x i16>
  %137 = shufflevector <8 x i16> %136, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %138 = sext <4 x i16> %137 to <4 x i32>
  %139 = add nsw <4 x i32> %138, %133
  %140 = icmp ult i32 %129, 32
  br i1 %140, label %141, label %407

141:                                              ; preds = %131
  %142 = sub nsw i32 4, %12
  %143 = sub nsw i32 27, %12
  %144 = and i32 %142, 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %141, %146
  %147 = phi <4 x i32> [ %153, %146 ], [ %128, %141 ]
  %148 = phi i16* [ %152, %146 ], [ %122, %141 ]
  %149 = phi i32 [ %154, %146 ], [ %129, %141 ]
  %150 = phi i32 [ %155, %146 ], [ %144, %141 ]
  %151 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %151, align 1
  %152 = getelementptr inbounds i16, i16* %148, i64 32
  %153 = add <4 x i32> %139, %147
  %154 = add nuw nsw i32 %149, 1
  %155 = add i32 %150, -1
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %146, !llvm.loop !9

157:                                              ; preds = %146, %141
  %158 = phi <4 x i32> [ undef, %141 ], [ %153, %146 ]
  %159 = phi <4 x i32> [ %128, %141 ], [ %153, %146 ]
  %160 = phi i16* [ %122, %141 ], [ %152, %146 ]
  %161 = phi i32 [ %129, %141 ], [ %154, %146 ]
  %162 = icmp ult i32 %143, 7
  br i1 %162, label %407, label %163

163:                                              ; preds = %157, %163
  %164 = phi <4 x i32> [ %190, %163 ], [ %159, %157 ]
  %165 = phi i16* [ %189, %163 ], [ %160, %157 ]
  %166 = phi i32 [ %191, %163 ], [ %161, %157 ]
  %167 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %165, i64 32
  %169 = add <4 x i32> %139, %164
  %170 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %170, align 1
  %171 = getelementptr inbounds i16, i16* %165, i64 64
  %172 = add <4 x i32> %139, %169
  %173 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %165, i64 96
  %175 = add <4 x i32> %139, %172
  %176 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %176, align 1
  %177 = getelementptr inbounds i16, i16* %165, i64 128
  %178 = add <4 x i32> %139, %175
  %179 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %179, align 1
  %180 = getelementptr inbounds i16, i16* %165, i64 160
  %181 = add <4 x i32> %139, %178
  %182 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %182, align 1
  %183 = getelementptr inbounds i16, i16* %165, i64 192
  %184 = add <4 x i32> %139, %181
  %185 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %185, align 1
  %186 = getelementptr inbounds i16, i16* %165, i64 224
  %187 = add <4 x i32> %139, %184
  %188 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %188, align 1
  %189 = getelementptr inbounds i16, i16* %165, i64 256
  %190 = add <4 x i32> %139, %187
  %191 = add nuw nsw i32 %166, 8
  %192 = icmp eq i32 %191, 32
  br i1 %192, label %407, label %163

193:                                              ; preds = %5, %193
  %194 = phi i32 [ %343, %193 ], [ 0, %5 ]
  %195 = phi i16* [ %336, %193 ], [ %7, %5 ]
  %196 = phi <4 x i32> [ %342, %193 ], [ zeroinitializer, %5 ]
  %197 = phi i8* [ %329, %193 ], [ %3, %5 ]
  %198 = bitcast i8* %197 to i64*
  %199 = load i64, i64* %198, align 1
  %200 = insertelement <2 x i64> undef, i64 %199, i32 0
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %203 = zext <8 x i8> %202 to <8 x i16>
  %204 = getelementptr inbounds i8, i8* %197, i64 8
  %205 = bitcast i8* %204 to i64*
  %206 = load i64, i64* %205, align 1
  %207 = insertelement <2 x i64> undef, i64 %206, i32 0
  %208 = bitcast <2 x i64> %207 to <16 x i8>
  %209 = shufflevector <16 x i8> %208, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %210 = zext <8 x i8> %209 to <8 x i16>
  %211 = getelementptr inbounds i8, i8* %197, i64 %4
  %212 = bitcast i8* %211 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = insertelement <2 x i64> undef, i64 %213, i32 0
  %215 = bitcast <2 x i64> %214 to <16 x i8>
  %216 = shufflevector <16 x i8> %215, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %217 = zext <8 x i8> %216 to <8 x i16>
  %218 = getelementptr inbounds i8, i8* %211, i64 8
  %219 = bitcast i8* %218 to i64*
  %220 = load i64, i64* %219, align 1
  %221 = insertelement <2 x i64> undef, i64 %220, i32 0
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %224 = zext <8 x i8> %223 to <8 x i16>
  %225 = getelementptr inbounds i8, i8* %211, i64 %4
  %226 = add nuw nsw <8 x i16> %217, %203
  %227 = add nuw nsw <8 x i16> %224, %210
  %228 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %226, <8 x i16> %227) #6
  %229 = shl <8 x i16> %228, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %230 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %230, align 1
  %231 = getelementptr inbounds i16, i16* %195, i64 32
  %232 = bitcast i8* %225 to i64*
  %233 = load i64, i64* %232, align 1
  %234 = insertelement <2 x i64> undef, i64 %233, i32 0
  %235 = bitcast <2 x i64> %234 to <16 x i8>
  %236 = shufflevector <16 x i8> %235, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %237 = zext <8 x i8> %236 to <8 x i16>
  %238 = getelementptr inbounds i8, i8* %225, i64 8
  %239 = bitcast i8* %238 to i64*
  %240 = load i64, i64* %239, align 1
  %241 = insertelement <2 x i64> undef, i64 %240, i32 0
  %242 = bitcast <2 x i64> %241 to <16 x i8>
  %243 = shufflevector <16 x i8> %242, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %244 = zext <8 x i8> %243 to <8 x i16>
  %245 = getelementptr inbounds i8, i8* %225, i64 %4
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> undef, i64 %247, i32 0
  %249 = bitcast <2 x i64> %248 to <16 x i8>
  %250 = shufflevector <16 x i8> %249, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %251 = zext <8 x i8> %250 to <8 x i16>
  %252 = getelementptr inbounds i8, i8* %245, i64 8
  %253 = bitcast i8* %252 to i64*
  %254 = load i64, i64* %253, align 1
  %255 = insertelement <2 x i64> undef, i64 %254, i32 0
  %256 = bitcast <2 x i64> %255 to <16 x i8>
  %257 = shufflevector <16 x i8> %256, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %258 = zext <8 x i8> %257 to <8 x i16>
  %259 = getelementptr inbounds i8, i8* %245, i64 %4
  %260 = add nuw nsw <8 x i16> %251, %237
  %261 = add nuw nsw <8 x i16> %258, %244
  %262 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %260, <8 x i16> %261) #6
  %263 = shl <8 x i16> %262, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %264 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %264, align 1
  %265 = add <8 x i16> %263, %229
  %266 = getelementptr inbounds i16, i16* %195, i64 64
  %267 = bitcast i8* %259 to i64*
  %268 = load i64, i64* %267, align 1
  %269 = insertelement <2 x i64> undef, i64 %268, i32 0
  %270 = bitcast <2 x i64> %269 to <16 x i8>
  %271 = shufflevector <16 x i8> %270, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %272 = zext <8 x i8> %271 to <8 x i16>
  %273 = getelementptr inbounds i8, i8* %259, i64 8
  %274 = bitcast i8* %273 to i64*
  %275 = load i64, i64* %274, align 1
  %276 = insertelement <2 x i64> undef, i64 %275, i32 0
  %277 = bitcast <2 x i64> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %279 = zext <8 x i8> %278 to <8 x i16>
  %280 = getelementptr inbounds i8, i8* %259, i64 %4
  %281 = bitcast i8* %280 to i64*
  %282 = load i64, i64* %281, align 1
  %283 = insertelement <2 x i64> undef, i64 %282, i32 0
  %284 = bitcast <2 x i64> %283 to <16 x i8>
  %285 = shufflevector <16 x i8> %284, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %286 = zext <8 x i8> %285 to <8 x i16>
  %287 = getelementptr inbounds i8, i8* %280, i64 8
  %288 = bitcast i8* %287 to i64*
  %289 = load i64, i64* %288, align 1
  %290 = insertelement <2 x i64> undef, i64 %289, i32 0
  %291 = bitcast <2 x i64> %290 to <16 x i8>
  %292 = shufflevector <16 x i8> %291, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %293 = zext <8 x i8> %292 to <8 x i16>
  %294 = getelementptr inbounds i8, i8* %280, i64 %4
  %295 = add nuw nsw <8 x i16> %286, %272
  %296 = add nuw nsw <8 x i16> %293, %279
  %297 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %295, <8 x i16> %296) #6
  %298 = shl <8 x i16> %297, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %299 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %299, align 1
  %300 = add <8 x i16> %265, %298
  %301 = getelementptr inbounds i16, i16* %195, i64 96
  %302 = bitcast i8* %294 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = insertelement <2 x i64> undef, i64 %303, i32 0
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %307 = zext <8 x i8> %306 to <8 x i16>
  %308 = getelementptr inbounds i8, i8* %294, i64 8
  %309 = bitcast i8* %308 to i64*
  %310 = load i64, i64* %309, align 1
  %311 = insertelement <2 x i64> undef, i64 %310, i32 0
  %312 = bitcast <2 x i64> %311 to <16 x i8>
  %313 = shufflevector <16 x i8> %312, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %314 = zext <8 x i8> %313 to <8 x i16>
  %315 = getelementptr inbounds i8, i8* %294, i64 %4
  %316 = bitcast i8* %315 to i64*
  %317 = load i64, i64* %316, align 1
  %318 = insertelement <2 x i64> undef, i64 %317, i32 0
  %319 = bitcast <2 x i64> %318 to <16 x i8>
  %320 = shufflevector <16 x i8> %319, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %321 = zext <8 x i8> %320 to <8 x i16>
  %322 = getelementptr inbounds i8, i8* %315, i64 8
  %323 = bitcast i8* %322 to i64*
  %324 = load i64, i64* %323, align 1
  %325 = insertelement <2 x i64> undef, i64 %324, i32 0
  %326 = bitcast <2 x i64> %325 to <16 x i8>
  %327 = shufflevector <16 x i8> %326, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %328 = zext <8 x i8> %327 to <8 x i16>
  %329 = getelementptr inbounds i8, i8* %315, i64 %4
  %330 = add nuw nsw <8 x i16> %321, %307
  %331 = add nuw nsw <8 x i16> %328, %314
  %332 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %330, <8 x i16> %331) #6
  %333 = shl <8 x i16> %332, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %334 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %334, align 1
  %335 = add <8 x i16> %300, %333
  %336 = getelementptr inbounds i16, i16* %195, i64 128
  %337 = shufflevector <8 x i16> %335, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %338 = zext <4 x i16> %337 to <4 x i32>
  %339 = add <4 x i32> %196, %338
  %340 = shufflevector <8 x i16> %335, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %341 = bitcast <8 x i16> %340 to <4 x i32>
  %342 = add <4 x i32> %339, %341
  %343 = add nuw nsw i32 %194, 4
  %344 = icmp slt i32 %343, %10
  br i1 %344, label %193, label %345

345:                                              ; preds = %193
  %346 = shufflevector <8 x i16> %333, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %347 = sext <4 x i16> %346 to <4 x i32>
  %348 = bitcast <8 x i16> %333 to <16 x i8>
  %349 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %350 = bitcast <16 x i8> %349 to <8 x i16>
  %351 = shufflevector <8 x i16> %350, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %352 = sext <4 x i16> %351 to <4 x i32>
  %353 = add nsw <4 x i32> %352, %347
  %354 = icmp ult i32 %343, 32
  br i1 %354, label %355, label %407

355:                                              ; preds = %345
  %356 = sub nsw i32 4, %194
  %357 = sub nsw i32 27, %194
  %358 = and i32 %356, 4
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %371, label %360

360:                                              ; preds = %355, %360
  %361 = phi <4 x i32> [ %367, %360 ], [ %342, %355 ]
  %362 = phi i16* [ %366, %360 ], [ %336, %355 ]
  %363 = phi i32 [ %368, %360 ], [ %343, %355 ]
  %364 = phi i32 [ %369, %360 ], [ %358, %355 ]
  %365 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %365, align 1
  %366 = getelementptr inbounds i16, i16* %362, i64 32
  %367 = add <4 x i32> %353, %361
  %368 = add nuw nsw i32 %363, 1
  %369 = add i32 %364, -1
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %371, label %360, !llvm.loop !10

371:                                              ; preds = %360, %355
  %372 = phi <4 x i32> [ undef, %355 ], [ %367, %360 ]
  %373 = phi <4 x i32> [ %342, %355 ], [ %367, %360 ]
  %374 = phi i16* [ %336, %355 ], [ %366, %360 ]
  %375 = phi i32 [ %343, %355 ], [ %368, %360 ]
  %376 = icmp ult i32 %357, 7
  br i1 %376, label %407, label %377

377:                                              ; preds = %371, %377
  %378 = phi <4 x i32> [ %404, %377 ], [ %373, %371 ]
  %379 = phi i16* [ %403, %377 ], [ %374, %371 ]
  %380 = phi i32 [ %405, %377 ], [ %375, %371 ]
  %381 = bitcast i16* %379 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %381, align 1
  %382 = getelementptr inbounds i16, i16* %379, i64 32
  %383 = add <4 x i32> %353, %378
  %384 = bitcast i16* %382 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %384, align 1
  %385 = getelementptr inbounds i16, i16* %379, i64 64
  %386 = add <4 x i32> %353, %383
  %387 = bitcast i16* %385 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %387, align 1
  %388 = getelementptr inbounds i16, i16* %379, i64 96
  %389 = add <4 x i32> %353, %386
  %390 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %390, align 1
  %391 = getelementptr inbounds i16, i16* %379, i64 128
  %392 = add <4 x i32> %353, %389
  %393 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %393, align 1
  %394 = getelementptr inbounds i16, i16* %379, i64 160
  %395 = add <4 x i32> %353, %392
  %396 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %396, align 1
  %397 = getelementptr inbounds i16, i16* %379, i64 192
  %398 = add <4 x i32> %353, %395
  %399 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %399, align 1
  %400 = getelementptr inbounds i16, i16* %379, i64 224
  %401 = add <4 x i32> %353, %398
  %402 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %333, <8 x i16>* %402, align 1
  %403 = getelementptr inbounds i16, i16* %379, i64 256
  %404 = add <4 x i32> %353, %401
  %405 = add nuw nsw i32 %380, 8
  %406 = icmp eq i32 %405, 32
  br i1 %406, label %407, label %377

407:                                              ; preds = %371, %377, %157, %163, %345, %131
  %408 = phi <4 x i32> [ %128, %131 ], [ %342, %345 ], [ %158, %157 ], [ %190, %163 ], [ %372, %371 ], [ %404, %377 ]
  %409 = bitcast <4 x i32> %408 to <16 x i8>
  %410 = shufflevector <16 x i8> %409, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %411 = bitcast <16 x i8> %410 to <4 x i32>
  %412 = add <4 x i32> %408, %411
  %413 = bitcast <4 x i32> %412 to <16 x i8>
  %414 = shufflevector <16 x i8> %413, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %415 = bitcast <16 x i8> %414 to <4 x i32>
  %416 = add <4 x i32> %412, <i32 128, i32 128, i32 128, i32 128>
  %417 = add <4 x i32> %416, %415
  %418 = ashr <4 x i32> %417, <i32 8, i32 8, i32 8, i32 8>
  %419 = bitcast <4 x i32> %418 to <8 x i16>
  %420 = shufflevector <8 x i16> %419, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %421 = bitcast <8 x i16> %420 to <4 x i32>
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> zeroinitializer
  %423 = bitcast <4 x i32> %422 to <8 x i16>
  %424 = bitcast [32 x i16]* %0 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 1
  %426 = sub <8 x i16> %425, %423
  store <8 x i16> %426, <8 x i16>* %424, align 1
  %427 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %428 = bitcast i16* %427 to <8 x i16>*
  %429 = load <8 x i16>, <8 x i16>* %428, align 1
  %430 = sub <8 x i16> %429, %423
  store <8 x i16> %430, <8 x i16>* %428, align 1
  %431 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %432 = bitcast i16* %431 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 1
  %434 = sub <8 x i16> %433, %423
  store <8 x i16> %434, <8 x i16>* %432, align 1
  %435 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 1
  %438 = sub <8 x i16> %437, %423
  store <8 x i16> %438, <8 x i16>* %436, align 1
  %439 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %440 = bitcast i16* %439 to <8 x i16>*
  %441 = load <8 x i16>, <8 x i16>* %440, align 1
  %442 = sub <8 x i16> %441, %423
  store <8 x i16> %442, <8 x i16>* %440, align 1
  %443 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 1
  %446 = sub <8 x i16> %445, %423
  store <8 x i16> %446, <8 x i16>* %444, align 1
  %447 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %448 = bitcast i16* %447 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 1
  %450 = sub <8 x i16> %449, %423
  store <8 x i16> %450, <8 x i16>* %448, align 1
  %451 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %452 = bitcast i16* %451 to <8 x i16>*
  %453 = load <8 x i16>, <8 x i16>* %452, align 1
  %454 = sub <8 x i16> %453, %423
  store <8 x i16> %454, <8 x i16>* %452, align 1
  %455 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %456 = bitcast i16* %455 to <8 x i16>*
  %457 = load <8 x i16>, <8 x i16>* %456, align 1
  %458 = sub <8 x i16> %457, %423
  store <8 x i16> %458, <8 x i16>* %456, align 1
  %459 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %460 = bitcast i16* %459 to <8 x i16>*
  %461 = load <8 x i16>, <8 x i16>* %460, align 1
  %462 = sub <8 x i16> %461, %423
  store <8 x i16> %462, <8 x i16>* %460, align 1
  %463 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %464 = bitcast i16* %463 to <8 x i16>*
  %465 = load <8 x i16>, <8 x i16>* %464, align 1
  %466 = sub <8 x i16> %465, %423
  store <8 x i16> %466, <8 x i16>* %464, align 1
  %467 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %468 = bitcast i16* %467 to <8 x i16>*
  %469 = load <8 x i16>, <8 x i16>* %468, align 1
  %470 = sub <8 x i16> %469, %423
  store <8 x i16> %470, <8 x i16>* %468, align 1
  %471 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %472 = bitcast i16* %471 to <8 x i16>*
  %473 = load <8 x i16>, <8 x i16>* %472, align 1
  %474 = sub <8 x i16> %473, %423
  store <8 x i16> %474, <8 x i16>* %472, align 1
  %475 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %476 = bitcast i16* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 1
  %478 = sub <8 x i16> %477, %423
  store <8 x i16> %478, <8 x i16>* %476, align 1
  %479 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %480 = bitcast i16* %479 to <8 x i16>*
  %481 = load <8 x i16>, <8 x i16>* %480, align 1
  %482 = sub <8 x i16> %481, %423
  store <8 x i16> %482, <8 x i16>* %480, align 1
  %483 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %484 = bitcast i16* %483 to <8 x i16>*
  %485 = load <8 x i16>, <8 x i16>* %484, align 1
  %486 = sub <8 x i16> %485, %423
  store <8 x i16> %486, <8 x i16>* %484, align 1
  %487 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 512
  %488 = bitcast i16* %487 to <8 x i16>*
  %489 = load <8 x i16>, <8 x i16>* %488, align 1
  %490 = sub <8 x i16> %489, %423
  store <8 x i16> %490, <8 x i16>* %488, align 1
  %491 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 544
  %492 = bitcast i16* %491 to <8 x i16>*
  %493 = load <8 x i16>, <8 x i16>* %492, align 1
  %494 = sub <8 x i16> %493, %423
  store <8 x i16> %494, <8 x i16>* %492, align 1
  %495 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 576
  %496 = bitcast i16* %495 to <8 x i16>*
  %497 = load <8 x i16>, <8 x i16>* %496, align 1
  %498 = sub <8 x i16> %497, %423
  store <8 x i16> %498, <8 x i16>* %496, align 1
  %499 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 608
  %500 = bitcast i16* %499 to <8 x i16>*
  %501 = load <8 x i16>, <8 x i16>* %500, align 1
  %502 = sub <8 x i16> %501, %423
  store <8 x i16> %502, <8 x i16>* %500, align 1
  %503 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 640
  %504 = bitcast i16* %503 to <8 x i16>*
  %505 = load <8 x i16>, <8 x i16>* %504, align 1
  %506 = sub <8 x i16> %505, %423
  store <8 x i16> %506, <8 x i16>* %504, align 1
  %507 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 672
  %508 = bitcast i16* %507 to <8 x i16>*
  %509 = load <8 x i16>, <8 x i16>* %508, align 1
  %510 = sub <8 x i16> %509, %423
  store <8 x i16> %510, <8 x i16>* %508, align 1
  %511 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 704
  %512 = bitcast i16* %511 to <8 x i16>*
  %513 = load <8 x i16>, <8 x i16>* %512, align 1
  %514 = sub <8 x i16> %513, %423
  store <8 x i16> %514, <8 x i16>* %512, align 1
  %515 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 736
  %516 = bitcast i16* %515 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 1
  %518 = sub <8 x i16> %517, %423
  store <8 x i16> %518, <8 x i16>* %516, align 1
  %519 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 768
  %520 = bitcast i16* %519 to <8 x i16>*
  %521 = load <8 x i16>, <8 x i16>* %520, align 1
  %522 = sub <8 x i16> %521, %423
  store <8 x i16> %522, <8 x i16>* %520, align 1
  %523 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 800
  %524 = bitcast i16* %523 to <8 x i16>*
  %525 = load <8 x i16>, <8 x i16>* %524, align 1
  %526 = sub <8 x i16> %525, %423
  store <8 x i16> %526, <8 x i16>* %524, align 1
  %527 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 832
  %528 = bitcast i16* %527 to <8 x i16>*
  %529 = load <8 x i16>, <8 x i16>* %528, align 1
  %530 = sub <8 x i16> %529, %423
  store <8 x i16> %530, <8 x i16>* %528, align 1
  %531 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 864
  %532 = bitcast i16* %531 to <8 x i16>*
  %533 = load <8 x i16>, <8 x i16>* %532, align 1
  %534 = sub <8 x i16> %533, %423
  store <8 x i16> %534, <8 x i16>* %532, align 1
  %535 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 896
  %536 = bitcast i16* %535 to <8 x i16>*
  %537 = load <8 x i16>, <8 x i16>* %536, align 1
  %538 = sub <8 x i16> %537, %423
  store <8 x i16> %538, <8 x i16>* %536, align 1
  %539 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 928
  %540 = bitcast i16* %539 to <8 x i16>*
  %541 = load <8 x i16>, <8 x i16>* %540, align 1
  %542 = sub <8 x i16> %541, %423
  store <8 x i16> %542, <8 x i16>* %540, align 1
  %543 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 960
  %544 = bitcast i16* %543 to <8 x i16>*
  %545 = load <8 x i16>, <8 x i16>* %544, align 1
  %546 = sub <8 x i16> %545, %423
  store <8 x i16> %546, <8 x i16>* %544, align 1
  %547 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 992
  %548 = bitcast i16* %547 to <8 x i16>*
  %549 = load <8 x i16>, <8 x i16>* %548, align 1
  %550 = sub <8 x i16> %549, %423
  store <8 x i16> %550, <8 x i16>* %548, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi2EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %303 [
    i32 8, label %6
    i32 16, label %98
    i32 24, label %195
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 4
  %9 = select i1 %8, i32 %7, i32 4
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %50, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %49, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %48, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %15
  %48 = getelementptr inbounds i8, i8* %16, i64 %11
  %49 = getelementptr inbounds i16, i16* %14, i64 32
  %50 = add nuw nsw i32 %13, 1
  %51 = icmp slt i32 %50, %9
  br i1 %51, label %12, label %52

52:                                               ; preds = %12
  %53 = icmp ult i32 %50, 4
  br i1 %53, label %54, label %409

54:                                               ; preds = %52
  %55 = sub nsw i32 3, %13
  %56 = sub nsw i32 2, %13
  %57 = and i32 %55, 3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %54, %59
  %60 = phi i16* [ %66, %59 ], [ %49, %54 ]
  %61 = phi <4 x i32> [ %67, %59 ], [ %47, %54 ]
  %62 = phi i32 [ %68, %59 ], [ %57, %54 ]
  %63 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %63, align 1
  %64 = getelementptr inbounds i16, i16* %60, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %65, align 1
  %66 = getelementptr inbounds i16, i16* %60, i64 32
  %67 = add <4 x i32> %46, %61
  %68 = add i32 %62, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %59, !llvm.loop !11

70:                                               ; preds = %59, %54
  %71 = phi <4 x i32> [ undef, %54 ], [ %67, %59 ]
  %72 = phi i16* [ %49, %54 ], [ %66, %59 ]
  %73 = phi <4 x i32> [ %47, %54 ], [ %67, %59 ]
  %74 = icmp ult i32 %56, 3
  br i1 %74, label %409, label %75

75:                                               ; preds = %70, %75
  %76 = phi i16* [ %96, %75 ], [ %72, %70 ]
  %77 = phi <4 x i32> [ %97, %75 ], [ %73, %70 ]
  %78 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %76, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %80, align 1
  %81 = getelementptr inbounds i16, i16* %76, i64 32
  %82 = add <4 x i32> %46, %77
  %83 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %83, align 1
  %84 = getelementptr inbounds i16, i16* %76, i64 40
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %85, align 1
  %86 = getelementptr inbounds i16, i16* %76, i64 64
  %87 = add <4 x i32> %46, %82
  %88 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %88, align 1
  %89 = getelementptr inbounds i16, i16* %76, i64 72
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %90, align 1
  %91 = getelementptr inbounds i16, i16* %76, i64 96
  %92 = add <4 x i32> %46, %87
  %93 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %93, align 1
  %94 = getelementptr inbounds i16, i16* %76, i64 104
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %95, align 1
  %96 = getelementptr inbounds i16, i16* %76, i64 128
  %97 = add <4 x i32> %46, %92
  br label %75

98:                                               ; preds = %5
  %99 = ashr i32 %2, 1
  %100 = icmp slt i32 %99, 4
  %101 = select i1 %100, i32 %99, i32 4
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %103 = shl i64 %4, 1
  br label %104

104:                                              ; preds = %104, %98
  %105 = phi i32 [ 0, %98 ], [ %147, %104 ]
  %106 = phi i16* [ %102, %98 ], [ %146, %104 ]
  %107 = phi <4 x i32> [ zeroinitializer, %98 ], [ %144, %104 ]
  %108 = phi i8* [ %3, %98 ], [ %145, %104 ]
  %109 = getelementptr inbounds i8, i8* %108, i64 %4
  %110 = bitcast i8* %108 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %113 = zext <8 x i8> %112 to <8 x i16>
  %114 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %115 = bitcast <16 x i8> %114 to <4 x i32>
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %117 = bitcast i8* %109 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %120 = zext <8 x i8> %119 to <8 x i16>
  %121 = shufflevector <16 x i8> %118, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %122 = bitcast <16 x i8> %121 to <4 x i32>
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %124 = add nuw nsw <8 x i16> %120, %113
  %125 = bitcast <16 x i8> %114 to <8 x i16>
  %126 = bitcast <16 x i8> %121 to <8 x i16>
  %127 = add <8 x i16> %126, %125
  %128 = bitcast <4 x i32> %116 to <8 x i16>
  %129 = bitcast <4 x i32> %123 to <8 x i16>
  %130 = add <8 x i16> %129, %128
  %131 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %124, <8 x i16> %127) #6
  %132 = shl <8 x i16> %131, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %133 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %106, i64 8
  %135 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %130, <8 x i16> %130) #6
  %136 = shl <8 x i16> %135, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %137 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 1
  %138 = add <8 x i16> %136, %132
  %139 = shufflevector <8 x i16> %138, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %140 = zext <4 x i16> %139 to <4 x i32>
  %141 = shufflevector <8 x i16> %138, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = bitcast <8 x i16> %141 to <4 x i32>
  %143 = add <4 x i32> %142, %140
  %144 = add <4 x i32> %143, %107
  %145 = getelementptr inbounds i8, i8* %108, i64 %103
  %146 = getelementptr inbounds i16, i16* %106, i64 32
  %147 = add nuw nsw i32 %105, 1
  %148 = icmp slt i32 %147, %101
  br i1 %148, label %104, label %149

149:                                              ; preds = %104
  %150 = icmp ult i32 %147, 4
  br i1 %150, label %151, label %409

151:                                              ; preds = %149
  %152 = sub nsw i32 3, %105
  %153 = sub nsw i32 2, %105
  %154 = and i32 %152, 3
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %167, label %156

156:                                              ; preds = %151, %156
  %157 = phi i16* [ %163, %156 ], [ %146, %151 ]
  %158 = phi <4 x i32> [ %164, %156 ], [ %144, %151 ]
  %159 = phi i32 [ %165, %156 ], [ %154, %151 ]
  %160 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %160, align 1
  %161 = getelementptr inbounds i16, i16* %157, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %157, i64 32
  %164 = add <4 x i32> %143, %158
  %165 = add i32 %159, -1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %156, !llvm.loop !12

167:                                              ; preds = %156, %151
  %168 = phi <4 x i32> [ undef, %151 ], [ %164, %156 ]
  %169 = phi i16* [ %146, %151 ], [ %163, %156 ]
  %170 = phi <4 x i32> [ %144, %151 ], [ %164, %156 ]
  %171 = icmp ult i32 %153, 3
  br i1 %171, label %409, label %172

172:                                              ; preds = %167, %172
  %173 = phi i16* [ %193, %172 ], [ %169, %167 ]
  %174 = phi <4 x i32> [ %194, %172 ], [ %170, %167 ]
  %175 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %175, align 1
  %176 = getelementptr inbounds i16, i16* %173, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %177, align 1
  %178 = getelementptr inbounds i16, i16* %173, i64 32
  %179 = add <4 x i32> %143, %174
  %180 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %180, align 1
  %181 = getelementptr inbounds i16, i16* %173, i64 40
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %182, align 1
  %183 = getelementptr inbounds i16, i16* %173, i64 64
  %184 = add <4 x i32> %143, %179
  %185 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %185, align 1
  %186 = getelementptr inbounds i16, i16* %173, i64 72
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %187, align 1
  %188 = getelementptr inbounds i16, i16* %173, i64 96
  %189 = add <4 x i32> %143, %184
  %190 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %190, align 1
  %191 = getelementptr inbounds i16, i16* %173, i64 104
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %192, align 1
  %193 = getelementptr inbounds i16, i16* %173, i64 128
  %194 = add <4 x i32> %143, %189
  br label %172

195:                                              ; preds = %5
  %196 = ashr i32 %2, 1
  %197 = icmp slt i32 %196, 4
  %198 = select i1 %197, i32 %196, i32 4
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %200 = shl i64 %4, 1
  br label %201

201:                                              ; preds = %201, %195
  %202 = phi i32 [ 0, %195 ], [ %255, %201 ]
  %203 = phi i16* [ %199, %195 ], [ %254, %201 ]
  %204 = phi <4 x i32> [ zeroinitializer, %195 ], [ %252, %201 ]
  %205 = phi i8* [ %3, %195 ], [ %253, %201 ]
  %206 = getelementptr inbounds i8, i8* %205, i64 %4
  %207 = bitcast i8* %205 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1
  %209 = shufflevector <16 x i8> %208, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %210 = zext <8 x i8> %209 to <8 x i16>
  %211 = shufflevector <16 x i8> %208, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %212 = getelementptr inbounds i8, i8* %205, i64 16
  %213 = bitcast i8* %212 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1
  %215 = shufflevector <16 x i8> %214, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %216 = zext <8 x i8> %215 to <8 x i16>
  %217 = bitcast <8 x i16> %216 to <4 x i32>
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %219 = bitcast i8* %206 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1
  %221 = shufflevector <16 x i8> %220, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %222 = zext <8 x i8> %221 to <8 x i16>
  %223 = shufflevector <16 x i8> %220, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = getelementptr inbounds i8, i8* %206, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = zext <8 x i8> %227 to <8 x i16>
  %229 = bitcast <8 x i16> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %231 = add nuw nsw <8 x i16> %222, %210
  %232 = bitcast <16 x i8> %211 to <8 x i16>
  %233 = bitcast <16 x i8> %223 to <8 x i16>
  %234 = add <8 x i16> %233, %232
  %235 = add nuw nsw <8 x i16> %228, %216
  %236 = bitcast <4 x i32> %218 to <8 x i16>
  %237 = bitcast <4 x i32> %230 to <8 x i16>
  %238 = add <8 x i16> %237, %236
  %239 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %231, <8 x i16> %234) #6
  %240 = shl <8 x i16> %239, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %241 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %203, i64 8
  %243 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %235, <8 x i16> %238) #6
  %244 = shl <8 x i16> %243, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %245 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %245, align 1
  %246 = add <8 x i16> %244, %240
  %247 = shufflevector <8 x i16> %246, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %248 = zext <4 x i16> %247 to <4 x i32>
  %249 = shufflevector <8 x i16> %246, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %250 = bitcast <8 x i16> %249 to <4 x i32>
  %251 = add <4 x i32> %250, %248
  %252 = add <4 x i32> %251, %204
  %253 = getelementptr inbounds i8, i8* %205, i64 %200
  %254 = getelementptr inbounds i16, i16* %203, i64 32
  %255 = add nuw nsw i32 %202, 1
  %256 = icmp slt i32 %255, %198
  br i1 %256, label %201, label %257

257:                                              ; preds = %201
  %258 = icmp ult i32 %255, 4
  br i1 %258, label %259, label %409

259:                                              ; preds = %257
  %260 = sub nsw i32 3, %202
  %261 = sub nsw i32 2, %202
  %262 = and i32 %260, 3
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %275, label %264

264:                                              ; preds = %259, %264
  %265 = phi i16* [ %271, %264 ], [ %254, %259 ]
  %266 = phi <4 x i32> [ %272, %264 ], [ %252, %259 ]
  %267 = phi i32 [ %273, %264 ], [ %262, %259 ]
  %268 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %268, align 1
  %269 = getelementptr inbounds i16, i16* %265, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %270, align 1
  %271 = getelementptr inbounds i16, i16* %265, i64 32
  %272 = add <4 x i32> %251, %266
  %273 = add i32 %267, -1
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %264, !llvm.loop !13

275:                                              ; preds = %264, %259
  %276 = phi <4 x i32> [ undef, %259 ], [ %272, %264 ]
  %277 = phi i16* [ %254, %259 ], [ %271, %264 ]
  %278 = phi <4 x i32> [ %252, %259 ], [ %272, %264 ]
  %279 = icmp ult i32 %261, 3
  br i1 %279, label %409, label %280

280:                                              ; preds = %275, %280
  %281 = phi i16* [ %301, %280 ], [ %277, %275 ]
  %282 = phi <4 x i32> [ %302, %280 ], [ %278, %275 ]
  %283 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %281, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %285, align 1
  %286 = getelementptr inbounds i16, i16* %281, i64 32
  %287 = add <4 x i32> %251, %282
  %288 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %288, align 1
  %289 = getelementptr inbounds i16, i16* %281, i64 40
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %290, align 1
  %291 = getelementptr inbounds i16, i16* %281, i64 64
  %292 = add <4 x i32> %251, %287
  %293 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %293, align 1
  %294 = getelementptr inbounds i16, i16* %281, i64 72
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %295, align 1
  %296 = getelementptr inbounds i16, i16* %281, i64 96
  %297 = add <4 x i32> %251, %292
  %298 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %298, align 1
  %299 = getelementptr inbounds i16, i16* %281, i64 104
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %300, align 1
  %301 = getelementptr inbounds i16, i16* %281, i64 128
  %302 = add <4 x i32> %251, %297
  br label %280

303:                                              ; preds = %5
  %304 = ashr i32 %2, 1
  %305 = icmp slt i32 %304, 4
  %306 = select i1 %305, i32 %304, i32 4
  %307 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %308 = shl i64 %4, 1
  br label %309

309:                                              ; preds = %309, %303
  %310 = phi i32 [ 0, %303 ], [ %361, %309 ]
  %311 = phi i16* [ %307, %303 ], [ %360, %309 ]
  %312 = phi <4 x i32> [ zeroinitializer, %303 ], [ %358, %309 ]
  %313 = phi i8* [ %3, %303 ], [ %359, %309 ]
  %314 = getelementptr inbounds i8, i8* %313, i64 %4
  %315 = bitcast i8* %313 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1
  %317 = shufflevector <16 x i8> %316, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %318 = zext <8 x i8> %317 to <8 x i16>
  %319 = shufflevector <16 x i8> %316, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %320 = getelementptr inbounds i8, i8* %313, i64 16
  %321 = bitcast i8* %320 to <16 x i8>*
  %322 = load <16 x i8>, <16 x i8>* %321, align 1
  %323 = shufflevector <16 x i8> %322, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %324 = zext <8 x i8> %323 to <8 x i16>
  %325 = shufflevector <16 x i8> %322, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %326 = bitcast i8* %314 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1
  %328 = shufflevector <16 x i8> %327, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %329 = zext <8 x i8> %328 to <8 x i16>
  %330 = shufflevector <16 x i8> %327, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %331 = getelementptr inbounds i8, i8* %314, i64 16
  %332 = bitcast i8* %331 to <16 x i8>*
  %333 = load <16 x i8>, <16 x i8>* %332, align 1
  %334 = shufflevector <16 x i8> %333, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %335 = zext <8 x i8> %334 to <8 x i16>
  %336 = shufflevector <16 x i8> %333, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %337 = add nuw nsw <8 x i16> %329, %318
  %338 = bitcast <16 x i8> %319 to <8 x i16>
  %339 = bitcast <16 x i8> %330 to <8 x i16>
  %340 = add <8 x i16> %339, %338
  %341 = add nuw nsw <8 x i16> %335, %324
  %342 = bitcast <16 x i8> %325 to <8 x i16>
  %343 = bitcast <16 x i8> %336 to <8 x i16>
  %344 = add <8 x i16> %343, %342
  %345 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %337, <8 x i16> %340) #6
  %346 = shl <8 x i16> %345, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %347 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %347, align 1
  %348 = getelementptr inbounds i16, i16* %311, i64 8
  %349 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %341, <8 x i16> %344) #6
  %350 = shl <8 x i16> %349, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %351 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %351, align 1
  %352 = add <8 x i16> %350, %346
  %353 = shufflevector <8 x i16> %352, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %354 = zext <4 x i16> %353 to <4 x i32>
  %355 = shufflevector <8 x i16> %352, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %356 = bitcast <8 x i16> %355 to <4 x i32>
  %357 = add <4 x i32> %356, %354
  %358 = add <4 x i32> %357, %312
  %359 = getelementptr inbounds i8, i8* %313, i64 %308
  %360 = getelementptr inbounds i16, i16* %311, i64 32
  %361 = add nuw nsw i32 %310, 1
  %362 = icmp slt i32 %361, %306
  br i1 %362, label %309, label %363

363:                                              ; preds = %309
  %364 = icmp ult i32 %361, 4
  br i1 %364, label %365, label %409

365:                                              ; preds = %363
  %366 = sub nsw i32 3, %310
  %367 = sub nsw i32 2, %310
  %368 = and i32 %366, 3
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %381, label %370

370:                                              ; preds = %365, %370
  %371 = phi i16* [ %377, %370 ], [ %360, %365 ]
  %372 = phi <4 x i32> [ %378, %370 ], [ %358, %365 ]
  %373 = phi i32 [ %379, %370 ], [ %368, %365 ]
  %374 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %374, align 1
  %375 = getelementptr inbounds i16, i16* %371, i64 8
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %376, align 1
  %377 = getelementptr inbounds i16, i16* %371, i64 32
  %378 = add <4 x i32> %357, %372
  %379 = add i32 %373, -1
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %381, label %370, !llvm.loop !14

381:                                              ; preds = %370, %365
  %382 = phi <4 x i32> [ undef, %365 ], [ %378, %370 ]
  %383 = phi i16* [ %360, %365 ], [ %377, %370 ]
  %384 = phi <4 x i32> [ %358, %365 ], [ %378, %370 ]
  %385 = icmp ult i32 %367, 3
  br i1 %385, label %409, label %386

386:                                              ; preds = %381, %386
  %387 = phi i16* [ %407, %386 ], [ %383, %381 ]
  %388 = phi <4 x i32> [ %408, %386 ], [ %384, %381 ]
  %389 = bitcast i16* %387 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %389, align 1
  %390 = getelementptr inbounds i16, i16* %387, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %391, align 1
  %392 = getelementptr inbounds i16, i16* %387, i64 32
  %393 = add <4 x i32> %357, %388
  %394 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %394, align 1
  %395 = getelementptr inbounds i16, i16* %387, i64 40
  %396 = bitcast i16* %395 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %396, align 1
  %397 = getelementptr inbounds i16, i16* %387, i64 64
  %398 = add <4 x i32> %357, %393
  %399 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %399, align 1
  %400 = getelementptr inbounds i16, i16* %387, i64 72
  %401 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %401, align 1
  %402 = getelementptr inbounds i16, i16* %387, i64 96
  %403 = add <4 x i32> %357, %398
  %404 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %404, align 1
  %405 = getelementptr inbounds i16, i16* %387, i64 104
  %406 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %406, align 1
  %407 = getelementptr inbounds i16, i16* %387, i64 128
  %408 = add <4 x i32> %357, %403
  br label %386

409:                                              ; preds = %275, %167, %70, %381, %363, %257, %149, %52
  %410 = phi <4 x i32> [ %47, %52 ], [ %144, %149 ], [ %252, %257 ], [ %358, %363 ], [ %382, %381 ], [ %71, %70 ], [ %168, %167 ], [ %276, %275 ]
  %411 = bitcast <4 x i32> %410 to <16 x i8>
  %412 = shufflevector <16 x i8> %411, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %413 = bitcast <16 x i8> %412 to <4 x i32>
  %414 = add <4 x i32> %410, %413
  %415 = bitcast <4 x i32> %414 to <16 x i8>
  %416 = shufflevector <16 x i8> %415, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %417 = bitcast <16 x i8> %416 to <4 x i32>
  %418 = add <4 x i32> %414, <i32 32, i32 32, i32 32, i32 32>
  %419 = add <4 x i32> %418, %417
  %420 = ashr <4 x i32> %419, <i32 6, i32 6, i32 6, i32 6>
  %421 = bitcast <4 x i32> %420 to <8 x i16>
  %422 = shufflevector <8 x i16> %421, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %423 = bitcast <8 x i16> %422 to <4 x i32>
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> zeroinitializer
  %425 = bitcast <4 x i32> %424 to <8 x i16>
  %426 = bitcast [32 x i16]* %0 to <8 x i16>*
  %427 = load <8 x i16>, <8 x i16>* %426, align 1
  %428 = sub <8 x i16> %427, %425
  store <8 x i16> %428, <8 x i16>* %426, align 1
  %429 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %430 = bitcast i16* %429 to <8 x i16>*
  %431 = load <8 x i16>, <8 x i16>* %430, align 1
  %432 = sub <8 x i16> %431, %425
  store <8 x i16> %432, <8 x i16>* %430, align 1
  %433 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 1
  %436 = sub <8 x i16> %435, %425
  store <8 x i16> %436, <8 x i16>* %434, align 1
  %437 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %438 = bitcast i16* %437 to <8 x i16>*
  %439 = load <8 x i16>, <8 x i16>* %438, align 1
  %440 = sub <8 x i16> %439, %425
  store <8 x i16> %440, <8 x i16>* %438, align 1
  %441 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %442 = bitcast i16* %441 to <8 x i16>*
  %443 = load <8 x i16>, <8 x i16>* %442, align 1
  %444 = sub <8 x i16> %443, %425
  store <8 x i16> %444, <8 x i16>* %442, align 1
  %445 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %446 = bitcast i16* %445 to <8 x i16>*
  %447 = load <8 x i16>, <8 x i16>* %446, align 1
  %448 = sub <8 x i16> %447, %425
  store <8 x i16> %448, <8 x i16>* %446, align 1
  %449 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %450 = bitcast i16* %449 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 1
  %452 = sub <8 x i16> %451, %425
  store <8 x i16> %452, <8 x i16>* %450, align 1
  %453 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %454 = bitcast i16* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 1
  %456 = sub <8 x i16> %455, %425
  store <8 x i16> %456, <8 x i16>* %454, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi3EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %321 [
    i32 8, label %6
    i32 16, label %104
    i32 24, label %207
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 8
  %9 = select i1 %8, i32 %7, i32 8
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %50, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %49, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %48, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %15
  %48 = getelementptr inbounds i8, i8* %16, i64 %11
  %49 = getelementptr inbounds i16, i16* %14, i64 32
  %50 = add nuw nsw i32 %13, 1
  %51 = icmp slt i32 %50, %9
  br i1 %51, label %12, label %52

52:                                               ; preds = %12
  %53 = icmp ult i32 %50, 8
  br i1 %53, label %54, label %433

54:                                               ; preds = %52
  %55 = sub nsw i32 3, %13
  %56 = sub nsw i32 6, %13
  %57 = and i32 %55, 3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59

59:                                               ; preds = %54, %59
  %60 = phi i32 [ %69, %59 ], [ %50, %54 ]
  %61 = phi i16* [ %67, %59 ], [ %49, %54 ]
  %62 = phi <4 x i32> [ %68, %59 ], [ %47, %54 ]
  %63 = phi i32 [ %70, %59 ], [ %57, %54 ]
  %64 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %64, align 1
  %65 = getelementptr inbounds i16, i16* %61, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %66, align 1
  %67 = getelementptr inbounds i16, i16* %61, i64 32
  %68 = add <4 x i32> %46, %62
  %69 = add nuw nsw i32 %60, 1
  %70 = add i32 %63, -1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %59, !llvm.loop !15

72:                                               ; preds = %59, %54
  %73 = phi <4 x i32> [ undef, %54 ], [ %68, %59 ]
  %74 = phi i32 [ %50, %54 ], [ %69, %59 ]
  %75 = phi i16* [ %49, %54 ], [ %67, %59 ]
  %76 = phi <4 x i32> [ %47, %54 ], [ %68, %59 ]
  %77 = icmp ult i32 %56, 3
  br i1 %77, label %433, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32 [ %102, %78 ], [ %74, %72 ]
  %80 = phi i16* [ %100, %78 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %101, %78 ], [ %76, %72 ]
  %82 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %82, align 1
  %83 = getelementptr inbounds i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %84, align 1
  %85 = getelementptr inbounds i16, i16* %80, i64 32
  %86 = add <4 x i32> %46, %81
  %87 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %87, align 1
  %88 = getelementptr inbounds i16, i16* %80, i64 40
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %89, align 1
  %90 = getelementptr inbounds i16, i16* %80, i64 64
  %91 = add <4 x i32> %46, %86
  %92 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %92, align 1
  %93 = getelementptr inbounds i16, i16* %80, i64 72
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %94, align 1
  %95 = getelementptr inbounds i16, i16* %80, i64 96
  %96 = add <4 x i32> %46, %91
  %97 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %97, align 1
  %98 = getelementptr inbounds i16, i16* %80, i64 104
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %99, align 1
  %100 = getelementptr inbounds i16, i16* %80, i64 128
  %101 = add <4 x i32> %46, %96
  %102 = add nuw nsw i32 %79, 4
  %103 = icmp eq i32 %102, 8
  br i1 %103, label %433, label %78

104:                                              ; preds = %5
  %105 = ashr i32 %2, 1
  %106 = icmp slt i32 %105, 8
  %107 = select i1 %106, i32 %105, i32 8
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %109 = shl i64 %4, 1
  br label %110

110:                                              ; preds = %110, %104
  %111 = phi i32 [ 0, %104 ], [ %153, %110 ]
  %112 = phi i16* [ %108, %104 ], [ %152, %110 ]
  %113 = phi <4 x i32> [ zeroinitializer, %104 ], [ %150, %110 ]
  %114 = phi i8* [ %3, %104 ], [ %151, %110 ]
  %115 = getelementptr inbounds i8, i8* %114, i64 %4
  %116 = bitcast i8* %114 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = shufflevector <16 x i8> %117, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %119 = zext <8 x i8> %118 to <8 x i16>
  %120 = shufflevector <16 x i8> %117, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %121 = bitcast <16 x i8> %120 to <4 x i32>
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %123 = bitcast i8* %115 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %126 = zext <8 x i8> %125 to <8 x i16>
  %127 = shufflevector <16 x i8> %124, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i8> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %130 = add nuw nsw <8 x i16> %126, %119
  %131 = bitcast <16 x i8> %120 to <8 x i16>
  %132 = bitcast <16 x i8> %127 to <8 x i16>
  %133 = add <8 x i16> %132, %131
  %134 = bitcast <4 x i32> %122 to <8 x i16>
  %135 = bitcast <4 x i32> %129 to <8 x i16>
  %136 = add <8 x i16> %135, %134
  %137 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %130, <8 x i16> %133) #6
  %138 = shl <8 x i16> %137, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %139 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %112, i64 8
  %141 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %136, <8 x i16> %136) #6
  %142 = shl <8 x i16> %141, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %143 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = add <8 x i16> %142, %138
  %145 = shufflevector <8 x i16> %144, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %146 = zext <4 x i16> %145 to <4 x i32>
  %147 = shufflevector <8 x i16> %144, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %148 = bitcast <8 x i16> %147 to <4 x i32>
  %149 = add <4 x i32> %148, %146
  %150 = add <4 x i32> %149, %113
  %151 = getelementptr inbounds i8, i8* %114, i64 %109
  %152 = getelementptr inbounds i16, i16* %112, i64 32
  %153 = add nuw nsw i32 %111, 1
  %154 = icmp slt i32 %153, %107
  br i1 %154, label %110, label %155

155:                                              ; preds = %110
  %156 = icmp ult i32 %153, 8
  br i1 %156, label %157, label %433

157:                                              ; preds = %155
  %158 = sub nsw i32 3, %111
  %159 = sub nsw i32 6, %111
  %160 = and i32 %158, 3
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %175, label %162

162:                                              ; preds = %157, %162
  %163 = phi i32 [ %172, %162 ], [ %153, %157 ]
  %164 = phi i16* [ %170, %162 ], [ %152, %157 ]
  %165 = phi <4 x i32> [ %171, %162 ], [ %150, %157 ]
  %166 = phi i32 [ %173, %162 ], [ %160, %157 ]
  %167 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %164, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %169, align 1
  %170 = getelementptr inbounds i16, i16* %164, i64 32
  %171 = add <4 x i32> %149, %165
  %172 = add nuw nsw i32 %163, 1
  %173 = add i32 %166, -1
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %162, !llvm.loop !16

175:                                              ; preds = %162, %157
  %176 = phi <4 x i32> [ undef, %157 ], [ %171, %162 ]
  %177 = phi i32 [ %153, %157 ], [ %172, %162 ]
  %178 = phi i16* [ %152, %157 ], [ %170, %162 ]
  %179 = phi <4 x i32> [ %150, %157 ], [ %171, %162 ]
  %180 = icmp ult i32 %159, 3
  br i1 %180, label %433, label %181

181:                                              ; preds = %175, %181
  %182 = phi i32 [ %205, %181 ], [ %177, %175 ]
  %183 = phi i16* [ %203, %181 ], [ %178, %175 ]
  %184 = phi <4 x i32> [ %204, %181 ], [ %179, %175 ]
  %185 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %185, align 1
  %186 = getelementptr inbounds i16, i16* %183, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %187, align 1
  %188 = getelementptr inbounds i16, i16* %183, i64 32
  %189 = add <4 x i32> %149, %184
  %190 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %190, align 1
  %191 = getelementptr inbounds i16, i16* %183, i64 40
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %192, align 1
  %193 = getelementptr inbounds i16, i16* %183, i64 64
  %194 = add <4 x i32> %149, %189
  %195 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %195, align 1
  %196 = getelementptr inbounds i16, i16* %183, i64 72
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %197, align 1
  %198 = getelementptr inbounds i16, i16* %183, i64 96
  %199 = add <4 x i32> %149, %194
  %200 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %200, align 1
  %201 = getelementptr inbounds i16, i16* %183, i64 104
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %202, align 1
  %203 = getelementptr inbounds i16, i16* %183, i64 128
  %204 = add <4 x i32> %149, %199
  %205 = add nuw nsw i32 %182, 4
  %206 = icmp eq i32 %205, 8
  br i1 %206, label %433, label %181

207:                                              ; preds = %5
  %208 = ashr i32 %2, 1
  %209 = icmp slt i32 %208, 8
  %210 = select i1 %209, i32 %208, i32 8
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %212 = shl i64 %4, 1
  br label %213

213:                                              ; preds = %213, %207
  %214 = phi i32 [ 0, %207 ], [ %267, %213 ]
  %215 = phi i16* [ %211, %207 ], [ %266, %213 ]
  %216 = phi <4 x i32> [ zeroinitializer, %207 ], [ %264, %213 ]
  %217 = phi i8* [ %3, %207 ], [ %265, %213 ]
  %218 = getelementptr inbounds i8, i8* %217, i64 %4
  %219 = bitcast i8* %217 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1
  %221 = shufflevector <16 x i8> %220, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %222 = zext <8 x i8> %221 to <8 x i16>
  %223 = shufflevector <16 x i8> %220, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = getelementptr inbounds i8, i8* %217, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = zext <8 x i8> %227 to <8 x i16>
  %229 = bitcast <8 x i16> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %231 = bitcast i8* %218 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %234 = zext <8 x i8> %233 to <8 x i16>
  %235 = shufflevector <16 x i8> %232, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %236 = getelementptr inbounds i8, i8* %218, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1
  %239 = shufflevector <16 x i8> %238, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %240 = zext <8 x i8> %239 to <8 x i16>
  %241 = bitcast <8 x i16> %240 to <4 x i32>
  %242 = shufflevector <4 x i32> %241, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %243 = add nuw nsw <8 x i16> %234, %222
  %244 = bitcast <16 x i8> %223 to <8 x i16>
  %245 = bitcast <16 x i8> %235 to <8 x i16>
  %246 = add <8 x i16> %245, %244
  %247 = add nuw nsw <8 x i16> %240, %228
  %248 = bitcast <4 x i32> %230 to <8 x i16>
  %249 = bitcast <4 x i32> %242 to <8 x i16>
  %250 = add <8 x i16> %249, %248
  %251 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %243, <8 x i16> %246) #6
  %252 = shl <8 x i16> %251, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %253 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %215, i64 8
  %255 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %247, <8 x i16> %250) #6
  %256 = shl <8 x i16> %255, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %257 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %257, align 1
  %258 = add <8 x i16> %256, %252
  %259 = shufflevector <8 x i16> %258, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %260 = zext <4 x i16> %259 to <4 x i32>
  %261 = shufflevector <8 x i16> %258, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %262 = bitcast <8 x i16> %261 to <4 x i32>
  %263 = add <4 x i32> %262, %260
  %264 = add <4 x i32> %263, %216
  %265 = getelementptr inbounds i8, i8* %217, i64 %212
  %266 = getelementptr inbounds i16, i16* %215, i64 32
  %267 = add nuw nsw i32 %214, 1
  %268 = icmp slt i32 %267, %210
  br i1 %268, label %213, label %269

269:                                              ; preds = %213
  %270 = icmp ult i32 %267, 8
  br i1 %270, label %271, label %433

271:                                              ; preds = %269
  %272 = sub nsw i32 3, %214
  %273 = sub nsw i32 6, %214
  %274 = and i32 %272, 3
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %289, label %276

276:                                              ; preds = %271, %276
  %277 = phi i32 [ %286, %276 ], [ %267, %271 ]
  %278 = phi i16* [ %284, %276 ], [ %266, %271 ]
  %279 = phi <4 x i32> [ %285, %276 ], [ %264, %271 ]
  %280 = phi i32 [ %287, %276 ], [ %274, %271 ]
  %281 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %281, align 1
  %282 = getelementptr inbounds i16, i16* %278, i64 8
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %278, i64 32
  %285 = add <4 x i32> %263, %279
  %286 = add nuw nsw i32 %277, 1
  %287 = add i32 %280, -1
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %276, !llvm.loop !17

289:                                              ; preds = %276, %271
  %290 = phi <4 x i32> [ undef, %271 ], [ %285, %276 ]
  %291 = phi i32 [ %267, %271 ], [ %286, %276 ]
  %292 = phi i16* [ %266, %271 ], [ %284, %276 ]
  %293 = phi <4 x i32> [ %264, %271 ], [ %285, %276 ]
  %294 = icmp ult i32 %273, 3
  br i1 %294, label %433, label %295

295:                                              ; preds = %289, %295
  %296 = phi i32 [ %319, %295 ], [ %291, %289 ]
  %297 = phi i16* [ %317, %295 ], [ %292, %289 ]
  %298 = phi <4 x i32> [ %318, %295 ], [ %293, %289 ]
  %299 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %299, align 1
  %300 = getelementptr inbounds i16, i16* %297, i64 8
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %297, i64 32
  %303 = add <4 x i32> %263, %298
  %304 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %304, align 1
  %305 = getelementptr inbounds i16, i16* %297, i64 40
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %306, align 1
  %307 = getelementptr inbounds i16, i16* %297, i64 64
  %308 = add <4 x i32> %263, %303
  %309 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %309, align 1
  %310 = getelementptr inbounds i16, i16* %297, i64 72
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %311, align 1
  %312 = getelementptr inbounds i16, i16* %297, i64 96
  %313 = add <4 x i32> %263, %308
  %314 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %314, align 1
  %315 = getelementptr inbounds i16, i16* %297, i64 104
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %316, align 1
  %317 = getelementptr inbounds i16, i16* %297, i64 128
  %318 = add <4 x i32> %263, %313
  %319 = add nuw nsw i32 %296, 4
  %320 = icmp eq i32 %319, 8
  br i1 %320, label %433, label %295

321:                                              ; preds = %5
  %322 = ashr i32 %2, 1
  %323 = icmp slt i32 %322, 8
  %324 = select i1 %323, i32 %322, i32 8
  %325 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %326 = shl i64 %4, 1
  br label %327

327:                                              ; preds = %327, %321
  %328 = phi i32 [ 0, %321 ], [ %379, %327 ]
  %329 = phi i16* [ %325, %321 ], [ %378, %327 ]
  %330 = phi <4 x i32> [ zeroinitializer, %321 ], [ %376, %327 ]
  %331 = phi i8* [ %3, %321 ], [ %377, %327 ]
  %332 = getelementptr inbounds i8, i8* %331, i64 %4
  %333 = bitcast i8* %331 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1
  %335 = shufflevector <16 x i8> %334, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %336 = zext <8 x i8> %335 to <8 x i16>
  %337 = shufflevector <16 x i8> %334, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %338 = getelementptr inbounds i8, i8* %331, i64 16
  %339 = bitcast i8* %338 to <16 x i8>*
  %340 = load <16 x i8>, <16 x i8>* %339, align 1
  %341 = shufflevector <16 x i8> %340, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %342 = zext <8 x i8> %341 to <8 x i16>
  %343 = shufflevector <16 x i8> %340, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %344 = bitcast i8* %332 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1
  %346 = shufflevector <16 x i8> %345, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %347 = zext <8 x i8> %346 to <8 x i16>
  %348 = shufflevector <16 x i8> %345, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %349 = getelementptr inbounds i8, i8* %332, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = shufflevector <16 x i8> %351, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %353 = zext <8 x i8> %352 to <8 x i16>
  %354 = shufflevector <16 x i8> %351, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %355 = add nuw nsw <8 x i16> %347, %336
  %356 = bitcast <16 x i8> %337 to <8 x i16>
  %357 = bitcast <16 x i8> %348 to <8 x i16>
  %358 = add <8 x i16> %357, %356
  %359 = add nuw nsw <8 x i16> %353, %342
  %360 = bitcast <16 x i8> %343 to <8 x i16>
  %361 = bitcast <16 x i8> %354 to <8 x i16>
  %362 = add <8 x i16> %361, %360
  %363 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %355, <8 x i16> %358) #6
  %364 = shl <8 x i16> %363, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %365 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %365, align 1
  %366 = getelementptr inbounds i16, i16* %329, i64 8
  %367 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %359, <8 x i16> %362) #6
  %368 = shl <8 x i16> %367, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %369 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %369, align 1
  %370 = add <8 x i16> %368, %364
  %371 = shufflevector <8 x i16> %370, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %372 = zext <4 x i16> %371 to <4 x i32>
  %373 = shufflevector <8 x i16> %370, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %374 = bitcast <8 x i16> %373 to <4 x i32>
  %375 = add <4 x i32> %374, %372
  %376 = add <4 x i32> %375, %330
  %377 = getelementptr inbounds i8, i8* %331, i64 %326
  %378 = getelementptr inbounds i16, i16* %329, i64 32
  %379 = add nuw nsw i32 %328, 1
  %380 = icmp slt i32 %379, %324
  br i1 %380, label %327, label %381

381:                                              ; preds = %327
  %382 = icmp ult i32 %379, 8
  br i1 %382, label %383, label %433

383:                                              ; preds = %381
  %384 = sub nsw i32 3, %328
  %385 = sub nsw i32 6, %328
  %386 = and i32 %384, 3
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %401, label %388

388:                                              ; preds = %383, %388
  %389 = phi i32 [ %398, %388 ], [ %379, %383 ]
  %390 = phi i16* [ %396, %388 ], [ %378, %383 ]
  %391 = phi <4 x i32> [ %397, %388 ], [ %376, %383 ]
  %392 = phi i32 [ %399, %388 ], [ %386, %383 ]
  %393 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %393, align 1
  %394 = getelementptr inbounds i16, i16* %390, i64 8
  %395 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %395, align 1
  %396 = getelementptr inbounds i16, i16* %390, i64 32
  %397 = add <4 x i32> %375, %391
  %398 = add nuw nsw i32 %389, 1
  %399 = add i32 %392, -1
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %388, !llvm.loop !18

401:                                              ; preds = %388, %383
  %402 = phi <4 x i32> [ undef, %383 ], [ %397, %388 ]
  %403 = phi i32 [ %379, %383 ], [ %398, %388 ]
  %404 = phi i16* [ %378, %383 ], [ %396, %388 ]
  %405 = phi <4 x i32> [ %376, %383 ], [ %397, %388 ]
  %406 = icmp ult i32 %385, 3
  br i1 %406, label %433, label %407

407:                                              ; preds = %401, %407
  %408 = phi i32 [ %431, %407 ], [ %403, %401 ]
  %409 = phi i16* [ %429, %407 ], [ %404, %401 ]
  %410 = phi <4 x i32> [ %430, %407 ], [ %405, %401 ]
  %411 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %411, align 1
  %412 = getelementptr inbounds i16, i16* %409, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %413, align 1
  %414 = getelementptr inbounds i16, i16* %409, i64 32
  %415 = add <4 x i32> %375, %410
  %416 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %416, align 1
  %417 = getelementptr inbounds i16, i16* %409, i64 40
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %418, align 1
  %419 = getelementptr inbounds i16, i16* %409, i64 64
  %420 = add <4 x i32> %375, %415
  %421 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %421, align 1
  %422 = getelementptr inbounds i16, i16* %409, i64 72
  %423 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %423, align 1
  %424 = getelementptr inbounds i16, i16* %409, i64 96
  %425 = add <4 x i32> %375, %420
  %426 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %426, align 1
  %427 = getelementptr inbounds i16, i16* %409, i64 104
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %428, align 1
  %429 = getelementptr inbounds i16, i16* %409, i64 128
  %430 = add <4 x i32> %375, %425
  %431 = add nuw nsw i32 %408, 4
  %432 = icmp eq i32 %431, 8
  br i1 %432, label %433, label %407

433:                                              ; preds = %289, %295, %175, %181, %72, %78, %401, %407, %381, %269, %155, %52
  %434 = phi <4 x i32> [ %47, %52 ], [ %150, %155 ], [ %264, %269 ], [ %376, %381 ], [ %402, %401 ], [ %430, %407 ], [ %73, %72 ], [ %101, %78 ], [ %176, %175 ], [ %204, %181 ], [ %290, %289 ], [ %318, %295 ]
  %435 = bitcast <4 x i32> %434 to <16 x i8>
  %436 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %437 = bitcast <16 x i8> %436 to <4 x i32>
  %438 = add <4 x i32> %434, %437
  %439 = bitcast <4 x i32> %438 to <16 x i8>
  %440 = shufflevector <16 x i8> %439, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %441 = bitcast <16 x i8> %440 to <4 x i32>
  %442 = add <4 x i32> %438, <i32 64, i32 64, i32 64, i32 64>
  %443 = add <4 x i32> %442, %441
  %444 = ashr <4 x i32> %443, <i32 7, i32 7, i32 7, i32 7>
  %445 = bitcast <4 x i32> %444 to <8 x i16>
  %446 = shufflevector <8 x i16> %445, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %447 = bitcast <8 x i16> %446 to <4 x i32>
  %448 = shufflevector <4 x i32> %447, <4 x i32> undef, <4 x i32> zeroinitializer
  %449 = bitcast <4 x i32> %448 to <8 x i16>
  %450 = bitcast [32 x i16]* %0 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 1
  %452 = sub <8 x i16> %451, %449
  store <8 x i16> %452, <8 x i16>* %450, align 1
  %453 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %454 = bitcast i16* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 1
  %456 = sub <8 x i16> %455, %449
  store <8 x i16> %456, <8 x i16>* %454, align 1
  %457 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 1
  %460 = sub <8 x i16> %459, %449
  store <8 x i16> %460, <8 x i16>* %458, align 1
  %461 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %462 = bitcast i16* %461 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 1
  %464 = sub <8 x i16> %463, %449
  store <8 x i16> %464, <8 x i16>* %462, align 1
  %465 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 1
  %468 = sub <8 x i16> %467, %449
  store <8 x i16> %468, <8 x i16>* %466, align 1
  %469 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %470 = bitcast i16* %469 to <8 x i16>*
  %471 = load <8 x i16>, <8 x i16>* %470, align 1
  %472 = sub <8 x i16> %471, %449
  store <8 x i16> %472, <8 x i16>* %470, align 1
  %473 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %474 = bitcast i16* %473 to <8 x i16>*
  %475 = load <8 x i16>, <8 x i16>* %474, align 1
  %476 = sub <8 x i16> %475, %449
  store <8 x i16> %476, <8 x i16>* %474, align 1
  %477 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %478 = bitcast i16* %477 to <8 x i16>*
  %479 = load <8 x i16>, <8 x i16>* %478, align 1
  %480 = sub <8 x i16> %479, %449
  store <8 x i16> %480, <8 x i16>* %478, align 1
  %481 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %482 = bitcast i16* %481 to <8 x i16>*
  %483 = load <8 x i16>, <8 x i16>* %482, align 1
  %484 = sub <8 x i16> %483, %449
  store <8 x i16> %484, <8 x i16>* %482, align 1
  %485 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %486 = bitcast i16* %485 to <8 x i16>*
  %487 = load <8 x i16>, <8 x i16>* %486, align 1
  %488 = sub <8 x i16> %487, %449
  store <8 x i16> %488, <8 x i16>* %486, align 1
  %489 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %490 = bitcast i16* %489 to <8 x i16>*
  %491 = load <8 x i16>, <8 x i16>* %490, align 1
  %492 = sub <8 x i16> %491, %449
  store <8 x i16> %492, <8 x i16>* %490, align 1
  %493 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %494 = bitcast i16* %493 to <8 x i16>*
  %495 = load <8 x i16>, <8 x i16>* %494, align 1
  %496 = sub <8 x i16> %495, %449
  store <8 x i16> %496, <8 x i16>* %494, align 1
  %497 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %498 = bitcast i16* %497 to <8 x i16>*
  %499 = load <8 x i16>, <8 x i16>* %498, align 1
  %500 = sub <8 x i16> %499, %449
  store <8 x i16> %500, <8 x i16>* %498, align 1
  %501 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %502 = bitcast i16* %501 to <8 x i16>*
  %503 = load <8 x i16>, <8 x i16>* %502, align 1
  %504 = sub <8 x i16> %503, %449
  store <8 x i16> %504, <8 x i16>* %502, align 1
  %505 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 1
  %508 = sub <8 x i16> %507, %449
  store <8 x i16> %508, <8 x i16>* %506, align 1
  %509 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %510 = bitcast i16* %509 to <8 x i16>*
  %511 = load <8 x i16>, <8 x i16>* %510, align 1
  %512 = sub <8 x i16> %511, %449
  store <8 x i16> %512, <8 x i16>* %510, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %321 [
    i32 8, label %6
    i32 16, label %104
    i32 24, label %207
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 16
  %9 = select i1 %8, i32 %7, i32 16
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %50, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %49, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %48, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %15
  %48 = getelementptr inbounds i8, i8* %16, i64 %11
  %49 = getelementptr inbounds i16, i16* %14, i64 32
  %50 = add nuw nsw i32 %13, 1
  %51 = icmp slt i32 %50, %9
  br i1 %51, label %12, label %52

52:                                               ; preds = %12
  %53 = icmp ult i32 %50, 16
  br i1 %53, label %54, label %433

54:                                               ; preds = %52
  %55 = sub nsw i32 3, %13
  %56 = sub nsw i32 14, %13
  %57 = and i32 %55, 3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59

59:                                               ; preds = %54, %59
  %60 = phi i32 [ %69, %59 ], [ %50, %54 ]
  %61 = phi i16* [ %67, %59 ], [ %49, %54 ]
  %62 = phi <4 x i32> [ %68, %59 ], [ %47, %54 ]
  %63 = phi i32 [ %70, %59 ], [ %57, %54 ]
  %64 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %64, align 1
  %65 = getelementptr inbounds i16, i16* %61, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %66, align 1
  %67 = getelementptr inbounds i16, i16* %61, i64 32
  %68 = add <4 x i32> %46, %62
  %69 = add nuw nsw i32 %60, 1
  %70 = add i32 %63, -1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %59, !llvm.loop !19

72:                                               ; preds = %59, %54
  %73 = phi <4 x i32> [ undef, %54 ], [ %68, %59 ]
  %74 = phi i32 [ %50, %54 ], [ %69, %59 ]
  %75 = phi i16* [ %49, %54 ], [ %67, %59 ]
  %76 = phi <4 x i32> [ %47, %54 ], [ %68, %59 ]
  %77 = icmp ult i32 %56, 3
  br i1 %77, label %433, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32 [ %102, %78 ], [ %74, %72 ]
  %80 = phi i16* [ %100, %78 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %101, %78 ], [ %76, %72 ]
  %82 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %82, align 1
  %83 = getelementptr inbounds i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %84, align 1
  %85 = getelementptr inbounds i16, i16* %80, i64 32
  %86 = add <4 x i32> %46, %81
  %87 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %87, align 1
  %88 = getelementptr inbounds i16, i16* %80, i64 40
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %89, align 1
  %90 = getelementptr inbounds i16, i16* %80, i64 64
  %91 = add <4 x i32> %46, %86
  %92 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %92, align 1
  %93 = getelementptr inbounds i16, i16* %80, i64 72
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %94, align 1
  %95 = getelementptr inbounds i16, i16* %80, i64 96
  %96 = add <4 x i32> %46, %91
  %97 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %97, align 1
  %98 = getelementptr inbounds i16, i16* %80, i64 104
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %99, align 1
  %100 = getelementptr inbounds i16, i16* %80, i64 128
  %101 = add <4 x i32> %46, %96
  %102 = add nuw nsw i32 %79, 4
  %103 = icmp eq i32 %102, 16
  br i1 %103, label %433, label %78

104:                                              ; preds = %5
  %105 = ashr i32 %2, 1
  %106 = icmp slt i32 %105, 16
  %107 = select i1 %106, i32 %105, i32 16
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %109 = shl i64 %4, 1
  br label %110

110:                                              ; preds = %110, %104
  %111 = phi i32 [ 0, %104 ], [ %153, %110 ]
  %112 = phi i16* [ %108, %104 ], [ %152, %110 ]
  %113 = phi <4 x i32> [ zeroinitializer, %104 ], [ %150, %110 ]
  %114 = phi i8* [ %3, %104 ], [ %151, %110 ]
  %115 = getelementptr inbounds i8, i8* %114, i64 %4
  %116 = bitcast i8* %114 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = shufflevector <16 x i8> %117, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %119 = zext <8 x i8> %118 to <8 x i16>
  %120 = shufflevector <16 x i8> %117, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %121 = bitcast <16 x i8> %120 to <4 x i32>
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %123 = bitcast i8* %115 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %126 = zext <8 x i8> %125 to <8 x i16>
  %127 = shufflevector <16 x i8> %124, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i8> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %130 = add nuw nsw <8 x i16> %126, %119
  %131 = bitcast <16 x i8> %120 to <8 x i16>
  %132 = bitcast <16 x i8> %127 to <8 x i16>
  %133 = add <8 x i16> %132, %131
  %134 = bitcast <4 x i32> %122 to <8 x i16>
  %135 = bitcast <4 x i32> %129 to <8 x i16>
  %136 = add <8 x i16> %135, %134
  %137 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %130, <8 x i16> %133) #6
  %138 = shl <8 x i16> %137, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %139 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %112, i64 8
  %141 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %136, <8 x i16> %136) #6
  %142 = shl <8 x i16> %141, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %143 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = add <8 x i16> %142, %138
  %145 = shufflevector <8 x i16> %144, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %146 = zext <4 x i16> %145 to <4 x i32>
  %147 = shufflevector <8 x i16> %144, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %148 = bitcast <8 x i16> %147 to <4 x i32>
  %149 = add <4 x i32> %148, %146
  %150 = add <4 x i32> %149, %113
  %151 = getelementptr inbounds i8, i8* %114, i64 %109
  %152 = getelementptr inbounds i16, i16* %112, i64 32
  %153 = add nuw nsw i32 %111, 1
  %154 = icmp slt i32 %153, %107
  br i1 %154, label %110, label %155

155:                                              ; preds = %110
  %156 = icmp ult i32 %153, 16
  br i1 %156, label %157, label %433

157:                                              ; preds = %155
  %158 = sub nsw i32 3, %111
  %159 = sub nsw i32 14, %111
  %160 = and i32 %158, 3
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %175, label %162

162:                                              ; preds = %157, %162
  %163 = phi i32 [ %172, %162 ], [ %153, %157 ]
  %164 = phi i16* [ %170, %162 ], [ %152, %157 ]
  %165 = phi <4 x i32> [ %171, %162 ], [ %150, %157 ]
  %166 = phi i32 [ %173, %162 ], [ %160, %157 ]
  %167 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %164, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %169, align 1
  %170 = getelementptr inbounds i16, i16* %164, i64 32
  %171 = add <4 x i32> %149, %165
  %172 = add nuw nsw i32 %163, 1
  %173 = add i32 %166, -1
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %162, !llvm.loop !20

175:                                              ; preds = %162, %157
  %176 = phi <4 x i32> [ undef, %157 ], [ %171, %162 ]
  %177 = phi i32 [ %153, %157 ], [ %172, %162 ]
  %178 = phi i16* [ %152, %157 ], [ %170, %162 ]
  %179 = phi <4 x i32> [ %150, %157 ], [ %171, %162 ]
  %180 = icmp ult i32 %159, 3
  br i1 %180, label %433, label %181

181:                                              ; preds = %175, %181
  %182 = phi i32 [ %205, %181 ], [ %177, %175 ]
  %183 = phi i16* [ %203, %181 ], [ %178, %175 ]
  %184 = phi <4 x i32> [ %204, %181 ], [ %179, %175 ]
  %185 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %185, align 1
  %186 = getelementptr inbounds i16, i16* %183, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %187, align 1
  %188 = getelementptr inbounds i16, i16* %183, i64 32
  %189 = add <4 x i32> %149, %184
  %190 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %190, align 1
  %191 = getelementptr inbounds i16, i16* %183, i64 40
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %192, align 1
  %193 = getelementptr inbounds i16, i16* %183, i64 64
  %194 = add <4 x i32> %149, %189
  %195 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %195, align 1
  %196 = getelementptr inbounds i16, i16* %183, i64 72
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %197, align 1
  %198 = getelementptr inbounds i16, i16* %183, i64 96
  %199 = add <4 x i32> %149, %194
  %200 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %200, align 1
  %201 = getelementptr inbounds i16, i16* %183, i64 104
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %202, align 1
  %203 = getelementptr inbounds i16, i16* %183, i64 128
  %204 = add <4 x i32> %149, %199
  %205 = add nuw nsw i32 %182, 4
  %206 = icmp eq i32 %205, 16
  br i1 %206, label %433, label %181

207:                                              ; preds = %5
  %208 = ashr i32 %2, 1
  %209 = icmp slt i32 %208, 16
  %210 = select i1 %209, i32 %208, i32 16
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %212 = shl i64 %4, 1
  br label %213

213:                                              ; preds = %213, %207
  %214 = phi i32 [ 0, %207 ], [ %267, %213 ]
  %215 = phi i16* [ %211, %207 ], [ %266, %213 ]
  %216 = phi <4 x i32> [ zeroinitializer, %207 ], [ %264, %213 ]
  %217 = phi i8* [ %3, %207 ], [ %265, %213 ]
  %218 = getelementptr inbounds i8, i8* %217, i64 %4
  %219 = bitcast i8* %217 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1
  %221 = shufflevector <16 x i8> %220, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %222 = zext <8 x i8> %221 to <8 x i16>
  %223 = shufflevector <16 x i8> %220, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %224 = getelementptr inbounds i8, i8* %217, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = zext <8 x i8> %227 to <8 x i16>
  %229 = bitcast <8 x i16> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %231 = bitcast i8* %218 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %234 = zext <8 x i8> %233 to <8 x i16>
  %235 = shufflevector <16 x i8> %232, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %236 = getelementptr inbounds i8, i8* %218, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1
  %239 = shufflevector <16 x i8> %238, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %240 = zext <8 x i8> %239 to <8 x i16>
  %241 = bitcast <8 x i16> %240 to <4 x i32>
  %242 = shufflevector <4 x i32> %241, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %243 = add nuw nsw <8 x i16> %234, %222
  %244 = bitcast <16 x i8> %223 to <8 x i16>
  %245 = bitcast <16 x i8> %235 to <8 x i16>
  %246 = add <8 x i16> %245, %244
  %247 = add nuw nsw <8 x i16> %240, %228
  %248 = bitcast <4 x i32> %230 to <8 x i16>
  %249 = bitcast <4 x i32> %242 to <8 x i16>
  %250 = add <8 x i16> %249, %248
  %251 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %243, <8 x i16> %246) #6
  %252 = shl <8 x i16> %251, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %253 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %215, i64 8
  %255 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %247, <8 x i16> %250) #6
  %256 = shl <8 x i16> %255, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %257 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %257, align 1
  %258 = add <8 x i16> %256, %252
  %259 = shufflevector <8 x i16> %258, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %260 = zext <4 x i16> %259 to <4 x i32>
  %261 = shufflevector <8 x i16> %258, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %262 = bitcast <8 x i16> %261 to <4 x i32>
  %263 = add <4 x i32> %262, %260
  %264 = add <4 x i32> %263, %216
  %265 = getelementptr inbounds i8, i8* %217, i64 %212
  %266 = getelementptr inbounds i16, i16* %215, i64 32
  %267 = add nuw nsw i32 %214, 1
  %268 = icmp slt i32 %267, %210
  br i1 %268, label %213, label %269

269:                                              ; preds = %213
  %270 = icmp ult i32 %267, 16
  br i1 %270, label %271, label %433

271:                                              ; preds = %269
  %272 = sub nsw i32 3, %214
  %273 = sub nsw i32 14, %214
  %274 = and i32 %272, 3
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %289, label %276

276:                                              ; preds = %271, %276
  %277 = phi i32 [ %286, %276 ], [ %267, %271 ]
  %278 = phi i16* [ %284, %276 ], [ %266, %271 ]
  %279 = phi <4 x i32> [ %285, %276 ], [ %264, %271 ]
  %280 = phi i32 [ %287, %276 ], [ %274, %271 ]
  %281 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %281, align 1
  %282 = getelementptr inbounds i16, i16* %278, i64 8
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %278, i64 32
  %285 = add <4 x i32> %263, %279
  %286 = add nuw nsw i32 %277, 1
  %287 = add i32 %280, -1
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %276, !llvm.loop !21

289:                                              ; preds = %276, %271
  %290 = phi <4 x i32> [ undef, %271 ], [ %285, %276 ]
  %291 = phi i32 [ %267, %271 ], [ %286, %276 ]
  %292 = phi i16* [ %266, %271 ], [ %284, %276 ]
  %293 = phi <4 x i32> [ %264, %271 ], [ %285, %276 ]
  %294 = icmp ult i32 %273, 3
  br i1 %294, label %433, label %295

295:                                              ; preds = %289, %295
  %296 = phi i32 [ %319, %295 ], [ %291, %289 ]
  %297 = phi i16* [ %317, %295 ], [ %292, %289 ]
  %298 = phi <4 x i32> [ %318, %295 ], [ %293, %289 ]
  %299 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %299, align 1
  %300 = getelementptr inbounds i16, i16* %297, i64 8
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %297, i64 32
  %303 = add <4 x i32> %263, %298
  %304 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %304, align 1
  %305 = getelementptr inbounds i16, i16* %297, i64 40
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %306, align 1
  %307 = getelementptr inbounds i16, i16* %297, i64 64
  %308 = add <4 x i32> %263, %303
  %309 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %309, align 1
  %310 = getelementptr inbounds i16, i16* %297, i64 72
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %311, align 1
  %312 = getelementptr inbounds i16, i16* %297, i64 96
  %313 = add <4 x i32> %263, %308
  %314 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %314, align 1
  %315 = getelementptr inbounds i16, i16* %297, i64 104
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %316, align 1
  %317 = getelementptr inbounds i16, i16* %297, i64 128
  %318 = add <4 x i32> %263, %313
  %319 = add nuw nsw i32 %296, 4
  %320 = icmp eq i32 %319, 16
  br i1 %320, label %433, label %295

321:                                              ; preds = %5
  %322 = ashr i32 %2, 1
  %323 = icmp slt i32 %322, 16
  %324 = select i1 %323, i32 %322, i32 16
  %325 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %326 = shl i64 %4, 1
  br label %327

327:                                              ; preds = %327, %321
  %328 = phi i32 [ 0, %321 ], [ %379, %327 ]
  %329 = phi i16* [ %325, %321 ], [ %378, %327 ]
  %330 = phi <4 x i32> [ zeroinitializer, %321 ], [ %376, %327 ]
  %331 = phi i8* [ %3, %321 ], [ %377, %327 ]
  %332 = getelementptr inbounds i8, i8* %331, i64 %4
  %333 = bitcast i8* %331 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1
  %335 = shufflevector <16 x i8> %334, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %336 = zext <8 x i8> %335 to <8 x i16>
  %337 = shufflevector <16 x i8> %334, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %338 = getelementptr inbounds i8, i8* %331, i64 16
  %339 = bitcast i8* %338 to <16 x i8>*
  %340 = load <16 x i8>, <16 x i8>* %339, align 1
  %341 = shufflevector <16 x i8> %340, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %342 = zext <8 x i8> %341 to <8 x i16>
  %343 = shufflevector <16 x i8> %340, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %344 = bitcast i8* %332 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1
  %346 = shufflevector <16 x i8> %345, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %347 = zext <8 x i8> %346 to <8 x i16>
  %348 = shufflevector <16 x i8> %345, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %349 = getelementptr inbounds i8, i8* %332, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = shufflevector <16 x i8> %351, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %353 = zext <8 x i8> %352 to <8 x i16>
  %354 = shufflevector <16 x i8> %351, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %355 = add nuw nsw <8 x i16> %347, %336
  %356 = bitcast <16 x i8> %337 to <8 x i16>
  %357 = bitcast <16 x i8> %348 to <8 x i16>
  %358 = add <8 x i16> %357, %356
  %359 = add nuw nsw <8 x i16> %353, %342
  %360 = bitcast <16 x i8> %343 to <8 x i16>
  %361 = bitcast <16 x i8> %354 to <8 x i16>
  %362 = add <8 x i16> %361, %360
  %363 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %355, <8 x i16> %358) #6
  %364 = shl <8 x i16> %363, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %365 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %365, align 1
  %366 = getelementptr inbounds i16, i16* %329, i64 8
  %367 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %359, <8 x i16> %362) #6
  %368 = shl <8 x i16> %367, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %369 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %369, align 1
  %370 = add <8 x i16> %368, %364
  %371 = shufflevector <8 x i16> %370, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %372 = zext <4 x i16> %371 to <4 x i32>
  %373 = shufflevector <8 x i16> %370, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %374 = bitcast <8 x i16> %373 to <4 x i32>
  %375 = add <4 x i32> %374, %372
  %376 = add <4 x i32> %375, %330
  %377 = getelementptr inbounds i8, i8* %331, i64 %326
  %378 = getelementptr inbounds i16, i16* %329, i64 32
  %379 = add nuw nsw i32 %328, 1
  %380 = icmp slt i32 %379, %324
  br i1 %380, label %327, label %381

381:                                              ; preds = %327
  %382 = icmp ult i32 %379, 16
  br i1 %382, label %383, label %433

383:                                              ; preds = %381
  %384 = sub nsw i32 3, %328
  %385 = sub nsw i32 14, %328
  %386 = and i32 %384, 3
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %401, label %388

388:                                              ; preds = %383, %388
  %389 = phi i32 [ %398, %388 ], [ %379, %383 ]
  %390 = phi i16* [ %396, %388 ], [ %378, %383 ]
  %391 = phi <4 x i32> [ %397, %388 ], [ %376, %383 ]
  %392 = phi i32 [ %399, %388 ], [ %386, %383 ]
  %393 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %393, align 1
  %394 = getelementptr inbounds i16, i16* %390, i64 8
  %395 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %395, align 1
  %396 = getelementptr inbounds i16, i16* %390, i64 32
  %397 = add <4 x i32> %375, %391
  %398 = add nuw nsw i32 %389, 1
  %399 = add i32 %392, -1
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %388, !llvm.loop !22

401:                                              ; preds = %388, %383
  %402 = phi <4 x i32> [ undef, %383 ], [ %397, %388 ]
  %403 = phi i32 [ %379, %383 ], [ %398, %388 ]
  %404 = phi i16* [ %378, %383 ], [ %396, %388 ]
  %405 = phi <4 x i32> [ %376, %383 ], [ %397, %388 ]
  %406 = icmp ult i32 %385, 3
  br i1 %406, label %433, label %407

407:                                              ; preds = %401, %407
  %408 = phi i32 [ %431, %407 ], [ %403, %401 ]
  %409 = phi i16* [ %429, %407 ], [ %404, %401 ]
  %410 = phi <4 x i32> [ %430, %407 ], [ %405, %401 ]
  %411 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %411, align 1
  %412 = getelementptr inbounds i16, i16* %409, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %413, align 1
  %414 = getelementptr inbounds i16, i16* %409, i64 32
  %415 = add <4 x i32> %375, %410
  %416 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %416, align 1
  %417 = getelementptr inbounds i16, i16* %409, i64 40
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %418, align 1
  %419 = getelementptr inbounds i16, i16* %409, i64 64
  %420 = add <4 x i32> %375, %415
  %421 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %421, align 1
  %422 = getelementptr inbounds i16, i16* %409, i64 72
  %423 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %423, align 1
  %424 = getelementptr inbounds i16, i16* %409, i64 96
  %425 = add <4 x i32> %375, %420
  %426 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %426, align 1
  %427 = getelementptr inbounds i16, i16* %409, i64 104
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %428, align 1
  %429 = getelementptr inbounds i16, i16* %409, i64 128
  %430 = add <4 x i32> %375, %425
  %431 = add nuw nsw i32 %408, 4
  %432 = icmp eq i32 %431, 16
  br i1 %432, label %433, label %407

433:                                              ; preds = %289, %295, %175, %181, %72, %78, %401, %407, %381, %269, %155, %52
  %434 = phi <4 x i32> [ %47, %52 ], [ %150, %155 ], [ %264, %269 ], [ %376, %381 ], [ %402, %401 ], [ %430, %407 ], [ %73, %72 ], [ %101, %78 ], [ %176, %175 ], [ %204, %181 ], [ %290, %289 ], [ %318, %295 ]
  %435 = bitcast <4 x i32> %434 to <16 x i8>
  %436 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %437 = bitcast <16 x i8> %436 to <4 x i32>
  %438 = add <4 x i32> %434, %437
  %439 = bitcast <4 x i32> %438 to <16 x i8>
  %440 = shufflevector <16 x i8> %439, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %441 = bitcast <16 x i8> %440 to <4 x i32>
  %442 = add <4 x i32> %438, <i32 128, i32 128, i32 128, i32 128>
  %443 = add <4 x i32> %442, %441
  %444 = ashr <4 x i32> %443, <i32 8, i32 8, i32 8, i32 8>
  %445 = bitcast <4 x i32> %444 to <8 x i16>
  %446 = shufflevector <8 x i16> %445, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %447 = bitcast <8 x i16> %446 to <4 x i32>
  %448 = shufflevector <4 x i32> %447, <4 x i32> undef, <4 x i32> zeroinitializer
  %449 = bitcast <4 x i32> %448 to <8 x i16>
  %450 = bitcast [32 x i16]* %0 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 1
  %452 = sub <8 x i16> %451, %449
  store <8 x i16> %452, <8 x i16>* %450, align 1
  %453 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %454 = bitcast i16* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 1
  %456 = sub <8 x i16> %455, %449
  store <8 x i16> %456, <8 x i16>* %454, align 1
  %457 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 1
  %460 = sub <8 x i16> %459, %449
  store <8 x i16> %460, <8 x i16>* %458, align 1
  %461 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %462 = bitcast i16* %461 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 1
  %464 = sub <8 x i16> %463, %449
  store <8 x i16> %464, <8 x i16>* %462, align 1
  %465 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 1
  %468 = sub <8 x i16> %467, %449
  store <8 x i16> %468, <8 x i16>* %466, align 1
  %469 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %470 = bitcast i16* %469 to <8 x i16>*
  %471 = load <8 x i16>, <8 x i16>* %470, align 1
  %472 = sub <8 x i16> %471, %449
  store <8 x i16> %472, <8 x i16>* %470, align 1
  %473 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %474 = bitcast i16* %473 to <8 x i16>*
  %475 = load <8 x i16>, <8 x i16>* %474, align 1
  %476 = sub <8 x i16> %475, %449
  store <8 x i16> %476, <8 x i16>* %474, align 1
  %477 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %478 = bitcast i16* %477 to <8 x i16>*
  %479 = load <8 x i16>, <8 x i16>* %478, align 1
  %480 = sub <8 x i16> %479, %449
  store <8 x i16> %480, <8 x i16>* %478, align 1
  %481 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %482 = bitcast i16* %481 to <8 x i16>*
  %483 = load <8 x i16>, <8 x i16>* %482, align 1
  %484 = sub <8 x i16> %483, %449
  store <8 x i16> %484, <8 x i16>* %482, align 1
  %485 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %486 = bitcast i16* %485 to <8 x i16>*
  %487 = load <8 x i16>, <8 x i16>* %486, align 1
  %488 = sub <8 x i16> %487, %449
  store <8 x i16> %488, <8 x i16>* %486, align 1
  %489 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %490 = bitcast i16* %489 to <8 x i16>*
  %491 = load <8 x i16>, <8 x i16>* %490, align 1
  %492 = sub <8 x i16> %491, %449
  store <8 x i16> %492, <8 x i16>* %490, align 1
  %493 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %494 = bitcast i16* %493 to <8 x i16>*
  %495 = load <8 x i16>, <8 x i16>* %494, align 1
  %496 = sub <8 x i16> %495, %449
  store <8 x i16> %496, <8 x i16>* %494, align 1
  %497 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %498 = bitcast i16* %497 to <8 x i16>*
  %499 = load <8 x i16>, <8 x i16>* %498, align 1
  %500 = sub <8 x i16> %499, %449
  store <8 x i16> %500, <8 x i16>* %498, align 1
  %501 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %502 = bitcast i16* %501 to <8 x i16>*
  %503 = load <8 x i16>, <8 x i16>* %502, align 1
  %504 = sub <8 x i16> %503, %449
  store <8 x i16> %504, <8 x i16>* %502, align 1
  %505 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 1
  %508 = sub <8 x i16> %507, %449
  store <8 x i16> %508, <8 x i16>* %506, align 1
  %509 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %510 = bitcast i16* %509 to <8 x i16>*
  %511 = load <8 x i16>, <8 x i16>* %510, align 1
  %512 = sub <8 x i16> %511, %449
  store <8 x i16> %512, <8 x i16>* %510, align 1
  %513 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %514 = bitcast i16* %513 to <8 x i16>*
  %515 = load <8 x i16>, <8 x i16>* %514, align 1
  %516 = sub <8 x i16> %515, %449
  store <8 x i16> %516, <8 x i16>* %514, align 1
  %517 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 264
  %518 = bitcast i16* %517 to <8 x i16>*
  %519 = load <8 x i16>, <8 x i16>* %518, align 1
  %520 = sub <8 x i16> %519, %449
  store <8 x i16> %520, <8 x i16>* %518, align 1
  %521 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %522 = bitcast i16* %521 to <8 x i16>*
  %523 = load <8 x i16>, <8 x i16>* %522, align 1
  %524 = sub <8 x i16> %523, %449
  store <8 x i16> %524, <8 x i16>* %522, align 1
  %525 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 296
  %526 = bitcast i16* %525 to <8 x i16>*
  %527 = load <8 x i16>, <8 x i16>* %526, align 1
  %528 = sub <8 x i16> %527, %449
  store <8 x i16> %528, <8 x i16>* %526, align 1
  %529 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %530 = bitcast i16* %529 to <8 x i16>*
  %531 = load <8 x i16>, <8 x i16>* %530, align 1
  %532 = sub <8 x i16> %531, %449
  store <8 x i16> %532, <8 x i16>* %530, align 1
  %533 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 328
  %534 = bitcast i16* %533 to <8 x i16>*
  %535 = load <8 x i16>, <8 x i16>* %534, align 1
  %536 = sub <8 x i16> %535, %449
  store <8 x i16> %536, <8 x i16>* %534, align 1
  %537 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %538 = bitcast i16* %537 to <8 x i16>*
  %539 = load <8 x i16>, <8 x i16>* %538, align 1
  %540 = sub <8 x i16> %539, %449
  store <8 x i16> %540, <8 x i16>* %538, align 1
  %541 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 360
  %542 = bitcast i16* %541 to <8 x i16>*
  %543 = load <8 x i16>, <8 x i16>* %542, align 1
  %544 = sub <8 x i16> %543, %449
  store <8 x i16> %544, <8 x i16>* %542, align 1
  %545 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %546 = bitcast i16* %545 to <8 x i16>*
  %547 = load <8 x i16>, <8 x i16>* %546, align 1
  %548 = sub <8 x i16> %547, %449
  store <8 x i16> %548, <8 x i16>* %546, align 1
  %549 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 392
  %550 = bitcast i16* %549 to <8 x i16>*
  %551 = load <8 x i16>, <8 x i16>* %550, align 1
  %552 = sub <8 x i16> %551, %449
  store <8 x i16> %552, <8 x i16>* %550, align 1
  %553 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %554 = bitcast i16* %553 to <8 x i16>*
  %555 = load <8 x i16>, <8 x i16>* %554, align 1
  %556 = sub <8 x i16> %555, %449
  store <8 x i16> %556, <8 x i16>* %554, align 1
  %557 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 424
  %558 = bitcast i16* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 1
  %560 = sub <8 x i16> %559, %449
  store <8 x i16> %560, <8 x i16>* %558, align 1
  %561 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %562 = bitcast i16* %561 to <8 x i16>*
  %563 = load <8 x i16>, <8 x i16>* %562, align 1
  %564 = sub <8 x i16> %563, %449
  store <8 x i16> %564, <8 x i16>* %562, align 1
  %565 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 456
  %566 = bitcast i16* %565 to <8 x i16>*
  %567 = load <8 x i16>, <8 x i16>* %566, align 1
  %568 = sub <8 x i16> %567, %449
  store <8 x i16> %568, <8 x i16>* %566, align 1
  %569 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %570 = bitcast i16* %569 to <8 x i16>*
  %571 = load <8 x i16>, <8 x i16>* %570, align 1
  %572 = sub <8 x i16> %571, %449
  store <8 x i16> %572, <8 x i16>* %570, align 1
  %573 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 488
  %574 = bitcast i16* %573 to <8 x i16>*
  %575 = load <8 x i16>, <8 x i16>* %574, align 1
  %576 = sub <8 x i16> %575, %449
  store <8 x i16> %576, <8 x i16>* %574, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %435 [
    i32 8, label %6
    i32 16, label %142
    i32 24, label %283
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 32
  %9 = select i1 %8, i32 %7, i32 32
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %50, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %49, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %48, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %15
  %48 = getelementptr inbounds i8, i8* %16, i64 %11
  %49 = getelementptr inbounds i16, i16* %14, i64 32
  %50 = add nuw nsw i32 %13, 1
  %51 = icmp slt i32 %50, %9
  br i1 %51, label %12, label %52

52:                                               ; preds = %12
  %53 = icmp ult i32 %50, 32
  br i1 %53, label %54, label %104

54:                                               ; preds = %52
  %55 = sub nsw i32 3, %13
  %56 = sub nsw i32 30, %13
  %57 = and i32 %55, 3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59

59:                                               ; preds = %54, %59
  %60 = phi i32 [ %69, %59 ], [ %50, %54 ]
  %61 = phi i16* [ %67, %59 ], [ %49, %54 ]
  %62 = phi <4 x i32> [ %68, %59 ], [ %47, %54 ]
  %63 = phi i32 [ %70, %59 ], [ %57, %54 ]
  %64 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %64, align 1
  %65 = getelementptr inbounds i16, i16* %61, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %66, align 1
  %67 = getelementptr inbounds i16, i16* %61, i64 32
  %68 = add <4 x i32> %46, %62
  %69 = add nuw nsw i32 %60, 1
  %70 = add i32 %63, -1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %59, !llvm.loop !23

72:                                               ; preds = %59, %54
  %73 = phi <4 x i32> [ undef, %54 ], [ %68, %59 ]
  %74 = phi i32 [ %50, %54 ], [ %69, %59 ]
  %75 = phi i16* [ %49, %54 ], [ %67, %59 ]
  %76 = phi <4 x i32> [ %47, %54 ], [ %68, %59 ]
  %77 = icmp ult i32 %56, 3
  br i1 %77, label %104, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32 [ %102, %78 ], [ %74, %72 ]
  %80 = phi i16* [ %100, %78 ], [ %75, %72 ]
  %81 = phi <4 x i32> [ %101, %78 ], [ %76, %72 ]
  %82 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %82, align 1
  %83 = getelementptr inbounds i16, i16* %80, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %84, align 1
  %85 = getelementptr inbounds i16, i16* %80, i64 32
  %86 = add <4 x i32> %46, %81
  %87 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %87, align 1
  %88 = getelementptr inbounds i16, i16* %80, i64 40
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %89, align 1
  %90 = getelementptr inbounds i16, i16* %80, i64 64
  %91 = add <4 x i32> %46, %86
  %92 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %92, align 1
  %93 = getelementptr inbounds i16, i16* %80, i64 72
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %94, align 1
  %95 = getelementptr inbounds i16, i16* %80, i64 96
  %96 = add <4 x i32> %46, %91
  %97 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %97, align 1
  %98 = getelementptr inbounds i16, i16* %80, i64 104
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %99, align 1
  %100 = getelementptr inbounds i16, i16* %80, i64 128
  %101 = add <4 x i32> %46, %96
  %102 = add nuw nsw i32 %79, 4
  %103 = icmp eq i32 %102, 32
  br i1 %103, label %104, label %78

104:                                              ; preds = %72, %78, %52
  %105 = phi <4 x i32> [ %47, %52 ], [ %73, %72 ], [ %101, %78 ]
  %106 = bitcast <4 x i32> %105 to <16 x i8>
  %107 = shufflevector <16 x i8> %106, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %108 = bitcast <16 x i8> %107 to <4 x i32>
  %109 = add <4 x i32> %105, %108
  %110 = bitcast <4 x i32> %109 to <16 x i8>
  %111 = shufflevector <16 x i8> %110, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %112 = bitcast <16 x i8> %111 to <4 x i32>
  %113 = add <4 x i32> %109, <i32 256, i32 256, i32 256, i32 256>
  %114 = add <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 9, i32 9, i32 9, i32 9>
  %116 = bitcast <4 x i32> %115 to <8 x i16>
  %117 = shufflevector <8 x i16> %116, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <8 x i16> %117 to <4 x i32>
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> zeroinitializer
  %120 = bitcast <4 x i32> %119 to <8 x i16>
  br label %121

121:                                              ; preds = %121, %104
  %122 = phi i32 [ 0, %104 ], [ %139, %121 ]
  %123 = phi i16* [ %10, %104 ], [ %140, %121 ]
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 1
  %126 = sub <8 x i16> %125, %120
  store <8 x i16> %126, <8 x i16>* %124, align 1
  %127 = getelementptr inbounds i16, i16* %123, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 1
  %130 = sub <8 x i16> %129, %120
  store <8 x i16> %130, <8 x i16>* %128, align 1
  %131 = getelementptr inbounds i16, i16* %123, i64 32
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = sub <8 x i16> %133, %120
  store <8 x i16> %134, <8 x i16>* %132, align 1
  %135 = getelementptr inbounds i16, i16* %123, i64 40
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 1
  %138 = sub <8 x i16> %137, %120
  store <8 x i16> %138, <8 x i16>* %136, align 1
  %139 = add nuw nsw i32 %122, 2
  %140 = getelementptr inbounds i16, i16* %123, i64 64
  %141 = icmp eq i32 %139, 32
  br i1 %141, label %585, label %121

142:                                              ; preds = %5
  %143 = ashr i32 %2, 1
  %144 = icmp slt i32 %143, 32
  %145 = select i1 %144, i32 %143, i32 32
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %147 = shl i64 %4, 1
  br label %148

148:                                              ; preds = %148, %142
  %149 = phi i32 [ 0, %142 ], [ %191, %148 ]
  %150 = phi i16* [ %146, %142 ], [ %190, %148 ]
  %151 = phi <4 x i32> [ zeroinitializer, %142 ], [ %188, %148 ]
  %152 = phi i8* [ %3, %142 ], [ %189, %148 ]
  %153 = getelementptr inbounds i8, i8* %152, i64 %4
  %154 = bitcast i8* %152 to <16 x i8>*
  %155 = load <16 x i8>, <16 x i8>* %154, align 1
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %157 = zext <8 x i8> %156 to <8 x i16>
  %158 = shufflevector <16 x i8> %155, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %159 = bitcast <16 x i8> %158 to <4 x i32>
  %160 = shufflevector <4 x i32> %159, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %161 = bitcast i8* %153 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1
  %163 = shufflevector <16 x i8> %162, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %164 = zext <8 x i8> %163 to <8 x i16>
  %165 = shufflevector <16 x i8> %162, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %168 = add nuw nsw <8 x i16> %164, %157
  %169 = bitcast <16 x i8> %158 to <8 x i16>
  %170 = bitcast <16 x i8> %165 to <8 x i16>
  %171 = add <8 x i16> %170, %169
  %172 = bitcast <4 x i32> %160 to <8 x i16>
  %173 = bitcast <4 x i32> %167 to <8 x i16>
  %174 = add <8 x i16> %173, %172
  %175 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %168, <8 x i16> %171) #6
  %176 = shl <8 x i16> %175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %177 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 1
  %178 = getelementptr inbounds i16, i16* %150, i64 8
  %179 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %174, <8 x i16> %174) #6
  %180 = shl <8 x i16> %179, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %181 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %181, align 1
  %182 = add <8 x i16> %180, %176
  %183 = shufflevector <8 x i16> %182, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = zext <4 x i16> %183 to <4 x i32>
  %185 = shufflevector <8 x i16> %182, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %186 = bitcast <8 x i16> %185 to <4 x i32>
  %187 = add <4 x i32> %186, %184
  %188 = add <4 x i32> %187, %151
  %189 = getelementptr inbounds i8, i8* %152, i64 %147
  %190 = getelementptr inbounds i16, i16* %150, i64 32
  %191 = add nuw nsw i32 %149, 1
  %192 = icmp slt i32 %191, %145
  br i1 %192, label %148, label %193

193:                                              ; preds = %148
  %194 = icmp ult i32 %191, 32
  br i1 %194, label %195, label %245

195:                                              ; preds = %193
  %196 = sub nsw i32 3, %149
  %197 = sub nsw i32 30, %149
  %198 = and i32 %196, 3
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %213, label %200

200:                                              ; preds = %195, %200
  %201 = phi i32 [ %210, %200 ], [ %191, %195 ]
  %202 = phi i16* [ %208, %200 ], [ %190, %195 ]
  %203 = phi <4 x i32> [ %209, %200 ], [ %188, %195 ]
  %204 = phi i32 [ %211, %200 ], [ %198, %195 ]
  %205 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %205, align 1
  %206 = getelementptr inbounds i16, i16* %202, i64 8
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %207, align 1
  %208 = getelementptr inbounds i16, i16* %202, i64 32
  %209 = add <4 x i32> %187, %203
  %210 = add nuw nsw i32 %201, 1
  %211 = add i32 %204, -1
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %200, !llvm.loop !24

213:                                              ; preds = %200, %195
  %214 = phi <4 x i32> [ undef, %195 ], [ %209, %200 ]
  %215 = phi i32 [ %191, %195 ], [ %210, %200 ]
  %216 = phi i16* [ %190, %195 ], [ %208, %200 ]
  %217 = phi <4 x i32> [ %188, %195 ], [ %209, %200 ]
  %218 = icmp ult i32 %197, 3
  br i1 %218, label %245, label %219

219:                                              ; preds = %213, %219
  %220 = phi i32 [ %243, %219 ], [ %215, %213 ]
  %221 = phi i16* [ %241, %219 ], [ %216, %213 ]
  %222 = phi <4 x i32> [ %242, %219 ], [ %217, %213 ]
  %223 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %223, align 1
  %224 = getelementptr inbounds i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %225, align 1
  %226 = getelementptr inbounds i16, i16* %221, i64 32
  %227 = add <4 x i32> %187, %222
  %228 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %221, i64 40
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %230, align 1
  %231 = getelementptr inbounds i16, i16* %221, i64 64
  %232 = add <4 x i32> %187, %227
  %233 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %233, align 1
  %234 = getelementptr inbounds i16, i16* %221, i64 72
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %235, align 1
  %236 = getelementptr inbounds i16, i16* %221, i64 96
  %237 = add <4 x i32> %187, %232
  %238 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %238, align 1
  %239 = getelementptr inbounds i16, i16* %221, i64 104
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %240, align 1
  %241 = getelementptr inbounds i16, i16* %221, i64 128
  %242 = add <4 x i32> %187, %237
  %243 = add nuw nsw i32 %220, 4
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %245, label %219

245:                                              ; preds = %213, %219, %193
  %246 = phi <4 x i32> [ %188, %193 ], [ %214, %213 ], [ %242, %219 ]
  %247 = bitcast <4 x i32> %246 to <16 x i8>
  %248 = shufflevector <16 x i8> %247, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %249 = bitcast <16 x i8> %248 to <4 x i32>
  %250 = add <4 x i32> %246, %249
  %251 = bitcast <4 x i32> %250 to <16 x i8>
  %252 = shufflevector <16 x i8> %251, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %253 = bitcast <16 x i8> %252 to <4 x i32>
  %254 = add <4 x i32> %250, <i32 256, i32 256, i32 256, i32 256>
  %255 = add <4 x i32> %254, %253
  %256 = ashr <4 x i32> %255, <i32 9, i32 9, i32 9, i32 9>
  %257 = bitcast <4 x i32> %256 to <8 x i16>
  %258 = shufflevector <8 x i16> %257, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %259 = bitcast <8 x i16> %258 to <4 x i32>
  %260 = shufflevector <4 x i32> %259, <4 x i32> undef, <4 x i32> zeroinitializer
  %261 = bitcast <4 x i32> %260 to <8 x i16>
  br label %262

262:                                              ; preds = %262, %245
  %263 = phi i32 [ 0, %245 ], [ %280, %262 ]
  %264 = phi i16* [ %146, %245 ], [ %281, %262 ]
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 1
  %267 = sub <8 x i16> %266, %261
  store <8 x i16> %267, <8 x i16>* %265, align 1
  %268 = getelementptr inbounds i16, i16* %264, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 1
  %271 = sub <8 x i16> %270, %261
  store <8 x i16> %271, <8 x i16>* %269, align 1
  %272 = getelementptr inbounds i16, i16* %264, i64 32
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 1
  %275 = sub <8 x i16> %274, %261
  store <8 x i16> %275, <8 x i16>* %273, align 1
  %276 = getelementptr inbounds i16, i16* %264, i64 40
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 1
  %279 = sub <8 x i16> %278, %261
  store <8 x i16> %279, <8 x i16>* %277, align 1
  %280 = add nuw nsw i32 %263, 2
  %281 = getelementptr inbounds i16, i16* %264, i64 64
  %282 = icmp eq i32 %280, 32
  br i1 %282, label %585, label %262

283:                                              ; preds = %5
  %284 = ashr i32 %2, 1
  %285 = icmp slt i32 %284, 32
  %286 = select i1 %285, i32 %284, i32 32
  %287 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %288 = shl i64 %4, 1
  br label %289

289:                                              ; preds = %289, %283
  %290 = phi i32 [ 0, %283 ], [ %343, %289 ]
  %291 = phi i16* [ %287, %283 ], [ %342, %289 ]
  %292 = phi <4 x i32> [ zeroinitializer, %283 ], [ %340, %289 ]
  %293 = phi i8* [ %3, %283 ], [ %341, %289 ]
  %294 = getelementptr inbounds i8, i8* %293, i64 %4
  %295 = bitcast i8* %293 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1
  %297 = shufflevector <16 x i8> %296, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %298 = zext <8 x i8> %297 to <8 x i16>
  %299 = shufflevector <16 x i8> %296, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %300 = getelementptr inbounds i8, i8* %293, i64 16
  %301 = bitcast i8* %300 to <16 x i8>*
  %302 = load <16 x i8>, <16 x i8>* %301, align 1
  %303 = shufflevector <16 x i8> %302, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %304 = zext <8 x i8> %303 to <8 x i16>
  %305 = bitcast <8 x i16> %304 to <4 x i32>
  %306 = shufflevector <4 x i32> %305, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %307 = bitcast i8* %294 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1
  %309 = shufflevector <16 x i8> %308, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %310 = zext <8 x i8> %309 to <8 x i16>
  %311 = shufflevector <16 x i8> %308, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %312 = getelementptr inbounds i8, i8* %294, i64 16
  %313 = bitcast i8* %312 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1
  %315 = shufflevector <16 x i8> %314, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %316 = zext <8 x i8> %315 to <8 x i16>
  %317 = bitcast <8 x i16> %316 to <4 x i32>
  %318 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %319 = add nuw nsw <8 x i16> %310, %298
  %320 = bitcast <16 x i8> %299 to <8 x i16>
  %321 = bitcast <16 x i8> %311 to <8 x i16>
  %322 = add <8 x i16> %321, %320
  %323 = add nuw nsw <8 x i16> %316, %304
  %324 = bitcast <4 x i32> %306 to <8 x i16>
  %325 = bitcast <4 x i32> %318 to <8 x i16>
  %326 = add <8 x i16> %325, %324
  %327 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %319, <8 x i16> %322) #6
  %328 = shl <8 x i16> %327, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %329 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %329, align 1
  %330 = getelementptr inbounds i16, i16* %291, i64 8
  %331 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %323, <8 x i16> %326) #6
  %332 = shl <8 x i16> %331, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %333 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %333, align 1
  %334 = add <8 x i16> %332, %328
  %335 = shufflevector <8 x i16> %334, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %336 = zext <4 x i16> %335 to <4 x i32>
  %337 = shufflevector <8 x i16> %334, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %338 = bitcast <8 x i16> %337 to <4 x i32>
  %339 = add <4 x i32> %338, %336
  %340 = add <4 x i32> %339, %292
  %341 = getelementptr inbounds i8, i8* %293, i64 %288
  %342 = getelementptr inbounds i16, i16* %291, i64 32
  %343 = add nuw nsw i32 %290, 1
  %344 = icmp slt i32 %343, %286
  br i1 %344, label %289, label %345

345:                                              ; preds = %289
  %346 = icmp ult i32 %343, 32
  br i1 %346, label %347, label %397

347:                                              ; preds = %345
  %348 = sub nsw i32 3, %290
  %349 = sub nsw i32 30, %290
  %350 = and i32 %348, 3
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %365, label %352

352:                                              ; preds = %347, %352
  %353 = phi i32 [ %362, %352 ], [ %343, %347 ]
  %354 = phi i16* [ %360, %352 ], [ %342, %347 ]
  %355 = phi <4 x i32> [ %361, %352 ], [ %340, %347 ]
  %356 = phi i32 [ %363, %352 ], [ %350, %347 ]
  %357 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %357, align 1
  %358 = getelementptr inbounds i16, i16* %354, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %359, align 1
  %360 = getelementptr inbounds i16, i16* %354, i64 32
  %361 = add <4 x i32> %339, %355
  %362 = add nuw nsw i32 %353, 1
  %363 = add i32 %356, -1
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %365, label %352, !llvm.loop !25

365:                                              ; preds = %352, %347
  %366 = phi <4 x i32> [ undef, %347 ], [ %361, %352 ]
  %367 = phi i32 [ %343, %347 ], [ %362, %352 ]
  %368 = phi i16* [ %342, %347 ], [ %360, %352 ]
  %369 = phi <4 x i32> [ %340, %347 ], [ %361, %352 ]
  %370 = icmp ult i32 %349, 3
  br i1 %370, label %397, label %371

371:                                              ; preds = %365, %371
  %372 = phi i32 [ %395, %371 ], [ %367, %365 ]
  %373 = phi i16* [ %393, %371 ], [ %368, %365 ]
  %374 = phi <4 x i32> [ %394, %371 ], [ %369, %365 ]
  %375 = bitcast i16* %373 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %375, align 1
  %376 = getelementptr inbounds i16, i16* %373, i64 8
  %377 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %377, align 1
  %378 = getelementptr inbounds i16, i16* %373, i64 32
  %379 = add <4 x i32> %339, %374
  %380 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %380, align 1
  %381 = getelementptr inbounds i16, i16* %373, i64 40
  %382 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %382, align 1
  %383 = getelementptr inbounds i16, i16* %373, i64 64
  %384 = add <4 x i32> %339, %379
  %385 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %385, align 1
  %386 = getelementptr inbounds i16, i16* %373, i64 72
  %387 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %387, align 1
  %388 = getelementptr inbounds i16, i16* %373, i64 96
  %389 = add <4 x i32> %339, %384
  %390 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %390, align 1
  %391 = getelementptr inbounds i16, i16* %373, i64 104
  %392 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %392, align 1
  %393 = getelementptr inbounds i16, i16* %373, i64 128
  %394 = add <4 x i32> %339, %389
  %395 = add nuw nsw i32 %372, 4
  %396 = icmp eq i32 %395, 32
  br i1 %396, label %397, label %371

397:                                              ; preds = %365, %371, %345
  %398 = phi <4 x i32> [ %340, %345 ], [ %366, %365 ], [ %394, %371 ]
  %399 = bitcast <4 x i32> %398 to <16 x i8>
  %400 = shufflevector <16 x i8> %399, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %401 = bitcast <16 x i8> %400 to <4 x i32>
  %402 = add <4 x i32> %398, %401
  %403 = bitcast <4 x i32> %402 to <16 x i8>
  %404 = shufflevector <16 x i8> %403, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %405 = bitcast <16 x i8> %404 to <4 x i32>
  %406 = add <4 x i32> %402, <i32 256, i32 256, i32 256, i32 256>
  %407 = add <4 x i32> %406, %405
  %408 = ashr <4 x i32> %407, <i32 9, i32 9, i32 9, i32 9>
  %409 = bitcast <4 x i32> %408 to <8 x i16>
  %410 = shufflevector <8 x i16> %409, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %411 = bitcast <8 x i16> %410 to <4 x i32>
  %412 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> zeroinitializer
  %413 = bitcast <4 x i32> %412 to <8 x i16>
  br label %414

414:                                              ; preds = %414, %397
  %415 = phi i32 [ 0, %397 ], [ %432, %414 ]
  %416 = phi i16* [ %287, %397 ], [ %433, %414 ]
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 1
  %419 = sub <8 x i16> %418, %413
  store <8 x i16> %419, <8 x i16>* %417, align 1
  %420 = getelementptr inbounds i16, i16* %416, i64 8
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 1
  %423 = sub <8 x i16> %422, %413
  store <8 x i16> %423, <8 x i16>* %421, align 1
  %424 = getelementptr inbounds i16, i16* %416, i64 32
  %425 = bitcast i16* %424 to <8 x i16>*
  %426 = load <8 x i16>, <8 x i16>* %425, align 1
  %427 = sub <8 x i16> %426, %413
  store <8 x i16> %427, <8 x i16>* %425, align 1
  %428 = getelementptr inbounds i16, i16* %416, i64 40
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 1
  %431 = sub <8 x i16> %430, %413
  store <8 x i16> %431, <8 x i16>* %429, align 1
  %432 = add nuw nsw i32 %415, 2
  %433 = getelementptr inbounds i16, i16* %416, i64 64
  %434 = icmp eq i32 %432, 32
  br i1 %434, label %585, label %414

435:                                              ; preds = %5
  %436 = ashr i32 %2, 1
  %437 = icmp slt i32 %436, 32
  %438 = select i1 %437, i32 %436, i32 32
  %439 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %440 = shl i64 %4, 1
  br label %441

441:                                              ; preds = %441, %435
  %442 = phi i32 [ 0, %435 ], [ %493, %441 ]
  %443 = phi i16* [ %439, %435 ], [ %492, %441 ]
  %444 = phi <4 x i32> [ zeroinitializer, %435 ], [ %490, %441 ]
  %445 = phi i8* [ %3, %435 ], [ %491, %441 ]
  %446 = getelementptr inbounds i8, i8* %445, i64 %4
  %447 = bitcast i8* %445 to <16 x i8>*
  %448 = load <16 x i8>, <16 x i8>* %447, align 1
  %449 = shufflevector <16 x i8> %448, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %450 = zext <8 x i8> %449 to <8 x i16>
  %451 = shufflevector <16 x i8> %448, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %452 = getelementptr inbounds i8, i8* %445, i64 16
  %453 = bitcast i8* %452 to <16 x i8>*
  %454 = load <16 x i8>, <16 x i8>* %453, align 1
  %455 = shufflevector <16 x i8> %454, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %456 = zext <8 x i8> %455 to <8 x i16>
  %457 = shufflevector <16 x i8> %454, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %458 = bitcast i8* %446 to <16 x i8>*
  %459 = load <16 x i8>, <16 x i8>* %458, align 1
  %460 = shufflevector <16 x i8> %459, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %461 = zext <8 x i8> %460 to <8 x i16>
  %462 = shufflevector <16 x i8> %459, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %463 = getelementptr inbounds i8, i8* %446, i64 16
  %464 = bitcast i8* %463 to <16 x i8>*
  %465 = load <16 x i8>, <16 x i8>* %464, align 1
  %466 = shufflevector <16 x i8> %465, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %467 = zext <8 x i8> %466 to <8 x i16>
  %468 = shufflevector <16 x i8> %465, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %469 = add nuw nsw <8 x i16> %461, %450
  %470 = bitcast <16 x i8> %451 to <8 x i16>
  %471 = bitcast <16 x i8> %462 to <8 x i16>
  %472 = add <8 x i16> %471, %470
  %473 = add nuw nsw <8 x i16> %467, %456
  %474 = bitcast <16 x i8> %457 to <8 x i16>
  %475 = bitcast <16 x i8> %468 to <8 x i16>
  %476 = add <8 x i16> %475, %474
  %477 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %469, <8 x i16> %472) #6
  %478 = shl <8 x i16> %477, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %479 = bitcast i16* %443 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %479, align 1
  %480 = getelementptr inbounds i16, i16* %443, i64 8
  %481 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %473, <8 x i16> %476) #6
  %482 = shl <8 x i16> %481, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %483 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %483, align 1
  %484 = add <8 x i16> %482, %478
  %485 = shufflevector <8 x i16> %484, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %486 = zext <4 x i16> %485 to <4 x i32>
  %487 = shufflevector <8 x i16> %484, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %488 = bitcast <8 x i16> %487 to <4 x i32>
  %489 = add <4 x i32> %488, %486
  %490 = add <4 x i32> %489, %444
  %491 = getelementptr inbounds i8, i8* %445, i64 %440
  %492 = getelementptr inbounds i16, i16* %443, i64 32
  %493 = add nuw nsw i32 %442, 1
  %494 = icmp slt i32 %493, %438
  br i1 %494, label %441, label %495

495:                                              ; preds = %441
  %496 = icmp ult i32 %493, 32
  br i1 %496, label %497, label %547

497:                                              ; preds = %495
  %498 = sub nsw i32 3, %442
  %499 = sub nsw i32 30, %442
  %500 = and i32 %498, 3
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %515, label %502

502:                                              ; preds = %497, %502
  %503 = phi i32 [ %512, %502 ], [ %493, %497 ]
  %504 = phi i16* [ %510, %502 ], [ %492, %497 ]
  %505 = phi <4 x i32> [ %511, %502 ], [ %490, %497 ]
  %506 = phi i32 [ %513, %502 ], [ %500, %497 ]
  %507 = bitcast i16* %504 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %507, align 1
  %508 = getelementptr inbounds i16, i16* %504, i64 8
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %509, align 1
  %510 = getelementptr inbounds i16, i16* %504, i64 32
  %511 = add <4 x i32> %489, %505
  %512 = add nuw nsw i32 %503, 1
  %513 = add i32 %506, -1
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %515, label %502, !llvm.loop !26

515:                                              ; preds = %502, %497
  %516 = phi <4 x i32> [ undef, %497 ], [ %511, %502 ]
  %517 = phi i32 [ %493, %497 ], [ %512, %502 ]
  %518 = phi i16* [ %492, %497 ], [ %510, %502 ]
  %519 = phi <4 x i32> [ %490, %497 ], [ %511, %502 ]
  %520 = icmp ult i32 %499, 3
  br i1 %520, label %547, label %521

521:                                              ; preds = %515, %521
  %522 = phi i32 [ %545, %521 ], [ %517, %515 ]
  %523 = phi i16* [ %543, %521 ], [ %518, %515 ]
  %524 = phi <4 x i32> [ %544, %521 ], [ %519, %515 ]
  %525 = bitcast i16* %523 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %525, align 1
  %526 = getelementptr inbounds i16, i16* %523, i64 8
  %527 = bitcast i16* %526 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %527, align 1
  %528 = getelementptr inbounds i16, i16* %523, i64 32
  %529 = add <4 x i32> %489, %524
  %530 = bitcast i16* %528 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %530, align 1
  %531 = getelementptr inbounds i16, i16* %523, i64 40
  %532 = bitcast i16* %531 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %532, align 1
  %533 = getelementptr inbounds i16, i16* %523, i64 64
  %534 = add <4 x i32> %489, %529
  %535 = bitcast i16* %533 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %535, align 1
  %536 = getelementptr inbounds i16, i16* %523, i64 72
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %537, align 1
  %538 = getelementptr inbounds i16, i16* %523, i64 96
  %539 = add <4 x i32> %489, %534
  %540 = bitcast i16* %538 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %540, align 1
  %541 = getelementptr inbounds i16, i16* %523, i64 104
  %542 = bitcast i16* %541 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %542, align 1
  %543 = getelementptr inbounds i16, i16* %523, i64 128
  %544 = add <4 x i32> %489, %539
  %545 = add nuw nsw i32 %522, 4
  %546 = icmp eq i32 %545, 32
  br i1 %546, label %547, label %521

547:                                              ; preds = %515, %521, %495
  %548 = phi <4 x i32> [ %490, %495 ], [ %516, %515 ], [ %544, %521 ]
  %549 = bitcast <4 x i32> %548 to <16 x i8>
  %550 = shufflevector <16 x i8> %549, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %551 = bitcast <16 x i8> %550 to <4 x i32>
  %552 = add <4 x i32> %548, %551
  %553 = bitcast <4 x i32> %552 to <16 x i8>
  %554 = shufflevector <16 x i8> %553, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %555 = bitcast <16 x i8> %554 to <4 x i32>
  %556 = add <4 x i32> %552, <i32 256, i32 256, i32 256, i32 256>
  %557 = add <4 x i32> %556, %555
  %558 = ashr <4 x i32> %557, <i32 9, i32 9, i32 9, i32 9>
  %559 = bitcast <4 x i32> %558 to <8 x i16>
  %560 = shufflevector <8 x i16> %559, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %561 = bitcast <8 x i16> %560 to <4 x i32>
  %562 = shufflevector <4 x i32> %561, <4 x i32> undef, <4 x i32> zeroinitializer
  %563 = bitcast <4 x i32> %562 to <8 x i16>
  br label %564

564:                                              ; preds = %564, %547
  %565 = phi i32 [ 0, %547 ], [ %582, %564 ]
  %566 = phi i16* [ %439, %547 ], [ %583, %564 ]
  %567 = bitcast i16* %566 to <8 x i16>*
  %568 = load <8 x i16>, <8 x i16>* %567, align 1
  %569 = sub <8 x i16> %568, %563
  store <8 x i16> %569, <8 x i16>* %567, align 1
  %570 = getelementptr inbounds i16, i16* %566, i64 8
  %571 = bitcast i16* %570 to <8 x i16>*
  %572 = load <8 x i16>, <8 x i16>* %571, align 1
  %573 = sub <8 x i16> %572, %563
  store <8 x i16> %573, <8 x i16>* %571, align 1
  %574 = getelementptr inbounds i16, i16* %566, i64 32
  %575 = bitcast i16* %574 to <8 x i16>*
  %576 = load <8 x i16>, <8 x i16>* %575, align 1
  %577 = sub <8 x i16> %576, %563
  store <8 x i16> %577, <8 x i16>* %575, align 1
  %578 = getelementptr inbounds i16, i16* %566, i64 40
  %579 = bitcast i16* %578 to <8 x i16>*
  %580 = load <8 x i16>, <8 x i16>* %579, align 1
  %581 = sub <8 x i16> %580, %563
  store <8 x i16> %581, <8 x i16>* %579, align 1
  %582 = add nuw nsw i32 %565, 2
  %583 = getelementptr inbounds i16, i16* %566, i64 64
  %584 = icmp eq i32 %582, 32
  br i1 %584, label %585, label %564

585:                                              ; preds = %414, %262, %121, %564
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi3EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %759 [
    i32 8, label %6
    i32 16, label %250
    i32 24, label %499
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 8
  %9 = select i1 %8, i32 %7, i32 8
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %56, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %55, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %53, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %54, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %42 = bitcast <8 x i16> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %44 = bitcast <4 x i32> %43 to <8 x i16>
  %45 = shl <8 x i16> %44, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %46 = add <8 x i16> %39, %35
  %47 = add <8 x i16> %45, %46
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = zext <4 x i16> %48 to <4 x i32>
  %50 = add <4 x i32> %15, %49
  %51 = shufflevector <8 x i16> %47, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = add <4 x i32> %50, %52
  %54 = getelementptr inbounds i8, i8* %16, i64 %11
  %55 = getelementptr inbounds i16, i16* %14, i64 32
  %56 = add nuw nsw i32 %13, 1
  %57 = icmp slt i32 %56, %9
  br i1 %57, label %12, label %58

58:                                               ; preds = %12
  %59 = icmp ult i32 %56, 8
  br i1 %59, label %60, label %121

60:                                               ; preds = %58
  %61 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %62 = bitcast <4 x i32> %61 to <8 x i16>
  %63 = shufflevector <8 x i16> %62, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %64 = sext <4 x i16> %63 to <4 x i32>
  %65 = shl nsw <4 x i32> %64, <i32 2, i32 2, i32 2, i32 2>
  %66 = shufflevector <8 x i16> %46, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = bitcast <8 x i16> %68 to <4 x i32>
  %70 = add <4 x i32> %69, %67
  %71 = add <4 x i32> %70, %65
  %72 = sub nsw i32 3, %13
  %73 = sub nsw i32 6, %13
  %74 = and i32 %72, 3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %60, %76
  %77 = phi i32 [ %86, %76 ], [ %56, %60 ]
  %78 = phi i16* [ %84, %76 ], [ %55, %60 ]
  %79 = phi <4 x i32> [ %85, %76 ], [ %53, %60 ]
  %80 = phi i32 [ %87, %76 ], [ %74, %60 ]
  %81 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %81, align 1
  %82 = getelementptr inbounds i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %83, align 1
  %84 = getelementptr inbounds i16, i16* %78, i64 32
  %85 = add <4 x i32> %71, %79
  %86 = add nuw nsw i32 %77, 1
  %87 = add i32 %80, -1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %76, !llvm.loop !27

89:                                               ; preds = %76, %60
  %90 = phi <4 x i32> [ undef, %60 ], [ %85, %76 ]
  %91 = phi i32 [ %56, %60 ], [ %86, %76 ]
  %92 = phi i16* [ %55, %60 ], [ %84, %76 ]
  %93 = phi <4 x i32> [ %53, %60 ], [ %85, %76 ]
  %94 = icmp ult i32 %73, 3
  br i1 %94, label %121, label %95

95:                                               ; preds = %89, %95
  %96 = phi i32 [ %119, %95 ], [ %91, %89 ]
  %97 = phi i16* [ %117, %95 ], [ %92, %89 ]
  %98 = phi <4 x i32> [ %118, %95 ], [ %93, %89 ]
  %99 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %99, align 1
  %100 = getelementptr inbounds i16, i16* %97, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %101, align 1
  %102 = getelementptr inbounds i16, i16* %97, i64 32
  %103 = add <4 x i32> %71, %98
  %104 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %104, align 1
  %105 = getelementptr inbounds i16, i16* %97, i64 40
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %106, align 1
  %107 = getelementptr inbounds i16, i16* %97, i64 64
  %108 = add <4 x i32> %71, %103
  %109 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %109, align 1
  %110 = getelementptr inbounds i16, i16* %97, i64 72
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %111, align 1
  %112 = getelementptr inbounds i16, i16* %97, i64 96
  %113 = add <4 x i32> %71, %108
  %114 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %114, align 1
  %115 = getelementptr inbounds i16, i16* %97, i64 104
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %116, align 1
  %117 = getelementptr inbounds i16, i16* %97, i64 128
  %118 = add <4 x i32> %71, %113
  %119 = add nuw nsw i32 %96, 4
  %120 = icmp eq i32 %119, 8
  br i1 %120, label %121, label %95

121:                                              ; preds = %89, %95, %58
  %122 = phi <4 x i32> [ %53, %58 ], [ %90, %89 ], [ %118, %95 ]
  %123 = bitcast <4 x i32> %122 to <16 x i8>
  %124 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %125 = bitcast <16 x i8> %124 to <4 x i32>
  %126 = add <4 x i32> %122, %125
  %127 = bitcast <4 x i32> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %127, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %129 = bitcast <16 x i8> %128 to <4 x i32>
  %130 = add <4 x i32> %126, <i32 128, i32 128, i32 128, i32 128>
  %131 = add <4 x i32> %130, %129
  %132 = ashr <4 x i32> %131, <i32 8, i32 8, i32 8, i32 8>
  %133 = bitcast <4 x i32> %132 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <8 x i16> %134 to <4 x i32>
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> zeroinitializer
  %137 = bitcast <4 x i32> %136 to <8 x i16>
  %138 = bitcast [32 x i16]* %0 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = sub <8 x i16> %139, %137
  store <8 x i16> %140, <8 x i16>* %138, align 1
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 1
  %144 = sub <8 x i16> %143, %137
  store <8 x i16> %144, <8 x i16>* %142, align 1
  %145 = shufflevector <8 x i16> %144, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %146 = bitcast <8 x i16> %145 to <4 x i32>
  %147 = shufflevector <4 x i32> %146, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %149 = bitcast i16* %148 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 1
  %150 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %151 = bitcast i16* %150 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %151, align 1
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = sub <8 x i16> %154, %137
  store <8 x i16> %155, <8 x i16>* %153, align 1
  %156 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = sub <8 x i16> %158, %137
  store <8 x i16> %159, <8 x i16>* %157, align 1
  %160 = shufflevector <8 x i16> %159, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %161 = bitcast <8 x i16> %160 to <4 x i32>
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %164 = bitcast i16* %163 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %164, align 1
  %165 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %166 = bitcast i16* %165 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %166, align 1
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 1
  %170 = sub <8 x i16> %169, %137
  store <8 x i16> %170, <8 x i16>* %168, align 1
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = sub <8 x i16> %173, %137
  store <8 x i16> %174, <8 x i16>* %172, align 1
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %176 = bitcast <8 x i16> %175 to <4 x i32>
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %179 = bitcast i16* %178 to <4 x i32>*
  store <4 x i32> %177, <4 x i32>* %179, align 1
  %180 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %181 = bitcast i16* %180 to <4 x i32>*
  store <4 x i32> %177, <4 x i32>* %181, align 1
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 1
  %185 = sub <8 x i16> %184, %137
  store <8 x i16> %185, <8 x i16>* %183, align 1
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = sub <8 x i16> %188, %137
  store <8 x i16> %189, <8 x i16>* %187, align 1
  %190 = shufflevector <8 x i16> %189, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %191 = bitcast <8 x i16> %190 to <4 x i32>
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %193 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %194 = bitcast i16* %193 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %194, align 1
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %196 = bitcast i16* %195 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %196, align 1
  %197 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 1
  %200 = sub <8 x i16> %199, %137
  store <8 x i16> %200, <8 x i16>* %198, align 1
  %201 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 1
  %204 = sub <8 x i16> %203, %137
  store <8 x i16> %204, <8 x i16>* %202, align 1
  %205 = shufflevector <8 x i16> %204, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %206 = bitcast <8 x i16> %205 to <4 x i32>
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %208 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %209 = bitcast i16* %208 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %209, align 1
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %211 = bitcast i16* %210 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %211, align 1
  %212 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 1
  %215 = sub <8 x i16> %214, %137
  store <8 x i16> %215, <8 x i16>* %213, align 1
  %216 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 1
  %219 = sub <8 x i16> %218, %137
  store <8 x i16> %219, <8 x i16>* %217, align 1
  %220 = shufflevector <8 x i16> %219, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %221 = bitcast <8 x i16> %220 to <4 x i32>
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %223 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %224 = bitcast i16* %223 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %224, align 1
  %225 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %226 = bitcast i16* %225 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %226, align 1
  %227 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = sub <8 x i16> %229, %137
  store <8 x i16> %230, <8 x i16>* %228, align 1
  %231 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = sub <8 x i16> %233, %137
  store <8 x i16> %234, <8 x i16>* %232, align 1
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %236 = bitcast <8 x i16> %235 to <4 x i32>
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %238 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %239 = bitcast i16* %238 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %239, align 1
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %241 = bitcast i16* %240 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %241, align 1
  %242 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 1
  %245 = sub <8 x i16> %244, %137
  store <8 x i16> %245, <8 x i16>* %243, align 1
  %246 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 1
  %249 = sub <8 x i16> %248, %137
  store <8 x i16> %249, <8 x i16>* %247, align 1
  br label %1017

250:                                              ; preds = %5
  %251 = ashr i32 %2, 1
  %252 = icmp slt i32 %251, 8
  %253 = select i1 %252, i32 %251, i32 8
  %254 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %255 = shl i64 %4, 1
  br label %256

256:                                              ; preds = %256, %250
  %257 = phi i32 [ 0, %250 ], [ %305, %256 ]
  %258 = phi i16* [ %254, %250 ], [ %304, %256 ]
  %259 = phi <4 x i32> [ zeroinitializer, %250 ], [ %302, %256 ]
  %260 = phi i8* [ %3, %250 ], [ %303, %256 ]
  %261 = getelementptr inbounds i8, i8* %260, i64 %4
  %262 = bitcast i8* %260 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 1
  %264 = shufflevector <16 x i8> %263, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %265 = zext <8 x i8> %264 to <8 x i16>
  %266 = shufflevector <16 x i8> %263, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %267 = bitcast <16 x i8> %266 to <4 x i32>
  %268 = shufflevector <4 x i32> %267, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %269 = bitcast i8* %261 to <16 x i8>*
  %270 = load <16 x i8>, <16 x i8>* %269, align 1
  %271 = shufflevector <16 x i8> %270, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %272 = zext <8 x i8> %271 to <8 x i16>
  %273 = shufflevector <16 x i8> %270, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %274 = bitcast <16 x i8> %273 to <4 x i32>
  %275 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %276 = add nuw nsw <8 x i16> %272, %265
  %277 = bitcast <16 x i8> %266 to <8 x i16>
  %278 = bitcast <16 x i8> %273 to <8 x i16>
  %279 = add <8 x i16> %278, %277
  %280 = bitcast <4 x i32> %268 to <8 x i16>
  %281 = bitcast <4 x i32> %275 to <8 x i16>
  %282 = add <8 x i16> %281, %280
  %283 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %276, <8 x i16> %279) #6
  %284 = shl <8 x i16> %283, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %285 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %285, align 1
  %286 = getelementptr inbounds i16, i16* %258, i64 8
  %287 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %282, <8 x i16> %282) #6
  %288 = shl <8 x i16> %287, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %289 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %289, align 1
  %290 = shufflevector <8 x i16> %288, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %291 = bitcast <8 x i16> %290 to <4 x i32>
  %292 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %293 = bitcast <4 x i32> %292 to <8 x i16>
  %294 = shl <8 x i16> %293, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %295 = add <8 x i16> %288, %284
  %296 = add <8 x i16> %294, %295
  %297 = shufflevector <8 x i16> %296, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %298 = zext <4 x i16> %297 to <4 x i32>
  %299 = add <4 x i32> %259, %298
  %300 = shufflevector <8 x i16> %296, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %301 = bitcast <8 x i16> %300 to <4 x i32>
  %302 = add <4 x i32> %299, %301
  %303 = getelementptr inbounds i8, i8* %260, i64 %255
  %304 = getelementptr inbounds i16, i16* %258, i64 32
  %305 = add nuw nsw i32 %257, 1
  %306 = icmp slt i32 %305, %253
  br i1 %306, label %256, label %307

307:                                              ; preds = %256
  %308 = icmp ult i32 %305, 8
  br i1 %308, label %309, label %370

309:                                              ; preds = %307
  %310 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %311 = bitcast <4 x i32> %310 to <8 x i16>
  %312 = shufflevector <8 x i16> %311, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %313 = sext <4 x i16> %312 to <4 x i32>
  %314 = shl nsw <4 x i32> %313, <i32 2, i32 2, i32 2, i32 2>
  %315 = shufflevector <8 x i16> %295, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %316 = zext <4 x i16> %315 to <4 x i32>
  %317 = shufflevector <8 x i16> %295, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %318 = bitcast <8 x i16> %317 to <4 x i32>
  %319 = add <4 x i32> %318, %316
  %320 = add <4 x i32> %319, %314
  %321 = sub nsw i32 3, %257
  %322 = sub nsw i32 6, %257
  %323 = and i32 %321, 3
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %338, label %325

325:                                              ; preds = %309, %325
  %326 = phi i32 [ %335, %325 ], [ %305, %309 ]
  %327 = phi i16* [ %333, %325 ], [ %304, %309 ]
  %328 = phi <4 x i32> [ %334, %325 ], [ %302, %309 ]
  %329 = phi i32 [ %336, %325 ], [ %323, %309 ]
  %330 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %330, align 1
  %331 = getelementptr inbounds i16, i16* %327, i64 8
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %332, align 1
  %333 = getelementptr inbounds i16, i16* %327, i64 32
  %334 = add <4 x i32> %320, %328
  %335 = add nuw nsw i32 %326, 1
  %336 = add i32 %329, -1
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %325, !llvm.loop !28

338:                                              ; preds = %325, %309
  %339 = phi <4 x i32> [ undef, %309 ], [ %334, %325 ]
  %340 = phi i32 [ %305, %309 ], [ %335, %325 ]
  %341 = phi i16* [ %304, %309 ], [ %333, %325 ]
  %342 = phi <4 x i32> [ %302, %309 ], [ %334, %325 ]
  %343 = icmp ult i32 %322, 3
  br i1 %343, label %370, label %344

344:                                              ; preds = %338, %344
  %345 = phi i32 [ %368, %344 ], [ %340, %338 ]
  %346 = phi i16* [ %366, %344 ], [ %341, %338 ]
  %347 = phi <4 x i32> [ %367, %344 ], [ %342, %338 ]
  %348 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %348, align 1
  %349 = getelementptr inbounds i16, i16* %346, i64 8
  %350 = bitcast i16* %349 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %350, align 1
  %351 = getelementptr inbounds i16, i16* %346, i64 32
  %352 = add <4 x i32> %320, %347
  %353 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %353, align 1
  %354 = getelementptr inbounds i16, i16* %346, i64 40
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %355, align 1
  %356 = getelementptr inbounds i16, i16* %346, i64 64
  %357 = add <4 x i32> %320, %352
  %358 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %358, align 1
  %359 = getelementptr inbounds i16, i16* %346, i64 72
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %360, align 1
  %361 = getelementptr inbounds i16, i16* %346, i64 96
  %362 = add <4 x i32> %320, %357
  %363 = bitcast i16* %361 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %363, align 1
  %364 = getelementptr inbounds i16, i16* %346, i64 104
  %365 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %365, align 1
  %366 = getelementptr inbounds i16, i16* %346, i64 128
  %367 = add <4 x i32> %320, %362
  %368 = add nuw nsw i32 %345, 4
  %369 = icmp eq i32 %368, 8
  br i1 %369, label %370, label %344

370:                                              ; preds = %338, %344, %307
  %371 = phi <4 x i32> [ %302, %307 ], [ %339, %338 ], [ %367, %344 ]
  %372 = bitcast <4 x i32> %371 to <16 x i8>
  %373 = shufflevector <16 x i8> %372, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %374 = bitcast <16 x i8> %373 to <4 x i32>
  %375 = add <4 x i32> %371, %374
  %376 = bitcast <4 x i32> %375 to <16 x i8>
  %377 = shufflevector <16 x i8> %376, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %378 = bitcast <16 x i8> %377 to <4 x i32>
  %379 = add <4 x i32> %375, <i32 128, i32 128, i32 128, i32 128>
  %380 = add <4 x i32> %379, %378
  %381 = ashr <4 x i32> %380, <i32 8, i32 8, i32 8, i32 8>
  %382 = bitcast <4 x i32> %381 to <8 x i16>
  %383 = shufflevector <8 x i16> %382, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %384 = bitcast <8 x i16> %383 to <4 x i32>
  %385 = shufflevector <4 x i32> %384, <4 x i32> undef, <4 x i32> zeroinitializer
  %386 = bitcast <4 x i32> %385 to <8 x i16>
  %387 = bitcast [32 x i16]* %0 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 1
  %389 = sub <8 x i16> %388, %386
  store <8 x i16> %389, <8 x i16>* %387, align 1
  %390 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  %392 = load <8 x i16>, <8 x i16>* %391, align 1
  %393 = sub <8 x i16> %392, %386
  store <8 x i16> %393, <8 x i16>* %391, align 1
  %394 = shufflevector <8 x i16> %393, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %395 = bitcast <8 x i16> %394 to <4 x i32>
  %396 = shufflevector <4 x i32> %395, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %397 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %398 = bitcast i16* %397 to <4 x i32>*
  store <4 x i32> %396, <4 x i32>* %398, align 1
  %399 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %400 = bitcast i16* %399 to <4 x i32>*
  store <4 x i32> %396, <4 x i32>* %400, align 1
  %401 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %402 = bitcast i16* %401 to <8 x i16>*
  %403 = load <8 x i16>, <8 x i16>* %402, align 1
  %404 = sub <8 x i16> %403, %386
  store <8 x i16> %404, <8 x i16>* %402, align 1
  %405 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %406 = bitcast i16* %405 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 1
  %408 = sub <8 x i16> %407, %386
  store <8 x i16> %408, <8 x i16>* %406, align 1
  %409 = shufflevector <8 x i16> %408, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %410 = bitcast <8 x i16> %409 to <4 x i32>
  %411 = shufflevector <4 x i32> %410, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %412 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %413 = bitcast i16* %412 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %413, align 1
  %414 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %415 = bitcast i16* %414 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %415, align 1
  %416 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 1
  %419 = sub <8 x i16> %418, %386
  store <8 x i16> %419, <8 x i16>* %417, align 1
  %420 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 1
  %423 = sub <8 x i16> %422, %386
  store <8 x i16> %423, <8 x i16>* %421, align 1
  %424 = shufflevector <8 x i16> %423, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %425 = bitcast <8 x i16> %424 to <4 x i32>
  %426 = shufflevector <4 x i32> %425, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %427 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %428 = bitcast i16* %427 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %428, align 1
  %429 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %430 = bitcast i16* %429 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %430, align 1
  %431 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %432 = bitcast i16* %431 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 1
  %434 = sub <8 x i16> %433, %386
  store <8 x i16> %434, <8 x i16>* %432, align 1
  %435 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 1
  %438 = sub <8 x i16> %437, %386
  store <8 x i16> %438, <8 x i16>* %436, align 1
  %439 = shufflevector <8 x i16> %438, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %440 = bitcast <8 x i16> %439 to <4 x i32>
  %441 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %442 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %443 = bitcast i16* %442 to <4 x i32>*
  store <4 x i32> %441, <4 x i32>* %443, align 1
  %444 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %445 = bitcast i16* %444 to <4 x i32>*
  store <4 x i32> %441, <4 x i32>* %445, align 1
  %446 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %447 = bitcast i16* %446 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 1
  %449 = sub <8 x i16> %448, %386
  store <8 x i16> %449, <8 x i16>* %447, align 1
  %450 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %451 = bitcast i16* %450 to <8 x i16>*
  %452 = load <8 x i16>, <8 x i16>* %451, align 1
  %453 = sub <8 x i16> %452, %386
  store <8 x i16> %453, <8 x i16>* %451, align 1
  %454 = shufflevector <8 x i16> %453, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %455 = bitcast <8 x i16> %454 to <4 x i32>
  %456 = shufflevector <4 x i32> %455, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %457 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %458 = bitcast i16* %457 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %458, align 1
  %459 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %460 = bitcast i16* %459 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %460, align 1
  %461 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %462 = bitcast i16* %461 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 1
  %464 = sub <8 x i16> %463, %386
  store <8 x i16> %464, <8 x i16>* %462, align 1
  %465 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 1
  %468 = sub <8 x i16> %467, %386
  store <8 x i16> %468, <8 x i16>* %466, align 1
  %469 = shufflevector <8 x i16> %468, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %470 = bitcast <8 x i16> %469 to <4 x i32>
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %472 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %473 = bitcast i16* %472 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %473, align 1
  %474 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %475 = bitcast i16* %474 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %475, align 1
  %476 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %477 = bitcast i16* %476 to <8 x i16>*
  %478 = load <8 x i16>, <8 x i16>* %477, align 1
  %479 = sub <8 x i16> %478, %386
  store <8 x i16> %479, <8 x i16>* %477, align 1
  %480 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 1
  %483 = sub <8 x i16> %482, %386
  store <8 x i16> %483, <8 x i16>* %481, align 1
  %484 = shufflevector <8 x i16> %483, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %485 = bitcast <8 x i16> %484 to <4 x i32>
  %486 = shufflevector <4 x i32> %485, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %487 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %488 = bitcast i16* %487 to <4 x i32>*
  store <4 x i32> %486, <4 x i32>* %488, align 1
  %489 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %490 = bitcast i16* %489 to <4 x i32>*
  store <4 x i32> %486, <4 x i32>* %490, align 1
  %491 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %492 = bitcast i16* %491 to <8 x i16>*
  %493 = load <8 x i16>, <8 x i16>* %492, align 1
  %494 = sub <8 x i16> %493, %386
  store <8 x i16> %494, <8 x i16>* %492, align 1
  %495 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %496 = bitcast i16* %495 to <8 x i16>*
  %497 = load <8 x i16>, <8 x i16>* %496, align 1
  %498 = sub <8 x i16> %497, %386
  store <8 x i16> %498, <8 x i16>* %496, align 1
  br label %1017

499:                                              ; preds = %5
  %500 = ashr i32 %2, 1
  %501 = icmp slt i32 %500, 8
  %502 = select i1 %501, i32 %500, i32 8
  %503 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %504 = shl i64 %4, 1
  br label %505

505:                                              ; preds = %505, %499
  %506 = phi i32 [ 0, %499 ], [ %565, %505 ]
  %507 = phi i16* [ %503, %499 ], [ %564, %505 ]
  %508 = phi <4 x i32> [ zeroinitializer, %499 ], [ %562, %505 ]
  %509 = phi i8* [ %3, %499 ], [ %563, %505 ]
  %510 = getelementptr inbounds i8, i8* %509, i64 %4
  %511 = bitcast i8* %509 to <16 x i8>*
  %512 = load <16 x i8>, <16 x i8>* %511, align 1
  %513 = shufflevector <16 x i8> %512, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %514 = zext <8 x i8> %513 to <8 x i16>
  %515 = shufflevector <16 x i8> %512, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %516 = getelementptr inbounds i8, i8* %509, i64 16
  %517 = bitcast i8* %516 to <16 x i8>*
  %518 = load <16 x i8>, <16 x i8>* %517, align 1
  %519 = shufflevector <16 x i8> %518, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %520 = zext <8 x i8> %519 to <8 x i16>
  %521 = bitcast <8 x i16> %520 to <4 x i32>
  %522 = shufflevector <4 x i32> %521, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %523 = bitcast i8* %510 to <16 x i8>*
  %524 = load <16 x i8>, <16 x i8>* %523, align 1
  %525 = shufflevector <16 x i8> %524, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %526 = zext <8 x i8> %525 to <8 x i16>
  %527 = shufflevector <16 x i8> %524, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %528 = getelementptr inbounds i8, i8* %510, i64 16
  %529 = bitcast i8* %528 to <16 x i8>*
  %530 = load <16 x i8>, <16 x i8>* %529, align 1
  %531 = shufflevector <16 x i8> %530, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %532 = zext <8 x i8> %531 to <8 x i16>
  %533 = bitcast <8 x i16> %532 to <4 x i32>
  %534 = shufflevector <4 x i32> %533, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %535 = add nuw nsw <8 x i16> %526, %514
  %536 = bitcast <16 x i8> %515 to <8 x i16>
  %537 = bitcast <16 x i8> %527 to <8 x i16>
  %538 = add <8 x i16> %537, %536
  %539 = add nuw nsw <8 x i16> %532, %520
  %540 = bitcast <4 x i32> %522 to <8 x i16>
  %541 = bitcast <4 x i32> %534 to <8 x i16>
  %542 = add <8 x i16> %541, %540
  %543 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %535, <8 x i16> %538) #6
  %544 = shl <8 x i16> %543, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %545 = bitcast i16* %507 to <8 x i16>*
  store <8 x i16> %544, <8 x i16>* %545, align 1
  %546 = getelementptr inbounds i16, i16* %507, i64 8
  %547 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %539, <8 x i16> %542) #6
  %548 = shl <8 x i16> %547, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %549 = bitcast i16* %546 to <8 x i16>*
  store <8 x i16> %548, <8 x i16>* %549, align 1
  %550 = shufflevector <8 x i16> %548, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %551 = bitcast <8 x i16> %550 to <4 x i32>
  %552 = shufflevector <4 x i32> %551, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %553 = bitcast <4 x i32> %552 to <8 x i16>
  %554 = shl <8 x i16> %553, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %555 = add <8 x i16> %548, %544
  %556 = add <8 x i16> %554, %555
  %557 = shufflevector <8 x i16> %556, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %558 = zext <4 x i16> %557 to <4 x i32>
  %559 = add <4 x i32> %508, %558
  %560 = shufflevector <8 x i16> %556, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %561 = bitcast <8 x i16> %560 to <4 x i32>
  %562 = add <4 x i32> %559, %561
  %563 = getelementptr inbounds i8, i8* %509, i64 %504
  %564 = getelementptr inbounds i16, i16* %507, i64 32
  %565 = add nuw nsw i32 %506, 1
  %566 = icmp slt i32 %565, %502
  br i1 %566, label %505, label %567

567:                                              ; preds = %505
  %568 = icmp ult i32 %565, 8
  br i1 %568, label %569, label %630

569:                                              ; preds = %567
  %570 = shufflevector <4 x i32> %551, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %571 = bitcast <4 x i32> %570 to <8 x i16>
  %572 = shufflevector <8 x i16> %571, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %573 = sext <4 x i16> %572 to <4 x i32>
  %574 = shl nsw <4 x i32> %573, <i32 2, i32 2, i32 2, i32 2>
  %575 = shufflevector <8 x i16> %555, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %576 = zext <4 x i16> %575 to <4 x i32>
  %577 = shufflevector <8 x i16> %555, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %578 = bitcast <8 x i16> %577 to <4 x i32>
  %579 = add <4 x i32> %578, %576
  %580 = add <4 x i32> %579, %574
  %581 = sub nsw i32 3, %506
  %582 = sub nsw i32 6, %506
  %583 = and i32 %581, 3
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %598, label %585

585:                                              ; preds = %569, %585
  %586 = phi i32 [ %595, %585 ], [ %565, %569 ]
  %587 = phi i16* [ %593, %585 ], [ %564, %569 ]
  %588 = phi <4 x i32> [ %594, %585 ], [ %562, %569 ]
  %589 = phi i32 [ %596, %585 ], [ %583, %569 ]
  %590 = bitcast i16* %587 to <8 x i16>*
  store <8 x i16> %544, <8 x i16>* %590, align 1
  %591 = getelementptr inbounds i16, i16* %587, i64 8
  %592 = bitcast i16* %591 to <8 x i16>*
  store <8 x i16> %548, <8 x i16>* %592, align 1
  %593 = getelementptr inbounds i16, i16* %587, i64 32
  %594 = add <4 x i32> %580, %588
  %595 = add nuw nsw i32 %586, 1
  %596 = add i32 %589, -1
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %598, label %585, !llvm.loop !29

598:                                              ; preds = %585, %569
  %599 = phi <4 x i32> [ undef, %569 ], [ %594, %585 ]
  %600 = phi i32 [ %565, %569 ], [ %595, %585 ]
  %601 = phi i16* [ %564, %569 ], [ %593, %585 ]
  %602 = phi <4 x i32> [ %562, %569 ], [ %594, %585 ]
  %603 = icmp ult i32 %582, 3
  br i1 %603, label %630, label %604

604:                                              ; preds = %598, %604
  %605 = phi i32 [ %628, %604 ], [ %600, %598 ]
  %606 = phi i16* [ %626, %604 ], [ %601, %598 ]
  %607 = phi <4 x i32> [ %627, %604 ], [ %602, %598 ]
  %608 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> %544, <8 x i16>* %608, align 1
  %609 = getelementptr inbounds i16, i16* %606, i64 8
  %610 = bitcast i16* %609 to <8 x i16>*
  store <8 x i16> %548, <8 x i16>* %610, align 1
  %611 = getelementptr inbounds i16, i16* %606, i64 32
  %612 = add <4 x i32> %580, %607
  %613 = bitcast i16* %611 to <8 x i16>*
  store <8 x i16> %544, <8 x i16>* %613, align 1
  %614 = getelementptr inbounds i16, i16* %606, i64 40
  %615 = bitcast i16* %614 to <8 x i16>*
  store <8 x i16> %548, <8 x i16>* %615, align 1
  %616 = getelementptr inbounds i16, i16* %606, i64 64
  %617 = add <4 x i32> %580, %612
  %618 = bitcast i16* %616 to <8 x i16>*
  store <8 x i16> %544, <8 x i16>* %618, align 1
  %619 = getelementptr inbounds i16, i16* %606, i64 72
  %620 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> %548, <8 x i16>* %620, align 1
  %621 = getelementptr inbounds i16, i16* %606, i64 96
  %622 = add <4 x i32> %580, %617
  %623 = bitcast i16* %621 to <8 x i16>*
  store <8 x i16> %544, <8 x i16>* %623, align 1
  %624 = getelementptr inbounds i16, i16* %606, i64 104
  %625 = bitcast i16* %624 to <8 x i16>*
  store <8 x i16> %548, <8 x i16>* %625, align 1
  %626 = getelementptr inbounds i16, i16* %606, i64 128
  %627 = add <4 x i32> %580, %622
  %628 = add nuw nsw i32 %605, 4
  %629 = icmp eq i32 %628, 8
  br i1 %629, label %630, label %604

630:                                              ; preds = %598, %604, %567
  %631 = phi <4 x i32> [ %562, %567 ], [ %599, %598 ], [ %627, %604 ]
  %632 = bitcast <4 x i32> %631 to <16 x i8>
  %633 = shufflevector <16 x i8> %632, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %634 = bitcast <16 x i8> %633 to <4 x i32>
  %635 = add <4 x i32> %631, %634
  %636 = bitcast <4 x i32> %635 to <16 x i8>
  %637 = shufflevector <16 x i8> %636, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %638 = bitcast <16 x i8> %637 to <4 x i32>
  %639 = add <4 x i32> %635, <i32 128, i32 128, i32 128, i32 128>
  %640 = add <4 x i32> %639, %638
  %641 = ashr <4 x i32> %640, <i32 8, i32 8, i32 8, i32 8>
  %642 = bitcast <4 x i32> %641 to <8 x i16>
  %643 = shufflevector <8 x i16> %642, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %644 = bitcast <8 x i16> %643 to <4 x i32>
  %645 = shufflevector <4 x i32> %644, <4 x i32> undef, <4 x i32> zeroinitializer
  %646 = bitcast <4 x i32> %645 to <8 x i16>
  %647 = bitcast [32 x i16]* %0 to <8 x i16>*
  %648 = load <8 x i16>, <8 x i16>* %647, align 1
  %649 = sub <8 x i16> %648, %646
  store <8 x i16> %649, <8 x i16>* %647, align 1
  %650 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %651 = bitcast i16* %650 to <8 x i16>*
  %652 = load <8 x i16>, <8 x i16>* %651, align 1
  %653 = sub <8 x i16> %652, %646
  store <8 x i16> %653, <8 x i16>* %651, align 1
  %654 = shufflevector <8 x i16> %653, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %655 = bitcast <8 x i16> %654 to <4 x i32>
  %656 = shufflevector <4 x i32> %655, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %657 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %658 = bitcast i16* %657 to <4 x i32>*
  store <4 x i32> %656, <4 x i32>* %658, align 1
  %659 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %660 = bitcast i16* %659 to <4 x i32>*
  store <4 x i32> %656, <4 x i32>* %660, align 1
  %661 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %662 = bitcast i16* %661 to <8 x i16>*
  %663 = load <8 x i16>, <8 x i16>* %662, align 1
  %664 = sub <8 x i16> %663, %646
  store <8 x i16> %664, <8 x i16>* %662, align 1
  %665 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %666 = bitcast i16* %665 to <8 x i16>*
  %667 = load <8 x i16>, <8 x i16>* %666, align 1
  %668 = sub <8 x i16> %667, %646
  store <8 x i16> %668, <8 x i16>* %666, align 1
  %669 = shufflevector <8 x i16> %668, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %670 = bitcast <8 x i16> %669 to <4 x i32>
  %671 = shufflevector <4 x i32> %670, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %672 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %673 = bitcast i16* %672 to <4 x i32>*
  store <4 x i32> %671, <4 x i32>* %673, align 1
  %674 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %675 = bitcast i16* %674 to <4 x i32>*
  store <4 x i32> %671, <4 x i32>* %675, align 1
  %676 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %677 = bitcast i16* %676 to <8 x i16>*
  %678 = load <8 x i16>, <8 x i16>* %677, align 1
  %679 = sub <8 x i16> %678, %646
  store <8 x i16> %679, <8 x i16>* %677, align 1
  %680 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %681 = bitcast i16* %680 to <8 x i16>*
  %682 = load <8 x i16>, <8 x i16>* %681, align 1
  %683 = sub <8 x i16> %682, %646
  store <8 x i16> %683, <8 x i16>* %681, align 1
  %684 = shufflevector <8 x i16> %683, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %685 = bitcast <8 x i16> %684 to <4 x i32>
  %686 = shufflevector <4 x i32> %685, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %687 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %688 = bitcast i16* %687 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %688, align 1
  %689 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %690 = bitcast i16* %689 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %690, align 1
  %691 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %692 = bitcast i16* %691 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 1
  %694 = sub <8 x i16> %693, %646
  store <8 x i16> %694, <8 x i16>* %692, align 1
  %695 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %696 = bitcast i16* %695 to <8 x i16>*
  %697 = load <8 x i16>, <8 x i16>* %696, align 1
  %698 = sub <8 x i16> %697, %646
  store <8 x i16> %698, <8 x i16>* %696, align 1
  %699 = shufflevector <8 x i16> %698, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %700 = bitcast <8 x i16> %699 to <4 x i32>
  %701 = shufflevector <4 x i32> %700, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %702 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %703 = bitcast i16* %702 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %703, align 1
  %704 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %705 = bitcast i16* %704 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %705, align 1
  %706 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %707 = bitcast i16* %706 to <8 x i16>*
  %708 = load <8 x i16>, <8 x i16>* %707, align 1
  %709 = sub <8 x i16> %708, %646
  store <8 x i16> %709, <8 x i16>* %707, align 1
  %710 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %711 = bitcast i16* %710 to <8 x i16>*
  %712 = load <8 x i16>, <8 x i16>* %711, align 1
  %713 = sub <8 x i16> %712, %646
  store <8 x i16> %713, <8 x i16>* %711, align 1
  %714 = shufflevector <8 x i16> %713, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %715 = bitcast <8 x i16> %714 to <4 x i32>
  %716 = shufflevector <4 x i32> %715, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %717 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %718 = bitcast i16* %717 to <4 x i32>*
  store <4 x i32> %716, <4 x i32>* %718, align 1
  %719 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %720 = bitcast i16* %719 to <4 x i32>*
  store <4 x i32> %716, <4 x i32>* %720, align 1
  %721 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %722 = bitcast i16* %721 to <8 x i16>*
  %723 = load <8 x i16>, <8 x i16>* %722, align 1
  %724 = sub <8 x i16> %723, %646
  store <8 x i16> %724, <8 x i16>* %722, align 1
  %725 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %726 = bitcast i16* %725 to <8 x i16>*
  %727 = load <8 x i16>, <8 x i16>* %726, align 1
  %728 = sub <8 x i16> %727, %646
  store <8 x i16> %728, <8 x i16>* %726, align 1
  %729 = shufflevector <8 x i16> %728, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %730 = bitcast <8 x i16> %729 to <4 x i32>
  %731 = shufflevector <4 x i32> %730, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %732 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %733 = bitcast i16* %732 to <4 x i32>*
  store <4 x i32> %731, <4 x i32>* %733, align 1
  %734 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %735 = bitcast i16* %734 to <4 x i32>*
  store <4 x i32> %731, <4 x i32>* %735, align 1
  %736 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %737 = bitcast i16* %736 to <8 x i16>*
  %738 = load <8 x i16>, <8 x i16>* %737, align 1
  %739 = sub <8 x i16> %738, %646
  store <8 x i16> %739, <8 x i16>* %737, align 1
  %740 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %741 = bitcast i16* %740 to <8 x i16>*
  %742 = load <8 x i16>, <8 x i16>* %741, align 1
  %743 = sub <8 x i16> %742, %646
  store <8 x i16> %743, <8 x i16>* %741, align 1
  %744 = shufflevector <8 x i16> %743, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %745 = bitcast <8 x i16> %744 to <4 x i32>
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %747 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %748 = bitcast i16* %747 to <4 x i32>*
  store <4 x i32> %746, <4 x i32>* %748, align 1
  %749 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %750 = bitcast i16* %749 to <4 x i32>*
  store <4 x i32> %746, <4 x i32>* %750, align 1
  %751 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %752 = bitcast i16* %751 to <8 x i16>*
  %753 = load <8 x i16>, <8 x i16>* %752, align 1
  %754 = sub <8 x i16> %753, %646
  store <8 x i16> %754, <8 x i16>* %752, align 1
  %755 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %756 = bitcast i16* %755 to <8 x i16>*
  %757 = load <8 x i16>, <8 x i16>* %756, align 1
  %758 = sub <8 x i16> %757, %646
  store <8 x i16> %758, <8 x i16>* %756, align 1
  br label %1017

759:                                              ; preds = %5
  %760 = ashr i32 %2, 1
  %761 = icmp slt i32 %760, 8
  %762 = select i1 %761, i32 %760, i32 8
  %763 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %764 = shl i64 %4, 1
  br label %765

765:                                              ; preds = %765, %759
  %766 = phi i32 [ 0, %759 ], [ %823, %765 ]
  %767 = phi i16* [ %763, %759 ], [ %822, %765 ]
  %768 = phi <4 x i32> [ zeroinitializer, %759 ], [ %820, %765 ]
  %769 = phi i8* [ %3, %759 ], [ %821, %765 ]
  %770 = getelementptr inbounds i8, i8* %769, i64 %4
  %771 = bitcast i8* %769 to <16 x i8>*
  %772 = load <16 x i8>, <16 x i8>* %771, align 1
  %773 = shufflevector <16 x i8> %772, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %774 = zext <8 x i8> %773 to <8 x i16>
  %775 = shufflevector <16 x i8> %772, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %776 = getelementptr inbounds i8, i8* %769, i64 16
  %777 = bitcast i8* %776 to <16 x i8>*
  %778 = load <16 x i8>, <16 x i8>* %777, align 1
  %779 = shufflevector <16 x i8> %778, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %780 = zext <8 x i8> %779 to <8 x i16>
  %781 = shufflevector <16 x i8> %778, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %782 = bitcast i8* %770 to <16 x i8>*
  %783 = load <16 x i8>, <16 x i8>* %782, align 1
  %784 = shufflevector <16 x i8> %783, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %785 = zext <8 x i8> %784 to <8 x i16>
  %786 = shufflevector <16 x i8> %783, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %787 = getelementptr inbounds i8, i8* %770, i64 16
  %788 = bitcast i8* %787 to <16 x i8>*
  %789 = load <16 x i8>, <16 x i8>* %788, align 1
  %790 = shufflevector <16 x i8> %789, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %791 = zext <8 x i8> %790 to <8 x i16>
  %792 = shufflevector <16 x i8> %789, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %793 = add nuw nsw <8 x i16> %785, %774
  %794 = bitcast <16 x i8> %775 to <8 x i16>
  %795 = bitcast <16 x i8> %786 to <8 x i16>
  %796 = add <8 x i16> %795, %794
  %797 = add nuw nsw <8 x i16> %791, %780
  %798 = bitcast <16 x i8> %781 to <8 x i16>
  %799 = bitcast <16 x i8> %792 to <8 x i16>
  %800 = add <8 x i16> %799, %798
  %801 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %793, <8 x i16> %796) #6
  %802 = shl <8 x i16> %801, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %803 = bitcast i16* %767 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %803, align 1
  %804 = getelementptr inbounds i16, i16* %767, i64 8
  %805 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %797, <8 x i16> %800) #6
  %806 = shl <8 x i16> %805, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %807 = bitcast i16* %804 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %807, align 1
  %808 = shufflevector <8 x i16> %806, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %809 = bitcast <8 x i16> %808 to <4 x i32>
  %810 = shufflevector <4 x i32> %809, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %811 = bitcast <4 x i32> %810 to <8 x i16>
  %812 = shl <8 x i16> %811, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %813 = add <8 x i16> %806, %802
  %814 = add <8 x i16> %812, %813
  %815 = shufflevector <8 x i16> %814, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %816 = zext <4 x i16> %815 to <4 x i32>
  %817 = add <4 x i32> %768, %816
  %818 = shufflevector <8 x i16> %814, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %819 = bitcast <8 x i16> %818 to <4 x i32>
  %820 = add <4 x i32> %817, %819
  %821 = getelementptr inbounds i8, i8* %769, i64 %764
  %822 = getelementptr inbounds i16, i16* %767, i64 32
  %823 = add nuw nsw i32 %766, 1
  %824 = icmp slt i32 %823, %762
  br i1 %824, label %765, label %825

825:                                              ; preds = %765
  %826 = icmp ult i32 %823, 8
  br i1 %826, label %827, label %888

827:                                              ; preds = %825
  %828 = shufflevector <4 x i32> %809, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %829 = bitcast <4 x i32> %828 to <8 x i16>
  %830 = shufflevector <8 x i16> %829, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %831 = sext <4 x i16> %830 to <4 x i32>
  %832 = shl nsw <4 x i32> %831, <i32 2, i32 2, i32 2, i32 2>
  %833 = shufflevector <8 x i16> %813, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %834 = zext <4 x i16> %833 to <4 x i32>
  %835 = shufflevector <8 x i16> %813, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %836 = bitcast <8 x i16> %835 to <4 x i32>
  %837 = add <4 x i32> %836, %834
  %838 = add <4 x i32> %837, %832
  %839 = sub nsw i32 3, %766
  %840 = sub nsw i32 6, %766
  %841 = and i32 %839, 3
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %856, label %843

843:                                              ; preds = %827, %843
  %844 = phi i32 [ %853, %843 ], [ %823, %827 ]
  %845 = phi i16* [ %851, %843 ], [ %822, %827 ]
  %846 = phi <4 x i32> [ %852, %843 ], [ %820, %827 ]
  %847 = phi i32 [ %854, %843 ], [ %841, %827 ]
  %848 = bitcast i16* %845 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %848, align 1
  %849 = getelementptr inbounds i16, i16* %845, i64 8
  %850 = bitcast i16* %849 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %850, align 1
  %851 = getelementptr inbounds i16, i16* %845, i64 32
  %852 = add <4 x i32> %838, %846
  %853 = add nuw nsw i32 %844, 1
  %854 = add i32 %847, -1
  %855 = icmp eq i32 %854, 0
  br i1 %855, label %856, label %843, !llvm.loop !30

856:                                              ; preds = %843, %827
  %857 = phi <4 x i32> [ undef, %827 ], [ %852, %843 ]
  %858 = phi i32 [ %823, %827 ], [ %853, %843 ]
  %859 = phi i16* [ %822, %827 ], [ %851, %843 ]
  %860 = phi <4 x i32> [ %820, %827 ], [ %852, %843 ]
  %861 = icmp ult i32 %840, 3
  br i1 %861, label %888, label %862

862:                                              ; preds = %856, %862
  %863 = phi i32 [ %886, %862 ], [ %858, %856 ]
  %864 = phi i16* [ %884, %862 ], [ %859, %856 ]
  %865 = phi <4 x i32> [ %885, %862 ], [ %860, %856 ]
  %866 = bitcast i16* %864 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %866, align 1
  %867 = getelementptr inbounds i16, i16* %864, i64 8
  %868 = bitcast i16* %867 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %868, align 1
  %869 = getelementptr inbounds i16, i16* %864, i64 32
  %870 = add <4 x i32> %838, %865
  %871 = bitcast i16* %869 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %871, align 1
  %872 = getelementptr inbounds i16, i16* %864, i64 40
  %873 = bitcast i16* %872 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %873, align 1
  %874 = getelementptr inbounds i16, i16* %864, i64 64
  %875 = add <4 x i32> %838, %870
  %876 = bitcast i16* %874 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %876, align 1
  %877 = getelementptr inbounds i16, i16* %864, i64 72
  %878 = bitcast i16* %877 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %878, align 1
  %879 = getelementptr inbounds i16, i16* %864, i64 96
  %880 = add <4 x i32> %838, %875
  %881 = bitcast i16* %879 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %881, align 1
  %882 = getelementptr inbounds i16, i16* %864, i64 104
  %883 = bitcast i16* %882 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %883, align 1
  %884 = getelementptr inbounds i16, i16* %864, i64 128
  %885 = add <4 x i32> %838, %880
  %886 = add nuw nsw i32 %863, 4
  %887 = icmp eq i32 %886, 8
  br i1 %887, label %888, label %862

888:                                              ; preds = %856, %862, %825
  %889 = phi <4 x i32> [ %820, %825 ], [ %857, %856 ], [ %885, %862 ]
  %890 = bitcast <4 x i32> %889 to <16 x i8>
  %891 = shufflevector <16 x i8> %890, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %892 = bitcast <16 x i8> %891 to <4 x i32>
  %893 = add <4 x i32> %889, %892
  %894 = bitcast <4 x i32> %893 to <16 x i8>
  %895 = shufflevector <16 x i8> %894, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %896 = bitcast <16 x i8> %895 to <4 x i32>
  %897 = add <4 x i32> %893, <i32 128, i32 128, i32 128, i32 128>
  %898 = add <4 x i32> %897, %896
  %899 = ashr <4 x i32> %898, <i32 8, i32 8, i32 8, i32 8>
  %900 = bitcast <4 x i32> %899 to <8 x i16>
  %901 = shufflevector <8 x i16> %900, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %902 = bitcast <8 x i16> %901 to <4 x i32>
  %903 = shufflevector <4 x i32> %902, <4 x i32> undef, <4 x i32> zeroinitializer
  %904 = bitcast <4 x i32> %903 to <8 x i16>
  %905 = bitcast [32 x i16]* %0 to <8 x i16>*
  %906 = load <8 x i16>, <8 x i16>* %905, align 1
  %907 = sub <8 x i16> %906, %904
  store <8 x i16> %907, <8 x i16>* %905, align 1
  %908 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %909 = bitcast i16* %908 to <8 x i16>*
  %910 = load <8 x i16>, <8 x i16>* %909, align 1
  %911 = sub <8 x i16> %910, %904
  store <8 x i16> %911, <8 x i16>* %909, align 1
  %912 = shufflevector <8 x i16> %911, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %913 = bitcast <8 x i16> %912 to <4 x i32>
  %914 = shufflevector <4 x i32> %913, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %915 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %916 = bitcast i16* %915 to <4 x i32>*
  store <4 x i32> %914, <4 x i32>* %916, align 1
  %917 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %918 = bitcast i16* %917 to <4 x i32>*
  store <4 x i32> %914, <4 x i32>* %918, align 1
  %919 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %920 = bitcast i16* %919 to <8 x i16>*
  %921 = load <8 x i16>, <8 x i16>* %920, align 1
  %922 = sub <8 x i16> %921, %904
  store <8 x i16> %922, <8 x i16>* %920, align 1
  %923 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %924 = bitcast i16* %923 to <8 x i16>*
  %925 = load <8 x i16>, <8 x i16>* %924, align 1
  %926 = sub <8 x i16> %925, %904
  store <8 x i16> %926, <8 x i16>* %924, align 1
  %927 = shufflevector <8 x i16> %926, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %928 = bitcast <8 x i16> %927 to <4 x i32>
  %929 = shufflevector <4 x i32> %928, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %930 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %931 = bitcast i16* %930 to <4 x i32>*
  store <4 x i32> %929, <4 x i32>* %931, align 1
  %932 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %933 = bitcast i16* %932 to <4 x i32>*
  store <4 x i32> %929, <4 x i32>* %933, align 1
  %934 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %935 = bitcast i16* %934 to <8 x i16>*
  %936 = load <8 x i16>, <8 x i16>* %935, align 1
  %937 = sub <8 x i16> %936, %904
  store <8 x i16> %937, <8 x i16>* %935, align 1
  %938 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %939 = bitcast i16* %938 to <8 x i16>*
  %940 = load <8 x i16>, <8 x i16>* %939, align 1
  %941 = sub <8 x i16> %940, %904
  store <8 x i16> %941, <8 x i16>* %939, align 1
  %942 = shufflevector <8 x i16> %941, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %943 = bitcast <8 x i16> %942 to <4 x i32>
  %944 = shufflevector <4 x i32> %943, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %945 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %946 = bitcast i16* %945 to <4 x i32>*
  store <4 x i32> %944, <4 x i32>* %946, align 1
  %947 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %948 = bitcast i16* %947 to <4 x i32>*
  store <4 x i32> %944, <4 x i32>* %948, align 1
  %949 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %950 = bitcast i16* %949 to <8 x i16>*
  %951 = load <8 x i16>, <8 x i16>* %950, align 1
  %952 = sub <8 x i16> %951, %904
  store <8 x i16> %952, <8 x i16>* %950, align 1
  %953 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %954 = bitcast i16* %953 to <8 x i16>*
  %955 = load <8 x i16>, <8 x i16>* %954, align 1
  %956 = sub <8 x i16> %955, %904
  store <8 x i16> %956, <8 x i16>* %954, align 1
  %957 = shufflevector <8 x i16> %956, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %958 = bitcast <8 x i16> %957 to <4 x i32>
  %959 = shufflevector <4 x i32> %958, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %960 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %961 = bitcast i16* %960 to <4 x i32>*
  store <4 x i32> %959, <4 x i32>* %961, align 1
  %962 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %963 = bitcast i16* %962 to <4 x i32>*
  store <4 x i32> %959, <4 x i32>* %963, align 1
  %964 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %965 = bitcast i16* %964 to <8 x i16>*
  %966 = load <8 x i16>, <8 x i16>* %965, align 1
  %967 = sub <8 x i16> %966, %904
  store <8 x i16> %967, <8 x i16>* %965, align 1
  %968 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %969 = bitcast i16* %968 to <8 x i16>*
  %970 = load <8 x i16>, <8 x i16>* %969, align 1
  %971 = sub <8 x i16> %970, %904
  store <8 x i16> %971, <8 x i16>* %969, align 1
  %972 = shufflevector <8 x i16> %971, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %973 = bitcast <8 x i16> %972 to <4 x i32>
  %974 = shufflevector <4 x i32> %973, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %975 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %976 = bitcast i16* %975 to <4 x i32>*
  store <4 x i32> %974, <4 x i32>* %976, align 1
  %977 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %978 = bitcast i16* %977 to <4 x i32>*
  store <4 x i32> %974, <4 x i32>* %978, align 1
  %979 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %980 = bitcast i16* %979 to <8 x i16>*
  %981 = load <8 x i16>, <8 x i16>* %980, align 1
  %982 = sub <8 x i16> %981, %904
  store <8 x i16> %982, <8 x i16>* %980, align 1
  %983 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %984 = bitcast i16* %983 to <8 x i16>*
  %985 = load <8 x i16>, <8 x i16>* %984, align 1
  %986 = sub <8 x i16> %985, %904
  store <8 x i16> %986, <8 x i16>* %984, align 1
  %987 = shufflevector <8 x i16> %986, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %988 = bitcast <8 x i16> %987 to <4 x i32>
  %989 = shufflevector <4 x i32> %988, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %990 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %991 = bitcast i16* %990 to <4 x i32>*
  store <4 x i32> %989, <4 x i32>* %991, align 1
  %992 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %993 = bitcast i16* %992 to <4 x i32>*
  store <4 x i32> %989, <4 x i32>* %993, align 1
  %994 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %995 = bitcast i16* %994 to <8 x i16>*
  %996 = load <8 x i16>, <8 x i16>* %995, align 1
  %997 = sub <8 x i16> %996, %904
  store <8 x i16> %997, <8 x i16>* %995, align 1
  %998 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %999 = bitcast i16* %998 to <8 x i16>*
  %1000 = load <8 x i16>, <8 x i16>* %999, align 1
  %1001 = sub <8 x i16> %1000, %904
  store <8 x i16> %1001, <8 x i16>* %999, align 1
  %1002 = shufflevector <8 x i16> %1001, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %1003 = bitcast <8 x i16> %1002 to <4 x i32>
  %1004 = shufflevector <4 x i32> %1003, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1005 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %1006 = bitcast i16* %1005 to <4 x i32>*
  store <4 x i32> %1004, <4 x i32>* %1006, align 1
  %1007 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %1008 = bitcast i16* %1007 to <4 x i32>*
  store <4 x i32> %1004, <4 x i32>* %1008, align 1
  %1009 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %1010 = bitcast i16* %1009 to <8 x i16>*
  %1011 = load <8 x i16>, <8 x i16>* %1010, align 1
  %1012 = sub <8 x i16> %1011, %904
  store <8 x i16> %1012, <8 x i16>* %1010, align 1
  %1013 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %1014 = bitcast i16* %1013 to <8 x i16>*
  %1015 = load <8 x i16>, <8 x i16>* %1014, align 1
  %1016 = sub <8 x i16> %1015, %904
  store <8 x i16> %1016, <8 x i16>* %1014, align 1
  br label %1017

1017:                                             ; preds = %888, %630, %370, %121
  %1018 = phi <8 x i16> [ %1016, %888 ], [ %758, %630 ], [ %498, %370 ], [ %249, %121 ]
  %1019 = shufflevector <8 x i16> %1018, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %1020 = bitcast <8 x i16> %1019 to <4 x i32>
  %1021 = shufflevector <4 x i32> %1020, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %1022 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 240
  %1023 = bitcast i16* %1022 to <4 x i32>*
  store <4 x i32> %1021, <4 x i32>* %1023, align 1
  %1024 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 248
  %1025 = bitcast i16* %1024 to <4 x i32>*
  store <4 x i32> %1021, <4 x i32>* %1025, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %528 [
    i32 8, label %6
    i32 16, label %173
    i32 24, label %345
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 16
  %9 = select i1 %8, i32 %7, i32 16
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %56, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %55, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %53, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %54, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %42 = bitcast <8 x i16> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %44 = bitcast <4 x i32> %43 to <8 x i16>
  %45 = shl <8 x i16> %44, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %46 = add <8 x i16> %39, %35
  %47 = add <8 x i16> %45, %46
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = zext <4 x i16> %48 to <4 x i32>
  %50 = add <4 x i32> %15, %49
  %51 = shufflevector <8 x i16> %47, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = add <4 x i32> %50, %52
  %54 = getelementptr inbounds i8, i8* %16, i64 %11
  %55 = getelementptr inbounds i16, i16* %14, i64 32
  %56 = add nuw nsw i32 %13, 1
  %57 = icmp slt i32 %56, %9
  br i1 %57, label %12, label %58

58:                                               ; preds = %12
  %59 = icmp ult i32 %56, 16
  br i1 %59, label %60, label %121

60:                                               ; preds = %58
  %61 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %62 = bitcast <4 x i32> %61 to <8 x i16>
  %63 = shufflevector <8 x i16> %62, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %64 = sext <4 x i16> %63 to <4 x i32>
  %65 = shl nsw <4 x i32> %64, <i32 2, i32 2, i32 2, i32 2>
  %66 = shufflevector <8 x i16> %46, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = bitcast <8 x i16> %68 to <4 x i32>
  %70 = add <4 x i32> %69, %67
  %71 = add <4 x i32> %70, %65
  %72 = sub nsw i32 3, %13
  %73 = sub nsw i32 14, %13
  %74 = and i32 %72, 3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %60, %76
  %77 = phi i32 [ %86, %76 ], [ %56, %60 ]
  %78 = phi i16* [ %84, %76 ], [ %55, %60 ]
  %79 = phi <4 x i32> [ %85, %76 ], [ %53, %60 ]
  %80 = phi i32 [ %87, %76 ], [ %74, %60 ]
  %81 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %81, align 1
  %82 = getelementptr inbounds i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %83, align 1
  %84 = getelementptr inbounds i16, i16* %78, i64 32
  %85 = add <4 x i32> %71, %79
  %86 = add nuw nsw i32 %77, 1
  %87 = add i32 %80, -1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %76, !llvm.loop !31

89:                                               ; preds = %76, %60
  %90 = phi <4 x i32> [ undef, %60 ], [ %85, %76 ]
  %91 = phi i32 [ %56, %60 ], [ %86, %76 ]
  %92 = phi i16* [ %55, %60 ], [ %84, %76 ]
  %93 = phi <4 x i32> [ %53, %60 ], [ %85, %76 ]
  %94 = icmp ult i32 %73, 3
  br i1 %94, label %121, label %95

95:                                               ; preds = %89, %95
  %96 = phi i32 [ %119, %95 ], [ %91, %89 ]
  %97 = phi i16* [ %117, %95 ], [ %92, %89 ]
  %98 = phi <4 x i32> [ %118, %95 ], [ %93, %89 ]
  %99 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %99, align 1
  %100 = getelementptr inbounds i16, i16* %97, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %101, align 1
  %102 = getelementptr inbounds i16, i16* %97, i64 32
  %103 = add <4 x i32> %71, %98
  %104 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %104, align 1
  %105 = getelementptr inbounds i16, i16* %97, i64 40
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %106, align 1
  %107 = getelementptr inbounds i16, i16* %97, i64 64
  %108 = add <4 x i32> %71, %103
  %109 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %109, align 1
  %110 = getelementptr inbounds i16, i16* %97, i64 72
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %111, align 1
  %112 = getelementptr inbounds i16, i16* %97, i64 96
  %113 = add <4 x i32> %71, %108
  %114 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %114, align 1
  %115 = getelementptr inbounds i16, i16* %97, i64 104
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %116, align 1
  %117 = getelementptr inbounds i16, i16* %97, i64 128
  %118 = add <4 x i32> %71, %113
  %119 = add nuw nsw i32 %96, 4
  %120 = icmp eq i32 %119, 16
  br i1 %120, label %121, label %95

121:                                              ; preds = %89, %95, %58
  %122 = phi <4 x i32> [ %53, %58 ], [ %90, %89 ], [ %118, %95 ]
  %123 = bitcast <4 x i32> %122 to <16 x i8>
  %124 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %125 = bitcast <16 x i8> %124 to <4 x i32>
  %126 = add <4 x i32> %122, %125
  %127 = bitcast <4 x i32> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %127, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %129 = bitcast <16 x i8> %128 to <4 x i32>
  %130 = add <4 x i32> %126, <i32 256, i32 256, i32 256, i32 256>
  %131 = add <4 x i32> %130, %129
  %132 = ashr <4 x i32> %131, <i32 9, i32 9, i32 9, i32 9>
  %133 = bitcast <4 x i32> %132 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <8 x i16> %134 to <4 x i32>
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> zeroinitializer
  %137 = bitcast <4 x i32> %136 to <8 x i16>
  br label %138

138:                                              ; preds = %138, %121
  %139 = phi i32 [ 0, %121 ], [ %170, %138 ]
  %140 = phi i16* [ %10, %121 ], [ %171, %138 ]
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = sub <8 x i16> %142, %137
  store <8 x i16> %143, <8 x i16>* %141, align 1
  %144 = getelementptr inbounds i16, i16* %140, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 1
  %147 = sub <8 x i16> %146, %137
  store <8 x i16> %147, <8 x i16>* %145, align 1
  %148 = shufflevector <8 x i16> %147, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %149 = bitcast <8 x i16> %148 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %151 = getelementptr inbounds i16, i16* %140, i64 16
  %152 = bitcast i16* %151 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %152, align 1
  %153 = getelementptr inbounds i16, i16* %140, i64 24
  %154 = bitcast i16* %153 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %154, align 1
  %155 = getelementptr inbounds i16, i16* %140, i64 32
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = sub <8 x i16> %157, %137
  store <8 x i16> %158, <8 x i16>* %156, align 1
  %159 = getelementptr inbounds i16, i16* %140, i64 40
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = sub <8 x i16> %161, %137
  store <8 x i16> %162, <8 x i16>* %160, align 1
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %164 = bitcast <8 x i16> %163 to <4 x i32>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %166 = getelementptr inbounds i16, i16* %140, i64 48
  %167 = bitcast i16* %166 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %140, i64 56
  %169 = bitcast i16* %168 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %169, align 1
  %170 = add nuw nsw i32 %139, 2
  %171 = getelementptr inbounds i16, i16* %140, i64 64
  %172 = icmp eq i32 %170, 16
  br i1 %172, label %709, label %138

173:                                              ; preds = %5
  %174 = ashr i32 %2, 1
  %175 = icmp slt i32 %174, 16
  %176 = select i1 %175, i32 %174, i32 16
  %177 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %178 = shl i64 %4, 1
  br label %179

179:                                              ; preds = %179, %173
  %180 = phi i32 [ 0, %173 ], [ %228, %179 ]
  %181 = phi i16* [ %177, %173 ], [ %227, %179 ]
  %182 = phi <4 x i32> [ zeroinitializer, %173 ], [ %225, %179 ]
  %183 = phi i8* [ %3, %173 ], [ %226, %179 ]
  %184 = getelementptr inbounds i8, i8* %183, i64 %4
  %185 = bitcast i8* %183 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1
  %187 = shufflevector <16 x i8> %186, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %188 = zext <8 x i8> %187 to <8 x i16>
  %189 = shufflevector <16 x i8> %186, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = bitcast <16 x i8> %189 to <4 x i32>
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %192 = bitcast i8* %184 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1
  %194 = shufflevector <16 x i8> %193, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %195 = zext <8 x i8> %194 to <8 x i16>
  %196 = shufflevector <16 x i8> %193, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = bitcast <16 x i8> %196 to <4 x i32>
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %199 = add nuw nsw <8 x i16> %195, %188
  %200 = bitcast <16 x i8> %189 to <8 x i16>
  %201 = bitcast <16 x i8> %196 to <8 x i16>
  %202 = add <8 x i16> %201, %200
  %203 = bitcast <4 x i32> %191 to <8 x i16>
  %204 = bitcast <4 x i32> %198 to <8 x i16>
  %205 = add <8 x i16> %204, %203
  %206 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %199, <8 x i16> %202) #6
  %207 = shl <8 x i16> %206, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %208 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 1
  %209 = getelementptr inbounds i16, i16* %181, i64 8
  %210 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %205, <8 x i16> %205) #6
  %211 = shl <8 x i16> %210, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %212 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %212, align 1
  %213 = shufflevector <8 x i16> %211, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %214 = bitcast <8 x i16> %213 to <4 x i32>
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %216 = bitcast <4 x i32> %215 to <8 x i16>
  %217 = shl <8 x i16> %216, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %218 = add <8 x i16> %211, %207
  %219 = add <8 x i16> %217, %218
  %220 = shufflevector <8 x i16> %219, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %221 = zext <4 x i16> %220 to <4 x i32>
  %222 = add <4 x i32> %182, %221
  %223 = shufflevector <8 x i16> %219, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %224 = bitcast <8 x i16> %223 to <4 x i32>
  %225 = add <4 x i32> %222, %224
  %226 = getelementptr inbounds i8, i8* %183, i64 %178
  %227 = getelementptr inbounds i16, i16* %181, i64 32
  %228 = add nuw nsw i32 %180, 1
  %229 = icmp slt i32 %228, %176
  br i1 %229, label %179, label %230

230:                                              ; preds = %179
  %231 = icmp ult i32 %228, 16
  br i1 %231, label %232, label %293

232:                                              ; preds = %230
  %233 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %234 = bitcast <4 x i32> %233 to <8 x i16>
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %236 = sext <4 x i16> %235 to <4 x i32>
  %237 = shl nsw <4 x i32> %236, <i32 2, i32 2, i32 2, i32 2>
  %238 = shufflevector <8 x i16> %218, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %239 = zext <4 x i16> %238 to <4 x i32>
  %240 = shufflevector <8 x i16> %218, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %241 = bitcast <8 x i16> %240 to <4 x i32>
  %242 = add <4 x i32> %241, %239
  %243 = add <4 x i32> %242, %237
  %244 = sub nsw i32 3, %180
  %245 = sub nsw i32 14, %180
  %246 = and i32 %244, 3
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %261, label %248

248:                                              ; preds = %232, %248
  %249 = phi i32 [ %258, %248 ], [ %228, %232 ]
  %250 = phi i16* [ %256, %248 ], [ %227, %232 ]
  %251 = phi <4 x i32> [ %257, %248 ], [ %225, %232 ]
  %252 = phi i32 [ %259, %248 ], [ %246, %232 ]
  %253 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %250, i64 8
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %255, align 1
  %256 = getelementptr inbounds i16, i16* %250, i64 32
  %257 = add <4 x i32> %243, %251
  %258 = add nuw nsw i32 %249, 1
  %259 = add i32 %252, -1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %248, !llvm.loop !32

261:                                              ; preds = %248, %232
  %262 = phi <4 x i32> [ undef, %232 ], [ %257, %248 ]
  %263 = phi i32 [ %228, %232 ], [ %258, %248 ]
  %264 = phi i16* [ %227, %232 ], [ %256, %248 ]
  %265 = phi <4 x i32> [ %225, %232 ], [ %257, %248 ]
  %266 = icmp ult i32 %245, 3
  br i1 %266, label %293, label %267

267:                                              ; preds = %261, %267
  %268 = phi i32 [ %291, %267 ], [ %263, %261 ]
  %269 = phi i16* [ %289, %267 ], [ %264, %261 ]
  %270 = phi <4 x i32> [ %290, %267 ], [ %265, %261 ]
  %271 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %271, align 1
  %272 = getelementptr inbounds i16, i16* %269, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %273, align 1
  %274 = getelementptr inbounds i16, i16* %269, i64 32
  %275 = add <4 x i32> %243, %270
  %276 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %269, i64 40
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %278, align 1
  %279 = getelementptr inbounds i16, i16* %269, i64 64
  %280 = add <4 x i32> %243, %275
  %281 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %281, align 1
  %282 = getelementptr inbounds i16, i16* %269, i64 72
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %269, i64 96
  %285 = add <4 x i32> %243, %280
  %286 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %286, align 1
  %287 = getelementptr inbounds i16, i16* %269, i64 104
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %288, align 1
  %289 = getelementptr inbounds i16, i16* %269, i64 128
  %290 = add <4 x i32> %243, %285
  %291 = add nuw nsw i32 %268, 4
  %292 = icmp eq i32 %291, 16
  br i1 %292, label %293, label %267

293:                                              ; preds = %261, %267, %230
  %294 = phi <4 x i32> [ %225, %230 ], [ %262, %261 ], [ %290, %267 ]
  %295 = bitcast <4 x i32> %294 to <16 x i8>
  %296 = shufflevector <16 x i8> %295, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %297 = bitcast <16 x i8> %296 to <4 x i32>
  %298 = add <4 x i32> %294, %297
  %299 = bitcast <4 x i32> %298 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %301 = bitcast <16 x i8> %300 to <4 x i32>
  %302 = add <4 x i32> %298, <i32 256, i32 256, i32 256, i32 256>
  %303 = add <4 x i32> %302, %301
  %304 = ashr <4 x i32> %303, <i32 9, i32 9, i32 9, i32 9>
  %305 = bitcast <4 x i32> %304 to <8 x i16>
  %306 = shufflevector <8 x i16> %305, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %307 = bitcast <8 x i16> %306 to <4 x i32>
  %308 = shufflevector <4 x i32> %307, <4 x i32> undef, <4 x i32> zeroinitializer
  %309 = bitcast <4 x i32> %308 to <8 x i16>
  br label %310

310:                                              ; preds = %310, %293
  %311 = phi i32 [ 0, %293 ], [ %342, %310 ]
  %312 = phi i16* [ %177, %293 ], [ %343, %310 ]
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 1
  %315 = sub <8 x i16> %314, %309
  store <8 x i16> %315, <8 x i16>* %313, align 1
  %316 = getelementptr inbounds i16, i16* %312, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 1
  %319 = sub <8 x i16> %318, %309
  store <8 x i16> %319, <8 x i16>* %317, align 1
  %320 = shufflevector <8 x i16> %319, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %321 = bitcast <8 x i16> %320 to <4 x i32>
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %323 = getelementptr inbounds i16, i16* %312, i64 16
  %324 = bitcast i16* %323 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %324, align 1
  %325 = getelementptr inbounds i16, i16* %312, i64 24
  %326 = bitcast i16* %325 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %326, align 1
  %327 = getelementptr inbounds i16, i16* %312, i64 32
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = sub <8 x i16> %329, %309
  store <8 x i16> %330, <8 x i16>* %328, align 1
  %331 = getelementptr inbounds i16, i16* %312, i64 40
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 1
  %334 = sub <8 x i16> %333, %309
  store <8 x i16> %334, <8 x i16>* %332, align 1
  %335 = shufflevector <8 x i16> %334, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %336 = bitcast <8 x i16> %335 to <4 x i32>
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %338 = getelementptr inbounds i16, i16* %312, i64 48
  %339 = bitcast i16* %338 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %339, align 1
  %340 = getelementptr inbounds i16, i16* %312, i64 56
  %341 = bitcast i16* %340 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %341, align 1
  %342 = add nuw nsw i32 %311, 2
  %343 = getelementptr inbounds i16, i16* %312, i64 64
  %344 = icmp eq i32 %342, 16
  br i1 %344, label %709, label %310

345:                                              ; preds = %5
  %346 = ashr i32 %2, 1
  %347 = icmp slt i32 %346, 16
  %348 = select i1 %347, i32 %346, i32 16
  %349 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %350 = shl i64 %4, 1
  br label %351

351:                                              ; preds = %351, %345
  %352 = phi i32 [ 0, %345 ], [ %411, %351 ]
  %353 = phi i16* [ %349, %345 ], [ %410, %351 ]
  %354 = phi <4 x i32> [ zeroinitializer, %345 ], [ %408, %351 ]
  %355 = phi i8* [ %3, %345 ], [ %409, %351 ]
  %356 = getelementptr inbounds i8, i8* %355, i64 %4
  %357 = bitcast i8* %355 to <16 x i8>*
  %358 = load <16 x i8>, <16 x i8>* %357, align 1
  %359 = shufflevector <16 x i8> %358, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %360 = zext <8 x i8> %359 to <8 x i16>
  %361 = shufflevector <16 x i8> %358, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %362 = getelementptr inbounds i8, i8* %355, i64 16
  %363 = bitcast i8* %362 to <16 x i8>*
  %364 = load <16 x i8>, <16 x i8>* %363, align 1
  %365 = shufflevector <16 x i8> %364, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %366 = zext <8 x i8> %365 to <8 x i16>
  %367 = bitcast <8 x i16> %366 to <4 x i32>
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %369 = bitcast i8* %356 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1
  %371 = shufflevector <16 x i8> %370, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %372 = zext <8 x i8> %371 to <8 x i16>
  %373 = shufflevector <16 x i8> %370, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %374 = getelementptr inbounds i8, i8* %356, i64 16
  %375 = bitcast i8* %374 to <16 x i8>*
  %376 = load <16 x i8>, <16 x i8>* %375, align 1
  %377 = shufflevector <16 x i8> %376, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %378 = zext <8 x i8> %377 to <8 x i16>
  %379 = bitcast <8 x i16> %378 to <4 x i32>
  %380 = shufflevector <4 x i32> %379, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %381 = add nuw nsw <8 x i16> %372, %360
  %382 = bitcast <16 x i8> %361 to <8 x i16>
  %383 = bitcast <16 x i8> %373 to <8 x i16>
  %384 = add <8 x i16> %383, %382
  %385 = add nuw nsw <8 x i16> %378, %366
  %386 = bitcast <4 x i32> %368 to <8 x i16>
  %387 = bitcast <4 x i32> %380 to <8 x i16>
  %388 = add <8 x i16> %387, %386
  %389 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %381, <8 x i16> %384) #6
  %390 = shl <8 x i16> %389, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %391 = bitcast i16* %353 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %391, align 1
  %392 = getelementptr inbounds i16, i16* %353, i64 8
  %393 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %385, <8 x i16> %388) #6
  %394 = shl <8 x i16> %393, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %395 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %395, align 1
  %396 = shufflevector <8 x i16> %394, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %397 = bitcast <8 x i16> %396 to <4 x i32>
  %398 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %399 = bitcast <4 x i32> %398 to <8 x i16>
  %400 = shl <8 x i16> %399, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %401 = add <8 x i16> %394, %390
  %402 = add <8 x i16> %400, %401
  %403 = shufflevector <8 x i16> %402, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %404 = zext <4 x i16> %403 to <4 x i32>
  %405 = add <4 x i32> %354, %404
  %406 = shufflevector <8 x i16> %402, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %407 = bitcast <8 x i16> %406 to <4 x i32>
  %408 = add <4 x i32> %405, %407
  %409 = getelementptr inbounds i8, i8* %355, i64 %350
  %410 = getelementptr inbounds i16, i16* %353, i64 32
  %411 = add nuw nsw i32 %352, 1
  %412 = icmp slt i32 %411, %348
  br i1 %412, label %351, label %413

413:                                              ; preds = %351
  %414 = icmp ult i32 %411, 16
  br i1 %414, label %415, label %476

415:                                              ; preds = %413
  %416 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %417 = bitcast <4 x i32> %416 to <8 x i16>
  %418 = shufflevector <8 x i16> %417, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %419 = sext <4 x i16> %418 to <4 x i32>
  %420 = shl nsw <4 x i32> %419, <i32 2, i32 2, i32 2, i32 2>
  %421 = shufflevector <8 x i16> %401, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %422 = zext <4 x i16> %421 to <4 x i32>
  %423 = shufflevector <8 x i16> %401, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %424 = bitcast <8 x i16> %423 to <4 x i32>
  %425 = add <4 x i32> %424, %422
  %426 = add <4 x i32> %425, %420
  %427 = sub nsw i32 3, %352
  %428 = sub nsw i32 14, %352
  %429 = and i32 %427, 3
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %444, label %431

431:                                              ; preds = %415, %431
  %432 = phi i32 [ %441, %431 ], [ %411, %415 ]
  %433 = phi i16* [ %439, %431 ], [ %410, %415 ]
  %434 = phi <4 x i32> [ %440, %431 ], [ %408, %415 ]
  %435 = phi i32 [ %442, %431 ], [ %429, %415 ]
  %436 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %436, align 1
  %437 = getelementptr inbounds i16, i16* %433, i64 8
  %438 = bitcast i16* %437 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %438, align 1
  %439 = getelementptr inbounds i16, i16* %433, i64 32
  %440 = add <4 x i32> %426, %434
  %441 = add nuw nsw i32 %432, 1
  %442 = add i32 %435, -1
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %431, !llvm.loop !33

444:                                              ; preds = %431, %415
  %445 = phi <4 x i32> [ undef, %415 ], [ %440, %431 ]
  %446 = phi i32 [ %411, %415 ], [ %441, %431 ]
  %447 = phi i16* [ %410, %415 ], [ %439, %431 ]
  %448 = phi <4 x i32> [ %408, %415 ], [ %440, %431 ]
  %449 = icmp ult i32 %428, 3
  br i1 %449, label %476, label %450

450:                                              ; preds = %444, %450
  %451 = phi i32 [ %474, %450 ], [ %446, %444 ]
  %452 = phi i16* [ %472, %450 ], [ %447, %444 ]
  %453 = phi <4 x i32> [ %473, %450 ], [ %448, %444 ]
  %454 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %454, align 1
  %455 = getelementptr inbounds i16, i16* %452, i64 8
  %456 = bitcast i16* %455 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %456, align 1
  %457 = getelementptr inbounds i16, i16* %452, i64 32
  %458 = add <4 x i32> %426, %453
  %459 = bitcast i16* %457 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %459, align 1
  %460 = getelementptr inbounds i16, i16* %452, i64 40
  %461 = bitcast i16* %460 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %461, align 1
  %462 = getelementptr inbounds i16, i16* %452, i64 64
  %463 = add <4 x i32> %426, %458
  %464 = bitcast i16* %462 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %464, align 1
  %465 = getelementptr inbounds i16, i16* %452, i64 72
  %466 = bitcast i16* %465 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %466, align 1
  %467 = getelementptr inbounds i16, i16* %452, i64 96
  %468 = add <4 x i32> %426, %463
  %469 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %469, align 1
  %470 = getelementptr inbounds i16, i16* %452, i64 104
  %471 = bitcast i16* %470 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %471, align 1
  %472 = getelementptr inbounds i16, i16* %452, i64 128
  %473 = add <4 x i32> %426, %468
  %474 = add nuw nsw i32 %451, 4
  %475 = icmp eq i32 %474, 16
  br i1 %475, label %476, label %450

476:                                              ; preds = %444, %450, %413
  %477 = phi <4 x i32> [ %408, %413 ], [ %445, %444 ], [ %473, %450 ]
  %478 = bitcast <4 x i32> %477 to <16 x i8>
  %479 = shufflevector <16 x i8> %478, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %480 = bitcast <16 x i8> %479 to <4 x i32>
  %481 = add <4 x i32> %477, %480
  %482 = bitcast <4 x i32> %481 to <16 x i8>
  %483 = shufflevector <16 x i8> %482, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %484 = bitcast <16 x i8> %483 to <4 x i32>
  %485 = add <4 x i32> %481, <i32 256, i32 256, i32 256, i32 256>
  %486 = add <4 x i32> %485, %484
  %487 = ashr <4 x i32> %486, <i32 9, i32 9, i32 9, i32 9>
  %488 = bitcast <4 x i32> %487 to <8 x i16>
  %489 = shufflevector <8 x i16> %488, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %490 = bitcast <8 x i16> %489 to <4 x i32>
  %491 = shufflevector <4 x i32> %490, <4 x i32> undef, <4 x i32> zeroinitializer
  %492 = bitcast <4 x i32> %491 to <8 x i16>
  br label %493

493:                                              ; preds = %493, %476
  %494 = phi i32 [ 0, %476 ], [ %525, %493 ]
  %495 = phi i16* [ %349, %476 ], [ %526, %493 ]
  %496 = bitcast i16* %495 to <8 x i16>*
  %497 = load <8 x i16>, <8 x i16>* %496, align 1
  %498 = sub <8 x i16> %497, %492
  store <8 x i16> %498, <8 x i16>* %496, align 1
  %499 = getelementptr inbounds i16, i16* %495, i64 8
  %500 = bitcast i16* %499 to <8 x i16>*
  %501 = load <8 x i16>, <8 x i16>* %500, align 1
  %502 = sub <8 x i16> %501, %492
  store <8 x i16> %502, <8 x i16>* %500, align 1
  %503 = shufflevector <8 x i16> %502, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %504 = bitcast <8 x i16> %503 to <4 x i32>
  %505 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %506 = getelementptr inbounds i16, i16* %495, i64 16
  %507 = bitcast i16* %506 to <4 x i32>*
  store <4 x i32> %505, <4 x i32>* %507, align 1
  %508 = getelementptr inbounds i16, i16* %495, i64 24
  %509 = bitcast i16* %508 to <4 x i32>*
  store <4 x i32> %505, <4 x i32>* %509, align 1
  %510 = getelementptr inbounds i16, i16* %495, i64 32
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 1
  %513 = sub <8 x i16> %512, %492
  store <8 x i16> %513, <8 x i16>* %511, align 1
  %514 = getelementptr inbounds i16, i16* %495, i64 40
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 1
  %517 = sub <8 x i16> %516, %492
  store <8 x i16> %517, <8 x i16>* %515, align 1
  %518 = shufflevector <8 x i16> %517, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %519 = bitcast <8 x i16> %518 to <4 x i32>
  %520 = shufflevector <4 x i32> %519, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %521 = getelementptr inbounds i16, i16* %495, i64 48
  %522 = bitcast i16* %521 to <4 x i32>*
  store <4 x i32> %520, <4 x i32>* %522, align 1
  %523 = getelementptr inbounds i16, i16* %495, i64 56
  %524 = bitcast i16* %523 to <4 x i32>*
  store <4 x i32> %520, <4 x i32>* %524, align 1
  %525 = add nuw nsw i32 %494, 2
  %526 = getelementptr inbounds i16, i16* %495, i64 64
  %527 = icmp eq i32 %525, 16
  br i1 %527, label %709, label %493

528:                                              ; preds = %5
  %529 = ashr i32 %2, 1
  %530 = icmp slt i32 %529, 16
  %531 = select i1 %530, i32 %529, i32 16
  %532 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %533 = shl i64 %4, 1
  br label %534

534:                                              ; preds = %534, %528
  %535 = phi i32 [ 0, %528 ], [ %592, %534 ]
  %536 = phi i16* [ %532, %528 ], [ %591, %534 ]
  %537 = phi <4 x i32> [ zeroinitializer, %528 ], [ %589, %534 ]
  %538 = phi i8* [ %3, %528 ], [ %590, %534 ]
  %539 = getelementptr inbounds i8, i8* %538, i64 %4
  %540 = bitcast i8* %538 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1
  %542 = shufflevector <16 x i8> %541, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %543 = zext <8 x i8> %542 to <8 x i16>
  %544 = shufflevector <16 x i8> %541, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %545 = getelementptr inbounds i8, i8* %538, i64 16
  %546 = bitcast i8* %545 to <16 x i8>*
  %547 = load <16 x i8>, <16 x i8>* %546, align 1
  %548 = shufflevector <16 x i8> %547, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %549 = zext <8 x i8> %548 to <8 x i16>
  %550 = shufflevector <16 x i8> %547, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %551 = bitcast i8* %539 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1
  %553 = shufflevector <16 x i8> %552, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %554 = zext <8 x i8> %553 to <8 x i16>
  %555 = shufflevector <16 x i8> %552, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %556 = getelementptr inbounds i8, i8* %539, i64 16
  %557 = bitcast i8* %556 to <16 x i8>*
  %558 = load <16 x i8>, <16 x i8>* %557, align 1
  %559 = shufflevector <16 x i8> %558, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %560 = zext <8 x i8> %559 to <8 x i16>
  %561 = shufflevector <16 x i8> %558, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %562 = add nuw nsw <8 x i16> %554, %543
  %563 = bitcast <16 x i8> %544 to <8 x i16>
  %564 = bitcast <16 x i8> %555 to <8 x i16>
  %565 = add <8 x i16> %564, %563
  %566 = add nuw nsw <8 x i16> %560, %549
  %567 = bitcast <16 x i8> %550 to <8 x i16>
  %568 = bitcast <16 x i8> %561 to <8 x i16>
  %569 = add <8 x i16> %568, %567
  %570 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %562, <8 x i16> %565) #6
  %571 = shl <8 x i16> %570, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %572 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %572, align 1
  %573 = getelementptr inbounds i16, i16* %536, i64 8
  %574 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %566, <8 x i16> %569) #6
  %575 = shl <8 x i16> %574, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %576 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %576, align 1
  %577 = shufflevector <8 x i16> %575, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %578 = bitcast <8 x i16> %577 to <4 x i32>
  %579 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %580 = bitcast <4 x i32> %579 to <8 x i16>
  %581 = shl <8 x i16> %580, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %582 = add <8 x i16> %575, %571
  %583 = add <8 x i16> %581, %582
  %584 = shufflevector <8 x i16> %583, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %585 = zext <4 x i16> %584 to <4 x i32>
  %586 = add <4 x i32> %537, %585
  %587 = shufflevector <8 x i16> %583, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %588 = bitcast <8 x i16> %587 to <4 x i32>
  %589 = add <4 x i32> %586, %588
  %590 = getelementptr inbounds i8, i8* %538, i64 %533
  %591 = getelementptr inbounds i16, i16* %536, i64 32
  %592 = add nuw nsw i32 %535, 1
  %593 = icmp slt i32 %592, %531
  br i1 %593, label %534, label %594

594:                                              ; preds = %534
  %595 = icmp ult i32 %592, 16
  br i1 %595, label %596, label %657

596:                                              ; preds = %594
  %597 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %598 = bitcast <4 x i32> %597 to <8 x i16>
  %599 = shufflevector <8 x i16> %598, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %600 = sext <4 x i16> %599 to <4 x i32>
  %601 = shl nsw <4 x i32> %600, <i32 2, i32 2, i32 2, i32 2>
  %602 = shufflevector <8 x i16> %582, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %603 = zext <4 x i16> %602 to <4 x i32>
  %604 = shufflevector <8 x i16> %582, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %605 = bitcast <8 x i16> %604 to <4 x i32>
  %606 = add <4 x i32> %605, %603
  %607 = add <4 x i32> %606, %601
  %608 = sub nsw i32 3, %535
  %609 = sub nsw i32 14, %535
  %610 = and i32 %608, 3
  %611 = icmp eq i32 %610, 0
  br i1 %611, label %625, label %612

612:                                              ; preds = %596, %612
  %613 = phi i32 [ %622, %612 ], [ %592, %596 ]
  %614 = phi i16* [ %620, %612 ], [ %591, %596 ]
  %615 = phi <4 x i32> [ %621, %612 ], [ %589, %596 ]
  %616 = phi i32 [ %623, %612 ], [ %610, %596 ]
  %617 = bitcast i16* %614 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %617, align 1
  %618 = getelementptr inbounds i16, i16* %614, i64 8
  %619 = bitcast i16* %618 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %619, align 1
  %620 = getelementptr inbounds i16, i16* %614, i64 32
  %621 = add <4 x i32> %607, %615
  %622 = add nuw nsw i32 %613, 1
  %623 = add i32 %616, -1
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %612, !llvm.loop !34

625:                                              ; preds = %612, %596
  %626 = phi <4 x i32> [ undef, %596 ], [ %621, %612 ]
  %627 = phi i32 [ %592, %596 ], [ %622, %612 ]
  %628 = phi i16* [ %591, %596 ], [ %620, %612 ]
  %629 = phi <4 x i32> [ %589, %596 ], [ %621, %612 ]
  %630 = icmp ult i32 %609, 3
  br i1 %630, label %657, label %631

631:                                              ; preds = %625, %631
  %632 = phi i32 [ %655, %631 ], [ %627, %625 ]
  %633 = phi i16* [ %653, %631 ], [ %628, %625 ]
  %634 = phi <4 x i32> [ %654, %631 ], [ %629, %625 ]
  %635 = bitcast i16* %633 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %635, align 1
  %636 = getelementptr inbounds i16, i16* %633, i64 8
  %637 = bitcast i16* %636 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %637, align 1
  %638 = getelementptr inbounds i16, i16* %633, i64 32
  %639 = add <4 x i32> %607, %634
  %640 = bitcast i16* %638 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %640, align 1
  %641 = getelementptr inbounds i16, i16* %633, i64 40
  %642 = bitcast i16* %641 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %642, align 1
  %643 = getelementptr inbounds i16, i16* %633, i64 64
  %644 = add <4 x i32> %607, %639
  %645 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %645, align 1
  %646 = getelementptr inbounds i16, i16* %633, i64 72
  %647 = bitcast i16* %646 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %647, align 1
  %648 = getelementptr inbounds i16, i16* %633, i64 96
  %649 = add <4 x i32> %607, %644
  %650 = bitcast i16* %648 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %650, align 1
  %651 = getelementptr inbounds i16, i16* %633, i64 104
  %652 = bitcast i16* %651 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %652, align 1
  %653 = getelementptr inbounds i16, i16* %633, i64 128
  %654 = add <4 x i32> %607, %649
  %655 = add nuw nsw i32 %632, 4
  %656 = icmp eq i32 %655, 16
  br i1 %656, label %657, label %631

657:                                              ; preds = %625, %631, %594
  %658 = phi <4 x i32> [ %589, %594 ], [ %626, %625 ], [ %654, %631 ]
  %659 = bitcast <4 x i32> %658 to <16 x i8>
  %660 = shufflevector <16 x i8> %659, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %661 = bitcast <16 x i8> %660 to <4 x i32>
  %662 = add <4 x i32> %658, %661
  %663 = bitcast <4 x i32> %662 to <16 x i8>
  %664 = shufflevector <16 x i8> %663, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %665 = bitcast <16 x i8> %664 to <4 x i32>
  %666 = add <4 x i32> %662, <i32 256, i32 256, i32 256, i32 256>
  %667 = add <4 x i32> %666, %665
  %668 = ashr <4 x i32> %667, <i32 9, i32 9, i32 9, i32 9>
  %669 = bitcast <4 x i32> %668 to <8 x i16>
  %670 = shufflevector <8 x i16> %669, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %671 = bitcast <8 x i16> %670 to <4 x i32>
  %672 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> zeroinitializer
  %673 = bitcast <4 x i32> %672 to <8 x i16>
  br label %674

674:                                              ; preds = %674, %657
  %675 = phi i32 [ 0, %657 ], [ %706, %674 ]
  %676 = phi i16* [ %532, %657 ], [ %707, %674 ]
  %677 = bitcast i16* %676 to <8 x i16>*
  %678 = load <8 x i16>, <8 x i16>* %677, align 1
  %679 = sub <8 x i16> %678, %673
  store <8 x i16> %679, <8 x i16>* %677, align 1
  %680 = getelementptr inbounds i16, i16* %676, i64 8
  %681 = bitcast i16* %680 to <8 x i16>*
  %682 = load <8 x i16>, <8 x i16>* %681, align 1
  %683 = sub <8 x i16> %682, %673
  store <8 x i16> %683, <8 x i16>* %681, align 1
  %684 = shufflevector <8 x i16> %683, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %685 = bitcast <8 x i16> %684 to <4 x i32>
  %686 = shufflevector <4 x i32> %685, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %687 = getelementptr inbounds i16, i16* %676, i64 16
  %688 = bitcast i16* %687 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %688, align 1
  %689 = getelementptr inbounds i16, i16* %676, i64 24
  %690 = bitcast i16* %689 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %690, align 1
  %691 = getelementptr inbounds i16, i16* %676, i64 32
  %692 = bitcast i16* %691 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 1
  %694 = sub <8 x i16> %693, %673
  store <8 x i16> %694, <8 x i16>* %692, align 1
  %695 = getelementptr inbounds i16, i16* %676, i64 40
  %696 = bitcast i16* %695 to <8 x i16>*
  %697 = load <8 x i16>, <8 x i16>* %696, align 1
  %698 = sub <8 x i16> %697, %673
  store <8 x i16> %698, <8 x i16>* %696, align 1
  %699 = shufflevector <8 x i16> %698, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %700 = bitcast <8 x i16> %699 to <4 x i32>
  %701 = shufflevector <4 x i32> %700, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %702 = getelementptr inbounds i16, i16* %676, i64 48
  %703 = bitcast i16* %702 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %703, align 1
  %704 = getelementptr inbounds i16, i16* %676, i64 56
  %705 = bitcast i16* %704 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %705, align 1
  %706 = add nuw nsw i32 %675, 2
  %707 = getelementptr inbounds i16, i16* %676, i64 64
  %708 = icmp eq i32 %706, 16
  br i1 %708, label %709, label %674

709:                                              ; preds = %493, %310, %138, %674
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %528 [
    i32 8, label %6
    i32 16, label %173
    i32 24, label %345
  ]

6:                                                ; preds = %5
  %7 = ashr i32 %2, 1
  %8 = icmp slt i32 %7, 32
  %9 = select i1 %8, i32 %7, i32 32
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %11 = shl i64 %4, 1
  br label %12

12:                                               ; preds = %12, %6
  %13 = phi i32 [ 0, %6 ], [ %56, %12 ]
  %14 = phi i16* [ %10, %6 ], [ %55, %12 ]
  %15 = phi <4 x i32> [ zeroinitializer, %6 ], [ %53, %12 ]
  %16 = phi i8* [ %3, %6 ], [ %54, %12 ]
  %17 = getelementptr inbounds i8, i8* %16, i64 %4
  %18 = bitcast i8* %16 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %19, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = zext <8 x i8> %20 to <8 x i16>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = zext <8 x i8> %26 to <8 x i16>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %30 = add nuw nsw <8 x i16> %27, %21
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %29 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %42 = bitcast <8 x i16> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %44 = bitcast <4 x i32> %43 to <8 x i16>
  %45 = shl <8 x i16> %44, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %46 = add <8 x i16> %39, %35
  %47 = add <8 x i16> %45, %46
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = zext <4 x i16> %48 to <4 x i32>
  %50 = add <4 x i32> %15, %49
  %51 = shufflevector <8 x i16> %47, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = add <4 x i32> %50, %52
  %54 = getelementptr inbounds i8, i8* %16, i64 %11
  %55 = getelementptr inbounds i16, i16* %14, i64 32
  %56 = add nuw nsw i32 %13, 1
  %57 = icmp slt i32 %56, %9
  br i1 %57, label %12, label %58

58:                                               ; preds = %12
  %59 = icmp ult i32 %56, 32
  br i1 %59, label %60, label %121

60:                                               ; preds = %58
  %61 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %62 = bitcast <4 x i32> %61 to <8 x i16>
  %63 = shufflevector <8 x i16> %62, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %64 = sext <4 x i16> %63 to <4 x i32>
  %65 = shl nsw <4 x i32> %64, <i32 2, i32 2, i32 2, i32 2>
  %66 = shufflevector <8 x i16> %46, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = bitcast <8 x i16> %68 to <4 x i32>
  %70 = add <4 x i32> %69, %67
  %71 = add <4 x i32> %70, %65
  %72 = sub nsw i32 3, %13
  %73 = sub nsw i32 30, %13
  %74 = and i32 %72, 3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %60, %76
  %77 = phi i32 [ %86, %76 ], [ %56, %60 ]
  %78 = phi i16* [ %84, %76 ], [ %55, %60 ]
  %79 = phi <4 x i32> [ %85, %76 ], [ %53, %60 ]
  %80 = phi i32 [ %87, %76 ], [ %74, %60 ]
  %81 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %81, align 1
  %82 = getelementptr inbounds i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %83, align 1
  %84 = getelementptr inbounds i16, i16* %78, i64 32
  %85 = add <4 x i32> %71, %79
  %86 = add nuw nsw i32 %77, 1
  %87 = add i32 %80, -1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %76, !llvm.loop !35

89:                                               ; preds = %76, %60
  %90 = phi <4 x i32> [ undef, %60 ], [ %85, %76 ]
  %91 = phi i32 [ %56, %60 ], [ %86, %76 ]
  %92 = phi i16* [ %55, %60 ], [ %84, %76 ]
  %93 = phi <4 x i32> [ %53, %60 ], [ %85, %76 ]
  %94 = icmp ult i32 %73, 3
  br i1 %94, label %121, label %95

95:                                               ; preds = %89, %95
  %96 = phi i32 [ %119, %95 ], [ %91, %89 ]
  %97 = phi i16* [ %117, %95 ], [ %92, %89 ]
  %98 = phi <4 x i32> [ %118, %95 ], [ %93, %89 ]
  %99 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %99, align 1
  %100 = getelementptr inbounds i16, i16* %97, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %101, align 1
  %102 = getelementptr inbounds i16, i16* %97, i64 32
  %103 = add <4 x i32> %71, %98
  %104 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %104, align 1
  %105 = getelementptr inbounds i16, i16* %97, i64 40
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %106, align 1
  %107 = getelementptr inbounds i16, i16* %97, i64 64
  %108 = add <4 x i32> %71, %103
  %109 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %109, align 1
  %110 = getelementptr inbounds i16, i16* %97, i64 72
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %111, align 1
  %112 = getelementptr inbounds i16, i16* %97, i64 96
  %113 = add <4 x i32> %71, %108
  %114 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %114, align 1
  %115 = getelementptr inbounds i16, i16* %97, i64 104
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %116, align 1
  %117 = getelementptr inbounds i16, i16* %97, i64 128
  %118 = add <4 x i32> %71, %113
  %119 = add nuw nsw i32 %96, 4
  %120 = icmp eq i32 %119, 32
  br i1 %120, label %121, label %95

121:                                              ; preds = %89, %95, %58
  %122 = phi <4 x i32> [ %53, %58 ], [ %90, %89 ], [ %118, %95 ]
  %123 = bitcast <4 x i32> %122 to <16 x i8>
  %124 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %125 = bitcast <16 x i8> %124 to <4 x i32>
  %126 = add <4 x i32> %122, %125
  %127 = bitcast <4 x i32> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %127, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %129 = bitcast <16 x i8> %128 to <4 x i32>
  %130 = add <4 x i32> %126, <i32 512, i32 512, i32 512, i32 512>
  %131 = add <4 x i32> %130, %129
  %132 = ashr <4 x i32> %131, <i32 10, i32 10, i32 10, i32 10>
  %133 = bitcast <4 x i32> %132 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <8 x i16> %134 to <4 x i32>
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> zeroinitializer
  %137 = bitcast <4 x i32> %136 to <8 x i16>
  br label %138

138:                                              ; preds = %138, %121
  %139 = phi i32 [ 0, %121 ], [ %170, %138 ]
  %140 = phi i16* [ %10, %121 ], [ %171, %138 ]
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = sub <8 x i16> %142, %137
  store <8 x i16> %143, <8 x i16>* %141, align 1
  %144 = getelementptr inbounds i16, i16* %140, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 1
  %147 = sub <8 x i16> %146, %137
  store <8 x i16> %147, <8 x i16>* %145, align 1
  %148 = shufflevector <8 x i16> %147, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %149 = bitcast <8 x i16> %148 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %151 = getelementptr inbounds i16, i16* %140, i64 16
  %152 = bitcast i16* %151 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %152, align 1
  %153 = getelementptr inbounds i16, i16* %140, i64 24
  %154 = bitcast i16* %153 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %154, align 1
  %155 = getelementptr inbounds i16, i16* %140, i64 32
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = sub <8 x i16> %157, %137
  store <8 x i16> %158, <8 x i16>* %156, align 1
  %159 = getelementptr inbounds i16, i16* %140, i64 40
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = sub <8 x i16> %161, %137
  store <8 x i16> %162, <8 x i16>* %160, align 1
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %164 = bitcast <8 x i16> %163 to <4 x i32>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %166 = getelementptr inbounds i16, i16* %140, i64 48
  %167 = bitcast i16* %166 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %167, align 1
  %168 = getelementptr inbounds i16, i16* %140, i64 56
  %169 = bitcast i16* %168 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %169, align 1
  %170 = add nuw nsw i32 %139, 2
  %171 = getelementptr inbounds i16, i16* %140, i64 64
  %172 = icmp eq i32 %170, 32
  br i1 %172, label %709, label %138

173:                                              ; preds = %5
  %174 = ashr i32 %2, 1
  %175 = icmp slt i32 %174, 32
  %176 = select i1 %175, i32 %174, i32 32
  %177 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %178 = shl i64 %4, 1
  br label %179

179:                                              ; preds = %179, %173
  %180 = phi i32 [ 0, %173 ], [ %228, %179 ]
  %181 = phi i16* [ %177, %173 ], [ %227, %179 ]
  %182 = phi <4 x i32> [ zeroinitializer, %173 ], [ %225, %179 ]
  %183 = phi i8* [ %3, %173 ], [ %226, %179 ]
  %184 = getelementptr inbounds i8, i8* %183, i64 %4
  %185 = bitcast i8* %183 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1
  %187 = shufflevector <16 x i8> %186, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %188 = zext <8 x i8> %187 to <8 x i16>
  %189 = shufflevector <16 x i8> %186, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = bitcast <16 x i8> %189 to <4 x i32>
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %192 = bitcast i8* %184 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1
  %194 = shufflevector <16 x i8> %193, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %195 = zext <8 x i8> %194 to <8 x i16>
  %196 = shufflevector <16 x i8> %193, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = bitcast <16 x i8> %196 to <4 x i32>
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %199 = add nuw nsw <8 x i16> %195, %188
  %200 = bitcast <16 x i8> %189 to <8 x i16>
  %201 = bitcast <16 x i8> %196 to <8 x i16>
  %202 = add <8 x i16> %201, %200
  %203 = bitcast <4 x i32> %191 to <8 x i16>
  %204 = bitcast <4 x i32> %198 to <8 x i16>
  %205 = add <8 x i16> %204, %203
  %206 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %199, <8 x i16> %202) #6
  %207 = shl <8 x i16> %206, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %208 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 1
  %209 = getelementptr inbounds i16, i16* %181, i64 8
  %210 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %205, <8 x i16> %205) #6
  %211 = shl <8 x i16> %210, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %212 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %212, align 1
  %213 = shufflevector <8 x i16> %211, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %214 = bitcast <8 x i16> %213 to <4 x i32>
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %216 = bitcast <4 x i32> %215 to <8 x i16>
  %217 = shl <8 x i16> %216, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %218 = add <8 x i16> %211, %207
  %219 = add <8 x i16> %217, %218
  %220 = shufflevector <8 x i16> %219, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %221 = zext <4 x i16> %220 to <4 x i32>
  %222 = add <4 x i32> %182, %221
  %223 = shufflevector <8 x i16> %219, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %224 = bitcast <8 x i16> %223 to <4 x i32>
  %225 = add <4 x i32> %222, %224
  %226 = getelementptr inbounds i8, i8* %183, i64 %178
  %227 = getelementptr inbounds i16, i16* %181, i64 32
  %228 = add nuw nsw i32 %180, 1
  %229 = icmp slt i32 %228, %176
  br i1 %229, label %179, label %230

230:                                              ; preds = %179
  %231 = icmp ult i32 %228, 32
  br i1 %231, label %232, label %293

232:                                              ; preds = %230
  %233 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %234 = bitcast <4 x i32> %233 to <8 x i16>
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %236 = sext <4 x i16> %235 to <4 x i32>
  %237 = shl nsw <4 x i32> %236, <i32 2, i32 2, i32 2, i32 2>
  %238 = shufflevector <8 x i16> %218, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %239 = zext <4 x i16> %238 to <4 x i32>
  %240 = shufflevector <8 x i16> %218, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %241 = bitcast <8 x i16> %240 to <4 x i32>
  %242 = add <4 x i32> %241, %239
  %243 = add <4 x i32> %242, %237
  %244 = sub nsw i32 3, %180
  %245 = sub nsw i32 30, %180
  %246 = and i32 %244, 3
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %261, label %248

248:                                              ; preds = %232, %248
  %249 = phi i32 [ %258, %248 ], [ %228, %232 ]
  %250 = phi i16* [ %256, %248 ], [ %227, %232 ]
  %251 = phi <4 x i32> [ %257, %248 ], [ %225, %232 ]
  %252 = phi i32 [ %259, %248 ], [ %246, %232 ]
  %253 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %250, i64 8
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %255, align 1
  %256 = getelementptr inbounds i16, i16* %250, i64 32
  %257 = add <4 x i32> %243, %251
  %258 = add nuw nsw i32 %249, 1
  %259 = add i32 %252, -1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %248, !llvm.loop !36

261:                                              ; preds = %248, %232
  %262 = phi <4 x i32> [ undef, %232 ], [ %257, %248 ]
  %263 = phi i32 [ %228, %232 ], [ %258, %248 ]
  %264 = phi i16* [ %227, %232 ], [ %256, %248 ]
  %265 = phi <4 x i32> [ %225, %232 ], [ %257, %248 ]
  %266 = icmp ult i32 %245, 3
  br i1 %266, label %293, label %267

267:                                              ; preds = %261, %267
  %268 = phi i32 [ %291, %267 ], [ %263, %261 ]
  %269 = phi i16* [ %289, %267 ], [ %264, %261 ]
  %270 = phi <4 x i32> [ %290, %267 ], [ %265, %261 ]
  %271 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %271, align 1
  %272 = getelementptr inbounds i16, i16* %269, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %273, align 1
  %274 = getelementptr inbounds i16, i16* %269, i64 32
  %275 = add <4 x i32> %243, %270
  %276 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %269, i64 40
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %278, align 1
  %279 = getelementptr inbounds i16, i16* %269, i64 64
  %280 = add <4 x i32> %243, %275
  %281 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %281, align 1
  %282 = getelementptr inbounds i16, i16* %269, i64 72
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %269, i64 96
  %285 = add <4 x i32> %243, %280
  %286 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %286, align 1
  %287 = getelementptr inbounds i16, i16* %269, i64 104
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %288, align 1
  %289 = getelementptr inbounds i16, i16* %269, i64 128
  %290 = add <4 x i32> %243, %285
  %291 = add nuw nsw i32 %268, 4
  %292 = icmp eq i32 %291, 32
  br i1 %292, label %293, label %267

293:                                              ; preds = %261, %267, %230
  %294 = phi <4 x i32> [ %225, %230 ], [ %262, %261 ], [ %290, %267 ]
  %295 = bitcast <4 x i32> %294 to <16 x i8>
  %296 = shufflevector <16 x i8> %295, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %297 = bitcast <16 x i8> %296 to <4 x i32>
  %298 = add <4 x i32> %294, %297
  %299 = bitcast <4 x i32> %298 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %301 = bitcast <16 x i8> %300 to <4 x i32>
  %302 = add <4 x i32> %298, <i32 512, i32 512, i32 512, i32 512>
  %303 = add <4 x i32> %302, %301
  %304 = ashr <4 x i32> %303, <i32 10, i32 10, i32 10, i32 10>
  %305 = bitcast <4 x i32> %304 to <8 x i16>
  %306 = shufflevector <8 x i16> %305, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %307 = bitcast <8 x i16> %306 to <4 x i32>
  %308 = shufflevector <4 x i32> %307, <4 x i32> undef, <4 x i32> zeroinitializer
  %309 = bitcast <4 x i32> %308 to <8 x i16>
  br label %310

310:                                              ; preds = %310, %293
  %311 = phi i32 [ 0, %293 ], [ %342, %310 ]
  %312 = phi i16* [ %177, %293 ], [ %343, %310 ]
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 1
  %315 = sub <8 x i16> %314, %309
  store <8 x i16> %315, <8 x i16>* %313, align 1
  %316 = getelementptr inbounds i16, i16* %312, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 1
  %319 = sub <8 x i16> %318, %309
  store <8 x i16> %319, <8 x i16>* %317, align 1
  %320 = shufflevector <8 x i16> %319, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %321 = bitcast <8 x i16> %320 to <4 x i32>
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %323 = getelementptr inbounds i16, i16* %312, i64 16
  %324 = bitcast i16* %323 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %324, align 1
  %325 = getelementptr inbounds i16, i16* %312, i64 24
  %326 = bitcast i16* %325 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %326, align 1
  %327 = getelementptr inbounds i16, i16* %312, i64 32
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = sub <8 x i16> %329, %309
  store <8 x i16> %330, <8 x i16>* %328, align 1
  %331 = getelementptr inbounds i16, i16* %312, i64 40
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 1
  %334 = sub <8 x i16> %333, %309
  store <8 x i16> %334, <8 x i16>* %332, align 1
  %335 = shufflevector <8 x i16> %334, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %336 = bitcast <8 x i16> %335 to <4 x i32>
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %338 = getelementptr inbounds i16, i16* %312, i64 48
  %339 = bitcast i16* %338 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %339, align 1
  %340 = getelementptr inbounds i16, i16* %312, i64 56
  %341 = bitcast i16* %340 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %341, align 1
  %342 = add nuw nsw i32 %311, 2
  %343 = getelementptr inbounds i16, i16* %312, i64 64
  %344 = icmp eq i32 %342, 32
  br i1 %344, label %709, label %310

345:                                              ; preds = %5
  %346 = ashr i32 %2, 1
  %347 = icmp slt i32 %346, 32
  %348 = select i1 %347, i32 %346, i32 32
  %349 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %350 = shl i64 %4, 1
  br label %351

351:                                              ; preds = %351, %345
  %352 = phi i32 [ 0, %345 ], [ %411, %351 ]
  %353 = phi i16* [ %349, %345 ], [ %410, %351 ]
  %354 = phi <4 x i32> [ zeroinitializer, %345 ], [ %408, %351 ]
  %355 = phi i8* [ %3, %345 ], [ %409, %351 ]
  %356 = getelementptr inbounds i8, i8* %355, i64 %4
  %357 = bitcast i8* %355 to <16 x i8>*
  %358 = load <16 x i8>, <16 x i8>* %357, align 1
  %359 = shufflevector <16 x i8> %358, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %360 = zext <8 x i8> %359 to <8 x i16>
  %361 = shufflevector <16 x i8> %358, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %362 = getelementptr inbounds i8, i8* %355, i64 16
  %363 = bitcast i8* %362 to <16 x i8>*
  %364 = load <16 x i8>, <16 x i8>* %363, align 1
  %365 = shufflevector <16 x i8> %364, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %366 = zext <8 x i8> %365 to <8 x i16>
  %367 = bitcast <8 x i16> %366 to <4 x i32>
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %369 = bitcast i8* %356 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1
  %371 = shufflevector <16 x i8> %370, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %372 = zext <8 x i8> %371 to <8 x i16>
  %373 = shufflevector <16 x i8> %370, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %374 = getelementptr inbounds i8, i8* %356, i64 16
  %375 = bitcast i8* %374 to <16 x i8>*
  %376 = load <16 x i8>, <16 x i8>* %375, align 1
  %377 = shufflevector <16 x i8> %376, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %378 = zext <8 x i8> %377 to <8 x i16>
  %379 = bitcast <8 x i16> %378 to <4 x i32>
  %380 = shufflevector <4 x i32> %379, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %381 = add nuw nsw <8 x i16> %372, %360
  %382 = bitcast <16 x i8> %361 to <8 x i16>
  %383 = bitcast <16 x i8> %373 to <8 x i16>
  %384 = add <8 x i16> %383, %382
  %385 = add nuw nsw <8 x i16> %378, %366
  %386 = bitcast <4 x i32> %368 to <8 x i16>
  %387 = bitcast <4 x i32> %380 to <8 x i16>
  %388 = add <8 x i16> %387, %386
  %389 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %381, <8 x i16> %384) #6
  %390 = shl <8 x i16> %389, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %391 = bitcast i16* %353 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %391, align 1
  %392 = getelementptr inbounds i16, i16* %353, i64 8
  %393 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %385, <8 x i16> %388) #6
  %394 = shl <8 x i16> %393, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %395 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %395, align 1
  %396 = shufflevector <8 x i16> %394, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %397 = bitcast <8 x i16> %396 to <4 x i32>
  %398 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %399 = bitcast <4 x i32> %398 to <8 x i16>
  %400 = shl <8 x i16> %399, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %401 = add <8 x i16> %394, %390
  %402 = add <8 x i16> %400, %401
  %403 = shufflevector <8 x i16> %402, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %404 = zext <4 x i16> %403 to <4 x i32>
  %405 = add <4 x i32> %354, %404
  %406 = shufflevector <8 x i16> %402, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %407 = bitcast <8 x i16> %406 to <4 x i32>
  %408 = add <4 x i32> %405, %407
  %409 = getelementptr inbounds i8, i8* %355, i64 %350
  %410 = getelementptr inbounds i16, i16* %353, i64 32
  %411 = add nuw nsw i32 %352, 1
  %412 = icmp slt i32 %411, %348
  br i1 %412, label %351, label %413

413:                                              ; preds = %351
  %414 = icmp ult i32 %411, 32
  br i1 %414, label %415, label %476

415:                                              ; preds = %413
  %416 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %417 = bitcast <4 x i32> %416 to <8 x i16>
  %418 = shufflevector <8 x i16> %417, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %419 = sext <4 x i16> %418 to <4 x i32>
  %420 = shl nsw <4 x i32> %419, <i32 2, i32 2, i32 2, i32 2>
  %421 = shufflevector <8 x i16> %401, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %422 = zext <4 x i16> %421 to <4 x i32>
  %423 = shufflevector <8 x i16> %401, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %424 = bitcast <8 x i16> %423 to <4 x i32>
  %425 = add <4 x i32> %424, %422
  %426 = add <4 x i32> %425, %420
  %427 = sub nsw i32 3, %352
  %428 = sub nsw i32 30, %352
  %429 = and i32 %427, 3
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %444, label %431

431:                                              ; preds = %415, %431
  %432 = phi i32 [ %441, %431 ], [ %411, %415 ]
  %433 = phi i16* [ %439, %431 ], [ %410, %415 ]
  %434 = phi <4 x i32> [ %440, %431 ], [ %408, %415 ]
  %435 = phi i32 [ %442, %431 ], [ %429, %415 ]
  %436 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %436, align 1
  %437 = getelementptr inbounds i16, i16* %433, i64 8
  %438 = bitcast i16* %437 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %438, align 1
  %439 = getelementptr inbounds i16, i16* %433, i64 32
  %440 = add <4 x i32> %426, %434
  %441 = add nuw nsw i32 %432, 1
  %442 = add i32 %435, -1
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %431, !llvm.loop !37

444:                                              ; preds = %431, %415
  %445 = phi <4 x i32> [ undef, %415 ], [ %440, %431 ]
  %446 = phi i32 [ %411, %415 ], [ %441, %431 ]
  %447 = phi i16* [ %410, %415 ], [ %439, %431 ]
  %448 = phi <4 x i32> [ %408, %415 ], [ %440, %431 ]
  %449 = icmp ult i32 %428, 3
  br i1 %449, label %476, label %450

450:                                              ; preds = %444, %450
  %451 = phi i32 [ %474, %450 ], [ %446, %444 ]
  %452 = phi i16* [ %472, %450 ], [ %447, %444 ]
  %453 = phi <4 x i32> [ %473, %450 ], [ %448, %444 ]
  %454 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %454, align 1
  %455 = getelementptr inbounds i16, i16* %452, i64 8
  %456 = bitcast i16* %455 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %456, align 1
  %457 = getelementptr inbounds i16, i16* %452, i64 32
  %458 = add <4 x i32> %426, %453
  %459 = bitcast i16* %457 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %459, align 1
  %460 = getelementptr inbounds i16, i16* %452, i64 40
  %461 = bitcast i16* %460 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %461, align 1
  %462 = getelementptr inbounds i16, i16* %452, i64 64
  %463 = add <4 x i32> %426, %458
  %464 = bitcast i16* %462 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %464, align 1
  %465 = getelementptr inbounds i16, i16* %452, i64 72
  %466 = bitcast i16* %465 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %466, align 1
  %467 = getelementptr inbounds i16, i16* %452, i64 96
  %468 = add <4 x i32> %426, %463
  %469 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %469, align 1
  %470 = getelementptr inbounds i16, i16* %452, i64 104
  %471 = bitcast i16* %470 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %471, align 1
  %472 = getelementptr inbounds i16, i16* %452, i64 128
  %473 = add <4 x i32> %426, %468
  %474 = add nuw nsw i32 %451, 4
  %475 = icmp eq i32 %474, 32
  br i1 %475, label %476, label %450

476:                                              ; preds = %444, %450, %413
  %477 = phi <4 x i32> [ %408, %413 ], [ %445, %444 ], [ %473, %450 ]
  %478 = bitcast <4 x i32> %477 to <16 x i8>
  %479 = shufflevector <16 x i8> %478, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %480 = bitcast <16 x i8> %479 to <4 x i32>
  %481 = add <4 x i32> %477, %480
  %482 = bitcast <4 x i32> %481 to <16 x i8>
  %483 = shufflevector <16 x i8> %482, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %484 = bitcast <16 x i8> %483 to <4 x i32>
  %485 = add <4 x i32> %481, <i32 512, i32 512, i32 512, i32 512>
  %486 = add <4 x i32> %485, %484
  %487 = ashr <4 x i32> %486, <i32 10, i32 10, i32 10, i32 10>
  %488 = bitcast <4 x i32> %487 to <8 x i16>
  %489 = shufflevector <8 x i16> %488, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %490 = bitcast <8 x i16> %489 to <4 x i32>
  %491 = shufflevector <4 x i32> %490, <4 x i32> undef, <4 x i32> zeroinitializer
  %492 = bitcast <4 x i32> %491 to <8 x i16>
  br label %493

493:                                              ; preds = %493, %476
  %494 = phi i32 [ 0, %476 ], [ %525, %493 ]
  %495 = phi i16* [ %349, %476 ], [ %526, %493 ]
  %496 = bitcast i16* %495 to <8 x i16>*
  %497 = load <8 x i16>, <8 x i16>* %496, align 1
  %498 = sub <8 x i16> %497, %492
  store <8 x i16> %498, <8 x i16>* %496, align 1
  %499 = getelementptr inbounds i16, i16* %495, i64 8
  %500 = bitcast i16* %499 to <8 x i16>*
  %501 = load <8 x i16>, <8 x i16>* %500, align 1
  %502 = sub <8 x i16> %501, %492
  store <8 x i16> %502, <8 x i16>* %500, align 1
  %503 = shufflevector <8 x i16> %502, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %504 = bitcast <8 x i16> %503 to <4 x i32>
  %505 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %506 = getelementptr inbounds i16, i16* %495, i64 16
  %507 = bitcast i16* %506 to <4 x i32>*
  store <4 x i32> %505, <4 x i32>* %507, align 1
  %508 = getelementptr inbounds i16, i16* %495, i64 24
  %509 = bitcast i16* %508 to <4 x i32>*
  store <4 x i32> %505, <4 x i32>* %509, align 1
  %510 = getelementptr inbounds i16, i16* %495, i64 32
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 1
  %513 = sub <8 x i16> %512, %492
  store <8 x i16> %513, <8 x i16>* %511, align 1
  %514 = getelementptr inbounds i16, i16* %495, i64 40
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 1
  %517 = sub <8 x i16> %516, %492
  store <8 x i16> %517, <8 x i16>* %515, align 1
  %518 = shufflevector <8 x i16> %517, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %519 = bitcast <8 x i16> %518 to <4 x i32>
  %520 = shufflevector <4 x i32> %519, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %521 = getelementptr inbounds i16, i16* %495, i64 48
  %522 = bitcast i16* %521 to <4 x i32>*
  store <4 x i32> %520, <4 x i32>* %522, align 1
  %523 = getelementptr inbounds i16, i16* %495, i64 56
  %524 = bitcast i16* %523 to <4 x i32>*
  store <4 x i32> %520, <4 x i32>* %524, align 1
  %525 = add nuw nsw i32 %494, 2
  %526 = getelementptr inbounds i16, i16* %495, i64 64
  %527 = icmp eq i32 %525, 32
  br i1 %527, label %709, label %493

528:                                              ; preds = %5
  %529 = ashr i32 %2, 1
  %530 = icmp slt i32 %529, 32
  %531 = select i1 %530, i32 %529, i32 32
  %532 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %533 = shl i64 %4, 1
  br label %534

534:                                              ; preds = %534, %528
  %535 = phi i32 [ 0, %528 ], [ %592, %534 ]
  %536 = phi i16* [ %532, %528 ], [ %591, %534 ]
  %537 = phi <4 x i32> [ zeroinitializer, %528 ], [ %589, %534 ]
  %538 = phi i8* [ %3, %528 ], [ %590, %534 ]
  %539 = getelementptr inbounds i8, i8* %538, i64 %4
  %540 = bitcast i8* %538 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1
  %542 = shufflevector <16 x i8> %541, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %543 = zext <8 x i8> %542 to <8 x i16>
  %544 = shufflevector <16 x i8> %541, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %545 = getelementptr inbounds i8, i8* %538, i64 16
  %546 = bitcast i8* %545 to <16 x i8>*
  %547 = load <16 x i8>, <16 x i8>* %546, align 1
  %548 = shufflevector <16 x i8> %547, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %549 = zext <8 x i8> %548 to <8 x i16>
  %550 = shufflevector <16 x i8> %547, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %551 = bitcast i8* %539 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1
  %553 = shufflevector <16 x i8> %552, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %554 = zext <8 x i8> %553 to <8 x i16>
  %555 = shufflevector <16 x i8> %552, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %556 = getelementptr inbounds i8, i8* %539, i64 16
  %557 = bitcast i8* %556 to <16 x i8>*
  %558 = load <16 x i8>, <16 x i8>* %557, align 1
  %559 = shufflevector <16 x i8> %558, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %560 = zext <8 x i8> %559 to <8 x i16>
  %561 = shufflevector <16 x i8> %558, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %562 = add nuw nsw <8 x i16> %554, %543
  %563 = bitcast <16 x i8> %544 to <8 x i16>
  %564 = bitcast <16 x i8> %555 to <8 x i16>
  %565 = add <8 x i16> %564, %563
  %566 = add nuw nsw <8 x i16> %560, %549
  %567 = bitcast <16 x i8> %550 to <8 x i16>
  %568 = bitcast <16 x i8> %561 to <8 x i16>
  %569 = add <8 x i16> %568, %567
  %570 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %562, <8 x i16> %565) #6
  %571 = shl <8 x i16> %570, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %572 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %572, align 1
  %573 = getelementptr inbounds i16, i16* %536, i64 8
  %574 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %566, <8 x i16> %569) #6
  %575 = shl <8 x i16> %574, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %576 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %576, align 1
  %577 = shufflevector <8 x i16> %575, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %578 = bitcast <8 x i16> %577 to <4 x i32>
  %579 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %580 = bitcast <4 x i32> %579 to <8 x i16>
  %581 = shl <8 x i16> %580, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %582 = add <8 x i16> %575, %571
  %583 = add <8 x i16> %581, %582
  %584 = shufflevector <8 x i16> %583, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %585 = zext <4 x i16> %584 to <4 x i32>
  %586 = add <4 x i32> %537, %585
  %587 = shufflevector <8 x i16> %583, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %588 = bitcast <8 x i16> %587 to <4 x i32>
  %589 = add <4 x i32> %586, %588
  %590 = getelementptr inbounds i8, i8* %538, i64 %533
  %591 = getelementptr inbounds i16, i16* %536, i64 32
  %592 = add nuw nsw i32 %535, 1
  %593 = icmp slt i32 %592, %531
  br i1 %593, label %534, label %594

594:                                              ; preds = %534
  %595 = icmp ult i32 %592, 32
  br i1 %595, label %596, label %657

596:                                              ; preds = %594
  %597 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %598 = bitcast <4 x i32> %597 to <8 x i16>
  %599 = shufflevector <8 x i16> %598, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %600 = sext <4 x i16> %599 to <4 x i32>
  %601 = shl nsw <4 x i32> %600, <i32 2, i32 2, i32 2, i32 2>
  %602 = shufflevector <8 x i16> %582, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %603 = zext <4 x i16> %602 to <4 x i32>
  %604 = shufflevector <8 x i16> %582, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %605 = bitcast <8 x i16> %604 to <4 x i32>
  %606 = add <4 x i32> %605, %603
  %607 = add <4 x i32> %606, %601
  %608 = sub nsw i32 3, %535
  %609 = sub nsw i32 30, %535
  %610 = and i32 %608, 3
  %611 = icmp eq i32 %610, 0
  br i1 %611, label %625, label %612

612:                                              ; preds = %596, %612
  %613 = phi i32 [ %622, %612 ], [ %592, %596 ]
  %614 = phi i16* [ %620, %612 ], [ %591, %596 ]
  %615 = phi <4 x i32> [ %621, %612 ], [ %589, %596 ]
  %616 = phi i32 [ %623, %612 ], [ %610, %596 ]
  %617 = bitcast i16* %614 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %617, align 1
  %618 = getelementptr inbounds i16, i16* %614, i64 8
  %619 = bitcast i16* %618 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %619, align 1
  %620 = getelementptr inbounds i16, i16* %614, i64 32
  %621 = add <4 x i32> %607, %615
  %622 = add nuw nsw i32 %613, 1
  %623 = add i32 %616, -1
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %612, !llvm.loop !38

625:                                              ; preds = %612, %596
  %626 = phi <4 x i32> [ undef, %596 ], [ %621, %612 ]
  %627 = phi i32 [ %592, %596 ], [ %622, %612 ]
  %628 = phi i16* [ %591, %596 ], [ %620, %612 ]
  %629 = phi <4 x i32> [ %589, %596 ], [ %621, %612 ]
  %630 = icmp ult i32 %609, 3
  br i1 %630, label %657, label %631

631:                                              ; preds = %625, %631
  %632 = phi i32 [ %655, %631 ], [ %627, %625 ]
  %633 = phi i16* [ %653, %631 ], [ %628, %625 ]
  %634 = phi <4 x i32> [ %654, %631 ], [ %629, %625 ]
  %635 = bitcast i16* %633 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %635, align 1
  %636 = getelementptr inbounds i16, i16* %633, i64 8
  %637 = bitcast i16* %636 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %637, align 1
  %638 = getelementptr inbounds i16, i16* %633, i64 32
  %639 = add <4 x i32> %607, %634
  %640 = bitcast i16* %638 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %640, align 1
  %641 = getelementptr inbounds i16, i16* %633, i64 40
  %642 = bitcast i16* %641 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %642, align 1
  %643 = getelementptr inbounds i16, i16* %633, i64 64
  %644 = add <4 x i32> %607, %639
  %645 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %645, align 1
  %646 = getelementptr inbounds i16, i16* %633, i64 72
  %647 = bitcast i16* %646 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %647, align 1
  %648 = getelementptr inbounds i16, i16* %633, i64 96
  %649 = add <4 x i32> %607, %644
  %650 = bitcast i16* %648 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %650, align 1
  %651 = getelementptr inbounds i16, i16* %633, i64 104
  %652 = bitcast i16* %651 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %652, align 1
  %653 = getelementptr inbounds i16, i16* %633, i64 128
  %654 = add <4 x i32> %607, %649
  %655 = add nuw nsw i32 %632, 4
  %656 = icmp eq i32 %655, 32
  br i1 %656, label %657, label %631

657:                                              ; preds = %625, %631, %594
  %658 = phi <4 x i32> [ %589, %594 ], [ %626, %625 ], [ %654, %631 ]
  %659 = bitcast <4 x i32> %658 to <16 x i8>
  %660 = shufflevector <16 x i8> %659, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %661 = bitcast <16 x i8> %660 to <4 x i32>
  %662 = add <4 x i32> %658, %661
  %663 = bitcast <4 x i32> %662 to <16 x i8>
  %664 = shufflevector <16 x i8> %663, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %665 = bitcast <16 x i8> %664 to <4 x i32>
  %666 = add <4 x i32> %662, <i32 512, i32 512, i32 512, i32 512>
  %667 = add <4 x i32> %666, %665
  %668 = ashr <4 x i32> %667, <i32 10, i32 10, i32 10, i32 10>
  %669 = bitcast <4 x i32> %668 to <8 x i16>
  %670 = shufflevector <8 x i16> %669, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %671 = bitcast <8 x i16> %670 to <4 x i32>
  %672 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> zeroinitializer
  %673 = bitcast <4 x i32> %672 to <8 x i16>
  br label %674

674:                                              ; preds = %674, %657
  %675 = phi i32 [ 0, %657 ], [ %706, %674 ]
  %676 = phi i16* [ %532, %657 ], [ %707, %674 ]
  %677 = bitcast i16* %676 to <8 x i16>*
  %678 = load <8 x i16>, <8 x i16>* %677, align 1
  %679 = sub <8 x i16> %678, %673
  store <8 x i16> %679, <8 x i16>* %677, align 1
  %680 = getelementptr inbounds i16, i16* %676, i64 8
  %681 = bitcast i16* %680 to <8 x i16>*
  %682 = load <8 x i16>, <8 x i16>* %681, align 1
  %683 = sub <8 x i16> %682, %673
  store <8 x i16> %683, <8 x i16>* %681, align 1
  %684 = shufflevector <8 x i16> %683, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %685 = bitcast <8 x i16> %684 to <4 x i32>
  %686 = shufflevector <4 x i32> %685, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %687 = getelementptr inbounds i16, i16* %676, i64 16
  %688 = bitcast i16* %687 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %688, align 1
  %689 = getelementptr inbounds i16, i16* %676, i64 24
  %690 = bitcast i16* %689 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %690, align 1
  %691 = getelementptr inbounds i16, i16* %676, i64 32
  %692 = bitcast i16* %691 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 1
  %694 = sub <8 x i16> %693, %673
  store <8 x i16> %694, <8 x i16>* %692, align 1
  %695 = getelementptr inbounds i16, i16* %676, i64 40
  %696 = bitcast i16* %695 to <8 x i16>*
  %697 = load <8 x i16>, <8 x i16>* %696, align 1
  %698 = sub <8 x i16> %697, %673
  store <8 x i16> %698, <8 x i16>* %696, align 1
  %699 = shufflevector <8 x i16> %698, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %700 = bitcast <8 x i16> %699 to <4 x i32>
  %701 = shufflevector <4 x i32> %700, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %702 = getelementptr inbounds i16, i16* %676, i64 48
  %703 = bitcast i16* %702 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %703, align 1
  %704 = getelementptr inbounds i16, i16* %676, i64 56
  %705 = bitcast i16* %704 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %705, align 1
  %706 = add nuw nsw i32 %675, 2
  %707 = getelementptr inbounds i16, i16* %676, i64 64
  %708 = icmp eq i32 %706, 32
  br i1 %708, label %709, label %674

709:                                              ; preds = %493, %310, %138, %674
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 3
  %7 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br i1 %6, label %8, label %36

8:                                                ; preds = %5, %8
  %9 = phi i16* [ %32, %8 ], [ %7, %5 ]
  %10 = phi i32 [ %34, %8 ], [ 0, %5 ]
  %11 = phi <8 x i16> [ %33, %8 ], [ zeroinitializer, %5 ]
  %12 = phi i8* [ %20, %8 ], [ %3, %5 ]
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = insertelement <4 x i32> undef, i32 %14, i32 0
  %16 = getelementptr inbounds i8, i8* %12, i64 %4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = insertelement <4 x i32> %15, i32 %18, i64 1
  %20 = getelementptr inbounds i8, i8* %16, i64 %4
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast <8 x i16> %24 to <2 x i64>
  %26 = extractelement <2 x i64> %25, i32 0
  %27 = bitcast i16* %9 to i64*
  store i64 %26, i64* %27, align 1
  %28 = getelementptr inbounds i16, i16* %9, i64 32
  %29 = bitcast <8 x i16> %24 to <4 x float>
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast i16* %28 to <2 x float>*
  store <2 x float> %30, <2 x float>* %31, align 1
  %32 = getelementptr inbounds i16, i16* %9, i64 64
  %33 = add <8 x i16> %24, %11
  %34 = add nuw nsw i32 %10, 2
  %35 = icmp slt i32 %34, %2
  br i1 %35, label %8, label %83

36:                                               ; preds = %5, %36
  %37 = phi i16* [ %60, %36 ], [ %7, %5 ]
  %38 = phi i32 [ %62, %36 ], [ 0, %5 ]
  %39 = phi <8 x i16> [ %61, %36 ], [ zeroinitializer, %5 ]
  %40 = phi i8* [ %48, %36 ], [ %3, %5 ]
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = insertelement <4 x i32> undef, i32 %42, i32 0
  %44 = getelementptr inbounds i8, i8* %40, i64 %4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = insertelement <4 x i32> %43, i32 %46, i64 1
  %48 = getelementptr inbounds i8, i8* %44, i64 %4
  %49 = bitcast <4 x i32> %47 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = shl nuw nsw <8 x i16> %51, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = extractelement <2 x i64> %53, i32 0
  %55 = bitcast i16* %37 to i64*
  store i64 %54, i64* %55, align 1
  %56 = getelementptr inbounds i16, i16* %37, i64 32
  %57 = bitcast <8 x i16> %52 to <4 x float>
  %58 = shufflevector <4 x float> %57, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %59 = bitcast i16* %56 to <2 x float>*
  store <2 x float> %58, <2 x float>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %37, i64 64
  %61 = add <8 x i16> %52, %39
  %62 = add nuw nsw i32 %38, 2
  %63 = icmp slt i32 %62, %2
  br i1 %63, label %36, label %64

64:                                               ; preds = %36
  %65 = bitcast <8 x i16> %52 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = bitcast <4 x i32> %66 to <4 x float>
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %71 = bitcast <4 x i32> %66 to <8 x i16>
  br label %72

72:                                               ; preds = %72, %64
  %73 = phi i16* [ %60, %64 ], [ %79, %72 ]
  %74 = phi i32 [ %62, %64 ], [ %81, %72 ]
  %75 = phi <8 x i16> [ %61, %64 ], [ %80, %72 ]
  %76 = bitcast i16* %73 to i64*
  store i64 %68, i64* %76, align 1
  %77 = getelementptr inbounds i16, i16* %73, i64 32
  %78 = bitcast i16* %77 to <2 x float>*
  store <2 x float> %70, <2 x float>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %73, i64 64
  %80 = add <8 x i16> %75, %71
  %81 = add nuw nsw i32 %74, 2
  %82 = icmp slt i32 %81, 4
  br i1 %82, label %72, label %83

83:                                               ; preds = %72, %8
  %84 = phi <8 x i16> [ %33, %8 ], [ %80, %72 ]
  %85 = shufflevector <8 x i16> %84, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %84, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %87 = zext <4 x i16> %86 to <4 x i32>
  %88 = bitcast <8 x i16> %85 to <4 x i32>
  %89 = add <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = add <4 x i32> %89, %92
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = add <4 x i32> %93, <i32 8, i32 8, i32 8, i32 8>
  %98 = add <4 x i32> %97, %96
  %99 = lshr <4 x i32> %98, <i32 4, i32 4, i32 4, i32 4>
  %100 = bitcast <4 x i32> %99 to <8 x i16>
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = bitcast [32 x i16]* %0 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <8 x i16>
  %106 = sub <8 x i16> %105, %101
  %107 = bitcast <8 x i16> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  store i64 %108, i64* %102, align 1
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %110 = bitcast i16* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <8 x i16>
  %114 = sub <8 x i16> %113, %101
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = extractelement <2 x i64> %115, i32 0
  store i64 %116, i64* %110, align 1
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %118 = bitcast i16* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = insertelement <2 x i64> undef, i64 %119, i32 0
  %121 = bitcast <2 x i64> %120 to <8 x i16>
  %122 = sub <8 x i16> %121, %101
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = extractelement <2 x i64> %123, i32 0
  store i64 %124, i64* %118, align 1
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %126 = bitcast i16* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = insertelement <2 x i64> undef, i64 %127, i32 0
  %129 = bitcast <2 x i64> %128 to <8 x i16>
  %130 = sub <8 x i16> %129, %101
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  store i64 %132, i64* %126, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 7
  %7 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br i1 %6, label %8, label %36

8:                                                ; preds = %5, %8
  %9 = phi i16* [ %32, %8 ], [ %7, %5 ]
  %10 = phi i32 [ %34, %8 ], [ 0, %5 ]
  %11 = phi <8 x i16> [ %33, %8 ], [ zeroinitializer, %5 ]
  %12 = phi i8* [ %20, %8 ], [ %3, %5 ]
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = insertelement <4 x i32> undef, i32 %14, i32 0
  %16 = getelementptr inbounds i8, i8* %12, i64 %4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = insertelement <4 x i32> %15, i32 %18, i64 1
  %20 = getelementptr inbounds i8, i8* %16, i64 %4
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast <8 x i16> %24 to <2 x i64>
  %26 = extractelement <2 x i64> %25, i32 0
  %27 = bitcast i16* %9 to i64*
  store i64 %26, i64* %27, align 1
  %28 = getelementptr inbounds i16, i16* %9, i64 32
  %29 = bitcast <8 x i16> %24 to <4 x float>
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast i16* %28 to <2 x float>*
  store <2 x float> %30, <2 x float>* %31, align 1
  %32 = getelementptr inbounds i16, i16* %9, i64 64
  %33 = add <8 x i16> %24, %11
  %34 = add nuw nsw i32 %10, 2
  %35 = icmp slt i32 %34, %2
  br i1 %35, label %8, label %83

36:                                               ; preds = %5, %36
  %37 = phi i16* [ %60, %36 ], [ %7, %5 ]
  %38 = phi i32 [ %62, %36 ], [ 0, %5 ]
  %39 = phi <8 x i16> [ %61, %36 ], [ zeroinitializer, %5 ]
  %40 = phi i8* [ %48, %36 ], [ %3, %5 ]
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = insertelement <4 x i32> undef, i32 %42, i32 0
  %44 = getelementptr inbounds i8, i8* %40, i64 %4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = insertelement <4 x i32> %43, i32 %46, i64 1
  %48 = getelementptr inbounds i8, i8* %44, i64 %4
  %49 = bitcast <4 x i32> %47 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = shl nuw nsw <8 x i16> %51, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = extractelement <2 x i64> %53, i32 0
  %55 = bitcast i16* %37 to i64*
  store i64 %54, i64* %55, align 1
  %56 = getelementptr inbounds i16, i16* %37, i64 32
  %57 = bitcast <8 x i16> %52 to <4 x float>
  %58 = shufflevector <4 x float> %57, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %59 = bitcast i16* %56 to <2 x float>*
  store <2 x float> %58, <2 x float>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %37, i64 64
  %61 = add <8 x i16> %52, %39
  %62 = add nuw nsw i32 %38, 2
  %63 = icmp slt i32 %62, %2
  br i1 %63, label %36, label %64

64:                                               ; preds = %36
  %65 = bitcast <8 x i16> %52 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = bitcast <4 x i32> %66 to <4 x float>
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %71 = bitcast <4 x i32> %66 to <8 x i16>
  br label %72

72:                                               ; preds = %72, %64
  %73 = phi i16* [ %60, %64 ], [ %79, %72 ]
  %74 = phi i32 [ %62, %64 ], [ %81, %72 ]
  %75 = phi <8 x i16> [ %61, %64 ], [ %80, %72 ]
  %76 = bitcast i16* %73 to i64*
  store i64 %68, i64* %76, align 1
  %77 = getelementptr inbounds i16, i16* %73, i64 32
  %78 = bitcast i16* %77 to <2 x float>*
  store <2 x float> %70, <2 x float>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %73, i64 64
  %80 = add <8 x i16> %75, %71
  %81 = add nuw nsw i32 %74, 2
  %82 = icmp slt i32 %81, 8
  br i1 %82, label %72, label %83

83:                                               ; preds = %72, %8
  %84 = phi <8 x i16> [ %33, %8 ], [ %80, %72 ]
  %85 = shufflevector <8 x i16> %84, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %84, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %87 = zext <4 x i16> %86 to <4 x i32>
  %88 = bitcast <8 x i16> %85 to <4 x i32>
  %89 = add <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = add <4 x i32> %89, %92
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = add <4 x i32> %93, <i32 16, i32 16, i32 16, i32 16>
  %98 = add <4 x i32> %97, %96
  %99 = lshr <4 x i32> %98, <i32 5, i32 5, i32 5, i32 5>
  %100 = bitcast <4 x i32> %99 to <8 x i16>
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = bitcast [32 x i16]* %0 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <8 x i16>
  %106 = sub <8 x i16> %105, %101
  %107 = bitcast <8 x i16> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  store i64 %108, i64* %102, align 1
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %110 = bitcast i16* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <8 x i16>
  %114 = sub <8 x i16> %113, %101
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = extractelement <2 x i64> %115, i32 0
  store i64 %116, i64* %110, align 1
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %118 = bitcast i16* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = insertelement <2 x i64> undef, i64 %119, i32 0
  %121 = bitcast <2 x i64> %120 to <8 x i16>
  %122 = sub <8 x i16> %121, %101
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = extractelement <2 x i64> %123, i32 0
  store i64 %124, i64* %118, align 1
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %126 = bitcast i16* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = insertelement <2 x i64> undef, i64 %127, i32 0
  %129 = bitcast <2 x i64> %128 to <8 x i16>
  %130 = sub <8 x i16> %129, %101
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  store i64 %132, i64* %126, align 1
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %134 = bitcast i16* %133 to i64*
  %135 = load i64, i64* %134, align 1
  %136 = insertelement <2 x i64> undef, i64 %135, i32 0
  %137 = bitcast <2 x i64> %136 to <8 x i16>
  %138 = sub <8 x i16> %137, %101
  %139 = bitcast <8 x i16> %138 to <2 x i64>
  %140 = extractelement <2 x i64> %139, i32 0
  store i64 %140, i64* %134, align 1
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %142 = bitcast i16* %141 to i64*
  %143 = load i64, i64* %142, align 1
  %144 = insertelement <2 x i64> undef, i64 %143, i32 0
  %145 = bitcast <2 x i64> %144 to <8 x i16>
  %146 = sub <8 x i16> %145, %101
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = extractelement <2 x i64> %147, i32 0
  store i64 %148, i64* %142, align 1
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %150 = bitcast i16* %149 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = insertelement <2 x i64> undef, i64 %151, i32 0
  %153 = bitcast <2 x i64> %152 to <8 x i16>
  %154 = sub <8 x i16> %153, %101
  %155 = bitcast <8 x i16> %154 to <2 x i64>
  %156 = extractelement <2 x i64> %155, i32 0
  store i64 %156, i64* %150, align 1
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %158 = bitcast i16* %157 to i64*
  %159 = load i64, i64* %158, align 1
  %160 = insertelement <2 x i64> undef, i64 %159, i32 0
  %161 = bitcast <2 x i64> %160 to <8 x i16>
  %162 = sub <8 x i16> %161, %101
  %163 = bitcast <8 x i16> %162 to <2 x i64>
  %164 = extractelement <2 x i64> %163, i32 0
  store i64 %164, i64* %158, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 15
  %7 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br i1 %6, label %8, label %36

8:                                                ; preds = %5, %8
  %9 = phi i16* [ %32, %8 ], [ %7, %5 ]
  %10 = phi i32 [ %34, %8 ], [ 0, %5 ]
  %11 = phi <8 x i16> [ %33, %8 ], [ zeroinitializer, %5 ]
  %12 = phi i8* [ %20, %8 ], [ %3, %5 ]
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = insertelement <4 x i32> undef, i32 %14, i32 0
  %16 = getelementptr inbounds i8, i8* %12, i64 %4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = insertelement <4 x i32> %15, i32 %18, i64 1
  %20 = getelementptr inbounds i8, i8* %16, i64 %4
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast <8 x i16> %24 to <2 x i64>
  %26 = extractelement <2 x i64> %25, i32 0
  %27 = bitcast i16* %9 to i64*
  store i64 %26, i64* %27, align 1
  %28 = getelementptr inbounds i16, i16* %9, i64 32
  %29 = bitcast <8 x i16> %24 to <4 x float>
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast i16* %28 to <2 x float>*
  store <2 x float> %30, <2 x float>* %31, align 1
  %32 = getelementptr inbounds i16, i16* %9, i64 64
  %33 = add <8 x i16> %24, %11
  %34 = add nuw nsw i32 %10, 2
  %35 = icmp slt i32 %34, %2
  br i1 %35, label %8, label %83

36:                                               ; preds = %5, %36
  %37 = phi i16* [ %60, %36 ], [ %7, %5 ]
  %38 = phi i32 [ %62, %36 ], [ 0, %5 ]
  %39 = phi <8 x i16> [ %61, %36 ], [ zeroinitializer, %5 ]
  %40 = phi i8* [ %48, %36 ], [ %3, %5 ]
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = insertelement <4 x i32> undef, i32 %42, i32 0
  %44 = getelementptr inbounds i8, i8* %40, i64 %4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = insertelement <4 x i32> %43, i32 %46, i64 1
  %48 = getelementptr inbounds i8, i8* %44, i64 %4
  %49 = bitcast <4 x i32> %47 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %51 = zext <8 x i8> %50 to <8 x i16>
  %52 = shl nuw nsw <8 x i16> %51, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = extractelement <2 x i64> %53, i32 0
  %55 = bitcast i16* %37 to i64*
  store i64 %54, i64* %55, align 1
  %56 = getelementptr inbounds i16, i16* %37, i64 32
  %57 = bitcast <8 x i16> %52 to <4 x float>
  %58 = shufflevector <4 x float> %57, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %59 = bitcast i16* %56 to <2 x float>*
  store <2 x float> %58, <2 x float>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %37, i64 64
  %61 = add <8 x i16> %52, %39
  %62 = add nuw nsw i32 %38, 2
  %63 = icmp slt i32 %62, %2
  br i1 %63, label %36, label %64

64:                                               ; preds = %36
  %65 = bitcast <8 x i16> %52 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = bitcast <4 x i32> %66 to <4 x float>
  %70 = shufflevector <4 x float> %69, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %71 = bitcast <4 x i32> %66 to <8 x i16>
  br label %72

72:                                               ; preds = %72, %64
  %73 = phi i16* [ %60, %64 ], [ %79, %72 ]
  %74 = phi i32 [ %62, %64 ], [ %81, %72 ]
  %75 = phi <8 x i16> [ %61, %64 ], [ %80, %72 ]
  %76 = bitcast i16* %73 to i64*
  store i64 %68, i64* %76, align 1
  %77 = getelementptr inbounds i16, i16* %73, i64 32
  %78 = bitcast i16* %77 to <2 x float>*
  store <2 x float> %70, <2 x float>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %73, i64 64
  %80 = add <8 x i16> %75, %71
  %81 = add nuw nsw i32 %74, 2
  %82 = icmp slt i32 %81, 16
  br i1 %82, label %72, label %83

83:                                               ; preds = %72, %8
  %84 = phi <8 x i16> [ %33, %8 ], [ %80, %72 ]
  %85 = shufflevector <8 x i16> %84, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %84, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %87 = zext <4 x i16> %86 to <4 x i32>
  %88 = bitcast <8 x i16> %85 to <4 x i32>
  %89 = add <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = add <4 x i32> %89, %92
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = add <4 x i32> %93, <i32 32, i32 32, i32 32, i32 32>
  %98 = add <4 x i32> %97, %96
  %99 = lshr <4 x i32> %98, <i32 6, i32 6, i32 6, i32 6>
  %100 = bitcast <4 x i32> %99 to <8 x i16>
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = bitcast [32 x i16]* %0 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <8 x i16>
  %106 = sub <8 x i16> %105, %101
  %107 = bitcast <8 x i16> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  store i64 %108, i64* %102, align 1
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %110 = bitcast i16* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <8 x i16>
  %114 = sub <8 x i16> %113, %101
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = extractelement <2 x i64> %115, i32 0
  store i64 %116, i64* %110, align 1
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %118 = bitcast i16* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = insertelement <2 x i64> undef, i64 %119, i32 0
  %121 = bitcast <2 x i64> %120 to <8 x i16>
  %122 = sub <8 x i16> %121, %101
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = extractelement <2 x i64> %123, i32 0
  store i64 %124, i64* %118, align 1
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %126 = bitcast i16* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = insertelement <2 x i64> undef, i64 %127, i32 0
  %129 = bitcast <2 x i64> %128 to <8 x i16>
  %130 = sub <8 x i16> %129, %101
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  store i64 %132, i64* %126, align 1
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %134 = bitcast i16* %133 to i64*
  %135 = load i64, i64* %134, align 1
  %136 = insertelement <2 x i64> undef, i64 %135, i32 0
  %137 = bitcast <2 x i64> %136 to <8 x i16>
  %138 = sub <8 x i16> %137, %101
  %139 = bitcast <8 x i16> %138 to <2 x i64>
  %140 = extractelement <2 x i64> %139, i32 0
  store i64 %140, i64* %134, align 1
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %142 = bitcast i16* %141 to i64*
  %143 = load i64, i64* %142, align 1
  %144 = insertelement <2 x i64> undef, i64 %143, i32 0
  %145 = bitcast <2 x i64> %144 to <8 x i16>
  %146 = sub <8 x i16> %145, %101
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = extractelement <2 x i64> %147, i32 0
  store i64 %148, i64* %142, align 1
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %150 = bitcast i16* %149 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = insertelement <2 x i64> undef, i64 %151, i32 0
  %153 = bitcast <2 x i64> %152 to <8 x i16>
  %154 = sub <8 x i16> %153, %101
  %155 = bitcast <8 x i16> %154 to <2 x i64>
  %156 = extractelement <2 x i64> %155, i32 0
  store i64 %156, i64* %150, align 1
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %158 = bitcast i16* %157 to i64*
  %159 = load i64, i64* %158, align 1
  %160 = insertelement <2 x i64> undef, i64 %159, i32 0
  %161 = bitcast <2 x i64> %160 to <8 x i16>
  %162 = sub <8 x i16> %161, %101
  %163 = bitcast <8 x i16> %162 to <2 x i64>
  %164 = extractelement <2 x i64> %163, i32 0
  store i64 %164, i64* %158, align 1
  %165 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %166 = bitcast i16* %165 to i64*
  %167 = load i64, i64* %166, align 1
  %168 = insertelement <2 x i64> undef, i64 %167, i32 0
  %169 = bitcast <2 x i64> %168 to <8 x i16>
  %170 = sub <8 x i16> %169, %101
  %171 = bitcast <8 x i16> %170 to <2 x i64>
  %172 = extractelement <2 x i64> %171, i32 0
  store i64 %172, i64* %166, align 1
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %174 = bitcast i16* %173 to i64*
  %175 = load i64, i64* %174, align 1
  %176 = insertelement <2 x i64> undef, i64 %175, i32 0
  %177 = bitcast <2 x i64> %176 to <8 x i16>
  %178 = sub <8 x i16> %177, %101
  %179 = bitcast <8 x i16> %178 to <2 x i64>
  %180 = extractelement <2 x i64> %179, i32 0
  store i64 %180, i64* %174, align 1
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %182 = bitcast i16* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = insertelement <2 x i64> undef, i64 %183, i32 0
  %185 = bitcast <2 x i64> %184 to <8 x i16>
  %186 = sub <8 x i16> %185, %101
  %187 = bitcast <8 x i16> %186 to <2 x i64>
  %188 = extractelement <2 x i64> %187, i32 0
  store i64 %188, i64* %182, align 1
  %189 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %190 = bitcast i16* %189 to i64*
  %191 = load i64, i64* %190, align 1
  %192 = insertelement <2 x i64> undef, i64 %191, i32 0
  %193 = bitcast <2 x i64> %192 to <8 x i16>
  %194 = sub <8 x i16> %193, %101
  %195 = bitcast <8 x i16> %194 to <2 x i64>
  %196 = extractelement <2 x i64> %195, i32 0
  store i64 %196, i64* %190, align 1
  %197 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %198 = bitcast i16* %197 to i64*
  %199 = load i64, i64* %198, align 1
  %200 = insertelement <2 x i64> undef, i64 %199, i32 0
  %201 = bitcast <2 x i64> %200 to <8 x i16>
  %202 = sub <8 x i16> %201, %101
  %203 = bitcast <8 x i16> %202 to <2 x i64>
  %204 = extractelement <2 x i64> %203, i32 0
  store i64 %204, i64* %198, align 1
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %206 = bitcast i16* %205 to i64*
  %207 = load i64, i64* %206, align 1
  %208 = insertelement <2 x i64> undef, i64 %207, i32 0
  %209 = bitcast <2 x i64> %208 to <8 x i16>
  %210 = sub <8 x i16> %209, %101
  %211 = bitcast <8 x i16> %210 to <2 x i64>
  %212 = extractelement <2 x i64> %211, i32 0
  store i64 %212, i64* %206, align 1
  %213 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %214 = bitcast i16* %213 to i64*
  %215 = load i64, i64* %214, align 1
  %216 = insertelement <2 x i64> undef, i64 %215, i32 0
  %217 = bitcast <2 x i64> %216 to <8 x i16>
  %218 = sub <8 x i16> %217, %101
  %219 = bitcast <8 x i16> %218 to <2 x i64>
  %220 = extractelement <2 x i64> %219, i32 0
  store i64 %220, i64* %214, align 1
  %221 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %222 = bitcast i16* %221 to i64*
  %223 = load i64, i64* %222, align 1
  %224 = insertelement <2 x i64> undef, i64 %223, i32 0
  %225 = bitcast <2 x i64> %224 to <8 x i16>
  %226 = sub <8 x i16> %225, %101
  %227 = bitcast <8 x i16> %226 to <2 x i64>
  %228 = extractelement <2 x i64> %227, i32 0
  store i64 %228, i64* %222, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 3
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %41

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %3, %9 ], [ %31, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %37, %11 ]
  %14 = phi <8 x i16> [ zeroinitializer, %9 ], [ %27, %11 ]
  %15 = phi <8 x i16> [ zeroinitializer, %9 ], [ %38, %11 ]
  %16 = phi i32 [ 0, %9 ], [ %39, %11 ]
  %17 = bitcast i8* %12 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = getelementptr inbounds i8, i8* %12, i64 %4
  %21 = bitcast <2 x i64> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 1
  %26 = getelementptr inbounds i16, i16* %13, i64 32
  %27 = add <8 x i16> %24, %14
  %28 = bitcast i8* %20 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = getelementptr inbounds i8, i8* %20, i64 %4
  %32 = bitcast <2 x i64> %30 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %34 = zext <8 x i8> %33 to <8 x i16>
  %35 = shl nuw nsw <8 x i16> %34, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %36 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %13, i64 64
  %38 = add <8 x i16> %35, %15
  %39 = add nuw nsw i32 %16, 2
  %40 = icmp slt i32 %39, %2
  br i1 %40, label %11, label %152

41:                                               ; preds = %5
  %42 = sub i32 16, %1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %48 = add nsw i32 %1, -1
  %49 = sext i32 %48 to i64
  br label %50

50:                                               ; preds = %50, %41
  %51 = phi i8* [ %3, %41 ], [ %81, %50 ]
  %52 = phi i16* [ %47, %41 ], [ %86, %50 ]
  %53 = phi <8 x i16> [ zeroinitializer, %41 ], [ %71, %50 ]
  %54 = phi <8 x i16> [ zeroinitializer, %41 ], [ %87, %50 ]
  %55 = phi i32 [ 0, %41 ], [ %88, %50 ]
  %56 = bitcast i8* %51 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = getelementptr inbounds i8, i8* %51, i64 %49
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <16 x i8> undef, i8 %60, i32 0
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> zeroinitializer
  %63 = bitcast <2 x i64> %58 to <16 x i8>
  %64 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %63, <16 x i8> %62, <16 x i8> %46) #6
  %65 = getelementptr inbounds i8, i8* %51, i64 %4
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %67 = zext <8 x i8> %66 to <8 x i16>
  %68 = shl nuw nsw <8 x i16> %67, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %69 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %52, i64 32
  %71 = add <8 x i16> %68, %53
  %72 = bitcast i8* %65 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %73, i32 0
  %75 = getelementptr inbounds i8, i8* %65, i64 %49
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> zeroinitializer
  %79 = bitcast <2 x i64> %74 to <16 x i8>
  %80 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %79, <16 x i8> %78, <16 x i8> %46) #6
  %81 = getelementptr inbounds i8, i8* %65, i64 %4
  %82 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = shl nuw nsw <8 x i16> %83, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %85 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 1
  %86 = getelementptr inbounds i16, i16* %52, i64 64
  %87 = add <8 x i16> %84, %54
  %88 = add nuw nsw i32 %55, 2
  %89 = icmp slt i32 %88, %2
  br i1 %89, label %50, label %90

90:                                               ; preds = %50
  %91 = icmp slt i32 %2, 4
  br i1 %91, label %92, label %152

92:                                               ; preds = %90
  %93 = sub i32 3, %2
  %94 = lshr i32 %93, 1
  %95 = add nuw i32 %94, 1
  %96 = and i32 %95, 3
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92, %98
  %99 = phi i32 [ %110, %98 ], [ %2, %92 ]
  %100 = phi <8 x i16> [ %107, %98 ], [ %87, %92 ]
  %101 = phi <8 x i16> [ %104, %98 ], [ %71, %92 ]
  %102 = phi i16* [ %109, %98 ], [ %86, %92 ]
  %103 = phi i32 [ %111, %98 ], [ %96, %92 ]
  %104 = add <8 x i16> %101, %84
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %105, align 1
  %106 = getelementptr inbounds i16, i16* %102, i64 32
  %107 = add <8 x i16> %100, %84
  %108 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %108, align 1
  %109 = getelementptr inbounds i16, i16* %102, i64 64
  %110 = add nsw i32 %99, 2
  %111 = add i32 %103, -1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %98, !llvm.loop !39

113:                                              ; preds = %98, %92
  %114 = phi i32 [ %2, %92 ], [ %110, %98 ]
  %115 = phi <8 x i16> [ %87, %92 ], [ %107, %98 ]
  %116 = phi <8 x i16> [ %71, %92 ], [ %104, %98 ]
  %117 = phi i16* [ %86, %92 ], [ %109, %98 ]
  %118 = phi <8 x i16> [ undef, %92 ], [ %104, %98 ]
  %119 = phi <8 x i16> [ undef, %92 ], [ %107, %98 ]
  %120 = icmp ult i32 %93, 6
  br i1 %120, label %152, label %121

121:                                              ; preds = %113, %121
  %122 = phi i32 [ %150, %121 ], [ %114, %113 ]
  %123 = phi <8 x i16> [ %147, %121 ], [ %115, %113 ]
  %124 = phi <8 x i16> [ %144, %121 ], [ %116, %113 ]
  %125 = phi i16* [ %149, %121 ], [ %117, %113 ]
  %126 = add <8 x i16> %124, %84
  %127 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %125, i64 32
  %129 = add <8 x i16> %123, %84
  %130 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %130, align 1
  %131 = getelementptr inbounds i16, i16* %125, i64 64
  %132 = add <8 x i16> %126, %84
  %133 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %125, i64 96
  %135 = add <8 x i16> %129, %84
  %136 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 128
  %138 = add <8 x i16> %132, %84
  %139 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %125, i64 160
  %141 = add <8 x i16> %135, %84
  %142 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %125, i64 192
  %144 = add <8 x i16> %138, %84
  %145 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %145, align 1
  %146 = getelementptr inbounds i16, i16* %125, i64 224
  %147 = add <8 x i16> %141, %84
  %148 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %125, i64 256
  %150 = add nsw i32 %122, 8
  %151 = icmp slt i32 %150, 4
  br i1 %151, label %121, label %152

152:                                              ; preds = %113, %121, %11, %90
  %153 = phi <8 x i16> [ %71, %90 ], [ %27, %11 ], [ %118, %113 ], [ %144, %121 ]
  %154 = phi <8 x i16> [ %87, %90 ], [ %38, %11 ], [ %119, %113 ], [ %147, %121 ]
  %155 = shufflevector <8 x i16> %153, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %156 = shufflevector <8 x i16> %153, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %157 = zext <4 x i16> %156 to <4 x i32>
  %158 = bitcast <8 x i16> %155 to <4 x i32>
  %159 = add <4 x i32> %157, %158
  %160 = shufflevector <8 x i16> %154, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = bitcast <8 x i16> %160 to <4 x i32>
  %162 = add <4 x i32> %159, %161
  %163 = shufflevector <8 x i16> %154, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = add <4 x i32> %162, %164
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = add <4 x i32> %165, %168
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = add <4 x i32> %169, <i32 16, i32 16, i32 16, i32 16>
  %174 = add <4 x i32> %173, %172
  %175 = lshr <4 x i32> %174, <i32 5, i32 5, i32 5, i32 5>
  %176 = bitcast <4 x i32> %175 to <16 x i8>
  %177 = shufflevector <16 x i8> %176, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %178 = bitcast <16 x i8> %177 to <8 x i16>
  %179 = bitcast [32 x i16]* %0 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 1
  %181 = sub <8 x i16> %180, %178
  store <8 x i16> %181, <8 x i16>* %179, align 1
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 1
  %185 = sub <8 x i16> %184, %178
  store <8 x i16> %185, <8 x i16>* %183, align 1
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = sub <8 x i16> %188, %178
  store <8 x i16> %189, <8 x i16>* %187, align 1
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %178
  store <8 x i16> %193, <8 x i16>* %191, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 7
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %41

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %3, %9 ], [ %31, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %37, %11 ]
  %14 = phi <8 x i16> [ zeroinitializer, %9 ], [ %27, %11 ]
  %15 = phi <8 x i16> [ zeroinitializer, %9 ], [ %38, %11 ]
  %16 = phi i32 [ 0, %9 ], [ %39, %11 ]
  %17 = bitcast i8* %12 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = getelementptr inbounds i8, i8* %12, i64 %4
  %21 = bitcast <2 x i64> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 1
  %26 = getelementptr inbounds i16, i16* %13, i64 32
  %27 = add <8 x i16> %24, %14
  %28 = bitcast i8* %20 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = getelementptr inbounds i8, i8* %20, i64 %4
  %32 = bitcast <2 x i64> %30 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %34 = zext <8 x i8> %33 to <8 x i16>
  %35 = shl nuw nsw <8 x i16> %34, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %36 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %13, i64 64
  %38 = add <8 x i16> %35, %15
  %39 = add nuw nsw i32 %16, 2
  %40 = icmp slt i32 %39, %2
  br i1 %40, label %11, label %152

41:                                               ; preds = %5
  %42 = sub i32 16, %1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %48 = add nsw i32 %1, -1
  %49 = sext i32 %48 to i64
  br label %50

50:                                               ; preds = %50, %41
  %51 = phi i8* [ %3, %41 ], [ %81, %50 ]
  %52 = phi i16* [ %47, %41 ], [ %86, %50 ]
  %53 = phi <8 x i16> [ zeroinitializer, %41 ], [ %71, %50 ]
  %54 = phi <8 x i16> [ zeroinitializer, %41 ], [ %87, %50 ]
  %55 = phi i32 [ 0, %41 ], [ %88, %50 ]
  %56 = bitcast i8* %51 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = getelementptr inbounds i8, i8* %51, i64 %49
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <16 x i8> undef, i8 %60, i32 0
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> zeroinitializer
  %63 = bitcast <2 x i64> %58 to <16 x i8>
  %64 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %63, <16 x i8> %62, <16 x i8> %46) #6
  %65 = getelementptr inbounds i8, i8* %51, i64 %4
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %67 = zext <8 x i8> %66 to <8 x i16>
  %68 = shl nuw nsw <8 x i16> %67, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %69 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %52, i64 32
  %71 = add <8 x i16> %68, %53
  %72 = bitcast i8* %65 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %73, i32 0
  %75 = getelementptr inbounds i8, i8* %65, i64 %49
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> zeroinitializer
  %79 = bitcast <2 x i64> %74 to <16 x i8>
  %80 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %79, <16 x i8> %78, <16 x i8> %46) #6
  %81 = getelementptr inbounds i8, i8* %65, i64 %4
  %82 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = shl nuw nsw <8 x i16> %83, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %85 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 1
  %86 = getelementptr inbounds i16, i16* %52, i64 64
  %87 = add <8 x i16> %84, %54
  %88 = add nuw nsw i32 %55, 2
  %89 = icmp slt i32 %88, %2
  br i1 %89, label %50, label %90

90:                                               ; preds = %50
  %91 = icmp slt i32 %2, 8
  br i1 %91, label %92, label %152

92:                                               ; preds = %90
  %93 = sub i32 7, %2
  %94 = lshr i32 %93, 1
  %95 = add nuw i32 %94, 1
  %96 = and i32 %95, 3
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92, %98
  %99 = phi i32 [ %110, %98 ], [ %2, %92 ]
  %100 = phi <8 x i16> [ %107, %98 ], [ %87, %92 ]
  %101 = phi <8 x i16> [ %104, %98 ], [ %71, %92 ]
  %102 = phi i16* [ %109, %98 ], [ %86, %92 ]
  %103 = phi i32 [ %111, %98 ], [ %96, %92 ]
  %104 = add <8 x i16> %101, %84
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %105, align 1
  %106 = getelementptr inbounds i16, i16* %102, i64 32
  %107 = add <8 x i16> %100, %84
  %108 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %108, align 1
  %109 = getelementptr inbounds i16, i16* %102, i64 64
  %110 = add nsw i32 %99, 2
  %111 = add i32 %103, -1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %98, !llvm.loop !40

113:                                              ; preds = %98, %92
  %114 = phi i32 [ %2, %92 ], [ %110, %98 ]
  %115 = phi <8 x i16> [ %87, %92 ], [ %107, %98 ]
  %116 = phi <8 x i16> [ %71, %92 ], [ %104, %98 ]
  %117 = phi i16* [ %86, %92 ], [ %109, %98 ]
  %118 = phi <8 x i16> [ undef, %92 ], [ %104, %98 ]
  %119 = phi <8 x i16> [ undef, %92 ], [ %107, %98 ]
  %120 = icmp ult i32 %93, 6
  br i1 %120, label %152, label %121

121:                                              ; preds = %113, %121
  %122 = phi i32 [ %150, %121 ], [ %114, %113 ]
  %123 = phi <8 x i16> [ %147, %121 ], [ %115, %113 ]
  %124 = phi <8 x i16> [ %144, %121 ], [ %116, %113 ]
  %125 = phi i16* [ %149, %121 ], [ %117, %113 ]
  %126 = add <8 x i16> %124, %84
  %127 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %125, i64 32
  %129 = add <8 x i16> %123, %84
  %130 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %130, align 1
  %131 = getelementptr inbounds i16, i16* %125, i64 64
  %132 = add <8 x i16> %126, %84
  %133 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %125, i64 96
  %135 = add <8 x i16> %129, %84
  %136 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 128
  %138 = add <8 x i16> %132, %84
  %139 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %125, i64 160
  %141 = add <8 x i16> %135, %84
  %142 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %125, i64 192
  %144 = add <8 x i16> %138, %84
  %145 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %145, align 1
  %146 = getelementptr inbounds i16, i16* %125, i64 224
  %147 = add <8 x i16> %141, %84
  %148 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %125, i64 256
  %150 = add nsw i32 %122, 8
  %151 = icmp slt i32 %122, 0
  br i1 %151, label %121, label %152

152:                                              ; preds = %113, %121, %11, %90
  %153 = phi <8 x i16> [ %71, %90 ], [ %27, %11 ], [ %118, %113 ], [ %144, %121 ]
  %154 = phi <8 x i16> [ %87, %90 ], [ %38, %11 ], [ %119, %113 ], [ %147, %121 ]
  %155 = shufflevector <8 x i16> %153, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %156 = shufflevector <8 x i16> %153, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %157 = zext <4 x i16> %156 to <4 x i32>
  %158 = bitcast <8 x i16> %155 to <4 x i32>
  %159 = add <4 x i32> %157, %158
  %160 = shufflevector <8 x i16> %154, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = bitcast <8 x i16> %160 to <4 x i32>
  %162 = add <4 x i32> %159, %161
  %163 = shufflevector <8 x i16> %154, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = add <4 x i32> %162, %164
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = add <4 x i32> %165, %168
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = add <4 x i32> %169, <i32 32, i32 32, i32 32, i32 32>
  %174 = add <4 x i32> %173, %172
  %175 = lshr <4 x i32> %174, <i32 6, i32 6, i32 6, i32 6>
  %176 = bitcast <4 x i32> %175 to <16 x i8>
  %177 = shufflevector <16 x i8> %176, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %178 = bitcast <16 x i8> %177 to <8 x i16>
  %179 = bitcast [32 x i16]* %0 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 1
  %181 = sub <8 x i16> %180, %178
  store <8 x i16> %181, <8 x i16>* %179, align 1
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 1
  %185 = sub <8 x i16> %184, %178
  store <8 x i16> %185, <8 x i16>* %183, align 1
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = sub <8 x i16> %188, %178
  store <8 x i16> %189, <8 x i16>* %187, align 1
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %178
  store <8 x i16> %193, <8 x i16>* %191, align 1
  %194 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = sub <8 x i16> %196, %178
  store <8 x i16> %197, <8 x i16>* %195, align 1
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 1
  %201 = sub <8 x i16> %200, %178
  store <8 x i16> %201, <8 x i16>* %199, align 1
  %202 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 1
  %205 = sub <8 x i16> %204, %178
  store <8 x i16> %205, <8 x i16>* %203, align 1
  %206 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 1
  %209 = sub <8 x i16> %208, %178
  store <8 x i16> %209, <8 x i16>* %207, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 15
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %41

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %3, %9 ], [ %31, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %37, %11 ]
  %14 = phi <8 x i16> [ zeroinitializer, %9 ], [ %27, %11 ]
  %15 = phi <8 x i16> [ zeroinitializer, %9 ], [ %38, %11 ]
  %16 = phi i32 [ 0, %9 ], [ %39, %11 ]
  %17 = bitcast i8* %12 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = getelementptr inbounds i8, i8* %12, i64 %4
  %21 = bitcast <2 x i64> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 1
  %26 = getelementptr inbounds i16, i16* %13, i64 32
  %27 = add <8 x i16> %24, %14
  %28 = bitcast i8* %20 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = getelementptr inbounds i8, i8* %20, i64 %4
  %32 = bitcast <2 x i64> %30 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %34 = zext <8 x i8> %33 to <8 x i16>
  %35 = shl nuw nsw <8 x i16> %34, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %36 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %13, i64 64
  %38 = add <8 x i16> %35, %15
  %39 = add nuw nsw i32 %16, 2
  %40 = icmp slt i32 %39, %2
  br i1 %40, label %11, label %152

41:                                               ; preds = %5
  %42 = sub i32 16, %1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %48 = add nsw i32 %1, -1
  %49 = sext i32 %48 to i64
  br label %50

50:                                               ; preds = %50, %41
  %51 = phi i8* [ %3, %41 ], [ %81, %50 ]
  %52 = phi i16* [ %47, %41 ], [ %86, %50 ]
  %53 = phi <8 x i16> [ zeroinitializer, %41 ], [ %71, %50 ]
  %54 = phi <8 x i16> [ zeroinitializer, %41 ], [ %87, %50 ]
  %55 = phi i32 [ 0, %41 ], [ %88, %50 ]
  %56 = bitcast i8* %51 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = getelementptr inbounds i8, i8* %51, i64 %49
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <16 x i8> undef, i8 %60, i32 0
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> zeroinitializer
  %63 = bitcast <2 x i64> %58 to <16 x i8>
  %64 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %63, <16 x i8> %62, <16 x i8> %46) #6
  %65 = getelementptr inbounds i8, i8* %51, i64 %4
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %67 = zext <8 x i8> %66 to <8 x i16>
  %68 = shl nuw nsw <8 x i16> %67, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %69 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %52, i64 32
  %71 = add <8 x i16> %68, %53
  %72 = bitcast i8* %65 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %73, i32 0
  %75 = getelementptr inbounds i8, i8* %65, i64 %49
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> zeroinitializer
  %79 = bitcast <2 x i64> %74 to <16 x i8>
  %80 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %79, <16 x i8> %78, <16 x i8> %46) #6
  %81 = getelementptr inbounds i8, i8* %65, i64 %4
  %82 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = shl nuw nsw <8 x i16> %83, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %85 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 1
  %86 = getelementptr inbounds i16, i16* %52, i64 64
  %87 = add <8 x i16> %84, %54
  %88 = add nuw nsw i32 %55, 2
  %89 = icmp slt i32 %88, %2
  br i1 %89, label %50, label %90

90:                                               ; preds = %50
  %91 = icmp slt i32 %2, 16
  br i1 %91, label %92, label %152

92:                                               ; preds = %90
  %93 = sub i32 15, %2
  %94 = lshr i32 %93, 1
  %95 = add nuw i32 %94, 1
  %96 = and i32 %95, 3
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92, %98
  %99 = phi i32 [ %110, %98 ], [ %2, %92 ]
  %100 = phi <8 x i16> [ %107, %98 ], [ %87, %92 ]
  %101 = phi <8 x i16> [ %104, %98 ], [ %71, %92 ]
  %102 = phi i16* [ %109, %98 ], [ %86, %92 ]
  %103 = phi i32 [ %111, %98 ], [ %96, %92 ]
  %104 = add <8 x i16> %101, %84
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %105, align 1
  %106 = getelementptr inbounds i16, i16* %102, i64 32
  %107 = add <8 x i16> %100, %84
  %108 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %108, align 1
  %109 = getelementptr inbounds i16, i16* %102, i64 64
  %110 = add nsw i32 %99, 2
  %111 = add i32 %103, -1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %98, !llvm.loop !41

113:                                              ; preds = %98, %92
  %114 = phi i32 [ %2, %92 ], [ %110, %98 ]
  %115 = phi <8 x i16> [ %87, %92 ], [ %107, %98 ]
  %116 = phi <8 x i16> [ %71, %92 ], [ %104, %98 ]
  %117 = phi i16* [ %86, %92 ], [ %109, %98 ]
  %118 = phi <8 x i16> [ undef, %92 ], [ %104, %98 ]
  %119 = phi <8 x i16> [ undef, %92 ], [ %107, %98 ]
  %120 = icmp ult i32 %93, 6
  br i1 %120, label %152, label %121

121:                                              ; preds = %113, %121
  %122 = phi i32 [ %150, %121 ], [ %114, %113 ]
  %123 = phi <8 x i16> [ %147, %121 ], [ %115, %113 ]
  %124 = phi <8 x i16> [ %144, %121 ], [ %116, %113 ]
  %125 = phi i16* [ %149, %121 ], [ %117, %113 ]
  %126 = add <8 x i16> %124, %84
  %127 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %125, i64 32
  %129 = add <8 x i16> %123, %84
  %130 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %130, align 1
  %131 = getelementptr inbounds i16, i16* %125, i64 64
  %132 = add <8 x i16> %126, %84
  %133 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %125, i64 96
  %135 = add <8 x i16> %129, %84
  %136 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 128
  %138 = add <8 x i16> %132, %84
  %139 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %125, i64 160
  %141 = add <8 x i16> %135, %84
  %142 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %125, i64 192
  %144 = add <8 x i16> %138, %84
  %145 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %145, align 1
  %146 = getelementptr inbounds i16, i16* %125, i64 224
  %147 = add <8 x i16> %141, %84
  %148 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %125, i64 256
  %150 = add nsw i32 %122, 8
  %151 = icmp slt i32 %150, 16
  br i1 %151, label %121, label %152

152:                                              ; preds = %113, %121, %11, %90
  %153 = phi <8 x i16> [ %71, %90 ], [ %27, %11 ], [ %118, %113 ], [ %144, %121 ]
  %154 = phi <8 x i16> [ %87, %90 ], [ %38, %11 ], [ %119, %113 ], [ %147, %121 ]
  %155 = shufflevector <8 x i16> %153, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %156 = shufflevector <8 x i16> %153, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %157 = zext <4 x i16> %156 to <4 x i32>
  %158 = bitcast <8 x i16> %155 to <4 x i32>
  %159 = add <4 x i32> %157, %158
  %160 = shufflevector <8 x i16> %154, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = bitcast <8 x i16> %160 to <4 x i32>
  %162 = add <4 x i32> %159, %161
  %163 = shufflevector <8 x i16> %154, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = add <4 x i32> %162, %164
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = add <4 x i32> %165, %168
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = add <4 x i32> %169, <i32 64, i32 64, i32 64, i32 64>
  %174 = add <4 x i32> %173, %172
  %175 = lshr <4 x i32> %174, <i32 7, i32 7, i32 7, i32 7>
  %176 = bitcast <4 x i32> %175 to <16 x i8>
  %177 = shufflevector <16 x i8> %176, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %178 = bitcast <16 x i8> %177 to <8 x i16>
  %179 = bitcast [32 x i16]* %0 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 1
  %181 = sub <8 x i16> %180, %178
  store <8 x i16> %181, <8 x i16>* %179, align 1
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 1
  %185 = sub <8 x i16> %184, %178
  store <8 x i16> %185, <8 x i16>* %183, align 1
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = sub <8 x i16> %188, %178
  store <8 x i16> %189, <8 x i16>* %187, align 1
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %178
  store <8 x i16> %193, <8 x i16>* %191, align 1
  %194 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = sub <8 x i16> %196, %178
  store <8 x i16> %197, <8 x i16>* %195, align 1
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 1
  %201 = sub <8 x i16> %200, %178
  store <8 x i16> %201, <8 x i16>* %199, align 1
  %202 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 1
  %205 = sub <8 x i16> %204, %178
  store <8 x i16> %205, <8 x i16>* %203, align 1
  %206 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 1
  %209 = sub <8 x i16> %208, %178
  store <8 x i16> %209, <8 x i16>* %207, align 1
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 1
  %213 = sub <8 x i16> %212, %178
  store <8 x i16> %213, <8 x i16>* %211, align 1
  %214 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 1
  %217 = sub <8 x i16> %216, %178
  store <8 x i16> %217, <8 x i16>* %215, align 1
  %218 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 1
  %221 = sub <8 x i16> %220, %178
  store <8 x i16> %221, <8 x i16>* %219, align 1
  %222 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 1
  %225 = sub <8 x i16> %224, %178
  store <8 x i16> %225, <8 x i16>* %223, align 1
  %226 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 1
  %229 = sub <8 x i16> %228, %178
  store <8 x i16> %229, <8 x i16>* %227, align 1
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 1
  %233 = sub <8 x i16> %232, %178
  store <8 x i16> %233, <8 x i16>* %231, align 1
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 1
  %237 = sub <8 x i16> %236, %178
  store <8 x i16> %237, <8 x i16>* %235, align 1
  %238 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 1
  %241 = sub <8 x i16> %240, %178
  store <8 x i16> %241, <8 x i16>* %239, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi5EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 31
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %41

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %3, %9 ], [ %31, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %37, %11 ]
  %14 = phi <8 x i16> [ zeroinitializer, %9 ], [ %27, %11 ]
  %15 = phi <8 x i16> [ zeroinitializer, %9 ], [ %38, %11 ]
  %16 = phi i32 [ 0, %9 ], [ %39, %11 ]
  %17 = bitcast i8* %12 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = getelementptr inbounds i8, i8* %12, i64 %4
  %21 = bitcast <2 x i64> %19 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = zext <8 x i8> %22 to <8 x i16>
  %24 = shl nuw nsw <8 x i16> %23, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %25 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 1
  %26 = getelementptr inbounds i16, i16* %13, i64 32
  %27 = add <8 x i16> %24, %14
  %28 = bitcast i8* %20 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = getelementptr inbounds i8, i8* %20, i64 %4
  %32 = bitcast <2 x i64> %30 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %34 = zext <8 x i8> %33 to <8 x i16>
  %35 = shl nuw nsw <8 x i16> %34, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %36 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %13, i64 64
  %38 = add <8 x i16> %35, %15
  %39 = add nuw nsw i32 %16, 2
  %40 = icmp slt i32 %39, %2
  br i1 %40, label %11, label %152

41:                                               ; preds = %5
  %42 = sub i32 16, %1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %48 = add nsw i32 %1, -1
  %49 = sext i32 %48 to i64
  br label %50

50:                                               ; preds = %50, %41
  %51 = phi i8* [ %3, %41 ], [ %81, %50 ]
  %52 = phi i16* [ %47, %41 ], [ %86, %50 ]
  %53 = phi <8 x i16> [ zeroinitializer, %41 ], [ %71, %50 ]
  %54 = phi <8 x i16> [ zeroinitializer, %41 ], [ %87, %50 ]
  %55 = phi i32 [ 0, %41 ], [ %88, %50 ]
  %56 = bitcast i8* %51 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = getelementptr inbounds i8, i8* %51, i64 %49
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <16 x i8> undef, i8 %60, i32 0
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> zeroinitializer
  %63 = bitcast <2 x i64> %58 to <16 x i8>
  %64 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %63, <16 x i8> %62, <16 x i8> %46) #6
  %65 = getelementptr inbounds i8, i8* %51, i64 %4
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %67 = zext <8 x i8> %66 to <8 x i16>
  %68 = shl nuw nsw <8 x i16> %67, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %69 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %52, i64 32
  %71 = add <8 x i16> %68, %53
  %72 = bitcast i8* %65 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %73, i32 0
  %75 = getelementptr inbounds i8, i8* %65, i64 %49
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> zeroinitializer
  %79 = bitcast <2 x i64> %74 to <16 x i8>
  %80 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %79, <16 x i8> %78, <16 x i8> %46) #6
  %81 = getelementptr inbounds i8, i8* %65, i64 %4
  %82 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = zext <8 x i8> %82 to <8 x i16>
  %84 = shl nuw nsw <8 x i16> %83, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %85 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 1
  %86 = getelementptr inbounds i16, i16* %52, i64 64
  %87 = add <8 x i16> %84, %54
  %88 = add nuw nsw i32 %55, 2
  %89 = icmp slt i32 %88, %2
  br i1 %89, label %50, label %90

90:                                               ; preds = %50
  %91 = icmp slt i32 %2, 32
  br i1 %91, label %92, label %152

92:                                               ; preds = %90
  %93 = sub i32 31, %2
  %94 = lshr i32 %93, 1
  %95 = add nuw i32 %94, 1
  %96 = and i32 %95, 3
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92, %98
  %99 = phi i32 [ %110, %98 ], [ %2, %92 ]
  %100 = phi <8 x i16> [ %107, %98 ], [ %87, %92 ]
  %101 = phi <8 x i16> [ %104, %98 ], [ %71, %92 ]
  %102 = phi i16* [ %109, %98 ], [ %86, %92 ]
  %103 = phi i32 [ %111, %98 ], [ %96, %92 ]
  %104 = add <8 x i16> %101, %84
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %105, align 1
  %106 = getelementptr inbounds i16, i16* %102, i64 32
  %107 = add <8 x i16> %100, %84
  %108 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %108, align 1
  %109 = getelementptr inbounds i16, i16* %102, i64 64
  %110 = add nsw i32 %99, 2
  %111 = add i32 %103, -1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %98, !llvm.loop !42

113:                                              ; preds = %98, %92
  %114 = phi i32 [ %2, %92 ], [ %110, %98 ]
  %115 = phi <8 x i16> [ %87, %92 ], [ %107, %98 ]
  %116 = phi <8 x i16> [ %71, %92 ], [ %104, %98 ]
  %117 = phi i16* [ %86, %92 ], [ %109, %98 ]
  %118 = phi <8 x i16> [ undef, %92 ], [ %104, %98 ]
  %119 = phi <8 x i16> [ undef, %92 ], [ %107, %98 ]
  %120 = icmp ult i32 %93, 6
  br i1 %120, label %152, label %121

121:                                              ; preds = %113, %121
  %122 = phi i32 [ %150, %121 ], [ %114, %113 ]
  %123 = phi <8 x i16> [ %147, %121 ], [ %115, %113 ]
  %124 = phi <8 x i16> [ %144, %121 ], [ %116, %113 ]
  %125 = phi i16* [ %149, %121 ], [ %117, %113 ]
  %126 = add <8 x i16> %124, %84
  %127 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %125, i64 32
  %129 = add <8 x i16> %123, %84
  %130 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %130, align 1
  %131 = getelementptr inbounds i16, i16* %125, i64 64
  %132 = add <8 x i16> %126, %84
  %133 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %125, i64 96
  %135 = add <8 x i16> %129, %84
  %136 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 128
  %138 = add <8 x i16> %132, %84
  %139 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %125, i64 160
  %141 = add <8 x i16> %135, %84
  %142 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %125, i64 192
  %144 = add <8 x i16> %138, %84
  %145 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %145, align 1
  %146 = getelementptr inbounds i16, i16* %125, i64 224
  %147 = add <8 x i16> %141, %84
  %148 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %125, i64 256
  %150 = add nsw i32 %122, 8
  %151 = icmp slt i32 %150, 32
  br i1 %151, label %121, label %152

152:                                              ; preds = %113, %121, %11, %90
  %153 = phi <8 x i16> [ %71, %90 ], [ %27, %11 ], [ %118, %113 ], [ %144, %121 ]
  %154 = phi <8 x i16> [ %87, %90 ], [ %38, %11 ], [ %119, %113 ], [ %147, %121 ]
  %155 = shufflevector <8 x i16> %153, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %156 = shufflevector <8 x i16> %153, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %157 = zext <4 x i16> %156 to <4 x i32>
  %158 = bitcast <8 x i16> %155 to <4 x i32>
  %159 = add <4 x i32> %157, %158
  %160 = shufflevector <8 x i16> %154, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = bitcast <8 x i16> %160 to <4 x i32>
  %162 = add <4 x i32> %159, %161
  %163 = shufflevector <8 x i16> %154, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = add <4 x i32> %162, %164
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = add <4 x i32> %165, %168
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %172 = bitcast <16 x i8> %171 to <4 x i32>
  %173 = add <4 x i32> %169, <i32 128, i32 128, i32 128, i32 128>
  %174 = add <4 x i32> %173, %172
  %175 = lshr <4 x i32> %174, <i32 8, i32 8, i32 8, i32 8>
  %176 = bitcast <4 x i32> %175 to <16 x i8>
  %177 = shufflevector <16 x i8> %176, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %178 = bitcast <16 x i8> %177 to <8 x i16>
  %179 = bitcast [32 x i16]* %0 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 1
  %181 = sub <8 x i16> %180, %178
  store <8 x i16> %181, <8 x i16>* %179, align 1
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 1
  %185 = sub <8 x i16> %184, %178
  store <8 x i16> %185, <8 x i16>* %183, align 1
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = sub <8 x i16> %188, %178
  store <8 x i16> %189, <8 x i16>* %187, align 1
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %178
  store <8 x i16> %193, <8 x i16>* %191, align 1
  %194 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = sub <8 x i16> %196, %178
  store <8 x i16> %197, <8 x i16>* %195, align 1
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 1
  %201 = sub <8 x i16> %200, %178
  store <8 x i16> %201, <8 x i16>* %199, align 1
  %202 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 1
  %205 = sub <8 x i16> %204, %178
  store <8 x i16> %205, <8 x i16>* %203, align 1
  %206 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 1
  %209 = sub <8 x i16> %208, %178
  store <8 x i16> %209, <8 x i16>* %207, align 1
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 1
  %213 = sub <8 x i16> %212, %178
  store <8 x i16> %213, <8 x i16>* %211, align 1
  %214 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 1
  %217 = sub <8 x i16> %216, %178
  store <8 x i16> %217, <8 x i16>* %215, align 1
  %218 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 1
  %221 = sub <8 x i16> %220, %178
  store <8 x i16> %221, <8 x i16>* %219, align 1
  %222 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 1
  %225 = sub <8 x i16> %224, %178
  store <8 x i16> %225, <8 x i16>* %223, align 1
  %226 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 1
  %229 = sub <8 x i16> %228, %178
  store <8 x i16> %229, <8 x i16>* %227, align 1
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 1
  %233 = sub <8 x i16> %232, %178
  store <8 x i16> %233, <8 x i16>* %231, align 1
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 1
  %237 = sub <8 x i16> %236, %178
  store <8 x i16> %237, <8 x i16>* %235, align 1
  %238 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 1
  %241 = sub <8 x i16> %240, %178
  store <8 x i16> %241, <8 x i16>* %239, align 1
  %242 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 512
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 1
  %245 = sub <8 x i16> %244, %178
  store <8 x i16> %245, <8 x i16>* %243, align 1
  %246 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 544
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 1
  %249 = sub <8 x i16> %248, %178
  store <8 x i16> %249, <8 x i16>* %247, align 1
  %250 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 576
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 1
  %253 = sub <8 x i16> %252, %178
  store <8 x i16> %253, <8 x i16>* %251, align 1
  %254 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 608
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 1
  %257 = sub <8 x i16> %256, %178
  store <8 x i16> %257, <8 x i16>* %255, align 1
  %258 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 640
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = sub <8 x i16> %260, %178
  store <8 x i16> %261, <8 x i16>* %259, align 1
  %262 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 672
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 1
  %265 = sub <8 x i16> %264, %178
  store <8 x i16> %265, <8 x i16>* %263, align 1
  %266 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 704
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 1
  %269 = sub <8 x i16> %268, %178
  store <8 x i16> %269, <8 x i16>* %267, align 1
  %270 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 736
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 1
  %273 = sub <8 x i16> %272, %178
  store <8 x i16> %273, <8 x i16>* %271, align 1
  %274 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 768
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 1
  %277 = sub <8 x i16> %276, %178
  store <8 x i16> %277, <8 x i16>* %275, align 1
  %278 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 800
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 1
  %281 = sub <8 x i16> %280, %178
  store <8 x i16> %281, <8 x i16>* %279, align 1
  %282 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 832
  %283 = bitcast i16* %282 to <8 x i16>*
  %284 = load <8 x i16>, <8 x i16>* %283, align 1
  %285 = sub <8 x i16> %284, %178
  store <8 x i16> %285, <8 x i16>* %283, align 1
  %286 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 864
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 1
  %289 = sub <8 x i16> %288, %178
  store <8 x i16> %289, <8 x i16>* %287, align 1
  %290 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 896
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 1
  %293 = sub <8 x i16> %292, %178
  store <8 x i16> %293, <8 x i16>* %291, align 1
  %294 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 928
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 1
  %297 = sub <8 x i16> %296, %178
  store <8 x i16> %297, <8 x i16>* %295, align 1
  %298 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 960
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 1
  %301 = sub <8 x i16> %300, %178
  store <8 x i16> %301, <8 x i16>* %299, align 1
  %302 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 992
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 1
  %305 = sub <8 x i16> %304, %178
  store <8 x i16> %305, <8 x i16>* %303, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 15
  %7 = icmp sgt i32 %2, 3
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %38

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi <4 x i32> [ zeroinitializer, %9 ], [ %33, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %34, %11 ]
  %14 = phi i8* [ %3, %9 ], [ %35, %11 ]
  %15 = phi i32 [ 0, %9 ], [ %36, %11 ]
  %16 = bitcast i8* %14 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %13, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = shufflevector <8 x i16> %27, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %31 = add <4 x i32> %12, %29
  %32 = bitcast <8 x i16> %30 to <4 x i32>
  %33 = add <4 x i32> %31, %32
  %34 = getelementptr inbounds i16, i16* %13, i64 32
  %35 = getelementptr inbounds i8, i8* %14, i64 %4
  %36 = add nuw nsw i32 %15, 1
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %133, label %11

38:                                               ; preds = %5
  %39 = icmp slt i32 %1, 16
  %40 = select i1 %39, i32 %1, i32 16
  %41 = sub nsw i32 16, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %42
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %47 = add nsw i32 %40, -1
  %48 = sext i32 %47 to i64
  br label %49

49:                                               ; preds = %49, %38
  %50 = phi i8* [ %3, %38 ], [ %78, %49 ]
  %51 = phi i16* [ %46, %38 ], [ %77, %49 ]
  %52 = phi <4 x i32> [ zeroinitializer, %38 ], [ %76, %49 ]
  %53 = phi i32 [ 0, %38 ], [ %79, %49 ]
  %54 = bitcast i8* %50 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = getelementptr inbounds i8, i8* %50, i64 %48
  %57 = load i8, i8* %56, align 1
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %55, <16 x i8> %59, <16 x i8> %45) #6
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %62 = zext <8 x i8> %61 to <8 x i16>
  %63 = shl nuw nsw <8 x i16> %62, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %64 = shufflevector <16 x i8> %60, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = shl <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %67 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %67, align 1
  %68 = getelementptr inbounds i16, i16* %51, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %69, align 1
  %70 = add <8 x i16> %66, %63
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = shufflevector <8 x i16> %70, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %74 = bitcast <8 x i16> %73 to <4 x i32>
  %75 = add <4 x i32> %74, %72
  %76 = add <4 x i32> %75, %52
  %77 = getelementptr inbounds i16, i16* %51, i64 32
  %78 = getelementptr inbounds i8, i8* %50, i64 %4
  %79 = add nuw nsw i32 %53, 1
  %80 = icmp slt i32 %79, %2
  br i1 %80, label %49, label %81

81:                                               ; preds = %49
  %82 = icmp slt i32 %2, 4
  br i1 %82, label %83, label %133

83:                                               ; preds = %81
  %84 = sub i32 0, %2
  %85 = sub i32 3, %2
  %86 = and i32 %84, 3
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %101, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32 [ %98, %88 ], [ %2, %83 ]
  %90 = phi <4 x i32> [ %94, %88 ], [ %76, %83 ]
  %91 = phi i16* [ %97, %88 ], [ %77, %83 ]
  %92 = phi i32 [ %99, %88 ], [ %86, %83 ]
  %93 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %93, align 1
  %94 = add <4 x i32> %90, %75
  %95 = getelementptr inbounds i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %96, align 1
  %97 = getelementptr inbounds i16, i16* %91, i64 32
  %98 = add nsw i32 %89, 1
  %99 = add i32 %92, -1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %88, !llvm.loop !43

101:                                              ; preds = %88, %83
  %102 = phi <4 x i32> [ undef, %83 ], [ %94, %88 ]
  %103 = phi i32 [ %2, %83 ], [ %98, %88 ]
  %104 = phi <4 x i32> [ %76, %83 ], [ %94, %88 ]
  %105 = phi i16* [ %77, %83 ], [ %97, %88 ]
  %106 = icmp ult i32 %85, 3
  br i1 %106, label %133, label %107

107:                                              ; preds = %101, %107
  %108 = phi i32 [ %131, %107 ], [ %103, %101 ]
  %109 = phi <4 x i32> [ %127, %107 ], [ %104, %101 ]
  %110 = phi i16* [ %130, %107 ], [ %105, %101 ]
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %111, align 1
  %112 = add <4 x i32> %109, %75
  %113 = getelementptr inbounds i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %114, align 1
  %115 = getelementptr inbounds i16, i16* %110, i64 32
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %116, align 1
  %117 = add <4 x i32> %112, %75
  %118 = getelementptr inbounds i16, i16* %110, i64 40
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %119, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 64
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %121, align 1
  %122 = add <4 x i32> %117, %75
  %123 = getelementptr inbounds i16, i16* %110, i64 72
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %110, i64 96
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %126, align 1
  %127 = add <4 x i32> %122, %75
  %128 = getelementptr inbounds i16, i16* %110, i64 104
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i16, i16* %110, i64 128
  %131 = add nsw i32 %108, 4
  %132 = icmp eq i32 %108, 0
  br i1 %132, label %133, label %107

133:                                              ; preds = %101, %107, %11, %81
  %134 = phi <4 x i32> [ %76, %81 ], [ %33, %11 ], [ %102, %101 ], [ %127, %107 ]
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %141 = bitcast <16 x i8> %140 to <4 x i32>
  %142 = add <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %143 = add <4 x i32> %142, %141
  %144 = lshr <4 x i32> %143, <i32 6, i32 6, i32 6, i32 6>
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = bitcast [32 x i16]* %0 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 1
  %150 = sub <8 x i16> %149, %147
  store <8 x i16> %150, <8 x i16>* %148, align 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 1
  %154 = sub <8 x i16> %153, %147
  store <8 x i16> %154, <8 x i16>* %152, align 1
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = sub <8 x i16> %157, %147
  store <8 x i16> %158, <8 x i16>* %156, align 1
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = sub <8 x i16> %161, %147
  store <8 x i16> %162, <8 x i16>* %160, align 1
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = sub <8 x i16> %165, %147
  store <8 x i16> %166, <8 x i16>* %164, align 1
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 1
  %170 = sub <8 x i16> %169, %147
  store <8 x i16> %170, <8 x i16>* %168, align 1
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = sub <8 x i16> %173, %147
  store <8 x i16> %174, <8 x i16>* %172, align 1
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 1
  %178 = sub <8 x i16> %177, %147
  store <8 x i16> %178, <8 x i16>* %176, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi3EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 15
  %7 = icmp sgt i32 %2, 7
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %38

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi <4 x i32> [ zeroinitializer, %9 ], [ %33, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %34, %11 ]
  %14 = phi i8* [ %3, %9 ], [ %35, %11 ]
  %15 = phi i32 [ 0, %9 ], [ %36, %11 ]
  %16 = bitcast i8* %14 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %13, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = shufflevector <8 x i16> %27, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %31 = add <4 x i32> %12, %29
  %32 = bitcast <8 x i16> %30 to <4 x i32>
  %33 = add <4 x i32> %31, %32
  %34 = getelementptr inbounds i16, i16* %13, i64 32
  %35 = getelementptr inbounds i8, i8* %14, i64 %4
  %36 = add nuw nsw i32 %15, 1
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %133, label %11

38:                                               ; preds = %5
  %39 = icmp slt i32 %1, 16
  %40 = select i1 %39, i32 %1, i32 16
  %41 = sub nsw i32 16, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %42
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %47 = add nsw i32 %40, -1
  %48 = sext i32 %47 to i64
  br label %49

49:                                               ; preds = %49, %38
  %50 = phi i8* [ %3, %38 ], [ %78, %49 ]
  %51 = phi i16* [ %46, %38 ], [ %77, %49 ]
  %52 = phi <4 x i32> [ zeroinitializer, %38 ], [ %76, %49 ]
  %53 = phi i32 [ 0, %38 ], [ %79, %49 ]
  %54 = bitcast i8* %50 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = getelementptr inbounds i8, i8* %50, i64 %48
  %57 = load i8, i8* %56, align 1
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %55, <16 x i8> %59, <16 x i8> %45) #6
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %62 = zext <8 x i8> %61 to <8 x i16>
  %63 = shl nuw nsw <8 x i16> %62, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %64 = shufflevector <16 x i8> %60, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = shl <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %67 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %67, align 1
  %68 = getelementptr inbounds i16, i16* %51, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %69, align 1
  %70 = add <8 x i16> %66, %63
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = shufflevector <8 x i16> %70, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %74 = bitcast <8 x i16> %73 to <4 x i32>
  %75 = add <4 x i32> %74, %72
  %76 = add <4 x i32> %75, %52
  %77 = getelementptr inbounds i16, i16* %51, i64 32
  %78 = getelementptr inbounds i8, i8* %50, i64 %4
  %79 = add nuw nsw i32 %53, 1
  %80 = icmp slt i32 %79, %2
  br i1 %80, label %49, label %81

81:                                               ; preds = %49
  %82 = icmp slt i32 %2, 8
  br i1 %82, label %83, label %133

83:                                               ; preds = %81
  %84 = sub i32 0, %2
  %85 = sub i32 7, %2
  %86 = and i32 %84, 3
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %101, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32 [ %98, %88 ], [ %2, %83 ]
  %90 = phi <4 x i32> [ %94, %88 ], [ %76, %83 ]
  %91 = phi i16* [ %97, %88 ], [ %77, %83 ]
  %92 = phi i32 [ %99, %88 ], [ %86, %83 ]
  %93 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %93, align 1
  %94 = add <4 x i32> %90, %75
  %95 = getelementptr inbounds i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %96, align 1
  %97 = getelementptr inbounds i16, i16* %91, i64 32
  %98 = add nsw i32 %89, 1
  %99 = add i32 %92, -1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %88, !llvm.loop !44

101:                                              ; preds = %88, %83
  %102 = phi <4 x i32> [ undef, %83 ], [ %94, %88 ]
  %103 = phi i32 [ %2, %83 ], [ %98, %88 ]
  %104 = phi <4 x i32> [ %76, %83 ], [ %94, %88 ]
  %105 = phi i16* [ %77, %83 ], [ %97, %88 ]
  %106 = icmp ult i32 %85, 3
  br i1 %106, label %133, label %107

107:                                              ; preds = %101, %107
  %108 = phi i32 [ %131, %107 ], [ %103, %101 ]
  %109 = phi <4 x i32> [ %127, %107 ], [ %104, %101 ]
  %110 = phi i16* [ %130, %107 ], [ %105, %101 ]
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %111, align 1
  %112 = add <4 x i32> %109, %75
  %113 = getelementptr inbounds i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %114, align 1
  %115 = getelementptr inbounds i16, i16* %110, i64 32
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %116, align 1
  %117 = add <4 x i32> %112, %75
  %118 = getelementptr inbounds i16, i16* %110, i64 40
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %119, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 64
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %121, align 1
  %122 = add <4 x i32> %117, %75
  %123 = getelementptr inbounds i16, i16* %110, i64 72
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %110, i64 96
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %126, align 1
  %127 = add <4 x i32> %122, %75
  %128 = getelementptr inbounds i16, i16* %110, i64 104
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i16, i16* %110, i64 128
  %131 = add nsw i32 %108, 4
  %132 = icmp eq i32 %131, 8
  br i1 %132, label %133, label %107

133:                                              ; preds = %101, %107, %11, %81
  %134 = phi <4 x i32> [ %76, %81 ], [ %33, %11 ], [ %102, %101 ], [ %127, %107 ]
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %141 = bitcast <16 x i8> %140 to <4 x i32>
  %142 = add <4 x i32> %138, <i32 64, i32 64, i32 64, i32 64>
  %143 = add <4 x i32> %142, %141
  %144 = lshr <4 x i32> %143, <i32 7, i32 7, i32 7, i32 7>
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = bitcast [32 x i16]* %0 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 1
  %150 = sub <8 x i16> %149, %147
  store <8 x i16> %150, <8 x i16>* %148, align 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 1
  %154 = sub <8 x i16> %153, %147
  store <8 x i16> %154, <8 x i16>* %152, align 1
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = sub <8 x i16> %157, %147
  store <8 x i16> %158, <8 x i16>* %156, align 1
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = sub <8 x i16> %161, %147
  store <8 x i16> %162, <8 x i16>* %160, align 1
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = sub <8 x i16> %165, %147
  store <8 x i16> %166, <8 x i16>* %164, align 1
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 1
  %170 = sub <8 x i16> %169, %147
  store <8 x i16> %170, <8 x i16>* %168, align 1
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = sub <8 x i16> %173, %147
  store <8 x i16> %174, <8 x i16>* %172, align 1
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 1
  %178 = sub <8 x i16> %177, %147
  store <8 x i16> %178, <8 x i16>* %176, align 1
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 1
  %182 = sub <8 x i16> %181, %147
  store <8 x i16> %182, <8 x i16>* %180, align 1
  %183 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 1
  %186 = sub <8 x i16> %185, %147
  store <8 x i16> %186, <8 x i16>* %184, align 1
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = sub <8 x i16> %189, %147
  store <8 x i16> %190, <8 x i16>* %188, align 1
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 1
  %194 = sub <8 x i16> %193, %147
  store <8 x i16> %194, <8 x i16>* %192, align 1
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 1
  %198 = sub <8 x i16> %197, %147
  store <8 x i16> %198, <8 x i16>* %196, align 1
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 1
  %202 = sub <8 x i16> %201, %147
  store <8 x i16> %202, <8 x i16>* %200, align 1
  %203 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %204 = bitcast i16* %203 to <8 x i16>*
  %205 = load <8 x i16>, <8 x i16>* %204, align 1
  %206 = sub <8 x i16> %205, %147
  store <8 x i16> %206, <8 x i16>* %204, align 1
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 1
  %210 = sub <8 x i16> %209, %147
  store <8 x i16> %210, <8 x i16>* %208, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 15
  %7 = icmp sgt i32 %2, 15
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %38

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi <4 x i32> [ zeroinitializer, %9 ], [ %33, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %34, %11 ]
  %14 = phi i8* [ %3, %9 ], [ %35, %11 ]
  %15 = phi i32 [ 0, %9 ], [ %36, %11 ]
  %16 = bitcast i8* %14 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %13, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = shufflevector <8 x i16> %27, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %31 = add <4 x i32> %12, %29
  %32 = bitcast <8 x i16> %30 to <4 x i32>
  %33 = add <4 x i32> %31, %32
  %34 = getelementptr inbounds i16, i16* %13, i64 32
  %35 = getelementptr inbounds i8, i8* %14, i64 %4
  %36 = add nuw nsw i32 %15, 1
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %133, label %11

38:                                               ; preds = %5
  %39 = icmp slt i32 %1, 16
  %40 = select i1 %39, i32 %1, i32 16
  %41 = sub nsw i32 16, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %42
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %47 = add nsw i32 %40, -1
  %48 = sext i32 %47 to i64
  br label %49

49:                                               ; preds = %49, %38
  %50 = phi i8* [ %3, %38 ], [ %78, %49 ]
  %51 = phi i16* [ %46, %38 ], [ %77, %49 ]
  %52 = phi <4 x i32> [ zeroinitializer, %38 ], [ %76, %49 ]
  %53 = phi i32 [ 0, %38 ], [ %79, %49 ]
  %54 = bitcast i8* %50 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = getelementptr inbounds i8, i8* %50, i64 %48
  %57 = load i8, i8* %56, align 1
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %55, <16 x i8> %59, <16 x i8> %45) #6
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %62 = zext <8 x i8> %61 to <8 x i16>
  %63 = shl nuw nsw <8 x i16> %62, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %64 = shufflevector <16 x i8> %60, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = shl <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %67 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %67, align 1
  %68 = getelementptr inbounds i16, i16* %51, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %69, align 1
  %70 = add <8 x i16> %66, %63
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = shufflevector <8 x i16> %70, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %74 = bitcast <8 x i16> %73 to <4 x i32>
  %75 = add <4 x i32> %74, %72
  %76 = add <4 x i32> %75, %52
  %77 = getelementptr inbounds i16, i16* %51, i64 32
  %78 = getelementptr inbounds i8, i8* %50, i64 %4
  %79 = add nuw nsw i32 %53, 1
  %80 = icmp slt i32 %79, %2
  br i1 %80, label %49, label %81

81:                                               ; preds = %49
  %82 = icmp slt i32 %2, 16
  br i1 %82, label %83, label %133

83:                                               ; preds = %81
  %84 = sub i32 0, %2
  %85 = sub i32 15, %2
  %86 = and i32 %84, 3
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %101, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32 [ %98, %88 ], [ %2, %83 ]
  %90 = phi <4 x i32> [ %94, %88 ], [ %76, %83 ]
  %91 = phi i16* [ %97, %88 ], [ %77, %83 ]
  %92 = phi i32 [ %99, %88 ], [ %86, %83 ]
  %93 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %93, align 1
  %94 = add <4 x i32> %90, %75
  %95 = getelementptr inbounds i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %96, align 1
  %97 = getelementptr inbounds i16, i16* %91, i64 32
  %98 = add nsw i32 %89, 1
  %99 = add i32 %92, -1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %88, !llvm.loop !45

101:                                              ; preds = %88, %83
  %102 = phi <4 x i32> [ undef, %83 ], [ %94, %88 ]
  %103 = phi i32 [ %2, %83 ], [ %98, %88 ]
  %104 = phi <4 x i32> [ %76, %83 ], [ %94, %88 ]
  %105 = phi i16* [ %77, %83 ], [ %97, %88 ]
  %106 = icmp ult i32 %85, 3
  br i1 %106, label %133, label %107

107:                                              ; preds = %101, %107
  %108 = phi i32 [ %131, %107 ], [ %103, %101 ]
  %109 = phi <4 x i32> [ %127, %107 ], [ %104, %101 ]
  %110 = phi i16* [ %130, %107 ], [ %105, %101 ]
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %111, align 1
  %112 = add <4 x i32> %109, %75
  %113 = getelementptr inbounds i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %114, align 1
  %115 = getelementptr inbounds i16, i16* %110, i64 32
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %116, align 1
  %117 = add <4 x i32> %112, %75
  %118 = getelementptr inbounds i16, i16* %110, i64 40
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %119, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 64
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %121, align 1
  %122 = add <4 x i32> %117, %75
  %123 = getelementptr inbounds i16, i16* %110, i64 72
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %110, i64 96
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %126, align 1
  %127 = add <4 x i32> %122, %75
  %128 = getelementptr inbounds i16, i16* %110, i64 104
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i16, i16* %110, i64 128
  %131 = add nsw i32 %108, 4
  %132 = icmp eq i32 %131, 16
  br i1 %132, label %133, label %107

133:                                              ; preds = %101, %107, %11, %81
  %134 = phi <4 x i32> [ %76, %81 ], [ %33, %11 ], [ %102, %101 ], [ %127, %107 ]
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %141 = bitcast <16 x i8> %140 to <4 x i32>
  %142 = add <4 x i32> %138, <i32 128, i32 128, i32 128, i32 128>
  %143 = add <4 x i32> %142, %141
  %144 = lshr <4 x i32> %143, <i32 8, i32 8, i32 8, i32 8>
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = bitcast [32 x i16]* %0 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 1
  %150 = sub <8 x i16> %149, %147
  store <8 x i16> %150, <8 x i16>* %148, align 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 1
  %154 = sub <8 x i16> %153, %147
  store <8 x i16> %154, <8 x i16>* %152, align 1
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = sub <8 x i16> %157, %147
  store <8 x i16> %158, <8 x i16>* %156, align 1
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = sub <8 x i16> %161, %147
  store <8 x i16> %162, <8 x i16>* %160, align 1
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = sub <8 x i16> %165, %147
  store <8 x i16> %166, <8 x i16>* %164, align 1
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 1
  %170 = sub <8 x i16> %169, %147
  store <8 x i16> %170, <8 x i16>* %168, align 1
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = sub <8 x i16> %173, %147
  store <8 x i16> %174, <8 x i16>* %172, align 1
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 1
  %178 = sub <8 x i16> %177, %147
  store <8 x i16> %178, <8 x i16>* %176, align 1
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 1
  %182 = sub <8 x i16> %181, %147
  store <8 x i16> %182, <8 x i16>* %180, align 1
  %183 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 1
  %186 = sub <8 x i16> %185, %147
  store <8 x i16> %186, <8 x i16>* %184, align 1
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = sub <8 x i16> %189, %147
  store <8 x i16> %190, <8 x i16>* %188, align 1
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 1
  %194 = sub <8 x i16> %193, %147
  store <8 x i16> %194, <8 x i16>* %192, align 1
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 1
  %198 = sub <8 x i16> %197, %147
  store <8 x i16> %198, <8 x i16>* %196, align 1
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 1
  %202 = sub <8 x i16> %201, %147
  store <8 x i16> %202, <8 x i16>* %200, align 1
  %203 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %204 = bitcast i16* %203 to <8 x i16>*
  %205 = load <8 x i16>, <8 x i16>* %204, align 1
  %206 = sub <8 x i16> %205, %147
  store <8 x i16> %206, <8 x i16>* %204, align 1
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 1
  %210 = sub <8 x i16> %209, %147
  store <8 x i16> %210, <8 x i16>* %208, align 1
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 1
  %214 = sub <8 x i16> %213, %147
  store <8 x i16> %214, <8 x i16>* %212, align 1
  %215 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 264
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 1
  %218 = sub <8 x i16> %217, %147
  store <8 x i16> %218, <8 x i16>* %216, align 1
  %219 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 1
  %222 = sub <8 x i16> %221, %147
  store <8 x i16> %222, <8 x i16>* %220, align 1
  %223 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 296
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 1
  %226 = sub <8 x i16> %225, %147
  store <8 x i16> %226, <8 x i16>* %224, align 1
  %227 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = sub <8 x i16> %229, %147
  store <8 x i16> %230, <8 x i16>* %228, align 1
  %231 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 328
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = sub <8 x i16> %233, %147
  store <8 x i16> %234, <8 x i16>* %232, align 1
  %235 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = sub <8 x i16> %237, %147
  store <8 x i16> %238, <8 x i16>* %236, align 1
  %239 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 360
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 1
  %242 = sub <8 x i16> %241, %147
  store <8 x i16> %242, <8 x i16>* %240, align 1
  %243 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = sub <8 x i16> %245, %147
  store <8 x i16> %246, <8 x i16>* %244, align 1
  %247 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 392
  %248 = bitcast i16* %247 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 1
  %250 = sub <8 x i16> %249, %147
  store <8 x i16> %250, <8 x i16>* %248, align 1
  %251 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 1
  %254 = sub <8 x i16> %253, %147
  store <8 x i16> %254, <8 x i16>* %252, align 1
  %255 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 424
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = sub <8 x i16> %257, %147
  store <8 x i16> %258, <8 x i16>* %256, align 1
  %259 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 1
  %262 = sub <8 x i16> %261, %147
  store <8 x i16> %262, <8 x i16>* %260, align 1
  %263 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 456
  %264 = bitcast i16* %263 to <8 x i16>*
  %265 = load <8 x i16>, <8 x i16>* %264, align 1
  %266 = sub <8 x i16> %265, %147
  store <8 x i16> %266, <8 x i16>* %264, align 1
  %267 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 1
  %270 = sub <8 x i16> %269, %147
  store <8 x i16> %270, <8 x i16>* %268, align 1
  %271 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 488
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = sub <8 x i16> %273, %147
  store <8 x i16> %274, <8 x i16>* %272, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi4ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 15
  %7 = icmp sgt i32 %2, 31
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %73

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi <4 x i32> [ zeroinitializer, %9 ], [ %33, %11 ]
  %13 = phi i16* [ %10, %9 ], [ %34, %11 ]
  %14 = phi i8* [ %3, %9 ], [ %35, %11 ]
  %15 = phi i32 [ 0, %9 ], [ %36, %11 ]
  %16 = bitcast i8* %14 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %13, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = shufflevector <8 x i16> %27, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %31 = add <4 x i32> %12, %29
  %32 = bitcast <8 x i16> %30 to <4 x i32>
  %33 = add <4 x i32> %31, %32
  %34 = getelementptr inbounds i16, i16* %13, i64 32
  %35 = getelementptr inbounds i8, i8* %14, i64 %4
  %36 = add nuw nsw i32 %15, 1
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %38, label %11

38:                                               ; preds = %11
  %39 = bitcast <4 x i32> %33 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = add <4 x i32> %33, %41
  %43 = bitcast <4 x i32> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %45 = bitcast <16 x i8> %44 to <4 x i32>
  %46 = add <4 x i32> %42, <i32 256, i32 256, i32 256, i32 256>
  %47 = add <4 x i32> %46, %45
  %48 = lshr <4 x i32> %47, <i32 9, i32 9, i32 9, i32 9>
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  br label %52

52:                                               ; preds = %52, %38
  %53 = phi i32 [ 0, %38 ], [ %70, %52 ]
  %54 = phi i16* [ %10, %38 ], [ %71, %52 ]
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 1
  %57 = sub <8 x i16> %56, %51
  store <8 x i16> %57, <8 x i16>* %55, align 1
  %58 = getelementptr inbounds i16, i16* %54, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 1
  %61 = sub <8 x i16> %60, %51
  store <8 x i16> %61, <8 x i16>* %59, align 1
  %62 = getelementptr inbounds i16, i16* %54, i64 32
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 1
  %65 = sub <8 x i16> %64, %51
  store <8 x i16> %65, <8 x i16>* %63, align 1
  %66 = getelementptr inbounds i16, i16* %54, i64 40
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = sub <8 x i16> %68, %51
  store <8 x i16> %69, <8 x i16>* %67, align 1
  %70 = add nuw nsw i32 %53, 2
  %71 = getelementptr inbounds i16, i16* %54, i64 64
  %72 = icmp eq i32 %70, 32
  br i1 %72, label %204, label %52

73:                                               ; preds = %5
  %74 = icmp slt i32 %1, 16
  %75 = select i1 %74, i32 %1, i32 16
  %76 = sub nsw i32 16, %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %82 = add nsw i32 %75, -1
  %83 = sext i32 %82 to i64
  br label %84

84:                                               ; preds = %84, %73
  %85 = phi i8* [ %3, %73 ], [ %113, %84 ]
  %86 = phi i16* [ %81, %73 ], [ %112, %84 ]
  %87 = phi <4 x i32> [ zeroinitializer, %73 ], [ %111, %84 ]
  %88 = phi i32 [ 0, %73 ], [ %114, %84 ]
  %89 = bitcast i8* %85 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = getelementptr inbounds i8, i8* %85, i64 %83
  %92 = load i8, i8* %91, align 1
  %93 = insertelement <16 x i8> undef, i8 %92, i32 0
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> zeroinitializer
  %95 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %90, <16 x i8> %94, <16 x i8> %80) #6
  %96 = shufflevector <16 x i8> %95, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %97 = zext <8 x i8> %96 to <8 x i16>
  %98 = shl nuw nsw <8 x i16> %97, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %99 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = shl <8 x i16> %100, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %102 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %102, align 1
  %103 = getelementptr inbounds i16, i16* %86, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %104, align 1
  %105 = add <8 x i16> %101, %98
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %107 = zext <4 x i16> %106 to <4 x i32>
  %108 = shufflevector <8 x i16> %105, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = bitcast <8 x i16> %108 to <4 x i32>
  %110 = add <4 x i32> %109, %107
  %111 = add <4 x i32> %110, %87
  %112 = getelementptr inbounds i16, i16* %86, i64 32
  %113 = getelementptr inbounds i8, i8* %85, i64 %4
  %114 = add nuw nsw i32 %88, 1
  %115 = icmp slt i32 %114, %2
  br i1 %115, label %84, label %116

116:                                              ; preds = %84
  %117 = icmp slt i32 %2, 32
  br i1 %117, label %118, label %142

118:                                              ; preds = %116
  %119 = sub i32 0, %2
  %120 = sub i32 31, %2
  %121 = and i32 %119, 3
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %136, label %123

123:                                              ; preds = %118, %123
  %124 = phi i32 [ %133, %123 ], [ %2, %118 ]
  %125 = phi <4 x i32> [ %129, %123 ], [ %111, %118 ]
  %126 = phi i16* [ %132, %123 ], [ %112, %118 ]
  %127 = phi i32 [ %134, %123 ], [ %121, %118 ]
  %128 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %128, align 1
  %129 = add <4 x i32> %125, %110
  %130 = getelementptr inbounds i16, i16* %126, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %131, align 1
  %132 = getelementptr inbounds i16, i16* %126, i64 32
  %133 = add nsw i32 %124, 1
  %134 = add i32 %127, -1
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %123, !llvm.loop !46

136:                                              ; preds = %123, %118
  %137 = phi <4 x i32> [ undef, %118 ], [ %129, %123 ]
  %138 = phi i32 [ %2, %118 ], [ %133, %123 ]
  %139 = phi <4 x i32> [ %111, %118 ], [ %129, %123 ]
  %140 = phi i16* [ %112, %118 ], [ %132, %123 ]
  %141 = icmp ult i32 %120, 3
  br i1 %141, label %142, label %157

142:                                              ; preds = %136, %157, %116
  %143 = phi <4 x i32> [ %111, %116 ], [ %137, %136 ], [ %177, %157 ]
  %144 = bitcast <4 x i32> %143 to <16 x i8>
  %145 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %146 = bitcast <16 x i8> %145 to <4 x i32>
  %147 = add <4 x i32> %143, %146
  %148 = bitcast <4 x i32> %147 to <16 x i8>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %150 = bitcast <16 x i8> %149 to <4 x i32>
  %151 = add <4 x i32> %147, <i32 256, i32 256, i32 256, i32 256>
  %152 = add <4 x i32> %151, %150
  %153 = lshr <4 x i32> %152, <i32 9, i32 9, i32 9, i32 9>
  %154 = bitcast <4 x i32> %153 to <16 x i8>
  %155 = shufflevector <16 x i8> %154, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  br label %183

157:                                              ; preds = %136, %157
  %158 = phi i32 [ %181, %157 ], [ %138, %136 ]
  %159 = phi <4 x i32> [ %177, %157 ], [ %139, %136 ]
  %160 = phi i16* [ %180, %157 ], [ %140, %136 ]
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %161, align 1
  %162 = add <4 x i32> %159, %110
  %163 = getelementptr inbounds i16, i16* %160, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %160, i64 32
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %166, align 1
  %167 = add <4 x i32> %162, %110
  %168 = getelementptr inbounds i16, i16* %160, i64 40
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %169, align 1
  %170 = getelementptr inbounds i16, i16* %160, i64 64
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %171, align 1
  %172 = add <4 x i32> %167, %110
  %173 = getelementptr inbounds i16, i16* %160, i64 72
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %174, align 1
  %175 = getelementptr inbounds i16, i16* %160, i64 96
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %176, align 1
  %177 = add <4 x i32> %172, %110
  %178 = getelementptr inbounds i16, i16* %160, i64 104
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %179, align 1
  %180 = getelementptr inbounds i16, i16* %160, i64 128
  %181 = add nsw i32 %158, 4
  %182 = icmp eq i32 %181, 32
  br i1 %182, label %142, label %157

183:                                              ; preds = %183, %142
  %184 = phi i32 [ 0, %142 ], [ %201, %183 ]
  %185 = phi i16* [ %81, %142 ], [ %202, %183 ]
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 1
  %188 = sub <8 x i16> %187, %156
  store <8 x i16> %188, <8 x i16>* %186, align 1
  %189 = getelementptr inbounds i16, i16* %185, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 1
  %192 = sub <8 x i16> %191, %156
  store <8 x i16> %192, <8 x i16>* %190, align 1
  %193 = getelementptr inbounds i16, i16* %185, i64 32
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = sub <8 x i16> %195, %156
  store <8 x i16> %196, <8 x i16>* %194, align 1
  %197 = getelementptr inbounds i16, i16* %185, i64 40
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 1
  %200 = sub <8 x i16> %199, %156
  store <8 x i16> %200, <8 x i16>* %198, align 1
  %201 = add nuw nsw i32 %184, 2
  %202 = getelementptr inbounds i16, i16* %185, i64 64
  %203 = icmp eq i32 %201, 32
  br i1 %203, label %204, label %183

204:                                              ; preds = %183, %52
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi5ELi3EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 31
  %7 = icmp sgt i32 %2, 7
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %53

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i16* [ %10, %9 ], [ %49, %11 ]
  %13 = phi <4 x i32> [ zeroinitializer, %9 ], [ %48, %11 ]
  %14 = phi i32 [ 0, %9 ], [ %51, %11 ]
  %15 = phi i8* [ %3, %9 ], [ %50, %11 ]
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %12, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = getelementptr inbounds i8, i8* %15, i64 16
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = shl nuw nsw <8 x i16> %32, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %34 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast <16 x i8> %34 to <8 x i16>
  %36 = shl <8 x i16> %35, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %37 = getelementptr inbounds i16, i16* %12, i64 16
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds i16, i16* %12, i64 24
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %27, %33
  %42 = add <8 x i16> %41, %36
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = zext <4 x i16> %43 to <4 x i32>
  %45 = shufflevector <8 x i16> %42, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %46 = add <4 x i32> %13, %44
  %47 = bitcast <8 x i16> %45 to <4 x i32>
  %48 = add <4 x i32> %46, %47
  %49 = getelementptr inbounds i16, i16* %12, i64 32
  %50 = getelementptr inbounds i8, i8* %15, i64 %4
  %51 = add nuw nsw i32 %14, 1
  %52 = icmp eq i32 %51, %2
  br i1 %52, label %197, label %11

53:                                               ; preds = %5
  %54 = icmp slt i32 %1, 16
  %55 = select i1 %54, i32 %1, i32 16
  %56 = sub nsw i32 16, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %57
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = sub nsw i32 32, %1
  %62 = icmp slt i32 %61, 16
  %63 = select i1 %62, i32 %61, i32 16
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %69 = add nsw i32 %55, -1
  %70 = sext i32 %69 to i64
  %71 = add nsw i32 %1, -1
  %72 = sext i32 %71 to i64
  br label %73

73:                                               ; preds = %73, %53
  %74 = phi i8* [ %3, %53 ], [ %122, %73 ]
  %75 = phi i16* [ %68, %53 ], [ %121, %73 ]
  %76 = phi <4 x i32> [ zeroinitializer, %53 ], [ %120, %73 ]
  %77 = phi i32 [ 0, %53 ], [ %123, %73 ]
  %78 = bitcast i8* %74 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = getelementptr inbounds i8, i8* %74, i64 %70
  %81 = load i8, i8* %80, align 1
  %82 = insertelement <16 x i8> undef, i8 %81, i32 0
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <16 x i32> zeroinitializer
  %84 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %79, <16 x i8> %83, <16 x i8> %60) #6
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %86 = zext <8 x i8> %85 to <8 x i16>
  %87 = shl nuw nsw <8 x i16> %86, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %88 = shufflevector <16 x i8> %84, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = bitcast <16 x i8> %88 to <8 x i16>
  %90 = shl <8 x i16> %89, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %91 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %91, align 1
  %92 = getelementptr inbounds i16, i16* %75, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %93, align 1
  %94 = add <8 x i16> %90, %87
  %95 = getelementptr inbounds i8, i8* %74, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = getelementptr inbounds i8, i8* %74, i64 %72
  %99 = load i8, i8* %98, align 1
  %100 = insertelement <16 x i8> undef, i8 %99, i32 0
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> zeroinitializer
  %102 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %97, <16 x i8> %101, <16 x i8> %67) #6
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %104 = zext <8 x i8> %103 to <8 x i16>
  %105 = shl nuw nsw <8 x i16> %104, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %106 = shufflevector <16 x i8> %102, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = shl <8 x i16> %107, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %109 = getelementptr inbounds i16, i16* %75, i64 16
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %110, align 1
  %111 = getelementptr inbounds i16, i16* %75, i64 24
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 1
  %113 = add <8 x i16> %94, %105
  %114 = add <8 x i16> %113, %108
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %116 = zext <4 x i16> %115 to <4 x i32>
  %117 = shufflevector <8 x i16> %114, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = bitcast <8 x i16> %117 to <4 x i32>
  %119 = add <4 x i32> %118, %116
  %120 = add <4 x i32> %119, %76
  %121 = getelementptr inbounds i16, i16* %75, i64 32
  %122 = getelementptr inbounds i8, i8* %74, i64 %4
  %123 = add nuw nsw i32 %77, 1
  %124 = icmp slt i32 %123, %2
  br i1 %124, label %73, label %125

125:                                              ; preds = %73
  %126 = icmp slt i32 %2, 8
  br i1 %126, label %127, label %197

127:                                              ; preds = %125
  %128 = sub i32 0, %2
  %129 = sub i32 7, %2
  %130 = and i32 %128, 3
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %149, label %132

132:                                              ; preds = %127, %132
  %133 = phi i32 [ %146, %132 ], [ %2, %127 ]
  %134 = phi <4 x i32> [ %138, %132 ], [ %120, %127 ]
  %135 = phi i16* [ %145, %132 ], [ %121, %127 ]
  %136 = phi i32 [ %147, %132 ], [ %130, %127 ]
  %137 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %137, align 1
  %138 = add <4 x i32> %134, %119
  %139 = getelementptr inbounds i16, i16* %135, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %140, align 1
  %141 = getelementptr inbounds i16, i16* %135, i64 16
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %135, i64 24
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %144, align 1
  %145 = getelementptr inbounds i16, i16* %135, i64 32
  %146 = add nsw i32 %133, 1
  %147 = add i32 %136, -1
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %132, !llvm.loop !47

149:                                              ; preds = %132, %127
  %150 = phi <4 x i32> [ undef, %127 ], [ %138, %132 ]
  %151 = phi i32 [ %2, %127 ], [ %146, %132 ]
  %152 = phi <4 x i32> [ %120, %127 ], [ %138, %132 ]
  %153 = phi i16* [ %121, %127 ], [ %145, %132 ]
  %154 = icmp ult i32 %129, 3
  br i1 %154, label %197, label %155

155:                                              ; preds = %149, %155
  %156 = phi i32 [ %195, %155 ], [ %151, %149 ]
  %157 = phi <4 x i32> [ %187, %155 ], [ %152, %149 ]
  %158 = phi i16* [ %194, %155 ], [ %153, %149 ]
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %159, align 1
  %160 = add <4 x i32> %157, %119
  %161 = getelementptr inbounds i16, i16* %158, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %158, i64 16
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %158, i64 24
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %166, align 1
  %167 = getelementptr inbounds i16, i16* %158, i64 32
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %168, align 1
  %169 = add <4 x i32> %160, %119
  %170 = getelementptr inbounds i16, i16* %158, i64 40
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %171, align 1
  %172 = getelementptr inbounds i16, i16* %158, i64 48
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %158, i64 56
  %175 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %175, align 1
  %176 = getelementptr inbounds i16, i16* %158, i64 64
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %177, align 1
  %178 = add <4 x i32> %169, %119
  %179 = getelementptr inbounds i16, i16* %158, i64 72
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %180, align 1
  %181 = getelementptr inbounds i16, i16* %158, i64 80
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %182, align 1
  %183 = getelementptr inbounds i16, i16* %158, i64 88
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %184, align 1
  %185 = getelementptr inbounds i16, i16* %158, i64 96
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %186, align 1
  %187 = add <4 x i32> %178, %119
  %188 = getelementptr inbounds i16, i16* %158, i64 104
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %189, align 1
  %190 = getelementptr inbounds i16, i16* %158, i64 112
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %158, i64 120
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %158, i64 128
  %195 = add nsw i32 %156, 4
  %196 = icmp eq i32 %195, 8
  br i1 %196, label %197, label %155

197:                                              ; preds = %149, %155, %11, %125
  %198 = phi <4 x i32> [ %120, %125 ], [ %48, %11 ], [ %150, %149 ], [ %187, %155 ]
  %199 = bitcast <4 x i32> %198 to <16 x i8>
  %200 = shufflevector <16 x i8> %199, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %201 = bitcast <16 x i8> %200 to <4 x i32>
  %202 = add <4 x i32> %198, %201
  %203 = bitcast <4 x i32> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %205 = bitcast <16 x i8> %204 to <4 x i32>
  %206 = add <4 x i32> %202, <i32 128, i32 128, i32 128, i32 128>
  %207 = add <4 x i32> %206, %205
  %208 = lshr <4 x i32> %207, <i32 8, i32 8, i32 8, i32 8>
  %209 = bitcast <4 x i32> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %211 = bitcast <16 x i8> %210 to <8 x i16>
  %212 = bitcast [32 x i16]* %0 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 1
  %214 = sub <8 x i16> %213, %211
  store <8 x i16> %214, <8 x i16>* %212, align 1
  %215 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 1
  %218 = sub <8 x i16> %217, %211
  store <8 x i16> %218, <8 x i16>* %216, align 1
  %219 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 1
  %222 = sub <8 x i16> %221, %211
  store <8 x i16> %222, <8 x i16>* %220, align 1
  %223 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 1
  %226 = sub <8 x i16> %225, %211
  store <8 x i16> %226, <8 x i16>* %224, align 1
  %227 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 1
  %230 = sub <8 x i16> %229, %211
  store <8 x i16> %230, <8 x i16>* %228, align 1
  %231 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = sub <8 x i16> %233, %211
  store <8 x i16> %234, <8 x i16>* %232, align 1
  %235 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = sub <8 x i16> %237, %211
  store <8 x i16> %238, <8 x i16>* %236, align 1
  %239 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 1
  %242 = sub <8 x i16> %241, %211
  store <8 x i16> %242, <8 x i16>* %240, align 1
  %243 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = sub <8 x i16> %245, %211
  store <8 x i16> %246, <8 x i16>* %244, align 1
  %247 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %248 = bitcast i16* %247 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 1
  %250 = sub <8 x i16> %249, %211
  store <8 x i16> %250, <8 x i16>* %248, align 1
  %251 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 1
  %254 = sub <8 x i16> %253, %211
  store <8 x i16> %254, <8 x i16>* %252, align 1
  %255 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = sub <8 x i16> %257, %211
  store <8 x i16> %258, <8 x i16>* %256, align 1
  %259 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 1
  %262 = sub <8 x i16> %261, %211
  store <8 x i16> %262, <8 x i16>* %260, align 1
  %263 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %264 = bitcast i16* %263 to <8 x i16>*
  %265 = load <8 x i16>, <8 x i16>* %264, align 1
  %266 = sub <8 x i16> %265, %211
  store <8 x i16> %266, <8 x i16>* %264, align 1
  %267 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 1
  %270 = sub <8 x i16> %269, %211
  store <8 x i16> %270, <8 x i16>* %268, align 1
  %271 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = sub <8 x i16> %273, %211
  store <8 x i16> %274, <8 x i16>* %272, align 1
  %275 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 1
  %278 = sub <8 x i16> %277, %211
  store <8 x i16> %278, <8 x i16>* %276, align 1
  %279 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 1
  %282 = sub <8 x i16> %281, %211
  store <8 x i16> %282, <8 x i16>* %280, align 1
  %283 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 1
  %286 = sub <8 x i16> %285, %211
  store <8 x i16> %286, <8 x i16>* %284, align 1
  %287 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %288 = bitcast i16* %287 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 1
  %290 = sub <8 x i16> %289, %211
  store <8 x i16> %290, <8 x i16>* %288, align 1
  %291 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = sub <8 x i16> %293, %211
  store <8 x i16> %294, <8 x i16>* %292, align 1
  %295 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = sub <8 x i16> %297, %211
  store <8 x i16> %298, <8 x i16>* %296, align 1
  %299 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 1
  %302 = sub <8 x i16> %301, %211
  store <8 x i16> %302, <8 x i16>* %300, align 1
  %303 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 1
  %306 = sub <8 x i16> %305, %211
  store <8 x i16> %306, <8 x i16>* %304, align 1
  %307 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %308 = bitcast i16* %307 to <8 x i16>*
  %309 = load <8 x i16>, <8 x i16>* %308, align 1
  %310 = sub <8 x i16> %309, %211
  store <8 x i16> %310, <8 x i16>* %308, align 1
  %311 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 1
  %314 = sub <8 x i16> %313, %211
  store <8 x i16> %314, <8 x i16>* %312, align 1
  %315 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 1
  %318 = sub <8 x i16> %317, %211
  store <8 x i16> %318, <8 x i16>* %316, align 1
  %319 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 1
  %322 = sub <8 x i16> %321, %211
  store <8 x i16> %322, <8 x i16>* %320, align 1
  %323 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 1
  %326 = sub <8 x i16> %325, %211
  store <8 x i16> %326, <8 x i16>* %324, align 1
  %327 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = sub <8 x i16> %329, %211
  store <8 x i16> %330, <8 x i16>* %328, align 1
  %331 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 240
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 1
  %334 = sub <8 x i16> %333, %211
  store <8 x i16> %334, <8 x i16>* %332, align 1
  %335 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 248
  %336 = bitcast i16* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 1
  %338 = sub <8 x i16> %337, %211
  store <8 x i16> %338, <8 x i16>* %336, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi5ELi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 31
  %7 = icmp sgt i32 %2, 15
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %104

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i16* [ %10, %9 ], [ %49, %11 ]
  %13 = phi <4 x i32> [ zeroinitializer, %9 ], [ %48, %11 ]
  %14 = phi i32 [ 0, %9 ], [ %51, %11 ]
  %15 = phi i8* [ %3, %9 ], [ %50, %11 ]
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %12, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = getelementptr inbounds i8, i8* %15, i64 16
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = shl nuw nsw <8 x i16> %32, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %34 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast <16 x i8> %34 to <8 x i16>
  %36 = shl <8 x i16> %35, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %37 = getelementptr inbounds i16, i16* %12, i64 16
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds i16, i16* %12, i64 24
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %27, %33
  %42 = add <8 x i16> %41, %36
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = zext <4 x i16> %43 to <4 x i32>
  %45 = shufflevector <8 x i16> %42, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %46 = add <4 x i32> %13, %44
  %47 = bitcast <8 x i16> %45 to <4 x i32>
  %48 = add <4 x i32> %46, %47
  %49 = getelementptr inbounds i16, i16* %12, i64 32
  %50 = getelementptr inbounds i8, i8* %15, i64 %4
  %51 = add nuw nsw i32 %14, 1
  %52 = icmp eq i32 %51, %2
  br i1 %52, label %53, label %11

53:                                               ; preds = %11
  %54 = bitcast <4 x i32> %48 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = add <4 x i32> %48, %56
  %58 = bitcast <4 x i32> %57 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %60 = bitcast <16 x i8> %59 to <4 x i32>
  %61 = add <4 x i32> %57, <i32 256, i32 256, i32 256, i32 256>
  %62 = add <4 x i32> %61, %60
  %63 = lshr <4 x i32> %62, <i32 9, i32 9, i32 9, i32 9>
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %66 = bitcast <16 x i8> %65 to <8 x i16>
  br label %67

67:                                               ; preds = %67, %53
  %68 = phi i32 [ 0, %53 ], [ %101, %67 ]
  %69 = phi i16* [ %10, %53 ], [ %102, %67 ]
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = sub <8 x i16> %71, %66
  store <8 x i16> %72, <8 x i16>* %70, align 1
  %73 = getelementptr inbounds i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 1
  %76 = sub <8 x i16> %75, %66
  store <8 x i16> %76, <8 x i16>* %74, align 1
  %77 = getelementptr inbounds i16, i16* %69, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = sub <8 x i16> %79, %66
  store <8 x i16> %80, <8 x i16>* %78, align 1
  %81 = getelementptr inbounds i16, i16* %69, i64 24
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 1
  %84 = sub <8 x i16> %83, %66
  store <8 x i16> %84, <8 x i16>* %82, align 1
  %85 = getelementptr inbounds i16, i16* %69, i64 32
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 1
  %88 = sub <8 x i16> %87, %66
  store <8 x i16> %88, <8 x i16>* %86, align 1
  %89 = getelementptr inbounds i16, i16* %69, i64 40
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 1
  %92 = sub <8 x i16> %91, %66
  store <8 x i16> %92, <8 x i16>* %90, align 1
  %93 = getelementptr inbounds i16, i16* %69, i64 48
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 1
  %96 = sub <8 x i16> %95, %66
  store <8 x i16> %96, <8 x i16>* %94, align 1
  %97 = getelementptr inbounds i16, i16* %69, i64 56
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = sub <8 x i16> %99, %66
  store <8 x i16> %100, <8 x i16>* %98, align 1
  %101 = add nuw nsw i32 %68, 2
  %102 = getelementptr inbounds i16, i16* %69, i64 64
  %103 = icmp eq i32 %101, 16
  br i1 %103, label %300, label %67

104:                                              ; preds = %5
  %105 = icmp slt i32 %1, 16
  %106 = select i1 %105, i32 %1, i32 16
  %107 = sub nsw i32 16, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %108
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = sub nsw i32 32, %1
  %113 = icmp slt i32 %112, 16
  %114 = select i1 %113, i32 %112, i32 16
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %115
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %120 = add nsw i32 %106, -1
  %121 = sext i32 %120 to i64
  %122 = add nsw i32 %1, -1
  %123 = sext i32 %122 to i64
  br label %124

124:                                              ; preds = %124, %104
  %125 = phi i8* [ %3, %104 ], [ %173, %124 ]
  %126 = phi i16* [ %119, %104 ], [ %172, %124 ]
  %127 = phi <4 x i32> [ zeroinitializer, %104 ], [ %171, %124 ]
  %128 = phi i32 [ 0, %104 ], [ %174, %124 ]
  %129 = bitcast i8* %125 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = getelementptr inbounds i8, i8* %125, i64 %121
  %132 = load i8, i8* %131, align 1
  %133 = insertelement <16 x i8> undef, i8 %132, i32 0
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> zeroinitializer
  %135 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %130, <16 x i8> %134, <16 x i8> %111) #6
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %137 = zext <8 x i8> %136 to <8 x i16>
  %138 = shl nuw nsw <8 x i16> %137, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %139 = shufflevector <16 x i8> %135, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %140 = bitcast <16 x i8> %139 to <8 x i16>
  %141 = shl <8 x i16> %140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %142 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %126, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 1
  %145 = add <8 x i16> %141, %138
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1
  %149 = getelementptr inbounds i8, i8* %125, i64 %123
  %150 = load i8, i8* %149, align 1
  %151 = insertelement <16 x i8> undef, i8 %150, i32 0
  %152 = shufflevector <16 x i8> %151, <16 x i8> undef, <16 x i32> zeroinitializer
  %153 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %148, <16 x i8> %152, <16 x i8> %118) #6
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %155 = zext <8 x i8> %154 to <8 x i16>
  %156 = shl nuw nsw <8 x i16> %155, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %157 = shufflevector <16 x i8> %153, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %158 = bitcast <16 x i8> %157 to <8 x i16>
  %159 = shl <8 x i16> %158, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %160 = getelementptr inbounds i16, i16* %126, i64 16
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %161, align 1
  %162 = getelementptr inbounds i16, i16* %126, i64 24
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %163, align 1
  %164 = add <8 x i16> %145, %156
  %165 = add <8 x i16> %164, %159
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %167 = zext <4 x i16> %166 to <4 x i32>
  %168 = shufflevector <8 x i16> %165, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %169 = bitcast <8 x i16> %168 to <4 x i32>
  %170 = add <4 x i32> %169, %167
  %171 = add <4 x i32> %170, %127
  %172 = getelementptr inbounds i16, i16* %126, i64 32
  %173 = getelementptr inbounds i8, i8* %125, i64 %4
  %174 = add nuw nsw i32 %128, 1
  %175 = icmp slt i32 %174, %2
  br i1 %175, label %124, label %176

176:                                              ; preds = %124
  %177 = icmp slt i32 %2, 16
  br i1 %177, label %178, label %206

178:                                              ; preds = %176
  %179 = sub i32 0, %2
  %180 = sub i32 15, %2
  %181 = and i32 %179, 3
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %200, label %183

183:                                              ; preds = %178, %183
  %184 = phi i32 [ %197, %183 ], [ %2, %178 ]
  %185 = phi <4 x i32> [ %189, %183 ], [ %171, %178 ]
  %186 = phi i16* [ %196, %183 ], [ %172, %178 ]
  %187 = phi i32 [ %198, %183 ], [ %181, %178 ]
  %188 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %188, align 1
  %189 = add <4 x i32> %185, %170
  %190 = getelementptr inbounds i16, i16* %186, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %186, i64 16
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %186, i64 24
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %195, align 1
  %196 = getelementptr inbounds i16, i16* %186, i64 32
  %197 = add nsw i32 %184, 1
  %198 = add i32 %187, -1
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %183, !llvm.loop !48

200:                                              ; preds = %183, %178
  %201 = phi <4 x i32> [ undef, %178 ], [ %189, %183 ]
  %202 = phi i32 [ %2, %178 ], [ %197, %183 ]
  %203 = phi <4 x i32> [ %171, %178 ], [ %189, %183 ]
  %204 = phi i16* [ %172, %178 ], [ %196, %183 ]
  %205 = icmp ult i32 %180, 3
  br i1 %205, label %206, label %221

206:                                              ; preds = %200, %221, %176
  %207 = phi <4 x i32> [ %171, %176 ], [ %201, %200 ], [ %253, %221 ]
  %208 = bitcast <4 x i32> %207 to <16 x i8>
  %209 = shufflevector <16 x i8> %208, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %210 = bitcast <16 x i8> %209 to <4 x i32>
  %211 = add <4 x i32> %207, %210
  %212 = bitcast <4 x i32> %211 to <16 x i8>
  %213 = shufflevector <16 x i8> %212, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %214 = bitcast <16 x i8> %213 to <4 x i32>
  %215 = add <4 x i32> %211, <i32 256, i32 256, i32 256, i32 256>
  %216 = add <4 x i32> %215, %214
  %217 = lshr <4 x i32> %216, <i32 9, i32 9, i32 9, i32 9>
  %218 = bitcast <4 x i32> %217 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %220 = bitcast <16 x i8> %219 to <8 x i16>
  br label %263

221:                                              ; preds = %200, %221
  %222 = phi i32 [ %261, %221 ], [ %202, %200 ]
  %223 = phi <4 x i32> [ %253, %221 ], [ %203, %200 ]
  %224 = phi i16* [ %260, %221 ], [ %204, %200 ]
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %225, align 1
  %226 = add <4 x i32> %223, %170
  %227 = getelementptr inbounds i16, i16* %224, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %224, i64 16
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %230, align 1
  %231 = getelementptr inbounds i16, i16* %224, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %232, align 1
  %233 = getelementptr inbounds i16, i16* %224, i64 32
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %234, align 1
  %235 = add <4 x i32> %226, %170
  %236 = getelementptr inbounds i16, i16* %224, i64 40
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %237, align 1
  %238 = getelementptr inbounds i16, i16* %224, i64 48
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %239, align 1
  %240 = getelementptr inbounds i16, i16* %224, i64 56
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %224, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %243, align 1
  %244 = add <4 x i32> %235, %170
  %245 = getelementptr inbounds i16, i16* %224, i64 72
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %246, align 1
  %247 = getelementptr inbounds i16, i16* %224, i64 80
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %248, align 1
  %249 = getelementptr inbounds i16, i16* %224, i64 88
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %250, align 1
  %251 = getelementptr inbounds i16, i16* %224, i64 96
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %252, align 1
  %253 = add <4 x i32> %244, %170
  %254 = getelementptr inbounds i16, i16* %224, i64 104
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %255, align 1
  %256 = getelementptr inbounds i16, i16* %224, i64 112
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %257, align 1
  %258 = getelementptr inbounds i16, i16* %224, i64 120
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %259, align 1
  %260 = getelementptr inbounds i16, i16* %224, i64 128
  %261 = add nsw i32 %222, 4
  %262 = icmp eq i32 %261, 16
  br i1 %262, label %206, label %221

263:                                              ; preds = %263, %206
  %264 = phi i32 [ 0, %206 ], [ %297, %263 ]
  %265 = phi i16* [ %119, %206 ], [ %298, %263 ]
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 1
  %268 = sub <8 x i16> %267, %220
  store <8 x i16> %268, <8 x i16>* %266, align 1
  %269 = getelementptr inbounds i16, i16* %265, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = sub <8 x i16> %271, %220
  store <8 x i16> %272, <8 x i16>* %270, align 1
  %273 = getelementptr inbounds i16, i16* %265, i64 16
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = sub <8 x i16> %275, %220
  store <8 x i16> %276, <8 x i16>* %274, align 1
  %277 = getelementptr inbounds i16, i16* %265, i64 24
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = sub <8 x i16> %279, %220
  store <8 x i16> %280, <8 x i16>* %278, align 1
  %281 = getelementptr inbounds i16, i16* %265, i64 32
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = sub <8 x i16> %283, %220
  store <8 x i16> %284, <8 x i16>* %282, align 1
  %285 = getelementptr inbounds i16, i16* %265, i64 40
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = sub <8 x i16> %287, %220
  store <8 x i16> %288, <8 x i16>* %286, align 1
  %289 = getelementptr inbounds i16, i16* %265, i64 48
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = sub <8 x i16> %291, %220
  store <8 x i16> %292, <8 x i16>* %290, align 1
  %293 = getelementptr inbounds i16, i16* %265, i64 56
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 1
  %296 = sub <8 x i16> %295, %220
  store <8 x i16> %296, <8 x i16>* %294, align 1
  %297 = add nuw nsw i32 %264, 2
  %298 = getelementptr inbounds i16, i16* %265, i64 64
  %299 = icmp eq i32 %297, 16
  br i1 %299, label %300, label %263

300:                                              ; preds = %263, %67
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_123CflSubsampler444_SSE4_1ILi5ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp sgt i32 %1, 31
  %7 = icmp sgt i32 %2, 31
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %104

9:                                                ; preds = %5
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i16* [ %10, %9 ], [ %49, %11 ]
  %13 = phi <4 x i32> [ zeroinitializer, %9 ], [ %48, %11 ]
  %14 = phi i32 [ 0, %9 ], [ %51, %11 ]
  %15 = phi i8* [ %3, %9 ], [ %50, %11 ]
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = zext <8 x i8> %18 to <8 x i16>
  %20 = shl nuw nsw <8 x i16> %19, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shl <8 x i16> %22, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %24 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> %20, <8 x i16>* %24, align 1
  %25 = getelementptr inbounds i16, i16* %12, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 1
  %27 = add <8 x i16> %23, %20
  %28 = getelementptr inbounds i8, i8* %15, i64 16
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = shl nuw nsw <8 x i16> %32, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %34 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast <16 x i8> %34 to <8 x i16>
  %36 = shl <8 x i16> %35, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %37 = getelementptr inbounds i16, i16* %12, i64 16
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds i16, i16* %12, i64 24
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %27, %33
  %42 = add <8 x i16> %41, %36
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %44 = zext <4 x i16> %43 to <4 x i32>
  %45 = shufflevector <8 x i16> %42, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %46 = add <4 x i32> %13, %44
  %47 = bitcast <8 x i16> %45 to <4 x i32>
  %48 = add <4 x i32> %46, %47
  %49 = getelementptr inbounds i16, i16* %12, i64 32
  %50 = getelementptr inbounds i8, i8* %15, i64 %4
  %51 = add nuw nsw i32 %14, 1
  %52 = icmp eq i32 %51, %2
  br i1 %52, label %53, label %11

53:                                               ; preds = %11
  %54 = bitcast <4 x i32> %48 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = add <4 x i32> %48, %56
  %58 = bitcast <4 x i32> %57 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %60 = bitcast <16 x i8> %59 to <4 x i32>
  %61 = add <4 x i32> %57, <i32 512, i32 512, i32 512, i32 512>
  %62 = add <4 x i32> %61, %60
  %63 = lshr <4 x i32> %62, <i32 10, i32 10, i32 10, i32 10>
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %66 = bitcast <16 x i8> %65 to <8 x i16>
  br label %67

67:                                               ; preds = %67, %53
  %68 = phi i32 [ 0, %53 ], [ %101, %67 ]
  %69 = phi i16* [ %10, %53 ], [ %102, %67 ]
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = sub <8 x i16> %71, %66
  store <8 x i16> %72, <8 x i16>* %70, align 1
  %73 = getelementptr inbounds i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 1
  %76 = sub <8 x i16> %75, %66
  store <8 x i16> %76, <8 x i16>* %74, align 1
  %77 = getelementptr inbounds i16, i16* %69, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = sub <8 x i16> %79, %66
  store <8 x i16> %80, <8 x i16>* %78, align 1
  %81 = getelementptr inbounds i16, i16* %69, i64 24
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 1
  %84 = sub <8 x i16> %83, %66
  store <8 x i16> %84, <8 x i16>* %82, align 1
  %85 = getelementptr inbounds i16, i16* %69, i64 32
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 1
  %88 = sub <8 x i16> %87, %66
  store <8 x i16> %88, <8 x i16>* %86, align 1
  %89 = getelementptr inbounds i16, i16* %69, i64 40
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 1
  %92 = sub <8 x i16> %91, %66
  store <8 x i16> %92, <8 x i16>* %90, align 1
  %93 = getelementptr inbounds i16, i16* %69, i64 48
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 1
  %96 = sub <8 x i16> %95, %66
  store <8 x i16> %96, <8 x i16>* %94, align 1
  %97 = getelementptr inbounds i16, i16* %69, i64 56
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = sub <8 x i16> %99, %66
  store <8 x i16> %100, <8 x i16>* %98, align 1
  %101 = add nuw nsw i32 %68, 2
  %102 = getelementptr inbounds i16, i16* %69, i64 64
  %103 = icmp eq i32 %101, 32
  br i1 %103, label %300, label %67

104:                                              ; preds = %5
  %105 = icmp slt i32 %1, 16
  %106 = select i1 %105, i32 %1, i32 16
  %107 = sub nsw i32 16, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %108
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1
  %112 = sub nsw i32 32, %1
  %113 = icmp slt i32 %112, 16
  %114 = select i1 %113, i32 %112, i32 16
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [32 x i8], [32 x i8]* @_ZZN7libgav13dsp14MaskHighNBytesEiE5kMask, i64 0, i64 %115
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %120 = add nsw i32 %106, -1
  %121 = sext i32 %120 to i64
  %122 = add nsw i32 %1, -1
  %123 = sext i32 %122 to i64
  br label %124

124:                                              ; preds = %124, %104
  %125 = phi i8* [ %3, %104 ], [ %173, %124 ]
  %126 = phi i16* [ %119, %104 ], [ %172, %124 ]
  %127 = phi <4 x i32> [ zeroinitializer, %104 ], [ %171, %124 ]
  %128 = phi i32 [ 0, %104 ], [ %174, %124 ]
  %129 = bitcast i8* %125 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = getelementptr inbounds i8, i8* %125, i64 %121
  %132 = load i8, i8* %131, align 1
  %133 = insertelement <16 x i8> undef, i8 %132, i32 0
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> zeroinitializer
  %135 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %130, <16 x i8> %134, <16 x i8> %111) #6
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %137 = zext <8 x i8> %136 to <8 x i16>
  %138 = shl nuw nsw <8 x i16> %137, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %139 = shufflevector <16 x i8> %135, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %140 = bitcast <16 x i8> %139 to <8 x i16>
  %141 = shl <8 x i16> %140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %142 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %142, align 1
  %143 = getelementptr inbounds i16, i16* %126, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 1
  %145 = add <8 x i16> %141, %138
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1
  %149 = getelementptr inbounds i8, i8* %125, i64 %123
  %150 = load i8, i8* %149, align 1
  %151 = insertelement <16 x i8> undef, i8 %150, i32 0
  %152 = shufflevector <16 x i8> %151, <16 x i8> undef, <16 x i32> zeroinitializer
  %153 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %148, <16 x i8> %152, <16 x i8> %118) #6
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %155 = zext <8 x i8> %154 to <8 x i16>
  %156 = shl nuw nsw <8 x i16> %155, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %157 = shufflevector <16 x i8> %153, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %158 = bitcast <16 x i8> %157 to <8 x i16>
  %159 = shl <8 x i16> %158, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %160 = getelementptr inbounds i16, i16* %126, i64 16
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %161, align 1
  %162 = getelementptr inbounds i16, i16* %126, i64 24
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %163, align 1
  %164 = add <8 x i16> %145, %156
  %165 = add <8 x i16> %164, %159
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %167 = zext <4 x i16> %166 to <4 x i32>
  %168 = shufflevector <8 x i16> %165, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %169 = bitcast <8 x i16> %168 to <4 x i32>
  %170 = add <4 x i32> %169, %167
  %171 = add <4 x i32> %170, %127
  %172 = getelementptr inbounds i16, i16* %126, i64 32
  %173 = getelementptr inbounds i8, i8* %125, i64 %4
  %174 = add nuw nsw i32 %128, 1
  %175 = icmp slt i32 %174, %2
  br i1 %175, label %124, label %176

176:                                              ; preds = %124
  %177 = icmp slt i32 %2, 32
  br i1 %177, label %178, label %206

178:                                              ; preds = %176
  %179 = sub i32 0, %2
  %180 = sub i32 31, %2
  %181 = and i32 %179, 3
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %200, label %183

183:                                              ; preds = %178, %183
  %184 = phi i32 [ %197, %183 ], [ %2, %178 ]
  %185 = phi <4 x i32> [ %189, %183 ], [ %171, %178 ]
  %186 = phi i16* [ %196, %183 ], [ %172, %178 ]
  %187 = phi i32 [ %198, %183 ], [ %181, %178 ]
  %188 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %188, align 1
  %189 = add <4 x i32> %185, %170
  %190 = getelementptr inbounds i16, i16* %186, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %186, i64 16
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %186, i64 24
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %195, align 1
  %196 = getelementptr inbounds i16, i16* %186, i64 32
  %197 = add nsw i32 %184, 1
  %198 = add i32 %187, -1
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %183, !llvm.loop !49

200:                                              ; preds = %183, %178
  %201 = phi <4 x i32> [ undef, %178 ], [ %189, %183 ]
  %202 = phi i32 [ %2, %178 ], [ %197, %183 ]
  %203 = phi <4 x i32> [ %171, %178 ], [ %189, %183 ]
  %204 = phi i16* [ %172, %178 ], [ %196, %183 ]
  %205 = icmp ult i32 %180, 3
  br i1 %205, label %206, label %221

206:                                              ; preds = %200, %221, %176
  %207 = phi <4 x i32> [ %171, %176 ], [ %201, %200 ], [ %253, %221 ]
  %208 = bitcast <4 x i32> %207 to <16 x i8>
  %209 = shufflevector <16 x i8> %208, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %210 = bitcast <16 x i8> %209 to <4 x i32>
  %211 = add <4 x i32> %207, %210
  %212 = bitcast <4 x i32> %211 to <16 x i8>
  %213 = shufflevector <16 x i8> %212, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %214 = bitcast <16 x i8> %213 to <4 x i32>
  %215 = add <4 x i32> %211, <i32 512, i32 512, i32 512, i32 512>
  %216 = add <4 x i32> %215, %214
  %217 = lshr <4 x i32> %216, <i32 10, i32 10, i32 10, i32 10>
  %218 = bitcast <4 x i32> %217 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %220 = bitcast <16 x i8> %219 to <8 x i16>
  br label %263

221:                                              ; preds = %200, %221
  %222 = phi i32 [ %261, %221 ], [ %202, %200 ]
  %223 = phi <4 x i32> [ %253, %221 ], [ %203, %200 ]
  %224 = phi i16* [ %260, %221 ], [ %204, %200 ]
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %225, align 1
  %226 = add <4 x i32> %223, %170
  %227 = getelementptr inbounds i16, i16* %224, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %224, i64 16
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %230, align 1
  %231 = getelementptr inbounds i16, i16* %224, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %232, align 1
  %233 = getelementptr inbounds i16, i16* %224, i64 32
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %234, align 1
  %235 = add <4 x i32> %226, %170
  %236 = getelementptr inbounds i16, i16* %224, i64 40
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %237, align 1
  %238 = getelementptr inbounds i16, i16* %224, i64 48
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %239, align 1
  %240 = getelementptr inbounds i16, i16* %224, i64 56
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %224, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %243, align 1
  %244 = add <4 x i32> %235, %170
  %245 = getelementptr inbounds i16, i16* %224, i64 72
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %246, align 1
  %247 = getelementptr inbounds i16, i16* %224, i64 80
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %248, align 1
  %249 = getelementptr inbounds i16, i16* %224, i64 88
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %250, align 1
  %251 = getelementptr inbounds i16, i16* %224, i64 96
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %252, align 1
  %253 = add <4 x i32> %244, %170
  %254 = getelementptr inbounds i16, i16* %224, i64 104
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %255, align 1
  %256 = getelementptr inbounds i16, i16* %224, i64 112
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %257, align 1
  %258 = getelementptr inbounds i16, i16* %224, i64 120
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %259, align 1
  %260 = getelementptr inbounds i16, i16* %224, i64 128
  %261 = add nsw i32 %222, 4
  %262 = icmp eq i32 %261, 32
  br i1 %262, label %206, label %221

263:                                              ; preds = %263, %206
  %264 = phi i32 [ 0, %206 ], [ %297, %263 ]
  %265 = phi i16* [ %119, %206 ], [ %298, %263 ]
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 1
  %268 = sub <8 x i16> %267, %220
  store <8 x i16> %268, <8 x i16>* %266, align 1
  %269 = getelementptr inbounds i16, i16* %265, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = sub <8 x i16> %271, %220
  store <8 x i16> %272, <8 x i16>* %270, align 1
  %273 = getelementptr inbounds i16, i16* %265, i64 16
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = sub <8 x i16> %275, %220
  store <8 x i16> %276, <8 x i16>* %274, align 1
  %277 = getelementptr inbounds i16, i16* %265, i64 24
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = sub <8 x i16> %279, %220
  store <8 x i16> %280, <8 x i16>* %278, align 1
  %281 = getelementptr inbounds i16, i16* %265, i64 32
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = sub <8 x i16> %283, %220
  store <8 x i16> %284, <8 x i16>* %282, align 1
  %285 = getelementptr inbounds i16, i16* %265, i64 40
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = sub <8 x i16> %287, %220
  store <8 x i16> %288, <8 x i16>* %286, align 1
  %289 = getelementptr inbounds i16, i16* %265, i64 48
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = sub <8 x i16> %291, %220
  store <8 x i16> %292, <8 x i16>* %290, align 1
  %293 = getelementptr inbounds i16, i16* %265, i64 56
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 1
  %296 = sub <8 x i16> %295, %220
  store <8 x i16> %296, <8 x i16>* %294, align 1
  %297 = add nuw nsw i32 %264, 2
  %298 = getelementptr inbounds i16, i16* %265, i64 64
  %299 = icmp eq i32 %297, 32
  br i1 %299, label %300, label %263

300:                                              ; preds = %263, %67
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi4ELi4EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = load i8, i8* %0, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = bitcast [32 x i16]* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %17) #6
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  %22 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %21, <8 x i16> %11) #6
  %23 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %22, <8 x i16> %18) #6
  %24 = add <8 x i16> %23, %15
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> undef) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = extractelement <4 x i32> %26, i32 0
  %28 = bitcast i8* %0 to i32*
  store i32 %27, i32* %28, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 %1
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %31 = bitcast [32 x i16]* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %32) #6
  %34 = sub <8 x i16> zeroinitializer, %32
  %35 = icmp slt <8 x i16> %32, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %32
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %36, <8 x i16> %11) #6
  %38 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %37, <8 x i16> %33) #6
  %39 = add <8 x i16> %38, %15
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %39, <8 x i16> undef) #6
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = extractelement <4 x i32> %41, i32 0
  %43 = bitcast i8* %29 to i32*
  store i32 %42, i32* %43, align 1
  %44 = getelementptr inbounds i8, i8* %29, i64 %1
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %46 = bitcast [32 x i16]* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %47) #6
  %49 = sub <8 x i16> zeroinitializer, %47
  %50 = icmp slt <8 x i16> %47, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %47
  %52 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %51, <8 x i16> %11) #6
  %53 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %52, <8 x i16> %48) #6
  %54 = add <8 x i16> %53, %15
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #6
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = extractelement <4 x i32> %56, i32 0
  %58 = bitcast i8* %44 to i32*
  store i32 %57, i32* %58, align 1
  %59 = getelementptr inbounds i8, i8* %44, i64 %1
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %61 = bitcast [32 x i16]* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %62) #6
  %64 = sub <8 x i16> zeroinitializer, %62
  %65 = icmp slt <8 x i16> %62, zeroinitializer
  %66 = select <8 x i1> %65, <8 x i16> %64, <8 x i16> %62
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %66, <8 x i16> %11) #6
  %68 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %67, <8 x i16> %63) #6
  %69 = add <8 x i16> %68, %15
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> undef) #6
  %71 = bitcast <16 x i8> %70 to <4 x i32>
  %72 = extractelement <4 x i32> %71, i32 0
  %73 = bitcast i8* %59 to i32*
  store i32 %72, i32* %73, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi4ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = load i8, i8* %0, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = bitcast [32 x i16]* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %17) #6
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  %22 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %21, <8 x i16> %11) #6
  %23 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %22, <8 x i16> %18) #6
  %24 = add <8 x i16> %23, %15
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> undef) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = extractelement <4 x i32> %26, i32 0
  %28 = bitcast i8* %0 to i32*
  store i32 %27, i32* %28, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 %1
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %31 = bitcast [32 x i16]* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %32) #6
  %34 = sub <8 x i16> zeroinitializer, %32
  %35 = icmp slt <8 x i16> %32, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %32
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %36, <8 x i16> %11) #6
  %38 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %37, <8 x i16> %33) #6
  %39 = add <8 x i16> %38, %15
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %39, <8 x i16> undef) #6
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = extractelement <4 x i32> %41, i32 0
  %43 = bitcast i8* %29 to i32*
  store i32 %42, i32* %43, align 1
  %44 = getelementptr inbounds i8, i8* %29, i64 %1
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %46 = bitcast [32 x i16]* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %47) #6
  %49 = sub <8 x i16> zeroinitializer, %47
  %50 = icmp slt <8 x i16> %47, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %47
  %52 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %51, <8 x i16> %11) #6
  %53 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %52, <8 x i16> %48) #6
  %54 = add <8 x i16> %53, %15
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #6
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = extractelement <4 x i32> %56, i32 0
  %58 = bitcast i8* %44 to i32*
  store i32 %57, i32* %58, align 1
  %59 = getelementptr inbounds i8, i8* %44, i64 %1
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %61 = bitcast [32 x i16]* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %62) #6
  %64 = sub <8 x i16> zeroinitializer, %62
  %65 = icmp slt <8 x i16> %62, zeroinitializer
  %66 = select <8 x i1> %65, <8 x i16> %64, <8 x i16> %62
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %66, <8 x i16> %11) #6
  %68 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %67, <8 x i16> %63) #6
  %69 = add <8 x i16> %68, %15
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> undef) #6
  %71 = bitcast <16 x i8> %70 to <4 x i32>
  %72 = extractelement <4 x i32> %71, i32 0
  %73 = bitcast i8* %59 to i32*
  store i32 %72, i32* %73, align 1
  %74 = getelementptr inbounds i8, i8* %59, i64 %1
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 4
  %76 = bitcast [32 x i16]* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 1
  %78 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %77) #6
  %79 = sub <8 x i16> zeroinitializer, %77
  %80 = icmp slt <8 x i16> %77, zeroinitializer
  %81 = select <8 x i1> %80, <8 x i16> %79, <8 x i16> %77
  %82 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %81, <8 x i16> %11) #6
  %83 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %82, <8 x i16> %78) #6
  %84 = add <8 x i16> %83, %15
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> undef) #6
  %86 = bitcast <16 x i8> %85 to <4 x i32>
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = bitcast i8* %74 to i32*
  store i32 %87, i32* %88, align 1
  %89 = getelementptr inbounds i8, i8* %74, i64 %1
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 5
  %91 = bitcast [32 x i16]* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %92) #6
  %94 = sub <8 x i16> zeroinitializer, %92
  %95 = icmp slt <8 x i16> %92, zeroinitializer
  %96 = select <8 x i1> %95, <8 x i16> %94, <8 x i16> %92
  %97 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %96, <8 x i16> %11) #6
  %98 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %97, <8 x i16> %93) #6
  %99 = add <8 x i16> %98, %15
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %99, <8 x i16> undef) #6
  %101 = bitcast <16 x i8> %100 to <4 x i32>
  %102 = extractelement <4 x i32> %101, i32 0
  %103 = bitcast i8* %89 to i32*
  store i32 %102, i32* %103, align 1
  %104 = getelementptr inbounds i8, i8* %89, i64 %1
  %105 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 6
  %106 = bitcast [32 x i16]* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %107) #6
  %109 = sub <8 x i16> zeroinitializer, %107
  %110 = icmp slt <8 x i16> %107, zeroinitializer
  %111 = select <8 x i1> %110, <8 x i16> %109, <8 x i16> %107
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %111, <8 x i16> %11) #6
  %113 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %112, <8 x i16> %108) #6
  %114 = add <8 x i16> %113, %15
  %115 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> undef) #6
  %116 = bitcast <16 x i8> %115 to <4 x i32>
  %117 = extractelement <4 x i32> %116, i32 0
  %118 = bitcast i8* %104 to i32*
  store i32 %117, i32* %118, align 1
  %119 = getelementptr inbounds i8, i8* %104, i64 %1
  %120 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 7
  %121 = bitcast [32 x i16]* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %122) #6
  %124 = sub <8 x i16> zeroinitializer, %122
  %125 = icmp slt <8 x i16> %122, zeroinitializer
  %126 = select <8 x i1> %125, <8 x i16> %124, <8 x i16> %122
  %127 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %126, <8 x i16> %11) #6
  %128 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %127, <8 x i16> %123) #6
  %129 = add <8 x i16> %128, %15
  %130 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> undef) #6
  %131 = bitcast <16 x i8> %130 to <4 x i32>
  %132 = extractelement <4 x i32> %131, i32 0
  %133 = bitcast i8* %119 to i32*
  store i32 %132, i32* %133, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi4ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %36, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %35, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> undef) #6
  %32 = bitcast <16 x i8> %31 to <4 x i32>
  %33 = extractelement <4 x i32> %32, i32 0
  %34 = bitcast i8* %21 to i32*
  store i32 %33, i32* %34, align 1
  %35 = getelementptr inbounds i8, i8* %21, i64 %1
  %36 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %37 = icmp ult <2 x i64>* %36, %14
  br i1 %37, label %19, label %38

38:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi4EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = load i8, i8* %0, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast [32 x i16]* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %17) #6
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  %22 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %21, <8 x i16> %11) #6
  %23 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %22, <8 x i16> %18) #6
  %24 = add <8 x i16> %23, %15
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> undef) #6
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = extractelement <2 x i64> %26, i32 0
  %28 = bitcast i8* %0 to i64*
  store i64 %27, i64* %28, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 %1
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %31 = bitcast [32 x i16]* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %32) #6
  %34 = sub <8 x i16> zeroinitializer, %32
  %35 = icmp slt <8 x i16> %32, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %32
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %36, <8 x i16> %11) #6
  %38 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %37, <8 x i16> %33) #6
  %39 = add <8 x i16> %38, %15
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %39, <8 x i16> undef) #6
  %41 = bitcast <16 x i8> %40 to <2 x i64>
  %42 = extractelement <2 x i64> %41, i32 0
  %43 = bitcast i8* %29 to i64*
  store i64 %42, i64* %43, align 1
  %44 = getelementptr inbounds i8, i8* %29, i64 %1
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %46 = bitcast [32 x i16]* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %47) #6
  %49 = sub <8 x i16> zeroinitializer, %47
  %50 = icmp slt <8 x i16> %47, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %47
  %52 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %51, <8 x i16> %11) #6
  %53 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %52, <8 x i16> %48) #6
  %54 = add <8 x i16> %53, %15
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #6
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %44 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %44, i64 %1
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %61 = bitcast [32 x i16]* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %62) #6
  %64 = sub <8 x i16> zeroinitializer, %62
  %65 = icmp slt <8 x i16> %62, zeroinitializer
  %66 = select <8 x i1> %65, <8 x i16> %64, <8 x i16> %62
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %66, <8 x i16> %11) #6
  %68 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %67, <8 x i16> %63) #6
  %69 = add <8 x i16> %68, %15
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> undef) #6
  %71 = bitcast <16 x i8> %70 to <2 x i64>
  %72 = extractelement <2 x i64> %71, i32 0
  %73 = bitcast i8* %59 to i64*
  store i64 %72, i64* %73, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = load i8, i8* %0, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast [32 x i16]* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %17) #6
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  %22 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %21, <8 x i16> %11) #6
  %23 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %22, <8 x i16> %18) #6
  %24 = add <8 x i16> %23, %15
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> undef) #6
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = extractelement <2 x i64> %26, i32 0
  %28 = bitcast i8* %0 to i64*
  store i64 %27, i64* %28, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 %1
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %31 = bitcast [32 x i16]* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %32) #6
  %34 = sub <8 x i16> zeroinitializer, %32
  %35 = icmp slt <8 x i16> %32, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %32
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %36, <8 x i16> %11) #6
  %38 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %37, <8 x i16> %33) #6
  %39 = add <8 x i16> %38, %15
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %39, <8 x i16> undef) #6
  %41 = bitcast <16 x i8> %40 to <2 x i64>
  %42 = extractelement <2 x i64> %41, i32 0
  %43 = bitcast i8* %29 to i64*
  store i64 %42, i64* %43, align 1
  %44 = getelementptr inbounds i8, i8* %29, i64 %1
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %46 = bitcast [32 x i16]* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %47) #6
  %49 = sub <8 x i16> zeroinitializer, %47
  %50 = icmp slt <8 x i16> %47, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %47
  %52 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %51, <8 x i16> %11) #6
  %53 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %52, <8 x i16> %48) #6
  %54 = add <8 x i16> %53, %15
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #6
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %44 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %44, i64 %1
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %61 = bitcast [32 x i16]* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %62) #6
  %64 = sub <8 x i16> zeroinitializer, %62
  %65 = icmp slt <8 x i16> %62, zeroinitializer
  %66 = select <8 x i1> %65, <8 x i16> %64, <8 x i16> %62
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %66, <8 x i16> %11) #6
  %68 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %67, <8 x i16> %63) #6
  %69 = add <8 x i16> %68, %15
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> undef) #6
  %71 = bitcast <16 x i8> %70 to <2 x i64>
  %72 = extractelement <2 x i64> %71, i32 0
  %73 = bitcast i8* %59 to i64*
  store i64 %72, i64* %73, align 1
  %74 = getelementptr inbounds i8, i8* %59, i64 %1
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 4
  %76 = bitcast [32 x i16]* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 1
  %78 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %77) #6
  %79 = sub <8 x i16> zeroinitializer, %77
  %80 = icmp slt <8 x i16> %77, zeroinitializer
  %81 = select <8 x i1> %80, <8 x i16> %79, <8 x i16> %77
  %82 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %81, <8 x i16> %11) #6
  %83 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %82, <8 x i16> %78) #6
  %84 = add <8 x i16> %83, %15
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> undef) #6
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %74 to i64*
  store i64 %87, i64* %88, align 1
  %89 = getelementptr inbounds i8, i8* %74, i64 %1
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 5
  %91 = bitcast [32 x i16]* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %92) #6
  %94 = sub <8 x i16> zeroinitializer, %92
  %95 = icmp slt <8 x i16> %92, zeroinitializer
  %96 = select <8 x i1> %95, <8 x i16> %94, <8 x i16> %92
  %97 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %96, <8 x i16> %11) #6
  %98 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %97, <8 x i16> %93) #6
  %99 = add <8 x i16> %98, %15
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %99, <8 x i16> undef) #6
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = extractelement <2 x i64> %101, i32 0
  %103 = bitcast i8* %89 to i64*
  store i64 %102, i64* %103, align 1
  %104 = getelementptr inbounds i8, i8* %89, i64 %1
  %105 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 6
  %106 = bitcast [32 x i16]* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %107) #6
  %109 = sub <8 x i16> zeroinitializer, %107
  %110 = icmp slt <8 x i16> %107, zeroinitializer
  %111 = select <8 x i1> %110, <8 x i16> %109, <8 x i16> %107
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %111, <8 x i16> %11) #6
  %113 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %112, <8 x i16> %108) #6
  %114 = add <8 x i16> %113, %15
  %115 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> undef) #6
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  %118 = bitcast i8* %104 to i64*
  store i64 %117, i64* %118, align 1
  %119 = getelementptr inbounds i8, i8* %104, i64 %1
  %120 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 7
  %121 = bitcast [32 x i16]* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %122) #6
  %124 = sub <8 x i16> zeroinitializer, %122
  %125 = icmp slt <8 x i16> %122, zeroinitializer
  %126 = select <8 x i1> %125, <8 x i16> %124, <8 x i16> %122
  %127 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %126, <8 x i16> %11) #6
  %128 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %127, <8 x i16> %123) #6
  %129 = add <8 x i16> %128, %15
  %130 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> undef) #6
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = bitcast i8* %119 to i64*
  store i64 %132, i64* %133, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %36, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %35, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> undef) #6
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %21 to i64*
  store i64 %33, i64* %34, align 1
  %35 = getelementptr inbounds i8, i8* %21, i64 %1
  %36 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %37 = icmp ult <2 x i64>* %36, %14
  br i1 %37, label %19, label %38

38:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi8ELi32EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 32
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %36, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %35, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> undef) #6
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %21 to i64*
  store i64 %33, i64* %34, align 1
  %35 = getelementptr inbounds i8, i8* %21, i64 %1
  %36 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %37 = icmp ult <2 x i64>* %36, %14
  br i1 %37, label %19, label %38

38:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi4EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = load i8, i8* %0, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast [32 x i16]* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %17) #6
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  %22 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %21, <8 x i16> %11) #6
  %23 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %22, <8 x i16> %18) #6
  %24 = add <8 x i16> %23, %15
  %25 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 1
  %28 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %27) #6
  %29 = sub <8 x i16> zeroinitializer, %27
  %30 = icmp slt <8 x i16> %27, zeroinitializer
  %31 = select <8 x i1> %30, <8 x i16> %29, <8 x i16> %27
  %32 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %31, <8 x i16> %11) #6
  %33 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %32, <8 x i16> %28) #6
  %34 = add <8 x i16> %33, %15
  %35 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %34) #6
  %36 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %0, i64 %1
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %39 = bitcast [32 x i16]* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 1
  %41 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %40) #6
  %42 = sub <8 x i16> zeroinitializer, %40
  %43 = icmp slt <8 x i16> %40, zeroinitializer
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %40
  %45 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %44, <8 x i16> %11) #6
  %46 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %45, <8 x i16> %41) #6
  %47 = add <8 x i16> %46, %15
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %50) #6
  %52 = sub <8 x i16> zeroinitializer, %50
  %53 = icmp slt <8 x i16> %50, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %50
  %55 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %54, <8 x i16> %11) #6
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %55, <8 x i16> %51) #6
  %57 = add <8 x i16> %56, %15
  %58 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %47, <8 x i16> %57) #6
  %59 = bitcast i8* %37 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %37, i64 %1
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %62 = bitcast [32 x i16]* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 1
  %64 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %63) #6
  %65 = sub <8 x i16> zeroinitializer, %63
  %66 = icmp slt <8 x i16> %63, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %63
  %68 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %67, <8 x i16> %11) #6
  %69 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %68, <8 x i16> %64) #6
  %70 = add <8 x i16> %69, %15
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 1
  %74 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %73) #6
  %75 = sub <8 x i16> zeroinitializer, %73
  %76 = icmp slt <8 x i16> %73, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> %73
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %77, <8 x i16> %11) #6
  %79 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %78, <8 x i16> %74) #6
  %80 = add <8 x i16> %79, %15
  %81 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %70, <8 x i16> %80) #6
  %82 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %60, i64 %1
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %85 = bitcast [32 x i16]* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %86) #6
  %88 = sub <8 x i16> zeroinitializer, %86
  %89 = icmp slt <8 x i16> %86, zeroinitializer
  %90 = select <8 x i1> %89, <8 x i16> %88, <8 x i16> %86
  %91 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %90, <8 x i16> %11) #6
  %92 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %91, <8 x i16> %87) #6
  %93 = add <8 x i16> %92, %15
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %96) #6
  %98 = sub <8 x i16> zeroinitializer, %96
  %99 = icmp slt <8 x i16> %96, zeroinitializer
  %100 = select <8 x i1> %99, <8 x i16> %98, <8 x i16> %96
  %101 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %100, <8 x i16> %11) #6
  %102 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %101, <8 x i16> %97) #6
  %103 = add <8 x i16> %102, %15
  %104 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %93, <8 x i16> %103) #6
  %105 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %105, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = load i8, i8* %0, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast [32 x i16]* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %17) #6
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  %22 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %21, <8 x i16> %11) #6
  %23 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %22, <8 x i16> %18) #6
  %24 = add <8 x i16> %23, %15
  %25 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 1
  %28 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %27) #6
  %29 = sub <8 x i16> zeroinitializer, %27
  %30 = icmp slt <8 x i16> %27, zeroinitializer
  %31 = select <8 x i1> %30, <8 x i16> %29, <8 x i16> %27
  %32 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %31, <8 x i16> %11) #6
  %33 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %32, <8 x i16> %28) #6
  %34 = add <8 x i16> %33, %15
  %35 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %34) #6
  %36 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %0, i64 %1
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %39 = bitcast [32 x i16]* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 1
  %41 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %40) #6
  %42 = sub <8 x i16> zeroinitializer, %40
  %43 = icmp slt <8 x i16> %40, zeroinitializer
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %40
  %45 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %44, <8 x i16> %11) #6
  %46 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %45, <8 x i16> %41) #6
  %47 = add <8 x i16> %46, %15
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %50) #6
  %52 = sub <8 x i16> zeroinitializer, %50
  %53 = icmp slt <8 x i16> %50, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %50
  %55 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %54, <8 x i16> %11) #6
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %55, <8 x i16> %51) #6
  %57 = add <8 x i16> %56, %15
  %58 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %47, <8 x i16> %57) #6
  %59 = bitcast i8* %37 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %37, i64 %1
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %62 = bitcast [32 x i16]* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 1
  %64 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %63) #6
  %65 = sub <8 x i16> zeroinitializer, %63
  %66 = icmp slt <8 x i16> %63, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %63
  %68 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %67, <8 x i16> %11) #6
  %69 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %68, <8 x i16> %64) #6
  %70 = add <8 x i16> %69, %15
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 1
  %74 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %73) #6
  %75 = sub <8 x i16> zeroinitializer, %73
  %76 = icmp slt <8 x i16> %73, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> %73
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %77, <8 x i16> %11) #6
  %79 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %78, <8 x i16> %74) #6
  %80 = add <8 x i16> %79, %15
  %81 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %70, <8 x i16> %80) #6
  %82 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %60, i64 %1
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %85 = bitcast [32 x i16]* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %86) #6
  %88 = sub <8 x i16> zeroinitializer, %86
  %89 = icmp slt <8 x i16> %86, zeroinitializer
  %90 = select <8 x i1> %89, <8 x i16> %88, <8 x i16> %86
  %91 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %90, <8 x i16> %11) #6
  %92 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %91, <8 x i16> %87) #6
  %93 = add <8 x i16> %92, %15
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %96) #6
  %98 = sub <8 x i16> zeroinitializer, %96
  %99 = icmp slt <8 x i16> %96, zeroinitializer
  %100 = select <8 x i1> %99, <8 x i16> %98, <8 x i16> %96
  %101 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %100, <8 x i16> %11) #6
  %102 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %101, <8 x i16> %97) #6
  %103 = add <8 x i16> %102, %15
  %104 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %93, <8 x i16> %103) #6
  %105 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %83, i64 %1
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 4
  %108 = bitcast [32 x i16]* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 1
  %110 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %109) #6
  %111 = sub <8 x i16> zeroinitializer, %109
  %112 = icmp slt <8 x i16> %109, zeroinitializer
  %113 = select <8 x i1> %112, <8 x i16> %111, <8 x i16> %109
  %114 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %113, <8 x i16> %11) #6
  %115 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %114, <8 x i16> %110) #6
  %116 = add <8 x i16> %115, %15
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 4, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 1
  %120 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %119) #6
  %121 = sub <8 x i16> zeroinitializer, %119
  %122 = icmp slt <8 x i16> %119, zeroinitializer
  %123 = select <8 x i1> %122, <8 x i16> %121, <8 x i16> %119
  %124 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %123, <8 x i16> %11) #6
  %125 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %124, <8 x i16> %120) #6
  %126 = add <8 x i16> %125, %15
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> %126) #6
  %128 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %128, align 1
  %129 = getelementptr inbounds i8, i8* %106, i64 %1
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 5
  %131 = bitcast [32 x i16]* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 1
  %133 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %132) #6
  %134 = sub <8 x i16> zeroinitializer, %132
  %135 = icmp slt <8 x i16> %132, zeroinitializer
  %136 = select <8 x i1> %135, <8 x i16> %134, <8 x i16> %132
  %137 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %136, <8 x i16> %11) #6
  %138 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %137, <8 x i16> %133) #6
  %139 = add <8 x i16> %138, %15
  %140 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 5, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %142) #6
  %144 = sub <8 x i16> zeroinitializer, %142
  %145 = icmp slt <8 x i16> %142, zeroinitializer
  %146 = select <8 x i1> %145, <8 x i16> %144, <8 x i16> %142
  %147 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %146, <8 x i16> %11) #6
  %148 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %147, <8 x i16> %143) #6
  %149 = add <8 x i16> %148, %15
  %150 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %139, <8 x i16> %149) #6
  %151 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %151, align 1
  %152 = getelementptr inbounds i8, i8* %129, i64 %1
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 6
  %154 = bitcast [32 x i16]* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %155) #6
  %157 = sub <8 x i16> zeroinitializer, %155
  %158 = icmp slt <8 x i16> %155, zeroinitializer
  %159 = select <8 x i1> %158, <8 x i16> %157, <8 x i16> %155
  %160 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %159, <8 x i16> %11) #6
  %161 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %160, <8 x i16> %156) #6
  %162 = add <8 x i16> %161, %15
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 6, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %165) #6
  %167 = sub <8 x i16> zeroinitializer, %165
  %168 = icmp slt <8 x i16> %165, zeroinitializer
  %169 = select <8 x i1> %168, <8 x i16> %167, <8 x i16> %165
  %170 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %169, <8 x i16> %11) #6
  %171 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %170, <8 x i16> %166) #6
  %172 = add <8 x i16> %171, %15
  %173 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %162, <8 x i16> %172) #6
  %174 = bitcast i8* %152 to <16 x i8>*
  store <16 x i8> %173, <16 x i8>* %174, align 1
  %175 = getelementptr inbounds i8, i8* %152, i64 %1
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 7
  %177 = bitcast [32 x i16]* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 1
  %179 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %178) #6
  %180 = sub <8 x i16> zeroinitializer, %178
  %181 = icmp slt <8 x i16> %178, zeroinitializer
  %182 = select <8 x i1> %181, <8 x i16> %180, <8 x i16> %178
  %183 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %182, <8 x i16> %11) #6
  %184 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %183, <8 x i16> %179) #6
  %185 = add <8 x i16> %184, %15
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 7, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %188) #6
  %190 = sub <8 x i16> zeroinitializer, %188
  %191 = icmp slt <8 x i16> %188, zeroinitializer
  %192 = select <8 x i1> %191, <8 x i16> %190, <8 x i16> %188
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %192, <8 x i16> %11) #6
  %194 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %193, <8 x i16> %189) #6
  %195 = add <8 x i16> %194, %15
  %196 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> %195) #6
  %197 = bitcast i8* %175 to <16 x i8>*
  store <16 x i8> %196, <16 x i8>* %197, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %44, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %43, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 1
  %32 = bitcast <2 x i64>* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %33) #6
  %35 = sub <8 x i16> zeroinitializer, %33
  %36 = icmp slt <8 x i16> %33, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %33
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> %11) #6
  %39 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %38, <8 x i16> %34) #6
  %40 = add <8 x i16> %39, %18
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> %40) #6
  %42 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %21, i64 %1
  %44 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %45 = icmp ult <2 x i64>* %44, %14
  br i1 %45, label %19, label %46

46:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi16ELi32EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 32
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %44, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %43, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 1
  %32 = bitcast <2 x i64>* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %33) #6
  %35 = sub <8 x i16> zeroinitializer, %33
  %36 = icmp slt <8 x i16> %33, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %33
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> %11) #6
  %39 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %38, <8 x i16> %34) #6
  %40 = add <8 x i16> %39, %18
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> %40) #6
  %42 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %21, i64 %1
  %44 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %45 = icmp ult <2 x i64>* %44, %14
  br i1 %45, label %19, label %46

46:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi32ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 8
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %67, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %66, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 1
  %32 = bitcast <2 x i64>* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %33) #6
  %35 = sub <8 x i16> zeroinitializer, %33
  %36 = icmp slt <8 x i16> %33, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %33
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> %11) #6
  %39 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %38, <8 x i16> %34) #6
  %40 = add <8 x i16> %39, %18
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> %40) #6
  %42 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 2
  %44 = bitcast <2 x i64>* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %45) #6
  %47 = sub <8 x i16> zeroinitializer, %45
  %48 = icmp slt <8 x i16> %45, zeroinitializer
  %49 = select <8 x i1> %48, <8 x i16> %47, <8 x i16> %45
  %50 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %49, <8 x i16> %11) #6
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %50, <8 x i16> %46) #6
  %52 = add <8 x i16> %51, %18
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 3
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %55) #6
  %57 = sub <8 x i16> zeroinitializer, %55
  %58 = icmp slt <8 x i16> %55, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %55
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %59, <8 x i16> %11) #6
  %61 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %60, <8 x i16> %56) #6
  %62 = add <8 x i16> %61, %18
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %62) #6
  %64 = getelementptr inbounds i8, i8* %21, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %21, i64 %1
  %67 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %68 = icmp ult <2 x i64>* %67, %14
  br i1 %68, label %19, label %69

69:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi32ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %67, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %66, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 1
  %32 = bitcast <2 x i64>* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %33) #6
  %35 = sub <8 x i16> zeroinitializer, %33
  %36 = icmp slt <8 x i16> %33, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %33
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> %11) #6
  %39 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %38, <8 x i16> %34) #6
  %40 = add <8 x i16> %39, %18
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> %40) #6
  %42 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 2
  %44 = bitcast <2 x i64>* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %45) #6
  %47 = sub <8 x i16> zeroinitializer, %45
  %48 = icmp slt <8 x i16> %45, zeroinitializer
  %49 = select <8 x i1> %48, <8 x i16> %47, <8 x i16> %45
  %50 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %49, <8 x i16> %11) #6
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %50, <8 x i16> %46) #6
  %52 = add <8 x i16> %51, %18
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 3
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %55) #6
  %57 = sub <8 x i16> zeroinitializer, %55
  %58 = icmp slt <8 x i16> %55, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %55
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %59, <8 x i16> %11) #6
  %61 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %60, <8 x i16> %56) #6
  %62 = add <8 x i16> %61, %18
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %62) #6
  %64 = getelementptr inbounds i8, i8* %21, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %21, i64 %1
  %67 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %68 = icmp ult <2 x i64>* %67, %14
  br i1 %68, label %19, label %69

69:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_124CflIntraPredictor_SSE4_1ILi32ELi32EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = trunc i32 %3 to i16
  %6 = insertelement <8 x i16> undef, i16 %5, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = sub <8 x i16> zeroinitializer, %7
  %9 = icmp slt <8 x i16> %7, zeroinitializer
  %10 = select <8 x i1> %9, <8 x i16> %8, <8 x i16> %7
  %11 = shl <8 x i16> %10, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %12 = bitcast [32 x i16]* %2 to <2 x i64>*
  %13 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 32
  %14 = bitcast [32 x i16]* %13 to <2 x i64>*
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi <2 x i64>* [ %12, %4 ], [ %67, %19 ]
  %21 = phi i8* [ %0, %4 ], [ %66, %19 ]
  %22 = bitcast <2 x i64>* %20 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %23) #6
  %25 = sub <8 x i16> zeroinitializer, %23
  %26 = icmp slt <8 x i16> %23, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> %23
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %27, <8 x i16> %11) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %28, <8 x i16> %24) #6
  %30 = add <8 x i16> %29, %18
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 1
  %32 = bitcast <2 x i64>* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %33) #6
  %35 = sub <8 x i16> zeroinitializer, %33
  %36 = icmp slt <8 x i16> %33, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %33
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> %11) #6
  %39 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %38, <8 x i16> %34) #6
  %40 = add <8 x i16> %39, %18
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %30, <8 x i16> %40) #6
  %42 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 2
  %44 = bitcast <2 x i64>* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %45) #6
  %47 = sub <8 x i16> zeroinitializer, %45
  %48 = icmp slt <8 x i16> %45, zeroinitializer
  %49 = select <8 x i1> %48, <8 x i16> %47, <8 x i16> %45
  %50 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %49, <8 x i16> %11) #6
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %50, <8 x i16> %46) #6
  %52 = add <8 x i16> %51, %18
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 3
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %7, <8 x i16> %55) #6
  %57 = sub <8 x i16> zeroinitializer, %55
  %58 = icmp slt <8 x i16> %55, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %55
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %59, <8 x i16> %11) #6
  %61 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %60, <8 x i16> %56) #6
  %62 = add <8 x i16> %61, %18
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %62) #6
  %64 = getelementptr inbounds i8, i8* %21, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %21, i64 %1
  %67 = getelementptr inbounds <2 x i64>, <2 x i64>* %20, i64 4
  %68 = icmp ult <2 x i64>* %67, %14
  br i1 %68, label %19, label %69

69:                                               ; preds = %19
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #5

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi4ELi4EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = load i16, i16* %5, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = ashr i64 %1, 1
  %17 = bitcast [32 x i16]* %2 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %18) #6
  %20 = sub <8 x i16> zeroinitializer, %18
  %21 = icmp slt <8 x i16> %18, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %18
  %23 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %22, <8 x i16> %12) #6
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %23, <8 x i16> %19) #6
  %25 = add <8 x i16> %24, %15
  %26 = icmp slt <8 x i16> %25, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %28 = icmp sgt <8 x i16> %25, zeroinitializer
  %29 = select <8 x i1> %28, <8 x i16> %27, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %30 = bitcast <8 x i16> %29 to <2 x i64>
  %31 = extractelement <2 x i64> %30, i32 0
  %32 = bitcast i8* %0 to i64*
  store i64 %31, i64* %32, align 1
  %33 = getelementptr inbounds i16, i16* %5, i64 %16
  %34 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %35 = bitcast [32 x i16]* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %36) #6
  %38 = sub <8 x i16> zeroinitializer, %36
  %39 = icmp slt <8 x i16> %36, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> %36
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %40, <8 x i16> %12) #6
  %42 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %41, <8 x i16> %37) #6
  %43 = add <8 x i16> %42, %15
  %44 = icmp slt <8 x i16> %43, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %45 = select <8 x i1> %44, <8 x i16> %43, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %46 = icmp sgt <8 x i16> %43, zeroinitializer
  %47 = select <8 x i1> %46, <8 x i16> %45, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = extractelement <2 x i64> %48, i32 0
  %50 = bitcast i16* %33 to i64*
  store i64 %49, i64* %50, align 1
  %51 = getelementptr inbounds i16, i16* %33, i64 %16
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %53 = bitcast [32 x i16]* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 1
  %55 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %54) #6
  %56 = sub <8 x i16> zeroinitializer, %54
  %57 = icmp slt <8 x i16> %54, zeroinitializer
  %58 = select <8 x i1> %57, <8 x i16> %56, <8 x i16> %54
  %59 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %58, <8 x i16> %12) #6
  %60 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %59, <8 x i16> %55) #6
  %61 = add <8 x i16> %60, %15
  %62 = icmp slt <8 x i16> %61, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %63 = select <8 x i1> %62, <8 x i16> %61, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %64 = icmp sgt <8 x i16> %61, zeroinitializer
  %65 = select <8 x i1> %64, <8 x i16> %63, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = extractelement <2 x i64> %66, i32 0
  %68 = bitcast i16* %51 to i64*
  store i64 %67, i64* %68, align 1
  %69 = getelementptr inbounds i16, i16* %51, i64 %16
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %71 = bitcast [32 x i16]* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %72) #6
  %74 = sub <8 x i16> zeroinitializer, %72
  %75 = icmp slt <8 x i16> %72, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i16> %74, <8 x i16> %72
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %76, <8 x i16> %12) #6
  %78 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %77, <8 x i16> %73) #6
  %79 = add <8 x i16> %78, %15
  %80 = icmp slt <8 x i16> %79, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = select <8 x i1> %80, <8 x i16> %79, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %82 = icmp sgt <8 x i16> %79, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %84 = bitcast <8 x i16> %83 to <2 x i64>
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = bitcast i16* %69 to i64*
  store i64 %85, i64* %86, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi4ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = load i16, i16* %5, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = ashr i64 %1, 1
  %17 = bitcast [32 x i16]* %2 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %18) #6
  %20 = sub <8 x i16> zeroinitializer, %18
  %21 = icmp slt <8 x i16> %18, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %18
  %23 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %22, <8 x i16> %12) #6
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %23, <8 x i16> %19) #6
  %25 = add <8 x i16> %24, %15
  %26 = icmp slt <8 x i16> %25, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %28 = icmp sgt <8 x i16> %25, zeroinitializer
  %29 = select <8 x i1> %28, <8 x i16> %27, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %30 = bitcast <8 x i16> %29 to <2 x i64>
  %31 = extractelement <2 x i64> %30, i32 0
  %32 = bitcast i8* %0 to i64*
  store i64 %31, i64* %32, align 1
  %33 = getelementptr inbounds i16, i16* %5, i64 %16
  %34 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %35 = bitcast [32 x i16]* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %36) #6
  %38 = sub <8 x i16> zeroinitializer, %36
  %39 = icmp slt <8 x i16> %36, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> %36
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %40, <8 x i16> %12) #6
  %42 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %41, <8 x i16> %37) #6
  %43 = add <8 x i16> %42, %15
  %44 = icmp slt <8 x i16> %43, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %45 = select <8 x i1> %44, <8 x i16> %43, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %46 = icmp sgt <8 x i16> %43, zeroinitializer
  %47 = select <8 x i1> %46, <8 x i16> %45, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = extractelement <2 x i64> %48, i32 0
  %50 = bitcast i16* %33 to i64*
  store i64 %49, i64* %50, align 1
  %51 = getelementptr inbounds i16, i16* %33, i64 %16
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %53 = bitcast [32 x i16]* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 1
  %55 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %54) #6
  %56 = sub <8 x i16> zeroinitializer, %54
  %57 = icmp slt <8 x i16> %54, zeroinitializer
  %58 = select <8 x i1> %57, <8 x i16> %56, <8 x i16> %54
  %59 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %58, <8 x i16> %12) #6
  %60 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %59, <8 x i16> %55) #6
  %61 = add <8 x i16> %60, %15
  %62 = icmp slt <8 x i16> %61, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %63 = select <8 x i1> %62, <8 x i16> %61, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %64 = icmp sgt <8 x i16> %61, zeroinitializer
  %65 = select <8 x i1> %64, <8 x i16> %63, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = extractelement <2 x i64> %66, i32 0
  %68 = bitcast i16* %51 to i64*
  store i64 %67, i64* %68, align 1
  %69 = getelementptr inbounds i16, i16* %51, i64 %16
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %71 = bitcast [32 x i16]* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %72) #6
  %74 = sub <8 x i16> zeroinitializer, %72
  %75 = icmp slt <8 x i16> %72, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i16> %74, <8 x i16> %72
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %76, <8 x i16> %12) #6
  %78 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %77, <8 x i16> %73) #6
  %79 = add <8 x i16> %78, %15
  %80 = icmp slt <8 x i16> %79, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = select <8 x i1> %80, <8 x i16> %79, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %82 = icmp sgt <8 x i16> %79, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %84 = bitcast <8 x i16> %83 to <2 x i64>
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = bitcast i16* %69 to i64*
  store i64 %85, i64* %86, align 1
  %87 = getelementptr inbounds i16, i16* %69, i64 %16
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 4
  %89 = bitcast [32 x i16]* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 1
  %91 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %90) #6
  %92 = sub <8 x i16> zeroinitializer, %90
  %93 = icmp slt <8 x i16> %90, zeroinitializer
  %94 = select <8 x i1> %93, <8 x i16> %92, <8 x i16> %90
  %95 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %94, <8 x i16> %12) #6
  %96 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %95, <8 x i16> %91) #6
  %97 = add <8 x i16> %96, %15
  %98 = icmp slt <8 x i16> %97, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %99 = select <8 x i1> %98, <8 x i16> %97, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %100 = icmp sgt <8 x i16> %97, zeroinitializer
  %101 = select <8 x i1> %100, <8 x i16> %99, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = extractelement <2 x i64> %102, i32 0
  %104 = bitcast i16* %87 to i64*
  store i64 %103, i64* %104, align 1
  %105 = getelementptr inbounds i16, i16* %87, i64 %16
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 5
  %107 = bitcast [32 x i16]* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 1
  %109 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %108) #6
  %110 = sub <8 x i16> zeroinitializer, %108
  %111 = icmp slt <8 x i16> %108, zeroinitializer
  %112 = select <8 x i1> %111, <8 x i16> %110, <8 x i16> %108
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %112, <8 x i16> %12) #6
  %114 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %113, <8 x i16> %109) #6
  %115 = add <8 x i16> %114, %15
  %116 = icmp slt <8 x i16> %115, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %117 = select <8 x i1> %116, <8 x i16> %115, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %118 = icmp sgt <8 x i16> %115, zeroinitializer
  %119 = select <8 x i1> %118, <8 x i16> %117, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %120 = bitcast <8 x i16> %119 to <2 x i64>
  %121 = extractelement <2 x i64> %120, i32 0
  %122 = bitcast i16* %105 to i64*
  store i64 %121, i64* %122, align 1
  %123 = getelementptr inbounds i16, i16* %105, i64 %16
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 6
  %125 = bitcast [32 x i16]* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %126) #6
  %128 = sub <8 x i16> zeroinitializer, %126
  %129 = icmp slt <8 x i16> %126, zeroinitializer
  %130 = select <8 x i1> %129, <8 x i16> %128, <8 x i16> %126
  %131 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %130, <8 x i16> %12) #6
  %132 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %131, <8 x i16> %127) #6
  %133 = add <8 x i16> %132, %15
  %134 = icmp slt <8 x i16> %133, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %135 = select <8 x i1> %134, <8 x i16> %133, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %136 = icmp sgt <8 x i16> %133, zeroinitializer
  %137 = select <8 x i1> %136, <8 x i16> %135, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %138 = bitcast <8 x i16> %137 to <2 x i64>
  %139 = extractelement <2 x i64> %138, i32 0
  %140 = bitcast i16* %123 to i64*
  store i64 %139, i64* %140, align 1
  %141 = getelementptr inbounds i16, i16* %123, i64 %16
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 7
  %143 = bitcast [32 x i16]* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 1
  %145 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %144) #6
  %146 = sub <8 x i16> zeroinitializer, %144
  %147 = icmp slt <8 x i16> %144, zeroinitializer
  %148 = select <8 x i1> %147, <8 x i16> %146, <8 x i16> %144
  %149 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %148, <8 x i16> %12) #6
  %150 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %149, <8 x i16> %145) #6
  %151 = add <8 x i16> %150, %15
  %152 = icmp slt <8 x i16> %151, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %153 = select <8 x i1> %152, <8 x i16> %151, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %154 = icmp sgt <8 x i16> %151, zeroinitializer
  %155 = select <8 x i1> %154, <8 x i16> %153, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %156 = bitcast <8 x i16> %155 to <2 x i64>
  %157 = extractelement <2 x i64> %156, i32 0
  %158 = bitcast i16* %141 to i64*
  store i64 %157, i64* %158, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi4ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi i16* [ %5, %4 ], [ %39, %20 ]
  %22 = phi <2 x i64>* [ %13, %4 ], [ %40, %20 ]
  %23 = bitcast <2 x i64>* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 undef, i16 undef, i16 undef, i16 undef>
  %34 = icmp sgt <8 x i16> %31, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %36 = bitcast <8 x i16> %35 to <2 x i64>
  %37 = extractelement <2 x i64> %36, i32 0
  %38 = bitcast i16* %21 to i64*
  store i64 %37, i64* %38, align 1
  %39 = getelementptr inbounds i16, i16* %21, i64 %19
  %40 = getelementptr inbounds <2 x i64>, <2 x i64>* %22, i64 4
  %41 = icmp ult <2 x i64>* %40, %15
  br i1 %41, label %20, label %42

42:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi4EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = load i16, i16* %5, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = ashr i64 %1, 1
  %17 = bitcast [32 x i16]* %2 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %18) #6
  %20 = sub <8 x i16> zeroinitializer, %18
  %21 = icmp slt <8 x i16> %18, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %18
  %23 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %22, <8 x i16> %12) #6
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %23, <8 x i16> %19) #6
  %25 = add <8 x i16> %24, %15
  %26 = icmp slt <8 x i16> %25, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %28 = icmp sgt <8 x i16> %27, zeroinitializer
  %29 = select <8 x i1> %28, <8 x i16> %27, <8 x i16> zeroinitializer
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 1
  %31 = getelementptr inbounds i16, i16* %5, i64 %16
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %33 = bitcast [32 x i16]* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %34) #6
  %36 = sub <8 x i16> zeroinitializer, %34
  %37 = icmp slt <8 x i16> %34, zeroinitializer
  %38 = select <8 x i1> %37, <8 x i16> %36, <8 x i16> %34
  %39 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %38, <8 x i16> %12) #6
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %39, <8 x i16> %35) #6
  %41 = add <8 x i16> %40, %15
  %42 = icmp slt <8 x i16> %41, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %44 = icmp sgt <8 x i16> %43, zeroinitializer
  %45 = select <8 x i1> %44, <8 x i16> %43, <8 x i16> zeroinitializer
  %46 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 1
  %47 = getelementptr inbounds i16, i16* %31, i64 %16
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %49 = bitcast [32 x i16]* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %50) #6
  %52 = sub <8 x i16> zeroinitializer, %50
  %53 = icmp slt <8 x i16> %50, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %50
  %55 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %54, <8 x i16> %12) #6
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %55, <8 x i16> %51) #6
  %57 = add <8 x i16> %56, %15
  %58 = icmp slt <8 x i16> %57, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %60 = icmp sgt <8 x i16> %59, zeroinitializer
  %61 = select <8 x i1> %60, <8 x i16> %59, <8 x i16> zeroinitializer
  %62 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 1
  %63 = getelementptr inbounds i16, i16* %47, i64 %16
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %65 = bitcast [32 x i16]* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  %67 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %66) #6
  %68 = sub <8 x i16> zeroinitializer, %66
  %69 = icmp slt <8 x i16> %66, zeroinitializer
  %70 = select <8 x i1> %69, <8 x i16> %68, <8 x i16> %66
  %71 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %70, <8 x i16> %12) #6
  %72 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %71, <8 x i16> %67) #6
  %73 = add <8 x i16> %72, %15
  %74 = icmp slt <8 x i16> %73, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %75 = select <8 x i1> %74, <8 x i16> %73, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %76 = icmp sgt <8 x i16> %75, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> zeroinitializer
  %78 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = load i16, i16* %5, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = ashr i64 %1, 1
  %17 = bitcast [32 x i16]* %2 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %18) #6
  %20 = sub <8 x i16> zeroinitializer, %18
  %21 = icmp slt <8 x i16> %18, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %18
  %23 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %22, <8 x i16> %12) #6
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %23, <8 x i16> %19) #6
  %25 = add <8 x i16> %24, %15
  %26 = icmp slt <8 x i16> %25, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %28 = icmp sgt <8 x i16> %27, zeroinitializer
  %29 = select <8 x i1> %28, <8 x i16> %27, <8 x i16> zeroinitializer
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 1
  %31 = getelementptr inbounds i16, i16* %5, i64 %16
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %33 = bitcast [32 x i16]* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %34) #6
  %36 = sub <8 x i16> zeroinitializer, %34
  %37 = icmp slt <8 x i16> %34, zeroinitializer
  %38 = select <8 x i1> %37, <8 x i16> %36, <8 x i16> %34
  %39 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %38, <8 x i16> %12) #6
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %39, <8 x i16> %35) #6
  %41 = add <8 x i16> %40, %15
  %42 = icmp slt <8 x i16> %41, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %44 = icmp sgt <8 x i16> %43, zeroinitializer
  %45 = select <8 x i1> %44, <8 x i16> %43, <8 x i16> zeroinitializer
  %46 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 1
  %47 = getelementptr inbounds i16, i16* %31, i64 %16
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %49 = bitcast [32 x i16]* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %50) #6
  %52 = sub <8 x i16> zeroinitializer, %50
  %53 = icmp slt <8 x i16> %50, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %50
  %55 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %54, <8 x i16> %12) #6
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %55, <8 x i16> %51) #6
  %57 = add <8 x i16> %56, %15
  %58 = icmp slt <8 x i16> %57, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %60 = icmp sgt <8 x i16> %59, zeroinitializer
  %61 = select <8 x i1> %60, <8 x i16> %59, <8 x i16> zeroinitializer
  %62 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 1
  %63 = getelementptr inbounds i16, i16* %47, i64 %16
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %65 = bitcast [32 x i16]* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  %67 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %66) #6
  %68 = sub <8 x i16> zeroinitializer, %66
  %69 = icmp slt <8 x i16> %66, zeroinitializer
  %70 = select <8 x i1> %69, <8 x i16> %68, <8 x i16> %66
  %71 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %70, <8 x i16> %12) #6
  %72 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %71, <8 x i16> %67) #6
  %73 = add <8 x i16> %72, %15
  %74 = icmp slt <8 x i16> %73, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %75 = select <8 x i1> %74, <8 x i16> %73, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %76 = icmp sgt <8 x i16> %75, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> zeroinitializer
  %78 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %63, i64 %16
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 4
  %81 = bitcast [32 x i16]* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %82) #6
  %84 = sub <8 x i16> zeroinitializer, %82
  %85 = icmp slt <8 x i16> %82, zeroinitializer
  %86 = select <8 x i1> %85, <8 x i16> %84, <8 x i16> %82
  %87 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %86, <8 x i16> %12) #6
  %88 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %87, <8 x i16> %83) #6
  %89 = add <8 x i16> %88, %15
  %90 = icmp slt <8 x i16> %89, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %92 = icmp sgt <8 x i16> %91, zeroinitializer
  %93 = select <8 x i1> %92, <8 x i16> %91, <8 x i16> zeroinitializer
  %94 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %94, align 1
  %95 = getelementptr inbounds i16, i16* %79, i64 %16
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 5
  %97 = bitcast [32 x i16]* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 1
  %99 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %98) #6
  %100 = sub <8 x i16> zeroinitializer, %98
  %101 = icmp slt <8 x i16> %98, zeroinitializer
  %102 = select <8 x i1> %101, <8 x i16> %100, <8 x i16> %98
  %103 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %102, <8 x i16> %12) #6
  %104 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %103, <8 x i16> %99) #6
  %105 = add <8 x i16> %104, %15
  %106 = icmp slt <8 x i16> %105, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %107 = select <8 x i1> %106, <8 x i16> %105, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %108 = icmp sgt <8 x i16> %107, zeroinitializer
  %109 = select <8 x i1> %108, <8 x i16> %107, <8 x i16> zeroinitializer
  %110 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 1
  %111 = getelementptr inbounds i16, i16* %95, i64 %16
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 6
  %113 = bitcast [32 x i16]* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %114) #6
  %116 = sub <8 x i16> zeroinitializer, %114
  %117 = icmp slt <8 x i16> %114, zeroinitializer
  %118 = select <8 x i1> %117, <8 x i16> %116, <8 x i16> %114
  %119 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %118, <8 x i16> %12) #6
  %120 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %119, <8 x i16> %115) #6
  %121 = add <8 x i16> %120, %15
  %122 = icmp slt <8 x i16> %121, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %123 = select <8 x i1> %122, <8 x i16> %121, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %124 = icmp sgt <8 x i16> %123, zeroinitializer
  %125 = select <8 x i1> %124, <8 x i16> %123, <8 x i16> zeroinitializer
  %126 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 1
  %127 = getelementptr inbounds i16, i16* %111, i64 %16
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 7
  %129 = bitcast [32 x i16]* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 1
  %131 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %130) #6
  %132 = sub <8 x i16> zeroinitializer, %130
  %133 = icmp slt <8 x i16> %130, zeroinitializer
  %134 = select <8 x i1> %133, <8 x i16> %132, <8 x i16> %130
  %135 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %134, <8 x i16> %12) #6
  %136 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %135, <8 x i16> %131) #6
  %137 = add <8 x i16> %136, %15
  %138 = icmp slt <8 x i16> %137, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %139 = select <8 x i1> %138, <8 x i16> %137, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %140 = icmp sgt <8 x i16> %139, zeroinitializer
  %141 = select <8 x i1> %140, <8 x i16> %139, <8 x i16> zeroinitializer
  %142 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi i16* [ %5, %4 ], [ %37, %20 ]
  %22 = phi <2 x i64>* [ %13, %4 ], [ %38, %20 ]
  %23 = bitcast <2 x i64>* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %21, i64 %19
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %22, i64 4
  %39 = icmp ult <2 x i64>* %38, %15
  br i1 %39, label %20, label %40

40:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi8ELi32EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 32
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi i16* [ %5, %4 ], [ %37, %20 ]
  %22 = phi <2 x i64>* [ %13, %4 ], [ %38, %20 ]
  %23 = bitcast <2 x i64>* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %21, i64 %19
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %22, i64 4
  %39 = icmp ult <2 x i64>* %38, %15
  br i1 %39, label %20, label %40

40:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi4EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = load i16, i16* %5, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = ashr i64 %1, 1
  %17 = bitcast [32 x i16]* %2 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %18) #6
  %20 = sub <8 x i16> zeroinitializer, %18
  %21 = icmp slt <8 x i16> %18, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %18
  %23 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %22, <8 x i16> %12) #6
  %24 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %23, <8 x i16> %19) #6
  %25 = add <8 x i16> %24, %15
  %26 = icmp slt <8 x i16> %25, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %27 = select <8 x i1> %26, <8 x i16> %25, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %28 = icmp sgt <8 x i16> %27, zeroinitializer
  %29 = select <8 x i1> %28, <8 x i16> %27, <8 x i16> zeroinitializer
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 1
  %31 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 8
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %33) #6
  %35 = sub <8 x i16> zeroinitializer, %33
  %36 = icmp slt <8 x i16> %33, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %33
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> %12) #6
  %39 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %38, <8 x i16> %34) #6
  %40 = add <8 x i16> %39, %15
  %41 = getelementptr inbounds i8, i8* %0, i64 16
  %42 = icmp slt <8 x i16> %40, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %43 = select <8 x i1> %42, <8 x i16> %40, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %44 = icmp sgt <8 x i16> %43, zeroinitializer
  %45 = select <8 x i1> %44, <8 x i16> %43, <8 x i16> zeroinitializer
  %46 = bitcast i8* %41 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 1
  %47 = getelementptr inbounds i16, i16* %5, i64 %16
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1
  %49 = bitcast [32 x i16]* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 1
  %51 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %50) #6
  %52 = sub <8 x i16> zeroinitializer, %50
  %53 = icmp slt <8 x i16> %50, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %50
  %55 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %54, <8 x i16> %12) #6
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %55, <8 x i16> %51) #6
  %57 = add <8 x i16> %56, %15
  %58 = icmp slt <8 x i16> %57, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %60 = icmp sgt <8 x i16> %59, zeroinitializer
  %61 = select <8 x i1> %60, <8 x i16> %59, <8 x i16> zeroinitializer
  %62 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 1
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 1
  %66 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %65) #6
  %67 = sub <8 x i16> zeroinitializer, %65
  %68 = icmp slt <8 x i16> %65, zeroinitializer
  %69 = select <8 x i1> %68, <8 x i16> %67, <8 x i16> %65
  %70 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %69, <8 x i16> %12) #6
  %71 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %70, <8 x i16> %66) #6
  %72 = add <8 x i16> %71, %15
  %73 = getelementptr inbounds i16, i16* %47, i64 8
  %74 = icmp slt <8 x i16> %72, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %75 = select <8 x i1> %74, <8 x i16> %72, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %76 = icmp sgt <8 x i16> %75, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> zeroinitializer
  %78 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %47, i64 %16
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2
  %81 = bitcast [32 x i16]* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %82) #6
  %84 = sub <8 x i16> zeroinitializer, %82
  %85 = icmp slt <8 x i16> %82, zeroinitializer
  %86 = select <8 x i1> %85, <8 x i16> %84, <8 x i16> %82
  %87 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %86, <8 x i16> %12) #6
  %88 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %87, <8 x i16> %83) #6
  %89 = add <8 x i16> %88, %15
  %90 = icmp slt <8 x i16> %89, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %91 = select <8 x i1> %90, <8 x i16> %89, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %92 = icmp sgt <8 x i16> %91, zeroinitializer
  %93 = select <8 x i1> %92, <8 x i16> %91, <8 x i16> zeroinitializer
  %94 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %94, align 1
  %95 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %97) #6
  %99 = sub <8 x i16> zeroinitializer, %97
  %100 = icmp slt <8 x i16> %97, zeroinitializer
  %101 = select <8 x i1> %100, <8 x i16> %99, <8 x i16> %97
  %102 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %101, <8 x i16> %12) #6
  %103 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %102, <8 x i16> %98) #6
  %104 = add <8 x i16> %103, %15
  %105 = getelementptr inbounds i16, i16* %79, i64 8
  %106 = icmp slt <8 x i16> %104, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %107 = select <8 x i1> %106, <8 x i16> %104, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %108 = icmp sgt <8 x i16> %107, zeroinitializer
  %109 = select <8 x i1> %108, <8 x i16> %107, <8 x i16> zeroinitializer
  %110 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 1
  %111 = getelementptr inbounds i16, i16* %79, i64 %16
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3
  %113 = bitcast [32 x i16]* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %114) #6
  %116 = sub <8 x i16> zeroinitializer, %114
  %117 = icmp slt <8 x i16> %114, zeroinitializer
  %118 = select <8 x i1> %117, <8 x i16> %116, <8 x i16> %114
  %119 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %118, <8 x i16> %12) #6
  %120 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %119, <8 x i16> %115) #6
  %121 = add <8 x i16> %120, %15
  %122 = icmp slt <8 x i16> %121, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %123 = select <8 x i1> %122, <8 x i16> %121, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %124 = icmp sgt <8 x i16> %123, zeroinitializer
  %125 = select <8 x i1> %124, <8 x i16> %123, <8 x i16> zeroinitializer
  %126 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 1
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 1
  %130 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %129) #6
  %131 = sub <8 x i16> zeroinitializer, %129
  %132 = icmp slt <8 x i16> %129, zeroinitializer
  %133 = select <8 x i1> %132, <8 x i16> %131, <8 x i16> %129
  %134 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %133, <8 x i16> %12) #6
  %135 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %134, <8 x i16> %130) #6
  %136 = add <8 x i16> %135, %15
  %137 = getelementptr inbounds i16, i16* %111, i64 8
  %138 = icmp slt <8 x i16> %136, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %139 = select <8 x i1> %138, <8 x i16> %136, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %140 = icmp sgt <8 x i16> %139, zeroinitializer
  %141 = select <8 x i1> %140, <8 x i16> %139, <8 x i16> zeroinitializer
  %142 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 8
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi <2 x i64>* [ %13, %4 ], [ %54, %20 ]
  %22 = phi i16* [ %5, %4 ], [ %53, %20 ]
  %23 = bitcast <2 x i64>* %21 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 1
  %38 = bitcast <2 x i64>* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %39) #6
  %41 = sub <8 x i16> zeroinitializer, %39
  %42 = icmp slt <8 x i16> %39, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %39
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> %12) #6
  %45 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %44, <8 x i16> %40) #6
  %46 = add <8 x i16> %45, %18
  %47 = getelementptr inbounds i16, i16* %22, i64 8
  %48 = icmp slt <8 x i16> %46, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %49 = select <8 x i1> %48, <8 x i16> %46, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %50 = icmp sgt <8 x i16> %49, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> zeroinitializer
  %52 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 1
  %53 = getelementptr inbounds i16, i16* %22, i64 %19
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 4
  %55 = icmp ult <2 x i64>* %54, %15
  br i1 %55, label %20, label %56

56:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi <2 x i64>* [ %13, %4 ], [ %54, %20 ]
  %22 = phi i16* [ %5, %4 ], [ %53, %20 ]
  %23 = bitcast <2 x i64>* %21 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 1
  %38 = bitcast <2 x i64>* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %39) #6
  %41 = sub <8 x i16> zeroinitializer, %39
  %42 = icmp slt <8 x i16> %39, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %39
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> %12) #6
  %45 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %44, <8 x i16> %40) #6
  %46 = add <8 x i16> %45, %18
  %47 = getelementptr inbounds i16, i16* %22, i64 8
  %48 = icmp slt <8 x i16> %46, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %49 = select <8 x i1> %48, <8 x i16> %46, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %50 = icmp sgt <8 x i16> %49, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> zeroinitializer
  %52 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 1
  %53 = getelementptr inbounds i16, i16* %22, i64 %19
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 4
  %55 = icmp ult <2 x i64>* %54, %15
  br i1 %55, label %20, label %56

56:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi16ELi32EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 32
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi <2 x i64>* [ %13, %4 ], [ %54, %20 ]
  %22 = phi i16* [ %5, %4 ], [ %53, %20 ]
  %23 = bitcast <2 x i64>* %21 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 1
  %38 = bitcast <2 x i64>* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %39) #6
  %41 = sub <8 x i16> zeroinitializer, %39
  %42 = icmp slt <8 x i16> %39, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %39
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> %12) #6
  %45 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %44, <8 x i16> %40) #6
  %46 = add <8 x i16> %45, %18
  %47 = getelementptr inbounds i16, i16* %22, i64 8
  %48 = icmp slt <8 x i16> %46, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %49 = select <8 x i1> %48, <8 x i16> %46, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %50 = icmp sgt <8 x i16> %49, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> zeroinitializer
  %52 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 1
  %53 = getelementptr inbounds i16, i16* %22, i64 %19
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 4
  %55 = icmp ult <2 x i64>* %54, %15
  br i1 %55, label %20, label %56

56:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi32ELi8EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 8
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi <2 x i64>* [ %13, %4 ], [ %86, %20 ]
  %22 = phi i16* [ %5, %4 ], [ %85, %20 ]
  %23 = bitcast <2 x i64>* %21 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 1
  %38 = bitcast <2 x i64>* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %39) #6
  %41 = sub <8 x i16> zeroinitializer, %39
  %42 = icmp slt <8 x i16> %39, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %39
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> %12) #6
  %45 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %44, <8 x i16> %40) #6
  %46 = add <8 x i16> %45, %18
  %47 = getelementptr inbounds i16, i16* %22, i64 8
  %48 = icmp slt <8 x i16> %46, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %49 = select <8 x i1> %48, <8 x i16> %46, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %50 = icmp sgt <8 x i16> %49, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> zeroinitializer
  %52 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 1
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 2
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %55) #6
  %57 = sub <8 x i16> zeroinitializer, %55
  %58 = icmp slt <8 x i16> %55, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %55
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %59, <8 x i16> %12) #6
  %61 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %60, <8 x i16> %56) #6
  %62 = add <8 x i16> %61, %18
  %63 = getelementptr inbounds i16, i16* %22, i64 16
  %64 = icmp slt <8 x i16> %62, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %65 = select <8 x i1> %64, <8 x i16> %62, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %66 = icmp sgt <8 x i16> %65, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> zeroinitializer
  %68 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 1
  %69 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 3
  %70 = bitcast <2 x i64>* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %71) #6
  %73 = sub <8 x i16> zeroinitializer, %71
  %74 = icmp slt <8 x i16> %71, zeroinitializer
  %75 = select <8 x i1> %74, <8 x i16> %73, <8 x i16> %71
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %75, <8 x i16> %12) #6
  %77 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %76, <8 x i16> %72) #6
  %78 = add <8 x i16> %77, %18
  %79 = getelementptr inbounds i16, i16* %22, i64 24
  %80 = icmp slt <8 x i16> %78, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = select <8 x i1> %80, <8 x i16> %78, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %82 = icmp sgt <8 x i16> %81, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> zeroinitializer
  %84 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %84, align 1
  %85 = getelementptr inbounds i16, i16* %22, i64 %19
  %86 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 4
  %87 = icmp ult <2 x i64>* %86, %15
  br i1 %87, label %20, label %88

88:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi32ELi16EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 16
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi <2 x i64>* [ %13, %4 ], [ %86, %20 ]
  %22 = phi i16* [ %5, %4 ], [ %85, %20 ]
  %23 = bitcast <2 x i64>* %21 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 1
  %38 = bitcast <2 x i64>* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %39) #6
  %41 = sub <8 x i16> zeroinitializer, %39
  %42 = icmp slt <8 x i16> %39, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %39
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> %12) #6
  %45 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %44, <8 x i16> %40) #6
  %46 = add <8 x i16> %45, %18
  %47 = getelementptr inbounds i16, i16* %22, i64 8
  %48 = icmp slt <8 x i16> %46, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %49 = select <8 x i1> %48, <8 x i16> %46, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %50 = icmp sgt <8 x i16> %49, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> zeroinitializer
  %52 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 1
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 2
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %55) #6
  %57 = sub <8 x i16> zeroinitializer, %55
  %58 = icmp slt <8 x i16> %55, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %55
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %59, <8 x i16> %12) #6
  %61 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %60, <8 x i16> %56) #6
  %62 = add <8 x i16> %61, %18
  %63 = getelementptr inbounds i16, i16* %22, i64 16
  %64 = icmp slt <8 x i16> %62, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %65 = select <8 x i1> %64, <8 x i16> %62, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %66 = icmp sgt <8 x i16> %65, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> zeroinitializer
  %68 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 1
  %69 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 3
  %70 = bitcast <2 x i64>* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %71) #6
  %73 = sub <8 x i16> zeroinitializer, %71
  %74 = icmp slt <8 x i16> %71, zeroinitializer
  %75 = select <8 x i1> %74, <8 x i16> %73, <8 x i16> %71
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %75, <8 x i16> %12) #6
  %77 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %76, <8 x i16> %72) #6
  %78 = add <8 x i16> %77, %18
  %79 = getelementptr inbounds i16, i16* %22, i64 24
  %80 = icmp slt <8 x i16> %78, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = select <8 x i1> %80, <8 x i16> %78, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %82 = icmp sgt <8 x i16> %81, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> zeroinitializer
  %84 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %84, align 1
  %85 = getelementptr inbounds i16, i16* %22, i64 %19
  %86 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 4
  %87 = icmp ult <2 x i64>* %86, %15
  br i1 %87, label %20, label %88

88:                                               ; preds = %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_130CflIntraPredictor_10bpp_SSE4_1ILi32ELi32EEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = trunc i32 %3 to i16
  %7 = insertelement <8 x i16> undef, i16 %6, i32 0
  %8 = shufflevector <8 x i16> %7, <8 x i16> undef, <8 x i32> zeroinitializer
  %9 = sub <8 x i16> zeroinitializer, %8
  %10 = icmp slt <8 x i16> %8, zeroinitializer
  %11 = select <8 x i1> %10, <8 x i16> %9, <8 x i16> %8
  %12 = shl <8 x i16> %11, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %13 = bitcast [32 x i16]* %2 to <2 x i64>*
  %14 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 32
  %15 = bitcast [32 x i16]* %14 to <2 x i64>*
  %16 = load i16, i16* %5, align 2
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = ashr i64 %1, 1
  br label %20

20:                                               ; preds = %20, %4
  %21 = phi <2 x i64>* [ %13, %4 ], [ %86, %20 ]
  %22 = phi i16* [ %5, %4 ], [ %85, %20 ]
  %23 = bitcast <2 x i64>* %21 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %24) #6
  %26 = sub <8 x i16> zeroinitializer, %24
  %27 = icmp slt <8 x i16> %24, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %24
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %28, <8 x i16> %12) #6
  %30 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %29, <8 x i16> %25) #6
  %31 = add <8 x i16> %30, %18
  %32 = icmp slt <8 x i16> %31, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %34 = icmp sgt <8 x i16> %33, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> zeroinitializer
  %36 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 1
  %38 = bitcast <2 x i64>* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %39) #6
  %41 = sub <8 x i16> zeroinitializer, %39
  %42 = icmp slt <8 x i16> %39, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %39
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> %12) #6
  %45 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %44, <8 x i16> %40) #6
  %46 = add <8 x i16> %45, %18
  %47 = getelementptr inbounds i16, i16* %22, i64 8
  %48 = icmp slt <8 x i16> %46, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %49 = select <8 x i1> %48, <8 x i16> %46, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %50 = icmp sgt <8 x i16> %49, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> zeroinitializer
  %52 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 1
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 2
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %55) #6
  %57 = sub <8 x i16> zeroinitializer, %55
  %58 = icmp slt <8 x i16> %55, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %55
  %60 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %59, <8 x i16> %12) #6
  %61 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %60, <8 x i16> %56) #6
  %62 = add <8 x i16> %61, %18
  %63 = getelementptr inbounds i16, i16* %22, i64 16
  %64 = icmp slt <8 x i16> %62, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %65 = select <8 x i1> %64, <8 x i16> %62, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %66 = icmp sgt <8 x i16> %65, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> zeroinitializer
  %68 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 1
  %69 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 3
  %70 = bitcast <2 x i64>* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %8, <8 x i16> %71) #6
  %73 = sub <8 x i16> zeroinitializer, %71
  %74 = icmp slt <8 x i16> %71, zeroinitializer
  %75 = select <8 x i1> %74, <8 x i16> %73, <8 x i16> %71
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %75, <8 x i16> %12) #6
  %77 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %76, <8 x i16> %72) #6
  %78 = add <8 x i16> %77, %18
  %79 = getelementptr inbounds i16, i16* %22, i64 24
  %80 = icmp slt <8 x i16> %78, <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %81 = select <8 x i1> %80, <8 x i16> %78, <8 x i16> <i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023>
  %82 = icmp sgt <8 x i16> %81, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> zeroinitializer
  %84 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %84, align 1
  %85 = getelementptr inbounds i16, i16* %22, i64 %19
  %86 = getelementptr inbounds <2 x i64>, <2 x i64>* %21, i64 4
  %87 = icmp ult <2 x i64>* %86, %15
  br i1 %87, label %20, label %88

88:                                               ; preds = %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 8
  %11 = select i1 %10, i32 %9, i32 4
  br label %12

12:                                               ; preds = %12, %5
  %13 = phi i32 [ %11, %5 ], [ %72, %12 ]
  %14 = phi <4 x i32> [ zeroinitializer, %5 ], [ %71, %12 ]
  %15 = phi i16* [ %8, %5 ], [ %65, %12 ]
  %16 = phi i16* [ %6, %5 ], [ %53, %12 ]
  %17 = bitcast i16* %16 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = getelementptr inbounds i16, i16* %16, i64 %7
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %19, i64 %7
  %23 = add <8 x i16> %21, %18
  %24 = bitcast i16* %22 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %22, i64 %7
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %26, i64 %7
  %30 = add <8 x i16> %28, %25
  %31 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %23, <8 x i16> %30) #6
  %32 = shl <8 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %33 = bitcast <8 x i16> %32 to <2 x i64>
  %34 = extractelement <2 x i64> %33, i32 0
  %35 = bitcast i16* %15 to i64*
  store i64 %34, i64* %35, align 1
  %36 = getelementptr inbounds i16, i16* %15, i64 32
  %37 = bitcast <8 x i16> %32 to <4 x float>
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast i16* %36 to <2 x float>*
  store <2 x float> %38, <2 x float>* %39, align 1
  %40 = getelementptr inbounds i16, i16* %15, i64 64
  %41 = bitcast i16* %29 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %29, i64 %7
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %43, i64 %7
  %47 = add <8 x i16> %45, %42
  %48 = bitcast i16* %46 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %46, i64 %7
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %50, i64 %7
  %54 = add <8 x i16> %52, %49
  %55 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %47, <8 x i16> %54) #6
  %56 = shl <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %57 = bitcast <8 x i16> %56 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  %59 = bitcast i16* %40 to i64*
  store i64 %58, i64* %59, align 1
  %60 = getelementptr inbounds i16, i16* %15, i64 96
  %61 = bitcast <8 x i16> %56 to <4 x float>
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %63 = bitcast i16* %60 to <2 x float>*
  store <2 x float> %62, <2 x float>* %63, align 1
  %64 = add <8 x i16> %56, %32
  %65 = getelementptr inbounds i16, i16* %15, i64 128
  %66 = shufflevector <8 x i16> %64, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add <4 x i32> %14, %67
  %69 = shufflevector <8 x i16> %64, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = bitcast <8 x i16> %69 to <4 x i32>
  %71 = add <4 x i32> %68, %70
  %72 = add nsw i32 %13, -4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %12

74:                                               ; preds = %12
  %75 = bitcast <8 x i16> %56 to <2 x i64>
  %76 = extractelement <2 x i64> %75, i32 1
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %78 = bitcast <2 x i64> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %80 = zext <4 x i16> %79 to <4 x i32>
  br i1 %10, label %81, label %90

81:                                               ; preds = %74, %81
  %82 = phi i16* [ %86, %81 ], [ %65, %74 ]
  %83 = phi <4 x i32> [ %87, %81 ], [ %71, %74 ]
  %84 = phi i32 [ %88, %81 ], [ %9, %74 ]
  %85 = bitcast i16* %82 to i64*
  store i64 %76, i64* %85, align 1
  %86 = getelementptr inbounds i16, i16* %82, i64 32
  %87 = add <4 x i32> %83, %80
  %88 = add nsw i32 %84, 1
  %89 = icmp slt i32 %88, 4
  br i1 %89, label %81, label %90

90:                                               ; preds = %81, %74
  %91 = phi <4 x i32> [ %71, %74 ], [ %87, %81 ]
  %92 = bitcast <4 x i32> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = add <4 x i32> %91, %94
  %96 = bitcast <4 x i32> %95 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %98 = bitcast <16 x i8> %97 to <4 x i32>
  %99 = add <4 x i32> %95, <i32 8, i32 8, i32 8, i32 8>
  %100 = add <4 x i32> %99, %98
  %101 = lshr <4 x i32> %100, <i32 4, i32 4, i32 4, i32 4>
  %102 = bitcast <4 x i32> %101 to <8 x i16>
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast [32 x i16]* %0 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <8 x i16>
  %108 = sub <8 x i16> %107, %103
  %109 = bitcast <8 x i16> %108 to <2 x i64>
  %110 = extractelement <2 x i64> %109, i32 0
  store i64 %110, i64* %104, align 1
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %112 = bitcast i16* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <8 x i16>
  %116 = sub <8 x i16> %115, %103
  %117 = bitcast <8 x i16> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  store i64 %118, i64* %112, align 1
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %120 = bitcast i16* %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = bitcast <2 x i64> %122 to <8 x i16>
  %124 = sub <8 x i16> %123, %103
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  store i64 %126, i64* %120, align 1
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %128 = bitcast i16* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = sub <8 x i16> %131, %103
  %133 = bitcast <8 x i16> %132 to <2 x i64>
  %134 = extractelement <2 x i64> %133, i32 0
  store i64 %134, i64* %128, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 16
  %11 = select i1 %10, i32 %9, i32 8
  br label %12

12:                                               ; preds = %12, %5
  %13 = phi i32 [ %11, %5 ], [ %72, %12 ]
  %14 = phi <4 x i32> [ zeroinitializer, %5 ], [ %71, %12 ]
  %15 = phi i16* [ %8, %5 ], [ %65, %12 ]
  %16 = phi i16* [ %6, %5 ], [ %53, %12 ]
  %17 = bitcast i16* %16 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = getelementptr inbounds i16, i16* %16, i64 %7
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %19, i64 %7
  %23 = add <8 x i16> %21, %18
  %24 = bitcast i16* %22 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %22, i64 %7
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %26, i64 %7
  %30 = add <8 x i16> %28, %25
  %31 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %23, <8 x i16> %30) #6
  %32 = shl <8 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %33 = bitcast <8 x i16> %32 to <2 x i64>
  %34 = extractelement <2 x i64> %33, i32 0
  %35 = bitcast i16* %15 to i64*
  store i64 %34, i64* %35, align 1
  %36 = getelementptr inbounds i16, i16* %15, i64 32
  %37 = bitcast <8 x i16> %32 to <4 x float>
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast i16* %36 to <2 x float>*
  store <2 x float> %38, <2 x float>* %39, align 1
  %40 = getelementptr inbounds i16, i16* %15, i64 64
  %41 = bitcast i16* %29 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %29, i64 %7
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %43, i64 %7
  %47 = add <8 x i16> %45, %42
  %48 = bitcast i16* %46 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %46, i64 %7
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %50, i64 %7
  %54 = add <8 x i16> %52, %49
  %55 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %47, <8 x i16> %54) #6
  %56 = shl <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %57 = bitcast <8 x i16> %56 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  %59 = bitcast i16* %40 to i64*
  store i64 %58, i64* %59, align 1
  %60 = getelementptr inbounds i16, i16* %15, i64 96
  %61 = bitcast <8 x i16> %56 to <4 x float>
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %63 = bitcast i16* %60 to <2 x float>*
  store <2 x float> %62, <2 x float>* %63, align 1
  %64 = add <8 x i16> %56, %32
  %65 = getelementptr inbounds i16, i16* %15, i64 128
  %66 = shufflevector <8 x i16> %64, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add <4 x i32> %14, %67
  %69 = shufflevector <8 x i16> %64, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = bitcast <8 x i16> %69 to <4 x i32>
  %71 = add <4 x i32> %68, %70
  %72 = add nsw i32 %13, -4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %12

74:                                               ; preds = %12
  %75 = bitcast <8 x i16> %56 to <2 x i64>
  %76 = extractelement <2 x i64> %75, i32 1
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %78 = bitcast <2 x i64> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %80 = zext <4 x i16> %79 to <4 x i32>
  br i1 %10, label %81, label %90

81:                                               ; preds = %74, %81
  %82 = phi i16* [ %86, %81 ], [ %65, %74 ]
  %83 = phi <4 x i32> [ %87, %81 ], [ %71, %74 ]
  %84 = phi i32 [ %88, %81 ], [ %9, %74 ]
  %85 = bitcast i16* %82 to i64*
  store i64 %76, i64* %85, align 1
  %86 = getelementptr inbounds i16, i16* %82, i64 32
  %87 = add <4 x i32> %83, %80
  %88 = add nsw i32 %84, 1
  %89 = icmp slt i32 %88, 8
  br i1 %89, label %81, label %90

90:                                               ; preds = %81, %74
  %91 = phi <4 x i32> [ %71, %74 ], [ %87, %81 ]
  %92 = bitcast <4 x i32> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = add <4 x i32> %91, %94
  %96 = bitcast <4 x i32> %95 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %98 = bitcast <16 x i8> %97 to <4 x i32>
  %99 = add <4 x i32> %95, <i32 16, i32 16, i32 16, i32 16>
  %100 = add <4 x i32> %99, %98
  %101 = lshr <4 x i32> %100, <i32 5, i32 5, i32 5, i32 5>
  %102 = bitcast <4 x i32> %101 to <8 x i16>
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast [32 x i16]* %0 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <8 x i16>
  %108 = sub <8 x i16> %107, %103
  %109 = bitcast <8 x i16> %108 to <2 x i64>
  %110 = extractelement <2 x i64> %109, i32 0
  store i64 %110, i64* %104, align 1
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %112 = bitcast i16* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <8 x i16>
  %116 = sub <8 x i16> %115, %103
  %117 = bitcast <8 x i16> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  store i64 %118, i64* %112, align 1
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %120 = bitcast i16* %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = bitcast <2 x i64> %122 to <8 x i16>
  %124 = sub <8 x i16> %123, %103
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  store i64 %126, i64* %120, align 1
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %128 = bitcast i16* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = sub <8 x i16> %131, %103
  %133 = bitcast <8 x i16> %132 to <2 x i64>
  %134 = extractelement <2 x i64> %133, i32 0
  store i64 %134, i64* %128, align 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %136 = bitcast i16* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast <2 x i64> %138 to <8 x i16>
  %140 = sub <8 x i16> %139, %103
  %141 = bitcast <8 x i16> %140 to <2 x i64>
  %142 = extractelement <2 x i64> %141, i32 0
  store i64 %142, i64* %136, align 1
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %144 = bitcast i16* %143 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = insertelement <2 x i64> undef, i64 %145, i32 0
  %147 = bitcast <2 x i64> %146 to <8 x i16>
  %148 = sub <8 x i16> %147, %103
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = extractelement <2 x i64> %149, i32 0
  store i64 %150, i64* %144, align 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %152 = bitcast i16* %151 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = insertelement <2 x i64> undef, i64 %153, i32 0
  %155 = bitcast <2 x i64> %154 to <8 x i16>
  %156 = sub <8 x i16> %155, %103
  %157 = bitcast <8 x i16> %156 to <2 x i64>
  %158 = extractelement <2 x i64> %157, i32 0
  store i64 %158, i64* %152, align 1
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %160 = bitcast i16* %159 to i64*
  %161 = load i64, i64* %160, align 1
  %162 = insertelement <2 x i64> undef, i64 %161, i32 0
  %163 = bitcast <2 x i64> %162 to <8 x i16>
  %164 = sub <8 x i16> %163, %103
  %165 = bitcast <8 x i16> %164 to <2 x i64>
  %166 = extractelement <2 x i64> %165, i32 0
  store i64 %166, i64* %160, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_4xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 32
  %11 = select i1 %10, i32 %9, i32 16
  br label %12

12:                                               ; preds = %12, %5
  %13 = phi i32 [ %11, %5 ], [ %72, %12 ]
  %14 = phi <4 x i32> [ zeroinitializer, %5 ], [ %71, %12 ]
  %15 = phi i16* [ %8, %5 ], [ %65, %12 ]
  %16 = phi i16* [ %6, %5 ], [ %53, %12 ]
  %17 = bitcast i16* %16 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = getelementptr inbounds i16, i16* %16, i64 %7
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %19, i64 %7
  %23 = add <8 x i16> %21, %18
  %24 = bitcast i16* %22 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %22, i64 %7
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %26, i64 %7
  %30 = add <8 x i16> %28, %25
  %31 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %23, <8 x i16> %30) #6
  %32 = shl <8 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %33 = bitcast <8 x i16> %32 to <2 x i64>
  %34 = extractelement <2 x i64> %33, i32 0
  %35 = bitcast i16* %15 to i64*
  store i64 %34, i64* %35, align 1
  %36 = getelementptr inbounds i16, i16* %15, i64 32
  %37 = bitcast <8 x i16> %32 to <4 x float>
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast i16* %36 to <2 x float>*
  store <2 x float> %38, <2 x float>* %39, align 1
  %40 = getelementptr inbounds i16, i16* %15, i64 64
  %41 = bitcast i16* %29 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %29, i64 %7
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %43, i64 %7
  %47 = add <8 x i16> %45, %42
  %48 = bitcast i16* %46 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %46, i64 %7
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %50, i64 %7
  %54 = add <8 x i16> %52, %49
  %55 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %47, <8 x i16> %54) #6
  %56 = shl <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %57 = bitcast <8 x i16> %56 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  %59 = bitcast i16* %40 to i64*
  store i64 %58, i64* %59, align 1
  %60 = getelementptr inbounds i16, i16* %15, i64 96
  %61 = bitcast <8 x i16> %56 to <4 x float>
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %63 = bitcast i16* %60 to <2 x float>*
  store <2 x float> %62, <2 x float>* %63, align 1
  %64 = add <8 x i16> %56, %32
  %65 = getelementptr inbounds i16, i16* %15, i64 128
  %66 = shufflevector <8 x i16> %64, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add <4 x i32> %14, %67
  %69 = shufflevector <8 x i16> %64, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = bitcast <8 x i16> %69 to <4 x i32>
  %71 = add <4 x i32> %68, %70
  %72 = add nsw i32 %13, -4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %12

74:                                               ; preds = %12
  %75 = bitcast <8 x i16> %56 to <2 x i64>
  %76 = extractelement <2 x i64> %75, i32 1
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %78 = bitcast <2 x i64> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %80 = zext <4 x i16> %79 to <4 x i32>
  br i1 %10, label %81, label %90

81:                                               ; preds = %74, %81
  %82 = phi i16* [ %86, %81 ], [ %65, %74 ]
  %83 = phi <4 x i32> [ %87, %81 ], [ %71, %74 ]
  %84 = phi i32 [ %88, %81 ], [ %9, %74 ]
  %85 = bitcast i16* %82 to i64*
  store i64 %76, i64* %85, align 1
  %86 = getelementptr inbounds i16, i16* %82, i64 32
  %87 = add <4 x i32> %83, %80
  %88 = add nsw i32 %84, 1
  %89 = icmp slt i32 %88, 16
  br i1 %89, label %81, label %90

90:                                               ; preds = %81, %74
  %91 = phi <4 x i32> [ %71, %74 ], [ %87, %81 ]
  %92 = bitcast <4 x i32> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = add <4 x i32> %91, %94
  %96 = bitcast <4 x i32> %95 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %98 = bitcast <16 x i8> %97 to <4 x i32>
  %99 = add <4 x i32> %95, <i32 32, i32 32, i32 32, i32 32>
  %100 = add <4 x i32> %99, %98
  %101 = lshr <4 x i32> %100, <i32 6, i32 6, i32 6, i32 6>
  %102 = bitcast <4 x i32> %101 to <8 x i16>
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast [32 x i16]* %0 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <8 x i16>
  %108 = sub <8 x i16> %107, %103
  %109 = bitcast <8 x i16> %108 to <2 x i64>
  %110 = extractelement <2 x i64> %109, i32 0
  store i64 %110, i64* %104, align 1
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %112 = bitcast i16* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <8 x i16>
  %116 = sub <8 x i16> %115, %103
  %117 = bitcast <8 x i16> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  store i64 %118, i64* %112, align 1
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %120 = bitcast i16* %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = bitcast <2 x i64> %122 to <8 x i16>
  %124 = sub <8 x i16> %123, %103
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  store i64 %126, i64* %120, align 1
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %128 = bitcast i16* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = sub <8 x i16> %131, %103
  %133 = bitcast <8 x i16> %132 to <2 x i64>
  %134 = extractelement <2 x i64> %133, i32 0
  store i64 %134, i64* %128, align 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %136 = bitcast i16* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast <2 x i64> %138 to <8 x i16>
  %140 = sub <8 x i16> %139, %103
  %141 = bitcast <8 x i16> %140 to <2 x i64>
  %142 = extractelement <2 x i64> %141, i32 0
  store i64 %142, i64* %136, align 1
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %144 = bitcast i16* %143 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = insertelement <2 x i64> undef, i64 %145, i32 0
  %147 = bitcast <2 x i64> %146 to <8 x i16>
  %148 = sub <8 x i16> %147, %103
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = extractelement <2 x i64> %149, i32 0
  store i64 %150, i64* %144, align 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %152 = bitcast i16* %151 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = insertelement <2 x i64> undef, i64 %153, i32 0
  %155 = bitcast <2 x i64> %154 to <8 x i16>
  %156 = sub <8 x i16> %155, %103
  %157 = bitcast <8 x i16> %156 to <2 x i64>
  %158 = extractelement <2 x i64> %157, i32 0
  store i64 %158, i64* %152, align 1
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %160 = bitcast i16* %159 to i64*
  %161 = load i64, i64* %160, align 1
  %162 = insertelement <2 x i64> undef, i64 %161, i32 0
  %163 = bitcast <2 x i64> %162 to <8 x i16>
  %164 = sub <8 x i16> %163, %103
  %165 = bitcast <8 x i16> %164 to <2 x i64>
  %166 = extractelement <2 x i64> %165, i32 0
  store i64 %166, i64* %160, align 1
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %168 = bitcast i16* %167 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <2 x i64> undef, i64 %169, i32 0
  %171 = bitcast <2 x i64> %170 to <8 x i16>
  %172 = sub <8 x i16> %171, %103
  %173 = bitcast <8 x i16> %172 to <2 x i64>
  %174 = extractelement <2 x i64> %173, i32 0
  store i64 %174, i64* %168, align 1
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %176 = bitcast i16* %175 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = insertelement <2 x i64> undef, i64 %177, i32 0
  %179 = bitcast <2 x i64> %178 to <8 x i16>
  %180 = sub <8 x i16> %179, %103
  %181 = bitcast <8 x i16> %180 to <2 x i64>
  %182 = extractelement <2 x i64> %181, i32 0
  store i64 %182, i64* %176, align 1
  %183 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %184 = bitcast i16* %183 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = sub <8 x i16> %187, %103
  %189 = bitcast <8 x i16> %188 to <2 x i64>
  %190 = extractelement <2 x i64> %189, i32 0
  store i64 %190, i64* %184, align 1
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %192 = bitcast i16* %191 to i64*
  %193 = load i64, i64* %192, align 1
  %194 = insertelement <2 x i64> undef, i64 %193, i32 0
  %195 = bitcast <2 x i64> %194 to <8 x i16>
  %196 = sub <8 x i16> %195, %103
  %197 = bitcast <8 x i16> %196 to <2 x i64>
  %198 = extractelement <2 x i64> %197, i32 0
  store i64 %198, i64* %192, align 1
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %200 = bitcast i16* %199 to i64*
  %201 = load i64, i64* %200, align 1
  %202 = insertelement <2 x i64> undef, i64 %201, i32 0
  %203 = bitcast <2 x i64> %202 to <8 x i16>
  %204 = sub <8 x i16> %203, %103
  %205 = bitcast <8 x i16> %204 to <2 x i64>
  %206 = extractelement <2 x i64> %205, i32 0
  store i64 %206, i64* %200, align 1
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %208 = bitcast i16* %207 to i64*
  %209 = load i64, i64* %208, align 1
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = bitcast <2 x i64> %210 to <8 x i16>
  %212 = sub <8 x i16> %211, %103
  %213 = bitcast <8 x i16> %212 to <2 x i64>
  %214 = extractelement <2 x i64> %213, i32 0
  store i64 %214, i64* %208, align 1
  %215 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %216 = bitcast i16* %215 to i64*
  %217 = load i64, i64* %216, align 1
  %218 = insertelement <2 x i64> undef, i64 %217, i32 0
  %219 = bitcast <2 x i64> %218 to <8 x i16>
  %220 = sub <8 x i16> %219, %103
  %221 = bitcast <8 x i16> %220 to <2 x i64>
  %222 = extractelement <2 x i64> %221, i32 0
  store i64 %222, i64* %216, align 1
  %223 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %224 = bitcast i16* %223 to i64*
  %225 = load i64, i64* %224, align 1
  %226 = insertelement <2 x i64> undef, i64 %225, i32 0
  %227 = bitcast <2 x i64> %226 to <8 x i16>
  %228 = sub <8 x i16> %227, %103
  %229 = bitcast <8 x i16> %228 to <2 x i64>
  %230 = extractelement <2 x i64> %229, i32 0
  store i64 %230, i64* %224, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %10 = ashr i32 %2, 1
  %11 = icmp slt i32 %2, 8
  %12 = select i1 %11, i32 %10, i32 4
  br i1 %6, label %13, label %127

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %107, %13 ], [ %12, %5 ]
  %15 = phi i16* [ %100, %13 ], [ %9, %5 ]
  %16 = phi <4 x i32> [ %106, %13 ], [ zeroinitializer, %5 ]
  %17 = phi i16* [ %89, %13 ], [ %7, %5 ]
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %22 = getelementptr inbounds i16, i16* %17, i64 %8
  %23 = bitcast i16* %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 1
  %25 = bitcast <2 x i64> %24 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %27 = getelementptr inbounds i16, i16* %22, i64 %8
  %28 = bitcast <2 x i64> %19 to <8 x i16>
  %29 = bitcast <2 x i64> %24 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %21 to <8 x i16>
  %32 = bitcast <4 x i32> %26 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %15, i64 32
  %38 = bitcast i16* %27 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 1
  %40 = bitcast <2 x i64> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %42 = getelementptr inbounds i16, i16* %27, i64 %8
  %43 = bitcast i16* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 1
  %45 = bitcast <2 x i64> %44 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %47 = getelementptr inbounds i16, i16* %42, i64 %8
  %48 = bitcast <2 x i64> %39 to <8 x i16>
  %49 = bitcast <2 x i64> %44 to <8 x i16>
  %50 = add <8 x i16> %49, %48
  %51 = bitcast <4 x i32> %41 to <8 x i16>
  %52 = bitcast <4 x i32> %46 to <8 x i16>
  %53 = add <8 x i16> %52, %51
  %54 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %50, <8 x i16> %53) #6
  %55 = shl <8 x i16> %54, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 1
  %57 = add <8 x i16> %55, %35
  %58 = getelementptr inbounds i16, i16* %15, i64 64
  %59 = bitcast i16* %47 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  %61 = bitcast <2 x i64> %60 to <4 x i32>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %63 = getelementptr inbounds i16, i16* %47, i64 %8
  %64 = bitcast i16* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 1
  %66 = bitcast <2 x i64> %65 to <4 x i32>
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %68 = getelementptr inbounds i16, i16* %63, i64 %8
  %69 = bitcast <2 x i64> %60 to <8 x i16>
  %70 = bitcast <2 x i64> %65 to <8 x i16>
  %71 = add <8 x i16> %70, %69
  %72 = bitcast <4 x i32> %62 to <8 x i16>
  %73 = bitcast <4 x i32> %67 to <8 x i16>
  %74 = add <8 x i16> %73, %72
  %75 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %71, <8 x i16> %74) #6
  %76 = shl <8 x i16> %75, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %77 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 1
  %78 = add <8 x i16> %57, %76
  %79 = getelementptr inbounds i16, i16* %15, i64 96
  %80 = bitcast i16* %68 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1
  %82 = bitcast <2 x i64> %81 to <4 x i32>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %84 = getelementptr inbounds i16, i16* %68, i64 %8
  %85 = bitcast i16* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = bitcast <2 x i64> %86 to <4 x i32>
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %89 = getelementptr inbounds i16, i16* %84, i64 %8
  %90 = bitcast <2 x i64> %81 to <8 x i16>
  %91 = bitcast <2 x i64> %86 to <8 x i16>
  %92 = add <8 x i16> %91, %90
  %93 = bitcast <4 x i32> %83 to <8 x i16>
  %94 = bitcast <4 x i32> %88 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %97 = shl <8 x i16> %96, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %98 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 1
  %99 = add <8 x i16> %78, %97
  %100 = getelementptr inbounds i16, i16* %15, i64 128
  %101 = shufflevector <8 x i16> %99, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %102 = zext <4 x i16> %101 to <4 x i32>
  %103 = add <4 x i32> %16, %102
  %104 = shufflevector <8 x i16> %99, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x i16> %104 to <4 x i32>
  %106 = add <4 x i32> %103, %105
  %107 = add nsw i32 %14, -4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %13

109:                                              ; preds = %13
  %110 = shufflevector <8 x i16> %97, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = sext <4 x i16> %110 to <4 x i32>
  %112 = bitcast <8 x i16> %97 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %116 = sext <4 x i16> %115 to <4 x i32>
  %117 = add nsw <4 x i32> %116, %111
  br i1 %11, label %118, label %233

118:                                              ; preds = %109, %118
  %119 = phi <4 x i32> [ %124, %118 ], [ %106, %109 ]
  %120 = phi i16* [ %123, %118 ], [ %100, %109 ]
  %121 = phi i32 [ %125, %118 ], [ %10, %109 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 32
  %124 = add <4 x i32> %117, %119
  %125 = add nsw i32 %121, 1
  %126 = icmp slt i32 %125, 4
  br i1 %126, label %118, label %233

127:                                              ; preds = %5, %127
  %128 = phi i32 [ %213, %127 ], [ %12, %5 ]
  %129 = phi i16* [ %206, %127 ], [ %9, %5 ]
  %130 = phi <4 x i32> [ %212, %127 ], [ zeroinitializer, %5 ]
  %131 = phi i16* [ %199, %127 ], [ %7, %5 ]
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %131, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i16, i16* %131, i64 %8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = getelementptr inbounds i16, i16* %137, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = getelementptr inbounds i16, i16* %137, i64 %8
  %144 = add <8 x i16> %139, %133
  %145 = add <8 x i16> %142, %136
  %146 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %144, <8 x i16> %145) #6
  %147 = shl <8 x i16> %146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %148 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %129, i64 32
  %150 = bitcast i16* %143 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 1
  %152 = getelementptr inbounds i16, i16* %143, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %143, i64 %8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %155, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 1
  %161 = getelementptr inbounds i16, i16* %155, i64 %8
  %162 = add <8 x i16> %157, %151
  %163 = add <8 x i16> %160, %154
  %164 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %162, <8 x i16> %163) #6
  %165 = shl <8 x i16> %164, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %166 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 1
  %167 = add <8 x i16> %165, %147
  %168 = getelementptr inbounds i16, i16* %129, i64 64
  %169 = bitcast i16* %161 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = getelementptr inbounds i16, i16* %161, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = getelementptr inbounds i16, i16* %161, i64 %8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 1
  %177 = getelementptr inbounds i16, i16* %174, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 1
  %180 = getelementptr inbounds i16, i16* %174, i64 %8
  %181 = add <8 x i16> %176, %170
  %182 = add <8 x i16> %179, %173
  %183 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %181, <8 x i16> %182) #6
  %184 = shl <8 x i16> %183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 1
  %186 = add <8 x i16> %167, %184
  %187 = getelementptr inbounds i16, i16* %129, i64 96
  %188 = bitcast i16* %180 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %180, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = getelementptr inbounds i16, i16* %180, i64 %8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = getelementptr inbounds i16, i16* %193, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %193, i64 %8
  %200 = add <8 x i16> %195, %189
  %201 = add <8 x i16> %198, %192
  %202 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %200, <8 x i16> %201) #6
  %203 = shl <8 x i16> %202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %204 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 1
  %205 = add <8 x i16> %186, %203
  %206 = getelementptr inbounds i16, i16* %129, i64 128
  %207 = shufflevector <8 x i16> %205, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %208 = zext <4 x i16> %207 to <4 x i32>
  %209 = add <4 x i32> %130, %208
  %210 = shufflevector <8 x i16> %205, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = bitcast <8 x i16> %210 to <4 x i32>
  %212 = add <4 x i32> %209, %211
  %213 = add nsw i32 %128, -4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %127

215:                                              ; preds = %127
  %216 = shufflevector <8 x i16> %203, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = sext <4 x i16> %216 to <4 x i32>
  %218 = bitcast <8 x i16> %203 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %220 = bitcast <16 x i8> %219 to <8 x i16>
  %221 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %222 = sext <4 x i16> %221 to <4 x i32>
  %223 = add nsw <4 x i32> %222, %217
  br i1 %11, label %224, label %233

224:                                              ; preds = %215, %224
  %225 = phi <4 x i32> [ %230, %224 ], [ %212, %215 ]
  %226 = phi i16* [ %229, %224 ], [ %206, %215 ]
  %227 = phi i32 [ %231, %224 ], [ %10, %215 ]
  %228 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %226, i64 32
  %230 = add <4 x i32> %223, %225
  %231 = add nsw i32 %227, 1
  %232 = icmp slt i32 %231, 4
  br i1 %232, label %224, label %233

233:                                              ; preds = %224, %118, %215, %109
  %234 = phi <4 x i32> [ %106, %109 ], [ %212, %215 ], [ %124, %118 ], [ %230, %224 ]
  %235 = bitcast <4 x i32> %234 to <16 x i8>
  %236 = shufflevector <16 x i8> %235, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %237 = bitcast <16 x i8> %236 to <4 x i32>
  %238 = add <4 x i32> %234, %237
  %239 = bitcast <4 x i32> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %241 = bitcast <16 x i8> %240 to <4 x i32>
  %242 = add <4 x i32> %238, <i32 16, i32 16, i32 16, i32 16>
  %243 = add <4 x i32> %242, %241
  %244 = ashr <4 x i32> %243, <i32 5, i32 5, i32 5, i32 5>
  %245 = bitcast <4 x i32> %244 to <8 x i16>
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = bitcast <8 x i16> %246 to <4 x i32>
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = bitcast <4 x i32> %248 to <8 x i16>
  %250 = bitcast [32 x i16]* %0 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 1
  %252 = sub <8 x i16> %251, %249
  store <8 x i16> %252, <8 x i16>* %250, align 1
  %253 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 1
  %256 = sub <8 x i16> %255, %249
  store <8 x i16> %256, <8 x i16>* %254, align 1
  %257 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 1
  %260 = sub <8 x i16> %259, %249
  store <8 x i16> %260, <8 x i16>* %258, align 1
  %261 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = sub <8 x i16> %263, %249
  store <8 x i16> %264, <8 x i16>* %262, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %10 = ashr i32 %2, 1
  %11 = icmp slt i32 %2, 16
  %12 = select i1 %11, i32 %10, i32 8
  br i1 %6, label %13, label %127

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %107, %13 ], [ %12, %5 ]
  %15 = phi i16* [ %100, %13 ], [ %9, %5 ]
  %16 = phi <4 x i32> [ %106, %13 ], [ zeroinitializer, %5 ]
  %17 = phi i16* [ %89, %13 ], [ %7, %5 ]
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %22 = getelementptr inbounds i16, i16* %17, i64 %8
  %23 = bitcast i16* %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 1
  %25 = bitcast <2 x i64> %24 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %27 = getelementptr inbounds i16, i16* %22, i64 %8
  %28 = bitcast <2 x i64> %19 to <8 x i16>
  %29 = bitcast <2 x i64> %24 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %21 to <8 x i16>
  %32 = bitcast <4 x i32> %26 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %15, i64 32
  %38 = bitcast i16* %27 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 1
  %40 = bitcast <2 x i64> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %42 = getelementptr inbounds i16, i16* %27, i64 %8
  %43 = bitcast i16* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 1
  %45 = bitcast <2 x i64> %44 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %47 = getelementptr inbounds i16, i16* %42, i64 %8
  %48 = bitcast <2 x i64> %39 to <8 x i16>
  %49 = bitcast <2 x i64> %44 to <8 x i16>
  %50 = add <8 x i16> %49, %48
  %51 = bitcast <4 x i32> %41 to <8 x i16>
  %52 = bitcast <4 x i32> %46 to <8 x i16>
  %53 = add <8 x i16> %52, %51
  %54 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %50, <8 x i16> %53) #6
  %55 = shl <8 x i16> %54, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 1
  %57 = add <8 x i16> %55, %35
  %58 = getelementptr inbounds i16, i16* %15, i64 64
  %59 = bitcast i16* %47 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  %61 = bitcast <2 x i64> %60 to <4 x i32>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %63 = getelementptr inbounds i16, i16* %47, i64 %8
  %64 = bitcast i16* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 1
  %66 = bitcast <2 x i64> %65 to <4 x i32>
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %68 = getelementptr inbounds i16, i16* %63, i64 %8
  %69 = bitcast <2 x i64> %60 to <8 x i16>
  %70 = bitcast <2 x i64> %65 to <8 x i16>
  %71 = add <8 x i16> %70, %69
  %72 = bitcast <4 x i32> %62 to <8 x i16>
  %73 = bitcast <4 x i32> %67 to <8 x i16>
  %74 = add <8 x i16> %73, %72
  %75 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %71, <8 x i16> %74) #6
  %76 = shl <8 x i16> %75, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %77 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 1
  %78 = add <8 x i16> %57, %76
  %79 = getelementptr inbounds i16, i16* %15, i64 96
  %80 = bitcast i16* %68 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1
  %82 = bitcast <2 x i64> %81 to <4 x i32>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %84 = getelementptr inbounds i16, i16* %68, i64 %8
  %85 = bitcast i16* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = bitcast <2 x i64> %86 to <4 x i32>
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %89 = getelementptr inbounds i16, i16* %84, i64 %8
  %90 = bitcast <2 x i64> %81 to <8 x i16>
  %91 = bitcast <2 x i64> %86 to <8 x i16>
  %92 = add <8 x i16> %91, %90
  %93 = bitcast <4 x i32> %83 to <8 x i16>
  %94 = bitcast <4 x i32> %88 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %97 = shl <8 x i16> %96, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %98 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 1
  %99 = add <8 x i16> %78, %97
  %100 = getelementptr inbounds i16, i16* %15, i64 128
  %101 = shufflevector <8 x i16> %99, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %102 = zext <4 x i16> %101 to <4 x i32>
  %103 = add <4 x i32> %16, %102
  %104 = shufflevector <8 x i16> %99, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x i16> %104 to <4 x i32>
  %106 = add <4 x i32> %103, %105
  %107 = add nsw i32 %14, -4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %13

109:                                              ; preds = %13
  %110 = shufflevector <8 x i16> %97, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = sext <4 x i16> %110 to <4 x i32>
  %112 = bitcast <8 x i16> %97 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %116 = sext <4 x i16> %115 to <4 x i32>
  %117 = add nsw <4 x i32> %116, %111
  br i1 %11, label %118, label %233

118:                                              ; preds = %109, %118
  %119 = phi <4 x i32> [ %124, %118 ], [ %106, %109 ]
  %120 = phi i16* [ %123, %118 ], [ %100, %109 ]
  %121 = phi i32 [ %125, %118 ], [ %10, %109 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 32
  %124 = add <4 x i32> %117, %119
  %125 = add nsw i32 %121, 1
  %126 = icmp slt i32 %125, 8
  br i1 %126, label %118, label %233

127:                                              ; preds = %5, %127
  %128 = phi i32 [ %213, %127 ], [ %12, %5 ]
  %129 = phi i16* [ %206, %127 ], [ %9, %5 ]
  %130 = phi <4 x i32> [ %212, %127 ], [ zeroinitializer, %5 ]
  %131 = phi i16* [ %199, %127 ], [ %7, %5 ]
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %131, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i16, i16* %131, i64 %8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = getelementptr inbounds i16, i16* %137, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = getelementptr inbounds i16, i16* %137, i64 %8
  %144 = add <8 x i16> %139, %133
  %145 = add <8 x i16> %142, %136
  %146 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %144, <8 x i16> %145) #6
  %147 = shl <8 x i16> %146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %148 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %129, i64 32
  %150 = bitcast i16* %143 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 1
  %152 = getelementptr inbounds i16, i16* %143, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %143, i64 %8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %155, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 1
  %161 = getelementptr inbounds i16, i16* %155, i64 %8
  %162 = add <8 x i16> %157, %151
  %163 = add <8 x i16> %160, %154
  %164 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %162, <8 x i16> %163) #6
  %165 = shl <8 x i16> %164, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %166 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 1
  %167 = add <8 x i16> %165, %147
  %168 = getelementptr inbounds i16, i16* %129, i64 64
  %169 = bitcast i16* %161 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = getelementptr inbounds i16, i16* %161, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = getelementptr inbounds i16, i16* %161, i64 %8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 1
  %177 = getelementptr inbounds i16, i16* %174, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 1
  %180 = getelementptr inbounds i16, i16* %174, i64 %8
  %181 = add <8 x i16> %176, %170
  %182 = add <8 x i16> %179, %173
  %183 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %181, <8 x i16> %182) #6
  %184 = shl <8 x i16> %183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 1
  %186 = add <8 x i16> %167, %184
  %187 = getelementptr inbounds i16, i16* %129, i64 96
  %188 = bitcast i16* %180 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %180, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = getelementptr inbounds i16, i16* %180, i64 %8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = getelementptr inbounds i16, i16* %193, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %193, i64 %8
  %200 = add <8 x i16> %195, %189
  %201 = add <8 x i16> %198, %192
  %202 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %200, <8 x i16> %201) #6
  %203 = shl <8 x i16> %202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %204 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 1
  %205 = add <8 x i16> %186, %203
  %206 = getelementptr inbounds i16, i16* %129, i64 128
  %207 = shufflevector <8 x i16> %205, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %208 = zext <4 x i16> %207 to <4 x i32>
  %209 = add <4 x i32> %130, %208
  %210 = shufflevector <8 x i16> %205, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = bitcast <8 x i16> %210 to <4 x i32>
  %212 = add <4 x i32> %209, %211
  %213 = add nsw i32 %128, -4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %127

215:                                              ; preds = %127
  %216 = shufflevector <8 x i16> %203, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = sext <4 x i16> %216 to <4 x i32>
  %218 = bitcast <8 x i16> %203 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %220 = bitcast <16 x i8> %219 to <8 x i16>
  %221 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %222 = sext <4 x i16> %221 to <4 x i32>
  %223 = add nsw <4 x i32> %222, %217
  br i1 %11, label %224, label %233

224:                                              ; preds = %215, %224
  %225 = phi <4 x i32> [ %230, %224 ], [ %212, %215 ]
  %226 = phi i16* [ %229, %224 ], [ %206, %215 ]
  %227 = phi i32 [ %231, %224 ], [ %10, %215 ]
  %228 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %226, i64 32
  %230 = add <4 x i32> %223, %225
  %231 = add nsw i32 %227, 1
  %232 = icmp slt i32 %231, 8
  br i1 %232, label %224, label %233

233:                                              ; preds = %224, %118, %215, %109
  %234 = phi <4 x i32> [ %106, %109 ], [ %212, %215 ], [ %124, %118 ], [ %230, %224 ]
  %235 = bitcast <4 x i32> %234 to <16 x i8>
  %236 = shufflevector <16 x i8> %235, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %237 = bitcast <16 x i8> %236 to <4 x i32>
  %238 = add <4 x i32> %234, %237
  %239 = bitcast <4 x i32> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %241 = bitcast <16 x i8> %240 to <4 x i32>
  %242 = add <4 x i32> %238, <i32 32, i32 32, i32 32, i32 32>
  %243 = add <4 x i32> %242, %241
  %244 = ashr <4 x i32> %243, <i32 6, i32 6, i32 6, i32 6>
  %245 = bitcast <4 x i32> %244 to <8 x i16>
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = bitcast <8 x i16> %246 to <4 x i32>
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = bitcast <4 x i32> %248 to <8 x i16>
  %250 = bitcast [32 x i16]* %0 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 1
  %252 = sub <8 x i16> %251, %249
  store <8 x i16> %252, <8 x i16>* %250, align 1
  %253 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 1
  %256 = sub <8 x i16> %255, %249
  store <8 x i16> %256, <8 x i16>* %254, align 1
  %257 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 1
  %260 = sub <8 x i16> %259, %249
  store <8 x i16> %260, <8 x i16>* %258, align 1
  %261 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = sub <8 x i16> %263, %249
  store <8 x i16> %264, <8 x i16>* %262, align 1
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 1
  %268 = sub <8 x i16> %267, %249
  store <8 x i16> %268, <8 x i16>* %266, align 1
  %269 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = sub <8 x i16> %271, %249
  store <8 x i16> %272, <8 x i16>* %270, align 1
  %273 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = sub <8 x i16> %275, %249
  store <8 x i16> %276, <8 x i16>* %274, align 1
  %277 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = sub <8 x i16> %279, %249
  store <8 x i16> %280, <8 x i16>* %278, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %10 = ashr i32 %2, 1
  %11 = icmp slt i32 %2, 32
  %12 = select i1 %11, i32 %10, i32 16
  br i1 %6, label %13, label %127

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %107, %13 ], [ %12, %5 ]
  %15 = phi i16* [ %100, %13 ], [ %9, %5 ]
  %16 = phi <4 x i32> [ %106, %13 ], [ zeroinitializer, %5 ]
  %17 = phi i16* [ %89, %13 ], [ %7, %5 ]
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %22 = getelementptr inbounds i16, i16* %17, i64 %8
  %23 = bitcast i16* %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 1
  %25 = bitcast <2 x i64> %24 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %27 = getelementptr inbounds i16, i16* %22, i64 %8
  %28 = bitcast <2 x i64> %19 to <8 x i16>
  %29 = bitcast <2 x i64> %24 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %21 to <8 x i16>
  %32 = bitcast <4 x i32> %26 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %15, i64 32
  %38 = bitcast i16* %27 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 1
  %40 = bitcast <2 x i64> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %42 = getelementptr inbounds i16, i16* %27, i64 %8
  %43 = bitcast i16* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 1
  %45 = bitcast <2 x i64> %44 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %47 = getelementptr inbounds i16, i16* %42, i64 %8
  %48 = bitcast <2 x i64> %39 to <8 x i16>
  %49 = bitcast <2 x i64> %44 to <8 x i16>
  %50 = add <8 x i16> %49, %48
  %51 = bitcast <4 x i32> %41 to <8 x i16>
  %52 = bitcast <4 x i32> %46 to <8 x i16>
  %53 = add <8 x i16> %52, %51
  %54 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %50, <8 x i16> %53) #6
  %55 = shl <8 x i16> %54, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 1
  %57 = add <8 x i16> %55, %35
  %58 = getelementptr inbounds i16, i16* %15, i64 64
  %59 = bitcast i16* %47 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  %61 = bitcast <2 x i64> %60 to <4 x i32>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %63 = getelementptr inbounds i16, i16* %47, i64 %8
  %64 = bitcast i16* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 1
  %66 = bitcast <2 x i64> %65 to <4 x i32>
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %68 = getelementptr inbounds i16, i16* %63, i64 %8
  %69 = bitcast <2 x i64> %60 to <8 x i16>
  %70 = bitcast <2 x i64> %65 to <8 x i16>
  %71 = add <8 x i16> %70, %69
  %72 = bitcast <4 x i32> %62 to <8 x i16>
  %73 = bitcast <4 x i32> %67 to <8 x i16>
  %74 = add <8 x i16> %73, %72
  %75 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %71, <8 x i16> %74) #6
  %76 = shl <8 x i16> %75, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %77 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 1
  %78 = add <8 x i16> %57, %76
  %79 = getelementptr inbounds i16, i16* %15, i64 96
  %80 = bitcast i16* %68 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1
  %82 = bitcast <2 x i64> %81 to <4 x i32>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %84 = getelementptr inbounds i16, i16* %68, i64 %8
  %85 = bitcast i16* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = bitcast <2 x i64> %86 to <4 x i32>
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %89 = getelementptr inbounds i16, i16* %84, i64 %8
  %90 = bitcast <2 x i64> %81 to <8 x i16>
  %91 = bitcast <2 x i64> %86 to <8 x i16>
  %92 = add <8 x i16> %91, %90
  %93 = bitcast <4 x i32> %83 to <8 x i16>
  %94 = bitcast <4 x i32> %88 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %97 = shl <8 x i16> %96, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %98 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 1
  %99 = add <8 x i16> %78, %97
  %100 = getelementptr inbounds i16, i16* %15, i64 128
  %101 = shufflevector <8 x i16> %99, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %102 = zext <4 x i16> %101 to <4 x i32>
  %103 = add <4 x i32> %16, %102
  %104 = shufflevector <8 x i16> %99, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x i16> %104 to <4 x i32>
  %106 = add <4 x i32> %103, %105
  %107 = add nsw i32 %14, -4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %13

109:                                              ; preds = %13
  %110 = shufflevector <8 x i16> %97, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = sext <4 x i16> %110 to <4 x i32>
  %112 = bitcast <8 x i16> %97 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %116 = sext <4 x i16> %115 to <4 x i32>
  %117 = add nsw <4 x i32> %116, %111
  br i1 %11, label %118, label %233

118:                                              ; preds = %109, %118
  %119 = phi <4 x i32> [ %124, %118 ], [ %106, %109 ]
  %120 = phi i16* [ %123, %118 ], [ %100, %109 ]
  %121 = phi i32 [ %125, %118 ], [ %10, %109 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 32
  %124 = add <4 x i32> %117, %119
  %125 = add nsw i32 %121, 1
  %126 = icmp slt i32 %125, 16
  br i1 %126, label %118, label %233

127:                                              ; preds = %5, %127
  %128 = phi i32 [ %213, %127 ], [ %12, %5 ]
  %129 = phi i16* [ %206, %127 ], [ %9, %5 ]
  %130 = phi <4 x i32> [ %212, %127 ], [ zeroinitializer, %5 ]
  %131 = phi i16* [ %199, %127 ], [ %7, %5 ]
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %131, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i16, i16* %131, i64 %8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = getelementptr inbounds i16, i16* %137, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = getelementptr inbounds i16, i16* %137, i64 %8
  %144 = add <8 x i16> %139, %133
  %145 = add <8 x i16> %142, %136
  %146 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %144, <8 x i16> %145) #6
  %147 = shl <8 x i16> %146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %148 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %129, i64 32
  %150 = bitcast i16* %143 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 1
  %152 = getelementptr inbounds i16, i16* %143, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %143, i64 %8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %155, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 1
  %161 = getelementptr inbounds i16, i16* %155, i64 %8
  %162 = add <8 x i16> %157, %151
  %163 = add <8 x i16> %160, %154
  %164 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %162, <8 x i16> %163) #6
  %165 = shl <8 x i16> %164, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %166 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 1
  %167 = add <8 x i16> %165, %147
  %168 = getelementptr inbounds i16, i16* %129, i64 64
  %169 = bitcast i16* %161 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = getelementptr inbounds i16, i16* %161, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = getelementptr inbounds i16, i16* %161, i64 %8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 1
  %177 = getelementptr inbounds i16, i16* %174, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 1
  %180 = getelementptr inbounds i16, i16* %174, i64 %8
  %181 = add <8 x i16> %176, %170
  %182 = add <8 x i16> %179, %173
  %183 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %181, <8 x i16> %182) #6
  %184 = shl <8 x i16> %183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 1
  %186 = add <8 x i16> %167, %184
  %187 = getelementptr inbounds i16, i16* %129, i64 96
  %188 = bitcast i16* %180 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %180, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = getelementptr inbounds i16, i16* %180, i64 %8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = getelementptr inbounds i16, i16* %193, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %193, i64 %8
  %200 = add <8 x i16> %195, %189
  %201 = add <8 x i16> %198, %192
  %202 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %200, <8 x i16> %201) #6
  %203 = shl <8 x i16> %202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %204 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 1
  %205 = add <8 x i16> %186, %203
  %206 = getelementptr inbounds i16, i16* %129, i64 128
  %207 = shufflevector <8 x i16> %205, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %208 = zext <4 x i16> %207 to <4 x i32>
  %209 = add <4 x i32> %130, %208
  %210 = shufflevector <8 x i16> %205, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = bitcast <8 x i16> %210 to <4 x i32>
  %212 = add <4 x i32> %209, %211
  %213 = add nsw i32 %128, -4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %127

215:                                              ; preds = %127
  %216 = shufflevector <8 x i16> %203, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = sext <4 x i16> %216 to <4 x i32>
  %218 = bitcast <8 x i16> %203 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %220 = bitcast <16 x i8> %219 to <8 x i16>
  %221 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %222 = sext <4 x i16> %221 to <4 x i32>
  %223 = add nsw <4 x i32> %222, %217
  br i1 %11, label %224, label %233

224:                                              ; preds = %215, %224
  %225 = phi <4 x i32> [ %230, %224 ], [ %212, %215 ]
  %226 = phi i16* [ %229, %224 ], [ %206, %215 ]
  %227 = phi i32 [ %231, %224 ], [ %10, %215 ]
  %228 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %226, i64 32
  %230 = add <4 x i32> %223, %225
  %231 = add nsw i32 %227, 1
  %232 = icmp slt i32 %231, 16
  br i1 %232, label %224, label %233

233:                                              ; preds = %224, %118, %215, %109
  %234 = phi <4 x i32> [ %106, %109 ], [ %212, %215 ], [ %124, %118 ], [ %230, %224 ]
  %235 = bitcast <4 x i32> %234 to <16 x i8>
  %236 = shufflevector <16 x i8> %235, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %237 = bitcast <16 x i8> %236 to <4 x i32>
  %238 = add <4 x i32> %234, %237
  %239 = bitcast <4 x i32> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %241 = bitcast <16 x i8> %240 to <4 x i32>
  %242 = add <4 x i32> %238, <i32 64, i32 64, i32 64, i32 64>
  %243 = add <4 x i32> %242, %241
  %244 = ashr <4 x i32> %243, <i32 7, i32 7, i32 7, i32 7>
  %245 = bitcast <4 x i32> %244 to <8 x i16>
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = bitcast <8 x i16> %246 to <4 x i32>
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = bitcast <4 x i32> %248 to <8 x i16>
  %250 = bitcast [32 x i16]* %0 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 1
  %252 = sub <8 x i16> %251, %249
  store <8 x i16> %252, <8 x i16>* %250, align 1
  %253 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 1
  %256 = sub <8 x i16> %255, %249
  store <8 x i16> %256, <8 x i16>* %254, align 1
  %257 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 1
  %260 = sub <8 x i16> %259, %249
  store <8 x i16> %260, <8 x i16>* %258, align 1
  %261 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = sub <8 x i16> %263, %249
  store <8 x i16> %264, <8 x i16>* %262, align 1
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 1
  %268 = sub <8 x i16> %267, %249
  store <8 x i16> %268, <8 x i16>* %266, align 1
  %269 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = sub <8 x i16> %271, %249
  store <8 x i16> %272, <8 x i16>* %270, align 1
  %273 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = sub <8 x i16> %275, %249
  store <8 x i16> %276, <8 x i16>* %274, align 1
  %277 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = sub <8 x i16> %279, %249
  store <8 x i16> %280, <8 x i16>* %278, align 1
  %281 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = sub <8 x i16> %283, %249
  store <8 x i16> %284, <8 x i16>* %282, align 1
  %285 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = sub <8 x i16> %287, %249
  store <8 x i16> %288, <8 x i16>* %286, align 1
  %289 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = sub <8 x i16> %291, %249
  store <8 x i16> %292, <8 x i16>* %290, align 1
  %293 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 1
  %296 = sub <8 x i16> %295, %249
  store <8 x i16> %296, <8 x i16>* %294, align 1
  %297 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 1
  %300 = sub <8 x i16> %299, %249
  store <8 x i16> %300, <8 x i16>* %298, align 1
  %301 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 1
  %304 = sub <8 x i16> %303, %249
  store <8 x i16> %304, <8 x i16>* %302, align 1
  %305 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 1
  %308 = sub <8 x i16> %307, %249
  store <8 x i16> %308, <8 x i16>* %306, align 1
  %309 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %310 = bitcast i16* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 1
  %312 = sub <8 x i16> %311, %249
  store <8 x i16> %312, <8 x i16>* %310, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_8xH_SSE4_1ILi5EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  %6 = icmp eq i32 %1, 8
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %10 = ashr i32 %2, 1
  %11 = icmp slt i32 %2, 64
  %12 = select i1 %11, i32 %10, i32 32
  br i1 %6, label %13, label %127

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %107, %13 ], [ %12, %5 ]
  %15 = phi i16* [ %100, %13 ], [ %9, %5 ]
  %16 = phi <4 x i32> [ %106, %13 ], [ zeroinitializer, %5 ]
  %17 = phi i16* [ %89, %13 ], [ %7, %5 ]
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %22 = getelementptr inbounds i16, i16* %17, i64 %8
  %23 = bitcast i16* %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 1
  %25 = bitcast <2 x i64> %24 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %27 = getelementptr inbounds i16, i16* %22, i64 %8
  %28 = bitcast <2 x i64> %19 to <8 x i16>
  %29 = bitcast <2 x i64> %24 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %21 to <8 x i16>
  %32 = bitcast <4 x i32> %26 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %15, i64 32
  %38 = bitcast i16* %27 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 1
  %40 = bitcast <2 x i64> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %42 = getelementptr inbounds i16, i16* %27, i64 %8
  %43 = bitcast i16* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 1
  %45 = bitcast <2 x i64> %44 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %47 = getelementptr inbounds i16, i16* %42, i64 %8
  %48 = bitcast <2 x i64> %39 to <8 x i16>
  %49 = bitcast <2 x i64> %44 to <8 x i16>
  %50 = add <8 x i16> %49, %48
  %51 = bitcast <4 x i32> %41 to <8 x i16>
  %52 = bitcast <4 x i32> %46 to <8 x i16>
  %53 = add <8 x i16> %52, %51
  %54 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %50, <8 x i16> %53) #6
  %55 = shl <8 x i16> %54, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 1
  %57 = add <8 x i16> %55, %35
  %58 = getelementptr inbounds i16, i16* %15, i64 64
  %59 = bitcast i16* %47 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  %61 = bitcast <2 x i64> %60 to <4 x i32>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %63 = getelementptr inbounds i16, i16* %47, i64 %8
  %64 = bitcast i16* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 1
  %66 = bitcast <2 x i64> %65 to <4 x i32>
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %68 = getelementptr inbounds i16, i16* %63, i64 %8
  %69 = bitcast <2 x i64> %60 to <8 x i16>
  %70 = bitcast <2 x i64> %65 to <8 x i16>
  %71 = add <8 x i16> %70, %69
  %72 = bitcast <4 x i32> %62 to <8 x i16>
  %73 = bitcast <4 x i32> %67 to <8 x i16>
  %74 = add <8 x i16> %73, %72
  %75 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %71, <8 x i16> %74) #6
  %76 = shl <8 x i16> %75, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %77 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 1
  %78 = add <8 x i16> %57, %76
  %79 = getelementptr inbounds i16, i16* %15, i64 96
  %80 = bitcast i16* %68 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1
  %82 = bitcast <2 x i64> %81 to <4 x i32>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %84 = getelementptr inbounds i16, i16* %68, i64 %8
  %85 = bitcast i16* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = bitcast <2 x i64> %86 to <4 x i32>
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %89 = getelementptr inbounds i16, i16* %84, i64 %8
  %90 = bitcast <2 x i64> %81 to <8 x i16>
  %91 = bitcast <2 x i64> %86 to <8 x i16>
  %92 = add <8 x i16> %91, %90
  %93 = bitcast <4 x i32> %83 to <8 x i16>
  %94 = bitcast <4 x i32> %88 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %97 = shl <8 x i16> %96, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %98 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 1
  %99 = add <8 x i16> %78, %97
  %100 = getelementptr inbounds i16, i16* %15, i64 128
  %101 = shufflevector <8 x i16> %99, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %102 = zext <4 x i16> %101 to <4 x i32>
  %103 = add <4 x i32> %16, %102
  %104 = shufflevector <8 x i16> %99, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x i16> %104 to <4 x i32>
  %106 = add <4 x i32> %103, %105
  %107 = add nsw i32 %14, -4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %13

109:                                              ; preds = %13
  %110 = shufflevector <8 x i16> %97, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = sext <4 x i16> %110 to <4 x i32>
  %112 = bitcast <8 x i16> %97 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %116 = sext <4 x i16> %115 to <4 x i32>
  %117 = add nsw <4 x i32> %116, %111
  br i1 %11, label %118, label %233

118:                                              ; preds = %109, %118
  %119 = phi <4 x i32> [ %124, %118 ], [ %106, %109 ]
  %120 = phi i16* [ %123, %118 ], [ %100, %109 ]
  %121 = phi i32 [ %125, %118 ], [ %10, %109 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 32
  %124 = add <4 x i32> %117, %119
  %125 = add nsw i32 %121, 1
  %126 = icmp slt i32 %125, 32
  br i1 %126, label %118, label %233

127:                                              ; preds = %5, %127
  %128 = phi i32 [ %213, %127 ], [ %12, %5 ]
  %129 = phi i16* [ %206, %127 ], [ %9, %5 ]
  %130 = phi <4 x i32> [ %212, %127 ], [ zeroinitializer, %5 ]
  %131 = phi i16* [ %199, %127 ], [ %7, %5 ]
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %131, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = getelementptr inbounds i16, i16* %131, i64 %8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 1
  %140 = getelementptr inbounds i16, i16* %137, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = getelementptr inbounds i16, i16* %137, i64 %8
  %144 = add <8 x i16> %139, %133
  %145 = add <8 x i16> %142, %136
  %146 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %144, <8 x i16> %145) #6
  %147 = shl <8 x i16> %146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %148 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 1
  %149 = getelementptr inbounds i16, i16* %129, i64 32
  %150 = bitcast i16* %143 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 1
  %152 = getelementptr inbounds i16, i16* %143, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %143, i64 %8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %155, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 1
  %161 = getelementptr inbounds i16, i16* %155, i64 %8
  %162 = add <8 x i16> %157, %151
  %163 = add <8 x i16> %160, %154
  %164 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %162, <8 x i16> %163) #6
  %165 = shl <8 x i16> %164, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %166 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 1
  %167 = add <8 x i16> %165, %147
  %168 = getelementptr inbounds i16, i16* %129, i64 64
  %169 = bitcast i16* %161 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = getelementptr inbounds i16, i16* %161, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 1
  %174 = getelementptr inbounds i16, i16* %161, i64 %8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 1
  %177 = getelementptr inbounds i16, i16* %174, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 1
  %180 = getelementptr inbounds i16, i16* %174, i64 %8
  %181 = add <8 x i16> %176, %170
  %182 = add <8 x i16> %179, %173
  %183 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %181, <8 x i16> %182) #6
  %184 = shl <8 x i16> %183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 1
  %186 = add <8 x i16> %167, %184
  %187 = getelementptr inbounds i16, i16* %129, i64 96
  %188 = bitcast i16* %180 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %180, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = getelementptr inbounds i16, i16* %180, i64 %8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = getelementptr inbounds i16, i16* %193, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %193, i64 %8
  %200 = add <8 x i16> %195, %189
  %201 = add <8 x i16> %198, %192
  %202 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %200, <8 x i16> %201) #6
  %203 = shl <8 x i16> %202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %204 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 1
  %205 = add <8 x i16> %186, %203
  %206 = getelementptr inbounds i16, i16* %129, i64 128
  %207 = shufflevector <8 x i16> %205, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %208 = zext <4 x i16> %207 to <4 x i32>
  %209 = add <4 x i32> %130, %208
  %210 = shufflevector <8 x i16> %205, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = bitcast <8 x i16> %210 to <4 x i32>
  %212 = add <4 x i32> %209, %211
  %213 = add nsw i32 %128, -4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %127

215:                                              ; preds = %127
  %216 = shufflevector <8 x i16> %203, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = sext <4 x i16> %216 to <4 x i32>
  %218 = bitcast <8 x i16> %203 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %220 = bitcast <16 x i8> %219 to <8 x i16>
  %221 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %222 = sext <4 x i16> %221 to <4 x i32>
  %223 = add nsw <4 x i32> %222, %217
  br i1 %11, label %224, label %233

224:                                              ; preds = %215, %224
  %225 = phi <4 x i32> [ %230, %224 ], [ %212, %215 ]
  %226 = phi i16* [ %229, %224 ], [ %206, %215 ]
  %227 = phi i32 [ %231, %224 ], [ %10, %215 ]
  %228 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %228, align 1
  %229 = getelementptr inbounds i16, i16* %226, i64 32
  %230 = add <4 x i32> %223, %225
  %231 = add nsw i32 %227, 1
  %232 = icmp slt i32 %231, 32
  br i1 %232, label %224, label %233

233:                                              ; preds = %224, %118, %215, %109
  %234 = phi <4 x i32> [ %106, %109 ], [ %212, %215 ], [ %124, %118 ], [ %230, %224 ]
  %235 = bitcast <4 x i32> %234 to <16 x i8>
  %236 = shufflevector <16 x i8> %235, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %237 = bitcast <16 x i8> %236 to <4 x i32>
  %238 = add <4 x i32> %234, %237
  %239 = bitcast <4 x i32> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %241 = bitcast <16 x i8> %240 to <4 x i32>
  %242 = add <4 x i32> %238, <i32 128, i32 128, i32 128, i32 128>
  %243 = add <4 x i32> %242, %241
  %244 = ashr <4 x i32> %243, <i32 8, i32 8, i32 8, i32 8>
  %245 = bitcast <4 x i32> %244 to <8 x i16>
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = bitcast <8 x i16> %246 to <4 x i32>
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> zeroinitializer
  %249 = bitcast <4 x i32> %248 to <8 x i16>
  %250 = bitcast [32 x i16]* %0 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 1
  %252 = sub <8 x i16> %251, %249
  store <8 x i16> %252, <8 x i16>* %250, align 1
  %253 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 1
  %256 = sub <8 x i16> %255, %249
  store <8 x i16> %256, <8 x i16>* %254, align 1
  %257 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 1
  %260 = sub <8 x i16> %259, %249
  store <8 x i16> %260, <8 x i16>* %258, align 1
  %261 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = sub <8 x i16> %263, %249
  store <8 x i16> %264, <8 x i16>* %262, align 1
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 1
  %268 = sub <8 x i16> %267, %249
  store <8 x i16> %268, <8 x i16>* %266, align 1
  %269 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = sub <8 x i16> %271, %249
  store <8 x i16> %272, <8 x i16>* %270, align 1
  %273 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = sub <8 x i16> %275, %249
  store <8 x i16> %276, <8 x i16>* %274, align 1
  %277 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = sub <8 x i16> %279, %249
  store <8 x i16> %280, <8 x i16>* %278, align 1
  %281 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = sub <8 x i16> %283, %249
  store <8 x i16> %284, <8 x i16>* %282, align 1
  %285 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = sub <8 x i16> %287, %249
  store <8 x i16> %288, <8 x i16>* %286, align 1
  %289 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 1
  %292 = sub <8 x i16> %291, %249
  store <8 x i16> %292, <8 x i16>* %290, align 1
  %293 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 1
  %296 = sub <8 x i16> %295, %249
  store <8 x i16> %296, <8 x i16>* %294, align 1
  %297 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 1
  %300 = sub <8 x i16> %299, %249
  store <8 x i16> %300, <8 x i16>* %298, align 1
  %301 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 1
  %304 = sub <8 x i16> %303, %249
  store <8 x i16> %304, <8 x i16>* %302, align 1
  %305 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 1
  %308 = sub <8 x i16> %307, %249
  store <8 x i16> %308, <8 x i16>* %306, align 1
  %309 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %310 = bitcast i16* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 1
  %312 = sub <8 x i16> %311, %249
  store <8 x i16> %312, <8 x i16>* %310, align 1
  %313 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 512
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 1
  %316 = sub <8 x i16> %315, %249
  store <8 x i16> %316, <8 x i16>* %314, align 1
  %317 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 544
  %318 = bitcast i16* %317 to <8 x i16>*
  %319 = load <8 x i16>, <8 x i16>* %318, align 1
  %320 = sub <8 x i16> %319, %249
  store <8 x i16> %320, <8 x i16>* %318, align 1
  %321 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 576
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 1
  %324 = sub <8 x i16> %323, %249
  store <8 x i16> %324, <8 x i16>* %322, align 1
  %325 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 608
  %326 = bitcast i16* %325 to <8 x i16>*
  %327 = load <8 x i16>, <8 x i16>* %326, align 1
  %328 = sub <8 x i16> %327, %249
  store <8 x i16> %328, <8 x i16>* %326, align 1
  %329 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 640
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 1
  %332 = sub <8 x i16> %331, %249
  store <8 x i16> %332, <8 x i16>* %330, align 1
  %333 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 672
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 1
  %336 = sub <8 x i16> %335, %249
  store <8 x i16> %336, <8 x i16>* %334, align 1
  %337 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 704
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 1
  %340 = sub <8 x i16> %339, %249
  store <8 x i16> %340, <8 x i16>* %338, align 1
  %341 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 736
  %342 = bitcast i16* %341 to <8 x i16>*
  %343 = load <8 x i16>, <8 x i16>* %342, align 1
  %344 = sub <8 x i16> %343, %249
  store <8 x i16> %344, <8 x i16>* %342, align 1
  %345 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 768
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 1
  %348 = sub <8 x i16> %347, %249
  store <8 x i16> %348, <8 x i16>* %346, align 1
  %349 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 800
  %350 = bitcast i16* %349 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 1
  %352 = sub <8 x i16> %351, %249
  store <8 x i16> %352, <8 x i16>* %350, align 1
  %353 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 832
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 1
  %356 = sub <8 x i16> %355, %249
  store <8 x i16> %356, <8 x i16>* %354, align 1
  %357 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 864
  %358 = bitcast i16* %357 to <8 x i16>*
  %359 = load <8 x i16>, <8 x i16>* %358, align 1
  %360 = sub <8 x i16> %359, %249
  store <8 x i16> %360, <8 x i16>* %358, align 1
  %361 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 896
  %362 = bitcast i16* %361 to <8 x i16>*
  %363 = load <8 x i16>, <8 x i16>* %362, align 1
  %364 = sub <8 x i16> %363, %249
  store <8 x i16> %364, <8 x i16>* %362, align 1
  %365 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 928
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 1
  %368 = sub <8 x i16> %367, %249
  store <8 x i16> %368, <8 x i16>* %366, align 1
  %369 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 960
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 1
  %372 = sub <8 x i16> %371, %249
  store <8 x i16> %372, <8 x i16>* %370, align 1
  %373 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 992
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 1
  %376 = sub <8 x i16> %375, %249
  store <8 x i16> %376, <8 x i16>* %374, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi2EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %201 [
    i32 8, label %6
    i32 16, label %64
    i32 24, label %129
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 8
  %11 = select i1 %10, i32 %9, i32 4
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %50, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %49, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %48, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %17
  %48 = getelementptr inbounds i16, i16* %18, i64 %13
  %49 = getelementptr inbounds i16, i16* %16, i64 32
  %50 = add nsw i32 %15, -1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %14

52:                                               ; preds = %14
  br i1 %10, label %53, label %271

53:                                               ; preds = %52, %53
  %54 = phi i32 [ %62, %53 ], [ %9, %52 ]
  %55 = phi i16* [ %60, %53 ], [ %49, %52 ]
  %56 = phi <4 x i32> [ %61, %53 ], [ %47, %52 ]
  %57 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %57, align 1
  %58 = getelementptr inbounds i16, i16* %55, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %55, i64 32
  %61 = add <4 x i32> %46, %56
  %62 = add nsw i32 %54, 1
  %63 = icmp slt i32 %62, 4
  br i1 %63, label %53, label %271

64:                                               ; preds = %5
  %65 = bitcast i8* %3 to i16*
  %66 = lshr i64 %4, 1
  %67 = ashr i32 %2, 1
  %68 = icmp slt i32 %2, 8
  %69 = select i1 %68, i32 %67, i32 4
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %71 = and i64 %4, -2
  br label %72

72:                                               ; preds = %72, %64
  %73 = phi i32 [ %69, %64 ], [ %115, %72 ]
  %74 = phi i16* [ %70, %64 ], [ %114, %72 ]
  %75 = phi <4 x i32> [ zeroinitializer, %64 ], [ %112, %72 ]
  %76 = phi i16* [ %65, %64 ], [ %113, %72 ]
  %77 = getelementptr inbounds i16, i16* %76, i64 %66
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 1
  %83 = bitcast <2 x i64> %82 to <4 x i32>
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %85 = bitcast i16* %77 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %77, i64 8
  %88 = bitcast i16* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 1
  %90 = bitcast <2 x i64> %89 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %92 = add <8 x i16> %86, %79
  %93 = bitcast <2 x i64> %82 to <8 x i16>
  %94 = bitcast <2 x i64> %89 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = bitcast <4 x i32> %84 to <8 x i16>
  %97 = bitcast <4 x i32> %91 to <8 x i16>
  %98 = add <8 x i16> %97, %96
  %99 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %100 = shl <8 x i16> %99, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %101 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 1
  %102 = getelementptr inbounds i16, i16* %74, i64 8
  %103 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %98, <8 x i16> %98) #6
  %104 = shl <8 x i16> %103, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 1
  %106 = add <8 x i16> %104, %100
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %108 = zext <4 x i16> %107 to <4 x i32>
  %109 = shufflevector <8 x i16> %106, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = add <4 x i32> %110, %108
  %112 = add <4 x i32> %111, %75
  %113 = getelementptr inbounds i16, i16* %76, i64 %71
  %114 = getelementptr inbounds i16, i16* %74, i64 32
  %115 = add nsw i32 %73, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %72

117:                                              ; preds = %72
  br i1 %68, label %118, label %271

118:                                              ; preds = %117, %118
  %119 = phi i32 [ %127, %118 ], [ %67, %117 ]
  %120 = phi i16* [ %125, %118 ], [ %114, %117 ]
  %121 = phi <4 x i32> [ %126, %118 ], [ %112, %117 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %120, i64 32
  %126 = add <4 x i32> %111, %121
  %127 = add nsw i32 %119, 1
  %128 = icmp slt i32 %127, 4
  br i1 %128, label %118, label %271

129:                                              ; preds = %5
  %130 = bitcast i8* %3 to i16*
  %131 = lshr i64 %4, 1
  %132 = ashr i32 %2, 1
  %133 = icmp slt i32 %2, 8
  %134 = select i1 %133, i32 %132, i32 4
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %136 = and i64 %4, -2
  br label %137

137:                                              ; preds = %137, %129
  %138 = phi i32 [ %134, %129 ], [ %187, %137 ]
  %139 = phi i16* [ %135, %129 ], [ %186, %137 ]
  %140 = phi <4 x i32> [ zeroinitializer, %129 ], [ %184, %137 ]
  %141 = phi i16* [ %130, %129 ], [ %185, %137 ]
  %142 = getelementptr inbounds i16, i16* %141, i64 %131
  %143 = bitcast i16* %141 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 1
  %145 = getelementptr inbounds i16, i16* %141, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = getelementptr inbounds i16, i16* %141, i64 16
  %149 = bitcast i16* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1
  %151 = bitcast <2 x i64> %150 to <4 x i32>
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %153 = bitcast i16* %142 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %142, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %142, i64 16
  %159 = bitcast i16* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 1
  %161 = bitcast <2 x i64> %160 to <4 x i32>
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %163 = add <8 x i16> %154, %144
  %164 = add <8 x i16> %157, %147
  %165 = bitcast <2 x i64> %150 to <8 x i16>
  %166 = bitcast <2 x i64> %160 to <8 x i16>
  %167 = add <8 x i16> %166, %165
  %168 = bitcast <4 x i32> %152 to <8 x i16>
  %169 = bitcast <4 x i32> %162 to <8 x i16>
  %170 = add <8 x i16> %169, %168
  %171 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %163, <8 x i16> %164) #6
  %172 = shl <8 x i16> %171, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %173 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %139, i64 8
  %175 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %167, <8 x i16> %170) #6
  %176 = shl <8 x i16> %175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %177 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 1
  %178 = add <8 x i16> %176, %172
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %180 = zext <4 x i16> %179 to <4 x i32>
  %181 = shufflevector <8 x i16> %178, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %182 = bitcast <8 x i16> %181 to <4 x i32>
  %183 = add <4 x i32> %182, %180
  %184 = add <4 x i32> %183, %140
  %185 = getelementptr inbounds i16, i16* %141, i64 %136
  %186 = getelementptr inbounds i16, i16* %139, i64 32
  %187 = add nsw i32 %138, -1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %137

189:                                              ; preds = %137
  br i1 %133, label %190, label %271

190:                                              ; preds = %189, %190
  %191 = phi i32 [ %199, %190 ], [ %132, %189 ]
  %192 = phi i16* [ %197, %190 ], [ %186, %189 ]
  %193 = phi <4 x i32> [ %198, %190 ], [ %184, %189 ]
  %194 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %194, align 1
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %196, align 1
  %197 = getelementptr inbounds i16, i16* %192, i64 32
  %198 = add <4 x i32> %183, %193
  %199 = add nsw i32 %191, 1
  %200 = icmp slt i32 %199, 4
  br i1 %200, label %190, label %271

201:                                              ; preds = %5
  %202 = bitcast i8* %3 to i16*
  %203 = lshr i64 %4, 1
  %204 = ashr i32 %2, 1
  %205 = icmp slt i32 %2, 8
  %206 = select i1 %205, i32 %204, i32 4
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %208 = and i64 %4, -2
  br label %209

209:                                              ; preds = %209, %201
  %210 = phi i32 [ %206, %201 ], [ %257, %209 ]
  %211 = phi i16* [ %207, %201 ], [ %256, %209 ]
  %212 = phi <4 x i32> [ zeroinitializer, %201 ], [ %254, %209 ]
  %213 = phi i16* [ %202, %201 ], [ %255, %209 ]
  %214 = getelementptr inbounds i16, i16* %213, i64 %203
  %215 = bitcast i16* %213 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 1
  %217 = getelementptr inbounds i16, i16* %213, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 1
  %220 = getelementptr inbounds i16, i16* %213, i64 16
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 1
  %223 = getelementptr inbounds i16, i16* %213, i64 24
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 1
  %226 = bitcast i16* %214 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 1
  %228 = getelementptr inbounds i16, i16* %214, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 1
  %231 = getelementptr inbounds i16, i16* %214, i64 16
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = getelementptr inbounds i16, i16* %214, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 1
  %237 = add <8 x i16> %227, %216
  %238 = add <8 x i16> %230, %219
  %239 = add <8 x i16> %233, %222
  %240 = add <8 x i16> %236, %225
  %241 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %237, <8 x i16> %238) #6
  %242 = shl <8 x i16> %241, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %243 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %211, i64 8
  %245 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %239, <8 x i16> %240) #6
  %246 = shl <8 x i16> %245, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %247 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %247, align 1
  %248 = add <8 x i16> %246, %242
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = zext <4 x i16> %249 to <4 x i32>
  %251 = shufflevector <8 x i16> %248, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %252 = bitcast <8 x i16> %251 to <4 x i32>
  %253 = add <4 x i32> %252, %250
  %254 = add <4 x i32> %253, %212
  %255 = getelementptr inbounds i16, i16* %213, i64 %208
  %256 = getelementptr inbounds i16, i16* %211, i64 32
  %257 = add nsw i32 %210, -1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %209

259:                                              ; preds = %209
  br i1 %205, label %260, label %271

260:                                              ; preds = %259, %260
  %261 = phi i32 [ %269, %260 ], [ %204, %259 ]
  %262 = phi i16* [ %267, %260 ], [ %256, %259 ]
  %263 = phi <4 x i32> [ %268, %260 ], [ %254, %259 ]
  %264 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %264, align 1
  %265 = getelementptr inbounds i16, i16* %262, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %266, align 1
  %267 = getelementptr inbounds i16, i16* %262, i64 32
  %268 = add <4 x i32> %253, %263
  %269 = add nsw i32 %261, 1
  %270 = icmp slt i32 %269, 4
  br i1 %270, label %260, label %271

271:                                              ; preds = %190, %118, %53, %260, %259, %189, %117, %52
  %272 = phi <4 x i32> [ %47, %52 ], [ %112, %117 ], [ %184, %189 ], [ %254, %259 ], [ %268, %260 ], [ %61, %53 ], [ %126, %118 ], [ %198, %190 ]
  %273 = bitcast <4 x i32> %272 to <16 x i8>
  %274 = shufflevector <16 x i8> %273, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %275 = bitcast <16 x i8> %274 to <4 x i32>
  %276 = add <4 x i32> %272, %275
  %277 = bitcast <4 x i32> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %279 = bitcast <16 x i8> %278 to <4 x i32>
  %280 = add <4 x i32> %276, <i32 32, i32 32, i32 32, i32 32>
  %281 = add <4 x i32> %280, %279
  %282 = ashr <4 x i32> %281, <i32 6, i32 6, i32 6, i32 6>
  %283 = bitcast <4 x i32> %282 to <8 x i16>
  %284 = shufflevector <8 x i16> %283, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %285 = bitcast <8 x i16> %284 to <4 x i32>
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> zeroinitializer
  %287 = bitcast <4 x i32> %286 to <8 x i16>
  %288 = bitcast [32 x i16]* %0 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 1
  %290 = sub <8 x i16> %289, %287
  store <8 x i16> %290, <8 x i16>* %288, align 1
  %291 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = sub <8 x i16> %293, %287
  store <8 x i16> %294, <8 x i16>* %292, align 1
  %295 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = sub <8 x i16> %297, %287
  store <8 x i16> %298, <8 x i16>* %296, align 1
  %299 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 1
  %302 = sub <8 x i16> %301, %287
  store <8 x i16> %302, <8 x i16>* %300, align 1
  %303 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 1
  %306 = sub <8 x i16> %305, %287
  store <8 x i16> %306, <8 x i16>* %304, align 1
  %307 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %308 = bitcast i16* %307 to <8 x i16>*
  %309 = load <8 x i16>, <8 x i16>* %308, align 1
  %310 = sub <8 x i16> %309, %287
  store <8 x i16> %310, <8 x i16>* %308, align 1
  %311 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 1
  %314 = sub <8 x i16> %313, %287
  store <8 x i16> %314, <8 x i16>* %312, align 1
  %315 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 1
  %318 = sub <8 x i16> %317, %287
  store <8 x i16> %318, <8 x i16>* %316, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi3EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %201 [
    i32 8, label %6
    i32 16, label %64
    i32 24, label %129
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 16
  %11 = select i1 %10, i32 %9, i32 8
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %50, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %49, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %48, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %17
  %48 = getelementptr inbounds i16, i16* %18, i64 %13
  %49 = getelementptr inbounds i16, i16* %16, i64 32
  %50 = add nsw i32 %15, -1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %14

52:                                               ; preds = %14
  br i1 %10, label %53, label %271

53:                                               ; preds = %52, %53
  %54 = phi i32 [ %62, %53 ], [ %9, %52 ]
  %55 = phi i16* [ %60, %53 ], [ %49, %52 ]
  %56 = phi <4 x i32> [ %61, %53 ], [ %47, %52 ]
  %57 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %57, align 1
  %58 = getelementptr inbounds i16, i16* %55, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %55, i64 32
  %61 = add <4 x i32> %46, %56
  %62 = add nsw i32 %54, 1
  %63 = icmp slt i32 %62, 8
  br i1 %63, label %53, label %271

64:                                               ; preds = %5
  %65 = bitcast i8* %3 to i16*
  %66 = lshr i64 %4, 1
  %67 = ashr i32 %2, 1
  %68 = icmp slt i32 %2, 16
  %69 = select i1 %68, i32 %67, i32 8
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %71 = and i64 %4, -2
  br label %72

72:                                               ; preds = %72, %64
  %73 = phi i32 [ %69, %64 ], [ %115, %72 ]
  %74 = phi i16* [ %70, %64 ], [ %114, %72 ]
  %75 = phi <4 x i32> [ zeroinitializer, %64 ], [ %112, %72 ]
  %76 = phi i16* [ %65, %64 ], [ %113, %72 ]
  %77 = getelementptr inbounds i16, i16* %76, i64 %66
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 1
  %83 = bitcast <2 x i64> %82 to <4 x i32>
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %85 = bitcast i16* %77 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %77, i64 8
  %88 = bitcast i16* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 1
  %90 = bitcast <2 x i64> %89 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %92 = add <8 x i16> %86, %79
  %93 = bitcast <2 x i64> %82 to <8 x i16>
  %94 = bitcast <2 x i64> %89 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = bitcast <4 x i32> %84 to <8 x i16>
  %97 = bitcast <4 x i32> %91 to <8 x i16>
  %98 = add <8 x i16> %97, %96
  %99 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %100 = shl <8 x i16> %99, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %101 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 1
  %102 = getelementptr inbounds i16, i16* %74, i64 8
  %103 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %98, <8 x i16> %98) #6
  %104 = shl <8 x i16> %103, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 1
  %106 = add <8 x i16> %104, %100
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %108 = zext <4 x i16> %107 to <4 x i32>
  %109 = shufflevector <8 x i16> %106, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = add <4 x i32> %110, %108
  %112 = add <4 x i32> %111, %75
  %113 = getelementptr inbounds i16, i16* %76, i64 %71
  %114 = getelementptr inbounds i16, i16* %74, i64 32
  %115 = add nsw i32 %73, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %72

117:                                              ; preds = %72
  br i1 %68, label %118, label %271

118:                                              ; preds = %117, %118
  %119 = phi i32 [ %127, %118 ], [ %67, %117 ]
  %120 = phi i16* [ %125, %118 ], [ %114, %117 ]
  %121 = phi <4 x i32> [ %126, %118 ], [ %112, %117 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %120, i64 32
  %126 = add <4 x i32> %111, %121
  %127 = add nsw i32 %119, 1
  %128 = icmp slt i32 %127, 8
  br i1 %128, label %118, label %271

129:                                              ; preds = %5
  %130 = bitcast i8* %3 to i16*
  %131 = lshr i64 %4, 1
  %132 = ashr i32 %2, 1
  %133 = icmp slt i32 %2, 16
  %134 = select i1 %133, i32 %132, i32 8
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %136 = and i64 %4, -2
  br label %137

137:                                              ; preds = %137, %129
  %138 = phi i32 [ %134, %129 ], [ %187, %137 ]
  %139 = phi i16* [ %135, %129 ], [ %186, %137 ]
  %140 = phi <4 x i32> [ zeroinitializer, %129 ], [ %184, %137 ]
  %141 = phi i16* [ %130, %129 ], [ %185, %137 ]
  %142 = getelementptr inbounds i16, i16* %141, i64 %131
  %143 = bitcast i16* %141 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 1
  %145 = getelementptr inbounds i16, i16* %141, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = getelementptr inbounds i16, i16* %141, i64 16
  %149 = bitcast i16* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1
  %151 = bitcast <2 x i64> %150 to <4 x i32>
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %153 = bitcast i16* %142 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %142, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %142, i64 16
  %159 = bitcast i16* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 1
  %161 = bitcast <2 x i64> %160 to <4 x i32>
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %163 = add <8 x i16> %154, %144
  %164 = add <8 x i16> %157, %147
  %165 = bitcast <2 x i64> %150 to <8 x i16>
  %166 = bitcast <2 x i64> %160 to <8 x i16>
  %167 = add <8 x i16> %166, %165
  %168 = bitcast <4 x i32> %152 to <8 x i16>
  %169 = bitcast <4 x i32> %162 to <8 x i16>
  %170 = add <8 x i16> %169, %168
  %171 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %163, <8 x i16> %164) #6
  %172 = shl <8 x i16> %171, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %173 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %139, i64 8
  %175 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %167, <8 x i16> %170) #6
  %176 = shl <8 x i16> %175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %177 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 1
  %178 = add <8 x i16> %176, %172
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %180 = zext <4 x i16> %179 to <4 x i32>
  %181 = shufflevector <8 x i16> %178, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %182 = bitcast <8 x i16> %181 to <4 x i32>
  %183 = add <4 x i32> %182, %180
  %184 = add <4 x i32> %183, %140
  %185 = getelementptr inbounds i16, i16* %141, i64 %136
  %186 = getelementptr inbounds i16, i16* %139, i64 32
  %187 = add nsw i32 %138, -1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %137

189:                                              ; preds = %137
  br i1 %133, label %190, label %271

190:                                              ; preds = %189, %190
  %191 = phi i32 [ %199, %190 ], [ %132, %189 ]
  %192 = phi i16* [ %197, %190 ], [ %186, %189 ]
  %193 = phi <4 x i32> [ %198, %190 ], [ %184, %189 ]
  %194 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %194, align 1
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %196, align 1
  %197 = getelementptr inbounds i16, i16* %192, i64 32
  %198 = add <4 x i32> %183, %193
  %199 = add nsw i32 %191, 1
  %200 = icmp slt i32 %199, 8
  br i1 %200, label %190, label %271

201:                                              ; preds = %5
  %202 = bitcast i8* %3 to i16*
  %203 = lshr i64 %4, 1
  %204 = ashr i32 %2, 1
  %205 = icmp slt i32 %2, 16
  %206 = select i1 %205, i32 %204, i32 8
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %208 = and i64 %4, -2
  br label %209

209:                                              ; preds = %209, %201
  %210 = phi i32 [ %206, %201 ], [ %257, %209 ]
  %211 = phi i16* [ %207, %201 ], [ %256, %209 ]
  %212 = phi <4 x i32> [ zeroinitializer, %201 ], [ %254, %209 ]
  %213 = phi i16* [ %202, %201 ], [ %255, %209 ]
  %214 = getelementptr inbounds i16, i16* %213, i64 %203
  %215 = bitcast i16* %213 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 1
  %217 = getelementptr inbounds i16, i16* %213, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 1
  %220 = getelementptr inbounds i16, i16* %213, i64 16
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 1
  %223 = getelementptr inbounds i16, i16* %213, i64 24
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 1
  %226 = bitcast i16* %214 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 1
  %228 = getelementptr inbounds i16, i16* %214, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 1
  %231 = getelementptr inbounds i16, i16* %214, i64 16
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = getelementptr inbounds i16, i16* %214, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 1
  %237 = add <8 x i16> %227, %216
  %238 = add <8 x i16> %230, %219
  %239 = add <8 x i16> %233, %222
  %240 = add <8 x i16> %236, %225
  %241 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %237, <8 x i16> %238) #6
  %242 = shl <8 x i16> %241, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %243 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %211, i64 8
  %245 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %239, <8 x i16> %240) #6
  %246 = shl <8 x i16> %245, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %247 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %247, align 1
  %248 = add <8 x i16> %246, %242
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = zext <4 x i16> %249 to <4 x i32>
  %251 = shufflevector <8 x i16> %248, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %252 = bitcast <8 x i16> %251 to <4 x i32>
  %253 = add <4 x i32> %252, %250
  %254 = add <4 x i32> %253, %212
  %255 = getelementptr inbounds i16, i16* %213, i64 %208
  %256 = getelementptr inbounds i16, i16* %211, i64 32
  %257 = add nsw i32 %210, -1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %209

259:                                              ; preds = %209
  br i1 %205, label %260, label %271

260:                                              ; preds = %259, %260
  %261 = phi i32 [ %269, %260 ], [ %204, %259 ]
  %262 = phi i16* [ %267, %260 ], [ %256, %259 ]
  %263 = phi <4 x i32> [ %268, %260 ], [ %254, %259 ]
  %264 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %264, align 1
  %265 = getelementptr inbounds i16, i16* %262, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %266, align 1
  %267 = getelementptr inbounds i16, i16* %262, i64 32
  %268 = add <4 x i32> %253, %263
  %269 = add nsw i32 %261, 1
  %270 = icmp slt i32 %269, 8
  br i1 %270, label %260, label %271

271:                                              ; preds = %190, %118, %53, %260, %259, %189, %117, %52
  %272 = phi <4 x i32> [ %47, %52 ], [ %112, %117 ], [ %184, %189 ], [ %254, %259 ], [ %268, %260 ], [ %61, %53 ], [ %126, %118 ], [ %198, %190 ]
  %273 = bitcast <4 x i32> %272 to <16 x i8>
  %274 = shufflevector <16 x i8> %273, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %275 = bitcast <16 x i8> %274 to <4 x i32>
  %276 = add <4 x i32> %272, %275
  %277 = bitcast <4 x i32> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %279 = bitcast <16 x i8> %278 to <4 x i32>
  %280 = add <4 x i32> %276, <i32 64, i32 64, i32 64, i32 64>
  %281 = add <4 x i32> %280, %279
  %282 = ashr <4 x i32> %281, <i32 7, i32 7, i32 7, i32 7>
  %283 = bitcast <4 x i32> %282 to <8 x i16>
  %284 = shufflevector <8 x i16> %283, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %285 = bitcast <8 x i16> %284 to <4 x i32>
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> zeroinitializer
  %287 = bitcast <4 x i32> %286 to <8 x i16>
  %288 = bitcast [32 x i16]* %0 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 1
  %290 = sub <8 x i16> %289, %287
  store <8 x i16> %290, <8 x i16>* %288, align 1
  %291 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = sub <8 x i16> %293, %287
  store <8 x i16> %294, <8 x i16>* %292, align 1
  %295 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = sub <8 x i16> %297, %287
  store <8 x i16> %298, <8 x i16>* %296, align 1
  %299 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 1
  %302 = sub <8 x i16> %301, %287
  store <8 x i16> %302, <8 x i16>* %300, align 1
  %303 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 1
  %306 = sub <8 x i16> %305, %287
  store <8 x i16> %306, <8 x i16>* %304, align 1
  %307 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %308 = bitcast i16* %307 to <8 x i16>*
  %309 = load <8 x i16>, <8 x i16>* %308, align 1
  %310 = sub <8 x i16> %309, %287
  store <8 x i16> %310, <8 x i16>* %308, align 1
  %311 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 1
  %314 = sub <8 x i16> %313, %287
  store <8 x i16> %314, <8 x i16>* %312, align 1
  %315 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 1
  %318 = sub <8 x i16> %317, %287
  store <8 x i16> %318, <8 x i16>* %316, align 1
  %319 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 1
  %322 = sub <8 x i16> %321, %287
  store <8 x i16> %322, <8 x i16>* %320, align 1
  %323 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 1
  %326 = sub <8 x i16> %325, %287
  store <8 x i16> %326, <8 x i16>* %324, align 1
  %327 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = sub <8 x i16> %329, %287
  store <8 x i16> %330, <8 x i16>* %328, align 1
  %331 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 1
  %334 = sub <8 x i16> %333, %287
  store <8 x i16> %334, <8 x i16>* %332, align 1
  %335 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %336 = bitcast i16* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 1
  %338 = sub <8 x i16> %337, %287
  store <8 x i16> %338, <8 x i16>* %336, align 1
  %339 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %340 = bitcast i16* %339 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 1
  %342 = sub <8 x i16> %341, %287
  store <8 x i16> %342, <8 x i16>* %340, align 1
  %343 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 1
  %346 = sub <8 x i16> %345, %287
  store <8 x i16> %346, <8 x i16>* %344, align 1
  %347 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %348 = bitcast i16* %347 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 1
  %350 = sub <8 x i16> %349, %287
  store <8 x i16> %350, <8 x i16>* %348, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi4EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %201 [
    i32 8, label %6
    i32 16, label %64
    i32 24, label %129
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 32
  %11 = select i1 %10, i32 %9, i32 16
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %50, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %49, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %48, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %17
  %48 = getelementptr inbounds i16, i16* %18, i64 %13
  %49 = getelementptr inbounds i16, i16* %16, i64 32
  %50 = add nsw i32 %15, -1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %14

52:                                               ; preds = %14
  br i1 %10, label %53, label %271

53:                                               ; preds = %52, %53
  %54 = phi i32 [ %62, %53 ], [ %9, %52 ]
  %55 = phi i16* [ %60, %53 ], [ %49, %52 ]
  %56 = phi <4 x i32> [ %61, %53 ], [ %47, %52 ]
  %57 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %57, align 1
  %58 = getelementptr inbounds i16, i16* %55, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %55, i64 32
  %61 = add <4 x i32> %46, %56
  %62 = add nsw i32 %54, 1
  %63 = icmp slt i32 %62, 16
  br i1 %63, label %53, label %271

64:                                               ; preds = %5
  %65 = bitcast i8* %3 to i16*
  %66 = lshr i64 %4, 1
  %67 = ashr i32 %2, 1
  %68 = icmp slt i32 %2, 32
  %69 = select i1 %68, i32 %67, i32 16
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %71 = and i64 %4, -2
  br label %72

72:                                               ; preds = %72, %64
  %73 = phi i32 [ %69, %64 ], [ %115, %72 ]
  %74 = phi i16* [ %70, %64 ], [ %114, %72 ]
  %75 = phi <4 x i32> [ zeroinitializer, %64 ], [ %112, %72 ]
  %76 = phi i16* [ %65, %64 ], [ %113, %72 ]
  %77 = getelementptr inbounds i16, i16* %76, i64 %66
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 1
  %83 = bitcast <2 x i64> %82 to <4 x i32>
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %85 = bitcast i16* %77 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %77, i64 8
  %88 = bitcast i16* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 1
  %90 = bitcast <2 x i64> %89 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %92 = add <8 x i16> %86, %79
  %93 = bitcast <2 x i64> %82 to <8 x i16>
  %94 = bitcast <2 x i64> %89 to <8 x i16>
  %95 = add <8 x i16> %94, %93
  %96 = bitcast <4 x i32> %84 to <8 x i16>
  %97 = bitcast <4 x i32> %91 to <8 x i16>
  %98 = add <8 x i16> %97, %96
  %99 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %92, <8 x i16> %95) #6
  %100 = shl <8 x i16> %99, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %101 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 1
  %102 = getelementptr inbounds i16, i16* %74, i64 8
  %103 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %98, <8 x i16> %98) #6
  %104 = shl <8 x i16> %103, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %105 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 1
  %106 = add <8 x i16> %104, %100
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %108 = zext <4 x i16> %107 to <4 x i32>
  %109 = shufflevector <8 x i16> %106, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = add <4 x i32> %110, %108
  %112 = add <4 x i32> %111, %75
  %113 = getelementptr inbounds i16, i16* %76, i64 %71
  %114 = getelementptr inbounds i16, i16* %74, i64 32
  %115 = add nsw i32 %73, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %72

117:                                              ; preds = %72
  br i1 %68, label %118, label %271

118:                                              ; preds = %117, %118
  %119 = phi i32 [ %127, %118 ], [ %67, %117 ]
  %120 = phi i16* [ %125, %118 ], [ %114, %117 ]
  %121 = phi <4 x i32> [ %126, %118 ], [ %112, %117 ]
  %122 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %120, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %120, i64 32
  %126 = add <4 x i32> %111, %121
  %127 = add nsw i32 %119, 1
  %128 = icmp slt i32 %127, 16
  br i1 %128, label %118, label %271

129:                                              ; preds = %5
  %130 = bitcast i8* %3 to i16*
  %131 = lshr i64 %4, 1
  %132 = ashr i32 %2, 1
  %133 = icmp slt i32 %2, 32
  %134 = select i1 %133, i32 %132, i32 16
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %136 = and i64 %4, -2
  br label %137

137:                                              ; preds = %137, %129
  %138 = phi i32 [ %134, %129 ], [ %187, %137 ]
  %139 = phi i16* [ %135, %129 ], [ %186, %137 ]
  %140 = phi <4 x i32> [ zeroinitializer, %129 ], [ %184, %137 ]
  %141 = phi i16* [ %130, %129 ], [ %185, %137 ]
  %142 = getelementptr inbounds i16, i16* %141, i64 %131
  %143 = bitcast i16* %141 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 1
  %145 = getelementptr inbounds i16, i16* %141, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = getelementptr inbounds i16, i16* %141, i64 16
  %149 = bitcast i16* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1
  %151 = bitcast <2 x i64> %150 to <4 x i32>
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %153 = bitcast i16* %142 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = getelementptr inbounds i16, i16* %142, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %142, i64 16
  %159 = bitcast i16* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 1
  %161 = bitcast <2 x i64> %160 to <4 x i32>
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %163 = add <8 x i16> %154, %144
  %164 = add <8 x i16> %157, %147
  %165 = bitcast <2 x i64> %150 to <8 x i16>
  %166 = bitcast <2 x i64> %160 to <8 x i16>
  %167 = add <8 x i16> %166, %165
  %168 = bitcast <4 x i32> %152 to <8 x i16>
  %169 = bitcast <4 x i32> %162 to <8 x i16>
  %170 = add <8 x i16> %169, %168
  %171 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %163, <8 x i16> %164) #6
  %172 = shl <8 x i16> %171, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %173 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 1
  %174 = getelementptr inbounds i16, i16* %139, i64 8
  %175 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %167, <8 x i16> %170) #6
  %176 = shl <8 x i16> %175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %177 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 1
  %178 = add <8 x i16> %176, %172
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %180 = zext <4 x i16> %179 to <4 x i32>
  %181 = shufflevector <8 x i16> %178, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %182 = bitcast <8 x i16> %181 to <4 x i32>
  %183 = add <4 x i32> %182, %180
  %184 = add <4 x i32> %183, %140
  %185 = getelementptr inbounds i16, i16* %141, i64 %136
  %186 = getelementptr inbounds i16, i16* %139, i64 32
  %187 = add nsw i32 %138, -1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %137

189:                                              ; preds = %137
  br i1 %133, label %190, label %271

190:                                              ; preds = %189, %190
  %191 = phi i32 [ %199, %190 ], [ %132, %189 ]
  %192 = phi i16* [ %197, %190 ], [ %186, %189 ]
  %193 = phi <4 x i32> [ %198, %190 ], [ %184, %189 ]
  %194 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %194, align 1
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %196, align 1
  %197 = getelementptr inbounds i16, i16* %192, i64 32
  %198 = add <4 x i32> %183, %193
  %199 = add nsw i32 %191, 1
  %200 = icmp slt i32 %199, 16
  br i1 %200, label %190, label %271

201:                                              ; preds = %5
  %202 = bitcast i8* %3 to i16*
  %203 = lshr i64 %4, 1
  %204 = ashr i32 %2, 1
  %205 = icmp slt i32 %2, 32
  %206 = select i1 %205, i32 %204, i32 16
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %208 = and i64 %4, -2
  br label %209

209:                                              ; preds = %209, %201
  %210 = phi i32 [ %206, %201 ], [ %257, %209 ]
  %211 = phi i16* [ %207, %201 ], [ %256, %209 ]
  %212 = phi <4 x i32> [ zeroinitializer, %201 ], [ %254, %209 ]
  %213 = phi i16* [ %202, %201 ], [ %255, %209 ]
  %214 = getelementptr inbounds i16, i16* %213, i64 %203
  %215 = bitcast i16* %213 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 1
  %217 = getelementptr inbounds i16, i16* %213, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 1
  %220 = getelementptr inbounds i16, i16* %213, i64 16
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 1
  %223 = getelementptr inbounds i16, i16* %213, i64 24
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 1
  %226 = bitcast i16* %214 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 1
  %228 = getelementptr inbounds i16, i16* %214, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 1
  %231 = getelementptr inbounds i16, i16* %214, i64 16
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = getelementptr inbounds i16, i16* %214, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 1
  %237 = add <8 x i16> %227, %216
  %238 = add <8 x i16> %230, %219
  %239 = add <8 x i16> %233, %222
  %240 = add <8 x i16> %236, %225
  %241 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %237, <8 x i16> %238) #6
  %242 = shl <8 x i16> %241, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %243 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %211, i64 8
  %245 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %239, <8 x i16> %240) #6
  %246 = shl <8 x i16> %245, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %247 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %247, align 1
  %248 = add <8 x i16> %246, %242
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = zext <4 x i16> %249 to <4 x i32>
  %251 = shufflevector <8 x i16> %248, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %252 = bitcast <8 x i16> %251 to <4 x i32>
  %253 = add <4 x i32> %252, %250
  %254 = add <4 x i32> %253, %212
  %255 = getelementptr inbounds i16, i16* %213, i64 %208
  %256 = getelementptr inbounds i16, i16* %211, i64 32
  %257 = add nsw i32 %210, -1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %209

259:                                              ; preds = %209
  br i1 %205, label %260, label %271

260:                                              ; preds = %259, %260
  %261 = phi i32 [ %269, %260 ], [ %204, %259 ]
  %262 = phi i16* [ %267, %260 ], [ %256, %259 ]
  %263 = phi <4 x i32> [ %268, %260 ], [ %254, %259 ]
  %264 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %264, align 1
  %265 = getelementptr inbounds i16, i16* %262, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %266, align 1
  %267 = getelementptr inbounds i16, i16* %262, i64 32
  %268 = add <4 x i32> %253, %263
  %269 = add nsw i32 %261, 1
  %270 = icmp slt i32 %269, 16
  br i1 %270, label %260, label %271

271:                                              ; preds = %190, %118, %53, %260, %259, %189, %117, %52
  %272 = phi <4 x i32> [ %47, %52 ], [ %112, %117 ], [ %184, %189 ], [ %254, %259 ], [ %268, %260 ], [ %61, %53 ], [ %126, %118 ], [ %198, %190 ]
  %273 = bitcast <4 x i32> %272 to <16 x i8>
  %274 = shufflevector <16 x i8> %273, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %275 = bitcast <16 x i8> %274 to <4 x i32>
  %276 = add <4 x i32> %272, %275
  %277 = bitcast <4 x i32> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %279 = bitcast <16 x i8> %278 to <4 x i32>
  %280 = add <4 x i32> %276, <i32 128, i32 128, i32 128, i32 128>
  %281 = add <4 x i32> %280, %279
  %282 = ashr <4 x i32> %281, <i32 8, i32 8, i32 8, i32 8>
  %283 = bitcast <4 x i32> %282 to <8 x i16>
  %284 = shufflevector <8 x i16> %283, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %285 = bitcast <8 x i16> %284 to <4 x i32>
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> zeroinitializer
  %287 = bitcast <4 x i32> %286 to <8 x i16>
  %288 = bitcast [32 x i16]* %0 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 1
  %290 = sub <8 x i16> %289, %287
  store <8 x i16> %290, <8 x i16>* %288, align 1
  %291 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = sub <8 x i16> %293, %287
  store <8 x i16> %294, <8 x i16>* %292, align 1
  %295 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = sub <8 x i16> %297, %287
  store <8 x i16> %298, <8 x i16>* %296, align 1
  %299 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 1
  %302 = sub <8 x i16> %301, %287
  store <8 x i16> %302, <8 x i16>* %300, align 1
  %303 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 1
  %306 = sub <8 x i16> %305, %287
  store <8 x i16> %306, <8 x i16>* %304, align 1
  %307 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %308 = bitcast i16* %307 to <8 x i16>*
  %309 = load <8 x i16>, <8 x i16>* %308, align 1
  %310 = sub <8 x i16> %309, %287
  store <8 x i16> %310, <8 x i16>* %308, align 1
  %311 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 1
  %314 = sub <8 x i16> %313, %287
  store <8 x i16> %314, <8 x i16>* %312, align 1
  %315 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 1
  %318 = sub <8 x i16> %317, %287
  store <8 x i16> %318, <8 x i16>* %316, align 1
  %319 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 1
  %322 = sub <8 x i16> %321, %287
  store <8 x i16> %322, <8 x i16>* %320, align 1
  %323 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 1
  %326 = sub <8 x i16> %325, %287
  store <8 x i16> %326, <8 x i16>* %324, align 1
  %327 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %328 = bitcast i16* %327 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = sub <8 x i16> %329, %287
  store <8 x i16> %330, <8 x i16>* %328, align 1
  %331 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 1
  %334 = sub <8 x i16> %333, %287
  store <8 x i16> %334, <8 x i16>* %332, align 1
  %335 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %336 = bitcast i16* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 1
  %338 = sub <8 x i16> %337, %287
  store <8 x i16> %338, <8 x i16>* %336, align 1
  %339 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %340 = bitcast i16* %339 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 1
  %342 = sub <8 x i16> %341, %287
  store <8 x i16> %342, <8 x i16>* %340, align 1
  %343 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 1
  %346 = sub <8 x i16> %345, %287
  store <8 x i16> %346, <8 x i16>* %344, align 1
  %347 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %348 = bitcast i16* %347 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 1
  %350 = sub <8 x i16> %349, %287
  store <8 x i16> %350, <8 x i16>* %348, align 1
  %351 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 256
  %352 = bitcast i16* %351 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 1
  %354 = sub <8 x i16> %353, %287
  store <8 x i16> %354, <8 x i16>* %352, align 1
  %355 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 264
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 1
  %358 = sub <8 x i16> %357, %287
  store <8 x i16> %358, <8 x i16>* %356, align 1
  %359 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 288
  %360 = bitcast i16* %359 to <8 x i16>*
  %361 = load <8 x i16>, <8 x i16>* %360, align 1
  %362 = sub <8 x i16> %361, %287
  store <8 x i16> %362, <8 x i16>* %360, align 1
  %363 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 296
  %364 = bitcast i16* %363 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 1
  %366 = sub <8 x i16> %365, %287
  store <8 x i16> %366, <8 x i16>* %364, align 1
  %367 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 320
  %368 = bitcast i16* %367 to <8 x i16>*
  %369 = load <8 x i16>, <8 x i16>* %368, align 1
  %370 = sub <8 x i16> %369, %287
  store <8 x i16> %370, <8 x i16>* %368, align 1
  %371 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 328
  %372 = bitcast i16* %371 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 1
  %374 = sub <8 x i16> %373, %287
  store <8 x i16> %374, <8 x i16>* %372, align 1
  %375 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 352
  %376 = bitcast i16* %375 to <8 x i16>*
  %377 = load <8 x i16>, <8 x i16>* %376, align 1
  %378 = sub <8 x i16> %377, %287
  store <8 x i16> %378, <8 x i16>* %376, align 1
  %379 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 360
  %380 = bitcast i16* %379 to <8 x i16>*
  %381 = load <8 x i16>, <8 x i16>* %380, align 1
  %382 = sub <8 x i16> %381, %287
  store <8 x i16> %382, <8 x i16>* %380, align 1
  %383 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 384
  %384 = bitcast i16* %383 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 1
  %386 = sub <8 x i16> %385, %287
  store <8 x i16> %386, <8 x i16>* %384, align 1
  %387 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 392
  %388 = bitcast i16* %387 to <8 x i16>*
  %389 = load <8 x i16>, <8 x i16>* %388, align 1
  %390 = sub <8 x i16> %389, %287
  store <8 x i16> %390, <8 x i16>* %388, align 1
  %391 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 416
  %392 = bitcast i16* %391 to <8 x i16>*
  %393 = load <8 x i16>, <8 x i16>* %392, align 1
  %394 = sub <8 x i16> %393, %287
  store <8 x i16> %394, <8 x i16>* %392, align 1
  %395 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 424
  %396 = bitcast i16* %395 to <8 x i16>*
  %397 = load <8 x i16>, <8 x i16>* %396, align 1
  %398 = sub <8 x i16> %397, %287
  store <8 x i16> %398, <8 x i16>* %396, align 1
  %399 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 448
  %400 = bitcast i16* %399 to <8 x i16>*
  %401 = load <8 x i16>, <8 x i16>* %400, align 1
  %402 = sub <8 x i16> %401, %287
  store <8 x i16> %402, <8 x i16>* %400, align 1
  %403 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 456
  %404 = bitcast i16* %403 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 1
  %406 = sub <8 x i16> %405, %287
  store <8 x i16> %406, <8 x i16>* %404, align 1
  %407 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 480
  %408 = bitcast i16* %407 to <8 x i16>*
  %409 = load <8 x i16>, <8 x i16>* %408, align 1
  %410 = sub <8 x i16> %409, %287
  store <8 x i16> %410, <8 x i16>* %408, align 1
  %411 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 488
  %412 = bitcast i16* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 1
  %414 = sub <8 x i16> %413, %287
  store <8 x i16> %414, <8 x i16>* %412, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi4ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %315 [
    i32 8, label %6
    i32 16, label %102
    i32 24, label %205
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 64
  %11 = select i1 %10, i32 %9, i32 32
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %50, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %49, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %47, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %48, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = add <4 x i32> %45, %43
  %47 = add <4 x i32> %46, %17
  %48 = getelementptr inbounds i16, i16* %18, i64 %13
  %49 = getelementptr inbounds i16, i16* %16, i64 32
  %50 = add nsw i32 %15, -1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %14

52:                                               ; preds = %14
  br i1 %10, label %53, label %64

53:                                               ; preds = %52, %53
  %54 = phi i32 [ %62, %53 ], [ %9, %52 ]
  %55 = phi i16* [ %60, %53 ], [ %49, %52 ]
  %56 = phi <4 x i32> [ %61, %53 ], [ %47, %52 ]
  %57 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %57, align 1
  %58 = getelementptr inbounds i16, i16* %55, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %59, align 1
  %60 = getelementptr inbounds i16, i16* %55, i64 32
  %61 = add <4 x i32> %46, %56
  %62 = add nsw i32 %54, 1
  %63 = icmp slt i32 %62, 32
  br i1 %63, label %53, label %64

64:                                               ; preds = %53, %52
  %65 = phi <4 x i32> [ %47, %52 ], [ %61, %53 ]
  %66 = bitcast <4 x i32> %65 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %68 = bitcast <16 x i8> %67 to <4 x i32>
  %69 = add <4 x i32> %65, %68
  %70 = bitcast <4 x i32> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %72 = bitcast <16 x i8> %71 to <4 x i32>
  %73 = add <4 x i32> %69, <i32 256, i32 256, i32 256, i32 256>
  %74 = add <4 x i32> %73, %72
  %75 = ashr <4 x i32> %74, <i32 9, i32 9, i32 9, i32 9>
  %76 = bitcast <4 x i32> %75 to <8 x i16>
  %77 = shufflevector <8 x i16> %76, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <8 x i16> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = bitcast <4 x i32> %79 to <8 x i16>
  br label %81

81:                                               ; preds = %81, %64
  %82 = phi i32 [ 32, %64 ], [ %100, %81 ]
  %83 = phi i16* [ %12, %64 ], [ %99, %81 ]
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 1
  %86 = sub <8 x i16> %85, %80
  store <8 x i16> %86, <8 x i16>* %84, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 1
  %90 = sub <8 x i16> %89, %80
  store <8 x i16> %90, <8 x i16>* %88, align 1
  %91 = getelementptr inbounds i16, i16* %83, i64 32
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 1
  %94 = sub <8 x i16> %93, %80
  store <8 x i16> %94, <8 x i16>* %92, align 1
  %95 = getelementptr inbounds i16, i16* %83, i64 40
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = sub <8 x i16> %97, %80
  store <8 x i16> %98, <8 x i16>* %96, align 1
  %99 = getelementptr inbounds i16, i16* %83, i64 64
  %100 = add nsw i32 %82, -2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %423, label %81

102:                                              ; preds = %5
  %103 = bitcast i8* %3 to i16*
  %104 = lshr i64 %4, 1
  %105 = ashr i32 %2, 1
  %106 = icmp slt i32 %2, 64
  %107 = select i1 %106, i32 %105, i32 32
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %109 = and i64 %4, -2
  br label %110

110:                                              ; preds = %110, %102
  %111 = phi i32 [ %107, %102 ], [ %153, %110 ]
  %112 = phi i16* [ %108, %102 ], [ %152, %110 ]
  %113 = phi <4 x i32> [ zeroinitializer, %102 ], [ %150, %110 ]
  %114 = phi i16* [ %103, %102 ], [ %151, %110 ]
  %115 = getelementptr inbounds i16, i16* %114, i64 %104
  %116 = bitcast i16* %114 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %114, i64 8
  %119 = bitcast i16* %118 to <2 x i64>*
  %120 = load <2 x i64>, <2 x i64>* %119, align 1
  %121 = bitcast <2 x i64> %120 to <4 x i32>
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %123 = bitcast i16* %115 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = getelementptr inbounds i16, i16* %115, i64 8
  %126 = bitcast i16* %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 1
  %128 = bitcast <2 x i64> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %130 = add <8 x i16> %124, %117
  %131 = bitcast <2 x i64> %120 to <8 x i16>
  %132 = bitcast <2 x i64> %127 to <8 x i16>
  %133 = add <8 x i16> %132, %131
  %134 = bitcast <4 x i32> %122 to <8 x i16>
  %135 = bitcast <4 x i32> %129 to <8 x i16>
  %136 = add <8 x i16> %135, %134
  %137 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %130, <8 x i16> %133) #6
  %138 = shl <8 x i16> %137, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %139 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %112, i64 8
  %141 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %136, <8 x i16> %136) #6
  %142 = shl <8 x i16> %141, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %143 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = add <8 x i16> %142, %138
  %145 = shufflevector <8 x i16> %144, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %146 = zext <4 x i16> %145 to <4 x i32>
  %147 = shufflevector <8 x i16> %144, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %148 = bitcast <8 x i16> %147 to <4 x i32>
  %149 = add <4 x i32> %148, %146
  %150 = add <4 x i32> %149, %113
  %151 = getelementptr inbounds i16, i16* %114, i64 %109
  %152 = getelementptr inbounds i16, i16* %112, i64 32
  %153 = add nsw i32 %111, -1
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %110

155:                                              ; preds = %110
  br i1 %106, label %156, label %167

156:                                              ; preds = %155, %156
  %157 = phi i32 [ %165, %156 ], [ %105, %155 ]
  %158 = phi i16* [ %163, %156 ], [ %152, %155 ]
  %159 = phi <4 x i32> [ %164, %156 ], [ %150, %155 ]
  %160 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %160, align 1
  %161 = getelementptr inbounds i16, i16* %158, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %158, i64 32
  %164 = add <4 x i32> %149, %159
  %165 = add nsw i32 %157, 1
  %166 = icmp slt i32 %165, 32
  br i1 %166, label %156, label %167

167:                                              ; preds = %156, %155
  %168 = phi <4 x i32> [ %150, %155 ], [ %164, %156 ]
  %169 = bitcast <4 x i32> %168 to <16 x i8>
  %170 = shufflevector <16 x i8> %169, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %171 = bitcast <16 x i8> %170 to <4 x i32>
  %172 = add <4 x i32> %168, %171
  %173 = bitcast <4 x i32> %172 to <16 x i8>
  %174 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %175 = bitcast <16 x i8> %174 to <4 x i32>
  %176 = add <4 x i32> %172, <i32 256, i32 256, i32 256, i32 256>
  %177 = add <4 x i32> %176, %175
  %178 = ashr <4 x i32> %177, <i32 9, i32 9, i32 9, i32 9>
  %179 = bitcast <4 x i32> %178 to <8 x i16>
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %181 = bitcast <8 x i16> %180 to <4 x i32>
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> zeroinitializer
  %183 = bitcast <4 x i32> %182 to <8 x i16>
  br label %184

184:                                              ; preds = %184, %167
  %185 = phi i32 [ 32, %167 ], [ %203, %184 ]
  %186 = phi i16* [ %108, %167 ], [ %202, %184 ]
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = sub <8 x i16> %188, %183
  store <8 x i16> %189, <8 x i16>* %187, align 1
  %190 = getelementptr inbounds i16, i16* %186, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %183
  store <8 x i16> %193, <8 x i16>* %191, align 1
  %194 = getelementptr inbounds i16, i16* %186, i64 32
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = sub <8 x i16> %196, %183
  store <8 x i16> %197, <8 x i16>* %195, align 1
  %198 = getelementptr inbounds i16, i16* %186, i64 40
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 1
  %201 = sub <8 x i16> %200, %183
  store <8 x i16> %201, <8 x i16>* %199, align 1
  %202 = getelementptr inbounds i16, i16* %186, i64 64
  %203 = add nsw i32 %185, -2
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %423, label %184

205:                                              ; preds = %5
  %206 = bitcast i8* %3 to i16*
  %207 = lshr i64 %4, 1
  %208 = ashr i32 %2, 1
  %209 = icmp slt i32 %2, 64
  %210 = select i1 %209, i32 %208, i32 32
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %212 = and i64 %4, -2
  br label %213

213:                                              ; preds = %213, %205
  %214 = phi i32 [ %210, %205 ], [ %263, %213 ]
  %215 = phi i16* [ %211, %205 ], [ %262, %213 ]
  %216 = phi <4 x i32> [ zeroinitializer, %205 ], [ %260, %213 ]
  %217 = phi i16* [ %206, %205 ], [ %261, %213 ]
  %218 = getelementptr inbounds i16, i16* %217, i64 %207
  %219 = bitcast i16* %217 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 1
  %221 = getelementptr inbounds i16, i16* %217, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 1
  %224 = getelementptr inbounds i16, i16* %217, i64 16
  %225 = bitcast i16* %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 1
  %227 = bitcast <2 x i64> %226 to <4 x i32>
  %228 = shufflevector <4 x i32> %227, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %229 = bitcast i16* %218 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 1
  %231 = getelementptr inbounds i16, i16* %218, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = getelementptr inbounds i16, i16* %218, i64 16
  %235 = bitcast i16* %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 1
  %237 = bitcast <2 x i64> %236 to <4 x i32>
  %238 = shufflevector <4 x i32> %237, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %239 = add <8 x i16> %230, %220
  %240 = add <8 x i16> %233, %223
  %241 = bitcast <2 x i64> %226 to <8 x i16>
  %242 = bitcast <2 x i64> %236 to <8 x i16>
  %243 = add <8 x i16> %242, %241
  %244 = bitcast <4 x i32> %228 to <8 x i16>
  %245 = bitcast <4 x i32> %238 to <8 x i16>
  %246 = add <8 x i16> %245, %244
  %247 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %239, <8 x i16> %240) #6
  %248 = shl <8 x i16> %247, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %249 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %215, i64 8
  %251 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %243, <8 x i16> %246) #6
  %252 = shl <8 x i16> %251, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %253 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 1
  %254 = add <8 x i16> %252, %248
  %255 = shufflevector <8 x i16> %254, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %256 = zext <4 x i16> %255 to <4 x i32>
  %257 = shufflevector <8 x i16> %254, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %258 = bitcast <8 x i16> %257 to <4 x i32>
  %259 = add <4 x i32> %258, %256
  %260 = add <4 x i32> %259, %216
  %261 = getelementptr inbounds i16, i16* %217, i64 %212
  %262 = getelementptr inbounds i16, i16* %215, i64 32
  %263 = add nsw i32 %214, -1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %213

265:                                              ; preds = %213
  br i1 %209, label %266, label %277

266:                                              ; preds = %265, %266
  %267 = phi i32 [ %275, %266 ], [ %208, %265 ]
  %268 = phi i16* [ %273, %266 ], [ %262, %265 ]
  %269 = phi <4 x i32> [ %274, %266 ], [ %260, %265 ]
  %270 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %270, align 1
  %271 = getelementptr inbounds i16, i16* %268, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %272, align 1
  %273 = getelementptr inbounds i16, i16* %268, i64 32
  %274 = add <4 x i32> %259, %269
  %275 = add nsw i32 %267, 1
  %276 = icmp slt i32 %275, 32
  br i1 %276, label %266, label %277

277:                                              ; preds = %266, %265
  %278 = phi <4 x i32> [ %260, %265 ], [ %274, %266 ]
  %279 = bitcast <4 x i32> %278 to <16 x i8>
  %280 = shufflevector <16 x i8> %279, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %281 = bitcast <16 x i8> %280 to <4 x i32>
  %282 = add <4 x i32> %278, %281
  %283 = bitcast <4 x i32> %282 to <16 x i8>
  %284 = shufflevector <16 x i8> %283, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %285 = bitcast <16 x i8> %284 to <4 x i32>
  %286 = add <4 x i32> %282, <i32 256, i32 256, i32 256, i32 256>
  %287 = add <4 x i32> %286, %285
  %288 = ashr <4 x i32> %287, <i32 9, i32 9, i32 9, i32 9>
  %289 = bitcast <4 x i32> %288 to <8 x i16>
  %290 = shufflevector <8 x i16> %289, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %291 = bitcast <8 x i16> %290 to <4 x i32>
  %292 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> zeroinitializer
  %293 = bitcast <4 x i32> %292 to <8 x i16>
  br label %294

294:                                              ; preds = %294, %277
  %295 = phi i32 [ 32, %277 ], [ %313, %294 ]
  %296 = phi i16* [ %211, %277 ], [ %312, %294 ]
  %297 = bitcast i16* %296 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 1
  %299 = sub <8 x i16> %298, %293
  store <8 x i16> %299, <8 x i16>* %297, align 1
  %300 = getelementptr inbounds i16, i16* %296, i64 8
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 1
  %303 = sub <8 x i16> %302, %293
  store <8 x i16> %303, <8 x i16>* %301, align 1
  %304 = getelementptr inbounds i16, i16* %296, i64 32
  %305 = bitcast i16* %304 to <8 x i16>*
  %306 = load <8 x i16>, <8 x i16>* %305, align 1
  %307 = sub <8 x i16> %306, %293
  store <8 x i16> %307, <8 x i16>* %305, align 1
  %308 = getelementptr inbounds i16, i16* %296, i64 40
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 1
  %311 = sub <8 x i16> %310, %293
  store <8 x i16> %311, <8 x i16>* %309, align 1
  %312 = getelementptr inbounds i16, i16* %296, i64 64
  %313 = add nsw i32 %295, -2
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %423, label %294

315:                                              ; preds = %5
  %316 = bitcast i8* %3 to i16*
  %317 = lshr i64 %4, 1
  %318 = ashr i32 %2, 1
  %319 = icmp slt i32 %2, 64
  %320 = select i1 %319, i32 %318, i32 32
  %321 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %322 = and i64 %4, -2
  br label %323

323:                                              ; preds = %323, %315
  %324 = phi i32 [ %320, %315 ], [ %371, %323 ]
  %325 = phi i16* [ %321, %315 ], [ %370, %323 ]
  %326 = phi <4 x i32> [ zeroinitializer, %315 ], [ %368, %323 ]
  %327 = phi i16* [ %316, %315 ], [ %369, %323 ]
  %328 = getelementptr inbounds i16, i16* %327, i64 %317
  %329 = bitcast i16* %327 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 1
  %331 = getelementptr inbounds i16, i16* %327, i64 8
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 1
  %334 = getelementptr inbounds i16, i16* %327, i64 16
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 1
  %337 = getelementptr inbounds i16, i16* %327, i64 24
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 1
  %340 = bitcast i16* %328 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 1
  %342 = getelementptr inbounds i16, i16* %328, i64 8
  %343 = bitcast i16* %342 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 1
  %345 = getelementptr inbounds i16, i16* %328, i64 16
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 1
  %348 = getelementptr inbounds i16, i16* %328, i64 24
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 1
  %351 = add <8 x i16> %341, %330
  %352 = add <8 x i16> %344, %333
  %353 = add <8 x i16> %347, %336
  %354 = add <8 x i16> %350, %339
  %355 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %351, <8 x i16> %352) #6
  %356 = shl <8 x i16> %355, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %357 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %357, align 1
  %358 = getelementptr inbounds i16, i16* %325, i64 8
  %359 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %353, <8 x i16> %354) #6
  %360 = shl <8 x i16> %359, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %361 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %360, <8 x i16>* %361, align 1
  %362 = add <8 x i16> %360, %356
  %363 = shufflevector <8 x i16> %362, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %364 = zext <4 x i16> %363 to <4 x i32>
  %365 = shufflevector <8 x i16> %362, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %366 = bitcast <8 x i16> %365 to <4 x i32>
  %367 = add <4 x i32> %366, %364
  %368 = add <4 x i32> %367, %326
  %369 = getelementptr inbounds i16, i16* %327, i64 %322
  %370 = getelementptr inbounds i16, i16* %325, i64 32
  %371 = add nsw i32 %324, -1
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %323

373:                                              ; preds = %323
  br i1 %319, label %374, label %385

374:                                              ; preds = %373, %374
  %375 = phi i32 [ %383, %374 ], [ %318, %373 ]
  %376 = phi i16* [ %381, %374 ], [ %370, %373 ]
  %377 = phi <4 x i32> [ %382, %374 ], [ %368, %373 ]
  %378 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %378, align 1
  %379 = getelementptr inbounds i16, i16* %376, i64 8
  %380 = bitcast i16* %379 to <8 x i16>*
  store <8 x i16> %360, <8 x i16>* %380, align 1
  %381 = getelementptr inbounds i16, i16* %376, i64 32
  %382 = add <4 x i32> %367, %377
  %383 = add nsw i32 %375, 1
  %384 = icmp slt i32 %383, 32
  br i1 %384, label %374, label %385

385:                                              ; preds = %374, %373
  %386 = phi <4 x i32> [ %368, %373 ], [ %382, %374 ]
  %387 = bitcast <4 x i32> %386 to <16 x i8>
  %388 = shufflevector <16 x i8> %387, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %389 = bitcast <16 x i8> %388 to <4 x i32>
  %390 = add <4 x i32> %386, %389
  %391 = bitcast <4 x i32> %390 to <16 x i8>
  %392 = shufflevector <16 x i8> %391, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %393 = bitcast <16 x i8> %392 to <4 x i32>
  %394 = add <4 x i32> %390, <i32 256, i32 256, i32 256, i32 256>
  %395 = add <4 x i32> %394, %393
  %396 = ashr <4 x i32> %395, <i32 9, i32 9, i32 9, i32 9>
  %397 = bitcast <4 x i32> %396 to <8 x i16>
  %398 = shufflevector <8 x i16> %397, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %399 = bitcast <8 x i16> %398 to <4 x i32>
  %400 = shufflevector <4 x i32> %399, <4 x i32> undef, <4 x i32> zeroinitializer
  %401 = bitcast <4 x i32> %400 to <8 x i16>
  br label %402

402:                                              ; preds = %402, %385
  %403 = phi i32 [ 32, %385 ], [ %421, %402 ]
  %404 = phi i16* [ %321, %385 ], [ %420, %402 ]
  %405 = bitcast i16* %404 to <8 x i16>*
  %406 = load <8 x i16>, <8 x i16>* %405, align 1
  %407 = sub <8 x i16> %406, %401
  store <8 x i16> %407, <8 x i16>* %405, align 1
  %408 = getelementptr inbounds i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 1
  %411 = sub <8 x i16> %410, %401
  store <8 x i16> %411, <8 x i16>* %409, align 1
  %412 = getelementptr inbounds i16, i16* %404, i64 32
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 1
  %415 = sub <8 x i16> %414, %401
  store <8 x i16> %415, <8 x i16>* %413, align 1
  %416 = getelementptr inbounds i16, i16* %404, i64 40
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 1
  %419 = sub <8 x i16> %418, %401
  store <8 x i16> %419, <8 x i16>* %417, align 1
  %420 = getelementptr inbounds i16, i16* %404, i64 64
  %421 = add nsw i32 %403, -2
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %423, label %402

423:                                              ; preds = %294, %184, %81, %402
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi3EEEvPA32_siiPKvl([32 x i16]*, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %618 [
    i32 8, label %6
    i32 16, label %203
    i32 24, label %407
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 16
  %11 = select i1 %10, i32 %9, i32 8
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %58, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %57, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %55, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %56, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %47 = bitcast <8 x i16> %46 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %49 = bitcast <4 x i32> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %51 = sext <4 x i16> %50 to <4 x i32>
  %52 = shl nsw <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = add <4 x i32> %45, %43
  %54 = add <4 x i32> %53, %17
  %55 = add <4 x i32> %54, %52
  %56 = getelementptr inbounds i16, i16* %18, i64 %13
  %57 = getelementptr inbounds i16, i16* %16, i64 32
  %58 = add nsw i32 %15, -1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %14

60:                                               ; preds = %14
  br i1 %10, label %61, label %74

61:                                               ; preds = %60
  %62 = add <4 x i32> %53, %52
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i32 [ %9, %61 ], [ %72, %63 ]
  %65 = phi i16* [ %57, %61 ], [ %70, %63 ]
  %66 = phi <4 x i32> [ %55, %61 ], [ %71, %63 ]
  %67 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %67, align 1
  %68 = getelementptr inbounds i16, i16* %65, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %65, i64 32
  %71 = add <4 x i32> %62, %66
  %72 = add nsw i32 %64, 1
  %73 = icmp slt i32 %72, 8
  br i1 %73, label %63, label %74

74:                                               ; preds = %63, %60
  %75 = phi <4 x i32> [ %55, %60 ], [ %71, %63 ]
  %76 = bitcast <4 x i32> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %78 = bitcast <16 x i8> %77 to <4 x i32>
  %79 = add <4 x i32> %75, %78
  %80 = bitcast <4 x i32> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = add <4 x i32> %79, <i32 128, i32 128, i32 128, i32 128>
  %84 = add <4 x i32> %83, %82
  %85 = ashr <4 x i32> %84, <i32 8, i32 8, i32 8, i32 8>
  %86 = bitcast <4 x i32> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = bitcast <8 x i16> %87 to <4 x i32>
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = bitcast <4 x i32> %89 to <8 x i16>
  %91 = bitcast [32 x i16]* %0 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = sub <8 x i16> %92, %90
  store <8 x i16> %93, <8 x i16>* %91, align 1
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = sub <8 x i16> %96, %90
  store <8 x i16> %97, <8 x i16>* %95, align 1
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %99 = bitcast <8 x i16> %98 to <4 x i32>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %102 = bitcast i16* %101 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 1
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %104 = bitcast i16* %103 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 1
  %105 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = sub <8 x i16> %107, %90
  store <8 x i16> %108, <8 x i16>* %106, align 1
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 1
  %112 = sub <8 x i16> %111, %90
  store <8 x i16> %112, <8 x i16>* %110, align 1
  %113 = shufflevector <8 x i16> %112, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %114 = bitcast <8 x i16> %113 to <4 x i32>
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %117 = bitcast i16* %116 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %117, align 1
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %119 = bitcast i16* %118 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %119, align 1
  %120 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = sub <8 x i16> %122, %90
  store <8 x i16> %123, <8 x i16>* %121, align 1
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = sub <8 x i16> %126, %90
  store <8 x i16> %127, <8 x i16>* %125, align 1
  %128 = shufflevector <8 x i16> %127, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %132 = bitcast i16* %131 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %132, align 1
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %134 = bitcast i16* %133 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %134, align 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 1
  %138 = sub <8 x i16> %137, %90
  store <8 x i16> %138, <8 x i16>* %136, align 1
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 1
  %142 = sub <8 x i16> %141, %90
  store <8 x i16> %142, <8 x i16>* %140, align 1
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %144 = bitcast <8 x i16> %143 to <4 x i32>
  %145 = shufflevector <4 x i32> %144, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %147 = bitcast i16* %146 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %147, align 1
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %149 = bitcast i16* %148 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %149, align 1
  %150 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 1
  %153 = sub <8 x i16> %152, %90
  store <8 x i16> %153, <8 x i16>* %151, align 1
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 1
  %157 = sub <8 x i16> %156, %90
  store <8 x i16> %157, <8 x i16>* %155, align 1
  %158 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %159 = bitcast <8 x i16> %158 to <4 x i32>
  %160 = shufflevector <4 x i32> %159, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %161 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %162 = bitcast i16* %161 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %162, align 1
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %164 = bitcast i16* %163 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %164, align 1
  %165 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 1
  %168 = sub <8 x i16> %167, %90
  store <8 x i16> %168, <8 x i16>* %166, align 1
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 1
  %172 = sub <8 x i16> %171, %90
  store <8 x i16> %172, <8 x i16>* %170, align 1
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %174 = bitcast <8 x i16> %173 to <4 x i32>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %177 = bitcast i16* %176 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %177, align 1
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %179 = bitcast i16* %178 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %179, align 1
  %180 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %181 = bitcast i16* %180 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 1
  %183 = sub <8 x i16> %182, %90
  store <8 x i16> %183, <8 x i16>* %181, align 1
  %184 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 1
  %187 = sub <8 x i16> %186, %90
  store <8 x i16> %187, <8 x i16>* %185, align 1
  %188 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %189 = bitcast <8 x i16> %188 to <4 x i32>
  %190 = shufflevector <4 x i32> %189, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %192 = bitcast i16* %191 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %192, align 1
  %193 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %194 = bitcast i16* %193 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %194, align 1
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 1
  %198 = sub <8 x i16> %197, %90
  store <8 x i16> %198, <8 x i16>* %196, align 1
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 1
  %202 = sub <8 x i16> %201, %90
  store <8 x i16> %202, <8 x i16>* %200, align 1
  br label %827

203:                                              ; preds = %5
  %204 = bitcast i8* %3 to i16*
  %205 = lshr i64 %4, 1
  %206 = ashr i32 %2, 1
  %207 = icmp slt i32 %2, 16
  %208 = select i1 %207, i32 %206, i32 8
  %209 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %210 = and i64 %4, -2
  br label %211

211:                                              ; preds = %211, %203
  %212 = phi i32 [ %208, %203 ], [ %262, %211 ]
  %213 = phi i16* [ %209, %203 ], [ %261, %211 ]
  %214 = phi <4 x i32> [ zeroinitializer, %203 ], [ %259, %211 ]
  %215 = phi i16* [ %204, %203 ], [ %260, %211 ]
  %216 = getelementptr inbounds i16, i16* %215, i64 %205
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 1
  %219 = getelementptr inbounds i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <2 x i64>*
  %221 = load <2 x i64>, <2 x i64>* %220, align 1
  %222 = bitcast <2 x i64> %221 to <4 x i32>
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %224 = bitcast i16* %216 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 1
  %226 = getelementptr inbounds i16, i16* %216, i64 8
  %227 = bitcast i16* %226 to <2 x i64>*
  %228 = load <2 x i64>, <2 x i64>* %227, align 1
  %229 = bitcast <2 x i64> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %231 = add <8 x i16> %225, %218
  %232 = bitcast <2 x i64> %221 to <8 x i16>
  %233 = bitcast <2 x i64> %228 to <8 x i16>
  %234 = add <8 x i16> %233, %232
  %235 = bitcast <4 x i32> %223 to <8 x i16>
  %236 = bitcast <4 x i32> %230 to <8 x i16>
  %237 = add <8 x i16> %236, %235
  %238 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %231, <8 x i16> %234) #6
  %239 = shl <8 x i16> %238, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %240 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %239, <8 x i16>* %240, align 1
  %241 = getelementptr inbounds i16, i16* %213, i64 8
  %242 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %237, <8 x i16> %237) #6
  %243 = shl <8 x i16> %242, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %244 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %244, align 1
  %245 = add <8 x i16> %243, %239
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %247 = zext <4 x i16> %246 to <4 x i32>
  %248 = shufflevector <8 x i16> %245, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %249 = bitcast <8 x i16> %248 to <4 x i32>
  %250 = shufflevector <8 x i16> %243, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %251 = bitcast <8 x i16> %250 to <4 x i32>
  %252 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %253 = bitcast <4 x i32> %252 to <8 x i16>
  %254 = shufflevector <8 x i16> %253, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %255 = sext <4 x i16> %254 to <4 x i32>
  %256 = shl nsw <4 x i32> %255, <i32 2, i32 2, i32 2, i32 2>
  %257 = add <4 x i32> %249, %247
  %258 = add <4 x i32> %257, %214
  %259 = add <4 x i32> %258, %256
  %260 = getelementptr inbounds i16, i16* %215, i64 %210
  %261 = getelementptr inbounds i16, i16* %213, i64 32
  %262 = add nsw i32 %212, -1
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %211

264:                                              ; preds = %211
  br i1 %207, label %265, label %278

265:                                              ; preds = %264
  %266 = add <4 x i32> %257, %256
  br label %267

267:                                              ; preds = %267, %265
  %268 = phi i32 [ %206, %265 ], [ %276, %267 ]
  %269 = phi i16* [ %261, %265 ], [ %274, %267 ]
  %270 = phi <4 x i32> [ %259, %265 ], [ %275, %267 ]
  %271 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %239, <8 x i16>* %271, align 1
  %272 = getelementptr inbounds i16, i16* %269, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %273, align 1
  %274 = getelementptr inbounds i16, i16* %269, i64 32
  %275 = add <4 x i32> %266, %270
  %276 = add nsw i32 %268, 1
  %277 = icmp slt i32 %276, 8
  br i1 %277, label %267, label %278

278:                                              ; preds = %267, %264
  %279 = phi <4 x i32> [ %259, %264 ], [ %275, %267 ]
  %280 = bitcast <4 x i32> %279 to <16 x i8>
  %281 = shufflevector <16 x i8> %280, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %282 = bitcast <16 x i8> %281 to <4 x i32>
  %283 = add <4 x i32> %279, %282
  %284 = bitcast <4 x i32> %283 to <16 x i8>
  %285 = shufflevector <16 x i8> %284, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %286 = bitcast <16 x i8> %285 to <4 x i32>
  %287 = add <4 x i32> %283, <i32 128, i32 128, i32 128, i32 128>
  %288 = add <4 x i32> %287, %286
  %289 = ashr <4 x i32> %288, <i32 8, i32 8, i32 8, i32 8>
  %290 = bitcast <4 x i32> %289 to <8 x i16>
  %291 = shufflevector <8 x i16> %290, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %292 = bitcast <8 x i16> %291 to <4 x i32>
  %293 = shufflevector <4 x i32> %292, <4 x i32> undef, <4 x i32> zeroinitializer
  %294 = bitcast <4 x i32> %293 to <8 x i16>
  %295 = bitcast [32 x i16]* %0 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 1
  %297 = sub <8 x i16> %296, %294
  store <8 x i16> %297, <8 x i16>* %295, align 1
  %298 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 1
  %301 = sub <8 x i16> %300, %294
  store <8 x i16> %301, <8 x i16>* %299, align 1
  %302 = shufflevector <8 x i16> %301, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %303 = bitcast <8 x i16> %302 to <4 x i32>
  %304 = shufflevector <4 x i32> %303, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %305 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %306 = bitcast i16* %305 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %306, align 1
  %307 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %308 = bitcast i16* %307 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 1
  %309 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %310 = bitcast i16* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 1
  %312 = sub <8 x i16> %311, %294
  store <8 x i16> %312, <8 x i16>* %310, align 1
  %313 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 1
  %316 = sub <8 x i16> %315, %294
  store <8 x i16> %316, <8 x i16>* %314, align 1
  %317 = shufflevector <8 x i16> %316, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %318 = bitcast <8 x i16> %317 to <4 x i32>
  %319 = shufflevector <4 x i32> %318, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %320 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %321 = bitcast i16* %320 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %321, align 1
  %322 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %323 = bitcast i16* %322 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %323, align 1
  %324 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = load <8 x i16>, <8 x i16>* %325, align 1
  %327 = sub <8 x i16> %326, %294
  store <8 x i16> %327, <8 x i16>* %325, align 1
  %328 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %329 = bitcast i16* %328 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 1
  %331 = sub <8 x i16> %330, %294
  store <8 x i16> %331, <8 x i16>* %329, align 1
  %332 = shufflevector <8 x i16> %331, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %333 = bitcast <8 x i16> %332 to <4 x i32>
  %334 = shufflevector <4 x i32> %333, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %335 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %336 = bitcast i16* %335 to <4 x i32>*
  store <4 x i32> %334, <4 x i32>* %336, align 1
  %337 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %338 = bitcast i16* %337 to <4 x i32>*
  store <4 x i32> %334, <4 x i32>* %338, align 1
  %339 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %340 = bitcast i16* %339 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 1
  %342 = sub <8 x i16> %341, %294
  store <8 x i16> %342, <8 x i16>* %340, align 1
  %343 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 1
  %346 = sub <8 x i16> %345, %294
  store <8 x i16> %346, <8 x i16>* %344, align 1
  %347 = shufflevector <8 x i16> %346, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %348 = bitcast <8 x i16> %347 to <4 x i32>
  %349 = shufflevector <4 x i32> %348, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %350 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %351 = bitcast i16* %350 to <4 x i32>*
  store <4 x i32> %349, <4 x i32>* %351, align 1
  %352 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %353 = bitcast i16* %352 to <4 x i32>*
  store <4 x i32> %349, <4 x i32>* %353, align 1
  %354 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 1
  %357 = sub <8 x i16> %356, %294
  store <8 x i16> %357, <8 x i16>* %355, align 1
  %358 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %359 = bitcast i16* %358 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 1
  %361 = sub <8 x i16> %360, %294
  store <8 x i16> %361, <8 x i16>* %359, align 1
  %362 = shufflevector <8 x i16> %361, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %363 = bitcast <8 x i16> %362 to <4 x i32>
  %364 = shufflevector <4 x i32> %363, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %365 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %366 = bitcast i16* %365 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %366, align 1
  %367 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %368 = bitcast i16* %367 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %368, align 1
  %369 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 1
  %372 = sub <8 x i16> %371, %294
  store <8 x i16> %372, <8 x i16>* %370, align 1
  %373 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 1
  %376 = sub <8 x i16> %375, %294
  store <8 x i16> %376, <8 x i16>* %374, align 1
  %377 = shufflevector <8 x i16> %376, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %378 = bitcast <8 x i16> %377 to <4 x i32>
  %379 = shufflevector <4 x i32> %378, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %380 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %381 = bitcast i16* %380 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %381, align 1
  %382 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %383 = bitcast i16* %382 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %383, align 1
  %384 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 1
  %387 = sub <8 x i16> %386, %294
  store <8 x i16> %387, <8 x i16>* %385, align 1
  %388 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %389 = bitcast i16* %388 to <8 x i16>*
  %390 = load <8 x i16>, <8 x i16>* %389, align 1
  %391 = sub <8 x i16> %390, %294
  store <8 x i16> %391, <8 x i16>* %389, align 1
  %392 = shufflevector <8 x i16> %391, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %393 = bitcast <8 x i16> %392 to <4 x i32>
  %394 = shufflevector <4 x i32> %393, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %395 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %396 = bitcast i16* %395 to <4 x i32>*
  store <4 x i32> %394, <4 x i32>* %396, align 1
  %397 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %398 = bitcast i16* %397 to <4 x i32>*
  store <4 x i32> %394, <4 x i32>* %398, align 1
  %399 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %400 = bitcast i16* %399 to <8 x i16>*
  %401 = load <8 x i16>, <8 x i16>* %400, align 1
  %402 = sub <8 x i16> %401, %294
  store <8 x i16> %402, <8 x i16>* %400, align 1
  %403 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %404 = bitcast i16* %403 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 1
  %406 = sub <8 x i16> %405, %294
  store <8 x i16> %406, <8 x i16>* %404, align 1
  br label %827

407:                                              ; preds = %5
  %408 = bitcast i8* %3 to i16*
  %409 = lshr i64 %4, 1
  %410 = ashr i32 %2, 1
  %411 = icmp slt i32 %2, 16
  %412 = select i1 %411, i32 %410, i32 8
  %413 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %414 = and i64 %4, -2
  br label %415

415:                                              ; preds = %415, %407
  %416 = phi i32 [ %412, %407 ], [ %473, %415 ]
  %417 = phi i16* [ %413, %407 ], [ %472, %415 ]
  %418 = phi <4 x i32> [ zeroinitializer, %407 ], [ %470, %415 ]
  %419 = phi i16* [ %408, %407 ], [ %471, %415 ]
  %420 = getelementptr inbounds i16, i16* %419, i64 %409
  %421 = bitcast i16* %419 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 1
  %423 = getelementptr inbounds i16, i16* %419, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 1
  %426 = getelementptr inbounds i16, i16* %419, i64 16
  %427 = bitcast i16* %426 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 1
  %429 = bitcast <2 x i64> %428 to <4 x i32>
  %430 = shufflevector <4 x i32> %429, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %431 = bitcast i16* %420 to <8 x i16>*
  %432 = load <8 x i16>, <8 x i16>* %431, align 1
  %433 = getelementptr inbounds i16, i16* %420, i64 8
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 1
  %436 = getelementptr inbounds i16, i16* %420, i64 16
  %437 = bitcast i16* %436 to <2 x i64>*
  %438 = load <2 x i64>, <2 x i64>* %437, align 1
  %439 = bitcast <2 x i64> %438 to <4 x i32>
  %440 = shufflevector <4 x i32> %439, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %441 = add <8 x i16> %432, %422
  %442 = add <8 x i16> %435, %425
  %443 = bitcast <2 x i64> %428 to <8 x i16>
  %444 = bitcast <2 x i64> %438 to <8 x i16>
  %445 = add <8 x i16> %444, %443
  %446 = bitcast <4 x i32> %430 to <8 x i16>
  %447 = bitcast <4 x i32> %440 to <8 x i16>
  %448 = add <8 x i16> %447, %446
  %449 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %441, <8 x i16> %442) #6
  %450 = shl <8 x i16> %449, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %451 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %450, <8 x i16>* %451, align 1
  %452 = getelementptr inbounds i16, i16* %417, i64 8
  %453 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %445, <8 x i16> %448) #6
  %454 = shl <8 x i16> %453, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %455 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %454, <8 x i16>* %455, align 1
  %456 = add <8 x i16> %454, %450
  %457 = shufflevector <8 x i16> %456, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %458 = zext <4 x i16> %457 to <4 x i32>
  %459 = shufflevector <8 x i16> %456, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %460 = bitcast <8 x i16> %459 to <4 x i32>
  %461 = shufflevector <8 x i16> %454, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %462 = bitcast <8 x i16> %461 to <4 x i32>
  %463 = shufflevector <4 x i32> %462, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %464 = bitcast <4 x i32> %463 to <8 x i16>
  %465 = shufflevector <8 x i16> %464, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %466 = sext <4 x i16> %465 to <4 x i32>
  %467 = shl nsw <4 x i32> %466, <i32 2, i32 2, i32 2, i32 2>
  %468 = add <4 x i32> %460, %458
  %469 = add <4 x i32> %468, %418
  %470 = add <4 x i32> %469, %467
  %471 = getelementptr inbounds i16, i16* %419, i64 %414
  %472 = getelementptr inbounds i16, i16* %417, i64 32
  %473 = add nsw i32 %416, -1
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %475, label %415

475:                                              ; preds = %415
  br i1 %411, label %476, label %489

476:                                              ; preds = %475
  %477 = add <4 x i32> %468, %467
  br label %478

478:                                              ; preds = %478, %476
  %479 = phi i32 [ %410, %476 ], [ %487, %478 ]
  %480 = phi i16* [ %472, %476 ], [ %485, %478 ]
  %481 = phi <4 x i32> [ %470, %476 ], [ %486, %478 ]
  %482 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %450, <8 x i16>* %482, align 1
  %483 = getelementptr inbounds i16, i16* %480, i64 8
  %484 = bitcast i16* %483 to <8 x i16>*
  store <8 x i16> %454, <8 x i16>* %484, align 1
  %485 = getelementptr inbounds i16, i16* %480, i64 32
  %486 = add <4 x i32> %477, %481
  %487 = add nsw i32 %479, 1
  %488 = icmp slt i32 %487, 8
  br i1 %488, label %478, label %489

489:                                              ; preds = %478, %475
  %490 = phi <4 x i32> [ %470, %475 ], [ %486, %478 ]
  %491 = bitcast <4 x i32> %490 to <16 x i8>
  %492 = shufflevector <16 x i8> %491, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %493 = bitcast <16 x i8> %492 to <4 x i32>
  %494 = add <4 x i32> %490, %493
  %495 = bitcast <4 x i32> %494 to <16 x i8>
  %496 = shufflevector <16 x i8> %495, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %497 = bitcast <16 x i8> %496 to <4 x i32>
  %498 = add <4 x i32> %494, <i32 128, i32 128, i32 128, i32 128>
  %499 = add <4 x i32> %498, %497
  %500 = ashr <4 x i32> %499, <i32 8, i32 8, i32 8, i32 8>
  %501 = bitcast <4 x i32> %500 to <8 x i16>
  %502 = shufflevector <8 x i16> %501, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %503 = bitcast <8 x i16> %502 to <4 x i32>
  %504 = shufflevector <4 x i32> %503, <4 x i32> undef, <4 x i32> zeroinitializer
  %505 = bitcast <4 x i32> %504 to <8 x i16>
  %506 = bitcast [32 x i16]* %0 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 1
  %508 = sub <8 x i16> %507, %505
  store <8 x i16> %508, <8 x i16>* %506, align 1
  %509 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %510 = bitcast i16* %509 to <8 x i16>*
  %511 = load <8 x i16>, <8 x i16>* %510, align 1
  %512 = sub <8 x i16> %511, %505
  store <8 x i16> %512, <8 x i16>* %510, align 1
  %513 = shufflevector <8 x i16> %512, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %514 = bitcast <8 x i16> %513 to <4 x i32>
  %515 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %516 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %517 = bitcast i16* %516 to <4 x i32>*
  store <4 x i32> %515, <4 x i32>* %517, align 1
  %518 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %519 = bitcast i16* %518 to <4 x i32>*
  store <4 x i32> %515, <4 x i32>* %519, align 1
  %520 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %521 = bitcast i16* %520 to <8 x i16>*
  %522 = load <8 x i16>, <8 x i16>* %521, align 1
  %523 = sub <8 x i16> %522, %505
  store <8 x i16> %523, <8 x i16>* %521, align 1
  %524 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 1
  %527 = sub <8 x i16> %526, %505
  store <8 x i16> %527, <8 x i16>* %525, align 1
  %528 = shufflevector <8 x i16> %527, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %529 = bitcast <8 x i16> %528 to <4 x i32>
  %530 = shufflevector <4 x i32> %529, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %531 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %532 = bitcast i16* %531 to <4 x i32>*
  store <4 x i32> %530, <4 x i32>* %532, align 1
  %533 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %534 = bitcast i16* %533 to <4 x i32>*
  store <4 x i32> %530, <4 x i32>* %534, align 1
  %535 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %536 = bitcast i16* %535 to <8 x i16>*
  %537 = load <8 x i16>, <8 x i16>* %536, align 1
  %538 = sub <8 x i16> %537, %505
  store <8 x i16> %538, <8 x i16>* %536, align 1
  %539 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %540 = bitcast i16* %539 to <8 x i16>*
  %541 = load <8 x i16>, <8 x i16>* %540, align 1
  %542 = sub <8 x i16> %541, %505
  store <8 x i16> %542, <8 x i16>* %540, align 1
  %543 = shufflevector <8 x i16> %542, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %544 = bitcast <8 x i16> %543 to <4 x i32>
  %545 = shufflevector <4 x i32> %544, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %546 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %547 = bitcast i16* %546 to <4 x i32>*
  store <4 x i32> %545, <4 x i32>* %547, align 1
  %548 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %549 = bitcast i16* %548 to <4 x i32>*
  store <4 x i32> %545, <4 x i32>* %549, align 1
  %550 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %551 = bitcast i16* %550 to <8 x i16>*
  %552 = load <8 x i16>, <8 x i16>* %551, align 1
  %553 = sub <8 x i16> %552, %505
  store <8 x i16> %553, <8 x i16>* %551, align 1
  %554 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %555 = bitcast i16* %554 to <8 x i16>*
  %556 = load <8 x i16>, <8 x i16>* %555, align 1
  %557 = sub <8 x i16> %556, %505
  store <8 x i16> %557, <8 x i16>* %555, align 1
  %558 = shufflevector <8 x i16> %557, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %559 = bitcast <8 x i16> %558 to <4 x i32>
  %560 = shufflevector <4 x i32> %559, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %561 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %562 = bitcast i16* %561 to <4 x i32>*
  store <4 x i32> %560, <4 x i32>* %562, align 1
  %563 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %564 = bitcast i16* %563 to <4 x i32>*
  store <4 x i32> %560, <4 x i32>* %564, align 1
  %565 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %566 = bitcast i16* %565 to <8 x i16>*
  %567 = load <8 x i16>, <8 x i16>* %566, align 1
  %568 = sub <8 x i16> %567, %505
  store <8 x i16> %568, <8 x i16>* %566, align 1
  %569 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %570 = bitcast i16* %569 to <8 x i16>*
  %571 = load <8 x i16>, <8 x i16>* %570, align 1
  %572 = sub <8 x i16> %571, %505
  store <8 x i16> %572, <8 x i16>* %570, align 1
  %573 = shufflevector <8 x i16> %572, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %574 = bitcast <8 x i16> %573 to <4 x i32>
  %575 = shufflevector <4 x i32> %574, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %576 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %577 = bitcast i16* %576 to <4 x i32>*
  store <4 x i32> %575, <4 x i32>* %577, align 1
  %578 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %579 = bitcast i16* %578 to <4 x i32>*
  store <4 x i32> %575, <4 x i32>* %579, align 1
  %580 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %581 = bitcast i16* %580 to <8 x i16>*
  %582 = load <8 x i16>, <8 x i16>* %581, align 1
  %583 = sub <8 x i16> %582, %505
  store <8 x i16> %583, <8 x i16>* %581, align 1
  %584 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %585 = bitcast i16* %584 to <8 x i16>*
  %586 = load <8 x i16>, <8 x i16>* %585, align 1
  %587 = sub <8 x i16> %586, %505
  store <8 x i16> %587, <8 x i16>* %585, align 1
  %588 = shufflevector <8 x i16> %587, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %589 = bitcast <8 x i16> %588 to <4 x i32>
  %590 = shufflevector <4 x i32> %589, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %591 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %592 = bitcast i16* %591 to <4 x i32>*
  store <4 x i32> %590, <4 x i32>* %592, align 1
  %593 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %594 = bitcast i16* %593 to <4 x i32>*
  store <4 x i32> %590, <4 x i32>* %594, align 1
  %595 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %596 = bitcast i16* %595 to <8 x i16>*
  %597 = load <8 x i16>, <8 x i16>* %596, align 1
  %598 = sub <8 x i16> %597, %505
  store <8 x i16> %598, <8 x i16>* %596, align 1
  %599 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %600 = bitcast i16* %599 to <8 x i16>*
  %601 = load <8 x i16>, <8 x i16>* %600, align 1
  %602 = sub <8 x i16> %601, %505
  store <8 x i16> %602, <8 x i16>* %600, align 1
  %603 = shufflevector <8 x i16> %602, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %604 = bitcast <8 x i16> %603 to <4 x i32>
  %605 = shufflevector <4 x i32> %604, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %606 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %607 = bitcast i16* %606 to <4 x i32>*
  store <4 x i32> %605, <4 x i32>* %607, align 1
  %608 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %609 = bitcast i16* %608 to <4 x i32>*
  store <4 x i32> %605, <4 x i32>* %609, align 1
  %610 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %611 = bitcast i16* %610 to <8 x i16>*
  %612 = load <8 x i16>, <8 x i16>* %611, align 1
  %613 = sub <8 x i16> %612, %505
  store <8 x i16> %613, <8 x i16>* %611, align 1
  %614 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %615 = bitcast i16* %614 to <8 x i16>*
  %616 = load <8 x i16>, <8 x i16>* %615, align 1
  %617 = sub <8 x i16> %616, %505
  store <8 x i16> %617, <8 x i16>* %615, align 1
  br label %827

618:                                              ; preds = %5
  %619 = bitcast i8* %3 to i16*
  %620 = lshr i64 %4, 1
  %621 = ashr i32 %2, 1
  %622 = icmp slt i32 %2, 16
  %623 = select i1 %622, i32 %621, i32 8
  %624 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %625 = and i64 %4, -2
  br label %626

626:                                              ; preds = %626, %618
  %627 = phi i32 [ %623, %618 ], [ %682, %626 ]
  %628 = phi i16* [ %624, %618 ], [ %681, %626 ]
  %629 = phi <4 x i32> [ zeroinitializer, %618 ], [ %679, %626 ]
  %630 = phi i16* [ %619, %618 ], [ %680, %626 ]
  %631 = getelementptr inbounds i16, i16* %630, i64 %620
  %632 = bitcast i16* %630 to <8 x i16>*
  %633 = load <8 x i16>, <8 x i16>* %632, align 1
  %634 = getelementptr inbounds i16, i16* %630, i64 8
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 1
  %637 = getelementptr inbounds i16, i16* %630, i64 16
  %638 = bitcast i16* %637 to <8 x i16>*
  %639 = load <8 x i16>, <8 x i16>* %638, align 1
  %640 = getelementptr inbounds i16, i16* %630, i64 24
  %641 = bitcast i16* %640 to <8 x i16>*
  %642 = load <8 x i16>, <8 x i16>* %641, align 1
  %643 = bitcast i16* %631 to <8 x i16>*
  %644 = load <8 x i16>, <8 x i16>* %643, align 1
  %645 = getelementptr inbounds i16, i16* %631, i64 8
  %646 = bitcast i16* %645 to <8 x i16>*
  %647 = load <8 x i16>, <8 x i16>* %646, align 1
  %648 = getelementptr inbounds i16, i16* %631, i64 16
  %649 = bitcast i16* %648 to <8 x i16>*
  %650 = load <8 x i16>, <8 x i16>* %649, align 1
  %651 = getelementptr inbounds i16, i16* %631, i64 24
  %652 = bitcast i16* %651 to <8 x i16>*
  %653 = load <8 x i16>, <8 x i16>* %652, align 1
  %654 = add <8 x i16> %644, %633
  %655 = add <8 x i16> %647, %636
  %656 = add <8 x i16> %650, %639
  %657 = add <8 x i16> %653, %642
  %658 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %654, <8 x i16> %655) #6
  %659 = shl <8 x i16> %658, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %660 = bitcast i16* %628 to <8 x i16>*
  store <8 x i16> %659, <8 x i16>* %660, align 1
  %661 = getelementptr inbounds i16, i16* %628, i64 8
  %662 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %656, <8 x i16> %657) #6
  %663 = shl <8 x i16> %662, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %664 = bitcast i16* %661 to <8 x i16>*
  store <8 x i16> %663, <8 x i16>* %664, align 1
  %665 = add <8 x i16> %663, %659
  %666 = shufflevector <8 x i16> %665, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %667 = zext <4 x i16> %666 to <4 x i32>
  %668 = shufflevector <8 x i16> %665, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %669 = bitcast <8 x i16> %668 to <4 x i32>
  %670 = shufflevector <8 x i16> %663, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %671 = bitcast <8 x i16> %670 to <4 x i32>
  %672 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %673 = bitcast <4 x i32> %672 to <8 x i16>
  %674 = shufflevector <8 x i16> %673, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %675 = sext <4 x i16> %674 to <4 x i32>
  %676 = shl nsw <4 x i32> %675, <i32 2, i32 2, i32 2, i32 2>
  %677 = add <4 x i32> %669, %667
  %678 = add <4 x i32> %677, %629
  %679 = add <4 x i32> %678, %676
  %680 = getelementptr inbounds i16, i16* %630, i64 %625
  %681 = getelementptr inbounds i16, i16* %628, i64 32
  %682 = add nsw i32 %627, -1
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %684, label %626

684:                                              ; preds = %626
  br i1 %622, label %685, label %698

685:                                              ; preds = %684
  %686 = add <4 x i32> %677, %676
  br label %687

687:                                              ; preds = %687, %685
  %688 = phi i32 [ %621, %685 ], [ %696, %687 ]
  %689 = phi i16* [ %681, %685 ], [ %694, %687 ]
  %690 = phi <4 x i32> [ %679, %685 ], [ %695, %687 ]
  %691 = bitcast i16* %689 to <8 x i16>*
  store <8 x i16> %659, <8 x i16>* %691, align 1
  %692 = getelementptr inbounds i16, i16* %689, i64 8
  %693 = bitcast i16* %692 to <8 x i16>*
  store <8 x i16> %663, <8 x i16>* %693, align 1
  %694 = getelementptr inbounds i16, i16* %689, i64 32
  %695 = add <4 x i32> %686, %690
  %696 = add nsw i32 %688, 1
  %697 = icmp slt i32 %696, 8
  br i1 %697, label %687, label %698

698:                                              ; preds = %687, %684
  %699 = phi <4 x i32> [ %679, %684 ], [ %695, %687 ]
  %700 = bitcast <4 x i32> %699 to <16 x i8>
  %701 = shufflevector <16 x i8> %700, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %702 = bitcast <16 x i8> %701 to <4 x i32>
  %703 = add <4 x i32> %699, %702
  %704 = bitcast <4 x i32> %703 to <16 x i8>
  %705 = shufflevector <16 x i8> %704, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %706 = bitcast <16 x i8> %705 to <4 x i32>
  %707 = add <4 x i32> %703, <i32 128, i32 128, i32 128, i32 128>
  %708 = add <4 x i32> %707, %706
  %709 = ashr <4 x i32> %708, <i32 8, i32 8, i32 8, i32 8>
  %710 = bitcast <4 x i32> %709 to <8 x i16>
  %711 = shufflevector <8 x i16> %710, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %712 = bitcast <8 x i16> %711 to <4 x i32>
  %713 = shufflevector <4 x i32> %712, <4 x i32> undef, <4 x i32> zeroinitializer
  %714 = bitcast <4 x i32> %713 to <8 x i16>
  %715 = bitcast [32 x i16]* %0 to <8 x i16>*
  %716 = load <8 x i16>, <8 x i16>* %715, align 1
  %717 = sub <8 x i16> %716, %714
  store <8 x i16> %717, <8 x i16>* %715, align 1
  %718 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %719 = bitcast i16* %718 to <8 x i16>*
  %720 = load <8 x i16>, <8 x i16>* %719, align 1
  %721 = sub <8 x i16> %720, %714
  store <8 x i16> %721, <8 x i16>* %719, align 1
  %722 = shufflevector <8 x i16> %721, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %723 = bitcast <8 x i16> %722 to <4 x i32>
  %724 = shufflevector <4 x i32> %723, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %725 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %726 = bitcast i16* %725 to <4 x i32>*
  store <4 x i32> %724, <4 x i32>* %726, align 1
  %727 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %728 = bitcast i16* %727 to <4 x i32>*
  store <4 x i32> %724, <4 x i32>* %728, align 1
  %729 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %730 = bitcast i16* %729 to <8 x i16>*
  %731 = load <8 x i16>, <8 x i16>* %730, align 1
  %732 = sub <8 x i16> %731, %714
  store <8 x i16> %732, <8 x i16>* %730, align 1
  %733 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 40
  %734 = bitcast i16* %733 to <8 x i16>*
  %735 = load <8 x i16>, <8 x i16>* %734, align 1
  %736 = sub <8 x i16> %735, %714
  store <8 x i16> %736, <8 x i16>* %734, align 1
  %737 = shufflevector <8 x i16> %736, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %738 = bitcast <8 x i16> %737 to <4 x i32>
  %739 = shufflevector <4 x i32> %738, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %740 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 48
  %741 = bitcast i16* %740 to <4 x i32>*
  store <4 x i32> %739, <4 x i32>* %741, align 1
  %742 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 56
  %743 = bitcast i16* %742 to <4 x i32>*
  store <4 x i32> %739, <4 x i32>* %743, align 1
  %744 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 64
  %745 = bitcast i16* %744 to <8 x i16>*
  %746 = load <8 x i16>, <8 x i16>* %745, align 1
  %747 = sub <8 x i16> %746, %714
  store <8 x i16> %747, <8 x i16>* %745, align 1
  %748 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 72
  %749 = bitcast i16* %748 to <8 x i16>*
  %750 = load <8 x i16>, <8 x i16>* %749, align 1
  %751 = sub <8 x i16> %750, %714
  store <8 x i16> %751, <8 x i16>* %749, align 1
  %752 = shufflevector <8 x i16> %751, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %753 = bitcast <8 x i16> %752 to <4 x i32>
  %754 = shufflevector <4 x i32> %753, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %755 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 80
  %756 = bitcast i16* %755 to <4 x i32>*
  store <4 x i32> %754, <4 x i32>* %756, align 1
  %757 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 88
  %758 = bitcast i16* %757 to <4 x i32>*
  store <4 x i32> %754, <4 x i32>* %758, align 1
  %759 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 96
  %760 = bitcast i16* %759 to <8 x i16>*
  %761 = load <8 x i16>, <8 x i16>* %760, align 1
  %762 = sub <8 x i16> %761, %714
  store <8 x i16> %762, <8 x i16>* %760, align 1
  %763 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 104
  %764 = bitcast i16* %763 to <8 x i16>*
  %765 = load <8 x i16>, <8 x i16>* %764, align 1
  %766 = sub <8 x i16> %765, %714
  store <8 x i16> %766, <8 x i16>* %764, align 1
  %767 = shufflevector <8 x i16> %766, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %768 = bitcast <8 x i16> %767 to <4 x i32>
  %769 = shufflevector <4 x i32> %768, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %770 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 112
  %771 = bitcast i16* %770 to <4 x i32>*
  store <4 x i32> %769, <4 x i32>* %771, align 1
  %772 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 120
  %773 = bitcast i16* %772 to <4 x i32>*
  store <4 x i32> %769, <4 x i32>* %773, align 1
  %774 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 128
  %775 = bitcast i16* %774 to <8 x i16>*
  %776 = load <8 x i16>, <8 x i16>* %775, align 1
  %777 = sub <8 x i16> %776, %714
  store <8 x i16> %777, <8 x i16>* %775, align 1
  %778 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 136
  %779 = bitcast i16* %778 to <8 x i16>*
  %780 = load <8 x i16>, <8 x i16>* %779, align 1
  %781 = sub <8 x i16> %780, %714
  store <8 x i16> %781, <8 x i16>* %779, align 1
  %782 = shufflevector <8 x i16> %781, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %783 = bitcast <8 x i16> %782 to <4 x i32>
  %784 = shufflevector <4 x i32> %783, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %785 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 144
  %786 = bitcast i16* %785 to <4 x i32>*
  store <4 x i32> %784, <4 x i32>* %786, align 1
  %787 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 152
  %788 = bitcast i16* %787 to <4 x i32>*
  store <4 x i32> %784, <4 x i32>* %788, align 1
  %789 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 160
  %790 = bitcast i16* %789 to <8 x i16>*
  %791 = load <8 x i16>, <8 x i16>* %790, align 1
  %792 = sub <8 x i16> %791, %714
  store <8 x i16> %792, <8 x i16>* %790, align 1
  %793 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 168
  %794 = bitcast i16* %793 to <8 x i16>*
  %795 = load <8 x i16>, <8 x i16>* %794, align 1
  %796 = sub <8 x i16> %795, %714
  store <8 x i16> %796, <8 x i16>* %794, align 1
  %797 = shufflevector <8 x i16> %796, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %798 = bitcast <8 x i16> %797 to <4 x i32>
  %799 = shufflevector <4 x i32> %798, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %800 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 176
  %801 = bitcast i16* %800 to <4 x i32>*
  store <4 x i32> %799, <4 x i32>* %801, align 1
  %802 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 184
  %803 = bitcast i16* %802 to <4 x i32>*
  store <4 x i32> %799, <4 x i32>* %803, align 1
  %804 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 192
  %805 = bitcast i16* %804 to <8 x i16>*
  %806 = load <8 x i16>, <8 x i16>* %805, align 1
  %807 = sub <8 x i16> %806, %714
  store <8 x i16> %807, <8 x i16>* %805, align 1
  %808 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 200
  %809 = bitcast i16* %808 to <8 x i16>*
  %810 = load <8 x i16>, <8 x i16>* %809, align 1
  %811 = sub <8 x i16> %810, %714
  store <8 x i16> %811, <8 x i16>* %809, align 1
  %812 = shufflevector <8 x i16> %811, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %813 = bitcast <8 x i16> %812 to <4 x i32>
  %814 = shufflevector <4 x i32> %813, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %815 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 208
  %816 = bitcast i16* %815 to <4 x i32>*
  store <4 x i32> %814, <4 x i32>* %816, align 1
  %817 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 216
  %818 = bitcast i16* %817 to <4 x i32>*
  store <4 x i32> %814, <4 x i32>* %818, align 1
  %819 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 224
  %820 = bitcast i16* %819 to <8 x i16>*
  %821 = load <8 x i16>, <8 x i16>* %820, align 1
  %822 = sub <8 x i16> %821, %714
  store <8 x i16> %822, <8 x i16>* %820, align 1
  %823 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 232
  %824 = bitcast i16* %823 to <8 x i16>*
  %825 = load <8 x i16>, <8 x i16>* %824, align 1
  %826 = sub <8 x i16> %825, %714
  store <8 x i16> %826, <8 x i16>* %824, align 1
  br label %827

827:                                              ; preds = %698, %489, %278, %74
  %828 = phi <8 x i16> [ %826, %698 ], [ %617, %489 ], [ %406, %278 ], [ %202, %74 ]
  %829 = shufflevector <8 x i16> %828, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %830 = bitcast <8 x i16> %829 to <4 x i32>
  %831 = shufflevector <4 x i32> %830, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %832 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 240
  %833 = bitcast i16* %832 to <4 x i32>*
  store <4 x i32> %831, <4 x i32>* %833, align 1
  %834 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 248
  %835 = bitcast i16* %834 to <4 x i32>*
  store <4 x i32> %831, <4 x i32>* %835, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %387 [
    i32 8, label %6
    i32 16, label %126
    i32 24, label %253
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 32
  %11 = select i1 %10, i32 %9, i32 16
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %58, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %57, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %55, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %56, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %47 = bitcast <8 x i16> %46 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %49 = bitcast <4 x i32> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %51 = sext <4 x i16> %50 to <4 x i32>
  %52 = shl nsw <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = add <4 x i32> %45, %43
  %54 = add <4 x i32> %53, %17
  %55 = add <4 x i32> %54, %52
  %56 = getelementptr inbounds i16, i16* %18, i64 %13
  %57 = getelementptr inbounds i16, i16* %16, i64 32
  %58 = add nsw i32 %15, -1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %14

60:                                               ; preds = %14
  br i1 %10, label %61, label %74

61:                                               ; preds = %60
  %62 = add <4 x i32> %53, %52
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i32 [ %9, %61 ], [ %72, %63 ]
  %65 = phi i16* [ %57, %61 ], [ %70, %63 ]
  %66 = phi <4 x i32> [ %55, %61 ], [ %71, %63 ]
  %67 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %67, align 1
  %68 = getelementptr inbounds i16, i16* %65, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %65, i64 32
  %71 = add <4 x i32> %62, %66
  %72 = add nsw i32 %64, 1
  %73 = icmp slt i32 %72, 16
  br i1 %73, label %63, label %74

74:                                               ; preds = %63, %60
  %75 = phi <4 x i32> [ %55, %60 ], [ %71, %63 ]
  %76 = bitcast <4 x i32> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %78 = bitcast <16 x i8> %77 to <4 x i32>
  %79 = add <4 x i32> %75, %78
  %80 = bitcast <4 x i32> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = add <4 x i32> %79, <i32 256, i32 256, i32 256, i32 256>
  %84 = add <4 x i32> %83, %82
  %85 = ashr <4 x i32> %84, <i32 9, i32 9, i32 9, i32 9>
  %86 = bitcast <4 x i32> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = bitcast <8 x i16> %87 to <4 x i32>
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = bitcast <4 x i32> %89 to <8 x i16>
  br label %91

91:                                               ; preds = %91, %74
  %92 = phi i32 [ 16, %74 ], [ %124, %91 ]
  %93 = phi i16* [ %12, %74 ], [ %123, %91 ]
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 1
  %96 = sub <8 x i16> %95, %90
  store <8 x i16> %96, <8 x i16>* %94, align 1
  %97 = getelementptr inbounds i16, i16* %93, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = sub <8 x i16> %99, %90
  store <8 x i16> %100, <8 x i16>* %98, align 1
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %102 = bitcast <8 x i16> %101 to <4 x i32>
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %104 = getelementptr inbounds i16, i16* %93, i64 16
  %105 = bitcast i16* %104 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %105, align 1
  %106 = getelementptr inbounds i16, i16* %93, i64 24
  %107 = bitcast i16* %106 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %107, align 1
  %108 = getelementptr inbounds i16, i16* %93, i64 32
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = sub <8 x i16> %110, %90
  store <8 x i16> %111, <8 x i16>* %109, align 1
  %112 = getelementptr inbounds i16, i16* %93, i64 40
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = sub <8 x i16> %114, %90
  store <8 x i16> %115, <8 x i16>* %113, align 1
  %116 = shufflevector <8 x i16> %115, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %117 = bitcast <8 x i16> %116 to <4 x i32>
  %118 = shufflevector <4 x i32> %117, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %119 = getelementptr inbounds i16, i16* %93, i64 48
  %120 = bitcast i16* %119 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %120, align 1
  %121 = getelementptr inbounds i16, i16* %93, i64 56
  %122 = bitcast i16* %121 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %93, i64 64
  %124 = add nsw i32 %92, -2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %519, label %91

126:                                              ; preds = %5
  %127 = bitcast i8* %3 to i16*
  %128 = lshr i64 %4, 1
  %129 = ashr i32 %2, 1
  %130 = icmp slt i32 %2, 32
  %131 = select i1 %130, i32 %129, i32 16
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %133 = and i64 %4, -2
  br label %134

134:                                              ; preds = %134, %126
  %135 = phi i32 [ %131, %126 ], [ %185, %134 ]
  %136 = phi i16* [ %132, %126 ], [ %184, %134 ]
  %137 = phi <4 x i32> [ zeroinitializer, %126 ], [ %182, %134 ]
  %138 = phi i16* [ %127, %126 ], [ %183, %134 ]
  %139 = getelementptr inbounds i16, i16* %138, i64 %128
  %140 = bitcast i16* %138 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 1
  %142 = getelementptr inbounds i16, i16* %138, i64 8
  %143 = bitcast i16* %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 1
  %145 = bitcast <2 x i64> %144 to <4 x i32>
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %147 = bitcast i16* %139 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 1
  %149 = getelementptr inbounds i16, i16* %139, i64 8
  %150 = bitcast i16* %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 1
  %152 = bitcast <2 x i64> %151 to <4 x i32>
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %154 = add <8 x i16> %148, %141
  %155 = bitcast <2 x i64> %144 to <8 x i16>
  %156 = bitcast <2 x i64> %151 to <8 x i16>
  %157 = add <8 x i16> %156, %155
  %158 = bitcast <4 x i32> %146 to <8 x i16>
  %159 = bitcast <4 x i32> %153 to <8 x i16>
  %160 = add <8 x i16> %159, %158
  %161 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %154, <8 x i16> %157) #6
  %162 = shl <8 x i16> %161, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %163 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 1
  %164 = getelementptr inbounds i16, i16* %136, i64 8
  %165 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %160, <8 x i16> %160) #6
  %166 = shl <8 x i16> %165, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %167 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 1
  %168 = add <8 x i16> %166, %162
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %170 = zext <4 x i16> %169 to <4 x i32>
  %171 = shufflevector <8 x i16> %168, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %172 = bitcast <8 x i16> %171 to <4 x i32>
  %173 = shufflevector <8 x i16> %166, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %174 = bitcast <8 x i16> %173 to <4 x i32>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %176 = bitcast <4 x i32> %175 to <8 x i16>
  %177 = shufflevector <8 x i16> %176, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %178 = sext <4 x i16> %177 to <4 x i32>
  %179 = shl nsw <4 x i32> %178, <i32 2, i32 2, i32 2, i32 2>
  %180 = add <4 x i32> %172, %170
  %181 = add <4 x i32> %180, %137
  %182 = add <4 x i32> %181, %179
  %183 = getelementptr inbounds i16, i16* %138, i64 %133
  %184 = getelementptr inbounds i16, i16* %136, i64 32
  %185 = add nsw i32 %135, -1
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %134

187:                                              ; preds = %134
  br i1 %130, label %188, label %201

188:                                              ; preds = %187
  %189 = add <4 x i32> %180, %179
  br label %190

190:                                              ; preds = %190, %188
  %191 = phi i32 [ %129, %188 ], [ %199, %190 ]
  %192 = phi i16* [ %184, %188 ], [ %197, %190 ]
  %193 = phi <4 x i32> [ %182, %188 ], [ %198, %190 ]
  %194 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %194, align 1
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %196, align 1
  %197 = getelementptr inbounds i16, i16* %192, i64 32
  %198 = add <4 x i32> %189, %193
  %199 = add nsw i32 %191, 1
  %200 = icmp slt i32 %199, 16
  br i1 %200, label %190, label %201

201:                                              ; preds = %190, %187
  %202 = phi <4 x i32> [ %182, %187 ], [ %198, %190 ]
  %203 = bitcast <4 x i32> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %205 = bitcast <16 x i8> %204 to <4 x i32>
  %206 = add <4 x i32> %202, %205
  %207 = bitcast <4 x i32> %206 to <16 x i8>
  %208 = shufflevector <16 x i8> %207, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %209 = bitcast <16 x i8> %208 to <4 x i32>
  %210 = add <4 x i32> %206, <i32 256, i32 256, i32 256, i32 256>
  %211 = add <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 9, i32 9, i32 9, i32 9>
  %213 = bitcast <4 x i32> %212 to <8 x i16>
  %214 = shufflevector <8 x i16> %213, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = bitcast <8 x i16> %214 to <4 x i32>
  %216 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> zeroinitializer
  %217 = bitcast <4 x i32> %216 to <8 x i16>
  br label %218

218:                                              ; preds = %218, %201
  %219 = phi i32 [ 16, %201 ], [ %251, %218 ]
  %220 = phi i16* [ %132, %201 ], [ %250, %218 ]
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 1
  %223 = sub <8 x i16> %222, %217
  store <8 x i16> %223, <8 x i16>* %221, align 1
  %224 = getelementptr inbounds i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 1
  %227 = sub <8 x i16> %226, %217
  store <8 x i16> %227, <8 x i16>* %225, align 1
  %228 = shufflevector <8 x i16> %227, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %229 = bitcast <8 x i16> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %231 = getelementptr inbounds i16, i16* %220, i64 16
  %232 = bitcast i16* %231 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %232, align 1
  %233 = getelementptr inbounds i16, i16* %220, i64 24
  %234 = bitcast i16* %233 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %234, align 1
  %235 = getelementptr inbounds i16, i16* %220, i64 32
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = sub <8 x i16> %237, %217
  store <8 x i16> %238, <8 x i16>* %236, align 1
  %239 = getelementptr inbounds i16, i16* %220, i64 40
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 1
  %242 = sub <8 x i16> %241, %217
  store <8 x i16> %242, <8 x i16>* %240, align 1
  %243 = shufflevector <8 x i16> %242, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %244 = bitcast <8 x i16> %243 to <4 x i32>
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %246 = getelementptr inbounds i16, i16* %220, i64 48
  %247 = bitcast i16* %246 to <4 x i32>*
  store <4 x i32> %245, <4 x i32>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %220, i64 56
  %249 = bitcast i16* %248 to <4 x i32>*
  store <4 x i32> %245, <4 x i32>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %220, i64 64
  %251 = add nsw i32 %219, -2
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %519, label %218

253:                                              ; preds = %5
  %254 = bitcast i8* %3 to i16*
  %255 = lshr i64 %4, 1
  %256 = ashr i32 %2, 1
  %257 = icmp slt i32 %2, 32
  %258 = select i1 %257, i32 %256, i32 16
  %259 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %260 = and i64 %4, -2
  br label %261

261:                                              ; preds = %261, %253
  %262 = phi i32 [ %258, %253 ], [ %319, %261 ]
  %263 = phi i16* [ %259, %253 ], [ %318, %261 ]
  %264 = phi <4 x i32> [ zeroinitializer, %253 ], [ %316, %261 ]
  %265 = phi i16* [ %254, %253 ], [ %317, %261 ]
  %266 = getelementptr inbounds i16, i16* %265, i64 %255
  %267 = bitcast i16* %265 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 1
  %269 = getelementptr inbounds i16, i16* %265, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = getelementptr inbounds i16, i16* %265, i64 16
  %273 = bitcast i16* %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 1
  %275 = bitcast <2 x i64> %274 to <4 x i32>
  %276 = shufflevector <4 x i32> %275, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %277 = bitcast i16* %266 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 1
  %279 = getelementptr inbounds i16, i16* %266, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 1
  %282 = getelementptr inbounds i16, i16* %266, i64 16
  %283 = bitcast i16* %282 to <2 x i64>*
  %284 = load <2 x i64>, <2 x i64>* %283, align 1
  %285 = bitcast <2 x i64> %284 to <4 x i32>
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %287 = add <8 x i16> %278, %268
  %288 = add <8 x i16> %281, %271
  %289 = bitcast <2 x i64> %274 to <8 x i16>
  %290 = bitcast <2 x i64> %284 to <8 x i16>
  %291 = add <8 x i16> %290, %289
  %292 = bitcast <4 x i32> %276 to <8 x i16>
  %293 = bitcast <4 x i32> %286 to <8 x i16>
  %294 = add <8 x i16> %293, %292
  %295 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %287, <8 x i16> %288) #6
  %296 = shl <8 x i16> %295, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %297 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %297, align 1
  %298 = getelementptr inbounds i16, i16* %263, i64 8
  %299 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %291, <8 x i16> %294) #6
  %300 = shl <8 x i16> %299, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %301 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %301, align 1
  %302 = add <8 x i16> %300, %296
  %303 = shufflevector <8 x i16> %302, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %304 = zext <4 x i16> %303 to <4 x i32>
  %305 = shufflevector <8 x i16> %302, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %306 = bitcast <8 x i16> %305 to <4 x i32>
  %307 = shufflevector <8 x i16> %300, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %308 = bitcast <8 x i16> %307 to <4 x i32>
  %309 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %310 = bitcast <4 x i32> %309 to <8 x i16>
  %311 = shufflevector <8 x i16> %310, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %312 = sext <4 x i16> %311 to <4 x i32>
  %313 = shl nsw <4 x i32> %312, <i32 2, i32 2, i32 2, i32 2>
  %314 = add <4 x i32> %306, %304
  %315 = add <4 x i32> %314, %264
  %316 = add <4 x i32> %315, %313
  %317 = getelementptr inbounds i16, i16* %265, i64 %260
  %318 = getelementptr inbounds i16, i16* %263, i64 32
  %319 = add nsw i32 %262, -1
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %261

321:                                              ; preds = %261
  br i1 %257, label %322, label %335

322:                                              ; preds = %321
  %323 = add <4 x i32> %314, %313
  br label %324

324:                                              ; preds = %324, %322
  %325 = phi i32 [ %256, %322 ], [ %333, %324 ]
  %326 = phi i16* [ %318, %322 ], [ %331, %324 ]
  %327 = phi <4 x i32> [ %316, %322 ], [ %332, %324 ]
  %328 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %328, align 1
  %329 = getelementptr inbounds i16, i16* %326, i64 8
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %330, align 1
  %331 = getelementptr inbounds i16, i16* %326, i64 32
  %332 = add <4 x i32> %323, %327
  %333 = add nsw i32 %325, 1
  %334 = icmp slt i32 %333, 16
  br i1 %334, label %324, label %335

335:                                              ; preds = %324, %321
  %336 = phi <4 x i32> [ %316, %321 ], [ %332, %324 ]
  %337 = bitcast <4 x i32> %336 to <16 x i8>
  %338 = shufflevector <16 x i8> %337, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %339 = bitcast <16 x i8> %338 to <4 x i32>
  %340 = add <4 x i32> %336, %339
  %341 = bitcast <4 x i32> %340 to <16 x i8>
  %342 = shufflevector <16 x i8> %341, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %343 = bitcast <16 x i8> %342 to <4 x i32>
  %344 = add <4 x i32> %340, <i32 256, i32 256, i32 256, i32 256>
  %345 = add <4 x i32> %344, %343
  %346 = ashr <4 x i32> %345, <i32 9, i32 9, i32 9, i32 9>
  %347 = bitcast <4 x i32> %346 to <8 x i16>
  %348 = shufflevector <8 x i16> %347, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %349 = bitcast <8 x i16> %348 to <4 x i32>
  %350 = shufflevector <4 x i32> %349, <4 x i32> undef, <4 x i32> zeroinitializer
  %351 = bitcast <4 x i32> %350 to <8 x i16>
  br label %352

352:                                              ; preds = %352, %335
  %353 = phi i32 [ 16, %335 ], [ %385, %352 ]
  %354 = phi i16* [ %259, %335 ], [ %384, %352 ]
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 1
  %357 = sub <8 x i16> %356, %351
  store <8 x i16> %357, <8 x i16>* %355, align 1
  %358 = getelementptr inbounds i16, i16* %354, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 1
  %361 = sub <8 x i16> %360, %351
  store <8 x i16> %361, <8 x i16>* %359, align 1
  %362 = shufflevector <8 x i16> %361, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %363 = bitcast <8 x i16> %362 to <4 x i32>
  %364 = shufflevector <4 x i32> %363, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %365 = getelementptr inbounds i16, i16* %354, i64 16
  %366 = bitcast i16* %365 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %366, align 1
  %367 = getelementptr inbounds i16, i16* %354, i64 24
  %368 = bitcast i16* %367 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %368, align 1
  %369 = getelementptr inbounds i16, i16* %354, i64 32
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 1
  %372 = sub <8 x i16> %371, %351
  store <8 x i16> %372, <8 x i16>* %370, align 1
  %373 = getelementptr inbounds i16, i16* %354, i64 40
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 1
  %376 = sub <8 x i16> %375, %351
  store <8 x i16> %376, <8 x i16>* %374, align 1
  %377 = shufflevector <8 x i16> %376, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %378 = bitcast <8 x i16> %377 to <4 x i32>
  %379 = shufflevector <4 x i32> %378, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %380 = getelementptr inbounds i16, i16* %354, i64 48
  %381 = bitcast i16* %380 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %381, align 1
  %382 = getelementptr inbounds i16, i16* %354, i64 56
  %383 = bitcast i16* %382 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %383, align 1
  %384 = getelementptr inbounds i16, i16* %354, i64 64
  %385 = add nsw i32 %353, -2
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %519, label %352

387:                                              ; preds = %5
  %388 = bitcast i8* %3 to i16*
  %389 = lshr i64 %4, 1
  %390 = ashr i32 %2, 1
  %391 = icmp slt i32 %2, 32
  %392 = select i1 %391, i32 %390, i32 16
  %393 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %394 = and i64 %4, -2
  br label %395

395:                                              ; preds = %395, %387
  %396 = phi i32 [ %392, %387 ], [ %451, %395 ]
  %397 = phi i16* [ %393, %387 ], [ %450, %395 ]
  %398 = phi <4 x i32> [ zeroinitializer, %387 ], [ %448, %395 ]
  %399 = phi i16* [ %388, %387 ], [ %449, %395 ]
  %400 = getelementptr inbounds i16, i16* %399, i64 %389
  %401 = bitcast i16* %399 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 1
  %403 = getelementptr inbounds i16, i16* %399, i64 8
  %404 = bitcast i16* %403 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 1
  %406 = getelementptr inbounds i16, i16* %399, i64 16
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 1
  %409 = getelementptr inbounds i16, i16* %399, i64 24
  %410 = bitcast i16* %409 to <8 x i16>*
  %411 = load <8 x i16>, <8 x i16>* %410, align 1
  %412 = bitcast i16* %400 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 1
  %414 = getelementptr inbounds i16, i16* %400, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  %416 = load <8 x i16>, <8 x i16>* %415, align 1
  %417 = getelementptr inbounds i16, i16* %400, i64 16
  %418 = bitcast i16* %417 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 1
  %420 = getelementptr inbounds i16, i16* %400, i64 24
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 1
  %423 = add <8 x i16> %413, %402
  %424 = add <8 x i16> %416, %405
  %425 = add <8 x i16> %419, %408
  %426 = add <8 x i16> %422, %411
  %427 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %423, <8 x i16> %424) #6
  %428 = shl <8 x i16> %427, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %429 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %429, align 1
  %430 = getelementptr inbounds i16, i16* %397, i64 8
  %431 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %425, <8 x i16> %426) #6
  %432 = shl <8 x i16> %431, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %433 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %433, align 1
  %434 = add <8 x i16> %432, %428
  %435 = shufflevector <8 x i16> %434, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %436 = zext <4 x i16> %435 to <4 x i32>
  %437 = shufflevector <8 x i16> %434, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %438 = bitcast <8 x i16> %437 to <4 x i32>
  %439 = shufflevector <8 x i16> %432, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %440 = bitcast <8 x i16> %439 to <4 x i32>
  %441 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %442 = bitcast <4 x i32> %441 to <8 x i16>
  %443 = shufflevector <8 x i16> %442, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %444 = sext <4 x i16> %443 to <4 x i32>
  %445 = shl nsw <4 x i32> %444, <i32 2, i32 2, i32 2, i32 2>
  %446 = add <4 x i32> %438, %436
  %447 = add <4 x i32> %446, %398
  %448 = add <4 x i32> %447, %445
  %449 = getelementptr inbounds i16, i16* %399, i64 %394
  %450 = getelementptr inbounds i16, i16* %397, i64 32
  %451 = add nsw i32 %396, -1
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %453, label %395

453:                                              ; preds = %395
  br i1 %391, label %454, label %467

454:                                              ; preds = %453
  %455 = add <4 x i32> %446, %445
  br label %456

456:                                              ; preds = %456, %454
  %457 = phi i32 [ %390, %454 ], [ %465, %456 ]
  %458 = phi i16* [ %450, %454 ], [ %463, %456 ]
  %459 = phi <4 x i32> [ %448, %454 ], [ %464, %456 ]
  %460 = bitcast i16* %458 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %460, align 1
  %461 = getelementptr inbounds i16, i16* %458, i64 8
  %462 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %462, align 1
  %463 = getelementptr inbounds i16, i16* %458, i64 32
  %464 = add <4 x i32> %455, %459
  %465 = add nsw i32 %457, 1
  %466 = icmp slt i32 %465, 16
  br i1 %466, label %456, label %467

467:                                              ; preds = %456, %453
  %468 = phi <4 x i32> [ %448, %453 ], [ %464, %456 ]
  %469 = bitcast <4 x i32> %468 to <16 x i8>
  %470 = shufflevector <16 x i8> %469, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %471 = bitcast <16 x i8> %470 to <4 x i32>
  %472 = add <4 x i32> %468, %471
  %473 = bitcast <4 x i32> %472 to <16 x i8>
  %474 = shufflevector <16 x i8> %473, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %475 = bitcast <16 x i8> %474 to <4 x i32>
  %476 = add <4 x i32> %472, <i32 256, i32 256, i32 256, i32 256>
  %477 = add <4 x i32> %476, %475
  %478 = ashr <4 x i32> %477, <i32 9, i32 9, i32 9, i32 9>
  %479 = bitcast <4 x i32> %478 to <8 x i16>
  %480 = shufflevector <8 x i16> %479, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %481 = bitcast <8 x i16> %480 to <4 x i32>
  %482 = shufflevector <4 x i32> %481, <4 x i32> undef, <4 x i32> zeroinitializer
  %483 = bitcast <4 x i32> %482 to <8 x i16>
  br label %484

484:                                              ; preds = %484, %467
  %485 = phi i32 [ 16, %467 ], [ %517, %484 ]
  %486 = phi i16* [ %393, %467 ], [ %516, %484 ]
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 1
  %489 = sub <8 x i16> %488, %483
  store <8 x i16> %489, <8 x i16>* %487, align 1
  %490 = getelementptr inbounds i16, i16* %486, i64 8
  %491 = bitcast i16* %490 to <8 x i16>*
  %492 = load <8 x i16>, <8 x i16>* %491, align 1
  %493 = sub <8 x i16> %492, %483
  store <8 x i16> %493, <8 x i16>* %491, align 1
  %494 = shufflevector <8 x i16> %493, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %495 = bitcast <8 x i16> %494 to <4 x i32>
  %496 = shufflevector <4 x i32> %495, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %497 = getelementptr inbounds i16, i16* %486, i64 16
  %498 = bitcast i16* %497 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %498, align 1
  %499 = getelementptr inbounds i16, i16* %486, i64 24
  %500 = bitcast i16* %499 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %500, align 1
  %501 = getelementptr inbounds i16, i16* %486, i64 32
  %502 = bitcast i16* %501 to <8 x i16>*
  %503 = load <8 x i16>, <8 x i16>* %502, align 1
  %504 = sub <8 x i16> %503, %483
  store <8 x i16> %504, <8 x i16>* %502, align 1
  %505 = getelementptr inbounds i16, i16* %486, i64 40
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 1
  %508 = sub <8 x i16> %507, %483
  store <8 x i16> %508, <8 x i16>* %506, align 1
  %509 = shufflevector <8 x i16> %508, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %510 = bitcast <8 x i16> %509 to <4 x i32>
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %512 = getelementptr inbounds i16, i16* %486, i64 48
  %513 = bitcast i16* %512 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %513, align 1
  %514 = getelementptr inbounds i16, i16* %486, i64 56
  %515 = bitcast i16* %514 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %515, align 1
  %516 = getelementptr inbounds i16, i16* %486, i64 64
  %517 = add nsw i32 %485, -2
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %519, label %484

519:                                              ; preds = %352, %218, %91, %484
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler420_WxH_SSE4_1ILi5ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #3 {
  switch i32 %1, label %387 [
    i32 8, label %6
    i32 16, label %126
    i32 24, label %253
  ]

6:                                                ; preds = %5
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = ashr i32 %2, 1
  %10 = icmp slt i32 %2, 64
  %11 = select i1 %10, i32 %9, i32 32
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %13 = and i64 %4, -2
  br label %14

14:                                               ; preds = %14, %6
  %15 = phi i32 [ %11, %6 ], [ %58, %14 ]
  %16 = phi i16* [ %12, %6 ], [ %57, %14 ]
  %17 = phi <4 x i32> [ zeroinitializer, %6 ], [ %55, %14 ]
  %18 = phi i16* [ %7, %6 ], [ %56, %14 ]
  %19 = getelementptr inbounds i16, i16* %18, i64 %8
  %20 = bitcast i16* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i16* %19 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <2 x i64> %21 to <8 x i16>
  %29 = bitcast <2 x i64> %25 to <8 x i16>
  %30 = add <8 x i16> %29, %28
  %31 = bitcast <4 x i32> %23 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = add <8 x i16> %32, %31
  %34 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %30, <8 x i16> %33) #6
  %35 = shl <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 8
  %38 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %33, <8 x i16> %33) #6
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 1
  %41 = add <8 x i16> %39, %35
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = zext <4 x i16> %42 to <4 x i32>
  %44 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = bitcast <8 x i16> %44 to <4 x i32>
  %46 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %47 = bitcast <8 x i16> %46 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %49 = bitcast <4 x i32> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %51 = sext <4 x i16> %50 to <4 x i32>
  %52 = shl nsw <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = add <4 x i32> %45, %43
  %54 = add <4 x i32> %53, %17
  %55 = add <4 x i32> %54, %52
  %56 = getelementptr inbounds i16, i16* %18, i64 %13
  %57 = getelementptr inbounds i16, i16* %16, i64 32
  %58 = add nsw i32 %15, -1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %14

60:                                               ; preds = %14
  br i1 %10, label %61, label %74

61:                                               ; preds = %60
  %62 = add <4 x i32> %53, %52
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i32 [ %9, %61 ], [ %72, %63 ]
  %65 = phi i16* [ %57, %61 ], [ %70, %63 ]
  %66 = phi <4 x i32> [ %55, %61 ], [ %71, %63 ]
  %67 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %67, align 1
  %68 = getelementptr inbounds i16, i16* %65, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds i16, i16* %65, i64 32
  %71 = add <4 x i32> %62, %66
  %72 = add nsw i32 %64, 1
  %73 = icmp slt i32 %72, 32
  br i1 %73, label %63, label %74

74:                                               ; preds = %63, %60
  %75 = phi <4 x i32> [ %55, %60 ], [ %71, %63 ]
  %76 = bitcast <4 x i32> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %78 = bitcast <16 x i8> %77 to <4 x i32>
  %79 = add <4 x i32> %75, %78
  %80 = bitcast <4 x i32> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = add <4 x i32> %79, <i32 512, i32 512, i32 512, i32 512>
  %84 = add <4 x i32> %83, %82
  %85 = ashr <4 x i32> %84, <i32 10, i32 10, i32 10, i32 10>
  %86 = bitcast <4 x i32> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = bitcast <8 x i16> %87 to <4 x i32>
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = bitcast <4 x i32> %89 to <8 x i16>
  br label %91

91:                                               ; preds = %91, %74
  %92 = phi i32 [ 32, %74 ], [ %124, %91 ]
  %93 = phi i16* [ %12, %74 ], [ %123, %91 ]
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 1
  %96 = sub <8 x i16> %95, %90
  store <8 x i16> %96, <8 x i16>* %94, align 1
  %97 = getelementptr inbounds i16, i16* %93, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = sub <8 x i16> %99, %90
  store <8 x i16> %100, <8 x i16>* %98, align 1
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %102 = bitcast <8 x i16> %101 to <4 x i32>
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %104 = getelementptr inbounds i16, i16* %93, i64 16
  %105 = bitcast i16* %104 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %105, align 1
  %106 = getelementptr inbounds i16, i16* %93, i64 24
  %107 = bitcast i16* %106 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %107, align 1
  %108 = getelementptr inbounds i16, i16* %93, i64 32
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = sub <8 x i16> %110, %90
  store <8 x i16> %111, <8 x i16>* %109, align 1
  %112 = getelementptr inbounds i16, i16* %93, i64 40
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = sub <8 x i16> %114, %90
  store <8 x i16> %115, <8 x i16>* %113, align 1
  %116 = shufflevector <8 x i16> %115, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %117 = bitcast <8 x i16> %116 to <4 x i32>
  %118 = shufflevector <4 x i32> %117, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %119 = getelementptr inbounds i16, i16* %93, i64 48
  %120 = bitcast i16* %119 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %120, align 1
  %121 = getelementptr inbounds i16, i16* %93, i64 56
  %122 = bitcast i16* %121 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %93, i64 64
  %124 = add nsw i32 %92, -2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %519, label %91

126:                                              ; preds = %5
  %127 = bitcast i8* %3 to i16*
  %128 = lshr i64 %4, 1
  %129 = ashr i32 %2, 1
  %130 = icmp slt i32 %2, 64
  %131 = select i1 %130, i32 %129, i32 32
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %133 = and i64 %4, -2
  br label %134

134:                                              ; preds = %134, %126
  %135 = phi i32 [ %131, %126 ], [ %185, %134 ]
  %136 = phi i16* [ %132, %126 ], [ %184, %134 ]
  %137 = phi <4 x i32> [ zeroinitializer, %126 ], [ %182, %134 ]
  %138 = phi i16* [ %127, %126 ], [ %183, %134 ]
  %139 = getelementptr inbounds i16, i16* %138, i64 %128
  %140 = bitcast i16* %138 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 1
  %142 = getelementptr inbounds i16, i16* %138, i64 8
  %143 = bitcast i16* %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 1
  %145 = bitcast <2 x i64> %144 to <4 x i32>
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %147 = bitcast i16* %139 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 1
  %149 = getelementptr inbounds i16, i16* %139, i64 8
  %150 = bitcast i16* %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 1
  %152 = bitcast <2 x i64> %151 to <4 x i32>
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %154 = add <8 x i16> %148, %141
  %155 = bitcast <2 x i64> %144 to <8 x i16>
  %156 = bitcast <2 x i64> %151 to <8 x i16>
  %157 = add <8 x i16> %156, %155
  %158 = bitcast <4 x i32> %146 to <8 x i16>
  %159 = bitcast <4 x i32> %153 to <8 x i16>
  %160 = add <8 x i16> %159, %158
  %161 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %154, <8 x i16> %157) #6
  %162 = shl <8 x i16> %161, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %163 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 1
  %164 = getelementptr inbounds i16, i16* %136, i64 8
  %165 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %160, <8 x i16> %160) #6
  %166 = shl <8 x i16> %165, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %167 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 1
  %168 = add <8 x i16> %166, %162
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %170 = zext <4 x i16> %169 to <4 x i32>
  %171 = shufflevector <8 x i16> %168, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %172 = bitcast <8 x i16> %171 to <4 x i32>
  %173 = shufflevector <8 x i16> %166, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %174 = bitcast <8 x i16> %173 to <4 x i32>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %176 = bitcast <4 x i32> %175 to <8 x i16>
  %177 = shufflevector <8 x i16> %176, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %178 = sext <4 x i16> %177 to <4 x i32>
  %179 = shl nsw <4 x i32> %178, <i32 2, i32 2, i32 2, i32 2>
  %180 = add <4 x i32> %172, %170
  %181 = add <4 x i32> %180, %137
  %182 = add <4 x i32> %181, %179
  %183 = getelementptr inbounds i16, i16* %138, i64 %133
  %184 = getelementptr inbounds i16, i16* %136, i64 32
  %185 = add nsw i32 %135, -1
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %134

187:                                              ; preds = %134
  br i1 %130, label %188, label %201

188:                                              ; preds = %187
  %189 = add <4 x i32> %180, %179
  br label %190

190:                                              ; preds = %190, %188
  %191 = phi i32 [ %129, %188 ], [ %199, %190 ]
  %192 = phi i16* [ %184, %188 ], [ %197, %190 ]
  %193 = phi <4 x i32> [ %182, %188 ], [ %198, %190 ]
  %194 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %194, align 1
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %196, align 1
  %197 = getelementptr inbounds i16, i16* %192, i64 32
  %198 = add <4 x i32> %189, %193
  %199 = add nsw i32 %191, 1
  %200 = icmp slt i32 %199, 32
  br i1 %200, label %190, label %201

201:                                              ; preds = %190, %187
  %202 = phi <4 x i32> [ %182, %187 ], [ %198, %190 ]
  %203 = bitcast <4 x i32> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %205 = bitcast <16 x i8> %204 to <4 x i32>
  %206 = add <4 x i32> %202, %205
  %207 = bitcast <4 x i32> %206 to <16 x i8>
  %208 = shufflevector <16 x i8> %207, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %209 = bitcast <16 x i8> %208 to <4 x i32>
  %210 = add <4 x i32> %206, <i32 512, i32 512, i32 512, i32 512>
  %211 = add <4 x i32> %210, %209
  %212 = ashr <4 x i32> %211, <i32 10, i32 10, i32 10, i32 10>
  %213 = bitcast <4 x i32> %212 to <8 x i16>
  %214 = shufflevector <8 x i16> %213, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = bitcast <8 x i16> %214 to <4 x i32>
  %216 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> zeroinitializer
  %217 = bitcast <4 x i32> %216 to <8 x i16>
  br label %218

218:                                              ; preds = %218, %201
  %219 = phi i32 [ 32, %201 ], [ %251, %218 ]
  %220 = phi i16* [ %132, %201 ], [ %250, %218 ]
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 1
  %223 = sub <8 x i16> %222, %217
  store <8 x i16> %223, <8 x i16>* %221, align 1
  %224 = getelementptr inbounds i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 1
  %227 = sub <8 x i16> %226, %217
  store <8 x i16> %227, <8 x i16>* %225, align 1
  %228 = shufflevector <8 x i16> %227, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %229 = bitcast <8 x i16> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %231 = getelementptr inbounds i16, i16* %220, i64 16
  %232 = bitcast i16* %231 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %232, align 1
  %233 = getelementptr inbounds i16, i16* %220, i64 24
  %234 = bitcast i16* %233 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %234, align 1
  %235 = getelementptr inbounds i16, i16* %220, i64 32
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = sub <8 x i16> %237, %217
  store <8 x i16> %238, <8 x i16>* %236, align 1
  %239 = getelementptr inbounds i16, i16* %220, i64 40
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 1
  %242 = sub <8 x i16> %241, %217
  store <8 x i16> %242, <8 x i16>* %240, align 1
  %243 = shufflevector <8 x i16> %242, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %244 = bitcast <8 x i16> %243 to <4 x i32>
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %246 = getelementptr inbounds i16, i16* %220, i64 48
  %247 = bitcast i16* %246 to <4 x i32>*
  store <4 x i32> %245, <4 x i32>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %220, i64 56
  %249 = bitcast i16* %248 to <4 x i32>*
  store <4 x i32> %245, <4 x i32>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %220, i64 64
  %251 = add nsw i32 %219, -2
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %519, label %218

253:                                              ; preds = %5
  %254 = bitcast i8* %3 to i16*
  %255 = lshr i64 %4, 1
  %256 = ashr i32 %2, 1
  %257 = icmp slt i32 %2, 64
  %258 = select i1 %257, i32 %256, i32 32
  %259 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %260 = and i64 %4, -2
  br label %261

261:                                              ; preds = %261, %253
  %262 = phi i32 [ %258, %253 ], [ %319, %261 ]
  %263 = phi i16* [ %259, %253 ], [ %318, %261 ]
  %264 = phi <4 x i32> [ zeroinitializer, %253 ], [ %316, %261 ]
  %265 = phi i16* [ %254, %253 ], [ %317, %261 ]
  %266 = getelementptr inbounds i16, i16* %265, i64 %255
  %267 = bitcast i16* %265 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 1
  %269 = getelementptr inbounds i16, i16* %265, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 1
  %272 = getelementptr inbounds i16, i16* %265, i64 16
  %273 = bitcast i16* %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 1
  %275 = bitcast <2 x i64> %274 to <4 x i32>
  %276 = shufflevector <4 x i32> %275, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %277 = bitcast i16* %266 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 1
  %279 = getelementptr inbounds i16, i16* %266, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 1
  %282 = getelementptr inbounds i16, i16* %266, i64 16
  %283 = bitcast i16* %282 to <2 x i64>*
  %284 = load <2 x i64>, <2 x i64>* %283, align 1
  %285 = bitcast <2 x i64> %284 to <4 x i32>
  %286 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %287 = add <8 x i16> %278, %268
  %288 = add <8 x i16> %281, %271
  %289 = bitcast <2 x i64> %274 to <8 x i16>
  %290 = bitcast <2 x i64> %284 to <8 x i16>
  %291 = add <8 x i16> %290, %289
  %292 = bitcast <4 x i32> %276 to <8 x i16>
  %293 = bitcast <4 x i32> %286 to <8 x i16>
  %294 = add <8 x i16> %293, %292
  %295 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %287, <8 x i16> %288) #6
  %296 = shl <8 x i16> %295, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %297 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %297, align 1
  %298 = getelementptr inbounds i16, i16* %263, i64 8
  %299 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %291, <8 x i16> %294) #6
  %300 = shl <8 x i16> %299, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %301 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %301, align 1
  %302 = add <8 x i16> %300, %296
  %303 = shufflevector <8 x i16> %302, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %304 = zext <4 x i16> %303 to <4 x i32>
  %305 = shufflevector <8 x i16> %302, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %306 = bitcast <8 x i16> %305 to <4 x i32>
  %307 = shufflevector <8 x i16> %300, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %308 = bitcast <8 x i16> %307 to <4 x i32>
  %309 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %310 = bitcast <4 x i32> %309 to <8 x i16>
  %311 = shufflevector <8 x i16> %310, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %312 = sext <4 x i16> %311 to <4 x i32>
  %313 = shl nsw <4 x i32> %312, <i32 2, i32 2, i32 2, i32 2>
  %314 = add <4 x i32> %306, %304
  %315 = add <4 x i32> %314, %264
  %316 = add <4 x i32> %315, %313
  %317 = getelementptr inbounds i16, i16* %265, i64 %260
  %318 = getelementptr inbounds i16, i16* %263, i64 32
  %319 = add nsw i32 %262, -1
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %261

321:                                              ; preds = %261
  br i1 %257, label %322, label %335

322:                                              ; preds = %321
  %323 = add <4 x i32> %314, %313
  br label %324

324:                                              ; preds = %324, %322
  %325 = phi i32 [ %256, %322 ], [ %333, %324 ]
  %326 = phi i16* [ %318, %322 ], [ %331, %324 ]
  %327 = phi <4 x i32> [ %316, %322 ], [ %332, %324 ]
  %328 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %328, align 1
  %329 = getelementptr inbounds i16, i16* %326, i64 8
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %330, align 1
  %331 = getelementptr inbounds i16, i16* %326, i64 32
  %332 = add <4 x i32> %323, %327
  %333 = add nsw i32 %325, 1
  %334 = icmp slt i32 %333, 32
  br i1 %334, label %324, label %335

335:                                              ; preds = %324, %321
  %336 = phi <4 x i32> [ %316, %321 ], [ %332, %324 ]
  %337 = bitcast <4 x i32> %336 to <16 x i8>
  %338 = shufflevector <16 x i8> %337, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %339 = bitcast <16 x i8> %338 to <4 x i32>
  %340 = add <4 x i32> %336, %339
  %341 = bitcast <4 x i32> %340 to <16 x i8>
  %342 = shufflevector <16 x i8> %341, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %343 = bitcast <16 x i8> %342 to <4 x i32>
  %344 = add <4 x i32> %340, <i32 512, i32 512, i32 512, i32 512>
  %345 = add <4 x i32> %344, %343
  %346 = ashr <4 x i32> %345, <i32 10, i32 10, i32 10, i32 10>
  %347 = bitcast <4 x i32> %346 to <8 x i16>
  %348 = shufflevector <8 x i16> %347, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %349 = bitcast <8 x i16> %348 to <4 x i32>
  %350 = shufflevector <4 x i32> %349, <4 x i32> undef, <4 x i32> zeroinitializer
  %351 = bitcast <4 x i32> %350 to <8 x i16>
  br label %352

352:                                              ; preds = %352, %335
  %353 = phi i32 [ 32, %335 ], [ %385, %352 ]
  %354 = phi i16* [ %259, %335 ], [ %384, %352 ]
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 1
  %357 = sub <8 x i16> %356, %351
  store <8 x i16> %357, <8 x i16>* %355, align 1
  %358 = getelementptr inbounds i16, i16* %354, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 1
  %361 = sub <8 x i16> %360, %351
  store <8 x i16> %361, <8 x i16>* %359, align 1
  %362 = shufflevector <8 x i16> %361, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %363 = bitcast <8 x i16> %362 to <4 x i32>
  %364 = shufflevector <4 x i32> %363, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %365 = getelementptr inbounds i16, i16* %354, i64 16
  %366 = bitcast i16* %365 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %366, align 1
  %367 = getelementptr inbounds i16, i16* %354, i64 24
  %368 = bitcast i16* %367 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %368, align 1
  %369 = getelementptr inbounds i16, i16* %354, i64 32
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 1
  %372 = sub <8 x i16> %371, %351
  store <8 x i16> %372, <8 x i16>* %370, align 1
  %373 = getelementptr inbounds i16, i16* %354, i64 40
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 1
  %376 = sub <8 x i16> %375, %351
  store <8 x i16> %376, <8 x i16>* %374, align 1
  %377 = shufflevector <8 x i16> %376, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %378 = bitcast <8 x i16> %377 to <4 x i32>
  %379 = shufflevector <4 x i32> %378, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %380 = getelementptr inbounds i16, i16* %354, i64 48
  %381 = bitcast i16* %380 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %381, align 1
  %382 = getelementptr inbounds i16, i16* %354, i64 56
  %383 = bitcast i16* %382 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %383, align 1
  %384 = getelementptr inbounds i16, i16* %354, i64 64
  %385 = add nsw i32 %353, -2
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %519, label %352

387:                                              ; preds = %5
  %388 = bitcast i8* %3 to i16*
  %389 = lshr i64 %4, 1
  %390 = ashr i32 %2, 1
  %391 = icmp slt i32 %2, 64
  %392 = select i1 %391, i32 %390, i32 32
  %393 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %394 = and i64 %4, -2
  br label %395

395:                                              ; preds = %395, %387
  %396 = phi i32 [ %392, %387 ], [ %451, %395 ]
  %397 = phi i16* [ %393, %387 ], [ %450, %395 ]
  %398 = phi <4 x i32> [ zeroinitializer, %387 ], [ %448, %395 ]
  %399 = phi i16* [ %388, %387 ], [ %449, %395 ]
  %400 = getelementptr inbounds i16, i16* %399, i64 %389
  %401 = bitcast i16* %399 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 1
  %403 = getelementptr inbounds i16, i16* %399, i64 8
  %404 = bitcast i16* %403 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 1
  %406 = getelementptr inbounds i16, i16* %399, i64 16
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 1
  %409 = getelementptr inbounds i16, i16* %399, i64 24
  %410 = bitcast i16* %409 to <8 x i16>*
  %411 = load <8 x i16>, <8 x i16>* %410, align 1
  %412 = bitcast i16* %400 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 1
  %414 = getelementptr inbounds i16, i16* %400, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  %416 = load <8 x i16>, <8 x i16>* %415, align 1
  %417 = getelementptr inbounds i16, i16* %400, i64 16
  %418 = bitcast i16* %417 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 1
  %420 = getelementptr inbounds i16, i16* %400, i64 24
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 1
  %423 = add <8 x i16> %413, %402
  %424 = add <8 x i16> %416, %405
  %425 = add <8 x i16> %419, %408
  %426 = add <8 x i16> %422, %411
  %427 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %423, <8 x i16> %424) #6
  %428 = shl <8 x i16> %427, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %429 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %429, align 1
  %430 = getelementptr inbounds i16, i16* %397, i64 8
  %431 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %425, <8 x i16> %426) #6
  %432 = shl <8 x i16> %431, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %433 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %433, align 1
  %434 = add <8 x i16> %432, %428
  %435 = shufflevector <8 x i16> %434, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %436 = zext <4 x i16> %435 to <4 x i32>
  %437 = shufflevector <8 x i16> %434, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %438 = bitcast <8 x i16> %437 to <4 x i32>
  %439 = shufflevector <8 x i16> %432, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %440 = bitcast <8 x i16> %439 to <4 x i32>
  %441 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %442 = bitcast <4 x i32> %441 to <8 x i16>
  %443 = shufflevector <8 x i16> %442, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %444 = sext <4 x i16> %443 to <4 x i32>
  %445 = shl nsw <4 x i32> %444, <i32 2, i32 2, i32 2, i32 2>
  %446 = add <4 x i32> %438, %436
  %447 = add <4 x i32> %446, %398
  %448 = add <4 x i32> %447, %445
  %449 = getelementptr inbounds i16, i16* %399, i64 %394
  %450 = getelementptr inbounds i16, i16* %397, i64 32
  %451 = add nsw i32 %396, -1
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %453, label %395

453:                                              ; preds = %395
  br i1 %391, label %454, label %467

454:                                              ; preds = %453
  %455 = add <4 x i32> %446, %445
  br label %456

456:                                              ; preds = %456, %454
  %457 = phi i32 [ %390, %454 ], [ %465, %456 ]
  %458 = phi i16* [ %450, %454 ], [ %463, %456 ]
  %459 = phi <4 x i32> [ %448, %454 ], [ %464, %456 ]
  %460 = bitcast i16* %458 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %460, align 1
  %461 = getelementptr inbounds i16, i16* %458, i64 8
  %462 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %462, align 1
  %463 = getelementptr inbounds i16, i16* %458, i64 32
  %464 = add <4 x i32> %455, %459
  %465 = add nsw i32 %457, 1
  %466 = icmp slt i32 %465, 32
  br i1 %466, label %456, label %467

467:                                              ; preds = %456, %453
  %468 = phi <4 x i32> [ %448, %453 ], [ %464, %456 ]
  %469 = bitcast <4 x i32> %468 to <16 x i8>
  %470 = shufflevector <16 x i8> %469, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %471 = bitcast <16 x i8> %470 to <4 x i32>
  %472 = add <4 x i32> %468, %471
  %473 = bitcast <4 x i32> %472 to <16 x i8>
  %474 = shufflevector <16 x i8> %473, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %475 = bitcast <16 x i8> %474 to <4 x i32>
  %476 = add <4 x i32> %472, <i32 512, i32 512, i32 512, i32 512>
  %477 = add <4 x i32> %476, %475
  %478 = ashr <4 x i32> %477, <i32 10, i32 10, i32 10, i32 10>
  %479 = bitcast <4 x i32> %478 to <8 x i16>
  %480 = shufflevector <8 x i16> %479, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %481 = bitcast <8 x i16> %480 to <4 x i32>
  %482 = shufflevector <4 x i32> %481, <4 x i32> undef, <4 x i32> zeroinitializer
  %483 = bitcast <4 x i32> %482 to <8 x i16>
  br label %484

484:                                              ; preds = %484, %467
  %485 = phi i32 [ 32, %467 ], [ %517, %484 ]
  %486 = phi i16* [ %393, %467 ], [ %516, %484 ]
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 1
  %489 = sub <8 x i16> %488, %483
  store <8 x i16> %489, <8 x i16>* %487, align 1
  %490 = getelementptr inbounds i16, i16* %486, i64 8
  %491 = bitcast i16* %490 to <8 x i16>*
  %492 = load <8 x i16>, <8 x i16>* %491, align 1
  %493 = sub <8 x i16> %492, %483
  store <8 x i16> %493, <8 x i16>* %491, align 1
  %494 = shufflevector <8 x i16> %493, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %495 = bitcast <8 x i16> %494 to <4 x i32>
  %496 = shufflevector <4 x i32> %495, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %497 = getelementptr inbounds i16, i16* %486, i64 16
  %498 = bitcast i16* %497 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %498, align 1
  %499 = getelementptr inbounds i16, i16* %486, i64 24
  %500 = bitcast i16* %499 to <4 x i32>*
  store <4 x i32> %496, <4 x i32>* %500, align 1
  %501 = getelementptr inbounds i16, i16* %486, i64 32
  %502 = bitcast i16* %501 to <8 x i16>*
  %503 = load <8 x i16>, <8 x i16>* %502, align 1
  %504 = sub <8 x i16> %503, %483
  store <8 x i16> %504, <8 x i16>* %502, align 1
  %505 = getelementptr inbounds i16, i16* %486, i64 40
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 1
  %508 = sub <8 x i16> %507, %483
  store <8 x i16> %508, <8 x i16>* %506, align 1
  %509 = shufflevector <8 x i16> %508, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %510 = bitcast <8 x i16> %509 to <4 x i32>
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %512 = getelementptr inbounds i16, i16* %486, i64 48
  %513 = bitcast i16* %512 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %513, align 1
  %514 = getelementptr inbounds i16, i16* %486, i64 56
  %515 = bitcast i16* %514 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %515, align 1
  %516 = getelementptr inbounds i16, i16* %486, i64 64
  %517 = add nsw i32 %485, -2
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %519, label %484

519:                                              ; preds = %352, %218, %91, %484
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 3
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = and i64 %4, -2
  %10 = add nsw i32 %2, -2
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %6, label %34, label %13

13:                                               ; preds = %5
  br i1 %12, label %14, label %27

14:                                               ; preds = %13
  %15 = bitcast i8* %3 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = getelementptr inbounds i16, i16* %7, i64 %8
  %19 = bitcast <2 x i64> %17 to <4 x float>
  %20 = bitcast i16* %18 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 1
  %22 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = shufflevector <4 x float> %19, <4 x float> %22, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %24 = getelementptr inbounds i16, i16* %7, i64 %9
  %25 = bitcast <4 x float> %23 to <8 x i16>
  %26 = add nsw i32 %2, -2
  br label %27

27:                                               ; preds = %14, %13
  %28 = phi <4 x float> [ undef, %13 ], [ %23, %14 ]
  %29 = phi <8 x i16> [ undef, %13 ], [ %25, %14 ]
  %30 = phi i16* [ %7, %13 ], [ %24, %14 ]
  %31 = phi <8 x i16> [ zeroinitializer, %13 ], [ %25, %14 ]
  %32 = phi i32 [ %2, %13 ], [ %26, %14 ]
  %33 = icmp ult i32 %10, 2
  br i1 %33, label %182, label %152

34:                                               ; preds = %5
  br i1 %12, label %35, label %48

35:                                               ; preds = %34
  %36 = bitcast i8* %3 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %7, i64 %8
  %40 = bitcast <2 x i64> %38 to <4 x float>
  %41 = bitcast i16* %39 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x float> %40, <4 x float> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = getelementptr inbounds i16, i16* %7, i64 %9
  %46 = bitcast <4 x float> %44 to <8 x i16>
  %47 = add nsw i32 %2, -2
  br label %48

48:                                               ; preds = %35, %34
  %49 = phi <8 x i16> [ undef, %34 ], [ %46, %35 ]
  %50 = phi i16* [ %7, %34 ], [ %45, %35 ]
  %51 = phi <8 x i16> [ zeroinitializer, %34 ], [ %46, %35 ]
  %52 = phi i32 [ %2, %34 ], [ %47, %35 ]
  %53 = icmp ult i32 %10, 2
  br i1 %53, label %84, label %54

54:                                               ; preds = %48, %54
  %55 = phi i16* [ %79, %54 ], [ %50, %48 ]
  %56 = phi <8 x i16> [ %81, %54 ], [ %51, %48 ]
  %57 = phi i32 [ %82, %54 ], [ %52, %48 ]
  %58 = bitcast i16* %55 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = getelementptr inbounds i16, i16* %55, i64 %8
  %62 = bitcast <2 x i64> %60 to <4 x float>
  %63 = bitcast i16* %61 to <2 x float>*
  %64 = load <2 x float>, <2 x float>* %63, align 1
  %65 = shufflevector <2 x float> %64, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x float> %62, <4 x float> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = getelementptr inbounds i16, i16* %55, i64 %9
  %68 = bitcast <4 x float> %66 to <8 x i16>
  %69 = add <8 x i16> %56, %68
  %70 = bitcast i16* %67 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = getelementptr inbounds i16, i16* %67, i64 %8
  %74 = bitcast <2 x i64> %72 to <4 x float>
  %75 = bitcast i16* %73 to <2 x float>*
  %76 = load <2 x float>, <2 x float>* %75, align 1
  %77 = shufflevector <2 x float> %76, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <4 x float> %74, <4 x float> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = getelementptr inbounds i16, i16* %67, i64 %9
  %80 = bitcast <4 x float> %78 to <8 x i16>
  %81 = add <8 x i16> %69, %80
  %82 = add nsw i32 %57, -4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %54

84:                                               ; preds = %54, %48
  %85 = phi <8 x i16> [ %49, %48 ], [ %81, %54 ]
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %85, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = zext <4 x i16> %87 to <4 x i32>
  %89 = bitcast <8 x i16> %86 to <4 x i32>
  %90 = add <4 x i32> %88, %89
  %91 = bitcast <4 x i32> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %93 = bitcast <16 x i8> %92 to <4 x i32>
  %94 = add <4 x i32> %90, %93
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %97 = bitcast <16 x i8> %96 to <4 x i32>
  %98 = add <4 x i32> %94, <i32 1, i32 1, i32 1, i32 1>
  %99 = add <4 x i32> %98, %97
  %100 = lshr <4 x i32> %99, <i32 1, i32 1, i32 1, i32 1>
  %101 = bitcast <4 x i32> %100 to <8 x i16>
  %102 = shufflevector <8 x i16> %101, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %104 = and i32 %2, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %119, label %106

106:                                              ; preds = %84
  %107 = bitcast i8* %3 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %108, i32 0
  %110 = bitcast <2 x i64> %109 to <8 x i16>
  %111 = shl <8 x i16> %110, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %112 = sub <8 x i16> %111, %102
  %113 = bitcast <8 x i16> %112 to <2 x i64>
  %114 = extractelement <2 x i64> %113, i32 0
  %115 = bitcast [32 x i16]* %0 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i16, i16* %7, i64 %8
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %118 = add nsw i32 %2, -1
  br label %119

119:                                              ; preds = %84, %106
  %120 = phi i16* [ %7, %84 ], [ %116, %106 ]
  %121 = phi i16* [ %103, %84 ], [ %117, %106 ]
  %122 = phi i32 [ %2, %84 ], [ %118, %106 ]
  %123 = icmp eq i32 %2, 1
  br i1 %123, label %330, label %124

124:                                              ; preds = %119, %124
  %125 = phi i16* [ %148, %124 ], [ %120, %119 ]
  %126 = phi i16* [ %149, %124 ], [ %121, %119 ]
  %127 = phi i32 [ %150, %124 ], [ %122, %119 ]
  %128 = bitcast i16* %125 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = shl <8 x i16> %131, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %133 = sub <8 x i16> %132, %102
  %134 = bitcast <8 x i16> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = bitcast i16* %126 to i64*
  store i64 %135, i64* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 %8
  %138 = getelementptr inbounds i16, i16* %126, i64 32
  %139 = bitcast i16* %137 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %140, i32 0
  %142 = bitcast <2 x i64> %141 to <8 x i16>
  %143 = shl <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = sub <8 x i16> %143, %102
  %145 = bitcast <8 x i16> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = bitcast i16* %138 to i64*
  store i64 %146, i64* %147, align 1
  %148 = getelementptr inbounds i16, i16* %137, i64 %8
  %149 = getelementptr inbounds i16, i16* %126, i64 64
  %150 = add nsw i32 %127, -2
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %330, label %124

152:                                              ; preds = %27, %152
  %153 = phi i16* [ %177, %152 ], [ %30, %27 ]
  %154 = phi <8 x i16> [ %179, %152 ], [ %31, %27 ]
  %155 = phi i32 [ %180, %152 ], [ %32, %27 ]
  %156 = bitcast i16* %153 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = insertelement <2 x i64> undef, i64 %157, i32 0
  %159 = getelementptr inbounds i16, i16* %153, i64 %8
  %160 = bitcast <2 x i64> %158 to <4 x float>
  %161 = bitcast i16* %159 to <2 x float>*
  %162 = load <2 x float>, <2 x float>* %161, align 1
  %163 = shufflevector <2 x float> %162, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %164 = shufflevector <4 x float> %160, <4 x float> %163, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %165 = getelementptr inbounds i16, i16* %153, i64 %9
  %166 = bitcast <4 x float> %164 to <8 x i16>
  %167 = add <8 x i16> %154, %166
  %168 = bitcast i16* %165 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <2 x i64> undef, i64 %169, i32 0
  %171 = getelementptr inbounds i16, i16* %165, i64 %8
  %172 = bitcast <2 x i64> %170 to <4 x float>
  %173 = bitcast i16* %171 to <2 x float>*
  %174 = load <2 x float>, <2 x float>* %173, align 1
  %175 = shufflevector <2 x float> %174, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = shufflevector <4 x float> %172, <4 x float> %175, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %177 = getelementptr inbounds i16, i16* %165, i64 %9
  %178 = bitcast <4 x float> %176 to <8 x i16>
  %179 = add <8 x i16> %167, %178
  %180 = add nsw i32 %155, -4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %152

182:                                              ; preds = %152, %27
  %183 = phi <4 x float> [ %28, %27 ], [ %176, %152 ]
  %184 = phi <8 x i16> [ %29, %27 ], [ %179, %152 ]
  %185 = bitcast <4 x float> %183 to <2 x i64>
  %186 = shufflevector <2 x i64> %185, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = sub i32 3, %2
  %189 = lshr i32 %188, 1
  %190 = add nuw i32 %189, 1
  %191 = and i32 %190, 7
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %201, label %193

193:                                              ; preds = %182, %193
  %194 = phi <8 x i16> [ %197, %193 ], [ %184, %182 ]
  %195 = phi i32 [ %198, %193 ], [ %2, %182 ]
  %196 = phi i32 [ %199, %193 ], [ %191, %182 ]
  %197 = add <8 x i16> %194, %187
  %198 = add nsw i32 %195, 2
  %199 = add i32 %196, -1
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %193, !llvm.loop !50

201:                                              ; preds = %193, %182
  %202 = phi <8 x i16> [ %184, %182 ], [ %197, %193 ]
  %203 = phi i32 [ %2, %182 ], [ %198, %193 ]
  %204 = phi <8 x i16> [ undef, %182 ], [ %197, %193 ]
  %205 = icmp ult i32 %188, 14
  br i1 %205, label %219, label %206

206:                                              ; preds = %201, %206
  %207 = phi <8 x i16> [ %216, %206 ], [ %202, %201 ]
  %208 = phi i32 [ %217, %206 ], [ %203, %201 ]
  %209 = add <8 x i16> %207, %187
  %210 = add <8 x i16> %209, %187
  %211 = add <8 x i16> %210, %187
  %212 = add <8 x i16> %211, %187
  %213 = add <8 x i16> %212, %187
  %214 = add <8 x i16> %213, %187
  %215 = add <8 x i16> %214, %187
  %216 = add <8 x i16> %215, %187
  %217 = add nsw i32 %208, 16
  %218 = icmp slt i32 %217, 4
  br i1 %218, label %206, label %219

219:                                              ; preds = %206, %201
  %220 = phi <8 x i16> [ %204, %201 ], [ %216, %206 ]
  %221 = shufflevector <8 x i16> %220, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %223 = zext <4 x i16> %222 to <4 x i32>
  %224 = bitcast <8 x i16> %221 to <4 x i32>
  %225 = add <4 x i32> %223, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, %228
  %230 = bitcast <4 x i32> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %232 = bitcast <16 x i8> %231 to <4 x i32>
  %233 = add <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  %234 = add <4 x i32> %233, %232
  %235 = lshr <4 x i32> %234, <i32 1, i32 1, i32 1, i32 1>
  %236 = bitcast <4 x i32> %235 to <8 x i16>
  %237 = shufflevector <8 x i16> %236, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %238 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %239 = and i32 %2, 1
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %254, label %241

241:                                              ; preds = %219
  %242 = bitcast i8* %3 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %243, i32 0
  %245 = bitcast <2 x i64> %244 to <8 x i16>
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %237
  %248 = bitcast <8 x i16> %247 to <2 x i64>
  %249 = extractelement <2 x i64> %248, i32 0
  %250 = bitcast [32 x i16]* %0 to i64*
  store i64 %249, i64* %250, align 1
  %251 = getelementptr inbounds i16, i16* %7, i64 %8
  %252 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %253 = add nsw i32 %2, -1
  br label %254

254:                                              ; preds = %219, %241
  %255 = phi i64 [ undef, %219 ], [ %249, %241 ]
  %256 = phi i16* [ undef, %219 ], [ %252, %241 ]
  %257 = phi i16* [ %7, %219 ], [ %251, %241 ]
  %258 = phi i16* [ %238, %219 ], [ %252, %241 ]
  %259 = phi i32 [ %2, %219 ], [ %253, %241 ]
  %260 = icmp eq i32 %2, 1
  br i1 %260, label %289, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %285, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %286, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %287, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <8 x i16>
  %269 = shl <8 x i16> %268, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %270 = sub <8 x i16> %269, %237
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = extractelement <2 x i64> %271, i32 0
  %273 = bitcast i16* %263 to i64*
  store i64 %272, i64* %273, align 1
  %274 = getelementptr inbounds i16, i16* %262, i64 %8
  %275 = getelementptr inbounds i16, i16* %263, i64 32
  %276 = bitcast i16* %274 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %277, i32 0
  %279 = bitcast <2 x i64> %278 to <8 x i16>
  %280 = shl <8 x i16> %279, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %281 = sub <8 x i16> %280, %237
  %282 = bitcast <8 x i16> %281 to <2 x i64>
  %283 = extractelement <2 x i64> %282, i32 0
  %284 = bitcast i16* %275 to i64*
  store i64 %283, i64* %284, align 1
  %285 = getelementptr inbounds i16, i16* %274, i64 %8
  %286 = getelementptr inbounds i16, i16* %263, i64 64
  %287 = add nsw i32 %264, -2
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %261

289:                                              ; preds = %261, %254
  %290 = phi i64 [ %255, %254 ], [ %283, %261 ]
  %291 = phi i16* [ %256, %254 ], [ %286, %261 ]
  %292 = sub i32 4, %2
  %293 = sub i32 3, %2
  %294 = and i32 %292, 7
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %305, label %296

296:                                              ; preds = %289, %296
  %297 = phi i16* [ %301, %296 ], [ %291, %289 ]
  %298 = phi i32 [ %302, %296 ], [ %2, %289 ]
  %299 = phi i32 [ %303, %296 ], [ %294, %289 ]
  %300 = bitcast i16* %297 to i64*
  store i64 %290, i64* %300, align 1
  %301 = getelementptr inbounds i16, i16* %297, i64 32
  %302 = add nsw i32 %298, 1
  %303 = add i32 %299, -1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %296, !llvm.loop !51

305:                                              ; preds = %296, %289
  %306 = phi i16* [ %291, %289 ], [ %301, %296 ]
  %307 = phi i32 [ %2, %289 ], [ %302, %296 ]
  %308 = icmp ult i32 %293, 7
  br i1 %308, label %330, label %309

309:                                              ; preds = %305, %309
  %310 = phi i16* [ %327, %309 ], [ %306, %305 ]
  %311 = phi i32 [ %328, %309 ], [ %307, %305 ]
  %312 = bitcast i16* %310 to i64*
  store i64 %290, i64* %312, align 1
  %313 = getelementptr inbounds i16, i16* %310, i64 32
  %314 = bitcast i16* %313 to i64*
  store i64 %290, i64* %314, align 1
  %315 = getelementptr inbounds i16, i16* %310, i64 64
  %316 = bitcast i16* %315 to i64*
  store i64 %290, i64* %316, align 1
  %317 = getelementptr inbounds i16, i16* %310, i64 96
  %318 = bitcast i16* %317 to i64*
  store i64 %290, i64* %318, align 1
  %319 = getelementptr inbounds i16, i16* %310, i64 128
  %320 = bitcast i16* %319 to i64*
  store i64 %290, i64* %320, align 1
  %321 = getelementptr inbounds i16, i16* %310, i64 160
  %322 = bitcast i16* %321 to i64*
  store i64 %290, i64* %322, align 1
  %323 = getelementptr inbounds i16, i16* %310, i64 192
  %324 = bitcast i16* %323 to i64*
  store i64 %290, i64* %324, align 1
  %325 = getelementptr inbounds i16, i16* %310, i64 224
  %326 = bitcast i16* %325 to i64*
  store i64 %290, i64* %326, align 1
  %327 = getelementptr inbounds i16, i16* %310, i64 256
  %328 = add nsw i32 %311, 8
  %329 = icmp eq i32 %328, 4
  br i1 %329, label %330, label %309

330:                                              ; preds = %305, %309, %119, %124
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 7
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = and i64 %4, -2
  %10 = add nsw i32 %2, -2
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %6, label %34, label %13

13:                                               ; preds = %5
  br i1 %12, label %14, label %27

14:                                               ; preds = %13
  %15 = bitcast i8* %3 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = getelementptr inbounds i16, i16* %7, i64 %8
  %19 = bitcast <2 x i64> %17 to <4 x float>
  %20 = bitcast i16* %18 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 1
  %22 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = shufflevector <4 x float> %19, <4 x float> %22, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %24 = getelementptr inbounds i16, i16* %7, i64 %9
  %25 = bitcast <4 x float> %23 to <8 x i16>
  %26 = add nsw i32 %2, -2
  br label %27

27:                                               ; preds = %14, %13
  %28 = phi <4 x float> [ undef, %13 ], [ %23, %14 ]
  %29 = phi <8 x i16> [ undef, %13 ], [ %25, %14 ]
  %30 = phi i16* [ %7, %13 ], [ %24, %14 ]
  %31 = phi <8 x i16> [ zeroinitializer, %13 ], [ %25, %14 ]
  %32 = phi i32 [ %2, %13 ], [ %26, %14 ]
  %33 = icmp ult i32 %10, 2
  br i1 %33, label %182, label %152

34:                                               ; preds = %5
  br i1 %12, label %35, label %48

35:                                               ; preds = %34
  %36 = bitcast i8* %3 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %7, i64 %8
  %40 = bitcast <2 x i64> %38 to <4 x float>
  %41 = bitcast i16* %39 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x float> %40, <4 x float> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = getelementptr inbounds i16, i16* %7, i64 %9
  %46 = bitcast <4 x float> %44 to <8 x i16>
  %47 = add nsw i32 %2, -2
  br label %48

48:                                               ; preds = %35, %34
  %49 = phi <8 x i16> [ undef, %34 ], [ %46, %35 ]
  %50 = phi i16* [ %7, %34 ], [ %45, %35 ]
  %51 = phi <8 x i16> [ zeroinitializer, %34 ], [ %46, %35 ]
  %52 = phi i32 [ %2, %34 ], [ %47, %35 ]
  %53 = icmp ult i32 %10, 2
  br i1 %53, label %84, label %54

54:                                               ; preds = %48, %54
  %55 = phi i16* [ %79, %54 ], [ %50, %48 ]
  %56 = phi <8 x i16> [ %81, %54 ], [ %51, %48 ]
  %57 = phi i32 [ %82, %54 ], [ %52, %48 ]
  %58 = bitcast i16* %55 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = getelementptr inbounds i16, i16* %55, i64 %8
  %62 = bitcast <2 x i64> %60 to <4 x float>
  %63 = bitcast i16* %61 to <2 x float>*
  %64 = load <2 x float>, <2 x float>* %63, align 1
  %65 = shufflevector <2 x float> %64, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x float> %62, <4 x float> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = getelementptr inbounds i16, i16* %55, i64 %9
  %68 = bitcast <4 x float> %66 to <8 x i16>
  %69 = add <8 x i16> %56, %68
  %70 = bitcast i16* %67 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = getelementptr inbounds i16, i16* %67, i64 %8
  %74 = bitcast <2 x i64> %72 to <4 x float>
  %75 = bitcast i16* %73 to <2 x float>*
  %76 = load <2 x float>, <2 x float>* %75, align 1
  %77 = shufflevector <2 x float> %76, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <4 x float> %74, <4 x float> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = getelementptr inbounds i16, i16* %67, i64 %9
  %80 = bitcast <4 x float> %78 to <8 x i16>
  %81 = add <8 x i16> %69, %80
  %82 = add nsw i32 %57, -4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %54

84:                                               ; preds = %54, %48
  %85 = phi <8 x i16> [ %49, %48 ], [ %81, %54 ]
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %85, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = zext <4 x i16> %87 to <4 x i32>
  %89 = bitcast <8 x i16> %86 to <4 x i32>
  %90 = add <4 x i32> %88, %89
  %91 = bitcast <4 x i32> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %93 = bitcast <16 x i8> %92 to <4 x i32>
  %94 = add <4 x i32> %90, %93
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %97 = bitcast <16 x i8> %96 to <4 x i32>
  %98 = add <4 x i32> %94, <i32 2, i32 2, i32 2, i32 2>
  %99 = add <4 x i32> %98, %97
  %100 = lshr <4 x i32> %99, <i32 2, i32 2, i32 2, i32 2>
  %101 = bitcast <4 x i32> %100 to <8 x i16>
  %102 = shufflevector <8 x i16> %101, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %104 = and i32 %2, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %119, label %106

106:                                              ; preds = %84
  %107 = bitcast i8* %3 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %108, i32 0
  %110 = bitcast <2 x i64> %109 to <8 x i16>
  %111 = shl <8 x i16> %110, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %112 = sub <8 x i16> %111, %102
  %113 = bitcast <8 x i16> %112 to <2 x i64>
  %114 = extractelement <2 x i64> %113, i32 0
  %115 = bitcast [32 x i16]* %0 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i16, i16* %7, i64 %8
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %118 = add nsw i32 %2, -1
  br label %119

119:                                              ; preds = %84, %106
  %120 = phi i16* [ %7, %84 ], [ %116, %106 ]
  %121 = phi i16* [ %103, %84 ], [ %117, %106 ]
  %122 = phi i32 [ %2, %84 ], [ %118, %106 ]
  %123 = icmp eq i32 %2, 1
  br i1 %123, label %330, label %124

124:                                              ; preds = %119, %124
  %125 = phi i16* [ %148, %124 ], [ %120, %119 ]
  %126 = phi i16* [ %149, %124 ], [ %121, %119 ]
  %127 = phi i32 [ %150, %124 ], [ %122, %119 ]
  %128 = bitcast i16* %125 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = shl <8 x i16> %131, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %133 = sub <8 x i16> %132, %102
  %134 = bitcast <8 x i16> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = bitcast i16* %126 to i64*
  store i64 %135, i64* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 %8
  %138 = getelementptr inbounds i16, i16* %126, i64 32
  %139 = bitcast i16* %137 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %140, i32 0
  %142 = bitcast <2 x i64> %141 to <8 x i16>
  %143 = shl <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = sub <8 x i16> %143, %102
  %145 = bitcast <8 x i16> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = bitcast i16* %138 to i64*
  store i64 %146, i64* %147, align 1
  %148 = getelementptr inbounds i16, i16* %137, i64 %8
  %149 = getelementptr inbounds i16, i16* %126, i64 64
  %150 = add nsw i32 %127, -2
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %330, label %124

152:                                              ; preds = %27, %152
  %153 = phi i16* [ %177, %152 ], [ %30, %27 ]
  %154 = phi <8 x i16> [ %179, %152 ], [ %31, %27 ]
  %155 = phi i32 [ %180, %152 ], [ %32, %27 ]
  %156 = bitcast i16* %153 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = insertelement <2 x i64> undef, i64 %157, i32 0
  %159 = getelementptr inbounds i16, i16* %153, i64 %8
  %160 = bitcast <2 x i64> %158 to <4 x float>
  %161 = bitcast i16* %159 to <2 x float>*
  %162 = load <2 x float>, <2 x float>* %161, align 1
  %163 = shufflevector <2 x float> %162, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %164 = shufflevector <4 x float> %160, <4 x float> %163, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %165 = getelementptr inbounds i16, i16* %153, i64 %9
  %166 = bitcast <4 x float> %164 to <8 x i16>
  %167 = add <8 x i16> %154, %166
  %168 = bitcast i16* %165 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <2 x i64> undef, i64 %169, i32 0
  %171 = getelementptr inbounds i16, i16* %165, i64 %8
  %172 = bitcast <2 x i64> %170 to <4 x float>
  %173 = bitcast i16* %171 to <2 x float>*
  %174 = load <2 x float>, <2 x float>* %173, align 1
  %175 = shufflevector <2 x float> %174, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = shufflevector <4 x float> %172, <4 x float> %175, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %177 = getelementptr inbounds i16, i16* %165, i64 %9
  %178 = bitcast <4 x float> %176 to <8 x i16>
  %179 = add <8 x i16> %167, %178
  %180 = add nsw i32 %155, -4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %152

182:                                              ; preds = %152, %27
  %183 = phi <4 x float> [ %28, %27 ], [ %176, %152 ]
  %184 = phi <8 x i16> [ %29, %27 ], [ %179, %152 ]
  %185 = bitcast <4 x float> %183 to <2 x i64>
  %186 = shufflevector <2 x i64> %185, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = sub i32 7, %2
  %189 = lshr i32 %188, 1
  %190 = add nuw i32 %189, 1
  %191 = and i32 %190, 7
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %201, label %193

193:                                              ; preds = %182, %193
  %194 = phi <8 x i16> [ %197, %193 ], [ %184, %182 ]
  %195 = phi i32 [ %198, %193 ], [ %2, %182 ]
  %196 = phi i32 [ %199, %193 ], [ %191, %182 ]
  %197 = add <8 x i16> %194, %187
  %198 = add nsw i32 %195, 2
  %199 = add i32 %196, -1
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %193, !llvm.loop !52

201:                                              ; preds = %193, %182
  %202 = phi <8 x i16> [ %184, %182 ], [ %197, %193 ]
  %203 = phi i32 [ %2, %182 ], [ %198, %193 ]
  %204 = phi <8 x i16> [ undef, %182 ], [ %197, %193 ]
  %205 = icmp ult i32 %188, 14
  br i1 %205, label %219, label %206

206:                                              ; preds = %201, %206
  %207 = phi <8 x i16> [ %216, %206 ], [ %202, %201 ]
  %208 = phi i32 [ %217, %206 ], [ %203, %201 ]
  %209 = add <8 x i16> %207, %187
  %210 = add <8 x i16> %209, %187
  %211 = add <8 x i16> %210, %187
  %212 = add <8 x i16> %211, %187
  %213 = add <8 x i16> %212, %187
  %214 = add <8 x i16> %213, %187
  %215 = add <8 x i16> %214, %187
  %216 = add <8 x i16> %215, %187
  %217 = add nsw i32 %208, 16
  %218 = icmp slt i32 %217, 8
  br i1 %218, label %206, label %219

219:                                              ; preds = %206, %201
  %220 = phi <8 x i16> [ %204, %201 ], [ %216, %206 ]
  %221 = shufflevector <8 x i16> %220, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %223 = zext <4 x i16> %222 to <4 x i32>
  %224 = bitcast <8 x i16> %221 to <4 x i32>
  %225 = add <4 x i32> %223, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, %228
  %230 = bitcast <4 x i32> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %232 = bitcast <16 x i8> %231 to <4 x i32>
  %233 = add <4 x i32> %229, <i32 2, i32 2, i32 2, i32 2>
  %234 = add <4 x i32> %233, %232
  %235 = lshr <4 x i32> %234, <i32 2, i32 2, i32 2, i32 2>
  %236 = bitcast <4 x i32> %235 to <8 x i16>
  %237 = shufflevector <8 x i16> %236, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %238 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %239 = and i32 %2, 1
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %254, label %241

241:                                              ; preds = %219
  %242 = bitcast i8* %3 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %243, i32 0
  %245 = bitcast <2 x i64> %244 to <8 x i16>
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %237
  %248 = bitcast <8 x i16> %247 to <2 x i64>
  %249 = extractelement <2 x i64> %248, i32 0
  %250 = bitcast [32 x i16]* %0 to i64*
  store i64 %249, i64* %250, align 1
  %251 = getelementptr inbounds i16, i16* %7, i64 %8
  %252 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %253 = add nsw i32 %2, -1
  br label %254

254:                                              ; preds = %219, %241
  %255 = phi i64 [ undef, %219 ], [ %249, %241 ]
  %256 = phi i16* [ undef, %219 ], [ %252, %241 ]
  %257 = phi i16* [ %7, %219 ], [ %251, %241 ]
  %258 = phi i16* [ %238, %219 ], [ %252, %241 ]
  %259 = phi i32 [ %2, %219 ], [ %253, %241 ]
  %260 = icmp eq i32 %2, 1
  br i1 %260, label %289, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %285, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %286, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %287, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <8 x i16>
  %269 = shl <8 x i16> %268, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %270 = sub <8 x i16> %269, %237
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = extractelement <2 x i64> %271, i32 0
  %273 = bitcast i16* %263 to i64*
  store i64 %272, i64* %273, align 1
  %274 = getelementptr inbounds i16, i16* %262, i64 %8
  %275 = getelementptr inbounds i16, i16* %263, i64 32
  %276 = bitcast i16* %274 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %277, i32 0
  %279 = bitcast <2 x i64> %278 to <8 x i16>
  %280 = shl <8 x i16> %279, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %281 = sub <8 x i16> %280, %237
  %282 = bitcast <8 x i16> %281 to <2 x i64>
  %283 = extractelement <2 x i64> %282, i32 0
  %284 = bitcast i16* %275 to i64*
  store i64 %283, i64* %284, align 1
  %285 = getelementptr inbounds i16, i16* %274, i64 %8
  %286 = getelementptr inbounds i16, i16* %263, i64 64
  %287 = add nsw i32 %264, -2
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %261

289:                                              ; preds = %261, %254
  %290 = phi i64 [ %255, %254 ], [ %283, %261 ]
  %291 = phi i16* [ %256, %254 ], [ %286, %261 ]
  %292 = sub i32 0, %2
  %293 = sub i32 7, %2
  %294 = and i32 %292, 7
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %305, label %296

296:                                              ; preds = %289, %296
  %297 = phi i16* [ %301, %296 ], [ %291, %289 ]
  %298 = phi i32 [ %302, %296 ], [ %2, %289 ]
  %299 = phi i32 [ %303, %296 ], [ %294, %289 ]
  %300 = bitcast i16* %297 to i64*
  store i64 %290, i64* %300, align 1
  %301 = getelementptr inbounds i16, i16* %297, i64 32
  %302 = add nsw i32 %298, 1
  %303 = add i32 %299, -1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %296, !llvm.loop !53

305:                                              ; preds = %296, %289
  %306 = phi i16* [ %291, %289 ], [ %301, %296 ]
  %307 = phi i32 [ %2, %289 ], [ %302, %296 ]
  %308 = icmp ult i32 %293, 7
  br i1 %308, label %330, label %309

309:                                              ; preds = %305, %309
  %310 = phi i16* [ %327, %309 ], [ %306, %305 ]
  %311 = phi i32 [ %328, %309 ], [ %307, %305 ]
  %312 = bitcast i16* %310 to i64*
  store i64 %290, i64* %312, align 1
  %313 = getelementptr inbounds i16, i16* %310, i64 32
  %314 = bitcast i16* %313 to i64*
  store i64 %290, i64* %314, align 1
  %315 = getelementptr inbounds i16, i16* %310, i64 64
  %316 = bitcast i16* %315 to i64*
  store i64 %290, i64* %316, align 1
  %317 = getelementptr inbounds i16, i16* %310, i64 96
  %318 = bitcast i16* %317 to i64*
  store i64 %290, i64* %318, align 1
  %319 = getelementptr inbounds i16, i16* %310, i64 128
  %320 = bitcast i16* %319 to i64*
  store i64 %290, i64* %320, align 1
  %321 = getelementptr inbounds i16, i16* %310, i64 160
  %322 = bitcast i16* %321 to i64*
  store i64 %290, i64* %322, align 1
  %323 = getelementptr inbounds i16, i16* %310, i64 192
  %324 = bitcast i16* %323 to i64*
  store i64 %290, i64* %324, align 1
  %325 = getelementptr inbounds i16, i16* %310, i64 224
  %326 = bitcast i16* %325 to i64*
  store i64 %290, i64* %326, align 1
  %327 = getelementptr inbounds i16, i16* %310, i64 256
  %328 = add nsw i32 %311, 8
  %329 = icmp eq i32 %311, 0
  br i1 %329, label %330, label %309

330:                                              ; preds = %305, %309, %119, %124
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_4xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 15
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = and i64 %4, -2
  %10 = add nsw i32 %2, -2
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %6, label %34, label %13

13:                                               ; preds = %5
  br i1 %12, label %14, label %27

14:                                               ; preds = %13
  %15 = bitcast i8* %3 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = getelementptr inbounds i16, i16* %7, i64 %8
  %19 = bitcast <2 x i64> %17 to <4 x float>
  %20 = bitcast i16* %18 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 1
  %22 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = shufflevector <4 x float> %19, <4 x float> %22, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %24 = getelementptr inbounds i16, i16* %7, i64 %9
  %25 = bitcast <4 x float> %23 to <8 x i16>
  %26 = add nsw i32 %2, -2
  br label %27

27:                                               ; preds = %14, %13
  %28 = phi <4 x float> [ undef, %13 ], [ %23, %14 ]
  %29 = phi <8 x i16> [ undef, %13 ], [ %25, %14 ]
  %30 = phi i16* [ %7, %13 ], [ %24, %14 ]
  %31 = phi <8 x i16> [ zeroinitializer, %13 ], [ %25, %14 ]
  %32 = phi i32 [ %2, %13 ], [ %26, %14 ]
  %33 = icmp ult i32 %10, 2
  br i1 %33, label %182, label %152

34:                                               ; preds = %5
  br i1 %12, label %35, label %48

35:                                               ; preds = %34
  %36 = bitcast i8* %3 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %7, i64 %8
  %40 = bitcast <2 x i64> %38 to <4 x float>
  %41 = bitcast i16* %39 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x float> %40, <4 x float> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = getelementptr inbounds i16, i16* %7, i64 %9
  %46 = bitcast <4 x float> %44 to <8 x i16>
  %47 = add nsw i32 %2, -2
  br label %48

48:                                               ; preds = %35, %34
  %49 = phi <8 x i16> [ undef, %34 ], [ %46, %35 ]
  %50 = phi i16* [ %7, %34 ], [ %45, %35 ]
  %51 = phi <8 x i16> [ zeroinitializer, %34 ], [ %46, %35 ]
  %52 = phi i32 [ %2, %34 ], [ %47, %35 ]
  %53 = icmp ult i32 %10, 2
  br i1 %53, label %84, label %54

54:                                               ; preds = %48, %54
  %55 = phi i16* [ %79, %54 ], [ %50, %48 ]
  %56 = phi <8 x i16> [ %81, %54 ], [ %51, %48 ]
  %57 = phi i32 [ %82, %54 ], [ %52, %48 ]
  %58 = bitcast i16* %55 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = getelementptr inbounds i16, i16* %55, i64 %8
  %62 = bitcast <2 x i64> %60 to <4 x float>
  %63 = bitcast i16* %61 to <2 x float>*
  %64 = load <2 x float>, <2 x float>* %63, align 1
  %65 = shufflevector <2 x float> %64, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x float> %62, <4 x float> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = getelementptr inbounds i16, i16* %55, i64 %9
  %68 = bitcast <4 x float> %66 to <8 x i16>
  %69 = add <8 x i16> %56, %68
  %70 = bitcast i16* %67 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = getelementptr inbounds i16, i16* %67, i64 %8
  %74 = bitcast <2 x i64> %72 to <4 x float>
  %75 = bitcast i16* %73 to <2 x float>*
  %76 = load <2 x float>, <2 x float>* %75, align 1
  %77 = shufflevector <2 x float> %76, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <4 x float> %74, <4 x float> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = getelementptr inbounds i16, i16* %67, i64 %9
  %80 = bitcast <4 x float> %78 to <8 x i16>
  %81 = add <8 x i16> %69, %80
  %82 = add nsw i32 %57, -4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %54

84:                                               ; preds = %54, %48
  %85 = phi <8 x i16> [ %49, %48 ], [ %81, %54 ]
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %85, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = zext <4 x i16> %87 to <4 x i32>
  %89 = bitcast <8 x i16> %86 to <4 x i32>
  %90 = add <4 x i32> %88, %89
  %91 = bitcast <4 x i32> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %93 = bitcast <16 x i8> %92 to <4 x i32>
  %94 = add <4 x i32> %90, %93
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %97 = bitcast <16 x i8> %96 to <4 x i32>
  %98 = add <4 x i32> %94, <i32 4, i32 4, i32 4, i32 4>
  %99 = add <4 x i32> %98, %97
  %100 = lshr <4 x i32> %99, <i32 3, i32 3, i32 3, i32 3>
  %101 = bitcast <4 x i32> %100 to <8 x i16>
  %102 = shufflevector <8 x i16> %101, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %104 = and i32 %2, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %119, label %106

106:                                              ; preds = %84
  %107 = bitcast i8* %3 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %108, i32 0
  %110 = bitcast <2 x i64> %109 to <8 x i16>
  %111 = shl <8 x i16> %110, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %112 = sub <8 x i16> %111, %102
  %113 = bitcast <8 x i16> %112 to <2 x i64>
  %114 = extractelement <2 x i64> %113, i32 0
  %115 = bitcast [32 x i16]* %0 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i16, i16* %7, i64 %8
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %118 = add nsw i32 %2, -1
  br label %119

119:                                              ; preds = %84, %106
  %120 = phi i16* [ %7, %84 ], [ %116, %106 ]
  %121 = phi i16* [ %103, %84 ], [ %117, %106 ]
  %122 = phi i32 [ %2, %84 ], [ %118, %106 ]
  %123 = icmp eq i32 %2, 1
  br i1 %123, label %330, label %124

124:                                              ; preds = %119, %124
  %125 = phi i16* [ %148, %124 ], [ %120, %119 ]
  %126 = phi i16* [ %149, %124 ], [ %121, %119 ]
  %127 = phi i32 [ %150, %124 ], [ %122, %119 ]
  %128 = bitcast i16* %125 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <8 x i16>
  %132 = shl <8 x i16> %131, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %133 = sub <8 x i16> %132, %102
  %134 = bitcast <8 x i16> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = bitcast i16* %126 to i64*
  store i64 %135, i64* %136, align 1
  %137 = getelementptr inbounds i16, i16* %125, i64 %8
  %138 = getelementptr inbounds i16, i16* %126, i64 32
  %139 = bitcast i16* %137 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %140, i32 0
  %142 = bitcast <2 x i64> %141 to <8 x i16>
  %143 = shl <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = sub <8 x i16> %143, %102
  %145 = bitcast <8 x i16> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = bitcast i16* %138 to i64*
  store i64 %146, i64* %147, align 1
  %148 = getelementptr inbounds i16, i16* %137, i64 %8
  %149 = getelementptr inbounds i16, i16* %126, i64 64
  %150 = add nsw i32 %127, -2
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %330, label %124

152:                                              ; preds = %27, %152
  %153 = phi i16* [ %177, %152 ], [ %30, %27 ]
  %154 = phi <8 x i16> [ %179, %152 ], [ %31, %27 ]
  %155 = phi i32 [ %180, %152 ], [ %32, %27 ]
  %156 = bitcast i16* %153 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = insertelement <2 x i64> undef, i64 %157, i32 0
  %159 = getelementptr inbounds i16, i16* %153, i64 %8
  %160 = bitcast <2 x i64> %158 to <4 x float>
  %161 = bitcast i16* %159 to <2 x float>*
  %162 = load <2 x float>, <2 x float>* %161, align 1
  %163 = shufflevector <2 x float> %162, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %164 = shufflevector <4 x float> %160, <4 x float> %163, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %165 = getelementptr inbounds i16, i16* %153, i64 %9
  %166 = bitcast <4 x float> %164 to <8 x i16>
  %167 = add <8 x i16> %154, %166
  %168 = bitcast i16* %165 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <2 x i64> undef, i64 %169, i32 0
  %171 = getelementptr inbounds i16, i16* %165, i64 %8
  %172 = bitcast <2 x i64> %170 to <4 x float>
  %173 = bitcast i16* %171 to <2 x float>*
  %174 = load <2 x float>, <2 x float>* %173, align 1
  %175 = shufflevector <2 x float> %174, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = shufflevector <4 x float> %172, <4 x float> %175, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %177 = getelementptr inbounds i16, i16* %165, i64 %9
  %178 = bitcast <4 x float> %176 to <8 x i16>
  %179 = add <8 x i16> %167, %178
  %180 = add nsw i32 %155, -4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %152

182:                                              ; preds = %152, %27
  %183 = phi <4 x float> [ %28, %27 ], [ %176, %152 ]
  %184 = phi <8 x i16> [ %29, %27 ], [ %179, %152 ]
  %185 = bitcast <4 x float> %183 to <2 x i64>
  %186 = shufflevector <2 x i64> %185, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = sub i32 15, %2
  %189 = lshr i32 %188, 1
  %190 = add nuw i32 %189, 1
  %191 = and i32 %190, 7
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %201, label %193

193:                                              ; preds = %182, %193
  %194 = phi <8 x i16> [ %197, %193 ], [ %184, %182 ]
  %195 = phi i32 [ %198, %193 ], [ %2, %182 ]
  %196 = phi i32 [ %199, %193 ], [ %191, %182 ]
  %197 = add <8 x i16> %194, %187
  %198 = add nsw i32 %195, 2
  %199 = add i32 %196, -1
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %193, !llvm.loop !54

201:                                              ; preds = %193, %182
  %202 = phi <8 x i16> [ %184, %182 ], [ %197, %193 ]
  %203 = phi i32 [ %2, %182 ], [ %198, %193 ]
  %204 = phi <8 x i16> [ undef, %182 ], [ %197, %193 ]
  %205 = icmp ult i32 %188, 14
  br i1 %205, label %219, label %206

206:                                              ; preds = %201, %206
  %207 = phi <8 x i16> [ %216, %206 ], [ %202, %201 ]
  %208 = phi i32 [ %217, %206 ], [ %203, %201 ]
  %209 = add <8 x i16> %207, %187
  %210 = add <8 x i16> %209, %187
  %211 = add <8 x i16> %210, %187
  %212 = add <8 x i16> %211, %187
  %213 = add <8 x i16> %212, %187
  %214 = add <8 x i16> %213, %187
  %215 = add <8 x i16> %214, %187
  %216 = add <8 x i16> %215, %187
  %217 = add nsw i32 %208, 16
  %218 = icmp slt i32 %208, 0
  br i1 %218, label %206, label %219

219:                                              ; preds = %206, %201
  %220 = phi <8 x i16> [ %204, %201 ], [ %216, %206 ]
  %221 = shufflevector <8 x i16> %220, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = shufflevector <8 x i16> %220, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %223 = zext <4 x i16> %222 to <4 x i32>
  %224 = bitcast <8 x i16> %221 to <4 x i32>
  %225 = add <4 x i32> %223, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, %228
  %230 = bitcast <4 x i32> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %232 = bitcast <16 x i8> %231 to <4 x i32>
  %233 = add <4 x i32> %229, <i32 4, i32 4, i32 4, i32 4>
  %234 = add <4 x i32> %233, %232
  %235 = lshr <4 x i32> %234, <i32 3, i32 3, i32 3, i32 3>
  %236 = bitcast <4 x i32> %235 to <8 x i16>
  %237 = shufflevector <8 x i16> %236, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %238 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %239 = and i32 %2, 1
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %254, label %241

241:                                              ; preds = %219
  %242 = bitcast i8* %3 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %243, i32 0
  %245 = bitcast <2 x i64> %244 to <8 x i16>
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %237
  %248 = bitcast <8 x i16> %247 to <2 x i64>
  %249 = extractelement <2 x i64> %248, i32 0
  %250 = bitcast [32 x i16]* %0 to i64*
  store i64 %249, i64* %250, align 1
  %251 = getelementptr inbounds i16, i16* %7, i64 %8
  %252 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 32
  %253 = add nsw i32 %2, -1
  br label %254

254:                                              ; preds = %219, %241
  %255 = phi i64 [ undef, %219 ], [ %249, %241 ]
  %256 = phi i16* [ undef, %219 ], [ %252, %241 ]
  %257 = phi i16* [ %7, %219 ], [ %251, %241 ]
  %258 = phi i16* [ %238, %219 ], [ %252, %241 ]
  %259 = phi i32 [ %2, %219 ], [ %253, %241 ]
  %260 = icmp eq i32 %2, 1
  br i1 %260, label %289, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %285, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %286, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %287, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <8 x i16>
  %269 = shl <8 x i16> %268, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %270 = sub <8 x i16> %269, %237
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = extractelement <2 x i64> %271, i32 0
  %273 = bitcast i16* %263 to i64*
  store i64 %272, i64* %273, align 1
  %274 = getelementptr inbounds i16, i16* %262, i64 %8
  %275 = getelementptr inbounds i16, i16* %263, i64 32
  %276 = bitcast i16* %274 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %277, i32 0
  %279 = bitcast <2 x i64> %278 to <8 x i16>
  %280 = shl <8 x i16> %279, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %281 = sub <8 x i16> %280, %237
  %282 = bitcast <8 x i16> %281 to <2 x i64>
  %283 = extractelement <2 x i64> %282, i32 0
  %284 = bitcast i16* %275 to i64*
  store i64 %283, i64* %284, align 1
  %285 = getelementptr inbounds i16, i16* %274, i64 %8
  %286 = getelementptr inbounds i16, i16* %263, i64 64
  %287 = add nsw i32 %264, -2
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %261

289:                                              ; preds = %261, %254
  %290 = phi i64 [ %255, %254 ], [ %283, %261 ]
  %291 = phi i16* [ %256, %254 ], [ %286, %261 ]
  %292 = sub i32 0, %2
  %293 = sub i32 15, %2
  %294 = and i32 %292, 7
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %305, label %296

296:                                              ; preds = %289, %296
  %297 = phi i16* [ %301, %296 ], [ %291, %289 ]
  %298 = phi i32 [ %302, %296 ], [ %2, %289 ]
  %299 = phi i32 [ %303, %296 ], [ %294, %289 ]
  %300 = bitcast i16* %297 to i64*
  store i64 %290, i64* %300, align 1
  %301 = getelementptr inbounds i16, i16* %297, i64 32
  %302 = add nsw i32 %298, 1
  %303 = add i32 %299, -1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %296, !llvm.loop !55

305:                                              ; preds = %296, %289
  %306 = phi i16* [ %291, %289 ], [ %301, %296 ]
  %307 = phi i32 [ %2, %289 ], [ %302, %296 ]
  %308 = icmp ult i32 %293, 7
  br i1 %308, label %330, label %309

309:                                              ; preds = %305, %309
  %310 = phi i16* [ %327, %309 ], [ %306, %305 ]
  %311 = phi i32 [ %328, %309 ], [ %307, %305 ]
  %312 = bitcast i16* %310 to i64*
  store i64 %290, i64* %312, align 1
  %313 = getelementptr inbounds i16, i16* %310, i64 32
  %314 = bitcast i16* %313 to i64*
  store i64 %290, i64* %314, align 1
  %315 = getelementptr inbounds i16, i16* %310, i64 64
  %316 = bitcast i16* %315 to i64*
  store i64 %290, i64* %316, align 1
  %317 = getelementptr inbounds i16, i16* %310, i64 96
  %318 = bitcast i16* %317 to i64*
  store i64 %290, i64* %318, align 1
  %319 = getelementptr inbounds i16, i16* %310, i64 128
  %320 = bitcast i16* %319 to i64*
  store i64 %290, i64* %320, align 1
  %321 = getelementptr inbounds i16, i16* %310, i64 160
  %322 = bitcast i16* %321 to i64*
  store i64 %290, i64* %322, align 1
  %323 = getelementptr inbounds i16, i16* %310, i64 192
  %324 = bitcast i16* %323 to i64*
  store i64 %290, i64* %324, align 1
  %325 = getelementptr inbounds i16, i16* %310, i64 224
  %326 = bitcast i16* %325 to i64*
  store i64 %290, i64* %326, align 1
  %327 = getelementptr inbounds i16, i16* %310, i64 256
  %328 = add nsw i32 %311, 8
  %329 = icmp eq i32 %328, 16
  br i1 %329, label %330, label %309

330:                                              ; preds = %305, %309, %119, %124
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 3
  %8 = and i1 %6, %7
  %9 = bitcast i8* %3 to i16*
  %10 = lshr i64 %4, 1
  %11 = add nsw i32 %2, -1
  %12 = and i32 %2, 7
  %13 = icmp eq i32 %12, 0
  br i1 %8, label %34, label %14

14:                                               ; preds = %5
  br i1 %13, label %27, label %15

15:                                               ; preds = %14, %15
  %16 = phi i16* [ %22, %15 ], [ %9, %14 ]
  %17 = phi <8 x i16> [ %23, %15 ], [ zeroinitializer, %14 ]
  %18 = phi i32 [ %24, %15 ], [ %2, %14 ]
  %19 = phi i32 [ %25, %15 ], [ %12, %14 ]
  %20 = bitcast i16* %16 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %16, i64 %10
  %23 = add <8 x i16> %21, %17
  %24 = add nsw i32 %18, -1
  %25 = add i32 %19, -1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %15, !llvm.loop !56

27:                                               ; preds = %15, %14
  %28 = phi <8 x i16> [ undef, %14 ], [ %21, %15 ]
  %29 = phi <8 x i16> [ undef, %14 ], [ %23, %15 ]
  %30 = phi i16* [ %9, %14 ], [ %22, %15 ]
  %31 = phi <8 x i16> [ zeroinitializer, %14 ], [ %23, %15 ]
  %32 = phi i32 [ %2, %14 ], [ %24, %15 ]
  %33 = icmp ult i32 %11, 7
  br i1 %33, label %207, label %169

34:                                               ; preds = %5
  br i1 %13, label %47, label %35

35:                                               ; preds = %34, %35
  %36 = phi i16* [ %42, %35 ], [ %9, %34 ]
  %37 = phi <8 x i16> [ %43, %35 ], [ zeroinitializer, %34 ]
  %38 = phi i32 [ %44, %35 ], [ %2, %34 ]
  %39 = phi i32 [ %45, %35 ], [ %12, %34 ]
  %40 = bitcast i16* %36 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %36, i64 %10
  %43 = add <8 x i16> %41, %37
  %44 = add nsw i32 %38, -1
  %45 = add i32 %39, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %35, !llvm.loop !57

47:                                               ; preds = %35, %34
  %48 = phi <8 x i16> [ undef, %34 ], [ %43, %35 ]
  %49 = phi i16* [ %9, %34 ], [ %42, %35 ]
  %50 = phi <8 x i16> [ zeroinitializer, %34 ], [ %43, %35 ]
  %51 = phi i32 [ %2, %34 ], [ %44, %35 ]
  %52 = icmp ult i32 %11, 7
  br i1 %52, label %91, label %53

53:                                               ; preds = %47, %53
  %54 = phi i16* [ %87, %53 ], [ %49, %47 ]
  %55 = phi <8 x i16> [ %88, %53 ], [ %50, %47 ]
  %56 = phi i32 [ %89, %53 ], [ %51, %47 ]
  %57 = bitcast i16* %54 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %54, i64 %10
  %60 = add <8 x i16> %58, %55
  %61 = bitcast i16* %59 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %59, i64 %10
  %64 = add <8 x i16> %62, %60
  %65 = bitcast i16* %63 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  %67 = getelementptr inbounds i16, i16* %63, i64 %10
  %68 = add <8 x i16> %66, %64
  %69 = bitcast i16* %67 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %67, i64 %10
  %72 = add <8 x i16> %70, %68
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 %10
  %76 = add <8 x i16> %74, %72
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 %10
  %80 = add <8 x i16> %78, %76
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %79, i64 %10
  %84 = add <8 x i16> %82, %80
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 %10
  %88 = add <8 x i16> %86, %84
  %89 = add nsw i32 %56, -8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %53

91:                                               ; preds = %53, %47
  %92 = phi <8 x i16> [ %48, %47 ], [ %88, %53 ]
  %93 = shufflevector <8 x i16> %92, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = shufflevector <8 x i16> %92, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %95 = zext <4 x i16> %94 to <4 x i32>
  %96 = bitcast <8 x i16> %93 to <4 x i32>
  %97 = add <4 x i32> %95, %96
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = add <4 x i32> %97, %100
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = add <4 x i32> %101, <i32 2, i32 2, i32 2, i32 2>
  %106 = add <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 2, i32 2, i32 2, i32 2>
  %108 = bitcast <4 x i32> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = add nsw i32 %2, -1
  %113 = and i32 %2, 3
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %130, label %115

115:                                              ; preds = %91, %115
  %116 = phi i16* [ %125, %115 ], [ %9, %91 ]
  %117 = phi i16* [ %126, %115 ], [ %110, %91 ]
  %118 = phi i32 [ %127, %115 ], [ %2, %91 ]
  %119 = phi i32 [ %128, %115 ], [ %113, %91 ]
  %120 = bitcast i16* %116 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 1
  %122 = shl <8 x i16> %121, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %123 = sub <8 x i16> %122, %111
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %116, i64 %10
  %126 = getelementptr inbounds i16, i16* %117, i64 32
  %127 = add nsw i32 %118, -1
  %128 = add i32 %119, -1
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %115, !llvm.loop !58

130:                                              ; preds = %115, %91
  %131 = phi i16* [ %9, %91 ], [ %125, %115 ]
  %132 = phi i16* [ %110, %91 ], [ %126, %115 ]
  %133 = phi i32 [ %2, %91 ], [ %127, %115 ]
  %134 = icmp ult i32 %112, 3
  br i1 %134, label %305, label %135

135:                                              ; preds = %130, %135
  %136 = phi i16* [ %165, %135 ], [ %131, %130 ]
  %137 = phi i16* [ %166, %135 ], [ %132, %130 ]
  %138 = phi i32 [ %167, %135 ], [ %133, %130 ]
  %139 = bitcast i16* %136 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 1
  %141 = shl <8 x i16> %140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %142 = sub <8 x i16> %141, %111
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = getelementptr inbounds i16, i16* %136, i64 %10
  %145 = getelementptr inbounds i16, i16* %137, i64 32
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = shl <8 x i16> %147, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %149 = sub <8 x i16> %148, %111
  %150 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 1
  %151 = getelementptr inbounds i16, i16* %144, i64 %10
  %152 = getelementptr inbounds i16, i16* %137, i64 64
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = shl <8 x i16> %154, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %156 = sub <8 x i16> %155, %111
  %157 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 1
  %158 = getelementptr inbounds i16, i16* %151, i64 %10
  %159 = getelementptr inbounds i16, i16* %137, i64 96
  %160 = bitcast i16* %158 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = shl <8 x i16> %161, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %163 = sub <8 x i16> %162, %111
  %164 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %158, i64 %10
  %166 = getelementptr inbounds i16, i16* %137, i64 128
  %167 = add nsw i32 %138, -4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %305, label %135

169:                                              ; preds = %27, %169
  %170 = phi i16* [ %203, %169 ], [ %30, %27 ]
  %171 = phi <8 x i16> [ %204, %169 ], [ %31, %27 ]
  %172 = phi i32 [ %205, %169 ], [ %32, %27 ]
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 1
  %175 = getelementptr inbounds i16, i16* %170, i64 %10
  %176 = add <8 x i16> %174, %171
  %177 = bitcast i16* %175 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 1
  %179 = getelementptr inbounds i16, i16* %175, i64 %10
  %180 = add <8 x i16> %178, %176
  %181 = bitcast i16* %179 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 1
  %183 = getelementptr inbounds i16, i16* %179, i64 %10
  %184 = add <8 x i16> %182, %180
  %185 = bitcast i16* %183 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 1
  %187 = getelementptr inbounds i16, i16* %183, i64 %10
  %188 = add <8 x i16> %186, %184
  %189 = bitcast i16* %187 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 1
  %191 = getelementptr inbounds i16, i16* %187, i64 %10
  %192 = add <8 x i16> %190, %188
  %193 = bitcast i16* %191 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = getelementptr inbounds i16, i16* %191, i64 %10
  %196 = add <8 x i16> %194, %192
  %197 = bitcast i16* %195 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %195, i64 %10
  %200 = add <8 x i16> %198, %196
  %201 = bitcast i16* %199 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 1
  %203 = getelementptr inbounds i16, i16* %199, i64 %10
  %204 = add <8 x i16> %202, %200
  %205 = add nsw i32 %172, -8
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %169

207:                                              ; preds = %169, %27
  %208 = phi <8 x i16> [ %28, %27 ], [ %202, %169 ]
  %209 = phi <8 x i16> [ %29, %27 ], [ %204, %169 ]
  br label %210

210:                                              ; preds = %207, %210
  %211 = phi <8 x i16> [ %213, %210 ], [ %209, %207 ]
  %212 = phi i32 [ %214, %210 ], [ %2, %207 ]
  %213 = add <8 x i16> %211, %208
  %214 = add nsw i32 %212, 1
  %215 = icmp slt i32 %214, 4
  br i1 %215, label %210, label %216

216:                                              ; preds = %210
  %217 = shufflevector <8 x i16> %213, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %218 = shufflevector <8 x i16> %213, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %219 = zext <4 x i16> %218 to <4 x i32>
  %220 = bitcast <8 x i16> %217 to <4 x i32>
  %221 = add <4 x i32> %219, %220
  %222 = bitcast <4 x i32> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %224 = bitcast <16 x i8> %223 to <4 x i32>
  %225 = add <4 x i32> %221, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, <i32 2, i32 2, i32 2, i32 2>
  %230 = add <4 x i32> %229, %228
  %231 = lshr <4 x i32> %230, <i32 2, i32 2, i32 2, i32 2>
  %232 = bitcast <4 x i32> %231 to <16 x i8>
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %235 = bitcast <16 x i8> %233 to <8 x i16>
  %236 = add nsw i32 %2, -1
  %237 = and i32 %2, 3
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %254, label %239

239:                                              ; preds = %216, %239
  %240 = phi i16* [ %249, %239 ], [ %9, %216 ]
  %241 = phi i16* [ %250, %239 ], [ %234, %216 ]
  %242 = phi i32 [ %251, %239 ], [ %2, %216 ]
  %243 = phi i32 [ %252, %239 ], [ %237, %216 ]
  %244 = bitcast i16* %240 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %235
  %248 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 1
  %249 = getelementptr inbounds i16, i16* %240, i64 %10
  %250 = getelementptr inbounds i16, i16* %241, i64 32
  %251 = add nsw i32 %242, -1
  %252 = add i32 %243, -1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %239, !llvm.loop !59

254:                                              ; preds = %239, %216
  %255 = phi <8 x i16> [ undef, %216 ], [ %247, %239 ]
  %256 = phi i16* [ undef, %216 ], [ %250, %239 ]
  %257 = phi i16* [ %9, %216 ], [ %249, %239 ]
  %258 = phi i16* [ %234, %216 ], [ %250, %239 ]
  %259 = phi i32 [ %2, %216 ], [ %251, %239 ]
  %260 = icmp ult i32 %236, 3
  br i1 %260, label %295, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %291, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %292, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %293, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 1
  %267 = shl <8 x i16> %266, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %268 = sub <8 x i16> %267, %235
  %269 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 1
  %270 = getelementptr inbounds i16, i16* %262, i64 %10
  %271 = getelementptr inbounds i16, i16* %263, i64 32
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = shl <8 x i16> %273, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %275 = sub <8 x i16> %274, %235
  %276 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %270, i64 %10
  %278 = getelementptr inbounds i16, i16* %263, i64 64
  %279 = bitcast i16* %277 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 1
  %281 = shl <8 x i16> %280, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %282 = sub <8 x i16> %281, %235
  %283 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %277, i64 %10
  %285 = getelementptr inbounds i16, i16* %263, i64 96
  %286 = bitcast i16* %284 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = shl <8 x i16> %287, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %289 = sub <8 x i16> %288, %235
  %290 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %290, align 1
  %291 = getelementptr inbounds i16, i16* %284, i64 %10
  %292 = getelementptr inbounds i16, i16* %263, i64 128
  %293 = add nsw i32 %264, -4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %261

295:                                              ; preds = %261, %254
  %296 = phi <8 x i16> [ %255, %254 ], [ %289, %261 ]
  %297 = phi i16* [ %256, %254 ], [ %292, %261 ]
  br label %298

298:                                              ; preds = %295, %298
  %299 = phi i16* [ %302, %298 ], [ %297, %295 ]
  %300 = phi i32 [ %303, %298 ], [ %2, %295 ]
  %301 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %299, i64 32
  %303 = add nsw i32 %300, 1
  %304 = icmp slt i32 %303, 4
  br i1 %304, label %298, label %305

305:                                              ; preds = %298, %130, %135
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 7
  %8 = and i1 %6, %7
  %9 = bitcast i8* %3 to i16*
  %10 = lshr i64 %4, 1
  %11 = add nsw i32 %2, -1
  %12 = and i32 %2, 7
  %13 = icmp eq i32 %12, 0
  br i1 %8, label %34, label %14

14:                                               ; preds = %5
  br i1 %13, label %27, label %15

15:                                               ; preds = %14, %15
  %16 = phi i16* [ %22, %15 ], [ %9, %14 ]
  %17 = phi <8 x i16> [ %23, %15 ], [ zeroinitializer, %14 ]
  %18 = phi i32 [ %24, %15 ], [ %2, %14 ]
  %19 = phi i32 [ %25, %15 ], [ %12, %14 ]
  %20 = bitcast i16* %16 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %16, i64 %10
  %23 = add <8 x i16> %21, %17
  %24 = add nsw i32 %18, -1
  %25 = add i32 %19, -1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %15, !llvm.loop !60

27:                                               ; preds = %15, %14
  %28 = phi <8 x i16> [ undef, %14 ], [ %21, %15 ]
  %29 = phi <8 x i16> [ undef, %14 ], [ %23, %15 ]
  %30 = phi i16* [ %9, %14 ], [ %22, %15 ]
  %31 = phi <8 x i16> [ zeroinitializer, %14 ], [ %23, %15 ]
  %32 = phi i32 [ %2, %14 ], [ %24, %15 ]
  %33 = icmp ult i32 %11, 7
  br i1 %33, label %207, label %169

34:                                               ; preds = %5
  br i1 %13, label %47, label %35

35:                                               ; preds = %34, %35
  %36 = phi i16* [ %42, %35 ], [ %9, %34 ]
  %37 = phi <8 x i16> [ %43, %35 ], [ zeroinitializer, %34 ]
  %38 = phi i32 [ %44, %35 ], [ %2, %34 ]
  %39 = phi i32 [ %45, %35 ], [ %12, %34 ]
  %40 = bitcast i16* %36 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %36, i64 %10
  %43 = add <8 x i16> %41, %37
  %44 = add nsw i32 %38, -1
  %45 = add i32 %39, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %35, !llvm.loop !61

47:                                               ; preds = %35, %34
  %48 = phi <8 x i16> [ undef, %34 ], [ %43, %35 ]
  %49 = phi i16* [ %9, %34 ], [ %42, %35 ]
  %50 = phi <8 x i16> [ zeroinitializer, %34 ], [ %43, %35 ]
  %51 = phi i32 [ %2, %34 ], [ %44, %35 ]
  %52 = icmp ult i32 %11, 7
  br i1 %52, label %91, label %53

53:                                               ; preds = %47, %53
  %54 = phi i16* [ %87, %53 ], [ %49, %47 ]
  %55 = phi <8 x i16> [ %88, %53 ], [ %50, %47 ]
  %56 = phi i32 [ %89, %53 ], [ %51, %47 ]
  %57 = bitcast i16* %54 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %54, i64 %10
  %60 = add <8 x i16> %58, %55
  %61 = bitcast i16* %59 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %59, i64 %10
  %64 = add <8 x i16> %62, %60
  %65 = bitcast i16* %63 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  %67 = getelementptr inbounds i16, i16* %63, i64 %10
  %68 = add <8 x i16> %66, %64
  %69 = bitcast i16* %67 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %67, i64 %10
  %72 = add <8 x i16> %70, %68
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 %10
  %76 = add <8 x i16> %74, %72
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 %10
  %80 = add <8 x i16> %78, %76
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %79, i64 %10
  %84 = add <8 x i16> %82, %80
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 %10
  %88 = add <8 x i16> %86, %84
  %89 = add nsw i32 %56, -8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %53

91:                                               ; preds = %53, %47
  %92 = phi <8 x i16> [ %48, %47 ], [ %88, %53 ]
  %93 = shufflevector <8 x i16> %92, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = shufflevector <8 x i16> %92, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %95 = zext <4 x i16> %94 to <4 x i32>
  %96 = bitcast <8 x i16> %93 to <4 x i32>
  %97 = add <4 x i32> %95, %96
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = add <4 x i32> %97, %100
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = add <4 x i32> %101, <i32 4, i32 4, i32 4, i32 4>
  %106 = add <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 3, i32 3, i32 3, i32 3>
  %108 = bitcast <4 x i32> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = add nsw i32 %2, -1
  %113 = and i32 %2, 3
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %130, label %115

115:                                              ; preds = %91, %115
  %116 = phi i16* [ %125, %115 ], [ %9, %91 ]
  %117 = phi i16* [ %126, %115 ], [ %110, %91 ]
  %118 = phi i32 [ %127, %115 ], [ %2, %91 ]
  %119 = phi i32 [ %128, %115 ], [ %113, %91 ]
  %120 = bitcast i16* %116 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 1
  %122 = shl <8 x i16> %121, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %123 = sub <8 x i16> %122, %111
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %116, i64 %10
  %126 = getelementptr inbounds i16, i16* %117, i64 32
  %127 = add nsw i32 %118, -1
  %128 = add i32 %119, -1
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %115, !llvm.loop !62

130:                                              ; preds = %115, %91
  %131 = phi i16* [ %9, %91 ], [ %125, %115 ]
  %132 = phi i16* [ %110, %91 ], [ %126, %115 ]
  %133 = phi i32 [ %2, %91 ], [ %127, %115 ]
  %134 = icmp ult i32 %112, 3
  br i1 %134, label %305, label %135

135:                                              ; preds = %130, %135
  %136 = phi i16* [ %165, %135 ], [ %131, %130 ]
  %137 = phi i16* [ %166, %135 ], [ %132, %130 ]
  %138 = phi i32 [ %167, %135 ], [ %133, %130 ]
  %139 = bitcast i16* %136 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 1
  %141 = shl <8 x i16> %140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %142 = sub <8 x i16> %141, %111
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = getelementptr inbounds i16, i16* %136, i64 %10
  %145 = getelementptr inbounds i16, i16* %137, i64 32
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = shl <8 x i16> %147, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %149 = sub <8 x i16> %148, %111
  %150 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 1
  %151 = getelementptr inbounds i16, i16* %144, i64 %10
  %152 = getelementptr inbounds i16, i16* %137, i64 64
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = shl <8 x i16> %154, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %156 = sub <8 x i16> %155, %111
  %157 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 1
  %158 = getelementptr inbounds i16, i16* %151, i64 %10
  %159 = getelementptr inbounds i16, i16* %137, i64 96
  %160 = bitcast i16* %158 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = shl <8 x i16> %161, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %163 = sub <8 x i16> %162, %111
  %164 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %158, i64 %10
  %166 = getelementptr inbounds i16, i16* %137, i64 128
  %167 = add nsw i32 %138, -4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %305, label %135

169:                                              ; preds = %27, %169
  %170 = phi i16* [ %203, %169 ], [ %30, %27 ]
  %171 = phi <8 x i16> [ %204, %169 ], [ %31, %27 ]
  %172 = phi i32 [ %205, %169 ], [ %32, %27 ]
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 1
  %175 = getelementptr inbounds i16, i16* %170, i64 %10
  %176 = add <8 x i16> %174, %171
  %177 = bitcast i16* %175 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 1
  %179 = getelementptr inbounds i16, i16* %175, i64 %10
  %180 = add <8 x i16> %178, %176
  %181 = bitcast i16* %179 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 1
  %183 = getelementptr inbounds i16, i16* %179, i64 %10
  %184 = add <8 x i16> %182, %180
  %185 = bitcast i16* %183 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 1
  %187 = getelementptr inbounds i16, i16* %183, i64 %10
  %188 = add <8 x i16> %186, %184
  %189 = bitcast i16* %187 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 1
  %191 = getelementptr inbounds i16, i16* %187, i64 %10
  %192 = add <8 x i16> %190, %188
  %193 = bitcast i16* %191 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = getelementptr inbounds i16, i16* %191, i64 %10
  %196 = add <8 x i16> %194, %192
  %197 = bitcast i16* %195 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %195, i64 %10
  %200 = add <8 x i16> %198, %196
  %201 = bitcast i16* %199 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 1
  %203 = getelementptr inbounds i16, i16* %199, i64 %10
  %204 = add <8 x i16> %202, %200
  %205 = add nsw i32 %172, -8
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %169

207:                                              ; preds = %169, %27
  %208 = phi <8 x i16> [ %28, %27 ], [ %202, %169 ]
  %209 = phi <8 x i16> [ %29, %27 ], [ %204, %169 ]
  br label %210

210:                                              ; preds = %207, %210
  %211 = phi <8 x i16> [ %213, %210 ], [ %209, %207 ]
  %212 = phi i32 [ %214, %210 ], [ %2, %207 ]
  %213 = add <8 x i16> %211, %208
  %214 = add nsw i32 %212, 1
  %215 = icmp slt i32 %214, 8
  br i1 %215, label %210, label %216

216:                                              ; preds = %210
  %217 = shufflevector <8 x i16> %213, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %218 = shufflevector <8 x i16> %213, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %219 = zext <4 x i16> %218 to <4 x i32>
  %220 = bitcast <8 x i16> %217 to <4 x i32>
  %221 = add <4 x i32> %219, %220
  %222 = bitcast <4 x i32> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %224 = bitcast <16 x i8> %223 to <4 x i32>
  %225 = add <4 x i32> %221, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, <i32 4, i32 4, i32 4, i32 4>
  %230 = add <4 x i32> %229, %228
  %231 = lshr <4 x i32> %230, <i32 3, i32 3, i32 3, i32 3>
  %232 = bitcast <4 x i32> %231 to <16 x i8>
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %235 = bitcast <16 x i8> %233 to <8 x i16>
  %236 = add nsw i32 %2, -1
  %237 = and i32 %2, 3
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %254, label %239

239:                                              ; preds = %216, %239
  %240 = phi i16* [ %249, %239 ], [ %9, %216 ]
  %241 = phi i16* [ %250, %239 ], [ %234, %216 ]
  %242 = phi i32 [ %251, %239 ], [ %2, %216 ]
  %243 = phi i32 [ %252, %239 ], [ %237, %216 ]
  %244 = bitcast i16* %240 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %235
  %248 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 1
  %249 = getelementptr inbounds i16, i16* %240, i64 %10
  %250 = getelementptr inbounds i16, i16* %241, i64 32
  %251 = add nsw i32 %242, -1
  %252 = add i32 %243, -1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %239, !llvm.loop !63

254:                                              ; preds = %239, %216
  %255 = phi <8 x i16> [ undef, %216 ], [ %247, %239 ]
  %256 = phi i16* [ undef, %216 ], [ %250, %239 ]
  %257 = phi i16* [ %9, %216 ], [ %249, %239 ]
  %258 = phi i16* [ %234, %216 ], [ %250, %239 ]
  %259 = phi i32 [ %2, %216 ], [ %251, %239 ]
  %260 = icmp ult i32 %236, 3
  br i1 %260, label %295, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %291, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %292, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %293, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 1
  %267 = shl <8 x i16> %266, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %268 = sub <8 x i16> %267, %235
  %269 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 1
  %270 = getelementptr inbounds i16, i16* %262, i64 %10
  %271 = getelementptr inbounds i16, i16* %263, i64 32
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = shl <8 x i16> %273, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %275 = sub <8 x i16> %274, %235
  %276 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %270, i64 %10
  %278 = getelementptr inbounds i16, i16* %263, i64 64
  %279 = bitcast i16* %277 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 1
  %281 = shl <8 x i16> %280, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %282 = sub <8 x i16> %281, %235
  %283 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %277, i64 %10
  %285 = getelementptr inbounds i16, i16* %263, i64 96
  %286 = bitcast i16* %284 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = shl <8 x i16> %287, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %289 = sub <8 x i16> %288, %235
  %290 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %290, align 1
  %291 = getelementptr inbounds i16, i16* %284, i64 %10
  %292 = getelementptr inbounds i16, i16* %263, i64 128
  %293 = add nsw i32 %264, -4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %261

295:                                              ; preds = %261, %254
  %296 = phi <8 x i16> [ %255, %254 ], [ %289, %261 ]
  %297 = phi i16* [ %256, %254 ], [ %292, %261 ]
  br label %298

298:                                              ; preds = %295, %298
  %299 = phi i16* [ %302, %298 ], [ %297, %295 ]
  %300 = phi i32 [ %303, %298 ], [ %2, %295 ]
  %301 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %299, i64 32
  %303 = add nsw i32 %300, 1
  %304 = icmp slt i32 %303, 8
  br i1 %304, label %298, label %305

305:                                              ; preds = %298, %130, %135
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 15
  %8 = and i1 %6, %7
  %9 = bitcast i8* %3 to i16*
  %10 = lshr i64 %4, 1
  %11 = add nsw i32 %2, -1
  %12 = and i32 %2, 7
  %13 = icmp eq i32 %12, 0
  br i1 %8, label %34, label %14

14:                                               ; preds = %5
  br i1 %13, label %27, label %15

15:                                               ; preds = %14, %15
  %16 = phi i16* [ %22, %15 ], [ %9, %14 ]
  %17 = phi <8 x i16> [ %23, %15 ], [ zeroinitializer, %14 ]
  %18 = phi i32 [ %24, %15 ], [ %2, %14 ]
  %19 = phi i32 [ %25, %15 ], [ %12, %14 ]
  %20 = bitcast i16* %16 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %16, i64 %10
  %23 = add <8 x i16> %21, %17
  %24 = add nsw i32 %18, -1
  %25 = add i32 %19, -1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %15, !llvm.loop !64

27:                                               ; preds = %15, %14
  %28 = phi <8 x i16> [ undef, %14 ], [ %21, %15 ]
  %29 = phi <8 x i16> [ undef, %14 ], [ %23, %15 ]
  %30 = phi i16* [ %9, %14 ], [ %22, %15 ]
  %31 = phi <8 x i16> [ zeroinitializer, %14 ], [ %23, %15 ]
  %32 = phi i32 [ %2, %14 ], [ %24, %15 ]
  %33 = icmp ult i32 %11, 7
  br i1 %33, label %207, label %169

34:                                               ; preds = %5
  br i1 %13, label %47, label %35

35:                                               ; preds = %34, %35
  %36 = phi i16* [ %42, %35 ], [ %9, %34 ]
  %37 = phi <8 x i16> [ %43, %35 ], [ zeroinitializer, %34 ]
  %38 = phi i32 [ %44, %35 ], [ %2, %34 ]
  %39 = phi i32 [ %45, %35 ], [ %12, %34 ]
  %40 = bitcast i16* %36 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %36, i64 %10
  %43 = add <8 x i16> %41, %37
  %44 = add nsw i32 %38, -1
  %45 = add i32 %39, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %35, !llvm.loop !65

47:                                               ; preds = %35, %34
  %48 = phi <8 x i16> [ undef, %34 ], [ %43, %35 ]
  %49 = phi i16* [ %9, %34 ], [ %42, %35 ]
  %50 = phi <8 x i16> [ zeroinitializer, %34 ], [ %43, %35 ]
  %51 = phi i32 [ %2, %34 ], [ %44, %35 ]
  %52 = icmp ult i32 %11, 7
  br i1 %52, label %91, label %53

53:                                               ; preds = %47, %53
  %54 = phi i16* [ %87, %53 ], [ %49, %47 ]
  %55 = phi <8 x i16> [ %88, %53 ], [ %50, %47 ]
  %56 = phi i32 [ %89, %53 ], [ %51, %47 ]
  %57 = bitcast i16* %54 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %54, i64 %10
  %60 = add <8 x i16> %58, %55
  %61 = bitcast i16* %59 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %59, i64 %10
  %64 = add <8 x i16> %62, %60
  %65 = bitcast i16* %63 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  %67 = getelementptr inbounds i16, i16* %63, i64 %10
  %68 = add <8 x i16> %66, %64
  %69 = bitcast i16* %67 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %67, i64 %10
  %72 = add <8 x i16> %70, %68
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 %10
  %76 = add <8 x i16> %74, %72
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 %10
  %80 = add <8 x i16> %78, %76
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %79, i64 %10
  %84 = add <8 x i16> %82, %80
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 %10
  %88 = add <8 x i16> %86, %84
  %89 = add nsw i32 %56, -8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %53

91:                                               ; preds = %53, %47
  %92 = phi <8 x i16> [ %48, %47 ], [ %88, %53 ]
  %93 = shufflevector <8 x i16> %92, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = shufflevector <8 x i16> %92, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %95 = zext <4 x i16> %94 to <4 x i32>
  %96 = bitcast <8 x i16> %93 to <4 x i32>
  %97 = add <4 x i32> %95, %96
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = add <4 x i32> %97, %100
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = add <4 x i32> %101, <i32 8, i32 8, i32 8, i32 8>
  %106 = add <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 4, i32 4, i32 4, i32 4>
  %108 = bitcast <4 x i32> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = add nsw i32 %2, -1
  %113 = and i32 %2, 3
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %130, label %115

115:                                              ; preds = %91, %115
  %116 = phi i16* [ %125, %115 ], [ %9, %91 ]
  %117 = phi i16* [ %126, %115 ], [ %110, %91 ]
  %118 = phi i32 [ %127, %115 ], [ %2, %91 ]
  %119 = phi i32 [ %128, %115 ], [ %113, %91 ]
  %120 = bitcast i16* %116 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 1
  %122 = shl <8 x i16> %121, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %123 = sub <8 x i16> %122, %111
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %116, i64 %10
  %126 = getelementptr inbounds i16, i16* %117, i64 32
  %127 = add nsw i32 %118, -1
  %128 = add i32 %119, -1
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %115, !llvm.loop !66

130:                                              ; preds = %115, %91
  %131 = phi i16* [ %9, %91 ], [ %125, %115 ]
  %132 = phi i16* [ %110, %91 ], [ %126, %115 ]
  %133 = phi i32 [ %2, %91 ], [ %127, %115 ]
  %134 = icmp ult i32 %112, 3
  br i1 %134, label %305, label %135

135:                                              ; preds = %130, %135
  %136 = phi i16* [ %165, %135 ], [ %131, %130 ]
  %137 = phi i16* [ %166, %135 ], [ %132, %130 ]
  %138 = phi i32 [ %167, %135 ], [ %133, %130 ]
  %139 = bitcast i16* %136 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 1
  %141 = shl <8 x i16> %140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %142 = sub <8 x i16> %141, %111
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = getelementptr inbounds i16, i16* %136, i64 %10
  %145 = getelementptr inbounds i16, i16* %137, i64 32
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = shl <8 x i16> %147, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %149 = sub <8 x i16> %148, %111
  %150 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 1
  %151 = getelementptr inbounds i16, i16* %144, i64 %10
  %152 = getelementptr inbounds i16, i16* %137, i64 64
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = shl <8 x i16> %154, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %156 = sub <8 x i16> %155, %111
  %157 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 1
  %158 = getelementptr inbounds i16, i16* %151, i64 %10
  %159 = getelementptr inbounds i16, i16* %137, i64 96
  %160 = bitcast i16* %158 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = shl <8 x i16> %161, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %163 = sub <8 x i16> %162, %111
  %164 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %158, i64 %10
  %166 = getelementptr inbounds i16, i16* %137, i64 128
  %167 = add nsw i32 %138, -4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %305, label %135

169:                                              ; preds = %27, %169
  %170 = phi i16* [ %203, %169 ], [ %30, %27 ]
  %171 = phi <8 x i16> [ %204, %169 ], [ %31, %27 ]
  %172 = phi i32 [ %205, %169 ], [ %32, %27 ]
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 1
  %175 = getelementptr inbounds i16, i16* %170, i64 %10
  %176 = add <8 x i16> %174, %171
  %177 = bitcast i16* %175 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 1
  %179 = getelementptr inbounds i16, i16* %175, i64 %10
  %180 = add <8 x i16> %178, %176
  %181 = bitcast i16* %179 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 1
  %183 = getelementptr inbounds i16, i16* %179, i64 %10
  %184 = add <8 x i16> %182, %180
  %185 = bitcast i16* %183 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 1
  %187 = getelementptr inbounds i16, i16* %183, i64 %10
  %188 = add <8 x i16> %186, %184
  %189 = bitcast i16* %187 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 1
  %191 = getelementptr inbounds i16, i16* %187, i64 %10
  %192 = add <8 x i16> %190, %188
  %193 = bitcast i16* %191 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = getelementptr inbounds i16, i16* %191, i64 %10
  %196 = add <8 x i16> %194, %192
  %197 = bitcast i16* %195 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %195, i64 %10
  %200 = add <8 x i16> %198, %196
  %201 = bitcast i16* %199 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 1
  %203 = getelementptr inbounds i16, i16* %199, i64 %10
  %204 = add <8 x i16> %202, %200
  %205 = add nsw i32 %172, -8
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %169

207:                                              ; preds = %169, %27
  %208 = phi <8 x i16> [ %28, %27 ], [ %202, %169 ]
  %209 = phi <8 x i16> [ %29, %27 ], [ %204, %169 ]
  br label %210

210:                                              ; preds = %207, %210
  %211 = phi <8 x i16> [ %213, %210 ], [ %209, %207 ]
  %212 = phi i32 [ %214, %210 ], [ %2, %207 ]
  %213 = add <8 x i16> %211, %208
  %214 = add nsw i32 %212, 1
  %215 = icmp slt i32 %214, 16
  br i1 %215, label %210, label %216

216:                                              ; preds = %210
  %217 = shufflevector <8 x i16> %213, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %218 = shufflevector <8 x i16> %213, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %219 = zext <4 x i16> %218 to <4 x i32>
  %220 = bitcast <8 x i16> %217 to <4 x i32>
  %221 = add <4 x i32> %219, %220
  %222 = bitcast <4 x i32> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %224 = bitcast <16 x i8> %223 to <4 x i32>
  %225 = add <4 x i32> %221, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, <i32 8, i32 8, i32 8, i32 8>
  %230 = add <4 x i32> %229, %228
  %231 = lshr <4 x i32> %230, <i32 4, i32 4, i32 4, i32 4>
  %232 = bitcast <4 x i32> %231 to <16 x i8>
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %235 = bitcast <16 x i8> %233 to <8 x i16>
  %236 = add nsw i32 %2, -1
  %237 = and i32 %2, 3
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %254, label %239

239:                                              ; preds = %216, %239
  %240 = phi i16* [ %249, %239 ], [ %9, %216 ]
  %241 = phi i16* [ %250, %239 ], [ %234, %216 ]
  %242 = phi i32 [ %251, %239 ], [ %2, %216 ]
  %243 = phi i32 [ %252, %239 ], [ %237, %216 ]
  %244 = bitcast i16* %240 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %235
  %248 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 1
  %249 = getelementptr inbounds i16, i16* %240, i64 %10
  %250 = getelementptr inbounds i16, i16* %241, i64 32
  %251 = add nsw i32 %242, -1
  %252 = add i32 %243, -1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %239, !llvm.loop !67

254:                                              ; preds = %239, %216
  %255 = phi <8 x i16> [ undef, %216 ], [ %247, %239 ]
  %256 = phi i16* [ undef, %216 ], [ %250, %239 ]
  %257 = phi i16* [ %9, %216 ], [ %249, %239 ]
  %258 = phi i16* [ %234, %216 ], [ %250, %239 ]
  %259 = phi i32 [ %2, %216 ], [ %251, %239 ]
  %260 = icmp ult i32 %236, 3
  br i1 %260, label %295, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %291, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %292, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %293, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 1
  %267 = shl <8 x i16> %266, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %268 = sub <8 x i16> %267, %235
  %269 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 1
  %270 = getelementptr inbounds i16, i16* %262, i64 %10
  %271 = getelementptr inbounds i16, i16* %263, i64 32
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = shl <8 x i16> %273, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %275 = sub <8 x i16> %274, %235
  %276 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %270, i64 %10
  %278 = getelementptr inbounds i16, i16* %263, i64 64
  %279 = bitcast i16* %277 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 1
  %281 = shl <8 x i16> %280, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %282 = sub <8 x i16> %281, %235
  %283 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %277, i64 %10
  %285 = getelementptr inbounds i16, i16* %263, i64 96
  %286 = bitcast i16* %284 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = shl <8 x i16> %287, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %289 = sub <8 x i16> %288, %235
  %290 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %290, align 1
  %291 = getelementptr inbounds i16, i16* %284, i64 %10
  %292 = getelementptr inbounds i16, i16* %263, i64 128
  %293 = add nsw i32 %264, -4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %261

295:                                              ; preds = %261, %254
  %296 = phi <8 x i16> [ %255, %254 ], [ %289, %261 ]
  %297 = phi i16* [ %256, %254 ], [ %292, %261 ]
  br label %298

298:                                              ; preds = %295, %298
  %299 = phi i16* [ %302, %298 ], [ %297, %295 ]
  %300 = phi i32 [ %303, %298 ], [ %2, %295 ]
  %301 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %299, i64 32
  %303 = add nsw i32 %300, 1
  %304 = icmp slt i32 %303, 16
  br i1 %304, label %298, label %305

305:                                              ; preds = %298, %130, %135
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_8xH_SSE4_1ILi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %1, 7
  %7 = icmp sgt i32 %2, 31
  %8 = and i1 %6, %7
  %9 = bitcast i8* %3 to i16*
  %10 = lshr i64 %4, 1
  %11 = add nsw i32 %2, -1
  %12 = and i32 %2, 7
  %13 = icmp eq i32 %12, 0
  br i1 %8, label %34, label %14

14:                                               ; preds = %5
  br i1 %13, label %27, label %15

15:                                               ; preds = %14, %15
  %16 = phi i16* [ %22, %15 ], [ %9, %14 ]
  %17 = phi <8 x i16> [ %23, %15 ], [ zeroinitializer, %14 ]
  %18 = phi i32 [ %24, %15 ], [ %2, %14 ]
  %19 = phi i32 [ %25, %15 ], [ %12, %14 ]
  %20 = bitcast i16* %16 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %16, i64 %10
  %23 = add <8 x i16> %21, %17
  %24 = add nsw i32 %18, -1
  %25 = add i32 %19, -1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %15, !llvm.loop !68

27:                                               ; preds = %15, %14
  %28 = phi <8 x i16> [ undef, %14 ], [ %21, %15 ]
  %29 = phi <8 x i16> [ undef, %14 ], [ %23, %15 ]
  %30 = phi i16* [ %9, %14 ], [ %22, %15 ]
  %31 = phi <8 x i16> [ zeroinitializer, %14 ], [ %23, %15 ]
  %32 = phi i32 [ %2, %14 ], [ %24, %15 ]
  %33 = icmp ult i32 %11, 7
  br i1 %33, label %207, label %169

34:                                               ; preds = %5
  br i1 %13, label %47, label %35

35:                                               ; preds = %34, %35
  %36 = phi i16* [ %42, %35 ], [ %9, %34 ]
  %37 = phi <8 x i16> [ %43, %35 ], [ zeroinitializer, %34 ]
  %38 = phi i32 [ %44, %35 ], [ %2, %34 ]
  %39 = phi i32 [ %45, %35 ], [ %12, %34 ]
  %40 = bitcast i16* %36 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %36, i64 %10
  %43 = add <8 x i16> %41, %37
  %44 = add nsw i32 %38, -1
  %45 = add i32 %39, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %35, !llvm.loop !69

47:                                               ; preds = %35, %34
  %48 = phi <8 x i16> [ undef, %34 ], [ %43, %35 ]
  %49 = phi i16* [ %9, %34 ], [ %42, %35 ]
  %50 = phi <8 x i16> [ zeroinitializer, %34 ], [ %43, %35 ]
  %51 = phi i32 [ %2, %34 ], [ %44, %35 ]
  %52 = icmp ult i32 %11, 7
  br i1 %52, label %91, label %53

53:                                               ; preds = %47, %53
  %54 = phi i16* [ %87, %53 ], [ %49, %47 ]
  %55 = phi <8 x i16> [ %88, %53 ], [ %50, %47 ]
  %56 = phi i32 [ %89, %53 ], [ %51, %47 ]
  %57 = bitcast i16* %54 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %54, i64 %10
  %60 = add <8 x i16> %58, %55
  %61 = bitcast i16* %59 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %59, i64 %10
  %64 = add <8 x i16> %62, %60
  %65 = bitcast i16* %63 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  %67 = getelementptr inbounds i16, i16* %63, i64 %10
  %68 = add <8 x i16> %66, %64
  %69 = bitcast i16* %67 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %67, i64 %10
  %72 = add <8 x i16> %70, %68
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 %10
  %76 = add <8 x i16> %74, %72
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 %10
  %80 = add <8 x i16> %78, %76
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %79, i64 %10
  %84 = add <8 x i16> %82, %80
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 %10
  %88 = add <8 x i16> %86, %84
  %89 = add nsw i32 %56, -8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %53

91:                                               ; preds = %53, %47
  %92 = phi <8 x i16> [ %48, %47 ], [ %88, %53 ]
  %93 = shufflevector <8 x i16> %92, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = shufflevector <8 x i16> %92, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %95 = zext <4 x i16> %94 to <4 x i32>
  %96 = bitcast <8 x i16> %93 to <4 x i32>
  %97 = add <4 x i32> %95, %96
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = add <4 x i32> %97, %100
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = add <4 x i32> %101, <i32 16, i32 16, i32 16, i32 16>
  %106 = add <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 5, i32 5, i32 5, i32 5>
  %108 = bitcast <4 x i32> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = add nsw i32 %2, -1
  %113 = and i32 %2, 3
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %130, label %115

115:                                              ; preds = %91, %115
  %116 = phi i16* [ %125, %115 ], [ %9, %91 ]
  %117 = phi i16* [ %126, %115 ], [ %110, %91 ]
  %118 = phi i32 [ %127, %115 ], [ %2, %91 ]
  %119 = phi i32 [ %128, %115 ], [ %113, %91 ]
  %120 = bitcast i16* %116 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 1
  %122 = shl <8 x i16> %121, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %123 = sub <8 x i16> %122, %111
  %124 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 1
  %125 = getelementptr inbounds i16, i16* %116, i64 %10
  %126 = getelementptr inbounds i16, i16* %117, i64 32
  %127 = add nsw i32 %118, -1
  %128 = add i32 %119, -1
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %115, !llvm.loop !70

130:                                              ; preds = %115, %91
  %131 = phi i16* [ %9, %91 ], [ %125, %115 ]
  %132 = phi i16* [ %110, %91 ], [ %126, %115 ]
  %133 = phi i32 [ %2, %91 ], [ %127, %115 ]
  %134 = icmp ult i32 %112, 3
  br i1 %134, label %305, label %135

135:                                              ; preds = %130, %135
  %136 = phi i16* [ %165, %135 ], [ %131, %130 ]
  %137 = phi i16* [ %166, %135 ], [ %132, %130 ]
  %138 = phi i32 [ %167, %135 ], [ %133, %130 ]
  %139 = bitcast i16* %136 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 1
  %141 = shl <8 x i16> %140, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %142 = sub <8 x i16> %141, %111
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 1
  %144 = getelementptr inbounds i16, i16* %136, i64 %10
  %145 = getelementptr inbounds i16, i16* %137, i64 32
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = shl <8 x i16> %147, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %149 = sub <8 x i16> %148, %111
  %150 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 1
  %151 = getelementptr inbounds i16, i16* %144, i64 %10
  %152 = getelementptr inbounds i16, i16* %137, i64 64
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 1
  %155 = shl <8 x i16> %154, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %156 = sub <8 x i16> %155, %111
  %157 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 1
  %158 = getelementptr inbounds i16, i16* %151, i64 %10
  %159 = getelementptr inbounds i16, i16* %137, i64 96
  %160 = bitcast i16* %158 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 1
  %162 = shl <8 x i16> %161, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %163 = sub <8 x i16> %162, %111
  %164 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %158, i64 %10
  %166 = getelementptr inbounds i16, i16* %137, i64 128
  %167 = add nsw i32 %138, -4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %305, label %135

169:                                              ; preds = %27, %169
  %170 = phi i16* [ %203, %169 ], [ %30, %27 ]
  %171 = phi <8 x i16> [ %204, %169 ], [ %31, %27 ]
  %172 = phi i32 [ %205, %169 ], [ %32, %27 ]
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 1
  %175 = getelementptr inbounds i16, i16* %170, i64 %10
  %176 = add <8 x i16> %174, %171
  %177 = bitcast i16* %175 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 1
  %179 = getelementptr inbounds i16, i16* %175, i64 %10
  %180 = add <8 x i16> %178, %176
  %181 = bitcast i16* %179 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 1
  %183 = getelementptr inbounds i16, i16* %179, i64 %10
  %184 = add <8 x i16> %182, %180
  %185 = bitcast i16* %183 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 1
  %187 = getelementptr inbounds i16, i16* %183, i64 %10
  %188 = add <8 x i16> %186, %184
  %189 = bitcast i16* %187 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 1
  %191 = getelementptr inbounds i16, i16* %187, i64 %10
  %192 = add <8 x i16> %190, %188
  %193 = bitcast i16* %191 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 1
  %195 = getelementptr inbounds i16, i16* %191, i64 %10
  %196 = add <8 x i16> %194, %192
  %197 = bitcast i16* %195 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %195, i64 %10
  %200 = add <8 x i16> %198, %196
  %201 = bitcast i16* %199 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 1
  %203 = getelementptr inbounds i16, i16* %199, i64 %10
  %204 = add <8 x i16> %202, %200
  %205 = add nsw i32 %172, -8
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %169

207:                                              ; preds = %169, %27
  %208 = phi <8 x i16> [ %28, %27 ], [ %202, %169 ]
  %209 = phi <8 x i16> [ %29, %27 ], [ %204, %169 ]
  br label %210

210:                                              ; preds = %207, %210
  %211 = phi <8 x i16> [ %213, %210 ], [ %209, %207 ]
  %212 = phi i32 [ %214, %210 ], [ %2, %207 ]
  %213 = add <8 x i16> %211, %208
  %214 = add nsw i32 %212, 1
  %215 = icmp slt i32 %214, 32
  br i1 %215, label %210, label %216

216:                                              ; preds = %210
  %217 = shufflevector <8 x i16> %213, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %218 = shufflevector <8 x i16> %213, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %219 = zext <4 x i16> %218 to <4 x i32>
  %220 = bitcast <8 x i16> %217 to <4 x i32>
  %221 = add <4 x i32> %219, %220
  %222 = bitcast <4 x i32> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %224 = bitcast <16 x i8> %223 to <4 x i32>
  %225 = add <4 x i32> %221, %224
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, <i32 16, i32 16, i32 16, i32 16>
  %230 = add <4 x i32> %229, %228
  %231 = lshr <4 x i32> %230, <i32 5, i32 5, i32 5, i32 5>
  %232 = bitcast <4 x i32> %231 to <16 x i8>
  %233 = shufflevector <16 x i8> %232, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %235 = bitcast <16 x i8> %233 to <8 x i16>
  %236 = add nsw i32 %2, -1
  %237 = and i32 %2, 3
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %254, label %239

239:                                              ; preds = %216, %239
  %240 = phi i16* [ %249, %239 ], [ %9, %216 ]
  %241 = phi i16* [ %250, %239 ], [ %234, %216 ]
  %242 = phi i32 [ %251, %239 ], [ %2, %216 ]
  %243 = phi i32 [ %252, %239 ], [ %237, %216 ]
  %244 = bitcast i16* %240 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = shl <8 x i16> %245, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %247 = sub <8 x i16> %246, %235
  %248 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 1
  %249 = getelementptr inbounds i16, i16* %240, i64 %10
  %250 = getelementptr inbounds i16, i16* %241, i64 32
  %251 = add nsw i32 %242, -1
  %252 = add i32 %243, -1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %239, !llvm.loop !71

254:                                              ; preds = %239, %216
  %255 = phi <8 x i16> [ undef, %216 ], [ %247, %239 ]
  %256 = phi i16* [ undef, %216 ], [ %250, %239 ]
  %257 = phi i16* [ %9, %216 ], [ %249, %239 ]
  %258 = phi i16* [ %234, %216 ], [ %250, %239 ]
  %259 = phi i32 [ %2, %216 ], [ %251, %239 ]
  %260 = icmp ult i32 %236, 3
  br i1 %260, label %295, label %261

261:                                              ; preds = %254, %261
  %262 = phi i16* [ %291, %261 ], [ %257, %254 ]
  %263 = phi i16* [ %292, %261 ], [ %258, %254 ]
  %264 = phi i32 [ %293, %261 ], [ %259, %254 ]
  %265 = bitcast i16* %262 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 1
  %267 = shl <8 x i16> %266, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %268 = sub <8 x i16> %267, %235
  %269 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 1
  %270 = getelementptr inbounds i16, i16* %262, i64 %10
  %271 = getelementptr inbounds i16, i16* %263, i64 32
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = shl <8 x i16> %273, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %275 = sub <8 x i16> %274, %235
  %276 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %270, i64 %10
  %278 = getelementptr inbounds i16, i16* %263, i64 64
  %279 = bitcast i16* %277 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 1
  %281 = shl <8 x i16> %280, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %282 = sub <8 x i16> %281, %235
  %283 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %277, i64 %10
  %285 = getelementptr inbounds i16, i16* %263, i64 96
  %286 = bitcast i16* %284 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = shl <8 x i16> %287, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %289 = sub <8 x i16> %288, %235
  %290 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %290, align 1
  %291 = getelementptr inbounds i16, i16* %284, i64 %10
  %292 = getelementptr inbounds i16, i16* %263, i64 128
  %293 = add nsw i32 %264, -4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %261

295:                                              ; preds = %261, %254
  %296 = phi <8 x i16> [ %255, %254 ], [ %289, %261 ]
  %297 = phi i16* [ %256, %254 ], [ %292, %261 ]
  br label %298

298:                                              ; preds = %295, %298
  %299 = phi i16* [ %302, %298 ], [ %297, %295 ]
  %300 = phi i32 [ %303, %298 ], [ %2, %295 ]
  %301 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %299, i64 32
  %303 = add nsw i32 %300, 1
  %304 = icmp slt i32 %303, 32
  br i1 %304, label %298, label %305

305:                                              ; preds = %298, %130, %135
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi2EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 3
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  br i1 %6, label %10, label %96

10:                                               ; preds = %5, %27
  %11 = phi i16* [ %38, %27 ], [ %7, %5 ]
  %12 = phi <4 x i32> [ %37, %27 ], [ zeroinitializer, %5 ]
  %13 = phi i32 [ %39, %27 ], [ %2, %5 ]
  %14 = bitcast i16* %11 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  br i1 %9, label %16, label %21

16:                                               ; preds = %10
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %15 to <8 x i16>
  br label %27

21:                                               ; preds = %10
  %22 = bitcast <2 x i64> %15 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  br label %27

27:                                               ; preds = %21, %16
  %28 = phi <8 x i16> [ %22, %21 ], [ %20, %16 ]
  %29 = phi <2 x i64> [ %26, %21 ], [ %19, %16 ]
  %30 = bitcast <2 x i64> %29 to <8 x i16>
  %31 = add <8 x i16> %28, %30
  %32 = shufflevector <8 x i16> %31, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %33 = zext <4 x i16> %32 to <4 x i32>
  %34 = shufflevector <8 x i16> %31, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = add <4 x i32> %12, %33
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = add <4 x i32> %35, %36
  %38 = getelementptr inbounds i16, i16* %11, i64 %8
  %39 = add nsw i32 %13, -1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %10

41:                                               ; preds = %27
  %42 = bitcast <4 x i32> %37 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = add <4 x i32> %37, %44
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = add <4 x i32> %45, <i32 4, i32 4, i32 4, i32 4>
  %50 = add <4 x i32> %49, %48
  %51 = lshr <4 x i32> %50, <i32 3, i32 3, i32 3, i32 3>
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = icmp sgt i32 %1, 0
  %57 = icmp sgt i32 %1, 8
  br label %58

58:                                               ; preds = %86, %41
  %59 = phi i16* [ %7, %41 ], [ %92, %86 ]
  %60 = phi i16* [ %54, %41 ], [ %93, %86 ]
  %61 = phi i32 [ %2, %41 ], [ %94, %86 ]
  %62 = phi <8 x i16> [ zeroinitializer, %41 ], [ %88, %86 ]
  br i1 %56, label %70, label %63

63:                                               ; preds = %58
  %64 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %67 = bitcast <4 x i32> %66 to <8 x i16>
  %68 = sub <8 x i16> %67, %55
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  br label %86

70:                                               ; preds = %58
  %71 = bitcast i16* %59 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = shl <8 x i16> %72, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %74 = sub <8 x i16> %73, %55
  %75 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 1
  br i1 %57, label %81, label %76

76:                                               ; preds = %70
  %77 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %78 = bitcast <8 x i16> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast <4 x i32> %79 to <8 x i16>
  br label %86

81:                                               ; preds = %70
  %82 = getelementptr inbounds i16, i16* %59, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = shl <8 x i16> %84, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %86

86:                                               ; preds = %63, %76, %81
  %87 = phi <8 x i16> [ %85, %81 ], [ %80, %76 ], [ %67, %63 ]
  %88 = phi <8 x i16> [ %85, %81 ], [ %73, %76 ], [ %62, %63 ]
  %89 = getelementptr inbounds i16, i16* %60, i64 8
  %90 = sub <8 x i16> %87, %55
  %91 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 1
  %92 = getelementptr inbounds i16, i16* %59, i64 %8
  %93 = getelementptr inbounds i16, i16* %60, i64 32
  %94 = add nsw i32 %61, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %273, label %58

96:                                               ; preds = %5, %113
  %97 = phi i16* [ %124, %113 ], [ %7, %5 ]
  %98 = phi <4 x i32> [ %123, %113 ], [ zeroinitializer, %5 ]
  %99 = phi i32 [ %125, %113 ], [ %2, %5 ]
  %100 = bitcast i16* %97 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  br i1 %9, label %102, label %107

102:                                              ; preds = %96
  %103 = getelementptr inbounds i16, i16* %97, i64 8
  %104 = bitcast i16* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 1
  %106 = bitcast <2 x i64> %101 to <8 x i16>
  br label %113

107:                                              ; preds = %96
  %108 = bitcast <2 x i64> %101 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  br label %113

113:                                              ; preds = %107, %102
  %114 = phi <8 x i16> [ %108, %107 ], [ %106, %102 ]
  %115 = phi <2 x i64> [ %112, %107 ], [ %105, %102 ]
  %116 = bitcast <2 x i64> %115 to <8 x i16>
  %117 = add <8 x i16> %114, %116
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = zext <4 x i16> %118 to <4 x i32>
  %120 = shufflevector <8 x i16> %117, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = bitcast <8 x i16> %120 to <4 x i32>
  %122 = add <4 x i32> %121, %119
  %123 = add <4 x i32> %122, %98
  %124 = getelementptr inbounds i16, i16* %97, i64 %8
  %125 = add nsw i32 %99, -1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %96

127:                                              ; preds = %113
  %128 = sub i32 4, %2
  %129 = sub i32 3, %2
  %130 = and i32 %128, 7
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %127, %132
  %133 = phi <4 x i32> [ %136, %132 ], [ %123, %127 ]
  %134 = phi i32 [ %137, %132 ], [ %2, %127 ]
  %135 = phi i32 [ %138, %132 ], [ %130, %127 ]
  %136 = add <4 x i32> %133, %122
  %137 = add nsw i32 %134, 1
  %138 = add i32 %135, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %132, !llvm.loop !72

140:                                              ; preds = %132, %127
  %141 = phi <4 x i32> [ undef, %127 ], [ %136, %132 ]
  %142 = phi <4 x i32> [ %123, %127 ], [ %136, %132 ]
  %143 = phi i32 [ %2, %127 ], [ %137, %132 ]
  %144 = icmp ult i32 %129, 7
  br i1 %144, label %158, label %145

145:                                              ; preds = %140, %145
  %146 = phi <4 x i32> [ %155, %145 ], [ %142, %140 ]
  %147 = phi i32 [ %156, %145 ], [ %143, %140 ]
  %148 = add <4 x i32> %146, %122
  %149 = add <4 x i32> %148, %122
  %150 = add <4 x i32> %149, %122
  %151 = add <4 x i32> %150, %122
  %152 = add <4 x i32> %151, %122
  %153 = add <4 x i32> %152, %122
  %154 = add <4 x i32> %153, %122
  %155 = add <4 x i32> %154, %122
  %156 = add nsw i32 %147, 8
  %157 = icmp eq i32 %156, 4
  br i1 %157, label %158, label %145

158:                                              ; preds = %145, %140
  %159 = phi <4 x i32> [ %141, %140 ], [ %155, %145 ]
  %160 = bitcast <4 x i32> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = add <4 x i32> %159, %162
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %163, <i32 4, i32 4, i32 4, i32 4>
  %168 = add <4 x i32> %167, %166
  %169 = lshr <4 x i32> %168, <i32 3, i32 3, i32 3, i32 3>
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %173 = bitcast <16 x i8> %171 to <8 x i16>
  %174 = icmp sgt i32 %1, 0
  %175 = icmp sgt i32 %1, 8
  br label %176

176:                                              ; preds = %262, %158
  %177 = phi i16* [ %7, %158 ], [ %269, %262 ]
  %178 = phi i16* [ %172, %158 ], [ %270, %262 ]
  %179 = phi i32 [ %2, %158 ], [ %271, %262 ]
  %180 = phi <8 x i16> [ zeroinitializer, %158 ], [ %265, %262 ]
  br i1 %174, label %209, label %202

181:                                              ; preds = %262
  %182 = sub <8 x i16> %263, %173
  %183 = sub i32 4, %2
  %184 = sub i32 3, %2
  %185 = and i32 %183, 7
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %181, %187
  %188 = phi i16* [ %194, %187 ], [ %270, %181 ]
  %189 = phi i32 [ %195, %187 ], [ %2, %181 ]
  %190 = phi i32 [ %196, %187 ], [ %185, %181 ]
  %191 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %188, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %188, i64 32
  %195 = add nsw i32 %189, 1
  %196 = add i32 %190, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %187, !llvm.loop !73

198:                                              ; preds = %187, %181
  %199 = phi i16* [ %270, %181 ], [ %194, %187 ]
  %200 = phi i32 [ %2, %181 ], [ %195, %187 ]
  %201 = icmp ult i32 %184, 7
  br i1 %201, label %273, label %220

202:                                              ; preds = %176
  %203 = shufflevector <8 x i16> %180, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %204 = bitcast <8 x i16> %203 to <4 x i32>
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %206 = bitcast <4 x i32> %205 to <8 x i16>
  %207 = sub <8 x i16> %206, %173
  %208 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 1
  br label %262

209:                                              ; preds = %176
  %210 = bitcast i16* %177 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 1
  %212 = shl <8 x i16> %211, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %213 = sub <8 x i16> %212, %173
  %214 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 1
  br i1 %175, label %257, label %215

215:                                              ; preds = %209
  %216 = shufflevector <8 x i16> %212, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %217 = bitcast <8 x i16> %216 to <4 x i32>
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %219 = bitcast <4 x i32> %218 to <8 x i16>
  br label %262

220:                                              ; preds = %198, %220
  %221 = phi i16* [ %254, %220 ], [ %199, %198 ]
  %222 = phi i32 [ %255, %220 ], [ %200, %198 ]
  %223 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %223, align 1
  %224 = getelementptr inbounds i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %225, align 1
  %226 = getelementptr inbounds i16, i16* %221, i64 32
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %227, align 1
  %228 = getelementptr inbounds i16, i16* %221, i64 40
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %229, align 1
  %230 = getelementptr inbounds i16, i16* %221, i64 64
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %231, align 1
  %232 = getelementptr inbounds i16, i16* %221, i64 72
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %233, align 1
  %234 = getelementptr inbounds i16, i16* %221, i64 96
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %235, align 1
  %236 = getelementptr inbounds i16, i16* %221, i64 104
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %237, align 1
  %238 = getelementptr inbounds i16, i16* %221, i64 128
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %239, align 1
  %240 = getelementptr inbounds i16, i16* %221, i64 136
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %221, i64 160
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %221, i64 168
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %245, align 1
  %246 = getelementptr inbounds i16, i16* %221, i64 192
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %221, i64 200
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %221, i64 224
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %251, align 1
  %252 = getelementptr inbounds i16, i16* %221, i64 232
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %221, i64 256
  %255 = add nsw i32 %222, 8
  %256 = icmp eq i32 %255, 4
  br i1 %256, label %273, label %220

257:                                              ; preds = %209
  %258 = getelementptr inbounds i16, i16* %177, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = shl <8 x i16> %260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %262

262:                                              ; preds = %202, %215, %257
  %263 = phi <8 x i16> [ %212, %257 ], [ %212, %215 ], [ %206, %202 ]
  %264 = phi <8 x i16> [ %261, %257 ], [ %219, %215 ], [ %206, %202 ]
  %265 = phi <8 x i16> [ %261, %257 ], [ %212, %215 ], [ %180, %202 ]
  %266 = getelementptr inbounds i16, i16* %178, i64 8
  %267 = sub <8 x i16> %264, %173
  %268 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %268, align 1
  %269 = getelementptr inbounds i16, i16* %177, i64 %8
  %270 = getelementptr inbounds i16, i16* %178, i64 32
  %271 = add nsw i32 %179, -1
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %181, label %176

273:                                              ; preds = %198, %220, %86
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 7
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  br i1 %6, label %10, label %96

10:                                               ; preds = %5, %27
  %11 = phi i16* [ %38, %27 ], [ %7, %5 ]
  %12 = phi <4 x i32> [ %37, %27 ], [ zeroinitializer, %5 ]
  %13 = phi i32 [ %39, %27 ], [ %2, %5 ]
  %14 = bitcast i16* %11 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  br i1 %9, label %16, label %21

16:                                               ; preds = %10
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %15 to <8 x i16>
  br label %27

21:                                               ; preds = %10
  %22 = bitcast <2 x i64> %15 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  br label %27

27:                                               ; preds = %21, %16
  %28 = phi <8 x i16> [ %22, %21 ], [ %20, %16 ]
  %29 = phi <2 x i64> [ %26, %21 ], [ %19, %16 ]
  %30 = bitcast <2 x i64> %29 to <8 x i16>
  %31 = add <8 x i16> %28, %30
  %32 = shufflevector <8 x i16> %31, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %33 = zext <4 x i16> %32 to <4 x i32>
  %34 = shufflevector <8 x i16> %31, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = add <4 x i32> %12, %33
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = add <4 x i32> %35, %36
  %38 = getelementptr inbounds i16, i16* %11, i64 %8
  %39 = add nsw i32 %13, -1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %10

41:                                               ; preds = %27
  %42 = bitcast <4 x i32> %37 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = add <4 x i32> %37, %44
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = add <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %50 = add <4 x i32> %49, %48
  %51 = lshr <4 x i32> %50, <i32 4, i32 4, i32 4, i32 4>
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = icmp sgt i32 %1, 0
  %57 = icmp sgt i32 %1, 8
  br label %58

58:                                               ; preds = %86, %41
  %59 = phi i16* [ %7, %41 ], [ %92, %86 ]
  %60 = phi i16* [ %54, %41 ], [ %93, %86 ]
  %61 = phi i32 [ %2, %41 ], [ %94, %86 ]
  %62 = phi <8 x i16> [ zeroinitializer, %41 ], [ %88, %86 ]
  br i1 %56, label %70, label %63

63:                                               ; preds = %58
  %64 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %67 = bitcast <4 x i32> %66 to <8 x i16>
  %68 = sub <8 x i16> %67, %55
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  br label %86

70:                                               ; preds = %58
  %71 = bitcast i16* %59 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = shl <8 x i16> %72, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %74 = sub <8 x i16> %73, %55
  %75 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 1
  br i1 %57, label %81, label %76

76:                                               ; preds = %70
  %77 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %78 = bitcast <8 x i16> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast <4 x i32> %79 to <8 x i16>
  br label %86

81:                                               ; preds = %70
  %82 = getelementptr inbounds i16, i16* %59, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = shl <8 x i16> %84, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %86

86:                                               ; preds = %63, %76, %81
  %87 = phi <8 x i16> [ %85, %81 ], [ %80, %76 ], [ %67, %63 ]
  %88 = phi <8 x i16> [ %85, %81 ], [ %73, %76 ], [ %62, %63 ]
  %89 = getelementptr inbounds i16, i16* %60, i64 8
  %90 = sub <8 x i16> %87, %55
  %91 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 1
  %92 = getelementptr inbounds i16, i16* %59, i64 %8
  %93 = getelementptr inbounds i16, i16* %60, i64 32
  %94 = add nsw i32 %61, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %273, label %58

96:                                               ; preds = %5, %113
  %97 = phi i16* [ %124, %113 ], [ %7, %5 ]
  %98 = phi <4 x i32> [ %123, %113 ], [ zeroinitializer, %5 ]
  %99 = phi i32 [ %125, %113 ], [ %2, %5 ]
  %100 = bitcast i16* %97 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  br i1 %9, label %102, label %107

102:                                              ; preds = %96
  %103 = getelementptr inbounds i16, i16* %97, i64 8
  %104 = bitcast i16* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 1
  %106 = bitcast <2 x i64> %101 to <8 x i16>
  br label %113

107:                                              ; preds = %96
  %108 = bitcast <2 x i64> %101 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  br label %113

113:                                              ; preds = %107, %102
  %114 = phi <8 x i16> [ %108, %107 ], [ %106, %102 ]
  %115 = phi <2 x i64> [ %112, %107 ], [ %105, %102 ]
  %116 = bitcast <2 x i64> %115 to <8 x i16>
  %117 = add <8 x i16> %114, %116
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = zext <4 x i16> %118 to <4 x i32>
  %120 = shufflevector <8 x i16> %117, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = bitcast <8 x i16> %120 to <4 x i32>
  %122 = add <4 x i32> %121, %119
  %123 = add <4 x i32> %122, %98
  %124 = getelementptr inbounds i16, i16* %97, i64 %8
  %125 = add nsw i32 %99, -1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %96

127:                                              ; preds = %113
  %128 = sub i32 0, %2
  %129 = sub i32 7, %2
  %130 = and i32 %128, 7
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %127, %132
  %133 = phi <4 x i32> [ %136, %132 ], [ %123, %127 ]
  %134 = phi i32 [ %137, %132 ], [ %2, %127 ]
  %135 = phi i32 [ %138, %132 ], [ %130, %127 ]
  %136 = add <4 x i32> %133, %122
  %137 = add nsw i32 %134, 1
  %138 = add i32 %135, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %132, !llvm.loop !74

140:                                              ; preds = %132, %127
  %141 = phi <4 x i32> [ undef, %127 ], [ %136, %132 ]
  %142 = phi <4 x i32> [ %123, %127 ], [ %136, %132 ]
  %143 = phi i32 [ %2, %127 ], [ %137, %132 ]
  %144 = icmp ult i32 %129, 7
  br i1 %144, label %158, label %145

145:                                              ; preds = %140, %145
  %146 = phi <4 x i32> [ %155, %145 ], [ %142, %140 ]
  %147 = phi i32 [ %156, %145 ], [ %143, %140 ]
  %148 = add <4 x i32> %146, %122
  %149 = add <4 x i32> %148, %122
  %150 = add <4 x i32> %149, %122
  %151 = add <4 x i32> %150, %122
  %152 = add <4 x i32> %151, %122
  %153 = add <4 x i32> %152, %122
  %154 = add <4 x i32> %153, %122
  %155 = add <4 x i32> %154, %122
  %156 = add nsw i32 %147, 8
  %157 = icmp eq i32 %147, 0
  br i1 %157, label %158, label %145

158:                                              ; preds = %145, %140
  %159 = phi <4 x i32> [ %141, %140 ], [ %155, %145 ]
  %160 = bitcast <4 x i32> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = add <4 x i32> %159, %162
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %163, <i32 8, i32 8, i32 8, i32 8>
  %168 = add <4 x i32> %167, %166
  %169 = lshr <4 x i32> %168, <i32 4, i32 4, i32 4, i32 4>
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %173 = bitcast <16 x i8> %171 to <8 x i16>
  %174 = icmp sgt i32 %1, 0
  %175 = icmp sgt i32 %1, 8
  br label %176

176:                                              ; preds = %262, %158
  %177 = phi i16* [ %7, %158 ], [ %269, %262 ]
  %178 = phi i16* [ %172, %158 ], [ %270, %262 ]
  %179 = phi i32 [ %2, %158 ], [ %271, %262 ]
  %180 = phi <8 x i16> [ zeroinitializer, %158 ], [ %265, %262 ]
  br i1 %174, label %209, label %202

181:                                              ; preds = %262
  %182 = sub <8 x i16> %263, %173
  %183 = sub i32 0, %2
  %184 = sub i32 7, %2
  %185 = and i32 %183, 7
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %181, %187
  %188 = phi i16* [ %194, %187 ], [ %270, %181 ]
  %189 = phi i32 [ %195, %187 ], [ %2, %181 ]
  %190 = phi i32 [ %196, %187 ], [ %185, %181 ]
  %191 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %188, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %188, i64 32
  %195 = add nsw i32 %189, 1
  %196 = add i32 %190, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %187, !llvm.loop !75

198:                                              ; preds = %187, %181
  %199 = phi i16* [ %270, %181 ], [ %194, %187 ]
  %200 = phi i32 [ %2, %181 ], [ %195, %187 ]
  %201 = icmp ult i32 %184, 7
  br i1 %201, label %273, label %220

202:                                              ; preds = %176
  %203 = shufflevector <8 x i16> %180, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %204 = bitcast <8 x i16> %203 to <4 x i32>
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %206 = bitcast <4 x i32> %205 to <8 x i16>
  %207 = sub <8 x i16> %206, %173
  %208 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 1
  br label %262

209:                                              ; preds = %176
  %210 = bitcast i16* %177 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 1
  %212 = shl <8 x i16> %211, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %213 = sub <8 x i16> %212, %173
  %214 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 1
  br i1 %175, label %257, label %215

215:                                              ; preds = %209
  %216 = shufflevector <8 x i16> %212, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %217 = bitcast <8 x i16> %216 to <4 x i32>
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %219 = bitcast <4 x i32> %218 to <8 x i16>
  br label %262

220:                                              ; preds = %198, %220
  %221 = phi i16* [ %254, %220 ], [ %199, %198 ]
  %222 = phi i32 [ %255, %220 ], [ %200, %198 ]
  %223 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %223, align 1
  %224 = getelementptr inbounds i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %225, align 1
  %226 = getelementptr inbounds i16, i16* %221, i64 32
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %227, align 1
  %228 = getelementptr inbounds i16, i16* %221, i64 40
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %229, align 1
  %230 = getelementptr inbounds i16, i16* %221, i64 64
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %231, align 1
  %232 = getelementptr inbounds i16, i16* %221, i64 72
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %233, align 1
  %234 = getelementptr inbounds i16, i16* %221, i64 96
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %235, align 1
  %236 = getelementptr inbounds i16, i16* %221, i64 104
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %237, align 1
  %238 = getelementptr inbounds i16, i16* %221, i64 128
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %239, align 1
  %240 = getelementptr inbounds i16, i16* %221, i64 136
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %221, i64 160
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %221, i64 168
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %245, align 1
  %246 = getelementptr inbounds i16, i16* %221, i64 192
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %221, i64 200
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %221, i64 224
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %251, align 1
  %252 = getelementptr inbounds i16, i16* %221, i64 232
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %221, i64 256
  %255 = add nsw i32 %222, 8
  %256 = icmp eq i32 %222, 0
  br i1 %256, label %273, label %220

257:                                              ; preds = %209
  %258 = getelementptr inbounds i16, i16* %177, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = shl <8 x i16> %260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %262

262:                                              ; preds = %202, %215, %257
  %263 = phi <8 x i16> [ %212, %257 ], [ %212, %215 ], [ %206, %202 ]
  %264 = phi <8 x i16> [ %261, %257 ], [ %219, %215 ], [ %206, %202 ]
  %265 = phi <8 x i16> [ %261, %257 ], [ %212, %215 ], [ %180, %202 ]
  %266 = getelementptr inbounds i16, i16* %178, i64 8
  %267 = sub <8 x i16> %264, %173
  %268 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %268, align 1
  %269 = getelementptr inbounds i16, i16* %177, i64 %8
  %270 = getelementptr inbounds i16, i16* %178, i64 32
  %271 = add nsw i32 %179, -1
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %181, label %176

273:                                              ; preds = %198, %220, %86
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 15
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  br i1 %6, label %10, label %96

10:                                               ; preds = %5, %27
  %11 = phi i16* [ %38, %27 ], [ %7, %5 ]
  %12 = phi <4 x i32> [ %37, %27 ], [ zeroinitializer, %5 ]
  %13 = phi i32 [ %39, %27 ], [ %2, %5 ]
  %14 = bitcast i16* %11 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  br i1 %9, label %16, label %21

16:                                               ; preds = %10
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %15 to <8 x i16>
  br label %27

21:                                               ; preds = %10
  %22 = bitcast <2 x i64> %15 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  br label %27

27:                                               ; preds = %21, %16
  %28 = phi <8 x i16> [ %22, %21 ], [ %20, %16 ]
  %29 = phi <2 x i64> [ %26, %21 ], [ %19, %16 ]
  %30 = bitcast <2 x i64> %29 to <8 x i16>
  %31 = add <8 x i16> %28, %30
  %32 = shufflevector <8 x i16> %31, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %33 = zext <4 x i16> %32 to <4 x i32>
  %34 = shufflevector <8 x i16> %31, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = add <4 x i32> %12, %33
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = add <4 x i32> %35, %36
  %38 = getelementptr inbounds i16, i16* %11, i64 %8
  %39 = add nsw i32 %13, -1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %10

41:                                               ; preds = %27
  %42 = bitcast <4 x i32> %37 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = add <4 x i32> %37, %44
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = add <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %50 = add <4 x i32> %49, %48
  %51 = lshr <4 x i32> %50, <i32 5, i32 5, i32 5, i32 5>
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = icmp sgt i32 %1, 0
  %57 = icmp sgt i32 %1, 8
  br label %58

58:                                               ; preds = %86, %41
  %59 = phi i16* [ %7, %41 ], [ %92, %86 ]
  %60 = phi i16* [ %54, %41 ], [ %93, %86 ]
  %61 = phi i32 [ %2, %41 ], [ %94, %86 ]
  %62 = phi <8 x i16> [ zeroinitializer, %41 ], [ %88, %86 ]
  br i1 %56, label %70, label %63

63:                                               ; preds = %58
  %64 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %67 = bitcast <4 x i32> %66 to <8 x i16>
  %68 = sub <8 x i16> %67, %55
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  br label %86

70:                                               ; preds = %58
  %71 = bitcast i16* %59 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = shl <8 x i16> %72, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %74 = sub <8 x i16> %73, %55
  %75 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 1
  br i1 %57, label %81, label %76

76:                                               ; preds = %70
  %77 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %78 = bitcast <8 x i16> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast <4 x i32> %79 to <8 x i16>
  br label %86

81:                                               ; preds = %70
  %82 = getelementptr inbounds i16, i16* %59, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = shl <8 x i16> %84, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %86

86:                                               ; preds = %63, %76, %81
  %87 = phi <8 x i16> [ %85, %81 ], [ %80, %76 ], [ %67, %63 ]
  %88 = phi <8 x i16> [ %85, %81 ], [ %73, %76 ], [ %62, %63 ]
  %89 = getelementptr inbounds i16, i16* %60, i64 8
  %90 = sub <8 x i16> %87, %55
  %91 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 1
  %92 = getelementptr inbounds i16, i16* %59, i64 %8
  %93 = getelementptr inbounds i16, i16* %60, i64 32
  %94 = add nsw i32 %61, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %273, label %58

96:                                               ; preds = %5, %113
  %97 = phi i16* [ %124, %113 ], [ %7, %5 ]
  %98 = phi <4 x i32> [ %123, %113 ], [ zeroinitializer, %5 ]
  %99 = phi i32 [ %125, %113 ], [ %2, %5 ]
  %100 = bitcast i16* %97 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  br i1 %9, label %102, label %107

102:                                              ; preds = %96
  %103 = getelementptr inbounds i16, i16* %97, i64 8
  %104 = bitcast i16* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 1
  %106 = bitcast <2 x i64> %101 to <8 x i16>
  br label %113

107:                                              ; preds = %96
  %108 = bitcast <2 x i64> %101 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  br label %113

113:                                              ; preds = %107, %102
  %114 = phi <8 x i16> [ %108, %107 ], [ %106, %102 ]
  %115 = phi <2 x i64> [ %112, %107 ], [ %105, %102 ]
  %116 = bitcast <2 x i64> %115 to <8 x i16>
  %117 = add <8 x i16> %114, %116
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = zext <4 x i16> %118 to <4 x i32>
  %120 = shufflevector <8 x i16> %117, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = bitcast <8 x i16> %120 to <4 x i32>
  %122 = add <4 x i32> %121, %119
  %123 = add <4 x i32> %122, %98
  %124 = getelementptr inbounds i16, i16* %97, i64 %8
  %125 = add nsw i32 %99, -1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %96

127:                                              ; preds = %113
  %128 = sub i32 0, %2
  %129 = sub i32 15, %2
  %130 = and i32 %128, 7
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %127, %132
  %133 = phi <4 x i32> [ %136, %132 ], [ %123, %127 ]
  %134 = phi i32 [ %137, %132 ], [ %2, %127 ]
  %135 = phi i32 [ %138, %132 ], [ %130, %127 ]
  %136 = add <4 x i32> %133, %122
  %137 = add nsw i32 %134, 1
  %138 = add i32 %135, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %132, !llvm.loop !76

140:                                              ; preds = %132, %127
  %141 = phi <4 x i32> [ undef, %127 ], [ %136, %132 ]
  %142 = phi <4 x i32> [ %123, %127 ], [ %136, %132 ]
  %143 = phi i32 [ %2, %127 ], [ %137, %132 ]
  %144 = icmp ult i32 %129, 7
  br i1 %144, label %158, label %145

145:                                              ; preds = %140, %145
  %146 = phi <4 x i32> [ %155, %145 ], [ %142, %140 ]
  %147 = phi i32 [ %156, %145 ], [ %143, %140 ]
  %148 = add <4 x i32> %146, %122
  %149 = add <4 x i32> %148, %122
  %150 = add <4 x i32> %149, %122
  %151 = add <4 x i32> %150, %122
  %152 = add <4 x i32> %151, %122
  %153 = add <4 x i32> %152, %122
  %154 = add <4 x i32> %153, %122
  %155 = add <4 x i32> %154, %122
  %156 = add nsw i32 %147, 8
  %157 = icmp eq i32 %156, 16
  br i1 %157, label %158, label %145

158:                                              ; preds = %145, %140
  %159 = phi <4 x i32> [ %141, %140 ], [ %155, %145 ]
  %160 = bitcast <4 x i32> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = add <4 x i32> %159, %162
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %163, <i32 16, i32 16, i32 16, i32 16>
  %168 = add <4 x i32> %167, %166
  %169 = lshr <4 x i32> %168, <i32 5, i32 5, i32 5, i32 5>
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %173 = bitcast <16 x i8> %171 to <8 x i16>
  %174 = icmp sgt i32 %1, 0
  %175 = icmp sgt i32 %1, 8
  br label %176

176:                                              ; preds = %262, %158
  %177 = phi i16* [ %7, %158 ], [ %269, %262 ]
  %178 = phi i16* [ %172, %158 ], [ %270, %262 ]
  %179 = phi i32 [ %2, %158 ], [ %271, %262 ]
  %180 = phi <8 x i16> [ zeroinitializer, %158 ], [ %265, %262 ]
  br i1 %174, label %209, label %202

181:                                              ; preds = %262
  %182 = sub <8 x i16> %263, %173
  %183 = sub i32 0, %2
  %184 = sub i32 15, %2
  %185 = and i32 %183, 7
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %181, %187
  %188 = phi i16* [ %194, %187 ], [ %270, %181 ]
  %189 = phi i32 [ %195, %187 ], [ %2, %181 ]
  %190 = phi i32 [ %196, %187 ], [ %185, %181 ]
  %191 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %188, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %188, i64 32
  %195 = add nsw i32 %189, 1
  %196 = add i32 %190, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %187, !llvm.loop !77

198:                                              ; preds = %187, %181
  %199 = phi i16* [ %270, %181 ], [ %194, %187 ]
  %200 = phi i32 [ %2, %181 ], [ %195, %187 ]
  %201 = icmp ult i32 %184, 7
  br i1 %201, label %273, label %220

202:                                              ; preds = %176
  %203 = shufflevector <8 x i16> %180, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %204 = bitcast <8 x i16> %203 to <4 x i32>
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %206 = bitcast <4 x i32> %205 to <8 x i16>
  %207 = sub <8 x i16> %206, %173
  %208 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 1
  br label %262

209:                                              ; preds = %176
  %210 = bitcast i16* %177 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 1
  %212 = shl <8 x i16> %211, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %213 = sub <8 x i16> %212, %173
  %214 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 1
  br i1 %175, label %257, label %215

215:                                              ; preds = %209
  %216 = shufflevector <8 x i16> %212, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %217 = bitcast <8 x i16> %216 to <4 x i32>
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %219 = bitcast <4 x i32> %218 to <8 x i16>
  br label %262

220:                                              ; preds = %198, %220
  %221 = phi i16* [ %254, %220 ], [ %199, %198 ]
  %222 = phi i32 [ %255, %220 ], [ %200, %198 ]
  %223 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %223, align 1
  %224 = getelementptr inbounds i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %225, align 1
  %226 = getelementptr inbounds i16, i16* %221, i64 32
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %227, align 1
  %228 = getelementptr inbounds i16, i16* %221, i64 40
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %229, align 1
  %230 = getelementptr inbounds i16, i16* %221, i64 64
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %231, align 1
  %232 = getelementptr inbounds i16, i16* %221, i64 72
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %233, align 1
  %234 = getelementptr inbounds i16, i16* %221, i64 96
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %235, align 1
  %236 = getelementptr inbounds i16, i16* %221, i64 104
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %237, align 1
  %238 = getelementptr inbounds i16, i16* %221, i64 128
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %239, align 1
  %240 = getelementptr inbounds i16, i16* %221, i64 136
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %221, i64 160
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %221, i64 168
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %245, align 1
  %246 = getelementptr inbounds i16, i16* %221, i64 192
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %221, i64 200
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %221, i64 224
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %251, align 1
  %252 = getelementptr inbounds i16, i16* %221, i64 232
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %221, i64 256
  %255 = add nsw i32 %222, 8
  %256 = icmp eq i32 %255, 16
  br i1 %256, label %273, label %220

257:                                              ; preds = %209
  %258 = getelementptr inbounds i16, i16* %177, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = shl <8 x i16> %260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %262

262:                                              ; preds = %202, %215, %257
  %263 = phi <8 x i16> [ %212, %257 ], [ %212, %215 ], [ %206, %202 ]
  %264 = phi <8 x i16> [ %261, %257 ], [ %219, %215 ], [ %206, %202 ]
  %265 = phi <8 x i16> [ %261, %257 ], [ %212, %215 ], [ %180, %202 ]
  %266 = getelementptr inbounds i16, i16* %178, i64 8
  %267 = sub <8 x i16> %264, %173
  %268 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %268, align 1
  %269 = getelementptr inbounds i16, i16* %177, i64 %8
  %270 = getelementptr inbounds i16, i16* %178, i64 32
  %271 = add nsw i32 %179, -1
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %181, label %176

273:                                              ; preds = %198, %220, %86
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi4ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #4 {
  %6 = icmp sgt i32 %2, 31
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  br i1 %6, label %10, label %96

10:                                               ; preds = %5, %27
  %11 = phi i16* [ %38, %27 ], [ %7, %5 ]
  %12 = phi <4 x i32> [ %37, %27 ], [ zeroinitializer, %5 ]
  %13 = phi i32 [ %39, %27 ], [ %2, %5 ]
  %14 = bitcast i16* %11 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  br i1 %9, label %16, label %21

16:                                               ; preds = %10
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = bitcast <2 x i64> %15 to <8 x i16>
  br label %27

21:                                               ; preds = %10
  %22 = bitcast <2 x i64> %15 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  br label %27

27:                                               ; preds = %21, %16
  %28 = phi <8 x i16> [ %22, %21 ], [ %20, %16 ]
  %29 = phi <2 x i64> [ %26, %21 ], [ %19, %16 ]
  %30 = bitcast <2 x i64> %29 to <8 x i16>
  %31 = add <8 x i16> %28, %30
  %32 = shufflevector <8 x i16> %31, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %33 = zext <4 x i16> %32 to <4 x i32>
  %34 = shufflevector <8 x i16> %31, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = add <4 x i32> %12, %33
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = add <4 x i32> %35, %36
  %38 = getelementptr inbounds i16, i16* %11, i64 %8
  %39 = add nsw i32 %13, -1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %10

41:                                               ; preds = %27
  %42 = bitcast <4 x i32> %37 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = add <4 x i32> %37, %44
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = add <4 x i32> %45, <i32 32, i32 32, i32 32, i32 32>
  %50 = add <4 x i32> %49, %48
  %51 = lshr <4 x i32> %50, <i32 6, i32 6, i32 6, i32 6>
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = icmp sgt i32 %1, 0
  %57 = icmp sgt i32 %1, 8
  br label %58

58:                                               ; preds = %86, %41
  %59 = phi i16* [ %7, %41 ], [ %92, %86 ]
  %60 = phi i16* [ %54, %41 ], [ %93, %86 ]
  %61 = phi i32 [ %2, %41 ], [ %94, %86 ]
  %62 = phi <8 x i16> [ zeroinitializer, %41 ], [ %88, %86 ]
  br i1 %56, label %70, label %63

63:                                               ; preds = %58
  %64 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %67 = bitcast <4 x i32> %66 to <8 x i16>
  %68 = sub <8 x i16> %67, %55
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  br label %86

70:                                               ; preds = %58
  %71 = bitcast i16* %59 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = shl <8 x i16> %72, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %74 = sub <8 x i16> %73, %55
  %75 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 1
  br i1 %57, label %81, label %76

76:                                               ; preds = %70
  %77 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %78 = bitcast <8 x i16> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast <4 x i32> %79 to <8 x i16>
  br label %86

81:                                               ; preds = %70
  %82 = getelementptr inbounds i16, i16* %59, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = shl <8 x i16> %84, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %86

86:                                               ; preds = %63, %76, %81
  %87 = phi <8 x i16> [ %85, %81 ], [ %80, %76 ], [ %67, %63 ]
  %88 = phi <8 x i16> [ %85, %81 ], [ %73, %76 ], [ %62, %63 ]
  %89 = getelementptr inbounds i16, i16* %60, i64 8
  %90 = sub <8 x i16> %87, %55
  %91 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 1
  %92 = getelementptr inbounds i16, i16* %59, i64 %8
  %93 = getelementptr inbounds i16, i16* %60, i64 32
  %94 = add nsw i32 %61, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %273, label %58

96:                                               ; preds = %5, %113
  %97 = phi i16* [ %124, %113 ], [ %7, %5 ]
  %98 = phi <4 x i32> [ %123, %113 ], [ zeroinitializer, %5 ]
  %99 = phi i32 [ %125, %113 ], [ %2, %5 ]
  %100 = bitcast i16* %97 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  br i1 %9, label %102, label %107

102:                                              ; preds = %96
  %103 = getelementptr inbounds i16, i16* %97, i64 8
  %104 = bitcast i16* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 1
  %106 = bitcast <2 x i64> %101 to <8 x i16>
  br label %113

107:                                              ; preds = %96
  %108 = bitcast <2 x i64> %101 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %110 = bitcast <8 x i16> %109 to <4 x i32>
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  br label %113

113:                                              ; preds = %107, %102
  %114 = phi <8 x i16> [ %108, %107 ], [ %106, %102 ]
  %115 = phi <2 x i64> [ %112, %107 ], [ %105, %102 ]
  %116 = bitcast <2 x i64> %115 to <8 x i16>
  %117 = add <8 x i16> %114, %116
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = zext <4 x i16> %118 to <4 x i32>
  %120 = shufflevector <8 x i16> %117, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = bitcast <8 x i16> %120 to <4 x i32>
  %122 = add <4 x i32> %121, %119
  %123 = add <4 x i32> %122, %98
  %124 = getelementptr inbounds i16, i16* %97, i64 %8
  %125 = add nsw i32 %99, -1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %96

127:                                              ; preds = %113
  %128 = sub i32 0, %2
  %129 = sub i32 31, %2
  %130 = and i32 %128, 7
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %127, %132
  %133 = phi <4 x i32> [ %136, %132 ], [ %123, %127 ]
  %134 = phi i32 [ %137, %132 ], [ %2, %127 ]
  %135 = phi i32 [ %138, %132 ], [ %130, %127 ]
  %136 = add <4 x i32> %133, %122
  %137 = add nsw i32 %134, 1
  %138 = add i32 %135, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %132, !llvm.loop !78

140:                                              ; preds = %132, %127
  %141 = phi <4 x i32> [ undef, %127 ], [ %136, %132 ]
  %142 = phi <4 x i32> [ %123, %127 ], [ %136, %132 ]
  %143 = phi i32 [ %2, %127 ], [ %137, %132 ]
  %144 = icmp ult i32 %129, 7
  br i1 %144, label %158, label %145

145:                                              ; preds = %140, %145
  %146 = phi <4 x i32> [ %155, %145 ], [ %142, %140 ]
  %147 = phi i32 [ %156, %145 ], [ %143, %140 ]
  %148 = add <4 x i32> %146, %122
  %149 = add <4 x i32> %148, %122
  %150 = add <4 x i32> %149, %122
  %151 = add <4 x i32> %150, %122
  %152 = add <4 x i32> %151, %122
  %153 = add <4 x i32> %152, %122
  %154 = add <4 x i32> %153, %122
  %155 = add <4 x i32> %154, %122
  %156 = add nsw i32 %147, 8
  %157 = icmp eq i32 %156, 32
  br i1 %157, label %158, label %145

158:                                              ; preds = %145, %140
  %159 = phi <4 x i32> [ %141, %140 ], [ %155, %145 ]
  %160 = bitcast <4 x i32> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = add <4 x i32> %159, %162
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %163, <i32 32, i32 32, i32 32, i32 32>
  %168 = add <4 x i32> %167, %166
  %169 = lshr <4 x i32> %168, <i32 6, i32 6, i32 6, i32 6>
  %170 = bitcast <4 x i32> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %173 = bitcast <16 x i8> %171 to <8 x i16>
  %174 = icmp sgt i32 %1, 0
  %175 = icmp sgt i32 %1, 8
  br label %176

176:                                              ; preds = %262, %158
  %177 = phi i16* [ %7, %158 ], [ %269, %262 ]
  %178 = phi i16* [ %172, %158 ], [ %270, %262 ]
  %179 = phi i32 [ %2, %158 ], [ %271, %262 ]
  %180 = phi <8 x i16> [ zeroinitializer, %158 ], [ %265, %262 ]
  br i1 %174, label %209, label %202

181:                                              ; preds = %262
  %182 = sub <8 x i16> %263, %173
  %183 = sub i32 0, %2
  %184 = sub i32 31, %2
  %185 = and i32 %183, 7
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %181, %187
  %188 = phi i16* [ %194, %187 ], [ %270, %181 ]
  %189 = phi i32 [ %195, %187 ], [ %2, %181 ]
  %190 = phi i32 [ %196, %187 ], [ %185, %181 ]
  %191 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %191, align 1
  %192 = getelementptr inbounds i16, i16* %188, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %193, align 1
  %194 = getelementptr inbounds i16, i16* %188, i64 32
  %195 = add nsw i32 %189, 1
  %196 = add i32 %190, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %187, !llvm.loop !79

198:                                              ; preds = %187, %181
  %199 = phi i16* [ %270, %181 ], [ %194, %187 ]
  %200 = phi i32 [ %2, %181 ], [ %195, %187 ]
  %201 = icmp ult i32 %184, 7
  br i1 %201, label %273, label %220

202:                                              ; preds = %176
  %203 = shufflevector <8 x i16> %180, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %204 = bitcast <8 x i16> %203 to <4 x i32>
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %206 = bitcast <4 x i32> %205 to <8 x i16>
  %207 = sub <8 x i16> %206, %173
  %208 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 1
  br label %262

209:                                              ; preds = %176
  %210 = bitcast i16* %177 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 1
  %212 = shl <8 x i16> %211, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %213 = sub <8 x i16> %212, %173
  %214 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 1
  br i1 %175, label %257, label %215

215:                                              ; preds = %209
  %216 = shufflevector <8 x i16> %212, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %217 = bitcast <8 x i16> %216 to <4 x i32>
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %219 = bitcast <4 x i32> %218 to <8 x i16>
  br label %262

220:                                              ; preds = %198, %220
  %221 = phi i16* [ %254, %220 ], [ %199, %198 ]
  %222 = phi i32 [ %255, %220 ], [ %200, %198 ]
  %223 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %223, align 1
  %224 = getelementptr inbounds i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %225, align 1
  %226 = getelementptr inbounds i16, i16* %221, i64 32
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %227, align 1
  %228 = getelementptr inbounds i16, i16* %221, i64 40
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %229, align 1
  %230 = getelementptr inbounds i16, i16* %221, i64 64
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %231, align 1
  %232 = getelementptr inbounds i16, i16* %221, i64 72
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %233, align 1
  %234 = getelementptr inbounds i16, i16* %221, i64 96
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %235, align 1
  %236 = getelementptr inbounds i16, i16* %221, i64 104
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %237, align 1
  %238 = getelementptr inbounds i16, i16* %221, i64 128
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %239, align 1
  %240 = getelementptr inbounds i16, i16* %221, i64 136
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %221, i64 160
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %243, align 1
  %244 = getelementptr inbounds i16, i16* %221, i64 168
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %245, align 1
  %246 = getelementptr inbounds i16, i16* %221, i64 192
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %221, i64 200
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %249, align 1
  %250 = getelementptr inbounds i16, i16* %221, i64 224
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %251, align 1
  %252 = getelementptr inbounds i16, i16* %221, i64 232
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %221, i64 256
  %255 = add nsw i32 %222, 8
  %256 = icmp eq i32 %255, 32
  br i1 %256, label %273, label %220

257:                                              ; preds = %209
  %258 = getelementptr inbounds i16, i16* %177, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = shl <8 x i16> %260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %262

262:                                              ; preds = %202, %215, %257
  %263 = phi <8 x i16> [ %212, %257 ], [ %212, %215 ], [ %206, %202 ]
  %264 = phi <8 x i16> [ %261, %257 ], [ %219, %215 ], [ %206, %202 ]
  %265 = phi <8 x i16> [ %261, %257 ], [ %212, %215 ], [ %180, %202 ]
  %266 = getelementptr inbounds i16, i16* %178, i64 8
  %267 = sub <8 x i16> %264, %173
  %268 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %268, align 1
  %269 = getelementptr inbounds i16, i16* %177, i64 %8
  %270 = getelementptr inbounds i16, i16* %178, i64 32
  %271 = add nsw i32 %179, -1
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %181, label %176

273:                                              ; preds = %198, %220, %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi5ELi3EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = icmp sgt i32 %2, 7
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  %10 = icmp sgt i32 %1, 23
  %11 = icmp eq i32 %1, 32
  br i1 %6, label %12, label %167

12:                                               ; preds = %5, %55
  %13 = phi i16* [ %67, %55 ], [ %7, %5 ]
  %14 = phi <4 x i32> [ %66, %55 ], [ zeroinitializer, %5 ]
  %15 = phi i32 [ %68, %55 ], [ %2, %5 ]
  %16 = bitcast i16* %13 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  br i1 %9, label %18, label %23

18:                                               ; preds = %12
  %19 = getelementptr inbounds i16, i16* %13, i64 8
  %20 = bitcast i16* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %17 to <8 x i16>
  br label %29

23:                                               ; preds = %12
  %24 = bitcast <2 x i64> %17 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  br label %29

29:                                               ; preds = %23, %18
  %30 = phi <8 x i16> [ %24, %23 ], [ %22, %18 ]
  %31 = phi <2 x i64> [ %28, %23 ], [ %21, %18 ]
  %32 = bitcast <2 x i64> %31 to <8 x i16>
  %33 = add <8 x i16> %30, %32
  br i1 %10, label %39, label %34

34:                                               ; preds = %29
  %35 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  br label %48

39:                                               ; preds = %29
  %40 = getelementptr inbounds i16, i16* %13, i64 16
  %41 = bitcast i16* %40 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 1
  br i1 %11, label %43, label %48

43:                                               ; preds = %39
  %44 = getelementptr inbounds i16, i16* %13, i64 24
  %45 = bitcast i16* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 1
  %47 = bitcast <2 x i64> %42 to <8 x i16>
  br label %55

48:                                               ; preds = %39, %34
  %49 = phi <2 x i64> [ %38, %34 ], [ %42, %39 ]
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  br label %55

55:                                               ; preds = %48, %43
  %56 = phi <8 x i16> [ %50, %48 ], [ %47, %43 ]
  %57 = phi <2 x i64> [ %54, %48 ], [ %46, %43 ]
  %58 = add <8 x i16> %33, %56
  %59 = bitcast <2 x i64> %57 to <8 x i16>
  %60 = add <8 x i16> %58, %59
  %61 = shufflevector <8 x i16> %60, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = shufflevector <8 x i16> %60, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %64 = add <4 x i32> %14, %62
  %65 = bitcast <8 x i16> %63 to <4 x i32>
  %66 = add <4 x i32> %64, %65
  %67 = getelementptr inbounds i16, i16* %13, i64 %8
  %68 = add nsw i32 %15, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %12

70:                                               ; preds = %55
  %71 = bitcast <4 x i32> %66 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %73 = bitcast <16 x i8> %72 to <4 x i32>
  %74 = add <4 x i32> %66, %73
  %75 = bitcast <4 x i32> %74 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %77 = bitcast <16 x i8> %76 to <4 x i32>
  %78 = add <4 x i32> %74, <i32 16, i32 16, i32 16, i32 16>
  %79 = add <4 x i32> %78, %77
  %80 = lshr <4 x i32> %79, <i32 5, i32 5, i32 5, i32 5>
  %81 = bitcast <4 x i32> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %84 = bitcast <16 x i8> %82 to <8 x i16>
  %85 = icmp sgt i32 %1, 0
  %86 = icmp sgt i32 %1, 8
  %87 = icmp sgt i32 %1, 16
  %88 = icmp sgt i32 %1, 24
  br label %89

89:                                               ; preds = %157, %70
  %90 = phi i16* [ %7, %70 ], [ %163, %157 ]
  %91 = phi i16* [ %83, %70 ], [ %164, %157 ]
  %92 = phi i32 [ %2, %70 ], [ %165, %157 ]
  %93 = phi <8 x i16> [ zeroinitializer, %70 ], [ %159, %157 ]
  br i1 %85, label %101, label %94

94:                                               ; preds = %89
  %95 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %96 = bitcast <8 x i16> %95 to <4 x i32>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %98 = bitcast <4 x i32> %97 to <8 x i16>
  %99 = sub <8 x i16> %98, %84
  %100 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 1
  br label %113

101:                                              ; preds = %89
  %102 = bitcast i16* %90 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 1
  %104 = shl <8 x i16> %103, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %105 = sub <8 x i16> %104, %84
  %106 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 1
  br i1 %86, label %119, label %107

107:                                              ; preds = %101
  %108 = shufflevector <8 x i16> %104, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %109 = bitcast <8 x i16> %108 to <4 x i32>
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %111 = bitcast <4 x i32> %110 to <8 x i16>
  %112 = sub <8 x i16> %111, %84
  br label %113

113:                                              ; preds = %107, %94
  %114 = phi <8 x i16> [ %112, %107 ], [ %99, %94 ]
  %115 = phi <8 x i16> [ %111, %107 ], [ %98, %94 ]
  %116 = phi <8 x i16> [ %104, %107 ], [ %93, %94 ]
  %117 = getelementptr inbounds i16, i16* %91, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 1
  br label %133

119:                                              ; preds = %101
  %120 = getelementptr inbounds i16, i16* %90, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = shl <8 x i16> %122, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %124 = getelementptr inbounds i16, i16* %91, i64 8
  %125 = sub <8 x i16> %123, %84
  %126 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 1
  br i1 %87, label %139, label %127

127:                                              ; preds = %119
  %128 = shufflevector <8 x i16> %123, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %131 = bitcast <4 x i32> %130 to <8 x i16>
  %132 = sub <8 x i16> %131, %84
  br label %133

133:                                              ; preds = %127, %113
  %134 = phi <8 x i16> [ %132, %127 ], [ %114, %113 ]
  %135 = phi <8 x i16> [ %131, %127 ], [ %115, %113 ]
  %136 = phi <8 x i16> [ %123, %127 ], [ %116, %113 ]
  %137 = getelementptr inbounds i16, i16* %91, i64 16
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 1
  br label %157

139:                                              ; preds = %119
  %140 = getelementptr inbounds i16, i16* %90, i64 16
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = shl <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = getelementptr inbounds i16, i16* %91, i64 16
  %145 = sub <8 x i16> %143, %84
  %146 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 1
  br i1 %88, label %152, label %147

147:                                              ; preds = %139
  %148 = shufflevector <8 x i16> %143, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %149 = bitcast <8 x i16> %148 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %151 = bitcast <4 x i32> %150 to <8 x i16>
  br label %157

152:                                              ; preds = %139
  %153 = getelementptr inbounds i16, i16* %90, i64 24
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = shl <8 x i16> %155, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %157

157:                                              ; preds = %133, %147, %152
  %158 = phi <8 x i16> [ %156, %152 ], [ %151, %147 ], [ %135, %133 ]
  %159 = phi <8 x i16> [ %156, %152 ], [ %143, %147 ], [ %136, %133 ]
  %160 = getelementptr inbounds i16, i16* %91, i64 24
  %161 = sub <8 x i16> %158, %84
  %162 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %90, i64 %8
  %164 = getelementptr inbounds i16, i16* %91, i64 32
  %165 = add nsw i32 %92, -1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %430, label %89

167:                                              ; preds = %5, %210
  %168 = phi i16* [ %222, %210 ], [ %7, %5 ]
  %169 = phi <4 x i32> [ %221, %210 ], [ zeroinitializer, %5 ]
  %170 = phi i32 [ %223, %210 ], [ %2, %5 ]
  %171 = bitcast i16* %168 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 1
  br i1 %9, label %173, label %178

173:                                              ; preds = %167
  %174 = getelementptr inbounds i16, i16* %168, i64 8
  %175 = bitcast i16* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 1
  %177 = bitcast <2 x i64> %172 to <8 x i16>
  br label %184

178:                                              ; preds = %167
  %179 = bitcast <2 x i64> %172 to <8 x i16>
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %181 = bitcast <8 x i16> %180 to <4 x i32>
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  br label %184

184:                                              ; preds = %178, %173
  %185 = phi <8 x i16> [ %179, %178 ], [ %177, %173 ]
  %186 = phi <2 x i64> [ %183, %178 ], [ %176, %173 ]
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = add <8 x i16> %185, %187
  br i1 %10, label %194, label %189

189:                                              ; preds = %184
  %190 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %191 = bitcast <8 x i16> %190 to <4 x i32>
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  br label %203

194:                                              ; preds = %184
  %195 = getelementptr inbounds i16, i16* %168, i64 16
  %196 = bitcast i16* %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 1
  br i1 %11, label %198, label %203

198:                                              ; preds = %194
  %199 = getelementptr inbounds i16, i16* %168, i64 24
  %200 = bitcast i16* %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 1
  %202 = bitcast <2 x i64> %197 to <8 x i16>
  br label %210

203:                                              ; preds = %194, %189
  %204 = phi <2 x i64> [ %193, %189 ], [ %197, %194 ]
  %205 = bitcast <2 x i64> %204 to <8 x i16>
  %206 = shufflevector <8 x i16> %205, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %207 = bitcast <8 x i16> %206 to <4 x i32>
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  br label %210

210:                                              ; preds = %203, %198
  %211 = phi <8 x i16> [ %205, %203 ], [ %202, %198 ]
  %212 = phi <2 x i64> [ %209, %203 ], [ %201, %198 ]
  %213 = add <8 x i16> %188, %211
  %214 = bitcast <2 x i64> %212 to <8 x i16>
  %215 = add <8 x i16> %213, %214
  %216 = shufflevector <8 x i16> %215, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = zext <4 x i16> %216 to <4 x i32>
  %218 = shufflevector <8 x i16> %215, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %219 = bitcast <8 x i16> %218 to <4 x i32>
  %220 = add <4 x i32> %219, %217
  %221 = add <4 x i32> %220, %169
  %222 = getelementptr inbounds i16, i16* %168, i64 %8
  %223 = add nsw i32 %170, -1
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %167

225:                                              ; preds = %210
  %226 = sub i32 0, %2
  %227 = sub i32 7, %2
  %228 = and i32 %226, 7
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %238, label %230

230:                                              ; preds = %225, %230
  %231 = phi <4 x i32> [ %234, %230 ], [ %221, %225 ]
  %232 = phi i32 [ %235, %230 ], [ %2, %225 ]
  %233 = phi i32 [ %236, %230 ], [ %228, %225 ]
  %234 = add <4 x i32> %231, %220
  %235 = add nsw i32 %232, 1
  %236 = add i32 %233, -1
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %230, !llvm.loop !80

238:                                              ; preds = %230, %225
  %239 = phi <4 x i32> [ undef, %225 ], [ %234, %230 ]
  %240 = phi <4 x i32> [ %221, %225 ], [ %234, %230 ]
  %241 = phi i32 [ %2, %225 ], [ %235, %230 ]
  %242 = icmp ult i32 %227, 7
  br i1 %242, label %256, label %243

243:                                              ; preds = %238, %243
  %244 = phi <4 x i32> [ %253, %243 ], [ %240, %238 ]
  %245 = phi i32 [ %254, %243 ], [ %241, %238 ]
  %246 = add <4 x i32> %244, %220
  %247 = add <4 x i32> %246, %220
  %248 = add <4 x i32> %247, %220
  %249 = add <4 x i32> %248, %220
  %250 = add <4 x i32> %249, %220
  %251 = add <4 x i32> %250, %220
  %252 = add <4 x i32> %251, %220
  %253 = add <4 x i32> %252, %220
  %254 = add nsw i32 %245, 8
  %255 = icmp eq i32 %245, 0
  br i1 %255, label %256, label %243

256:                                              ; preds = %243, %238
  %257 = phi <4 x i32> [ %239, %238 ], [ %253, %243 ]
  %258 = bitcast <4 x i32> %257 to <16 x i8>
  %259 = shufflevector <16 x i8> %258, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %260 = bitcast <16 x i8> %259 to <4 x i32>
  %261 = add <4 x i32> %257, %260
  %262 = bitcast <4 x i32> %261 to <16 x i8>
  %263 = shufflevector <16 x i8> %262, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %264 = bitcast <16 x i8> %263 to <4 x i32>
  %265 = add <4 x i32> %261, <i32 16, i32 16, i32 16, i32 16>
  %266 = add <4 x i32> %265, %264
  %267 = lshr <4 x i32> %266, <i32 5, i32 5, i32 5, i32 5>
  %268 = bitcast <4 x i32> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %270 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %271 = bitcast <16 x i8> %269 to <8 x i16>
  %272 = icmp sgt i32 %1, 0
  %273 = icmp sgt i32 %1, 8
  %274 = icmp sgt i32 %1, 16
  %275 = icmp sgt i32 %1, 24
  br label %276

276:                                              ; preds = %416, %256
  %277 = phi i16* [ %7, %256 ], [ %426, %416 ]
  %278 = phi i16* [ %270, %256 ], [ %427, %416 ]
  %279 = phi i32 [ %2, %256 ], [ %428, %416 ]
  %280 = phi <8 x i16> [ zeroinitializer, %256 ], [ %422, %416 ]
  br i1 %272, label %316, label %309

281:                                              ; preds = %416
  %282 = sub <8 x i16> %419, %271
  %283 = sub <8 x i16> %420, %271
  %284 = sub <8 x i16> %418, %271
  %285 = sub <8 x i16> %417, %271
  %286 = sub i32 0, %2
  %287 = sub i32 7, %2
  %288 = and i32 %286, 3
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %305, label %290

290:                                              ; preds = %281, %290
  %291 = phi i16* [ %301, %290 ], [ %427, %281 ]
  %292 = phi i32 [ %302, %290 ], [ %2, %281 ]
  %293 = phi i32 [ %303, %290 ], [ %288, %281 ]
  %294 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %294, align 1
  %295 = getelementptr inbounds i16, i16* %291, i64 8
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %296, align 1
  %297 = getelementptr inbounds i16, i16* %291, i64 16
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %298, align 1
  %299 = getelementptr inbounds i16, i16* %291, i64 24
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %300, align 1
  %301 = getelementptr inbounds i16, i16* %291, i64 32
  %302 = add nsw i32 %292, 1
  %303 = add i32 %293, -1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %290, !llvm.loop !81

305:                                              ; preds = %290, %281
  %306 = phi i16* [ %427, %281 ], [ %301, %290 ]
  %307 = phi i32 [ %2, %281 ], [ %302, %290 ]
  %308 = icmp ult i32 %287, 3
  br i1 %308, label %430, label %328

309:                                              ; preds = %276
  %310 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %311 = bitcast <8 x i16> %310 to <4 x i32>
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %313 = bitcast <4 x i32> %312 to <8 x i16>
  %314 = sub <8 x i16> %313, %271
  %315 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %315, align 1
  br label %365

316:                                              ; preds = %276
  %317 = bitcast i16* %277 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 1
  %319 = shl <8 x i16> %318, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %320 = sub <8 x i16> %319, %271
  %321 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %321, align 1
  br i1 %273, label %373, label %322

322:                                              ; preds = %316
  %323 = shufflevector <8 x i16> %319, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %324 = bitcast <8 x i16> %323 to <4 x i32>
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %326 = bitcast <4 x i32> %325 to <8 x i16>
  %327 = sub <8 x i16> %326, %271
  br label %365

328:                                              ; preds = %305, %328
  %329 = phi i16* [ %362, %328 ], [ %306, %305 ]
  %330 = phi i32 [ %363, %328 ], [ %307, %305 ]
  %331 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %331, align 1
  %332 = getelementptr inbounds i16, i16* %329, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %333, align 1
  %334 = getelementptr inbounds i16, i16* %329, i64 16
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %335, align 1
  %336 = getelementptr inbounds i16, i16* %329, i64 24
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %337, align 1
  %338 = getelementptr inbounds i16, i16* %329, i64 32
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %339, align 1
  %340 = getelementptr inbounds i16, i16* %329, i64 40
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %341, align 1
  %342 = getelementptr inbounds i16, i16* %329, i64 48
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %343, align 1
  %344 = getelementptr inbounds i16, i16* %329, i64 56
  %345 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %345, align 1
  %346 = getelementptr inbounds i16, i16* %329, i64 64
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %347, align 1
  %348 = getelementptr inbounds i16, i16* %329, i64 72
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %349, align 1
  %350 = getelementptr inbounds i16, i16* %329, i64 80
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %351, align 1
  %352 = getelementptr inbounds i16, i16* %329, i64 88
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %353, align 1
  %354 = getelementptr inbounds i16, i16* %329, i64 96
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %355, align 1
  %356 = getelementptr inbounds i16, i16* %329, i64 104
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %357, align 1
  %358 = getelementptr inbounds i16, i16* %329, i64 112
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %359, align 1
  %360 = getelementptr inbounds i16, i16* %329, i64 120
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %361, align 1
  %362 = getelementptr inbounds i16, i16* %329, i64 128
  %363 = add nsw i32 %330, 4
  %364 = icmp eq i32 %363, 8
  br i1 %364, label %430, label %328

365:                                              ; preds = %322, %309
  %366 = phi <8 x i16> [ %327, %322 ], [ %314, %309 ]
  %367 = phi <8 x i16> [ %326, %322 ], [ %313, %309 ]
  %368 = phi <4 x i32> [ %325, %322 ], [ %312, %309 ]
  %369 = phi <8 x i16> [ %319, %322 ], [ %280, %309 ]
  %370 = phi <8 x i16> [ %319, %322 ], [ %313, %309 ]
  %371 = getelementptr inbounds i16, i16* %278, i64 8
  %372 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %366, <8 x i16>* %372, align 1
  br label %387

373:                                              ; preds = %316
  %374 = getelementptr inbounds i16, i16* %277, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 1
  %377 = shl <8 x i16> %376, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %378 = getelementptr inbounds i16, i16* %278, i64 8
  %379 = sub <8 x i16> %377, %271
  %380 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %379, <8 x i16>* %380, align 1
  br i1 %274, label %397, label %381

381:                                              ; preds = %373
  %382 = shufflevector <8 x i16> %377, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %383 = bitcast <8 x i16> %382 to <4 x i32>
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %385 = bitcast <4 x i32> %384 to <8 x i16>
  %386 = sub <8 x i16> %385, %271
  br label %387

387:                                              ; preds = %381, %365
  %388 = phi <8 x i16> [ %386, %381 ], [ %366, %365 ]
  %389 = phi <8 x i16> [ %385, %381 ], [ %367, %365 ]
  %390 = phi <4 x i32> [ %384, %381 ], [ %368, %365 ]
  %391 = phi <8 x i16> [ %377, %381 ], [ %369, %365 ]
  %392 = phi <8 x i16> [ %377, %381 ], [ %367, %365 ]
  %393 = phi <8 x i16> [ %319, %381 ], [ %370, %365 ]
  %394 = getelementptr inbounds i16, i16* %278, i64 16
  %395 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %395, align 1
  %396 = bitcast <4 x i32> %390 to <8 x i16>
  br label %416

397:                                              ; preds = %373
  %398 = getelementptr inbounds i16, i16* %277, i64 16
  %399 = bitcast i16* %398 to <8 x i16>*
  %400 = load <8 x i16>, <8 x i16>* %399, align 1
  %401 = shl <8 x i16> %400, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %402 = getelementptr inbounds i16, i16* %278, i64 16
  %403 = sub <8 x i16> %401, %271
  %404 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %403, <8 x i16>* %404, align 1
  br i1 %275, label %411, label %405

405:                                              ; preds = %397
  %406 = shufflevector <8 x i16> %401, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %407 = bitcast <8 x i16> %406 to <4 x i32>
  %408 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %409 = bitcast <4 x i32> %408 to <8 x i16>
  %410 = bitcast <4 x i32> %408 to <8 x i16>
  br label %416

411:                                              ; preds = %397
  %412 = getelementptr inbounds i16, i16* %277, i64 24
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 1
  %415 = shl <8 x i16> %414, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %416

416:                                              ; preds = %387, %405, %411
  %417 = phi <8 x i16> [ %415, %411 ], [ %410, %405 ], [ %396, %387 ]
  %418 = phi <8 x i16> [ %401, %411 ], [ %401, %405 ], [ %396, %387 ]
  %419 = phi <8 x i16> [ %319, %411 ], [ %319, %405 ], [ %393, %387 ]
  %420 = phi <8 x i16> [ %377, %411 ], [ %377, %405 ], [ %392, %387 ]
  %421 = phi <8 x i16> [ %415, %411 ], [ %409, %405 ], [ %389, %387 ]
  %422 = phi <8 x i16> [ %415, %411 ], [ %401, %405 ], [ %391, %387 ]
  %423 = getelementptr inbounds i16, i16* %278, i64 24
  %424 = sub <8 x i16> %421, %271
  %425 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %425, align 1
  %426 = getelementptr inbounds i16, i16* %277, i64 %8
  %427 = getelementptr inbounds i16, i16* %278, i64 32
  %428 = add nsw i32 %279, -1
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %281, label %276

430:                                              ; preds = %305, %328, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi5ELi4EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = icmp sgt i32 %2, 15
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  %10 = icmp sgt i32 %1, 23
  %11 = icmp eq i32 %1, 32
  br i1 %6, label %12, label %167

12:                                               ; preds = %5, %55
  %13 = phi i16* [ %67, %55 ], [ %7, %5 ]
  %14 = phi <4 x i32> [ %66, %55 ], [ zeroinitializer, %5 ]
  %15 = phi i32 [ %68, %55 ], [ %2, %5 ]
  %16 = bitcast i16* %13 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  br i1 %9, label %18, label %23

18:                                               ; preds = %12
  %19 = getelementptr inbounds i16, i16* %13, i64 8
  %20 = bitcast i16* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %17 to <8 x i16>
  br label %29

23:                                               ; preds = %12
  %24 = bitcast <2 x i64> %17 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  br label %29

29:                                               ; preds = %23, %18
  %30 = phi <8 x i16> [ %24, %23 ], [ %22, %18 ]
  %31 = phi <2 x i64> [ %28, %23 ], [ %21, %18 ]
  %32 = bitcast <2 x i64> %31 to <8 x i16>
  %33 = add <8 x i16> %30, %32
  br i1 %10, label %39, label %34

34:                                               ; preds = %29
  %35 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  br label %48

39:                                               ; preds = %29
  %40 = getelementptr inbounds i16, i16* %13, i64 16
  %41 = bitcast i16* %40 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 1
  br i1 %11, label %43, label %48

43:                                               ; preds = %39
  %44 = getelementptr inbounds i16, i16* %13, i64 24
  %45 = bitcast i16* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 1
  %47 = bitcast <2 x i64> %42 to <8 x i16>
  br label %55

48:                                               ; preds = %39, %34
  %49 = phi <2 x i64> [ %38, %34 ], [ %42, %39 ]
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  br label %55

55:                                               ; preds = %48, %43
  %56 = phi <8 x i16> [ %50, %48 ], [ %47, %43 ]
  %57 = phi <2 x i64> [ %54, %48 ], [ %46, %43 ]
  %58 = add <8 x i16> %33, %56
  %59 = bitcast <2 x i64> %57 to <8 x i16>
  %60 = add <8 x i16> %58, %59
  %61 = shufflevector <8 x i16> %60, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = shufflevector <8 x i16> %60, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %64 = add <4 x i32> %14, %62
  %65 = bitcast <8 x i16> %63 to <4 x i32>
  %66 = add <4 x i32> %64, %65
  %67 = getelementptr inbounds i16, i16* %13, i64 %8
  %68 = add nsw i32 %15, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %12

70:                                               ; preds = %55
  %71 = bitcast <4 x i32> %66 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %73 = bitcast <16 x i8> %72 to <4 x i32>
  %74 = add <4 x i32> %66, %73
  %75 = bitcast <4 x i32> %74 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %77 = bitcast <16 x i8> %76 to <4 x i32>
  %78 = add <4 x i32> %74, <i32 32, i32 32, i32 32, i32 32>
  %79 = add <4 x i32> %78, %77
  %80 = lshr <4 x i32> %79, <i32 6, i32 6, i32 6, i32 6>
  %81 = bitcast <4 x i32> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %84 = bitcast <16 x i8> %82 to <8 x i16>
  %85 = icmp sgt i32 %1, 0
  %86 = icmp sgt i32 %1, 8
  %87 = icmp sgt i32 %1, 16
  %88 = icmp sgt i32 %1, 24
  br label %89

89:                                               ; preds = %157, %70
  %90 = phi i16* [ %7, %70 ], [ %163, %157 ]
  %91 = phi i16* [ %83, %70 ], [ %164, %157 ]
  %92 = phi i32 [ %2, %70 ], [ %165, %157 ]
  %93 = phi <8 x i16> [ zeroinitializer, %70 ], [ %159, %157 ]
  br i1 %85, label %101, label %94

94:                                               ; preds = %89
  %95 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %96 = bitcast <8 x i16> %95 to <4 x i32>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %98 = bitcast <4 x i32> %97 to <8 x i16>
  %99 = sub <8 x i16> %98, %84
  %100 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 1
  br label %113

101:                                              ; preds = %89
  %102 = bitcast i16* %90 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 1
  %104 = shl <8 x i16> %103, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %105 = sub <8 x i16> %104, %84
  %106 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 1
  br i1 %86, label %119, label %107

107:                                              ; preds = %101
  %108 = shufflevector <8 x i16> %104, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %109 = bitcast <8 x i16> %108 to <4 x i32>
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %111 = bitcast <4 x i32> %110 to <8 x i16>
  %112 = sub <8 x i16> %111, %84
  br label %113

113:                                              ; preds = %107, %94
  %114 = phi <8 x i16> [ %112, %107 ], [ %99, %94 ]
  %115 = phi <8 x i16> [ %111, %107 ], [ %98, %94 ]
  %116 = phi <8 x i16> [ %104, %107 ], [ %93, %94 ]
  %117 = getelementptr inbounds i16, i16* %91, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 1
  br label %133

119:                                              ; preds = %101
  %120 = getelementptr inbounds i16, i16* %90, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = shl <8 x i16> %122, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %124 = getelementptr inbounds i16, i16* %91, i64 8
  %125 = sub <8 x i16> %123, %84
  %126 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 1
  br i1 %87, label %139, label %127

127:                                              ; preds = %119
  %128 = shufflevector <8 x i16> %123, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %131 = bitcast <4 x i32> %130 to <8 x i16>
  %132 = sub <8 x i16> %131, %84
  br label %133

133:                                              ; preds = %127, %113
  %134 = phi <8 x i16> [ %132, %127 ], [ %114, %113 ]
  %135 = phi <8 x i16> [ %131, %127 ], [ %115, %113 ]
  %136 = phi <8 x i16> [ %123, %127 ], [ %116, %113 ]
  %137 = getelementptr inbounds i16, i16* %91, i64 16
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 1
  br label %157

139:                                              ; preds = %119
  %140 = getelementptr inbounds i16, i16* %90, i64 16
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = shl <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = getelementptr inbounds i16, i16* %91, i64 16
  %145 = sub <8 x i16> %143, %84
  %146 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 1
  br i1 %88, label %152, label %147

147:                                              ; preds = %139
  %148 = shufflevector <8 x i16> %143, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %149 = bitcast <8 x i16> %148 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %151 = bitcast <4 x i32> %150 to <8 x i16>
  br label %157

152:                                              ; preds = %139
  %153 = getelementptr inbounds i16, i16* %90, i64 24
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = shl <8 x i16> %155, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %157

157:                                              ; preds = %133, %147, %152
  %158 = phi <8 x i16> [ %156, %152 ], [ %151, %147 ], [ %135, %133 ]
  %159 = phi <8 x i16> [ %156, %152 ], [ %143, %147 ], [ %136, %133 ]
  %160 = getelementptr inbounds i16, i16* %91, i64 24
  %161 = sub <8 x i16> %158, %84
  %162 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %90, i64 %8
  %164 = getelementptr inbounds i16, i16* %91, i64 32
  %165 = add nsw i32 %92, -1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %430, label %89

167:                                              ; preds = %5, %210
  %168 = phi i16* [ %222, %210 ], [ %7, %5 ]
  %169 = phi <4 x i32> [ %221, %210 ], [ zeroinitializer, %5 ]
  %170 = phi i32 [ %223, %210 ], [ %2, %5 ]
  %171 = bitcast i16* %168 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 1
  br i1 %9, label %173, label %178

173:                                              ; preds = %167
  %174 = getelementptr inbounds i16, i16* %168, i64 8
  %175 = bitcast i16* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 1
  %177 = bitcast <2 x i64> %172 to <8 x i16>
  br label %184

178:                                              ; preds = %167
  %179 = bitcast <2 x i64> %172 to <8 x i16>
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %181 = bitcast <8 x i16> %180 to <4 x i32>
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  br label %184

184:                                              ; preds = %178, %173
  %185 = phi <8 x i16> [ %179, %178 ], [ %177, %173 ]
  %186 = phi <2 x i64> [ %183, %178 ], [ %176, %173 ]
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = add <8 x i16> %185, %187
  br i1 %10, label %194, label %189

189:                                              ; preds = %184
  %190 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %191 = bitcast <8 x i16> %190 to <4 x i32>
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  br label %203

194:                                              ; preds = %184
  %195 = getelementptr inbounds i16, i16* %168, i64 16
  %196 = bitcast i16* %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 1
  br i1 %11, label %198, label %203

198:                                              ; preds = %194
  %199 = getelementptr inbounds i16, i16* %168, i64 24
  %200 = bitcast i16* %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 1
  %202 = bitcast <2 x i64> %197 to <8 x i16>
  br label %210

203:                                              ; preds = %194, %189
  %204 = phi <2 x i64> [ %193, %189 ], [ %197, %194 ]
  %205 = bitcast <2 x i64> %204 to <8 x i16>
  %206 = shufflevector <8 x i16> %205, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %207 = bitcast <8 x i16> %206 to <4 x i32>
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  br label %210

210:                                              ; preds = %203, %198
  %211 = phi <8 x i16> [ %205, %203 ], [ %202, %198 ]
  %212 = phi <2 x i64> [ %209, %203 ], [ %201, %198 ]
  %213 = add <8 x i16> %188, %211
  %214 = bitcast <2 x i64> %212 to <8 x i16>
  %215 = add <8 x i16> %213, %214
  %216 = shufflevector <8 x i16> %215, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = zext <4 x i16> %216 to <4 x i32>
  %218 = shufflevector <8 x i16> %215, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %219 = bitcast <8 x i16> %218 to <4 x i32>
  %220 = add <4 x i32> %219, %217
  %221 = add <4 x i32> %220, %169
  %222 = getelementptr inbounds i16, i16* %168, i64 %8
  %223 = add nsw i32 %170, -1
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %167

225:                                              ; preds = %210
  %226 = sub i32 0, %2
  %227 = sub i32 15, %2
  %228 = and i32 %226, 7
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %238, label %230

230:                                              ; preds = %225, %230
  %231 = phi <4 x i32> [ %234, %230 ], [ %221, %225 ]
  %232 = phi i32 [ %235, %230 ], [ %2, %225 ]
  %233 = phi i32 [ %236, %230 ], [ %228, %225 ]
  %234 = add <4 x i32> %231, %220
  %235 = add nsw i32 %232, 1
  %236 = add i32 %233, -1
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %230, !llvm.loop !82

238:                                              ; preds = %230, %225
  %239 = phi <4 x i32> [ undef, %225 ], [ %234, %230 ]
  %240 = phi <4 x i32> [ %221, %225 ], [ %234, %230 ]
  %241 = phi i32 [ %2, %225 ], [ %235, %230 ]
  %242 = icmp ult i32 %227, 7
  br i1 %242, label %256, label %243

243:                                              ; preds = %238, %243
  %244 = phi <4 x i32> [ %253, %243 ], [ %240, %238 ]
  %245 = phi i32 [ %254, %243 ], [ %241, %238 ]
  %246 = add <4 x i32> %244, %220
  %247 = add <4 x i32> %246, %220
  %248 = add <4 x i32> %247, %220
  %249 = add <4 x i32> %248, %220
  %250 = add <4 x i32> %249, %220
  %251 = add <4 x i32> %250, %220
  %252 = add <4 x i32> %251, %220
  %253 = add <4 x i32> %252, %220
  %254 = add nsw i32 %245, 8
  %255 = icmp eq i32 %254, 16
  br i1 %255, label %256, label %243

256:                                              ; preds = %243, %238
  %257 = phi <4 x i32> [ %239, %238 ], [ %253, %243 ]
  %258 = bitcast <4 x i32> %257 to <16 x i8>
  %259 = shufflevector <16 x i8> %258, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %260 = bitcast <16 x i8> %259 to <4 x i32>
  %261 = add <4 x i32> %257, %260
  %262 = bitcast <4 x i32> %261 to <16 x i8>
  %263 = shufflevector <16 x i8> %262, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %264 = bitcast <16 x i8> %263 to <4 x i32>
  %265 = add <4 x i32> %261, <i32 32, i32 32, i32 32, i32 32>
  %266 = add <4 x i32> %265, %264
  %267 = lshr <4 x i32> %266, <i32 6, i32 6, i32 6, i32 6>
  %268 = bitcast <4 x i32> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %270 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %271 = bitcast <16 x i8> %269 to <8 x i16>
  %272 = icmp sgt i32 %1, 0
  %273 = icmp sgt i32 %1, 8
  %274 = icmp sgt i32 %1, 16
  %275 = icmp sgt i32 %1, 24
  br label %276

276:                                              ; preds = %416, %256
  %277 = phi i16* [ %7, %256 ], [ %426, %416 ]
  %278 = phi i16* [ %270, %256 ], [ %427, %416 ]
  %279 = phi i32 [ %2, %256 ], [ %428, %416 ]
  %280 = phi <8 x i16> [ zeroinitializer, %256 ], [ %422, %416 ]
  br i1 %272, label %316, label %309

281:                                              ; preds = %416
  %282 = sub <8 x i16> %419, %271
  %283 = sub <8 x i16> %420, %271
  %284 = sub <8 x i16> %418, %271
  %285 = sub <8 x i16> %417, %271
  %286 = sub i32 0, %2
  %287 = sub i32 15, %2
  %288 = and i32 %286, 3
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %305, label %290

290:                                              ; preds = %281, %290
  %291 = phi i16* [ %301, %290 ], [ %427, %281 ]
  %292 = phi i32 [ %302, %290 ], [ %2, %281 ]
  %293 = phi i32 [ %303, %290 ], [ %288, %281 ]
  %294 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %294, align 1
  %295 = getelementptr inbounds i16, i16* %291, i64 8
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %296, align 1
  %297 = getelementptr inbounds i16, i16* %291, i64 16
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %298, align 1
  %299 = getelementptr inbounds i16, i16* %291, i64 24
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %300, align 1
  %301 = getelementptr inbounds i16, i16* %291, i64 32
  %302 = add nsw i32 %292, 1
  %303 = add i32 %293, -1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %290, !llvm.loop !83

305:                                              ; preds = %290, %281
  %306 = phi i16* [ %427, %281 ], [ %301, %290 ]
  %307 = phi i32 [ %2, %281 ], [ %302, %290 ]
  %308 = icmp ult i32 %287, 3
  br i1 %308, label %430, label %328

309:                                              ; preds = %276
  %310 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %311 = bitcast <8 x i16> %310 to <4 x i32>
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %313 = bitcast <4 x i32> %312 to <8 x i16>
  %314 = sub <8 x i16> %313, %271
  %315 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %315, align 1
  br label %365

316:                                              ; preds = %276
  %317 = bitcast i16* %277 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 1
  %319 = shl <8 x i16> %318, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %320 = sub <8 x i16> %319, %271
  %321 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %321, align 1
  br i1 %273, label %373, label %322

322:                                              ; preds = %316
  %323 = shufflevector <8 x i16> %319, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %324 = bitcast <8 x i16> %323 to <4 x i32>
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %326 = bitcast <4 x i32> %325 to <8 x i16>
  %327 = sub <8 x i16> %326, %271
  br label %365

328:                                              ; preds = %305, %328
  %329 = phi i16* [ %362, %328 ], [ %306, %305 ]
  %330 = phi i32 [ %363, %328 ], [ %307, %305 ]
  %331 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %331, align 1
  %332 = getelementptr inbounds i16, i16* %329, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %333, align 1
  %334 = getelementptr inbounds i16, i16* %329, i64 16
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %335, align 1
  %336 = getelementptr inbounds i16, i16* %329, i64 24
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %337, align 1
  %338 = getelementptr inbounds i16, i16* %329, i64 32
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %339, align 1
  %340 = getelementptr inbounds i16, i16* %329, i64 40
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %341, align 1
  %342 = getelementptr inbounds i16, i16* %329, i64 48
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %343, align 1
  %344 = getelementptr inbounds i16, i16* %329, i64 56
  %345 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %345, align 1
  %346 = getelementptr inbounds i16, i16* %329, i64 64
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %347, align 1
  %348 = getelementptr inbounds i16, i16* %329, i64 72
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %349, align 1
  %350 = getelementptr inbounds i16, i16* %329, i64 80
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %351, align 1
  %352 = getelementptr inbounds i16, i16* %329, i64 88
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %353, align 1
  %354 = getelementptr inbounds i16, i16* %329, i64 96
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %355, align 1
  %356 = getelementptr inbounds i16, i16* %329, i64 104
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %357, align 1
  %358 = getelementptr inbounds i16, i16* %329, i64 112
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %359, align 1
  %360 = getelementptr inbounds i16, i16* %329, i64 120
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %361, align 1
  %362 = getelementptr inbounds i16, i16* %329, i64 128
  %363 = add nsw i32 %330, 4
  %364 = icmp eq i32 %363, 16
  br i1 %364, label %430, label %328

365:                                              ; preds = %322, %309
  %366 = phi <8 x i16> [ %327, %322 ], [ %314, %309 ]
  %367 = phi <8 x i16> [ %326, %322 ], [ %313, %309 ]
  %368 = phi <4 x i32> [ %325, %322 ], [ %312, %309 ]
  %369 = phi <8 x i16> [ %319, %322 ], [ %280, %309 ]
  %370 = phi <8 x i16> [ %319, %322 ], [ %313, %309 ]
  %371 = getelementptr inbounds i16, i16* %278, i64 8
  %372 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %366, <8 x i16>* %372, align 1
  br label %387

373:                                              ; preds = %316
  %374 = getelementptr inbounds i16, i16* %277, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 1
  %377 = shl <8 x i16> %376, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %378 = getelementptr inbounds i16, i16* %278, i64 8
  %379 = sub <8 x i16> %377, %271
  %380 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %379, <8 x i16>* %380, align 1
  br i1 %274, label %397, label %381

381:                                              ; preds = %373
  %382 = shufflevector <8 x i16> %377, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %383 = bitcast <8 x i16> %382 to <4 x i32>
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %385 = bitcast <4 x i32> %384 to <8 x i16>
  %386 = sub <8 x i16> %385, %271
  br label %387

387:                                              ; preds = %381, %365
  %388 = phi <8 x i16> [ %386, %381 ], [ %366, %365 ]
  %389 = phi <8 x i16> [ %385, %381 ], [ %367, %365 ]
  %390 = phi <4 x i32> [ %384, %381 ], [ %368, %365 ]
  %391 = phi <8 x i16> [ %377, %381 ], [ %369, %365 ]
  %392 = phi <8 x i16> [ %377, %381 ], [ %367, %365 ]
  %393 = phi <8 x i16> [ %319, %381 ], [ %370, %365 ]
  %394 = getelementptr inbounds i16, i16* %278, i64 16
  %395 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %395, align 1
  %396 = bitcast <4 x i32> %390 to <8 x i16>
  br label %416

397:                                              ; preds = %373
  %398 = getelementptr inbounds i16, i16* %277, i64 16
  %399 = bitcast i16* %398 to <8 x i16>*
  %400 = load <8 x i16>, <8 x i16>* %399, align 1
  %401 = shl <8 x i16> %400, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %402 = getelementptr inbounds i16, i16* %278, i64 16
  %403 = sub <8 x i16> %401, %271
  %404 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %403, <8 x i16>* %404, align 1
  br i1 %275, label %411, label %405

405:                                              ; preds = %397
  %406 = shufflevector <8 x i16> %401, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %407 = bitcast <8 x i16> %406 to <4 x i32>
  %408 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %409 = bitcast <4 x i32> %408 to <8 x i16>
  %410 = bitcast <4 x i32> %408 to <8 x i16>
  br label %416

411:                                              ; preds = %397
  %412 = getelementptr inbounds i16, i16* %277, i64 24
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 1
  %415 = shl <8 x i16> %414, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %416

416:                                              ; preds = %387, %405, %411
  %417 = phi <8 x i16> [ %415, %411 ], [ %410, %405 ], [ %396, %387 ]
  %418 = phi <8 x i16> [ %401, %411 ], [ %401, %405 ], [ %396, %387 ]
  %419 = phi <8 x i16> [ %319, %411 ], [ %319, %405 ], [ %393, %387 ]
  %420 = phi <8 x i16> [ %377, %411 ], [ %377, %405 ], [ %392, %387 ]
  %421 = phi <8 x i16> [ %415, %411 ], [ %409, %405 ], [ %389, %387 ]
  %422 = phi <8 x i16> [ %415, %411 ], [ %401, %405 ], [ %391, %387 ]
  %423 = getelementptr inbounds i16, i16* %278, i64 24
  %424 = sub <8 x i16> %421, %271
  %425 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %425, align 1
  %426 = getelementptr inbounds i16, i16* %277, i64 %8
  %427 = getelementptr inbounds i16, i16* %278, i64 32
  %428 = add nsw i32 %279, -1
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %281, label %276

430:                                              ; preds = %305, %328, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_127CflSubsampler444_WxH_SSE4_1ILi5ELi5EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #2 {
  %6 = icmp sgt i32 %2, 31
  %7 = bitcast i8* %3 to i16*
  %8 = lshr i64 %4, 1
  %9 = icmp sgt i32 %1, 15
  %10 = icmp sgt i32 %1, 23
  %11 = icmp eq i32 %1, 32
  br i1 %6, label %12, label %167

12:                                               ; preds = %5, %55
  %13 = phi i16* [ %67, %55 ], [ %7, %5 ]
  %14 = phi <4 x i32> [ %66, %55 ], [ zeroinitializer, %5 ]
  %15 = phi i32 [ %68, %55 ], [ %2, %5 ]
  %16 = bitcast i16* %13 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  br i1 %9, label %18, label %23

18:                                               ; preds = %12
  %19 = getelementptr inbounds i16, i16* %13, i64 8
  %20 = bitcast i16* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 1
  %22 = bitcast <2 x i64> %17 to <8 x i16>
  br label %29

23:                                               ; preds = %12
  %24 = bitcast <2 x i64> %17 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  br label %29

29:                                               ; preds = %23, %18
  %30 = phi <8 x i16> [ %24, %23 ], [ %22, %18 ]
  %31 = phi <2 x i64> [ %28, %23 ], [ %21, %18 ]
  %32 = bitcast <2 x i64> %31 to <8 x i16>
  %33 = add <8 x i16> %30, %32
  br i1 %10, label %39, label %34

34:                                               ; preds = %29
  %35 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  br label %48

39:                                               ; preds = %29
  %40 = getelementptr inbounds i16, i16* %13, i64 16
  %41 = bitcast i16* %40 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 1
  br i1 %11, label %43, label %48

43:                                               ; preds = %39
  %44 = getelementptr inbounds i16, i16* %13, i64 24
  %45 = bitcast i16* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 1
  %47 = bitcast <2 x i64> %42 to <8 x i16>
  br label %55

48:                                               ; preds = %39, %34
  %49 = phi <2 x i64> [ %38, %34 ], [ %42, %39 ]
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  br label %55

55:                                               ; preds = %48, %43
  %56 = phi <8 x i16> [ %50, %48 ], [ %47, %43 ]
  %57 = phi <2 x i64> [ %54, %48 ], [ %46, %43 ]
  %58 = add <8 x i16> %33, %56
  %59 = bitcast <2 x i64> %57 to <8 x i16>
  %60 = add <8 x i16> %58, %59
  %61 = shufflevector <8 x i16> %60, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = shufflevector <8 x i16> %60, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %64 = add <4 x i32> %14, %62
  %65 = bitcast <8 x i16> %63 to <4 x i32>
  %66 = add <4 x i32> %64, %65
  %67 = getelementptr inbounds i16, i16* %13, i64 %8
  %68 = add nsw i32 %15, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %12

70:                                               ; preds = %55
  %71 = bitcast <4 x i32> %66 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %73 = bitcast <16 x i8> %72 to <4 x i32>
  %74 = add <4 x i32> %66, %73
  %75 = bitcast <4 x i32> %74 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %77 = bitcast <16 x i8> %76 to <4 x i32>
  %78 = add <4 x i32> %74, <i32 64, i32 64, i32 64, i32 64>
  %79 = add <4 x i32> %78, %77
  %80 = lshr <4 x i32> %79, <i32 7, i32 7, i32 7, i32 7>
  %81 = bitcast <4 x i32> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %84 = bitcast <16 x i8> %82 to <8 x i16>
  %85 = icmp sgt i32 %1, 0
  %86 = icmp sgt i32 %1, 8
  %87 = icmp sgt i32 %1, 16
  %88 = icmp sgt i32 %1, 24
  br label %89

89:                                               ; preds = %157, %70
  %90 = phi i16* [ %7, %70 ], [ %163, %157 ]
  %91 = phi i16* [ %83, %70 ], [ %164, %157 ]
  %92 = phi i32 [ %2, %70 ], [ %165, %157 ]
  %93 = phi <8 x i16> [ zeroinitializer, %70 ], [ %159, %157 ]
  br i1 %85, label %101, label %94

94:                                               ; preds = %89
  %95 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %96 = bitcast <8 x i16> %95 to <4 x i32>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %98 = bitcast <4 x i32> %97 to <8 x i16>
  %99 = sub <8 x i16> %98, %84
  %100 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 1
  br label %113

101:                                              ; preds = %89
  %102 = bitcast i16* %90 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 1
  %104 = shl <8 x i16> %103, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %105 = sub <8 x i16> %104, %84
  %106 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 1
  br i1 %86, label %119, label %107

107:                                              ; preds = %101
  %108 = shufflevector <8 x i16> %104, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %109 = bitcast <8 x i16> %108 to <4 x i32>
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %111 = bitcast <4 x i32> %110 to <8 x i16>
  %112 = sub <8 x i16> %111, %84
  br label %113

113:                                              ; preds = %107, %94
  %114 = phi <8 x i16> [ %112, %107 ], [ %99, %94 ]
  %115 = phi <8 x i16> [ %111, %107 ], [ %98, %94 ]
  %116 = phi <8 x i16> [ %104, %107 ], [ %93, %94 ]
  %117 = getelementptr inbounds i16, i16* %91, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 1
  br label %133

119:                                              ; preds = %101
  %120 = getelementptr inbounds i16, i16* %90, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = shl <8 x i16> %122, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %124 = getelementptr inbounds i16, i16* %91, i64 8
  %125 = sub <8 x i16> %123, %84
  %126 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 1
  br i1 %87, label %139, label %127

127:                                              ; preds = %119
  %128 = shufflevector <8 x i16> %123, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %131 = bitcast <4 x i32> %130 to <8 x i16>
  %132 = sub <8 x i16> %131, %84
  br label %133

133:                                              ; preds = %127, %113
  %134 = phi <8 x i16> [ %132, %127 ], [ %114, %113 ]
  %135 = phi <8 x i16> [ %131, %127 ], [ %115, %113 ]
  %136 = phi <8 x i16> [ %123, %127 ], [ %116, %113 ]
  %137 = getelementptr inbounds i16, i16* %91, i64 16
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 1
  br label %157

139:                                              ; preds = %119
  %140 = getelementptr inbounds i16, i16* %90, i64 16
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = shl <8 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = getelementptr inbounds i16, i16* %91, i64 16
  %145 = sub <8 x i16> %143, %84
  %146 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 1
  br i1 %88, label %152, label %147

147:                                              ; preds = %139
  %148 = shufflevector <8 x i16> %143, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %149 = bitcast <8 x i16> %148 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %151 = bitcast <4 x i32> %150 to <8 x i16>
  br label %157

152:                                              ; preds = %139
  %153 = getelementptr inbounds i16, i16* %90, i64 24
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 1
  %156 = shl <8 x i16> %155, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %157

157:                                              ; preds = %133, %147, %152
  %158 = phi <8 x i16> [ %156, %152 ], [ %151, %147 ], [ %135, %133 ]
  %159 = phi <8 x i16> [ %156, %152 ], [ %143, %147 ], [ %136, %133 ]
  %160 = getelementptr inbounds i16, i16* %91, i64 24
  %161 = sub <8 x i16> %158, %84
  %162 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %90, i64 %8
  %164 = getelementptr inbounds i16, i16* %91, i64 32
  %165 = add nsw i32 %92, -1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %430, label %89

167:                                              ; preds = %5, %210
  %168 = phi i16* [ %222, %210 ], [ %7, %5 ]
  %169 = phi <4 x i32> [ %221, %210 ], [ zeroinitializer, %5 ]
  %170 = phi i32 [ %223, %210 ], [ %2, %5 ]
  %171 = bitcast i16* %168 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 1
  br i1 %9, label %173, label %178

173:                                              ; preds = %167
  %174 = getelementptr inbounds i16, i16* %168, i64 8
  %175 = bitcast i16* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 1
  %177 = bitcast <2 x i64> %172 to <8 x i16>
  br label %184

178:                                              ; preds = %167
  %179 = bitcast <2 x i64> %172 to <8 x i16>
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %181 = bitcast <8 x i16> %180 to <4 x i32>
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  br label %184

184:                                              ; preds = %178, %173
  %185 = phi <8 x i16> [ %179, %178 ], [ %177, %173 ]
  %186 = phi <2 x i64> [ %183, %178 ], [ %176, %173 ]
  %187 = bitcast <2 x i64> %186 to <8 x i16>
  %188 = add <8 x i16> %185, %187
  br i1 %10, label %194, label %189

189:                                              ; preds = %184
  %190 = shufflevector <8 x i16> %187, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %191 = bitcast <8 x i16> %190 to <4 x i32>
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  br label %203

194:                                              ; preds = %184
  %195 = getelementptr inbounds i16, i16* %168, i64 16
  %196 = bitcast i16* %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 1
  br i1 %11, label %198, label %203

198:                                              ; preds = %194
  %199 = getelementptr inbounds i16, i16* %168, i64 24
  %200 = bitcast i16* %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 1
  %202 = bitcast <2 x i64> %197 to <8 x i16>
  br label %210

203:                                              ; preds = %194, %189
  %204 = phi <2 x i64> [ %193, %189 ], [ %197, %194 ]
  %205 = bitcast <2 x i64> %204 to <8 x i16>
  %206 = shufflevector <8 x i16> %205, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %207 = bitcast <8 x i16> %206 to <4 x i32>
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  br label %210

210:                                              ; preds = %203, %198
  %211 = phi <8 x i16> [ %205, %203 ], [ %202, %198 ]
  %212 = phi <2 x i64> [ %209, %203 ], [ %201, %198 ]
  %213 = add <8 x i16> %188, %211
  %214 = bitcast <2 x i64> %212 to <8 x i16>
  %215 = add <8 x i16> %213, %214
  %216 = shufflevector <8 x i16> %215, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = zext <4 x i16> %216 to <4 x i32>
  %218 = shufflevector <8 x i16> %215, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %219 = bitcast <8 x i16> %218 to <4 x i32>
  %220 = add <4 x i32> %219, %217
  %221 = add <4 x i32> %220, %169
  %222 = getelementptr inbounds i16, i16* %168, i64 %8
  %223 = add nsw i32 %170, -1
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %167

225:                                              ; preds = %210
  %226 = sub i32 0, %2
  %227 = sub i32 31, %2
  %228 = and i32 %226, 7
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %238, label %230

230:                                              ; preds = %225, %230
  %231 = phi <4 x i32> [ %234, %230 ], [ %221, %225 ]
  %232 = phi i32 [ %235, %230 ], [ %2, %225 ]
  %233 = phi i32 [ %236, %230 ], [ %228, %225 ]
  %234 = add <4 x i32> %231, %220
  %235 = add nsw i32 %232, 1
  %236 = add i32 %233, -1
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %230, !llvm.loop !84

238:                                              ; preds = %230, %225
  %239 = phi <4 x i32> [ undef, %225 ], [ %234, %230 ]
  %240 = phi <4 x i32> [ %221, %225 ], [ %234, %230 ]
  %241 = phi i32 [ %2, %225 ], [ %235, %230 ]
  %242 = icmp ult i32 %227, 7
  br i1 %242, label %256, label %243

243:                                              ; preds = %238, %243
  %244 = phi <4 x i32> [ %253, %243 ], [ %240, %238 ]
  %245 = phi i32 [ %254, %243 ], [ %241, %238 ]
  %246 = add <4 x i32> %244, %220
  %247 = add <4 x i32> %246, %220
  %248 = add <4 x i32> %247, %220
  %249 = add <4 x i32> %248, %220
  %250 = add <4 x i32> %249, %220
  %251 = add <4 x i32> %250, %220
  %252 = add <4 x i32> %251, %220
  %253 = add <4 x i32> %252, %220
  %254 = add nsw i32 %245, 8
  %255 = icmp eq i32 %254, 32
  br i1 %255, label %256, label %243

256:                                              ; preds = %243, %238
  %257 = phi <4 x i32> [ %239, %238 ], [ %253, %243 ]
  %258 = bitcast <4 x i32> %257 to <16 x i8>
  %259 = shufflevector <16 x i8> %258, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %260 = bitcast <16 x i8> %259 to <4 x i32>
  %261 = add <4 x i32> %257, %260
  %262 = bitcast <4 x i32> %261 to <16 x i8>
  %263 = shufflevector <16 x i8> %262, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %264 = bitcast <16 x i8> %263 to <4 x i32>
  %265 = add <4 x i32> %261, <i32 64, i32 64, i32 64, i32 64>
  %266 = add <4 x i32> %265, %264
  %267 = lshr <4 x i32> %266, <i32 7, i32 7, i32 7, i32 7>
  %268 = bitcast <4 x i32> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %270 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %271 = bitcast <16 x i8> %269 to <8 x i16>
  %272 = icmp sgt i32 %1, 0
  %273 = icmp sgt i32 %1, 8
  %274 = icmp sgt i32 %1, 16
  %275 = icmp sgt i32 %1, 24
  br label %276

276:                                              ; preds = %416, %256
  %277 = phi i16* [ %7, %256 ], [ %426, %416 ]
  %278 = phi i16* [ %270, %256 ], [ %427, %416 ]
  %279 = phi i32 [ %2, %256 ], [ %428, %416 ]
  %280 = phi <8 x i16> [ zeroinitializer, %256 ], [ %422, %416 ]
  br i1 %272, label %316, label %309

281:                                              ; preds = %416
  %282 = sub <8 x i16> %419, %271
  %283 = sub <8 x i16> %420, %271
  %284 = sub <8 x i16> %418, %271
  %285 = sub <8 x i16> %417, %271
  %286 = sub i32 0, %2
  %287 = sub i32 31, %2
  %288 = and i32 %286, 3
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %305, label %290

290:                                              ; preds = %281, %290
  %291 = phi i16* [ %301, %290 ], [ %427, %281 ]
  %292 = phi i32 [ %302, %290 ], [ %2, %281 ]
  %293 = phi i32 [ %303, %290 ], [ %288, %281 ]
  %294 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %294, align 1
  %295 = getelementptr inbounds i16, i16* %291, i64 8
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %296, align 1
  %297 = getelementptr inbounds i16, i16* %291, i64 16
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %298, align 1
  %299 = getelementptr inbounds i16, i16* %291, i64 24
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %300, align 1
  %301 = getelementptr inbounds i16, i16* %291, i64 32
  %302 = add nsw i32 %292, 1
  %303 = add i32 %293, -1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %290, !llvm.loop !85

305:                                              ; preds = %290, %281
  %306 = phi i16* [ %427, %281 ], [ %301, %290 ]
  %307 = phi i32 [ %2, %281 ], [ %302, %290 ]
  %308 = icmp ult i32 %287, 3
  br i1 %308, label %430, label %328

309:                                              ; preds = %276
  %310 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %311 = bitcast <8 x i16> %310 to <4 x i32>
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %313 = bitcast <4 x i32> %312 to <8 x i16>
  %314 = sub <8 x i16> %313, %271
  %315 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %315, align 1
  br label %365

316:                                              ; preds = %276
  %317 = bitcast i16* %277 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 1
  %319 = shl <8 x i16> %318, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %320 = sub <8 x i16> %319, %271
  %321 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %321, align 1
  br i1 %273, label %373, label %322

322:                                              ; preds = %316
  %323 = shufflevector <8 x i16> %319, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %324 = bitcast <8 x i16> %323 to <4 x i32>
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %326 = bitcast <4 x i32> %325 to <8 x i16>
  %327 = sub <8 x i16> %326, %271
  br label %365

328:                                              ; preds = %305, %328
  %329 = phi i16* [ %362, %328 ], [ %306, %305 ]
  %330 = phi i32 [ %363, %328 ], [ %307, %305 ]
  %331 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %331, align 1
  %332 = getelementptr inbounds i16, i16* %329, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %333, align 1
  %334 = getelementptr inbounds i16, i16* %329, i64 16
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %335, align 1
  %336 = getelementptr inbounds i16, i16* %329, i64 24
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %337, align 1
  %338 = getelementptr inbounds i16, i16* %329, i64 32
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %339, align 1
  %340 = getelementptr inbounds i16, i16* %329, i64 40
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %341, align 1
  %342 = getelementptr inbounds i16, i16* %329, i64 48
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %343, align 1
  %344 = getelementptr inbounds i16, i16* %329, i64 56
  %345 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %345, align 1
  %346 = getelementptr inbounds i16, i16* %329, i64 64
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %347, align 1
  %348 = getelementptr inbounds i16, i16* %329, i64 72
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %349, align 1
  %350 = getelementptr inbounds i16, i16* %329, i64 80
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %351, align 1
  %352 = getelementptr inbounds i16, i16* %329, i64 88
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %353, align 1
  %354 = getelementptr inbounds i16, i16* %329, i64 96
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %355, align 1
  %356 = getelementptr inbounds i16, i16* %329, i64 104
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %357, align 1
  %358 = getelementptr inbounds i16, i16* %329, i64 112
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %359, align 1
  %360 = getelementptr inbounds i16, i16* %329, i64 120
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %361, align 1
  %362 = getelementptr inbounds i16, i16* %329, i64 128
  %363 = add nsw i32 %330, 4
  %364 = icmp eq i32 %363, 32
  br i1 %364, label %430, label %328

365:                                              ; preds = %322, %309
  %366 = phi <8 x i16> [ %327, %322 ], [ %314, %309 ]
  %367 = phi <8 x i16> [ %326, %322 ], [ %313, %309 ]
  %368 = phi <4 x i32> [ %325, %322 ], [ %312, %309 ]
  %369 = phi <8 x i16> [ %319, %322 ], [ %280, %309 ]
  %370 = phi <8 x i16> [ %319, %322 ], [ %313, %309 ]
  %371 = getelementptr inbounds i16, i16* %278, i64 8
  %372 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %366, <8 x i16>* %372, align 1
  br label %387

373:                                              ; preds = %316
  %374 = getelementptr inbounds i16, i16* %277, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 1
  %377 = shl <8 x i16> %376, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %378 = getelementptr inbounds i16, i16* %278, i64 8
  %379 = sub <8 x i16> %377, %271
  %380 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %379, <8 x i16>* %380, align 1
  br i1 %274, label %397, label %381

381:                                              ; preds = %373
  %382 = shufflevector <8 x i16> %377, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %383 = bitcast <8 x i16> %382 to <4 x i32>
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %385 = bitcast <4 x i32> %384 to <8 x i16>
  %386 = sub <8 x i16> %385, %271
  br label %387

387:                                              ; preds = %381, %365
  %388 = phi <8 x i16> [ %386, %381 ], [ %366, %365 ]
  %389 = phi <8 x i16> [ %385, %381 ], [ %367, %365 ]
  %390 = phi <4 x i32> [ %384, %381 ], [ %368, %365 ]
  %391 = phi <8 x i16> [ %377, %381 ], [ %369, %365 ]
  %392 = phi <8 x i16> [ %377, %381 ], [ %367, %365 ]
  %393 = phi <8 x i16> [ %319, %381 ], [ %370, %365 ]
  %394 = getelementptr inbounds i16, i16* %278, i64 16
  %395 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %395, align 1
  %396 = bitcast <4 x i32> %390 to <8 x i16>
  br label %416

397:                                              ; preds = %373
  %398 = getelementptr inbounds i16, i16* %277, i64 16
  %399 = bitcast i16* %398 to <8 x i16>*
  %400 = load <8 x i16>, <8 x i16>* %399, align 1
  %401 = shl <8 x i16> %400, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %402 = getelementptr inbounds i16, i16* %278, i64 16
  %403 = sub <8 x i16> %401, %271
  %404 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %403, <8 x i16>* %404, align 1
  br i1 %275, label %411, label %405

405:                                              ; preds = %397
  %406 = shufflevector <8 x i16> %401, <8 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 7, i32 7>
  %407 = bitcast <8 x i16> %406 to <4 x i32>
  %408 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %409 = bitcast <4 x i32> %408 to <8 x i16>
  %410 = bitcast <4 x i32> %408 to <8 x i16>
  br label %416

411:                                              ; preds = %397
  %412 = getelementptr inbounds i16, i16* %277, i64 24
  %413 = bitcast i16* %412 to <8 x i16>*
  %414 = load <8 x i16>, <8 x i16>* %413, align 1
  %415 = shl <8 x i16> %414, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  br label %416

416:                                              ; preds = %387, %405, %411
  %417 = phi <8 x i16> [ %415, %411 ], [ %410, %405 ], [ %396, %387 ]
  %418 = phi <8 x i16> [ %401, %411 ], [ %401, %405 ], [ %396, %387 ]
  %419 = phi <8 x i16> [ %319, %411 ], [ %319, %405 ], [ %393, %387 ]
  %420 = phi <8 x i16> [ %377, %411 ], [ %377, %405 ], [ %392, %387 ]
  %421 = phi <8 x i16> [ %415, %411 ], [ %409, %405 ], [ %389, %387 ]
  %422 = phi <8 x i16> [ %415, %411 ], [ %401, %405 ], [ %391, %387 ]
  %423 = getelementptr inbounds i16, i16* %278, i64 24
  %424 = sub <8 x i16> %421, %271
  %425 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %425, align 1
  %426 = getelementptr inbounds i16, i16* %277, i64 %8
  %427 = getelementptr inbounds i16, i16* %278, i64 32
  %428 = add nsw i32 %279, -1
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %281, label %276

430:                                              ; preds = %305, %328, %157
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !3}
!48 = distinct !{!48, !3}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !3}
!53 = distinct !{!53, !3}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !3}
!56 = distinct !{!56, !3}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !3}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !3}
!63 = distinct !{!63, !3}
!64 = distinct !{!64, !3}
!65 = distinct !{!65, !3}
!66 = distinct !{!66, !3}
!67 = distinct !{!67, !3}
!68 = distinct !{!68, !3}
!69 = distinct !{!69, !3}
!70 = distinct !{!70, !3}
!71 = distinct !{!71, !3}
!72 = distinct !{!72, !3}
!73 = distinct !{!73, !3}
!74 = distinct !{!74, !3}
!75 = distinct !{!75, !3}
!76 = distinct !{!76, !3}
!77 = distinct !{!77, !3}
!78 = distinct !{!78, !3}
!79 = distinct !{!79, !3}
!80 = distinct !{!80, !3}
!81 = distinct !{!81, !3}
!82 = distinct !{!82, !3}
!83 = distinct !{!83, !3}
!84 = distinct !{!84, !3}
!85 = distinct !{!85, !3}
