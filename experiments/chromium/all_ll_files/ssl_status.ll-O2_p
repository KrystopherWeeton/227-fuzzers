; ModuleID = '../../content/public/browser/ssl_status.cc'
source_filename = "../../content/public/browser/ssl_status.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.content::SSLStatus" = type { i8, %class.scoped_refptr, i32, i16, i16, i32, i32, i8, i32 }
%class.scoped_refptr = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr", %"class.std::__1::vector.10" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::basic_string"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr"* }
%"class.net::SSLInfo" = type <{ %class.scoped_refptr, %class.scoped_refptr, i32, i16, i16, i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::vector.17", %"class.std::__1::basic_string", %"class.std::__1::vector.25", i32, %"struct.net::OCSPVerifyResult", i8, [3 x i8] }>
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.net::HashValue"*, %"class.net::HashValue"*, %"class.std::__1::__compressed_pair.20" }
%"class.net::HashValue" = type { i32, %union.anon.19 }
%union.anon.19 = type { %"struct.net::SHA256HashValue" }
%"struct.net::SHA256HashValue" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.net::HashValue"* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.29" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr.27, i32, [4 x i8] }>
%class.scoped_refptr.27 = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.28", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.28" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"struct.net::OCSPVerifyResult" = type { i32, i32 }

@_ZN7content9SSLStatusC1Ev = hidden unnamed_addr alias void (%"struct.content::SSLStatus"*), void (%"struct.content::SSLStatus"*)* @_ZN7content9SSLStatusC2Ev
@_ZN7content9SSLStatusC1ERKN3net7SSLInfoE = hidden unnamed_addr alias void (%"struct.content::SSLStatus"*, %"class.net::SSLInfo"*), void (%"struct.content::SSLStatus"*, %"class.net::SSLInfo"*)* @_ZN7content9SSLStatusC2ERKN3net7SSLInfoE
@_ZN7content9SSLStatusC1ERKS0_ = hidden unnamed_addr alias void (%"struct.content::SSLStatus"*, %"struct.content::SSLStatus"*), void (%"struct.content::SSLStatus"*, %"struct.content::SSLStatus"*)* @_ZN7content9SSLStatusC2ERKS0_
@_ZN7content9SSLStatusD1Ev = hidden unnamed_addr alias void (%"struct.content::SSLStatus"*), void (%"struct.content::SSLStatus"*)* @_ZN7content9SSLStatusD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7content9SSLStatusC2Ev(%"struct.content::SSLStatus"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 8
  %5 = bitcast %"class.net::X509Certificate"** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 25, i1 false)
  store i32 4, i32* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7content9SSLStatusC2ERKN3net7SSLInfoE(%"struct.content::SSLStatus"* nocapture, %"class.net::SSLInfo"* nocapture readonly dereferenceable(128)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 0
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %4, align 8
  %6 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 1, i32 0
  store %"class.net::X509Certificate"* %5, %"class.net::X509Certificate"** %6, align 8
  %7 = icmp eq %"class.net::X509Certificate"* %5, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic
  br label %11

11:                                               ; preds = %2, %8
  %12 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %12, align 8
  %15 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 3
  %16 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 3
  %17 = load i16, i16* %16, align 4
  store i16 %17, i16* %15, align 4
  %18 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 4
  %19 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 4
  %20 = load i16, i16* %19, align 2
  store i16 %20, i16* %18, align 2
  %21 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 5
  %22 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 5
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %21, align 8
  %24 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 6
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 7
  %26 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 7
  %27 = load i8, i8* %26, align 1, !range !2
  store i8 %27, i8* %25, align 8
  %28 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 8
  %29 = getelementptr inbounds %"class.net::SSLInfo", %"class.net::SSLInfo"* %1, i64 0, i32 15
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %28, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7content9SSLStatusC2ERKS0_(%"struct.content::SSLStatus"* nocapture, %"struct.content::SSLStatus"* nocapture readonly dereferenceable(40)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  store i8 %5, i8* %3, align 8
  %6 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 1, i32 0
  %7 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %6, align 8
  %8 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 1, i32 0
  store %"class.net::X509Certificate"* %7, %"class.net::X509Certificate"** %8, align 8
  %9 = icmp eq %"class.net::X509Certificate"* %7, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %2, %10
  %14 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %14, align 8
  %17 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 3
  %18 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 3
  %19 = load i16, i16* %18, align 4
  store i16 %19, i16* %17, align 4
  %20 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 4
  %21 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 4
  %22 = load i16, i16* %21, align 2
  store i16 %22, i16* %20, align 2
  %23 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 5
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %23, align 8
  %26 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 6
  %27 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 6
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %26, align 4
  %29 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 7
  %30 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 7
  %31 = load i8, i8* %30, align 8, !range !2
  store i8 %31, i8* %29, align 8
  %32 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 8
  %33 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 8
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %32, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"struct.content::SSLStatus"* @_ZN7content9SSLStatusaSES0_(%"struct.content::SSLStatus"* returned, %"struct.content::SSLStatus"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 0
  store i8 %4, i8* %5, align 8
  %6 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 1, i32 0
  %7 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %6, align 8
  %8 = icmp eq %"class.net::X509Certificate"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %2, %9
  %13 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 1
  %14 = ptrtoint %"class.net::X509Certificate"* %7 to i64
  %15 = bitcast %class.scoped_refptr* %13 to i64*
  %16 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %13, i64 0, i32 0
  %17 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %16, align 8
  store i64 %14, i64* %15, align 8
  %18 = icmp eq %"class.net::X509Certificate"* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw sub i32* %20, i32 1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %17) #6
  %24 = bitcast %"class.net::X509Certificate"* %17 to i8*
  tail call void @_ZdlPv(i8* %24) #7
  br label %25

25:                                               ; preds = %12, %19, %23
  %26 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 2
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 3
  %30 = load i16, i16* %29, align 4
  %31 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 3
  store i16 %30, i16* %31, align 4
  %32 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 4
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 4
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 5
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 5
  store i32 %36, i32* %37, align 8
  %38 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 6
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 6
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 7
  %42 = load i8, i8* %41, align 8, !range !2
  %43 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 7
  store i8 %42, i8* %43, align 8
  %44 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %1, i64 0, i32 8
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 8
  store i32 %45, i32* %46, align 4
  ret %"struct.content::SSLStatus"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content9SSLStatusD2Ev(%"struct.content::SSLStatus"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.content::SSLStatus", %"struct.content::SSLStatus"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %2, align 8
  %4 = icmp eq %"class.net::X509Certificate"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  tail call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %3) #6
  %10 = bitcast %"class.net::X509Certificate"* %3 to i8*
  tail call void @_ZdlPv(i8* %10) #7
  br label %11

11:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
