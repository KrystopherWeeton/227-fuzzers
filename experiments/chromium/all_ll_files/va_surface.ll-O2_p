; ModuleID = '../../media/gpu/vaapi/va_surface.cc'
source_filename = "../../media/gpu/vaapi/va_surface.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::VASurface" = type { %"class.base::RefCountedThreadSafe", i32, %"class.gfx::Size", i32, %"class.base::OnceCallback" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.1", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }

@_ZN5media9VASurfaceC1EjRKN3gfx4SizeEjN4base12OnceCallbackIFvjEEE = hidden unnamed_addr alias void (%"class.media::VASurface"*, i32, %"class.gfx::Size"*, i32, %"class.base::OnceCallback"*), void (%"class.media::VASurface"*, i32, %"class.gfx::Size"*, i32, %"class.base::OnceCallback"*)* @_ZN5media9VASurfaceC2EjRKN3gfx4SizeEjN4base12OnceCallbackIFvjEEE
@_ZN5media9VASurfaceD1Ev = hidden unnamed_addr alias void (%"class.media::VASurface"*), void (%"class.media::VASurface"*)* @_ZN5media9VASurfaceD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media9VASurfaceC2EjRKN3gfx4SizeEjN4base12OnceCallbackIFvjEEE(%"class.media::VASurface"* nocapture, i32, %"class.gfx::Size"* nocapture readonly dereferenceable(8), i32, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 1
  store i32 %1, i32* %7, align 4
  %8 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 2
  %9 = bitcast %"class.gfx::Size"* %2 to i64*
  %10 = bitcast %"class.gfx::Size"* %8 to i64*
  %11 = load i64, i64* %9, align 4
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 3
  store i32 %3, i32* %12, align 8
  %13 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 4
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.base::OnceCallback"* %4 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.base::OnceCallback"* %13 to i64*
  store i64 %16, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media9VASurfaceD2Ev(%"class.media::VASurface"*) unnamed_addr #1 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.media::VASurface", %"class.media::VASurface"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  %7 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %9, i64* %10, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %12 = inttoptr i64 %9 to %"class.base::internal::BindStateBase"*
  %13 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %12, i64 0, i32 1
  %14 = bitcast void ()** %13 to void (%"class.base::internal::BindStateBase"*, i32)**
  %15 = load void (%"class.base::internal::BindStateBase"*, i32)*, void (%"class.base::internal::BindStateBase"*, i32)** %14, align 8
  tail call void %15(%"class.base::internal::BindStateBase"* %12, i32 %5) #4
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %16) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
