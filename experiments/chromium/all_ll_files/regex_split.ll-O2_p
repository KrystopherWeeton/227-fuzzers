; ModuleID = '../../third_party/tensorflow-text/src/tensorflow_text/core/kernels/regex_split.cc'
source_filename = "../../third_party/tensorflow-text/src/tensorflow_text/core/kernels/regex_split.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.re2::RE2" = type { %"class.std::__1::basic_string", %"class.re2::RE2::Options", %"class.re2::Regexp"*, %"class.std::__1::basic_string"*, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.re2::Regexp"*, %"class.re2::Prog"*, i32, i8, %"class.re2::Prog"*, %"class.std::__1::map"*, %"class.std::__1::map.1"*, %"struct.std::__1::once_flag", %"struct.std::__1::once_flag", %"struct.std::__1::once_flag" }
%"class.re2::RE2::Options" = type { i32, i8, i8, i8, i64, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.re2::Regexp" = type opaque
%"class.re2::Prog" = type opaque
%"class.std::__1::map" = type opaque
%"class.std::__1::map.1" = type opaque
%"struct.std::__1::once_flag" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.absl::string_view"*, %"class.absl::string_view"*, %"class.std::__1::__compressed_pair.2" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.absl::string_view"* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { i64*, i64*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64* }
%"class.re2::StringPiece" = type { i8*, i64 }
%"class.re2::RE2::Arg" = type { i8*, i1 (i8*, i64, i8*)* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { i64*, i64*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i64* }

$_ZN3re23RE23Arg11DoParse3aryINS_11StringPieceEEEbPKcmPv = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10tensorflow4text10RegexSplitEN4absl11string_viewERKN3re23RE2EbS6_PNSt3__16vectorIS2_NS7_9allocatorIS2_EEEEPNS8_IlNS9_IlEEEESF_(i8*, i64, %"class.re2::RE2"* dereferenceable(200), i1 zeroext, %"class.re2::RE2"* dereferenceable(200), %"class.std::__1::vector"*, %"class.std::__1::vector.7"*, %"class.std::__1::vector.7"*) local_unnamed_addr #0 {
  %9 = alloca %"class.re2::StringPiece", align 8
  %10 = alloca [1 x %"class.re2::RE2::Arg"*], align 8
  %11 = alloca %"class.re2::RE2::Arg", align 8
  %12 = alloca %"class.re2::StringPiece", align 8
  %13 = alloca %"class.re2::StringPiece", align 8
  %14 = bitcast %"class.re2::StringPiece"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %12, i64 0, i32 0
  %16 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %12, i64 0, i32 1
  store i64 -6148914691236517206, i64* %16, align 8
  store i8* %0, i8** %15, align 8
  %17 = icmp eq i8* %0, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %8
  %19 = tail call i64 @strlen(i8* nonnull %0) #10
  br label %20

20:                                               ; preds = %18, %8
  %21 = phi i64 [ %19, %18 ], [ 0, %8 ]
  store i64 %21, i64* %16, align 8
  %22 = bitcast %"class.re2::StringPiece"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #9
  %23 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %13, i64 0, i32 0
  %24 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %13, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 16, i1 false) #9
  %25 = ptrtoint %"class.re2::StringPiece"* %13 to i64
  %26 = bitcast %"class.re2::RE2::Arg"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  %27 = bitcast %"class.re2::RE2::Arg"* %11 to i64*
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %"class.re2::RE2::Arg", %"class.re2::RE2::Arg"* %11, i64 0, i32 1
  store i1 (i8*, i64, i8*)* @_ZN3re23RE23Arg11DoParse3aryINS_11StringPieceEEEbPKcmPv, i1 (i8*, i64, i8*)** %28, align 8
  %29 = bitcast [1 x %"class.re2::RE2::Arg"*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  %30 = getelementptr inbounds [1 x %"class.re2::RE2::Arg"*], [1 x %"class.re2::RE2::Arg"*]* %10, i64 0, i64 0
  store %"class.re2::RE2::Arg"* %11, %"class.re2::RE2::Arg"** %30, align 8
  %31 = call zeroext i1 @_ZN3re23RE215FindAndConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull %12, %"class.re2::RE2"* dereferenceable(200) %2, %"class.re2::RE2::Arg"** nonnull %30, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  br i1 %31, label %32, label %456

32:                                               ; preds = %20
  %33 = bitcast %"class.re2::StringPiece"* %13 to i64*
  %34 = bitcast %"class.re2::StringPiece"* %9 to i8*
  %35 = bitcast %"class.re2::StringPiece"* %9 to i64*
  %36 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %9, i64 0, i32 1
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %39 = bitcast %"class.absl::string_view"** %37 to i64*
  %40 = bitcast %"class.std::__1::vector"* %5 to i64*
  %41 = bitcast %"class.absl::string_view"** %38 to i64*
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %43 = ptrtoint i8* %0 to i64
  %44 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %6, i64 0, i32 0, i32 1
  %45 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %46 = bitcast i64** %44 to i64*
  %47 = bitcast %"class.std::__1::vector.7"* %6 to i64*
  %48 = bitcast i64** %45 to i64*
  %49 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %6, i64 0, i32 0, i32 0
  %50 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %52 = bitcast i64** %50 to i64*
  %53 = bitcast %"class.std::__1::vector.7"* %7 to i64*
  %54 = bitcast i64** %51 to i64*
  %55 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 0
  br label %56

56:                                               ; preds = %454, %32
  %57 = phi i8* [ %0, %32 ], [ %70, %454 ]
  %58 = load i64, i64* %33, align 8
  %59 = ptrtoint i8* %57 to i64
  %60 = sub i64 %58, %59
  %61 = icmp sgt i64 %60, -1
  br i1 %61, label %63, label %62, !prof !2

62:                                               ; preds = %56
  call void @llvm.trap() #9
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %60, 0
  br i1 %3, label %65, label %68

65:                                               ; preds = %63
  %66 = load i64, i64* %24, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #9
  store i64 %58, i64* %35, align 8
  store i64 %66, i64* %36, align 8
  %67 = call zeroext i1 @_ZN3re23RE210FullMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull dereferenceable(16) %9, %"class.re2::RE2"* dereferenceable(200) %4, %"class.re2::RE2::Arg"** null, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #9
  br label %68

68:                                               ; preds = %65, %63
  %69 = phi i1 [ false, %63 ], [ %67, %65 ]
  %70 = load i8*, i8** %15, align 8
  br i1 %64, label %257, label %71

71:                                               ; preds = %68
  %72 = load %"class.absl::string_view"*, %"class.absl::string_view"** %37, align 8
  %73 = load %"class.absl::string_view"*, %"class.absl::string_view"** %38, align 8
  %74 = icmp eq %"class.absl::string_view"* %72, %73
  %75 = ptrtoint %"class.absl::string_view"* %73 to i64
  br i1 %74, label %81, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %72, i64 0, i32 0
  store i8* %57, i8** %77, align 8
  %78 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %72, i64 0, i32 1
  store i64 %60, i64* %78, align 8
  %79 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %72, i64 1
  %80 = ptrtoint %"class.absl::string_view"* %79 to i64
  store i64 %80, i64* %39, align 8
  br label %135

81:                                               ; preds = %71
  %82 = ptrtoint %"class.absl::string_view"* %72 to i64
  %83 = load i64, i64* %40, align 8
  %84 = sub i64 %82, %83
  %85 = ashr exact i64 %84, 4
  %86 = add nsw i64 %85, 1
  %87 = icmp ugt i64 %86, 1152921504606846975
  br i1 %87, label %88, label %90

88:                                               ; preds = %81
  %89 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %89) #11
  unreachable

90:                                               ; preds = %81
  %91 = sub i64 %75, %83
  %92 = ashr exact i64 %91, 4
  %93 = icmp ult i64 %92, 576460752303423487
  br i1 %93, label %94, label %102

94:                                               ; preds = %90
  %95 = ashr exact i64 %91, 3
  %96 = icmp ult i64 %95, %86
  %97 = select i1 %96, i64 %86, i64 %95
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %94
  %100 = icmp ugt i64 %97, 1152921504606846975
  br i1 %100, label %101, label %102

101:                                              ; preds = %99
  call void @abort() #11
  unreachable

102:                                              ; preds = %99, %90
  %103 = phi i64 [ %97, %99 ], [ 1152921504606846975, %90 ]
  %104 = shl i64 %103, 4
  %105 = call i8* @_Znwm(i64 %104) #12
  %106 = bitcast i8* %105 to %"class.absl::string_view"*
  br label %107

107:                                              ; preds = %102, %94
  %108 = phi i64 [ %103, %102 ], [ 0, %94 ]
  %109 = phi %"class.absl::string_view"* [ %106, %102 ], [ null, %94 ]
  %110 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %109, i64 %85
  %111 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %109, i64 %108
  %112 = ptrtoint %"class.absl::string_view"* %111 to i64
  %113 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %110, i64 0, i32 0
  store i8* %57, i8** %113, align 8
  %114 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %109, i64 %85, i32 1
  store i64 %60, i64* %114, align 8
  %115 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %110, i64 1
  %116 = ptrtoint %"class.absl::string_view"* %115 to i64
  %117 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  %118 = load i64, i64* %39, align 8
  %119 = ptrtoint %"class.absl::string_view"* %117 to i64
  %120 = sub i64 %118, %119
  %121 = ashr exact i64 %120, 4
  %122 = sub nsw i64 0, %121
  %123 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %110, i64 %122
  %124 = ptrtoint %"class.absl::string_view"* %123 to i64
  %125 = icmp sgt i64 %120, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %107
  %127 = bitcast %"class.absl::string_view"* %123 to i8*
  %128 = bitcast %"class.absl::string_view"* %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 %120, i1 false) #9
  %129 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  br label %130

130:                                              ; preds = %126, %107
  %131 = phi %"class.absl::string_view"* [ %117, %107 ], [ %129, %126 ]
  store i64 %124, i64* %40, align 8
  store i64 %116, i64* %39, align 8
  store i64 %112, i64* %41, align 8
  %132 = icmp eq %"class.absl::string_view"* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %130
  %134 = bitcast %"class.absl::string_view"* %131 to i8*
  call void @_ZdlPv(i8* %134) #12
  br label %135

135:                                              ; preds = %133, %130, %76
  %136 = sub i64 %59, %43
  %137 = load i64*, i64** %44, align 8
  %138 = load i64*, i64** %45, align 8
  %139 = icmp ult i64* %137, %138
  %140 = ptrtoint i64* %138 to i64
  br i1 %139, label %141, label %144

141:                                              ; preds = %135
  store i64 %136, i64* %137, align 8
  %142 = getelementptr inbounds i64, i64* %137, i64 1
  %143 = ptrtoint i64* %142 to i64
  store i64 %143, i64* %46, align 8
  br label %196

144:                                              ; preds = %135
  %145 = ptrtoint i64* %137 to i64
  %146 = load i64, i64* %47, align 8
  %147 = sub i64 %145, %146
  %148 = ashr exact i64 %147, 3
  %149 = add nsw i64 %148, 1
  %150 = icmp ugt i64 %149, 2305843009213693951
  br i1 %150, label %151, label %153

151:                                              ; preds = %144
  %152 = bitcast %"class.std::__1::vector.7"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %152) #11
  unreachable

153:                                              ; preds = %144
  %154 = sub i64 %140, %146
  %155 = ashr exact i64 %154, 3
  %156 = icmp ult i64 %155, 1152921504606846975
  br i1 %156, label %157, label %165

157:                                              ; preds = %153
  %158 = ashr exact i64 %154, 2
  %159 = icmp ult i64 %158, %149
  %160 = select i1 %159, i64 %149, i64 %158
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %170, label %162

162:                                              ; preds = %157
  %163 = icmp ugt i64 %160, 2305843009213693951
  br i1 %163, label %164, label %165

164:                                              ; preds = %162
  call void @abort() #11
  unreachable

165:                                              ; preds = %162, %153
  %166 = phi i64 [ %160, %162 ], [ 2305843009213693951, %153 ]
  %167 = shl i64 %166, 3
  %168 = call i8* @_Znwm(i64 %167) #12
  %169 = bitcast i8* %168 to i64*
  br label %170

170:                                              ; preds = %165, %157
  %171 = phi i64 [ %166, %165 ], [ 0, %157 ]
  %172 = phi i64* [ %169, %165 ], [ null, %157 ]
  %173 = getelementptr inbounds i64, i64* %172, i64 %148
  %174 = getelementptr inbounds i64, i64* %172, i64 %171
  %175 = ptrtoint i64* %174 to i64
  store i64 %136, i64* %173, align 8
  %176 = getelementptr inbounds i64, i64* %173, i64 1
  %177 = ptrtoint i64* %176 to i64
  %178 = load i64*, i64** %49, align 8
  %179 = load i64, i64* %46, align 8
  %180 = ptrtoint i64* %178 to i64
  %181 = sub i64 %179, %180
  %182 = ashr exact i64 %181, 3
  %183 = sub nsw i64 0, %182
  %184 = getelementptr inbounds i64, i64* %173, i64 %183
  %185 = ptrtoint i64* %184 to i64
  %186 = icmp sgt i64 %181, 0
  br i1 %186, label %187, label %191

187:                                              ; preds = %170
  %188 = bitcast i64* %184 to i8*
  %189 = bitcast i64* %178 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* align 8 %189, i64 %181, i1 false) #9
  %190 = load i64*, i64** %49, align 8
  br label %191

191:                                              ; preds = %187, %170
  %192 = phi i64* [ %178, %170 ], [ %190, %187 ]
  store i64 %185, i64* %47, align 8
  store i64 %177, i64* %46, align 8
  store i64 %175, i64* %48, align 8
  %193 = icmp eq i64* %192, null
  br i1 %193, label %196, label %194

194:                                              ; preds = %191
  %195 = bitcast i64* %192 to i8*
  call void @_ZdlPv(i8* %195) #12
  br label %196

196:                                              ; preds = %194, %191, %141
  %197 = sub i64 %58, %43
  %198 = load i64*, i64** %50, align 8
  %199 = load i64*, i64** %51, align 8
  %200 = icmp ult i64* %198, %199
  %201 = ptrtoint i64* %199 to i64
  br i1 %200, label %202, label %205

202:                                              ; preds = %196
  store i64 %197, i64* %198, align 8
  %203 = getelementptr inbounds i64, i64* %198, i64 1
  %204 = ptrtoint i64* %203 to i64
  store i64 %204, i64* %52, align 8
  br label %257

205:                                              ; preds = %196
  %206 = ptrtoint i64* %198 to i64
  %207 = load i64, i64* %53, align 8
  %208 = sub i64 %206, %207
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = icmp ugt i64 %210, 2305843009213693951
  br i1 %211, label %212, label %214

212:                                              ; preds = %205
  %213 = bitcast %"class.std::__1::vector.7"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %213) #11
  unreachable

214:                                              ; preds = %205
  %215 = sub i64 %201, %207
  %216 = ashr exact i64 %215, 3
  %217 = icmp ult i64 %216, 1152921504606846975
  br i1 %217, label %218, label %226

218:                                              ; preds = %214
  %219 = ashr exact i64 %215, 2
  %220 = icmp ult i64 %219, %210
  %221 = select i1 %220, i64 %210, i64 %219
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %231, label %223

223:                                              ; preds = %218
  %224 = icmp ugt i64 %221, 2305843009213693951
  br i1 %224, label %225, label %226

225:                                              ; preds = %223
  call void @abort() #11
  unreachable

226:                                              ; preds = %223, %214
  %227 = phi i64 [ %221, %223 ], [ 2305843009213693951, %214 ]
  %228 = shl i64 %227, 3
  %229 = call i8* @_Znwm(i64 %228) #12
  %230 = bitcast i8* %229 to i64*
  br label %231

231:                                              ; preds = %226, %218
  %232 = phi i64 [ %227, %226 ], [ 0, %218 ]
  %233 = phi i64* [ %230, %226 ], [ null, %218 ]
  %234 = getelementptr inbounds i64, i64* %233, i64 %209
  %235 = getelementptr inbounds i64, i64* %233, i64 %232
  %236 = ptrtoint i64* %235 to i64
  store i64 %197, i64* %234, align 8
  %237 = getelementptr inbounds i64, i64* %234, i64 1
  %238 = ptrtoint i64* %237 to i64
  %239 = load i64*, i64** %55, align 8
  %240 = load i64, i64* %52, align 8
  %241 = ptrtoint i64* %239 to i64
  %242 = sub i64 %240, %241
  %243 = ashr exact i64 %242, 3
  %244 = sub nsw i64 0, %243
  %245 = getelementptr inbounds i64, i64* %234, i64 %244
  %246 = ptrtoint i64* %245 to i64
  %247 = icmp sgt i64 %242, 0
  br i1 %247, label %248, label %252

248:                                              ; preds = %231
  %249 = bitcast i64* %245 to i8*
  %250 = bitcast i64* %239 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %250, i64 %242, i1 false) #9
  %251 = load i64*, i64** %55, align 8
  br label %252

252:                                              ; preds = %248, %231
  %253 = phi i64* [ %239, %231 ], [ %251, %248 ]
  store i64 %246, i64* %53, align 8
  store i64 %238, i64* %52, align 8
  store i64 %236, i64* %54, align 8
  %254 = icmp eq i64* %253, null
  br i1 %254, label %257, label %255

255:                                              ; preds = %252
  %256 = bitcast i64* %253 to i8*
  call void @_ZdlPv(i8* %256) #12
  br label %257

257:                                              ; preds = %255, %252, %202, %68
  br i1 %69, label %258, label %454

258:                                              ; preds = %257
  %259 = load i64, i64* %33, align 8
  %260 = load i64, i64* %24, align 8
  %261 = icmp sgt i64 %260, -1
  br i1 %261, label %263, label %262, !prof !2

262:                                              ; preds = %258
  call void @llvm.trap() #9
  unreachable

263:                                              ; preds = %258
  %264 = load %"class.absl::string_view"*, %"class.absl::string_view"** %37, align 8
  %265 = load %"class.absl::string_view"*, %"class.absl::string_view"** %38, align 8
  %266 = icmp ult %"class.absl::string_view"* %264, %265
  %267 = ptrtoint %"class.absl::string_view"* %265 to i64
  br i1 %266, label %268, label %273

268:                                              ; preds = %263
  %269 = bitcast %"class.absl::string_view"* %264 to i64*
  store i64 %259, i64* %269, align 8
  %270 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %264, i64 0, i32 1
  store i64 %260, i64* %270, align 8
  %271 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %264, i64 1
  %272 = ptrtoint %"class.absl::string_view"* %271 to i64
  store i64 %272, i64* %39, align 8
  br label %327

273:                                              ; preds = %263
  %274 = ptrtoint %"class.absl::string_view"* %264 to i64
  %275 = load i64, i64* %40, align 8
  %276 = sub i64 %274, %275
  %277 = ashr exact i64 %276, 4
  %278 = add nsw i64 %277, 1
  %279 = icmp ugt i64 %278, 1152921504606846975
  br i1 %279, label %280, label %282

280:                                              ; preds = %273
  %281 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %281) #11
  unreachable

282:                                              ; preds = %273
  %283 = sub i64 %267, %275
  %284 = ashr exact i64 %283, 4
  %285 = icmp ult i64 %284, 576460752303423487
  br i1 %285, label %286, label %294

286:                                              ; preds = %282
  %287 = ashr exact i64 %283, 3
  %288 = icmp ult i64 %287, %278
  %289 = select i1 %288, i64 %278, i64 %287
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %299, label %291

291:                                              ; preds = %286
  %292 = icmp ugt i64 %289, 1152921504606846975
  br i1 %292, label %293, label %294

293:                                              ; preds = %291
  call void @abort() #11
  unreachable

294:                                              ; preds = %291, %282
  %295 = phi i64 [ %289, %291 ], [ 1152921504606846975, %282 ]
  %296 = shl i64 %295, 4
  %297 = call i8* @_Znwm(i64 %296) #12
  %298 = bitcast i8* %297 to %"class.absl::string_view"*
  br label %299

299:                                              ; preds = %294, %286
  %300 = phi i64 [ %295, %294 ], [ 0, %286 ]
  %301 = phi %"class.absl::string_view"* [ %298, %294 ], [ null, %286 ]
  %302 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %301, i64 %277
  %303 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %301, i64 %300
  %304 = ptrtoint %"class.absl::string_view"* %303 to i64
  %305 = bitcast %"class.absl::string_view"* %302 to i64*
  store i64 %259, i64* %305, align 8
  %306 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %301, i64 %277, i32 1
  store i64 %260, i64* %306, align 8
  %307 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %302, i64 1
  %308 = ptrtoint %"class.absl::string_view"* %307 to i64
  %309 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  %310 = load i64, i64* %39, align 8
  %311 = ptrtoint %"class.absl::string_view"* %309 to i64
  %312 = sub i64 %310, %311
  %313 = ashr exact i64 %312, 4
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %302, i64 %314
  %316 = ptrtoint %"class.absl::string_view"* %315 to i64
  %317 = icmp sgt i64 %312, 0
  br i1 %317, label %318, label %322

318:                                              ; preds = %299
  %319 = bitcast %"class.absl::string_view"* %315 to i8*
  %320 = bitcast %"class.absl::string_view"* %309 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %319, i8* align 8 %320, i64 %312, i1 false) #9
  %321 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  br label %322

322:                                              ; preds = %318, %299
  %323 = phi %"class.absl::string_view"* [ %309, %299 ], [ %321, %318 ]
  store i64 %316, i64* %40, align 8
  store i64 %308, i64* %39, align 8
  store i64 %304, i64* %41, align 8
  %324 = icmp eq %"class.absl::string_view"* %323, null
  br i1 %324, label %327, label %325

325:                                              ; preds = %322
  %326 = bitcast %"class.absl::string_view"* %323 to i8*
  call void @_ZdlPv(i8* %326) #12
  br label %327

327:                                              ; preds = %325, %322, %268
  %328 = load i64, i64* %33, align 8
  %329 = sub i64 %328, %43
  %330 = load i64*, i64** %44, align 8
  %331 = load i64*, i64** %45, align 8
  %332 = icmp ult i64* %330, %331
  %333 = ptrtoint i64* %331 to i64
  br i1 %332, label %334, label %337

334:                                              ; preds = %327
  store i64 %329, i64* %330, align 8
  %335 = getelementptr inbounds i64, i64* %330, i64 1
  %336 = ptrtoint i64* %335 to i64
  store i64 %336, i64* %46, align 8
  br label %389

337:                                              ; preds = %327
  %338 = ptrtoint i64* %330 to i64
  %339 = load i64, i64* %47, align 8
  %340 = sub i64 %338, %339
  %341 = ashr exact i64 %340, 3
  %342 = add nsw i64 %341, 1
  %343 = icmp ugt i64 %342, 2305843009213693951
  br i1 %343, label %344, label %346

344:                                              ; preds = %337
  %345 = bitcast %"class.std::__1::vector.7"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %345) #11
  unreachable

346:                                              ; preds = %337
  %347 = sub i64 %333, %339
  %348 = ashr exact i64 %347, 3
  %349 = icmp ult i64 %348, 1152921504606846975
  br i1 %349, label %350, label %358

350:                                              ; preds = %346
  %351 = ashr exact i64 %347, 2
  %352 = icmp ult i64 %351, %342
  %353 = select i1 %352, i64 %342, i64 %351
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %363, label %355

355:                                              ; preds = %350
  %356 = icmp ugt i64 %353, 2305843009213693951
  br i1 %356, label %357, label %358

357:                                              ; preds = %355
  call void @abort() #11
  unreachable

358:                                              ; preds = %355, %346
  %359 = phi i64 [ %353, %355 ], [ 2305843009213693951, %346 ]
  %360 = shl i64 %359, 3
  %361 = call i8* @_Znwm(i64 %360) #12
  %362 = bitcast i8* %361 to i64*
  br label %363

363:                                              ; preds = %358, %350
  %364 = phi i64 [ %359, %358 ], [ 0, %350 ]
  %365 = phi i64* [ %362, %358 ], [ null, %350 ]
  %366 = getelementptr inbounds i64, i64* %365, i64 %341
  %367 = getelementptr inbounds i64, i64* %365, i64 %364
  %368 = ptrtoint i64* %367 to i64
  store i64 %329, i64* %366, align 8
  %369 = getelementptr inbounds i64, i64* %366, i64 1
  %370 = ptrtoint i64* %369 to i64
  %371 = load i64*, i64** %49, align 8
  %372 = load i64, i64* %46, align 8
  %373 = ptrtoint i64* %371 to i64
  %374 = sub i64 %372, %373
  %375 = ashr exact i64 %374, 3
  %376 = sub nsw i64 0, %375
  %377 = getelementptr inbounds i64, i64* %366, i64 %376
  %378 = ptrtoint i64* %377 to i64
  %379 = icmp sgt i64 %374, 0
  br i1 %379, label %380, label %384

380:                                              ; preds = %363
  %381 = bitcast i64* %377 to i8*
  %382 = bitcast i64* %371 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %381, i8* align 8 %382, i64 %374, i1 false) #9
  %383 = load i64*, i64** %49, align 8
  br label %384

384:                                              ; preds = %380, %363
  %385 = phi i64* [ %371, %363 ], [ %383, %380 ]
  store i64 %378, i64* %47, align 8
  store i64 %370, i64* %46, align 8
  store i64 %368, i64* %48, align 8
  %386 = icmp eq i64* %385, null
  br i1 %386, label %389, label %387

387:                                              ; preds = %384
  %388 = bitcast i64* %385 to i8*
  call void @_ZdlPv(i8* %388) #12
  br label %389

389:                                              ; preds = %387, %384, %334
  %390 = load i8*, i8** %23, align 8
  %391 = load i64, i64* %24, align 8
  %392 = getelementptr inbounds i8, i8* %390, i64 %391
  %393 = ptrtoint i8* %392 to i64
  %394 = sub i64 %393, %43
  %395 = load i64*, i64** %50, align 8
  %396 = load i64*, i64** %51, align 8
  %397 = icmp ult i64* %395, %396
  %398 = ptrtoint i64* %396 to i64
  br i1 %397, label %399, label %402

399:                                              ; preds = %389
  store i64 %394, i64* %395, align 8
  %400 = getelementptr inbounds i64, i64* %395, i64 1
  %401 = ptrtoint i64* %400 to i64
  store i64 %401, i64* %52, align 8
  br label %454

402:                                              ; preds = %389
  %403 = ptrtoint i64* %395 to i64
  %404 = load i64, i64* %53, align 8
  %405 = sub i64 %403, %404
  %406 = ashr exact i64 %405, 3
  %407 = add nsw i64 %406, 1
  %408 = icmp ugt i64 %407, 2305843009213693951
  br i1 %408, label %409, label %411

409:                                              ; preds = %402
  %410 = bitcast %"class.std::__1::vector.7"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %410) #11
  unreachable

411:                                              ; preds = %402
  %412 = sub i64 %398, %404
  %413 = ashr exact i64 %412, 3
  %414 = icmp ult i64 %413, 1152921504606846975
  br i1 %414, label %415, label %423

415:                                              ; preds = %411
  %416 = ashr exact i64 %412, 2
  %417 = icmp ult i64 %416, %407
  %418 = select i1 %417, i64 %407, i64 %416
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %428, label %420

420:                                              ; preds = %415
  %421 = icmp ugt i64 %418, 2305843009213693951
  br i1 %421, label %422, label %423

422:                                              ; preds = %420
  call void @abort() #11
  unreachable

423:                                              ; preds = %420, %411
  %424 = phi i64 [ %418, %420 ], [ 2305843009213693951, %411 ]
  %425 = shl i64 %424, 3
  %426 = call i8* @_Znwm(i64 %425) #12
  %427 = bitcast i8* %426 to i64*
  br label %428

428:                                              ; preds = %423, %415
  %429 = phi i64 [ %424, %423 ], [ 0, %415 ]
  %430 = phi i64* [ %427, %423 ], [ null, %415 ]
  %431 = getelementptr inbounds i64, i64* %430, i64 %406
  %432 = getelementptr inbounds i64, i64* %430, i64 %429
  %433 = ptrtoint i64* %432 to i64
  store i64 %394, i64* %431, align 8
  %434 = getelementptr inbounds i64, i64* %431, i64 1
  %435 = ptrtoint i64* %434 to i64
  %436 = load i64*, i64** %55, align 8
  %437 = load i64, i64* %52, align 8
  %438 = ptrtoint i64* %436 to i64
  %439 = sub i64 %437, %438
  %440 = ashr exact i64 %439, 3
  %441 = sub nsw i64 0, %440
  %442 = getelementptr inbounds i64, i64* %431, i64 %441
  %443 = ptrtoint i64* %442 to i64
  %444 = icmp sgt i64 %439, 0
  br i1 %444, label %445, label %449

445:                                              ; preds = %428
  %446 = bitcast i64* %442 to i8*
  %447 = bitcast i64* %436 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %446, i8* align 8 %447, i64 %439, i1 false) #9
  %448 = load i64*, i64** %55, align 8
  br label %449

449:                                              ; preds = %445, %428
  %450 = phi i64* [ %436, %428 ], [ %448, %445 ]
  store i64 %443, i64* %53, align 8
  store i64 %435, i64* %52, align 8
  store i64 %433, i64* %54, align 8
  %451 = icmp eq i64* %450, null
  br i1 %451, label %454, label %452

452:                                              ; preds = %449
  %453 = bitcast i64* %450 to i8*
  call void @_ZdlPv(i8* %453) #12
  br label %454

454:                                              ; preds = %452, %449, %399, %257
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  store i64 %25, i64* %27, align 8
  store i1 (i8*, i64, i8*)* @_ZN3re23RE23Arg11DoParse3aryINS_11StringPieceEEEbPKcmPv, i1 (i8*, i64, i8*)** %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  store %"class.re2::RE2::Arg"* %11, %"class.re2::RE2::Arg"** %30, align 8
  %455 = call zeroext i1 @_ZN3re23RE215FindAndConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull %12, %"class.re2::RE2"* dereferenceable(200) %2, %"class.re2::RE2::Arg"** nonnull %30, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  br i1 %455, label %56, label %456

456:                                              ; preds = %454, %20
  %457 = load i64, i64* %16, align 8
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %677, label %459

459:                                              ; preds = %456
  %460 = bitcast %"class.re2::StringPiece"* %12 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = icmp sgt i64 %457, -1
  br i1 %462, label %464, label %463, !prof !2

463:                                              ; preds = %459
  call void @llvm.trap() #9
  unreachable

464:                                              ; preds = %459
  %465 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %466 = load %"class.absl::string_view"*, %"class.absl::string_view"** %465, align 8
  %467 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %468 = load %"class.absl::string_view"*, %"class.absl::string_view"** %467, align 8
  %469 = icmp ult %"class.absl::string_view"* %466, %468
  %470 = ptrtoint %"class.absl::string_view"* %468 to i64
  br i1 %469, label %471, label %477

471:                                              ; preds = %464
  %472 = bitcast %"class.absl::string_view"* %466 to i64*
  store i64 %461, i64* %472, align 8
  %473 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %466, i64 0, i32 1
  store i64 %457, i64* %473, align 8
  %474 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %466, i64 1
  %475 = ptrtoint %"class.absl::string_view"* %474 to i64
  %476 = bitcast %"class.absl::string_view"** %465 to i64*
  store i64 %475, i64* %476, align 8
  br label %535

477:                                              ; preds = %464
  %478 = ptrtoint %"class.absl::string_view"* %466 to i64
  %479 = bitcast %"class.absl::string_view"** %465 to i64*
  %480 = bitcast %"class.std::__1::vector"* %5 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %478, %481
  %483 = ashr exact i64 %482, 4
  %484 = add nsw i64 %483, 1
  %485 = icmp ugt i64 %484, 1152921504606846975
  br i1 %485, label %486, label %488

486:                                              ; preds = %477
  %487 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %487) #11
  unreachable

488:                                              ; preds = %477
  %489 = bitcast %"class.absl::string_view"** %467 to i64*
  %490 = sub i64 %470, %481
  %491 = ashr exact i64 %490, 4
  %492 = icmp ult i64 %491, 576460752303423487
  br i1 %492, label %493, label %501

493:                                              ; preds = %488
  %494 = ashr exact i64 %490, 3
  %495 = icmp ult i64 %494, %484
  %496 = select i1 %495, i64 %484, i64 %494
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %506, label %498

498:                                              ; preds = %493
  %499 = icmp ugt i64 %496, 1152921504606846975
  br i1 %499, label %500, label %501

500:                                              ; preds = %498
  call void @abort() #11
  unreachable

501:                                              ; preds = %498, %488
  %502 = phi i64 [ %496, %498 ], [ 1152921504606846975, %488 ]
  %503 = shl i64 %502, 4
  %504 = call i8* @_Znwm(i64 %503) #12
  %505 = bitcast i8* %504 to %"class.absl::string_view"*
  br label %506

506:                                              ; preds = %501, %493
  %507 = phi i64 [ %502, %501 ], [ 0, %493 ]
  %508 = phi %"class.absl::string_view"* [ %505, %501 ], [ null, %493 ]
  %509 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %508, i64 %483
  %510 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %508, i64 %507
  %511 = ptrtoint %"class.absl::string_view"* %510 to i64
  %512 = bitcast %"class.absl::string_view"* %509 to i64*
  store i64 %461, i64* %512, align 8
  %513 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %508, i64 %483, i32 1
  store i64 %457, i64* %513, align 8
  %514 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %509, i64 1
  %515 = ptrtoint %"class.absl::string_view"* %514 to i64
  %516 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %517 = load %"class.absl::string_view"*, %"class.absl::string_view"** %516, align 8
  %518 = load i64, i64* %479, align 8
  %519 = ptrtoint %"class.absl::string_view"* %517 to i64
  %520 = sub i64 %518, %519
  %521 = ashr exact i64 %520, 4
  %522 = sub nsw i64 0, %521
  %523 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %509, i64 %522
  %524 = ptrtoint %"class.absl::string_view"* %523 to i64
  %525 = icmp sgt i64 %520, 0
  br i1 %525, label %526, label %530

526:                                              ; preds = %506
  %527 = bitcast %"class.absl::string_view"* %523 to i8*
  %528 = bitcast %"class.absl::string_view"* %517 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %527, i8* align 8 %528, i64 %520, i1 false) #9
  %529 = load %"class.absl::string_view"*, %"class.absl::string_view"** %516, align 8
  br label %530

530:                                              ; preds = %526, %506
  %531 = phi %"class.absl::string_view"* [ %517, %506 ], [ %529, %526 ]
  store i64 %524, i64* %480, align 8
  store i64 %515, i64* %479, align 8
  store i64 %511, i64* %489, align 8
  %532 = icmp eq %"class.absl::string_view"* %531, null
  br i1 %532, label %535, label %533

533:                                              ; preds = %530
  %534 = bitcast %"class.absl::string_view"* %531 to i8*
  call void @_ZdlPv(i8* %534) #12
  br label %535

535:                                              ; preds = %533, %530, %471
  %536 = load i64, i64* %460, align 8
  %537 = ptrtoint i8* %0 to i64
  %538 = sub i64 %536, %537
  %539 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %6, i64 0, i32 0, i32 1
  %540 = load i64*, i64** %539, align 8
  %541 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %542 = load i64*, i64** %541, align 8
  %543 = icmp ult i64* %540, %542
  %544 = ptrtoint i64* %542 to i64
  br i1 %543, label %545, label %549

545:                                              ; preds = %535
  store i64 %538, i64* %540, align 8
  %546 = getelementptr inbounds i64, i64* %540, i64 1
  %547 = ptrtoint i64* %546 to i64
  %548 = bitcast i64** %539 to i64*
  store i64 %547, i64* %548, align 8
  br label %605

549:                                              ; preds = %535
  %550 = ptrtoint i64* %540 to i64
  %551 = bitcast i64** %539 to i64*
  %552 = bitcast %"class.std::__1::vector.7"* %6 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = sub i64 %550, %553
  %555 = ashr exact i64 %554, 3
  %556 = add nsw i64 %555, 1
  %557 = icmp ugt i64 %556, 2305843009213693951
  br i1 %557, label %558, label %560

558:                                              ; preds = %549
  %559 = bitcast %"class.std::__1::vector.7"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %559) #11
  unreachable

560:                                              ; preds = %549
  %561 = bitcast i64** %541 to i64*
  %562 = sub i64 %544, %553
  %563 = ashr exact i64 %562, 3
  %564 = icmp ult i64 %563, 1152921504606846975
  br i1 %564, label %565, label %573

565:                                              ; preds = %560
  %566 = ashr exact i64 %562, 2
  %567 = icmp ult i64 %566, %556
  %568 = select i1 %567, i64 %556, i64 %566
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %578, label %570

570:                                              ; preds = %565
  %571 = icmp ugt i64 %568, 2305843009213693951
  br i1 %571, label %572, label %573

572:                                              ; preds = %570
  call void @abort() #11
  unreachable

573:                                              ; preds = %570, %560
  %574 = phi i64 [ %568, %570 ], [ 2305843009213693951, %560 ]
  %575 = shl i64 %574, 3
  %576 = call i8* @_Znwm(i64 %575) #12
  %577 = bitcast i8* %576 to i64*
  br label %578

578:                                              ; preds = %573, %565
  %579 = phi i64 [ %574, %573 ], [ 0, %565 ]
  %580 = phi i64* [ %577, %573 ], [ null, %565 ]
  %581 = getelementptr inbounds i64, i64* %580, i64 %555
  %582 = getelementptr inbounds i64, i64* %580, i64 %579
  %583 = ptrtoint i64* %582 to i64
  store i64 %538, i64* %581, align 8
  %584 = getelementptr inbounds i64, i64* %581, i64 1
  %585 = ptrtoint i64* %584 to i64
  %586 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %6, i64 0, i32 0, i32 0
  %587 = load i64*, i64** %586, align 8
  %588 = load i64, i64* %551, align 8
  %589 = ptrtoint i64* %587 to i64
  %590 = sub i64 %588, %589
  %591 = ashr exact i64 %590, 3
  %592 = sub nsw i64 0, %591
  %593 = getelementptr inbounds i64, i64* %581, i64 %592
  %594 = ptrtoint i64* %593 to i64
  %595 = icmp sgt i64 %590, 0
  br i1 %595, label %596, label %600

596:                                              ; preds = %578
  %597 = bitcast i64* %593 to i8*
  %598 = bitcast i64* %587 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %597, i8* align 8 %598, i64 %590, i1 false) #9
  %599 = load i64*, i64** %586, align 8
  br label %600

600:                                              ; preds = %596, %578
  %601 = phi i64* [ %587, %578 ], [ %599, %596 ]
  store i64 %594, i64* %552, align 8
  store i64 %585, i64* %551, align 8
  store i64 %583, i64* %561, align 8
  %602 = icmp eq i64* %601, null
  br i1 %602, label %605, label %603

603:                                              ; preds = %600
  %604 = bitcast i64* %601 to i8*
  call void @_ZdlPv(i8* %604) #12
  br label %605

605:                                              ; preds = %603, %600, %545
  %606 = load i8*, i8** %15, align 8
  %607 = load i64, i64* %16, align 8
  %608 = getelementptr inbounds i8, i8* %606, i64 %607
  %609 = ptrtoint i8* %608 to i64
  %610 = sub i64 %609, %537
  %611 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 1
  %612 = load i64*, i64** %611, align 8
  %613 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %614 = load i64*, i64** %613, align 8
  %615 = icmp ult i64* %612, %614
  %616 = ptrtoint i64* %614 to i64
  br i1 %615, label %617, label %621

617:                                              ; preds = %605
  store i64 %610, i64* %612, align 8
  %618 = getelementptr inbounds i64, i64* %612, i64 1
  %619 = ptrtoint i64* %618 to i64
  %620 = bitcast i64** %611 to i64*
  store i64 %619, i64* %620, align 8
  br label %677

621:                                              ; preds = %605
  %622 = ptrtoint i64* %612 to i64
  %623 = bitcast i64** %611 to i64*
  %624 = bitcast %"class.std::__1::vector.7"* %7 to i64*
  %625 = load i64, i64* %624, align 8
  %626 = sub i64 %622, %625
  %627 = ashr exact i64 %626, 3
  %628 = add nsw i64 %627, 1
  %629 = icmp ugt i64 %628, 2305843009213693951
  br i1 %629, label %630, label %632

630:                                              ; preds = %621
  %631 = bitcast %"class.std::__1::vector.7"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %631) #11
  unreachable

632:                                              ; preds = %621
  %633 = bitcast i64** %613 to i64*
  %634 = sub i64 %616, %625
  %635 = ashr exact i64 %634, 3
  %636 = icmp ult i64 %635, 1152921504606846975
  br i1 %636, label %637, label %645

637:                                              ; preds = %632
  %638 = ashr exact i64 %634, 2
  %639 = icmp ult i64 %638, %628
  %640 = select i1 %639, i64 %628, i64 %638
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %650, label %642

642:                                              ; preds = %637
  %643 = icmp ugt i64 %640, 2305843009213693951
  br i1 %643, label %644, label %645

644:                                              ; preds = %642
  call void @abort() #11
  unreachable

645:                                              ; preds = %642, %632
  %646 = phi i64 [ %640, %642 ], [ 2305843009213693951, %632 ]
  %647 = shl i64 %646, 3
  %648 = call i8* @_Znwm(i64 %647) #12
  %649 = bitcast i8* %648 to i64*
  br label %650

650:                                              ; preds = %645, %637
  %651 = phi i64 [ %646, %645 ], [ 0, %637 ]
  %652 = phi i64* [ %649, %645 ], [ null, %637 ]
  %653 = getelementptr inbounds i64, i64* %652, i64 %627
  %654 = getelementptr inbounds i64, i64* %652, i64 %651
  %655 = ptrtoint i64* %654 to i64
  store i64 %610, i64* %653, align 8
  %656 = getelementptr inbounds i64, i64* %653, i64 1
  %657 = ptrtoint i64* %656 to i64
  %658 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 0
  %659 = load i64*, i64** %658, align 8
  %660 = load i64, i64* %623, align 8
  %661 = ptrtoint i64* %659 to i64
  %662 = sub i64 %660, %661
  %663 = ashr exact i64 %662, 3
  %664 = sub nsw i64 0, %663
  %665 = getelementptr inbounds i64, i64* %653, i64 %664
  %666 = ptrtoint i64* %665 to i64
  %667 = icmp sgt i64 %662, 0
  br i1 %667, label %668, label %672

668:                                              ; preds = %650
  %669 = bitcast i64* %665 to i8*
  %670 = bitcast i64* %659 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %669, i8* align 8 %670, i64 %662, i1 false) #9
  %671 = load i64*, i64** %658, align 8
  br label %672

672:                                              ; preds = %668, %650
  %673 = phi i64* [ %659, %650 ], [ %671, %668 ]
  store i64 %666, i64* %624, align 8
  store i64 %657, i64* %623, align 8
  store i64 %655, i64* %633, align 8
  %674 = icmp eq i64* %673, null
  br i1 %674, label %677, label %675

675:                                              ; preds = %672
  %676 = bitcast i64* %673 to i8*
  call void @_ZdlPv(i8* %676) #12
  br label %677

677:                                              ; preds = %456, %617, %672, %675
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10tensorflow4text10RegexSplitEN4absl11string_viewERKN3re23RE2EbS6_PNSt3__16vectorIS2_NS7_9allocatorIS2_EEEEPNS8_IxNS9_IxEEEESF_(i8*, i64, %"class.re2::RE2"* dereferenceable(200), i1 zeroext, %"class.re2::RE2"* dereferenceable(200), %"class.std::__1::vector"*, %"class.std::__1::vector.14"*, %"class.std::__1::vector.14"*) local_unnamed_addr #0 {
  %9 = alloca %"class.re2::StringPiece", align 8
  %10 = alloca [1 x %"class.re2::RE2::Arg"*], align 8
  %11 = alloca %"class.re2::RE2::Arg", align 8
  %12 = alloca %"class.re2::StringPiece", align 8
  %13 = alloca %"class.re2::StringPiece", align 8
  %14 = bitcast %"class.re2::StringPiece"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %12, i64 0, i32 0
  %16 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %12, i64 0, i32 1
  store i64 -6148914691236517206, i64* %16, align 8
  store i8* %0, i8** %15, align 8
  %17 = icmp eq i8* %0, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %8
  %19 = tail call i64 @strlen(i8* nonnull %0) #10
  br label %20

20:                                               ; preds = %18, %8
  %21 = phi i64 [ %19, %18 ], [ 0, %8 ]
  store i64 %21, i64* %16, align 8
  %22 = bitcast %"class.re2::StringPiece"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #9
  %23 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %13, i64 0, i32 0
  %24 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %13, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 16, i1 false) #9
  %25 = ptrtoint %"class.re2::StringPiece"* %13 to i64
  %26 = bitcast %"class.re2::RE2::Arg"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  %27 = bitcast %"class.re2::RE2::Arg"* %11 to i64*
  store i64 %25, i64* %27, align 8
  %28 = getelementptr inbounds %"class.re2::RE2::Arg", %"class.re2::RE2::Arg"* %11, i64 0, i32 1
  store i1 (i8*, i64, i8*)* @_ZN3re23RE23Arg11DoParse3aryINS_11StringPieceEEEbPKcmPv, i1 (i8*, i64, i8*)** %28, align 8
  %29 = bitcast [1 x %"class.re2::RE2::Arg"*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  %30 = getelementptr inbounds [1 x %"class.re2::RE2::Arg"*], [1 x %"class.re2::RE2::Arg"*]* %10, i64 0, i64 0
  store %"class.re2::RE2::Arg"* %11, %"class.re2::RE2::Arg"** %30, align 8
  %31 = call zeroext i1 @_ZN3re23RE215FindAndConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull %12, %"class.re2::RE2"* dereferenceable(200) %2, %"class.re2::RE2::Arg"** nonnull %30, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  br i1 %31, label %32, label %456

32:                                               ; preds = %20
  %33 = bitcast %"class.re2::StringPiece"* %13 to i64*
  %34 = bitcast %"class.re2::StringPiece"* %9 to i8*
  %35 = bitcast %"class.re2::StringPiece"* %9 to i64*
  %36 = getelementptr inbounds %"class.re2::StringPiece", %"class.re2::StringPiece"* %9, i64 0, i32 1
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %39 = bitcast %"class.absl::string_view"** %37 to i64*
  %40 = bitcast %"class.std::__1::vector"* %5 to i64*
  %41 = bitcast %"class.absl::string_view"** %38 to i64*
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %43 = ptrtoint i8* %0 to i64
  %44 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %6, i64 0, i32 0, i32 1
  %45 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %46 = bitcast i64** %44 to i64*
  %47 = bitcast %"class.std::__1::vector.14"* %6 to i64*
  %48 = bitcast i64** %45 to i64*
  %49 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %6, i64 0, i32 0, i32 0
  %50 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %7, i64 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %52 = bitcast i64** %50 to i64*
  %53 = bitcast %"class.std::__1::vector.14"* %7 to i64*
  %54 = bitcast i64** %51 to i64*
  %55 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %7, i64 0, i32 0, i32 0
  br label %56

56:                                               ; preds = %454, %32
  %57 = phi i8* [ %0, %32 ], [ %70, %454 ]
  %58 = load i64, i64* %33, align 8
  %59 = ptrtoint i8* %57 to i64
  %60 = sub i64 %58, %59
  %61 = icmp sgt i64 %60, -1
  br i1 %61, label %63, label %62, !prof !2

62:                                               ; preds = %56
  call void @llvm.trap() #9
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %60, 0
  br i1 %3, label %65, label %68

65:                                               ; preds = %63
  %66 = load i64, i64* %24, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #9
  store i64 %58, i64* %35, align 8
  store i64 %66, i64* %36, align 8
  %67 = call zeroext i1 @_ZN3re23RE210FullMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull dereferenceable(16) %9, %"class.re2::RE2"* dereferenceable(200) %4, %"class.re2::RE2::Arg"** null, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #9
  br label %68

68:                                               ; preds = %65, %63
  %69 = phi i1 [ false, %63 ], [ %67, %65 ]
  %70 = load i8*, i8** %15, align 8
  br i1 %64, label %257, label %71

71:                                               ; preds = %68
  %72 = load %"class.absl::string_view"*, %"class.absl::string_view"** %37, align 8
  %73 = load %"class.absl::string_view"*, %"class.absl::string_view"** %38, align 8
  %74 = icmp eq %"class.absl::string_view"* %72, %73
  %75 = ptrtoint %"class.absl::string_view"* %73 to i64
  br i1 %74, label %81, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %72, i64 0, i32 0
  store i8* %57, i8** %77, align 8
  %78 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %72, i64 0, i32 1
  store i64 %60, i64* %78, align 8
  %79 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %72, i64 1
  %80 = ptrtoint %"class.absl::string_view"* %79 to i64
  store i64 %80, i64* %39, align 8
  br label %135

81:                                               ; preds = %71
  %82 = ptrtoint %"class.absl::string_view"* %72 to i64
  %83 = load i64, i64* %40, align 8
  %84 = sub i64 %82, %83
  %85 = ashr exact i64 %84, 4
  %86 = add nsw i64 %85, 1
  %87 = icmp ugt i64 %86, 1152921504606846975
  br i1 %87, label %88, label %90

88:                                               ; preds = %81
  %89 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %89) #11
  unreachable

90:                                               ; preds = %81
  %91 = sub i64 %75, %83
  %92 = ashr exact i64 %91, 4
  %93 = icmp ult i64 %92, 576460752303423487
  br i1 %93, label %94, label %102

94:                                               ; preds = %90
  %95 = ashr exact i64 %91, 3
  %96 = icmp ult i64 %95, %86
  %97 = select i1 %96, i64 %86, i64 %95
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %94
  %100 = icmp ugt i64 %97, 1152921504606846975
  br i1 %100, label %101, label %102

101:                                              ; preds = %99
  call void @abort() #11
  unreachable

102:                                              ; preds = %99, %90
  %103 = phi i64 [ %97, %99 ], [ 1152921504606846975, %90 ]
  %104 = shl i64 %103, 4
  %105 = call i8* @_Znwm(i64 %104) #12
  %106 = bitcast i8* %105 to %"class.absl::string_view"*
  br label %107

107:                                              ; preds = %102, %94
  %108 = phi i64 [ %103, %102 ], [ 0, %94 ]
  %109 = phi %"class.absl::string_view"* [ %106, %102 ], [ null, %94 ]
  %110 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %109, i64 %85
  %111 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %109, i64 %108
  %112 = ptrtoint %"class.absl::string_view"* %111 to i64
  %113 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %110, i64 0, i32 0
  store i8* %57, i8** %113, align 8
  %114 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %109, i64 %85, i32 1
  store i64 %60, i64* %114, align 8
  %115 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %110, i64 1
  %116 = ptrtoint %"class.absl::string_view"* %115 to i64
  %117 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  %118 = load i64, i64* %39, align 8
  %119 = ptrtoint %"class.absl::string_view"* %117 to i64
  %120 = sub i64 %118, %119
  %121 = ashr exact i64 %120, 4
  %122 = sub nsw i64 0, %121
  %123 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %110, i64 %122
  %124 = ptrtoint %"class.absl::string_view"* %123 to i64
  %125 = icmp sgt i64 %120, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %107
  %127 = bitcast %"class.absl::string_view"* %123 to i8*
  %128 = bitcast %"class.absl::string_view"* %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 %120, i1 false) #9
  %129 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  br label %130

130:                                              ; preds = %126, %107
  %131 = phi %"class.absl::string_view"* [ %117, %107 ], [ %129, %126 ]
  store i64 %124, i64* %40, align 8
  store i64 %116, i64* %39, align 8
  store i64 %112, i64* %41, align 8
  %132 = icmp eq %"class.absl::string_view"* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %130
  %134 = bitcast %"class.absl::string_view"* %131 to i8*
  call void @_ZdlPv(i8* %134) #12
  br label %135

135:                                              ; preds = %133, %130, %76
  %136 = sub i64 %59, %43
  %137 = load i64*, i64** %44, align 8
  %138 = load i64*, i64** %45, align 8
  %139 = icmp ult i64* %137, %138
  %140 = ptrtoint i64* %138 to i64
  br i1 %139, label %141, label %144

141:                                              ; preds = %135
  store i64 %136, i64* %137, align 8
  %142 = getelementptr inbounds i64, i64* %137, i64 1
  %143 = ptrtoint i64* %142 to i64
  store i64 %143, i64* %46, align 8
  br label %196

144:                                              ; preds = %135
  %145 = ptrtoint i64* %137 to i64
  %146 = load i64, i64* %47, align 8
  %147 = sub i64 %145, %146
  %148 = ashr exact i64 %147, 3
  %149 = add nsw i64 %148, 1
  %150 = icmp ugt i64 %149, 2305843009213693951
  br i1 %150, label %151, label %153

151:                                              ; preds = %144
  %152 = bitcast %"class.std::__1::vector.14"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %152) #11
  unreachable

153:                                              ; preds = %144
  %154 = sub i64 %140, %146
  %155 = ashr exact i64 %154, 3
  %156 = icmp ult i64 %155, 1152921504606846975
  br i1 %156, label %157, label %165

157:                                              ; preds = %153
  %158 = ashr exact i64 %154, 2
  %159 = icmp ult i64 %158, %149
  %160 = select i1 %159, i64 %149, i64 %158
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %170, label %162

162:                                              ; preds = %157
  %163 = icmp ugt i64 %160, 2305843009213693951
  br i1 %163, label %164, label %165

164:                                              ; preds = %162
  call void @abort() #11
  unreachable

165:                                              ; preds = %162, %153
  %166 = phi i64 [ %160, %162 ], [ 2305843009213693951, %153 ]
  %167 = shl i64 %166, 3
  %168 = call i8* @_Znwm(i64 %167) #12
  %169 = bitcast i8* %168 to i64*
  br label %170

170:                                              ; preds = %165, %157
  %171 = phi i64 [ %166, %165 ], [ 0, %157 ]
  %172 = phi i64* [ %169, %165 ], [ null, %157 ]
  %173 = getelementptr inbounds i64, i64* %172, i64 %148
  %174 = getelementptr inbounds i64, i64* %172, i64 %171
  %175 = ptrtoint i64* %174 to i64
  store i64 %136, i64* %173, align 8
  %176 = getelementptr inbounds i64, i64* %173, i64 1
  %177 = ptrtoint i64* %176 to i64
  %178 = load i64*, i64** %49, align 8
  %179 = load i64, i64* %46, align 8
  %180 = ptrtoint i64* %178 to i64
  %181 = sub i64 %179, %180
  %182 = ashr exact i64 %181, 3
  %183 = sub nsw i64 0, %182
  %184 = getelementptr inbounds i64, i64* %173, i64 %183
  %185 = ptrtoint i64* %184 to i64
  %186 = icmp sgt i64 %181, 0
  br i1 %186, label %187, label %191

187:                                              ; preds = %170
  %188 = bitcast i64* %184 to i8*
  %189 = bitcast i64* %178 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* align 8 %189, i64 %181, i1 false) #9
  %190 = load i64*, i64** %49, align 8
  br label %191

191:                                              ; preds = %187, %170
  %192 = phi i64* [ %178, %170 ], [ %190, %187 ]
  store i64 %185, i64* %47, align 8
  store i64 %177, i64* %46, align 8
  store i64 %175, i64* %48, align 8
  %193 = icmp eq i64* %192, null
  br i1 %193, label %196, label %194

194:                                              ; preds = %191
  %195 = bitcast i64* %192 to i8*
  call void @_ZdlPv(i8* %195) #12
  br label %196

196:                                              ; preds = %194, %191, %141
  %197 = sub i64 %58, %43
  %198 = load i64*, i64** %50, align 8
  %199 = load i64*, i64** %51, align 8
  %200 = icmp ult i64* %198, %199
  %201 = ptrtoint i64* %199 to i64
  br i1 %200, label %202, label %205

202:                                              ; preds = %196
  store i64 %197, i64* %198, align 8
  %203 = getelementptr inbounds i64, i64* %198, i64 1
  %204 = ptrtoint i64* %203 to i64
  store i64 %204, i64* %52, align 8
  br label %257

205:                                              ; preds = %196
  %206 = ptrtoint i64* %198 to i64
  %207 = load i64, i64* %53, align 8
  %208 = sub i64 %206, %207
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = icmp ugt i64 %210, 2305843009213693951
  br i1 %211, label %212, label %214

212:                                              ; preds = %205
  %213 = bitcast %"class.std::__1::vector.14"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %213) #11
  unreachable

214:                                              ; preds = %205
  %215 = sub i64 %201, %207
  %216 = ashr exact i64 %215, 3
  %217 = icmp ult i64 %216, 1152921504606846975
  br i1 %217, label %218, label %226

218:                                              ; preds = %214
  %219 = ashr exact i64 %215, 2
  %220 = icmp ult i64 %219, %210
  %221 = select i1 %220, i64 %210, i64 %219
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %231, label %223

223:                                              ; preds = %218
  %224 = icmp ugt i64 %221, 2305843009213693951
  br i1 %224, label %225, label %226

225:                                              ; preds = %223
  call void @abort() #11
  unreachable

226:                                              ; preds = %223, %214
  %227 = phi i64 [ %221, %223 ], [ 2305843009213693951, %214 ]
  %228 = shl i64 %227, 3
  %229 = call i8* @_Znwm(i64 %228) #12
  %230 = bitcast i8* %229 to i64*
  br label %231

231:                                              ; preds = %226, %218
  %232 = phi i64 [ %227, %226 ], [ 0, %218 ]
  %233 = phi i64* [ %230, %226 ], [ null, %218 ]
  %234 = getelementptr inbounds i64, i64* %233, i64 %209
  %235 = getelementptr inbounds i64, i64* %233, i64 %232
  %236 = ptrtoint i64* %235 to i64
  store i64 %197, i64* %234, align 8
  %237 = getelementptr inbounds i64, i64* %234, i64 1
  %238 = ptrtoint i64* %237 to i64
  %239 = load i64*, i64** %55, align 8
  %240 = load i64, i64* %52, align 8
  %241 = ptrtoint i64* %239 to i64
  %242 = sub i64 %240, %241
  %243 = ashr exact i64 %242, 3
  %244 = sub nsw i64 0, %243
  %245 = getelementptr inbounds i64, i64* %234, i64 %244
  %246 = ptrtoint i64* %245 to i64
  %247 = icmp sgt i64 %242, 0
  br i1 %247, label %248, label %252

248:                                              ; preds = %231
  %249 = bitcast i64* %245 to i8*
  %250 = bitcast i64* %239 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %250, i64 %242, i1 false) #9
  %251 = load i64*, i64** %55, align 8
  br label %252

252:                                              ; preds = %248, %231
  %253 = phi i64* [ %239, %231 ], [ %251, %248 ]
  store i64 %246, i64* %53, align 8
  store i64 %238, i64* %52, align 8
  store i64 %236, i64* %54, align 8
  %254 = icmp eq i64* %253, null
  br i1 %254, label %257, label %255

255:                                              ; preds = %252
  %256 = bitcast i64* %253 to i8*
  call void @_ZdlPv(i8* %256) #12
  br label %257

257:                                              ; preds = %255, %252, %202, %68
  br i1 %69, label %258, label %454

258:                                              ; preds = %257
  %259 = load i64, i64* %33, align 8
  %260 = load i64, i64* %24, align 8
  %261 = icmp sgt i64 %260, -1
  br i1 %261, label %263, label %262, !prof !2

262:                                              ; preds = %258
  call void @llvm.trap() #9
  unreachable

263:                                              ; preds = %258
  %264 = load %"class.absl::string_view"*, %"class.absl::string_view"** %37, align 8
  %265 = load %"class.absl::string_view"*, %"class.absl::string_view"** %38, align 8
  %266 = icmp ult %"class.absl::string_view"* %264, %265
  %267 = ptrtoint %"class.absl::string_view"* %265 to i64
  br i1 %266, label %268, label %273

268:                                              ; preds = %263
  %269 = bitcast %"class.absl::string_view"* %264 to i64*
  store i64 %259, i64* %269, align 8
  %270 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %264, i64 0, i32 1
  store i64 %260, i64* %270, align 8
  %271 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %264, i64 1
  %272 = ptrtoint %"class.absl::string_view"* %271 to i64
  store i64 %272, i64* %39, align 8
  br label %327

273:                                              ; preds = %263
  %274 = ptrtoint %"class.absl::string_view"* %264 to i64
  %275 = load i64, i64* %40, align 8
  %276 = sub i64 %274, %275
  %277 = ashr exact i64 %276, 4
  %278 = add nsw i64 %277, 1
  %279 = icmp ugt i64 %278, 1152921504606846975
  br i1 %279, label %280, label %282

280:                                              ; preds = %273
  %281 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %281) #11
  unreachable

282:                                              ; preds = %273
  %283 = sub i64 %267, %275
  %284 = ashr exact i64 %283, 4
  %285 = icmp ult i64 %284, 576460752303423487
  br i1 %285, label %286, label %294

286:                                              ; preds = %282
  %287 = ashr exact i64 %283, 3
  %288 = icmp ult i64 %287, %278
  %289 = select i1 %288, i64 %278, i64 %287
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %299, label %291

291:                                              ; preds = %286
  %292 = icmp ugt i64 %289, 1152921504606846975
  br i1 %292, label %293, label %294

293:                                              ; preds = %291
  call void @abort() #11
  unreachable

294:                                              ; preds = %291, %282
  %295 = phi i64 [ %289, %291 ], [ 1152921504606846975, %282 ]
  %296 = shl i64 %295, 4
  %297 = call i8* @_Znwm(i64 %296) #12
  %298 = bitcast i8* %297 to %"class.absl::string_view"*
  br label %299

299:                                              ; preds = %294, %286
  %300 = phi i64 [ %295, %294 ], [ 0, %286 ]
  %301 = phi %"class.absl::string_view"* [ %298, %294 ], [ null, %286 ]
  %302 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %301, i64 %277
  %303 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %301, i64 %300
  %304 = ptrtoint %"class.absl::string_view"* %303 to i64
  %305 = bitcast %"class.absl::string_view"* %302 to i64*
  store i64 %259, i64* %305, align 8
  %306 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %301, i64 %277, i32 1
  store i64 %260, i64* %306, align 8
  %307 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %302, i64 1
  %308 = ptrtoint %"class.absl::string_view"* %307 to i64
  %309 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  %310 = load i64, i64* %39, align 8
  %311 = ptrtoint %"class.absl::string_view"* %309 to i64
  %312 = sub i64 %310, %311
  %313 = ashr exact i64 %312, 4
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %302, i64 %314
  %316 = ptrtoint %"class.absl::string_view"* %315 to i64
  %317 = icmp sgt i64 %312, 0
  br i1 %317, label %318, label %322

318:                                              ; preds = %299
  %319 = bitcast %"class.absl::string_view"* %315 to i8*
  %320 = bitcast %"class.absl::string_view"* %309 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %319, i8* align 8 %320, i64 %312, i1 false) #9
  %321 = load %"class.absl::string_view"*, %"class.absl::string_view"** %42, align 8
  br label %322

322:                                              ; preds = %318, %299
  %323 = phi %"class.absl::string_view"* [ %309, %299 ], [ %321, %318 ]
  store i64 %316, i64* %40, align 8
  store i64 %308, i64* %39, align 8
  store i64 %304, i64* %41, align 8
  %324 = icmp eq %"class.absl::string_view"* %323, null
  br i1 %324, label %327, label %325

325:                                              ; preds = %322
  %326 = bitcast %"class.absl::string_view"* %323 to i8*
  call void @_ZdlPv(i8* %326) #12
  br label %327

327:                                              ; preds = %325, %322, %268
  %328 = load i64, i64* %33, align 8
  %329 = sub i64 %328, %43
  %330 = load i64*, i64** %44, align 8
  %331 = load i64*, i64** %45, align 8
  %332 = icmp ult i64* %330, %331
  %333 = ptrtoint i64* %331 to i64
  br i1 %332, label %334, label %337

334:                                              ; preds = %327
  store i64 %329, i64* %330, align 8
  %335 = getelementptr inbounds i64, i64* %330, i64 1
  %336 = ptrtoint i64* %335 to i64
  store i64 %336, i64* %46, align 8
  br label %389

337:                                              ; preds = %327
  %338 = ptrtoint i64* %330 to i64
  %339 = load i64, i64* %47, align 8
  %340 = sub i64 %338, %339
  %341 = ashr exact i64 %340, 3
  %342 = add nsw i64 %341, 1
  %343 = icmp ugt i64 %342, 2305843009213693951
  br i1 %343, label %344, label %346

344:                                              ; preds = %337
  %345 = bitcast %"class.std::__1::vector.14"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %345) #11
  unreachable

346:                                              ; preds = %337
  %347 = sub i64 %333, %339
  %348 = ashr exact i64 %347, 3
  %349 = icmp ult i64 %348, 1152921504606846975
  br i1 %349, label %350, label %358

350:                                              ; preds = %346
  %351 = ashr exact i64 %347, 2
  %352 = icmp ult i64 %351, %342
  %353 = select i1 %352, i64 %342, i64 %351
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %363, label %355

355:                                              ; preds = %350
  %356 = icmp ugt i64 %353, 2305843009213693951
  br i1 %356, label %357, label %358

357:                                              ; preds = %355
  call void @abort() #11
  unreachable

358:                                              ; preds = %355, %346
  %359 = phi i64 [ %353, %355 ], [ 2305843009213693951, %346 ]
  %360 = shl i64 %359, 3
  %361 = call i8* @_Znwm(i64 %360) #12
  %362 = bitcast i8* %361 to i64*
  br label %363

363:                                              ; preds = %358, %350
  %364 = phi i64 [ %359, %358 ], [ 0, %350 ]
  %365 = phi i64* [ %362, %358 ], [ null, %350 ]
  %366 = getelementptr inbounds i64, i64* %365, i64 %341
  %367 = getelementptr inbounds i64, i64* %365, i64 %364
  %368 = ptrtoint i64* %367 to i64
  store i64 %329, i64* %366, align 8
  %369 = getelementptr inbounds i64, i64* %366, i64 1
  %370 = ptrtoint i64* %369 to i64
  %371 = load i64*, i64** %49, align 8
  %372 = load i64, i64* %46, align 8
  %373 = ptrtoint i64* %371 to i64
  %374 = sub i64 %372, %373
  %375 = ashr exact i64 %374, 3
  %376 = sub nsw i64 0, %375
  %377 = getelementptr inbounds i64, i64* %366, i64 %376
  %378 = ptrtoint i64* %377 to i64
  %379 = icmp sgt i64 %374, 0
  br i1 %379, label %380, label %384

380:                                              ; preds = %363
  %381 = bitcast i64* %377 to i8*
  %382 = bitcast i64* %371 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %381, i8* align 8 %382, i64 %374, i1 false) #9
  %383 = load i64*, i64** %49, align 8
  br label %384

384:                                              ; preds = %380, %363
  %385 = phi i64* [ %371, %363 ], [ %383, %380 ]
  store i64 %378, i64* %47, align 8
  store i64 %370, i64* %46, align 8
  store i64 %368, i64* %48, align 8
  %386 = icmp eq i64* %385, null
  br i1 %386, label %389, label %387

387:                                              ; preds = %384
  %388 = bitcast i64* %385 to i8*
  call void @_ZdlPv(i8* %388) #12
  br label %389

389:                                              ; preds = %387, %384, %334
  %390 = load i8*, i8** %23, align 8
  %391 = load i64, i64* %24, align 8
  %392 = getelementptr inbounds i8, i8* %390, i64 %391
  %393 = ptrtoint i8* %392 to i64
  %394 = sub i64 %393, %43
  %395 = load i64*, i64** %50, align 8
  %396 = load i64*, i64** %51, align 8
  %397 = icmp ult i64* %395, %396
  %398 = ptrtoint i64* %396 to i64
  br i1 %397, label %399, label %402

399:                                              ; preds = %389
  store i64 %394, i64* %395, align 8
  %400 = getelementptr inbounds i64, i64* %395, i64 1
  %401 = ptrtoint i64* %400 to i64
  store i64 %401, i64* %52, align 8
  br label %454

402:                                              ; preds = %389
  %403 = ptrtoint i64* %395 to i64
  %404 = load i64, i64* %53, align 8
  %405 = sub i64 %403, %404
  %406 = ashr exact i64 %405, 3
  %407 = add nsw i64 %406, 1
  %408 = icmp ugt i64 %407, 2305843009213693951
  br i1 %408, label %409, label %411

409:                                              ; preds = %402
  %410 = bitcast %"class.std::__1::vector.14"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %410) #11
  unreachable

411:                                              ; preds = %402
  %412 = sub i64 %398, %404
  %413 = ashr exact i64 %412, 3
  %414 = icmp ult i64 %413, 1152921504606846975
  br i1 %414, label %415, label %423

415:                                              ; preds = %411
  %416 = ashr exact i64 %412, 2
  %417 = icmp ult i64 %416, %407
  %418 = select i1 %417, i64 %407, i64 %416
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %428, label %420

420:                                              ; preds = %415
  %421 = icmp ugt i64 %418, 2305843009213693951
  br i1 %421, label %422, label %423

422:                                              ; preds = %420
  call void @abort() #11
  unreachable

423:                                              ; preds = %420, %411
  %424 = phi i64 [ %418, %420 ], [ 2305843009213693951, %411 ]
  %425 = shl i64 %424, 3
  %426 = call i8* @_Znwm(i64 %425) #12
  %427 = bitcast i8* %426 to i64*
  br label %428

428:                                              ; preds = %423, %415
  %429 = phi i64 [ %424, %423 ], [ 0, %415 ]
  %430 = phi i64* [ %427, %423 ], [ null, %415 ]
  %431 = getelementptr inbounds i64, i64* %430, i64 %406
  %432 = getelementptr inbounds i64, i64* %430, i64 %429
  %433 = ptrtoint i64* %432 to i64
  store i64 %394, i64* %431, align 8
  %434 = getelementptr inbounds i64, i64* %431, i64 1
  %435 = ptrtoint i64* %434 to i64
  %436 = load i64*, i64** %55, align 8
  %437 = load i64, i64* %52, align 8
  %438 = ptrtoint i64* %436 to i64
  %439 = sub i64 %437, %438
  %440 = ashr exact i64 %439, 3
  %441 = sub nsw i64 0, %440
  %442 = getelementptr inbounds i64, i64* %431, i64 %441
  %443 = ptrtoint i64* %442 to i64
  %444 = icmp sgt i64 %439, 0
  br i1 %444, label %445, label %449

445:                                              ; preds = %428
  %446 = bitcast i64* %442 to i8*
  %447 = bitcast i64* %436 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %446, i8* align 8 %447, i64 %439, i1 false) #9
  %448 = load i64*, i64** %55, align 8
  br label %449

449:                                              ; preds = %445, %428
  %450 = phi i64* [ %436, %428 ], [ %448, %445 ]
  store i64 %443, i64* %53, align 8
  store i64 %435, i64* %52, align 8
  store i64 %433, i64* %54, align 8
  %451 = icmp eq i64* %450, null
  br i1 %451, label %454, label %452

452:                                              ; preds = %449
  %453 = bitcast i64* %450 to i8*
  call void @_ZdlPv(i8* %453) #12
  br label %454

454:                                              ; preds = %452, %449, %399, %257
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  store i64 %25, i64* %27, align 8
  store i1 (i8*, i64, i8*)* @_ZN3re23RE23Arg11DoParse3aryINS_11StringPieceEEEbPKcmPv, i1 (i8*, i64, i8*)** %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  store %"class.re2::RE2::Arg"* %11, %"class.re2::RE2::Arg"** %30, align 8
  %455 = call zeroext i1 @_ZN3re23RE215FindAndConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* nonnull %12, %"class.re2::RE2"* dereferenceable(200) %2, %"class.re2::RE2::Arg"** nonnull %30, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  br i1 %455, label %56, label %456

456:                                              ; preds = %454, %20
  %457 = load i64, i64* %16, align 8
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %677, label %459

459:                                              ; preds = %456
  %460 = bitcast %"class.re2::StringPiece"* %12 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = icmp sgt i64 %457, -1
  br i1 %462, label %464, label %463, !prof !2

463:                                              ; preds = %459
  call void @llvm.trap() #9
  unreachable

464:                                              ; preds = %459
  %465 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %466 = load %"class.absl::string_view"*, %"class.absl::string_view"** %465, align 8
  %467 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %468 = load %"class.absl::string_view"*, %"class.absl::string_view"** %467, align 8
  %469 = icmp ult %"class.absl::string_view"* %466, %468
  %470 = ptrtoint %"class.absl::string_view"* %468 to i64
  br i1 %469, label %471, label %477

471:                                              ; preds = %464
  %472 = bitcast %"class.absl::string_view"* %466 to i64*
  store i64 %461, i64* %472, align 8
  %473 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %466, i64 0, i32 1
  store i64 %457, i64* %473, align 8
  %474 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %466, i64 1
  %475 = ptrtoint %"class.absl::string_view"* %474 to i64
  %476 = bitcast %"class.absl::string_view"** %465 to i64*
  store i64 %475, i64* %476, align 8
  br label %535

477:                                              ; preds = %464
  %478 = ptrtoint %"class.absl::string_view"* %466 to i64
  %479 = bitcast %"class.absl::string_view"** %465 to i64*
  %480 = bitcast %"class.std::__1::vector"* %5 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %478, %481
  %483 = ashr exact i64 %482, 4
  %484 = add nsw i64 %483, 1
  %485 = icmp ugt i64 %484, 1152921504606846975
  br i1 %485, label %486, label %488

486:                                              ; preds = %477
  %487 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %487) #11
  unreachable

488:                                              ; preds = %477
  %489 = bitcast %"class.absl::string_view"** %467 to i64*
  %490 = sub i64 %470, %481
  %491 = ashr exact i64 %490, 4
  %492 = icmp ult i64 %491, 576460752303423487
  br i1 %492, label %493, label %501

493:                                              ; preds = %488
  %494 = ashr exact i64 %490, 3
  %495 = icmp ult i64 %494, %484
  %496 = select i1 %495, i64 %484, i64 %494
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %506, label %498

498:                                              ; preds = %493
  %499 = icmp ugt i64 %496, 1152921504606846975
  br i1 %499, label %500, label %501

500:                                              ; preds = %498
  call void @abort() #11
  unreachable

501:                                              ; preds = %498, %488
  %502 = phi i64 [ %496, %498 ], [ 1152921504606846975, %488 ]
  %503 = shl i64 %502, 4
  %504 = call i8* @_Znwm(i64 %503) #12
  %505 = bitcast i8* %504 to %"class.absl::string_view"*
  br label %506

506:                                              ; preds = %501, %493
  %507 = phi i64 [ %502, %501 ], [ 0, %493 ]
  %508 = phi %"class.absl::string_view"* [ %505, %501 ], [ null, %493 ]
  %509 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %508, i64 %483
  %510 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %508, i64 %507
  %511 = ptrtoint %"class.absl::string_view"* %510 to i64
  %512 = bitcast %"class.absl::string_view"* %509 to i64*
  store i64 %461, i64* %512, align 8
  %513 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %508, i64 %483, i32 1
  store i64 %457, i64* %513, align 8
  %514 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %509, i64 1
  %515 = ptrtoint %"class.absl::string_view"* %514 to i64
  %516 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %517 = load %"class.absl::string_view"*, %"class.absl::string_view"** %516, align 8
  %518 = load i64, i64* %479, align 8
  %519 = ptrtoint %"class.absl::string_view"* %517 to i64
  %520 = sub i64 %518, %519
  %521 = ashr exact i64 %520, 4
  %522 = sub nsw i64 0, %521
  %523 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %509, i64 %522
  %524 = ptrtoint %"class.absl::string_view"* %523 to i64
  %525 = icmp sgt i64 %520, 0
  br i1 %525, label %526, label %530

526:                                              ; preds = %506
  %527 = bitcast %"class.absl::string_view"* %523 to i8*
  %528 = bitcast %"class.absl::string_view"* %517 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %527, i8* align 8 %528, i64 %520, i1 false) #9
  %529 = load %"class.absl::string_view"*, %"class.absl::string_view"** %516, align 8
  br label %530

530:                                              ; preds = %526, %506
  %531 = phi %"class.absl::string_view"* [ %517, %506 ], [ %529, %526 ]
  store i64 %524, i64* %480, align 8
  store i64 %515, i64* %479, align 8
  store i64 %511, i64* %489, align 8
  %532 = icmp eq %"class.absl::string_view"* %531, null
  br i1 %532, label %535, label %533

533:                                              ; preds = %530
  %534 = bitcast %"class.absl::string_view"* %531 to i8*
  call void @_ZdlPv(i8* %534) #12
  br label %535

535:                                              ; preds = %533, %530, %471
  %536 = load i64, i64* %460, align 8
  %537 = ptrtoint i8* %0 to i64
  %538 = sub i64 %536, %537
  %539 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %6, i64 0, i32 0, i32 1
  %540 = load i64*, i64** %539, align 8
  %541 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %542 = load i64*, i64** %541, align 8
  %543 = icmp ult i64* %540, %542
  %544 = ptrtoint i64* %542 to i64
  br i1 %543, label %545, label %549

545:                                              ; preds = %535
  store i64 %538, i64* %540, align 8
  %546 = getelementptr inbounds i64, i64* %540, i64 1
  %547 = ptrtoint i64* %546 to i64
  %548 = bitcast i64** %539 to i64*
  store i64 %547, i64* %548, align 8
  br label %605

549:                                              ; preds = %535
  %550 = ptrtoint i64* %540 to i64
  %551 = bitcast i64** %539 to i64*
  %552 = bitcast %"class.std::__1::vector.14"* %6 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = sub i64 %550, %553
  %555 = ashr exact i64 %554, 3
  %556 = add nsw i64 %555, 1
  %557 = icmp ugt i64 %556, 2305843009213693951
  br i1 %557, label %558, label %560

558:                                              ; preds = %549
  %559 = bitcast %"class.std::__1::vector.14"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %559) #11
  unreachable

560:                                              ; preds = %549
  %561 = bitcast i64** %541 to i64*
  %562 = sub i64 %544, %553
  %563 = ashr exact i64 %562, 3
  %564 = icmp ult i64 %563, 1152921504606846975
  br i1 %564, label %565, label %573

565:                                              ; preds = %560
  %566 = ashr exact i64 %562, 2
  %567 = icmp ult i64 %566, %556
  %568 = select i1 %567, i64 %556, i64 %566
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %578, label %570

570:                                              ; preds = %565
  %571 = icmp ugt i64 %568, 2305843009213693951
  br i1 %571, label %572, label %573

572:                                              ; preds = %570
  call void @abort() #11
  unreachable

573:                                              ; preds = %570, %560
  %574 = phi i64 [ %568, %570 ], [ 2305843009213693951, %560 ]
  %575 = shl i64 %574, 3
  %576 = call i8* @_Znwm(i64 %575) #12
  %577 = bitcast i8* %576 to i64*
  br label %578

578:                                              ; preds = %573, %565
  %579 = phi i64 [ %574, %573 ], [ 0, %565 ]
  %580 = phi i64* [ %577, %573 ], [ null, %565 ]
  %581 = getelementptr inbounds i64, i64* %580, i64 %555
  %582 = getelementptr inbounds i64, i64* %580, i64 %579
  %583 = ptrtoint i64* %582 to i64
  store i64 %538, i64* %581, align 8
  %584 = getelementptr inbounds i64, i64* %581, i64 1
  %585 = ptrtoint i64* %584 to i64
  %586 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %6, i64 0, i32 0, i32 0
  %587 = load i64*, i64** %586, align 8
  %588 = load i64, i64* %551, align 8
  %589 = ptrtoint i64* %587 to i64
  %590 = sub i64 %588, %589
  %591 = ashr exact i64 %590, 3
  %592 = sub nsw i64 0, %591
  %593 = getelementptr inbounds i64, i64* %581, i64 %592
  %594 = ptrtoint i64* %593 to i64
  %595 = icmp sgt i64 %590, 0
  br i1 %595, label %596, label %600

596:                                              ; preds = %578
  %597 = bitcast i64* %593 to i8*
  %598 = bitcast i64* %587 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %597, i8* align 8 %598, i64 %590, i1 false) #9
  %599 = load i64*, i64** %586, align 8
  br label %600

600:                                              ; preds = %596, %578
  %601 = phi i64* [ %587, %578 ], [ %599, %596 ]
  store i64 %594, i64* %552, align 8
  store i64 %585, i64* %551, align 8
  store i64 %583, i64* %561, align 8
  %602 = icmp eq i64* %601, null
  br i1 %602, label %605, label %603

603:                                              ; preds = %600
  %604 = bitcast i64* %601 to i8*
  call void @_ZdlPv(i8* %604) #12
  br label %605

605:                                              ; preds = %603, %600, %545
  %606 = load i8*, i8** %15, align 8
  %607 = load i64, i64* %16, align 8
  %608 = getelementptr inbounds i8, i8* %606, i64 %607
  %609 = ptrtoint i8* %608 to i64
  %610 = sub i64 %609, %537
  %611 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %7, i64 0, i32 0, i32 1
  %612 = load i64*, i64** %611, align 8
  %613 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %614 = load i64*, i64** %613, align 8
  %615 = icmp ult i64* %612, %614
  %616 = ptrtoint i64* %614 to i64
  br i1 %615, label %617, label %621

617:                                              ; preds = %605
  store i64 %610, i64* %612, align 8
  %618 = getelementptr inbounds i64, i64* %612, i64 1
  %619 = ptrtoint i64* %618 to i64
  %620 = bitcast i64** %611 to i64*
  store i64 %619, i64* %620, align 8
  br label %677

621:                                              ; preds = %605
  %622 = ptrtoint i64* %612 to i64
  %623 = bitcast i64** %611 to i64*
  %624 = bitcast %"class.std::__1::vector.14"* %7 to i64*
  %625 = load i64, i64* %624, align 8
  %626 = sub i64 %622, %625
  %627 = ashr exact i64 %626, 3
  %628 = add nsw i64 %627, 1
  %629 = icmp ugt i64 %628, 2305843009213693951
  br i1 %629, label %630, label %632

630:                                              ; preds = %621
  %631 = bitcast %"class.std::__1::vector.14"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %631) #11
  unreachable

632:                                              ; preds = %621
  %633 = bitcast i64** %613 to i64*
  %634 = sub i64 %616, %625
  %635 = ashr exact i64 %634, 3
  %636 = icmp ult i64 %635, 1152921504606846975
  br i1 %636, label %637, label %645

637:                                              ; preds = %632
  %638 = ashr exact i64 %634, 2
  %639 = icmp ult i64 %638, %628
  %640 = select i1 %639, i64 %628, i64 %638
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %650, label %642

642:                                              ; preds = %637
  %643 = icmp ugt i64 %640, 2305843009213693951
  br i1 %643, label %644, label %645

644:                                              ; preds = %642
  call void @abort() #11
  unreachable

645:                                              ; preds = %642, %632
  %646 = phi i64 [ %640, %642 ], [ 2305843009213693951, %632 ]
  %647 = shl i64 %646, 3
  %648 = call i8* @_Znwm(i64 %647) #12
  %649 = bitcast i8* %648 to i64*
  br label %650

650:                                              ; preds = %645, %637
  %651 = phi i64 [ %646, %645 ], [ 0, %637 ]
  %652 = phi i64* [ %649, %645 ], [ null, %637 ]
  %653 = getelementptr inbounds i64, i64* %652, i64 %627
  %654 = getelementptr inbounds i64, i64* %652, i64 %651
  %655 = ptrtoint i64* %654 to i64
  store i64 %610, i64* %653, align 8
  %656 = getelementptr inbounds i64, i64* %653, i64 1
  %657 = ptrtoint i64* %656 to i64
  %658 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %7, i64 0, i32 0, i32 0
  %659 = load i64*, i64** %658, align 8
  %660 = load i64, i64* %623, align 8
  %661 = ptrtoint i64* %659 to i64
  %662 = sub i64 %660, %661
  %663 = ashr exact i64 %662, 3
  %664 = sub nsw i64 0, %663
  %665 = getelementptr inbounds i64, i64* %653, i64 %664
  %666 = ptrtoint i64* %665 to i64
  %667 = icmp sgt i64 %662, 0
  br i1 %667, label %668, label %672

668:                                              ; preds = %650
  %669 = bitcast i64* %665 to i8*
  %670 = bitcast i64* %659 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %669, i8* align 8 %670, i64 %662, i1 false) #9
  %671 = load i64*, i64** %658, align 8
  br label %672

672:                                              ; preds = %668, %650
  %673 = phi i64* [ %659, %650 ], [ %671, %668 ]
  store i64 %666, i64* %624, align 8
  store i64 %657, i64* %623, align 8
  store i64 %655, i64* %633, align 8
  %674 = icmp eq i64* %673, null
  br i1 %674, label %677, label %675

675:                                              ; preds = %672
  %676 = bitcast i64* %673 to i8*
  call void @_ZdlPv(i8* %676) #12
  br label %677

677:                                              ; preds = %456, %617, %672, %675
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

declare zeroext i1 @_ZN3re23RE215FindAndConsumeNEPNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"*, %"class.re2::RE2"* dereferenceable(200), %"class.re2::RE2::Arg"**, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3re23RE23Arg11DoParse3aryINS_11StringPieceEEEbPKcmPv(i8*, i64, i8*) #0 comdat align 2 {
  %4 = bitcast i8* %2 to %"class.re2::StringPiece"*
  %5 = tail call zeroext i1 @_ZN3re212re2_internal5ParseINS_11StringPieceEEEbPKcmPT_(i8* %0, i64 %1, %"class.re2::StringPiece"* %4) #9
  ret i1 %5
}

declare zeroext i1 @_ZN3re212re2_internal5ParseINS_11StringPieceEEEbPKcmPT_(i8*, i64, %"class.re2::StringPiece"*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare zeroext i1 @_ZN3re23RE210FullMatchNERKNS_11StringPieceERKS0_PKPKNS0_3ArgEi(%"class.re2::StringPiece"* dereferenceable(16), %"class.re2::RE2"* dereferenceable(200), %"class.re2::RE2::Arg"**, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
