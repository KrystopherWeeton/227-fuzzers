; ModuleID = '../../third_party/boringssl/src/crypto/x509/x_req.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/x_req.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_AUX_st = type { i8*, i32, i32, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)*, i32 }
%struct.ASN1_VALUE_st = type opaque
%struct.X509_REQ_INFO = type { %struct.ASN1_ENCODING_st, %struct.asn1_string_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.stack_st_X509_ATTRIBUTE* }
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type { %struct.X509_algor_st*, %struct.asn1_string_st*, %struct.evp_pkey_st* }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.evp_pkey_st = type { i32, i32, %union.anon.0, %struct.evp_pkey_asn1_method_st* }
%union.anon.0 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.stack_st_X509_ATTRIBUTE = type opaque
%struct.X509_req_st = type { %struct.X509_REQ_INFO*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32 }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }

@X509_REQ_INFO_seq_tt = internal constant [4 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_INTEGER_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_NAME_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_PUBKEY_it }, %struct.ASN1_TEMPLATE_st { i64 139, i64 0, i64 48, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_ATTRIBUTE_it }], align 16
@X509_REQ_INFO_aux = internal constant %struct.ASN1_AUX_st { i8* null, i32 2, i32 0, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* @rinf_cb, i32 0 }, align 8
@.str = private unnamed_addr constant [14 x i8] c"X509_REQ_INFO\00", align 1
@X509_REQ_INFO_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([4 x %struct.ASN1_TEMPLATE_st], [4 x %struct.ASN1_TEMPLATE_st]* @X509_REQ_INFO_seq_tt, i32 0, i32 0), i64 4, i8* bitcast (%struct.ASN1_AUX_st* @X509_REQ_INFO_aux to i8*), i64 56, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0) }, align 8
@X509_REQ_seq_tt = internal constant [3 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_REQ_INFO_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_ALGOR_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_BIT_STRING_it }], align 16
@X509_REQ_aux = internal constant %struct.ASN1_AUX_st { i8* null, i32 1, i32 24, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* null, i32 0 }, align 8
@.str.1 = private unnamed_addr constant [9 x i8] c"X509_REQ\00", align 1
@X509_REQ_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([3 x %struct.ASN1_TEMPLATE_st], [3 x %struct.ASN1_TEMPLATE_st]* @X509_REQ_seq_tt, i32 0, i32 0), i64 3, i8* bitcast (%struct.ASN1_AUX_st* @X509_REQ_aux to i8*), i64 32, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0) }, align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@ASN1_INTEGER_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.3 = private unnamed_addr constant [8 x i8] c"subject\00", align 1
@X509_NAME_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.4 = private unnamed_addr constant [7 x i8] c"pubkey\00", align 1
@X509_PUBKEY_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.5 = private unnamed_addr constant [11 x i8] c"attributes\00", align 1
@X509_ATTRIBUTE_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.6 = private unnamed_addr constant [9 x i8] c"req_info\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"sig_alg\00", align 1
@X509_ALGOR_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.8 = private unnamed_addr constant [10 x i8] c"signature\00", align 1
@ASN1_BIT_STRING_it = external constant %struct.ASN1_ITEM_st, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_REQ_INFO* @d2i_X509_REQ_INFO(%struct.X509_REQ_INFO**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.X509_REQ_INFO** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @X509_REQ_INFO_it) #2
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.X509_REQ_INFO*
  ret %struct.X509_REQ_INFO* %6
}

declare %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st**, i8**, i64, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_X509_REQ_INFO(%struct.X509_REQ_INFO*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.X509_REQ_INFO* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @X509_REQ_INFO_it) #2
  ret i32 %4
}

declare i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st*, i8**, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_REQ_INFO* @X509_REQ_INFO_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @X509_REQ_INFO_it) #2
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.X509_REQ_INFO*
  ret %struct.X509_REQ_INFO* %2
}

declare %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_REQ_INFO_free(%struct.X509_REQ_INFO*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_REQ_INFO* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @X509_REQ_INFO_it) #2
  ret void
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_req_st* @d2i_X509_REQ(%struct.X509_req_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.X509_req_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @X509_REQ_it) #2
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.X509_req_st*
  ret %struct.X509_req_st* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_X509_REQ(%struct.X509_req_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.X509_req_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @X509_REQ_it) #2
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_req_st* @X509_REQ_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @X509_REQ_it) #2
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.X509_req_st*
  ret %struct.X509_req_st* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_REQ_free(%struct.X509_req_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_req_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @X509_REQ_it) #2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_req_st* @X509_REQ_dup(%struct.X509_req_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_req_st* %0 to i8*
  %3 = tail call i8* @ASN1_item_dup(%struct.ASN1_ITEM_st* nonnull @X509_REQ_it, i8* %2) #2
  %4 = bitcast i8* %3 to %struct.X509_req_st*
  ret %struct.X509_req_st* %4
}

declare i8* @ASN1_item_dup(%struct.ASN1_ITEM_st*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @rinf_cb(i32, %struct.ASN1_VALUE_st** nocapture readonly, %struct.ASN1_ITEM_st* nocapture readnone, i8* nocapture readnone) #0 {
  %5 = icmp eq i32 %0, 1
  br i1 %5, label %6, label %13

6:                                                ; preds = %4
  %7 = bitcast %struct.ASN1_VALUE_st** %1 to %struct.X509_REQ_INFO**
  %8 = load %struct.X509_REQ_INFO*, %struct.X509_REQ_INFO** %7, align 8
  %9 = tail call %struct.stack_st* @sk_new_null() #2
  %10 = getelementptr inbounds %struct.X509_REQ_INFO, %struct.X509_REQ_INFO* %8, i64 0, i32 4
  %11 = bitcast %struct.stack_st_X509_ATTRIBUTE** %10 to %struct.stack_st**
  store %struct.stack_st* %9, %struct.stack_st** %11, align 8
  %12 = icmp eq %struct.stack_st* %9, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %6, %4
  br label %14

14:                                               ; preds = %6, %13
  %15 = phi i32 [ 1, %13 ], [ 0, %6 ]
  ret i32 %15
}

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
