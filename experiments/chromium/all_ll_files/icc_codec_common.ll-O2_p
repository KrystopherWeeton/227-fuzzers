; ModuleID = '../../third_party/libjxl/src/lib/jxl/icc_codec_common.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/icc_codec_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::array" = type { [4 x i8] }

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.h\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"i <= size()\00", align 1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %4 = add i64 %2, 4
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %0, i64 %2
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 1
  %10 = tail call i32 @llvm.bswap.i32(i32 %9) #10
  br label %11

11:                                               ; preds = %3, %6
  %12 = phi i32 [ %10, %6 ], [ 0, %3 ]
  ret i32 %12
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl12EncodeUint32EmjPNS_11PaddedBytesE(i64, i32, %"class.jxl::PaddedBytes"* nocapture readonly) local_unnamed_addr #1 {
  %4 = add i64 %0, 4
  %5 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %4, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %0
  %12 = tail call i32 @llvm.bswap.i32(i32 %1) #10
  %13 = bitcast i8* %11 to i32*
  store i32 %12, i32* %13, align 1
  br label %14

14:                                               ; preds = %3, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32, %"class.jxl::PaddedBytes"*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %5
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %5) #10
  br label %10

10:                                               ; preds = %2, %9
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  %14 = select i1 %13, i64 0, i64 %5
  store i64 %14, i64* %3, align 8
  %15 = add i64 %14, -4
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  %17 = tail call i32 @llvm.bswap.i32(i32 %0) #10
  %18 = bitcast i8* %16 to i32*
  store i32 %17, i32* %18, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* nocapture readonly, i64, i64) local_unnamed_addr #3 {
  %4 = add i64 %2, 4
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %25, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %0, i64 %2
  %8 = load i8, i8* %7, align 1
  %9 = add i64 %2, 1
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = add i64 %2, 2
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = add i64 %2, 3
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl nuw i32 %18, 24
  %20 = zext i8 %14 to i32
  %21 = shl nuw nsw i32 %20, 16
  %22 = zext i8 %11 to i32
  %23 = shl nuw nsw i32 %22, 8
  %24 = zext i8 %8 to i32
  br label %25

25:                                               ; preds = %3, %6
  %26 = phi i32 [ %24, %6 ], [ 32, %3 ]
  %27 = phi i32 [ %23, %6 ], [ 8192, %3 ]
  %28 = phi i32 [ %21, %6 ], [ 2097152, %3 ]
  %29 = phi i32 [ %19, %6 ], [ 536870912, %3 ]
  %30 = or i32 %27, %26
  %31 = or i32 %30, %28
  %32 = or i32 %31, %29
  ret i32 %32
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl13EncodeKeywordERKNSt3__15arrayIhLm4EEEPhmm(%"struct.std::__1::array"* nocapture readonly dereferenceable(4), i8* nocapture, i64, i64) local_unnamed_addr #4 {
  %5 = add i64 %3, 3
  %6 = icmp ult i64 %5, %2
  br i1 %6, label %7, label %22

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 0
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds i8, i8* %1, i64 %3
  store i8 %9, i8* %10, align 1
  %11 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = add i64 %3, 1
  %14 = getelementptr inbounds i8, i8* %1, i64 %13
  store i8 %12, i8* %14, align 1
  %15 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = add i64 %3, 2
  %18 = getelementptr inbounds i8, i8* %1, i64 %17
  store i8 %16, i8* %18, align 1
  %19 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 3
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 %5
  store i8 %20, i8* %21, align 1
  br label %22

22:                                               ; preds = %7, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nocapture readonly dereferenceable(4), %"class.jxl::PaddedBytes"*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %5
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %5) #10
  br label %10

10:                                               ; preds = %2, %9
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  %14 = select i1 %13, i64 0, i64 %5
  store i64 %14, i64* %3, align 8
  %15 = getelementptr inbounds i8, i8* %12, i64 %4
  %16 = bitcast %"struct.std::__1::array"* %0 to i32*
  %17 = bitcast i8* %15 to i32*
  %18 = load i32, i32* %16, align 1
  store i32 %18, i32* %17, align 1
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #6

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64, i64, i64) local_unnamed_addr #7 {
  %4 = add i64 %1, %0
  %5 = icmp ugt i64 %4, %2
  %6 = icmp ult i64 %4, %0
  %7 = or i1 %5, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3jxl12CheckIs32BitEm(i64) local_unnamed_addr #7 {
  %2 = icmp ugt i64 %0, 4294967295
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl26ICCInitialHeaderPredictionEv(%"class.jxl::PaddedBytes"* noalias sret) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store i64 128, i64* %2, align 8
  %5 = bitcast i64* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #10
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %0, i64 128) #10
  %6 = load i64, i64* %2, align 8
  br label %143

7:                                                ; preds = %155
  %8 = icmp ult i64 %160, 8
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

12:                                               ; preds = %7
  %13 = load i8*, i8** %4, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 8
  store i8 4, i8* %14, align 1
  %15 = load i8*, i8** %4, align 8
  %16 = load i64, i64* %2, align 8
  %17 = icmp ugt i64 %16, 15
  br i1 %17, label %18, label %49

18:                                               ; preds = %12
  %19 = getelementptr inbounds i8, i8* %15, i64 12
  store i8 109, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %15, i64 13
  store i8 110, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 14
  store i8 116, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %15, i64 15
  store i8 114, i8* %22, align 1
  %23 = load i8*, i8** %4, align 8
  %24 = load i64, i64* %2, align 8
  %25 = icmp ugt i64 %24, 19
  br i1 %25, label %26, label %49

26:                                               ; preds = %18
  %27 = getelementptr inbounds i8, i8* %23, i64 16
  store i8 82, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %23, i64 17
  store i8 71, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %23, i64 18
  store i8 66, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %23, i64 19
  store i8 32, i8* %30, align 1
  %31 = load i8*, i8** %4, align 8
  %32 = load i64, i64* %2, align 8
  %33 = icmp ugt i64 %32, 23
  br i1 %33, label %34, label %49

34:                                               ; preds = %26
  %35 = getelementptr inbounds i8, i8* %31, i64 20
  store i8 88, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %31, i64 21
  store i8 89, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %31, i64 22
  store i8 90, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %31, i64 23
  store i8 32, i8* %38, align 1
  %39 = load i8*, i8** %4, align 8
  %40 = load i64, i64* %2, align 8
  %41 = icmp ugt i64 %40, 39
  br i1 %41, label %42, label %49

42:                                               ; preds = %34
  %43 = getelementptr inbounds i8, i8* %39, i64 36
  store i8 97, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %39, i64 37
  store i8 99, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %39, i64 38
  store i8 115, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %39, i64 39
  store i8 112, i8* %46, align 1
  %47 = load i64, i64* %2, align 8
  %48 = icmp ult i64 %47, 68
  br i1 %48, label %49, label %52

49:                                               ; preds = %12, %18, %26, %34, %42
  %50 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %51 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

52:                                               ; preds = %42
  %53 = load i8*, i8** %4, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 68
  store i8 0, i8* %54, align 1
  %55 = load i64, i64* %2, align 8
  %56 = icmp ult i64 %55, 69
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %59 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

60:                                               ; preds = %52
  %61 = load i8*, i8** %4, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 69
  store i8 0, i8* %62, align 1
  %63 = load i64, i64* %2, align 8
  %64 = icmp ult i64 %63, 70
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %67 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

68:                                               ; preds = %60
  %69 = load i8*, i8** %4, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 70
  store i8 -10, i8* %70, align 1
  %71 = load i64, i64* %2, align 8
  %72 = icmp ult i64 %71, 71
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %75 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

76:                                               ; preds = %68
  %77 = load i8*, i8** %4, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 71
  store i8 -42, i8* %78, align 1
  %79 = load i64, i64* %2, align 8
  %80 = icmp ult i64 %79, 72
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %83 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

84:                                               ; preds = %76
  %85 = load i8*, i8** %4, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 72
  store i8 0, i8* %86, align 1
  %87 = load i64, i64* %2, align 8
  %88 = icmp ult i64 %87, 73
  br i1 %88, label %89, label %92

89:                                               ; preds = %84
  %90 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %91 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

92:                                               ; preds = %84
  %93 = load i8*, i8** %4, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 73
  store i8 1, i8* %94, align 1
  %95 = load i64, i64* %2, align 8
  %96 = icmp ult i64 %95, 74
  br i1 %96, label %97, label %100

97:                                               ; preds = %92
  %98 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %99 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

100:                                              ; preds = %92
  %101 = load i8*, i8** %4, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 74
  store i8 0, i8* %102, align 1
  %103 = load i64, i64* %2, align 8
  %104 = icmp ult i64 %103, 75
  br i1 %104, label %105, label %108

105:                                              ; preds = %100
  %106 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %107 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

108:                                              ; preds = %100
  %109 = load i8*, i8** %4, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 75
  store i8 0, i8* %110, align 1
  %111 = load i64, i64* %2, align 8
  %112 = icmp ult i64 %111, 76
  br i1 %112, label %113, label %116

113:                                              ; preds = %108
  %114 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %115 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

116:                                              ; preds = %108
  %117 = load i8*, i8** %4, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 76
  store i8 0, i8* %118, align 1
  %119 = load i64, i64* %2, align 8
  %120 = icmp ult i64 %119, 77
  br i1 %120, label %121, label %124

121:                                              ; preds = %116
  %122 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %123 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

124:                                              ; preds = %116
  %125 = load i8*, i8** %4, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 77
  store i8 0, i8* %126, align 1
  %127 = load i64, i64* %2, align 8
  %128 = icmp ult i64 %127, 78
  br i1 %128, label %129, label %132

129:                                              ; preds = %124
  %130 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %131 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

132:                                              ; preds = %124
  %133 = load i8*, i8** %4, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 78
  store i8 -45, i8* %134, align 1
  %135 = load i64, i64* %2, align 8
  %136 = icmp ult i64 %135, 79
  br i1 %136, label %137, label %140

137:                                              ; preds = %132
  %138 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %139 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

140:                                              ; preds = %132
  %141 = load i8*, i8** %4, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 79
  store i8 45, i8* %142, align 1
  ret void

143:                                              ; preds = %155, %1
  %144 = phi i64 [ %6, %1 ], [ %160, %155 ]
  %145 = phi i64 [ 0, %1 ], [ %159, %155 ]
  %146 = icmp ult i64 %144, %145
  br i1 %146, label %147, label %150

147:                                              ; preds = %150, %143
  %148 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #10
  %149 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

150:                                              ; preds = %143
  %151 = load i8*, i8** %4, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 %145
  store i8 0, i8* %152, align 1
  %153 = load i64, i64* %2, align 8
  %154 = icmp ugt i64 %153, %145
  br i1 %154, label %155, label %147

155:                                              ; preds = %150
  %156 = or i64 %145, 1
  %157 = load i8*, i8** %4, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 %156
  store i8 0, i8* %158, align 1
  %159 = add nuw nsw i64 %145, 2
  %160 = load i64, i64* %2, align 8
  %161 = icmp eq i64 %159, 128
  br i1 %161, label %7, label %143
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl16ICCPredictHeaderEPKhmPhm(i8* nocapture readonly, i64, i8* nocapture, i64) local_unnamed_addr #4 {
  %5 = icmp eq i64 %3, 8
  %6 = icmp ugt i64 %1, 7
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %21

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %0, i64 4
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 80
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %0, i64 5
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds i8, i8* %2, i64 81
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %0, i64 6
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %2, i64 82
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %0, i64 7
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %2, i64 83
  store i8 %19, i8* %20, align 1
  br label %66

21:                                               ; preds = %4
  %22 = icmp eq i64 %3, 41
  %23 = icmp ugt i64 %1, 40
  %24 = and i1 %23, %22
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %0, i64 40
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 65
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = getelementptr inbounds i8, i8* %2, i64 41
  store i8 80, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 42
  store i8 80, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %2, i64 43
  store i8 76, i8* %32, align 1
  %33 = load i8, i8* %26, align 1
  br label %34

34:                                               ; preds = %29, %25
  %35 = phi i8 [ %33, %29 ], [ %27, %25 ]
  %36 = icmp eq i8 %35, 77
  br i1 %36, label %37, label %66

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %2, i64 41
  store i8 83, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %2, i64 42
  store i8 70, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %2, i64 43
  store i8 84, i8* %40, align 1
  br label %66

41:                                               ; preds = %21
  %42 = icmp eq i64 %3, 42
  %43 = icmp ugt i64 %1, 41
  %44 = and i1 %43, %42
  br i1 %44, label %45, label %66

45:                                               ; preds = %41
  %46 = getelementptr inbounds i8, i8* %0, i64 40
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 83
  br i1 %48, label %49, label %66

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %0, i64 41
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 71
  br i1 %52, label %53, label %60

53:                                               ; preds = %49
  %54 = getelementptr inbounds i8, i8* %2, i64 42
  store i8 73, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 43
  store i8 32, i8* %55, align 1
  %56 = load i8, i8* %46, align 1
  %57 = icmp eq i8 %56, 83
  br i1 %57, label %58, label %66

58:                                               ; preds = %53
  %59 = load i8, i8* %50, align 1
  br label %60

60:                                               ; preds = %49, %58
  %61 = phi i8 [ %59, %58 ], [ %51, %49 ]
  %62 = icmp eq i8 %61, 85
  br i1 %62, label %63, label %66

63:                                               ; preds = %60
  %64 = getelementptr inbounds i8, i8* %2, i64 42
  store i8 78, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %2, i64 43
  store i8 87, i8* %65, align 1
  br label %66

66:                                               ; preds = %45, %37, %34, %8, %53, %60, %63, %41
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZN3jxl21LinearPredictICCValueEPKhmmmmi(i8* nocapture readonly, i64, i64, i64, i64, i32) local_unnamed_addr #0 {
  %7 = add i64 %2, %1
  switch i64 %4, label %79 [
    i64 1, label %8
    i64 2, label %28
  ]

8:                                                ; preds = %6
  %9 = sub i64 %7, %3
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = shl i64 %3, 1
  %13 = sub i64 %7, %12
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = load i8, i8* %14, align 1
  switch i32 %5, label %27 [
    i32 0, label %130
    i32 1, label %16
    i32 2, label %19
  ]

16:                                               ; preds = %8
  %17 = shl i8 %11, 1
  %18 = sub i8 %17, %15
  br label %130

19:                                               ; preds = %8
  %20 = mul i64 %3, -3
  %21 = add i64 %20, %7
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = sub i8 %11, %15
  %25 = mul i8 %24, 3
  %26 = add i8 %23, %25
  br label %130

27:                                               ; preds = %8
  br label %130

28:                                               ; preds = %6
  %29 = and i64 %2, -2
  %30 = add i64 %29, %1
  %31 = sub i64 %30, %3
  %32 = getelementptr inbounds i8, i8* %0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw i16 %34, 8
  %36 = add i64 %31, 1
  %37 = getelementptr inbounds i8, i8* %0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = or i16 %35, %39
  %41 = shl i64 %3, 1
  %42 = sub i64 %30, %41
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = shl nuw i16 %45, 8
  %47 = add i64 %42, 1
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = or i16 %46, %50
  %52 = mul i64 %3, -3
  %53 = add i64 %30, %52
  switch i32 %5, label %70 [
    i32 0, label %71
    i32 1, label %54
    i32 2, label %57
  ]

54:                                               ; preds = %28
  %55 = shl i16 %40, 1
  %56 = sub i16 %55, %51
  br label %71

57:                                               ; preds = %28
  %58 = getelementptr inbounds i8, i8* %0, i64 %53
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = shl nuw i16 %60, 8
  %62 = add i64 %53, 1
  %63 = getelementptr inbounds i8, i8* %0, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = or i16 %61, %65
  %67 = sub i16 %40, %51
  %68 = mul i16 %67, 3
  %69 = add i16 %66, %68
  br label %71

70:                                               ; preds = %28
  br label %71

71:                                               ; preds = %28, %54, %57, %70
  %72 = phi i16 [ %56, %54 ], [ %69, %57 ], [ 0, %70 ], [ %40, %28 ]
  %73 = and i64 %2, 1
  %74 = icmp eq i64 %73, 0
  %75 = zext i16 %72 to i32
  %76 = lshr i32 %75, 8
  %77 = select i1 %74, i32 %76, i32 %75
  %78 = trunc i32 %77 to i8
  br label %130

79:                                               ; preds = %6
  %80 = and i64 %2, -4
  %81 = add i64 %80, %1
  %82 = sub i64 %81, %3
  %83 = add i64 %82, 4
  %84 = icmp ugt i64 %83, %7
  br i1 %84, label %90, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds i8, i8* %0, i64 %82
  %87 = bitcast i8* %86 to i32*
  %88 = load i32, i32* %87, align 1
  %89 = tail call i32 @llvm.bswap.i32(i32 %88) #10
  br label %90

90:                                               ; preds = %79, %85
  %91 = phi i32 [ %89, %85 ], [ 0, %79 ]
  %92 = shl i64 %3, 1
  %93 = sub i64 %81, %92
  %94 = add i64 %93, 4
  %95 = icmp ugt i64 %94, %7
  br i1 %95, label %101, label %96

96:                                               ; preds = %90
  %97 = getelementptr inbounds i8, i8* %0, i64 %93
  %98 = bitcast i8* %97 to i32*
  %99 = load i32, i32* %98, align 1
  %100 = tail call i32 @llvm.bswap.i32(i32 %99) #10
  br label %101

101:                                              ; preds = %90, %96
  %102 = phi i32 [ %100, %96 ], [ 0, %90 ]
  %103 = mul i64 %3, -3
  %104 = add i64 %81, %103
  %105 = add i64 %104, 4
  %106 = icmp ugt i64 %105, %7
  br i1 %106, label %112, label %107

107:                                              ; preds = %101
  %108 = getelementptr inbounds i8, i8* %0, i64 %104
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = tail call i32 @llvm.bswap.i32(i32 %110) #10
  br label %112

112:                                              ; preds = %101, %107
  %113 = phi i32 [ %111, %107 ], [ 0, %101 ]
  switch i32 %5, label %121 [
    i32 0, label %122
    i32 1, label %114
    i32 2, label %117
  ]

114:                                              ; preds = %112
  %115 = shl i32 %91, 1
  %116 = sub i32 %115, %102
  br label %122

117:                                              ; preds = %112
  %118 = sub i32 %91, %102
  %119 = mul i32 %118, 3
  %120 = add i32 %113, %119
  br label %122

121:                                              ; preds = %112
  br label %122

122:                                              ; preds = %112, %114, %117, %121
  %123 = phi i32 [ %116, %114 ], [ %120, %117 ], [ 0, %121 ], [ %91, %112 ]
  %124 = trunc i64 %2 to i32
  %125 = shl i32 %124, 3
  %126 = and i32 %125, 24
  %127 = xor i32 %126, 24
  %128 = lshr i32 %123, %127
  %129 = trunc i32 %128 to i8
  br label %130

130:                                              ; preds = %27, %19, %16, %8, %122, %71
  %131 = phi i8 [ %78, %71 ], [ %129, %122 ], [ %18, %16 ], [ %26, %19 ], [ 0, %27 ], [ %11, %8 ]
  ret i8 %131
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN3jxl13ICCANSContextEmmm(i64, i64, i64) local_unnamed_addr #7 {
  %4 = icmp ult i64 %0, 129
  br i1 %4, label %41, label %5

5:                                                ; preds = %3
  %6 = trunc i64 %1 to i8
  %7 = and i8 %6, -33
  %8 = add i8 %7, -65
  %9 = icmp ult i8 %8, 26
  br i1 %9, label %23, label %10

10:                                               ; preds = %5
  %11 = add i8 %6, -48
  %12 = icmp ult i8 %11, 10
  br i1 %12, label %23, label %13

13:                                               ; preds = %10
  switch i8 %6, label %16 [
    i8 46, label %23
    i8 44, label %23
    i8 0, label %14
    i8 1, label %15
  ]

14:                                               ; preds = %13
  br label %23

15:                                               ; preds = %13
  br label %23

16:                                               ; preds = %13
  %17 = icmp ult i8 %6, 16
  br i1 %17, label %23, label %18

18:                                               ; preds = %16
  %19 = icmp eq i8 %6, -1
  br i1 %19, label %23, label %20

20:                                               ; preds = %18
  %21 = icmp ugt i8 %6, -16
  %22 = select i1 %21, i64 6, i64 8
  br label %23

23:                                               ; preds = %5, %10, %13, %13, %14, %15, %16, %18, %20
  %24 = phi i64 [ 3, %14 ], [ 4, %15 ], [ 1, %5 ], [ 2, %10 ], [ 2, %13 ], [ 2, %13 ], [ 5, %16 ], [ 7, %18 ], [ %22, %20 ]
  %25 = trunc i64 %2 to i8
  %26 = and i8 %25, -33
  %27 = add i8 %26, -65
  %28 = icmp ult i8 %27, 26
  br i1 %28, label %38, label %29

29:                                               ; preds = %23
  %30 = add i8 %25, -48
  %31 = icmp ult i8 %30, 10
  br i1 %31, label %38, label %32

32:                                               ; preds = %29
  switch i8 %25, label %33 [
    i8 46, label %38
    i8 44, label %38
  ]

33:                                               ; preds = %32
  %34 = icmp ult i8 %25, 16
  br i1 %34, label %38, label %35

35:                                               ; preds = %33
  %36 = icmp ugt i8 %25, -16
  %37 = select i1 %36, i64 24, i64 32
  br label %38

38:                                               ; preds = %23, %29, %32, %32, %33, %35
  %39 = phi i64 [ 0, %23 ], [ 8, %29 ], [ 8, %32 ], [ 8, %32 ], [ 16, %33 ], [ %37, %35 ]
  %40 = add nuw nsw i64 %39, %24
  br label %41

41:                                               ; preds = %3, %38
  %42 = phi i64 [ %40, %38 ], [ 0, %3 ]
  ret i64 %42
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { argmemonly nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
