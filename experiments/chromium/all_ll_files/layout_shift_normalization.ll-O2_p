; ModuleID = '../../components/page_load_metrics/browser/layout_shift_normalization.cc'
source_filename = "../../components/page_load_metrics/browser/layout_shift_normalization.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.page_load_metrics::LayoutShiftNormalization" = type { %"struct.page_load_metrics::NormalizedCLSData", %"class.std::__1::vector", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", float, i32 }
%"struct.page_load_metrics::NormalizedCLSData" = type <{ double, double, float, float, float, float, i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type { %"class.base::TimeTicks", double }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.base::TimeTicks"*, %"class.base::TimeTicks"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.base::TimeTicks"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"class.std::__1::__compressed_pair.10" }
%"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow" = type { %"class.base::TimeTicks", double }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* }
%"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow" = type <{ %"class.base::TimeTicks", %"class.base::TimeTicks", float, [4 x i8] }>
%"struct.std::__1::__less.42" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"*, %"class.std::__1::__compressed_pair.21" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.page_load_metrics::mojom::LayoutShift"* }
%"class.page_load_metrics::mojom::LayoutShift" = type { %"class.base::TimeTicks", double }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.mojo::StructPtr"* }
%"struct.std::__1::__less.56" = type { i8 }
%"class.base::TimeDelta" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNSt3__16vectorIN4base9TimeTicksENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_ = comdat any

$_ZNK4base9TimeDeltamiES0_ = comdat any

$_ZNSt3__115__inplace_mergeIRNS_6__lessIN4base9TimeTicksES3_EENS_11__wrap_iterIPS3_EEEEvT0_S9_S9_T_NS_15iterator_traitsIS9_E15difference_typeESD_PNSC_10value_typeEl = comdat any

$_ZNSt3__115__inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl = comdat any

$_ZNSt3__124__buffered_inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

@_ZN17page_load_metrics24LayoutShiftNormalizationC1Ev = hidden unnamed_addr alias void (%"class.page_load_metrics::LayoutShiftNormalization"*), void (%"class.page_load_metrics::LayoutShiftNormalization"*)* @_ZN17page_load_metrics24LayoutShiftNormalizationC2Ev
@_ZN17page_load_metrics24LayoutShiftNormalizationD1Ev = hidden unnamed_addr alias void (%"class.page_load_metrics::LayoutShiftNormalization"*), void (%"class.page_load_metrics::LayoutShiftNormalization"*)* @_ZN17page_load_metrics24LayoutShiftNormalizationD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalizationC2Ev(%"class.page_load_metrics::LayoutShiftNormalization"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.page_load_metrics::LayoutShiftNormalization"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 33, i1 false) #10
  %3 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6
  %5 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #10
  %6 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 7
  %7 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #10
  %8 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8
  %9 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #10
  %10 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 9
  store float 0.000000e+00, float* %10, align 8
  %11 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 10
  store i32 0, i32* %11, align 4
  %12 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 116, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalizationD2Ev(%"class.page_load_metrics::LayoutShiftNormalization"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %2, align 8
  %4 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %3 to i64
  %7 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 4, i32 0, i32 1
  %8 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 3, i32 0, i32 0
  %12 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %11, align 8
  %13 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %12 to i64
  %16 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 3, i32 0, i32 1
  %17 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #11
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %20, align 8
  %22 = icmp eq %"class.base::TimeTicks"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint %"class.base::TimeTicks"* %21 to i64
  %25 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2, i32 0, i32 1
  %26 = bitcast %"class.base::TimeTicks"** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast %"class.base::TimeTicks"* %21 to i8*
  tail call void @_ZdlPv(i8* %27) #11
  br label %28

28:                                               ; preds = %19, %23
  %29 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1, i32 0, i32 0
  %30 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %29, align 8
  %31 = icmp eq %"struct.std::__1::pair"* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint %"struct.std::__1::pair"* %30 to i64
  %34 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1, i32 0, i32 1
  %35 = bitcast %"struct.std::__1::pair"** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast %"struct.std::__1::pair"* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #11
  br label %37

37:                                               ; preds = %28, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalization18AddInputTimeStampsERKNSt3__16vectorIN4base9TimeTicksENS1_9allocatorIS4_EEEE(%"class.page_load_metrics::LayoutShiftNormalization"*, %"class.std::__1::vector.1"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::__less.42", align 1
  %4 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %1, i64 0, i32 0, i32 1
  %10 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %9, align 8
  %11 = tail call %"class.base::TimeTicks"* @_ZNSt3__16vectorIN4base9TimeTicksENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector.1"* %4, %"class.base::TimeTicks"* %6, %"class.base::TimeTicks"* %8, %"class.base::TimeTicks"* %10)
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %4, i64 0, i32 0, i32 0
  %13 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %12, align 8
  %14 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %5, align 8
  %15 = bitcast %"class.base::TimeTicks"** %9 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector.1"* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = sub nsw i64 0, %20
  %22 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %21
  %23 = getelementptr inbounds %"struct.std::__1::__less.42", %"struct.std::__1::__less.42"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %23) #10
  %24 = ptrtoint %"class.base::TimeTicks"* %13 to i64
  %25 = ptrtoint %"class.base::TimeTicks"* %22 to i64
  %26 = sub i64 %25, %24
  %27 = ashr exact i64 %26, 3
  %28 = icmp slt i64 %20, %27
  %29 = select i1 %28, i64 %20, i64 %27
  %30 = icmp sgt i64 %29, 0
  br i1 %30, label %31, label %42

31:                                               ; preds = %2
  %32 = icmp slt i64 %29, 1152921504606846975
  %33 = select i1 %32, i64 %29, i64 1152921504606846975
  br label %34

34:                                               ; preds = %39, %31
  %35 = phi i64 [ %40, %39 ], [ %33, %31 ]
  %36 = shl i64 %35, 3
  %37 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %36, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #10
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %43

39:                                               ; preds = %34
  %40 = lshr i64 %35, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %34

42:                                               ; preds = %39, %2
  call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIN4base9TimeTicksES3_EENS_11__wrap_iterIPS3_EEEEvT0_S9_S9_T_NS_15iterator_traitsIS9_E15difference_typeESD_PNSC_10value_typeEl(%"class.base::TimeTicks"* %13, %"class.base::TimeTicks"* %22, %"class.base::TimeTicks"* %14, %"struct.std::__1::__less.42"* nonnull dereferenceable(1) %3, i64 %27, i64 %20, %"class.base::TimeTicks"* null, i64 0) #10
  br label %45

43:                                               ; preds = %34
  %44 = bitcast i8* %37 to %"class.base::TimeTicks"*
  call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIN4base9TimeTicksES3_EENS_11__wrap_iterIPS3_EEEEvT0_S9_S9_T_NS_15iterator_traitsIS9_E15difference_typeESD_PNSC_10value_typeEl(%"class.base::TimeTicks"* %13, %"class.base::TimeTicks"* %22, %"class.base::TimeTicks"* %14, %"struct.std::__1::__less.42"* nonnull dereferenceable(1) %3, i64 %27, i64 %20, %"class.base::TimeTicks"* nonnull %44, i64 %35) #10
  call void @_ZdlPv(i8* nonnull %37) #11
  br label %45

45:                                               ; preds = %42, %43
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %23) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::TimeTicks"* @_ZNSt3__16vectorIN4base9TimeTicksENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector.1"*, %"class.base::TimeTicks"*, %"class.base::TimeTicks"*, %"class.base::TimeTicks"*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.base::TimeTicks"* %2 to i8*
  %6 = bitcast %"class.base::TimeTicks"* %1 to i8*
  %7 = ptrtoint %"class.base::TimeTicks"* %1 to i64
  %8 = ptrtoint %"class.base::TimeTicks"* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint %"class.base::TimeTicks"* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 3
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %720

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.base::TimeTicks"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %19 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %18, align 8
  %20 = ptrtoint %"class.base::TimeTicks"* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast %"class.base::TimeTicks"** %18 to i64*
  br i1 %23, label %345, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 3
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %200

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %27
  %31 = icmp eq %"class.base::TimeTicks"* %30, %3
  br i1 %31, label %195, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 %33, i32 0, i32 0
  %35 = ptrtoint i64* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 4
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 %41, i32 0, i32 0
  %43 = ptrtoint i64* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add nsw i64 %48, 1
  %50 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %49
  %51 = icmp ult %"class.base::TimeTicks"* %19, %50
  %52 = icmp ult %"class.base::TimeTicks"* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 4611686018427387900
  %56 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %55
  %57 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %55
  %58 = add nsw i64 %55, -4
  %59 = lshr exact i64 %58, 2
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 12
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %66
  %69 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %66, i32 0, i32 0
  %70 = bitcast %"class.base::TimeTicks"* %68 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 8, !alias.scope !2
  %72 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %68, i64 2
  %73 = bitcast %"class.base::TimeTicks"* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 8, !alias.scope !2
  %75 = bitcast i64* %69 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %75, align 8, !alias.scope !5, !noalias !2
  %76 = getelementptr i64, i64* %69, i64 2
  %77 = bitcast i64* %76 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 8, !alias.scope !5, !noalias !2
  %78 = or i64 %66, 4
  %79 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %78
  %80 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %78, i32 0, i32 0
  %81 = bitcast %"class.base::TimeTicks"* %79 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 8, !alias.scope !2
  %83 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %79, i64 2
  %84 = bitcast %"class.base::TimeTicks"* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 8, !alias.scope !2
  %86 = bitcast i64* %80 to <2 x i64>*
  store <2 x i64> %82, <2 x i64>* %86, align 8, !alias.scope !5, !noalias !2
  %87 = getelementptr i64, i64* %80, i64 2
  %88 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %88, align 8, !alias.scope !5, !noalias !2
  %89 = or i64 %66, 8
  %90 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %89
  %91 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %89, i32 0, i32 0
  %92 = bitcast %"class.base::TimeTicks"* %90 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8, !alias.scope !2
  %94 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %90, i64 2
  %95 = bitcast %"class.base::TimeTicks"* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8, !alias.scope !2
  %97 = bitcast i64* %91 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %97, align 8, !alias.scope !5, !noalias !2
  %98 = getelementptr i64, i64* %91, i64 2
  %99 = bitcast i64* %98 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %99, align 8, !alias.scope !5, !noalias !2
  %100 = or i64 %66, 12
  %101 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %100
  %102 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %100, i32 0, i32 0
  %103 = bitcast %"class.base::TimeTicks"* %101 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8, !alias.scope !2
  %105 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %101, i64 2
  %106 = bitcast %"class.base::TimeTicks"* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !2
  %108 = bitcast i64* %102 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 8, !alias.scope !5, !noalias !2
  %109 = getelementptr i64, i64* %102, i64 2
  %110 = bitcast i64* %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 8, !alias.scope !5, !noalias !2
  %111 = add i64 %66, 16
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !7

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %118
  %121 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %118, i32 0, i32 0
  %122 = bitcast %"class.base::TimeTicks"* %120 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !2
  %124 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %120, i64 2
  %125 = bitcast %"class.base::TimeTicks"* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !2
  %127 = bitcast i64* %121 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %127, align 8, !alias.scope !5, !noalias !2
  %128 = getelementptr i64, i64* %121, i64 2
  %129 = bitcast i64* %128 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %129, align 8, !alias.scope !5, !noalias !2
  %130 = add i64 %118, 4
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !9

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %192, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi %"class.base::TimeTicks"* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi %"class.base::TimeTicks"* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint %"class.base::TimeTicks"* %137 to i64
  %139 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 -1, i32 0, i32 0
  %140 = ptrtoint i64* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 3
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %135, %146
  %147 = phi %"class.base::TimeTicks"* [ %154, %146 ], [ %136, %135 ]
  %148 = phi %"class.base::TimeTicks"* [ %153, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %155, %146 ], [ %144, %135 ]
  %150 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %148, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %147, i64 0, i32 0, i32 0
  %152 = load i64, i64* %150, align 8
  store i64 %152, i64* %151, align 8
  %153 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %148, i64 1
  %154 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %147, i64 1
  %155 = add i64 %149, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %146, !llvm.loop !11

157:                                              ; preds = %146, %135
  %158 = phi %"class.base::TimeTicks"* [ undef, %135 ], [ %154, %146 ]
  %159 = phi %"class.base::TimeTicks"* [ %136, %135 ], [ %154, %146 ]
  %160 = phi %"class.base::TimeTicks"* [ %137, %135 ], [ %153, %146 ]
  %161 = icmp ult i64 %141, 56
  br i1 %161, label %192, label %162

162:                                              ; preds = %157, %162
  %163 = phi %"class.base::TimeTicks"* [ %190, %162 ], [ %159, %157 ]
  %164 = phi %"class.base::TimeTicks"* [ %189, %162 ], [ %160, %157 ]
  %165 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 0, i32 0, i32 0
  %166 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 0, i32 0, i32 0
  %167 = load i64, i64* %165, align 8
  store i64 %167, i64* %166, align 8
  %168 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 1, i32 0, i32 0
  %169 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 1, i32 0, i32 0
  %170 = load i64, i64* %168, align 8
  store i64 %170, i64* %169, align 8
  %171 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 2, i32 0, i32 0
  %172 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 2, i32 0, i32 0
  %173 = load i64, i64* %171, align 8
  store i64 %173, i64* %172, align 8
  %174 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 3, i32 0, i32 0
  %175 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 3, i32 0, i32 0
  %176 = load i64, i64* %174, align 8
  store i64 %176, i64* %175, align 8
  %177 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 4, i32 0, i32 0
  %178 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 4, i32 0, i32 0
  %179 = load i64, i64* %177, align 8
  store i64 %179, i64* %178, align 8
  %180 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 5, i32 0, i32 0
  %181 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 5, i32 0, i32 0
  %182 = load i64, i64* %180, align 8
  store i64 %182, i64* %181, align 8
  %183 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 6, i32 0, i32 0
  %184 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 6, i32 0, i32 0
  %185 = load i64, i64* %183, align 8
  store i64 %185, i64* %184, align 8
  %186 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 7, i32 0, i32 0
  %187 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 7, i32 0, i32 0
  %188 = load i64, i64* %186, align 8
  store i64 %188, i64* %187, align 8
  %189 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %164, i64 8
  %190 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %163, i64 8
  %191 = icmp eq %"class.base::TimeTicks"* %189, %3
  br i1 %191, label %192, label %162, !llvm.loop !12

192:                                              ; preds = %157, %162, %133
  %193 = phi %"class.base::TimeTicks"* [ %56, %133 ], [ %158, %157 ], [ %190, %162 ]
  %194 = ptrtoint %"class.base::TimeTicks"* %193 to i64
  br label %195

195:                                              ; preds = %192, %29
  %196 = phi i64 [ %20, %29 ], [ %194, %192 ]
  store i64 %196, i64* %24, align 8
  %197 = icmp sgt i64 %26, 0
  br i1 %197, label %198, label %720

198:                                              ; preds = %195
  %199 = inttoptr i64 %196 to %"class.base::TimeTicks"*
  br label %200

200:                                              ; preds = %198, %25
  %201 = phi i64 [ %196, %198 ], [ %20, %25 ]
  %202 = phi %"class.base::TimeTicks"* [ %199, %198 ], [ %19, %25 ]
  %203 = phi %"class.base::TimeTicks"* [ %30, %198 ], [ %3, %25 ]
  %204 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %12
  %205 = ptrtoint %"class.base::TimeTicks"* %204 to i64
  %206 = sub i64 %201, %205
  %207 = ashr exact i64 %206, 3
  %208 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %207
  %209 = icmp ult %"class.base::TimeTicks"* %208, %19
  br i1 %209, label %210, label %323

210:                                              ; preds = %200
  %211 = sub nsw i64 0, %207
  %212 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %211, i32 0, i32 0
  %213 = bitcast i64* %212 to i8*
  %214 = xor i64 %7, -1
  %215 = getelementptr i8, i8* %213, i64 %214
  %216 = ptrtoint i8* %215 to i64
  %217 = lshr i64 %216, 3
  %218 = add nuw nsw i64 %217, 1
  %219 = icmp ult i64 %218, 4
  br i1 %219, label %220, label %223

220:                                              ; preds = %318, %223, %210
  %221 = phi %"class.base::TimeTicks"* [ %202, %223 ], [ %202, %210 ], [ %241, %318 ]
  %222 = phi %"class.base::TimeTicks"* [ %208, %223 ], [ %208, %210 ], [ %242, %318 ]
  br label %331

223:                                              ; preds = %210
  %224 = sub nsw i64 0, %207
  %225 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %19, i64 %224, i32 0, i32 0
  %226 = bitcast i64* %225 to i8*
  %227 = xor i64 %7, -1
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %231
  %233 = add nsw i64 %207, %230
  %234 = add nsw i64 %233, 1
  %235 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %234
  %236 = icmp ult %"class.base::TimeTicks"* %202, %235
  %237 = icmp ult %"class.base::TimeTicks"* %208, %232
  %238 = and i1 %236, %237
  br i1 %238, label %220, label %239

239:                                              ; preds = %223
  %240 = and i64 %218, 4611686018427387900
  %241 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %240
  %242 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %208, i64 %240
  %243 = add nsw i64 %240, -4
  %244 = lshr exact i64 %243, 2
  %245 = add nuw nsw i64 %244, 1
  %246 = and i64 %245, 3
  %247 = icmp ult i64 %243, 12
  br i1 %247, label %299, label %248

248:                                              ; preds = %239
  %249 = sub nsw i64 %245, %246
  br label %250

250:                                              ; preds = %250, %248
  %251 = phi i64 [ 0, %248 ], [ %296, %250 ]
  %252 = phi i64 [ %249, %248 ], [ %297, %250 ]
  %253 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %208, i64 %251
  %254 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %251, i32 0, i32 0
  %255 = bitcast %"class.base::TimeTicks"* %253 to <2 x i64>*
  %256 = load <2 x i64>, <2 x i64>* %255, align 8, !alias.scope !13
  %257 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %253, i64 2
  %258 = bitcast %"class.base::TimeTicks"* %257 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %258, align 8, !alias.scope !13
  %260 = bitcast i64* %254 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %260, align 8, !alias.scope !16, !noalias !13
  %261 = getelementptr i64, i64* %254, i64 2
  %262 = bitcast i64* %261 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %262, align 8, !alias.scope !16, !noalias !13
  %263 = or i64 %251, 4
  %264 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %208, i64 %263
  %265 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %263, i32 0, i32 0
  %266 = bitcast %"class.base::TimeTicks"* %264 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 8, !alias.scope !13
  %268 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %264, i64 2
  %269 = bitcast %"class.base::TimeTicks"* %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 8, !alias.scope !13
  %271 = bitcast i64* %265 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %271, align 8, !alias.scope !16, !noalias !13
  %272 = getelementptr i64, i64* %265, i64 2
  %273 = bitcast i64* %272 to <2 x i64>*
  store <2 x i64> %270, <2 x i64>* %273, align 8, !alias.scope !16, !noalias !13
  %274 = or i64 %251, 8
  %275 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %208, i64 %274
  %276 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %274, i32 0, i32 0
  %277 = bitcast %"class.base::TimeTicks"* %275 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 8, !alias.scope !13
  %279 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %275, i64 2
  %280 = bitcast %"class.base::TimeTicks"* %279 to <2 x i64>*
  %281 = load <2 x i64>, <2 x i64>* %280, align 8, !alias.scope !13
  %282 = bitcast i64* %276 to <2 x i64>*
  store <2 x i64> %278, <2 x i64>* %282, align 8, !alias.scope !16, !noalias !13
  %283 = getelementptr i64, i64* %276, i64 2
  %284 = bitcast i64* %283 to <2 x i64>*
  store <2 x i64> %281, <2 x i64>* %284, align 8, !alias.scope !16, !noalias !13
  %285 = or i64 %251, 12
  %286 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %208, i64 %285
  %287 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %285, i32 0, i32 0
  %288 = bitcast %"class.base::TimeTicks"* %286 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 8, !alias.scope !13
  %290 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %286, i64 2
  %291 = bitcast %"class.base::TimeTicks"* %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !13
  %293 = bitcast i64* %287 to <2 x i64>*
  store <2 x i64> %289, <2 x i64>* %293, align 8, !alias.scope !16, !noalias !13
  %294 = getelementptr i64, i64* %287, i64 2
  %295 = bitcast i64* %294 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %295, align 8, !alias.scope !16, !noalias !13
  %296 = add i64 %251, 16
  %297 = add i64 %252, -4
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %250, !llvm.loop !18

299:                                              ; preds = %250, %239
  %300 = phi i64 [ 0, %239 ], [ %296, %250 ]
  %301 = icmp eq i64 %246, 0
  br i1 %301, label %318, label %302

302:                                              ; preds = %299, %302
  %303 = phi i64 [ %315, %302 ], [ %300, %299 ]
  %304 = phi i64 [ %316, %302 ], [ %246, %299 ]
  %305 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %208, i64 %303
  %306 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %303, i32 0, i32 0
  %307 = bitcast %"class.base::TimeTicks"* %305 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 8, !alias.scope !13
  %309 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %305, i64 2
  %310 = bitcast %"class.base::TimeTicks"* %309 to <2 x i64>*
  %311 = load <2 x i64>, <2 x i64>* %310, align 8, !alias.scope !13
  %312 = bitcast i64* %306 to <2 x i64>*
  store <2 x i64> %308, <2 x i64>* %312, align 8, !alias.scope !16, !noalias !13
  %313 = getelementptr i64, i64* %306, i64 2
  %314 = bitcast i64* %313 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %314, align 8, !alias.scope !16, !noalias !13
  %315 = add i64 %303, 4
  %316 = add i64 %304, -1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %302, !llvm.loop !19

318:                                              ; preds = %302, %299
  %319 = icmp eq i64 %218, %240
  br i1 %319, label %320, label %220

320:                                              ; preds = %331, %318
  %321 = phi %"class.base::TimeTicks"* [ %241, %318 ], [ %338, %331 ]
  %322 = ptrtoint %"class.base::TimeTicks"* %321 to i64
  br label %323

323:                                              ; preds = %320, %200
  %324 = phi i64 [ %322, %320 ], [ %201, %200 ]
  store i64 %324, i64* %24, align 8
  %325 = icmp eq i64 %206, 0
  br i1 %325, label %340, label %326

326:                                              ; preds = %323
  %327 = sub nsw i64 0, %207
  %328 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %202, i64 %327
  %329 = bitcast %"class.base::TimeTicks"* %328 to i8*
  %330 = bitcast %"class.base::TimeTicks"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %329, i8* align 8 %330, i64 %206, i1 false) #10
  br label %340

331:                                              ; preds = %220, %331
  %332 = phi %"class.base::TimeTicks"* [ %338, %331 ], [ %221, %220 ]
  %333 = phi %"class.base::TimeTicks"* [ %337, %331 ], [ %222, %220 ]
  %334 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %333, i64 0, i32 0, i32 0
  %335 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %332, i64 0, i32 0, i32 0
  %336 = load i64, i64* %334, align 8
  store i64 %336, i64* %335, align 8
  %337 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %333, i64 1
  %338 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %332, i64 1
  %339 = icmp ult %"class.base::TimeTicks"* %337, %19
  br i1 %339, label %331, label %320, !llvm.loop !20

340:                                              ; preds = %323, %326
  %341 = ptrtoint %"class.base::TimeTicks"* %203 to i64
  %342 = sub i64 %341, %8
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %720, label %344

344:                                              ; preds = %340
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %5, i64 %342, i1 false) #10
  br label %720

345:                                              ; preds = %14
  %346 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = sub i64 %20, %347
  %349 = ashr exact i64 %348, 3
  %350 = add nsw i64 %349, %12
  %351 = icmp ugt i64 %350, 2305843009213693951
  br i1 %351, label %352, label %354

352:                                              ; preds = %345
  %353 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %353) #12
  unreachable

354:                                              ; preds = %345
  %355 = sub i64 %17, %347
  %356 = ashr exact i64 %355, 3
  %357 = icmp ult i64 %356, 1152921504606846975
  br i1 %357, label %361, label %358

358:                                              ; preds = %354
  %359 = sub i64 %7, %347
  %360 = ashr exact i64 %359, 3
  br label %371

361:                                              ; preds = %354
  %362 = ashr exact i64 %355, 2
  %363 = icmp ult i64 %362, %350
  %364 = select i1 %363, i64 %350, i64 %362
  %365 = sub i64 %7, %347
  %366 = ashr exact i64 %365, 3
  %367 = icmp eq i64 %364, 0
  br i1 %367, label %377, label %368

368:                                              ; preds = %361
  %369 = icmp ugt i64 %364, 2305843009213693951
  br i1 %369, label %370, label %371

370:                                              ; preds = %368
  tail call void @abort() #12
  unreachable

371:                                              ; preds = %358, %368
  %372 = phi i64 [ 2305843009213693951, %358 ], [ %364, %368 ]
  %373 = phi i64 [ %360, %358 ], [ %366, %368 ]
  %374 = shl i64 %372, 3
  %375 = tail call i8* @_Znwm(i64 %374) #11
  %376 = bitcast i8* %375 to %"class.base::TimeTicks"*
  br label %377

377:                                              ; preds = %371, %361
  %378 = phi i64 [ %373, %371 ], [ %366, %361 ]
  %379 = phi i64 [ %372, %371 ], [ 0, %361 ]
  %380 = phi %"class.base::TimeTicks"* [ %376, %371 ], [ null, %361 ]
  %381 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %380, i64 %378
  %382 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %380, i64 %379
  %383 = ptrtoint %"class.base::TimeTicks"* %382 to i64
  %384 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %12
  %385 = add i64 %11, -8
  %386 = lshr i64 %385, 3
  %387 = add nuw nsw i64 %386, 1
  %388 = icmp ult i64 %387, 4
  br i1 %388, label %481, label %389

389:                                              ; preds = %377
  %390 = add i64 %11, -8
  %391 = lshr i64 %390, 3
  %392 = add nsw i64 %378, %391
  %393 = add nsw i64 %392, 1
  %394 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %380, i64 %393
  %395 = add nuw nsw i64 %391, 1
  %396 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %395
  %397 = icmp ult %"class.base::TimeTicks"* %381, %396
  %398 = icmp ugt %"class.base::TimeTicks"* %394, %2
  %399 = and i1 %397, %398
  br i1 %399, label %481, label %400

400:                                              ; preds = %389
  %401 = and i64 %387, 4611686018427387900
  %402 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %401
  %403 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %401
  %404 = add nsw i64 %401, -4
  %405 = lshr exact i64 %404, 2
  %406 = add nuw nsw i64 %405, 1
  %407 = and i64 %406, 3
  %408 = icmp ult i64 %404, 12
  br i1 %408, label %460, label %409

409:                                              ; preds = %400
  %410 = sub nsw i64 %406, %407
  br label %411

411:                                              ; preds = %411, %409
  %412 = phi i64 [ 0, %409 ], [ %457, %411 ]
  %413 = phi i64 [ %410, %409 ], [ %458, %411 ]
  %414 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %412
  %415 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %412, i32 0, i32 0
  %416 = bitcast i64* %415 to <2 x i64>*
  %417 = load <2 x i64>, <2 x i64>* %416, align 8, !alias.scope !21
  %418 = getelementptr i64, i64* %415, i64 2
  %419 = bitcast i64* %418 to <2 x i64>*
  %420 = load <2 x i64>, <2 x i64>* %419, align 8, !alias.scope !21
  %421 = bitcast %"class.base::TimeTicks"* %414 to <2 x i64>*
  store <2 x i64> %417, <2 x i64>* %421, align 8, !alias.scope !24, !noalias !21
  %422 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %414, i64 2
  %423 = bitcast %"class.base::TimeTicks"* %422 to <2 x i64>*
  store <2 x i64> %420, <2 x i64>* %423, align 8, !alias.scope !24, !noalias !21
  %424 = or i64 %412, 4
  %425 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %424
  %426 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %424, i32 0, i32 0
  %427 = bitcast i64* %426 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 8, !alias.scope !21
  %429 = getelementptr i64, i64* %426, i64 2
  %430 = bitcast i64* %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 8, !alias.scope !21
  %432 = bitcast %"class.base::TimeTicks"* %425 to <2 x i64>*
  store <2 x i64> %428, <2 x i64>* %432, align 8, !alias.scope !24, !noalias !21
  %433 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %425, i64 2
  %434 = bitcast %"class.base::TimeTicks"* %433 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %434, align 8, !alias.scope !24, !noalias !21
  %435 = or i64 %412, 8
  %436 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %435
  %437 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %435, i32 0, i32 0
  %438 = bitcast i64* %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !21
  %440 = getelementptr i64, i64* %437, i64 2
  %441 = bitcast i64* %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !21
  %443 = bitcast %"class.base::TimeTicks"* %436 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %443, align 8, !alias.scope !24, !noalias !21
  %444 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %436, i64 2
  %445 = bitcast %"class.base::TimeTicks"* %444 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %445, align 8, !alias.scope !24, !noalias !21
  %446 = or i64 %412, 12
  %447 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %446
  %448 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %446, i32 0, i32 0
  %449 = bitcast i64* %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !21
  %451 = getelementptr i64, i64* %448, i64 2
  %452 = bitcast i64* %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !21
  %454 = bitcast %"class.base::TimeTicks"* %447 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %454, align 8, !alias.scope !24, !noalias !21
  %455 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %447, i64 2
  %456 = bitcast %"class.base::TimeTicks"* %455 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %456, align 8, !alias.scope !24, !noalias !21
  %457 = add i64 %412, 16
  %458 = add i64 %413, -4
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %411, !llvm.loop !26

460:                                              ; preds = %411, %400
  %461 = phi i64 [ 0, %400 ], [ %457, %411 ]
  %462 = icmp eq i64 %407, 0
  br i1 %462, label %479, label %463

463:                                              ; preds = %460, %463
  %464 = phi i64 [ %476, %463 ], [ %461, %460 ]
  %465 = phi i64 [ %477, %463 ], [ %407, %460 ]
  %466 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %464
  %467 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 %464, i32 0, i32 0
  %468 = bitcast i64* %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 8, !alias.scope !21
  %470 = getelementptr i64, i64* %467, i64 2
  %471 = bitcast i64* %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !21
  %473 = bitcast %"class.base::TimeTicks"* %466 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %473, align 8, !alias.scope !24, !noalias !21
  %474 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %466, i64 2
  %475 = bitcast %"class.base::TimeTicks"* %474 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %475, align 8, !alias.scope !24, !noalias !21
  %476 = add i64 %464, 4
  %477 = add i64 %465, -1
  %478 = icmp eq i64 %477, 0
  br i1 %478, label %479, label %463, !llvm.loop !27

479:                                              ; preds = %463, %460
  %480 = icmp eq i64 %387, %401
  br i1 %480, label %539, label %481

481:                                              ; preds = %479, %389, %377
  %482 = phi %"class.base::TimeTicks"* [ %381, %389 ], [ %381, %377 ], [ %402, %479 ]
  %483 = phi %"class.base::TimeTicks"* [ %2, %389 ], [ %2, %377 ], [ %403, %479 ]
  %484 = ptrtoint %"class.base::TimeTicks"* %482 to i64
  %485 = add nsw i64 %378, %12
  %486 = add nsw i64 %485, -1
  %487 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %380, i64 %486, i32 0, i32 0
  %488 = ptrtoint i64* %487 to i64
  %489 = sub i64 %488, %484
  %490 = lshr i64 %489, 3
  %491 = add nuw nsw i64 %490, 1
  %492 = and i64 %491, 7
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %505, label %494

494:                                              ; preds = %481, %494
  %495 = phi %"class.base::TimeTicks"* [ %501, %494 ], [ %482, %481 ]
  %496 = phi %"class.base::TimeTicks"* [ %502, %494 ], [ %483, %481 ]
  %497 = phi i64 [ %503, %494 ], [ %492, %481 ]
  %498 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %496, i64 0, i32 0, i32 0
  %499 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 0, i32 0, i32 0
  %500 = load i64, i64* %498, align 8
  store i64 %500, i64* %499, align 8
  %501 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 1
  %502 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %496, i64 1
  %503 = add i64 %497, -1
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %505, label %494, !llvm.loop !28

505:                                              ; preds = %494, %481
  %506 = phi %"class.base::TimeTicks"* [ %482, %481 ], [ %501, %494 ]
  %507 = phi %"class.base::TimeTicks"* [ %483, %481 ], [ %502, %494 ]
  %508 = icmp ult i64 %489, 56
  br i1 %508, label %539, label %509

509:                                              ; preds = %505, %509
  %510 = phi %"class.base::TimeTicks"* [ %536, %509 ], [ %506, %505 ]
  %511 = phi %"class.base::TimeTicks"* [ %537, %509 ], [ %507, %505 ]
  %512 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 0, i32 0, i32 0
  %513 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 0, i32 0, i32 0
  %514 = load i64, i64* %512, align 8
  store i64 %514, i64* %513, align 8
  %515 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 1, i32 0, i32 0
  %516 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 1, i32 0, i32 0
  %517 = load i64, i64* %515, align 8
  store i64 %517, i64* %516, align 8
  %518 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 2, i32 0, i32 0
  %519 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 2, i32 0, i32 0
  %520 = load i64, i64* %518, align 8
  store i64 %520, i64* %519, align 8
  %521 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 3, i32 0, i32 0
  %522 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 3, i32 0, i32 0
  %523 = load i64, i64* %521, align 8
  store i64 %523, i64* %522, align 8
  %524 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 4, i32 0, i32 0
  %525 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 4, i32 0, i32 0
  %526 = load i64, i64* %524, align 8
  store i64 %526, i64* %525, align 8
  %527 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 5, i32 0, i32 0
  %528 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 5, i32 0, i32 0
  %529 = load i64, i64* %527, align 8
  store i64 %529, i64* %528, align 8
  %530 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 6, i32 0, i32 0
  %531 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 6, i32 0, i32 0
  %532 = load i64, i64* %530, align 8
  store i64 %532, i64* %531, align 8
  %533 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 7, i32 0, i32 0
  %534 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 7, i32 0, i32 0
  %535 = load i64, i64* %533, align 8
  store i64 %535, i64* %534, align 8
  %536 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %510, i64 8
  %537 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %511, i64 8
  %538 = icmp eq %"class.base::TimeTicks"* %384, %536
  br i1 %538, label %539, label %509, !llvm.loop !29

539:                                              ; preds = %505, %509, %479
  %540 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %9, align 8
  %541 = ptrtoint %"class.base::TimeTicks"* %540 to i64
  %542 = sub i64 %7, %541
  %543 = ashr exact i64 %542, 3
  %544 = sub nsw i64 0, %543
  %545 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %381, i64 %544
  %546 = ptrtoint %"class.base::TimeTicks"* %545 to i64
  %547 = icmp sgt i64 %542, 0
  br i1 %547, label %548, label %551

548:                                              ; preds = %539
  %549 = bitcast %"class.base::TimeTicks"* %545 to i8*
  %550 = bitcast %"class.base::TimeTicks"* %540 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %549, i8* align 8 %550, i64 %542, i1 false) #10
  br label %551

551:                                              ; preds = %548, %539
  %552 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %18, align 8
  %553 = icmp eq %"class.base::TimeTicks"* %552, %1
  br i1 %553, label %713, label %554

554:                                              ; preds = %551
  %555 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %552, i64 -1, i32 0, i32 0
  %556 = ptrtoint i64* %555 to i64
  %557 = sub i64 %556, %7
  %558 = lshr i64 %557, 3
  %559 = add nuw nsw i64 %558, 1
  %560 = icmp ult i64 %559, 4
  br i1 %560, label %656, label %561

561:                                              ; preds = %554
  %562 = add nsw i64 %378, %12
  %563 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %552, i64 -1, i32 0, i32 0
  %564 = ptrtoint i64* %563 to i64
  %565 = sub i64 %564, %7
  %566 = lshr i64 %565, 3
  %567 = add nsw i64 %562, %566
  %568 = add nsw i64 %567, 1
  %569 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %380, i64 %568
  %570 = add nuw nsw i64 %566, 1
  %571 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %570
  %572 = icmp ult %"class.base::TimeTicks"* %384, %571
  %573 = icmp ugt %"class.base::TimeTicks"* %569, %1
  %574 = and i1 %572, %573
  br i1 %574, label %656, label %575

575:                                              ; preds = %561
  %576 = and i64 %559, 4611686018427387900
  %577 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %384, i64 %576
  %578 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %576
  %579 = add nsw i64 %576, -4
  %580 = lshr exact i64 %579, 2
  %581 = add nuw nsw i64 %580, 1
  %582 = and i64 %581, 3
  %583 = icmp ult i64 %579, 12
  br i1 %583, label %635, label %584

584:                                              ; preds = %575
  %585 = sub nsw i64 %581, %582
  br label %586

586:                                              ; preds = %586, %584
  %587 = phi i64 [ 0, %584 ], [ %632, %586 ]
  %588 = phi i64 [ %585, %584 ], [ %633, %586 ]
  %589 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %384, i64 %587
  %590 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %587, i32 0, i32 0
  %591 = bitcast i64* %590 to <2 x i64>*
  %592 = load <2 x i64>, <2 x i64>* %591, align 8, !alias.scope !30
  %593 = getelementptr i64, i64* %590, i64 2
  %594 = bitcast i64* %593 to <2 x i64>*
  %595 = load <2 x i64>, <2 x i64>* %594, align 8, !alias.scope !30
  %596 = bitcast %"class.base::TimeTicks"* %589 to <2 x i64>*
  store <2 x i64> %592, <2 x i64>* %596, align 8, !alias.scope !33, !noalias !30
  %597 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %589, i64 2
  %598 = bitcast %"class.base::TimeTicks"* %597 to <2 x i64>*
  store <2 x i64> %595, <2 x i64>* %598, align 8, !alias.scope !33, !noalias !30
  %599 = or i64 %587, 4
  %600 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %384, i64 %599
  %601 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %599, i32 0, i32 0
  %602 = bitcast i64* %601 to <2 x i64>*
  %603 = load <2 x i64>, <2 x i64>* %602, align 8, !alias.scope !30
  %604 = getelementptr i64, i64* %601, i64 2
  %605 = bitcast i64* %604 to <2 x i64>*
  %606 = load <2 x i64>, <2 x i64>* %605, align 8, !alias.scope !30
  %607 = bitcast %"class.base::TimeTicks"* %600 to <2 x i64>*
  store <2 x i64> %603, <2 x i64>* %607, align 8, !alias.scope !33, !noalias !30
  %608 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %600, i64 2
  %609 = bitcast %"class.base::TimeTicks"* %608 to <2 x i64>*
  store <2 x i64> %606, <2 x i64>* %609, align 8, !alias.scope !33, !noalias !30
  %610 = or i64 %587, 8
  %611 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %384, i64 %610
  %612 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %610, i32 0, i32 0
  %613 = bitcast i64* %612 to <2 x i64>*
  %614 = load <2 x i64>, <2 x i64>* %613, align 8, !alias.scope !30
  %615 = getelementptr i64, i64* %612, i64 2
  %616 = bitcast i64* %615 to <2 x i64>*
  %617 = load <2 x i64>, <2 x i64>* %616, align 8, !alias.scope !30
  %618 = bitcast %"class.base::TimeTicks"* %611 to <2 x i64>*
  store <2 x i64> %614, <2 x i64>* %618, align 8, !alias.scope !33, !noalias !30
  %619 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %611, i64 2
  %620 = bitcast %"class.base::TimeTicks"* %619 to <2 x i64>*
  store <2 x i64> %617, <2 x i64>* %620, align 8, !alias.scope !33, !noalias !30
  %621 = or i64 %587, 12
  %622 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %384, i64 %621
  %623 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %621, i32 0, i32 0
  %624 = bitcast i64* %623 to <2 x i64>*
  %625 = load <2 x i64>, <2 x i64>* %624, align 8, !alias.scope !30
  %626 = getelementptr i64, i64* %623, i64 2
  %627 = bitcast i64* %626 to <2 x i64>*
  %628 = load <2 x i64>, <2 x i64>* %627, align 8, !alias.scope !30
  %629 = bitcast %"class.base::TimeTicks"* %622 to <2 x i64>*
  store <2 x i64> %625, <2 x i64>* %629, align 8, !alias.scope !33, !noalias !30
  %630 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %622, i64 2
  %631 = bitcast %"class.base::TimeTicks"* %630 to <2 x i64>*
  store <2 x i64> %628, <2 x i64>* %631, align 8, !alias.scope !33, !noalias !30
  %632 = add i64 %587, 16
  %633 = add i64 %588, -4
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %586, !llvm.loop !35

635:                                              ; preds = %586, %575
  %636 = phi i64 [ 0, %575 ], [ %632, %586 ]
  %637 = icmp eq i64 %582, 0
  br i1 %637, label %654, label %638

638:                                              ; preds = %635, %638
  %639 = phi i64 [ %651, %638 ], [ %636, %635 ]
  %640 = phi i64 [ %652, %638 ], [ %582, %635 ]
  %641 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %384, i64 %639
  %642 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 %639, i32 0, i32 0
  %643 = bitcast i64* %642 to <2 x i64>*
  %644 = load <2 x i64>, <2 x i64>* %643, align 8, !alias.scope !30
  %645 = getelementptr i64, i64* %642, i64 2
  %646 = bitcast i64* %645 to <2 x i64>*
  %647 = load <2 x i64>, <2 x i64>* %646, align 8, !alias.scope !30
  %648 = bitcast %"class.base::TimeTicks"* %641 to <2 x i64>*
  store <2 x i64> %644, <2 x i64>* %648, align 8, !alias.scope !33, !noalias !30
  %649 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %641, i64 2
  %650 = bitcast %"class.base::TimeTicks"* %649 to <2 x i64>*
  store <2 x i64> %647, <2 x i64>* %650, align 8, !alias.scope !33, !noalias !30
  %651 = add i64 %639, 4
  %652 = add i64 %640, -1
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %654, label %638, !llvm.loop !36

654:                                              ; preds = %638, %635
  %655 = icmp eq i64 %559, %576
  br i1 %655, label %713, label %656

656:                                              ; preds = %654, %561, %554
  %657 = phi %"class.base::TimeTicks"* [ %384, %561 ], [ %384, %554 ], [ %577, %654 ]
  %658 = phi %"class.base::TimeTicks"* [ %1, %561 ], [ %1, %554 ], [ %578, %654 ]
  %659 = ptrtoint %"class.base::TimeTicks"* %658 to i64
  %660 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %552, i64 -1, i32 0, i32 0
  %661 = ptrtoint i64* %660 to i64
  %662 = sub i64 %661, %659
  %663 = lshr i64 %662, 3
  %664 = add nuw nsw i64 %663, 1
  %665 = and i64 %664, 7
  %666 = icmp eq i64 %665, 0
  br i1 %666, label %678, label %667

667:                                              ; preds = %656, %667
  %668 = phi %"class.base::TimeTicks"* [ %675, %667 ], [ %657, %656 ]
  %669 = phi %"class.base::TimeTicks"* [ %674, %667 ], [ %658, %656 ]
  %670 = phi i64 [ %676, %667 ], [ %665, %656 ]
  %671 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %669, i64 0, i32 0, i32 0
  %672 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %668, i64 0, i32 0, i32 0
  %673 = load i64, i64* %671, align 8
  store i64 %673, i64* %672, align 8
  %674 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %669, i64 1
  %675 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %668, i64 1
  %676 = add i64 %670, -1
  %677 = icmp eq i64 %676, 0
  br i1 %677, label %678, label %667, !llvm.loop !37

678:                                              ; preds = %667, %656
  %679 = phi %"class.base::TimeTicks"* [ undef, %656 ], [ %675, %667 ]
  %680 = phi %"class.base::TimeTicks"* [ %657, %656 ], [ %675, %667 ]
  %681 = phi %"class.base::TimeTicks"* [ %658, %656 ], [ %674, %667 ]
  %682 = icmp ult i64 %662, 56
  br i1 %682, label %713, label %683

683:                                              ; preds = %678, %683
  %684 = phi %"class.base::TimeTicks"* [ %711, %683 ], [ %680, %678 ]
  %685 = phi %"class.base::TimeTicks"* [ %710, %683 ], [ %681, %678 ]
  %686 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 0, i32 0, i32 0
  %687 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 0, i32 0, i32 0
  %688 = load i64, i64* %686, align 8
  store i64 %688, i64* %687, align 8
  %689 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 1, i32 0, i32 0
  %690 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 1, i32 0, i32 0
  %691 = load i64, i64* %689, align 8
  store i64 %691, i64* %690, align 8
  %692 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 2, i32 0, i32 0
  %693 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 2, i32 0, i32 0
  %694 = load i64, i64* %692, align 8
  store i64 %694, i64* %693, align 8
  %695 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 3, i32 0, i32 0
  %696 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 3, i32 0, i32 0
  %697 = load i64, i64* %695, align 8
  store i64 %697, i64* %696, align 8
  %698 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 4, i32 0, i32 0
  %699 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 4, i32 0, i32 0
  %700 = load i64, i64* %698, align 8
  store i64 %700, i64* %699, align 8
  %701 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 5, i32 0, i32 0
  %702 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 5, i32 0, i32 0
  %703 = load i64, i64* %701, align 8
  store i64 %703, i64* %702, align 8
  %704 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 6, i32 0, i32 0
  %705 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 6, i32 0, i32 0
  %706 = load i64, i64* %704, align 8
  store i64 %706, i64* %705, align 8
  %707 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 7, i32 0, i32 0
  %708 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 7, i32 0, i32 0
  %709 = load i64, i64* %707, align 8
  store i64 %709, i64* %708, align 8
  %710 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %685, i64 8
  %711 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %684, i64 8
  %712 = icmp eq %"class.base::TimeTicks"* %710, %552
  br i1 %712, label %713, label %683, !llvm.loop !38

713:                                              ; preds = %678, %683, %654, %551
  %714 = phi %"class.base::TimeTicks"* [ %384, %551 ], [ %577, %654 ], [ %679, %678 ], [ %711, %683 ]
  %715 = ptrtoint %"class.base::TimeTicks"* %714 to i64
  %716 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %9, align 8
  store i64 %546, i64* %346, align 8
  store i64 %715, i64* %24, align 8
  store i64 %383, i64* %16, align 8
  %717 = icmp eq %"class.base::TimeTicks"* %716, null
  br i1 %717, label %720, label %718

718:                                              ; preds = %713
  %719 = bitcast %"class.base::TimeTicks"* %716 to i8*
  tail call void @_ZdlPv(i8* %719) #11
  br label %720

720:                                              ; preds = %718, %713, %195, %340, %344, %4
  %721 = phi %"class.base::TimeTicks"* [ %1, %4 ], [ %1, %344 ], [ %1, %340 ], [ %1, %195 ], [ %381, %713 ], [ %381, %718 ]
  ret %"class.base::TimeTicks"* %721
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalization18AddNewLayoutShiftsERKNSt3__16vectorIN4mojo9StructPtrINS_5mojom11LayoutShiftEEENS1_9allocatorIS7_EEEEN4base9TimeTicksEf(%"class.page_load_metrics::LayoutShiftNormalization"*, %"class.std::__1::vector.16"* nocapture readonly dereferenceable(24), i64, float) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.std::__1::__less.56", align 1
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %1, i64 0, i32 0, i32 0
  %7 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %1, i64 0, i32 0, i32 1
  %9 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %8, align 8
  %10 = icmp eq %"class.mojo::StructPtr"* %7, %9
  %11 = ptrtoint %"class.mojo::StructPtr"* %9 to i64
  %12 = ptrtoint %"class.mojo::StructPtr"* %7 to i64
  br i1 %10, label %268, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 6
  %15 = load i8, i8* %14, align 8, !range !39
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %268

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.page_load_metrics::mojom::LayoutShift"*, %"class.page_load_metrics::mojom::LayoutShift"** %18, align 8
  %20 = getelementptr inbounds %"class.page_load_metrics::mojom::LayoutShift", %"class.page_load_metrics::mojom::LayoutShift"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = sub nsw i64 %2, %21
  %23 = icmp sgt i64 %22, 5000000
  br i1 %23, label %44, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1
  %26 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1, i32 0, i32 1
  %27 = bitcast %"struct.std::__1::pair"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector"* %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = ashr exact i64 %31, 4
  %33 = bitcast %"class.mojo::StructPtr"** %8 to i64*
  %34 = bitcast %"class.std::__1::vector.16"* %1 to i64*
  %35 = sub i64 %11, %12
  %36 = ashr exact i64 %35, 3
  %37 = add nsw i64 %36, %32
  %38 = icmp ugt i64 %37, 300
  br i1 %38, label %44, label %39

39:                                               ; preds = %24
  %40 = inttoptr i64 %28 to %"struct.std::__1::pair"*
  %41 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %42 = bitcast %"struct.std::__1::pair"** %41 to i64*
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  br label %183

44:                                               ; preds = %17, %24
  store i8 1, i8* %14, align 8
  br label %268

45:                                               ; preds = %260
  %46 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %43, align 8
  %47 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %48 = load i64, i64* %33, align 8
  %49 = load i64, i64* %34, align 8
  %50 = sub i64 %48, %49
  %51 = ashr exact i64 %50, 3
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %53 = sub nsw i64 0, %51
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %47, i64 %53
  %55 = getelementptr inbounds %"struct.std::__1::__less.56", %"struct.std::__1::__less.56"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %55) #10
  %56 = ptrtoint %"struct.std::__1::pair"* %46 to i64
  %57 = ptrtoint %"struct.std::__1::pair"* %54 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 4
  %60 = shl i64 %50, 1
  %61 = ashr exact i64 %60, 4
  %62 = icmp slt i64 %61, %59
  %63 = select i1 %62, i64 %61, i64 %59
  %64 = icmp sgt i64 %63, 0
  br i1 %64, label %65, label %76

65:                                               ; preds = %45
  %66 = icmp slt i64 %63, 576460752303423487
  %67 = select i1 %66, i64 %63, i64 576460752303423487
  br label %68

68:                                               ; preds = %73, %65
  %69 = phi i64 [ %74, %73 ], [ %67, %65 ]
  %70 = shl i64 %69, 4
  %71 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %70, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #10
  %72 = icmp eq i8* %71, null
  br i1 %72, label %73, label %77

73:                                               ; preds = %68
  %74 = lshr i64 %69, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %68

76:                                               ; preds = %73, %45
  call void @_ZNSt3__115__inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.std::__1::pair"* %46, %"struct.std::__1::pair"* %54, %"struct.std::__1::pair"* %47, %"struct.std::__1::__less.56"* nonnull dereferenceable(1) %5, i64 %59, i64 %61, %"struct.std::__1::pair"* null, i64 0) #10
  br label %79

77:                                               ; preds = %68
  %78 = bitcast i8* %71 to %"struct.std::__1::pair"*
  call void @_ZNSt3__115__inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.std::__1::pair"* %46, %"struct.std::__1::pair"* %54, %"struct.std::__1::pair"* %47, %"struct.std::__1::__less.56"* nonnull dereferenceable(1) %5, i64 %59, i64 %61, %"struct.std::__1::pair"* nonnull %78, i64 %69) #10
  call void @_ZdlPv(i8* nonnull %71) #11
  br label %79

79:                                               ; preds = %76, %77
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %55) #10
  %80 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %52, align 8
  %81 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %82 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %2, i64 -5000000)
  %83 = extractvalue { i64, i1 } %82, 1
  %84 = extractvalue { i64, i1 } %82, 0
  %85 = select i1 %83, i64 -9223372036854775808, i64 %84, !prof !40
  %86 = ptrtoint %"struct.std::__1::pair"* %80 to i64
  %87 = ptrtoint %"struct.std::__1::pair"* %81 to i64
  %88 = sub i64 %87, %86
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %106, label %90

90:                                               ; preds = %79
  %91 = ashr exact i64 %88, 4
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi %"struct.std::__1::pair"* [ %80, %90 ], [ %104, %92 ]
  %94 = phi i64 [ %91, %90 ], [ %103, %92 ]
  %95 = lshr i64 %94, 1
  %96 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %93, i64 %95
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %96, i64 0, i32 0, i32 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = icmp sgt i64 %98, %85
  %100 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %96, i64 1
  %101 = xor i64 %95, -1
  %102 = add i64 %94, %101
  %103 = select i1 %99, i64 %95, i64 %102
  %104 = select i1 %99, %"struct.std::__1::pair"* %93, %"struct.std::__1::pair"* %100
  %105 = icmp eq i64 %103, 0
  br i1 %105, label %106, label %92

106:                                              ; preds = %92, %79
  %107 = phi %"struct.std::__1::pair"* [ %80, %79 ], [ %104, %92 ]
  %108 = ptrtoint %"struct.std::__1::pair"* %107 to i64
  call void @_ZN17page_load_metrics24LayoutShiftNormalization15UpdateWindowCLSEN4base9TimeTicksENSt3__111__wrap_iterIPKNS3_4pairIS2_dEEEES9_S9_f(%"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 %2, %"struct.std::__1::pair"* %80, %"struct.std::__1::pair"* %107, %"struct.std::__1::pair"* %81, float %3)
  %109 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %52, align 8
  %110 = icmp eq %"struct.std::__1::pair"* %109, %107
  br i1 %110, label %268, label %111

111:                                              ; preds = %106
  %112 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %113 = icmp eq %"struct.std::__1::pair"* %112, %107
  br i1 %113, label %181, label %114

114:                                              ; preds = %111
  %115 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %112, i64 -1, i32 0, i32 0, i32 0
  %116 = ptrtoint i64* %115 to i64
  %117 = sub i64 %116, %108
  %118 = lshr i64 %117, 4
  %119 = add nuw nsw i64 %118, 1
  %120 = and i64 %119, 3
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %138, label %122

122:                                              ; preds = %114, %122
  %123 = phi %"struct.std::__1::pair"* [ %135, %122 ], [ %109, %114 ]
  %124 = phi %"struct.std::__1::pair"* [ %134, %122 ], [ %107, %114 ]
  %125 = phi i64 [ %136, %122 ], [ %120, %114 ]
  %126 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %124, i64 0, i32 0, i32 0, i32 0
  %127 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 0, i32 0, i32 0, i32 0
  %128 = load i64, i64* %126, align 8
  store i64 %128, i64* %127, align 8
  %129 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %124, i64 0, i32 1
  %130 = bitcast double* %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 0, i32 1
  %133 = bitcast double* %132 to i64*
  store i64 %131, i64* %133, align 8
  %134 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %124, i64 1
  %135 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 1
  %136 = add i64 %125, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %122, !llvm.loop !41

138:                                              ; preds = %122, %114
  %139 = phi %"struct.std::__1::pair"* [ undef, %114 ], [ %135, %122 ]
  %140 = phi %"struct.std::__1::pair"* [ %109, %114 ], [ %135, %122 ]
  %141 = phi %"struct.std::__1::pair"* [ %107, %114 ], [ %134, %122 ]
  %142 = icmp ult i64 %117, 48
  br i1 %142, label %181, label %143

143:                                              ; preds = %138, %143
  %144 = phi %"struct.std::__1::pair"* [ %179, %143 ], [ %140, %138 ]
  %145 = phi %"struct.std::__1::pair"* [ %178, %143 ], [ %141, %138 ]
  %146 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 0, i32 0, i32 0, i32 0
  %147 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 0, i32 0, i32 0, i32 0
  %148 = load i64, i64* %146, align 8
  store i64 %148, i64* %147, align 8
  %149 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 0, i32 1
  %150 = bitcast double* %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 0, i32 1
  %153 = bitcast double* %152 to i64*
  store i64 %151, i64* %153, align 8
  %154 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 1, i32 0, i32 0, i32 0
  %155 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 1, i32 0, i32 0, i32 0
  %156 = load i64, i64* %154, align 8
  store i64 %156, i64* %155, align 8
  %157 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 1, i32 1
  %158 = bitcast double* %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 1, i32 1
  %161 = bitcast double* %160 to i64*
  store i64 %159, i64* %161, align 8
  %162 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 2, i32 0, i32 0, i32 0
  %163 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 2, i32 0, i32 0, i32 0
  %164 = load i64, i64* %162, align 8
  store i64 %164, i64* %163, align 8
  %165 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 2, i32 1
  %166 = bitcast double* %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 2, i32 1
  %169 = bitcast double* %168 to i64*
  store i64 %167, i64* %169, align 8
  %170 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 3, i32 0, i32 0, i32 0
  %171 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 3, i32 0, i32 0, i32 0
  %172 = load i64, i64* %170, align 8
  store i64 %172, i64* %171, align 8
  %173 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 3, i32 1
  %174 = bitcast double* %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 3, i32 1
  %177 = bitcast double* %176 to i64*
  store i64 %175, i64* %177, align 8
  %178 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %145, i64 4
  %179 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %144, i64 4
  %180 = icmp eq %"struct.std::__1::pair"* %178, %112
  br i1 %180, label %181, label %143

181:                                              ; preds = %138, %143, %111
  %182 = phi %"struct.std::__1::pair"* [ %109, %111 ], [ %139, %138 ], [ %179, %143 ]
  store %"struct.std::__1::pair"* %182, %"struct.std::__1::pair"** %26, align 8
  br label %268

183:                                              ; preds = %263, %39
  %184 = phi i64 [ %28, %39 ], [ %267, %263 ]
  %185 = phi %"struct.std::__1::pair"* [ %40, %39 ], [ %266, %263 ]
  %186 = phi %"class.page_load_metrics::mojom::LayoutShift"* [ %19, %39 ], [ %265, %263 ]
  %187 = phi %"class.mojo::StructPtr"* [ %7, %39 ], [ %261, %263 ]
  %188 = getelementptr inbounds %"class.page_load_metrics::mojom::LayoutShift", %"class.page_load_metrics::mojom::LayoutShift"* %186, i64 0, i32 1
  %189 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %41, align 8
  %190 = icmp ult %"struct.std::__1::pair"* %185, %189
  %191 = ptrtoint %"struct.std::__1::pair"* %189 to i64
  br i1 %190, label %192, label %202

192:                                              ; preds = %183
  %193 = getelementptr inbounds %"class.page_load_metrics::mojom::LayoutShift", %"class.page_load_metrics::mojom::LayoutShift"* %186, i64 0, i32 0, i32 0, i32 0
  %194 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 0, i32 0, i32 0, i32 0
  %195 = load i64, i64* %193, align 8
  store i64 %195, i64* %194, align 8
  %196 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 0, i32 1
  %197 = bitcast double* %188 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast double* %196 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 1
  %201 = ptrtoint %"struct.std::__1::pair"* %200 to i64
  store i64 %201, i64* %27, align 8
  br label %260

202:                                              ; preds = %183
  %203 = load i64, i64* %29, align 8
  %204 = sub i64 %184, %203
  %205 = ashr exact i64 %204, 4
  %206 = add nsw i64 %205, 1
  %207 = icmp ugt i64 %206, 1152921504606846975
  br i1 %207, label %208, label %210

208:                                              ; preds = %202
  %209 = bitcast %"class.std::__1::vector"* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %209) #12
  unreachable

210:                                              ; preds = %202
  %211 = sub i64 %191, %203
  %212 = ashr exact i64 %211, 4
  %213 = icmp ult i64 %212, 576460752303423487
  br i1 %213, label %214, label %222

214:                                              ; preds = %210
  %215 = ashr exact i64 %211, 3
  %216 = icmp ult i64 %215, %206
  %217 = select i1 %216, i64 %206, i64 %215
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %227, label %219

219:                                              ; preds = %214
  %220 = icmp ugt i64 %217, 1152921504606846975
  br i1 %220, label %221, label %222

221:                                              ; preds = %219
  tail call void @abort() #12
  unreachable

222:                                              ; preds = %219, %210
  %223 = phi i64 [ %217, %219 ], [ 1152921504606846975, %210 ]
  %224 = shl i64 %223, 4
  %225 = tail call i8* @_Znwm(i64 %224) #11
  %226 = bitcast i8* %225 to %"struct.std::__1::pair"*
  br label %227

227:                                              ; preds = %222, %214
  %228 = phi i64 [ %223, %222 ], [ 0, %214 ]
  %229 = phi %"struct.std::__1::pair"* [ %226, %222 ], [ null, %214 ]
  %230 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %229, i64 %205
  %231 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %229, i64 %228
  %232 = ptrtoint %"struct.std::__1::pair"* %231 to i64
  %233 = getelementptr inbounds %"class.page_load_metrics::mojom::LayoutShift", %"class.page_load_metrics::mojom::LayoutShift"* %186, i64 0, i32 0, i32 0, i32 0
  %234 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 0, i32 0, i32 0, i32 0
  %235 = load i64, i64* %233, align 8
  store i64 %235, i64* %234, align 8
  %236 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %229, i64 %205, i32 1
  %237 = bitcast double* %188 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast double* %236 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 1
  %241 = ptrtoint %"struct.std::__1::pair"* %240 to i64
  %242 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %43, align 8
  %243 = load i64, i64* %27, align 8
  %244 = ptrtoint %"struct.std::__1::pair"* %242 to i64
  %245 = sub i64 %243, %244
  %246 = ashr exact i64 %245, 4
  %247 = sub nsw i64 0, %246
  %248 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %230, i64 %247
  %249 = ptrtoint %"struct.std::__1::pair"* %248 to i64
  %250 = icmp sgt i64 %245, 0
  br i1 %250, label %251, label %255

251:                                              ; preds = %227
  %252 = bitcast %"struct.std::__1::pair"* %248 to i8*
  %253 = bitcast %"struct.std::__1::pair"* %242 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %252, i8* align 8 %253, i64 %245, i1 false) #10
  %254 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %43, align 8
  br label %255

255:                                              ; preds = %251, %227
  %256 = phi %"struct.std::__1::pair"* [ %242, %227 ], [ %254, %251 ]
  store i64 %249, i64* %29, align 8
  store i64 %241, i64* %27, align 8
  store i64 %232, i64* %42, align 8
  %257 = icmp eq %"struct.std::__1::pair"* %256, null
  br i1 %257, label %260, label %258

258:                                              ; preds = %255
  %259 = bitcast %"struct.std::__1::pair"* %256 to i8*
  tail call void @_ZdlPv(i8* %259) #11
  br label %260

260:                                              ; preds = %258, %255, %192
  %261 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %187, i64 1
  %262 = icmp eq %"class.mojo::StructPtr"* %261, %9
  br i1 %262, label %45, label %263

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %261, i64 0, i32 0, i32 0, i32 0, i32 0
  %265 = load %"class.page_load_metrics::mojom::LayoutShift"*, %"class.page_load_metrics::mojom::LayoutShift"** %264, align 8
  %266 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %267 = ptrtoint %"struct.std::__1::pair"* %266 to i64
  br label %183

268:                                              ; preds = %181, %106, %13, %4, %44
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalization15UpdateWindowCLSEN4base9TimeTicksENSt3__111__wrap_iterIPKNS3_4pairIS2_dEEEES9_S9_f(%"class.page_load_metrics::LayoutShiftNormalization"*, i64, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, float) local_unnamed_addr #0 align 2 {
  %7 = ptrtoint %"struct.std::__1::pair"* %3 to i64
  %8 = alloca %"class.std::__1::vector.8", align 8
  %9 = alloca %"class.std::__1::vector.8", align 8
  %10 = alloca float, align 8
  %11 = alloca float, align 8
  %12 = alloca float, align 8
  %13 = alloca %"class.std::__1::vector.1", align 8
  %14 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 3
  %15 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN17page_load_metrics24LayoutShiftNormalization19UpdateSlidingWindowEPNSt3__16vectorINS0_13SlidingWindowENS1_9allocatorIS3_EEEEN4base9TimeDeltaENS8_9TimeTicksENS1_11__wrap_iterIPKNS1_4pairISA_dEEEESG_Rd(%"class.page_load_metrics::LayoutShiftNormalization"* undef, %"class.std::__1::vector.8"* %14, i64 300000, i64 %1, %"struct.std::__1::pair"* %2, %"struct.std::__1::pair"* %3, double* dereferenceable(8) %15)
  %16 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 4
  %17 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN17page_load_metrics24LayoutShiftNormalization19UpdateSlidingWindowEPNSt3__16vectorINS0_13SlidingWindowENS1_9allocatorIS3_EEEEN4base9TimeDeltaENS8_9TimeTicksENS1_11__wrap_iterIPKNS1_4pairISA_dEEEESG_Rd(%"class.page_load_metrics::LayoutShiftNormalization"* undef, %"class.std::__1::vector.8"* %16, i64 1000000, i64 %1, %"struct.std::__1::pair"* %2, %"struct.std::__1::pair"* %3, double* dereferenceable(8) %17)
  %18 = bitcast %"class.std::__1::vector.8"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %8, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %8, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #10
  %22 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 3, i32 0, i32 1
  %23 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector.8"* %14 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = ashr exact i64 %27, 4
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %50, label %30

30:                                               ; preds = %6
  %31 = icmp ugt i64 %28, 1152921504606846975
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = bitcast %"class.std::__1::vector.8"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %33) #12
  unreachable

34:                                               ; preds = %30
  %35 = tail call i8* @_Znwm(i64 %27) #11
  %36 = bitcast i8* %35 to %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*
  %37 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %20 to i8**
  store i8* %35, i8** %37, align 8
  %38 = bitcast %"class.std::__1::vector.8"* %8 to i8**
  store i8* %35, i8** %38, align 8
  %39 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %36, i64 %28
  store %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %39, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %21, align 8
  %40 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %20 to i64*
  %41 = ptrtoint i8* %35 to i64
  %42 = icmp sgt i64 %27, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %34
  %44 = lshr exact i64 %27, 4
  %45 = inttoptr i64 %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 %45, i64 %27, i1 false) #10
  %46 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %36, i64 %44
  %47 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %46 to i64
  br label %48

48:                                               ; preds = %43, %34
  %49 = phi i64 [ %47, %43 ], [ %41, %34 ]
  store i64 %49, i64* %40, align 8
  br label %50

50:                                               ; preds = %6, %48
  %51 = bitcast %"class.std::__1::vector.8"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #10
  %52 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %9, i64 0, i32 0, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %9, i64 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 0, i64 24, i1 false) #10
  %55 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 4, i32 0, i32 1
  %56 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"class.std::__1::vector.8"* %16 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %57, %59
  %61 = ashr exact i64 %60, 4
  %62 = icmp eq i64 %60, 0
  br i1 %62, label %83, label %63

63:                                               ; preds = %50
  %64 = icmp ugt i64 %61, 1152921504606846975
  br i1 %64, label %65, label %67

65:                                               ; preds = %63
  %66 = bitcast %"class.std::__1::vector.8"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %66) #12
  unreachable

67:                                               ; preds = %63
  %68 = tail call i8* @_Znwm(i64 %60) #11
  %69 = bitcast i8* %68 to %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*
  %70 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %53 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast %"class.std::__1::vector.8"* %9 to i8**
  store i8* %68, i8** %71, align 8
  %72 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %69, i64 %61
  store %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %72, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %54, align 8
  %73 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %53 to i64*
  %74 = ptrtoint i8* %68 to i64
  %75 = icmp sgt i64 %60, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %67
  %77 = lshr exact i64 %60, 4
  %78 = inttoptr i64 %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %68, i8* align 8 %78, i64 %60, i1 false) #10
  %79 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %69, i64 %77
  %80 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %79 to i64
  br label %81

81:                                               ; preds = %76, %67
  %82 = phi i64 [ %80, %76 ], [ %74, %67 ]
  store i64 %82, i64* %73, align 8
  br label %83

83:                                               ; preds = %50, %81
  %84 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 2
  %85 = icmp eq %"struct.std::__1::pair"* %2, %3
  br i1 %85, label %219, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5, i32 1, i32 0, i32 0
  %88 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %89 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5, i32 2
  %90 = bitcast float* %84 to i32*
  %91 = load i64, i64* %87, align 8
  br label %92

92:                                               ; preds = %104, %86
  %93 = phi i64 [ %91, %86 ], [ %105, %104 ]
  %94 = phi %"struct.std::__1::pair"* [ %2, %86 ], [ %117, %104 ]
  %95 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = sub nsw i64 %96, %93
  %98 = icmp sgt i64 %97, 1000000
  br i1 %98, label %103, label %99

99:                                               ; preds = %92
  %100 = load i64, i64* %88, align 8
  %101 = sub nsw i64 %96, %100
  %102 = icmp sgt i64 %101, 5000000
  br i1 %102, label %103, label %104

103:                                              ; preds = %99, %92
  store i64 %96, i64* %88, align 8
  store float 0.000000e+00, float* %89, align 8
  br label %104

104:                                              ; preds = %103, %99
  %105 = load i64, i64* %95, align 8
  store i64 %105, i64* %87, align 8
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %94, i64 0, i32 1
  %107 = load double, double* %106, align 8
  %108 = load float, float* %89, align 8
  %109 = fpext float %108 to double
  %110 = fadd double %107, %109
  %111 = fptrunc double %110 to float
  store float %111, float* %89, align 8
  %112 = load float, float* %84, align 4
  %113 = fcmp olt float %112, %111
  %114 = select i1 %113, float* %89, float* %84
  %115 = bitcast float* %114 to i32*
  %116 = load i32, i32* %115, align 4
  store i32 %116, i32* %90, align 4
  %117 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %94, i64 1
  %118 = icmp eq %"struct.std::__1::pair"* %117, %3
  br i1 %118, label %119, label %92

119:                                              ; preds = %104
  %120 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 3
  %121 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %122 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %123 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6, i32 2
  %124 = bitcast float* %120 to i32*
  %125 = load i64, i64* %121, align 8
  br label %126

126:                                              ; preds = %134, %119
  %127 = phi i64 [ %125, %119 ], [ %135, %134 ]
  %128 = phi %"struct.std::__1::pair"* [ %2, %119 ], [ %147, %134 ]
  %129 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %128, i64 0, i32 0, i32 0, i32 0
  %130 = load i64, i64* %129, align 8
  %131 = sub nsw i64 %130, %127
  %132 = icmp sgt i64 %131, 1000000
  br i1 %132, label %133, label %134

133:                                              ; preds = %126
  store i64 %130, i64* %122, align 8
  store float 0.000000e+00, float* %123, align 8
  br label %134

134:                                              ; preds = %133, %126
  %135 = load i64, i64* %129, align 8
  store i64 %135, i64* %121, align 8
  %136 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %128, i64 0, i32 1
  %137 = load double, double* %136, align 8
  %138 = load float, float* %123, align 8
  %139 = fpext float %138 to double
  %140 = fadd double %137, %139
  %141 = fptrunc double %140 to float
  store float %141, float* %123, align 8
  %142 = load float, float* %120, align 4
  %143 = fcmp olt float %142, %141
  %144 = select i1 %143, float* %123, float* %120
  %145 = bitcast float* %144 to i32*
  %146 = load i32, i32* %145, align 4
  store i32 %146, i32* %124, align 4
  %147 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %128, i64 1
  %148 = icmp eq %"struct.std::__1::pair"* %147, %3
  br i1 %148, label %149, label %126

149:                                              ; preds = %134
  %150 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2
  %151 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 9
  %152 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8, i32 1, i32 0, i32 0
  %153 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %154 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %150, i64 0, i32 0, i32 0
  %155 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2, i32 0, i32 1
  %156 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8, i32 2
  %157 = bitcast float* %151 to i32*
  %158 = load i64, i64* %152, align 8
  br label %159

159:                                              ; preds = %204, %149
  %160 = phi i64 [ %158, %149 ], [ %205, %204 ]
  %161 = phi %"struct.std::__1::pair"* [ %2, %149 ], [ %217, %204 ]
  %162 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %161, i64 0, i32 0, i32 0, i32 0
  %163 = load i64, i64* %162, align 8
  %164 = sub nsw i64 %163, %160
  %165 = icmp sgt i64 %164, 1000000
  br i1 %165, label %178, label %166

166:                                              ; preds = %159
  %167 = load i64, i64* %153, align 8
  %168 = sub nsw i64 %163, %167
  %169 = icmp sgt i64 %168, 5000000
  br i1 %169, label %178, label %170

170:                                              ; preds = %166
  %171 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %154, align 8
  %172 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %155, align 8
  %173 = icmp eq %"class.base::TimeTicks"* %171, %172
  br i1 %173, label %204, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %171, i64 0, i32 0, i32 0
  %176 = load i64, i64* %175, align 8
  %177 = icmp sgt i64 %176, %163
  br i1 %177, label %204, label %178

178:                                              ; preds = %174, %166, %159
  store i64 %163, i64* %153, align 8
  store float 0.000000e+00, float* %156, align 8
  %179 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %154, align 8
  %180 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %155, align 8
  %181 = icmp eq %"class.base::TimeTicks"* %179, %180
  br i1 %181, label %204, label %182

182:                                              ; preds = %178, %200
  %183 = phi %"class.base::TimeTicks"* [ %201, %200 ], [ %179, %178 ]
  %184 = phi %"class.base::TimeTicks"* [ %202, %200 ], [ %180, %178 ]
  %185 = load i64, i64* %162, align 8
  %186 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %183, i64 0, i32 0, i32 0
  %187 = load i64, i64* %186, align 8
  %188 = icmp sgt i64 %187, %185
  br i1 %188, label %204, label %189

189:                                              ; preds = %182
  %190 = ptrtoint %"class.base::TimeTicks"* %184 to i64
  %191 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %183, i64 1
  %192 = ptrtoint %"class.base::TimeTicks"* %191 to i64
  %193 = sub i64 %190, %192
  %194 = ashr exact i64 %193, 3
  %195 = icmp eq i64 %193, 0
  br i1 %195, label %200, label %196

196:                                              ; preds = %189
  %197 = bitcast %"class.base::TimeTicks"* %183 to i8*
  %198 = bitcast %"class.base::TimeTicks"* %191 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %197, i8* align 8 %198, i64 %193, i1 false) #10
  %199 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %154, align 8
  br label %200

200:                                              ; preds = %196, %189
  %201 = phi %"class.base::TimeTicks"* [ %183, %189 ], [ %199, %196 ]
  %202 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %183, i64 %194
  store %"class.base::TimeTicks"* %202, %"class.base::TimeTicks"** %155, align 8
  %203 = icmp eq %"class.base::TimeTicks"* %201, %202
  br i1 %203, label %204, label %182

204:                                              ; preds = %200, %182, %178, %174, %170
  %205 = load i64, i64* %162, align 8
  store i64 %205, i64* %152, align 8
  %206 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %161, i64 0, i32 1
  %207 = load double, double* %206, align 8
  %208 = load float, float* %156, align 8
  %209 = fpext float %208 to double
  %210 = fadd double %207, %209
  %211 = fptrunc double %210 to float
  store float %211, float* %156, align 8
  %212 = load float, float* %151, align 4
  %213 = fcmp olt float %212, %211
  %214 = select i1 %213, float* %156, float* %151
  %215 = bitcast float* %214 to i32*
  %216 = load i32, i32* %215, align 4
  store i32 %216, i32* %157, align 4
  %217 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %161, i64 1
  %218 = icmp eq %"struct.std::__1::pair"* %217, %3
  br i1 %218, label %228, label %159

219:                                              ; preds = %83
  %220 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 3
  %221 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2
  %222 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 9
  %223 = bitcast float* %222 to i32*
  %224 = load i32, i32* %223, align 8
  %225 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 5
  %226 = bitcast float* %225 to i32*
  store i32 %224, i32* %226, align 4
  %227 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 10
  br label %256

228:                                              ; preds = %204
  %229 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 5
  %230 = bitcast float* %229 to i32*
  store i32 %216, i32* %230, align 4
  %231 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 10
  %232 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 7, i32 1, i32 0, i32 0
  %233 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %234 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 7, i32 2
  %235 = load i64, i64* %232, align 8
  br label %236

236:                                              ; preds = %246, %228
  %237 = phi i64 [ %235, %228 ], [ %247, %246 ]
  %238 = phi %"struct.std::__1::pair"* [ %2, %228 ], [ %254, %246 ]
  %239 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %238, i64 0, i32 0, i32 0, i32 0
  %240 = load i64, i64* %239, align 8
  %241 = sub nsw i64 %240, %237
  %242 = icmp sgt i64 %241, 5000000
  br i1 %242, label %243, label %246

243:                                              ; preds = %236
  store i64 %240, i64* %233, align 8
  store float 0.000000e+00, float* %234, align 8
  %244 = load i32, i32* %231, align 4
  %245 = add i32 %244, 1
  store i32 %245, i32* %231, align 4
  br label %246

246:                                              ; preds = %243, %236
  %247 = load i64, i64* %239, align 8
  store i64 %247, i64* %232, align 8
  %248 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %238, i64 0, i32 1
  %249 = load double, double* %248, align 8
  %250 = load float, float* %234, align 8
  %251 = fpext float %250 to double
  %252 = fadd double %249, %251
  %253 = fptrunc double %252 to float
  store float %253, float* %234, align 8
  %254 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %238, i64 1
  %255 = icmp eq %"struct.std::__1::pair"* %254, %3
  br i1 %255, label %256, label %236

256:                                              ; preds = %246, %219
  %257 = phi i32* [ %227, %219 ], [ %231, %246 ]
  %258 = phi i32* [ %226, %219 ], [ %230, %246 ]
  %259 = phi float* [ %225, %219 ], [ %229, %246 ]
  %260 = phi float* [ %220, %219 ], [ %120, %246 ]
  %261 = phi %"class.std::__1::vector.1"* [ %221, %219 ], [ %150, %246 ]
  %262 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %262)
  %263 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %264 = load i64, i64* %263, align 8
  %265 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5, i32 1, i32 0, i32 0
  %266 = load i64, i64* %265, align 8
  %267 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5, i32 2
  %268 = bitcast float* %267 to i32*
  %269 = load i32, i32* %268, align 8
  %270 = bitcast float* %10 to i32*
  store i32 %269, i32* %270, align 8
  %271 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %271)
  %272 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6, i32 2
  %275 = bitcast float* %274 to i32*
  %276 = load i32, i32* %275, align 8
  %277 = bitcast float* %11 to i32*
  store i32 %276, i32* %277, align 8
  %278 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 7, i32 1, i32 0, i32 0
  %279 = load i64, i64* %278, align 8
  %280 = load i32, i32* %257, align 4
  %281 = bitcast float* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %281)
  %282 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %283 = load i64, i64* %282, align 8
  %284 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8, i32 1, i32 0, i32 0
  %285 = load i64, i64* %284, align 8
  %286 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 8, i32 2
  %287 = bitcast float* %286 to i32*
  %288 = load i32, i32* %287, align 8
  %289 = bitcast float* %12 to i32*
  store i32 %288, i32* %289, align 8
  %290 = bitcast %"class.std::__1::vector.1"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %290) #10
  %291 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %13, i64 0, i32 0, i32 0
  %292 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %13, i64 0, i32 0, i32 1
  %293 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %290, i8 0, i64 24, i1 false) #10
  %294 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2, i32 0, i32 1
  %295 = bitcast %"class.base::TimeTicks"** %294 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = bitcast %"class.std::__1::vector.1"* %261 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = sub i64 %296, %298
  %300 = ashr exact i64 %299, 3
  %301 = icmp eq i64 %299, 0
  %302 = bitcast i32 %269 to float
  %303 = bitcast i32 %276 to float
  %304 = bitcast i32 %288 to float
  br i1 %301, label %325, label %305

305:                                              ; preds = %256
  %306 = icmp ugt i64 %300, 2305843009213693951
  br i1 %306, label %307, label %309

307:                                              ; preds = %305
  %308 = bitcast %"class.std::__1::vector.1"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %308) #12
  unreachable

309:                                              ; preds = %305
  %310 = tail call i8* @_Znwm(i64 %299) #11
  %311 = bitcast i8* %310 to %"class.base::TimeTicks"*
  %312 = bitcast %"class.base::TimeTicks"** %292 to i8**
  store i8* %310, i8** %312, align 8
  %313 = bitcast %"class.std::__1::vector.1"* %13 to i8**
  store i8* %310, i8** %313, align 8
  %314 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %311, i64 %300
  store %"class.base::TimeTicks"* %314, %"class.base::TimeTicks"** %293, align 8
  %315 = bitcast %"class.base::TimeTicks"** %292 to i64*
  %316 = ptrtoint i8* %310 to i64
  %317 = icmp sgt i64 %299, 0
  br i1 %317, label %318, label %323

318:                                              ; preds = %309
  %319 = lshr exact i64 %299, 3
  %320 = inttoptr i64 %298 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %310, i8* align 8 %320, i64 %299, i1 false) #10
  %321 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %311, i64 %319
  %322 = ptrtoint %"class.base::TimeTicks"* %321 to i64
  br label %323

323:                                              ; preds = %318, %309
  %324 = phi i64 [ %322, %318 ], [ %316, %309 ]
  store i64 %324, i64* %315, align 8
  br label %325

325:                                              ; preds = %256, %323
  call void @_ZN17page_load_metrics24LayoutShiftNormalization19UpdateSlidingWindowEPNSt3__16vectorINS0_13SlidingWindowENS1_9allocatorIS3_EEEEN4base9TimeDeltaENS8_9TimeTicksENS1_11__wrap_iterIPKNS1_4pairISA_dEEEESG_Rd(%"class.page_load_metrics::LayoutShiftNormalization"* undef, %"class.std::__1::vector.8"* nonnull %8, i64 300000, i64 %1, %"struct.std::__1::pair"* %3, %"struct.std::__1::pair"* %4, double* dereferenceable(8) %15)
  call void @_ZN17page_load_metrics24LayoutShiftNormalization19UpdateSlidingWindowEPNSt3__16vectorINS0_13SlidingWindowENS1_9allocatorIS3_EEEEN4base9TimeDeltaENS8_9TimeTicksENS1_11__wrap_iterIPKNS1_4pairISA_dEEEESG_Rd(%"class.page_load_metrics::LayoutShiftNormalization"* undef, %"class.std::__1::vector.8"* nonnull %9, i64 1000000, i64 %1, %"struct.std::__1::pair"* %3, %"struct.std::__1::pair"* %4, double* dereferenceable(8) %17)
  %326 = icmp eq %"struct.std::__1::pair"* %3, %4
  br i1 %326, label %502, label %327

327:                                              ; preds = %325
  %328 = bitcast float* %84 to i32*
  br label %329

329:                                              ; preds = %342, %327
  %330 = phi float [ %302, %327 ], [ %349, %342 ]
  %331 = phi i64 [ %264, %327 ], [ %344, %342 ]
  %332 = phi i64 [ %266, %327 ], [ %335, %342 ]
  %333 = phi %"struct.std::__1::pair"* [ %3, %327 ], [ %355, %342 ]
  %334 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %333, i64 0, i32 0, i32 0, i32 0
  %335 = load i64, i64* %334, align 8
  %336 = sub nsw i64 %335, %332
  %337 = icmp sgt i64 %336, 1000000
  %338 = sub nsw i64 %335, %331
  %339 = icmp sgt i64 %338, 5000000
  %340 = or i1 %337, %339
  br i1 %340, label %341, label %342

341:                                              ; preds = %329
  store float 0.000000e+00, float* %10, align 8
  br label %342

342:                                              ; preds = %341, %329
  %343 = phi float [ 0.000000e+00, %341 ], [ %330, %329 ]
  %344 = phi i64 [ %335, %341 ], [ %331, %329 ]
  %345 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %333, i64 0, i32 1
  %346 = load double, double* %345, align 8
  %347 = fpext float %343 to double
  %348 = fadd double %346, %347
  %349 = fptrunc double %348 to float
  store float %349, float* %10, align 8
  %350 = load float, float* %84, align 4
  %351 = fcmp olt float %350, %349
  %352 = select i1 %351, float* %10, float* %84
  %353 = bitcast float* %352 to i32*
  %354 = load i32, i32* %353, align 4
  store i32 %354, i32* %328, align 4
  %355 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %333, i64 1
  %356 = icmp eq %"struct.std::__1::pair"* %355, %4
  br i1 %356, label %357, label %329

357:                                              ; preds = %342
  %358 = bitcast float* %260 to i32*
  br label %359

359:                                              ; preds = %368, %357
  %360 = phi float [ %303, %357 ], [ %374, %368 ]
  %361 = phi i64 [ %273, %357 ], [ %364, %368 ]
  %362 = phi %"struct.std::__1::pair"* [ %3, %357 ], [ %380, %368 ]
  %363 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %362, i64 0, i32 0, i32 0, i32 0
  %364 = load i64, i64* %363, align 8
  %365 = sub nsw i64 %364, %361
  %366 = icmp sgt i64 %365, 1000000
  br i1 %366, label %367, label %368

367:                                              ; preds = %359
  store float 0.000000e+00, float* %11, align 8
  br label %368

368:                                              ; preds = %367, %359
  %369 = phi float [ 0.000000e+00, %367 ], [ %360, %359 ]
  %370 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %362, i64 0, i32 1
  %371 = load double, double* %370, align 8
  %372 = fpext float %369 to double
  %373 = fadd double %371, %372
  %374 = fptrunc double %373 to float
  store float %374, float* %11, align 8
  %375 = load float, float* %260, align 4
  %376 = fcmp olt float %375, %374
  %377 = select i1 %376, float* %11, float* %260
  %378 = bitcast float* %377 to i32*
  %379 = load i32, i32* %378, align 4
  store i32 %379, i32* %358, align 4
  %380 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %362, i64 1
  %381 = icmp eq %"struct.std::__1::pair"* %380, %4
  br i1 %381, label %382, label %359

382:                                              ; preds = %368, %428
  %383 = phi float [ %436, %428 ], [ %304, %368 ]
  %384 = phi i64 [ %430, %428 ], [ %285, %368 ]
  %385 = phi i64 [ %431, %428 ], [ %283, %368 ]
  %386 = phi %"struct.std::__1::pair"* [ %442, %428 ], [ %3, %368 ]
  %387 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %386, i64 0, i32 0, i32 0, i32 0
  %388 = load i64, i64* %387, align 8
  %389 = sub nsw i64 %388, %384
  %390 = icmp sgt i64 %389, 1000000
  %391 = sub nsw i64 %388, %385
  %392 = icmp sgt i64 %391, 5000000
  %393 = or i1 %390, %392
  %394 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %291, align 8
  br i1 %393, label %402, label %395

395:                                              ; preds = %382
  %396 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %292, align 8
  %397 = icmp eq %"class.base::TimeTicks"* %394, %396
  br i1 %397, label %428, label %398

398:                                              ; preds = %395
  %399 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %394, i64 0, i32 0, i32 0
  %400 = load i64, i64* %399, align 8
  %401 = icmp sgt i64 %400, %388
  br i1 %401, label %428, label %402

402:                                              ; preds = %382, %398
  store float 0.000000e+00, float* %12, align 8
  %403 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %292, align 8
  %404 = icmp eq %"class.base::TimeTicks"* %394, %403
  br i1 %404, label %428, label %405

405:                                              ; preds = %402, %423
  %406 = phi i64 [ %427, %423 ], [ %388, %402 ]
  %407 = phi %"class.base::TimeTicks"* [ %424, %423 ], [ %394, %402 ]
  %408 = phi %"class.base::TimeTicks"* [ %425, %423 ], [ %403, %402 ]
  %409 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %407, i64 0, i32 0, i32 0
  %410 = load i64, i64* %409, align 8
  %411 = icmp sgt i64 %410, %406
  br i1 %411, label %428, label %412

412:                                              ; preds = %405
  %413 = ptrtoint %"class.base::TimeTicks"* %408 to i64
  %414 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %407, i64 1
  %415 = ptrtoint %"class.base::TimeTicks"* %414 to i64
  %416 = sub i64 %413, %415
  %417 = ashr exact i64 %416, 3
  %418 = icmp eq i64 %416, 0
  br i1 %418, label %423, label %419

419:                                              ; preds = %412
  %420 = bitcast %"class.base::TimeTicks"* %407 to i8*
  %421 = bitcast %"class.base::TimeTicks"* %414 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %420, i8* align 8 %421, i64 %416, i1 false) #10
  %422 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %291, align 8
  br label %423

423:                                              ; preds = %419, %412
  %424 = phi %"class.base::TimeTicks"* [ %407, %412 ], [ %422, %419 ]
  %425 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %407, i64 %417
  store %"class.base::TimeTicks"* %425, %"class.base::TimeTicks"** %292, align 8
  %426 = icmp eq %"class.base::TimeTicks"* %424, %425
  %427 = load i64, i64* %387, align 8
  br i1 %426, label %428, label %405

428:                                              ; preds = %405, %423, %402, %398, %395
  %429 = phi float [ 0.000000e+00, %402 ], [ %383, %395 ], [ %383, %398 ], [ 0.000000e+00, %423 ], [ 0.000000e+00, %405 ]
  %430 = phi i64 [ %388, %402 ], [ %388, %395 ], [ %388, %398 ], [ %406, %405 ], [ %427, %423 ]
  %431 = phi i64 [ %388, %402 ], [ %385, %395 ], [ %385, %398 ], [ %388, %423 ], [ %388, %405 ]
  %432 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %386, i64 0, i32 1
  %433 = load double, double* %432, align 8
  %434 = fpext float %429 to double
  %435 = fadd double %433, %434
  %436 = fptrunc double %435 to float
  store float %436, float* %12, align 8
  %437 = load float, float* %259, align 4
  %438 = fcmp olt float %437, %436
  %439 = select i1 %438, float* %12, float* %259
  %440 = bitcast float* %439 to i32*
  %441 = load i32, i32* %440, align 4
  store i32 %441, i32* %258, align 4
  %442 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %386, i64 1
  %443 = icmp eq %"struct.std::__1::pair"* %442, %4
  br i1 %443, label %444, label %382

444:                                              ; preds = %428
  %445 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 0, i32 0, i32 0
  %446 = ptrtoint i64* %445 to i64
  %447 = sub i64 %446, %7
  %448 = lshr i64 %447, 4
  %449 = add nuw nsw i64 %448, 1
  %450 = and i64 %449, 3
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %466, label %452

452:                                              ; preds = %444, %452
  %453 = phi i64 [ %458, %452 ], [ %279, %444 ]
  %454 = phi i32 [ %462, %452 ], [ %280, %444 ]
  %455 = phi %"struct.std::__1::pair"* [ %463, %452 ], [ %3, %444 ]
  %456 = phi i64 [ %464, %452 ], [ %450, %444 ]
  %457 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %455, i64 0, i32 0, i32 0, i32 0
  %458 = load i64, i64* %457, align 8
  %459 = sub nsw i64 %458, %453
  %460 = icmp sgt i64 %459, 5000000
  %461 = zext i1 %460 to i32
  %462 = add i32 %454, %461
  %463 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %455, i64 1
  %464 = add i64 %456, -1
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %452, !llvm.loop !42

466:                                              ; preds = %452, %444
  %467 = phi i32 [ undef, %444 ], [ %462, %452 ]
  %468 = phi i64 [ %279, %444 ], [ %458, %452 ]
  %469 = phi i32 [ %280, %444 ], [ %462, %452 ]
  %470 = phi %"struct.std::__1::pair"* [ %3, %444 ], [ %463, %452 ]
  %471 = icmp ult i64 %447, 48
  br i1 %471, label %502, label %472

472:                                              ; preds = %466, %472
  %473 = phi i64 [ %495, %472 ], [ %468, %466 ]
  %474 = phi i32 [ %499, %472 ], [ %469, %466 ]
  %475 = phi %"struct.std::__1::pair"* [ %500, %472 ], [ %470, %466 ]
  %476 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %475, i64 0, i32 0, i32 0, i32 0
  %477 = load i64, i64* %476, align 8
  %478 = sub nsw i64 %477, %473
  %479 = icmp sgt i64 %478, 5000000
  %480 = zext i1 %479 to i32
  %481 = add i32 %474, %480
  %482 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %475, i64 1, i32 0, i32 0, i32 0
  %483 = load i64, i64* %482, align 8
  %484 = sub nsw i64 %483, %477
  %485 = icmp sgt i64 %484, 5000000
  %486 = zext i1 %485 to i32
  %487 = add i32 %481, %486
  %488 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %475, i64 2, i32 0, i32 0, i32 0
  %489 = load i64, i64* %488, align 8
  %490 = sub nsw i64 %489, %483
  %491 = icmp sgt i64 %490, 5000000
  %492 = zext i1 %491 to i32
  %493 = add i32 %487, %492
  %494 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %475, i64 3, i32 0, i32 0, i32 0
  %495 = load i64, i64* %494, align 8
  %496 = sub nsw i64 %495, %489
  %497 = icmp sgt i64 %496, 5000000
  %498 = zext i1 %497 to i32
  %499 = add i32 %493, %498
  %500 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %475, i64 4
  %501 = icmp eq %"struct.std::__1::pair"* %500, %4
  br i1 %501, label %502, label %472

502:                                              ; preds = %466, %472, %325
  %503 = phi i32 [ %280, %325 ], [ %467, %466 ], [ %499, %472 ]
  %504 = uitofp i32 %503 to float
  %505 = fdiv float %5, %504
  %506 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 0, i32 4
  store float %505, float* %506, align 8
  %507 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %291, align 8
  %508 = icmp eq %"class.base::TimeTicks"* %507, null
  br i1 %508, label %513, label %509

509:                                              ; preds = %502
  %510 = ptrtoint %"class.base::TimeTicks"* %507 to i64
  %511 = bitcast %"class.base::TimeTicks"** %292 to i64*
  store i64 %510, i64* %511, align 8
  %512 = bitcast %"class.base::TimeTicks"* %507 to i8*
  call void @_ZdlPv(i8* %512) #11
  br label %513

513:                                              ; preds = %502, %509
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %290) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %281)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %271)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %262)
  %514 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %52, align 8
  %515 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %514, null
  br i1 %515, label %520, label %516

516:                                              ; preds = %513
  %517 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %514 to i64
  %518 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %53 to i64*
  store i64 %517, i64* %518, align 8
  %519 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %514 to i8*
  call void @_ZdlPv(i8* %519) #11
  br label %520

520:                                              ; preds = %513, %516
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #10
  %521 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %19, align 8
  %522 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %521, null
  br i1 %522, label %527, label %523

523:                                              ; preds = %520
  %524 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %521 to i64
  %525 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %20 to i64*
  store i64 %524, i64* %525, align 8
  %526 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %521 to i8*
  call void @_ZdlPv(i8* %526) #11
  br label %527

527:                                              ; preds = %523, %520
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalization20ClearAllLayoutShiftsEv(%"class.page_load_metrics::LayoutShiftNormalization"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.page_load_metrics::LayoutShiftNormalization"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 33, i1 false)
  %3 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = bitcast %"struct.std::__1::pair"** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2
  %9 = bitcast %"class.std::__1::vector.1"* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 2, i32 0, i32 1
  %12 = bitcast %"class.base::TimeTicks"** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 3
  %14 = bitcast %"class.std::__1::vector.8"* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 3, i32 0, i32 1
  %17 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 4
  %19 = bitcast %"class.std::__1::vector.8"* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 5
  %24 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 20, i1 false)
  %25 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 6
  %26 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 20, i1 false)
  %27 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 7
  %28 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 20, i1 false)
  %29 = getelementptr inbounds %"class.page_load_metrics::LayoutShiftNormalization", %"class.page_load_metrics::LayoutShiftNormalization"* %0, i64 0, i32 10
  store i32 0, i32* %29, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalization19UpdateSlidingWindowEPNSt3__16vectorINS0_13SlidingWindowENS1_9allocatorIS3_EEEEN4base9TimeDeltaENS8_9TimeTicksENS1_11__wrap_iterIPKNS1_4pairISA_dEEEESG_Rd(%"class.page_load_metrics::LayoutShiftNormalization"* nocapture readnone, %"class.std::__1::vector.8"*, i64, i64, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, double* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.base::TimeDelta", align 8
  %9 = icmp eq %"struct.std::__1::pair"* %4, %5
  %10 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 0
  %11 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 1
  %13 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %12, align 8
  br i1 %9, label %28, label %14

14:                                               ; preds = %7
  %15 = bitcast double* %6 to i64*
  %16 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %12 to i64*
  %18 = bitcast %"class.std::__1::vector.8"* %1 to i64*
  %19 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %16 to i64*
  br label %20

20:                                               ; preds = %14, %148
  %21 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %13, %14 ], [ %156, %148 ]
  %22 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %11, %14 ], [ %155, %148 ]
  %23 = phi %"struct.std::__1::pair"* [ %4, %14 ], [ %153, %148 ]
  %24 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %22, %21
  br i1 %24, label %77, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %23, i64 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %23, i64 0, i32 1
  br label %157

28:                                               ; preds = %148, %7
  %29 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %11, %7 ], [ %155, %148 ]
  %30 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %13, %7 ], [ %156, %148 ]
  %31 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %3, i64 -5000000)
  %32 = extractvalue { i64, i1 } %31, 1
  %33 = extractvalue { i64, i1 } %31, 0
  %34 = select i1 %32, i64 -9223372036854775808, i64 %33, !prof !40
  %35 = bitcast %"class.base::TimeDelta"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %8, i64 0, i32 0
  store i64 %34, i64* %36, align 8
  %37 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %8, i64 %2) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  %38 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %29 to i64
  %39 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %30 to i64
  %40 = sub i64 %39, %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %58, label %42

42:                                               ; preds = %28
  %43 = ashr exact i64 %40, 4
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %29, %42 ], [ %56, %44 ]
  %46 = phi i64 [ %43, %42 ], [ %55, %44 ]
  %47 = lshr i64 %46, 1
  %48 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %45, i64 %47
  %49 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = icmp sgt i64 %50, %37
  %52 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %48, i64 1
  %53 = xor i64 %47, -1
  %54 = add i64 %46, %53
  %55 = select i1 %51, i64 %47, i64 %54
  %56 = select i1 %51, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %45, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %52
  %57 = icmp eq i64 %55, 0
  br i1 %57, label %58, label %44

58:                                               ; preds = %44, %28
  %59 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %29, %28 ], [ %56, %44 ]
  %60 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %10, align 8
  %61 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %60, %59
  br i1 %61, label %74, label %62

62:                                               ; preds = %58
  %63 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %59 to i64
  %64 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %12 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %65, %63
  %67 = ashr exact i64 %66, 4
  %68 = icmp eq i64 %66, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %62
  %70 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %60 to i8*
  %71 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %59 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 %66, i1 false) #10
  br label %72

72:                                               ; preds = %69, %62
  %73 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %60, i64 %67
  store %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %73, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %12, align 8
  br label %74

74:                                               ; preds = %58, %72
  ret void

75:                                               ; preds = %174
  %76 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %12, align 8
  br label %77

77:                                               ; preds = %75, %20
  %78 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %76, %75 ], [ %21, %20 ]
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %23, i64 0, i32 0, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %23, i64 0, i32 1
  %82 = bitcast double* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %16, align 8
  %85 = icmp ult %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %78, %84
  %86 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %84 to i64
  br i1 %85, label %87, label %93

87:                                               ; preds = %77
  %88 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %78, i64 0, i32 0, i32 0, i32 0
  store i64 %80, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %78, i64 0, i32 1
  %90 = bitcast double* %89 to i64*
  store i64 %83, i64* %90, align 8
  %91 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %78, i64 1
  %92 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %91 to i64
  store i64 %92, i64* %17, align 8
  br label %148

93:                                               ; preds = %77
  %94 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %78 to i64
  %95 = load i64, i64* %18, align 8
  %96 = sub i64 %94, %95
  %97 = ashr exact i64 %96, 4
  %98 = add nsw i64 %97, 1
  %99 = icmp ugt i64 %98, 1152921504606846975
  br i1 %99, label %100, label %102

100:                                              ; preds = %93
  %101 = bitcast %"class.std::__1::vector.8"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %101) #12
  unreachable

102:                                              ; preds = %93
  %103 = sub i64 %86, %95
  %104 = ashr exact i64 %103, 4
  %105 = icmp ult i64 %104, 576460752303423487
  br i1 %105, label %106, label %114

106:                                              ; preds = %102
  %107 = ashr exact i64 %103, 3
  %108 = icmp ult i64 %107, %98
  %109 = select i1 %108, i64 %98, i64 %107
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %119, label %111

111:                                              ; preds = %106
  %112 = icmp ugt i64 %109, 1152921504606846975
  br i1 %112, label %113, label %114

113:                                              ; preds = %111
  tail call void @abort() #12
  unreachable

114:                                              ; preds = %111, %102
  %115 = phi i64 [ %109, %111 ], [ 1152921504606846975, %102 ]
  %116 = shl i64 %115, 4
  %117 = tail call i8* @_Znwm(i64 %116) #11
  %118 = bitcast i8* %117 to %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*
  br label %119

119:                                              ; preds = %114, %106
  %120 = phi i64 [ %115, %114 ], [ 0, %106 ]
  %121 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %118, %114 ], [ null, %106 ]
  %122 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %121, i64 %97
  %123 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %121, i64 %120
  %124 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %123 to i64
  %125 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %122, i64 0, i32 0, i32 0, i32 0
  store i64 %80, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %121, i64 %97, i32 1
  %127 = bitcast double* %126 to i64*
  store i64 %83, i64* %127, align 8
  %128 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %122, i64 1
  %129 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %128 to i64
  %130 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %10, align 8
  %131 = load i64, i64* %17, align 8
  %132 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %130 to i64
  %133 = sub i64 %131, %132
  %134 = ashr exact i64 %133, 4
  %135 = sub nsw i64 0, %134
  %136 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %122, i64 %135
  %137 = ptrtoint %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %136 to i64
  %138 = icmp sgt i64 %133, 0
  br i1 %138, label %139, label %143

139:                                              ; preds = %119
  %140 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %136 to i8*
  %141 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 %141, i64 %133, i1 false) #10
  %142 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %10, align 8
  br label %143

143:                                              ; preds = %139, %119
  %144 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %130, %119 ], [ %142, %139 ]
  store i64 %137, i64* %18, align 8
  store i64 %129, i64* %17, align 8
  store i64 %124, i64* %19, align 8
  %145 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %144, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %143
  %147 = bitcast %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %144 to i8*
  tail call void @_ZdlPv(i8* %147) #11
  br label %148

148:                                              ; preds = %87, %143, %146
  %149 = load double, double* %6, align 8
  %150 = load double, double* %81, align 8
  %151 = fcmp olt double %149, %150
  %152 = select i1 %151, double %150, double %149
  store double %152, double* %6, align 8
  %153 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %23, i64 1
  %154 = icmp eq %"struct.std::__1::pair"* %153, %5
  %155 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %10, align 8
  %156 = load %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"*, %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"** %12, align 8
  br i1 %154, label %28, label %20

157:                                              ; preds = %25, %174
  %158 = phi %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* [ %22, %25 ], [ %175, %174 ]
  %159 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %158, i64 0, i32 0, i32 0, i32 0
  %160 = load i64, i64* %159, align 8
  %161 = load i64, i64* %26, align 8
  %162 = sub nsw i64 %161, %160
  %163 = icmp sgt i64 %162, %2
  br i1 %163, label %174, label %164

164:                                              ; preds = %157
  %165 = load double, double* %27, align 8
  %166 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %158, i64 0, i32 1
  %167 = load double, double* %166, align 8
  %168 = fadd double %165, %167
  store double %168, double* %166, align 8
  %169 = load double, double* %6, align 8
  %170 = fcmp olt double %169, %168
  %171 = select i1 %170, double* %166, double* %6
  %172 = bitcast double* %171 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %15, align 8
  br label %174

174:                                              ; preds = %157, %164
  %175 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %158, i64 1
  %176 = icmp eq %"struct.page_load_metrics::LayoutShiftNormalization::SlidingWindow"* %175, %21
  br i1 %176, label %75, label %157
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17page_load_metrics24LayoutShiftNormalization19UpdateSessionWindowEPNS0_13SessionWindowEN4base9TimeDeltaES4_NSt3__111__wrap_iterIPKNS5_4pairINS3_9TimeTicksEdEEEESC_RNS5_6vectorIS8_NS5_9allocatorIS8_EEEERfRj(%"class.page_load_metrics::LayoutShiftNormalization"* nocapture readnone, %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* nocapture, i64, i64, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::vector.1"* nocapture dereferenceable(24), float* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %10 = icmp eq %"struct.std::__1::pair"* %4, %5
  br i1 %10, label %18, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %1, i64 0, i32 1, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %1, i64 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow", %"struct.page_load_metrics::LayoutShiftNormalization::SessionWindow"* %1, i64 0, i32 2
  %17 = bitcast float* %7 to i32*
  br label %19

18:                                               ; preds = %66, %9
  ret void

19:                                               ; preds = %11, %66
  %20 = phi %"struct.std::__1::pair"* [ %4, %11 ], [ %79, %66 ]
  %21 = load i64, i64* %12, align 8
  %22 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = sub nsw i64 %23, %21
  %25 = icmp sgt i64 %24, %2
  br i1 %25, label %38, label %26

26:                                               ; preds = %19
  %27 = load i64, i64* %13, align 8
  %28 = sub nsw i64 %23, %27
  %29 = icmp sgt i64 %28, %3
  br i1 %29, label %38, label %30

30:                                               ; preds = %26
  %31 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %14, align 8
  %32 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %15, align 8
  %33 = icmp eq %"class.base::TimeTicks"* %31, %32
  br i1 %33, label %66, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %31, i64 0, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = icmp sgt i64 %36, %23
  br i1 %37, label %66, label %38

38:                                               ; preds = %34, %19, %26
  store i64 %23, i64* %13, align 8
  store float 0.000000e+00, float* %16, align 8
  %39 = load i32, i32* %8, align 4
  %40 = add i32 %39, 1
  store i32 %40, i32* %8, align 4
  %41 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %14, align 8
  %42 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %15, align 8
  %43 = icmp eq %"class.base::TimeTicks"* %41, %42
  br i1 %43, label %66, label %44

44:                                               ; preds = %38, %62
  %45 = phi %"class.base::TimeTicks"* [ %63, %62 ], [ %41, %38 ]
  %46 = phi %"class.base::TimeTicks"* [ %64, %62 ], [ %42, %38 ]
  %47 = load i64, i64* %22, align 8
  %48 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %45, i64 0, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = icmp sgt i64 %49, %47
  br i1 %50, label %66, label %51

51:                                               ; preds = %44
  %52 = ptrtoint %"class.base::TimeTicks"* %46 to i64
  %53 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %45, i64 1
  %54 = ptrtoint %"class.base::TimeTicks"* %53 to i64
  %55 = sub i64 %52, %54
  %56 = ashr exact i64 %55, 3
  %57 = icmp eq i64 %55, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %51
  %59 = bitcast %"class.base::TimeTicks"* %45 to i8*
  %60 = bitcast %"class.base::TimeTicks"* %53 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 %55, i1 false) #10
  %61 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %14, align 8
  br label %62

62:                                               ; preds = %51, %58
  %63 = phi %"class.base::TimeTicks"* [ %45, %51 ], [ %61, %58 ]
  %64 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %45, i64 %56
  store %"class.base::TimeTicks"* %64, %"class.base::TimeTicks"** %15, align 8
  %65 = icmp eq %"class.base::TimeTicks"* %63, %64
  br i1 %65, label %66, label %44

66:                                               ; preds = %62, %44, %38, %34, %30
  %67 = load i64, i64* %22, align 8
  store i64 %67, i64* %12, align 8
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %69 = load double, double* %68, align 8
  %70 = load float, float* %16, align 8
  %71 = fpext float %70 to double
  %72 = fadd double %69, %71
  %73 = fptrunc double %72 to float
  store float %73, float* %16, align 8
  %74 = load float, float* %7, align 4
  %75 = fcmp olt float %74, %73
  %76 = select i1 %75, float* %16, float* %7
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %17, align 4
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1
  %80 = icmp eq %"struct.std::__1::pair"* %79, %5
  br i1 %80, label %18, label %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #10
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !40
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #10
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %26, i8* %27) #10
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #10
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #4

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRNS_6__lessIN4base9TimeTicksES3_EENS_11__wrap_iterIPS3_EEEEvT0_S9_S9_T_NS_15iterator_traitsIS9_E15difference_typeESD_PNSC_10value_typeEl(%"class.base::TimeTicks"*, %"class.base::TimeTicks"*, %"class.base::TimeTicks"*, %"struct.std::__1::__less.42"* dereferenceable(1), i64, i64, %"class.base::TimeTicks"*, i64) local_unnamed_addr #0 comdat {
  %9 = ptrtoint %"class.base::TimeTicks"* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %940, label %11

11:                                               ; preds = %8
  %12 = ptrtoint %"class.base::TimeTicks"* %1 to i64
  %13 = ptrtoint %"class.base::TimeTicks"* %0 to i64
  br label %14

14:                                               ; preds = %11, %933
  %15 = phi %"class.base::TimeTicks"* [ %938, %933 ], [ %2, %11 ]
  %16 = phi i64 [ %937, %933 ], [ %4, %11 ]
  %17 = phi i64 [ %936, %933 ], [ %5, %11 ]
  %18 = phi i64 [ %935, %933 ], [ %12, %11 ]
  %19 = phi i64 [ %934, %933 ], [ %13, %11 ]
  %20 = icmp sgt i64 %16, %7
  %21 = icmp sgt i64 %17, %7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %29

23:                                               ; preds = %14
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %940, label %25

25:                                               ; preds = %23
  %26 = inttoptr i64 %18 to %"class.base::TimeTicks"*
  %27 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 0, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  br label %567

29:                                               ; preds = %14
  %30 = inttoptr i64 %19 to %"class.base::TimeTicks"*
  %31 = inttoptr i64 %19 to i8*
  %32 = inttoptr i64 %18 to %"class.base::TimeTicks"*
  %33 = inttoptr i64 %18 to i8*
  %34 = icmp sgt i64 %16, %17
  br i1 %34, label %168, label %35

35:                                               ; preds = %29
  %36 = icmp eq %"class.base::TimeTicks"* %30, %32
  br i1 %36, label %940, label %37

37:                                               ; preds = %35
  %38 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 -1, i32 0, i32 0
  %39 = bitcast i64* %38 to i8*
  %40 = sub i64 0, %19
  %41 = getelementptr i8, i8* %39, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = lshr i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 4
  br i1 %45, label %46, label %73

46:                                               ; preds = %166, %73, %37
  %47 = phi %"class.base::TimeTicks"* [ %6, %73 ], [ %6, %37 ], [ %89, %166 ]
  %48 = phi %"class.base::TimeTicks"* [ %30, %73 ], [ %30, %37 ], [ %90, %166 ]
  %49 = ptrtoint %"class.base::TimeTicks"* %48 to i64
  %50 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 -1, i32 0, i32 0
  %51 = ptrtoint i64* %50 to i64
  %52 = sub i64 %51, %49
  %53 = lshr i64 %52, 3
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 7
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %46, %57
  %58 = phi %"class.base::TimeTicks"* [ %65, %57 ], [ %47, %46 ]
  %59 = phi %"class.base::TimeTicks"* [ %64, %57 ], [ %48, %46 ]
  %60 = phi i64 [ %66, %57 ], [ %55, %46 ]
  %61 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %59, i64 0, i32 0, i32 0
  %62 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %58, i64 0, i32 0, i32 0
  %63 = load i64, i64* %61, align 8
  store i64 %63, i64* %62, align 8
  %64 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %59, i64 1
  %65 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %58, i64 1
  %66 = add i64 %60, -1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %57, !llvm.loop !43

68:                                               ; preds = %57, %46
  %69 = phi %"class.base::TimeTicks"* [ undef, %46 ], [ %65, %57 ]
  %70 = phi %"class.base::TimeTicks"* [ %47, %46 ], [ %65, %57 ]
  %71 = phi %"class.base::TimeTicks"* [ %48, %46 ], [ %64, %57 ]
  %72 = icmp ult i64 %52, 56
  br i1 %72, label %301, label %333

73:                                               ; preds = %37
  %74 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 -1, i32 0, i32 0
  %75 = bitcast i64* %74 to i8*
  %76 = sub i64 0, %19
  %77 = getelementptr i8, i8* %75, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = lshr i64 %78, 3
  %80 = add nuw nsw i64 %79, 1
  %81 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %80
  %82 = bitcast %"class.base::TimeTicks"* %81 to i8*
  %83 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %80
  %84 = icmp ugt %"class.base::TimeTicks"* %83, %6
  %85 = icmp ult i8* %31, %82
  %86 = and i1 %84, %85
  br i1 %86, label %46, label %87

87:                                               ; preds = %73
  %88 = and i64 %44, 4611686018427387900
  %89 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %88
  %90 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %88
  %91 = add nsw i64 %88, -4
  %92 = lshr exact i64 %91, 2
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp ult i64 %91, 12
  br i1 %95, label %147, label %96

96:                                               ; preds = %87
  %97 = sub nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %144, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %145, %98 ]
  %101 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %99, i32 0, i32 0
  %102 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %99, i32 0, i32 0
  %103 = bitcast i64* %101 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8, !alias.scope !44
  %105 = getelementptr i64, i64* %101, i64 2
  %106 = bitcast i64* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !44
  %108 = bitcast i64* %102 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 8, !alias.scope !47, !noalias !44
  %109 = getelementptr i64, i64* %102, i64 2
  %110 = bitcast i64* %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 8, !alias.scope !47, !noalias !44
  %111 = or i64 %99, 4
  %112 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %111, i32 0, i32 0
  %113 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %111, i32 0, i32 0
  %114 = bitcast i64* %112 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8, !alias.scope !44
  %116 = getelementptr i64, i64* %112, i64 2
  %117 = bitcast i64* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !44
  %119 = bitcast i64* %113 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %119, align 8, !alias.scope !47, !noalias !44
  %120 = getelementptr i64, i64* %113, i64 2
  %121 = bitcast i64* %120 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %121, align 8, !alias.scope !47, !noalias !44
  %122 = or i64 %99, 8
  %123 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %122, i32 0, i32 0
  %124 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %122, i32 0, i32 0
  %125 = bitcast i64* %123 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !44
  %127 = getelementptr i64, i64* %123, i64 2
  %128 = bitcast i64* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !44
  %130 = bitcast i64* %124 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %130, align 8, !alias.scope !47, !noalias !44
  %131 = getelementptr i64, i64* %124, i64 2
  %132 = bitcast i64* %131 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %132, align 8, !alias.scope !47, !noalias !44
  %133 = or i64 %99, 12
  %134 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %133, i32 0, i32 0
  %135 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %133, i32 0, i32 0
  %136 = bitcast i64* %134 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !44
  %138 = getelementptr i64, i64* %134, i64 2
  %139 = bitcast i64* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !44
  %141 = bitcast i64* %135 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %141, align 8, !alias.scope !47, !noalias !44
  %142 = getelementptr i64, i64* %135, i64 2
  %143 = bitcast i64* %142 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %143, align 8, !alias.scope !47, !noalias !44
  %144 = add i64 %99, 16
  %145 = add i64 %100, -4
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %98, !llvm.loop !49

147:                                              ; preds = %98, %87
  %148 = phi i64 [ 0, %87 ], [ %144, %98 ]
  %149 = icmp eq i64 %94, 0
  br i1 %149, label %166, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %163, %150 ], [ %148, %147 ]
  %152 = phi i64 [ %164, %150 ], [ %94, %147 ]
  %153 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %30, i64 %151, i32 0, i32 0
  %154 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %151, i32 0, i32 0
  %155 = bitcast i64* %153 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !44
  %157 = getelementptr i64, i64* %153, i64 2
  %158 = bitcast i64* %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !44
  %160 = bitcast i64* %154 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %160, align 8, !alias.scope !47, !noalias !44
  %161 = getelementptr i64, i64* %154, i64 2
  %162 = bitcast i64* %161 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %162, align 8, !alias.scope !47, !noalias !44
  %163 = add i64 %151, 4
  %164 = add i64 %152, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %150, !llvm.loop !50

166:                                              ; preds = %150, %147
  %167 = icmp eq i64 %44, %88
  br i1 %167, label %301, label %46

168:                                              ; preds = %29
  %169 = icmp eq %"class.base::TimeTicks"* %15, %32
  br i1 %169, label %940, label %170

170:                                              ; preds = %168
  %171 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %15, i64 -1, i32 0, i32 0
  %172 = bitcast i64* %171 to i8*
  %173 = sub i64 0, %18
  %174 = getelementptr i8, i8* %172, i64 %173
  %175 = ptrtoint i8* %174 to i64
  %176 = lshr i64 %175, 3
  %177 = add nuw nsw i64 %176, 1
  %178 = icmp ult i64 %177, 4
  br i1 %178, label %179, label %206

179:                                              ; preds = %299, %206, %170
  %180 = phi %"class.base::TimeTicks"* [ %6, %206 ], [ %6, %170 ], [ %222, %299 ]
  %181 = phi %"class.base::TimeTicks"* [ %32, %206 ], [ %32, %170 ], [ %223, %299 ]
  %182 = ptrtoint %"class.base::TimeTicks"* %181 to i64
  %183 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %15, i64 -1, i32 0, i32 0
  %184 = ptrtoint i64* %183 to i64
  %185 = sub i64 %184, %182
  %186 = lshr i64 %185, 3
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 7
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %179, %190
  %191 = phi %"class.base::TimeTicks"* [ %198, %190 ], [ %180, %179 ]
  %192 = phi %"class.base::TimeTicks"* [ %197, %190 ], [ %181, %179 ]
  %193 = phi i64 [ %199, %190 ], [ %188, %179 ]
  %194 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %192, i64 0, i32 0, i32 0
  %195 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %191, i64 0, i32 0, i32 0
  %196 = load i64, i64* %194, align 8
  store i64 %196, i64* %195, align 8
  %197 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %192, i64 1
  %198 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %191, i64 1
  %199 = add i64 %193, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !51

201:                                              ; preds = %190, %179
  %202 = phi %"class.base::TimeTicks"* [ undef, %179 ], [ %198, %190 ]
  %203 = phi %"class.base::TimeTicks"* [ %180, %179 ], [ %198, %190 ]
  %204 = phi %"class.base::TimeTicks"* [ %181, %179 ], [ %197, %190 ]
  %205 = icmp ult i64 %185, 56
  br i1 %205, label %363, label %537

206:                                              ; preds = %170
  %207 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %15, i64 -1, i32 0, i32 0
  %208 = bitcast i64* %207 to i8*
  %209 = sub i64 0, %18
  %210 = getelementptr i8, i8* %208, i64 %209
  %211 = ptrtoint i8* %210 to i64
  %212 = lshr i64 %211, 3
  %213 = add nuw nsw i64 %212, 1
  %214 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %213
  %215 = bitcast %"class.base::TimeTicks"* %214 to i8*
  %216 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %213
  %217 = icmp ugt %"class.base::TimeTicks"* %216, %6
  %218 = icmp ult i8* %33, %215
  %219 = and i1 %217, %218
  br i1 %219, label %179, label %220

220:                                              ; preds = %206
  %221 = and i64 %177, 4611686018427387900
  %222 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %221
  %223 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %221
  %224 = add nsw i64 %221, -4
  %225 = lshr exact i64 %224, 2
  %226 = add nuw nsw i64 %225, 1
  %227 = and i64 %226, 3
  %228 = icmp ult i64 %224, 12
  br i1 %228, label %280, label %229

229:                                              ; preds = %220
  %230 = sub nsw i64 %226, %227
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %277, %231 ]
  %233 = phi i64 [ %230, %229 ], [ %278, %231 ]
  %234 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %232, i32 0, i32 0
  %235 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %232, i32 0, i32 0
  %236 = bitcast i64* %234 to <2 x i64>*
  %237 = load <2 x i64>, <2 x i64>* %236, align 8, !alias.scope !52
  %238 = getelementptr i64, i64* %234, i64 2
  %239 = bitcast i64* %238 to <2 x i64>*
  %240 = load <2 x i64>, <2 x i64>* %239, align 8, !alias.scope !52
  %241 = bitcast i64* %235 to <2 x i64>*
  store <2 x i64> %237, <2 x i64>* %241, align 8, !alias.scope !55, !noalias !52
  %242 = getelementptr i64, i64* %235, i64 2
  %243 = bitcast i64* %242 to <2 x i64>*
  store <2 x i64> %240, <2 x i64>* %243, align 8, !alias.scope !55, !noalias !52
  %244 = or i64 %232, 4
  %245 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %244, i32 0, i32 0
  %246 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %244, i32 0, i32 0
  %247 = bitcast i64* %245 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8, !alias.scope !52
  %249 = getelementptr i64, i64* %245, i64 2
  %250 = bitcast i64* %249 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 8, !alias.scope !52
  %252 = bitcast i64* %246 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %252, align 8, !alias.scope !55, !noalias !52
  %253 = getelementptr i64, i64* %246, i64 2
  %254 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %254, align 8, !alias.scope !55, !noalias !52
  %255 = or i64 %232, 8
  %256 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %255, i32 0, i32 0
  %257 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %255, i32 0, i32 0
  %258 = bitcast i64* %256 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %258, align 8, !alias.scope !52
  %260 = getelementptr i64, i64* %256, i64 2
  %261 = bitcast i64* %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8, !alias.scope !52
  %263 = bitcast i64* %257 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %263, align 8, !alias.scope !55, !noalias !52
  %264 = getelementptr i64, i64* %257, i64 2
  %265 = bitcast i64* %264 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %265, align 8, !alias.scope !55, !noalias !52
  %266 = or i64 %232, 12
  %267 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %266, i32 0, i32 0
  %268 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %266, i32 0, i32 0
  %269 = bitcast i64* %267 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 8, !alias.scope !52
  %271 = getelementptr i64, i64* %267, i64 2
  %272 = bitcast i64* %271 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 8, !alias.scope !52
  %274 = bitcast i64* %268 to <2 x i64>*
  store <2 x i64> %270, <2 x i64>* %274, align 8, !alias.scope !55, !noalias !52
  %275 = getelementptr i64, i64* %268, i64 2
  %276 = bitcast i64* %275 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %276, align 8, !alias.scope !55, !noalias !52
  %277 = add i64 %232, 16
  %278 = add i64 %233, -4
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %231, !llvm.loop !57

280:                                              ; preds = %231, %220
  %281 = phi i64 [ 0, %220 ], [ %277, %231 ]
  %282 = icmp eq i64 %227, 0
  br i1 %282, label %299, label %283

283:                                              ; preds = %280, %283
  %284 = phi i64 [ %296, %283 ], [ %281, %280 ]
  %285 = phi i64 [ %297, %283 ], [ %227, %280 ]
  %286 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %32, i64 %284, i32 0, i32 0
  %287 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 %284, i32 0, i32 0
  %288 = bitcast i64* %286 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 8, !alias.scope !52
  %290 = getelementptr i64, i64* %286, i64 2
  %291 = bitcast i64* %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !52
  %293 = bitcast i64* %287 to <2 x i64>*
  store <2 x i64> %289, <2 x i64>* %293, align 8, !alias.scope !55, !noalias !52
  %294 = getelementptr i64, i64* %287, i64 2
  %295 = bitcast i64* %294 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %295, align 8, !alias.scope !55, !noalias !52
  %296 = add i64 %284, 4
  %297 = add i64 %285, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %283, !llvm.loop !58

299:                                              ; preds = %283, %280
  %300 = icmp eq i64 %177, %221
  br i1 %300, label %363, label %179

301:                                              ; preds = %68, %333, %166
  %302 = phi %"class.base::TimeTicks"* [ %89, %166 ], [ %69, %68 ], [ %361, %333 ]
  %303 = icmp eq %"class.base::TimeTicks"* %302, %6
  br i1 %303, label %940, label %304

304:                                              ; preds = %301, %328
  %305 = phi %"class.base::TimeTicks"* [ %330, %328 ], [ %6, %301 ]
  %306 = phi %"class.base::TimeTicks"* [ %331, %328 ], [ %30, %301 ]
  %307 = phi %"class.base::TimeTicks"* [ %329, %328 ], [ %32, %301 ]
  %308 = icmp eq %"class.base::TimeTicks"* %307, %15
  br i1 %308, label %309, label %317

309:                                              ; preds = %304
  %310 = ptrtoint %"class.base::TimeTicks"* %302 to i64
  %311 = ptrtoint %"class.base::TimeTicks"* %305 to i64
  %312 = sub i64 %310, %311
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %940, label %314

314:                                              ; preds = %309
  %315 = bitcast %"class.base::TimeTicks"* %306 to i8*
  %316 = bitcast %"class.base::TimeTicks"* %305 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %315, i8* align 8 %316, i64 %312, i1 false) #10
  br label %940

317:                                              ; preds = %304
  %318 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %305, i64 0, i32 0, i32 0
  %319 = load i64, i64* %318, align 8
  %320 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %307, i64 0, i32 0, i32 0
  %321 = load i64, i64* %320, align 8
  %322 = icmp slt i64 %321, %319
  %323 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %306, i64 0, i32 0, i32 0
  br i1 %322, label %324, label %326

324:                                              ; preds = %317
  store i64 %321, i64* %323, align 8
  %325 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %307, i64 1
  br label %328

326:                                              ; preds = %317
  store i64 %319, i64* %323, align 8
  %327 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %305, i64 1
  br label %328

328:                                              ; preds = %326, %324
  %329 = phi %"class.base::TimeTicks"* [ %325, %324 ], [ %307, %326 ]
  %330 = phi %"class.base::TimeTicks"* [ %305, %324 ], [ %327, %326 ]
  %331 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %306, i64 1
  %332 = icmp eq %"class.base::TimeTicks"* %330, %302
  br i1 %332, label %940, label %304

333:                                              ; preds = %68, %333
  %334 = phi %"class.base::TimeTicks"* [ %361, %333 ], [ %70, %68 ]
  %335 = phi %"class.base::TimeTicks"* [ %360, %333 ], [ %71, %68 ]
  %336 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 0, i32 0, i32 0
  %337 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 0, i32 0, i32 0
  %338 = load i64, i64* %336, align 8
  store i64 %338, i64* %337, align 8
  %339 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 1, i32 0, i32 0
  %340 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 1, i32 0, i32 0
  %341 = load i64, i64* %339, align 8
  store i64 %341, i64* %340, align 8
  %342 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 2, i32 0, i32 0
  %343 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 2, i32 0, i32 0
  %344 = load i64, i64* %342, align 8
  store i64 %344, i64* %343, align 8
  %345 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 3, i32 0, i32 0
  %346 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 3, i32 0, i32 0
  %347 = load i64, i64* %345, align 8
  store i64 %347, i64* %346, align 8
  %348 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 4, i32 0, i32 0
  %349 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 4, i32 0, i32 0
  %350 = load i64, i64* %348, align 8
  store i64 %350, i64* %349, align 8
  %351 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 5, i32 0, i32 0
  %352 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 5, i32 0, i32 0
  %353 = load i64, i64* %351, align 8
  store i64 %353, i64* %352, align 8
  %354 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 6, i32 0, i32 0
  %355 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 6, i32 0, i32 0
  %356 = load i64, i64* %354, align 8
  store i64 %356, i64* %355, align 8
  %357 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 7, i32 0, i32 0
  %358 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 7, i32 0, i32 0
  %359 = load i64, i64* %357, align 8
  store i64 %359, i64* %358, align 8
  %360 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %335, i64 8
  %361 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %334, i64 8
  %362 = icmp eq %"class.base::TimeTicks"* %360, %32
  br i1 %362, label %301, label %333, !llvm.loop !59

363:                                              ; preds = %201, %537, %299
  %364 = phi %"class.base::TimeTicks"* [ %222, %299 ], [ %202, %201 ], [ %565, %537 ]
  %365 = icmp eq %"class.base::TimeTicks"* %364, %6
  br i1 %365, label %940, label %366

366:                                              ; preds = %363, %523
  %367 = phi %"class.base::TimeTicks"* [ %535, %523 ], [ %15, %363 ]
  %368 = phi %"class.base::TimeTicks"* [ %534, %523 ], [ %364, %363 ]
  %369 = phi %"class.base::TimeTicks"* [ %533, %523 ], [ %32, %363 ]
  %370 = icmp eq %"class.base::TimeTicks"* %369, %30
  br i1 %370, label %371, label %523

371:                                              ; preds = %366
  %372 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 -1, i32 0, i32 0
  %373 = ptrtoint i64* %372 to i64
  %374 = sub i64 %373, %9
  %375 = lshr i64 %374, 3
  %376 = add nuw nsw i64 %375, 1
  %377 = icmp ult i64 %376, 4
  br i1 %377, label %468, label %378

378:                                              ; preds = %371
  %379 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 -1, i32 0, i32 0
  %380 = ptrtoint i64* %379 to i64
  %381 = sub i64 %380, %9
  %382 = lshr i64 %381, 3
  %383 = xor i64 %382, -1
  %384 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 %383
  %385 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 %383
  %386 = icmp ult %"class.base::TimeTicks"* %384, %368
  %387 = icmp ult %"class.base::TimeTicks"* %385, %367
  %388 = and i1 %386, %387
  br i1 %388, label %468, label %389

389:                                              ; preds = %378
  %390 = and i64 %376, 4611686018427387900
  %391 = sub nsw i64 0, %390
  %392 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 %391
  %393 = sub nsw i64 0, %390
  %394 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 %393
  %395 = add nsw i64 %390, -4
  %396 = lshr exact i64 %395, 2
  %397 = add nuw nsw i64 %396, 1
  %398 = and i64 %397, 1
  %399 = icmp eq i64 %395, 0
  br i1 %399, label %446, label %400

400:                                              ; preds = %389
  %401 = sub nuw nsw i64 %397, %398
  %402 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 -1
  %403 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 -1
  %404 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 -1
  %405 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 -1
  br label %406

406:                                              ; preds = %406, %400
  %407 = phi i64 [ 0, %400 ], [ %441, %406 ]
  %408 = phi i64 [ %401, %400 ], [ %442, %406 ]
  %409 = sub i64 0, %407
  %410 = sub i64 0, %407
  %411 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %402, i64 %409
  %412 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %403, i64 %410
  %413 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %411, i64 0, i32 0, i32 0
  %414 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %412, i64 0, i32 0, i32 0
  %415 = getelementptr inbounds i64, i64* %413, i64 -1
  %416 = bitcast i64* %415 to <2 x i64>*
  %417 = load <2 x i64>, <2 x i64>* %416, align 8, !alias.scope !60
  %418 = getelementptr inbounds i64, i64* %413, i64 -3
  %419 = bitcast i64* %418 to <2 x i64>*
  %420 = load <2 x i64>, <2 x i64>* %419, align 8, !alias.scope !60
  %421 = getelementptr inbounds i64, i64* %414, i64 -1
  %422 = bitcast i64* %421 to <2 x i64>*
  store <2 x i64> %417, <2 x i64>* %422, align 8, !alias.scope !63, !noalias !60
  %423 = getelementptr inbounds i64, i64* %414, i64 -3
  %424 = bitcast i64* %423 to <2 x i64>*
  store <2 x i64> %420, <2 x i64>* %424, align 8, !alias.scope !63, !noalias !60
  %425 = sub nuw nsw i64 -4, %407
  %426 = sub nuw nsw i64 -4, %407
  %427 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %404, i64 %425
  %428 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %405, i64 %426
  %429 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %427, i64 0, i32 0, i32 0
  %430 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %428, i64 0, i32 0, i32 0
  %431 = getelementptr inbounds i64, i64* %429, i64 -1
  %432 = bitcast i64* %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !60
  %434 = getelementptr inbounds i64, i64* %429, i64 -3
  %435 = bitcast i64* %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 8, !alias.scope !60
  %437 = getelementptr inbounds i64, i64* %430, i64 -1
  %438 = bitcast i64* %437 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %438, align 8, !alias.scope !63, !noalias !60
  %439 = getelementptr inbounds i64, i64* %430, i64 -3
  %440 = bitcast i64* %439 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %440, align 8, !alias.scope !63, !noalias !60
  %441 = add i64 %407, 8
  %442 = add i64 %408, -2
  %443 = icmp eq i64 %442, 0
  br i1 %443, label %444, label %406, !llvm.loop !65

444:                                              ; preds = %406
  %445 = sub nuw nsw i64 -8, %407
  br label %446

446:                                              ; preds = %444, %389
  %447 = phi i64 [ 0, %389 ], [ %445, %444 ]
  %448 = icmp eq i64 %398, 0
  br i1 %448, label %466, label %449

449:                                              ; preds = %446
  %450 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 -1
  %451 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 -1
  %452 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %450, i64 %447
  %453 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %451, i64 %447
  %454 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %452, i64 0, i32 0, i32 0
  %455 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %453, i64 0, i32 0, i32 0
  %456 = getelementptr inbounds i64, i64* %454, i64 -1
  %457 = bitcast i64* %456 to <2 x i64>*
  %458 = load <2 x i64>, <2 x i64>* %457, align 8, !alias.scope !60
  %459 = getelementptr inbounds i64, i64* %454, i64 -3
  %460 = bitcast i64* %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !60
  %462 = getelementptr inbounds i64, i64* %455, i64 -1
  %463 = bitcast i64* %462 to <2 x i64>*
  store <2 x i64> %458, <2 x i64>* %463, align 8, !alias.scope !63, !noalias !60
  %464 = getelementptr inbounds i64, i64* %455, i64 -3
  %465 = bitcast i64* %464 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %465, align 8, !alias.scope !63, !noalias !60
  br label %466

466:                                              ; preds = %446, %449
  %467 = icmp eq i64 %376, %390
  br i1 %467, label %940, label %468

468:                                              ; preds = %466, %378, %371
  %469 = phi %"class.base::TimeTicks"* [ %368, %378 ], [ %368, %371 ], [ %392, %466 ]
  %470 = phi %"class.base::TimeTicks"* [ %367, %378 ], [ %367, %371 ], [ %394, %466 ]
  %471 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %469, i64 -1, i32 0, i32 0
  %472 = ptrtoint i64* %471 to i64
  %473 = sub i64 %472, %9
  %474 = lshr i64 %473, 3
  %475 = add nuw nsw i64 %474, 1
  %476 = and i64 %475, 7
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %489, label %478

478:                                              ; preds = %468, %478
  %479 = phi %"class.base::TimeTicks"* [ %482, %478 ], [ %469, %468 ]
  %480 = phi %"class.base::TimeTicks"* [ %483, %478 ], [ %470, %468 ]
  %481 = phi i64 [ %487, %478 ], [ %476, %468 ]
  %482 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %479, i64 -1
  %483 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %480, i64 -1
  %484 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %482, i64 0, i32 0, i32 0
  %485 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %483, i64 0, i32 0, i32 0
  %486 = load i64, i64* %484, align 8
  store i64 %486, i64* %485, align 8
  %487 = add i64 %481, -1
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %478, !llvm.loop !66

489:                                              ; preds = %478, %468
  %490 = phi %"class.base::TimeTicks"* [ %469, %468 ], [ %482, %478 ]
  %491 = phi %"class.base::TimeTicks"* [ %470, %468 ], [ %483, %478 ]
  %492 = icmp ult i64 %473, 56
  br i1 %492, label %940, label %493

493:                                              ; preds = %489, %493
  %494 = phi %"class.base::TimeTicks"* [ %517, %493 ], [ %490, %489 ]
  %495 = phi %"class.base::TimeTicks"* [ %518, %493 ], [ %491, %489 ]
  %496 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -1, i32 0, i32 0
  %497 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -1, i32 0, i32 0
  %498 = load i64, i64* %496, align 8
  store i64 %498, i64* %497, align 8
  %499 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -2, i32 0, i32 0
  %500 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -2, i32 0, i32 0
  %501 = load i64, i64* %499, align 8
  store i64 %501, i64* %500, align 8
  %502 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -3, i32 0, i32 0
  %503 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -3, i32 0, i32 0
  %504 = load i64, i64* %502, align 8
  store i64 %504, i64* %503, align 8
  %505 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -4, i32 0, i32 0
  %506 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -4, i32 0, i32 0
  %507 = load i64, i64* %505, align 8
  store i64 %507, i64* %506, align 8
  %508 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -5, i32 0, i32 0
  %509 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -5, i32 0, i32 0
  %510 = load i64, i64* %508, align 8
  store i64 %510, i64* %509, align 8
  %511 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -6, i32 0, i32 0
  %512 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -6, i32 0, i32 0
  %513 = load i64, i64* %511, align 8
  store i64 %513, i64* %512, align 8
  %514 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -7, i32 0, i32 0
  %515 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -7, i32 0, i32 0
  %516 = load i64, i64* %514, align 8
  store i64 %516, i64* %515, align 8
  %517 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %494, i64 -8
  %518 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %495, i64 -8
  %519 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %517, i64 0, i32 0, i32 0
  %520 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %518, i64 0, i32 0, i32 0
  %521 = load i64, i64* %519, align 8
  store i64 %521, i64* %520, align 8
  %522 = icmp eq %"class.base::TimeTicks"* %517, %6
  br i1 %522, label %940, label %493, !llvm.loop !67

523:                                              ; preds = %366
  %524 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %369, i64 -1
  %525 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %368, i64 -1
  %526 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %524, i64 0, i32 0, i32 0
  %527 = load i64, i64* %526, align 8
  %528 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %525, i64 0, i32 0, i32 0
  %529 = load i64, i64* %528, align 8
  %530 = icmp slt i64 %529, %527
  %531 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 -1, i32 0, i32 0
  %532 = select i1 %530, i64 %527, i64 %529
  %533 = select i1 %530, %"class.base::TimeTicks"* %524, %"class.base::TimeTicks"* %369
  %534 = select i1 %530, %"class.base::TimeTicks"* %368, %"class.base::TimeTicks"* %525
  store i64 %532, i64* %531, align 8
  %535 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %367, i64 -1
  %536 = icmp eq %"class.base::TimeTicks"* %534, %6
  br i1 %536, label %940, label %366

537:                                              ; preds = %201, %537
  %538 = phi %"class.base::TimeTicks"* [ %565, %537 ], [ %203, %201 ]
  %539 = phi %"class.base::TimeTicks"* [ %564, %537 ], [ %204, %201 ]
  %540 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 0, i32 0, i32 0
  %541 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 0, i32 0, i32 0
  %542 = load i64, i64* %540, align 8
  store i64 %542, i64* %541, align 8
  %543 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 1, i32 0, i32 0
  %544 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 1, i32 0, i32 0
  %545 = load i64, i64* %543, align 8
  store i64 %545, i64* %544, align 8
  %546 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 2, i32 0, i32 0
  %547 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 2, i32 0, i32 0
  %548 = load i64, i64* %546, align 8
  store i64 %548, i64* %547, align 8
  %549 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 3, i32 0, i32 0
  %550 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 3, i32 0, i32 0
  %551 = load i64, i64* %549, align 8
  store i64 %551, i64* %550, align 8
  %552 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 4, i32 0, i32 0
  %553 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 4, i32 0, i32 0
  %554 = load i64, i64* %552, align 8
  store i64 %554, i64* %553, align 8
  %555 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 5, i32 0, i32 0
  %556 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 5, i32 0, i32 0
  %557 = load i64, i64* %555, align 8
  store i64 %557, i64* %556, align 8
  %558 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 6, i32 0, i32 0
  %559 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 6, i32 0, i32 0
  %560 = load i64, i64* %558, align 8
  store i64 %560, i64* %559, align 8
  %561 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 7, i32 0, i32 0
  %562 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 7, i32 0, i32 0
  %563 = load i64, i64* %561, align 8
  store i64 %563, i64* %562, align 8
  %564 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %539, i64 8
  %565 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %538, i64 8
  %566 = icmp eq %"class.base::TimeTicks"* %564, %15
  br i1 %566, label %363, label %537, !llvm.loop !68

567:                                              ; preds = %25, %574
  %568 = phi i64 [ %16, %25 ], [ %577, %574 ]
  %569 = phi i64 [ %19, %25 ], [ %576, %574 ]
  %570 = inttoptr i64 %569 to %"class.base::TimeTicks"*
  %571 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %570, i64 0, i32 0, i32 0
  %572 = load i64, i64* %571, align 8
  %573 = icmp slt i64 %28, %572
  br i1 %573, label %579, label %574

574:                                              ; preds = %567
  %575 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %570, i64 1
  %576 = ptrtoint %"class.base::TimeTicks"* %575 to i64
  %577 = add nsw i64 %568, -1
  %578 = icmp eq i64 %577, 0
  br i1 %578, label %940, label %567

579:                                              ; preds = %567
  %580 = inttoptr i64 %569 to %"class.base::TimeTicks"*
  %581 = icmp slt i64 %568, %17
  br i1 %581, label %582, label %611

582:                                              ; preds = %579
  %583 = sdiv i64 %17, 2
  %584 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 %583
  %585 = ptrtoint %"class.base::TimeTicks"* %584 to i64
  %586 = sub i64 %18, %569
  %587 = icmp eq i64 %586, 0
  br i1 %587, label %606, label %588

588:                                              ; preds = %582
  %589 = ashr exact i64 %586, 3
  %590 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %584, i64 0, i32 0, i32 0
  %591 = load i64, i64* %590, align 8
  br label %592

592:                                              ; preds = %592, %588
  %593 = phi %"class.base::TimeTicks"* [ %580, %588 ], [ %604, %592 ]
  %594 = phi i64 [ %589, %588 ], [ %603, %592 ]
  %595 = lshr i64 %594, 1
  %596 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %593, i64 %595
  %597 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %596, i64 0, i32 0, i32 0
  %598 = load i64, i64* %597, align 8
  %599 = icmp slt i64 %591, %598
  %600 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %596, i64 1
  %601 = xor i64 %595, -1
  %602 = add i64 %594, %601
  %603 = select i1 %599, i64 %595, i64 %602
  %604 = select i1 %599, %"class.base::TimeTicks"* %593, %"class.base::TimeTicks"* %600
  %605 = icmp eq i64 %603, 0
  br i1 %605, label %606, label %592

606:                                              ; preds = %592, %582
  %607 = phi %"class.base::TimeTicks"* [ %580, %582 ], [ %604, %592 ]
  %608 = ptrtoint %"class.base::TimeTicks"* %607 to i64
  %609 = sub i64 %608, %569
  %610 = ashr exact i64 %609, 3
  br label %648

611:                                              ; preds = %579
  %612 = icmp eq i64 %568, 1
  br i1 %612, label %613, label %618

613:                                              ; preds = %611
  %614 = inttoptr i64 %18 to %"class.base::TimeTicks"*
  %615 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %614, i64 0, i32 0, i32 0
  %616 = inttoptr i64 %569 to %"class.base::TimeTicks"*
  %617 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %616, i64 0, i32 0, i32 0
  store i64 %28, i64* %617, align 8
  store i64 %572, i64* %615, align 8
  br label %940

618:                                              ; preds = %611
  %619 = sdiv i64 %568, 2
  %620 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %580, i64 %619
  %621 = ptrtoint %"class.base::TimeTicks"* %620 to i64
  %622 = ptrtoint %"class.base::TimeTicks"* %15 to i64
  %623 = sub i64 %622, %18
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %643, label %625

625:                                              ; preds = %618
  %626 = ashr exact i64 %623, 3
  %627 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %620, i64 0, i32 0, i32 0
  %628 = load i64, i64* %627, align 8
  br label %629

629:                                              ; preds = %629, %625
  %630 = phi %"class.base::TimeTicks"* [ %26, %625 ], [ %641, %629 ]
  %631 = phi i64 [ %626, %625 ], [ %640, %629 ]
  %632 = lshr i64 %631, 1
  %633 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %630, i64 %632
  %634 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %633, i64 0, i32 0, i32 0
  %635 = load i64, i64* %634, align 8
  %636 = icmp slt i64 %635, %628
  %637 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %633, i64 1
  %638 = xor i64 %632, -1
  %639 = add i64 %631, %638
  %640 = select i1 %636, i64 %639, i64 %632
  %641 = select i1 %636, %"class.base::TimeTicks"* %637, %"class.base::TimeTicks"* %630
  %642 = icmp eq i64 %640, 0
  br i1 %642, label %643, label %629

643:                                              ; preds = %629, %618
  %644 = phi %"class.base::TimeTicks"* [ %26, %618 ], [ %641, %629 ]
  %645 = ptrtoint %"class.base::TimeTicks"* %644 to i64
  %646 = sub i64 %645, %18
  %647 = ashr exact i64 %646, 3
  br label %648

648:                                              ; preds = %643, %606
  %649 = phi i64 [ %608, %606 ], [ %621, %643 ]
  %650 = phi i64 [ %585, %606 ], [ %645, %643 ]
  %651 = phi i64 [ %583, %606 ], [ %647, %643 ]
  %652 = phi i64 [ %610, %606 ], [ %619, %643 ]
  %653 = sub nsw i64 %568, %652
  %654 = sub nsw i64 %17, %651
  %655 = inttoptr i64 %649 to %"class.base::TimeTicks"*
  %656 = inttoptr i64 %650 to %"class.base::TimeTicks"*
  %657 = inttoptr i64 %649 to i8*
  %658 = inttoptr i64 %18 to i8*
  %659 = icmp eq %"class.base::TimeTicks"* %655, %26
  br i1 %659, label %925, label %660

660:                                              ; preds = %648
  %661 = icmp eq %"class.base::TimeTicks"* %26, %656
  br i1 %661, label %925, label %662

662:                                              ; preds = %660
  %663 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 1
  %664 = icmp eq %"class.base::TimeTicks"* %663, %26
  br i1 %664, label %665, label %675

665:                                              ; preds = %662
  %666 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 0, i32 0, i32 0
  %667 = load i64, i64* %666, align 8
  %668 = sub i64 %650, %18
  %669 = ashr exact i64 %668, 3
  %670 = icmp eq i64 %668, 0
  br i1 %670, label %672, label %671

671:                                              ; preds = %665
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %657, i8* align 8 %658, i64 %668, i1 false) #10
  br label %672

672:                                              ; preds = %671, %665
  %673 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 %669
  %674 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %673, i64 0, i32 0, i32 0
  store i64 %667, i64* %674, align 8
  br label %925

675:                                              ; preds = %662
  %676 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 1
  %677 = icmp eq %"class.base::TimeTicks"* %676, %656
  br i1 %677, label %678, label %693

678:                                              ; preds = %675
  %679 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %656, i64 -1
  %680 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %679, i64 0, i32 0, i32 0
  %681 = load i64, i64* %680, align 8
  %682 = ptrtoint %"class.base::TimeTicks"* %679 to i64
  %683 = sub i64 %682, %649
  %684 = icmp eq i64 %683, 0
  br i1 %684, label %690, label %685

685:                                              ; preds = %678
  %686 = ashr exact i64 %683, 3
  %687 = sub nsw i64 0, %686
  %688 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %656, i64 %687
  %689 = bitcast %"class.base::TimeTicks"* %688 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %689, i8* align 8 %657, i64 %683, i1 false) #10
  br label %690

690:                                              ; preds = %685, %678
  %691 = phi %"class.base::TimeTicks"* [ %688, %685 ], [ %656, %678 ]
  %692 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 0, i32 0, i32 0
  store i64 %681, i64* %692, align 8
  br label %925

693:                                              ; preds = %675
  %694 = sub i64 %18, %649
  %695 = ashr exact i64 %694, 3
  %696 = sub i64 %650, %18
  %697 = ashr exact i64 %696, 3
  %698 = icmp eq i64 %695, %697
  br i1 %698, label %699, label %858

699:                                              ; preds = %693
  %700 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 0, i32 0, i32 0
  %701 = load i64, i64* %700, align 8
  %702 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 0, i32 0, i32 0
  store i64 %28, i64* %700, align 8
  store i64 %701, i64* %702, align 8
  %703 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 1
  %704 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 1
  %705 = icmp eq %"class.base::TimeTicks"* %703, %26
  br i1 %705, label %925, label %706

706:                                              ; preds = %699
  %707 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 -2
  %708 = bitcast %"class.base::TimeTicks"* %707 to i8*
  %709 = sub i64 0, %649
  %710 = getelementptr i8, i8* %708, i64 %709
  %711 = ptrtoint i8* %710 to i64
  %712 = lshr i64 %711, 3
  %713 = add nuw nsw i64 %712, 1
  %714 = icmp ult i64 %713, 4
  br i1 %714, label %801, label %715

715:                                              ; preds = %706
  %716 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 2
  %717 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 -2
  %718 = bitcast %"class.base::TimeTicks"* %717 to i8*
  %719 = sub i64 0, %649
  %720 = getelementptr i8, i8* %718, i64 %719
  %721 = ptrtoint i8* %720 to i64
  %722 = lshr i64 %721, 3
  %723 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %716, i64 %722
  %724 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 2
  %725 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %724, i64 %722
  %726 = icmp ult %"class.base::TimeTicks"* %703, %725
  %727 = icmp ult %"class.base::TimeTicks"* %704, %723
  %728 = and i1 %726, %727
  br i1 %728, label %801, label %729

729:                                              ; preds = %715
  %730 = and i64 %713, 4611686018427387900
  %731 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %704, i64 %730
  %732 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %703, i64 %730
  %733 = add nsw i64 %730, -4
  %734 = lshr exact i64 %733, 2
  %735 = add nuw nsw i64 %734, 1
  %736 = and i64 %735, 1
  %737 = icmp eq i64 %733, 0
  br i1 %737, label %779, label %738

738:                                              ; preds = %729
  %739 = sub nuw nsw i64 %735, %736
  br label %740

740:                                              ; preds = %740, %738
  %741 = phi i64 [ 0, %738 ], [ %776, %740 ]
  %742 = phi i64 [ %739, %738 ], [ %777, %740 ]
  %743 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %704, i64 %741
  %744 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %703, i64 %741
  %745 = bitcast %"class.base::TimeTicks"* %743 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !69
  %747 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %743, i64 2
  %748 = bitcast %"class.base::TimeTicks"* %747 to <2 x i64>*
  %749 = load <2 x i64>, <2 x i64>* %748, align 8, !alias.scope !69
  %750 = bitcast %"class.base::TimeTicks"* %744 to <2 x i64>*
  %751 = load <2 x i64>, <2 x i64>* %750, align 8, !alias.scope !72, !noalias !69
  %752 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %744, i64 2
  %753 = bitcast %"class.base::TimeTicks"* %752 to <2 x i64>*
  %754 = load <2 x i64>, <2 x i64>* %753, align 8, !alias.scope !72, !noalias !69
  %755 = bitcast %"class.base::TimeTicks"* %744 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %755, align 8, !alias.scope !72, !noalias !69
  %756 = bitcast %"class.base::TimeTicks"* %752 to <2 x i64>*
  store <2 x i64> %749, <2 x i64>* %756, align 8, !alias.scope !72, !noalias !69
  %757 = bitcast %"class.base::TimeTicks"* %743 to <2 x i64>*
  store <2 x i64> %751, <2 x i64>* %757, align 8, !alias.scope !69
  %758 = bitcast %"class.base::TimeTicks"* %747 to <2 x i64>*
  store <2 x i64> %754, <2 x i64>* %758, align 8, !alias.scope !69
  %759 = or i64 %741, 4
  %760 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %704, i64 %759
  %761 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %703, i64 %759
  %762 = bitcast %"class.base::TimeTicks"* %760 to <2 x i64>*
  %763 = load <2 x i64>, <2 x i64>* %762, align 8, !alias.scope !69
  %764 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %760, i64 2
  %765 = bitcast %"class.base::TimeTicks"* %764 to <2 x i64>*
  %766 = load <2 x i64>, <2 x i64>* %765, align 8, !alias.scope !69
  %767 = bitcast %"class.base::TimeTicks"* %761 to <2 x i64>*
  %768 = load <2 x i64>, <2 x i64>* %767, align 8, !alias.scope !72, !noalias !69
  %769 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %761, i64 2
  %770 = bitcast %"class.base::TimeTicks"* %769 to <2 x i64>*
  %771 = load <2 x i64>, <2 x i64>* %770, align 8, !alias.scope !72, !noalias !69
  %772 = bitcast %"class.base::TimeTicks"* %761 to <2 x i64>*
  store <2 x i64> %763, <2 x i64>* %772, align 8, !alias.scope !72, !noalias !69
  %773 = bitcast %"class.base::TimeTicks"* %769 to <2 x i64>*
  store <2 x i64> %766, <2 x i64>* %773, align 8, !alias.scope !72, !noalias !69
  %774 = bitcast %"class.base::TimeTicks"* %760 to <2 x i64>*
  store <2 x i64> %768, <2 x i64>* %774, align 8, !alias.scope !69
  %775 = bitcast %"class.base::TimeTicks"* %764 to <2 x i64>*
  store <2 x i64> %771, <2 x i64>* %775, align 8, !alias.scope !69
  %776 = add i64 %741, 8
  %777 = add i64 %742, -2
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %779, label %740, !llvm.loop !74

779:                                              ; preds = %740, %729
  %780 = phi i64 [ 0, %729 ], [ %776, %740 ]
  %781 = icmp eq i64 %736, 0
  br i1 %781, label %799, label %782

782:                                              ; preds = %779
  %783 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %704, i64 %780
  %784 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %703, i64 %780
  %785 = bitcast %"class.base::TimeTicks"* %783 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 8, !alias.scope !69
  %787 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %783, i64 2
  %788 = bitcast %"class.base::TimeTicks"* %787 to <2 x i64>*
  %789 = load <2 x i64>, <2 x i64>* %788, align 8, !alias.scope !69
  %790 = bitcast %"class.base::TimeTicks"* %784 to <2 x i64>*
  %791 = load <2 x i64>, <2 x i64>* %790, align 8, !alias.scope !72, !noalias !69
  %792 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %784, i64 2
  %793 = bitcast %"class.base::TimeTicks"* %792 to <2 x i64>*
  %794 = load <2 x i64>, <2 x i64>* %793, align 8, !alias.scope !72, !noalias !69
  %795 = bitcast %"class.base::TimeTicks"* %784 to <2 x i64>*
  store <2 x i64> %786, <2 x i64>* %795, align 8, !alias.scope !72, !noalias !69
  %796 = bitcast %"class.base::TimeTicks"* %792 to <2 x i64>*
  store <2 x i64> %789, <2 x i64>* %796, align 8, !alias.scope !72, !noalias !69
  %797 = bitcast %"class.base::TimeTicks"* %783 to <2 x i64>*
  store <2 x i64> %791, <2 x i64>* %797, align 8, !alias.scope !69
  %798 = bitcast %"class.base::TimeTicks"* %787 to <2 x i64>*
  store <2 x i64> %794, <2 x i64>* %798, align 8, !alias.scope !69
  br label %799

799:                                              ; preds = %779, %782
  %800 = icmp eq i64 %713, %730
  br i1 %800, label %925, label %801

801:                                              ; preds = %799, %715, %706
  %802 = phi %"class.base::TimeTicks"* [ %704, %715 ], [ %704, %706 ], [ %731, %799 ]
  %803 = phi %"class.base::TimeTicks"* [ %703, %715 ], [ %703, %706 ], [ %732, %799 ]
  %804 = ptrtoint %"class.base::TimeTicks"* %803 to i64
  %805 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 -1
  %806 = ptrtoint %"class.base::TimeTicks"* %805 to i64
  %807 = sub i64 %806, %804
  %808 = lshr i64 %807, 3
  %809 = add nuw nsw i64 %808, 1
  %810 = and i64 %809, 3
  %811 = icmp eq i64 %810, 0
  br i1 %811, label %825, label %812

812:                                              ; preds = %801, %812
  %813 = phi %"class.base::TimeTicks"* [ %822, %812 ], [ %802, %801 ]
  %814 = phi %"class.base::TimeTicks"* [ %821, %812 ], [ %803, %801 ]
  %815 = phi i64 [ %823, %812 ], [ %810, %801 ]
  %816 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %813, i64 0, i32 0, i32 0
  %817 = load i64, i64* %816, align 8
  %818 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %814, i64 0, i32 0, i32 0
  %819 = load i64, i64* %818, align 8
  %820 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %813, i64 0, i32 0, i32 0
  store i64 %817, i64* %818, align 8
  store i64 %819, i64* %820, align 8
  %821 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %814, i64 1
  %822 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %813, i64 1
  %823 = add i64 %815, -1
  %824 = icmp eq i64 %823, 0
  br i1 %824, label %825, label %812, !llvm.loop !75

825:                                              ; preds = %812, %801
  %826 = phi %"class.base::TimeTicks"* [ %802, %801 ], [ %822, %812 ]
  %827 = phi %"class.base::TimeTicks"* [ %803, %801 ], [ %821, %812 ]
  %828 = icmp ult i64 %807, 24
  br i1 %828, label %925, label %829

829:                                              ; preds = %825, %829
  %830 = phi %"class.base::TimeTicks"* [ %856, %829 ], [ %826, %825 ]
  %831 = phi %"class.base::TimeTicks"* [ %855, %829 ], [ %827, %825 ]
  %832 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %830, i64 0, i32 0, i32 0
  %833 = load i64, i64* %832, align 8
  %834 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %831, i64 0, i32 0, i32 0
  %835 = load i64, i64* %834, align 8
  %836 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %830, i64 0, i32 0, i32 0
  store i64 %833, i64* %834, align 8
  store i64 %835, i64* %836, align 8
  %837 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %830, i64 1
  %838 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %837, i64 0, i32 0, i32 0
  %839 = load i64, i64* %838, align 8
  %840 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %831, i64 1, i32 0, i32 0
  %841 = load i64, i64* %840, align 8
  %842 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %837, i64 0, i32 0, i32 0
  store i64 %839, i64* %840, align 8
  store i64 %841, i64* %842, align 8
  %843 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %830, i64 2
  %844 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %843, i64 0, i32 0, i32 0
  %845 = load i64, i64* %844, align 8
  %846 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %831, i64 2, i32 0, i32 0
  %847 = load i64, i64* %846, align 8
  %848 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %843, i64 0, i32 0, i32 0
  store i64 %845, i64* %846, align 8
  store i64 %847, i64* %848, align 8
  %849 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %830, i64 3
  %850 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %849, i64 0, i32 0, i32 0
  %851 = load i64, i64* %850, align 8
  %852 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %831, i64 3, i32 0, i32 0
  %853 = load i64, i64* %852, align 8
  %854 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %849, i64 0, i32 0, i32 0
  store i64 %851, i64* %852, align 8
  store i64 %853, i64* %854, align 8
  %855 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %831, i64 4
  %856 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %830, i64 4
  %857 = icmp eq %"class.base::TimeTicks"* %855, %26
  br i1 %857, label %925, label %829, !llvm.loop !76

858:                                              ; preds = %693, %858
  %859 = phi i64 [ %861, %858 ], [ %697, %693 ]
  %860 = phi i64 [ %859, %858 ], [ %695, %693 ]
  %861 = srem i64 %860, %859
  %862 = icmp eq i64 %861, 0
  br i1 %862, label %863, label %858

863:                                              ; preds = %858
  %864 = icmp eq i64 %859, 0
  br i1 %864, label %896, label %865

865:                                              ; preds = %863
  %866 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 %859
  %867 = shl nsw i64 %859, 3
  %868 = add i64 %867, -8
  %869 = and i64 %868, 8
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %893

871:                                              ; preds = %865
  %872 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %866, i64 -1
  %873 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %872, i64 0, i32 0, i32 0
  %874 = load i64, i64* %873, align 8
  %875 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %872, i64 %695
  br label %876

876:                                              ; preds = %876, %871
  %877 = phi %"class.base::TimeTicks"* [ %872, %871 ], [ %878, %876 ]
  %878 = phi %"class.base::TimeTicks"* [ %875, %871 ], [ %889, %876 ]
  %879 = ptrtoint %"class.base::TimeTicks"* %878 to i64
  %880 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %878, i64 0, i32 0, i32 0
  %881 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %877, i64 0, i32 0, i32 0
  %882 = load i64, i64* %880, align 8
  store i64 %882, i64* %881, align 8
  %883 = sub i64 %650, %879
  %884 = ashr exact i64 %883, 3
  %885 = icmp slt i64 %695, %884
  %886 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %878, i64 %695
  %887 = sub nsw i64 %695, %884
  %888 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 %887
  %889 = select i1 %885, %"class.base::TimeTicks"* %886, %"class.base::TimeTicks"* %888
  %890 = icmp eq %"class.base::TimeTicks"* %889, %872
  br i1 %890, label %891, label %876

891:                                              ; preds = %876
  %892 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %878, i64 0, i32 0, i32 0
  store i64 %874, i64* %892, align 8
  br label %893

893:                                              ; preds = %891, %865
  %894 = phi %"class.base::TimeTicks"* [ %872, %891 ], [ %866, %865 ]
  %895 = icmp eq i64 %868, 0
  br i1 %895, label %896, label %898

896:                                              ; preds = %893, %956, %863
  %897 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 %697
  br label %925

898:                                              ; preds = %893, %956
  %899 = phi %"class.base::TimeTicks"* [ %921, %956 ], [ %894, %893 ]
  %900 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %899, i64 -1
  %901 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %900, i64 0, i32 0, i32 0
  %902 = load i64, i64* %901, align 8
  %903 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %900, i64 %695
  br label %904

904:                                              ; preds = %904, %898
  %905 = phi %"class.base::TimeTicks"* [ %900, %898 ], [ %906, %904 ]
  %906 = phi %"class.base::TimeTicks"* [ %903, %898 ], [ %917, %904 ]
  %907 = ptrtoint %"class.base::TimeTicks"* %906 to i64
  %908 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %906, i64 0, i32 0, i32 0
  %909 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %905, i64 0, i32 0, i32 0
  %910 = load i64, i64* %908, align 8
  store i64 %910, i64* %909, align 8
  %911 = sub i64 %650, %907
  %912 = ashr exact i64 %911, 3
  %913 = icmp slt i64 %695, %912
  %914 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %906, i64 %695
  %915 = sub nsw i64 %695, %912
  %916 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 %915
  %917 = select i1 %913, %"class.base::TimeTicks"* %914, %"class.base::TimeTicks"* %916
  %918 = icmp eq %"class.base::TimeTicks"* %917, %900
  br i1 %918, label %919, label %904

919:                                              ; preds = %904
  %920 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %906, i64 0, i32 0, i32 0
  store i64 %902, i64* %920, align 8
  %921 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %899, i64 -2
  %922 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %921, i64 0, i32 0, i32 0
  %923 = load i64, i64* %922, align 8
  %924 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %921, i64 %695
  br label %941

925:                                              ; preds = %825, %829, %699, %799, %648, %660, %672, %690, %896
  %926 = phi %"class.base::TimeTicks"* [ %655, %660 ], [ %656, %648 ], [ %673, %672 ], [ %691, %690 ], [ %897, %896 ], [ %26, %799 ], [ %26, %699 ], [ %26, %829 ], [ %26, %825 ]
  %927 = add nsw i64 %652, %651
  %928 = add nsw i64 %653, %654
  %929 = icmp slt i64 %927, %928
  br i1 %929, label %930, label %932

930:                                              ; preds = %925
  %931 = ptrtoint %"class.base::TimeTicks"* %926 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIN4base9TimeTicksES3_EENS_11__wrap_iterIPS3_EEEEvT0_S9_S9_T_NS_15iterator_traitsIS9_E15difference_typeESD_PNSC_10value_typeEl(%"class.base::TimeTicks"* %580, %"class.base::TimeTicks"* %655, %"class.base::TimeTicks"* %926, %"struct.std::__1::__less.42"* dereferenceable(1) %3, i64 %652, i64 %651, %"class.base::TimeTicks"* %6, i64 %7)
  br label %933

932:                                              ; preds = %925
  tail call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIN4base9TimeTicksES3_EENS_11__wrap_iterIPS3_EEEEvT0_S9_S9_T_NS_15iterator_traitsIS9_E15difference_typeESD_PNSC_10value_typeEl(%"class.base::TimeTicks"* %926, %"class.base::TimeTicks"* %656, %"class.base::TimeTicks"* %15, %"struct.std::__1::__less.42"* dereferenceable(1) %3, i64 %653, i64 %654, %"class.base::TimeTicks"* %6, i64 %7)
  br label %933

933:                                              ; preds = %930, %932
  %934 = phi i64 [ %931, %930 ], [ %569, %932 ]
  %935 = phi i64 [ %650, %930 ], [ %649, %932 ]
  %936 = phi i64 [ %654, %930 ], [ %651, %932 ]
  %937 = phi i64 [ %653, %930 ], [ %652, %932 ]
  %938 = phi %"class.base::TimeTicks"* [ %15, %930 ], [ %926, %932 ]
  %939 = icmp eq i64 %936, 0
  br i1 %939, label %940, label %14

940:                                              ; preds = %933, %23, %574, %328, %523, %489, %493, %466, %8, %613, %363, %314, %309, %301, %168, %35
  ret void

941:                                              ; preds = %941, %919
  %942 = phi %"class.base::TimeTicks"* [ %921, %919 ], [ %943, %941 ]
  %943 = phi %"class.base::TimeTicks"* [ %924, %919 ], [ %954, %941 ]
  %944 = ptrtoint %"class.base::TimeTicks"* %943 to i64
  %945 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %943, i64 0, i32 0, i32 0
  %946 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %942, i64 0, i32 0, i32 0
  %947 = load i64, i64* %945, align 8
  store i64 %947, i64* %946, align 8
  %948 = sub i64 %650, %944
  %949 = ashr exact i64 %948, 3
  %950 = icmp slt i64 %695, %949
  %951 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %943, i64 %695
  %952 = sub nsw i64 %695, %949
  %953 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %655, i64 %952
  %954 = select i1 %950, %"class.base::TimeTicks"* %951, %"class.base::TimeTicks"* %953
  %955 = icmp eq %"class.base::TimeTicks"* %954, %921
  br i1 %955, label %956, label %941

956:                                              ; preds = %941
  %957 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %943, i64 0, i32 0, i32 0
  store i64 %923, i64* %957, align 8
  %958 = icmp eq %"class.base::TimeTicks"* %921, %655
  br i1 %958, label %896, label %898
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"struct.std::__1::__less.56"* dereferenceable(1), i64, i64, %"struct.std::__1::pair"*, i64) local_unnamed_addr #0 comdat {
  %9 = icmp eq i64 %5, 0
  br i1 %9, label %287, label %10

10:                                               ; preds = %8
  %11 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %12 = ptrtoint %"struct.std::__1::pair"* %0 to i64
  br label %13

13:                                               ; preds = %10, %280
  %14 = phi %"struct.std::__1::pair"* [ %285, %280 ], [ %2, %10 ]
  %15 = phi i64 [ %284, %280 ], [ %4, %10 ]
  %16 = phi i64 [ %283, %280 ], [ %5, %10 ]
  %17 = phi i64 [ %282, %280 ], [ %11, %10 ]
  %18 = phi i64 [ %281, %280 ], [ %12, %10 ]
  %19 = icmp sgt i64 %15, %7
  %20 = icmp sgt i64 %16, %7
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %29

22:                                               ; preds = %13
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %287, label %24

24:                                               ; preds = %22
  %25 = inttoptr i64 %17 to %"struct.std::__1::pair"*
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 0, i32 1
  br label %32

29:                                               ; preds = %13
  %30 = inttoptr i64 %18 to %"struct.std::__1::pair"*
  %31 = inttoptr i64 %17 to %"struct.std::__1::pair"*
  tail call void @_ZNSt3__124__buffered_inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeE(%"struct.std::__1::pair"* %30, %"struct.std::__1::pair"* %31, %"struct.std::__1::pair"* %14, %"struct.std::__1::__less.56"* dereferenceable(1) %3, i64 %15, i64 %16, %"struct.std::__1::pair"* %6)
  br label %287

32:                                               ; preds = %24, %46
  %33 = phi i64 [ %15, %24 ], [ %49, %46 ]
  %34 = phi i64 [ %18, %24 ], [ %48, %46 ]
  %35 = inttoptr i64 %34 to %"struct.std::__1::pair"*
  %36 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = icmp slt i64 %27, %37
  br i1 %38, label %51, label %39

39:                                               ; preds = %32
  %40 = icmp slt i64 %37, %27
  br i1 %40, label %46, label %41

41:                                               ; preds = %39
  %42 = load double, double* %28, align 8
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 0, i32 1
  %44 = load double, double* %43, align 8
  %45 = fcmp olt double %42, %44
  br i1 %45, label %51, label %46

46:                                               ; preds = %39, %41
  %47 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 1
  %48 = ptrtoint %"struct.std::__1::pair"* %47 to i64
  %49 = add nsw i64 %33, -1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %287, label %32

51:                                               ; preds = %32, %41
  %52 = inttoptr i64 %34 to %"struct.std::__1::pair"*
  %53 = icmp slt i64 %33, %16
  br i1 %53, label %54, label %91

54:                                               ; preds = %51
  %55 = sdiv i64 %16, 2
  %56 = sub i64 %17, %34
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %86, label %58

58:                                               ; preds = %54
  %59 = ashr exact i64 %56, 4
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %55, i32 0, i32 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %55, i32 1
  %63 = load double, double* %62, align 8
  br label %64

64:                                               ; preds = %82, %58
  %65 = phi %"struct.std::__1::pair"* [ %52, %58 ], [ %84, %82 ]
  %66 = phi i64 [ %59, %58 ], [ %83, %82 ]
  %67 = lshr i64 %66, 1
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %65, i64 %67
  %69 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = icmp slt i64 %61, %70
  br i1 %71, label %82, label %72

72:                                               ; preds = %64
  %73 = icmp slt i64 %70, %61
  br i1 %73, label %78, label %74

74:                                               ; preds = %72
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %65, i64 %67, i32 1
  %76 = load double, double* %75, align 8
  %77 = fcmp olt double %63, %76
  br i1 %77, label %82, label %78

78:                                               ; preds = %74, %72
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 1
  %80 = xor i64 %67, -1
  %81 = add i64 %66, %80
  br label %82

82:                                               ; preds = %78, %74, %64
  %83 = phi i64 [ %81, %78 ], [ %67, %74 ], [ %67, %64 ]
  %84 = phi %"struct.std::__1::pair"* [ %79, %78 ], [ %65, %74 ], [ %65, %64 ]
  %85 = icmp eq i64 %83, 0
  br i1 %85, label %86, label %64

86:                                               ; preds = %82, %54
  %87 = phi %"struct.std::__1::pair"* [ %52, %54 ], [ %84, %82 ]
  %88 = ptrtoint %"struct.std::__1::pair"* %87 to i64
  %89 = sub i64 %88, %34
  %90 = ashr exact i64 %89, 4
  br label %143

91:                                               ; preds = %51
  %92 = icmp eq i64 %33, 1
  br i1 %92, label %93, label %101

93:                                               ; preds = %91
  %94 = inttoptr i64 %34 to %"struct.std::__1::pair"*
  %95 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %94, i64 0, i32 0, i32 0, i32 0
  store i64 %27, i64* %95, align 8
  store i64 %37, i64* %26, align 8
  %96 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %94, i64 0, i32 1
  %97 = bitcast double* %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast double* %28 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %97, align 8
  store i64 %98, i64* %99, align 8
  br label %287

101:                                              ; preds = %91
  %102 = sdiv i64 %33, 2
  %103 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %52, i64 %102
  %104 = ptrtoint %"struct.std::__1::pair"* %103 to i64
  %105 = ptrtoint %"struct.std::__1::pair"* %14 to i64
  %106 = sub i64 %105, %17
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %137, label %108

108:                                              ; preds = %101
  %109 = ashr exact i64 %106, 4
  %110 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %103, i64 0, i32 0, i32 0, i32 0
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %52, i64 %102, i32 1
  %113 = load double, double* %112, align 8
  br label %114

114:                                              ; preds = %133, %108
  %115 = phi i64 [ 0, %108 ], [ %135, %133 ]
  %116 = phi i64 [ %109, %108 ], [ %134, %133 ]
  %117 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %115
  %118 = lshr i64 %116, 1
  %119 = add nsw i64 %118, %115
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %119, i32 0, i32 0, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = icmp slt i64 %121, %111
  br i1 %122, label %129, label %123

123:                                              ; preds = %114
  %124 = icmp slt i64 %111, %121
  br i1 %124, label %133, label %125

125:                                              ; preds = %123
  %126 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %117, i64 %118, i32 1
  %127 = load double, double* %126, align 8
  %128 = fcmp olt double %127, %113
  br i1 %128, label %129, label %133

129:                                              ; preds = %125, %114
  %130 = add nsw i64 %119, 1
  %131 = xor i64 %118, -1
  %132 = add i64 %116, %131
  br label %133

133:                                              ; preds = %129, %125, %123
  %134 = phi i64 [ %132, %129 ], [ %118, %125 ], [ %118, %123 ]
  %135 = phi i64 [ %130, %129 ], [ %115, %125 ], [ %115, %123 ]
  %136 = icmp eq i64 %134, 0
  br i1 %136, label %137, label %114

137:                                              ; preds = %133, %101
  %138 = phi i64 [ 0, %101 ], [ %135, %133 ]
  %139 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %138
  %140 = ptrtoint %"struct.std::__1::pair"* %139 to i64
  %141 = sub i64 %140, %17
  %142 = ashr exact i64 %141, 4
  br label %143

143:                                              ; preds = %137, %86
  %144 = phi i64 [ %88, %86 ], [ %104, %137 ]
  %145 = phi i64 [ %55, %86 ], [ %138, %137 ]
  %146 = phi i64 [ %55, %86 ], [ %142, %137 ]
  %147 = phi i64 [ %90, %86 ], [ %102, %137 ]
  %148 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 %145
  %149 = ptrtoint %"struct.std::__1::pair"* %148 to i64
  %150 = sub nsw i64 %33, %147
  %151 = sub nsw i64 %16, %146
  %152 = inttoptr i64 %144 to %"struct.std::__1::pair"*
  %153 = icmp eq %"struct.std::__1::pair"* %152, %25
  br i1 %153, label %272, label %154

154:                                              ; preds = %143
  %155 = icmp eq i64 %145, 0
  br i1 %155, label %272, label %156

156:                                              ; preds = %154
  %157 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 0, i32 0, i32 0, i32 0
  %158 = load i64, i64* %157, align 8
  store i64 %27, i64* %157, align 8
  store i64 %158, i64* %26, align 8
  %159 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 0, i32 1
  %160 = bitcast double* %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast double* %28 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %160, align 8
  store i64 %161, i64* %162, align 8
  %164 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 1
  %165 = icmp eq i64 %145, 1
  br i1 %165, label %239, label %166

166:                                              ; preds = %156
  %167 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 1
  %168 = shl nsw i64 %145, 4
  %169 = add i64 %168, -32
  %170 = and i64 %169, 16
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %189

172:                                              ; preds = %166
  %173 = ptrtoint %"struct.std::__1::pair"* %167 to i64
  %174 = icmp eq %"struct.std::__1::pair"* %164, %25
  %175 = select i1 %174, i64 %173, i64 %17
  %176 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %164, i64 0, i32 0, i32 0, i32 0
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %167, i64 0, i32 0, i32 0, i32 0
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %176, align 8
  store i64 %177, i64* %178, align 8
  %180 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 1, i32 1
  %181 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 1, i32 1
  %182 = bitcast double* %180 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = bitcast double* %181 to i64*
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* %182, align 8
  store i64 %183, i64* %184, align 8
  %186 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 2
  %187 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %25, i64 2
  %188 = inttoptr i64 %175 to %"struct.std::__1::pair"*
  br label %189

189:                                              ; preds = %172, %166
  %190 = phi i64 [ %175, %172 ], [ undef, %166 ]
  %191 = phi %"struct.std::__1::pair"* [ %186, %172 ], [ undef, %166 ]
  %192 = phi %"struct.std::__1::pair"* [ %188, %172 ], [ %25, %166 ]
  %193 = phi %"struct.std::__1::pair"* [ %187, %172 ], [ %167, %166 ]
  %194 = phi %"struct.std::__1::pair"* [ %186, %172 ], [ %164, %166 ]
  %195 = phi i64 [ %175, %172 ], [ %17, %166 ]
  %196 = icmp eq i64 %169, 0
  br i1 %196, label %235, label %197

197:                                              ; preds = %189, %197
  %198 = phi %"struct.std::__1::pair"* [ %234, %197 ], [ %192, %189 ]
  %199 = phi %"struct.std::__1::pair"* [ %232, %197 ], [ %193, %189 ]
  %200 = phi %"struct.std::__1::pair"* [ %231, %197 ], [ %194, %189 ]
  %201 = phi i64 [ %220, %197 ], [ %195, %189 ]
  %202 = ptrtoint %"struct.std::__1::pair"* %199 to i64
  %203 = icmp eq %"struct.std::__1::pair"* %200, %198
  %204 = select i1 %203, i64 %202, i64 %201
  %205 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 0, i32 0, i32 0, i32 0
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 0, i32 0, i32 0, i32 0
  %208 = load i64, i64* %207, align 8
  store i64 %208, i64* %205, align 8
  store i64 %206, i64* %207, align 8
  %209 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 0, i32 1
  %210 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 0, i32 1
  %211 = bitcast double* %209 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast double* %210 to i64*
  %214 = load i64, i64* %213, align 8
  store i64 %214, i64* %211, align 8
  store i64 %212, i64* %213, align 8
  %215 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 1
  %216 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 1
  %217 = inttoptr i64 %204 to %"struct.std::__1::pair"*
  %218 = ptrtoint %"struct.std::__1::pair"* %216 to i64
  %219 = icmp eq %"struct.std::__1::pair"* %215, %217
  %220 = select i1 %219, i64 %218, i64 %204
  %221 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %215, i64 0, i32 0, i32 0, i32 0
  %222 = load i64, i64* %221, align 8
  %223 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %216, i64 0, i32 0, i32 0, i32 0
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %221, align 8
  store i64 %222, i64* %223, align 8
  %225 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 1, i32 1
  %226 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 1, i32 1
  %227 = bitcast double* %225 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast double* %226 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %227, align 8
  store i64 %228, i64* %229, align 8
  %231 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 2
  %232 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 2
  %233 = icmp eq %"struct.std::__1::pair"* %232, %148
  %234 = inttoptr i64 %220 to %"struct.std::__1::pair"*
  br i1 %233, label %235, label %197

235:                                              ; preds = %197, %189
  %236 = phi i64 [ %190, %189 ], [ %220, %197 ]
  %237 = phi %"struct.std::__1::pair"* [ %191, %189 ], [ %231, %197 ]
  %238 = inttoptr i64 %236 to %"struct.std::__1::pair"*
  br label %239

239:                                              ; preds = %235, %156
  %240 = phi i64 [ %17, %156 ], [ %236, %235 ]
  %241 = phi %"struct.std::__1::pair"* [ %164, %156 ], [ %237, %235 ]
  %242 = phi %"struct.std::__1::pair"* [ %25, %156 ], [ %238, %235 ]
  %243 = icmp eq %"struct.std::__1::pair"* %241, %242
  br i1 %243, label %272, label %244

244:                                              ; preds = %239
  %245 = inttoptr i64 %240 to %"struct.std::__1::pair"*
  br label %246

246:                                              ; preds = %244, %269
  %247 = phi i64 [ %240, %244 ], [ %271, %269 ]
  %248 = phi %"struct.std::__1::pair"* [ %241, %244 ], [ %264, %269 ]
  %249 = phi %"struct.std::__1::pair"* [ %245, %244 ], [ %265, %269 ]
  %250 = inttoptr i64 %247 to %"struct.std::__1::pair"*
  br label %251

251:                                              ; preds = %246, %268
  %252 = phi %"struct.std::__1::pair"* [ %264, %268 ], [ %248, %246 ]
  %253 = phi %"struct.std::__1::pair"* [ %250, %268 ], [ %249, %246 ]
  %254 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 0, i32 0, i32 0, i32 0
  %255 = load i64, i64* %254, align 8
  %256 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 0, i32 0, i32 0, i32 0
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %254, align 8
  store i64 %255, i64* %256, align 8
  %258 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 0, i32 1
  %259 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 0, i32 1
  %260 = bitcast double* %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast double* %259 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %260, align 8
  store i64 %261, i64* %262, align 8
  %264 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %252, i64 1
  %265 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 1
  %266 = icmp eq %"struct.std::__1::pair"* %265, %148
  %267 = icmp eq %"struct.std::__1::pair"* %264, %250
  br i1 %266, label %268, label %269

268:                                              ; preds = %251
  br i1 %267, label %272, label %251

269:                                              ; preds = %251
  %270 = ptrtoint %"struct.std::__1::pair"* %265 to i64
  %271 = select i1 %267, i64 %270, i64 %247
  br label %246

272:                                              ; preds = %268, %143, %154, %239
  %273 = phi %"struct.std::__1::pair"* [ %152, %154 ], [ %148, %143 ], [ %241, %239 ], [ %241, %268 ]
  %274 = add nsw i64 %147, %146
  %275 = add nsw i64 %150, %151
  %276 = icmp slt i64 %274, %275
  br i1 %276, label %277, label %279

277:                                              ; preds = %272
  %278 = ptrtoint %"struct.std::__1::pair"* %273 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.std::__1::pair"* %52, %"struct.std::__1::pair"* %152, %"struct.std::__1::pair"* %273, %"struct.std::__1::__less.56"* dereferenceable(1) %3, i64 %147, i64 %146, %"struct.std::__1::pair"* %6, i64 %7)
  br label %280

279:                                              ; preds = %272
  tail call void @_ZNSt3__115__inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.std::__1::pair"* %273, %"struct.std::__1::pair"* %148, %"struct.std::__1::pair"* %14, %"struct.std::__1::__less.56"* dereferenceable(1) %3, i64 %150, i64 %151, %"struct.std::__1::pair"* %6, i64 %7)
  br label %280

280:                                              ; preds = %277, %279
  %281 = phi i64 [ %278, %277 ], [ %34, %279 ]
  %282 = phi i64 [ %149, %277 ], [ %144, %279 ]
  %283 = phi i64 [ %151, %277 ], [ %146, %279 ]
  %284 = phi i64 [ %150, %277 ], [ %147, %279 ]
  %285 = phi %"struct.std::__1::pair"* [ %14, %277 ], [ %273, %279 ]
  %286 = icmp eq i64 %283, 0
  br i1 %286, label %287, label %13

287:                                              ; preds = %280, %22, %46, %8, %93, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__124__buffered_inplace_mergeIRNS_6__lessINS_4pairIN4base9TimeTicksEdEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeE(%"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"struct.std::__1::__less.56"* dereferenceable(1), i64, i64, %"struct.std::__1::pair"*) local_unnamed_addr #0 comdat {
  %8 = ptrtoint %"struct.std::__1::pair"* %0 to i64
  %9 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %10 = ptrtoint %"struct.std::__1::pair"* %6 to i64
  %11 = icmp sgt i64 %4, %5
  br i1 %11, label %38, label %12

12:                                               ; preds = %7
  %13 = icmp eq %"struct.std::__1::pair"* %0, %1
  br i1 %13, label %318, label %14

14:                                               ; preds = %12
  %15 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 0, i32 0, i32 0
  %16 = ptrtoint i64* %15 to i64
  %17 = sub i64 %16, %8
  %18 = lshr i64 %17, 4
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 3
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %14, %22
  %23 = phi %"struct.std::__1::pair"* [ %29, %22 ], [ %6, %14 ]
  %24 = phi %"struct.std::__1::pair"* [ %28, %22 ], [ %0, %14 ]
  %25 = phi i64 [ %30, %22 ], [ %20, %14 ]
  %26 = bitcast %"struct.std::__1::pair"* %23 to i8*
  %27 = bitcast %"struct.std::__1::pair"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false)
  %28 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %24, i64 1
  %29 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %23, i64 1
  %30 = add i64 %25, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %22, !llvm.loop !77

32:                                               ; preds = %22, %14
  %33 = phi %"struct.std::__1::pair"* [ undef, %14 ], [ %23, %22 ]
  %34 = phi %"struct.std::__1::pair"* [ undef, %14 ], [ %29, %22 ]
  %35 = phi %"struct.std::__1::pair"* [ %6, %14 ], [ %29, %22 ]
  %36 = phi %"struct.std::__1::pair"* [ %0, %14 ], [ %28, %22 ]
  %37 = icmp ult i64 %17, 48
  br i1 %37, label %63, label %174

38:                                               ; preds = %7
  %39 = icmp eq %"struct.std::__1::pair"* %1, %2
  br i1 %39, label %318, label %40

40:                                               ; preds = %38
  %41 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 -1, i32 0, i32 0, i32 0
  %42 = ptrtoint i64* %41 to i64
  %43 = sub i64 %42, %9
  %44 = lshr i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %58, label %48

48:                                               ; preds = %40, %48
  %49 = phi %"struct.std::__1::pair"* [ %55, %48 ], [ %6, %40 ]
  %50 = phi %"struct.std::__1::pair"* [ %54, %48 ], [ %1, %40 ]
  %51 = phi i64 [ %56, %48 ], [ %46, %40 ]
  %52 = bitcast %"struct.std::__1::pair"* %49 to i8*
  %53 = bitcast %"struct.std::__1::pair"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false)
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %50, i64 1
  %55 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 1
  %56 = add i64 %51, -1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %48, !llvm.loop !78

58:                                               ; preds = %48, %40
  %59 = phi %"struct.std::__1::pair"* [ undef, %40 ], [ %55, %48 ]
  %60 = phi %"struct.std::__1::pair"* [ %6, %40 ], [ %55, %48 ]
  %61 = phi %"struct.std::__1::pair"* [ %1, %40 ], [ %54, %48 ]
  %62 = icmp ult i64 %43, 48
  br i1 %62, label %194, label %298

63:                                               ; preds = %174, %32
  %64 = phi %"struct.std::__1::pair"* [ %33, %32 ], [ %188, %174 ]
  %65 = phi %"struct.std::__1::pair"* [ %34, %32 ], [ %192, %174 ]
  %66 = icmp eq %"struct.std::__1::pair"* %65, %6
  br i1 %66, label %318, label %67

67:                                               ; preds = %63, %169
  %68 = phi %"struct.std::__1::pair"* [ %171, %169 ], [ %6, %63 ]
  %69 = phi %"struct.std::__1::pair"* [ %172, %169 ], [ %0, %63 ]
  %70 = phi %"struct.std::__1::pair"* [ %170, %169 ], [ %1, %63 ]
  %71 = icmp eq %"struct.std::__1::pair"* %70, %2
  br i1 %71, label %72, label %139

72:                                               ; preds = %67
  %73 = ptrtoint %"struct.std::__1::pair"* %68 to i64
  %74 = ptrtoint %"struct.std::__1::pair"* %64 to i64
  %75 = sub i64 %74, %73
  %76 = lshr i64 %75, 4
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 3
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %96, label %80

80:                                               ; preds = %72, %80
  %81 = phi %"struct.std::__1::pair"* [ %93, %80 ], [ %69, %72 ]
  %82 = phi %"struct.std::__1::pair"* [ %92, %80 ], [ %68, %72 ]
  %83 = phi i64 [ %94, %80 ], [ %78, %72 ]
  %84 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %82, i64 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %81, i64 0, i32 0, i32 0, i32 0
  %86 = load i64, i64* %84, align 8
  store i64 %86, i64* %85, align 8
  %87 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %82, i64 0, i32 1
  %88 = bitcast double* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %81, i64 0, i32 1
  %91 = bitcast double* %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %82, i64 1
  %93 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %81, i64 1
  %94 = add i64 %83, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %80, !llvm.loop !79

96:                                               ; preds = %80, %72
  %97 = phi %"struct.std::__1::pair"* [ %69, %72 ], [ %93, %80 ]
  %98 = phi %"struct.std::__1::pair"* [ %68, %72 ], [ %92, %80 ]
  %99 = icmp ult i64 %75, 48
  br i1 %99, label %318, label %100

100:                                              ; preds = %96, %100
  %101 = phi %"struct.std::__1::pair"* [ %137, %100 ], [ %97, %96 ]
  %102 = phi %"struct.std::__1::pair"* [ %136, %100 ], [ %98, %96 ]
  %103 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 0, i32 0, i32 0, i32 0
  %104 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 0, i32 0, i32 0, i32 0
  %105 = load i64, i64* %103, align 8
  store i64 %105, i64* %104, align 8
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 0, i32 1
  %107 = bitcast double* %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 0, i32 1
  %110 = bitcast double* %109 to i64*
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 1, i32 0, i32 0, i32 0
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 1, i32 0, i32 0, i32 0
  %113 = load i64, i64* %111, align 8
  store i64 %113, i64* %112, align 8
  %114 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 1, i32 1
  %115 = bitcast double* %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 1, i32 1
  %118 = bitcast double* %117 to i64*
  store i64 %116, i64* %118, align 8
  %119 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 2, i32 0, i32 0, i32 0
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 2, i32 0, i32 0, i32 0
  %121 = load i64, i64* %119, align 8
  store i64 %121, i64* %120, align 8
  %122 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 2, i32 1
  %123 = bitcast double* %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 2, i32 1
  %126 = bitcast double* %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 3
  %128 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 0, i32 0, i32 0, i32 0
  %129 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 3, i32 0, i32 0, i32 0
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 3, i32 1
  %132 = bitcast double* %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 3, i32 1
  %135 = bitcast double* %134 to i64*
  store i64 %133, i64* %135, align 8
  %136 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 4
  %137 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 4
  %138 = icmp eq %"struct.std::__1::pair"* %127, %64
  br i1 %138, label %318, label %100

139:                                              ; preds = %67
  %140 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 0, i32 0, i32 0
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %70, i64 0, i32 0, i32 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = icmp slt i64 %143, %141
  br i1 %144, label %153, label %145

145:                                              ; preds = %139
  %146 = icmp slt i64 %141, %143
  br i1 %146, label %161, label %147

147:                                              ; preds = %145
  %148 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %70, i64 0, i32 1
  %149 = load double, double* %148, align 8
  %150 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 1
  %151 = load double, double* %150, align 8
  %152 = fcmp olt double %149, %151
  br i1 %152, label %153, label %161

153:                                              ; preds = %147, %139
  %154 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %69, i64 0, i32 0, i32 0, i32 0
  store i64 %143, i64* %154, align 8
  %155 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %70, i64 0, i32 1
  %156 = bitcast double* %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %69, i64 0, i32 1
  %159 = bitcast double* %158 to i64*
  store i64 %157, i64* %159, align 8
  %160 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %70, i64 1
  br label %169

161:                                              ; preds = %147, %145
  %162 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %69, i64 0, i32 0, i32 0, i32 0
  store i64 %141, i64* %162, align 8
  %163 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 1
  %164 = bitcast double* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %69, i64 0, i32 1
  %167 = bitcast double* %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 1
  br label %169

169:                                              ; preds = %161, %153
  %170 = phi %"struct.std::__1::pair"* [ %160, %153 ], [ %70, %161 ]
  %171 = phi %"struct.std::__1::pair"* [ %68, %153 ], [ %168, %161 ]
  %172 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %69, i64 1
  %173 = icmp eq %"struct.std::__1::pair"* %171, %65
  br i1 %173, label %318, label %67

174:                                              ; preds = %32, %174
  %175 = phi %"struct.std::__1::pair"* [ %192, %174 ], [ %35, %32 ]
  %176 = phi %"struct.std::__1::pair"* [ %191, %174 ], [ %36, %32 ]
  %177 = bitcast %"struct.std::__1::pair"* %175 to i8*
  %178 = bitcast %"struct.std::__1::pair"* %176 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 16, i1 false)
  %179 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %176, i64 1
  %180 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %175, i64 1
  %181 = bitcast %"struct.std::__1::pair"* %180 to i8*
  %182 = bitcast %"struct.std::__1::pair"* %179 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 16, i1 false)
  %183 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %176, i64 2
  %184 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %175, i64 2
  %185 = bitcast %"struct.std::__1::pair"* %184 to i8*
  %186 = bitcast %"struct.std::__1::pair"* %183 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false)
  %187 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %176, i64 3
  %188 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %175, i64 3
  %189 = bitcast %"struct.std::__1::pair"* %188 to i8*
  %190 = bitcast %"struct.std::__1::pair"* %187 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 16, i1 false)
  %191 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %176, i64 4
  %192 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %175, i64 4
  %193 = icmp eq %"struct.std::__1::pair"* %191, %1
  br i1 %193, label %63, label %174

194:                                              ; preds = %298, %58
  %195 = phi %"struct.std::__1::pair"* [ %59, %58 ], [ %316, %298 ]
  %196 = icmp eq %"struct.std::__1::pair"* %195, %6
  br i1 %196, label %318, label %197

197:                                              ; preds = %194, %285
  %198 = phi %"struct.std::__1::pair"* [ %296, %285 ], [ %2, %194 ]
  %199 = phi %"struct.std::__1::pair"* [ %289, %285 ], [ %195, %194 ]
  %200 = phi %"struct.std::__1::pair"* [ %288, %285 ], [ %1, %194 ]
  %201 = icmp eq %"struct.std::__1::pair"* %200, %0
  br i1 %201, label %202, label %268

202:                                              ; preds = %197
  %203 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 -1, i32 0, i32 0, i32 0
  %204 = ptrtoint i64* %203 to i64
  %205 = sub i64 %204, %10
  %206 = lshr i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %226, label %210

210:                                              ; preds = %202, %210
  %211 = phi %"struct.std::__1::pair"* [ %214, %210 ], [ %199, %202 ]
  %212 = phi %"struct.std::__1::pair"* [ %215, %210 ], [ %198, %202 ]
  %213 = phi i64 [ %224, %210 ], [ %208, %202 ]
  %214 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %211, i64 -1
  %215 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %212, i64 -1
  %216 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %214, i64 0, i32 0, i32 0, i32 0
  %217 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %215, i64 0, i32 0, i32 0, i32 0
  %218 = load i64, i64* %216, align 8
  store i64 %218, i64* %217, align 8
  %219 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %211, i64 -1, i32 1
  %220 = bitcast double* %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %212, i64 -1, i32 1
  %223 = bitcast double* %222 to i64*
  store i64 %221, i64* %223, align 8
  %224 = add i64 %213, -1
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %210, !llvm.loop !80

226:                                              ; preds = %210, %202
  %227 = phi %"struct.std::__1::pair"* [ %199, %202 ], [ %214, %210 ]
  %228 = phi %"struct.std::__1::pair"* [ %198, %202 ], [ %215, %210 ]
  %229 = icmp ult i64 %205, 48
  br i1 %229, label %318, label %230

230:                                              ; preds = %226, %230
  %231 = phi %"struct.std::__1::pair"* [ %257, %230 ], [ %227, %226 ]
  %232 = phi %"struct.std::__1::pair"* [ %258, %230 ], [ %228, %226 ]
  %233 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -1, i32 0, i32 0, i32 0
  %234 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -1, i32 0, i32 0, i32 0
  %235 = load i64, i64* %233, align 8
  store i64 %235, i64* %234, align 8
  %236 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -1, i32 1
  %237 = bitcast double* %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -1, i32 1
  %240 = bitcast double* %239 to i64*
  store i64 %238, i64* %240, align 8
  %241 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -2, i32 0, i32 0, i32 0
  %242 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -2, i32 0, i32 0, i32 0
  %243 = load i64, i64* %241, align 8
  store i64 %243, i64* %242, align 8
  %244 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -2, i32 1
  %245 = bitcast double* %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -2, i32 1
  %248 = bitcast double* %247 to i64*
  store i64 %246, i64* %248, align 8
  %249 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -3, i32 0, i32 0, i32 0
  %250 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -3, i32 0, i32 0, i32 0
  %251 = load i64, i64* %249, align 8
  store i64 %251, i64* %250, align 8
  %252 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -3, i32 1
  %253 = bitcast double* %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -3, i32 1
  %256 = bitcast double* %255 to i64*
  store i64 %254, i64* %256, align 8
  %257 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -4
  %258 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -4
  %259 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %257, i64 0, i32 0, i32 0, i32 0
  %260 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %258, i64 0, i32 0, i32 0, i32 0
  %261 = load i64, i64* %259, align 8
  store i64 %261, i64* %260, align 8
  %262 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %231, i64 -4, i32 1
  %263 = bitcast double* %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %232, i64 -4, i32 1
  %266 = bitcast double* %265 to i64*
  store i64 %264, i64* %266, align 8
  %267 = icmp eq %"struct.std::__1::pair"* %257, %6
  br i1 %267, label %318, label %230

268:                                              ; preds = %197
  %269 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 -1
  %270 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 -1
  %271 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %269, i64 0, i32 0, i32 0, i32 0
  %272 = load i64, i64* %271, align 8
  %273 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %270, i64 0, i32 0, i32 0, i32 0
  %274 = load i64, i64* %273, align 8
  %275 = icmp slt i64 %274, %272
  br i1 %275, label %285, label %276

276:                                              ; preds = %268
  %277 = icmp slt i64 %272, %274
  br i1 %277, label %284, label %278

278:                                              ; preds = %276
  %279 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %199, i64 -1, i32 1
  %280 = load double, double* %279, align 8
  %281 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %200, i64 -1, i32 1
  %282 = load double, double* %281, align 8
  %283 = fcmp olt double %280, %282
  br i1 %283, label %285, label %284

284:                                              ; preds = %278, %276
  br label %285

285:                                              ; preds = %268, %278, %284
  %286 = phi i64 [ %274, %284 ], [ %272, %278 ], [ %272, %268 ]
  %287 = phi %"struct.std::__1::pair"* [ %199, %284 ], [ %200, %278 ], [ %200, %268 ]
  %288 = phi %"struct.std::__1::pair"* [ %200, %284 ], [ %269, %278 ], [ %269, %268 ]
  %289 = phi %"struct.std::__1::pair"* [ %270, %284 ], [ %199, %278 ], [ %199, %268 ]
  %290 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %198, i64 -1, i32 0, i32 0, i32 0
  store i64 %286, i64* %290, align 8
  %291 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %287, i64 -1, i32 1
  %292 = bitcast double* %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %198, i64 -1, i32 1
  %295 = bitcast double* %294 to i64*
  store i64 %293, i64* %295, align 8
  %296 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %198, i64 -1
  %297 = icmp eq %"struct.std::__1::pair"* %289, %6
  br i1 %297, label %318, label %197

298:                                              ; preds = %58, %298
  %299 = phi %"struct.std::__1::pair"* [ %316, %298 ], [ %60, %58 ]
  %300 = phi %"struct.std::__1::pair"* [ %315, %298 ], [ %61, %58 ]
  %301 = bitcast %"struct.std::__1::pair"* %299 to i8*
  %302 = bitcast %"struct.std::__1::pair"* %300 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %301, i8* align 8 %302, i64 16, i1 false)
  %303 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %300, i64 1
  %304 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %299, i64 1
  %305 = bitcast %"struct.std::__1::pair"* %304 to i8*
  %306 = bitcast %"struct.std::__1::pair"* %303 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %305, i8* align 8 %306, i64 16, i1 false)
  %307 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %300, i64 2
  %308 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %299, i64 2
  %309 = bitcast %"struct.std::__1::pair"* %308 to i8*
  %310 = bitcast %"struct.std::__1::pair"* %307 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %309, i8* align 8 %310, i64 16, i1 false)
  %311 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %300, i64 3
  %312 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %299, i64 3
  %313 = bitcast %"struct.std::__1::pair"* %312 to i8*
  %314 = bitcast %"struct.std::__1::pair"* %311 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %313, i8* align 8 %314, i64 16, i1 false)
  %315 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %300, i64 4
  %316 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %299, i64 4
  %317 = icmp eq %"struct.std::__1::pair"* %315, %2
  br i1 %317, label %194, label %298

318:                                              ; preds = %169, %96, %100, %285, %226, %230, %38, %12, %194, %63
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !8}
!39 = !{i8 0, i8 2}
!40 = !{!"branch_weights", i32 1, i32 2000}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !10}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !10}
!51 = distinct !{!51, !10}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !10}
!67 = distinct !{!67, !8}
!68 = distinct !{!68, !8}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !8}
!75 = distinct !{!75, !10}
!76 = distinct !{!76, !8}
!77 = distinct !{!77, !10}
!78 = distinct !{!78, !10}
!79 = distinct !{!79, !10}
!80 = distinct !{!80, !10}
