; ModuleID = '../../cc/paint/paint_flags.cc'
source_filename = "../../cc/paint/paint_flags.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp, %class.sk_sp.49, %class.sk_sp.33, %class.sk_sp.34, %class.sk_sp.37, %struct.SkRGBA4f, float, float, %union.anon.50, [4 x i8] }>
%class.sk_sp = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.49 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.33 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.34 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.37 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon.50 = type { %struct.anon }
%struct.anon = type { i32 }
%"class.cc::PaintFlags" = type <{ %class.sk_sp, %class.sk_sp.1, %class.sk_sp.33, %class.sk_sp.34, %class.sk_sp.35, %class.sk_sp.36, i32, float, float, i32, %union.anon.43, [4 x i8] }>
%class.sk_sp.1 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.9, i32, %"class.absl::optional.13", %"class.std::__1::vector", %"class.std::__1::vector.21", %class.sk_sp.28, %class.sk_sp.2, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.2, %class.sk_sp.9, %"class.gfx::Rect", i32, %class.sk_sp.11, %class.sk_sp.12, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.2, %class.scoped_refptr }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.11 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.12 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.9 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.absl::optional.13" = type { %"class.absl::optional_internal::optional_data.14" }
%"class.absl::optional_internal::optional_data.14" = type { %"class.absl::optional_internal::optional_data_base.15" }
%"class.absl::optional_internal::optional_data_base.15" = type { %"class.absl::optional_internal::optional_data_dtor_base.16" }
%"class.absl::optional_internal::optional_data_dtor_base.16" = type { i8, %union.anon.17 }
%union.anon.17 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i32* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { float*, float*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { float* }
%class.sk_sp.28 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.29", [7 x i8] }>
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i8 }
%class.sk_sp.2 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.3, i32, i32 }
%class.sk_sp.3 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.35 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.36 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.37, i32, %"class.absl::optional.38", i8, i32 }
%"class.absl::optional.38" = type { %"class.absl::optional_internal::optional_data.39" }
%"class.absl::optional_internal::optional_data.39" = type { %"class.absl::optional_internal::optional_data_base.40" }
%"class.absl::optional_internal::optional_data_base.40" = type { %"class.absl::optional_internal::optional_data_dtor_base.41" }
%"class.absl::optional_internal::optional_data_dtor_base.41" = type { i8, %union.anon.42 }
%union.anon.42 = type { %struct.SkRect }
%union.anon.43 = type { i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkPath = type <{ %class.sk_sp.44, i32, %"struct.std::__1::atomic.4", %"struct.std::__1::atomic.4", i8, i8 }>
%class.sk_sp.44 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.45, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.46, %class.SkTDArray.47, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.45 = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.46 = type { i8*, i32, i32 }
%class.SkTDArray.47 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.48 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.48 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.29", [3 x i8] }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }

@__const._ZNK2cc10PaintFlags9ToSkPaintEv.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.49 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.33 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.34 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.37 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon.50 { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

@_ZN2cc10PaintFlagsC1Ev = hidden unnamed_addr alias void (%"class.cc::PaintFlags"*), void (%"class.cc::PaintFlags"*)* @_ZN2cc10PaintFlagsC2Ev
@_ZN2cc10PaintFlagsC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::PaintFlags"*, %"class.cc::PaintFlags"*), void (%"class.cc::PaintFlags"*, %"class.cc::PaintFlags"*)* @_ZN2cc10PaintFlagsC2ERKS0_
@_ZN2cc10PaintFlagsC1EOS0_ = hidden unnamed_addr alias void (%"class.cc::PaintFlags"*, %"class.cc::PaintFlags"*), void (%"class.cc::PaintFlags"*, %"class.cc::PaintFlags"*)* @_ZN2cc10PaintFlagsC2EOS0_
@_ZN2cc10PaintFlagsD1Ev = hidden unnamed_addr alias void (%"class.cc::PaintFlags"*), void (%"class.cc::PaintFlags"*)* @_ZN2cc10PaintFlagsD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc10PaintFlagsC2Ev(%"class.cc::PaintFlags"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %3 = bitcast %"class.cc::PaintFlags"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 48, i1 false)
  store i32 -16777216, i32* %2, align 8
  %4 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 7
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 8
  store float 4.000000e+00, float* %5, align 8
  %6 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  store i32 3, i32* %6, align 4
  %7 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 10, i32 0
  store i32 0, i32* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc10PaintFlagsC2ERKS0_(%"class.cc::PaintFlags"* nocapture, %"class.cc::PaintFlags"* nocapture readonly dereferenceable(72)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %5 = load %class.SkPathEffect*, %class.SkPathEffect** %4, align 8
  %6 = icmp eq %class.SkPathEffect* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  store %class.SkPathEffect* %5, %class.SkPathEffect** %3, align 8
  %11 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 1, i32 0
  %13 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %12, align 8
  %14 = icmp eq %"class.cc::PaintShader"* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic
  br label %18

18:                                               ; preds = %10, %15
  store %"class.cc::PaintShader"* %13, %"class.cc::PaintShader"** %11, align 8
  %19 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2, i32 0
  %20 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 2, i32 0
  %21 = load %class.SkMaskFilter*, %class.SkMaskFilter** %20, align 8
  %22 = icmp eq %class.SkMaskFilter* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %21, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic
  br label %26

26:                                               ; preds = %18, %23
  store %class.SkMaskFilter* %21, %class.SkMaskFilter** %19, align 8
  %27 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %28 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 3, i32 0
  %29 = load %class.SkColorFilter*, %class.SkColorFilter** %28, align 8
  %30 = icmp eq %class.SkColorFilter* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %29, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw add i32* %32, i32 1 monotonic
  br label %34

34:                                               ; preds = %26, %31
  store %class.SkColorFilter* %29, %class.SkColorFilter** %27, align 8
  %35 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %36 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 4, i32 0
  %37 = load %class.SkDrawLooper*, %class.SkDrawLooper** %36, align 8
  %38 = icmp eq %class.SkDrawLooper* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %class.SkDrawLooper, %class.SkDrawLooper* %37, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = atomicrmw add i32* %40, i32 1 monotonic
  br label %42

42:                                               ; preds = %34, %39
  store %class.SkDrawLooper* %37, %class.SkDrawLooper** %35, align 8
  %43 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %44 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 5, i32 0
  %45 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %44, align 8
  %46 = icmp eq %"class.cc::PaintFilter"* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %45, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 1 monotonic
  br label %50

50:                                               ; preds = %42, %47
  store %"class.cc::PaintFilter"* %45, %"class.cc::PaintFilter"** %43, align 8
  %51 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %52 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 6
  %53 = bitcast i32* %51 to i8*
  %54 = bitcast i32* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 20, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc10PaintFlagsC2EOS0_(%"class.cc::PaintFlags"* nocapture, %"class.cc::PaintFlags"* nocapture dereferenceable(72)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %3, align 8
  %6 = bitcast %"class.cc::PaintFlags"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %8, i64 0, i32 0
  %10 = bitcast %class.sk_sp.1* %8 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.cc::PaintShader"* null, %"class.cc::PaintShader"** %9, align 8
  %12 = bitcast %class.sk_sp.1* %7 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 2
  %15 = getelementptr inbounds %class.sk_sp.33, %class.sk_sp.33* %14, i64 0, i32 0
  %16 = bitcast %class.sk_sp.33* %14 to i64*
  %17 = load i64, i64* %16, align 8
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %15, align 8
  %18 = bitcast %class.sk_sp.33* %13 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3
  %20 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 3
  %21 = getelementptr inbounds %class.sk_sp.34, %class.sk_sp.34* %20, i64 0, i32 0
  %22 = bitcast %class.sk_sp.34* %20 to i64*
  %23 = load i64, i64* %22, align 8
  store %class.SkColorFilter* null, %class.SkColorFilter** %21, align 8
  %24 = bitcast %class.sk_sp.34* %19 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4
  %26 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 4
  %27 = getelementptr inbounds %class.sk_sp.35, %class.sk_sp.35* %26, i64 0, i32 0
  %28 = bitcast %class.sk_sp.35* %26 to i64*
  %29 = load i64, i64* %28, align 8
  store %class.SkDrawLooper* null, %class.SkDrawLooper** %27, align 8
  %30 = bitcast %class.sk_sp.35* %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5
  %32 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 5
  %33 = getelementptr inbounds %class.sk_sp.36, %class.sk_sp.36* %32, i64 0, i32 0
  %34 = bitcast %class.sk_sp.36* %32 to i64*
  %35 = load i64, i64* %34, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %33, align 8
  %36 = bitcast %class.sk_sp.36* %31 to i64*
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %38 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 6
  %39 = bitcast i32* %37 to i8*
  %40 = bitcast i32* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 20, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc10PaintFlagsD2Ev(%"class.cc::PaintFlags"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  store i32 28, i32* %2, align 4
  %3 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 0, i32 0
  %4 = load %class.SkPathEffect*, %class.SkPathEffect** %3, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %3, align 8
  %5 = icmp eq %class.SkPathEffect* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkPathEffect* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkPathEffect* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #7
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %18 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %17, align 8
  store %"class.cc::PaintShader"* null, %"class.cc::PaintShader"** %17, align 8
  %19 = icmp eq %"class.cc::PaintShader"* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %18, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %"class.cc::PaintShader"* %18 to %class.SkRefCntBase*
  %26 = bitcast %"class.cc::PaintShader"* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #7
  br label %30

30:                                               ; preds = %16, %20, %24
  %31 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2, i32 0
  %32 = load %class.SkMaskFilter*, %class.SkMaskFilter** %31, align 8
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %31, align 8
  %33 = icmp eq %class.SkMaskFilter* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %32, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw add i32* %35, i32 -1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = bitcast %class.SkMaskFilter* %32 to %class.SkRefCntBase*
  %40 = bitcast %class.SkMaskFilter* %32 to void (%class.SkRefCntBase*)***
  %41 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %40, align 8
  %42 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, i64 2
  %43 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, align 8
  tail call void %43(%class.SkRefCntBase* nonnull %39) #7
  br label %44

44:                                               ; preds = %30, %34, %38
  %45 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %46 = load %class.SkColorFilter*, %class.SkColorFilter** %45, align 8
  store %class.SkColorFilter* null, %class.SkColorFilter** %45, align 8
  %47 = icmp eq %class.SkColorFilter* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %46, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 -1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = bitcast %class.SkColorFilter* %46 to %class.SkRefCntBase*
  %54 = bitcast %class.SkColorFilter* %46 to void (%class.SkRefCntBase*)***
  %55 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %54, align 8
  %56 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %55, i64 2
  %57 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %56, align 8
  tail call void %57(%class.SkRefCntBase* nonnull %53) #7
  br label %58

58:                                               ; preds = %44, %48, %52
  %59 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %60 = load %class.SkDrawLooper*, %class.SkDrawLooper** %59, align 8
  store %class.SkDrawLooper* null, %class.SkDrawLooper** %59, align 8
  %61 = icmp eq %class.SkDrawLooper* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %class.SkDrawLooper, %class.SkDrawLooper* %60, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw add i32* %63, i32 -1 acq_rel
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %72

66:                                               ; preds = %62
  %67 = bitcast %class.SkDrawLooper* %60 to %class.SkRefCntBase*
  %68 = bitcast %class.SkDrawLooper* %60 to void (%class.SkRefCntBase*)***
  %69 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %68, align 8
  %70 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %69, i64 2
  %71 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %70, align 8
  tail call void %71(%class.SkRefCntBase* nonnull %67) #7
  br label %72

72:                                               ; preds = %58, %62, %66
  %73 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %74 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %73, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %73, align 8
  %75 = icmp eq %"class.cc::PaintFilter"* %74, null
  br i1 %75, label %99, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %74, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %86

80:                                               ; preds = %76
  %81 = bitcast %"class.cc::PaintFilter"* %74 to %class.SkRefCntBase*
  %82 = bitcast %"class.cc::PaintFilter"* %74 to void (%class.SkRefCntBase*)***
  %83 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %82, align 8
  %84 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %83, i64 2
  %85 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %84, align 8
  tail call void %85(%class.SkRefCntBase* nonnull %81) #7
  br label %86

86:                                               ; preds = %76, %80
  %87 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %73, align 8
  %88 = icmp eq %"class.cc::PaintFilter"* %87, null
  br i1 %88, label %99, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %87, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = atomicrmw add i32* %90, i32 -1 acq_rel
  %92 = icmp eq i32 %91, 1
  br i1 %92, label %93, label %99

93:                                               ; preds = %89
  %94 = bitcast %"class.cc::PaintFilter"* %87 to %class.SkRefCntBase*
  %95 = bitcast %"class.cc::PaintFilter"* %87 to void (%class.SkRefCntBase*)***
  %96 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %95, align 8
  %97 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %96, i64 2
  %98 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %97, align 8
  tail call void %98(%class.SkRefCntBase* nonnull %94) #7
  br label %99

99:                                               ; preds = %72, %86, %89, %93
  %100 = load %class.SkDrawLooper*, %class.SkDrawLooper** %59, align 8
  %101 = icmp eq %class.SkDrawLooper* %100, null
  br i1 %101, label %112, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %class.SkDrawLooper, %class.SkDrawLooper* %100, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = atomicrmw add i32* %103, i32 -1 acq_rel
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %106, label %112

106:                                              ; preds = %102
  %107 = bitcast %class.SkDrawLooper* %100 to %class.SkRefCntBase*
  %108 = bitcast %class.SkDrawLooper* %100 to void (%class.SkRefCntBase*)***
  %109 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %108, align 8
  %110 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %109, i64 2
  %111 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %110, align 8
  tail call void %111(%class.SkRefCntBase* nonnull %107) #7
  br label %112

112:                                              ; preds = %99, %102, %106
  %113 = load %class.SkColorFilter*, %class.SkColorFilter** %45, align 8
  %114 = icmp eq %class.SkColorFilter* %113, null
  br i1 %114, label %125, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %113, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = atomicrmw add i32* %116, i32 -1 acq_rel
  %118 = icmp eq i32 %117, 1
  br i1 %118, label %119, label %125

119:                                              ; preds = %115
  %120 = bitcast %class.SkColorFilter* %113 to %class.SkRefCntBase*
  %121 = bitcast %class.SkColorFilter* %113 to void (%class.SkRefCntBase*)***
  %122 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %121, align 8
  %123 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %122, i64 2
  %124 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %123, align 8
  tail call void %124(%class.SkRefCntBase* nonnull %120) #7
  br label %125

125:                                              ; preds = %112, %115, %119
  %126 = load %class.SkMaskFilter*, %class.SkMaskFilter** %31, align 8
  %127 = icmp eq %class.SkMaskFilter* %126, null
  br i1 %127, label %138, label %128

128:                                              ; preds = %125
  %129 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %126, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = atomicrmw add i32* %129, i32 -1 acq_rel
  %131 = icmp eq i32 %130, 1
  br i1 %131, label %132, label %138

132:                                              ; preds = %128
  %133 = bitcast %class.SkMaskFilter* %126 to %class.SkRefCntBase*
  %134 = bitcast %class.SkMaskFilter* %126 to void (%class.SkRefCntBase*)***
  %135 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %134, align 8
  %136 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %135, i64 2
  %137 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %136, align 8
  tail call void %137(%class.SkRefCntBase* nonnull %133) #7
  br label %138

138:                                              ; preds = %125, %128, %132
  %139 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %17, align 8
  %140 = icmp eq %"class.cc::PaintShader"* %139, null
  br i1 %140, label %151, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %139, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = atomicrmw add i32* %142, i32 -1 acq_rel
  %144 = icmp eq i32 %143, 1
  br i1 %144, label %145, label %151

145:                                              ; preds = %141
  %146 = bitcast %"class.cc::PaintShader"* %139 to %class.SkRefCntBase*
  %147 = bitcast %"class.cc::PaintShader"* %139 to void (%class.SkRefCntBase*)***
  %148 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %147, align 8
  %149 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %148, i64 2
  %150 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %149, align 8
  tail call void %150(%class.SkRefCntBase* nonnull %146) #7
  br label %151

151:                                              ; preds = %138, %141, %145
  %152 = load %class.SkPathEffect*, %class.SkPathEffect** %3, align 8
  %153 = icmp eq %class.SkPathEffect* %152, null
  br i1 %153, label %164, label %154

154:                                              ; preds = %151
  %155 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %152, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = atomicrmw add i32* %155, i32 -1 acq_rel
  %157 = icmp eq i32 %156, 1
  br i1 %157, label %158, label %164

158:                                              ; preds = %154
  %159 = bitcast %class.SkPathEffect* %152 to %class.SkRefCntBase*
  %160 = bitcast %class.SkPathEffect* %152 to void (%class.SkRefCntBase*)***
  %161 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %160, align 8
  %162 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %161, i64 2
  %163 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %162, align 8
  tail call void %163(%class.SkRefCntBase* nonnull %159) #7
  br label %164

164:                                              ; preds = %151, %154, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(72) %"class.cc::PaintFlags"* @_ZN2cc10PaintFlagsaSERKS0_(%"class.cc::PaintFlags"* returned, %"class.cc::PaintFlags"* readonly dereferenceable(72)) local_unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.cc::PaintFlags"* %0, %1
  br i1 %3, label %130, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %6 = load %class.SkPathEffect*, %class.SkPathEffect** %5, align 8
  %7 = icmp eq %class.SkPathEffect* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic
  br label %11

11:                                               ; preds = %8, %4
  %12 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 0, i32 0
  %13 = load %class.SkPathEffect*, %class.SkPathEffect** %12, align 8
  store %class.SkPathEffect* %6, %class.SkPathEffect** %12, align 8
  %14 = icmp eq %class.SkPathEffect* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %13, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %class.SkPathEffect* %13 to %class.SkRefCntBase*
  %21 = bitcast %class.SkPathEffect* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  tail call void %24(%class.SkRefCntBase* nonnull %20) #7
  br label %25

25:                                               ; preds = %11, %15, %19
  %26 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 1, i32 0
  %27 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %26, align 8
  %28 = icmp eq %"class.cc::PaintShader"* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %27, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 1 monotonic
  br label %32

32:                                               ; preds = %29, %25
  %33 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %34 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %33, align 8
  store %"class.cc::PaintShader"* %27, %"class.cc::PaintShader"** %33, align 8
  %35 = icmp eq %"class.cc::PaintShader"* %34, null
  br i1 %35, label %46, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %34, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw add i32* %37, i32 -1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %46

40:                                               ; preds = %36
  %41 = bitcast %"class.cc::PaintShader"* %34 to %class.SkRefCntBase*
  %42 = bitcast %"class.cc::PaintShader"* %34 to void (%class.SkRefCntBase*)***
  %43 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %42, align 8
  %44 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %43, i64 2
  %45 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %44, align 8
  tail call void %45(%class.SkRefCntBase* nonnull %41) #7
  br label %46

46:                                               ; preds = %32, %36, %40
  %47 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 2, i32 0
  %48 = load %class.SkMaskFilter*, %class.SkMaskFilter** %47, align 8
  %49 = icmp eq %class.SkMaskFilter* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %48, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = atomicrmw add i32* %51, i32 1 monotonic
  br label %53

53:                                               ; preds = %50, %46
  %54 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2, i32 0
  %55 = load %class.SkMaskFilter*, %class.SkMaskFilter** %54, align 8
  store %class.SkMaskFilter* %48, %class.SkMaskFilter** %54, align 8
  %56 = icmp eq %class.SkMaskFilter* %55, null
  br i1 %56, label %67, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %55, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 -1 acq_rel
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = bitcast %class.SkMaskFilter* %55 to %class.SkRefCntBase*
  %63 = bitcast %class.SkMaskFilter* %55 to void (%class.SkRefCntBase*)***
  %64 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %63, align 8
  %65 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %64, i64 2
  %66 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %65, align 8
  tail call void %66(%class.SkRefCntBase* nonnull %62) #7
  br label %67

67:                                               ; preds = %53, %57, %61
  %68 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 3, i32 0
  %69 = load %class.SkColorFilter*, %class.SkColorFilter** %68, align 8
  %70 = icmp eq %class.SkColorFilter* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %69, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = atomicrmw add i32* %72, i32 1 monotonic
  br label %74

74:                                               ; preds = %71, %67
  %75 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %76 = load %class.SkColorFilter*, %class.SkColorFilter** %75, align 8
  store %class.SkColorFilter* %69, %class.SkColorFilter** %75, align 8
  %77 = icmp eq %class.SkColorFilter* %76, null
  br i1 %77, label %88, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %76, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw add i32* %79, i32 -1 acq_rel
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %82, label %88

82:                                               ; preds = %78
  %83 = bitcast %class.SkColorFilter* %76 to %class.SkRefCntBase*
  %84 = bitcast %class.SkColorFilter* %76 to void (%class.SkRefCntBase*)***
  %85 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %84, align 8
  %86 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %85, i64 2
  %87 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %86, align 8
  tail call void %87(%class.SkRefCntBase* nonnull %83) #7
  br label %88

88:                                               ; preds = %74, %78, %82
  %89 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 4, i32 0
  %90 = load %class.SkDrawLooper*, %class.SkDrawLooper** %89, align 8
  %91 = icmp eq %class.SkDrawLooper* %90, null
  br i1 %91, label %95, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %class.SkDrawLooper, %class.SkDrawLooper* %90, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 1 monotonic
  br label %95

95:                                               ; preds = %92, %88
  %96 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %97 = load %class.SkDrawLooper*, %class.SkDrawLooper** %96, align 8
  store %class.SkDrawLooper* %90, %class.SkDrawLooper** %96, align 8
  %98 = icmp eq %class.SkDrawLooper* %97, null
  br i1 %98, label %109, label %99

99:                                               ; preds = %95
  %100 = getelementptr inbounds %class.SkDrawLooper, %class.SkDrawLooper* %97, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = atomicrmw add i32* %100, i32 -1 acq_rel
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %109

103:                                              ; preds = %99
  %104 = bitcast %class.SkDrawLooper* %97 to %class.SkRefCntBase*
  %105 = bitcast %class.SkDrawLooper* %97 to void (%class.SkRefCntBase*)***
  %106 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %105, align 8
  %107 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %106, i64 2
  %108 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %107, align 8
  tail call void %108(%class.SkRefCntBase* nonnull %104) #7
  br label %109

109:                                              ; preds = %95, %99, %103
  %110 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 5, i32 0
  %111 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %110, align 8
  %112 = icmp eq %"class.cc::PaintFilter"* %111, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %111, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = atomicrmw add i32* %114, i32 1 monotonic
  br label %116

116:                                              ; preds = %113, %109
  %117 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %118 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %117, align 8
  store %"class.cc::PaintFilter"* %111, %"class.cc::PaintFilter"** %117, align 8
  %119 = icmp eq %"class.cc::PaintFilter"* %118, null
  br i1 %119, label %130, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %118, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = atomicrmw add i32* %121, i32 -1 acq_rel
  %123 = icmp eq i32 %122, 1
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = bitcast %"class.cc::PaintFilter"* %118 to %class.SkRefCntBase*
  %126 = bitcast %"class.cc::PaintFilter"* %118 to void (%class.SkRefCntBase*)***
  %127 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %126, align 8
  %128 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %127, i64 2
  %129 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %128, align 8
  tail call void %129(%class.SkRefCntBase* nonnull %125) #7
  br label %130

130:                                              ; preds = %2, %116, %120, %124
  %131 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %132 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 6
  %133 = bitcast i32* %131 to i8*
  %134 = bitcast i32* %132 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* align 8 %134, i64 20, i1 false)
  ret %"class.cc::PaintFlags"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(72) %"class.cc::PaintFlags"* @_ZN2cc10PaintFlagsaSEOS0_(%"class.cc::PaintFlags"* returned, %"class.cc::PaintFlags"* nocapture dereferenceable(72)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %3, align 8
  %6 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 0, i32 0
  %7 = load %class.SkPathEffect*, %class.SkPathEffect** %6, align 8
  %8 = bitcast %"class.cc::PaintFlags"* %0 to i64*
  store i64 %5, i64* %8, align 8
  %9 = icmp eq %class.SkPathEffect* %7, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 -1 acq_rel
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %20

14:                                               ; preds = %10
  %15 = bitcast %class.SkPathEffect* %7 to %class.SkRefCntBase*
  %16 = bitcast %class.SkPathEffect* %7 to void (%class.SkRefCntBase*)***
  %17 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %17, i64 2
  %19 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %18, align 8
  tail call void %19(%class.SkRefCntBase* nonnull %15) #7
  br label %20

20:                                               ; preds = %2, %10, %14
  %21 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1
  %22 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 1
  %23 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %22, i64 0, i32 0
  %24 = bitcast %class.sk_sp.1* %22 to i64*
  %25 = load i64, i64* %24, align 8
  store %"class.cc::PaintShader"* null, %"class.cc::PaintShader"** %23, align 8
  %26 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %21, i64 0, i32 0
  %27 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %26, align 8
  %28 = bitcast %class.sk_sp.1* %21 to i64*
  store i64 %25, i64* %28, align 8
  %29 = icmp eq %"class.cc::PaintShader"* %27, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %20
  %31 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %27, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.cc::PaintShader"* %27 to %class.SkRefCntBase*
  %36 = bitcast %"class.cc::PaintShader"* %27 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  tail call void %39(%class.SkRefCntBase* nonnull %35) #7
  br label %40

40:                                               ; preds = %20, %30, %34
  %41 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2
  %42 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 2
  %43 = getelementptr inbounds %class.sk_sp.33, %class.sk_sp.33* %42, i64 0, i32 0
  %44 = bitcast %class.sk_sp.33* %42 to i64*
  %45 = load i64, i64* %44, align 8
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %43, align 8
  %46 = getelementptr inbounds %class.sk_sp.33, %class.sk_sp.33* %41, i64 0, i32 0
  %47 = load %class.SkMaskFilter*, %class.SkMaskFilter** %46, align 8
  %48 = bitcast %class.sk_sp.33* %41 to i64*
  store i64 %45, i64* %48, align 8
  %49 = icmp eq %class.SkMaskFilter* %47, null
  br i1 %49, label %60, label %50

50:                                               ; preds = %40
  %51 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %47, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = atomicrmw add i32* %51, i32 -1 acq_rel
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %60

54:                                               ; preds = %50
  %55 = bitcast %class.SkMaskFilter* %47 to %class.SkRefCntBase*
  %56 = bitcast %class.SkMaskFilter* %47 to void (%class.SkRefCntBase*)***
  %57 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %56, align 8
  %58 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %57, i64 2
  %59 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %58, align 8
  tail call void %59(%class.SkRefCntBase* nonnull %55) #7
  br label %60

60:                                               ; preds = %40, %50, %54
  %61 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3
  %62 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 3
  %63 = getelementptr inbounds %class.sk_sp.34, %class.sk_sp.34* %62, i64 0, i32 0
  %64 = bitcast %class.sk_sp.34* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store %class.SkColorFilter* null, %class.SkColorFilter** %63, align 8
  %66 = getelementptr inbounds %class.sk_sp.34, %class.sk_sp.34* %61, i64 0, i32 0
  %67 = load %class.SkColorFilter*, %class.SkColorFilter** %66, align 8
  %68 = bitcast %class.sk_sp.34* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq %class.SkColorFilter* %67, null
  br i1 %69, label %80, label %70

70:                                               ; preds = %60
  %71 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %67, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = atomicrmw add i32* %71, i32 -1 acq_rel
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %80

74:                                               ; preds = %70
  %75 = bitcast %class.SkColorFilter* %67 to %class.SkRefCntBase*
  %76 = bitcast %class.SkColorFilter* %67 to void (%class.SkRefCntBase*)***
  %77 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %76, align 8
  %78 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %77, i64 2
  %79 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %78, align 8
  tail call void %79(%class.SkRefCntBase* nonnull %75) #7
  br label %80

80:                                               ; preds = %60, %70, %74
  %81 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4
  %82 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 4
  %83 = getelementptr inbounds %class.sk_sp.35, %class.sk_sp.35* %82, i64 0, i32 0
  %84 = bitcast %class.sk_sp.35* %82 to i64*
  %85 = load i64, i64* %84, align 8
  store %class.SkDrawLooper* null, %class.SkDrawLooper** %83, align 8
  %86 = getelementptr inbounds %class.sk_sp.35, %class.sk_sp.35* %81, i64 0, i32 0
  %87 = load %class.SkDrawLooper*, %class.SkDrawLooper** %86, align 8
  %88 = bitcast %class.sk_sp.35* %81 to i64*
  store i64 %85, i64* %88, align 8
  %89 = icmp eq %class.SkDrawLooper* %87, null
  br i1 %89, label %100, label %90

90:                                               ; preds = %80
  %91 = getelementptr inbounds %class.SkDrawLooper, %class.SkDrawLooper* %87, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = atomicrmw add i32* %91, i32 -1 acq_rel
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %100

94:                                               ; preds = %90
  %95 = bitcast %class.SkDrawLooper* %87 to %class.SkRefCntBase*
  %96 = bitcast %class.SkDrawLooper* %87 to void (%class.SkRefCntBase*)***
  %97 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %96, align 8
  %98 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %97, i64 2
  %99 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %98, align 8
  tail call void %99(%class.SkRefCntBase* nonnull %95) #7
  br label %100

100:                                              ; preds = %80, %90, %94
  %101 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5
  %102 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 5
  %103 = getelementptr inbounds %class.sk_sp.36, %class.sk_sp.36* %102, i64 0, i32 0
  %104 = bitcast %class.sk_sp.36* %102 to i64*
  %105 = load i64, i64* %104, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %103, align 8
  %106 = getelementptr inbounds %class.sk_sp.36, %class.sk_sp.36* %101, i64 0, i32 0
  %107 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %106, align 8
  %108 = bitcast %class.sk_sp.36* %101 to i64*
  store i64 %105, i64* %108, align 8
  %109 = icmp eq %"class.cc::PaintFilter"* %107, null
  br i1 %109, label %120, label %110

110:                                              ; preds = %100
  %111 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %107, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = atomicrmw add i32* %111, i32 -1 acq_rel
  %113 = icmp eq i32 %112, 1
  br i1 %113, label %114, label %120

114:                                              ; preds = %110
  %115 = bitcast %"class.cc::PaintFilter"* %107 to %class.SkRefCntBase*
  %116 = bitcast %"class.cc::PaintFilter"* %107 to void (%class.SkRefCntBase*)***
  %117 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %116, align 8
  %118 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %117, i64 2
  %119 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %118, align 8
  tail call void %119(%class.SkRefCntBase* nonnull %115) #7
  br label %120

120:                                              ; preds = %100, %110, %114
  %121 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %122 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 6
  %123 = bitcast i32* %121 to i8*
  %124 = bitcast i32* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 20, i1 false)
  ret %"class.cc::PaintFlags"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc10PaintFlags14setImageFilterE5sk_spINS_11PaintFilterEE(%"class.cc::PaintFlags"* nocapture, %class.sk_sp.36* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %class.sk_sp.36, %class.sk_sp.36* %1, i64 0, i32 0
  %5 = bitcast %class.sk_sp.36* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store %"class.cc::PaintFilter"* null, %"class.cc::PaintFilter"** %4, align 8
  %7 = getelementptr inbounds %class.sk_sp.36, %class.sk_sp.36* %3, i64 0, i32 0
  %8 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %7, align 8
  %9 = bitcast %class.sk_sp.36* %3 to i64*
  store i64 %6, i64* %9, align 8
  %10 = icmp eq %"class.cc::PaintFilter"* %8, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 -1 acq_rel
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %21

15:                                               ; preds = %11
  %16 = bitcast %"class.cc::PaintFilter"* %8 to %class.SkRefCntBase*
  %17 = bitcast %"class.cc::PaintFilter"* %8 to void (%class.SkRefCntBase*)***
  %18 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %18, i64 2
  %20 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %19, align 8
  tail call void %20(%class.SkRefCntBase* nonnull %16) #7
  br label %21

21:                                               ; preds = %2, %11, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlags13nothingToDrawEv(%"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %3 = load %class.SkDrawLooper*, %class.SkDrawLooper** %2, align 8
  %4 = icmp eq %class.SkDrawLooper* %3, null
  br i1 %4, label %5, label %23

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %22 [
    i32 3, label %8
    i32 9, label %8
    i32 8, label %8
    i32 4, label %8
    i32 12, label %8
    i32 2, label %23
  ]

8:                                                ; preds = %5, %5, %5, %5, %5
  %9 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %10 = load i32, i32* %9, align 8
  %11 = icmp ult i32 %10, 16777216
  br i1 %11, label %12, label %22

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %14 = load %class.SkColorFilter*, %class.SkColorFilter** %13, align 8
  %15 = icmp eq %class.SkColorFilter* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call zeroext i1 @_ZNK13SkColorFilter16isAlphaUnchangedEv(%class.SkColorFilter* nonnull %14) #7
  br i1 %17, label %18, label %23

18:                                               ; preds = %16, %12
  %19 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %20 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %19, align 8
  %21 = icmp eq %"class.cc::PaintFilter"* %20, null
  br label %23

22:                                               ; preds = %5, %8
  br label %23

23:                                               ; preds = %16, %1, %5, %18, %22
  %24 = phi i1 [ false, %22 ], [ false, %1 ], [ false, %16 ], [ %21, %18 ], [ true, %5 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlags11getFillPathERK6SkPathPS1_PK6SkRectf(%"class.cc::PaintFlags"* nocapture readonly, %class.SkPath* dereferenceable(16), %class.SkPath*, %struct.SkRect*, float) local_unnamed_addr #1 align 2 {
  %6 = alloca %class.SkPaint, align 8
  %7 = bitcast %class.SkPaint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %7) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast (%class.SkPaint* @__const._ZNK2cc10PaintFlags9ToSkPaintEv.paint to i8*), i64 72, i1 false)
  call void @_ZNK2cc10PaintFlags9ToSkPaintEv(%class.SkPaint* nonnull sret %6, %"class.cc::PaintFlags"* %0)
  %8 = call zeroext i1 @_ZNK7SkPaint11getFillPathERK6SkPathPS0_PK6SkRectf(%class.SkPaint* nonnull %6, %class.SkPath* dereferenceable(16) %1, %class.SkPath* %2, %struct.SkRect* %3, float %4) #7
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %7) #7
  ret i1 %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc10PaintFlags9ToSkPaintEv(%class.SkPaint* noalias sret, %"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %class.sk_sp, align 8
  %4 = alloca %class.sk_sp.49, align 8
  %5 = alloca %class.sk_sp.33, align 8
  %6 = alloca %class.sk_sp.34, align 8
  %7 = alloca %class.sk_sp.37, align 8
  %8 = bitcast %class.SkPaint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%class.SkPaint* @__const._ZNK2cc10PaintFlags9ToSkPaintEv.paint to i8*), i64 72, i1 false)
  tail call void @_ZN7SkPaintC1Ev(%class.SkPaint* %0) #7
  %9 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %10 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %11 = load %class.SkPathEffect*, %class.SkPathEffect** %10, align 8
  %12 = icmp eq %class.SkPathEffect* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  br label %16

16:                                               ; preds = %2, %13
  store %class.SkPathEffect* %11, %class.SkPathEffect** %9, align 8
  call void @_ZN7SkPaint13setPathEffectE5sk_spI12SkPathEffectE(%class.SkPaint* %0, %class.sk_sp* nonnull %3) #7
  %17 = load %class.SkPathEffect*, %class.SkPathEffect** %9, align 8
  %18 = icmp eq %class.SkPathEffect* %17, null
  br i1 %18, label %29, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %17, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 -1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = bitcast %class.SkPathEffect* %17 to %class.SkRefCntBase*
  %25 = bitcast %class.SkPathEffect* %17 to void (%class.SkRefCntBase*)***
  %26 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %25, align 8
  %27 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %26, i64 2
  %28 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, align 8
  call void %28(%class.SkRefCntBase* nonnull %24) #7
  br label %29

29:                                               ; preds = %16, %19, %23
  %30 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 1, i32 0
  %31 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %30, align 8
  %32 = icmp eq %"class.cc::PaintShader"* %31, null
  br i1 %32, label %53, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 10
  %35 = bitcast %union.anon.43* %34 to i16*
  %36 = load i16, i16* %35, align 8
  %37 = lshr i16 %36, 8
  %38 = and i16 %37, 3
  %39 = zext i16 %38 to i32
  call void @_ZNK2cc11PaintShader11GetSkShaderE15SkFilterQuality(%class.sk_sp.49* nonnull sret %4, %"class.cc::PaintShader"* nonnull %31, i32 %39) #7
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* %0, %class.sk_sp.49* nonnull %4) #7
  %40 = getelementptr inbounds %class.sk_sp.49, %class.sk_sp.49* %4, i64 0, i32 0
  %41 = load %class.SkShader*, %class.SkShader** %40, align 8
  %42 = icmp eq %class.SkShader* %41, null
  br i1 %42, label %53, label %43

43:                                               ; preds = %33
  %44 = getelementptr inbounds %class.SkShader, %class.SkShader* %41, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw add i32* %44, i32 -1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %43
  %48 = bitcast %class.SkShader* %41 to %class.SkRefCntBase*
  %49 = bitcast %class.SkShader* %41 to void (%class.SkRefCntBase*)***
  %50 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %49, align 8
  %51 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %50, i64 2
  %52 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %51, align 8
  call void %52(%class.SkRefCntBase* nonnull %48) #7
  br label %53

53:                                               ; preds = %29, %47, %43, %33
  %54 = getelementptr inbounds %class.sk_sp.33, %class.sk_sp.33* %5, i64 0, i32 0
  %55 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 2, i32 0
  %56 = load %class.SkMaskFilter*, %class.SkMaskFilter** %55, align 8
  %57 = icmp eq %class.SkMaskFilter* %56, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %56, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = atomicrmw add i32* %59, i32 1 monotonic
  br label %61

61:                                               ; preds = %53, %58
  store %class.SkMaskFilter* %56, %class.SkMaskFilter** %54, align 8
  call void @_ZN7SkPaint13setMaskFilterE5sk_spI12SkMaskFilterE(%class.SkPaint* %0, %class.sk_sp.33* nonnull %5) #7
  %62 = load %class.SkMaskFilter*, %class.SkMaskFilter** %54, align 8
  %63 = icmp eq %class.SkMaskFilter* %62, null
  br i1 %63, label %74, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %62, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = bitcast %class.SkMaskFilter* %62 to %class.SkRefCntBase*
  %70 = bitcast %class.SkMaskFilter* %62 to void (%class.SkRefCntBase*)***
  %71 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %70, align 8
  %72 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %71, i64 2
  %73 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %72, align 8
  call void %73(%class.SkRefCntBase* nonnull %69) #7
  br label %74

74:                                               ; preds = %61, %64, %68
  %75 = getelementptr inbounds %class.sk_sp.34, %class.sk_sp.34* %6, i64 0, i32 0
  %76 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 3, i32 0
  %77 = load %class.SkColorFilter*, %class.SkColorFilter** %76, align 8
  %78 = icmp eq %class.SkColorFilter* %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %77, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = atomicrmw add i32* %80, i32 1 monotonic
  br label %82

82:                                               ; preds = %74, %79
  store %class.SkColorFilter* %77, %class.SkColorFilter** %75, align 8
  call void @_ZN7SkPaint14setColorFilterE5sk_spI13SkColorFilterE(%class.SkPaint* %0, %class.sk_sp.34* nonnull %6) #7
  %83 = load %class.SkColorFilter*, %class.SkColorFilter** %75, align 8
  %84 = icmp eq %class.SkColorFilter* %83, null
  br i1 %84, label %95, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %83, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = atomicrmw add i32* %86, i32 -1 acq_rel
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %89, label %95

89:                                               ; preds = %85
  %90 = bitcast %class.SkColorFilter* %83 to %class.SkRefCntBase*
  %91 = bitcast %class.SkColorFilter* %83 to void (%class.SkRefCntBase*)***
  %92 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %91, align 8
  %93 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %92, i64 2
  %94 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %93, align 8
  call void %94(%class.SkRefCntBase* nonnull %90) #7
  br label %95

95:                                               ; preds = %82, %85, %89
  %96 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 5, i32 0
  %97 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %96, align 8
  %98 = icmp eq %"class.cc::PaintFilter"* %97, null
  br i1 %98, label %120, label %99

99:                                               ; preds = %95
  %100 = getelementptr inbounds %class.sk_sp.37, %class.sk_sp.37* %7, i64 0, i32 0
  %101 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %97, i64 0, i32 1, i32 0
  %102 = load %class.SkImageFilter*, %class.SkImageFilter** %101, align 8
  %103 = icmp eq %class.SkImageFilter* %102, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %102, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = atomicrmw add i32* %105, i32 1 monotonic
  br label %107

107:                                              ; preds = %99, %104
  store %class.SkImageFilter* %102, %class.SkImageFilter** %100, align 8
  call void @_ZN7SkPaint14setImageFilterE5sk_spI13SkImageFilterE(%class.SkPaint* %0, %class.sk_sp.37* nonnull %7) #7
  %108 = load %class.SkImageFilter*, %class.SkImageFilter** %100, align 8
  %109 = icmp eq %class.SkImageFilter* %108, null
  br i1 %109, label %120, label %110

110:                                              ; preds = %107
  %111 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %108, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = atomicrmw add i32* %111, i32 -1 acq_rel
  %113 = icmp eq i32 %112, 1
  br i1 %113, label %114, label %120

114:                                              ; preds = %110
  %115 = bitcast %class.SkImageFilter* %108 to %class.SkRefCntBase*
  %116 = bitcast %class.SkImageFilter* %108 to void (%class.SkRefCntBase*)***
  %117 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %116, align 8
  %118 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %117, i64 2
  %119 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %118, align 8
  call void %119(%class.SkRefCntBase* nonnull %115) #7
  br label %120

120:                                              ; preds = %95, %114, %110, %107
  %121 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 6
  %122 = load i32, i32* %121, align 8
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %0, i32 %122) #7
  %123 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 7
  %124 = load float, float* %123, align 4
  call void @_ZN7SkPaint14setStrokeWidthEf(%class.SkPaint* %0, float %124) #7
  %125 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 8
  %126 = load float, float* %125, align 8
  call void @_ZN7SkPaint14setStrokeMiterEf(%class.SkPaint* %0, float %126) #7
  %127 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 9
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %0, i64 0, i32 8, i32 0, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = shl i32 %128, 10
  %132 = and i32 %131, 261120
  %133 = and i32 %130, -261124
  %134 = or i32 %133, %132
  %135 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 10
  %136 = bitcast %union.anon.43* %135 to i16*
  %137 = load i16, i16* %136, align 8
  %138 = and i16 %137, 1
  %139 = zext i16 %138 to i32
  %140 = or i32 %134, %139
  %141 = and i16 %137, 2
  %142 = zext i16 %141 to i32
  %143 = or i32 %140, %142
  store i32 %143, i32* %129, align 8
  %144 = lshr i16 %137, 2
  %145 = and i16 %144, 3
  %146 = zext i16 %145 to i32
  call void @_ZN7SkPaint12setStrokeCapENS_3CapE(%class.SkPaint* %0, i32 %146) #7
  %147 = load i16, i16* %136, align 8
  %148 = lshr i16 %147, 4
  %149 = trunc i16 %148 to i8
  %150 = and i8 %149, 3
  call void @_ZN7SkPaint13setStrokeJoinENS_4JoinE(%class.SkPaint* %0, i8 zeroext %150) #7
  %151 = load i16, i16* %136, align 8
  %152 = lshr i16 %151, 6
  %153 = trunc i16 %152 to i8
  %154 = and i8 %153, 3
  call void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint* %0, i8 zeroext %154) #7
  %155 = load i16, i16* %136, align 8
  %156 = load i32, i32* %129, align 8
  %157 = and i16 %155, 768
  %158 = zext i16 %157 to i32
  %159 = and i32 %156, -769
  %160 = or i32 %159, %158
  store i32 %160, i32* %129, align 8
  ret void
}

declare zeroext i1 @_ZNK7SkPaint11getFillPathERK6SkPathPS0_PK6SkRectf(%class.SkPaint*, %class.SkPath* dereferenceable(16), %class.SkPath*, %struct.SkRect*, float) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlags15IsSimpleOpacityEv(%"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 16777215
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %34

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %10, label %34

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %12 = load %class.SkDrawLooper*, %class.SkDrawLooper** %11, align 8
  %13 = icmp eq %class.SkDrawLooper* %12, null
  br i1 %13, label %14, label %34

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 0, i32 0
  %16 = load %class.SkPathEffect*, %class.SkPathEffect** %15, align 8
  %17 = icmp eq %class.SkPathEffect* %16, null
  br i1 %17, label %18, label %34

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %20 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %19, align 8
  %21 = icmp eq %"class.cc::PaintShader"* %20, null
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2, i32 0
  %24 = load %class.SkMaskFilter*, %class.SkMaskFilter** %23, align 8
  %25 = icmp eq %class.SkMaskFilter* %24, null
  br i1 %25, label %26, label %34

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %28 = load %class.SkColorFilter*, %class.SkColorFilter** %27, align 8
  %29 = icmp eq %class.SkColorFilter* %28, null
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %32 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %31, align 8
  %33 = icmp eq %"class.cc::PaintFilter"* %32, null
  br label %34

34:                                               ; preds = %26, %22, %18, %14, %10, %30, %6, %1
  %35 = phi i1 [ false, %1 ], [ false, %6 ], [ false, %10 ], [ false, %14 ], [ false, %18 ], [ false, %22 ], [ false, %26 ], [ %33, %30 ]
  ret i1 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlags20SupportsFoldingAlphaEv(%"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 3
  br i1 %4, label %5, label %17

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %7 = load %class.SkColorFilter*, %class.SkColorFilter** %6, align 8
  %8 = icmp eq %class.SkColorFilter* %7, null
  br i1 %8, label %9, label %17

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %11 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %10, align 8
  %12 = icmp eq %"class.cc::PaintFilter"* %11, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %15 = load %class.SkDrawLooper*, %class.SkDrawLooper** %14, align 8
  %16 = icmp eq %class.SkDrawLooper* %15, null
  br label %17

17:                                               ; preds = %9, %5, %13, %1
  %18 = phi i1 [ false, %1 ], [ false, %5 ], [ false, %9 ], [ %16, %13 ]
  ret i1 %18
}

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #3

declare void @_ZN7SkPaint13setPathEffectE5sk_spI12SkPathEffectE(%class.SkPaint*, %class.sk_sp*) local_unnamed_addr #3

declare void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint*, %class.sk_sp.49*) local_unnamed_addr #3

declare void @_ZNK2cc11PaintShader11GetSkShaderE15SkFilterQuality(%class.sk_sp.49* sret, %"class.cc::PaintShader"*, i32) local_unnamed_addr #3

declare void @_ZN7SkPaint13setMaskFilterE5sk_spI12SkMaskFilterE(%class.SkPaint*, %class.sk_sp.33*) local_unnamed_addr #3

declare void @_ZN7SkPaint14setColorFilterE5sk_spI13SkColorFilterE(%class.SkPaint*, %class.sk_sp.34*) local_unnamed_addr #3

declare void @_ZN7SkPaint14setImageFilterE5sk_spI13SkImageFilterE(%class.SkPaint*, %class.sk_sp.37*) local_unnamed_addr #3

declare void @_ZN7SkPaint8setColorEj(%class.SkPaint*, i32) local_unnamed_addr #3

declare void @_ZN7SkPaint14setStrokeWidthEf(%class.SkPaint*, float) local_unnamed_addr #3

declare void @_ZN7SkPaint14setStrokeMiterEf(%class.SkPaint*, float) local_unnamed_addr #3

declare void @_ZN7SkPaint12setStrokeCapENS_3CapE(%class.SkPaint*, i32) local_unnamed_addr #3

declare void @_ZN7SkPaint13setStrokeJoinENS_4JoinE(%class.SkPaint*, i8 zeroext) local_unnamed_addr #3

declare void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint*, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN2cc10PaintFlags32FilterQualityToSkSamplingOptionsE15SkFilterQuality(%struct.SkSamplingOptions* noalias nocapture sret, i32) local_unnamed_addr #6 align 2 {
  switch i32 %1, label %25 [
    i32 3, label %3
    i32 2, label %9
    i32 1, label %15
    i32 0, label %21
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 0
  store i8 1, i8* %4, align 4
  %5 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 1
  %6 = bitcast %struct.SkCubicResampler* %5 to i64*
  store i64 4515609228859845291, i64* %6, align 4
  %7 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 2
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 3
  store i32 0, i32* %8, align 4
  br label %26

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 0
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 2
  store i32 1, i32* %13, align 4
  %14 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 3
  store i32 2, i32* %14, align 4
  br label %26

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 0
  store i8 0, i8* %16, align 4
  %17 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %17, align 4
  %18 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 2
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 3
  store i32 0, i32* %20, align 4
  br label %26

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 0
  store i8 0, i8* %22, align 4
  %23 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %0, i64 0, i32 1, i32 0
  %24 = bitcast float* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 16, i1 false)
  br label %26

25:                                               ; preds = %2
  unreachable

26:                                               ; preds = %21, %15, %9, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlags7IsValidEv(%"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 29
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlagseqERKS0_(%"class.cc::PaintFlags"* nocapture readonly, %"class.cc::PaintFlags"* nocapture readonly dereferenceable(72)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 6
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %97

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 7
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 7
  %12 = load float, float* %11, align 4
  %13 = fcmp uno float %10, 0.000000e+00
  %14 = fcmp uno float %12, 0.000000e+00
  %15 = and i1 %13, %14
  %16 = fcmp oeq float %10, %12
  %17 = or i1 %16, %15
  br i1 %17, label %18, label %97

18:                                               ; preds = %8
  %19 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 8
  %20 = load float, float* %19, align 8
  %21 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 8
  %22 = load float, float* %21, align 8
  %23 = fcmp uno float %20, 0.000000e+00
  %24 = fcmp uno float %22, 0.000000e+00
  %25 = and i1 %23, %24
  %26 = fcmp oeq float %20, %22
  %27 = or i1 %26, %25
  br i1 %27, label %28, label %97

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 9
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 9
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %97

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 10
  %36 = bitcast %union.anon.43* %35 to i16*
  %37 = load i16, i16* %36, align 8
  %38 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 10
  %39 = bitcast %union.anon.43* %38 to i16*
  %40 = load i16, i16* %39, align 8
  %41 = xor i16 %40, %37
  %42 = and i16 %41, 1020
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %44, label %97

44:                                               ; preds = %34
  %45 = bitcast %"class.cc::PaintFlags"* %0 to %class.SkFlattenable**
  %46 = load %class.SkFlattenable*, %class.SkFlattenable** %45, align 8
  %47 = bitcast %"class.cc::PaintFlags"* %1 to %class.SkFlattenable**
  %48 = load %class.SkFlattenable*, %class.SkFlattenable** %47, align 8
  %49 = tail call zeroext i1 @_ZN2cc7PaintOp22AreSkFlattenablesEqualEP13SkFlattenableS2_(%class.SkFlattenable* %46, %class.SkFlattenable* %48) #7
  br i1 %49, label %50, label %97

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2, i32 0
  %52 = bitcast %class.SkMaskFilter** %51 to %class.SkFlattenable**
  %53 = load %class.SkFlattenable*, %class.SkFlattenable** %52, align 8
  %54 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 2, i32 0
  %55 = bitcast %class.SkMaskFilter** %54 to %class.SkFlattenable**
  %56 = load %class.SkFlattenable*, %class.SkFlattenable** %55, align 8
  %57 = tail call zeroext i1 @_ZN2cc7PaintOp22AreSkFlattenablesEqualEP13SkFlattenableS2_(%class.SkFlattenable* %53, %class.SkFlattenable* %56) #7
  br i1 %57, label %58, label %97

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %60 = bitcast %class.SkColorFilter** %59 to %class.SkFlattenable**
  %61 = load %class.SkFlattenable*, %class.SkFlattenable** %60, align 8
  %62 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 3, i32 0
  %63 = bitcast %class.SkColorFilter** %62 to %class.SkFlattenable**
  %64 = load %class.SkFlattenable*, %class.SkFlattenable** %63, align 8
  %65 = tail call zeroext i1 @_ZN2cc7PaintOp22AreSkFlattenablesEqualEP13SkFlattenableS2_(%class.SkFlattenable* %61, %class.SkFlattenable* %64) #7
  br i1 %65, label %66, label %97

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %68 = bitcast %class.SkDrawLooper** %67 to %class.SkFlattenable**
  %69 = load %class.SkFlattenable*, %class.SkFlattenable** %68, align 8
  %70 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 4, i32 0
  %71 = bitcast %class.SkDrawLooper** %70 to %class.SkFlattenable**
  %72 = load %class.SkFlattenable*, %class.SkFlattenable** %71, align 8
  %73 = tail call zeroext i1 @_ZN2cc7PaintOp22AreSkFlattenablesEqualEP13SkFlattenableS2_(%class.SkFlattenable* %69, %class.SkFlattenable* %72) #7
  br i1 %73, label %74, label %97

74:                                               ; preds = %66
  %75 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %76 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %75, align 8
  %77 = icmp ne %"class.cc::PaintFilter"* %76, null
  %78 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 5, i32 0
  %79 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %78, align 8
  %80 = icmp ne %"class.cc::PaintFilter"* %79, null
  %81 = xor i1 %77, %80
  br i1 %81, label %97, label %82

82:                                               ; preds = %74
  br i1 %77, label %83, label %85

83:                                               ; preds = %82
  %84 = tail call zeroext i1 @_ZNK2cc11PaintFiltereqERKS0_(%"class.cc::PaintFilter"* nonnull %76, %"class.cc::PaintFilter"* dereferenceable(56) %79) #7
  br i1 %84, label %85, label %97

85:                                               ; preds = %83, %82
  %86 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %87 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %86, align 8
  %88 = icmp eq %"class.cc::PaintShader"* %87, null
  %89 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 1, i32 0
  %90 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %89, align 8
  %91 = icmp eq %"class.cc::PaintShader"* %90, null
  %92 = xor i1 %88, %91
  br i1 %92, label %97, label %93

93:                                               ; preds = %85
  br i1 %88, label %96, label %94

94:                                               ; preds = %93
  %95 = tail call zeroext i1 @_ZNK2cc11PaintShadereqERKS0_(%"class.cc::PaintShader"* nonnull %87, %"class.cc::PaintShader"* dereferenceable(336) %90) #7
  br i1 %95, label %96, label %97

96:                                               ; preds = %94, %93
  br label %97

97:                                               ; preds = %83, %94, %85, %74, %66, %58, %50, %44, %34, %28, %18, %8, %2, %96
  %98 = phi i1 [ true, %96 ], [ false, %2 ], [ false, %8 ], [ false, %18 ], [ false, %28 ], [ false, %34 ], [ false, %44 ], [ false, %50 ], [ false, %58 ], [ false, %66 ], [ false, %74 ], [ false, %83 ], [ false, %85 ], [ false, %94 ]
  ret i1 %98
}

declare zeroext i1 @_ZN2cc7PaintOp22AreSkFlattenablesEqualEP13SkFlattenableS2_(%class.SkFlattenable*, %class.SkFlattenable*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc10PaintFlags20HasDiscardableImagesEv(%"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %2, align 8
  %4 = icmp eq %"class.cc::PaintShader"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call zeroext i1 @_ZNK2cc11PaintShader22has_discardable_imagesEv(%"class.cc::PaintShader"* nonnull %3) #7
  br i1 %6, label %15, label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %9 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %8, align 8
  %10 = icmp eq %"class.cc::PaintFilter"* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.cc::PaintFilter", %"class.cc::PaintFilter"* %9, i64 0, i32 4
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp ne i8 %13, 0
  br label %15

15:                                               ; preds = %7, %11, %5
  %16 = phi i1 [ true, %5 ], [ false, %7 ], [ %14, %11 ]
  ret i1 %16
}

declare zeroext i1 @_ZNK2cc11PaintShader22has_discardable_imagesEv(%"class.cc::PaintShader"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2cc10PaintFlags17GetSerializedSizeEv(%"class.cc::PaintFlags"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.cc::PaintFlags"* %0 to %class.SkFlattenable**
  %3 = load %class.SkFlattenable*, %class.SkFlattenable** %2, align 8
  %4 = tail call i64 @_ZN2cc13PaintOpWriter18GetFlattenableSizeEPK13SkFlattenable(%class.SkFlattenable* %3) #7
  %5 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 2, i32 0
  %6 = bitcast %class.SkMaskFilter** %5 to %class.SkFlattenable**
  %7 = load %class.SkFlattenable*, %class.SkFlattenable** %6, align 8
  %8 = tail call i64 @_ZN2cc13PaintOpWriter18GetFlattenableSizeEPK13SkFlattenable(%class.SkFlattenable* %7) #7
  %9 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 3, i32 0
  %10 = bitcast %class.SkColorFilter** %9 to %class.SkFlattenable**
  %11 = load %class.SkFlattenable*, %class.SkFlattenable** %10, align 8
  %12 = tail call i64 @_ZN2cc13PaintOpWriter18GetFlattenableSizeEPK13SkFlattenable(%class.SkFlattenable* %11) #7
  %13 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 4, i32 0
  %14 = bitcast %class.SkDrawLooper** %13 to %class.SkFlattenable**
  %15 = load %class.SkFlattenable*, %class.SkFlattenable** %14, align 8
  %16 = tail call i64 @_ZN2cc13PaintOpWriter18GetFlattenableSizeEPK13SkFlattenable(%class.SkFlattenable* %15) #7
  %17 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 5, i32 0
  %18 = load %"class.cc::PaintFilter"*, %"class.cc::PaintFilter"** %17, align 8
  %19 = tail call i64 @_ZN2cc11PaintFilter13GetFilterSizeEPKS0_(%"class.cc::PaintFilter"* %18) #7
  %20 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %0, i64 0, i32 1, i32 0
  %21 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %20, align 8
  %22 = tail call i64 @_ZN2cc11PaintShader17GetSerializedSizeEPKS0_(%"class.cc::PaintShader"* %21) #7
  %23 = add i64 %4, 32
  %24 = add i64 %23, %8
  %25 = add i64 %24, %12
  %26 = add i64 %25, %16
  %27 = add i64 %26, %19
  %28 = add i64 %27, %22
  ret i64 %28
}

declare i64 @_ZN2cc13PaintOpWriter18GetFlattenableSizeEPK13SkFlattenable(%class.SkFlattenable*) local_unnamed_addr #3

declare i64 @_ZN2cc11PaintFilter13GetFilterSizeEPKS0_(%"class.cc::PaintFilter"*) local_unnamed_addr #3

declare i64 @_ZN2cc11PaintShader17GetSerializedSizeEPKS0_(%"class.cc::PaintShader"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK13SkColorFilter16isAlphaUnchangedEv(%class.SkColorFilter*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc11PaintFiltereqERKS0_(%"class.cc::PaintFilter"*, %"class.cc::PaintFilter"* dereferenceable(56)) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc11PaintShadereqERKS0_(%"class.cc::PaintShader"*, %"class.cc::PaintShader"* dereferenceable(336)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
