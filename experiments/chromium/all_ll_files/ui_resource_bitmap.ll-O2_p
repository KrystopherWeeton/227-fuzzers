; ModuleID = '../../cc/resources/ui_resource_bitmap.cc'
source_filename = "../../cc/resources/ui_resource_bitmap.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::UIResourceBitmap" = type { %class.sk_sp, i32, %struct.SkImageInfo }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type <{ %class.SkRefCnt.base, i32, i32, [4 x i8], i8*, i64, %"struct.std::__1::atomic.1", [4 x i8], %"class.SkIDChangeListener::List", %"struct.std::__1::atomic.11", i8, [6 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.11", [3 x i8] }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.15, i32, i32 }
%class.sk_sp.15 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.30 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.30 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.gfx::Size" = type { i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.16, [384 x i64], %class.sk_sp.17, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.19" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.16 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.17 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkPaint = type <{ %class.sk_sp.25, %class.sk_sp.26, %class.sk_sp.27, %class.sk_sp.28, %class.sk_sp.29, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.25 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.26 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.27 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.28 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.29 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.sk_sp.31 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }

@_ZN2cc16UIResourceBitmapC1ERK8SkBitmap = hidden unnamed_addr alias void (%"class.cc::UIResourceBitmap"*, %class.SkBitmap*), void (%"class.cc::UIResourceBitmap"*, %class.SkBitmap*)* @_ZN2cc16UIResourceBitmapC2ERK8SkBitmap
@_ZN2cc16UIResourceBitmapC1ERKN3gfx4SizeEb = hidden unnamed_addr alias void (%"class.cc::UIResourceBitmap"*, %"class.gfx::Size"*, i1), void (%"class.cc::UIResourceBitmap"*, %"class.gfx::Size"*, i1)* @_ZN2cc16UIResourceBitmapC2ERKN3gfx4SizeEb
@_ZN2cc16UIResourceBitmapC1E5sk_spI10SkPixelRefERKN3gfx4SizeE = hidden unnamed_addr alias void (%"class.cc::UIResourceBitmap"*, %class.sk_sp*, %"class.gfx::Size"*), void (%"class.cc::UIResourceBitmap"*, %class.sk_sp*, %"class.gfx::Size"*)* @_ZN2cc16UIResourceBitmapC2E5sk_spI10SkPixelRefERKN3gfx4SizeE
@_ZN2cc16UIResourceBitmapC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"*), void (%"class.cc::UIResourceBitmap"*, %"class.cc::UIResourceBitmap"*)* @_ZN2cc16UIResourceBitmapC2ERKS0_
@_ZN2cc16UIResourceBitmapD1Ev = hidden unnamed_addr alias void (%"class.cc::UIResourceBitmap"*), void (%"class.cc::UIResourceBitmap"*)* @_ZN2cc16UIResourceBitmapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmap6CreateE5sk_spI10SkPixelRefERK11SkImageInfoNS0_16UIResourceFormatE(%"class.cc::UIResourceBitmap"*, %class.sk_sp* nocapture, %struct.SkImageInfo* readonly dereferenceable(24), i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 1
  store i32 %3, i32* %5, align 8
  %6 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2
  %7 = icmp eq %struct.SkImageInfo* %6, %2
  br i1 %7, label %25, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 0, i32 0
  %10 = load %class.SkColorSpace*, %class.SkColorSpace** %9, align 8
  %11 = icmp eq %class.SkColorSpace* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 1 monotonic
  br label %15

15:                                               ; preds = %12, %8
  %16 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  %17 = load %class.SkColorSpace*, %class.SkColorSpace** %16, align 8
  store %class.SkColorSpace* %10, %class.SkColorSpace** %16, align 8
  %18 = icmp eq %class.SkColorSpace* %17, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 -1 acq_rel
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = bitcast %class.SkColorSpace* %17 to i8*
  tail call void @_ZdlPv(i8* %24) #8
  br label %25

25:                                               ; preds = %4, %15, %19, %23
  %26 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 1
  %27 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 1
  %28 = bitcast i32* %27 to i64*
  %29 = bitcast i32* %26 to i64*
  %30 = load i64, i64* %28, align 8
  store i64 %30, i64* %29, align 8
  %31 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 1
  %33 = bitcast %struct.SkISize* %32 to i64*
  %34 = bitcast %struct.SkISize* %31 to i64*
  %35 = load i64, i64* %33, align 8
  store i64 %35, i64* %34, align 8
  %36 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %37 = bitcast %class.sk_sp* %1 to i64*
  %38 = load i64, i64* %37, align 8
  store %class.SkPixelRef* null, %class.SkPixelRef** %36, align 8
  %39 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  %40 = load %class.SkPixelRef*, %class.SkPixelRef** %39, align 8
  %41 = bitcast %"class.cc::UIResourceBitmap"* %0 to i64*
  store i64 %38, i64* %41, align 8
  %42 = icmp eq %class.SkPixelRef* %40, null
  br i1 %42, label %53, label %43

43:                                               ; preds = %25
  %44 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %40, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw add i32* %44, i32 -1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %43
  %48 = bitcast %class.SkPixelRef* %40 to %class.SkRefCntBase*
  %49 = bitcast %class.SkPixelRef* %40 to void (%class.SkRefCntBase*)***
  %50 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %49, align 8
  %51 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %50, i64 2
  %52 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %51, align 8
  tail call void %52(%class.SkRefCntBase* nonnull %48) #9
  br label %53

53:                                               ; preds = %25, %43, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmap12DrawToCanvasEP8SkCanvasP7SkPaint(%"class.cc::UIResourceBitmap"*, %class.SkCanvas*, %class.SkPaint*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkBitmap, align 8
  %5 = alloca %class.sk_sp, align 8
  %6 = alloca %class.sk_sp.31, align 8
  %7 = alloca %struct.SkSamplingOptions, align 4
  %8 = bitcast %class.SkBitmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %4) #9
  %9 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  %11 = load %class.SkPixelRef*, %class.SkPixelRef** %10, align 8
  %12 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %11, i64 0, i32 5
  %13 = load i64, i64* %12, align 8
  %14 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* nonnull %4, %struct.SkImageInfo* dereferenceable(24) %9, i64 %13) #9
  %15 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  %16 = load %class.SkPixelRef*, %class.SkPixelRef** %10, align 8
  %17 = icmp eq %class.SkPixelRef* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %16, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 1 monotonic
  br label %21

21:                                               ; preds = %3, %18
  store %class.SkPixelRef* %16, %class.SkPixelRef** %15, align 8
  call void @_ZN8SkBitmap11setPixelRefE5sk_spI10SkPixelRefEii(%class.SkBitmap* nonnull %4, %class.sk_sp* nonnull %5, i32 0, i32 0) #9
  %22 = load %class.SkPixelRef*, %class.SkPixelRef** %15, align 8
  %23 = icmp eq %class.SkPixelRef* %22, null
  br i1 %23, label %34, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %22, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw add i32* %25, i32 -1 acq_rel
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = bitcast %class.SkPixelRef* %22 to %class.SkRefCntBase*
  %30 = bitcast %class.SkPixelRef* %22 to void (%class.SkRefCntBase*)***
  %31 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %30, align 8
  %32 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %31, i64 2
  %33 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %32, align 8
  call void %33(%class.SkRefCntBase* nonnull %29) #9
  br label %34

34:                                               ; preds = %21, %24, %28
  %35 = bitcast %class.sk_sp.31* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  call void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.31* nonnull sret %6, %class.SkBitmap* nonnull %4) #9
  %36 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %36) #9
  %37 = getelementptr inbounds %class.sk_sp.31, %class.sk_sp.31* %6, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %36, i8 0, i64 20, i1 false)
  %38 = load %class.SkImage*, %class.SkImage** %37, align 8
  call void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* %1, %class.SkImage* %38, float 0.000000e+00, float 0.000000e+00, %struct.SkSamplingOptions* nonnull dereferenceable(20) %7, %class.SkPaint* %2) #9
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %36) #9
  %39 = load %class.SkImage*, %class.SkImage** %37, align 8
  %40 = icmp eq %class.SkImage* %39, null
  br i1 %40, label %51, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %class.SkImage, %class.SkImage* %39, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 -1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = bitcast %class.SkImage* %39 to %class.SkRefCntBase*
  %47 = bitcast %class.SkImage* %39 to void (%class.SkRefCntBase*)***
  %48 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %47, align 8
  %49 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %48, i64 2
  %50 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %49, align 8
  call void %50(%class.SkRefCntBase* nonnull %46) #9
  br label %51

51:                                               ; preds = %34, %41, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  call void @_ZN8SkCanvas5flushEv(%class.SkCanvas* %1) #9
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #2

declare void @_ZN8SkBitmap11setPixelRefE5sk_spI10SkPixelRefEii(%class.SkBitmap*, %class.sk_sp*, i32, i32) local_unnamed_addr #2

declare void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.31* sret, %class.SkBitmap*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN8SkCanvas5flushEv(%class.SkCanvas*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2cc16UIResourceBitmap11SizeInBytesEv(%"class.cc::UIResourceBitmap"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  %3 = load %class.SkPixelRef*, %class.SkPixelRef** %2, align 8
  %4 = icmp eq %class.SkPixelRef* %3, null
  br i1 %4, label %20, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %3, i64 0, i32 5
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  %11 = icmp ne i64 %7, 0
  %12 = and i1 %11, %10
  br i1 %12, label %17, label %13, !prof !2

13:                                               ; preds = %5
  %14 = sext i32 %9 to i64
  %15 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %7, i64 %14) #9
  %16 = extractvalue { i64, i1 } %15, 1
  br i1 %16, label %17, label %18, !prof !3

17:                                               ; preds = %5, %13
  tail call void @llvm.trap() #9
  unreachable

18:                                               ; preds = %13
  %19 = extractvalue { i64, i1 } %15, 0
  br label %20

20:                                               ; preds = %1, %18
  %21 = phi i64 [ %19, %18 ], [ 0, %1 ]
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmapC2ERK8SkBitmap(%"class.cc::UIResourceBitmap"*, %class.SkBitmap* readonly dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  store %class.SkPixelRef* null, %class.SkPixelRef** %3, align 8
  %4 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2
  %5 = bitcast %struct.SkImageInfo* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #9
  %6 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 0, i32 0
  %7 = load %class.SkPixelRef*, %class.SkPixelRef** %6, align 8
  %8 = icmp eq %class.SkPixelRef* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %7, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic, !noalias !4
  br label %12

12:                                               ; preds = %2, %9
  %13 = ptrtoint %class.SkPixelRef* %7 to i64
  %14 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 2
  %15 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 1
  %18 = zext i1 %17 to i32
  %19 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 1
  store i32 %18, i32* %19, align 8
  %20 = icmp eq %struct.SkImageInfo* %4, %14
  br i1 %20, label %38, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %14, i64 0, i32 0, i32 0, i32 0
  %23 = load %class.SkColorSpace*, %class.SkColorSpace** %22, align 8
  %24 = icmp eq %class.SkColorSpace* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw add i32* %26, i32 1 monotonic
  br label %28

28:                                               ; preds = %25, %21
  %29 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 0, i32 0
  %30 = load %class.SkColorSpace*, %class.SkColorSpace** %29, align 8
  store %class.SkColorSpace* %23, %class.SkColorSpace** %29, align 8
  %31 = icmp eq %class.SkColorSpace* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 -1 acq_rel
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = bitcast %class.SkColorSpace* %30 to i8*
  tail call void @_ZdlPv(i8* %37) #8
  br label %38

38:                                               ; preds = %36, %32, %28, %12
  %39 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 1
  %40 = bitcast i32* %15 to i64*
  %41 = bitcast i32* %39 to i64*
  %42 = load i64, i64* %40, align 8
  store i64 %42, i64* %41, align 8
  %43 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 2, i32 1
  %45 = bitcast %struct.SkISize* %44 to i64*
  %46 = bitcast %struct.SkISize* %43 to i64*
  %47 = load i64, i64* %45, align 8
  store i64 %47, i64* %46, align 8
  %48 = load %class.SkPixelRef*, %class.SkPixelRef** %3, align 8
  %49 = bitcast %"class.cc::UIResourceBitmap"* %0 to i64*
  store i64 %13, i64* %49, align 8
  %50 = icmp eq %class.SkPixelRef* %48, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %38
  %52 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %48, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = atomicrmw add i32* %52, i32 -1 acq_rel
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %61

55:                                               ; preds = %51
  %56 = bitcast %class.SkPixelRef* %48 to %class.SkRefCntBase*
  %57 = bitcast %class.SkPixelRef* %48 to void (%class.SkRefCntBase*)***
  %58 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %57, align 8
  %59 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %58, i64 2
  %60 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %59, align 8
  tail call void %60(%class.SkRefCntBase* nonnull %56) #9
  br label %61

61:                                               ; preds = %38, %51, %55
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmapC2ERKN3gfx4SizeEb(%"class.cc::UIResourceBitmap"*, %"class.gfx::Size"* nocapture readonly dereferenceable(8), i1 zeroext) unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkImageInfo, align 8
  %5 = alloca %class.sk_sp, align 8
  %6 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  store %class.SkPixelRef* null, %class.SkPixelRef** %6, align 8
  %7 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2
  %8 = bitcast %struct.SkImageInfo* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = bitcast %struct.SkImageInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = shl nuw i64 %16, 32
  %18 = zext i32 %13 to i64
  %19 = or i64 %17, %18
  %20 = select i1 %2, i64 4294967302, i64 8589934598
  %21 = bitcast %struct.SkImageInfo* %4 to i64*
  store i64 0, i64* %21, align 8, !alias.scope !7
  %22 = bitcast i32* %11 to i64*
  store i64 %20, i64* %22, align 8, !alias.scope !7
  %23 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 1
  %24 = bitcast %struct.SkISize* %23 to i64*
  store i64 %19, i64* %24, align 8, !alias.scope !7
  %25 = bitcast %class.sk_sp* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #9
  %26 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %5, i64 0, i32 0
  store %class.SkPixelRef* inttoptr (i64 -6148914691236517206 to %class.SkPixelRef*), %class.SkPixelRef** %26, align 8
  %27 = sext i32 %13 to i64
  %28 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0
  %29 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %28) #9
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %30, %27
  %32 = icmp ult i64 %31, 2147483648
  %33 = select i1 %32, i64 %31, i64 0
  call void @_ZN16SkMallocPixelRef12MakeAllocateERK11SkImageInfom(%class.sk_sp* nonnull sret %5, %struct.SkImageInfo* nonnull dereferenceable(24) %4, i64 %33) #9
  %34 = load %class.SkPixelRef*, %class.SkPixelRef** %26, align 8
  call void @_ZN10SkPixelRef12setImmutableEv(%class.SkPixelRef* %34) #9
  %35 = bitcast %class.sk_sp* %5 to i64*
  %36 = load i64, i64* %35, align 8
  store %class.SkPixelRef* null, %class.SkPixelRef** %26, align 8
  %37 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 1
  store i32 0, i32* %37, align 8
  %38 = icmp eq %struct.SkImageInfo* %7, %4
  br i1 %38, label %55, label %39

39:                                               ; preds = %3
  %40 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %41 = icmp eq %class.SkColorSpace* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw add i32* %43, i32 1 monotonic
  br label %45

45:                                               ; preds = %42, %39
  %46 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %47 = load %class.SkColorSpace*, %class.SkColorSpace** %46, align 8
  store %class.SkColorSpace* %40, %class.SkColorSpace** %46, align 8
  %48 = icmp eq %class.SkColorSpace* %47, null
  br i1 %48, label %55, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = atomicrmw add i32* %50, i32 -1 acq_rel
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = bitcast %class.SkColorSpace* %47 to i8*
  call void @_ZdlPv(i8* %54) #8
  br label %55

55:                                               ; preds = %53, %49, %45, %3
  %56 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 1
  %57 = bitcast i32* %11 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  %59 = bitcast i32* %56 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %59, align 8
  %60 = load %class.SkPixelRef*, %class.SkPixelRef** %6, align 8
  %61 = bitcast %"class.cc::UIResourceBitmap"* %0 to i64*
  store i64 %36, i64* %61, align 8
  %62 = icmp eq %class.SkPixelRef* %60, null
  br i1 %62, label %73, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %60, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = atomicrmw add i32* %64, i32 -1 acq_rel
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %73

67:                                               ; preds = %63
  %68 = bitcast %class.SkPixelRef* %60 to %class.SkRefCntBase*
  %69 = bitcast %class.SkPixelRef* %60 to void (%class.SkRefCntBase*)***
  %70 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %69, align 8
  %71 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %70, i64 2
  %72 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %71, align 8
  call void %72(%class.SkRefCntBase* nonnull %68) #9
  br label %73

73:                                               ; preds = %67, %63, %55
  %74 = load %class.SkPixelRef*, %class.SkPixelRef** %26, align 8
  %75 = icmp eq %class.SkPixelRef* %74, null
  br i1 %75, label %86, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %74, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %86

80:                                               ; preds = %76
  %81 = bitcast %class.SkPixelRef* %74 to %class.SkRefCntBase*
  %82 = bitcast %class.SkPixelRef* %74 to void (%class.SkRefCntBase*)***
  %83 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %82, align 8
  %84 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %83, i64 2
  %85 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %84, align 8
  call void %85(%class.SkRefCntBase* nonnull %81) #9
  br label %86

86:                                               ; preds = %73, %76, %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #9
  %87 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %88 = icmp eq %class.SkColorSpace* %87, null
  br i1 %88, label %95, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = atomicrmw add i32* %90, i32 -1 acq_rel
  %92 = icmp eq i32 %91, 1
  br i1 %92, label %93, label %95

93:                                               ; preds = %89
  %94 = bitcast %class.SkColorSpace* %87 to i8*
  call void @_ZdlPv(i8* %94) #8
  br label %95

95:                                               ; preds = %86, %89, %93
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  ret void
}

declare void @_ZN16SkMallocPixelRef12MakeAllocateERK11SkImageInfom(%class.sk_sp* sret, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #2

declare void @_ZN10SkPixelRef12setImmutableEv(%class.SkPixelRef*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmapC2E5sk_spI10SkPixelRefERKN3gfx4SizeE(%"class.cc::UIResourceBitmap"*, %class.sk_sp* nocapture, %"class.gfx::Size"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkImageInfo, align 16
  %5 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  store %class.SkPixelRef* null, %class.SkPixelRef** %5, align 8
  %6 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2
  %7 = bitcast %struct.SkImageInfo* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #9
  %8 = bitcast %struct.SkImageInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  %9 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = shl nuw i64 %15, 32
  %17 = zext i32 %12 to i64
  %18 = or i64 %16, %17
  %19 = bitcast %struct.SkImageInfo* %4 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967296>, <2 x i64>* %19, align 16, !alias.scope !12
  %20 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %4, i64 0, i32 1
  %21 = bitcast %struct.SkISize* %20 to i64*
  store i64 %18, i64* %21, align 16, !alias.scope !12
  %22 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %23 = bitcast %class.sk_sp* %1 to i64*
  %24 = load i64, i64* %23, align 8
  store %class.SkPixelRef* null, %class.SkPixelRef** %22, align 8
  %25 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 1
  store i32 2, i32* %25, align 8
  %26 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  %27 = load %class.SkColorSpace*, %class.SkColorSpace** %26, align 8
  %28 = bitcast %class.SkColorSpace* %27 to i8*
  %29 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %29, align 8
  %30 = icmp eq %class.SkColorSpace* %27, null
  br i1 %30, label %36, label %31

31:                                               ; preds = %3
  %32 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw add i32* %32, i32 -1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @_ZdlPv(i8* %28) #8
  br label %36

36:                                               ; preds = %35, %31, %3
  %37 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 1
  %38 = bitcast i32* %10 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 8
  %40 = bitcast i32* %37 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %40, align 8
  %41 = load %class.SkPixelRef*, %class.SkPixelRef** %5, align 8
  %42 = bitcast %"class.cc::UIResourceBitmap"* %0 to i64*
  store i64 %24, i64* %42, align 8
  %43 = icmp eq %class.SkPixelRef* %41, null
  br i1 %43, label %54, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %41, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 -1 acq_rel
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = bitcast %class.SkPixelRef* %41 to %class.SkRefCntBase*
  %50 = bitcast %class.SkPixelRef* %41 to void (%class.SkRefCntBase*)***
  %51 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %50, align 8
  %52 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %51, i64 2
  %53 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %52, align 8
  tail call void %53(%class.SkRefCntBase* nonnull %49) #9
  br label %54

54:                                               ; preds = %48, %44, %36
  %55 = load %class.SkColorSpace*, %class.SkColorSpace** %9, align 16
  %56 = icmp eq %class.SkColorSpace* %55, null
  br i1 %56, label %63, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 -1 acq_rel
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = bitcast %class.SkColorSpace* %55 to i8*
  tail call void @_ZdlPv(i8* %62) #8
  br label %63

63:                                               ; preds = %54, %57, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmapC2ERKS0_(%"class.cc::UIResourceBitmap"* nocapture, %"class.cc::UIResourceBitmap"* nocapture readonly dereferenceable(40)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %1, i64 0, i32 0, i32 0
  %5 = load %class.SkPixelRef*, %class.SkPixelRef** %4, align 8
  %6 = icmp eq %class.SkPixelRef* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  store %class.SkPixelRef* %5, %class.SkPixelRef** %3, align 8
  %11 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %class.SkColorSpace*, %class.SkColorSpace** %15, align 8
  %17 = icmp eq %class.SkColorSpace* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 1 monotonic
  br label %21

21:                                               ; preds = %10, %18
  store %class.SkColorSpace* %16, %class.SkColorSpace** %14, align 8
  %22 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 1
  %23 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %1, i64 0, i32 2, i32 0, i32 1
  %24 = bitcast i32* %23 to i64*
  %25 = bitcast i32* %22 to i64*
  %26 = load i64, i64* %24, align 8
  store i64 %26, i64* %25, align 8
  %27 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %1, i64 0, i32 2, i32 1
  %29 = bitcast %struct.SkISize* %28 to i64*
  %30 = bitcast %struct.SkISize* %27 to i64*
  %31 = load i64, i64* %29, align 8
  store i64 %31, i64* %30, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc16UIResourceBitmapD2Ev(%"class.cc::UIResourceBitmap"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %class.SkColorSpace*, %class.SkColorSpace** %2, align 8
  %4 = icmp eq %class.SkColorSpace* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw add i32* %6, i32 -1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = bitcast %class.SkColorSpace* %3 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  br label %11

11:                                               ; preds = %1, %5, %9
  %12 = getelementptr inbounds %"class.cc::UIResourceBitmap", %"class.cc::UIResourceBitmap"* %0, i64 0, i32 0, i32 0
  %13 = load %class.SkPixelRef*, %class.SkPixelRef** %12, align 8
  %14 = icmp eq %class.SkPixelRef* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkPixelRef, %class.SkPixelRef* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %class.SkPixelRef* %13 to %class.SkRefCntBase*
  %21 = bitcast %class.SkPixelRef* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  tail call void %24(%class.SkRefCntBase* nonnull %20) #9
  br label %25

25:                                               ; preds = %11, %15, %19
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, float, float, %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 4001}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_Z9sk_ref_spI10SkPixelRefE5sk_spIT_EPS2_: argument 0"}
!6 = distinct !{!6, !"_Z9sk_ref_spI10SkPixelRefE5sk_spIT_EPS2_"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!9 = distinct !{!9, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!10 = distinct !{!10, !11, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!11 = distinct !{!11, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!14 = distinct !{!14, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
