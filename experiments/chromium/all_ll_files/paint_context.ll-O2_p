; ModuleID = '../../ui/compositor/paint_context.cc'
source_filename = "../../ui/compositor/paint_context.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::PaintContext" = type <{ %"class.cc::DisplayItemList"*, float, %"class.gfx::Rect", %"class.gfx::Vector2d", i8, [3 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.cc::DisplayItemList" = type opaque

@_ZN2ui12PaintContextC1EPN2cc15DisplayItemListEfRKN3gfx4RectEb = hidden unnamed_addr alias void (%"class.ui::PaintContext"*, %"class.cc::DisplayItemList"*, float, %"class.gfx::Rect"*, i1), void (%"class.ui::PaintContext"*, %"class.cc::DisplayItemList"*, float, %"class.gfx::Rect"*, i1)* @_ZN2ui12PaintContextC2EPN2cc15DisplayItemListEfRKN3gfx4RectEb
@_ZN2ui12PaintContextC1ERKS0_RKN3gfx8Vector2dE = hidden unnamed_addr alias void (%"class.ui::PaintContext"*, %"class.ui::PaintContext"*, %"class.gfx::Vector2d"*), void (%"class.ui::PaintContext"*, %"class.ui::PaintContext"*, %"class.gfx::Vector2d"*)* @_ZN2ui12PaintContextC2ERKS0_RKN3gfx8Vector2dE
@_ZN2ui12PaintContextC1ERKS0_NS0_24CloneWithoutInvalidationE = hidden unnamed_addr alias void (%"class.ui::PaintContext"*, %"class.ui::PaintContext"*, i32), void (%"class.ui::PaintContext"*, %"class.ui::PaintContext"*, i32)* @_ZN2ui12PaintContextC2ERKS0_NS0_24CloneWithoutInvalidationE
@_ZN2ui12PaintContextD1Ev = hidden unnamed_addr alias void (%"class.ui::PaintContext"*), void (%"class.ui::PaintContext"*)* @_ZN2ui12PaintContextD2Ev

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN2ui12PaintContextC2EPN2cc15DisplayItemListEfRKN3gfx4RectEb(%"class.ui::PaintContext"* nocapture, %"class.cc::DisplayItemList"*, float, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %4 to i8
  %7 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 0
  store %"class.cc::DisplayItemList"* %1, %"class.cc::DisplayItemList"** %7, align 8
  %8 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 1
  store float %2, float* %8, align 8
  %9 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 2
  %10 = select i1 %4, float %2, float 1.000000e+00
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %21

12:                                               ; preds = %5
  %13 = bitcast %"class.gfx::Rect"* %3 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = trunc i64 %14 to i32
  %16 = lshr i64 %14, 32
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1
  %19 = bitcast %"class.gfx::Size"* %18 to i64*
  %20 = load i64, i64* %19, align 4
  br label %80

21:                                               ; preds = %5
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = sitofp i32 %23 to float
  %25 = fmul float %10, %24
  %26 = tail call float @llvm.round.f32(float %25) #6
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sitofp i32 %29 to float
  %31 = fmul float %10, %30
  %32 = tail call float @llvm.round.f32(float %31) #6
  %33 = fptosi float %32 to i32
  %34 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %21
  %38 = add nsw i32 %35, %23
  %39 = sitofp i32 %38 to float
  %40 = fmul float %10, %39
  %41 = tail call float @llvm.round.f32(float %40) #6
  %42 = fptosi float %41 to i32
  br label %43

43:                                               ; preds = %37, %21
  %44 = phi i32 [ %42, %37 ], [ %27, %21 ]
  %45 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %43
  %49 = add nsw i32 %46, %29
  %50 = sitofp i32 %49 to float
  %51 = fmul float %10, %50
  %52 = tail call float @llvm.round.f32(float %51) #6
  %53 = fptosi float %52 to i32
  br label %54

54:                                               ; preds = %48, %43
  %55 = phi i32 [ %53, %48 ], [ %33, %43 ]
  %56 = sub nsw i32 %44, %27
  %57 = sub nsw i32 %55, %33
  %58 = icmp sgt i32 %27, 0
  %59 = icmp sgt i32 %56, 0
  %60 = and i1 %58, %59
  %61 = sub nuw nsw i32 2147483647, %27
  %62 = icmp ult i32 %61, %56
  %63 = and i1 %62, %60
  %64 = select i1 %63, i32 %61, i32 %56
  %65 = icmp sgt i32 %33, 0
  %66 = icmp sgt i32 %57, 0
  %67 = and i1 %65, %66
  %68 = sub nuw nsw i32 2147483647, %33
  %69 = icmp ult i32 %68, %57
  %70 = and i1 %69, %67
  %71 = select i1 %70, i32 %68, i32 %57
  %72 = icmp sgt i32 %64, 0
  %73 = select i1 %72, i32 %64, i32 0
  %74 = zext i32 %73 to i64
  %75 = icmp sgt i32 %71, 0
  %76 = select i1 %75, i32 %71, i32 0
  %77 = zext i32 %76 to i64
  %78 = shl nuw nsw i64 %77, 32
  %79 = or i64 %78, %74
  br label %80

80:                                               ; preds = %12, %54
  %81 = phi i32 [ %17, %12 ], [ %33, %54 ]
  %82 = phi i32 [ %15, %12 ], [ %27, %54 ]
  %83 = phi i64 [ %20, %12 ], [ %79, %54 ]
  %84 = zext i32 %81 to i64
  %85 = shl nuw i64 %84, 32
  %86 = zext i32 %82 to i64
  %87 = or i64 %85, %86
  %88 = bitcast %"class.gfx::Rect"* %9 to i64*
  store i64 %87, i64* %88, align 4
  %89 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 2, i32 1
  %90 = bitcast %"class.gfx::Size"* %89 to i64*
  store i64 %83, i64* %90, align 4
  %91 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 3, i32 0
  store i32 0, i32* %91, align 4
  %92 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 3, i32 1
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 4
  store i8 %6, i8* %93, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12PaintContextC2ERKS0_RKN3gfx8Vector2dE(%"class.ui::PaintContext"* nocapture, %"class.ui::PaintContext"* nocapture readonly dereferenceable(40), %"class.gfx::Vector2d"* dereferenceable(8)) unnamed_addr #1 align 2 {
  %4 = alloca i64, align 8
  %5 = bitcast %"class.ui::PaintContext"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.ui::PaintContext"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 1
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = bitcast float* %8 to i32*
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 2
  %15 = bitcast %"class.gfx::Rect"* %13 to i8*
  %16 = bitcast %"class.gfx::Rect"* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 16, i1 false)
  %17 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 3
  %18 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 3
  %19 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = bitcast i64* %4 to %"class.gfx::Vector2d"*
  %21 = bitcast %"class.gfx::Vector2d"* %18 to i64*
  %22 = load i64, i64* %21, align 4
  store i64 %22, i64* %4, align 8
  call void @_ZN3gfx8Vector2d3AddERKS0_(%"class.gfx::Vector2d"* nonnull %20, %"class.gfx::Vector2d"* dereferenceable(8) %2) #6
  %23 = load i64, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  %24 = bitcast %"class.gfx::Vector2d"* %17 to i64*
  store i64 %23, i64* %24, align 4
  %25 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 4
  %26 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 4
  %27 = load i8, i8* %26, align 4, !range !2
  store i8 %27, i8* %25, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12PaintContextC2ERKS0_NS0_24CloneWithoutInvalidationE(%"class.ui::PaintContext"* nocapture, %"class.ui::PaintContext"* nocapture readonly dereferenceable(40), i32) unnamed_addr #1 align 2 {
  %4 = bitcast %"class.ui::PaintContext"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.ui::PaintContext"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 1
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = bitcast float* %7 to i32*
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 3
  %15 = bitcast %"class.gfx::Vector2d"* %14 to i64*
  %16 = bitcast %"class.gfx::Vector2d"* %13 to i64*
  %17 = bitcast %"class.gfx::Rect"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 16, i1 false)
  %18 = load i64, i64* %15, align 4
  store i64 %18, i64* %16, align 4
  %19 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 4
  %20 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 4
  %21 = load i8, i8* %20, align 4, !range !2
  store i8 %21, i8* %19, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2ui12PaintContextD2Ev(%"class.ui::PaintContext"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2ui12PaintContext18ToLayerSpaceBoundsERKN3gfx4SizeE(%"class.ui::PaintContext"*, %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.gfx::Rect", align 4
  %4 = bitcast %"class.gfx::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1
  %8 = bitcast %"class.gfx::Size"* %1 to i64*
  %9 = bitcast %"class.gfx::Size"* %7 to i64*
  %10 = load i64, i64* %8, align 4
  store i64 %10, i64* %9, align 4
  %11 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 3
  %12 = call { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* nonnull dereferenceable(16) %3, %"class.gfx::Vector2d"* dereferenceable(8) %11) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #6
  ret { i64, i64 } %12
}

declare { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2ui12PaintContext16ToLayerSpaceRectERKN3gfx4RectE(%"class.ui::PaintContext"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %0, i64 0, i32 3
  %4 = tail call { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16) %1, %"class.gfx::Vector2d"* dereferenceable(8) %3) #6
  ret { i64, i64 } %4
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #5

declare void @_ZN3gfx8Vector2d3AddERKS0_(%"class.gfx::Vector2d"*, %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
