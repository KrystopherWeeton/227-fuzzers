; ModuleID = '../../third_party/fft2d/src/fftsg2d.c'
source_filename = "../../third_party/fft2d/src/fftsg2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [31 x i8] c"fft2d memory allocation error\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @cdft2d(i32, i32, i32, double** nocapture readonly, double*, i32*, double*) local_unnamed_addr #0 {
  %8 = shl i32 %0, 1
  %9 = icmp slt i32 %8, %1
  %10 = select i1 %9, i32 %1, i32 %8
  %11 = load i32, i32* %5, align 4
  %12 = shl i32 %11, 2
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  %15 = ashr i32 %10, 2
  tail call void @makewt(i32 %15, i32* %5, double* %6) #7
  br label %16

16:                                               ; preds = %14, %7
  %17 = icmp eq double* %4, null
  br i1 %17, label %18, label %36

18:                                               ; preds = %16
  %19 = icmp eq i32 %1, 4
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = shl nsw i32 %0, 2
  br label %26

22:                                               ; preds = %18
  %23 = shl nsw i32 %0, 3
  %24 = icmp slt i32 %1, 4
  %25 = select i1 %24, i32 %8, i32 %23
  br label %26

26:                                               ; preds = %22, %20
  %27 = phi i32 [ %21, %20 ], [ %25, %22 ]
  %28 = sext i32 %27 to i64
  %29 = shl nsw i64 %28, 3
  %30 = tail call noalias i8* @malloc(i64 %29) #7
  %31 = bitcast i8* %30 to double*
  %32 = icmp eq i8* %30, null
  br i1 %32, label %33, label %36

33:                                               ; preds = %26
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %35 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %34) #8
  tail call void @exit(i32 1) #9
  unreachable

36:                                               ; preds = %26, %16
  %37 = phi double* [ %31, %26 ], [ %4, %16 ]
  %38 = phi i32 [ 1, %26 ], [ 0, %16 ]
  %39 = icmp sgt i32 %0, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  %41 = zext i32 %0 to i64
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %46, %42 ]
  %44 = getelementptr inbounds double*, double** %3, i64 %43
  %45 = load double*, double** %44, align 8
  tail call void @cdft(i32 %1, i32 %2, double* %45, i32* %5, double* %6) #7
  %46 = add nuw nsw i64 %43, 1
  %47 = icmp eq i64 %46, %41
  br i1 %47, label %48, label %42

48:                                               ; preds = %42, %36
  tail call void @cdft2d_sub(i32 %0, i32 %1, i32 %2, double** %3, double* %37, i32* %5, double* %6)
  %49 = icmp eq i32 %38, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %48
  %51 = bitcast double* %37 to i8*
  tail call void @free(i8* %51) #7
  br label %52

52:                                               ; preds = %48, %50
  ret void
}

declare void @makewt(i32, i32*, double*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #3

declare void @cdft(i32, i32, double*, i32*, double*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @cdft2d_sub(i32, i32, i32, double** nocapture readonly, double*, i32*, double*) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %1, 4
  br i1 %8, label %9, label %168

9:                                                ; preds = %7
  %10 = icmp sgt i32 %0, 0
  %11 = shl nsw i32 %0, 1
  %12 = shl nsw i32 %0, 2
  %13 = mul nsw i32 %0, 6
  %14 = sext i32 %11 to i64
  %15 = getelementptr inbounds double, double* %4, i64 %14
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds double, double* %4, i64 %16
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds double, double* %4, i64 %18
  %20 = zext i32 %0 to i64
  %21 = zext i32 %0 to i64
  br label %22

22:                                               ; preds = %9, %164
  %23 = phi i64 [ 0, %9 ], [ %165, %164 ]
  br i1 %10, label %24, label %163

24:                                               ; preds = %22
  %25 = or i64 %23, 1
  %26 = or i64 %23, 2
  %27 = or i64 %23, 3
  %28 = or i64 %23, 4
  %29 = or i64 %23, 5
  %30 = or i64 %23, 6
  %31 = or i64 %23, 7
  br label %32

32:                                               ; preds = %32, %24
  %33 = phi i64 [ 0, %24 ], [ %91, %32 ]
  %34 = getelementptr inbounds double*, double** %3, i64 %33
  %35 = load double*, double** %34, align 8
  %36 = getelementptr inbounds double, double* %35, i64 %23
  %37 = bitcast double* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = shl nuw nsw i64 %33, 1
  %40 = getelementptr inbounds double, double* %4, i64 %39
  %41 = bitcast double* %40 to i64*
  store i64 %38, i64* %41, align 8
  %42 = load double*, double** %34, align 8
  %43 = getelementptr inbounds double, double* %42, i64 %25
  %44 = bitcast double* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = or i64 %39, 1
  %47 = getelementptr inbounds double, double* %4, i64 %46
  %48 = bitcast double* %47 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load double*, double** %34, align 8
  %50 = getelementptr inbounds double, double* %49, i64 %26
  %51 = bitcast double* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = add nsw i64 %39, %14
  %54 = getelementptr inbounds double, double* %4, i64 %53
  %55 = bitcast double* %54 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load double*, double** %34, align 8
  %57 = getelementptr inbounds double, double* %56, i64 %27
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = or i64 %53, 1
  %61 = getelementptr inbounds double, double* %4, i64 %60
  %62 = bitcast double* %61 to i64*
  store i64 %59, i64* %62, align 8
  %63 = load double*, double** %34, align 8
  %64 = getelementptr inbounds double, double* %63, i64 %28
  %65 = bitcast double* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = add nsw i64 %39, %16
  %68 = getelementptr inbounds double, double* %4, i64 %67
  %69 = bitcast double* %68 to i64*
  store i64 %66, i64* %69, align 8
  %70 = load double*, double** %34, align 8
  %71 = getelementptr inbounds double, double* %70, i64 %29
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = or i64 %67, 1
  %75 = getelementptr inbounds double, double* %4, i64 %74
  %76 = bitcast double* %75 to i64*
  store i64 %73, i64* %76, align 8
  %77 = load double*, double** %34, align 8
  %78 = getelementptr inbounds double, double* %77, i64 %30
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = add nsw i64 %39, %18
  %82 = getelementptr inbounds double, double* %4, i64 %81
  %83 = bitcast double* %82 to i64*
  store i64 %80, i64* %83, align 8
  %84 = load double*, double** %34, align 8
  %85 = getelementptr inbounds double, double* %84, i64 %31
  %86 = bitcast double* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %81, 1
  %89 = getelementptr inbounds double, double* %4, i64 %88
  %90 = bitcast double* %89 to i64*
  store i64 %87, i64* %90, align 8
  %91 = add nuw nsw i64 %33, 1
  %92 = icmp eq i64 %91, %20
  br i1 %92, label %93, label %32

93:                                               ; preds = %32
  tail call void @cdft(i32 %11, i32 %2, double* %4, i32* %5, double* %6) #7
  tail call void @cdft(i32 %11, i32 %2, double* %15, i32* %5, double* %6) #7
  tail call void @cdft(i32 %11, i32 %2, double* %17, i32* %5, double* %6) #7
  tail call void @cdft(i32 %11, i32 %2, double* %19, i32* %5, double* %6) #7
  br i1 %10, label %94, label %164

94:                                               ; preds = %93
  %95 = or i64 %23, 1
  %96 = or i64 %23, 2
  %97 = or i64 %23, 3
  %98 = or i64 %23, 4
  %99 = or i64 %23, 5
  %100 = or i64 %23, 6
  %101 = or i64 %23, 7
  br label %102

102:                                              ; preds = %102, %94
  %103 = phi i64 [ 0, %94 ], [ %161, %102 ]
  %104 = shl nuw nsw i64 %103, 1
  %105 = getelementptr inbounds double, double* %4, i64 %104
  %106 = bitcast double* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds double*, double** %3, i64 %103
  %109 = load double*, double** %108, align 8
  %110 = getelementptr inbounds double, double* %109, i64 %23
  %111 = bitcast double* %110 to i64*
  store i64 %107, i64* %111, align 8
  %112 = or i64 %104, 1
  %113 = getelementptr inbounds double, double* %4, i64 %112
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = load double*, double** %108, align 8
  %117 = getelementptr inbounds double, double* %116, i64 %95
  %118 = bitcast double* %117 to i64*
  store i64 %115, i64* %118, align 8
  %119 = add nsw i64 %104, %14
  %120 = getelementptr inbounds double, double* %4, i64 %119
  %121 = bitcast double* %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = load double*, double** %108, align 8
  %124 = getelementptr inbounds double, double* %123, i64 %96
  %125 = bitcast double* %124 to i64*
  store i64 %122, i64* %125, align 8
  %126 = or i64 %119, 1
  %127 = getelementptr inbounds double, double* %4, i64 %126
  %128 = bitcast double* %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = load double*, double** %108, align 8
  %131 = getelementptr inbounds double, double* %130, i64 %97
  %132 = bitcast double* %131 to i64*
  store i64 %129, i64* %132, align 8
  %133 = add nsw i64 %104, %16
  %134 = getelementptr inbounds double, double* %4, i64 %133
  %135 = bitcast double* %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = load double*, double** %108, align 8
  %138 = getelementptr inbounds double, double* %137, i64 %98
  %139 = bitcast double* %138 to i64*
  store i64 %136, i64* %139, align 8
  %140 = or i64 %133, 1
  %141 = getelementptr inbounds double, double* %4, i64 %140
  %142 = bitcast double* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load double*, double** %108, align 8
  %145 = getelementptr inbounds double, double* %144, i64 %99
  %146 = bitcast double* %145 to i64*
  store i64 %143, i64* %146, align 8
  %147 = add nsw i64 %104, %18
  %148 = getelementptr inbounds double, double* %4, i64 %147
  %149 = bitcast double* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = load double*, double** %108, align 8
  %152 = getelementptr inbounds double, double* %151, i64 %100
  %153 = bitcast double* %152 to i64*
  store i64 %150, i64* %153, align 8
  %154 = or i64 %147, 1
  %155 = getelementptr inbounds double, double* %4, i64 %154
  %156 = bitcast double* %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = load double*, double** %108, align 8
  %159 = getelementptr inbounds double, double* %158, i64 %101
  %160 = bitcast double* %159 to i64*
  store i64 %157, i64* %160, align 8
  %161 = add nuw nsw i64 %103, 1
  %162 = icmp eq i64 %161, %21
  br i1 %162, label %164, label %102

163:                                              ; preds = %22
  tail call void @cdft(i32 %11, i32 %2, double* %4, i32* %5, double* %6) #7
  tail call void @cdft(i32 %11, i32 %2, double* %15, i32* %5, double* %6) #7
  tail call void @cdft(i32 %11, i32 %2, double* %17, i32* %5, double* %6) #7
  tail call void @cdft(i32 %11, i32 %2, double* %19, i32* %5, double* %6) #7
  br label %164

164:                                              ; preds = %102, %163, %93
  %165 = add nuw i64 %23, 8
  %166 = trunc i64 %165 to i32
  %167 = icmp slt i32 %166, %1
  br i1 %167, label %22, label %369

168:                                              ; preds = %7
  switch i32 %1, label %369 [
    i32 4, label %179
    i32 2, label %169
  ]

169:                                              ; preds = %168
  %170 = icmp sgt i32 %0, 0
  br i1 %170, label %173, label %171

171:                                              ; preds = %169
  %172 = shl nsw i32 %0, 1
  tail call void @cdft(i32 %172, i32 %2, double* %4, i32* %5, double* %6) #7
  br label %369

173:                                              ; preds = %169
  %174 = zext i32 %0 to i64
  %175 = and i64 %174, 1
  %176 = icmp eq i32 %0, 1
  br i1 %176, label %288, label %177

177:                                              ; preds = %173
  %178 = sub nsw i64 %174, %175
  br label %253

179:                                              ; preds = %168
  %180 = icmp sgt i32 %0, 0
  %181 = shl nsw i32 %0, 1
  %182 = sext i32 %181 to i64
  br i1 %180, label %183, label %349

183:                                              ; preds = %179
  %184 = zext i32 %0 to i64
  br label %185

185:                                              ; preds = %185, %183
  %186 = phi i64 [ 0, %183 ], [ %215, %185 ]
  %187 = getelementptr inbounds double*, double** %3, i64 %186
  %188 = bitcast double** %187 to i64**
  %189 = load i64*, i64** %188, align 8
  %190 = load i64, i64* %189, align 8
  %191 = shl nuw nsw i64 %186, 1
  %192 = getelementptr inbounds double, double* %4, i64 %191
  %193 = bitcast double* %192 to i64*
  store i64 %190, i64* %193, align 8
  %194 = load double*, double** %187, align 8
  %195 = getelementptr inbounds double, double* %194, i64 1
  %196 = bitcast double* %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = or i64 %191, 1
  %199 = getelementptr inbounds double, double* %4, i64 %198
  %200 = bitcast double* %199 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load double*, double** %187, align 8
  %202 = getelementptr inbounds double, double* %201, i64 2
  %203 = bitcast double* %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = add nsw i64 %191, %182
  %206 = getelementptr inbounds double, double* %4, i64 %205
  %207 = bitcast double* %206 to i64*
  store i64 %204, i64* %207, align 8
  %208 = load double*, double** %187, align 8
  %209 = getelementptr inbounds double, double* %208, i64 3
  %210 = bitcast double* %209 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = or i64 %205, 1
  %213 = getelementptr inbounds double, double* %4, i64 %212
  %214 = bitcast double* %213 to i64*
  store i64 %211, i64* %214, align 8
  %215 = add nuw nsw i64 %186, 1
  %216 = icmp eq i64 %215, %184
  br i1 %216, label %217, label %185

217:                                              ; preds = %185
  tail call void @cdft(i32 %181, i32 %2, double* %4, i32* %5, double* %6) #7
  %218 = getelementptr inbounds double, double* %4, i64 %182
  tail call void @cdft(i32 %181, i32 %2, double* %218, i32* %5, double* %6) #7
  br i1 %180, label %219, label %369

219:                                              ; preds = %217
  %220 = zext i32 %0 to i64
  br label %221

221:                                              ; preds = %221, %219
  %222 = phi i64 [ 0, %219 ], [ %251, %221 ]
  %223 = shl nuw nsw i64 %222, 1
  %224 = getelementptr inbounds double, double* %4, i64 %223
  %225 = bitcast double* %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds double*, double** %3, i64 %222
  %228 = bitcast double** %227 to i64**
  %229 = load i64*, i64** %228, align 8
  store i64 %226, i64* %229, align 8
  %230 = or i64 %223, 1
  %231 = getelementptr inbounds double, double* %4, i64 %230
  %232 = bitcast double* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = load double*, double** %227, align 8
  %235 = getelementptr inbounds double, double* %234, i64 1
  %236 = bitcast double* %235 to i64*
  store i64 %233, i64* %236, align 8
  %237 = add nsw i64 %223, %182
  %238 = getelementptr inbounds double, double* %4, i64 %237
  %239 = bitcast double* %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = load double*, double** %227, align 8
  %242 = getelementptr inbounds double, double* %241, i64 2
  %243 = bitcast double* %242 to i64*
  store i64 %240, i64* %243, align 8
  %244 = or i64 %237, 1
  %245 = getelementptr inbounds double, double* %4, i64 %244
  %246 = bitcast double* %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = load double*, double** %227, align 8
  %249 = getelementptr inbounds double, double* %248, i64 3
  %250 = bitcast double* %249 to i64*
  store i64 %247, i64* %250, align 8
  %251 = add nuw nsw i64 %222, 1
  %252 = icmp eq i64 %251, %220
  br i1 %252, label %369, label %221

253:                                              ; preds = %253, %177
  %254 = phi i64 [ 0, %177 ], [ %285, %253 ]
  %255 = phi i64 [ %178, %177 ], [ %286, %253 ]
  %256 = getelementptr inbounds double*, double** %3, i64 %254
  %257 = bitcast double** %256 to i64**
  %258 = load i64*, i64** %257, align 8
  %259 = load i64, i64* %258, align 8
  %260 = shl nuw nsw i64 %254, 1
  %261 = getelementptr inbounds double, double* %4, i64 %260
  %262 = bitcast double* %261 to i64*
  store i64 %259, i64* %262, align 8
  %263 = load double*, double** %256, align 8
  %264 = getelementptr inbounds double, double* %263, i64 1
  %265 = bitcast double* %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = or i64 %260, 1
  %268 = getelementptr inbounds double, double* %4, i64 %267
  %269 = bitcast double* %268 to i64*
  store i64 %266, i64* %269, align 8
  %270 = or i64 %254, 1
  %271 = getelementptr inbounds double*, double** %3, i64 %270
  %272 = bitcast double** %271 to i64**
  %273 = load i64*, i64** %272, align 8
  %274 = load i64, i64* %273, align 8
  %275 = shl nuw nsw i64 %270, 1
  %276 = getelementptr inbounds double, double* %4, i64 %275
  %277 = bitcast double* %276 to i64*
  store i64 %274, i64* %277, align 8
  %278 = load double*, double** %271, align 8
  %279 = getelementptr inbounds double, double* %278, i64 1
  %280 = bitcast double* %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = or i64 %275, 1
  %283 = getelementptr inbounds double, double* %4, i64 %282
  %284 = bitcast double* %283 to i64*
  store i64 %281, i64* %284, align 8
  %285 = add nuw nsw i64 %254, 2
  %286 = add i64 %255, -2
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %288, label %253

288:                                              ; preds = %253, %173
  %289 = phi i64 [ 0, %173 ], [ %285, %253 ]
  %290 = icmp eq i64 %175, 0
  br i1 %290, label %306, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds double*, double** %3, i64 %289
  %293 = bitcast double** %292 to i64**
  %294 = load i64*, i64** %293, align 8
  %295 = load i64, i64* %294, align 8
  %296 = shl nuw nsw i64 %289, 1
  %297 = getelementptr inbounds double, double* %4, i64 %296
  %298 = bitcast double* %297 to i64*
  store i64 %295, i64* %298, align 8
  %299 = load double*, double** %292, align 8
  %300 = getelementptr inbounds double, double* %299, i64 1
  %301 = bitcast double* %300 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = or i64 %296, 1
  %304 = getelementptr inbounds double, double* %4, i64 %303
  %305 = bitcast double* %304 to i64*
  store i64 %302, i64* %305, align 8
  br label %306

306:                                              ; preds = %288, %291
  %307 = shl nsw i32 %0, 1
  tail call void @cdft(i32 %307, i32 %2, double* %4, i32* %5, double* %6) #7
  br i1 %170, label %308, label %369

308:                                              ; preds = %306
  %309 = zext i32 %0 to i64
  %310 = and i64 %309, 1
  %311 = icmp eq i32 %0, 1
  br i1 %311, label %351, label %312

312:                                              ; preds = %308
  %313 = sub nsw i64 %309, %310
  br label %314

314:                                              ; preds = %314, %312
  %315 = phi i64 [ 0, %312 ], [ %346, %314 ]
  %316 = phi i64 [ %313, %312 ], [ %347, %314 ]
  %317 = shl nuw nsw i64 %315, 1
  %318 = getelementptr inbounds double, double* %4, i64 %317
  %319 = bitcast double* %318 to i64*
  %320 = load i64, i64* %319, align 8
  %321 = getelementptr inbounds double*, double** %3, i64 %315
  %322 = bitcast double** %321 to i64**
  %323 = load i64*, i64** %322, align 8
  store i64 %320, i64* %323, align 8
  %324 = or i64 %317, 1
  %325 = getelementptr inbounds double, double* %4, i64 %324
  %326 = bitcast double* %325 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = load double*, double** %321, align 8
  %329 = getelementptr inbounds double, double* %328, i64 1
  %330 = bitcast double* %329 to i64*
  store i64 %327, i64* %330, align 8
  %331 = or i64 %315, 1
  %332 = shl nuw nsw i64 %331, 1
  %333 = getelementptr inbounds double, double* %4, i64 %332
  %334 = bitcast double* %333 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds double*, double** %3, i64 %331
  %337 = bitcast double** %336 to i64**
  %338 = load i64*, i64** %337, align 8
  store i64 %335, i64* %338, align 8
  %339 = or i64 %332, 1
  %340 = getelementptr inbounds double, double* %4, i64 %339
  %341 = bitcast double* %340 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = load double*, double** %336, align 8
  %344 = getelementptr inbounds double, double* %343, i64 1
  %345 = bitcast double* %344 to i64*
  store i64 %342, i64* %345, align 8
  %346 = add nuw nsw i64 %315, 2
  %347 = add i64 %316, -2
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %351, label %314

349:                                              ; preds = %179
  tail call void @cdft(i32 %181, i32 %2, double* %4, i32* %5, double* %6) #7
  %350 = getelementptr inbounds double, double* %4, i64 %182
  tail call void @cdft(i32 %181, i32 %2, double* %350, i32* %5, double* %6) #7
  br label %369

351:                                              ; preds = %314, %308
  %352 = phi i64 [ 0, %308 ], [ %346, %314 ]
  %353 = icmp eq i64 %310, 0
  br i1 %353, label %369, label %354

354:                                              ; preds = %351
  %355 = shl nuw nsw i64 %352, 1
  %356 = getelementptr inbounds double, double* %4, i64 %355
  %357 = bitcast double* %356 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = getelementptr inbounds double*, double** %3, i64 %352
  %360 = bitcast double** %359 to i64**
  %361 = load i64*, i64** %360, align 8
  store i64 %358, i64* %361, align 8
  %362 = or i64 %355, 1
  %363 = getelementptr inbounds double, double* %4, i64 %362
  %364 = bitcast double* %363 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = load double*, double** %359, align 8
  %367 = getelementptr inbounds double, double* %366, i64 1
  %368 = bitcast double* %367 to i64*
  store i64 %365, i64* %368, align 8
  br label %369

369:                                              ; preds = %354, %351, %221, %164, %349, %171, %306, %217, %168
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @rdft2d(i32, i32, i32, double** nocapture readonly, double*, i32*, double*) local_unnamed_addr #0 {
  %8 = shl i32 %0, 1
  %9 = icmp slt i32 %8, %1
  %10 = select i1 %9, i32 %1, i32 %8
  %11 = load i32, i32* %5, align 4
  %12 = shl i32 %11, 2
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  %15 = ashr i32 %10, 2
  tail call void @makewt(i32 %15, i32* %5, double* %6) #7
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i32 [ %15, %14 ], [ %11, %7 ]
  %18 = getelementptr inbounds i32, i32* %5, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = shl i32 %19, 2
  %21 = icmp slt i32 %20, %1
  br i1 %21, label %22, label %26

22:                                               ; preds = %16
  %23 = ashr i32 %1, 2
  %24 = sext i32 %17 to i64
  %25 = getelementptr inbounds double, double* %6, i64 %24
  tail call void @makect(i32 %23, i32* %5, double* %25) #7
  br label %26

26:                                               ; preds = %22, %16
  %27 = icmp eq double* %4, null
  br i1 %27, label %28, label %46

28:                                               ; preds = %26
  %29 = icmp eq i32 %1, 4
  br i1 %29, label %30, label %32

30:                                               ; preds = %28
  %31 = shl nsw i32 %0, 2
  br label %36

32:                                               ; preds = %28
  %33 = shl nsw i32 %0, 3
  %34 = icmp slt i32 %1, 4
  %35 = select i1 %34, i32 %8, i32 %33
  br label %36

36:                                               ; preds = %32, %30
  %37 = phi i32 [ %31, %30 ], [ %35, %32 ]
  %38 = sext i32 %37 to i64
  %39 = shl nsw i64 %38, 3
  %40 = tail call noalias i8* @malloc(i64 %39) #7
  %41 = bitcast i8* %40 to double*
  %42 = icmp eq i8* %40, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %36
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %45 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %44) #8
  tail call void @exit(i32 1) #9
  unreachable

46:                                               ; preds = %36, %26
  %47 = phi double* [ %41, %36 ], [ %4, %26 ]
  %48 = phi i32 [ 1, %36 ], [ 0, %26 ]
  %49 = icmp slt i32 %2, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  tail call void @rdft2d_sub(i32 %0, i32 undef, i32 %2, double** %3)
  tail call void @cdft2d_sub(i32 %0, i32 %1, i32 %2, double** %3, double* %47, i32* %5, double* %6)
  br label %51

51:                                               ; preds = %50, %46
  %52 = icmp sgt i32 %0, 0
  br i1 %52, label %53, label %61

53:                                               ; preds = %51
  %54 = zext i32 %0 to i64
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %59, %55 ]
  %57 = getelementptr inbounds double*, double** %3, i64 %56
  %58 = load double*, double** %57, align 8
  tail call void @rdft(i32 %1, i32 %2, double* %58, i32* %5, double* %6) #7
  %59 = add nuw nsw i64 %56, 1
  %60 = icmp eq i64 %59, %54
  br i1 %60, label %61, label %55

61:                                               ; preds = %55, %51
  %62 = icmp sgt i32 %2, -1
  br i1 %62, label %63, label %64

63:                                               ; preds = %61
  tail call void @cdft2d_sub(i32 %0, i32 %1, i32 %2, double** %3, double* %47, i32* %5, double* %6)
  tail call void @rdft2d_sub(i32 %0, i32 undef, i32 %2, double** %3)
  br label %64

64:                                               ; preds = %63, %61
  %65 = icmp eq i32 %48, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %64
  %67 = bitcast double* %47 to i8*
  tail call void @free(i8* %67) #7
  br label %68

68:                                               ; preds = %64, %66
  ret void
}

declare void @makect(i32, i32*, double*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @rdft2d_sub(i32, i32, i32, double** nocapture readonly) local_unnamed_addr #5 {
  %5 = ashr i32 %0, 1
  %6 = icmp slt i32 %2, 0
  %7 = icmp sgt i32 %0, 3
  br i1 %6, label %11, label %8

8:                                                ; preds = %4
  br i1 %7, label %9, label %75

9:                                                ; preds = %8
  %10 = sext i32 %5 to i64
  br label %40

11:                                               ; preds = %4
  br i1 %7, label %12, label %75

12:                                               ; preds = %11
  %13 = sext i32 %5 to i64
  br label %14

14:                                               ; preds = %12, %14
  %15 = phi i64 [ 1, %12 ], [ %38, %14 ]
  %16 = trunc i64 %15 to i32
  %17 = sub nsw i32 %0, %16
  %18 = getelementptr inbounds double*, double** %3, i64 %15
  %19 = load double*, double** %18, align 8
  %20 = load double, double* %19, align 8
  %21 = sext i32 %17 to i64
  %22 = getelementptr inbounds double*, double** %3, i64 %21
  %23 = load double*, double** %22, align 8
  %24 = load double, double* %23, align 8
  %25 = fsub double %20, %24
  %26 = fadd double %20, %24
  store double %26, double* %19, align 8
  %27 = load double*, double** %22, align 8
  store double %25, double* %27, align 8
  %28 = load double*, double** %22, align 8
  %29 = getelementptr inbounds double, double* %28, i64 1
  %30 = load double, double* %29, align 8
  %31 = load double*, double** %18, align 8
  %32 = getelementptr inbounds double, double* %31, i64 1
  %33 = load double, double* %32, align 8
  %34 = fsub double %30, %33
  %35 = fadd double %30, %33
  store double %35, double* %32, align 8
  %36 = load double*, double** %22, align 8
  %37 = getelementptr inbounds double, double* %36, i64 1
  store double %34, double* %37, align 8
  %38 = add nuw nsw i64 %15, 1
  %39 = icmp slt i64 %38, %13
  br i1 %39, label %14, label %75

40:                                               ; preds = %9, %40
  %41 = phi i64 [ 1, %9 ], [ %73, %40 ]
  %42 = trunc i64 %41 to i32
  %43 = sub nsw i32 %0, %42
  %44 = getelementptr inbounds double*, double** %3, i64 %41
  %45 = load double*, double** %44, align 8
  %46 = load double, double* %45, align 8
  %47 = sext i32 %43 to i64
  %48 = getelementptr inbounds double*, double** %3, i64 %47
  %49 = load double*, double** %48, align 8
  %50 = load double, double* %49, align 8
  %51 = fsub double %46, %50
  %52 = fmul double %51, 5.000000e-01
  store double %52, double* %49, align 8
  %53 = load double*, double** %48, align 8
  %54 = load double, double* %53, align 8
  %55 = load double*, double** %44, align 8
  %56 = load double, double* %55, align 8
  %57 = fsub double %56, %54
  store double %57, double* %55, align 8
  %58 = load double*, double** %44, align 8
  %59 = getelementptr inbounds double, double* %58, i64 1
  %60 = load double, double* %59, align 8
  %61 = load double*, double** %48, align 8
  %62 = getelementptr inbounds double, double* %61, i64 1
  %63 = load double, double* %62, align 8
  %64 = fadd double %60, %63
  %65 = fmul double %64, 5.000000e-01
  store double %65, double* %62, align 8
  %66 = load double*, double** %48, align 8
  %67 = getelementptr inbounds double, double* %66, i64 1
  %68 = load double, double* %67, align 8
  %69 = load double*, double** %44, align 8
  %70 = getelementptr inbounds double, double* %69, i64 1
  %71 = load double, double* %70, align 8
  %72 = fsub double %71, %68
  store double %72, double* %70, align 8
  %73 = add nuw nsw i64 %41, 1
  %74 = icmp slt i64 %73, %10
  br i1 %74, label %40, label %75

75:                                               ; preds = %40, %14, %8, %11
  ret void
}

declare void @rdft(i32, i32, double*, i32*, double*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @rdft2dsort(i32, i32, i32, double** nocapture readonly) local_unnamed_addr #5 {
  %5 = ashr i32 %0, 1
  %6 = icmp slt i32 %2, 0
  %7 = add nsw i32 %5, 1
  %8 = icmp slt i32 %7, %0
  br i1 %6, label %17, label %9

9:                                                ; preds = %4
  %10 = sext i32 %1 to i64
  %11 = add nsw i32 %1, 1
  %12 = sext i32 %11 to i64
  %13 = sext i32 %5 to i64
  br i1 %8, label %14, label %129

14:                                               ; preds = %9
  %15 = add nsw i64 %13, 1
  %16 = sext i32 %0 to i64
  br label %95

17:                                               ; preds = %4
  br i1 %8, label %21, label %18

18:                                               ; preds = %17
  %19 = sext i32 %1 to i64
  %20 = sext i32 %5 to i64
  br label %79

21:                                               ; preds = %17
  %22 = add nsw i32 %1, 1
  %23 = sext i32 %22 to i64
  %24 = sext i32 %1 to i64
  %25 = sext i32 %5 to i64
  %26 = add nsw i64 %25, 1
  %27 = xor i32 %5, 1
  %28 = add i32 %27, %0
  %29 = add i32 %0, -2
  %30 = and i32 %28, 1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %46, label %32

32:                                               ; preds = %21
  %33 = getelementptr inbounds double*, double** %3, i64 %26
  %34 = load double*, double** %33, align 8
  %35 = getelementptr inbounds double, double* %34, i64 %23
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast double* %34 to i64*
  store i64 %37, i64* %38, align 8
  %39 = load double*, double** %33, align 8
  %40 = getelementptr inbounds double, double* %39, i64 %24
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds double, double* %39, i64 1
  %44 = bitcast double* %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = add nsw i64 %25, 2
  br label %46

46:                                               ; preds = %21, %32
  %47 = phi i64 [ %26, %21 ], [ %45, %32 ]
  %48 = icmp eq i32 %29, %5
  br i1 %48, label %79, label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %76, %49 ], [ %47, %46 ]
  %51 = getelementptr inbounds double*, double** %3, i64 %50
  %52 = load double*, double** %51, align 8
  %53 = getelementptr inbounds double, double* %52, i64 %23
  %54 = bitcast double* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast double* %52 to i64*
  store i64 %55, i64* %56, align 8
  %57 = load double*, double** %51, align 8
  %58 = getelementptr inbounds double, double* %57, i64 %24
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds double, double* %57, i64 1
  %62 = bitcast double* %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = add i64 %50, 1
  %64 = getelementptr inbounds double*, double** %3, i64 %63
  %65 = load double*, double** %64, align 8
  %66 = getelementptr inbounds double, double* %65, i64 %23
  %67 = bitcast double* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast double* %65 to i64*
  store i64 %68, i64* %69, align 8
  %70 = load double*, double** %64, align 8
  %71 = getelementptr inbounds double, double* %70, i64 %24
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds double, double* %70, i64 1
  %75 = bitcast double* %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = add i64 %50, 2
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, %0
  br i1 %78, label %79, label %49

79:                                               ; preds = %46, %49, %18
  %80 = phi i64 [ %20, %18 ], [ %25, %49 ], [ %25, %46 ]
  %81 = phi i64 [ %19, %18 ], [ %24, %49 ], [ %24, %46 ]
  %82 = load double*, double** %3, align 8
  %83 = getelementptr inbounds double, double* %82, i64 %81
  %84 = bitcast double* %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds double, double* %82, i64 1
  %87 = bitcast double* %86 to i64*
  store i64 %85, i64* %87, align 8
  %88 = getelementptr inbounds double*, double** %3, i64 %80
  %89 = load double*, double** %88, align 8
  %90 = getelementptr inbounds double, double* %89, i64 %81
  %91 = bitcast double* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds double, double* %89, i64 1
  %94 = bitcast double* %93 to i64*
  store i64 %92, i64* %94, align 8
  br label %151

95:                                               ; preds = %95, %14
  %96 = phi i64 [ %15, %14 ], [ %126, %95 ]
  %97 = getelementptr inbounds double*, double** %3, i64 %96
  %98 = load double*, double** %97, align 8
  %99 = load double, double* %98, align 8
  %100 = getelementptr inbounds double, double* %98, i64 1
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds double, double* %98, i64 %10
  %104 = bitcast double* %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = load double*, double** %97, align 8
  %106 = getelementptr inbounds double, double* %105, i64 %12
  store double %99, double* %106, align 8
  %107 = sub nsw i64 %16, %96
  %108 = getelementptr inbounds double*, double** %3, i64 %107
  %109 = load double*, double** %108, align 8
  %110 = getelementptr inbounds double, double* %109, i64 %10
  %111 = bitcast double* %110 to i64*
  store i64 %102, i64* %111, align 8
  %112 = fsub double -0.000000e+00, %99
  %113 = load double*, double** %108, align 8
  %114 = getelementptr inbounds double, double* %113, i64 %12
  store double %112, double* %114, align 8
  %115 = bitcast double** %108 to i64**
  %116 = load i64*, i64** %115, align 8
  %117 = load i64, i64* %116, align 8
  %118 = bitcast double** %97 to i64**
  %119 = load i64*, i64** %118, align 8
  store i64 %117, i64* %119, align 8
  %120 = load double*, double** %108, align 8
  %121 = getelementptr inbounds double, double* %120, i64 1
  %122 = load double, double* %121, align 8
  %123 = fsub double -0.000000e+00, %122
  %124 = load double*, double** %97, align 8
  %125 = getelementptr inbounds double, double* %124, i64 1
  store double %123, double* %125, align 8
  %126 = add i64 %96, 1
  %127 = trunc i64 %126 to i32
  %128 = icmp eq i32 %127, %0
  br i1 %128, label %129, label %95

129:                                              ; preds = %95, %9
  %130 = load double*, double** %3, align 8
  %131 = getelementptr inbounds double, double* %130, i64 1
  %132 = bitcast double* %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds double, double* %130, i64 %10
  %135 = bitcast double* %134 to i64*
  store i64 %133, i64* %135, align 8
  %136 = load double*, double** %3, align 8
  %137 = getelementptr inbounds double, double* %136, i64 %12
  store double 0.000000e+00, double* %137, align 8
  %138 = load double*, double** %3, align 8
  %139 = getelementptr inbounds double, double* %138, i64 1
  store double 0.000000e+00, double* %139, align 8
  %140 = getelementptr inbounds double*, double** %3, i64 %13
  %141 = load double*, double** %140, align 8
  %142 = getelementptr inbounds double, double* %141, i64 1
  %143 = bitcast double* %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds double, double* %141, i64 %10
  %146 = bitcast double* %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = load double*, double** %140, align 8
  %148 = getelementptr inbounds double, double* %147, i64 %12
  store double 0.000000e+00, double* %148, align 8
  %149 = load double*, double** %140, align 8
  %150 = getelementptr inbounds double, double* %149, i64 1
  store double 0.000000e+00, double* %150, align 8
  br label %151

151:                                              ; preds = %129, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ddct2d(i32, i32, i32, double** nocapture readonly, double*, i32*, double*) local_unnamed_addr #0 {
  %8 = icmp slt i32 %0, %1
  %9 = select i1 %8, i32 %1, i32 %0
  %10 = load i32, i32* %5, align 4
  %11 = shl i32 %10, 2
  %12 = icmp sgt i32 %9, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = ashr i32 %9, 2
  tail call void @makewt(i32 %14, i32* %5, double* %6) #7
  br label %15

15:                                               ; preds = %13, %7
  %16 = phi i32 [ %14, %13 ], [ %10, %7 ]
  %17 = getelementptr inbounds i32, i32* %5, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %9, %18
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = sext i32 %16 to i64
  %22 = getelementptr inbounds double, double* %6, i64 %21
  tail call void @makect(i32 %9, i32* %5, double* %22) #7
  br label %23

23:                                               ; preds = %20, %15
  %24 = icmp eq double* %4, null
  br i1 %24, label %25, label %43

25:                                               ; preds = %23
  %26 = icmp eq i32 %1, 2
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = shl nsw i32 %0, 1
  br label %33

29:                                               ; preds = %25
  %30 = shl nsw i32 %0, 2
  %31 = icmp slt i32 %1, 2
  %32 = select i1 %31, i32 %0, i32 %30
  br label %33

33:                                               ; preds = %29, %27
  %34 = phi i32 [ %28, %27 ], [ %32, %29 ]
  %35 = sext i32 %34 to i64
  %36 = shl nsw i64 %35, 3
  %37 = tail call noalias i8* @malloc(i64 %36) #7
  %38 = bitcast i8* %37 to double*
  %39 = icmp eq i8* %37, null
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %42 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %41) #8
  tail call void @exit(i32 1) #9
  unreachable

43:                                               ; preds = %33, %23
  %44 = phi double* [ %38, %33 ], [ %4, %23 ]
  %45 = phi i32 [ 1, %33 ], [ 0, %23 ]
  %46 = icmp sgt i32 %0, 0
  br i1 %46, label %47, label %55

47:                                               ; preds = %43
  %48 = zext i32 %0 to i64
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %53, %49 ]
  %51 = getelementptr inbounds double*, double** %3, i64 %50
  %52 = load double*, double** %51, align 8
  tail call void @ddct(i32 %1, i32 %2, double* %52, i32* %5, double* %6) #7
  %53 = add nuw nsw i64 %50, 1
  %54 = icmp eq i64 %53, %48
  br i1 %54, label %55, label %49

55:                                               ; preds = %49, %43
  tail call void @ddxt2d_sub(i32 %0, i32 %1, i32 0, i32 %2, double** %3, double* %44, i32* %5, double* %6)
  %56 = icmp eq i32 %45, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %55
  %58 = bitcast double* %44 to i8*
  tail call void @free(i8* %58) #7
  br label %59

59:                                               ; preds = %55, %57
  ret void
}

declare void @ddct(i32, i32, double*, i32*, double*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ddxt2d_sub(i32, i32, i32, i32, double** nocapture readonly, double*, i32*, double*) local_unnamed_addr #0 {
  %9 = icmp sgt i32 %1, 2
  br i1 %9, label %10, label %105

10:                                               ; preds = %8
  %11 = icmp sgt i32 %0, 0
  %12 = shl i32 %0, 1
  %13 = mul nsw i32 %0, 3
  %14 = icmp eq i32 %2, 0
  %15 = sext i32 %0 to i64
  %16 = getelementptr inbounds double, double* %5, i64 %15
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds double, double* %5, i64 %17
  %19 = sext i32 %13 to i64
  %20 = getelementptr inbounds double, double* %5, i64 %19
  %21 = zext i32 %0 to i64
  %22 = zext i32 %0 to i64
  br label %23

23:                                               ; preds = %10, %101
  %24 = phi i64 [ 0, %10 ], [ %102, %101 ]
  br i1 %11, label %25, label %61

25:                                               ; preds = %23
  %26 = or i64 %24, 1
  %27 = or i64 %24, 2
  %28 = or i64 %24, 3
  br label %29

29:                                               ; preds = %29, %25
  %30 = phi i64 [ 0, %25 ], [ %59, %29 ]
  %31 = getelementptr inbounds double*, double** %4, i64 %30
  %32 = load double*, double** %31, align 8
  %33 = getelementptr inbounds double, double* %32, i64 %24
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds double, double* %5, i64 %30
  %37 = bitcast double* %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = load double*, double** %31, align 8
  %39 = getelementptr inbounds double, double* %38, i64 %26
  %40 = bitcast double* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = add nsw i64 %30, %15
  %43 = getelementptr inbounds double, double* %5, i64 %42
  %44 = bitcast double* %43 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load double*, double** %31, align 8
  %46 = getelementptr inbounds double, double* %45, i64 %27
  %47 = bitcast double* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = add nsw i64 %30, %17
  %50 = getelementptr inbounds double, double* %5, i64 %49
  %51 = bitcast double* %50 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load double*, double** %31, align 8
  %53 = getelementptr inbounds double, double* %52, i64 %28
  %54 = bitcast double* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = add nsw i64 %30, %19
  %57 = getelementptr inbounds double, double* %5, i64 %56
  %58 = bitcast double* %57 to i64*
  store i64 %55, i64* %58, align 8
  %59 = add nuw nsw i64 %30, 1
  %60 = icmp eq i64 %59, %21
  br i1 %60, label %61, label %29

61:                                               ; preds = %29, %23
  br i1 %14, label %62, label %63

62:                                               ; preds = %61
  tail call void @ddct(i32 %0, i32 %3, double* %5, i32* %6, double* %7) #7
  tail call void @ddct(i32 %0, i32 %3, double* %16, i32* %6, double* %7) #7
  tail call void @ddct(i32 %0, i32 %3, double* %18, i32* %6, double* %7) #7
  tail call void @ddct(i32 %0, i32 %3, double* %20, i32* %6, double* %7) #7
  br label %64

63:                                               ; preds = %61
  tail call void @ddst(i32 %0, i32 %3, double* %5, i32* %6, double* %7) #7
  tail call void @ddst(i32 %0, i32 %3, double* %16, i32* %6, double* %7) #7
  tail call void @ddst(i32 %0, i32 %3, double* %18, i32* %6, double* %7) #7
  tail call void @ddst(i32 %0, i32 %3, double* %20, i32* %6, double* %7) #7
  br label %64

64:                                               ; preds = %63, %62
  br i1 %11, label %65, label %101

65:                                               ; preds = %64
  %66 = or i64 %24, 1
  %67 = or i64 %24, 2
  %68 = or i64 %24, 3
  br label %69

69:                                               ; preds = %69, %65
  %70 = phi i64 [ 0, %65 ], [ %99, %69 ]
  %71 = getelementptr inbounds double, double* %5, i64 %70
  %72 = bitcast double* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds double*, double** %4, i64 %70
  %75 = load double*, double** %74, align 8
  %76 = getelementptr inbounds double, double* %75, i64 %24
  %77 = bitcast double* %76 to i64*
  store i64 %73, i64* %77, align 8
  %78 = add nsw i64 %70, %15
  %79 = getelementptr inbounds double, double* %5, i64 %78
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = load double*, double** %74, align 8
  %83 = getelementptr inbounds double, double* %82, i64 %66
  %84 = bitcast double* %83 to i64*
  store i64 %81, i64* %84, align 8
  %85 = add nsw i64 %70, %17
  %86 = getelementptr inbounds double, double* %5, i64 %85
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load double*, double** %74, align 8
  %90 = getelementptr inbounds double, double* %89, i64 %67
  %91 = bitcast double* %90 to i64*
  store i64 %88, i64* %91, align 8
  %92 = add nsw i64 %70, %19
  %93 = getelementptr inbounds double, double* %5, i64 %92
  %94 = bitcast double* %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = load double*, double** %74, align 8
  %97 = getelementptr inbounds double, double* %96, i64 %68
  %98 = bitcast double* %97 to i64*
  store i64 %95, i64* %98, align 8
  %99 = add nuw nsw i64 %70, 1
  %100 = icmp eq i64 %99, %22
  br i1 %100, label %101, label %69

101:                                              ; preds = %69, %64
  %102 = add nuw i64 %24, 4
  %103 = trunc i64 %102 to i32
  %104 = icmp slt i32 %103, %1
  br i1 %104, label %23, label %232

105:                                              ; preds = %8
  %106 = icmp eq i32 %1, 2
  br i1 %106, label %107, label %232

107:                                              ; preds = %105
  %108 = icmp sgt i32 %0, 0
  br i1 %108, label %109, label %166

109:                                              ; preds = %107
  %110 = sext i32 %0 to i64
  %111 = zext i32 %0 to i64
  %112 = and i64 %111, 1
  %113 = icmp eq i32 %0, 1
  br i1 %113, label %149, label %114

114:                                              ; preds = %109
  %115 = sub nsw i64 %111, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %146, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %147, %116 ]
  %119 = getelementptr inbounds double*, double** %4, i64 %117
  %120 = bitcast double** %119 to i64**
  %121 = load i64*, i64** %120, align 8
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds double, double* %5, i64 %117
  %124 = bitcast double* %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = load double*, double** %119, align 8
  %126 = getelementptr inbounds double, double* %125, i64 1
  %127 = bitcast double* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = add nsw i64 %117, %110
  %130 = getelementptr inbounds double, double* %5, i64 %129
  %131 = bitcast double* %130 to i64*
  store i64 %128, i64* %131, align 8
  %132 = or i64 %117, 1
  %133 = getelementptr inbounds double*, double** %4, i64 %132
  %134 = bitcast double** %133 to i64**
  %135 = load i64*, i64** %134, align 8
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds double, double* %5, i64 %132
  %138 = bitcast double* %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = load double*, double** %133, align 8
  %140 = getelementptr inbounds double, double* %139, i64 1
  %141 = bitcast double* %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = add nsw i64 %132, %110
  %144 = getelementptr inbounds double, double* %5, i64 %143
  %145 = bitcast double* %144 to i64*
  store i64 %142, i64* %145, align 8
  %146 = add nuw nsw i64 %117, 2
  %147 = add i64 %118, -2
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %116

149:                                              ; preds = %116, %109
  %150 = phi i64 [ 0, %109 ], [ %146, %116 ]
  %151 = icmp eq i64 %112, 0
  br i1 %151, label %166, label %152

152:                                              ; preds = %149
  %153 = getelementptr inbounds double*, double** %4, i64 %150
  %154 = bitcast double** %153 to i64**
  %155 = load i64*, i64** %154, align 8
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds double, double* %5, i64 %150
  %158 = bitcast double* %157 to i64*
  store i64 %156, i64* %158, align 8
  %159 = load double*, double** %153, align 8
  %160 = getelementptr inbounds double, double* %159, i64 1
  %161 = bitcast double* %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = add nsw i64 %150, %110
  %164 = getelementptr inbounds double, double* %5, i64 %163
  %165 = bitcast double* %164 to i64*
  store i64 %162, i64* %165, align 8
  br label %166

166:                                              ; preds = %152, %149, %107
  %167 = icmp eq i32 %2, 0
  br i1 %167, label %168, label %171

168:                                              ; preds = %166
  tail call void @ddct(i32 %0, i32 %3, double* %5, i32* %6, double* %7) #7
  %169 = sext i32 %0 to i64
  %170 = getelementptr inbounds double, double* %5, i64 %169
  tail call void @ddct(i32 %0, i32 %3, double* %170, i32* %6, double* %7) #7
  br label %174

171:                                              ; preds = %166
  tail call void @ddst(i32 %0, i32 %3, double* %5, i32* %6, double* %7) #7
  %172 = sext i32 %0 to i64
  %173 = getelementptr inbounds double, double* %5, i64 %172
  tail call void @ddst(i32 %0, i32 %3, double* %173, i32* %6, double* %7) #7
  br label %174

174:                                              ; preds = %171, %168
  br i1 %108, label %175, label %232

175:                                              ; preds = %174
  %176 = sext i32 %0 to i64
  %177 = zext i32 %0 to i64
  %178 = and i64 %177, 1
  %179 = icmp eq i32 %0, 1
  br i1 %179, label %215, label %180

180:                                              ; preds = %175
  %181 = sub nsw i64 %177, %178
  br label %182

182:                                              ; preds = %182, %180
  %183 = phi i64 [ 0, %180 ], [ %212, %182 ]
  %184 = phi i64 [ %181, %180 ], [ %213, %182 ]
  %185 = getelementptr inbounds double, double* %5, i64 %183
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds double*, double** %4, i64 %183
  %189 = bitcast double** %188 to i64**
  %190 = load i64*, i64** %189, align 8
  store i64 %187, i64* %190, align 8
  %191 = add nsw i64 %183, %176
  %192 = getelementptr inbounds double, double* %5, i64 %191
  %193 = bitcast double* %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = load double*, double** %188, align 8
  %196 = getelementptr inbounds double, double* %195, i64 1
  %197 = bitcast double* %196 to i64*
  store i64 %194, i64* %197, align 8
  %198 = or i64 %183, 1
  %199 = getelementptr inbounds double, double* %5, i64 %198
  %200 = bitcast double* %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = getelementptr inbounds double*, double** %4, i64 %198
  %203 = bitcast double** %202 to i64**
  %204 = load i64*, i64** %203, align 8
  store i64 %201, i64* %204, align 8
  %205 = add nsw i64 %198, %176
  %206 = getelementptr inbounds double, double* %5, i64 %205
  %207 = bitcast double* %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = load double*, double** %202, align 8
  %210 = getelementptr inbounds double, double* %209, i64 1
  %211 = bitcast double* %210 to i64*
  store i64 %208, i64* %211, align 8
  %212 = add nuw nsw i64 %183, 2
  %213 = add i64 %184, -2
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %182

215:                                              ; preds = %182, %175
  %216 = phi i64 [ 0, %175 ], [ %212, %182 ]
  %217 = icmp eq i64 %178, 0
  br i1 %217, label %232, label %218

218:                                              ; preds = %215
  %219 = getelementptr inbounds double, double* %5, i64 %216
  %220 = bitcast double* %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds double*, double** %4, i64 %216
  %223 = bitcast double** %222 to i64**
  %224 = load i64*, i64** %223, align 8
  store i64 %221, i64* %224, align 8
  %225 = add nsw i64 %216, %176
  %226 = getelementptr inbounds double, double* %5, i64 %225
  %227 = bitcast double* %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = load double*, double** %222, align 8
  %230 = getelementptr inbounds double, double* %229, i64 1
  %231 = bitcast double* %230 to i64*
  store i64 %228, i64* %231, align 8
  br label %232

232:                                              ; preds = %218, %215, %101, %174, %105
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ddst2d(i32, i32, i32, double** nocapture readonly, double*, i32*, double*) local_unnamed_addr #0 {
  %8 = icmp slt i32 %0, %1
  %9 = select i1 %8, i32 %1, i32 %0
  %10 = load i32, i32* %5, align 4
  %11 = shl i32 %10, 2
  %12 = icmp sgt i32 %9, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = ashr i32 %9, 2
  tail call void @makewt(i32 %14, i32* %5, double* %6) #7
  br label %15

15:                                               ; preds = %13, %7
  %16 = phi i32 [ %14, %13 ], [ %10, %7 ]
  %17 = getelementptr inbounds i32, i32* %5, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %9, %18
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = sext i32 %16 to i64
  %22 = getelementptr inbounds double, double* %6, i64 %21
  tail call void @makect(i32 %9, i32* %5, double* %22) #7
  br label %23

23:                                               ; preds = %20, %15
  %24 = icmp eq double* %4, null
  br i1 %24, label %25, label %43

25:                                               ; preds = %23
  %26 = icmp eq i32 %1, 2
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = shl nsw i32 %0, 1
  br label %33

29:                                               ; preds = %25
  %30 = shl nsw i32 %0, 2
  %31 = icmp slt i32 %1, 2
  %32 = select i1 %31, i32 %0, i32 %30
  br label %33

33:                                               ; preds = %29, %27
  %34 = phi i32 [ %28, %27 ], [ %32, %29 ]
  %35 = sext i32 %34 to i64
  %36 = shl nsw i64 %35, 3
  %37 = tail call noalias i8* @malloc(i64 %36) #7
  %38 = bitcast i8* %37 to double*
  %39 = icmp eq i8* %37, null
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %42 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %41) #8
  tail call void @exit(i32 1) #9
  unreachable

43:                                               ; preds = %33, %23
  %44 = phi double* [ %38, %33 ], [ %4, %23 ]
  %45 = phi i32 [ 1, %33 ], [ 0, %23 ]
  %46 = icmp sgt i32 %0, 0
  br i1 %46, label %47, label %55

47:                                               ; preds = %43
  %48 = zext i32 %0 to i64
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %53, %49 ]
  %51 = getelementptr inbounds double*, double** %3, i64 %50
  %52 = load double*, double** %51, align 8
  tail call void @ddst(i32 %1, i32 %2, double* %52, i32* %5, double* %6) #7
  %53 = add nuw nsw i64 %50, 1
  %54 = icmp eq i64 %53, %48
  br i1 %54, label %55, label %49

55:                                               ; preds = %49, %43
  tail call void @ddxt2d_sub(i32 %0, i32 %1, i32 1, i32 %2, double** %3, double* %44, i32* %5, double* %6)
  %56 = icmp eq i32 %45, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %55
  %58 = bitcast double* %44 to i8*
  tail call void @free(i8* %58) #7
  br label %59

59:                                               ; preds = %55, %57
  ret void
}

declare void @ddst(i32, i32, double*, i32*, double*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind }
attributes #7 = { nounwind }
attributes #8 = { cold }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
