; ModuleID = '../../third_party/skia/src/shaders/gradients/SkGradientShader.cpp'
source_filename = "../../third_party/skia/src/shaders/gradients/SkGradientShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkGradientShaderBase = type <{ %class.SkShaderBase.base, %class.SkMatrix, i32, i8, [7 x i8], %struct.SkRGBA4f*, float*, i32, [4 x i8], %class.sk_sp, %class.SkAutoSTMalloc, i8, [7 x i8] }>
%class.SkShaderBase.base = type { %class.SkShader.base, %class.SkMatrix }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRGBA4f = type { float, float, float, float }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%class.SkAutoSTMalloc = type { i8*, %union.anon }
%union.anon = type { [20 x i32] }
%struct.SkColor4fXformer = type { %struct.SkRGBA4f*, %class.SkSTArray.26 }
%class.SkSTArray.26 = type { %class.SkAlignedSTStorage.27, %class.SkTArray }
%class.SkAlignedSTStorage.27 = type { [64 x i8] }
%class.SkTArray = type { %struct.SkRGBA4f*, i64 }
%"struct.SkGradientShaderBase::Descriptor" = type <{ %class.SkMatrix*, %struct.SkRGBA4f*, %class.sk_sp, float*, i32, i32, i32, [4 x i8] }>
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.10*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.10*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.10*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.10 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.11, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.11 = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.6", [7 x i8] }>
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%struct.SkISize = type { i32, i32 }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%"class.SkGradientShaderBase::DescriptorScope" = type { %"struct.SkGradientShaderBase::Descriptor.base", %class.SkSTArray, %class.SkSTArray.12, %class.SkMatrix }
%"struct.SkGradientShaderBase::Descriptor.base" = type <{ %class.SkMatrix*, %struct.SkRGBA4f*, %class.sk_sp, float*, i32, i32, i32 }>
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [256 x i8] }
%class.SkSTArray.12 = type { %class.SkAlignedSTStorage.13, %class.SkTArray.14 }
%class.SkAlignedSTStorage.13 = type { [64 x i8] }
%class.SkTArray.14 = type { float*, i64 }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.16*, i32, [4 x i8], void (%class.sk_sp.17*, %class.SkReadBuffer*)**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.17*, %class.SkReadBuffer*)* }
%class.sk_sp.17 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.16 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.16*, i8*, i64, i8*)*, i8* }
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%struct.SkStageRec = type { %class.SkRasterPipeline*, %class.SkArenaAlloc*, i32, %class.SkColorSpace*, %class.SkPaint*, %class.SkMatrix*, %class.SkMatrixProvider* }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkPaint = type <{ %class.sk_sp.20, %class.sk_sp.21, %class.sk_sp.22, %class.sk_sp.23, %class.sk_sp.24, %struct.SkRGBA4f, float, float, %union.anon.25, [4 x i8] }>
%class.sk_sp.20 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.21 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.22 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.23 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.24 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%union.anon.25 = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkM44 = type { [16 x float] }
%class.SkRasterPipeline_ = type { %class.SkRasterPipeline, %class.SkSTArenaAlloc }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [256 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%struct.SkRasterPipeline_DecalTileCtx = type { [16 x i32], float, float }
%struct.SkRasterPipeline_GradientCtx = type { i64, [4 x float*], [4 x float*], float*, i8 }
%"class.skvm::Builder" = type <{ %class.SkTHashMap.29, %"class.std::__1::vector", %"class.std::__1::vector.41", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap.29 = type { %class.SkTHashTable.30 }
%class.SkTHashTable.30 = type { i32, i32, %class.SkAutoTArray.31 }
%class.SkAutoTArray.31 = type { %"class.std::__1::unique_ptr.32" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.38" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.skvm::Instruction"* }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { i32*, i32*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { i32* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Coord" = type { %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.41" }
%"struct.skvm::Ptr" = type { i32 }
%"struct.skvm::I32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { float*, float*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.FB = type { %"struct.skvx::Vec", %"struct.skvx::Vec" }
%"struct.skvx::Vec" = type { %"struct.skvx::Vec.56", %"struct.skvx::Vec.56" }
%"struct.skvx::Vec.56" = type { %"struct.skvx::Vec.57", %"struct.skvx::Vec.57" }
%"struct.skvx::Vec.57" = type { float }
%"struct.SkShader::GradientInfo" = type { i32, i32*, float*, [2 x %struct.SkPoint], [2 x float], i32, i32 }
%struct.SkPoint = type { float, float }
%struct.ColorConverter = type { %class.SkSTArray.58 }
%class.SkSTArray.58 = type { %class.SkAlignedSTStorage.59, %class.SkTArray }
%class.SkAlignedSTStorage.59 = type { [32 x i8] }
%struct.ColorStopOptimizer = type <{ %struct.SkRGBA4f*, float*, i32, [4 x i8] }>
%class.SkLinearGradient = type { %class.SkGradientShaderBase.base, %struct.SkPoint, %struct.SkPoint, [4 x i8] }
%class.SkGradientShaderBase.base = type <{ %class.SkShaderBase.base, %class.SkMatrix, i32, i8, [7 x i8], %struct.SkRGBA4f*, float*, i32, [4 x i8], %class.sk_sp, %class.SkAutoSTMalloc, i8 }>
%class.SkRadialGradient = type { %class.SkGradientShaderBase.base, %struct.SkPoint, float }
%class.SkSweepGradient = type { %class.SkGradientShaderBase.base, %struct.SkPoint, float, float, [4 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkRuntimeEffect = type opaque
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%class.SkStageUpdater = type { i32 (...)** }

$_ZN18ColorStopOptimizerC2EPK8SkRGBA4fIL11SkAlphaType3EEPKfi10SkTileMode = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK12SkShaderBase18getFlattenableTypeEv = comdat any

$_ZNK12SkShaderBase10isConstantEv = comdat any

$_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode = comdat any

$_ZNK12SkShaderBase15asRuntimeEffectEv = comdat any

$_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc = comdat any

$_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec = comdat any

$_ZN4skvm8Uniforms5pushFEf = comdat any

$_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE = comdat any

$_ZN8SkTArrayIfLb1EE12checkReallocEiNS0_11ReallocTypeE = comdat any

@_ZTV20SkGradientShaderBase = hidden unnamed_addr constant { [23 x i8*] } { [23 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkGradientShaderBase*)* @_ZN20SkGradientShaderBaseD2Ev to i8*), i8* bitcast (void (%class.SkGradientShaderBase*)* @_ZN20SkGradientShaderBaseD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkGradientShaderBase*, %class.SkWriteBuffer*)* @_ZNK20SkGradientShaderBase7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkShaderBase*)* @_ZNK12SkShaderBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkGradientShaderBase*)* @_ZNK20SkGradientShaderBase8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*), i8* bitcast (i1 (%class.SkShaderBase*)* @_ZNK12SkShaderBase10isConstantEv to i8*), i8* bitcast (void ()* @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (%class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode to i8*), i8* bitcast (%class.SkRuntimeEffect* (%class.SkShaderBase*)* @_ZNK12SkShaderBase15asRuntimeEffectEv to i8*), i8* bitcast (void (%class.sk_sp.21*, %class.SkShaderBase*, %class.SkMatrix*)* @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix to i8*), i8* bitcast (%"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc to i8*), i8* bitcast (i1 (%class.SkGradientShaderBase*, i32*)* @_ZNK20SkGradientShaderBase18onAsLuminanceColorEPj to i8*), i8* bitcast (i1 (%class.SkGradientShaderBase*, %struct.SkStageRec*)* @_ZNK20SkGradientShaderBase14onAppendStagesERK10SkStageRec to i8*), i8* bitcast (%class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec to i8*), i8* bitcast (void (%"struct.skvm::Color"*, %class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)* @_ZNK20SkGradientShaderBase9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrixE9circlePos = internal constant [3 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00], align 4
@_ZZN16SkGradientShader9MakeSweepEffPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModeffjPK8SkMatrixE8clampPos = internal constant [3 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00], align 4
@.str = private unnamed_addr constant [17 x i8] c"SkLinearGradient\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"SkRadialGradient\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"SkSweepGradient\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"SkTwoPointConicalGradient\00", align 1

@_ZN20SkGradientShaderBaseD1Ev = hidden unnamed_addr alias void (%class.SkGradientShaderBase*), void (%class.SkGradientShaderBase*)* @_ZN20SkGradientShaderBaseD2Ev
@_ZN16SkColor4fXformerC1EPK8SkRGBA4fIL11SkAlphaType3EEiP12SkColorSpaceS6_ = hidden unnamed_addr alias void (%struct.SkColor4fXformer*, %struct.SkRGBA4f*, i32, %class.SkColorSpace*, %class.SkColorSpace*), void (%struct.SkColor4fXformer*, %struct.SkRGBA4f*, i32, %class.SkColorSpace*, %class.SkColorSpace*)* @_ZN16SkColor4fXformerC2EPK8SkRGBA4fIL11SkAlphaType3EEiP12SkColorSpaceS6_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20SkGradientShaderBase10Descriptor7flattenER13SkWriteBuffer(%"struct.SkGradientShaderBase::Descriptor"* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.10, align 8
  %4 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 3
  %5 = load float*, float** %4, align 8
  %6 = icmp eq float* %5, null
  %7 = select i1 %6, i32 0, i32 -2147483648
  %8 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 0
  %9 = load %class.SkMatrix*, %class.SkMatrix** %8, align 8
  %10 = icmp eq %class.SkMatrix* %9, null
  %11 = or i32 %7, 1073741824
  %12 = select i1 %10, i32 %7, i32 %11
  %13 = bitcast %class.sk_sp.10* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #14
  %14 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %3, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %14, align 8
  %15 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 2, i32 0
  %16 = load %class.SkColorSpace*, %class.SkColorSpace** %15, align 8
  %17 = icmp eq %class.SkColorSpace* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store %class.SkData* null, %class.SkData** %14, align 8
  br label %23

19:                                               ; preds = %2
  call void @_ZNK12SkColorSpace9serializeEv(%class.sk_sp.10* nonnull sret %3, %class.SkColorSpace* nonnull %16) #14
  %20 = load %class.SkData*, %class.SkData** %14, align 8
  %21 = icmp eq %class.SkData* %20, null
  %22 = or i32 %12, 536870912
  br i1 %21, label %23, label %24

23:                                               ; preds = %18, %19
  br label %24

24:                                               ; preds = %19, %23
  %25 = phi i32 [ %12, %23 ], [ %22, %19 ]
  %26 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 5
  %27 = load i32, i32* %26, align 4
  %28 = shl i32 %27, 8
  %29 = or i32 %25, %28
  %30 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 6
  %31 = load i32, i32* %30, align 8
  %32 = or i32 %29, %31
  %33 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %34 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %33, align 8
  %35 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %34, i64 9
  %36 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %35, align 8
  call void %36(%class.SkWriteBuffer* %1, i32 %32) #14
  %37 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 1
  %38 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %37, align 8
  %39 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %0, i64 0, i32 4
  %40 = load i32, i32* %39, align 8
  %41 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)***
  %42 = load void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)**, void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)*** %41, align 8
  %43 = getelementptr inbounds void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)*, void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)** %42, i64 15
  %44 = load void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)*, void (%class.SkWriteBuffer*, %struct.SkRGBA4f*, i32)** %43, align 8
  call void %44(%class.SkWriteBuffer* %1, %struct.SkRGBA4f* %38, i32 %40) #14
  %45 = load %class.SkData*, %class.SkData** %14, align 8
  %46 = icmp eq %class.SkData* %45, null
  br i1 %46, label %56, label %47

47:                                               ; preds = %24
  %48 = getelementptr inbounds %class.SkData, %class.SkData* %45, i64 0, i32 3
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %class.SkData, %class.SkData* %45, i64 0, i32 4
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i8*, i64)***
  %53 = load void (%class.SkWriteBuffer*, i8*, i64)**, void (%class.SkWriteBuffer*, i8*, i64)*** %52, align 8
  %54 = getelementptr inbounds void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %53, i64 3
  %55 = load void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %54, align 8
  call void %55(%class.SkWriteBuffer* %1, i8* %49, i64 %51) #14
  br label %56

56:                                               ; preds = %24, %47
  %57 = load float*, float** %4, align 8
  %58 = icmp eq float* %57, null
  br i1 %58, label %65, label %59

59:                                               ; preds = %56
  %60 = load i32, i32* %39, align 8
  %61 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float*, i32)***
  %62 = load void (%class.SkWriteBuffer*, float*, i32)**, void (%class.SkWriteBuffer*, float*, i32)*** %61, align 8
  %63 = getelementptr inbounds void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %62, i64 6
  %64 = load void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %63, align 8
  call void %64(%class.SkWriteBuffer* %1, float* nonnull %57, i32 %60) #14
  br label %65

65:                                               ; preds = %56, %59
  %66 = load %class.SkMatrix*, %class.SkMatrix** %8, align 8
  %67 = icmp eq %class.SkMatrix* %66, null
  br i1 %67, label %73, label %68

68:                                               ; preds = %65
  %69 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %class.SkMatrix*)***
  %70 = load void (%class.SkWriteBuffer*, %class.SkMatrix*)**, void (%class.SkWriteBuffer*, %class.SkMatrix*)*** %69, align 8
  %71 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkMatrix*)*, void (%class.SkWriteBuffer*, %class.SkMatrix*)** %70, i64 20
  %72 = load void (%class.SkWriteBuffer*, %class.SkMatrix*)*, void (%class.SkWriteBuffer*, %class.SkMatrix*)** %71, align 8
  call void %72(%class.SkWriteBuffer* %1, %class.SkMatrix* nonnull dereferenceable(40) %66) #14
  br label %73

73:                                               ; preds = %65, %68
  %74 = load %class.SkData*, %class.SkData** %14, align 8
  %75 = icmp eq %class.SkData* %74, null
  br i1 %75, label %82, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %class.SkData, %class.SkData* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %82

80:                                               ; preds = %76
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %74) #14
  %81 = bitcast %class.SkData* %74 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %81) #14
  br label %82

82:                                               ; preds = %73, %76, %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK12SkColorSpace9serializeEv(%class.sk_sp.10* sret, %class.SkColorSpace*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20SkGradientShaderBase15DescriptorScope9unflattenER12SkReadBuffer(%"class.SkGradientShaderBase::DescriptorScope"*, %class.SkReadBuffer* dereferenceable(136)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.10, align 8
  %4 = alloca %class.sk_sp, align 8
  %5 = tail call i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer* %1) #14
  %6 = lshr i32 %5, 8
  %7 = and i32 %6, 15
  %8 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 5
  store i32 %7, i32* %8, align 4
  %9 = and i32 %5, 255
  %10 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 6
  store i32 %9, i32* %10, align 8
  %11 = tail call i32 @_ZN12SkReadBuffer13getArrayCountEv(%class.SkReadBuffer* %1) #14
  %12 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 4
  store i32 %11, i32* %12, align 8
  %13 = sext i32 %11 to i64
  %14 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %class.SkReadBuffer* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = lshr i64 %19, 4
  %21 = icmp ult i64 %20, %13
  br i1 %21, label %22, label %23

22:                                               ; preds = %2
  tail call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #14
  br label %23

23:                                               ; preds = %22, %2
  %24 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 13
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %190

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 1, i32 0, i32 0, i64 256
  %29 = bitcast i8* %28 to %class.SkTArray*
  %30 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 1, i32 0, i32 0, i64 264
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 2147483647
  %36 = icmp sgt i32 %11, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %27
  %38 = sub nsw i32 %11, %35
  tail call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %29, i32 %38, i32 1) #14
  %39 = load i64, i64* %31, align 8
  %40 = lshr i64 %39, 1
  %41 = trunc i64 %40 to i32
  %42 = add i32 %38, %41
  %43 = shl i32 %42, 1
  %44 = zext i32 %43 to i64
  %45 = and i64 %39, -4294967295
  %46 = or i64 %45, %44
  store i64 %46, i64* %31, align 8
  br label %54

47:                                               ; preds = %27
  %48 = icmp slt i32 %11, %35
  br i1 %48, label %49, label %54

49:                                               ; preds = %47
  %50 = shl nsw i64 %13, 1
  %51 = and i64 %50, 4294967294
  %52 = and i64 %32, -4294967295
  %53 = or i64 %52, %51
  store i64 %53, i64* %31, align 8
  tail call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %29, i32 0, i32 2) #14
  br label %54

54:                                               ; preds = %37, %47, %49
  %55 = bitcast i8* %28 to %struct.SkRGBA4f**
  %56 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %55, align 8
  %57 = load i32, i32* %12, align 8
  %58 = sext i32 %57 to i64
  %59 = tail call zeroext i1 @_ZN12SkReadBuffer16readColor4fArrayEP8SkRGBA4fIL11SkAlphaType3EEm(%class.SkReadBuffer* %1, %struct.SkRGBA4f* %56, i64 %58) #14
  br i1 %59, label %60, label %190

60:                                               ; preds = %54
  %61 = bitcast i8* %28 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 1
  %64 = bitcast %struct.SkRGBA4f** %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = and i32 %5, 536870912
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %115, label %67

67:                                               ; preds = %60
  %68 = bitcast %class.sk_sp.10* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #14
  %69 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %3, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %69, align 8
  call void @_ZN12SkReadBuffer19readByteArrayAsDataEv(%class.sk_sp.10* nonnull sret %3, %class.SkReadBuffer* %1) #14
  %70 = bitcast %class.sk_sp* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #14
  %71 = load %class.SkData*, %class.SkData** %69, align 8
  %72 = icmp eq %class.SkData* %71, null
  br i1 %72, label %80, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %class.SkData, %class.SkData* %71, i64 0, i32 3
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %class.SkData, %class.SkData* %71, i64 0, i32 4
  %77 = load i64, i64* %76, align 8
  call void @_ZN12SkColorSpace11DeserializeEPKvm(%class.sk_sp* nonnull sret %4, i8* %75, i64 %77) #14
  %78 = bitcast %class.sk_sp* %4 to i64*
  %79 = load i64, i64* %78, align 8
  br label %82

80:                                               ; preds = %67
  %81 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %81, align 8
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i64 [ 0, %80 ], [ %79, %73 ]
  %84 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 2
  %85 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %85, align 8
  %86 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %84, i64 0, i32 0
  %87 = load %class.SkColorSpace*, %class.SkColorSpace** %86, align 8
  %88 = bitcast %class.sk_sp* %84 to i64*
  store i64 %83, i64* %88, align 8
  %89 = icmp eq %class.SkColorSpace* %87, null
  br i1 %89, label %96, label %90

90:                                               ; preds = %82
  %91 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = atomicrmw add i32* %91, i32 -1 acq_rel
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %96

94:                                               ; preds = %90
  %95 = bitcast %class.SkColorSpace* %87 to i8*
  call void @_ZdlPv(i8* %95) #15
  br label %96

96:                                               ; preds = %82, %90, %94
  %97 = load %class.SkColorSpace*, %class.SkColorSpace** %85, align 8
  %98 = icmp eq %class.SkColorSpace* %97, null
  br i1 %98, label %105, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = atomicrmw add i32* %100, i32 -1 acq_rel
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = bitcast %class.SkColorSpace* %97 to i8*
  call void @_ZdlPv(i8* %104) #15
  br label %105

105:                                              ; preds = %96, %99, %103
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #14
  %106 = load %class.SkData*, %class.SkData** %69, align 8
  %107 = icmp eq %class.SkData* %106, null
  br i1 %107, label %114, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds %class.SkData, %class.SkData* %106, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw add i32* %109, i32 -1 acq_rel
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %114

112:                                              ; preds = %108
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %106) #14
  %113 = bitcast %class.SkData* %106 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %113) #14
  br label %114

114:                                              ; preds = %105, %108, %112
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #14
  br label %125

115:                                              ; preds = %60
  %116 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 2, i32 0
  %117 = load %class.SkColorSpace*, %class.SkColorSpace** %116, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %116, align 8
  %118 = icmp eq %class.SkColorSpace* %117, null
  br i1 %118, label %125, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %117, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = atomicrmw add i32* %120, i32 -1 acq_rel
  %122 = icmp eq i32 %121, 1
  br i1 %122, label %123, label %125

123:                                              ; preds = %119
  %124 = bitcast %class.SkColorSpace* %117 to i8*
  tail call void @_ZdlPv(i8* %124) #15
  br label %125

125:                                              ; preds = %123, %119, %115, %114
  %126 = icmp slt i32 %5, 0
  br i1 %126, label %127, label %177

127:                                              ; preds = %125
  %128 = load i32, i32* %12, align 8
  %129 = sext i32 %128 to i64
  %130 = load i64, i64* %15, align 8
  %131 = load i64, i64* %17, align 8
  %132 = sub i64 %130, %131
  %133 = lshr i64 %132, 2
  %134 = icmp ult i64 %133, %129
  br i1 %134, label %135, label %136

135:                                              ; preds = %127
  call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #14
  br label %136

136:                                              ; preds = %135, %127
  %137 = load i8, i8* %24, align 8, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %190

139:                                              ; preds = %136
  %140 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 2, i32 0, i32 0, i64 64
  %141 = bitcast i8* %140 to %class.SkTArray.14*
  %142 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 2, i32 0, i32 0, i64 72
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = lshr i64 %144, 1
  %146 = trunc i64 %145 to i32
  %147 = and i32 %146, 2147483647
  %148 = icmp sgt i32 %128, %147
  br i1 %148, label %149, label %159

149:                                              ; preds = %139
  %150 = sub nsw i32 %128, %147
  call void @_ZN8SkTArrayIfLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.14* %141, i32 %150, i32 1) #14
  %151 = load i64, i64* %143, align 8
  %152 = lshr i64 %151, 1
  %153 = trunc i64 %152 to i32
  %154 = add i32 %150, %153
  %155 = shl i32 %154, 1
  %156 = zext i32 %155 to i64
  %157 = and i64 %151, -4294967295
  %158 = or i64 %157, %156
  store i64 %158, i64* %143, align 8
  br label %166

159:                                              ; preds = %139
  %160 = icmp slt i32 %128, %147
  br i1 %160, label %161, label %166

161:                                              ; preds = %159
  %162 = shl nsw i64 %129, 1
  %163 = and i64 %162, 4294967294
  %164 = and i64 %144, -4294967295
  %165 = or i64 %164, %163
  store i64 %165, i64* %143, align 8
  call void @_ZN8SkTArrayIfLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.14* %141, i32 0, i32 2) #14
  br label %166

166:                                              ; preds = %149, %159, %161
  %167 = bitcast i8* %140 to float**
  %168 = load float*, float** %167, align 8
  %169 = load i32, i32* %12, align 8
  %170 = sext i32 %169 to i64
  %171 = call zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer* %1, float* %168, i64 %170) #14
  br i1 %171, label %172, label %190

172:                                              ; preds = %166
  %173 = bitcast i8* %140 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 3
  %176 = bitcast float** %175 to i64*
  store i64 %174, i64* %176, align 8
  br label %179

177:                                              ; preds = %125
  %178 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 3
  store float* null, float** %178, align 8
  br label %179

179:                                              ; preds = %177, %172
  %180 = and i32 %5, 1073741824
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %185, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 3
  %184 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 0
  store %class.SkMatrix* %183, %class.SkMatrix** %184, align 8
  call void @_ZN12SkReadBuffer10readMatrixEP8SkMatrix(%class.SkReadBuffer* %1, %class.SkMatrix* %183) #14
  br label %187

185:                                              ; preds = %179
  %186 = getelementptr inbounds %"class.SkGradientShaderBase::DescriptorScope", %"class.SkGradientShaderBase::DescriptorScope"* %0, i64 0, i32 0, i32 0
  store %class.SkMatrix* null, %class.SkMatrix** %186, align 8
  br label %187

187:                                              ; preds = %185, %182
  %188 = load i8, i8* %24, align 8, !range !2
  %189 = icmp eq i8 %188, 0
  br label %190

190:                                              ; preds = %136, %23, %166, %54, %187
  %191 = phi i1 [ %189, %187 ], [ false, %54 ], [ false, %166 ], [ false, %23 ], [ false, %136 ]
  ret i1 %191
}

declare i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare i32 @_ZN12SkReadBuffer13getArrayCountEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare zeroext i1 @_ZN12SkReadBuffer16readColor4fArrayEP8SkRGBA4fIL11SkAlphaType3EEm(%class.SkReadBuffer*, %struct.SkRGBA4f*, i64) local_unnamed_addr #2

declare void @_ZN12SkReadBuffer19readByteArrayAsDataEv(%class.sk_sp.10* sret, %class.SkReadBuffer*) local_unnamed_addr #2

declare void @_ZN12SkColorSpace11DeserializeEPKvm(%class.sk_sp* sret, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer*, float*, i64) local_unnamed_addr #2

declare void @_ZN12SkReadBuffer10readMatrixEP8SkMatrix(%class.SkReadBuffer*, %class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20SkGradientShaderBaseC2ERKNS_10DescriptorERK8SkMatrix(%class.SkGradientShaderBase*, %"struct.SkGradientShaderBase::Descriptor"* nocapture readonly dereferenceable(48), %class.SkMatrix* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = bitcast %class.SkGradientShaderBase* %0 to %class.SkShaderBase*
  %5 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 0
  %6 = load %class.SkMatrix*, %class.SkMatrix** %5, align 8
  tail call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* %4, %class.SkMatrix* %6) #14
  %7 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTV20SkGradientShaderBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 1
  %9 = bitcast %class.SkMatrix* %8 to i8*
  %10 = bitcast %class.SkMatrix* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 40, i1 false)
  %11 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 9
  %12 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 2, i32 0
  %13 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8
  %14 = icmp eq %class.SkColorSpace* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  %17 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 1 monotonic
  store %class.SkColorSpace* %13, %class.SkColorSpace** %16, align 8
  br label %20

19:                                               ; preds = %3
  tail call void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp* sret %11) #14
  br label %20

20:                                               ; preds = %19, %15
  %21 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 10
  %22 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 10, i32 1
  %23 = bitcast %class.SkAutoSTMalloc* %21 to %union.anon**
  store %union.anon* %22, %union.anon** %23, align 8
  %24 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 11
  store i8 1, i8* %24, align 8
  %25 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 1, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = trunc i32 %26 to i8
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %20
  %30 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %8) #14
  %31 = zext i8 %30 to i32
  store i32 %31, i32* %25, align 4
  br label %32

32:                                               ; preds = %20, %29
  %33 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 6
  %34 = load i32, i32* %33, align 8
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 3
  store i8 %35, i8* %36, align 8
  %37 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 2
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 7
  store i32 %41, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 3
  %44 = load float*, float** %43, align 8
  %45 = icmp eq float* %44, null
  br i1 %45, label %62, label %46

46:                                               ; preds = %32
  %47 = load float, float* %44, align 4
  %48 = fcmp une float %47, 0.000000e+00
  %49 = load i32, i32* %40, align 8
  %50 = add nsw i32 %49, -1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %44, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fcmp une float %53, 1.000000e+00
  %55 = zext i1 %48 to i32
  %56 = zext i1 %54 to i32
  %57 = add i32 %41, %55
  %58 = add i32 %57, %56
  store i32 %58, i32* %42, align 8
  %59 = load float*, float** %43, align 8
  %60 = icmp eq float* %59, null
  %61 = select i1 %60, i64 16, i64 20
  br label %62

62:                                               ; preds = %32, %46
  %63 = phi i64 [ %61, %46 ], [ 16, %32 ]
  %64 = phi i32 [ %58, %46 ], [ %41, %32 ]
  %65 = phi i1 [ %54, %46 ], [ false, %32 ]
  %66 = phi i1 [ %48, %46 ], [ false, %32 ]
  %67 = sext i32 %64 to i64
  %68 = mul nsw i64 %63, %67
  %69 = getelementptr inbounds %class.SkAutoSTMalloc, %class.SkAutoSTMalloc* %21, i64 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = bitcast %union.anon* %22 to i8*
  %72 = icmp eq i8* %70, %71
  br i1 %72, label %74, label %73

73:                                               ; preds = %62
  tail call void @_Z7sk_freePv(i8* %70) #14
  br label %74

74:                                               ; preds = %73, %62
  %75 = icmp ugt i64 %68, 80
  br i1 %75, label %76, label %78

76:                                               ; preds = %74
  %77 = tail call i8* @_Z15sk_malloc_throwmm(i64 %68, i64 1) #14
  store i8* %77, i8** %69, align 8
  br label %82

78:                                               ; preds = %74
  %79 = icmp eq i64 %68, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %78
  store %union.anon* %22, %union.anon** %23, align 8
  br label %82

81:                                               ; preds = %78
  store i8* null, i8** %69, align 8
  br label %82

82:                                               ; preds = %76, %80, %81
  %83 = phi i8* [ %71, %80 ], [ null, %81 ], [ %77, %76 ]
  %84 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 5
  %85 = bitcast %struct.SkRGBA4f** %84 to i8**
  store i8* %83, i8** %85, align 8
  %86 = load float*, float** %43, align 8
  %87 = icmp eq float* %86, null
  %88 = bitcast i8* %83 to %struct.SkRGBA4f*
  br i1 %87, label %93, label %89

89:                                               ; preds = %82
  %90 = load i32, i32* %42, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %88, i64 %91, i32 0
  br label %93

93:                                               ; preds = %82, %89
  %94 = phi float* [ %92, %89 ], [ null, %82 ]
  %95 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 6
  store float* %94, float** %95, align 8
  br i1 %66, label %96, label %102

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 1
  %98 = bitcast %struct.SkRGBA4f** %97 to i8**
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds i8, i8* %83, i64 16
  %101 = bitcast i8* %100 to %struct.SkRGBA4f*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %99, i64 16, i1 false)
  br label %102

102:                                              ; preds = %96, %93
  %103 = phi %struct.SkRGBA4f* [ %101, %96 ], [ %88, %93 ]
  %104 = load i32, i32* %40, align 8
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %102
  %107 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 1
  br label %110

108:                                              ; preds = %124, %102
  %109 = phi i32 [ %104, %102 ], [ %128, %124 ]
  br i1 %65, label %131, label %141

110:                                              ; preds = %106, %124
  %111 = phi i64 [ 0, %106 ], [ %127, %124 ]
  %112 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %107, align 8
  %113 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %112, i64 %111
  %114 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %103, i64 %111
  %115 = bitcast %struct.SkRGBA4f* %114 to i8*
  %116 = bitcast %struct.SkRGBA4f* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %116, i64 16, i1 false)
  %117 = load i8, i8* %24, align 8, !range !2
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %124, label %119

119:                                              ; preds = %110
  %120 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %107, align 8
  %121 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %120, i64 %111, i32 3
  %122 = load float, float* %121, align 4
  %123 = fcmp oeq float %122, 1.000000e+00
  br label %124

124:                                              ; preds = %110, %119
  %125 = phi i1 [ false, %110 ], [ %123, %119 ]
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %24, align 8
  %127 = add nuw nsw i64 %111, 1
  %128 = load i32, i32* %40, align 8
  %129 = sext i32 %128 to i64
  %130 = icmp slt i64 %127, %129
  br i1 %130, label %110, label %108

131:                                              ; preds = %108
  %132 = sext i32 %109 to i64
  %133 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %103, i64 %132
  %134 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %1, i64 0, i32 1
  %135 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %134, align 8
  %136 = add nsw i32 %109, -1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %135, i64 %137
  %139 = bitcast %struct.SkRGBA4f* %133 to i8*
  %140 = bitcast %struct.SkRGBA4f* %138 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %139, i8* align 4 %140, i64 16, i1 false)
  br label %141

141:                                              ; preds = %131, %108
  %142 = load float*, float** %43, align 8
  %143 = icmp eq float* %142, null
  br i1 %143, label %188, label %144

144:                                              ; preds = %141
  %145 = load float*, float** %95, align 8
  store float 0.000000e+00, float* %145, align 4
  %146 = xor i1 %66, true
  %147 = zext i1 %146 to i32
  %148 = load i32, i32* %40, align 8
  %149 = zext i1 %65 to i32
  %150 = add i32 %148, %149
  %151 = load float*, float** %43, align 8
  %152 = zext i1 %146 to i64
  %153 = getelementptr inbounds float, float* %151, i64 %152
  %154 = load float, float* %153, align 4
  %155 = icmp sgt i32 %150, %147
  br i1 %155, label %156, label %187

156:                                              ; preds = %144
  %157 = zext i32 %150 to i64
  br label %159

158:                                              ; preds = %176
  br i1 %182, label %187, label %188

159:                                              ; preds = %185, %156
  %160 = phi i32 [ %148, %156 ], [ %186, %185 ]
  %161 = phi i64 [ %152, %156 ], [ %183, %185 ]
  %162 = phi float* [ %145, %156 ], [ %165, %185 ]
  %163 = phi i1 [ true, %156 ], [ %182, %185 ]
  %164 = phi float [ 0.000000e+00, %156 ], [ %177, %185 ]
  %165 = getelementptr inbounds float, float* %162, i64 1
  %166 = zext i32 %160 to i64
  %167 = icmp eq i64 %161, %166
  br i1 %167, label %176, label %168

168:                                              ; preds = %159
  %169 = load float*, float** %43, align 8
  %170 = getelementptr inbounds float, float* %169, i64 %161
  %171 = load float, float* %170, align 4
  %172 = fcmp ogt float %171, 1.000000e+00
  %173 = select i1 %172, float 1.000000e+00, float %171
  %174 = fcmp olt float %164, %173
  %175 = select i1 %174, float %173, float %164
  br label %176

176:                                              ; preds = %159, %168
  %177 = phi float [ %175, %168 ], [ 1.000000e+00, %159 ]
  %178 = fsub float %177, %164
  %179 = fsub float %154, %178
  %180 = tail call float @llvm.fabs.f32(float %179) #14
  %181 = fcmp ole float %180, 0x3F30000000000000
  %182 = and i1 %163, %181
  store float %177, float* %165, align 4
  %183 = add nuw nsw i64 %161, 1
  %184 = icmp eq i64 %183, %157
  br i1 %184, label %158, label %185

185:                                              ; preds = %176
  %186 = load i32, i32* %40, align 8
  br label %159

187:                                              ; preds = %144, %158
  store float* null, float** %95, align 8
  br label %188

188:                                              ; preds = %158, %187, %141
  ret void
}

declare void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp* sret) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20SkGradientShaderBaseD2Ev(%class.SkGradientShaderBase*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTV20SkGradientShaderBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 10, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 10, i32 1
  %6 = bitcast %union.anon* %5 to i8*
  %7 = icmp eq i8* %4, %6
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @_Z7sk_freePv(i8* %4) #14
  br label %9

9:                                                ; preds = %1, %8
  %10 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 9, i32 0
  %11 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %12 = icmp eq %class.SkColorSpace* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 -1 acq_rel
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  %18 = bitcast %class.SkColorSpace* %11 to i8*
  tail call void @_ZdlPv(i8* %18) #15
  br label %19

19:                                               ; preds = %9, %13, %17
  %20 = bitcast %class.SkGradientShaderBase* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %20) #14
  ret void
}

; Function Attrs: nounwind
declare void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase*) unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN20SkGradientShaderBaseD0Ev(%class.SkGradientShaderBase* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20SkGradientShaderBase7flattenER13SkWriteBuffer(%class.SkGradientShaderBase*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkGradientShaderBase::Descriptor", align 8
  %4 = bitcast %"struct.SkGradientShaderBase::Descriptor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 48, i1 false) #14
  %5 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 5
  %6 = bitcast %struct.SkRGBA4f** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 1
  %9 = bitcast %struct.SkRGBA4f** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 9
  %11 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 2
  %12 = icmp eq %class.sk_sp* %11, %10
  br i1 %12, label %32, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  %15 = load %class.SkColorSpace*, %class.SkColorSpace** %14, align 8
  %16 = icmp eq %class.SkColorSpace* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  store %class.SkColorSpace* %15, %class.SkColorSpace** %18, align 8
  br label %32

19:                                               ; preds = %13
  %20 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 1 monotonic
  %22 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  %23 = load %class.SkColorSpace*, %class.SkColorSpace** %22, align 8
  %24 = bitcast %class.SkColorSpace* %23 to i8*
  %25 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  store %class.SkColorSpace* %15, %class.SkColorSpace** %25, align 8
  %26 = icmp eq %class.SkColorSpace* %23, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw add i32* %28, i32 -1 acq_rel
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %27
  call void @_ZdlPv(i8* %24) #15
  br label %32

32:                                               ; preds = %17, %2, %19, %27, %31
  %33 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 6
  %34 = bitcast float** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 3
  %37 = bitcast float** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 7
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 4
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 5
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 3
  %45 = load i8, i8* %44, align 8
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 6
  store i32 %46, i32* %47, align 8
  %48 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 0, i32 1
  %49 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 0, i32 1, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = trunc i32 %50 to i8
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %32
  %54 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %48) #14
  %55 = zext i8 %54 to i32
  store i32 %55, i32* %49, align 4
  br label %56

56:                                               ; preds = %32, %53
  %57 = phi i32 [ %55, %53 ], [ %50, %32 ]
  %58 = and i32 %57, 15
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, %class.SkMatrix* null, %class.SkMatrix* %48
  %61 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 0
  store %class.SkMatrix* %60, %class.SkMatrix** %61, align 8
  call void @_ZNK20SkGradientShaderBase10Descriptor7flattenER13SkWriteBuffer(%"struct.SkGradientShaderBase::Descriptor"* nonnull %3, %class.SkWriteBuffer* dereferenceable(56) %1)
  %62 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %3, i64 0, i32 2, i32 0
  %63 = load %class.SkColorSpace*, %class.SkColorSpace** %62, align 8
  %64 = icmp eq %class.SkColorSpace* %63, null
  br i1 %64, label %71, label %65

65:                                               ; preds = %56
  %66 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 -1 acq_rel
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = bitcast %class.SkColorSpace* %63 to i8*
  call void @_ZdlPv(i8* %70) #15
  br label %71

71:                                               ; preds = %56, %65, %69
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK20SkGradientShaderBase14onAppendStagesERK10SkStageRec(%class.SkGradientShaderBase*, %struct.SkStageRec* nocapture readonly dereferenceable(56)) unnamed_addr #6 align 2 {
  %3 = alloca %class.SkMatrix, align 16
  %4 = alloca %class.SkRasterPipeline_, align 8
  %5 = alloca %struct.SkColor4fXformer, align 8
  %6 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 0
  %7 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %6, align 8
  %8 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 1
  %9 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %8, align 8
  %10 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #14
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %12 = bitcast %class.SkMatrix* %3 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %12, align 16
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %14, align 16
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %15, align 16
  store i32 16, i32* %11, align 4
  %16 = bitcast %class.SkGradientShaderBase* %0 to %class.SkShaderBase*
  %17 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 6
  %18 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %17, align 8
  %19 = getelementptr inbounds %class.SkMatrixProvider, %class.SkMatrixProvider* %18, i64 0, i32 2
  %20 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 5
  %21 = load %class.SkMatrix*, %class.SkMatrix** %20, align 8
  %22 = call zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase* %16, %class.SkMatrix* dereferenceable(40) %19, %class.SkMatrix* %21, %class.SkMatrix* nonnull %3) #14
  br i1 %22, label %23, label %674

23:                                               ; preds = %2
  %24 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 1
  %25 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %3, %class.SkMatrix* dereferenceable(40) %24) #14
  %26 = bitcast %class.SkRasterPipeline_* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %26) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 312, i1 false)
  %27 = getelementptr inbounds %class.SkRasterPipeline_, %class.SkRasterPipeline_* %4, i64 0, i32 0
  %28 = getelementptr inbounds %class.SkRasterPipeline_, %class.SkRasterPipeline_* %4, i64 0, i32 1, i32 0, i32 0, i64 256
  %29 = bitcast i8* %28 to %class.SkArenaAlloc*
  call void @_ZN16SkRasterPipelineC2EP12SkArenaAlloc(%class.SkRasterPipeline* nonnull %27, %class.SkArenaAlloc* %29) #14
  %30 = getelementptr inbounds %class.SkRasterPipeline_, %class.SkRasterPipeline_* %4, i64 0, i32 1, i32 0, i32 0, i64 0
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %29, i8* %30, i64 256, i64 256) #14
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 21, i8* null) #14
  call void @_ZN16SkRasterPipeline13append_matrixEP12SkArenaAllocRK8SkMatrix(%class.SkRasterPipeline* %7, %class.SkArenaAlloc* %9, %class.SkMatrix* nonnull dereferenceable(40) %3) #14
  %31 = bitcast %class.SkGradientShaderBase* %0 to void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)***
  %32 = load void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)**, void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)*** %31, align 8
  %33 = getelementptr inbounds void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)*, void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)** %32, i64 19
  %34 = load void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)*, void (%class.SkGradientShaderBase*, %class.SkArenaAlloc*, %class.SkRasterPipeline*, %class.SkRasterPipeline*)** %33, align 8
  call void %34(%class.SkGradientShaderBase* %0, %class.SkArenaAlloc* %9, %class.SkRasterPipeline* %7, %class.SkRasterPipeline* nonnull %27) #14
  %35 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  switch i32 %36, label %71 [
    i32 2, label %37
    i32 1, label %38
    i32 3, label %39
    i32 0, label %64
  ]

37:                                               ; preds = %23
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 164, i8* null) #14
  br label %71

38:                                               ; preds = %23
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 165, i8* null) #14
  br label %71

39:                                               ; preds = %23
  %40 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %9, i64 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 0, %42
  %44 = and i64 %43, 3
  %45 = or i64 %44, 72
  %46 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %9, i64 0, i32 2
  %47 = bitcast i8** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %48, %42
  %50 = icmp ugt i64 %45, %49
  br i1 %50, label %51, label %55

51:                                               ; preds = %39
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %9, i32 72, i32 4) #14
  %52 = load i64, i64* %41, align 8
  %53 = sub i64 0, %52
  %54 = and i64 %53, 3
  br label %55

55:                                               ; preds = %39, %51
  %56 = phi i64 [ %52, %51 ], [ %42, %39 ]
  %57 = phi i64 [ %54, %51 ], [ %44, %39 ]
  %58 = inttoptr i64 %56 to i8*
  %59 = getelementptr inbounds i8, i8* %58, i64 %57
  %60 = getelementptr inbounds i8, i8* %59, i64 72
  store i8* %60, i8** %40, align 8
  %61 = bitcast i8* %59 to %struct.SkRasterPipeline_DecalTileCtx*
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 72, i1 false) #14
  %62 = getelementptr inbounds i8, i8* %59, i64 64
  %63 = bitcast i8* %62 to float*
  store float 0x3FF0000020000000, float* %63, align 4
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 142, i8* %59) #14
  br label %64

64:                                               ; preds = %23, %55
  %65 = phi i8* [ null, %23 ], [ %59, %55 ]
  %66 = phi %struct.SkRasterPipeline_DecalTileCtx* [ null, %23 ], [ %61, %55 ]
  %67 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 6
  %68 = load float*, float** %67, align 8
  %69 = icmp eq float* %68, null
  br i1 %69, label %70, label %71

70:                                               ; preds = %64
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 163, i8* null) #14
  br label %71

71:                                               ; preds = %64, %70, %23, %38, %37
  %72 = phi i8* [ null, %23 ], [ %65, %64 ], [ %65, %70 ], [ null, %38 ], [ null, %37 ]
  %73 = phi %struct.SkRasterPipeline_DecalTileCtx* [ null, %23 ], [ %66, %64 ], [ %66, %70 ], [ null, %38 ], [ null, %37 ]
  %74 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 3
  %75 = load i8, i8* %74, align 8
  %76 = and i8 %75, 1
  %77 = icmp eq i8 %76, 0
  %78 = bitcast %struct.SkColor4fXformer* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %78) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 88, i1 false)
  %79 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 5
  %80 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %79, align 8
  %81 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 7
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 9, i32 0
  %84 = load %class.SkColorSpace*, %class.SkColorSpace** %83, align 8
  %85 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 3
  %86 = load %class.SkColorSpace*, %class.SkColorSpace** %85, align 8
  call void @_ZN16SkColor4fXformerC2EPK8SkRGBA4fIL11SkAlphaType3EEiP12SkColorSpaceS6_(%struct.SkColor4fXformer* nonnull %5, %struct.SkRGBA4f* %80, i32 %82, %class.SkColorSpace* %84, %class.SkColorSpace* %86)
  %87 = load i32, i32* %81, align 8
  %88 = icmp eq i32 %87, 2
  br i1 %88, label %89, label %159

89:                                               ; preds = %71
  %90 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 6
  %91 = load float*, float** %90, align 8
  %92 = icmp eq float* %91, null
  br i1 %92, label %93, label %159

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %5, i64 0, i32 0
  %95 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %94, align 8
  %96 = bitcast %struct.SkRGBA4f* %95 to <2 x float>*
  %97 = load <2 x float>, <2 x float>* %96, align 4
  %98 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %95, i64 0, i32 2
  %99 = load float, float* %98, align 4
  %100 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %95, i64 0, i32 3
  %101 = load float, float* %100, align 4
  br i1 %77, label %107, label %102

102:                                              ; preds = %93
  %103 = insertelement <2 x float> undef, float %101, i32 0
  %104 = shufflevector <2 x float> %103, <2 x float> undef, <2 x i32> zeroinitializer
  %105 = fmul <2 x float> %97, %104
  %106 = fmul float %99, %101
  br label %107

107:                                              ; preds = %93, %102
  %108 = phi float [ %106, %102 ], [ %99, %93 ]
  %109 = phi <2 x float> [ %105, %102 ], [ %97, %93 ]
  %110 = insertelement <4 x float> undef, float %108, i32 2
  %111 = insertelement <4 x float> %110, float %101, i32 3
  %112 = shufflevector <2 x float> %109, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = shufflevector <4 x float> %112, <4 x float> %111, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %114 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %95, i64 1, i32 0
  %115 = bitcast float* %114 to <2 x float>*
  %116 = load <2 x float>, <2 x float>* %115, align 4
  %117 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %95, i64 1, i32 2
  %118 = load float, float* %117, align 4
  %119 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %95, i64 1, i32 3
  %120 = load float, float* %119, align 4
  br i1 %77, label %126, label %121

121:                                              ; preds = %107
  %122 = insertelement <2 x float> undef, float %120, i32 0
  %123 = shufflevector <2 x float> %122, <2 x float> undef, <2 x i32> zeroinitializer
  %124 = fmul <2 x float> %116, %123
  %125 = fmul float %118, %120
  br label %126

126:                                              ; preds = %107, %121
  %127 = phi float [ %125, %121 ], [ %118, %107 ]
  %128 = phi <2 x float> [ %124, %121 ], [ %116, %107 ]
  %129 = insertelement <4 x float> undef, float %127, i32 2
  %130 = insertelement <4 x float> %129, float %120, i32 3
  %131 = shufflevector <2 x float> %128, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <4 x float> %131, <4 x float> %130, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %133 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %9, i64 0, i32 1
  %134 = bitcast i8** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = sub i64 0, %135
  %137 = and i64 %136, 3
  %138 = or i64 %137, 36
  %139 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %9, i64 0, i32 2
  %140 = bitcast i8** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %141, %135
  %143 = icmp ugt i64 %138, %142
  br i1 %143, label %144, label %148

144:                                              ; preds = %126
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %9, i32 36, i32 4) #14
  %145 = load i64, i64* %134, align 8
  %146 = sub i64 0, %145
  %147 = and i64 %146, 3
  br label %148

148:                                              ; preds = %126, %144
  %149 = phi i64 [ %145, %144 ], [ %135, %126 ]
  %150 = phi i64 [ %147, %144 ], [ %137, %126 ]
  %151 = inttoptr i64 %149 to i8*
  %152 = getelementptr inbounds i8, i8* %151, i64 %150
  %153 = getelementptr inbounds i8, i8* %152, i64 36
  store i8* %153, i8** %133, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %152, i8 0, i64 36, i1 false) #14
  %154 = fsub <4 x float> %132, %113
  %155 = bitcast i8* %152 to <4 x float>*
  store <4 x float> %154, <4 x float>* %155, align 1
  %156 = getelementptr inbounds i8, i8* %152, i64 16
  %157 = bitcast i8* %156 to <4 x float>*
  store <4 x float> %113, <4 x float>* %157, align 1
  %158 = getelementptr inbounds i8, i8* %152, i64 32
  store i8 %76, i8* %158, align 4
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 168, i8* %152) #14
  br label %654

159:                                              ; preds = %89, %71
  %160 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %9, i64 0, i32 1
  %161 = bitcast i8** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = sub i64 0, %162
  %164 = and i64 %163, 7
  %165 = or i64 %164, 88
  %166 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %9, i64 0, i32 2
  %167 = bitcast i8** %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %168, %162
  %170 = icmp ugt i64 %165, %169
  br i1 %170, label %171, label %175

171:                                              ; preds = %159
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %9, i32 88, i32 8) #14
  %172 = load i64, i64* %161, align 8
  %173 = sub i64 0, %172
  %174 = and i64 %173, 7
  br label %175

175:                                              ; preds = %159, %171
  %176 = phi i64 [ %172, %171 ], [ %162, %159 ]
  %177 = phi i64 [ %174, %171 ], [ %164, %159 ]
  %178 = inttoptr i64 %176 to i8*
  %179 = getelementptr inbounds i8, i8* %178, i64 %177
  %180 = getelementptr inbounds i8, i8* %179, i64 88
  store i8* %180, i8** %160, align 8
  %181 = bitcast i8* %179 to %struct.SkRasterPipeline_GradientCtx*
  call void @llvm.memset.p0i8.i64(i8* align 8 %179, i8 0, i64 88, i1 false) #14
  %182 = getelementptr inbounds i8, i8* %179, i64 80
  store i8 %76, i8* %182, align 8
  br label %188

183:                                              ; preds = %242
  %184 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 6
  %185 = load float*, float** %184, align 8
  %186 = icmp eq float* %185, null
  %187 = load i32, i32* %81, align 8
  br i1 %186, label %252, label %401

188:                                              ; preds = %242, %175
  %189 = phi i64 [ 0, %175 ], [ %250, %242 ]
  %190 = load i32, i32* %81, align 8
  %191 = icmp sgt i32 %190, 7
  %192 = select i1 %191, i32 %190, i32 7
  %193 = add nuw nsw i32 %192, 1
  %194 = icmp ult i32 %193, 1073741824
  br i1 %194, label %196, label %195

195:                                              ; preds = %188
  call void @abort() #16
  unreachable

196:                                              ; preds = %188
  %197 = zext i32 %193 to i64
  %198 = shl nuw nsw i64 %197, 2
  %199 = load i64, i64* %161, align 8
  %200 = sub i64 0, %199
  %201 = and i64 %200, 3
  %202 = and i64 %198, 4294967292
  %203 = or i64 %201, %202
  %204 = load i64, i64* %167, align 8
  %205 = sub i64 %204, %199
  %206 = icmp ugt i64 %203, %205
  br i1 %206, label %207, label %212

207:                                              ; preds = %196
  %208 = trunc i64 %198 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %9, i32 %208, i32 4) #14
  %209 = load i64, i64* %161, align 8
  %210 = sub i64 0, %209
  %211 = and i64 %210, 3
  br label %212

212:                                              ; preds = %196, %207
  %213 = phi i64 [ %209, %207 ], [ %199, %196 ]
  %214 = phi i64 [ %211, %207 ], [ %201, %196 ]
  %215 = inttoptr i64 %213 to i8*
  %216 = getelementptr inbounds i8, i8* %215, i64 %214
  %217 = getelementptr inbounds i8, i8* %216, i64 %202
  store i8* %217, i8** %160, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %216, i8 0, i64 %198, i1 false) #14
  %218 = getelementptr inbounds %struct.SkRasterPipeline_GradientCtx, %struct.SkRasterPipeline_GradientCtx* %181, i64 0, i32 1, i64 %189
  %219 = bitcast float** %218 to i8**
  store i8* %216, i8** %219, align 8
  %220 = load i32, i32* %81, align 8
  %221 = icmp sgt i32 %220, 7
  %222 = select i1 %221, i32 %220, i32 7
  %223 = add nuw nsw i32 %222, 1
  %224 = icmp ult i32 %223, 1073741824
  br i1 %224, label %226, label %225

225:                                              ; preds = %212
  call void @abort() #16
  unreachable

226:                                              ; preds = %212
  %227 = zext i32 %223 to i64
  %228 = shl nuw nsw i64 %227, 2
  %229 = load i64, i64* %161, align 8
  %230 = sub i64 0, %229
  %231 = and i64 %230, 3
  %232 = and i64 %228, 4294967292
  %233 = or i64 %231, %232
  %234 = load i64, i64* %167, align 8
  %235 = sub i64 %234, %229
  %236 = icmp ugt i64 %233, %235
  br i1 %236, label %237, label %242

237:                                              ; preds = %226
  %238 = trunc i64 %228 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %9, i32 %238, i32 4) #14
  %239 = load i64, i64* %161, align 8
  %240 = sub i64 0, %239
  %241 = and i64 %240, 3
  br label %242

242:                                              ; preds = %237, %226
  %243 = phi i64 [ %239, %237 ], [ %229, %226 ]
  %244 = phi i64 [ %241, %237 ], [ %231, %226 ]
  %245 = inttoptr i64 %243 to i8*
  %246 = getelementptr inbounds i8, i8* %245, i64 %244
  %247 = getelementptr inbounds i8, i8* %246, i64 %232
  store i8* %247, i8** %160, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %246, i8 0, i64 %228, i1 false) #14
  %248 = getelementptr inbounds %struct.SkRasterPipeline_GradientCtx, %struct.SkRasterPipeline_GradientCtx* %181, i64 0, i32 2, i64 %189
  %249 = bitcast float** %248 to i8**
  store i8* %246, i8** %249, align 8
  %250 = add nuw nsw i64 %189, 1
  %251 = icmp eq i64 %250, 4
  br i1 %251, label %183, label %188

252:                                              ; preds = %183
  %253 = sext i32 %187 to i64
  %254 = add nsw i64 %253, -1
  %255 = uitofp i64 %254 to float
  %256 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %5, i64 0, i32 0
  %257 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %256, align 8
  %258 = bitcast %struct.SkRGBA4f* %257 to <2 x float>*
  %259 = load <2 x float>, <2 x float>* %258, align 4
  %260 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %257, i64 0, i32 2
  %261 = load float, float* %260, align 4
  %262 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %257, i64 0, i32 3
  %263 = load float, float* %262, align 4
  br i1 %77, label %269, label %264

264:                                              ; preds = %252
  %265 = insertelement <2 x float> undef, float %263, i32 0
  %266 = shufflevector <2 x float> %265, <2 x float> undef, <2 x i32> zeroinitializer
  %267 = fmul <2 x float> %259, %266
  %268 = fmul float %261, %263
  br label %269

269:                                              ; preds = %252, %264
  %270 = phi float [ %268, %264 ], [ %261, %252 ]
  %271 = phi <2 x float> [ %267, %264 ], [ %259, %252 ]
  %272 = icmp eq i64 %254, 0
  br i1 %272, label %273, label %276

273:                                              ; preds = %269
  %274 = extractelement <2 x float> %271, i32 0
  %275 = extractelement <2 x float> %271, i32 1
  br label %295

276:                                              ; preds = %269
  %277 = insertelement <2 x float> undef, float %270, i32 0
  %278 = insertelement <2 x float> %277, float %263, i32 1
  %279 = getelementptr inbounds i8, i8* %179, i64 8
  %280 = bitcast i8* %279 to float**
  %281 = getelementptr inbounds i8, i8* %179, i64 16
  %282 = bitcast i8* %281 to float**
  %283 = getelementptr inbounds i8, i8* %179, i64 24
  %284 = bitcast i8* %283 to float**
  %285 = getelementptr inbounds i8, i8* %179, i64 32
  %286 = bitcast i8* %285 to float**
  %287 = getelementptr inbounds i8, i8* %179, i64 40
  %288 = bitcast i8* %287 to float**
  %289 = getelementptr inbounds i8, i8* %179, i64 48
  %290 = bitcast i8* %289 to float**
  %291 = getelementptr inbounds i8, i8* %179, i64 56
  %292 = bitcast i8* %291 to float**
  %293 = getelementptr inbounds i8, i8* %179, i64 64
  %294 = bitcast i8* %293 to float**
  br label %333

295:                                              ; preds = %353, %273
  %296 = phi float [ %263, %273 ], [ %347, %353 ]
  %297 = phi float [ %270, %273 ], [ %354, %353 ]
  %298 = phi float [ %275, %273 ], [ %360, %353 ]
  %299 = phi float [ %274, %273 ], [ %356, %353 ]
  %300 = getelementptr inbounds i8, i8* %179, i64 8
  %301 = bitcast i8* %300 to float**
  %302 = load float*, float** %301, align 8
  %303 = getelementptr inbounds float, float* %302, i64 %254
  store float 0.000000e+00, float* %303, align 4
  %304 = getelementptr inbounds i8, i8* %179, i64 16
  %305 = bitcast i8* %304 to float**
  %306 = load float*, float** %305, align 8
  %307 = getelementptr inbounds float, float* %306, i64 %254
  store float 0.000000e+00, float* %307, align 4
  %308 = getelementptr inbounds i8, i8* %179, i64 24
  %309 = bitcast i8* %308 to float**
  %310 = load float*, float** %309, align 8
  %311 = getelementptr inbounds float, float* %310, i64 %254
  store float 0.000000e+00, float* %311, align 4
  %312 = getelementptr inbounds i8, i8* %179, i64 32
  %313 = bitcast i8* %312 to float**
  %314 = load float*, float** %313, align 8
  %315 = getelementptr inbounds float, float* %314, i64 %254
  store float 0.000000e+00, float* %315, align 4
  %316 = getelementptr inbounds i8, i8* %179, i64 40
  %317 = bitcast i8* %316 to float**
  %318 = load float*, float** %317, align 8
  %319 = getelementptr inbounds float, float* %318, i64 %254
  store float %299, float* %319, align 4
  %320 = getelementptr inbounds i8, i8* %179, i64 48
  %321 = bitcast i8* %320 to float**
  %322 = load float*, float** %321, align 8
  %323 = getelementptr inbounds float, float* %322, i64 %254
  store float %298, float* %323, align 4
  %324 = getelementptr inbounds i8, i8* %179, i64 56
  %325 = bitcast i8* %324 to float**
  %326 = load float*, float** %325, align 8
  %327 = getelementptr inbounds float, float* %326, i64 %254
  store float %297, float* %327, align 4
  %328 = getelementptr inbounds i8, i8* %179, i64 64
  %329 = bitcast i8* %328 to float**
  %330 = load float*, float** %329, align 8
  %331 = getelementptr inbounds float, float* %330, i64 %254
  store float %296, float* %331, align 4
  %332 = bitcast i8* %179 to i64*
  store i64 %253, i64* %332, align 8
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 166, i8* %179) #14
  br label %654

333:                                              ; preds = %397, %276
  %334 = phi %struct.SkRGBA4f* [ %257, %276 ], [ %400, %397 ]
  %335 = phi <2 x float> [ %278, %276 ], [ %399, %397 ]
  %336 = phi <2 x float> [ %271, %276 ], [ %355, %397 ]
  %337 = phi i64 [ 0, %276 ], [ %338, %397 ]
  %338 = add nuw i64 %337, 1
  %339 = shl i64 %338, 32
  %340 = ashr exact i64 %339, 32
  %341 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %334, i64 %340, i32 0
  %342 = bitcast float* %341 to <2 x float>*
  %343 = load <2 x float>, <2 x float>* %342, align 4
  %344 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %334, i64 %340, i32 2
  %345 = load float, float* %344, align 4
  %346 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %334, i64 %340, i32 3
  %347 = load float, float* %346, align 4
  br i1 %77, label %353, label %348

348:                                              ; preds = %333
  %349 = insertelement <2 x float> undef, float %347, i32 0
  %350 = shufflevector <2 x float> %349, <2 x float> undef, <2 x i32> zeroinitializer
  %351 = fmul <2 x float> %343, %350
  %352 = fmul float %345, %347
  br label %353

353:                                              ; preds = %333, %348
  %354 = phi float [ %352, %348 ], [ %345, %333 ]
  %355 = phi <2 x float> [ %351, %348 ], [ %343, %333 ]
  %356 = extractelement <2 x float> %355, i32 0
  %357 = extractelement <2 x float> %336, i32 0
  %358 = fsub float %356, %357
  %359 = fmul float %358, %255
  %360 = extractelement <2 x float> %355, i32 1
  %361 = extractelement <2 x float> %336, i32 1
  %362 = fsub float %360, %361
  %363 = fmul float %362, %255
  %364 = extractelement <2 x float> %335, i32 0
  %365 = fsub float %354, %364
  %366 = fmul float %365, %255
  %367 = extractelement <2 x float> %335, i32 1
  %368 = fsub float %347, %367
  %369 = fmul float %368, %255
  %370 = uitofp i64 %337 to float
  %371 = fdiv float %370, %255
  %372 = fmul float %371, %359
  %373 = fsub float %357, %372
  %374 = fmul float %371, %363
  %375 = fsub float %361, %374
  %376 = fmul float %371, %366
  %377 = fsub float %364, %376
  %378 = fmul float %371, %369
  %379 = fsub float %367, %378
  %380 = load float*, float** %280, align 8
  %381 = getelementptr inbounds float, float* %380, i64 %337
  store float %359, float* %381, align 4
  %382 = load float*, float** %282, align 8
  %383 = getelementptr inbounds float, float* %382, i64 %337
  store float %363, float* %383, align 4
  %384 = load float*, float** %284, align 8
  %385 = getelementptr inbounds float, float* %384, i64 %337
  store float %366, float* %385, align 4
  %386 = load float*, float** %286, align 8
  %387 = getelementptr inbounds float, float* %386, i64 %337
  store float %369, float* %387, align 4
  %388 = load float*, float** %288, align 8
  %389 = getelementptr inbounds float, float* %388, i64 %337
  store float %373, float* %389, align 4
  %390 = load float*, float** %290, align 8
  %391 = getelementptr inbounds float, float* %390, i64 %337
  store float %375, float* %391, align 4
  %392 = load float*, float** %292, align 8
  %393 = getelementptr inbounds float, float* %392, i64 %337
  store float %377, float* %393, align 4
  %394 = load float*, float** %294, align 8
  %395 = getelementptr inbounds float, float* %394, i64 %337
  store float %379, float* %395, align 4
  %396 = icmp eq i64 %338, %254
  br i1 %396, label %295, label %397

397:                                              ; preds = %353
  %398 = insertelement <2 x float> undef, float %354, i32 0
  %399 = insertelement <2 x float> %398, float %347, i32 1
  %400 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %256, align 8
  br label %333

401:                                              ; preds = %183
  %402 = add nsw i32 %187, 1
  %403 = sext i32 %402 to i64
  %404 = icmp sgt i32 %187, -2
  br i1 %404, label %406, label %405

405:                                              ; preds = %401
  call void @abort() #16
  unreachable

406:                                              ; preds = %401
  %407 = icmp ult i32 %402, 1073741824
  br i1 %407, label %409, label %408

408:                                              ; preds = %406
  call void @abort() #16
  unreachable

409:                                              ; preds = %406
  %410 = shl nsw i64 %403, 2
  %411 = load i64, i64* %161, align 8
  %412 = sub i64 0, %411
  %413 = and i64 %412, 3
  %414 = and i64 %410, 4294967292
  %415 = or i64 %413, %414
  %416 = load i64, i64* %167, align 8
  %417 = sub i64 %416, %411
  %418 = icmp ugt i64 %415, %417
  br i1 %418, label %419, label %424

419:                                              ; preds = %409
  %420 = trunc i64 %410 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %9, i32 %420, i32 4) #14
  %421 = load i64, i64* %161, align 8
  %422 = sub i64 0, %421
  %423 = and i64 %422, 3
  br label %424

424:                                              ; preds = %419, %409
  %425 = phi i64 [ %421, %419 ], [ %411, %409 ]
  %426 = phi i64 [ %423, %419 ], [ %413, %409 ]
  %427 = inttoptr i64 %425 to i8*
  %428 = getelementptr inbounds i8, i8* %427, i64 %426
  %429 = getelementptr inbounds i8, i8* %428, i64 %414
  store i8* %429, i8** %160, align 8
  %430 = icmp eq i32 %402, 0
  br i1 %430, label %432, label %431

431:                                              ; preds = %424
  call void @llvm.memset.p0i8.i64(i8* align 4 %428, i8 0, i64 %410, i1 false) #14
  br label %432

432:                                              ; preds = %424, %431
  %433 = getelementptr inbounds i8, i8* %179, i64 72
  %434 = bitcast i8* %433 to float**
  %435 = bitcast i8* %433 to i8**
  store i8* %428, i8** %435, align 8
  %436 = load i32, i32* %81, align 8
  %437 = icmp sgt i32 %436, 2
  br i1 %437, label %438, label %494

438:                                              ; preds = %432
  %439 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %79, align 8
  %440 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 0, i32 3
  %441 = load float, float* %440, align 4
  %442 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 1, i32 3
  %443 = load float, float* %442, align 4
  %444 = fcmp oeq float %441, %443
  br i1 %444, label %445, label %464

445:                                              ; preds = %438
  %446 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 0, i32 0
  %447 = load float, float* %446, align 4
  %448 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 1, i32 0
  %449 = load float, float* %448, align 4
  %450 = fcmp oeq float %447, %449
  br i1 %450, label %451, label %464

451:                                              ; preds = %445
  %452 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 0, i32 1
  %453 = load float, float* %452, align 4
  %454 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 1, i32 1
  %455 = load float, float* %454, align 4
  %456 = fcmp oeq float %453, %455
  br i1 %456, label %457, label %464

457:                                              ; preds = %451
  %458 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 0, i32 2
  %459 = load float, float* %458, align 4
  %460 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 1, i32 2
  %461 = load float, float* %460, align 4
  %462 = fcmp oeq float %459, %461
  %463 = zext i1 %462 to i32
  br label %464

464:                                              ; preds = %438, %445, %451, %457
  %465 = phi i32 [ 0, %451 ], [ 0, %445 ], [ 0, %438 ], [ %463, %457 ]
  %466 = add nsw i32 %436, -2
  %467 = sext i32 %466 to i64
  %468 = add nsw i32 %436, -1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %467, i32 3
  %471 = load float, float* %470, align 4
  %472 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %469, i32 3
  %473 = load float, float* %472, align 4
  %474 = fcmp oeq float %471, %473
  br i1 %474, label %475, label %493

475:                                              ; preds = %464
  %476 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %467, i32 0
  %477 = load float, float* %476, align 4
  %478 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %469, i32 0
  %479 = load float, float* %478, align 4
  %480 = fcmp oeq float %477, %479
  br i1 %480, label %481, label %493

481:                                              ; preds = %475
  %482 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %467, i32 1
  %483 = load float, float* %482, align 4
  %484 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %469, i32 1
  %485 = load float, float* %484, align 4
  %486 = fcmp oeq float %483, %485
  br i1 %486, label %487, label %493

487:                                              ; preds = %481
  %488 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %467, i32 2
  %489 = load float, float* %488, align 4
  %490 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %439, i64 %469, i32 2
  %491 = load float, float* %490, align 4
  %492 = fcmp une float %489, %491
  br i1 %492, label %493, label %494

493:                                              ; preds = %464, %475, %481, %487
  br label %494

494:                                              ; preds = %493, %487, %432
  %495 = phi i32 [ 0, %432 ], [ %465, %487 ], [ %465, %493 ]
  %496 = phi i32 [ 1, %432 ], [ %466, %487 ], [ %468, %493 ]
  %497 = load float*, float** %184, align 8
  %498 = zext i32 %495 to i64
  %499 = getelementptr inbounds float, float* %497, i64 %498
  %500 = load float, float* %499, align 4
  %501 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %5, i64 0, i32 0
  %502 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %501, align 8
  %503 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %502, i64 %498, i32 0
  %504 = bitcast float* %503 to <2 x float>*
  %505 = load <2 x float>, <2 x float>* %504, align 4
  %506 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %502, i64 %498, i32 2
  %507 = load float, float* %506, align 4
  %508 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %502, i64 %498, i32 3
  %509 = load float, float* %508, align 4
  br i1 %77, label %515, label %510

510:                                              ; preds = %494
  %511 = insertelement <2 x float> undef, float %509, i32 0
  %512 = shufflevector <2 x float> %511, <2 x float> undef, <2 x i32> zeroinitializer
  %513 = fmul <2 x float> %505, %512
  %514 = fmul float %507, %509
  br label %515

515:                                              ; preds = %494, %510
  %516 = phi float [ %514, %510 ], [ %507, %494 ]
  %517 = phi <2 x float> [ %513, %510 ], [ %505, %494 ]
  %518 = getelementptr inbounds i8, i8* %179, i64 8
  %519 = bitcast i8* %518 to float**
  %520 = load float*, float** %519, align 8
  store float 0.000000e+00, float* %520, align 4
  %521 = getelementptr inbounds i8, i8* %179, i64 16
  %522 = bitcast i8* %521 to float**
  %523 = load float*, float** %522, align 8
  store float 0.000000e+00, float* %523, align 4
  %524 = getelementptr inbounds i8, i8* %179, i64 24
  %525 = bitcast i8* %524 to float**
  %526 = load float*, float** %525, align 8
  store float 0.000000e+00, float* %526, align 4
  %527 = getelementptr inbounds i8, i8* %179, i64 32
  %528 = bitcast i8* %527 to float**
  %529 = load float*, float** %528, align 8
  store float 0.000000e+00, float* %529, align 4
  %530 = extractelement <2 x float> %517, i32 0
  %531 = getelementptr inbounds i8, i8* %179, i64 40
  %532 = bitcast i8* %531 to float**
  %533 = load float*, float** %532, align 8
  store float %530, float* %533, align 4
  %534 = extractelement <2 x float> %517, i32 1
  %535 = getelementptr inbounds i8, i8* %179, i64 48
  %536 = bitcast i8* %535 to float**
  %537 = load float*, float** %536, align 8
  store float %534, float* %537, align 4
  %538 = getelementptr inbounds i8, i8* %179, i64 56
  %539 = bitcast i8* %538 to float**
  %540 = load float*, float** %539, align 8
  store float %516, float* %540, align 4
  %541 = getelementptr inbounds i8, i8* %179, i64 64
  %542 = bitcast i8* %541 to float**
  %543 = load float*, float** %542, align 8
  store float %509, float* %543, align 4
  %544 = icmp slt i32 %495, %496
  br i1 %544, label %545, label %552

545:                                              ; preds = %515
  %546 = insertelement <2 x float> undef, float %516, i32 0
  %547 = insertelement <2 x float> %546, float %509, i32 1
  %548 = zext i32 %496 to i64
  br label %579

549:                                              ; preds = %651
  %550 = extractelement <2 x float> %604, i32 0
  %551 = extractelement <2 x float> %604, i32 1
  br label %552

552:                                              ; preds = %549, %515
  %553 = phi float [ %596, %549 ], [ %509, %515 ]
  %554 = phi float [ %603, %549 ], [ %516, %515 ]
  %555 = phi float [ %551, %549 ], [ %534, %515 ]
  %556 = phi float [ %550, %549 ], [ %530, %515 ]
  %557 = phi i64 [ %652, %549 ], [ 1, %515 ]
  %558 = phi float [ %588, %549 ], [ %500, %515 ]
  %559 = load float*, float** %434, align 8
  %560 = getelementptr inbounds float, float* %559, i64 %557
  store float %558, float* %560, align 4
  %561 = add i64 %557, 1
  %562 = load float*, float** %519, align 8
  %563 = getelementptr inbounds float, float* %562, i64 %557
  store float 0.000000e+00, float* %563, align 4
  %564 = load float*, float** %522, align 8
  %565 = getelementptr inbounds float, float* %564, i64 %557
  store float 0.000000e+00, float* %565, align 4
  %566 = load float*, float** %525, align 8
  %567 = getelementptr inbounds float, float* %566, i64 %557
  store float 0.000000e+00, float* %567, align 4
  %568 = load float*, float** %528, align 8
  %569 = getelementptr inbounds float, float* %568, i64 %557
  store float 0.000000e+00, float* %569, align 4
  %570 = load float*, float** %532, align 8
  %571 = getelementptr inbounds float, float* %570, i64 %557
  store float %556, float* %571, align 4
  %572 = load float*, float** %536, align 8
  %573 = getelementptr inbounds float, float* %572, i64 %557
  store float %555, float* %573, align 4
  %574 = load float*, float** %539, align 8
  %575 = getelementptr inbounds float, float* %574, i64 %557
  store float %554, float* %575, align 4
  %576 = load float*, float** %542, align 8
  %577 = getelementptr inbounds float, float* %576, i64 %557
  store float %553, float* %577, align 4
  %578 = bitcast i8* %179 to i64*
  store i64 %561, i64* %578, align 8
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 167, i8* %179) #14
  br label %654

579:                                              ; preds = %651, %545
  %580 = phi i64 [ %498, %545 ], [ %586, %651 ]
  %581 = phi <2 x float> [ %517, %545 ], [ %604, %651 ]
  %582 = phi <2 x float> [ %547, %545 ], [ %606, %651 ]
  %583 = phi float [ %500, %545 ], [ %588, %651 ]
  %584 = phi i64 [ 1, %545 ], [ %652, %651 ]
  %585 = load float*, float** %184, align 8
  %586 = add nuw nsw i64 %580, 1
  %587 = getelementptr inbounds float, float* %585, i64 %586
  %588 = load float, float* %587, align 4
  %589 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %501, align 8
  %590 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %589, i64 %586, i32 0
  %591 = bitcast float* %590 to <2 x float>*
  %592 = load <2 x float>, <2 x float>* %591, align 4
  %593 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %589, i64 %586, i32 2
  %594 = load float, float* %593, align 4
  %595 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %589, i64 %586, i32 3
  %596 = load float, float* %595, align 4
  br i1 %77, label %602, label %597

597:                                              ; preds = %579
  %598 = insertelement <2 x float> undef, float %596, i32 0
  %599 = shufflevector <2 x float> %598, <2 x float> undef, <2 x i32> zeroinitializer
  %600 = fmul <2 x float> %592, %599
  %601 = fmul float %594, %596
  br label %602

602:                                              ; preds = %579, %597
  %603 = phi float [ %601, %597 ], [ %594, %579 ]
  %604 = phi <2 x float> [ %600, %597 ], [ %592, %579 ]
  %605 = insertelement <2 x float> undef, float %603, i32 0
  %606 = insertelement <2 x float> %605, float %596, i32 1
  %607 = fcmp olt float %583, %588
  br i1 %607, label %608, label %651

608:                                              ; preds = %602
  %609 = extractelement <2 x float> %604, i32 0
  %610 = extractelement <2 x float> %581, i32 0
  %611 = fsub float %609, %610
  %612 = fsub float %588, %583
  %613 = fdiv float %611, %612
  %614 = extractelement <2 x float> %604, i32 1
  %615 = extractelement <2 x float> %581, i32 1
  %616 = fsub float %614, %615
  %617 = fdiv float %616, %612
  %618 = extractelement <2 x float> %582, i32 0
  %619 = fsub float %603, %618
  %620 = fdiv float %619, %612
  %621 = extractelement <2 x float> %582, i32 1
  %622 = fsub float %596, %621
  %623 = fdiv float %622, %612
  %624 = fmul float %583, %613
  %625 = fsub float %610, %624
  %626 = fmul float %583, %617
  %627 = fsub float %615, %626
  %628 = fmul float %583, %620
  %629 = fsub float %618, %628
  %630 = fmul float %583, %623
  %631 = fsub float %621, %630
  %632 = load float*, float** %434, align 8
  %633 = getelementptr inbounds float, float* %632, i64 %584
  store float %583, float* %633, align 4
  %634 = load float*, float** %519, align 8
  %635 = getelementptr inbounds float, float* %634, i64 %584
  store float %613, float* %635, align 4
  %636 = load float*, float** %522, align 8
  %637 = getelementptr inbounds float, float* %636, i64 %584
  store float %617, float* %637, align 4
  %638 = load float*, float** %525, align 8
  %639 = getelementptr inbounds float, float* %638, i64 %584
  store float %620, float* %639, align 4
  %640 = load float*, float** %528, align 8
  %641 = getelementptr inbounds float, float* %640, i64 %584
  store float %623, float* %641, align 4
  %642 = load float*, float** %532, align 8
  %643 = getelementptr inbounds float, float* %642, i64 %584
  store float %625, float* %643, align 4
  %644 = load float*, float** %536, align 8
  %645 = getelementptr inbounds float, float* %644, i64 %584
  store float %627, float* %645, align 4
  %646 = load float*, float** %539, align 8
  %647 = getelementptr inbounds float, float* %646, i64 %584
  store float %629, float* %647, align 4
  %648 = load float*, float** %542, align 8
  %649 = getelementptr inbounds float, float* %648, i64 %584
  store float %631, float* %649, align 4
  %650 = add i64 %584, 1
  br label %651

651:                                              ; preds = %608, %602
  %652 = phi i64 [ %650, %608 ], [ %584, %602 ]
  %653 = icmp eq i64 %586, %548
  br i1 %653, label %549, label %579

654:                                              ; preds = %295, %552, %148
  %655 = icmp eq %struct.SkRasterPipeline_DecalTileCtx* %73, null
  br i1 %655, label %657, label %656

656:                                              ; preds = %654
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 145, i8* nonnull %72) #14
  br label %657

657:                                              ; preds = %654, %656
  br i1 %77, label %658, label %663

658:                                              ; preds = %657
  %659 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 11
  %660 = load i8, i8* %659, align 8, !range !2
  %661 = icmp eq i8 %660, 0
  br i1 %661, label %662, label %663

662:                                              ; preds = %658
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %7, i32 8, i8* null) #14
  br label %663

663:                                              ; preds = %658, %657, %662
  call void @_ZN16SkRasterPipeline6extendERKS_(%class.SkRasterPipeline* %7, %class.SkRasterPipeline* nonnull dereferenceable(24) %27) #14
  %664 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %5, i64 0, i32 1, i32 0, i32 0, i64 72
  %665 = bitcast i8* %664 to i64*
  %666 = load i64, i64* %665, align 8
  %667 = and i64 %666, 1
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %673, label %669

669:                                              ; preds = %663
  %670 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %5, i64 0, i32 1, i32 0, i32 0, i64 64
  %671 = bitcast i8* %670 to i8**
  %672 = load i8*, i8** %671, align 8
  call void @_Z7sk_freePv(i8* %672) #14
  br label %673

673:                                              ; preds = %663, %669
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %78) #14
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %29) #14
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %26) #14
  br label %674

674:                                              ; preds = %2, %673
  %675 = phi i1 [ true, %673 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #14
  ret i1 %675
}

declare zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

declare void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline*, i32, i8*) local_unnamed_addr #2

declare void @_ZN16SkRasterPipeline13append_matrixEP12SkArenaAllocRK8SkMatrix(%class.SkRasterPipeline*, %class.SkArenaAlloc*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

declare void @_ZN16SkRasterPipeline6extendERKS_(%class.SkRasterPipeline*, %class.SkRasterPipeline* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20SkGradientShaderBase9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias nocapture sret, %class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"* nocapture readnone byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readnone byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider* dereferenceable(112), %class.SkMatrix*, %class.SkColorInfo* nocapture readonly dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) unnamed_addr #6 align 2 {
  %12 = alloca %"struct.skvm::Color", align 8
  %13 = alloca %class.SkMatrix, align 16
  %14 = alloca %"struct.skvm::Coord", align 8
  %15 = alloca { %"class.skvm::Builder"*, i32 }, align 8
  %16 = bitcast { %"class.skvm::Builder"*, i32 }* %15 to %"struct.skvm::I32"*
  %17 = alloca %"struct.skvm::Coord", align 8
  %18 = alloca %struct.SkImageInfo, align 8
  %19 = alloca %struct.SkImageInfo, align 8
  %20 = alloca %"class.std::__1::vector.48", align 8
  %21 = alloca %"class.std::__1::vector.48", align 16
  %22 = bitcast %class.SkMatrix* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #14
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 1
  %24 = bitcast %class.SkMatrix* %13 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %24, align 16
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 4
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %26, align 16
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %27, align 16
  store i32 16, i32* %23, align 4
  %28 = bitcast %class.SkGradientShaderBase* %1 to %class.SkShaderBase*
  %29 = getelementptr inbounds %class.SkMatrixProvider, %class.SkMatrixProvider* %6, i64 0, i32 2
  %30 = call zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase* %28, %class.SkMatrix* dereferenceable(40) %29, %class.SkMatrix* %7, %class.SkMatrix* nonnull %13) #14
  br i1 %30, label %40, label %31

31:                                               ; preds = %11
  %32 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %32, align 8
  %33 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %33, align 8
  %34 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %34, align 8
  %35 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %35, align 8
  %36 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %36, align 8
  %37 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %37, align 8
  %38 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %38, align 8
  %39 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %39, align 8
  br label %1050

40:                                               ; preds = %11
  %41 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 1
  %42 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %13, %class.SkMatrix* dereferenceable(40) %41) #14
  %43 = load float, float* %27, align 16
  %44 = fcmp une float %43, 1.000000e+00
  br i1 %44, label %45, label %46

45:                                               ; preds = %40
  call void @_ZN8SkMatrix22doNormalizePerspectiveEv(%class.SkMatrix* nonnull %13) #14
  br label %46

46:                                               ; preds = %40, %45
  %47 = bitcast %"struct.skvm::Coord"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #14
  %48 = bitcast %"struct.skvm::Coord"* %4 to i8*
  call void @_ZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsE(%"struct.skvm::Coord"* nonnull sret %14, %"class.skvm::Builder"* %2, %class.SkMatrix* nonnull dereferenceable(40) %13, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %4, %"struct.skvm::Uniforms"* %9) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %48, i8* nonnull align 8 %47, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #14
  %49 = bitcast { %"class.skvm::Builder"*, i32 }* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #14
  %50 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %15, i64 0, i32 0
  %51 = getelementptr inbounds { %"class.skvm::Builder"*, i32 }, { %"class.skvm::Builder"*, i32 }* %15, i64 0, i32 1
  %52 = bitcast { %"class.skvm::Builder"*, i32 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 16, i1 false)
  %53 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2, i32 -1) #14
  %54 = extractvalue { %"class.skvm::Builder"*, i32 } %53, 0
  store %"class.skvm::Builder"* %54, %"class.skvm::Builder"** %50, align 8
  %55 = extractvalue { %"class.skvm::Builder"*, i32 } %53, 1
  store i32 %55, i32* %51, align 8
  %56 = bitcast %"struct.skvm::Coord"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %56, i8* nonnull align 8 %48, i64 32, i1 false)
  %57 = bitcast %class.SkGradientShaderBase* %1 to { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)***
  %58 = load { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)**, { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)*** %57, align 8
  %59 = getelementptr inbounds { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)*, { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)** %58, i64 20
  %60 = load { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)*, { %"class.skvm::Builder"*, i32 } (%class.SkGradientShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Uniforms"*, %"struct.skvm::Coord"*, %"struct.skvm::I32"*)** %59, align 8
  %61 = call { %"class.skvm::Builder"*, i32 } %60(%class.SkGradientShaderBase* %1, %"class.skvm::Builder"* %2, %"struct.skvm::Uniforms"* %9, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %17, %"struct.skvm::I32"* nonnull %16) #14
  %62 = extractvalue { %"class.skvm::Builder"*, i32 } %61, 0
  %63 = extractvalue { %"class.skvm::Builder"*, i32 } %61, 1
  %64 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 2
  %65 = load i32, i32* %64, align 4
  switch i32 %65, label %128 [
    i32 2, label %94
    i32 3, label %66
    i32 1, label %87
  ]

66:                                               ; preds = %46
  %67 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %62, i32 0) #14
  %68 = extractvalue { %"class.skvm::Builder"*, i32 } %67, 0
  %69 = extractvalue { %"class.skvm::Builder"*, i32 } %67, 1
  %70 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %62, i32 1065353216) #14
  %71 = extractvalue { %"class.skvm::Builder"*, i32 } %70, 0
  %72 = extractvalue { %"class.skvm::Builder"*, i32 } %70, 1
  %73 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %62, %"class.skvm::Builder"* %62, i32 %63, %"class.skvm::Builder"* %71, i32 %72) #14
  %74 = extractvalue { %"class.skvm::Builder"*, i32 } %73, 0
  %75 = extractvalue { %"class.skvm::Builder"*, i32 } %73, 1
  %76 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %62, %"class.skvm::Builder"* %68, i32 %69, %"class.skvm::Builder"* %74, i32 %75) #14
  %77 = extractvalue { %"class.skvm::Builder"*, i32 } %76, 0
  %78 = extractvalue { %"class.skvm::Builder"*, i32 } %76, 1
  %79 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3F32ES1_(%"class.skvm::Builder"* %62, %"class.skvm::Builder"* %62, i32 %63, %"class.skvm::Builder"* %77, i32 %78) #14
  %80 = extractvalue { %"class.skvm::Builder"*, i32 } %79, 0
  %81 = extractvalue { %"class.skvm::Builder"*, i32 } %79, 1
  %82 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %50, align 8
  %83 = load i32, i32* %51, align 8
  %84 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %82, %"class.skvm::Builder"* %82, i32 %83, %"class.skvm::Builder"* %80, i32 %81) #14
  %85 = extractvalue { %"class.skvm::Builder"*, i32 } %84, 0
  %86 = extractvalue { %"class.skvm::Builder"*, i32 } %84, 1
  store %"class.skvm::Builder"* %85, %"class.skvm::Builder"** %50, align 8
  store i32 %86, i32* %51, align 8
  br label %128

87:                                               ; preds = %46
  %88 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"* %62, %"class.skvm::Builder"* %62, i32 %63) #14
  %89 = extractvalue { %"class.skvm::Builder"*, i32 } %88, 0
  %90 = extractvalue { %"class.skvm::Builder"*, i32 } %88, 1
  %91 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %62, %"class.skvm::Builder"* %62, i32 %63, %"class.skvm::Builder"* %89, i32 %90) #14
  %92 = extractvalue { %"class.skvm::Builder"*, i32 } %91, 0
  %93 = extractvalue { %"class.skvm::Builder"*, i32 } %91, 1
  br label %128

94:                                               ; preds = %46
  %95 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %62, i32 1065353216) #14
  %96 = extractvalue { %"class.skvm::Builder"*, i32 } %95, 0
  %97 = extractvalue { %"class.skvm::Builder"*, i32 } %95, 1
  %98 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %62, %"class.skvm::Builder"* %62, i32 %63, %"class.skvm::Builder"* %96, i32 %97) #14
  %99 = extractvalue { %"class.skvm::Builder"*, i32 } %98, 0
  %100 = extractvalue { %"class.skvm::Builder"*, i32 } %98, 1
  %101 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %99, i32 1056964608) #14
  %102 = extractvalue { %"class.skvm::Builder"*, i32 } %101, 0
  %103 = extractvalue { %"class.skvm::Builder"*, i32 } %101, 1
  %104 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %99, %"class.skvm::Builder"* %99, i32 %100, %"class.skvm::Builder"* %102, i32 %103) #14
  %105 = extractvalue { %"class.skvm::Builder"*, i32 } %104, 0
  %106 = extractvalue { %"class.skvm::Builder"*, i32 } %104, 1
  %107 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"* %105, %"class.skvm::Builder"* %105, i32 %106) #14
  %108 = extractvalue { %"class.skvm::Builder"*, i32 } %107, 0
  %109 = extractvalue { %"class.skvm::Builder"*, i32 } %107, 1
  %110 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %108, %"class.skvm::Builder"* %108, i32 %109, %"class.skvm::Builder"* %108, i32 %109) #14
  %111 = extractvalue { %"class.skvm::Builder"*, i32 } %110, 0
  %112 = extractvalue { %"class.skvm::Builder"*, i32 } %110, 1
  %113 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %99, %"class.skvm::Builder"* %99, i32 %100, %"class.skvm::Builder"* %111, i32 %112) #14
  %114 = extractvalue { %"class.skvm::Builder"*, i32 } %113, 0
  %115 = extractvalue { %"class.skvm::Builder"*, i32 } %113, 1
  %116 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %114, i32 1065353216) #14
  %117 = extractvalue { %"class.skvm::Builder"*, i32 } %116, 0
  %118 = extractvalue { %"class.skvm::Builder"*, i32 } %116, 1
  %119 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %114, %"class.skvm::Builder"* %114, i32 %115, %"class.skvm::Builder"* %117, i32 %118) #14
  %120 = extractvalue { %"class.skvm::Builder"*, i32 } %119, 0
  %121 = extractvalue { %"class.skvm::Builder"*, i32 } %119, 1
  %122 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %120, i32 2147483647) #14
  %123 = extractvalue { %"class.skvm::Builder"*, i32 } %122, 0
  %124 = extractvalue { %"class.skvm::Builder"*, i32 } %122, 1
  %125 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %120, %"class.skvm::Builder"* %120, i32 %121, %"class.skvm::Builder"* %123, i32 %124) #14
  %126 = extractvalue { %"class.skvm::Builder"*, i32 } %125, 0
  %127 = extractvalue { %"class.skvm::Builder"*, i32 } %125, 1
  br label %128

128:                                              ; preds = %66, %87, %94, %46
  %129 = phi %"class.skvm::Builder"* [ %62, %46 ], [ %92, %87 ], [ %62, %66 ], [ %126, %94 ]
  %130 = phi i32 [ %63, %46 ], [ %93, %87 ], [ %63, %66 ], [ %127, %94 ]
  %131 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 7
  %132 = load i32, i32* %131, align 8
  %133 = zext i32 %132 to i64
  %134 = or i64 %133, 4294967296
  %135 = bitcast %struct.SkImageInfo* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %135) #14
  %136 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %18, i64 0, i32 0, i32 0, i32 0
  %137 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %18, i64 0, i32 0, i32 1
  %138 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %18, i64 0, i32 1, i32 0
  %139 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 9, i32 0
  %140 = bitcast %struct.SkImageInfo* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 -86, i64 24, i1 false)
  %141 = load %class.SkColorSpace*, %class.SkColorSpace** %139, align 8
  %142 = icmp eq %class.SkColorSpace* %141, null
  br i1 %142, label %146, label %143

143:                                              ; preds = %128
  %144 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %141, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = atomicrmw add i32* %144, i32 1 monotonic
  br label %146

146:                                              ; preds = %143, %128
  %147 = ptrtoint %class.SkColorSpace* %141 to i64
  %148 = bitcast %struct.SkImageInfo* %18 to i64*
  store i64 %147, i64* %148, align 8, !alias.scope !3
  %149 = bitcast i32* %137 to i64*
  store i64 12884901902, i64* %149, align 8, !alias.scope !3
  %150 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %18, i64 0, i32 1
  %151 = bitcast %struct.SkISize* %150 to i64*
  store i64 %134, i64* %151, align 8, !alias.scope !3
  %152 = bitcast %struct.SkImageInfo* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #14
  %153 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %19, i64 0, i32 0, i32 0, i32 0
  %154 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %19, i64 0, i32 0, i32 1
  %155 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 0, i32 0
  %156 = bitcast %struct.SkImageInfo* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %156, i8 -86, i64 24, i1 false)
  %157 = load %class.SkColorSpace*, %class.SkColorSpace** %155, align 8, !noalias !8
  %158 = icmp eq %class.SkColorSpace* %157, null
  br i1 %158, label %162, label %159

159:                                              ; preds = %146
  %160 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = atomicrmw add i32* %160, i32 1 monotonic, !noalias !8
  br label %162

162:                                              ; preds = %159, %146
  %163 = ptrtoint %class.SkColorSpace* %157 to i64
  %164 = bitcast %struct.SkImageInfo* %19 to i64*
  store i64 %163, i64* %164, align 8, !alias.scope !11
  %165 = bitcast i32* %154 to i64*
  store i64 12884901902, i64* %165, align 8, !alias.scope !11
  %166 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %19, i64 0, i32 1
  %167 = bitcast %struct.SkISize* %166 to i64*
  store i64 %134, i64* %167, align 8, !alias.scope !11
  %168 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 3
  %169 = load i8, i8* %168, align 8
  %170 = and i8 %169, 1
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %186, label %172

172:                                              ; preds = %162
  br i1 %158, label %173, label %174

173:                                              ; preds = %172
  store i64 0, i64* %164, align 8
  br label %185

174:                                              ; preds = %172
  %175 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = atomicrmw add i32* %175, i32 1 monotonic, !noalias !16
  %177 = load %class.SkColorSpace*, %class.SkColorSpace** %153, align 8
  store i64 %163, i64* %164, align 8
  %178 = icmp eq %class.SkColorSpace* %177, null
  br i1 %178, label %185, label %179

179:                                              ; preds = %174
  %180 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %177, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %181 = atomicrmw add i32* %180, i32 -1 acq_rel
  %182 = icmp eq i32 %181, 1
  br i1 %182, label %183, label %185

183:                                              ; preds = %179
  %184 = bitcast %class.SkColorSpace* %177 to i8*
  call void @_ZdlPv(i8* %184) #15
  br label %185

185:                                              ; preds = %183, %179, %174, %173
  store i64 8589934606, i64* %165, align 8
  store i64 %134, i64* %167, align 8
  br label %186

186:                                              ; preds = %162, %185
  %187 = bitcast %"class.std::__1::vector.48"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %187) #14
  %188 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %20, i64 0, i32 0, i32 0
  %189 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %20, i64 0, i32 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %20, i64 0, i32 0, i32 2, i32 0, i32 0
  %191 = load i32, i32* %131, align 8
  %192 = shl nsw i32 %191, 2
  %193 = sext i32 %192 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %187, i8 0, i64 24, i1 false) #14
  %194 = icmp eq i32 %191, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %186
  %196 = bitcast %"class.std::__1::vector.48"* %20 to i8**
  br label %216

197:                                              ; preds = %186
  %198 = icmp slt i32 %191, 0
  br i1 %198, label %199, label %201

199:                                              ; preds = %197
  %200 = bitcast %"class.std::__1::vector.48"* %20 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %200) #16
  unreachable

201:                                              ; preds = %197
  %202 = shl nsw i64 %193, 2
  %203 = call i8* @_Znwm(i64 %202) #15
  %204 = bitcast i8* %203 to float*
  %205 = bitcast %"class.std::__1::vector.48"* %20 to i8**
  store i8* %203, i8** %205, align 8
  %206 = getelementptr inbounds float, float* %204, i64 %193
  store float* %206, float** %190, align 8
  %207 = bitcast float** %189 to i64*
  %208 = ptrtoint i8* %203 to i64
  %209 = add nsw i64 %193, -1
  %210 = getelementptr float, float* %204, i64 %209
  %211 = ptrtoint float* %210 to i64
  %212 = sub i64 4, %208
  %213 = add i64 %212, %211
  %214 = and i64 %213, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %203, i8 0, i64 %214, i1 false) #14
  %215 = ptrtoint float* %206 to i64
  store i64 %215, i64* %207, align 8
  br label %216

216:                                              ; preds = %195, %201
  %217 = phi i8** [ %196, %195 ], [ %205, %201 ]
  %218 = phi i8* [ null, %195 ], [ %203, %201 ]
  %219 = sext i32 %132 to i64
  %220 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %19, i64 0, i32 0
  %221 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %220) #14
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %222, %219
  %224 = icmp ult i64 %223, 2147483648
  %225 = select i1 %224, i64 %223, i64 0
  %226 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 5
  %227 = bitcast %struct.SkRGBA4f** %226 to i8**
  %228 = load i8*, i8** %227, align 8
  %229 = load i32, i32* %138, align 8
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %18, i64 0, i32 0
  %232 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %231) #14
  %233 = sext i32 %232 to i64
  %234 = mul nsw i64 %233, %230
  %235 = icmp ult i64 %234, 2147483648
  %236 = select i1 %235, i64 %234, i64 0
  %237 = call zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* nonnull dereferenceable(24) %19, i8* %218, i64 %225, %struct.SkImageInfo* nonnull dereferenceable(24) %18, i8* %228, i64 %236) #14
  %238 = load i32, i32* %131, align 8
  %239 = icmp eq i32 %238, 2
  br i1 %239, label %240, label %360

240:                                              ; preds = %216
  %241 = load float*, float** %188, align 8
  %242 = bitcast float* %241 to <2 x float>*
  %243 = load <2 x float>, <2 x float>* %242, align 1
  %244 = getelementptr inbounds float, float* %241, i64 2
  %245 = bitcast float* %244 to <2 x float>*
  %246 = load <2 x float>, <2 x float>* %245, align 1
  %247 = shufflevector <2 x float> %243, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %248 = shufflevector <2 x float> %246, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %249 = shufflevector <4 x float> %247, <4 x float> %248, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %250 = getelementptr inbounds float, float* %241, i64 4
  %251 = bitcast float* %250 to <2 x float>*
  %252 = load <2 x float>, <2 x float>* %251, align 1
  %253 = getelementptr inbounds float, float* %241, i64 6
  %254 = bitcast float* %253 to <2 x float>*
  %255 = load <2 x float>, <2 x float>* %254, align 1
  %256 = shufflevector <2 x float> %252, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %257 = shufflevector <2 x float> %255, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %258 = shufflevector <4 x float> %256, <4 x float> %257, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %259 = fsub <4 x float> %258, %249
  %260 = extractelement <2 x float> %243, i32 0
  %261 = extractelement <2 x float> %243, i32 1
  %262 = extractelement <2 x float> %246, i32 0
  %263 = extractelement <2 x float> %246, i32 1
  %264 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %129, i32 0) #14
  %265 = extractvalue { %"class.skvm::Builder"*, i32 } %264, 0
  %266 = extractvalue { %"class.skvm::Builder"*, i32 } %264, 1
  %267 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %129, i32 1065353216) #14
  %268 = extractvalue { %"class.skvm::Builder"*, i32 } %267, 0
  %269 = extractvalue { %"class.skvm::Builder"*, i32 } %267, 1
  %270 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %268, i32 %269) #14
  %271 = extractvalue { %"class.skvm::Builder"*, i32 } %270, 0
  %272 = extractvalue { %"class.skvm::Builder"*, i32 } %270, 1
  %273 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %265, i32 %266, %"class.skvm::Builder"* %271, i32 %272) #14
  %274 = extractvalue { %"class.skvm::Builder"*, i32 } %273, 0
  %275 = extractvalue { %"class.skvm::Builder"*, i32 } %273, 1
  %276 = extractelement <4 x float> %259, i32 0
  %277 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %276) #14
  %278 = trunc i64 %277 to i32
  %279 = lshr i64 %277, 32
  %280 = trunc i64 %279 to i32
  %281 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %278, i32 %280) #14
  %282 = extractvalue { %"class.skvm::Builder"*, i32 } %281, 0
  %283 = extractvalue { %"class.skvm::Builder"*, i32 } %281, 1
  %284 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %274, %"class.skvm::Builder"* %274, i32 %275, %"class.skvm::Builder"* %282, i32 %283) #14
  %285 = extractvalue { %"class.skvm::Builder"*, i32 } %284, 0
  %286 = extractvalue { %"class.skvm::Builder"*, i32 } %284, 1
  %287 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %260) #14
  %288 = trunc i64 %287 to i32
  %289 = lshr i64 %287, 32
  %290 = trunc i64 %289 to i32
  %291 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %288, i32 %290) #14
  %292 = extractvalue { %"class.skvm::Builder"*, i32 } %291, 0
  %293 = extractvalue { %"class.skvm::Builder"*, i32 } %291, 1
  %294 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %285, %"class.skvm::Builder"* %285, i32 %286, %"class.skvm::Builder"* %292, i32 %293) #14
  %295 = extractvalue { %"class.skvm::Builder"*, i32 } %294, 0
  %296 = extractvalue { %"class.skvm::Builder"*, i32 } %294, 1
  %297 = extractelement <4 x float> %259, i32 1
  %298 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %297) #14
  %299 = trunc i64 %298 to i32
  %300 = lshr i64 %298, 32
  %301 = trunc i64 %300 to i32
  %302 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %299, i32 %301) #14
  %303 = extractvalue { %"class.skvm::Builder"*, i32 } %302, 0
  %304 = extractvalue { %"class.skvm::Builder"*, i32 } %302, 1
  %305 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %274, %"class.skvm::Builder"* %274, i32 %275, %"class.skvm::Builder"* %303, i32 %304) #14
  %306 = extractvalue { %"class.skvm::Builder"*, i32 } %305, 0
  %307 = extractvalue { %"class.skvm::Builder"*, i32 } %305, 1
  %308 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %261) #14
  %309 = trunc i64 %308 to i32
  %310 = lshr i64 %308, 32
  %311 = trunc i64 %310 to i32
  %312 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %309, i32 %311) #14
  %313 = extractvalue { %"class.skvm::Builder"*, i32 } %312, 0
  %314 = extractvalue { %"class.skvm::Builder"*, i32 } %312, 1
  %315 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %306, %"class.skvm::Builder"* %306, i32 %307, %"class.skvm::Builder"* %313, i32 %314) #14
  %316 = extractvalue { %"class.skvm::Builder"*, i32 } %315, 0
  %317 = extractvalue { %"class.skvm::Builder"*, i32 } %315, 1
  %318 = extractelement <4 x float> %259, i32 2
  %319 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %318) #14
  %320 = trunc i64 %319 to i32
  %321 = lshr i64 %319, 32
  %322 = trunc i64 %321 to i32
  %323 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %320, i32 %322) #14
  %324 = extractvalue { %"class.skvm::Builder"*, i32 } %323, 0
  %325 = extractvalue { %"class.skvm::Builder"*, i32 } %323, 1
  %326 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %274, %"class.skvm::Builder"* %274, i32 %275, %"class.skvm::Builder"* %324, i32 %325) #14
  %327 = extractvalue { %"class.skvm::Builder"*, i32 } %326, 0
  %328 = extractvalue { %"class.skvm::Builder"*, i32 } %326, 1
  %329 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %262) #14
  %330 = trunc i64 %329 to i32
  %331 = lshr i64 %329, 32
  %332 = trunc i64 %331 to i32
  %333 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %330, i32 %332) #14
  %334 = extractvalue { %"class.skvm::Builder"*, i32 } %333, 0
  %335 = extractvalue { %"class.skvm::Builder"*, i32 } %333, 1
  %336 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %327, %"class.skvm::Builder"* %327, i32 %328, %"class.skvm::Builder"* %334, i32 %335) #14
  %337 = extractvalue { %"class.skvm::Builder"*, i32 } %336, 0
  %338 = extractvalue { %"class.skvm::Builder"*, i32 } %336, 1
  %339 = extractelement <4 x float> %259, i32 3
  %340 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %339) #14
  %341 = trunc i64 %340 to i32
  %342 = lshr i64 %340, 32
  %343 = trunc i64 %342 to i32
  %344 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %341, i32 %343) #14
  %345 = extractvalue { %"class.skvm::Builder"*, i32 } %344, 0
  %346 = extractvalue { %"class.skvm::Builder"*, i32 } %344, 1
  %347 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %274, %"class.skvm::Builder"* %274, i32 %275, %"class.skvm::Builder"* %345, i32 %346) #14
  %348 = extractvalue { %"class.skvm::Builder"*, i32 } %347, 0
  %349 = extractvalue { %"class.skvm::Builder"*, i32 } %347, 1
  %350 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %263) #14
  %351 = trunc i64 %350 to i32
  %352 = lshr i64 %350, 32
  %353 = trunc i64 %352 to i32
  %354 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %351, i32 %353) #14
  %355 = extractvalue { %"class.skvm::Builder"*, i32 } %354, 0
  %356 = extractvalue { %"class.skvm::Builder"*, i32 } %354, 1
  %357 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %348, %"class.skvm::Builder"* %348, i32 %349, %"class.skvm::Builder"* %355, i32 %356) #14
  %358 = extractvalue { %"class.skvm::Builder"*, i32 } %357, 0
  %359 = extractvalue { %"class.skvm::Builder"*, i32 } %357, 1
  br label %943

360:                                              ; preds = %216
  %361 = add nsw i32 %238, 1
  %362 = sext i32 %361 to i64
  %363 = icmp sgt i32 %238, -2
  br i1 %363, label %365, label %364

364:                                              ; preds = %360
  call void @abort() #16
  unreachable

365:                                              ; preds = %360
  %366 = icmp ult i32 %361, 134217728
  br i1 %366, label %368, label %367

367:                                              ; preds = %365
  call void @abort() #16
  unreachable

368:                                              ; preds = %365
  %369 = shl nsw i64 %362, 5
  %370 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %10, i64 0, i32 1
  %371 = bitcast i8** %370 to i64*
  %372 = load i64, i64* %371, align 8
  %373 = sub i64 0, %372
  %374 = and i64 %373, 15
  %375 = and i64 %369, 4294967264
  %376 = or i64 %374, %375
  %377 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %10, i64 0, i32 2
  %378 = bitcast i8** %377 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = sub i64 %379, %372
  %381 = icmp ugt i64 %376, %380
  br i1 %381, label %382, label %387

382:                                              ; preds = %368
  %383 = trunc i64 %369 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %10, i32 %383, i32 16) #14
  %384 = load i64, i64* %371, align 8
  %385 = sub i64 0, %384
  %386 = and i64 %385, 15
  br label %387

387:                                              ; preds = %368, %382
  %388 = phi i64 [ %384, %382 ], [ %372, %368 ]
  %389 = phi i64 [ %386, %382 ], [ %374, %368 ]
  %390 = inttoptr i64 %388 to i8*
  %391 = getelementptr inbounds i8, i8* %390, i64 %389
  %392 = getelementptr inbounds i8, i8* %391, i64 %375
  store i8* %392, i8** %370, align 8
  %393 = bitcast i8* %391 to %struct.FB*
  %394 = bitcast %"class.std::__1::vector.48"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %394) #14
  %395 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %21, i64 0, i32 0, i32 0
  %396 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %21, i64 0, i32 0, i32 1
  %397 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %394, i8 0, i64 24, i1 false) #14
  %398 = load i32, i32* %131, align 8
  %399 = sext i32 %398 to i64
  %400 = bitcast float** %397 to i64*
  %401 = bitcast %"class.std::__1::vector.48"* %21 to i64*
  %402 = icmp eq i32 %398, 0
  br i1 %402, label %416, label %403

403:                                              ; preds = %387
  %404 = icmp slt i32 %398, 0
  br i1 %404, label %405, label %406

405:                                              ; preds = %403
  call void @abort() #16
  unreachable

406:                                              ; preds = %403
  %407 = shl nsw i64 %399, 2
  %408 = call i8* @_Znwm(i64 %407) #15
  %409 = bitcast i8* %408 to float*
  %410 = getelementptr inbounds float, float* %409, i64 %399
  %411 = ptrtoint float* %410 to i64
  %412 = insertelement <2 x i8*> undef, i8* %408, i32 0
  %413 = shufflevector <2 x i8*> %412, <2 x i8*> undef, <2 x i32> zeroinitializer
  %414 = ptrtoint <2 x i8*> %413 to <2 x i64>
  %415 = bitcast %"class.std::__1::vector.48"* %21 to <2 x i64>*
  store <2 x i64> %414, <2 x i64>* %415, align 16
  store i64 %411, i64* %400, align 16
  br label %416

416:                                              ; preds = %406, %387
  %417 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 6
  %418 = load float*, float** %417, align 8
  %419 = icmp eq float* %418, null
  br i1 %419, label %422, label %420

420:                                              ; preds = %416
  %421 = load float, float* %418, align 4
  br label %426

422:                                              ; preds = %416
  %423 = add nsw i32 %398, -1
  %424 = sitofp i32 %423 to float
  %425 = fdiv float 0.000000e+00, %424
  br label %426

426:                                              ; preds = %420, %422
  %427 = phi float [ %421, %420 ], [ %425, %422 ]
  %428 = load i8*, i8** %217, align 8
  %429 = bitcast i8* %428 to <2 x float>*
  %430 = load <2 x float>, <2 x float>* %429, align 1
  %431 = getelementptr inbounds i8, i8* %428, i64 8
  %432 = bitcast i8* %431 to <2 x float>*
  %433 = load <2 x float>, <2 x float>* %432, align 1
  %434 = shufflevector <2 x float> %430, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %435 = shufflevector <2 x float> %433, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %436 = shufflevector <4 x float> %434, <4 x float> %435, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %437 = bitcast i8* %391 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %437, align 16
  %438 = getelementptr inbounds i8, i8* %391, i64 16
  %439 = bitcast i8* %438 to <4 x float>*
  store <4 x float> %436, <4 x float>* %439, align 16
  %440 = load i32, i32* %131, align 8
  %441 = icmp sgt i32 %440, 1
  br i1 %441, label %442, label %444

442:                                              ; preds = %426
  %443 = bitcast float** %396 to i64*
  br label %657

444:                                              ; preds = %763, %426
  %445 = phi float [ %427, %426 ], [ %674, %763 ]
  %446 = phi <4 x float> [ %436, %426 ], [ %686, %763 ]
  %447 = load float*, float** %396, align 8
  %448 = load float*, float** %397, align 16
  %449 = icmp eq float* %447, %448
  %450 = ptrtoint float* %448 to i64
  br i1 %449, label %455, label %451

451:                                              ; preds = %444
  store float %445, float* %447, align 4
  %452 = getelementptr inbounds float, float* %447, i64 1
  %453 = ptrtoint float* %452 to i64
  %454 = bitcast float** %396 to i64*
  store i64 %453, i64* %454, align 8
  br label %500

455:                                              ; preds = %444
  %456 = ptrtoint float* %447 to i64
  %457 = bitcast float** %396 to i64*
  %458 = load i64, i64* %401, align 16
  %459 = sub i64 %456, %458
  %460 = ashr exact i64 %459, 2
  %461 = add nsw i64 %460, 1
  %462 = icmp ugt i64 %461, 4611686018427387903
  br i1 %462, label %463, label %465

463:                                              ; preds = %455
  %464 = bitcast %"class.std::__1::vector.48"* %21 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %464) #16
  unreachable

465:                                              ; preds = %455
  %466 = sub i64 %450, %458
  %467 = ashr exact i64 %466, 2
  %468 = icmp ult i64 %467, 2305843009213693951
  br i1 %468, label %469, label %477

469:                                              ; preds = %465
  %470 = ashr exact i64 %466, 1
  %471 = icmp ult i64 %470, %461
  %472 = select i1 %471, i64 %461, i64 %470
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %482, label %474

474:                                              ; preds = %469
  %475 = icmp ugt i64 %472, 4611686018427387903
  br i1 %475, label %476, label %477

476:                                              ; preds = %474
  call void @abort() #16
  unreachable

477:                                              ; preds = %474, %465
  %478 = phi i64 [ %472, %474 ], [ 4611686018427387903, %465 ]
  %479 = shl i64 %478, 2
  %480 = call i8* @_Znwm(i64 %479) #15
  %481 = bitcast i8* %480 to float*
  br label %482

482:                                              ; preds = %477, %469
  %483 = phi i64 [ %478, %477 ], [ 0, %469 ]
  %484 = phi i8* [ %480, %477 ], [ null, %469 ]
  %485 = phi float* [ %481, %477 ], [ null, %469 ]
  %486 = getelementptr inbounds float, float* %485, i64 %460
  %487 = getelementptr inbounds float, float* %485, i64 %483
  %488 = ptrtoint float* %487 to i64
  store float %445, float* %486, align 4
  %489 = getelementptr inbounds float, float* %486, i64 1
  %490 = ptrtoint float* %489 to i64
  %491 = ptrtoint float* %485 to i64
  %492 = icmp sgt i64 %459, 0
  br i1 %492, label %493, label %495

493:                                              ; preds = %482
  %494 = inttoptr i64 %458 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %484, i8* align 4 %494, i64 %459, i1 false) #14
  br label %495

495:                                              ; preds = %493, %482
  store i64 %491, i64* %401, align 16
  store i64 %490, i64* %457, align 8
  store i64 %488, i64* %400, align 16
  %496 = icmp eq i64 %458, 0
  br i1 %496, label %500, label %497

497:                                              ; preds = %495
  %498 = inttoptr i64 %458 to i8*
  call void @_ZdlPv(i8* %498) #15
  %499 = load i64, i64* %457, align 8
  br label %500

500:                                              ; preds = %451, %495, %497
  %501 = phi i64* [ %454, %451 ], [ %457, %495 ], [ %457, %497 ]
  %502 = phi i64 [ %453, %451 ], [ %490, %495 ], [ %499, %497 ]
  %503 = load i64, i64* %401, align 16
  %504 = sub i64 %502, %503
  %505 = ashr exact i64 %504, 2
  %506 = getelementptr inbounds %struct.FB, %struct.FB* %393, i64 %505, i32 0, i32 0, i32 0, i32 0
  %507 = getelementptr inbounds %struct.FB, %struct.FB* %393, i64 %505, i32 1
  %508 = bitcast %"struct.skvx::Vec"* %507 to <4 x float>*
  %509 = bitcast float* %506 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %509, i8 0, i64 16, i1 false)
  store <4 x float> %446, <4 x float>* %508, align 16
  %510 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %9, i64 0, i32 1
  %511 = ptrtoint i8* %391 to i64
  %512 = trunc i64 %511 to i32
  %513 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %9, i64 0, i32 1, i32 0, i32 1
  %514 = load i32*, i32** %513, align 8
  %515 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %9, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %516 = load i32*, i32** %515, align 8
  %517 = icmp eq i32* %514, %516
  %518 = ptrtoint i32* %516 to i64
  br i1 %517, label %523, label %519

519:                                              ; preds = %500
  store i32 %512, i32* %514, align 4
  %520 = getelementptr inbounds i32, i32* %514, i64 1
  %521 = ptrtoint i32* %520 to i64
  %522 = bitcast i32** %513 to i64*
  store i64 %521, i64* %522, align 8
  br label %580

523:                                              ; preds = %500
  %524 = ptrtoint i32* %514 to i64
  %525 = bitcast i32** %513 to i64*
  %526 = bitcast %"class.std::__1::vector.41"* %510 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = sub i64 %524, %527
  %529 = ashr exact i64 %528, 2
  %530 = add nsw i64 %529, 1
  %531 = icmp ugt i64 %530, 4611686018427387903
  br i1 %531, label %532, label %534

532:                                              ; preds = %523
  %533 = bitcast %"class.std::__1::vector.41"* %510 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %533) #16
  unreachable

534:                                              ; preds = %523
  %535 = bitcast i32** %515 to i64*
  %536 = sub i64 %518, %527
  %537 = ashr exact i64 %536, 2
  %538 = icmp ult i64 %537, 2305843009213693951
  br i1 %538, label %539, label %547

539:                                              ; preds = %534
  %540 = ashr exact i64 %536, 1
  %541 = icmp ult i64 %540, %530
  %542 = select i1 %541, i64 %530, i64 %540
  %543 = icmp eq i64 %542, 0
  br i1 %543, label %552, label %544

544:                                              ; preds = %539
  %545 = icmp ugt i64 %542, 4611686018427387903
  br i1 %545, label %546, label %547

546:                                              ; preds = %544
  call void @abort() #16
  unreachable

547:                                              ; preds = %544, %534
  %548 = phi i64 [ %542, %544 ], [ 4611686018427387903, %534 ]
  %549 = shl i64 %548, 2
  %550 = call i8* @_Znwm(i64 %549) #15
  %551 = bitcast i8* %550 to i32*
  br label %552

552:                                              ; preds = %547, %539
  %553 = phi i64 [ %548, %547 ], [ 0, %539 ]
  %554 = phi i32* [ %551, %547 ], [ null, %539 ]
  %555 = getelementptr inbounds i32, i32* %554, i64 %529
  %556 = getelementptr inbounds i32, i32* %554, i64 %553
  %557 = ptrtoint i32* %556 to i64
  store i32 %512, i32* %555, align 4
  %558 = getelementptr inbounds i32, i32* %555, i64 1
  %559 = ptrtoint i32* %558 to i64
  %560 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %510, i64 0, i32 0, i32 0
  %561 = load i32*, i32** %560, align 8
  %562 = load i64, i64* %525, align 8
  %563 = ptrtoint i32* %561 to i64
  %564 = sub i64 %562, %563
  %565 = ashr exact i64 %564, 2
  %566 = sub nsw i64 0, %565
  %567 = getelementptr inbounds i32, i32* %555, i64 %566
  %568 = ptrtoint i32* %567 to i64
  %569 = icmp sgt i64 %564, 0
  br i1 %569, label %570, label %574

570:                                              ; preds = %552
  %571 = bitcast i32* %567 to i8*
  %572 = bitcast i32* %561 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %571, i8* align 4 %572, i64 %564, i1 false) #14
  %573 = load i32*, i32** %560, align 8
  br label %574

574:                                              ; preds = %570, %552
  %575 = phi i32* [ %561, %552 ], [ %573, %570 ]
  store i64 %568, i64* %526, align 8
  store i64 %559, i64* %525, align 8
  store i64 %557, i64* %535, align 8
  %576 = icmp eq i32* %575, null
  br i1 %576, label %580, label %577

577:                                              ; preds = %574
  %578 = bitcast i32* %575 to i8*
  call void @_ZdlPv(i8* %578) #15
  %579 = load i32*, i32** %513, align 8
  br label %580

580:                                              ; preds = %519, %574, %577
  %581 = phi i32* [ %520, %519 ], [ %558, %574 ], [ %579, %577 ]
  %582 = lshr i64 %511, 32
  %583 = trunc i64 %582 to i32
  %584 = load i32*, i32** %515, align 8
  %585 = icmp eq i32* %581, %584
  br i1 %585, label %591, label %586

586:                                              ; preds = %580
  store i32 %583, i32* %581, align 4
  %587 = getelementptr inbounds i32, i32* %581, i64 1
  %588 = ptrtoint i32* %587 to i64
  %589 = bitcast i32** %513 to i64*
  store i64 %588, i64* %589, align 8
  %590 = bitcast %"class.std::__1::vector.41"* %510 to i64*
  br label %646

591:                                              ; preds = %580
  %592 = ptrtoint i32* %584 to i64
  %593 = bitcast i32** %513 to i64*
  %594 = bitcast %"class.std::__1::vector.41"* %510 to i64*
  %595 = load i64, i64* %594, align 8
  %596 = sub i64 %592, %595
  %597 = ashr exact i64 %596, 2
  %598 = add nsw i64 %597, 1
  %599 = icmp ugt i64 %598, 4611686018427387903
  br i1 %599, label %600, label %602

600:                                              ; preds = %591
  %601 = bitcast %"class.std::__1::vector.41"* %510 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %601) #16
  unreachable

602:                                              ; preds = %591
  %603 = bitcast i32** %515 to i64*
  %604 = icmp ult i64 %597, 2305843009213693951
  br i1 %604, label %605, label %613

605:                                              ; preds = %602
  %606 = ashr exact i64 %596, 1
  %607 = icmp ult i64 %606, %598
  %608 = select i1 %607, i64 %598, i64 %606
  %609 = icmp eq i64 %608, 0
  br i1 %609, label %618, label %610

610:                                              ; preds = %605
  %611 = icmp ugt i64 %608, 4611686018427387903
  br i1 %611, label %612, label %613

612:                                              ; preds = %610
  call void @abort() #16
  unreachable

613:                                              ; preds = %610, %602
  %614 = phi i64 [ %608, %610 ], [ 4611686018427387903, %602 ]
  %615 = shl i64 %614, 2
  %616 = call i8* @_Znwm(i64 %615) #15
  %617 = bitcast i8* %616 to i32*
  br label %618

618:                                              ; preds = %613, %605
  %619 = phi i64 [ %614, %613 ], [ 0, %605 ]
  %620 = phi i32* [ %617, %613 ], [ null, %605 ]
  %621 = getelementptr inbounds i32, i32* %620, i64 %597
  %622 = getelementptr inbounds i32, i32* %620, i64 %619
  %623 = ptrtoint i32* %622 to i64
  store i32 %583, i32* %621, align 4
  %624 = getelementptr inbounds i32, i32* %621, i64 1
  %625 = ptrtoint i32* %624 to i64
  %626 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %510, i64 0, i32 0, i32 0
  %627 = load i32*, i32** %626, align 8
  %628 = load i64, i64* %593, align 8
  %629 = ptrtoint i32* %627 to i64
  %630 = sub i64 %628, %629
  %631 = ashr exact i64 %630, 2
  %632 = sub nsw i64 0, %631
  %633 = getelementptr inbounds i32, i32* %621, i64 %632
  %634 = ptrtoint i32* %633 to i64
  %635 = icmp sgt i64 %630, 0
  br i1 %635, label %636, label %640

636:                                              ; preds = %618
  %637 = bitcast i32* %633 to i8*
  %638 = bitcast i32* %627 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %637, i8* align 4 %638, i64 %630, i1 false) #14
  %639 = load i32*, i32** %626, align 8
  br label %640

640:                                              ; preds = %636, %618
  %641 = phi i32* [ %627, %618 ], [ %639, %636 ]
  store i64 %634, i64* %594, align 8
  store i64 %625, i64* %593, align 8
  store i64 %623, i64* %603, align 8
  %642 = icmp eq i32* %641, null
  br i1 %642, label %646, label %643

643:                                              ; preds = %640
  %644 = bitcast i32* %641 to i8*
  call void @_ZdlPv(i8* %644) #15
  %645 = load i64, i64* %593, align 8
  br label %646

646:                                              ; preds = %586, %640, %643
  %647 = phi i64* [ %590, %586 ], [ %594, %640 ], [ %594, %643 ]
  %648 = phi i64 [ %588, %586 ], [ %625, %640 ], [ %645, %643 ]
  %649 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %9, i64 0, i32 0, i32 0
  %650 = load i32, i32* %649, align 8
  %651 = load i64, i64* %647, align 8
  %652 = sub i64 %648, %651
  %653 = shl i64 %652, 32
  %654 = add i64 %653, -34359738368
  %655 = load float*, float** %417, align 8
  %656 = icmp eq float* %655, null
  br i1 %656, label %768, label %806

657:                                              ; preds = %442, %763
  %658 = phi i32 [ %440, %442 ], [ %764, %763 ]
  %659 = phi i64 [ 1, %442 ], [ %765, %763 ]
  %660 = phi <4 x float> [ %436, %442 ], [ %686, %763 ]
  %661 = phi float [ %427, %442 ], [ %674, %763 ]
  %662 = load float*, float** %417, align 8
  %663 = icmp eq float* %662, null
  br i1 %663, label %667, label %664

664:                                              ; preds = %657
  %665 = getelementptr inbounds float, float* %662, i64 %659
  %666 = load float, float* %665, align 4
  br label %673

667:                                              ; preds = %657
  %668 = trunc i64 %659 to i32
  %669 = sitofp i32 %668 to float
  %670 = add nsw i32 %658, -1
  %671 = sitofp i32 %670 to float
  %672 = fdiv float %669, %671
  br label %673

673:                                              ; preds = %664, %667
  %674 = phi float [ %666, %664 ], [ %672, %667 ]
  %675 = load float*, float** %188, align 8
  %676 = shl i64 %659, 2
  %677 = and i64 %676, 4294967292
  %678 = getelementptr inbounds float, float* %675, i64 %677
  %679 = bitcast float* %678 to <2 x float>*
  %680 = load <2 x float>, <2 x float>* %679, align 1
  %681 = getelementptr inbounds float, float* %678, i64 2
  %682 = bitcast float* %681 to <2 x float>*
  %683 = load <2 x float>, <2 x float>* %682, align 1
  %684 = shufflevector <2 x float> %680, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %685 = shufflevector <2 x float> %683, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %686 = shufflevector <4 x float> %684, <4 x float> %685, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %687 = fcmp olt float %661, %674
  br i1 %687, label %688, label %763

688:                                              ; preds = %673
  %689 = fsub <4 x float> %686, %660
  %690 = fsub float %674, %661
  %691 = insertelement <4 x float> undef, float %690, i32 0
  %692 = shufflevector <4 x float> %691, <4 x float> undef, <4 x i32> zeroinitializer
  %693 = fdiv <4 x float> %689, %692
  %694 = insertelement <4 x float> undef, float %661, i32 0
  %695 = shufflevector <4 x float> %694, <4 x float> undef, <4 x i32> zeroinitializer
  %696 = fmul <4 x float> %695, %693
  %697 = fsub <4 x float> %660, %696
  %698 = shufflevector <4 x float> %697, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %699 = shufflevector <4 x float> %697, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %700 = load float*, float** %396, align 8
  %701 = load float*, float** %397, align 16
  %702 = icmp eq float* %700, %701
  %703 = ptrtoint float* %701 to i64
  br i1 %702, label %707, label %704

704:                                              ; preds = %688
  store float %661, float* %700, align 4
  %705 = getelementptr inbounds float, float* %700, i64 1
  %706 = ptrtoint float* %705 to i64
  store i64 %706, i64* %443, align 8
  br label %751

707:                                              ; preds = %688
  %708 = ptrtoint float* %700 to i64
  %709 = load i64, i64* %401, align 16
  %710 = sub i64 %708, %709
  %711 = ashr exact i64 %710, 2
  %712 = add nsw i64 %711, 1
  %713 = icmp ugt i64 %712, 4611686018427387903
  br i1 %713, label %714, label %716

714:                                              ; preds = %707
  %715 = bitcast %"class.std::__1::vector.48"* %21 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %715) #16
  unreachable

716:                                              ; preds = %707
  %717 = sub i64 %703, %709
  %718 = ashr exact i64 %717, 2
  %719 = icmp ult i64 %718, 2305843009213693951
  br i1 %719, label %720, label %728

720:                                              ; preds = %716
  %721 = ashr exact i64 %717, 1
  %722 = icmp ult i64 %721, %712
  %723 = select i1 %722, i64 %712, i64 %721
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %733, label %725

725:                                              ; preds = %720
  %726 = icmp ugt i64 %723, 4611686018427387903
  br i1 %726, label %727, label %728

727:                                              ; preds = %725
  call void @abort() #16
  unreachable

728:                                              ; preds = %725, %716
  %729 = phi i64 [ %723, %725 ], [ 4611686018427387903, %716 ]
  %730 = shl i64 %729, 2
  %731 = call i8* @_Znwm(i64 %730) #15
  %732 = bitcast i8* %731 to float*
  br label %733

733:                                              ; preds = %728, %720
  %734 = phi i64 [ %729, %728 ], [ 0, %720 ]
  %735 = phi i8* [ %731, %728 ], [ null, %720 ]
  %736 = phi float* [ %732, %728 ], [ null, %720 ]
  %737 = getelementptr inbounds float, float* %736, i64 %711
  %738 = getelementptr inbounds float, float* %736, i64 %734
  %739 = ptrtoint float* %738 to i64
  store float %661, float* %737, align 4
  %740 = getelementptr inbounds float, float* %737, i64 1
  %741 = ptrtoint float* %740 to i64
  %742 = ptrtoint float* %736 to i64
  %743 = icmp sgt i64 %710, 0
  br i1 %743, label %744, label %746

744:                                              ; preds = %733
  %745 = inttoptr i64 %709 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %735, i8* align 4 %745, i64 %710, i1 false) #14
  br label %746

746:                                              ; preds = %744, %733
  store i64 %742, i64* %401, align 16
  store i64 %741, i64* %443, align 8
  store i64 %739, i64* %400, align 16
  %747 = icmp eq i64 %709, 0
  br i1 %747, label %751, label %748

748:                                              ; preds = %746
  %749 = inttoptr i64 %709 to i8*
  call void @_ZdlPv(i8* %749) #15
  %750 = load i64, i64* %443, align 8
  br label %751

751:                                              ; preds = %704, %746, %748
  %752 = phi i64 [ %706, %704 ], [ %741, %746 ], [ %750, %748 ]
  %753 = load i64, i64* %401, align 16
  %754 = sub i64 %752, %753
  %755 = ashr exact i64 %754, 2
  %756 = getelementptr inbounds %struct.FB, %struct.FB* %393, i64 %755
  %757 = bitcast %struct.FB* %756 to <4 x float>*
  store <4 x float> %693, <4 x float>* %757, align 16
  %758 = getelementptr inbounds %struct.FB, %struct.FB* %393, i64 %755, i32 1
  %759 = bitcast %"struct.skvx::Vec"* %758 to <2 x float>*
  store <2 x float> %698, <2 x float>* %759, align 16
  %760 = getelementptr inbounds %struct.FB, %struct.FB* %393, i64 %755, i32 1, i32 1
  %761 = bitcast %"struct.skvx::Vec.56"* %760 to <2 x float>*
  store <2 x float> %699, <2 x float>* %761, align 8
  %762 = load i32, i32* %131, align 8
  br label %763

763:                                              ; preds = %751, %673
  %764 = phi i32 [ %762, %751 ], [ %658, %673 ]
  %765 = add nuw nsw i64 %659, 1
  %766 = sext i32 %764 to i64
  %767 = icmp slt i64 %765, %766
  br i1 %767, label %657, label %444

768:                                              ; preds = %646
  %769 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %129, i32 0) #14
  %770 = extractvalue { %"class.skvm::Builder"*, i32 } %769, 0
  %771 = extractvalue { %"class.skvm::Builder"*, i32 } %769, 1
  %772 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %129, i32 1065353216) #14
  %773 = extractvalue { %"class.skvm::Builder"*, i32 } %772, 0
  %774 = extractvalue { %"class.skvm::Builder"*, i32 } %772, 1
  %775 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %773, i32 %774) #14
  %776 = extractvalue { %"class.skvm::Builder"*, i32 } %775, 0
  %777 = extractvalue { %"class.skvm::Builder"*, i32 } %775, 1
  %778 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %770, i32 %771, %"class.skvm::Builder"* %776, i32 %777) #14
  %779 = extractvalue { %"class.skvm::Builder"*, i32 } %778, 0
  %780 = extractvalue { %"class.skvm::Builder"*, i32 } %778, 1
  %781 = load i64, i64* %501, align 8
  %782 = load i64, i64* %401, align 16
  %783 = sub i64 %781, %782
  %784 = ashr exact i64 %783, 2
  %785 = add nsw i64 %784, -1
  %786 = uitofp i64 %785 to float
  %787 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %786) #14
  %788 = trunc i64 %787 to i32
  %789 = lshr i64 %787, 32
  %790 = trunc i64 %789 to i32
  %791 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %788, i32 %790) #14
  %792 = extractvalue { %"class.skvm::Builder"*, i32 } %791, 0
  %793 = extractvalue { %"class.skvm::Builder"*, i32 } %791, 1
  %794 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %779, %"class.skvm::Builder"* %779, i32 %780, %"class.skvm::Builder"* %792, i32 %793) #14
  %795 = extractvalue { %"class.skvm::Builder"*, i32 } %794, 0
  %796 = extractvalue { %"class.skvm::Builder"*, i32 } %794, 1
  %797 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %795, i32 1065353216) #14
  %798 = extractvalue { %"class.skvm::Builder"*, i32 } %797, 0
  %799 = extractvalue { %"class.skvm::Builder"*, i32 } %797, 1
  %800 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %795, %"class.skvm::Builder"* %795, i32 %796, %"class.skvm::Builder"* %798, i32 %799) #14
  %801 = extractvalue { %"class.skvm::Builder"*, i32 } %800, 0
  %802 = extractvalue { %"class.skvm::Builder"*, i32 } %800, 1
  %803 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"* %801, %"class.skvm::Builder"* %801, i32 %802) #14
  %804 = extractvalue { %"class.skvm::Builder"*, i32 } %803, 0
  %805 = extractvalue { %"class.skvm::Builder"*, i32 } %803, 1
  br label %833

806:                                              ; preds = %646
  %807 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2, i32 0) #14
  %808 = extractvalue { %"class.skvm::Builder"*, i32 } %807, 0
  %809 = extractvalue { %"class.skvm::Builder"*, i32 } %807, 1
  %810 = load float*, float** %395, align 16
  %811 = load float*, float** %396, align 8
  %812 = icmp eq float* %810, %811
  br i1 %812, label %833, label %813

813:                                              ; preds = %806, %813
  %814 = phi float* [ %831, %813 ], [ %810, %806 ]
  %815 = phi %"class.skvm::Builder"* [ %829, %813 ], [ %808, %806 ]
  %816 = phi i32 [ %830, %813 ], [ %809, %806 ]
  %817 = load float, float* %814, align 4
  %818 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %817) #14
  %819 = trunc i64 %818 to i32
  %820 = lshr i64 %818, 32
  %821 = trunc i64 %820 to i32
  %822 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %819, i32 %821) #14
  %823 = extractvalue { %"class.skvm::Builder"*, i32 } %822, 0
  %824 = extractvalue { %"class.skvm::Builder"*, i32 } %822, 1
  %825 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %823, i32 %824) #14
  %826 = extractvalue { %"class.skvm::Builder"*, i32 } %825, 0
  %827 = extractvalue { %"class.skvm::Builder"*, i32 } %825, 1
  %828 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3I32ES1_(%"class.skvm::Builder"* %815, %"class.skvm::Builder"* %815, i32 %816, %"class.skvm::Builder"* %826, i32 %827) #14
  %829 = extractvalue { %"class.skvm::Builder"*, i32 } %828, 0
  %830 = extractvalue { %"class.skvm::Builder"*, i32 } %828, 1
  %831 = getelementptr inbounds float, float* %814, i64 1
  %832 = icmp eq float* %831, %811
  br i1 %832, label %833, label %813

833:                                              ; preds = %813, %806, %768
  %834 = phi i32 [ %805, %768 ], [ %809, %806 ], [ %830, %813 ]
  %835 = phi %"class.skvm::Builder"* [ %804, %768 ], [ %808, %806 ], [ %829, %813 ]
  %836 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3shlENS_3I32Ei(%"class.skvm::Builder"* %835, %"class.skvm::Builder"* %835, i32 %834, i32 3) #14
  %837 = extractvalue { %"class.skvm::Builder"*, i32 } %836, 0
  %838 = extractvalue { %"class.skvm::Builder"*, i32 } %836, 1
  %839 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 0) #14
  %840 = extractvalue { %"class.skvm::Builder"*, i32 } %839, 0
  %841 = extractvalue { %"class.skvm::Builder"*, i32 } %839, 1
  %842 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %840, i32 %841) #14
  %843 = extractvalue { %"class.skvm::Builder"*, i32 } %842, 0
  %844 = extractvalue { %"class.skvm::Builder"*, i32 } %842, 1
  %845 = lshr exact i64 %654, 32
  %846 = trunc i64 %845 to i32
  %847 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %843, i32 %650, i32 %846, %"class.skvm::Builder"* %843, i32 %844) #14
  %848 = extractvalue { %"class.skvm::Builder"*, i32 } %847, 0
  %849 = extractvalue { %"class.skvm::Builder"*, i32 } %847, 1
  %850 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 1) #14
  %851 = extractvalue { %"class.skvm::Builder"*, i32 } %850, 0
  %852 = extractvalue { %"class.skvm::Builder"*, i32 } %850, 1
  %853 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %851, i32 %852) #14
  %854 = extractvalue { %"class.skvm::Builder"*, i32 } %853, 0
  %855 = extractvalue { %"class.skvm::Builder"*, i32 } %853, 1
  %856 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %854, i32 %650, i32 %846, %"class.skvm::Builder"* %854, i32 %855) #14
  %857 = extractvalue { %"class.skvm::Builder"*, i32 } %856, 0
  %858 = extractvalue { %"class.skvm::Builder"*, i32 } %856, 1
  %859 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 2) #14
  %860 = extractvalue { %"class.skvm::Builder"*, i32 } %859, 0
  %861 = extractvalue { %"class.skvm::Builder"*, i32 } %859, 1
  %862 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %860, i32 %861) #14
  %863 = extractvalue { %"class.skvm::Builder"*, i32 } %862, 0
  %864 = extractvalue { %"class.skvm::Builder"*, i32 } %862, 1
  %865 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %863, i32 %650, i32 %846, %"class.skvm::Builder"* %863, i32 %864) #14
  %866 = extractvalue { %"class.skvm::Builder"*, i32 } %865, 0
  %867 = extractvalue { %"class.skvm::Builder"*, i32 } %865, 1
  %868 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 3) #14
  %869 = extractvalue { %"class.skvm::Builder"*, i32 } %868, 0
  %870 = extractvalue { %"class.skvm::Builder"*, i32 } %868, 1
  %871 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %869, i32 %870) #14
  %872 = extractvalue { %"class.skvm::Builder"*, i32 } %871, 0
  %873 = extractvalue { %"class.skvm::Builder"*, i32 } %871, 1
  %874 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %872, i32 %650, i32 %846, %"class.skvm::Builder"* %872, i32 %873) #14
  %875 = extractvalue { %"class.skvm::Builder"*, i32 } %874, 0
  %876 = extractvalue { %"class.skvm::Builder"*, i32 } %874, 1
  %877 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 4) #14
  %878 = extractvalue { %"class.skvm::Builder"*, i32 } %877, 0
  %879 = extractvalue { %"class.skvm::Builder"*, i32 } %877, 1
  %880 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %878, i32 %879) #14
  %881 = extractvalue { %"class.skvm::Builder"*, i32 } %880, 0
  %882 = extractvalue { %"class.skvm::Builder"*, i32 } %880, 1
  %883 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %881, i32 %650, i32 %846, %"class.skvm::Builder"* %881, i32 %882) #14
  %884 = extractvalue { %"class.skvm::Builder"*, i32 } %883, 0
  %885 = extractvalue { %"class.skvm::Builder"*, i32 } %883, 1
  %886 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 5) #14
  %887 = extractvalue { %"class.skvm::Builder"*, i32 } %886, 0
  %888 = extractvalue { %"class.skvm::Builder"*, i32 } %886, 1
  %889 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %887, i32 %888) #14
  %890 = extractvalue { %"class.skvm::Builder"*, i32 } %889, 0
  %891 = extractvalue { %"class.skvm::Builder"*, i32 } %889, 1
  %892 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %890, i32 %650, i32 %846, %"class.skvm::Builder"* %890, i32 %891) #14
  %893 = extractvalue { %"class.skvm::Builder"*, i32 } %892, 0
  %894 = extractvalue { %"class.skvm::Builder"*, i32 } %892, 1
  %895 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 6) #14
  %896 = extractvalue { %"class.skvm::Builder"*, i32 } %895, 0
  %897 = extractvalue { %"class.skvm::Builder"*, i32 } %895, 1
  %898 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %896, i32 %897) #14
  %899 = extractvalue { %"class.skvm::Builder"*, i32 } %898, 0
  %900 = extractvalue { %"class.skvm::Builder"*, i32 } %898, 1
  %901 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %899, i32 %650, i32 %846, %"class.skvm::Builder"* %899, i32 %900) #14
  %902 = extractvalue { %"class.skvm::Builder"*, i32 } %901, 0
  %903 = extractvalue { %"class.skvm::Builder"*, i32 } %901, 1
  %904 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %837, i32 7) #14
  %905 = extractvalue { %"class.skvm::Builder"*, i32 } %904, 0
  %906 = extractvalue { %"class.skvm::Builder"*, i32 } %904, 1
  %907 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"* %837, %"class.skvm::Builder"* %837, i32 %838, %"class.skvm::Builder"* %905, i32 %906) #14
  %908 = extractvalue { %"class.skvm::Builder"*, i32 } %907, 0
  %909 = extractvalue { %"class.skvm::Builder"*, i32 } %907, 1
  %910 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"* %908, i32 %650, i32 %846, %"class.skvm::Builder"* %908, i32 %909) #14
  %911 = extractvalue { %"class.skvm::Builder"*, i32 } %910, 0
  %912 = extractvalue { %"class.skvm::Builder"*, i32 } %910, 1
  %913 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %848, i32 %849) #14
  %914 = extractvalue { %"class.skvm::Builder"*, i32 } %913, 0
  %915 = extractvalue { %"class.skvm::Builder"*, i32 } %913, 1
  %916 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %914, %"class.skvm::Builder"* %914, i32 %915, %"class.skvm::Builder"* %884, i32 %885) #14
  %917 = extractvalue { %"class.skvm::Builder"*, i32 } %916, 0
  %918 = extractvalue { %"class.skvm::Builder"*, i32 } %916, 1
  %919 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %857, i32 %858) #14
  %920 = extractvalue { %"class.skvm::Builder"*, i32 } %919, 0
  %921 = extractvalue { %"class.skvm::Builder"*, i32 } %919, 1
  %922 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %920, %"class.skvm::Builder"* %920, i32 %921, %"class.skvm::Builder"* %893, i32 %894) #14
  %923 = extractvalue { %"class.skvm::Builder"*, i32 } %922, 0
  %924 = extractvalue { %"class.skvm::Builder"*, i32 } %922, 1
  %925 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %866, i32 %867) #14
  %926 = extractvalue { %"class.skvm::Builder"*, i32 } %925, 0
  %927 = extractvalue { %"class.skvm::Builder"*, i32 } %925, 1
  %928 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %926, %"class.skvm::Builder"* %926, i32 %927, %"class.skvm::Builder"* %902, i32 %903) #14
  %929 = extractvalue { %"class.skvm::Builder"*, i32 } %928, 0
  %930 = extractvalue { %"class.skvm::Builder"*, i32 } %928, 1
  %931 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %129, %"class.skvm::Builder"* %129, i32 %130, %"class.skvm::Builder"* %875, i32 %876) #14
  %932 = extractvalue { %"class.skvm::Builder"*, i32 } %931, 0
  %933 = extractvalue { %"class.skvm::Builder"*, i32 } %931, 1
  %934 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %932, %"class.skvm::Builder"* %932, i32 %933, %"class.skvm::Builder"* %911, i32 %912) #14
  %935 = extractvalue { %"class.skvm::Builder"*, i32 } %934, 0
  %936 = extractvalue { %"class.skvm::Builder"*, i32 } %934, 1
  %937 = load float*, float** %395, align 16
  %938 = icmp eq float* %937, null
  br i1 %938, label %942, label %939

939:                                              ; preds = %833
  %940 = ptrtoint float* %937 to i64
  store i64 %940, i64* %501, align 8
  %941 = bitcast float* %937 to i8*
  call void @_ZdlPv(i8* %941) #15
  br label %942

942:                                              ; preds = %833, %939
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %394) #14
  br label %943

943:                                              ; preds = %942, %240
  %944 = phi i32 [ %359, %240 ], [ %936, %942 ]
  %945 = phi %"class.skvm::Builder"* [ %358, %240 ], [ %935, %942 ]
  %946 = phi i32 [ %338, %240 ], [ %930, %942 ]
  %947 = phi %"class.skvm::Builder"* [ %337, %240 ], [ %929, %942 ]
  %948 = phi i32 [ %317, %240 ], [ %924, %942 ]
  %949 = phi %"class.skvm::Builder"* [ %316, %240 ], [ %923, %942 ]
  %950 = phi i32 [ %296, %240 ], [ %918, %942 ]
  %951 = phi %"class.skvm::Builder"* [ %295, %240 ], [ %917, %942 ]
  %952 = load i8, i8* %168, align 8
  %953 = and i8 %952, 1
  %954 = icmp eq i8 %953, 0
  br i1 %954, label %955, label %988

955:                                              ; preds = %943
  %956 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %1, i64 0, i32 11
  %957 = load i8, i8* %956, align 8, !range !2
  %958 = icmp eq i8 %957, 0
  br i1 %958, label %959, label %988

959:                                              ; preds = %955
  %960 = bitcast %"struct.skvm::Color"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %960) #14, !noalias !23
  %961 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %951, %"class.skvm::Builder"** %961, align 8, !noalias !23
  %962 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0, i32 1
  store i32 %950, i32* %962, align 8, !noalias !23
  %963 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0, i32 2
  %964 = bitcast [4 x i8]* %963 to i32*
  store i32 -1431655766, i32* %964, align 4, !noalias !23
  %965 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %949, %"class.skvm::Builder"** %965, align 8, !noalias !23
  %966 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1, i32 1
  store i32 %948, i32* %966, align 8, !noalias !23
  %967 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1, i32 2
  %968 = bitcast [4 x i8]* %967 to i32*
  store i32 -1431655766, i32* %968, align 4, !noalias !23
  %969 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* %947, %"class.skvm::Builder"** %969, align 8, !noalias !23
  %970 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2, i32 1
  store i32 %946, i32* %970, align 8, !noalias !23
  %971 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2, i32 2
  %972 = bitcast [4 x i8]* %971 to i32*
  store i32 -1431655766, i32* %972, align 4, !noalias !23
  %973 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %945, %"class.skvm::Builder"** %973, align 8, !noalias !23
  %974 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 1
  store i32 %944, i32* %974, align 8, !noalias !23
  %975 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 2
  %976 = bitcast [4 x i8]* %975 to i32*
  store i32 -1431655766, i32* %976, align 4, !noalias !23
  %977 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0
  %978 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1
  %979 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2
  call void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"* %945, %"struct.skvm::F32"* nonnull %977, %"struct.skvm::F32"* %978, %"struct.skvm::F32"* %979, %"class.skvm::Builder"* %945, i32 %944) #14, !noalias !26
  %980 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %961, align 8
  %981 = load i32, i32* %962, align 8
  %982 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %965, align 8
  %983 = load i32, i32* %966, align 8
  %984 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %969, align 8
  %985 = load i32, i32* %970, align 8
  %986 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %973, align 8
  %987 = load i32, i32* %974, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %960) #14, !noalias !23
  br label %988

988:                                              ; preds = %955, %959, %943
  %989 = phi i32 [ %987, %959 ], [ %944, %955 ], [ %944, %943 ]
  %990 = phi %"class.skvm::Builder"* [ %986, %959 ], [ %945, %955 ], [ %945, %943 ]
  %991 = phi i32 [ %985, %959 ], [ %946, %955 ], [ %946, %943 ]
  %992 = phi %"class.skvm::Builder"* [ %984, %959 ], [ %947, %955 ], [ %947, %943 ]
  %993 = phi i32 [ %983, %959 ], [ %948, %955 ], [ %948, %943 ]
  %994 = phi %"class.skvm::Builder"* [ %982, %959 ], [ %949, %955 ], [ %949, %943 ]
  %995 = phi i32 [ %981, %959 ], [ %950, %955 ], [ %950, %943 ]
  %996 = phi %"class.skvm::Builder"* [ %980, %959 ], [ %951, %955 ], [ %951, %943 ]
  %997 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %50, align 8
  %998 = load i32, i32* %51, align 8
  %999 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %997, %"class.skvm::Builder"* %997, i32 %998, %"class.skvm::Builder"* %996, i32 %995) #14
  %1000 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  %1001 = extractvalue { %"class.skvm::Builder"*, i32 } %999, 0
  store %"class.skvm::Builder"* %1001, %"class.skvm::Builder"** %1000, align 8
  %1002 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  %1003 = extractvalue { %"class.skvm::Builder"*, i32 } %999, 1
  store i32 %1003, i32* %1002, align 8
  %1004 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %50, align 8
  %1005 = load i32, i32* %51, align 8
  %1006 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1004, %"class.skvm::Builder"* %1004, i32 %1005, %"class.skvm::Builder"* %994, i32 %993) #14
  %1007 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  %1008 = extractvalue { %"class.skvm::Builder"*, i32 } %1006, 0
  store %"class.skvm::Builder"* %1008, %"class.skvm::Builder"** %1007, align 8
  %1009 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  %1010 = extractvalue { %"class.skvm::Builder"*, i32 } %1006, 1
  store i32 %1010, i32* %1009, align 8
  %1011 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %50, align 8
  %1012 = load i32, i32* %51, align 8
  %1013 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1011, %"class.skvm::Builder"* %1011, i32 %1012, %"class.skvm::Builder"* %992, i32 %991) #14
  %1014 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  %1015 = extractvalue { %"class.skvm::Builder"*, i32 } %1013, 0
  store %"class.skvm::Builder"* %1015, %"class.skvm::Builder"** %1014, align 8
  %1016 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  %1017 = extractvalue { %"class.skvm::Builder"*, i32 } %1013, 1
  store i32 %1017, i32* %1016, align 8
  %1018 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %50, align 8
  %1019 = load i32, i32* %51, align 8
  %1020 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"* %1018, %"class.skvm::Builder"* %1018, i32 %1019, %"class.skvm::Builder"* %990, i32 %989) #14
  %1021 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  %1022 = extractvalue { %"class.skvm::Builder"*, i32 } %1020, 0
  store %"class.skvm::Builder"* %1022, %"class.skvm::Builder"** %1021, align 8
  %1023 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  %1024 = extractvalue { %"class.skvm::Builder"*, i32 } %1020, 1
  store i32 %1024, i32* %1023, align 8
  %1025 = load float*, float** %188, align 8
  %1026 = icmp eq float* %1025, null
  br i1 %1026, label %1031, label %1027

1027:                                             ; preds = %988
  %1028 = ptrtoint float* %1025 to i64
  %1029 = bitcast float** %189 to i64*
  store i64 %1028, i64* %1029, align 8
  %1030 = bitcast float* %1025 to i8*
  call void @_ZdlPv(i8* %1030) #15
  br label %1031

1031:                                             ; preds = %988, %1027
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %187) #14
  %1032 = load %class.SkColorSpace*, %class.SkColorSpace** %153, align 8
  %1033 = icmp eq %class.SkColorSpace* %1032, null
  br i1 %1033, label %1040, label %1034

1034:                                             ; preds = %1031
  %1035 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %1032, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1036 = atomicrmw add i32* %1035, i32 -1 acq_rel
  %1037 = icmp eq i32 %1036, 1
  br i1 %1037, label %1038, label %1040

1038:                                             ; preds = %1034
  %1039 = bitcast %class.SkColorSpace* %1032 to i8*
  call void @_ZdlPv(i8* %1039) #15
  br label %1040

1040:                                             ; preds = %1031, %1034, %1038
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #14
  %1041 = load %class.SkColorSpace*, %class.SkColorSpace** %136, align 8
  %1042 = icmp eq %class.SkColorSpace* %1041, null
  br i1 %1042, label %1049, label %1043

1043:                                             ; preds = %1040
  %1044 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %1041, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1045 = atomicrmw add i32* %1044, i32 -1 acq_rel
  %1046 = icmp eq i32 %1045, 1
  br i1 %1046, label %1047, label %1049

1047:                                             ; preds = %1043
  %1048 = bitcast %class.SkColorSpace* %1041 to i8*
  call void @_ZdlPv(i8* %1048) #15
  br label %1049

1049:                                             ; preds = %1047, %1043, %1040
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #14
  br label %1050

1050:                                             ; preds = %1049, %31
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #14
  ret void
}

declare void @_ZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsE(%"struct.skvm::Coord"* sret, %"class.skvm::Builder"*, %class.SkMatrix* dereferenceable(40), %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Uniforms"*) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* dereferenceable(24), i8*, i64, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK20SkGradientShaderBase8isOpaqueEv(%class.SkGradientShaderBase* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 11
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 3
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK20SkGradientShaderBase18onAsLuminanceColorEPj(%class.SkGradientShaderBase* nocapture readonly, i32* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 7
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 5
  %8 = zext i32 %4 to i64
  br label %25

9:                                                ; preds = %25, %2
  %10 = phi i32 [ 0, %2 ], [ %38, %25 ]
  %11 = phi i32 [ 0, %2 ], [ %40, %25 ]
  %12 = phi i32 [ 0, %2 ], [ %35, %25 ]
  %13 = lshr i32 %4, 1
  %14 = add i32 %12, %13
  %15 = udiv i32 %14, %4
  %16 = add i32 %10, %13
  %17 = udiv i32 %16, %4
  %18 = add i32 %11, %13
  %19 = udiv i32 %18, %4
  %20 = shl i32 %15, 16
  %21 = shl i32 %17, 8
  %22 = or i32 %20, %21
  %23 = or i32 %22, %19
  %24 = or i32 %23, -16777216
  store i32 %24, i32* %1, align 4
  ret i1 true

25:                                               ; preds = %25, %6
  %26 = phi i64 [ 0, %6 ], [ %41, %25 ]
  %27 = phi i32 [ 0, %6 ], [ %35, %25 ]
  %28 = phi i32 [ 0, %6 ], [ %40, %25 ]
  %29 = phi i32 [ 0, %6 ], [ %38, %25 ]
  %30 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %7, align 8
  %31 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %30, i64 %26
  %32 = tail call i32 @_ZNK8SkRGBA4fIL11SkAlphaType3EE9toSkColorEv(%struct.SkRGBA4f* %31) #14
  %33 = lshr i32 %32, 16
  %34 = and i32 %33, 255
  %35 = add i32 %34, %27
  %36 = lshr i32 %32, 8
  %37 = and i32 %36, 255
  %38 = add i32 %37, %29
  %39 = and i32 %32, 255
  %40 = add i32 %39, %28
  %41 = add nuw nsw i64 %26, 1
  %42 = icmp eq i64 %41, %8
  br i1 %42, label %9, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkColor4fXformerC2EPK8SkRGBA4fIL11SkAlphaType3EEiP12SkColorSpaceS6_(%struct.SkColor4fXformer*, %struct.SkRGBA4f*, i32, %class.SkColorSpace*, %class.SkColorSpace*) unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkImageInfo, align 16
  %7 = alloca %struct.SkImageInfo, align 8
  %8 = alloca %struct.SkImageInfo, align 8
  %9 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %0, i64 0, i32 1, i32 0, i32 0, i64 64
  %10 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  %11 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %0, i64 0, i32 1, i32 0, i32 0, i64 72
  %12 = bitcast i8* %11 to i64*
  %13 = bitcast i8* %9 to i8**
  store i8* %10, i8** %13, align 8
  store i64 34359738368, i64* %12, align 8
  %14 = getelementptr inbounds %struct.SkColor4fXformer, %struct.SkColor4fXformer* %0, i64 0, i32 0
  store %struct.SkRGBA4f* %1, %struct.SkRGBA4f** %14, align 8
  %15 = icmp eq %class.SkColorSpace* %4, null
  br i1 %15, label %107, label %16

16:                                               ; preds = %5
  %17 = tail call zeroext i1 @_ZN12SkColorSpace6EqualsEPKS_S1_(%class.SkColorSpace* %3, %class.SkColorSpace* nonnull %4) #14
  br i1 %17, label %107, label %18

18:                                               ; preds = %16
  %19 = bitcast i8* %9 to %class.SkTArray*
  %20 = load i64, i64* %12, align 8
  %21 = and i64 %20, -4294967295
  store i64 %21, i64* %12, align 8
  tail call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %19, i32 %2, i32 0) #14
  %22 = load i64, i64* %12, align 8
  %23 = shl i32 %2, 1
  %24 = zext i32 %23 to i64
  %25 = and i64 %22, -8589934591
  %26 = or i64 %25, %24
  store i64 %26, i64* %12, align 8
  %27 = bitcast %struct.SkImageInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #14
  %28 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 1, i32 0
  %30 = zext i32 %2 to i64
  %31 = or i64 %30, 4294967296
  %32 = bitcast %struct.SkImageInfo* %6 to <2 x i64>*
  store <2 x i64> <i64 0, i64 12884901902>, <2 x i64>* %32, align 16, !alias.scope !29
  %33 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 1
  %34 = bitcast %struct.SkISize* %33 to i64*
  store i64 %31, i64* %34, align 16, !alias.scope !29
  %35 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #14
  %36 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %37 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = atomicrmw add i32* %38, i32 1 monotonic, !noalias !32
  %40 = ptrtoint %class.SkColorSpace* %4 to i64
  %41 = bitcast %struct.SkImageInfo* %7 to i64*
  store i64 %40, i64* %41, align 8, !alias.scope !35
  %42 = bitcast i32* %37 to i64*
  store i64 12884901902, i64* %42, align 8, !alias.scope !35
  %43 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 1
  %44 = bitcast %struct.SkISize* %43 to i64*
  store i64 %31, i64* %44, align 8, !alias.scope !35
  %45 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #14
  %46 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 1
  %48 = icmp eq %class.SkColorSpace* %3, null
  %49 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 24, i1 false)
  br i1 %48, label %53, label %50

50:                                               ; preds = %18
  %51 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = atomicrmw add i32* %51, i32 1 monotonic, !noalias !40
  br label %53

53:                                               ; preds = %50, %18
  %54 = ptrtoint %class.SkColorSpace* %3 to i64
  %55 = bitcast %struct.SkImageInfo* %8 to i64*
  store i64 %54, i64* %55, align 8, !alias.scope !43
  %56 = bitcast i32* %47 to i64*
  store i64 12884901902, i64* %56, align 8, !alias.scope !43
  %57 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 1
  %58 = bitcast %struct.SkISize* %57 to i64*
  store i64 %31, i64* %58, align 8, !alias.scope !43
  %59 = load i8*, i8** %13, align 8
  %60 = sext i32 %2 to i64
  %61 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0
  %62 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %61) #14
  %63 = sext i32 %62 to i64
  %64 = mul nsw i64 %63, %60
  %65 = icmp ult i64 %64, 2147483648
  %66 = select i1 %65, i64 %64, i64 0
  %67 = bitcast %struct.SkColor4fXformer* %0 to i8**
  %68 = load i8*, i8** %67, align 8
  %69 = load i32, i32* %29, align 16
  %70 = sext i32 %69 to i64
  %71 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %61) #14
  %72 = sext i32 %71 to i64
  %73 = mul nsw i64 %72, %70
  %74 = icmp ult i64 %73, 2147483648
  %75 = select i1 %74, i64 %73, i64 0
  %76 = call zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* nonnull dereferenceable(24) %7, i8* %59, i64 %66, %struct.SkImageInfo* nonnull dereferenceable(24) %8, i8* %68, i64 %75) #14
  %77 = bitcast i8* %9 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %struct.SkColor4fXformer* %0 to i64*
  store i64 %78, i64* %79, align 8
  %80 = load %class.SkColorSpace*, %class.SkColorSpace** %46, align 8
  %81 = icmp eq %class.SkColorSpace* %80, null
  br i1 %81, label %88, label %82

82:                                               ; preds = %53
  %83 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = atomicrmw add i32* %83, i32 -1 acq_rel
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %88

86:                                               ; preds = %82
  %87 = bitcast %class.SkColorSpace* %80 to i8*
  call void @_ZdlPv(i8* %87) #15
  br label %88

88:                                               ; preds = %53, %82, %86
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #14
  %89 = load %class.SkColorSpace*, %class.SkColorSpace** %36, align 8
  %90 = icmp eq %class.SkColorSpace* %89, null
  br i1 %90, label %97, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %89, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = atomicrmw add i32* %92, i32 -1 acq_rel
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %95, label %97

95:                                               ; preds = %91
  %96 = bitcast %class.SkColorSpace* %89 to i8*
  call void @_ZdlPv(i8* %96) #15
  br label %97

97:                                               ; preds = %88, %91, %95
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #14
  %98 = load %class.SkColorSpace*, %class.SkColorSpace** %28, align 16
  %99 = icmp eq %class.SkColorSpace* %98, null
  br i1 %99, label %106, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = atomicrmw add i32* %101, i32 -1 acq_rel
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %104, label %106

104:                                              ; preds = %100
  %105 = bitcast %class.SkColorSpace* %98 to i8*
  call void @_ZdlPv(i8* %105) #15
  br label %106

106:                                              ; preds = %97, %100, %104
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #14
  br label %107

107:                                              ; preds = %5, %106, %16
  ret void
}

declare zeroext i1 @_ZN12SkColorSpace6EqualsEPKS_S1_(%class.SkColorSpace*, %class.SkColorSpace*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20SkGradientShaderBase17commonAsAGradientEPN8SkShader12GradientInfoE(%class.SkGradientShaderBase* nocapture readonly, %"struct.SkShader::GradientInfo"*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"struct.SkShader::GradientInfo"* %1, null
  br i1 %3, label %69, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"struct.SkShader::GradientInfo", %"struct.SkShader::GradientInfo"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 7
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %6, %8
  br i1 %9, label %60, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"struct.SkShader::GradientInfo", %"struct.SkShader::GradientInfo"* %1, i64 0, i32 1
  %12 = load i32*, i32** %11, align 8
  %13 = icmp ne i32* %12, null
  %14 = icmp sgt i32 %8, 0
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %29

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 5
  br label %18

18:                                               ; preds = %16, %18
  %19 = phi i64 [ 0, %16 ], [ %25, %18 ]
  %20 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %17, align 8
  %21 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %20, i64 %19
  %22 = tail call i32 @_ZNK8SkRGBA4fIL11SkAlphaType3EE9toSkColorEv(%struct.SkRGBA4f* %21) #14
  %23 = load i32*, i32** %11, align 8
  %24 = getelementptr inbounds i32, i32* %23, i64 %19
  store i32 %22, i32* %24, align 4
  %25 = add nuw nsw i64 %19, 1
  %26 = load i32, i32* %7, align 8
  %27 = sext i32 %26 to i64
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %18, label %29

29:                                               ; preds = %18, %10
  %30 = phi i32 [ %8, %10 ], [ %26, %18 ]
  %31 = getelementptr inbounds %"struct.SkShader::GradientInfo", %"struct.SkShader::GradientInfo"* %1, i64 0, i32 2
  %32 = load float*, float** %31, align 8
  %33 = icmp ne float* %32, null
  %34 = icmp sgt i32 %30, 0
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %60

36:                                               ; preds = %29
  %37 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 6
  br label %38

38:                                               ; preds = %36, %52
  %39 = phi i64 [ 0, %36 ], [ %56, %52 ]
  %40 = phi i32 [ %30, %36 ], [ %57, %52 ]
  %41 = load float*, float** %37, align 8
  %42 = icmp eq float* %41, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds float, float* %41, i64 %39
  %45 = load float, float* %44, align 4
  br label %52

46:                                               ; preds = %38
  %47 = trunc i64 %39 to i32
  %48 = sitofp i32 %47 to float
  %49 = add nsw i32 %40, -1
  %50 = sitofp i32 %49 to float
  %51 = fdiv float %48, %50
  br label %52

52:                                               ; preds = %43, %46
  %53 = phi float [ %45, %43 ], [ %51, %46 ]
  %54 = load float*, float** %31, align 8
  %55 = getelementptr inbounds float, float* %54, i64 %39
  store float %53, float* %55, align 4
  %56 = add nuw nsw i64 %39, 1
  %57 = load i32, i32* %7, align 8
  %58 = sext i32 %57 to i64
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %38, label %60

60:                                               ; preds = %52, %29, %4
  %61 = phi i32 [ %30, %29 ], [ %8, %4 ], [ %57, %52 ]
  store i32 %61, i32* %5, align 8
  %62 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"struct.SkShader::GradientInfo", %"struct.SkShader::GradientInfo"* %1, i64 0, i32 5
  store i32 %63, i32* %64, align 8
  %65 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %0, i64 0, i32 3
  %66 = load i8, i8* %65, align 8
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"struct.SkShader::GradientInfo", %"struct.SkShader::GradientInfo"* %1, i64 0, i32 6
  store i32 %67, i32* %68, align 4
  br label %69

69:                                               ; preds = %2, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader10MakeLinearEPK7SkPointPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* noalias sret, %struct.SkPoint*, i32* nocapture readonly, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %9 = alloca %struct.ColorConverter, align 8
  %10 = alloca %class.sk_sp, align 8
  %11 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %9, i64 0, i32 0, i32 0, i32 0, i64 32
  %13 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %9, i64 0, i32 0, i32 0, i32 0, i64 40
  %14 = bitcast i8* %13 to i64*
  %15 = bitcast i8* %12 to i8**
  store i8* %11, i8** %15, align 8
  store i64 17179869184, i64* %14, align 8
  %16 = icmp sgt i32 %4, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %8
  %18 = bitcast %struct.ColorConverter* %9 to %struct.SkRGBA4f*
  br label %57

19:                                               ; preds = %8
  %20 = bitcast i8* %12 to %class.SkTArray*
  %21 = bitcast i8* %12 to %struct.SkRGBA4f**
  %22 = zext i32 %4 to i64
  br label %23

23:                                               ; preds = %23, %19
  %24 = phi i64 [ 0, %19 ], [ %53, %23 ]
  %25 = getelementptr inbounds i32, i32* %2, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = lshr i32 %26, 16
  %28 = and i32 %27, 255
  %29 = uitofp i32 %28 to float
  %30 = fmul float %29, 0x3F70101020000000
  %31 = lshr i32 %26, 8
  %32 = and i32 %31, 255
  %33 = uitofp i32 %32 to float
  %34 = fmul float %33, 0x3F70101020000000
  %35 = and i32 %26, 255
  %36 = uitofp i32 %35 to float
  %37 = fmul float %36, 0x3F70101020000000
  %38 = lshr i32 %26, 24
  %39 = uitofp i32 %38 to float
  %40 = fmul float %39, 0x3F70101020000000
  call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %20, i32 1, i32 1) #14
  %41 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %21, align 8
  %42 = load i64, i64* %14, align 8
  %43 = lshr i64 %42, 1
  %44 = and i64 %43, 2147483647
  %45 = add i64 %42, 2
  %46 = and i64 %45, 4294967294
  %47 = and i64 %42, -4294967295
  %48 = or i64 %46, %47
  store i64 %48, i64* %14, align 8
  %49 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %41, i64 %44, i32 0
  store float %30, float* %49, align 4
  %50 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %41, i64 %44, i32 1
  store float %34, float* %50, align 4
  %51 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %41, i64 %44, i32 2
  store float %37, float* %51, align 4
  %52 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %41, i64 %44, i32 3
  store float %40, float* %52, align 4
  %53 = add nuw nsw i64 %24, 1
  %54 = icmp eq i64 %53, %22
  br i1 %54, label %55, label %23

55:                                               ; preds = %23
  %56 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %21, align 8
  br label %57

57:                                               ; preds = %17, %55
  %58 = phi %struct.SkRGBA4f* [ %56, %55 ], [ %18, %17 ]
  %59 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %59, align 8
  call void @_ZN16SkGradientShader10MakeLinearEPK7SkPointPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* sret %0, %struct.SkPoint* %1, %struct.SkRGBA4f* %58, %class.sk_sp* nonnull %10, float* %3, i32 %4, i32 %5, i32 %6, %class.SkMatrix* %7)
  %60 = load %class.SkColorSpace*, %class.SkColorSpace** %59, align 8
  %61 = icmp eq %class.SkColorSpace* %60, null
  br i1 %61, label %68, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw add i32* %63, i32 -1 acq_rel
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  %67 = bitcast %class.SkColorSpace* %60 to i8*
  call void @_ZdlPv(i8* %67) #15
  br label %68

68:                                               ; preds = %57, %62, %66
  %69 = load i64, i64* %14, align 8
  %70 = and i64 %69, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = load i8*, i8** %15, align 8
  call void @_Z7sk_freePv(i8* %73) #14
  br label %74

74:                                               ; preds = %68, %72
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader10MakeLinearEPK7SkPointPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* noalias sret, %struct.SkPoint*, %struct.SkRGBA4f*, %class.sk_sp* nocapture, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #8 align 2 {
  %10 = alloca %class.sk_sp, align 8
  %11 = alloca %class.sk_sp, align 8
  %12 = alloca %struct.ColorStopOptimizer, align 8
  %13 = alloca %"struct.SkGradientShaderBase::Descriptor", align 8
  %14 = icmp eq %struct.SkPoint* %1, null
  br i1 %14, label %30, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = fsub float %17, %19
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = fsub float %22, %24
  %26 = tail call float @_ZN7SkPoint6LengthEff(float %20, float %25) #14
  %27 = bitcast float %26 to i32
  %28 = and i32 %27, 2139095040
  %29 = icmp eq i32 %28, 2139095040
  br i1 %29, label %30, label %32

30:                                               ; preds = %15, %9
  %31 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %31, align 8
  br label %136

32:                                               ; preds = %15
  %33 = icmp ne %struct.SkRGBA4f* %2, null
  %34 = icmp sgt i32 %5, 0
  %35 = and i1 %33, %34
  %36 = icmp ult i32 %6, 4
  %37 = and i1 %35, %36
  br i1 %37, label %40, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %39, align 8
  br label %136

40:                                               ; preds = %32
  %41 = icmp eq i32 %5, 1
  br i1 %41, label %42, label %56

42:                                               ; preds = %40
  %43 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %44 = bitcast %class.sk_sp* %3 to i64*
  %45 = load i64, i64* %44, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %43, align 8
  %46 = bitcast %class.sk_sp* %10 to i64*
  store i64 %45, i64* %46, align 8
  call void @_ZN9SkShaders5ColorERK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceE(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull dereferenceable(16) %2, %class.sk_sp* nonnull %10) #14
  %47 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  %48 = load %class.SkColorSpace*, %class.SkColorSpace** %47, align 8
  %49 = icmp eq %class.SkColorSpace* %48, null
  br i1 %49, label %136, label %50

50:                                               ; preds = %42
  %51 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = atomicrmw add i32* %51, i32 -1 acq_rel
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %136

54:                                               ; preds = %50
  %55 = bitcast %class.SkColorSpace* %48 to i8*
  call void @_ZdlPv(i8* %55) #15
  br label %136

56:                                               ; preds = %40
  %57 = icmp eq %class.SkMatrix* %8, null
  br i1 %57, label %74, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = trunc i32 %60 to i8
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %8) #14
  %65 = zext i8 %64 to i32
  store i32 %65, i32* %59, align 4
  br label %66

66:                                               ; preds = %63, %58
  %67 = phi i32 [ %65, %63 ], [ %60, %58 ]
  %68 = and i32 %67, 15
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = tail call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %8, %class.SkMatrix* null) #14
  br i1 %71, label %74, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %73, align 8
  br label %136

74:                                               ; preds = %66, %56, %70
  %75 = load float, float* %16, align 4
  %76 = load float, float* %18, align 4
  %77 = fsub float %75, %76
  %78 = load float, float* %21, align 4
  %79 = load float, float* %23, align 4
  %80 = fsub float %78, %79
  %81 = tail call float @_ZN7SkPoint6LengthEff(float %77, float %80) #14
  %82 = tail call float @llvm.fabs.f32(float %81) #14
  %83 = fcmp ugt float %82, 0x3F00000000000000
  br i1 %83, label %98, label %84

84:                                               ; preds = %74
  %85 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %86 = bitcast %class.sk_sp* %3 to i64*
  %87 = load i64, i64* %86, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %85, align 8
  %88 = bitcast %class.sk_sp* %11 to i64*
  store i64 %87, i64* %88, align 8
  call fastcc void @_ZL24make_degenerate_gradientPK8SkRGBA4fIL11SkAlphaType3EEPKfi5sk_spI12SkColorSpaceE10SkTileMode(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull %2, float* %4, i32 %5, %class.sk_sp* nonnull %11, i32 %6)
  %89 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  %90 = load %class.SkColorSpace*, %class.SkColorSpace** %89, align 8
  %91 = icmp eq %class.SkColorSpace* %90, null
  br i1 %91, label %136, label %92

92:                                               ; preds = %84
  %93 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 -1 acq_rel
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %96, label %136

96:                                               ; preds = %92
  %97 = bitcast %class.SkColorSpace* %90 to i8*
  tail call void @_ZdlPv(i8* %97) #15
  br label %136

98:                                               ; preds = %74
  %99 = bitcast %struct.ColorStopOptimizer* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %99) #14
  %100 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %12, i64 0, i32 1
  %101 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %12, i64 0, i32 2
  %102 = bitcast %struct.ColorStopOptimizer* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %102, i8 -86, i64 24, i1 false)
  call void @_ZN18ColorStopOptimizerC2EPK8SkRGBA4fIL11SkAlphaType3EEPKfi10SkTileMode(%struct.ColorStopOptimizer* nonnull %12, %struct.SkRGBA4f* nonnull %2, float* %4, i32 %5, i32 %6)
  %103 = bitcast %"struct.SkGradientShaderBase::Descriptor"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %103) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %103, i8 0, i64 48, i1 false) #14
  %104 = bitcast %struct.ColorStopOptimizer* %12 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %107 = bitcast %class.sk_sp* %3 to i64*
  %108 = load i64, i64* %107, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %106, align 8
  %109 = bitcast float** %100 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = load i32, i32* %101, align 8
  %112 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 1
  %113 = bitcast %struct.SkRGBA4f** %112 to i64*
  store i64 %105, i64* %113, align 8
  %114 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 2
  %115 = bitcast %class.sk_sp* %114 to i64*
  store i64 %108, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 3
  %117 = bitcast float** %116 to i64*
  store i64 %110, i64* %117, align 8
  %118 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 4
  store i32 %111, i32* %118, align 8
  %119 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 5
  store i32 %6, i32* %119, align 4
  %120 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 6
  store i32 %7, i32* %120, align 8
  %121 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 0
  store %class.SkMatrix* %8, %class.SkMatrix** %121, align 8
  %122 = call i8* @_Znwm(i64 248) #15, !noalias !48
  %123 = bitcast i8* %122 to %class.SkLinearGradient*
  call void @_ZN16SkLinearGradientC1EPK7SkPointRKN20SkGradientShaderBase10DescriptorE(%class.SkLinearGradient* nonnull %123, %struct.SkPoint* nonnull %1, %"struct.SkGradientShaderBase::Descriptor"* nonnull dereferenceable(48) %13) #14, !noalias !48
  %124 = ptrtoint i8* %122 to i64
  %125 = bitcast %class.sk_sp.21* %0 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %13, i64 0, i32 2, i32 0
  %127 = load %class.SkColorSpace*, %class.SkColorSpace** %126, align 8
  %128 = icmp eq %class.SkColorSpace* %127, null
  br i1 %128, label %135, label %129

129:                                              ; preds = %98
  %130 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %127, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = atomicrmw add i32* %130, i32 -1 acq_rel
  %132 = icmp eq i32 %131, 1
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = bitcast %class.SkColorSpace* %127 to i8*
  call void @_ZdlPv(i8* %134) #15
  br label %135

135:                                              ; preds = %98, %129, %133
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %103) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %99) #14
  br label %136

136:                                              ; preds = %96, %92, %84, %54, %50, %42, %135, %72, %38, %30
  ret void
}

declare void @_ZN9SkShaders5ColorERK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceE(%class.sk_sp.21* sret, %struct.SkRGBA4f* dereferenceable(16), %class.sk_sp*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL24make_degenerate_gradientPK8SkRGBA4fIL11SkAlphaType3EEPKfi5sk_spI12SkColorSpaceE10SkTileMode(%class.sk_sp.21* noalias sret, %struct.SkRGBA4f*, float* readonly, i32, %class.sk_sp* nocapture, i32) unnamed_addr #6 {
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = alloca %class.sk_sp, align 8
  %9 = alloca %class.sk_sp, align 8
  switch i32 %5, label %116 [
    i32 3, label %10
    i32 1, label %11
    i32 2, label %11
    i32 0, label %99
  ]

10:                                               ; preds = %6
  tail call void @_ZN9SkShaders5EmptyEv(%class.sk_sp.21* sret %0) #14
  br label %118

11:                                               ; preds = %6, %6
  %12 = bitcast { <2 x float>, <2 x float> }* %7 to %struct.SkRGBA4f*
  %13 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #14
  %14 = add i32 %3, -1
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %79

16:                                               ; preds = %11
  %17 = icmp eq float* %2, null
  %18 = bitcast %struct.SkRGBA4f* %1 to <4 x float>*
  %19 = add nsw i32 %3, -2
  %20 = sext i32 %14 to i64
  %21 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 %20
  %22 = bitcast %struct.SkRGBA4f* %21 to <4 x float>*
  %23 = sitofp i32 %14 to float
  %24 = fdiv float 1.000000e+00, %23
  %25 = zext i32 %19 to i64
  %26 = zext i32 %14 to i64
  %27 = load <4 x float>, <4 x float>* %18, align 1
  br label %28

28:                                               ; preds = %69, %16
  %29 = phi <4 x float> [ %27, %16 ], [ %35, %69 ]
  %30 = phi i64 [ 0, %16 ], [ %32, %69 ]
  %31 = phi <4 x float> [ zeroinitializer, %16 ], [ %77, %69 ]
  %32 = add nuw nsw i64 %30, 1
  %33 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 %32
  %34 = bitcast %struct.SkRGBA4f* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 1
  br i1 %17, label %69, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds float, float* %2, i64 %30
  %38 = load float, float* %37, align 4
  %39 = fcmp ogt float %38, 1.000000e+00
  %40 = select i1 %39, float 1.000000e+00, float %38
  %41 = fcmp ogt float %40, 0.000000e+00
  %42 = select i1 %41, float %40, float 0.000000e+00
  %43 = getelementptr inbounds float, float* %2, i64 %32
  %44 = load float, float* %43, align 4
  %45 = fcmp ogt float %44, 1.000000e+00
  %46 = select i1 %45, float 1.000000e+00, float %44
  %47 = fcmp olt float %42, %46
  %48 = select i1 %47, float %46, float %42
  %49 = fsub float %48, %42
  %50 = icmp eq i64 %30, 0
  %51 = and i1 %50, %41
  br i1 %51, label %52, label %57

52:                                               ; preds = %36
  %53 = insertelement <4 x float> undef, float %42, i32 0
  %54 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> zeroinitializer
  %55 = fmul <4 x float> %27, %54
  %56 = fadd <4 x float> %31, %55
  br label %57

57:                                               ; preds = %52, %36
  %58 = phi <4 x float> [ %56, %52 ], [ %31, %36 ]
  %59 = icmp eq i64 %30, %25
  %60 = fcmp olt float %48, 1.000000e+00
  %61 = and i1 %59, %60
  br i1 %61, label %62, label %69

62:                                               ; preds = %57
  %63 = load <4 x float>, <4 x float>* %22, align 1
  %64 = fsub float 1.000000e+00, %48
  %65 = insertelement <4 x float> undef, float %64, i32 0
  %66 = shufflevector <4 x float> %65, <4 x float> undef, <4 x i32> zeroinitializer
  %67 = fmul <4 x float> %66, %63
  %68 = fadd <4 x float> %58, %67
  br label %69

69:                                               ; preds = %62, %57, %28
  %70 = phi <4 x float> [ %68, %62 ], [ %58, %57 ], [ %31, %28 ]
  %71 = phi float [ %49, %62 ], [ %49, %57 ], [ %24, %28 ]
  %72 = fmul float %71, 5.000000e-01
  %73 = fadd <4 x float> %29, %35
  %74 = insertelement <4 x float> undef, float %72, i32 0
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <4 x i32> zeroinitializer
  %76 = fmul <4 x float> %73, %75
  %77 = fadd <4 x float> %70, %76
  %78 = icmp eq i64 %32, %26
  br i1 %78, label %79, label %28

79:                                               ; preds = %69, %11
  %80 = phi <4 x float> [ zeroinitializer, %11 ], [ %77, %69 ]
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %82 = shufflevector <4 x float> %80, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %83 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  store <2 x float> %81, <2 x float>* %83, align 8
  %84 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  store <2 x float> %82, <2 x float>* %84, align 8
  %85 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %86 = bitcast %class.sk_sp* %4 to i64*
  %87 = load i64, i64* %86, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %85, align 8
  %88 = bitcast %class.sk_sp* %8 to i64*
  store i64 %87, i64* %88, align 8
  call void @_ZN9SkShaders5ColorERK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceE(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull dereferenceable(16) %12, %class.sk_sp* nonnull %8) #14
  %89 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %8, i64 0, i32 0
  %90 = load %class.SkColorSpace*, %class.SkColorSpace** %89, align 8
  %91 = icmp eq %class.SkColorSpace* %90, null
  br i1 %91, label %98, label %92

92:                                               ; preds = %79
  %93 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 -1 acq_rel
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %96, label %98

96:                                               ; preds = %92
  %97 = bitcast %class.SkColorSpace* %90 to i8*
  call void @_ZdlPv(i8* %97) #15
  br label %98

98:                                               ; preds = %79, %92, %96
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #14
  br label %118

99:                                               ; preds = %6
  %100 = add nsw i32 %3, -1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 %101
  %103 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %104 = bitcast %class.sk_sp* %4 to i64*
  %105 = load i64, i64* %104, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %103, align 8
  %106 = bitcast %class.sk_sp* %9 to i64*
  store i64 %105, i64* %106, align 8
  call void @_ZN9SkShaders5ColorERK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceE(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* dereferenceable(16) %102, %class.sk_sp* nonnull %9) #14
  %107 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %9, i64 0, i32 0
  %108 = load %class.SkColorSpace*, %class.SkColorSpace** %107, align 8
  %109 = icmp eq %class.SkColorSpace* %108, null
  br i1 %109, label %118, label %110

110:                                              ; preds = %99
  %111 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %108, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = atomicrmw add i32* %111, i32 -1 acq_rel
  %113 = icmp eq i32 %112, 1
  br i1 %113, label %114, label %118

114:                                              ; preds = %110
  %115 = bitcast %class.SkColorSpace* %108 to i8*
  call void @_ZdlPv(i8* %115) #15
  br label %118

116:                                              ; preds = %6
  %117 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %117, align 8
  br label %118

118:                                              ; preds = %114, %110, %99, %116, %98, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18ColorStopOptimizerC2EPK8SkRGBA4fIL11SkAlphaType3EEPKfi10SkTileMode(%struct.ColorStopOptimizer*, %struct.SkRGBA4f*, float*, i32, i32) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %0, i64 0, i32 0
  store %struct.SkRGBA4f* %1, %struct.SkRGBA4f** %6, align 8
  %7 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %0, i64 0, i32 1
  store float* %2, float** %7, align 8
  %8 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %0, i64 0, i32 2
  store i32 %3, i32* %8, align 8
  %9 = icmp eq float* %2, null
  %10 = icmp ne i32 %3, 3
  %11 = or i1 %9, %10
  br i1 %11, label %94, label %12

12:                                               ; preds = %5
  %13 = load float, float* %2, align 4
  %14 = tail call float @llvm.fabs.f32(float %13) #14
  %15 = fcmp ugt float %14, 0x3F30000000000000
  br i1 %15, label %94, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds float, float* %2, i64 1
  %18 = load float, float* %17, align 4
  %19 = tail call float @llvm.fabs.f32(float %18) #14
  %20 = fcmp ugt float %19, 0x3F30000000000000
  br i1 %20, label %56, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds float, float* %2, i64 2
  %23 = load float, float* %22, align 4
  %24 = fadd float %23, -1.000000e+00
  %25 = tail call float @llvm.fabs.f32(float %24) #14
  %26 = fcmp ugt float %25, 0x3F30000000000000
  br i1 %26, label %56, label %27

27:                                               ; preds = %21
  %28 = add i32 %4, -1
  %29 = icmp ult i32 %28, 2
  br i1 %29, label %54, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 0, i32 3
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 3
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %32, %34
  br i1 %35, label %36, label %94

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 0, i32 0
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 0
  %40 = load float, float* %39, align 4
  %41 = fcmp oeq float %38, %40
  br i1 %41, label %42, label %94

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 0, i32 1
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 1
  %46 = load float, float* %45, align 4
  %47 = fcmp oeq float %44, %46
  br i1 %47, label %48, label %94

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 0, i32 2
  %50 = load float, float* %49, align 4
  %51 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 2
  %52 = load float, float* %51, align 4
  %53 = fcmp oeq float %50, %52
  br i1 %53, label %54, label %94

54:                                               ; preds = %48, %27
  %55 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1
  store %struct.SkRGBA4f* %55, %struct.SkRGBA4f** %6, align 8
  store float* %17, float** %7, align 8
  store i32 2, i32* %8, align 8
  br label %94

56:                                               ; preds = %21, %16
  %57 = fadd float %18, -1.000000e+00
  %58 = tail call float @llvm.fabs.f32(float %57) #14
  %59 = fcmp ugt float %58, 0x3F30000000000000
  br i1 %59, label %94, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds float, float* %2, i64 2
  %62 = load float, float* %61, align 4
  %63 = fadd float %62, -1.000000e+00
  %64 = tail call float @llvm.fabs.f32(float %63) #14
  %65 = fcmp ugt float %64, 0x3F30000000000000
  br i1 %65, label %94, label %66

66:                                               ; preds = %60
  %67 = add i32 %4, -1
  %68 = icmp ult i32 %67, 2
  br i1 %68, label %93, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 3
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 2, i32 3
  %73 = load float, float* %72, align 4
  %74 = fcmp oeq float %71, %73
  br i1 %74, label %75, label %94

75:                                               ; preds = %69
  %76 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 0
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 2, i32 0
  %79 = load float, float* %78, align 4
  %80 = fcmp oeq float %77, %79
  br i1 %80, label %81, label %94

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 1
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 2, i32 1
  %85 = load float, float* %84, align 4
  %86 = fcmp oeq float %83, %85
  br i1 %86, label %87, label %94

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 1, i32 2
  %89 = load float, float* %88, align 4
  %90 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %1, i64 2, i32 2
  %91 = load float, float* %90, align 4
  %92 = fcmp oeq float %89, %91
  br i1 %92, label %93, label %94

93:                                               ; preds = %87, %66
  store i32 2, i32* %8, align 8
  br label %94

94:                                               ; preds = %60, %56, %12, %69, %75, %81, %30, %36, %42, %93, %87, %48, %54, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader10MakeRadialERK7SkPointfPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* noalias sret, %struct.SkPoint* dereferenceable(8), float, i32* nocapture readonly, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %10 = alloca %struct.ColorConverter, align 8
  %11 = alloca %class.sk_sp, align 8
  %12 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false)
  %13 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %10, i64 0, i32 0, i32 0, i32 0, i64 32
  %14 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %10, i64 0, i32 0, i32 0, i32 0, i64 40
  %15 = bitcast i8* %14 to i64*
  %16 = bitcast i8* %13 to i8**
  store i8* %12, i8** %16, align 8
  store i64 17179869184, i64* %15, align 8
  %17 = icmp sgt i32 %5, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %9
  %19 = bitcast %struct.ColorConverter* %10 to %struct.SkRGBA4f*
  br label %58

20:                                               ; preds = %9
  %21 = bitcast i8* %13 to %class.SkTArray*
  %22 = bitcast i8* %13 to %struct.SkRGBA4f**
  %23 = zext i32 %5 to i64
  br label %24

24:                                               ; preds = %24, %20
  %25 = phi i64 [ 0, %20 ], [ %54, %24 ]
  %26 = getelementptr inbounds i32, i32* %3, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = lshr i32 %27, 16
  %29 = and i32 %28, 255
  %30 = uitofp i32 %29 to float
  %31 = fmul float %30, 0x3F70101020000000
  %32 = lshr i32 %27, 8
  %33 = and i32 %32, 255
  %34 = uitofp i32 %33 to float
  %35 = fmul float %34, 0x3F70101020000000
  %36 = and i32 %27, 255
  %37 = uitofp i32 %36 to float
  %38 = fmul float %37, 0x3F70101020000000
  %39 = lshr i32 %27, 24
  %40 = uitofp i32 %39 to float
  %41 = fmul float %40, 0x3F70101020000000
  call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %21, i32 1, i32 1) #14
  %42 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %22, align 8
  %43 = load i64, i64* %15, align 8
  %44 = lshr i64 %43, 1
  %45 = and i64 %44, 2147483647
  %46 = add i64 %43, 2
  %47 = and i64 %46, 4294967294
  %48 = and i64 %43, -4294967295
  %49 = or i64 %47, %48
  store i64 %49, i64* %15, align 8
  %50 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %42, i64 %45, i32 0
  store float %31, float* %50, align 4
  %51 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %42, i64 %45, i32 1
  store float %35, float* %51, align 4
  %52 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %42, i64 %45, i32 2
  store float %38, float* %52, align 4
  %53 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %42, i64 %45, i32 3
  store float %41, float* %53, align 4
  %54 = add nuw nsw i64 %25, 1
  %55 = icmp eq i64 %54, %23
  br i1 %55, label %56, label %24

56:                                               ; preds = %24
  %57 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %22, align 8
  br label %58

58:                                               ; preds = %18, %56
  %59 = phi %struct.SkRGBA4f* [ %57, %56 ], [ %19, %18 ]
  %60 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %60, align 8
  call void @_ZN16SkGradientShader10MakeRadialERK7SkPointfPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* sret %0, %struct.SkPoint* dereferenceable(8) %1, float %2, %struct.SkRGBA4f* %59, %class.sk_sp* nonnull %11, float* %4, i32 %5, i32 %6, i32 %7, %class.SkMatrix* %8)
  %61 = load %class.SkColorSpace*, %class.SkColorSpace** %60, align 8
  %62 = icmp eq %class.SkColorSpace* %61, null
  br i1 %62, label %69, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %61, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = atomicrmw add i32* %64, i32 -1 acq_rel
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %69

67:                                               ; preds = %63
  %68 = bitcast %class.SkColorSpace* %61 to i8*
  call void @_ZdlPv(i8* %68) #15
  br label %69

69:                                               ; preds = %58, %63, %67
  %70 = load i64, i64* %15, align 8
  %71 = and i64 %70, 1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %69
  %74 = load i8*, i8** %16, align 8
  call void @_Z7sk_freePv(i8* %74) #14
  br label %75

75:                                               ; preds = %69, %73
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader10MakeRadialERK7SkPointfPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* noalias sret, %struct.SkPoint* dereferenceable(8), float, %struct.SkRGBA4f*, %class.sk_sp* nocapture, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %11 = alloca %class.sk_sp, align 8
  %12 = alloca %class.sk_sp, align 8
  %13 = alloca %struct.ColorStopOptimizer, align 8
  %14 = alloca %"struct.SkGradientShaderBase::Descriptor", align 8
  %15 = fcmp olt float %2, 0.000000e+00
  br i1 %15, label %16, label %18

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %17, align 8
  br label %115

18:                                               ; preds = %10
  %19 = icmp ne %struct.SkRGBA4f* %3, null
  %20 = icmp sgt i32 %6, 0
  %21 = and i1 %19, %20
  %22 = icmp ult i32 %7, 4
  %23 = and i1 %21, %22
  br i1 %23, label %26, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %25, align 8
  br label %115

26:                                               ; preds = %18
  %27 = icmp eq i32 %6, 1
  br i1 %27, label %28, label %42

28:                                               ; preds = %26
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %30 = bitcast %class.sk_sp* %4 to i64*
  %31 = load i64, i64* %30, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %29, align 8
  %32 = bitcast %class.sk_sp* %11 to i64*
  store i64 %31, i64* %32, align 8
  call void @_ZN9SkShaders5ColorERK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceE(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull dereferenceable(16) %3, %class.sk_sp* nonnull %11) #14
  %33 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  %34 = load %class.SkColorSpace*, %class.SkColorSpace** %33, align 8
  %35 = icmp eq %class.SkColorSpace* %34, null
  br i1 %35, label %115, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw add i32* %37, i32 -1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %115

40:                                               ; preds = %36
  %41 = bitcast %class.SkColorSpace* %34 to i8*
  call void @_ZdlPv(i8* %41) #15
  br label %115

42:                                               ; preds = %26
  %43 = icmp eq %class.SkMatrix* %9, null
  br i1 %43, label %60, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = trunc i32 %46 to i8
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %9) #14
  %51 = zext i8 %50 to i32
  store i32 %51, i32* %45, align 4
  br label %52

52:                                               ; preds = %49, %44
  %53 = phi i32 [ %51, %49 ], [ %46, %44 ]
  %54 = and i32 %53, 15
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = tail call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %9, %class.SkMatrix* null) #14
  br i1 %57, label %60, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %59, align 8
  br label %115

60:                                               ; preds = %52, %42, %56
  %61 = tail call float @llvm.fabs.f32(float %2) #14
  %62 = fcmp ugt float %61, 0x3F00000000000000
  br i1 %62, label %77, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %65 = bitcast %class.sk_sp* %4 to i64*
  %66 = load i64, i64* %65, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %64, align 8
  %67 = bitcast %class.sk_sp* %12 to i64*
  store i64 %66, i64* %67, align 8
  call fastcc void @_ZL24make_degenerate_gradientPK8SkRGBA4fIL11SkAlphaType3EEPKfi5sk_spI12SkColorSpaceE10SkTileMode(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull %3, float* %5, i32 %6, %class.sk_sp* nonnull %12, i32 %7)
  %68 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %12, i64 0, i32 0
  %69 = load %class.SkColorSpace*, %class.SkColorSpace** %68, align 8
  %70 = icmp eq %class.SkColorSpace* %69, null
  br i1 %70, label %115, label %71

71:                                               ; preds = %63
  %72 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %69, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = atomicrmw add i32* %72, i32 -1 acq_rel
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %115

75:                                               ; preds = %71
  %76 = bitcast %class.SkColorSpace* %69 to i8*
  tail call void @_ZdlPv(i8* %76) #15
  br label %115

77:                                               ; preds = %60
  %78 = bitcast %struct.ColorStopOptimizer* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #14
  %79 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %13, i64 0, i32 1
  %80 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %13, i64 0, i32 2
  %81 = bitcast %struct.ColorStopOptimizer* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 24, i1 false)
  call void @_ZN18ColorStopOptimizerC2EPK8SkRGBA4fIL11SkAlphaType3EEPKfi10SkTileMode(%struct.ColorStopOptimizer* nonnull %13, %struct.SkRGBA4f* nonnull %3, float* %5, i32 %6, i32 %7)
  %82 = bitcast %"struct.SkGradientShaderBase::Descriptor"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %82) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %82, i8 0, i64 48, i1 false) #14
  %83 = bitcast %struct.ColorStopOptimizer* %13 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %86 = bitcast %class.sk_sp* %4 to i64*
  %87 = load i64, i64* %86, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %85, align 8
  %88 = bitcast float** %79 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = load i32, i32* %80, align 8
  %91 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 1
  %92 = bitcast %struct.SkRGBA4f** %91 to i64*
  store i64 %84, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 2
  %94 = bitcast %class.sk_sp* %93 to i64*
  store i64 %87, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 3
  %96 = bitcast float** %95 to i64*
  store i64 %89, i64* %96, align 8
  %97 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 4
  store i32 %90, i32* %97, align 8
  %98 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 5
  store i32 %7, i32* %98, align 4
  %99 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 6
  store i32 %8, i32* %99, align 8
  %100 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 0
  store %class.SkMatrix* %9, %class.SkMatrix** %100, align 8
  %101 = call i8* @_Znwm(i64 240) #15, !noalias !51
  %102 = bitcast i8* %101 to %class.SkRadialGradient*
  call void @_ZN16SkRadialGradientC1ERK7SkPointfRKN20SkGradientShaderBase10DescriptorE(%class.SkRadialGradient* nonnull %102, %struct.SkPoint* dereferenceable(8) %1, float %2, %"struct.SkGradientShaderBase::Descriptor"* nonnull dereferenceable(48) %14) #14, !noalias !51
  %103 = ptrtoint i8* %101 to i64
  %104 = bitcast %class.sk_sp.21* %0 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %14, i64 0, i32 2, i32 0
  %106 = load %class.SkColorSpace*, %class.SkColorSpace** %105, align 8
  %107 = icmp eq %class.SkColorSpace* %106, null
  br i1 %107, label %114, label %108

108:                                              ; preds = %77
  %109 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %106, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw add i32* %109, i32 -1 acq_rel
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %114

112:                                              ; preds = %108
  %113 = bitcast %class.SkColorSpace* %106 to i8*
  call void @_ZdlPv(i8* %113) #15
  br label %114

114:                                              ; preds = %77, %108, %112
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %82) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #14
  br label %115

115:                                              ; preds = %75, %71, %63, %40, %36, %28, %114, %58, %24, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* noalias sret, %struct.SkPoint* dereferenceable(8), float, %struct.SkPoint* dereferenceable(8), float, i32* nocapture readonly, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %12 = alloca %struct.ColorConverter, align 8
  %13 = alloca %class.sk_sp, align 8
  %14 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %12, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  %15 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %12, i64 0, i32 0, i32 0, i32 0, i64 32
  %16 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %12, i64 0, i32 0, i32 0, i32 0, i64 40
  %17 = bitcast i8* %16 to i64*
  %18 = bitcast i8* %15 to i8**
  store i8* %14, i8** %18, align 8
  store i64 17179869184, i64* %17, align 8
  %19 = icmp sgt i32 %7, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %11
  %21 = bitcast %struct.ColorConverter* %12 to %struct.SkRGBA4f*
  br label %60

22:                                               ; preds = %11
  %23 = bitcast i8* %15 to %class.SkTArray*
  %24 = bitcast i8* %15 to %struct.SkRGBA4f**
  %25 = zext i32 %7 to i64
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %56, %26 ]
  %28 = getelementptr inbounds i32, i32* %5, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = lshr i32 %29, 16
  %31 = and i32 %30, 255
  %32 = uitofp i32 %31 to float
  %33 = fmul float %32, 0x3F70101020000000
  %34 = lshr i32 %29, 8
  %35 = and i32 %34, 255
  %36 = uitofp i32 %35 to float
  %37 = fmul float %36, 0x3F70101020000000
  %38 = and i32 %29, 255
  %39 = uitofp i32 %38 to float
  %40 = fmul float %39, 0x3F70101020000000
  %41 = lshr i32 %29, 24
  %42 = uitofp i32 %41 to float
  %43 = fmul float %42, 0x3F70101020000000
  call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %23, i32 1, i32 1) #14
  %44 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %24, align 8
  %45 = load i64, i64* %17, align 8
  %46 = lshr i64 %45, 1
  %47 = and i64 %46, 2147483647
  %48 = add i64 %45, 2
  %49 = and i64 %48, 4294967294
  %50 = and i64 %45, -4294967295
  %51 = or i64 %49, %50
  store i64 %51, i64* %17, align 8
  %52 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 0
  store float %33, float* %52, align 4
  %53 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 1
  store float %37, float* %53, align 4
  %54 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 2
  store float %40, float* %54, align 4
  %55 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 3
  store float %43, float* %55, align 4
  %56 = add nuw nsw i64 %27, 1
  %57 = icmp eq i64 %56, %25
  br i1 %57, label %58, label %26

58:                                               ; preds = %26
  %59 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %24, align 8
  br label %60

60:                                               ; preds = %20, %58
  %61 = phi %struct.SkRGBA4f* [ %59, %58 ], [ %21, %20 ]
  %62 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %13, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %62, align 8
  call void @_ZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* sret %0, %struct.SkPoint* dereferenceable(8) %1, float %2, %struct.SkPoint* dereferenceable(8) %3, float %4, %struct.SkRGBA4f* %61, %class.sk_sp* nonnull %13, float* %6, i32 %7, i32 %8, i32 %9, %class.SkMatrix* %10)
  %63 = load %class.SkColorSpace*, %class.SkColorSpace** %62, align 8
  %64 = icmp eq %class.SkColorSpace* %63, null
  br i1 %64, label %71, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 -1 acq_rel
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = bitcast %class.SkColorSpace* %63 to i8*
  call void @_ZdlPv(i8* %70) #15
  br label %71

71:                                               ; preds = %60, %65, %69
  %72 = load i64, i64* %17, align 8
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  %76 = load i8*, i8** %18, align 8
  call void @_Z7sk_freePv(i8* %76) #14
  br label %77

77:                                               ; preds = %71, %75
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* noalias sret, %struct.SkPoint* dereferenceable(8), float, %struct.SkPoint* dereferenceable(8), float, %struct.SkRGBA4f*, %class.sk_sp* nocapture, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #8 align 2 {
  %13 = alloca [3 x %struct.SkRGBA4f], align 16
  %14 = alloca %class.sk_sp, align 8
  %15 = alloca %class.sk_sp, align 8
  %16 = alloca %class.sk_sp, align 8
  %17 = alloca [2 x %struct.SkRGBA4f], align 16
  %18 = alloca %struct.ColorStopOptimizer, align 8
  %19 = alloca %"struct.SkGradientShaderBase::Descriptor", align 8
  %20 = fcmp olt float %2, 0.000000e+00
  %21 = fcmp olt float %4, 0.000000e+00
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %12
  %24 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %24, align 8
  br label %176

25:                                               ; preds = %12
  %26 = icmp ne %struct.SkRGBA4f* %5, null
  %27 = icmp sgt i32 %8, 0
  %28 = and i1 %26, %27
  %29 = icmp ult i32 %9, 4
  %30 = and i1 %28, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %32, align 8
  br label %176

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = fsub float %35, %37
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = fsub float %40, %42
  %44 = tail call float @_ZN7SkPoint6LengthEff(float %38, float %43) #14
  %45 = tail call float @llvm.fabs.f32(float %44) #14
  %46 = fcmp ugt float %45, 0x3F00000000000000
  br i1 %46, label %112, label %47

47:                                               ; preds = %33
  %48 = fsub float %2, %4
  %49 = tail call float @llvm.fabs.f32(float %48) #14
  %50 = fcmp ugt float %49, 0x3F00000000000000
  br i1 %50, label %95, label %51

51:                                               ; preds = %47
  %52 = icmp eq i32 %9, 0
  %53 = fcmp ogt float %4, 0x3F00000000000000
  %54 = and i1 %53, %52
  br i1 %54, label %55, label %81

55:                                               ; preds = %51
  %56 = bitcast [3 x %struct.SkRGBA4f]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %56) #14
  %57 = getelementptr inbounds [3 x %struct.SkRGBA4f], [3 x %struct.SkRGBA4f]* %13, i64 0, i64 0
  %58 = bitcast %struct.SkRGBA4f* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %56, i8* nonnull align 4 %58, i64 16, i1 false)
  %59 = getelementptr inbounds [3 x %struct.SkRGBA4f], [3 x %struct.SkRGBA4f]* %13, i64 0, i64 1
  %60 = bitcast %struct.SkRGBA4f* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %60, i8* nonnull align 4 %58, i64 16, i1 false)
  %61 = getelementptr inbounds [3 x %struct.SkRGBA4f], [3 x %struct.SkRGBA4f]* %13, i64 0, i64 2
  %62 = add nsw i32 %8, -1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %5, i64 %63
  %65 = bitcast %struct.SkRGBA4f* %61 to i8*
  %66 = bitcast %struct.SkRGBA4f* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 4 %66, i64 16, i1 false)
  %67 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %68 = bitcast %class.sk_sp* %6 to i64*
  %69 = load i64, i64* %68, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %67, align 8
  %70 = bitcast %class.sk_sp* %14 to i64*
  store i64 %69, i64* %70, align 8
  call void @_ZN16SkGradientShader10MakeRadialERK7SkPointfPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* sret %0, %struct.SkPoint* dereferenceable(8) %1, float %4, %struct.SkRGBA4f* nonnull %57, %class.sk_sp* nonnull %14, float* getelementptr inbounds ([3 x float], [3 x float]* @_ZZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrixE9circlePos, i64 0, i64 0), i32 3, i32 0, i32 %10, %class.SkMatrix* %11)
  %71 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %14, i64 0, i32 0
  %72 = load %class.SkColorSpace*, %class.SkColorSpace** %71, align 8
  %73 = icmp eq %class.SkColorSpace* %72, null
  br i1 %73, label %80, label %74

74:                                               ; preds = %55
  %75 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %72, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw add i32* %75, i32 -1 acq_rel
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = bitcast %class.SkColorSpace* %72 to i8*
  call void @_ZdlPv(i8* %79) #15
  br label %80

80:                                               ; preds = %55, %74, %78
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %56) #14
  br label %176

81:                                               ; preds = %51
  %82 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %83 = bitcast %class.sk_sp* %6 to i64*
  %84 = load i64, i64* %83, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %82, align 8
  %85 = bitcast %class.sk_sp* %15 to i64*
  store i64 %84, i64* %85, align 8
  call fastcc void @_ZL24make_degenerate_gradientPK8SkRGBA4fIL11SkAlphaType3EEPKfi5sk_spI12SkColorSpaceE10SkTileMode(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull %5, float* %7, i32 %8, %class.sk_sp* nonnull %15, i32 %9)
  %86 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %15, i64 0, i32 0
  %87 = load %class.SkColorSpace*, %class.SkColorSpace** %86, align 8
  %88 = icmp eq %class.SkColorSpace* %87, null
  br i1 %88, label %176, label %89

89:                                               ; preds = %81
  %90 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = atomicrmw add i32* %90, i32 -1 acq_rel
  %92 = icmp eq i32 %91, 1
  br i1 %92, label %93, label %176

93:                                               ; preds = %89
  %94 = bitcast %class.SkColorSpace* %87 to i8*
  tail call void @_ZdlPv(i8* %94) #15
  br label %176

95:                                               ; preds = %47
  %96 = tail call float @llvm.fabs.f32(float %2) #14
  %97 = fcmp ugt float %96, 0x3F00000000000000
  br i1 %97, label %112, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %100 = bitcast %class.sk_sp* %6 to i64*
  %101 = load i64, i64* %100, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %99, align 8
  %102 = bitcast %class.sk_sp* %16 to i64*
  store i64 %101, i64* %102, align 8
  call void @_ZN16SkGradientShader10MakeRadialERK7SkPointfPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.21* sret %0, %struct.SkPoint* dereferenceable(8) %1, float %4, %struct.SkRGBA4f* nonnull %5, %class.sk_sp* nonnull %16, float* %7, i32 %8, i32 %9, i32 %10, %class.SkMatrix* %11)
  %103 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %16, i64 0, i32 0
  %104 = load %class.SkColorSpace*, %class.SkColorSpace** %103, align 8
  %105 = icmp eq %class.SkColorSpace* %104, null
  br i1 %105, label %176, label %106

106:                                              ; preds = %98
  %107 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %104, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = atomicrmw add i32* %107, i32 -1 acq_rel
  %109 = icmp eq i32 %108, 1
  br i1 %109, label %110, label %176

110:                                              ; preds = %106
  %111 = bitcast %class.SkColorSpace* %104 to i8*
  tail call void @_ZdlPv(i8* %111) #15
  br label %176

112:                                              ; preds = %95, %33
  %113 = icmp eq %class.SkMatrix* %11, null
  br i1 %113, label %130, label %114

114:                                              ; preds = %112
  %115 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = trunc i32 %116 to i8
  %118 = icmp slt i8 %117, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %114
  %120 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %11) #14
  %121 = zext i8 %120 to i32
  store i32 %121, i32* %115, align 4
  br label %122

122:                                              ; preds = %119, %114
  %123 = phi i32 [ %121, %119 ], [ %116, %114 ]
  %124 = and i32 %123, 15
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %130, label %126

126:                                              ; preds = %122
  %127 = tail call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %11, %class.SkMatrix* null) #14
  br i1 %127, label %130, label %128

128:                                              ; preds = %126
  %129 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %129, align 8
  br label %176

130:                                              ; preds = %122, %112, %126
  %131 = bitcast [2 x %struct.SkRGBA4f]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %131) #14
  %132 = icmp eq i32 %8, 1
  %133 = bitcast [2 x %struct.SkRGBA4f]* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %133, i8 -1, i64 32, i1 false)
  br i1 %132, label %134, label %139

134:                                              ; preds = %130
  %135 = getelementptr inbounds [2 x %struct.SkRGBA4f], [2 x %struct.SkRGBA4f]* %17, i64 0, i64 1
  %136 = getelementptr inbounds [2 x %struct.SkRGBA4f], [2 x %struct.SkRGBA4f]* %17, i64 0, i64 0
  %137 = bitcast %struct.SkRGBA4f* %135 to i8*
  %138 = bitcast %struct.SkRGBA4f* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %137, i8* nonnull align 4 %138, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %131, i8* nonnull align 4 %138, i64 16, i1 false)
  br label %139

139:                                              ; preds = %130, %134
  %140 = phi i32 [ 2, %134 ], [ %8, %130 ]
  %141 = phi float* [ null, %134 ], [ %7, %130 ]
  %142 = phi %struct.SkRGBA4f* [ %136, %134 ], [ %5, %130 ]
  %143 = bitcast %struct.ColorStopOptimizer* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #14
  %144 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %18, i64 0, i32 1
  %145 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %18, i64 0, i32 2
  %146 = bitcast %struct.ColorStopOptimizer* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 -86, i64 24, i1 false)
  call void @_ZN18ColorStopOptimizerC2EPK8SkRGBA4fIL11SkAlphaType3EEPKfi10SkTileMode(%struct.ColorStopOptimizer* nonnull %18, %struct.SkRGBA4f* %142, float* %141, i32 %140, i32 %9)
  %147 = bitcast %"struct.SkGradientShaderBase::Descriptor"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %147) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %147, i8 0, i64 48, i1 false) #14
  %148 = bitcast %struct.ColorStopOptimizer* %18 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %151 = bitcast %class.sk_sp* %6 to i64*
  %152 = load i64, i64* %151, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %150, align 8
  %153 = bitcast float** %144 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = load i32, i32* %145, align 8
  %156 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 1
  %157 = bitcast %struct.SkRGBA4f** %156 to i64*
  store i64 %149, i64* %157, align 8
  %158 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 2
  %159 = bitcast %class.sk_sp* %158 to i64*
  store i64 %152, i64* %159, align 8
  %160 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 3
  %161 = bitcast float** %160 to i64*
  store i64 %154, i64* %161, align 8
  %162 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 4
  store i32 %155, i32* %162, align 8
  %163 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 5
  store i32 %9, i32* %163, align 4
  %164 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 6
  store i32 %10, i32* %164, align 8
  %165 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 0
  store %class.SkMatrix* %11, %class.SkMatrix** %165, align 8
  call void @_ZN25SkTwoPointConicalGradient6CreateERK7SkPointfS2_fRKN20SkGradientShaderBase10DescriptorE(%class.sk_sp.21* sret %0, %struct.SkPoint* dereferenceable(8) %1, float %2, %struct.SkPoint* dereferenceable(8) %3, float %4, %"struct.SkGradientShaderBase::Descriptor"* nonnull dereferenceable(48) %19) #14
  %166 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %19, i64 0, i32 2, i32 0
  %167 = load %class.SkColorSpace*, %class.SkColorSpace** %166, align 8
  %168 = icmp eq %class.SkColorSpace* %167, null
  br i1 %168, label %175, label %169

169:                                              ; preds = %139
  %170 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %167, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = atomicrmw add i32* %170, i32 -1 acq_rel
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %173, label %175

173:                                              ; preds = %169
  %174 = bitcast %class.SkColorSpace* %167 to i8*
  call void @_ZdlPv(i8* %174) #15
  br label %175

175:                                              ; preds = %139, %169, %173
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %147) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #14
  br label %176

176:                                              ; preds = %110, %106, %98, %93, %89, %81, %175, %128, %80, %31, %23
  ret void
}

declare void @_ZN25SkTwoPointConicalGradient6CreateERK7SkPointfS2_fRKN20SkGradientShaderBase10DescriptorE(%class.sk_sp.21* sret, %struct.SkPoint* dereferenceable(8), float, %struct.SkPoint* dereferenceable(8), float, %"struct.SkGradientShaderBase::Descriptor"* dereferenceable(48)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader9MakeSweepEffPKjPKfi10SkTileModeffjPK8SkMatrix(%class.sk_sp.21* noalias sret, float, float, i32* nocapture readonly, float*, i32, i32, float, float, i32, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %12 = alloca %struct.ColorConverter, align 8
  %13 = alloca %class.sk_sp, align 8
  %14 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %12, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  %15 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %12, i64 0, i32 0, i32 0, i32 0, i64 32
  %16 = getelementptr inbounds %struct.ColorConverter, %struct.ColorConverter* %12, i64 0, i32 0, i32 0, i32 0, i64 40
  %17 = bitcast i8* %16 to i64*
  %18 = bitcast i8* %15 to i8**
  store i8* %14, i8** %18, align 8
  store i64 17179869184, i64* %17, align 8
  %19 = icmp sgt i32 %5, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %11
  %21 = bitcast %struct.ColorConverter* %12 to %struct.SkRGBA4f*
  br label %60

22:                                               ; preds = %11
  %23 = bitcast i8* %15 to %class.SkTArray*
  %24 = bitcast i8* %15 to %struct.SkRGBA4f**
  %25 = zext i32 %5 to i64
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %56, %26 ]
  %28 = getelementptr inbounds i32, i32* %3, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = lshr i32 %29, 16
  %31 = and i32 %30, 255
  %32 = uitofp i32 %31 to float
  %33 = fmul float %32, 0x3F70101020000000
  %34 = lshr i32 %29, 8
  %35 = and i32 %34, 255
  %36 = uitofp i32 %35 to float
  %37 = fmul float %36, 0x3F70101020000000
  %38 = and i32 %29, 255
  %39 = uitofp i32 %38 to float
  %40 = fmul float %39, 0x3F70101020000000
  %41 = lshr i32 %29, 24
  %42 = uitofp i32 %41 to float
  %43 = fmul float %42, 0x3F70101020000000
  call void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray* %23, i32 1, i32 1) #14
  %44 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %24, align 8
  %45 = load i64, i64* %17, align 8
  %46 = lshr i64 %45, 1
  %47 = and i64 %46, 2147483647
  %48 = add i64 %45, 2
  %49 = and i64 %48, 4294967294
  %50 = and i64 %45, -4294967295
  %51 = or i64 %49, %50
  store i64 %51, i64* %17, align 8
  %52 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 0
  store float %33, float* %52, align 4
  %53 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 1
  store float %37, float* %53, align 4
  %54 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 2
  store float %40, float* %54, align 4
  %55 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %44, i64 %47, i32 3
  store float %43, float* %55, align 4
  %56 = add nuw nsw i64 %27, 1
  %57 = icmp eq i64 %56, %25
  br i1 %57, label %58, label %26

58:                                               ; preds = %26
  %59 = load %struct.SkRGBA4f*, %struct.SkRGBA4f** %24, align 8
  br label %60

60:                                               ; preds = %20, %58
  %61 = phi %struct.SkRGBA4f* [ %59, %58 ], [ %21, %20 ]
  %62 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %13, i64 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %62, align 8
  call void @_ZN16SkGradientShader9MakeSweepEffPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModeffjPK8SkMatrix(%class.sk_sp.21* sret %0, float %1, float %2, %struct.SkRGBA4f* %61, %class.sk_sp* nonnull %13, float* %4, i32 %5, i32 %6, float %7, float %8, i32 %9, %class.SkMatrix* %10)
  %63 = load %class.SkColorSpace*, %class.SkColorSpace** %62, align 8
  %64 = icmp eq %class.SkColorSpace* %63, null
  br i1 %64, label %71, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 -1 acq_rel
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = bitcast %class.SkColorSpace* %63 to i8*
  call void @_ZdlPv(i8* %70) #15
  br label %71

71:                                               ; preds = %60, %65, %69
  %72 = load i64, i64* %17, align 8
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  %76 = load i8*, i8** %18, align 8
  call void @_Z7sk_freePv(i8* %76) #14
  br label %77

77:                                               ; preds = %71, %75
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader9MakeSweepEffPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModeffjPK8SkMatrix(%class.sk_sp.21* noalias sret, float, float, %struct.SkRGBA4f*, %class.sk_sp* nocapture, float*, i32, i32, float, float, i32, %class.SkMatrix*) local_unnamed_addr #8 align 2 {
  %13 = alloca %class.sk_sp, align 8
  %14 = alloca [3 x %struct.SkRGBA4f], align 16
  %15 = alloca %class.sk_sp, align 8
  %16 = alloca %class.sk_sp, align 8
  %17 = alloca %struct.ColorStopOptimizer, align 8
  %18 = alloca %"struct.SkGradientShaderBase::Descriptor", align 8
  %19 = alloca <2 x float>, align 8
  %20 = bitcast <2 x float>* %19 to %struct.SkPoint*
  %21 = icmp ne %struct.SkRGBA4f* %3, null
  %22 = icmp sgt i32 %6, 0
  %23 = and i1 %21, %22
  %24 = icmp ult i32 %7, 4
  %25 = and i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %12
  %27 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %27, align 8
  br label %169

28:                                               ; preds = %12
  %29 = icmp eq i32 %6, 1
  br i1 %29, label %30, label %44

30:                                               ; preds = %28
  %31 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %32 = bitcast %class.sk_sp* %4 to i64*
  %33 = load i64, i64* %32, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %31, align 8
  %34 = bitcast %class.sk_sp* %13 to i64*
  store i64 %33, i64* %34, align 8
  call void @_ZN9SkShaders5ColorERK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceE(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull dereferenceable(16) %3, %class.sk_sp* nonnull %13) #14
  %35 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %13, i64 0, i32 0
  %36 = load %class.SkColorSpace*, %class.SkColorSpace** %35, align 8
  %37 = icmp eq %class.SkColorSpace* %36, null
  br i1 %37, label %169, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 -1 acq_rel
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %169

42:                                               ; preds = %38
  %43 = bitcast %class.SkColorSpace* %36 to i8*
  call void @_ZdlPv(i8* %43) #15
  br label %169

44:                                               ; preds = %28
  %45 = bitcast float %8 to i32
  %46 = and i32 %45, 2139095040
  %47 = icmp eq i32 %46, 2139095040
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = bitcast float %9 to i32
  %50 = and i32 %49, 2139095040
  %51 = icmp eq i32 %50, 2139095040
  %52 = fcmp ogt float %8, %9
  %53 = or i1 %52, %51
  br i1 %53, label %54, label %56

54:                                               ; preds = %44, %48
  %55 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %55, align 8
  br label %169

56:                                               ; preds = %48
  %57 = icmp eq %class.SkMatrix* %11, null
  br i1 %57, label %74, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = trunc i32 %60 to i8
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %11) #14
  %65 = zext i8 %64 to i32
  store i32 %65, i32* %59, align 4
  br label %66

66:                                               ; preds = %63, %58
  %67 = phi i32 [ %65, %63 ], [ %60, %58 ]
  %68 = and i32 %67, 15
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = tail call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %11, %class.SkMatrix* null) #14
  br i1 %71, label %74, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %class.sk_sp.21, %class.sk_sp.21* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %73, align 8
  br label %169

74:                                               ; preds = %66, %56, %70
  %75 = fsub float %8, %9
  %76 = tail call float @llvm.fabs.f32(float %75) #14
  %77 = fcmp ugt float %76, 0x3F00000000000000
  br i1 %77, label %122, label %78

78:                                               ; preds = %74
  %79 = icmp eq i32 %7, 0
  %80 = fcmp ogt float %9, 0x3F00000000000000
  %81 = and i1 %79, %80
  br i1 %81, label %82, label %108

82:                                               ; preds = %78
  %83 = bitcast [3 x %struct.SkRGBA4f]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %83) #14
  %84 = getelementptr inbounds [3 x %struct.SkRGBA4f], [3 x %struct.SkRGBA4f]* %14, i64 0, i64 0
  %85 = bitcast %struct.SkRGBA4f* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %83, i8* nonnull align 4 %85, i64 16, i1 false)
  %86 = getelementptr inbounds [3 x %struct.SkRGBA4f], [3 x %struct.SkRGBA4f]* %14, i64 0, i64 1
  %87 = bitcast %struct.SkRGBA4f* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %87, i8* nonnull align 4 %85, i64 16, i1 false)
  %88 = getelementptr inbounds [3 x %struct.SkRGBA4f], [3 x %struct.SkRGBA4f]* %14, i64 0, i64 2
  %89 = add nsw i32 %6, -1
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %3, i64 %90
  %92 = bitcast %struct.SkRGBA4f* %88 to i8*
  %93 = bitcast %struct.SkRGBA4f* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %92, i8* align 4 %93, i64 16, i1 false)
  %94 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %95 = bitcast %class.sk_sp* %4 to i64*
  %96 = load i64, i64* %95, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %94, align 8
  %97 = bitcast %class.sk_sp* %15 to i64*
  store i64 %96, i64* %97, align 8
  call void @_ZN16SkGradientShader9MakeSweepEffPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModeffjPK8SkMatrix(%class.sk_sp.21* sret %0, float %1, float %2, %struct.SkRGBA4f* nonnull %84, %class.sk_sp* nonnull %15, float* getelementptr inbounds ([3 x float], [3 x float]* @_ZZN16SkGradientShader9MakeSweepEffPK8SkRGBA4fIL11SkAlphaType3EE5sk_spI12SkColorSpaceEPKfi10SkTileModeffjPK8SkMatrixE8clampPos, i64 0, i64 0), i32 3, i32 0, float 0.000000e+00, float %9, i32 %10, %class.SkMatrix* %11)
  %98 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %15, i64 0, i32 0
  %99 = load %class.SkColorSpace*, %class.SkColorSpace** %98, align 8
  %100 = icmp eq %class.SkColorSpace* %99, null
  br i1 %100, label %107, label %101

101:                                              ; preds = %82
  %102 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %99, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = atomicrmw add i32* %102, i32 -1 acq_rel
  %104 = icmp eq i32 %103, 1
  br i1 %104, label %105, label %107

105:                                              ; preds = %101
  %106 = bitcast %class.SkColorSpace* %99 to i8*
  call void @_ZdlPv(i8* %106) #15
  br label %107

107:                                              ; preds = %82, %101, %105
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %83) #14
  br label %169

108:                                              ; preds = %78
  %109 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %110 = bitcast %class.sk_sp* %4 to i64*
  %111 = load i64, i64* %110, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %109, align 8
  %112 = bitcast %class.sk_sp* %16 to i64*
  store i64 %111, i64* %112, align 8
  call fastcc void @_ZL24make_degenerate_gradientPK8SkRGBA4fIL11SkAlphaType3EEPKfi5sk_spI12SkColorSpaceE10SkTileMode(%class.sk_sp.21* sret %0, %struct.SkRGBA4f* nonnull %3, float* %5, i32 %6, %class.sk_sp* nonnull %16, i32 %7)
  %113 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %16, i64 0, i32 0
  %114 = load %class.SkColorSpace*, %class.SkColorSpace** %113, align 8
  %115 = icmp eq %class.SkColorSpace* %114, null
  br i1 %115, label %169, label %116

116:                                              ; preds = %108
  %117 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %114, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = atomicrmw add i32* %117, i32 -1 acq_rel
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %120, label %169

120:                                              ; preds = %116
  %121 = bitcast %class.SkColorSpace* %114 to i8*
  tail call void @_ZdlPv(i8* %121) #15
  br label %169

122:                                              ; preds = %74
  %123 = fcmp ole float %8, 0.000000e+00
  %124 = fcmp oge float %9, 3.600000e+02
  %125 = and i1 %123, %124
  %126 = select i1 %125, i32 0, i32 %7
  %127 = bitcast %struct.ColorStopOptimizer* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %127) #14
  %128 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %17, i64 0, i32 1
  %129 = getelementptr inbounds %struct.ColorStopOptimizer, %struct.ColorStopOptimizer* %17, i64 0, i32 2
  %130 = bitcast %struct.ColorStopOptimizer* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %130, i8 -86, i64 24, i1 false)
  call void @_ZN18ColorStopOptimizerC2EPK8SkRGBA4fIL11SkAlphaType3EEPKfi10SkTileMode(%struct.ColorStopOptimizer* nonnull %17, %struct.SkRGBA4f* nonnull %3, float* %5, i32 %6, i32 %126)
  %131 = bitcast %"struct.SkGradientShaderBase::Descriptor"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %131) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %131, i8 0, i64 48, i1 false) #14
  %132 = bitcast %struct.ColorStopOptimizer* %17 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %135 = bitcast %class.sk_sp* %4 to i64*
  %136 = load i64, i64* %135, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %134, align 8
  %137 = bitcast float** %128 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = load i32, i32* %129, align 8
  %140 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 1
  %141 = bitcast %struct.SkRGBA4f** %140 to i64*
  store i64 %133, i64* %141, align 8
  %142 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 2
  %143 = bitcast %class.sk_sp* %142 to i64*
  store i64 %136, i64* %143, align 8
  %144 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 3
  %145 = bitcast float** %144 to i64*
  store i64 %138, i64* %145, align 8
  %146 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 4
  store i32 %139, i32* %146, align 8
  %147 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 5
  store i32 %126, i32* %147, align 4
  %148 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 6
  store i32 %10, i32* %148, align 8
  %149 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 0
  store %class.SkMatrix* %11, %class.SkMatrix** %149, align 8
  %150 = fdiv float %8, 3.600000e+02
  %151 = fdiv float %9, 3.600000e+02
  %152 = bitcast <2 x float>* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %152) #14
  %153 = insertelement <2 x float> undef, float %1, i32 0
  %154 = insertelement <2 x float> %153, float %2, i32 1
  store <2 x float> %154, <2 x float>* %19, align 8
  %155 = call i8* @_Znwm(i64 248) #15, !noalias !54
  %156 = bitcast i8* %155 to %class.SkSweepGradient*
  call void @_ZN15SkSweepGradientC1ERK7SkPointffRKN20SkGradientShaderBase10DescriptorE(%class.SkSweepGradient* nonnull %156, %struct.SkPoint* nonnull dereferenceable(8) %20, float %150, float %151, %"struct.SkGradientShaderBase::Descriptor"* nonnull dereferenceable(48) %18) #14, !noalias !54
  %157 = ptrtoint i8* %155 to i64
  %158 = bitcast %class.sk_sp.21* %0 to i64*
  store i64 %157, i64* %158, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %152) #14
  %159 = getelementptr inbounds %"struct.SkGradientShaderBase::Descriptor", %"struct.SkGradientShaderBase::Descriptor"* %18, i64 0, i32 2, i32 0
  %160 = load %class.SkColorSpace*, %class.SkColorSpace** %159, align 8
  %161 = icmp eq %class.SkColorSpace* %160, null
  br i1 %161, label %168, label %162

162:                                              ; preds = %122
  %163 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = atomicrmw add i32* %163, i32 -1 acq_rel
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %168

166:                                              ; preds = %162
  %167 = bitcast %class.SkColorSpace* %160 to i8*
  call void @_ZdlPv(i8* %167) #15
  br label %168

168:                                              ; preds = %122, %162, %166
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %131) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %127) #14
  br label %169

169:                                              ; preds = %120, %116, %108, %42, %38, %30, %168, %107, %72, %54, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkGradientShader20RegisterFlattenablesEv() local_unnamed_addr #0 align 2 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.17*, %class.SkReadBuffer*)* nonnull @_ZN16SkLinearGradient10CreateProcER12SkReadBuffer) #14
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), void (%class.sk_sp.17*, %class.SkReadBuffer*)* nonnull @_ZN16SkRadialGradient10CreateProcER12SkReadBuffer) #14
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), void (%class.sk_sp.17*, %class.SkReadBuffer*)* nonnull @_ZN15SkSweepGradient10CreateProcER12SkReadBuffer) #14
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), void (%class.sk_sp.17*, %class.SkReadBuffer*)* nonnull @_ZN25SkTwoPointConicalGradient10CreateProcER12SkReadBuffer) #14
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.17*, %class.SkReadBuffer*)*) local_unnamed_addr #2

declare void @_ZN16SkLinearGradient10CreateProcER12SkReadBuffer(%class.sk_sp.17* sret, %class.SkReadBuffer* dereferenceable(136)) #2

declare void @_ZN16SkRadialGradient10CreateProcER12SkReadBuffer(%class.sk_sp.17* sret, %class.SkReadBuffer* dereferenceable(136)) #2

declare void @_ZN15SkSweepGradient10CreateProcER12SkReadBuffer(%class.sk_sp.17* sret, %class.SkReadBuffer* dereferenceable(136)) #2

declare void @_ZN25SkTwoPointConicalGradient10CreateProcER12SkReadBuffer(%class.sk_sp.17* sret, %class.SkReadBuffer* dereferenceable(136)) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #14
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkShaderBase18getFlattenableTypeEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i32 8
}

declare i32 @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE(%class.SkShader*, %"struct.SkShader::GradientInfo"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase10isConstantEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkImage* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode(%class.SkShaderBase*, %class.SkMatrix*, i32*) unnamed_addr #0 comdat align 2 {
  ret %class.SkImage* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkRuntimeEffect* @_ZNK12SkShaderBase15asRuntimeEffectEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret %class.SkRuntimeEffect* null
}

declare void @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix(%class.sk_sp.21* sret, %class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkShaderBase::Context"* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) unnamed_addr #0 comdat align 2 {
  ret %"class.SkShaderBase::Context"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkStageUpdater* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret %class.SkStageUpdater* null
}

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #3

declare void @_ZN8SkMatrix22doNormalizePerspectiveEv(%class.SkMatrix*) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder2eqENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5floorENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder7bit_andENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"*, float) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %16, label %10

10:                                               ; preds = %2
  %11 = bitcast i32* %5 to float*
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds i32, i32* %5, i64 1
  %13 = ptrtoint i32* %12 to i64
  %14 = bitcast i32** %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast %"class.std::__1::vector.41"* %3 to i64*
  br label %74

16:                                               ; preds = %2
  %17 = ptrtoint i32* %5 to i64
  %18 = bitcast i32** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.41"* %3 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.41"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #16
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #16
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #15
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  %51 = bitcast i32* %48 to float*
  store float %1, float* %51, align 4
  %52 = getelementptr inbounds i32, i32* %48, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #14
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i32* [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #15
  %73 = load i64, i64* %18, align 8
  br label %74

74:                                               ; preds = %10, %68, %71
  %75 = phi i64* [ %15, %10 ], [ %19, %68 ], [ %19, %71 ]
  %76 = phi i64 [ %13, %10 ], [ %53, %68 ], [ %73, %71 ]
  %77 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = load i64, i64* %75, align 8
  %80 = sub i64 %76, %79
  %81 = shl i64 %80, 32
  %82 = add i64 %81, -17179869184
  %83 = zext i32 %78 to i64
  %84 = or i64 %82, %83
  ret i64 %84
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"*, i32, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5truncENS_3F32E(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3gteENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3shlENS_3I32Ei(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder8gather32ENS_3PtrEiNS_3I32E(%"class.skvm::Builder"*, i32, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3I32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare i32 @_ZNK8SkRGBA4fIL11SkAlphaType3EE9toSkColorEv(%struct.SkRGBA4f*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI8SkRGBA4fIL11SkAlphaType3EELb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 16) #14
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 3
  %47 = and i64 %46, 34359738352
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #14
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #14
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2

declare void @_ZN9SkShaders5EmptyEv(%class.sk_sp.21* sret) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #3

declare void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIfLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.14*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.14, %class.SkTArray.14* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 4) #14
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 1
  %47 = and i64 %46, 8589934588
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.14* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #14
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.14* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #14
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

declare void @_ZN16SkRasterPipelineC2EP12SkArenaAlloc(%class.SkRasterPipeline*, %class.SkArenaAlloc*) unnamed_addr #2

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #2

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

declare void @_ZN16SkLinearGradientC1EPK7SkPointRKN20SkGradientShaderBase10DescriptorE(%class.SkLinearGradient*, %struct.SkPoint*, %"struct.SkGradientShaderBase::Descriptor"* dereferenceable(48)) unnamed_addr #2

declare void @_ZN16SkRadialGradientC1ERK7SkPointfRKN20SkGradientShaderBase10DescriptorE(%class.SkRadialGradient*, %struct.SkPoint* dereferenceable(8), float, %"struct.SkGradientShaderBase::Descriptor"* dereferenceable(48)) unnamed_addr #2

declare void @_ZN15SkSweepGradientC1ERK7SkPointffRKN20SkGradientShaderBase10DescriptorE(%class.SkSweepGradient*, %struct.SkPoint* dereferenceable(8), float, float, %"struct.SkGradientShaderBase::Descriptor"* dereferenceable(48)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo: argument 0"}
!5 = distinct !{!5, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo"}
!6 = distinct !{!6, !7, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE: argument 0"}
!7 = distinct !{!7, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!10 = distinct !{!10, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!11 = !{!12, !14}
!12 = distinct !{!12, !13, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo: argument 0"}
!13 = distinct !{!13, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo"}
!14 = distinct !{!14, !15, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE: argument 0"}
!15 = distinct !{!15, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE"}
!16 = !{!17, !19, !21}
!17 = distinct !{!17, !18, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!18 = distinct !{!18, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!19 = distinct !{!19, !20, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!20 = distinct !{!20, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!21 = distinct !{!21, !22, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!22 = distinct !{!22, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN4skvmL6premulENS_5ColorE: argument 0"}
!25 = distinct !{!25, !"_ZN4skvmL6premulENS_5ColorE"}
!26 = !{!27, !24}
!27 = distinct !{!27, !28, !"_ZN4skvm7Builder6premulENS_5ColorE: argument 0"}
!28 = distinct !{!28, !"_ZN4skvm7Builder6premulENS_5ColorE"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!31 = distinct !{!31, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!34 = distinct !{!34, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!35 = !{!36, !38}
!36 = distinct !{!36, !37, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo: argument 0"}
!37 = distinct !{!37, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo"}
!38 = distinct !{!38, !39, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE: argument 0"}
!39 = distinct !{!39, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!42 = distinct !{!42, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!43 = !{!44, !46}
!44 = distinct !{!44, !45, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo: argument 0"}
!45 = distinct !{!45, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo"}
!46 = distinct !{!46, !47, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE: argument 0"}
!47 = distinct !{!47, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_Z10sk_make_spI16SkLinearGradientJRPK7SkPointRN20SkGradientShaderBase10DescriptorEEE5sk_spIT_EDpOT0_: argument 0"}
!50 = distinct !{!50, !"_Z10sk_make_spI16SkLinearGradientJRPK7SkPointRN20SkGradientShaderBase10DescriptorEEE5sk_spIT_EDpOT0_"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_Z10sk_make_spI16SkRadialGradientJRK7SkPointRfRN20SkGradientShaderBase10DescriptorEEE5sk_spIT_EDpOT0_: argument 0"}
!53 = distinct !{!53, !"_Z10sk_make_spI16SkRadialGradientJRK7SkPointRfRN20SkGradientShaderBase10DescriptorEEE5sk_spIT_EDpOT0_"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_Z10sk_make_spI15SkSweepGradientJ7SkPointRKfS3_RN20SkGradientShaderBase10DescriptorEEE5sk_spIT_EDpOT0_: argument 0"}
!56 = distinct !{!56, !"_Z10sk_make_spI15SkSweepGradientJ7SkPointRKfS3_RN20SkGradientShaderBase10DescriptorEEE5sk_spIT_EDpOT0_"}
