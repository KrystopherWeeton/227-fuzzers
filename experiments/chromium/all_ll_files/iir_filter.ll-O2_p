; ModuleID = '../../third_party/blink/renderer/platform/audio/iir_filter.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/iir_filter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IIRFilter" = type { %"class.blink::AudioArray", %"class.blink::AudioArray", i32, %"class.blink::AudioArray"*, %"class.blink::AudioArray"* }
%"class.blink::AudioArray" = type <{ double*, double*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::complex" = type { double, double }
%"class.blink::AudioArray.0" = type <{ float*, float*, i32, [4 x i8] }>

$_ZN5blink10AudioArrayIdE8AllocateEm = comdat any

$_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_ = comdat any

$_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_ = comdat any

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.2 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIdEEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<double>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

@_ZN5blink9IIRFilterC1EPKNS_10AudioArrayIdEES4_ = hidden unnamed_addr alias void (%"class.blink::IIRFilter"*, %"class.blink::AudioArray"*, %"class.blink::AudioArray"*), void (%"class.blink::IIRFilter"*, %"class.blink::AudioArray"*, %"class.blink::AudioArray"*)* @_ZN5blink9IIRFilterC2EPKNS_10AudioArrayIdEES4_
@_ZN5blink9IIRFilterD1Ev = hidden unnamed_addr alias void (%"class.blink::IIRFilter"*), void (%"class.blink::IIRFilter"*)* @_ZN5blink9IIRFilterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9IIRFilterC2EPKNS_10AudioArrayIdEES4_(%"class.blink::IIRFilter"*, %"class.blink::AudioArray"*, %"class.blink::AudioArray"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 0
  %5 = bitcast %"class.blink::IIRFilter"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #8
  %6 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::AudioArray"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #8
  %8 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 2
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 3
  store %"class.blink::AudioArray"* %2, %"class.blink::AudioArray"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 4
  store %"class.blink::AudioArray"* %1, %"class.blink::AudioArray"** %10, align 8
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %4, i64 32)
  tail call void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"* %6, i64 32)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIdE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 536870911
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #8
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536870911) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i8* %13, i8* %14) #8
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #8
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 3
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load double*, double** %24, align 8
  %26 = icmp eq double* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast double* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #8
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #8
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #8
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIdEEEEPKcv, i64 0, i64 0)) #8
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)) #8
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to double*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store double* %50, double** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9IIRFilterD2Ev(%"class.blink::IIRFilter"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1
  %3 = bitcast %"class.blink::AudioArray"* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %4) #8
  %5 = bitcast %"class.blink::IIRFilter"* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %6) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9IIRFilter5ResetEv(%"class.blink::IIRFilter"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 0, i32 1
  %3 = bitcast double** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 %8, i1 false) #8
  %9 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1, i32 1
  %10 = bitcast double** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = shl nuw nsw i64 %14, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %15, i1 false) #8
  %16 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 2
  store i32 0, i32* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9IIRFilter7ProcessEPKfPfj(%"class.blink::IIRFilter"* nocapture, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 3
  %6 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %6, i64 0, i32 1
  %8 = load double*, double** %7, align 8
  %9 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 4
  %10 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %10, i64 0, i32 1
  %12 = load double*, double** %11, align 8
  %13 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %6, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %10, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %16, %14
  %18 = select i1 %17, i32 %16, i32 %14
  %19 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 0, i32 1
  %20 = load double*, double** %19, align 8
  %21 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1, i32 1
  %22 = load double*, double** %21, align 8
  %23 = zext i32 %3 to i64
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %37, label %25

25:                                               ; preds = %4
  %26 = icmp sgt i32 %18, 1
  %27 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 2
  %28 = icmp sgt i32 %16, %14
  %29 = sext i32 %18 to i64
  %30 = sext i32 %16 to i64
  %31 = sext i32 %14 to i64
  %32 = add nsw i64 %29, -1
  %33 = and i64 %32, 1
  %34 = icmp eq i32 %18, 2
  %35 = sub nsw i64 %32, %33
  %36 = icmp eq i64 %33, 0
  br label %38

37:                                               ; preds = %130, %4
  ret void

38:                                               ; preds = %130, %25
  %39 = phi i64 [ 0, %25 ], [ %144, %130 ]
  %40 = load double, double* %12, align 8
  %41 = getelementptr inbounds float, float* %1, i64 %39
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = fmul double %40, %43
  br i1 %26, label %45, label %68

45:                                               ; preds = %38
  %46 = load i32, i32* %27, align 8
  br i1 %34, label %47, label %72

47:                                               ; preds = %72, %45
  %48 = phi double [ undef, %45 ], [ %108, %72 ]
  %49 = phi i64 [ 1, %45 ], [ %109, %72 ]
  %50 = phi double [ %44, %45 ], [ %108, %72 ]
  br i1 %36, label %68, label %51

51:                                               ; preds = %47
  %52 = trunc i64 %49 to i32
  %53 = sub nsw i32 %46, %52
  %54 = and i32 %53, 31
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds double, double* %12, i64 %49
  %57 = load double, double* %56, align 8
  %58 = getelementptr inbounds double, double* %20, i64 %55
  %59 = load double, double* %58, align 8
  %60 = fmul double %57, %59
  %61 = fadd double %50, %60
  %62 = getelementptr inbounds double, double* %8, i64 %49
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds double, double* %22, i64 %55
  %65 = load double, double* %64, align 8
  %66 = fmul double %63, %65
  %67 = fsub double %61, %66
  br label %68

68:                                               ; preds = %51, %47, %38
  %69 = phi double [ %44, %38 ], [ %48, %47 ], [ %67, %51 ]
  br i1 %28, label %70, label %112

70:                                               ; preds = %68
  %71 = load i32, i32* %27, align 8
  br label %115

72:                                               ; preds = %45, %72
  %73 = phi i64 [ %109, %72 ], [ 1, %45 ]
  %74 = phi double [ %108, %72 ], [ %44, %45 ]
  %75 = phi i64 [ %110, %72 ], [ %35, %45 ]
  %76 = trunc i64 %73 to i32
  %77 = sub nsw i32 %46, %76
  %78 = and i32 %77, 31
  %79 = getelementptr inbounds double, double* %12, i64 %73
  %80 = load double, double* %79, align 8
  %81 = zext i32 %78 to i64
  %82 = getelementptr inbounds double, double* %20, i64 %81
  %83 = load double, double* %82, align 8
  %84 = fmul double %80, %83
  %85 = fadd double %74, %84
  %86 = getelementptr inbounds double, double* %8, i64 %73
  %87 = load double, double* %86, align 8
  %88 = getelementptr inbounds double, double* %22, i64 %81
  %89 = load double, double* %88, align 8
  %90 = fmul double %87, %89
  %91 = fsub double %85, %90
  %92 = add nuw nsw i64 %73, 1
  %93 = trunc i64 %92 to i32
  %94 = sub nsw i32 %46, %93
  %95 = and i32 %94, 31
  %96 = getelementptr inbounds double, double* %12, i64 %92
  %97 = load double, double* %96, align 8
  %98 = zext i32 %95 to i64
  %99 = getelementptr inbounds double, double* %20, i64 %98
  %100 = load double, double* %99, align 8
  %101 = fmul double %97, %100
  %102 = fadd double %91, %101
  %103 = getelementptr inbounds double, double* %8, i64 %92
  %104 = load double, double* %103, align 8
  %105 = getelementptr inbounds double, double* %22, i64 %98
  %106 = load double, double* %105, align 8
  %107 = fmul double %104, %106
  %108 = fsub double %102, %107
  %109 = add nuw nsw i64 %73, 2
  %110 = add i64 %75, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %47, label %72

112:                                              ; preds = %115, %68
  %113 = phi double [ %69, %68 ], [ %127, %115 ]
  %114 = load i32, i32* %27, align 8
  br i1 %17, label %146, label %130

115:                                              ; preds = %70, %115
  %116 = phi i64 [ %29, %70 ], [ %128, %115 ]
  %117 = phi double [ %69, %70 ], [ %127, %115 ]
  %118 = getelementptr inbounds double, double* %12, i64 %116
  %119 = load double, double* %118, align 8
  %120 = trunc i64 %116 to i32
  %121 = sub i32 %71, %120
  %122 = and i32 %121, 31
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds double, double* %20, i64 %123
  %125 = load double, double* %124, align 8
  %126 = fmul double %119, %125
  %127 = fadd double %117, %126
  %128 = add nsw i64 %116, 1
  %129 = icmp slt i64 %128, %30
  br i1 %129, label %115, label %112

130:                                              ; preds = %146, %112
  %131 = phi double [ %113, %112 ], [ %158, %146 ]
  %132 = sext i32 %114 to i64
  %133 = load double*, double** %19, align 8
  %134 = getelementptr inbounds double, double* %133, i64 %132
  store double %43, double* %134, align 8
  %135 = load i32, i32* %27, align 8
  %136 = sext i32 %135 to i64
  %137 = load double*, double** %21, align 8
  %138 = getelementptr inbounds double, double* %137, i64 %136
  store double %131, double* %138, align 8
  %139 = load i32, i32* %27, align 8
  %140 = add nsw i32 %139, 1
  %141 = and i32 %140, 31
  store i32 %141, i32* %27, align 8
  %142 = fptrunc double %131 to float
  %143 = getelementptr inbounds float, float* %2, i64 %39
  store float %142, float* %143, align 4
  %144 = add nuw nsw i64 %39, 1
  %145 = icmp eq i64 %144, %23
  br i1 %145, label %37, label %38

146:                                              ; preds = %112, %146
  %147 = phi i64 [ %159, %146 ], [ %29, %112 ]
  %148 = phi double [ %158, %146 ], [ %113, %112 ]
  %149 = getelementptr inbounds double, double* %8, i64 %147
  %150 = load double, double* %149, align 8
  %151 = trunc i64 %147 to i32
  %152 = sub i32 %114, %151
  %153 = and i32 %152, 31
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds double, double* %22, i64 %154
  %156 = load double, double* %155, align 8
  %157 = fmul double %150, %156
  %158 = fsub double %148, %157
  %159 = add nsw i64 %147, 1
  %160 = icmp slt i64 %159, %31
  br i1 %160, label %146, label %130
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9IIRFilter20GetFrequencyResponseEiPKfPfS3_(%"class.blink::IIRFilter"* nocapture readonly, i32, float* nocapture readonly, float* nocapture, float* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::complex", align 8
  %7 = alloca %"class.std::__1::complex", align 8
  %8 = alloca %"class.std::__1::complex", align 8
  %9 = alloca %"class.std::__1::complex", align 8
  %10 = alloca %"class.std::__1::complex", align 8
  %11 = alloca %"class.std::__1::complex", align 8
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %37

13:                                               ; preds = %5
  %14 = bitcast %"class.std::__1::complex"* %10 to i8*
  %15 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %10, i64 0, i32 1
  %17 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 4
  %18 = bitcast %"class.std::__1::complex"* %6 to i8*
  %19 = bitcast %"class.std::__1::complex"* %7 to i8*
  %20 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %7, i64 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %7, i64 0, i32 1
  %22 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %6, i64 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %6, i64 0, i32 1
  %24 = bitcast %"class.std::__1::complex"* %11 to i8*
  %25 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %11, i64 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %11, i64 0, i32 1
  %27 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 3
  %28 = bitcast %"class.std::__1::complex"* %8 to i8*
  %29 = bitcast %"class.std::__1::complex"* %9 to i8*
  %30 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %9, i64 0, i32 0
  %31 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %9, i64 0, i32 1
  %32 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %8, i64 0, i32 0
  %33 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %8, i64 0, i32 1
  %34 = zext i32 %1 to i64
  %35 = bitcast %"class.std::__1::complex"* %10 to i8*
  %36 = bitcast %"class.std::__1::complex"* %11 to i8*
  br label %38

37:                                               ; preds = %110, %5
  ret void

38:                                               ; preds = %110, %13
  %39 = phi i64 [ 0, %13 ], [ %111, %110 ]
  %40 = getelementptr inbounds float, float* %2, i64 %39
  %41 = load float, float* %40, align 4
  %42 = fcmp olt float %41, 0.000000e+00
  %43 = fcmp ogt float %41, 1.000000e+00
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %50

45:                                               ; preds = %38
  %46 = call float @nanf(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #9
  %47 = getelementptr inbounds float, float* %3, i64 %39
  store float %46, float* %47, align 4
  %48 = call float @nanf(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #9
  %49 = getelementptr inbounds float, float* %4, i64 %39
  store float %48, float* %49, align 4
  br label %110

50:                                               ; preds = %38
  %51 = fpext float %41 to double
  %52 = fmul double %51, 0xC00921FB54442D18
  %53 = call double @_ZN6fdlibm3cosEd(double %52) #8
  %54 = call double @_ZN6fdlibm3sinEd(double %52) #8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -1, i64 16, i1 false)
  %55 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %17, align 8
  %56 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %55, i64 0, i32 1
  %57 = load double*, double** %56, align 8
  %58 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %55, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = add i32 %59, -1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19)
  store double %53, double* %20, align 8
  store double %54, double* %21, align 8
  %61 = icmp sgt i32 %60, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 16, i1 false) #8
  br i1 %61, label %62, label %75

62:                                               ; preds = %50
  %63 = sext i32 %60 to i64
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ %63, %62 ], [ %73, %64 ]
  %66 = call { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %6, %"class.std::__1::complex"* nonnull dereferenceable(16) %7) #8
  %67 = extractvalue { double, double } %66, 0
  %68 = extractvalue { double, double } %66, 1
  %69 = getelementptr inbounds double, double* %57, i64 %65
  %70 = load double, double* %69, align 8
  %71 = fadd double %67, %70
  %72 = fadd double %68, 0.000000e+00
  store double %71, double* %22, align 8
  store double %72, double* %23, align 8
  %73 = add nsw i64 %65, -1
  %74 = icmp sgt i64 %65, 0
  br i1 %74, label %64, label %75

75:                                               ; preds = %64, %50
  %76 = phi double [ 0.000000e+00, %50 ], [ %72, %64 ]
  %77 = phi double [ 0.000000e+00, %50 ], [ %71, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19)
  store double %77, double* %15, align 8
  store double %76, double* %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -1, i64 16, i1 false)
  %78 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %27, align 8
  %79 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %78, i64 0, i32 1
  %80 = load double*, double** %79, align 8
  %81 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %78, i64 0, i32 2
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, -1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29)
  store double %53, double* %30, align 8
  store double %54, double* %31, align 8
  %84 = icmp sgt i32 %83, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 16, i1 false) #8
  br i1 %84, label %85, label %98

85:                                               ; preds = %75
  %86 = sext i32 %83 to i64
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ %86, %85 ], [ %96, %87 ]
  %89 = call { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %8, %"class.std::__1::complex"* nonnull dereferenceable(16) %9) #8
  %90 = extractvalue { double, double } %89, 0
  %91 = extractvalue { double, double } %89, 1
  %92 = getelementptr inbounds double, double* %80, i64 %88
  %93 = load double, double* %92, align 8
  %94 = fadd double %90, %93
  %95 = fadd double %91, 0.000000e+00
  store double %94, double* %32, align 8
  store double %95, double* %33, align 8
  %96 = add nsw i64 %88, -1
  %97 = icmp sgt i64 %88, 0
  br i1 %97, label %87, label %98

98:                                               ; preds = %87, %75
  %99 = phi double [ 0.000000e+00, %75 ], [ %95, %87 ]
  %100 = phi double [ 0.000000e+00, %75 ], [ %94, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29)
  store double %100, double* %25, align 8
  store double %99, double* %26, align 8
  %101 = call { double, double } @_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* nonnull dereferenceable(16) %10, %"class.std::__1::complex"* nonnull dereferenceable(16) %11)
  %102 = extractvalue { double, double } %101, 0
  %103 = extractvalue { double, double } %101, 1
  %104 = call double @hypot(double %102, double %103) #8
  %105 = fptrunc double %104 to float
  %106 = getelementptr inbounds float, float* %3, i64 %39
  store float %105, float* %106, align 4
  %107 = call double @_ZN6fdlibm5atan2Edd(double %103, double %102) #8
  %108 = fptrunc double %107 to float
  %109 = getelementptr inbounds float, float* %4, i64 %39
  store float %108, float* %109, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %110

110:                                              ; preds = %45, %98
  %111 = add nuw nsw i64 %39, 1
  %112 = icmp eq i64 %111, %34
  br i1 %112, label %37, label %38
}

; Function Attrs: nounwind readonly
declare float @nanf(i8*) local_unnamed_addr #2

declare double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #3

declare double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNSt3__1dvIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* dereferenceable(16), %"class.std::__1::complex"* dereferenceable(16)) local_unnamed_addr #0 comdat {
  %3 = bitcast %"class.std::__1::complex"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %1, i64 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = tail call double @llvm.fabs.f64(double %6)
  %10 = tail call double @llvm.fabs.f64(double %8)
  %11 = tail call double @llvm.maxnum.f64(double %9, double %10)
  %12 = tail call double @logb(double %11) #8
  %13 = tail call double @llvm.fabs.f64(double %12) #10
  %14 = fcmp ueq double %13, 0x7FF0000000000000
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = fptosi double %12 to i32
  %17 = sub i32 0, %16
  %18 = tail call double @scalbn(double %6, i32 %17) #8
  %19 = tail call double @scalbn(double %8, i32 %17) #8
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi i32 [ %17, %15 ], [ 0, %2 ]
  %22 = phi double [ %18, %15 ], [ %6, %2 ]
  %23 = phi double [ %19, %15 ], [ %8, %2 ]
  %24 = extractelement <2 x double> %4, i32 0
  %25 = insertelement <2 x double> undef, double %24, i32 0
  %26 = insertelement <2 x double> %25, double %22, i32 1
  %27 = insertelement <2 x double> undef, double %22, i32 0
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> zeroinitializer
  %29 = fmul <2 x double> %26, %28
  %30 = extractelement <2 x double> %4, i32 1
  %31 = shufflevector <2 x double> %4, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %32 = insertelement <2 x double> %31, double %23, i32 1
  %33 = insertelement <2 x double> undef, double %23, i32 0
  %34 = shufflevector <2 x double> %33, <2 x double> undef, <2 x i32> zeroinitializer
  %35 = fmul <2 x double> %32, %34
  %36 = fadd <2 x double> %29, %35
  %37 = extractelement <2 x double> %36, i32 0
  %38 = extractelement <2 x double> %36, i32 1
  %39 = fdiv double %37, %38
  %40 = tail call double @scalbn(double %39, i32 %21) #8
  %41 = fmul double %30, %22
  %42 = fmul double %24, %23
  %43 = fsub double %41, %42
  %44 = fdiv double %43, %38
  %45 = tail call double @scalbn(double %44, i32 %21) #8
  %46 = fcmp uno double %40, 0.000000e+00
  %47 = fcmp uno double %45, 0.000000e+00
  %48 = and i1 %46, %47
  %49 = insertelement <2 x double> undef, double %40, i32 0
  %50 = insertelement <2 x double> %49, double %45, i32 1
  br i1 %48, label %51, label %112

51:                                               ; preds = %20
  %52 = fcmp oeq double %38, 0.000000e+00
  br i1 %52, label %53, label %62

53:                                               ; preds = %51
  %54 = fcmp uno double %24, 0.000000e+00
  %55 = fcmp uno double %30, 0.000000e+00
  %56 = and i1 %54, %55
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = tail call double @llvm.copysign.f64(double 0x7FF0000000000000, double %22)
  %59 = insertelement <2 x double> undef, double %58, i32 0
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
  %61 = fmul <2 x double> %4, %60
  br label %112

62:                                               ; preds = %53, %51
  %63 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %4)
  %64 = fcmp oeq <2 x double> %63, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %65 = extractelement <2 x i1> %64, i32 0
  %66 = extractelement <2 x i1> %64, i32 1
  %67 = or i1 %65, %66
  %68 = tail call double @llvm.fabs.f64(double %22) #10
  %69 = fcmp one double %68, 0x7FF0000000000000
  %70 = and i1 %67, %69
  %71 = tail call double @llvm.fabs.f64(double %23) #10
  %72 = fcmp one double %71, 0x7FF0000000000000
  %73 = and i1 %70, %72
  br i1 %73, label %74, label %84

74:                                               ; preds = %62
  %75 = select <2 x i1> %64, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %76 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %75, <2 x double> %4)
  %77 = fmul <2 x double> %76, %28
  %78 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %79 = fmul <2 x double> %78, %34
  %80 = fadd <2 x double> %77, %79
  %81 = fsub <2 x double> %77, %79
  %82 = shufflevector <2 x double> %80, <2 x double> %81, <2 x i32> <i32 0, i32 3>
  %83 = fmul <2 x double> %82, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  br label %112

84:                                               ; preds = %62
  %85 = fcmp oeq double %13, 0x7FF0000000000000
  %86 = fcmp ogt double %12, 0.000000e+00
  %87 = and i1 %86, %85
  %88 = extractelement <2 x double> %63, i32 0
  %89 = fcmp one double %88, 0x7FF0000000000000
  %90 = and i1 %89, %87
  %91 = extractelement <2 x double> %63, i32 1
  %92 = fcmp one double %91, 0x7FF0000000000000
  %93 = and i1 %92, %90
  br i1 %93, label %94, label %112

94:                                               ; preds = %84
  %95 = fcmp oeq double %68, 0x7FF0000000000000
  %96 = select i1 %95, double 1.000000e+00, double 0.000000e+00
  %97 = tail call double @llvm.copysign.f64(double %96, double %22)
  %98 = fcmp oeq double %71, 0x7FF0000000000000
  %99 = select i1 %98, double 1.000000e+00, double 0.000000e+00
  %100 = tail call double @llvm.copysign.f64(double %99, double %23)
  %101 = insertelement <2 x double> undef, double %97, i32 0
  %102 = shufflevector <2 x double> %101, <2 x double> undef, <2 x i32> zeroinitializer
  %103 = fmul <2 x double> %4, %102
  %104 = shufflevector <2 x double> %31, <2 x double> %4, <2 x i32> <i32 0, i32 2>
  %105 = insertelement <2 x double> undef, double %100, i32 0
  %106 = shufflevector <2 x double> %105, <2 x double> undef, <2 x i32> zeroinitializer
  %107 = fmul <2 x double> %104, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fsub <2 x double> %103, %107
  %110 = shufflevector <2 x double> %108, <2 x double> %109, <2 x i32> <i32 0, i32 3>
  %111 = fmul <2 x double> %110, zeroinitializer
  br label %112

112:                                              ; preds = %57, %84, %94, %74, %20
  %113 = phi <2 x double> [ %83, %74 ], [ %111, %94 ], [ %50, %84 ], [ %61, %57 ], [ %50, %20 ]
  %114 = extractelement <2 x double> %113, i32 0
  %115 = insertvalue { double, double } undef, double %114, 0
  %116 = extractelement <2 x double> %113, i32 1
  %117 = insertvalue { double, double } %115, double %116, 1
  ret { double, double } %117
}

declare double @_ZN6fdlibm5atan2Edd(double, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink9IIRFilter8TailTimeEdbj(%"class.blink::IIRFilter"* nocapture, double, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::AudioArray.0", align 8
  %6 = alloca %"class.blink::AudioArray.0", align 8
  %7 = alloca %"class.blink::AudioArray.0", align 8
  br i1 %2, label %8, label %85

8:                                                ; preds = %4
  %9 = fmul double %1, 1.000000e+01
  %10 = uitofp i32 %3 to double
  %11 = fdiv double %9, %10
  %12 = tail call double @llvm.ceil.f64(double %11)
  %13 = fptosi double %12 to i32
  %14 = bitcast %"class.blink::AudioArray.0"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.blink::AudioArray.0", %"class.blink::AudioArray.0"* %5, i64 0, i32 1
  %16 = zext i32 %3 to i64
  %17 = bitcast %"class.blink::AudioArray.0"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 20, i1 false) #8
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray.0"* nonnull %5, i64 %16) #8
  %18 = bitcast %"class.blink::AudioArray.0"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.blink::AudioArray.0", %"class.blink::AudioArray.0"* %6, i64 0, i32 1
  %20 = bitcast %"class.blink::AudioArray.0"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 20, i1 false) #8
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray.0"* nonnull %6, i64 %16) #8
  %21 = bitcast %"class.blink::AudioArray.0"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #8
  %22 = getelementptr inbounds %"class.blink::AudioArray.0", %"class.blink::AudioArray.0"* %7, i64 0, i32 1
  %23 = sext i32 %13 to i64
  %24 = bitcast %"class.blink::AudioArray.0"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 20, i1 false) #8
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray.0"* nonnull %7, i64 %23) #8
  %25 = load float*, float** %15, align 8
  store float 1.000000e+00, float* %25, align 4
  %26 = load float*, float** %15, align 8
  %27 = load float*, float** %19, align 8
  call void @_ZN5blink9IIRFilter7ProcessEPKfPfj(%"class.blink::IIRFilter"* %0, float* %26, float* %27, i32 %3)
  %28 = load float*, float** %19, align 8
  %29 = load float*, float** %22, align 8
  call void @_ZN5blink11vector_math7VmaxmgvEPKfiPfj(float* %28, i32 1, float* %29, i32 %3) #8
  %30 = load float*, float** %15, align 8
  store float 0.000000e+00, float* %30, align 4
  %31 = icmp sgt i32 %13, 1
  br i1 %31, label %32, label %34

32:                                               ; preds = %8
  %33 = zext i32 %13 to i64
  br label %54

34:                                               ; preds = %54, %8
  %35 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 0, i32 1
  %36 = bitcast double** %35 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 %41, i1 false) #8
  %42 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1, i32 1
  %43 = bitcast double** %42 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 1, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = zext i32 %46 to i64
  %48 = shl nuw nsw i64 %47, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 %48, i1 false) #8
  %49 = getelementptr inbounds %"class.blink::IIRFilter", %"class.blink::IIRFilter"* %0, i64 0, i32 2
  store i32 0, i32* %49, align 8
  %50 = add nsw i32 %13, -1
  %51 = icmp sgt i32 %13, 0
  br i1 %51, label %52, label %73

52:                                               ; preds = %34
  %53 = load float*, float** %22, align 8
  br label %63

54:                                               ; preds = %54, %32
  %55 = phi i64 [ 1, %32 ], [ %61, %54 ]
  %56 = load float*, float** %15, align 8
  %57 = load float*, float** %19, align 8
  call void @_ZN5blink9IIRFilter7ProcessEPKfPfj(%"class.blink::IIRFilter"* %0, float* %56, float* %57, i32 %3)
  %58 = load float*, float** %19, align 8
  %59 = load float*, float** %22, align 8
  %60 = getelementptr inbounds float, float* %59, i64 %55
  call void @_ZN5blink11vector_math7VmaxmgvEPKfiPfj(float* %58, i32 1, float* %60, i32 %3) #8
  %61 = add nuw nsw i64 %55, 1
  %62 = icmp eq i64 %61, %33
  br i1 %62, label %34, label %54

63:                                               ; preds = %52, %69
  %64 = phi i64 [ %23, %52 ], [ %65, %69 ]
  %65 = add i64 %64, -1
  %66 = getelementptr inbounds float, float* %53, i64 %65
  %67 = load float, float* %66, align 4
  %68 = fcmp ogt float %67, 0x3F00000000000000
  br i1 %68, label %71, label %69

69:                                               ; preds = %63
  %70 = icmp sgt i64 %65, 0
  br i1 %70, label %63, label %73

71:                                               ; preds = %63
  %72 = trunc i64 %65 to i32
  br label %73

73:                                               ; preds = %69, %71, %34
  %74 = phi i32 [ %50, %34 ], [ %72, %71 ], [ %50, %69 ]
  %75 = add nsw i32 %74, 1
  %76 = mul i32 %75, %3
  %77 = uitofp i32 %76 to double
  %78 = fdiv double %77, %1
  %79 = bitcast %"class.blink::AudioArray.0"* %7 to i8**
  %80 = load i8*, i8** %79, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %80) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #8
  %81 = bitcast %"class.blink::AudioArray.0"* %6 to i8**
  %82 = load i8*, i8** %81, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %82) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #8
  %83 = bitcast %"class.blink::AudioArray.0"* %5 to i8**
  %84 = load i8*, i8** %83, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %84) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  br label %85

85:                                               ; preds = %4, %73
  %86 = phi double [ %78, %73 ], [ 1.000000e+01, %4 ]
  ret double %86
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #4

declare void @_ZN5blink11vector_math7VmaxmgvEPKfiPfj(float*, i32, float*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_(%"class.std::__1::complex"* dereferenceable(16), %"class.std::__1::complex"* dereferenceable(16)) local_unnamed_addr #0 comdat {
  %3 = bitcast %"class.std::__1::complex"* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast %"class.std::__1::complex"* %1 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = shufflevector <2 x double> %4, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %8 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %9 = fmul <2 x double> %7, %8
  %10 = shufflevector <2 x double> %6, <2 x double> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x double> %4, %10
  %12 = fsub <2 x double> %11, %9
  %13 = fadd <2 x double> %11, %9
  %14 = shufflevector <2 x double> %12, <2 x double> %13, <2 x i32> <i32 0, i32 3>
  %15 = extractelement <2 x double> %12, i32 0
  %16 = fcmp uno double %15, 0.000000e+00
  %17 = extractelement <2 x double> %13, i32 1
  %18 = fcmp uno double %17, 0.000000e+00
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %77

20:                                               ; preds = %2
  %21 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %4)
  %22 = fcmp oeq <2 x double> %21, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %23 = extractelement <2 x i1> %22, i32 0
  %24 = extractelement <2 x i1> %22, i32 1
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = select <2 x i1> %22, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %28 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %27, <2 x double> %4)
  %29 = fcmp uno <2 x double> %6, zeroinitializer
  %30 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %6)
  %31 = select <2 x i1> %29, <2 x double> %30, <2 x double> %6
  br label %32

32:                                               ; preds = %20, %26
  %33 = phi i8 [ 1, %26 ], [ 0, %20 ]
  %34 = phi <2 x double> [ %28, %26 ], [ %4, %20 ]
  %35 = phi <2 x double> [ %31, %26 ], [ %6, %20 ]
  %36 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %35)
  %37 = fcmp oeq <2 x double> %36, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %38 = extractelement <2 x i1> %37, i32 0
  %39 = extractelement <2 x i1> %37, i32 1
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %47

41:                                               ; preds = %32
  %42 = select <2 x i1> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %43 = call <2 x double> @llvm.copysign.v2f64(<2 x double> %42, <2 x double> %35)
  %44 = fcmp uno <2 x double> %34, zeroinitializer
  %45 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %34)
  %46 = select <2 x i1> %44, <2 x double> %45, <2 x double> %34
  br label %65

47:                                               ; preds = %32
  %48 = icmp eq i8 %33, 0
  br i1 %48, label %49, label %65

49:                                               ; preds = %47
  %50 = shufflevector <2 x double> %11, <2 x double> %9, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %51 = call <4 x double> @llvm.fabs.v4f64(<4 x double> %50)
  %52 = fcmp oeq <4 x double> %51, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = shufflevector <4 x i1> %52, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %54 = or <4 x i1> %52, %53
  %55 = shufflevector <4 x i1> %54, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %56 = or <4 x i1> %54, %55
  %57 = extractelement <4 x i1> %56, i32 0
  br i1 %57, label %58, label %77

58:                                               ; preds = %49
  %59 = fcmp uno <2 x double> %34, zeroinitializer
  %60 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %34)
  %61 = select <2 x i1> %59, <2 x double> %60, <2 x double> %34
  %62 = fcmp uno <2 x double> %35, zeroinitializer
  %63 = call <2 x double> @llvm.copysign.v2f64(<2 x double> zeroinitializer, <2 x double> %35)
  %64 = select <2 x i1> %62, <2 x double> %63, <2 x double> %35
  br label %65

65:                                               ; preds = %47, %41, %58
  %66 = phi <2 x double> [ %46, %41 ], [ %61, %58 ], [ %34, %47 ]
  %67 = phi <2 x double> [ %43, %41 ], [ %64, %58 ], [ %35, %47 ]
  %68 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %69 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %70 = fmul <2 x double> %68, %69
  %71 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x double> %71, %66
  %73 = fsub <2 x double> %72, %70
  %74 = fadd <2 x double> %72, %70
  %75 = shufflevector <2 x double> %73, <2 x double> %74, <2 x i32> <i32 0, i32 3>
  %76 = fmul <2 x double> %75, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  br label %77

77:                                               ; preds = %49, %65, %2
  %78 = phi <2 x double> [ %14, %2 ], [ %76, %65 ], [ %14, %49 ]
  %79 = extractelement <2 x double> %78, i32 0
  %80 = insertvalue { double, double } undef, double %79, 0
  %81 = extractelement <2 x double> %78, i32 1
  %82 = insertvalue { double, double } %80, double %81, 1
  ret { double, double } %82
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.copysign.f64(double, double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @logb(double) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.maxnum.f64(double, double) #4

; Function Attrs: nounwind
declare double @scalbn(double, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare double @hypot(double, double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray.0"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #8
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i8* %13, i8* %14) #8
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #8
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray.0", %"class.blink::AudioArray.0"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #8
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #8
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #8
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #8
  %37 = bitcast %"class.blink::AudioArray.0"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)) #8
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  %44 = bitcast %"class.blink::AudioArray.0"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray.0", %"class.blink::AudioArray.0"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray.0", %"class.blink::AudioArray.0"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #4

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.copysign.v2f64(<2 x double>, <2 x double>) #4

; Function Attrs: nounwind readnone speculatable
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
