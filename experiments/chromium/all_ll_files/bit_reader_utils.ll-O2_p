; ModuleID = '../../third_party/libwebp/src/utils/bit_reader_utils.c'
source_filename = "../../third_party/libwebp/src/utils/bit_reader_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8BitReader = type { i64, i32, i32, i8*, i8*, i8*, i32 }
%struct.VP8LBitReader = type { i64, i8*, i64, i64, i32, i32 }

@kVP8Log2Range = hidden local_unnamed_addr constant [128 x i8] c"\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00", align 16
@kVP8NewRange = hidden local_unnamed_addr constant [128 x i8] c"\7F\7F\BF\7F\9F\BF\DF\7F\8F\9F\AF\BF\CF\DF\EF\7F\87\8F\97\9F\A7\AF\B7\BF\C7\CF\D7\DF\E7\EF\F7\7F\83\87\8B\8F\93\97\9B\9F\A3\A7\AB\AF\B3\B7\BB\BF\C3\C7\CB\CF\D3\D7\DB\DF\E3\E7\EB\EF\F3\F7\FB\7F\81\83\85\87\89\8B\8D\8F\91\93\95\97\99\9B\9D\9F\A1\A3\A5\A7\A9\AB\AD\AF\B1\B3\B5\B7\B9\BB\BD\BF\C1\C3\C5\C7\C9\CB\CD\CF\D1\D3\D5\D7\D9\DB\DD\DF\E1\E3\E5\E7\E9\EB\ED\EF\F1\F3\F5\F7\F9\FB\FD\7F", align 16
@kBitMask = internal unnamed_addr constant [25 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8BitReaderSetBuffer(%struct.VP8BitReader* nocapture, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 4
  store i8* %5, i8** %6, align 8
  %7 = icmp ugt i64 %2, 7
  %8 = getelementptr inbounds i8, i8* %5, i64 -8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = select i1 %7, i8* %9, i8* %1
  %11 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  store i8* %10, i8** %11, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @VP8InitBitReader(%struct.VP8BitReader* nocapture, i8*, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 1
  store i32 254, i32* %4, align 8
  %5 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  store i32 -8, i32* %6, align 4
  %7 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 6
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 %2
  %10 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 4
  store i8* %9, i8** %10, align 8
  %11 = icmp ugt i64 %2, 7
  %12 = getelementptr inbounds i8, i8* %9, i64 -8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = select i1 %11, i8* %13, i8* %1
  %15 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  store i8* %14, i8** %15, align 8
  %16 = icmp ugt i8* %14, %1
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = bitcast i8* %1 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %1, i64 7
  store i8* %20, i8** %8, align 8
  %21 = tail call i64 @llvm.bswap.i64(i64 %19) #4
  %22 = lshr i64 %21, 8
  store i64 %22, i64* %5, align 8
  store i32 48, i32* %6, align 4
  br label %30

23:                                               ; preds = %3
  %24 = icmp sgt i64 %2, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %23
  store i32 0, i32* %6, align 4
  %26 = getelementptr inbounds i8, i8* %1, i64 1
  store i8* %26, i8** %8, align 8
  %27 = load i8, i8* %1, align 1
  %28 = zext i8 %27 to i64
  store i64 %28, i64* %5, align 8
  br label %30

29:                                               ; preds = %23
  store i64 0, i64* %5, align 8
  store i32 0, i32* %6, align 4
  store i32 1, i32* %7, align 8
  br label %30

30:                                               ; preds = %17, %25, %29
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8RemapBitReader(%struct.VP8BitReader* nocapture, i64) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds i8, i8* %4, i64 %1
  store i8* %7, i8** %3, align 8
  %8 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  store i8* %10, i8** %8, align 8
  %11 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  store i8* %13, i8** %11, align 8
  br label %14

14:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LoadFinalBytes(%struct.VP8BitReader* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ult i8* %3, %5
  br i1 %6, label %7, label %18

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 8
  store i32 %10, i32* %8, align 4
  %11 = getelementptr inbounds i8, i8* %3, i64 1
  store i8* %11, i8** %2, align 8
  %12 = load i8, i8* %3, align 1
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = shl i64 %15, 8
  %17 = or i64 %16, %13
  store i64 %17, i64* %14, align 8
  br label %31

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 6
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = shl i64 %24, 8
  store i64 %25, i64* %23, align 8
  %26 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, 8
  store i32 %28, i32* %26, align 4
  store i32 1, i32* %19, align 8
  br label %31

29:                                               ; preds = %18
  %30 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  store i32 0, i32* %30, align 4
  br label %31

31:                                               ; preds = %22, %29, %7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @VP8GetValue(%struct.VP8BitReader* nocapture, i32) local_unnamed_addr #1 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %82

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 2
  %7 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 3
  %8 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 5
  %9 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 4
  %10 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 6
  %11 = getelementptr inbounds %struct.VP8BitReader, %struct.VP8BitReader* %0, i64 0, i32 0
  %12 = load i32, i32* %5, align 8
  %13 = load i32, i32* %6, align 4
  br label %14

14:                                               ; preds = %4, %72
  %15 = phi i32 [ %13, %4 ], [ %77, %72 ]
  %16 = phi i32 [ %12, %4 ], [ %78, %72 ]
  %17 = phi i32 [ %1, %4 ], [ %19, %72 ]
  %18 = phi i32 [ 0, %4 ], [ %80, %72 ]
  %19 = add nsw i32 %17, -1
  %20 = icmp slt i32 %15, 0
  br i1 %20, label %21, label %54

21:                                               ; preds = %14
  %22 = load i8*, i8** %7, align 8
  %23 = load i8*, i8** %8, align 8
  %24 = icmp ult i8* %22, %23
  br i1 %24, label %25, label %35

25:                                               ; preds = %21
  %26 = bitcast i8* %22 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = getelementptr inbounds i8, i8* %22, i64 7
  store i8* %28, i8** %7, align 8
  %29 = tail call i64 @llvm.bswap.i64(i64 %27) #4
  %30 = lshr i64 %29, 8
  %31 = load i64, i64* %11, align 8
  %32 = shl i64 %31, 56
  %33 = or i64 %32, %30
  store i64 %33, i64* %11, align 8
  %34 = add nsw i32 %15, 56
  store i32 %34, i32* %6, align 4
  br label %54

35:                                               ; preds = %21
  %36 = load i8*, i8** %9, align 8
  %37 = icmp ult i8* %22, %36
  br i1 %37, label %38, label %46

38:                                               ; preds = %35
  %39 = add nsw i32 %15, 8
  store i32 %39, i32* %6, align 4
  %40 = getelementptr inbounds i8, i8* %22, i64 1
  store i8* %40, i8** %7, align 8
  %41 = load i8, i8* %22, align 1
  %42 = zext i8 %41 to i64
  %43 = load i64, i64* %11, align 8
  %44 = shl i64 %43, 8
  %45 = or i64 %44, %42
  store i64 %45, i64* %11, align 8
  br label %54

46:                                               ; preds = %35
  %47 = load i32, i32* %10, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = load i64, i64* %11, align 8
  %51 = shl i64 %50, 8
  store i64 %51, i64* %11, align 8
  %52 = add nsw i32 %15, 8
  store i32 %52, i32* %6, align 4
  store i32 1, i32* %10, align 8
  br label %54

53:                                               ; preds = %46
  store i32 0, i32* %6, align 4
  br label %54

54:                                               ; preds = %53, %49, %38, %25, %14
  %55 = phi i32 [ 0, %53 ], [ %52, %49 ], [ %39, %38 ], [ %34, %25 ], [ %15, %14 ]
  %56 = lshr i32 %16, 1
  %57 = and i32 %56, 16777215
  %58 = load i64, i64* %11, align 8
  %59 = zext i32 %55 to i64
  %60 = lshr i64 %58, %59
  %61 = trunc i64 %60 to i32
  %62 = icmp ult i32 %57, %61
  %63 = zext i1 %62 to i32
  br i1 %62, label %64, label %70

64:                                               ; preds = %54
  %65 = sub i32 %16, %57
  %66 = add nuw nsw i32 %57, 1
  %67 = zext i32 %66 to i64
  %68 = shl i64 %67, %59
  %69 = sub i64 %58, %68
  store i64 %69, i64* %11, align 8
  br label %72

70:                                               ; preds = %54
  %71 = add nuw nsw i32 %57, 1
  br label %72

72:                                               ; preds = %64, %70
  %73 = phi i32 [ %65, %64 ], [ %71, %70 ]
  %74 = tail call i32 @llvm.ctlz.i32(i32 %73, i1 true) #4, !range !2
  %75 = xor i32 %74, 24
  %76 = shl i32 %73, %75
  %77 = sub nsw i32 %55, %75
  store i32 %77, i32* %6, align 4
  %78 = add i32 %76, -1
  store i32 %78, i32* %5, align 8
  %79 = shl i32 %63, %19
  %80 = or i32 %79, %18
  %81 = icmp sgt i32 %19, 0
  br i1 %81, label %14, label %82

82:                                               ; preds = %72, %2
  %83 = phi i32 [ 0, %2 ], [ %80, %72 ]
  ret i32 %83
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @VP8GetSignedValue(%struct.VP8BitReader* nocapture, i32) local_unnamed_addr #1 {
  %3 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %0, i32 %1)
  %4 = tail call i32 @VP8GetValue(%struct.VP8BitReader* %0, i32 1)
  %5 = icmp eq i32 %4, 0
  %6 = sub nsw i32 0, %3
  %7 = select i1 %5, i32 %3, i32 %6
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LInitBitReader(%struct.VP8LBitReader* nocapture, i8*, i64) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 2
  store i64 %2, i64* %4, align 8
  %5 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 0
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 4
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 5
  store i32 0, i32* %7, align 4
  %8 = icmp ult i64 %2, 8
  %9 = select i1 %8, i64 %2, i64 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %110, label %11

11:                                               ; preds = %3
  %12 = icmp ult i64 %9, 4
  br i1 %12, label %96, label %13

13:                                               ; preds = %11
  %14 = and i64 %9, 12
  %15 = add nsw i64 %14, -4
  %16 = lshr exact i64 %15, 2
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %15, 0
  br i1 %19, label %66, label %20

20:                                               ; preds = %13
  %21 = sub nuw nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %60, %22 ]
  %24 = phi <2 x i64> [ zeroinitializer, %20 ], [ %58, %22 ]
  %25 = phi <2 x i64> [ zeroinitializer, %20 ], [ %59, %22 ]
  %26 = phi <2 x i64> [ <i64 0, i64 1>, %20 ], [ %61, %22 ]
  %27 = phi i64 [ %21, %20 ], [ %62, %22 ]
  %28 = getelementptr inbounds i8, i8* %1, i64 %23
  %29 = bitcast i8* %28 to <2 x i8>*
  %30 = load <2 x i8>, <2 x i8>* %29, align 1
  %31 = getelementptr inbounds i8, i8* %28, i64 2
  %32 = bitcast i8* %31 to <2 x i8>*
  %33 = load <2 x i8>, <2 x i8>* %32, align 1
  %34 = zext <2 x i8> %30 to <2 x i64>
  %35 = zext <2 x i8> %33 to <2 x i64>
  %36 = shl <2 x i64> %26, <i64 3, i64 3>
  %37 = shl <2 x i64> %26, <i64 3, i64 3>
  %38 = add <2 x i64> %37, <i64 16, i64 16>
  %39 = shl <2 x i64> %34, %36
  %40 = shl <2 x i64> %35, %38
  %41 = or <2 x i64> %39, %24
  %42 = or <2 x i64> %40, %25
  %43 = or i64 %23, 4
  %44 = add <2 x i64> %26, <i64 4, i64 4>
  %45 = getelementptr inbounds i8, i8* %1, i64 %43
  %46 = bitcast i8* %45 to <2 x i8>*
  %47 = load <2 x i8>, <2 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 2
  %49 = bitcast i8* %48 to <2 x i8>*
  %50 = load <2 x i8>, <2 x i8>* %49, align 1
  %51 = zext <2 x i8> %47 to <2 x i64>
  %52 = zext <2 x i8> %50 to <2 x i64>
  %53 = shl <2 x i64> %44, <i64 3, i64 3>
  %54 = shl <2 x i64> %44, <i64 3, i64 3>
  %55 = add <2 x i64> %54, <i64 16, i64 16>
  %56 = shl <2 x i64> %51, %53
  %57 = shl <2 x i64> %52, %55
  %58 = or <2 x i64> %56, %41
  %59 = or <2 x i64> %57, %42
  %60 = add i64 %23, 8
  %61 = add <2 x i64> %26, <i64 8, i64 8>
  %62 = add i64 %27, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %22, !llvm.loop !3

64:                                               ; preds = %22
  %65 = shl <2 x i64> %61, <i64 3, i64 3>
  br label %66

66:                                               ; preds = %64, %13
  %67 = phi <2 x i64> [ undef, %13 ], [ %58, %64 ]
  %68 = phi <2 x i64> [ undef, %13 ], [ %59, %64 ]
  %69 = phi i64 [ 0, %13 ], [ %60, %64 ]
  %70 = phi <2 x i64> [ zeroinitializer, %13 ], [ %58, %64 ]
  %71 = phi <2 x i64> [ zeroinitializer, %13 ], [ %59, %64 ]
  %72 = phi <2 x i64> [ <i64 0, i64 8>, %13 ], [ %65, %64 ]
  %73 = icmp eq i64 %18, 0
  br i1 %73, label %88, label %74

74:                                               ; preds = %66
  %75 = getelementptr inbounds i8, i8* %1, i64 %69
  %76 = getelementptr inbounds i8, i8* %75, i64 2
  %77 = bitcast i8* %76 to <2 x i8>*
  %78 = load <2 x i8>, <2 x i8>* %77, align 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = add <2 x i64> %72, <i64 16, i64 16>
  %81 = shl <2 x i64> %79, %80
  %82 = or <2 x i64> %81, %71
  %83 = bitcast i8* %75 to <2 x i8>*
  %84 = load <2 x i8>, <2 x i8>* %83, align 1
  %85 = zext <2 x i8> %84 to <2 x i64>
  %86 = shl <2 x i64> %85, %72
  %87 = or <2 x i64> %86, %70
  br label %88

88:                                               ; preds = %66, %74
  %89 = phi <2 x i64> [ %67, %66 ], [ %87, %74 ]
  %90 = phi <2 x i64> [ %68, %66 ], [ %82, %74 ]
  %91 = or <2 x i64> %90, %89
  %92 = shufflevector <2 x i64> %91, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %93 = or <2 x i64> %91, %92
  %94 = extractelement <2 x i64> %93, i32 0
  %95 = icmp eq i64 %9, %14
  br i1 %95, label %110, label %96

96:                                               ; preds = %88, %11
  %97 = phi i64 [ 0, %11 ], [ %94, %88 ]
  %98 = phi i64 [ 0, %11 ], [ %14, %88 ]
  br label %99

99:                                               ; preds = %96, %99
  %100 = phi i64 [ %107, %99 ], [ %97, %96 ]
  %101 = phi i64 [ %108, %99 ], [ %98, %96 ]
  %102 = getelementptr inbounds i8, i8* %1, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = shl i64 %101, 3
  %106 = shl i64 %104, %105
  %107 = or i64 %106, %100
  %108 = add nuw i64 %101, 1
  %109 = icmp ult i64 %108, %9
  br i1 %109, label %99, label %110, !llvm.loop !5

110:                                              ; preds = %99, %88, %3
  %111 = phi i64 [ 0, %3 ], [ %94, %88 ], [ %107, %99 ]
  store i64 %111, i64* %5, align 8
  %112 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 3
  store i64 %9, i64* %112, align 8
  %113 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 1
  store i8* %1, i8** %113, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LBitReaderSetBuffer(%struct.VP8LBitReader* nocapture, i8*, i64) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 2
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, %2
  br i1 %8, label %20, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %9
  %14 = icmp eq i64 %7, %2
  br i1 %14, label %15, label %20

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = icmp sgt i32 %17, 64
  %19 = zext i1 %18 to i32
  br label %20

20:                                               ; preds = %15, %13, %9, %3
  %21 = phi i32 [ 1, %3 ], [ 1, %9 ], [ 0, %13 ], [ %19, %15 ]
  %22 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 5
  store i32 %21, i32* %22, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LDoFillBitWindow(%struct.VP8LBitReader* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %4, %6
  br i1 %7, label %8, label %24

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %10, 32
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = add nsw i32 %13, -32
  store i32 %14, i32* %12, align 8
  %15 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %3
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %20, 32
  %22 = or i64 %21, %11
  store i64 %22, i64* %9, align 8
  %23 = add i64 %3, 4
  store i64 %23, i64* %2, align 8
  br label %58

24:                                               ; preds = %1
  %25 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = icmp sgt i32 %26, 7
  br i1 %27, label %28, label %47

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 0
  %30 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 1
  br label %31

31:                                               ; preds = %35, %28
  %32 = phi i64 [ %3, %28 ], [ %44, %35 ]
  %33 = phi i32 [ %26, %28 ], [ %45, %35 ]
  %34 = icmp ult i64 %32, %6
  br i1 %34, label %35, label %47

35:                                               ; preds = %31
  %36 = load i64, i64* %29, align 8
  %37 = lshr i64 %36, 8
  store i64 %37, i64* %29, align 8
  %38 = load i8*, i8** %30, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 %32
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = shl nuw i64 %41, 56
  %43 = or i64 %42, %37
  store i64 %43, i64* %29, align 8
  %44 = add nuw i64 %32, 1
  store i64 %44, i64* %2, align 8
  %45 = add nsw i32 %33, -8
  store i32 %45, i32* %25, align 8
  %46 = icmp sgt i32 %45, 7
  br i1 %46, label %31, label %47

47:                                               ; preds = %35, %31, %24
  %48 = phi i64 [ %3, %24 ], [ %32, %31 ], [ %44, %35 ]
  %49 = phi i32 [ %26, %24 ], [ %33, %31 ], [ %45, %35 ]
  %50 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 5
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %47
  %54 = icmp ne i64 %48, %6
  %55 = icmp slt i32 %49, 65
  %56 = or i1 %55, %54
  br i1 %56, label %58, label %57

57:                                               ; preds = %53, %47
  store i32 1, i32* %50, align 4
  store i32 0, i32* %25, align 8
  br label %58

58:                                               ; preds = %57, %53, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @VP8LReadBits(%struct.VP8LBitReader* nocapture, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 25
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %50

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 63
  %14 = zext i32 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = trunc i64 %15 to i32
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds [25 x i32], [25 x i32]* @kBitMask, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, %16
  %21 = add nsw i32 %12, %1
  store i32 %21, i32* %11, align 8
  %22 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 3
  %23 = icmp sgt i32 %21, 7
  br i1 %23, label %24, label %52

24:                                               ; preds = %8
  %25 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 2
  %26 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 1
  %27 = load i64, i64* %22, align 8
  %28 = load i64, i64* %25, align 8
  br label %29

29:                                               ; preds = %34, %24
  %30 = phi i64 [ %10, %24 ], [ %41, %34 ]
  %31 = phi i64 [ %27, %24 ], [ %42, %34 ]
  %32 = phi i32 [ %21, %24 ], [ %43, %34 ]
  %33 = icmp ult i64 %31, %28
  br i1 %33, label %34, label %45

34:                                               ; preds = %29
  %35 = lshr i64 %30, 8
  store i64 %35, i64* %9, align 8
  %36 = load i8*, i8** %26, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %31
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = shl nuw i64 %39, 56
  %41 = or i64 %40, %35
  store i64 %41, i64* %9, align 8
  %42 = add nuw i64 %31, 1
  store i64 %42, i64* %22, align 8
  %43 = add nsw i32 %32, -8
  store i32 %43, i32* %11, align 8
  %44 = icmp sgt i32 %43, 7
  br i1 %44, label %29, label %52

45:                                               ; preds = %29
  %46 = icmp ne i64 %31, %28
  %47 = icmp slt i32 %32, 65
  %48 = or i1 %47, %46
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  store i32 1, i32* %3, align 4
  store i32 0, i32* %11, align 8
  br label %52

50:                                               ; preds = %2
  store i32 1, i32* %3, align 4
  %51 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %0, i64 0, i32 4
  store i32 0, i32* %51, align 8
  br label %52

52:                                               ; preds = %34, %8, %49, %45, %50
  %53 = phi i32 [ 0, %50 ], [ %20, %45 ], [ %20, %49 ], [ %20, %8 ], [ %20, %34 ]
  ret i32 %53
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
