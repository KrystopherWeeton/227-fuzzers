; ModuleID = '../../base/third_party/cityhash_v103/src/city_v103.cc'
source_filename = "../../base/third_party/cityhash_v103/src/city_v103.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13cityhash_v10310CityHash64EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ult i64 %1, 33
  br i1 %3, label %4, label %49

4:                                                ; preds = %2
  %5 = icmp ult i64 %1, 17
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call fastcc i64 @_ZN4base8internal13cityhash_v103L12HashLen0to16EPKcm(i8* %0, i64 %1)
  br label %327

8:                                                ; preds = %4
  %9 = bitcast i8* %0 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = mul i64 %10, -5435081209227447693
  %12 = getelementptr inbounds i8, i8* %0, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %0, i64 %1
  %16 = getelementptr inbounds i8, i8* %15, i64 -8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = mul i64 %18, -7286425919675154353
  %20 = getelementptr inbounds i8, i8* %15, i64 -16
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = mul i64 %22, -4348849565147123417
  %24 = sub i64 %11, %14
  %25 = lshr i64 %24, 43
  %26 = shl i64 %24, 21
  %27 = or i64 %26, %25
  %28 = lshr i64 %19, 30
  %29 = mul i64 %18, -4737503975807385600
  %30 = or i64 %28, %29
  %31 = add i64 %23, %27
  %32 = add i64 %31, %30
  %33 = xor i64 %14, -3942382747735136937
  %34 = lshr i64 %33, 20
  %35 = shl i64 %33, 44
  %36 = or i64 %35, %34
  %37 = add i64 %11, %1
  %38 = sub i64 %37, %19
  %39 = add i64 %38, %36
  %40 = xor i64 %32, %39
  %41 = mul i64 %40, -7070675565921424023
  %42 = lshr i64 %41, 47
  %43 = xor i64 %41, %39
  %44 = xor i64 %43, %42
  %45 = mul i64 %44, -7070675565921424023
  %46 = lshr i64 %45, 47
  %47 = xor i64 %46, %45
  %48 = mul i64 %47, -7070675565921424023
  br label %327

49:                                               ; preds = %2
  %50 = icmp ult i64 %1, 65
  br i1 %50, label %51, label %130

51:                                               ; preds = %49
  %52 = getelementptr inbounds i8, i8* %0, i64 24
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = bitcast i8* %0 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = getelementptr inbounds i8, i8* %0, i64 %1
  %58 = getelementptr inbounds i8, i8* %57, i64 -16
  %59 = bitcast i8* %58 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = add i64 %60, %1
  %62 = mul i64 %61, -4348849565147123417
  %63 = add i64 %62, %56
  %64 = add i64 %63, %54
  %65 = lshr i64 %64, 52
  %66 = shl i64 %64, 12
  %67 = or i64 %66, %65
  %68 = lshr i64 %63, 37
  %69 = shl i64 %63, 27
  %70 = or i64 %69, %68
  %71 = getelementptr inbounds i8, i8* %0, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = add i64 %63, %73
  %75 = lshr i64 %74, 7
  %76 = shl i64 %74, 57
  %77 = or i64 %76, %75
  %78 = getelementptr inbounds i8, i8* %0, i64 16
  %79 = bitcast i8* %78 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = add i64 %74, %80
  %82 = lshr i64 %81, 31
  %83 = shl i64 %81, 33
  %84 = or i64 %83, %82
  %85 = add i64 %77, %70
  %86 = add i64 %85, %67
  %87 = add i64 %86, %84
  %88 = getelementptr inbounds i8, i8* %57, i64 -32
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 1
  %91 = add i64 %90, %80
  %92 = getelementptr inbounds i8, i8* %57, i64 -8
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = add i64 %91, %94
  %96 = lshr i64 %95, 52
  %97 = shl i64 %95, 12
  %98 = or i64 %97, %96
  %99 = lshr i64 %91, 37
  %100 = shl i64 %91, 27
  %101 = or i64 %100, %99
  %102 = getelementptr inbounds i8, i8* %57, i64 -24
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = add i64 %104, %91
  %106 = lshr i64 %105, 7
  %107 = shl i64 %105, 57
  %108 = or i64 %107, %106
  %109 = add i64 %105, %60
  %110 = add i64 %109, %94
  %111 = lshr i64 %109, 31
  %112 = shl i64 %109, 33
  %113 = or i64 %112, %111
  %114 = add i64 %81, %54
  %115 = add i64 %114, %101
  %116 = add i64 %115, %98
  %117 = add i64 %116, %108
  %118 = add i64 %117, %113
  %119 = mul i64 %118, -7286425919675154353
  %120 = add i64 %110, %87
  %121 = mul i64 %120, -4348849565147123417
  %122 = add i64 %119, %121
  %123 = lshr i64 %122, 47
  %124 = xor i64 %123, %122
  %125 = mul i64 %124, -4348849565147123417
  %126 = add i64 %125, %87
  %127 = lshr i64 %126, 47
  %128 = xor i64 %127, %126
  %129 = mul i64 %128, -7286425919675154353
  br label %327

130:                                              ; preds = %49
  %131 = getelementptr inbounds i8, i8* %0, i64 %1
  %132 = getelementptr inbounds i8, i8* %131, i64 -40
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = getelementptr inbounds i8, i8* %131, i64 -16
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = getelementptr inbounds i8, i8* %131, i64 -56
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = add i64 %140, %137
  %142 = getelementptr inbounds i8, i8* %131, i64 -48
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = add i64 %144, %1
  %146 = getelementptr inbounds i8, i8* %131, i64 -24
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 1
  %149 = xor i64 %148, %145
  %150 = mul i64 %149, -7070675565921424023
  %151 = lshr i64 %150, 47
  %152 = xor i64 %150, %148
  %153 = xor i64 %152, %151
  %154 = mul i64 %153, -7070675565921424023
  %155 = lshr i64 %154, 47
  %156 = xor i64 %155, %154
  %157 = mul i64 %156, -7070675565921424023
  %158 = getelementptr inbounds i8, i8* %131, i64 -64
  %159 = bitcast i8* %158 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = add i64 %160, %1
  %162 = add i64 %134, %161
  %163 = add i64 %162, %157
  %164 = lshr i64 %163, 21
  %165 = shl i64 %163, 43
  %166 = or i64 %165, %164
  %167 = add i64 %161, %140
  %168 = add i64 %167, %144
  %169 = lshr i64 %168, 44
  %170 = shl i64 %168, 20
  %171 = or i64 %170, %169
  %172 = add i64 %168, %134
  %173 = add i64 %171, %161
  %174 = add i64 %173, %166
  %175 = getelementptr inbounds i8, i8* %131, i64 -32
  %176 = add i64 %141, -5435081209227447693
  %177 = bitcast i8* %175 to i64*
  %178 = load i64, i64* %177, align 1
  %179 = getelementptr inbounds i8, i8* %175, i64 24
  %180 = bitcast i8* %179 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = add i64 %176, %178
  %183 = add i64 %182, %134
  %184 = add i64 %183, %181
  %185 = lshr i64 %184, 21
  %186 = shl i64 %184, 43
  %187 = or i64 %186, %185
  %188 = add i64 %182, %148
  %189 = add i64 %188, %137
  %190 = lshr i64 %189, 44
  %191 = shl i64 %189, 20
  %192 = or i64 %191, %190
  %193 = add i64 %189, %181
  %194 = add i64 %192, %182
  %195 = add i64 %194, %187
  %196 = mul i64 %134, -5435081209227447693
  %197 = bitcast i8* %0 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = add i64 %198, %196
  %200 = add i64 %1, -1
  %201 = and i64 %200, -64
  br label %202

202:                                              ; preds = %290, %130
  %203 = phi i64 [ %198, %130 ], [ %292, %290 ]
  %204 = phi i64 [ %195, %130 ], [ %286, %290 ]
  %205 = phi i64 [ %193, %130 ], [ %284, %290 ]
  %206 = phi i64 [ %172, %130 ], [ %262, %290 ]
  %207 = phi i64 [ %174, %130 ], [ %264, %290 ]
  %208 = phi i64 [ %157, %130 ], [ %232, %290 ]
  %209 = phi i64 [ %199, %130 ], [ %242, %290 ]
  %210 = phi i8* [ %0, %130 ], [ %287, %290 ]
  %211 = phi i64 [ %201, %130 ], [ %288, %290 ]
  %212 = phi i64 [ %141, %130 ], [ %237, %290 ]
  %213 = getelementptr inbounds i8, i8* %210, i64 8
  %214 = bitcast i8* %213 to i64*
  %215 = load i64, i64* %214, align 1
  %216 = add i64 %209, %206
  %217 = add i64 %216, %212
  %218 = add i64 %217, %215
  %219 = lshr i64 %218, 37
  %220 = shl i64 %218, 27
  %221 = or i64 %220, %219
  %222 = mul i64 %221, -5435081209227447693
  %223 = add i64 %212, %207
  %224 = getelementptr inbounds i8, i8* %210, i64 48
  %225 = bitcast i8* %224 to i64*
  %226 = load i64, i64* %225, align 1
  %227 = add i64 %223, %226
  %228 = lshr i64 %227, 42
  %229 = shl i64 %227, 22
  %230 = or i64 %229, %228
  %231 = mul i64 %230, -5435081209227447693
  %232 = xor i64 %222, %204
  %233 = getelementptr inbounds i8, i8* %210, i64 40
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = add i64 %235, %206
  %237 = add i64 %236, %231
  %238 = add i64 %208, %205
  %239 = lshr i64 %238, 33
  %240 = shl i64 %238, 31
  %241 = or i64 %240, %239
  %242 = mul i64 %241, -5435081209227447693
  %243 = mul i64 %207, -5435081209227447693
  %244 = getelementptr inbounds i8, i8* %210, i64 16
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = getelementptr inbounds i8, i8* %210, i64 24
  %248 = bitcast i8* %247 to i64*
  %249 = load i64, i64* %248, align 1
  %250 = add i64 %203, %243
  %251 = add i64 %250, %205
  %252 = add i64 %251, %249
  %253 = add i64 %252, %232
  %254 = lshr i64 %253, 21
  %255 = shl i64 %253, 43
  %256 = or i64 %255, %254
  %257 = add i64 %250, %215
  %258 = add i64 %257, %246
  %259 = lshr i64 %258, 44
  %260 = shl i64 %258, 20
  %261 = or i64 %260, %259
  %262 = add i64 %258, %249
  %263 = add i64 %261, %250
  %264 = add i64 %263, %256
  %265 = getelementptr inbounds i8, i8* %210, i64 32
  %266 = add i64 %242, %204
  %267 = add i64 %237, %246
  %268 = bitcast i8* %265 to i64*
  %269 = load i64, i64* %268, align 1
  %270 = getelementptr inbounds i8, i8* %210, i64 56
  %271 = bitcast i8* %270 to i64*
  %272 = load i64, i64* %271, align 1
  %273 = add i64 %266, %269
  %274 = add i64 %267, %273
  %275 = add i64 %274, %272
  %276 = lshr i64 %275, 21
  %277 = shl i64 %275, 43
  %278 = or i64 %277, %276
  %279 = add i64 %273, %235
  %280 = add i64 %279, %226
  %281 = lshr i64 %280, 44
  %282 = shl i64 %280, 20
  %283 = or i64 %282, %281
  %284 = add i64 %280, %272
  %285 = add i64 %283, %273
  %286 = add i64 %285, %278
  %287 = getelementptr inbounds i8, i8* %210, i64 64
  %288 = add i64 %211, -64
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %293, label %290

290:                                              ; preds = %202
  %291 = bitcast i8* %287 to i64*
  %292 = load i64, i64* %291, align 1
  br label %202

293:                                              ; preds = %202
  %294 = xor i64 %284, %262
  %295 = mul i64 %294, -7070675565921424023
  %296 = lshr i64 %295, 47
  %297 = xor i64 %295, %284
  %298 = xor i64 %297, %296
  %299 = mul i64 %298, -7070675565921424023
  %300 = lshr i64 %299, 47
  %301 = xor i64 %300, %299
  %302 = mul i64 %301, -7070675565921424023
  %303 = lshr i64 %237, 47
  %304 = xor i64 %303, %237
  %305 = mul i64 %304, -5435081209227447693
  %306 = add i64 %305, %232
  %307 = add i64 %306, %302
  %308 = xor i64 %286, %264
  %309 = mul i64 %308, -7070675565921424023
  %310 = lshr i64 %309, 47
  %311 = xor i64 %309, %286
  %312 = xor i64 %311, %310
  %313 = mul i64 %312, -7070675565921424023
  %314 = lshr i64 %313, 47
  %315 = xor i64 %314, %313
  %316 = mul i64 %315, -7070675565921424023
  %317 = add i64 %316, %242
  %318 = xor i64 %317, %307
  %319 = mul i64 %318, -7070675565921424023
  %320 = lshr i64 %319, 47
  %321 = xor i64 %319, %317
  %322 = xor i64 %321, %320
  %323 = mul i64 %322, -7070675565921424023
  %324 = lshr i64 %323, 47
  %325 = xor i64 %324, %323
  %326 = mul i64 %325, -7070675565921424023
  br label %327

327:                                              ; preds = %293, %51, %8, %6
  %328 = phi i64 [ %7, %6 ], [ %48, %8 ], [ %129, %51 ], [ %326, %293 ]
  ret i64 %328
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i64 @_ZN4base8internal13cityhash_v103L12HashLen0to16EPKcm(i8* nocapture readonly, i64) unnamed_addr #1 {
  %3 = icmp ugt i64 %1, 8
  br i1 %3, label %4, label %28

4:                                                ; preds = %2
  %5 = bitcast i8* %0 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = getelementptr inbounds i8, i8* %7, i64 -8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = add i64 %10, %1
  %12 = and i64 %1, 4294967295
  %13 = lshr i64 %11, %12
  %14 = sub i64 64, %1
  %15 = and i64 %14, 4294967295
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = xor i64 %17, %6
  %19 = mul i64 %18, -7070675565921424023
  %20 = lshr i64 %19, 47
  %21 = xor i64 %19, %17
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, -7070675565921424023
  %24 = lshr i64 %23, 47
  %25 = xor i64 %24, %23
  %26 = mul i64 %25, -7070675565921424023
  %27 = xor i64 %26, %10
  br label %74

28:                                               ; preds = %2
  %29 = icmp ugt i64 %1, 3
  br i1 %29, label %30, label %50

30:                                               ; preds = %28
  %31 = bitcast i8* %0 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = add nuw nsw i64 %34, %1
  %36 = getelementptr inbounds i8, i8* %0, i64 %1
  %37 = getelementptr inbounds i8, i8* %36, i64 -4
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = zext i32 %39 to i64
  %41 = xor i64 %35, %40
  %42 = mul i64 %41, -7070675565921424023
  %43 = lshr i64 %42, 47
  %44 = xor i64 %42, %40
  %45 = xor i64 %44, %43
  %46 = mul i64 %45, -7070675565921424023
  %47 = lshr i64 %46, 47
  %48 = xor i64 %47, %46
  %49 = mul i64 %48, -7070675565921424023
  br label %74

50:                                               ; preds = %28
  %51 = icmp eq i64 %1, 0
  br i1 %51, label %74, label %52

52:                                               ; preds = %50
  %53 = load i8, i8* %0, align 1
  %54 = lshr i64 %1, 1
  %55 = getelementptr inbounds i8, i8* %0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = add nsw i64 %1, -1
  %58 = getelementptr inbounds i8, i8* %0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %53 to i64
  %61 = zext i8 %56 to i64
  %62 = shl nuw nsw i64 %61, 8
  %63 = or i64 %62, %60
  %64 = zext i8 %59 to i64
  %65 = shl nuw nsw i64 %64, 2
  %66 = add nuw nsw i64 %65, %1
  %67 = mul i64 %63, -7286425919675154353
  %68 = and i64 %66, 4294967295
  %69 = mul i64 %68, -3942382747735136937
  %70 = xor i64 %69, %67
  %71 = lshr i64 %70, 47
  %72 = xor i64 %71, %70
  %73 = mul i64 %72, -7286425919675154353
  br label %74

74:                                               ; preds = %50, %52, %30, %4
  %75 = phi i64 [ %27, %4 ], [ %49, %30 ], [ %73, %52 ], [ -7286425919675154353, %50 ]
  ret i64 %75
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13cityhash_v10318CityHash64WithSeedEPKcmm(i8* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %4 = tail call i64 @_ZN4base8internal13cityhash_v10310CityHash64EPKcm(i8* %0, i64 %1) #2
  %5 = add i64 %4, 7286425919675154353
  %6 = xor i64 %5, %2
  %7 = mul i64 %6, -7070675565921424023
  %8 = lshr i64 %7, 47
  %9 = xor i64 %7, %2
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -7070675565921424023
  %12 = lshr i64 %11, 47
  %13 = xor i64 %12, %11
  %14 = mul i64 %13, -7070675565921424023
  ret i64 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13cityhash_v10319CityHash64WithSeedsEPKcmmm(i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = tail call i64 @_ZN4base8internal13cityhash_v10310CityHash64EPKcm(i8* %0, i64 %1)
  %6 = sub i64 %5, %2
  %7 = xor i64 %6, %3
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %3
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  ret i64 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4base8internal13cityhash_v10319CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = icmp ult i64 %1, 128
  br i1 %5, label %6, label %111

6:                                                ; preds = %4
  %7 = add nsw i64 %1, -16
  %8 = icmp slt i64 %7, 1
  br i1 %8, label %9, label %26

9:                                                ; preds = %6
  %10 = mul i64 %2, -5435081209227447693
  %11 = lshr i64 %10, 47
  %12 = xor i64 %11, %10
  %13 = mul i64 %12, -5435081209227447693
  %14 = mul i64 %3, -5435081209227447693
  %15 = tail call fastcc i64 @_ZN4base8internal13cityhash_v103L12HashLen0to16EPKcm(i8* %0, i64 %1) #2
  %16 = add i64 %15, %14
  %17 = icmp ugt i64 %1, 7
  br i1 %17, label %18, label %21

18:                                               ; preds = %9
  %19 = bitcast i8* %0 to i64*
  %20 = load i64, i64* %19, align 1
  br label %21

21:                                               ; preds = %18, %9
  %22 = phi i64 [ %20, %18 ], [ %16, %9 ]
  %23 = add i64 %22, %13
  %24 = lshr i64 %23, 47
  %25 = xor i64 %24, %23
  br label %85

26:                                               ; preds = %6
  %27 = getelementptr inbounds i8, i8* %0, i64 %1
  %28 = getelementptr inbounds i8, i8* %27, i64 -8
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = add i64 %30, -5435081209227447693
  %32 = xor i64 %31, %2
  %33 = mul i64 %32, -7070675565921424023
  %34 = lshr i64 %33, 47
  %35 = xor i64 %33, %2
  %36 = xor i64 %35, %34
  %37 = mul i64 %36, -7070675565921424023
  %38 = lshr i64 %37, 47
  %39 = xor i64 %38, %37
  %40 = mul i64 %39, -7070675565921424023
  %41 = add i64 %3, %1
  %42 = getelementptr inbounds i8, i8* %27, i64 -16
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = add i64 %40, %44
  %46 = xor i64 %45, %41
  %47 = mul i64 %46, -7070675565921424023
  %48 = lshr i64 %47, 47
  %49 = xor i64 %47, %45
  %50 = xor i64 %49, %48
  %51 = mul i64 %50, -7070675565921424023
  %52 = lshr i64 %51, 47
  %53 = xor i64 %52, %51
  %54 = mul i64 %53, -7070675565921424023
  %55 = add i64 %54, %2
  br label %56

56:                                               ; preds = %56, %26
  %57 = phi i8* [ %0, %26 ], [ %82, %56 ]
  %58 = phi i64 [ %55, %26 ], [ %70, %56 ]
  %59 = phi i64 [ %3, %26 ], [ %71, %56 ]
  %60 = phi i64 [ %40, %26 ], [ %80, %56 ]
  %61 = phi i64 [ %54, %26 ], [ %81, %56 ]
  %62 = phi i64 [ %7, %26 ], [ %83, %56 ]
  %63 = bitcast i8* %57 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = mul i64 %64, -5435081209227447693
  %66 = lshr i64 %65, 47
  %67 = xor i64 %66, %65
  %68 = mul i64 %67, -5435081209227447693
  %69 = xor i64 %68, %58
  %70 = mul i64 %69, -5435081209227447693
  %71 = xor i64 %70, %59
  %72 = getelementptr inbounds i8, i8* %57, i64 8
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = mul i64 %74, -5435081209227447693
  %76 = lshr i64 %75, 47
  %77 = xor i64 %76, %75
  %78 = mul i64 %77, -5435081209227447693
  %79 = xor i64 %78, %60
  %80 = mul i64 %79, -5435081209227447693
  %81 = xor i64 %80, %61
  %82 = getelementptr inbounds i8, i8* %57, i64 16
  %83 = add nsw i64 %62, -16
  %84 = icmp sgt i64 %83, 0
  br i1 %84, label %56, label %85

85:                                               ; preds = %56, %21
  %86 = phi i64 [ %13, %21 ], [ %70, %56 ]
  %87 = phi i64 [ %3, %21 ], [ %71, %56 ]
  %88 = phi i64 [ %16, %21 ], [ %80, %56 ]
  %89 = phi i64 [ %25, %21 ], [ %81, %56 ]
  %90 = xor i64 %88, %86
  %91 = mul i64 %90, -7070675565921424023
  %92 = lshr i64 %91, 47
  %93 = xor i64 %91, %88
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, -7070675565921424023
  %96 = lshr i64 %95, 47
  %97 = xor i64 %96, %95
  %98 = mul i64 %97, -7070675565921424023
  %99 = xor i64 %89, %87
  %100 = mul i64 %99, -7070675565921424023
  %101 = lshr i64 %100, 47
  %102 = xor i64 %100, %87
  %103 = xor i64 %102, %101
  %104 = mul i64 %103, -7070675565921424023
  %105 = lshr i64 %104, 47
  %106 = xor i64 %105, %104
  %107 = mul i64 %106, -7070675565921424023
  %108 = xor i64 %107, %98
  %109 = mul i64 %108, -7070675565921424023
  %110 = xor i64 %109, %98
  br label %411

111:                                              ; preds = %4
  %112 = mul i64 %1, -5435081209227447693
  %113 = xor i64 %3, -5435081209227447693
  %114 = lshr i64 %113, 49
  %115 = shl i64 %113, 15
  %116 = or i64 %115, %114
  %117 = mul i64 %116, -5435081209227447693
  %118 = bitcast i8* %0 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = add i64 %119, %117
  %121 = lshr i64 %120, 42
  %122 = shl i64 %120, 22
  %123 = or i64 %122, %121
  %124 = mul i64 %123, -5435081209227447693
  %125 = getelementptr inbounds i8, i8* %0, i64 8
  %126 = bitcast i8* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = add i64 %124, %127
  %129 = add i64 %112, %3
  %130 = lshr i64 %129, 35
  %131 = shl i64 %129, 29
  %132 = or i64 %131, %130
  %133 = mul i64 %132, -5435081209227447693
  %134 = add i64 %133, %2
  %135 = getelementptr inbounds i8, i8* %0, i64 88
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = add i64 %137, %2
  %139 = lshr i64 %138, 53
  %140 = shl i64 %138, 11
  %141 = or i64 %140, %139
  %142 = mul i64 %141, -5435081209227447693
  br label %143

143:                                              ; preds = %306, %111
  %144 = phi i64 [ %119, %111 ], [ %311, %306 ]
  %145 = phi i64 [ %127, %111 ], [ %309, %306 ]
  %146 = phi i64 [ %112, %111 ], [ %246, %306 ]
  %147 = phi i64 [ %2, %111 ], [ %256, %306 ]
  %148 = phi i64 [ %142, %111 ], [ %302, %306 ]
  %149 = phi i64 [ %134, %111 ], [ %300, %306 ]
  %150 = phi i64 [ %128, %111 ], [ %280, %306 ]
  %151 = phi i64 [ %120, %111 ], [ %278, %306 ]
  %152 = phi i64 [ %1, %111 ], [ %304, %306 ]
  %153 = phi i8* [ %0, %111 ], [ %303, %306 ]
  %154 = phi i64 [ %3, %111 ], [ %251, %306 ]
  %155 = add i64 %151, %147
  %156 = add i64 %155, %154
  %157 = add i64 %156, %145
  %158 = lshr i64 %157, 37
  %159 = shl i64 %157, 27
  %160 = or i64 %159, %158
  %161 = mul i64 %160, -5435081209227447693
  %162 = add i64 %154, %150
  %163 = getelementptr inbounds i8, i8* %153, i64 48
  %164 = bitcast i8* %163 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = add i64 %162, %165
  %167 = lshr i64 %166, 42
  %168 = shl i64 %166, 22
  %169 = or i64 %168, %167
  %170 = mul i64 %169, -5435081209227447693
  %171 = xor i64 %161, %148
  %172 = getelementptr inbounds i8, i8* %153, i64 40
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 1
  %175 = add i64 %174, %151
  %176 = add i64 %175, %170
  %177 = add i64 %149, %146
  %178 = lshr i64 %177, 33
  %179 = shl i64 %177, 31
  %180 = or i64 %179, %178
  %181 = mul i64 %180, -5435081209227447693
  %182 = mul i64 %150, -5435081209227447693
  %183 = getelementptr inbounds i8, i8* %153, i64 16
  %184 = bitcast i8* %183 to i64*
  %185 = load i64, i64* %184, align 1
  %186 = getelementptr inbounds i8, i8* %153, i64 24
  %187 = bitcast i8* %186 to i64*
  %188 = load i64, i64* %187, align 1
  %189 = add i64 %144, %182
  %190 = add i64 %189, %149
  %191 = add i64 %190, %188
  %192 = add i64 %191, %171
  %193 = lshr i64 %192, 21
  %194 = shl i64 %192, 43
  %195 = or i64 %194, %193
  %196 = add i64 %189, %145
  %197 = add i64 %196, %185
  %198 = lshr i64 %197, 44
  %199 = shl i64 %197, 20
  %200 = or i64 %199, %198
  %201 = add i64 %197, %188
  %202 = add i64 %200, %189
  %203 = add i64 %202, %195
  %204 = getelementptr inbounds i8, i8* %153, i64 32
  %205 = add i64 %181, %148
  %206 = add i64 %176, %185
  %207 = bitcast i8* %204 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = getelementptr inbounds i8, i8* %153, i64 56
  %210 = bitcast i8* %209 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = add i64 %205, %208
  %213 = add i64 %206, %212
  %214 = add i64 %213, %211
  %215 = lshr i64 %214, 21
  %216 = shl i64 %214, 43
  %217 = or i64 %216, %215
  %218 = add i64 %212, %174
  %219 = add i64 %218, %165
  %220 = lshr i64 %219, 44
  %221 = shl i64 %219, 20
  %222 = or i64 %221, %220
  %223 = add i64 %219, %211
  %224 = add i64 %222, %212
  %225 = add i64 %224, %217
  %226 = getelementptr inbounds i8, i8* %153, i64 64
  %227 = add i64 %176, %181
  %228 = add i64 %227, %201
  %229 = getelementptr inbounds i8, i8* %153, i64 72
  %230 = bitcast i8* %229 to i64*
  %231 = load i64, i64* %230, align 1
  %232 = add i64 %228, %231
  %233 = lshr i64 %232, 37
  %234 = shl i64 %232, 27
  %235 = or i64 %234, %233
  %236 = mul i64 %235, -5435081209227447693
  %237 = getelementptr inbounds i8, i8* %153, i64 112
  %238 = bitcast i8* %237 to i64*
  %239 = load i64, i64* %238, align 1
  %240 = add i64 %239, %176
  %241 = add i64 %240, %203
  %242 = lshr i64 %241, 42
  %243 = shl i64 %241, 22
  %244 = or i64 %243, %242
  %245 = mul i64 %244, -5435081209227447693
  %246 = xor i64 %236, %225
  %247 = getelementptr inbounds i8, i8* %153, i64 104
  %248 = bitcast i8* %247 to i64*
  %249 = load i64, i64* %248, align 1
  %250 = add i64 %249, %201
  %251 = add i64 %250, %245
  %252 = add i64 %223, %171
  %253 = lshr i64 %252, 33
  %254 = shl i64 %252, 31
  %255 = or i64 %254, %253
  %256 = mul i64 %255, -5435081209227447693
  %257 = mul i64 %203, -5435081209227447693
  %258 = bitcast i8* %226 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = getelementptr inbounds i8, i8* %153, i64 80
  %261 = bitcast i8* %260 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = getelementptr inbounds i8, i8* %153, i64 88
  %264 = bitcast i8* %263 to i64*
  %265 = load i64, i64* %264, align 1
  %266 = add i64 %259, %257
  %267 = add i64 %266, %223
  %268 = add i64 %267, %246
  %269 = add i64 %268, %265
  %270 = lshr i64 %269, 21
  %271 = shl i64 %269, 43
  %272 = or i64 %271, %270
  %273 = add i64 %266, %231
  %274 = add i64 %273, %262
  %275 = lshr i64 %274, 44
  %276 = shl i64 %274, 20
  %277 = or i64 %276, %275
  %278 = add i64 %274, %265
  %279 = add i64 %277, %266
  %280 = add i64 %279, %272
  %281 = getelementptr inbounds i8, i8* %153, i64 96
  %282 = add i64 %256, %225
  %283 = add i64 %251, %262
  %284 = bitcast i8* %281 to i64*
  %285 = load i64, i64* %284, align 1
  %286 = getelementptr inbounds i8, i8* %153, i64 120
  %287 = bitcast i8* %286 to i64*
  %288 = load i64, i64* %287, align 1
  %289 = add i64 %282, %285
  %290 = add i64 %283, %289
  %291 = add i64 %290, %288
  %292 = lshr i64 %291, 21
  %293 = shl i64 %291, 43
  %294 = or i64 %293, %292
  %295 = add i64 %289, %249
  %296 = add i64 %295, %239
  %297 = lshr i64 %296, 44
  %298 = shl i64 %296, 20
  %299 = or i64 %298, %297
  %300 = add i64 %296, %288
  %301 = add i64 %299, %289
  %302 = add i64 %301, %294
  %303 = getelementptr inbounds i8, i8* %153, i64 128
  %304 = add i64 %152, -128
  %305 = icmp ugt i64 %304, 127
  br i1 %305, label %306, label %312, !prof !2

306:                                              ; preds = %143
  %307 = getelementptr inbounds i8, i8* %153, i64 136
  %308 = bitcast i8* %307 to i64*
  %309 = load i64, i64* %308, align 1
  %310 = bitcast i8* %303 to i64*
  %311 = load i64, i64* %310, align 1
  br label %143

312:                                              ; preds = %143
  %313 = and i64 %1, 127
  %314 = add i64 %278, %246
  %315 = lshr i64 %314, 49
  %316 = shl i64 %314, 15
  %317 = or i64 %316, %315
  %318 = mul i64 %317, -4348849565147123417
  %319 = add i64 %318, %256
  %320 = lshr i64 %300, 37
  %321 = shl i64 %300, 27
  %322 = or i64 %321, %320
  %323 = mul i64 %322, -4348849565147123417
  %324 = add i64 %323, %246
  %325 = icmp eq i64 %313, 0
  br i1 %325, label %368, label %326

326:                                              ; preds = %312
  %327 = getelementptr inbounds i8, i8* %0, i64 %1
  %328 = add i64 %251, %319
  %329 = lshr i64 %328, 42
  %330 = shl i64 %328, 22
  %331 = or i64 %330, %329
  %332 = mul i64 %331, -4348849565147123417
  %333 = add i64 %332, %280
  %334 = getelementptr inbounds i8, i8* %327, i64 -32
  %335 = getelementptr inbounds i8, i8* %334, i64 16
  %336 = bitcast i8* %335 to i64*
  %337 = load i64, i64* %336, align 1
  %338 = add i64 %337, %300
  %339 = mul i64 %319, -4348849565147123417
  %340 = add i64 %338, %339
  %341 = bitcast i8* %334 to i64*
  %342 = load i64, i64* %341, align 1
  %343 = add i64 %302, %324
  %344 = add i64 %343, %342
  %345 = add i64 %278, %302
  %346 = getelementptr inbounds i8, i8* %334, i64 8
  %347 = bitcast i8* %346 to i64*
  %348 = load i64, i64* %347, align 1
  %349 = getelementptr inbounds i8, i8* %334, i64 24
  %350 = bitcast i8* %349 to i64*
  %351 = load i64, i64* %350, align 1
  %352 = add i64 %342, %278
  %353 = add i64 %352, %344
  %354 = add i64 %351, %280
  %355 = add i64 %354, %353
  %356 = lshr i64 %355, 21
  %357 = shl i64 %355, 43
  %358 = or i64 %357, %356
  %359 = add i64 %348, %337
  %360 = add i64 %359, %353
  %361 = lshr i64 %360, 44
  %362 = shl i64 %360, 20
  %363 = or i64 %362, %361
  %364 = add i64 %360, %351
  %365 = add i64 %363, %353
  %366 = add i64 %365, %358
  %367 = icmp ugt i64 %313, 32
  br i1 %367, label %423, label %368

368:                                              ; preds = %326, %423, %464, %505, %312
  %369 = phi i64 [ %324, %312 ], [ %344, %326 ], [ %440, %423 ], [ %481, %464 ], [ %522, %505 ]
  %370 = phi i64 [ %319, %312 ], [ %340, %326 ], [ %436, %423 ], [ %477, %464 ], [ %518, %505 ]
  %371 = phi i64 [ %302, %312 ], [ %345, %326 ], [ %441, %423 ], [ %482, %464 ], [ %523, %505 ]
  %372 = phi i64 [ %300, %312 ], [ %338, %326 ], [ %434, %423 ], [ %475, %464 ], [ %516, %505 ]
  %373 = phi i64 [ %280, %312 ], [ %366, %326 ], [ %462, %423 ], [ %503, %464 ], [ %544, %505 ]
  %374 = phi i64 [ %278, %312 ], [ %364, %326 ], [ %460, %423 ], [ %501, %464 ], [ %542, %505 ]
  %375 = phi i64 [ %251, %312 ], [ %333, %326 ], [ %429, %423 ], [ %470, %464 ], [ %511, %505 ]
  %376 = xor i64 %374, %370
  %377 = mul i64 %376, -7070675565921424023
  %378 = lshr i64 %377, 47
  %379 = xor i64 %377, %374
  %380 = xor i64 %379, %378
  %381 = mul i64 %380, -7070675565921424023
  %382 = lshr i64 %381, 47
  %383 = xor i64 %382, %381
  %384 = mul i64 %383, -7070675565921424023
  %385 = add i64 %375, %369
  %386 = xor i64 %385, %372
  %387 = mul i64 %386, -7070675565921424023
  %388 = lshr i64 %387, 47
  %389 = xor i64 %387, %372
  %390 = xor i64 %389, %388
  %391 = mul i64 %390, -7070675565921424023
  %392 = lshr i64 %391, 47
  %393 = xor i64 %392, %391
  %394 = mul i64 %393, -7070675565921424023
  %395 = add i64 %384, %373
  %396 = xor i64 %395, %371
  %397 = mul i64 %396, -7070675565921424023
  %398 = lshr i64 %397, 47
  %399 = xor i64 %397, %371
  %400 = xor i64 %399, %398
  %401 = mul i64 %400, -7070675565921424023
  %402 = lshr i64 %401, 47
  %403 = xor i64 %402, %401
  %404 = mul i64 %403, -7070675565921424023
  %405 = add i64 %404, %394
  %406 = add i64 %384, %371
  %407 = add i64 %394, %373
  %408 = xor i64 %407, %406
  %409 = mul i64 %408, -7070675565921424023
  %410 = xor i64 %409, %407
  br label %411

411:                                              ; preds = %368, %85
  %412 = phi i64 [ %409, %368 ], [ %109, %85 ]
  %413 = phi i64 [ %410, %368 ], [ %110, %85 ]
  %414 = phi i64 [ %405, %368 ], [ %108, %85 ]
  %415 = lshr i64 %412, 47
  %416 = xor i64 %413, %415
  %417 = mul i64 %416, -7070675565921424023
  %418 = lshr i64 %417, 47
  %419 = xor i64 %418, %417
  %420 = mul i64 %419, -7070675565921424023
  %421 = insertvalue { i64, i64 } undef, i64 %414, 0
  %422 = insertvalue { i64, i64 } %421, i64 %420, 1
  ret { i64, i64 } %422

423:                                              ; preds = %326
  %424 = add i64 %333, %340
  %425 = lshr i64 %424, 42
  %426 = shl i64 %424, 22
  %427 = or i64 %426, %425
  %428 = mul i64 %427, -4348849565147123417
  %429 = add i64 %428, %366
  %430 = getelementptr inbounds i8, i8* %327, i64 -64
  %431 = getelementptr inbounds i8, i8* %430, i64 16
  %432 = bitcast i8* %431 to i64*
  %433 = load i64, i64* %432, align 1
  %434 = add i64 %433, %338
  %435 = mul i64 %340, -4348849565147123417
  %436 = add i64 %434, %435
  %437 = bitcast i8* %430 to i64*
  %438 = load i64, i64* %437, align 1
  %439 = add i64 %345, %344
  %440 = add i64 %439, %438
  %441 = add i64 %364, %345
  %442 = getelementptr inbounds i8, i8* %430, i64 8
  %443 = bitcast i8* %442 to i64*
  %444 = load i64, i64* %443, align 1
  %445 = getelementptr inbounds i8, i8* %430, i64 24
  %446 = bitcast i8* %445 to i64*
  %447 = load i64, i64* %446, align 1
  %448 = add i64 %438, %364
  %449 = add i64 %448, %440
  %450 = add i64 %447, %366
  %451 = add i64 %450, %449
  %452 = lshr i64 %451, 21
  %453 = shl i64 %451, 43
  %454 = or i64 %453, %452
  %455 = add i64 %444, %433
  %456 = add i64 %455, %449
  %457 = lshr i64 %456, 44
  %458 = shl i64 %456, 20
  %459 = or i64 %458, %457
  %460 = add i64 %456, %447
  %461 = add i64 %459, %449
  %462 = add i64 %461, %454
  %463 = icmp ugt i64 %313, 64
  br i1 %463, label %464, label %368

464:                                              ; preds = %423
  %465 = add i64 %429, %436
  %466 = lshr i64 %465, 42
  %467 = shl i64 %465, 22
  %468 = or i64 %467, %466
  %469 = mul i64 %468, -4348849565147123417
  %470 = add i64 %469, %462
  %471 = getelementptr inbounds i8, i8* %327, i64 -96
  %472 = getelementptr inbounds i8, i8* %471, i64 16
  %473 = bitcast i8* %472 to i64*
  %474 = load i64, i64* %473, align 1
  %475 = add i64 %474, %434
  %476 = mul i64 %436, -4348849565147123417
  %477 = add i64 %475, %476
  %478 = bitcast i8* %471 to i64*
  %479 = load i64, i64* %478, align 1
  %480 = add i64 %441, %440
  %481 = add i64 %480, %479
  %482 = add i64 %460, %441
  %483 = getelementptr inbounds i8, i8* %471, i64 8
  %484 = bitcast i8* %483 to i64*
  %485 = load i64, i64* %484, align 1
  %486 = getelementptr inbounds i8, i8* %471, i64 24
  %487 = bitcast i8* %486 to i64*
  %488 = load i64, i64* %487, align 1
  %489 = add i64 %479, %460
  %490 = add i64 %489, %481
  %491 = add i64 %488, %462
  %492 = add i64 %491, %490
  %493 = lshr i64 %492, 21
  %494 = shl i64 %492, 43
  %495 = or i64 %494, %493
  %496 = add i64 %485, %474
  %497 = add i64 %496, %490
  %498 = lshr i64 %497, 44
  %499 = shl i64 %497, 20
  %500 = or i64 %499, %498
  %501 = add i64 %497, %488
  %502 = add i64 %500, %490
  %503 = add i64 %502, %495
  %504 = icmp ugt i64 %313, 96
  br i1 %504, label %505, label %368

505:                                              ; preds = %464
  %506 = add i64 %470, %477
  %507 = lshr i64 %506, 42
  %508 = shl i64 %506, 22
  %509 = or i64 %508, %507
  %510 = mul i64 %509, -4348849565147123417
  %511 = add i64 %510, %503
  %512 = getelementptr inbounds i8, i8* %327, i64 -128
  %513 = getelementptr inbounds i8, i8* %512, i64 16
  %514 = bitcast i8* %513 to i64*
  %515 = load i64, i64* %514, align 1
  %516 = add i64 %515, %475
  %517 = mul i64 %477, -4348849565147123417
  %518 = add i64 %516, %517
  %519 = bitcast i8* %512 to i64*
  %520 = load i64, i64* %519, align 1
  %521 = add i64 %482, %481
  %522 = add i64 %521, %520
  %523 = add i64 %501, %482
  %524 = getelementptr inbounds i8, i8* %512, i64 8
  %525 = bitcast i8* %524 to i64*
  %526 = load i64, i64* %525, align 1
  %527 = getelementptr inbounds i8, i8* %512, i64 24
  %528 = bitcast i8* %527 to i64*
  %529 = load i64, i64* %528, align 1
  %530 = add i64 %520, %501
  %531 = add i64 %530, %522
  %532 = add i64 %529, %503
  %533 = add i64 %532, %531
  %534 = lshr i64 %533, 21
  %535 = shl i64 %533, 43
  %536 = or i64 %535, %534
  %537 = add i64 %526, %515
  %538 = add i64 %537, %531
  %539 = lshr i64 %538, 44
  %540 = shl i64 %538, 20
  %541 = or i64 %540, %539
  %542 = add i64 %538, %529
  %543 = add i64 %541, %531
  %544 = add i64 %543, %536
  br label %368
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN4base8internal13cityhash_v10311CityHash128EPKcm(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ugt i64 %1, 15
  br i1 %3, label %4, label %16

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = add i64 %1, -16
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = xor i64 %8, -3942382747735136937
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call { i64, i64 } @_ZN4base8internal13cityhash_v10319CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %5, i64 %6, i64 %9, i64 %12)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  br label %68

16:                                               ; preds = %2
  %17 = icmp ugt i64 %1, 7
  br i1 %17, label %18, label %64

18:                                               ; preds = %16
  %19 = bitcast i8* %0 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = mul i64 %1, -4348849565147123417
  %22 = xor i64 %20, %21
  %23 = getelementptr inbounds i8, i8* %0, i64 %1
  %24 = getelementptr inbounds i8, i8* %23, i64 -8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = xor i64 %26, -5435081209227447693
  %28 = mul i64 %22, -5435081209227447693
  %29 = lshr i64 %28, 47
  %30 = xor i64 %29, %28
  %31 = mul i64 %30, -5435081209227447693
  %32 = mul i64 %27, -5435081209227447693
  %33 = add i64 %32, -7286425919675154353
  %34 = add i64 %31, %33
  %35 = lshr i64 %34, 47
  %36 = xor i64 %31, %33
  %37 = mul i64 %36, -7070675565921424023
  %38 = lshr i64 %37, 47
  %39 = xor i64 %37, %33
  %40 = xor i64 %39, %38
  %41 = mul i64 %40, -7070675565921424023
  %42 = lshr i64 %41, 47
  %43 = xor i64 %42, %41
  %44 = mul i64 %43, -7070675565921424023
  %45 = xor i64 %34, %27
  %46 = xor i64 %45, %35
  %47 = mul i64 %46, -7070675565921424023
  %48 = lshr i64 %47, 47
  %49 = xor i64 %47, %27
  %50 = xor i64 %49, %48
  %51 = mul i64 %50, -7070675565921424023
  %52 = lshr i64 %51, 47
  %53 = xor i64 %52, %51
  %54 = mul i64 %53, -7070675565921424023
  %55 = xor i64 %54, %44
  %56 = mul i64 %55, -7070675565921424023
  %57 = lshr i64 %56, 47
  %58 = xor i64 %56, %44
  %59 = xor i64 %58, %57
  %60 = mul i64 %59, -7070675565921424023
  %61 = lshr i64 %60, 47
  %62 = xor i64 %61, %60
  %63 = mul i64 %62, -7070675565921424023
  br label %68

64:                                               ; preds = %16
  %65 = tail call { i64, i64 } @_ZN4base8internal13cityhash_v10319CityHash128WithSeedEPKcmNSt3__14pairImmEE(i8* %0, i64 %1, i64 -4348849565147123417, i64 -5435081209227447693)
  %66 = extractvalue { i64, i64 } %65, 0
  %67 = extractvalue { i64, i64 } %65, 1
  br label %68

68:                                               ; preds = %64, %18, %4
  %69 = phi i64 [ %14, %4 ], [ %55, %18 ], [ %66, %64 ]
  %70 = phi i64 [ %15, %4 ], [ %63, %18 ], [ %67, %64 ]
  %71 = insertvalue { i64, i64 } undef, i64 %69, 0
  %72 = insertvalue { i64, i64 } %71, i64 %70, 1
  ret { i64, i64 } %72
}

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
