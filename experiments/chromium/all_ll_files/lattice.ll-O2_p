; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/lattice.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/lattice.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_NormLatticeFilterMa(i32, float* nocapture, float* nocapture, float* nocapture readonly, double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  %7 = alloca [12 x float], align 16
  %8 = alloca [12 x float], align 16
  %9 = alloca [12 x float], align 16
  %10 = alloca [12 x float], align 16
  %11 = alloca [13 x double], align 16
  %12 = alloca [13 x [40 x float]], align 16
  %13 = bitcast [13 x [40 x float]]* %12 to i8*
  %14 = alloca [13 x [40 x float]], align 16
  %15 = bitcast [13 x [40 x float]]* %14 to i8*
  %16 = add i32 %0, 1
  %17 = bitcast [12 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %17) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 48, i1 false)
  %18 = bitcast [12 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %18) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 48, i1 false)
  %19 = bitcast [12 x float]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %19) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 48, i1 false)
  %20 = bitcast [13 x double]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %20) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -1, i64 104, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %13) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 2080, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %15) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 2080, i1 false)
  %21 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 0
  %22 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 1
  %23 = bitcast double* %22 to i8*
  %24 = sext i32 %0 to i64
  %25 = shl nsw i64 %24, 3
  %26 = bitcast [12 x float]* %7 to i8*
  %27 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %24
  %28 = add i32 %0, -1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %29
  %31 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %29
  %32 = icmp sgt i32 %28, 0
  %33 = icmp sgt i32 %0, 0
  %34 = icmp slt i32 %0, 1
  %35 = icmp slt i32 %0, 0
  %36 = sext i32 %16 to i64
  %37 = zext i32 %16 to i64
  %38 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 0, i64 0
  %39 = zext i32 %0 to i64
  %40 = zext i32 %0 to i64
  %41 = and i64 %40, 1
  %42 = icmp eq i32 %0, 1
  %43 = sub nsw i64 %40, %41
  %44 = icmp eq i64 %41, 0
  %45 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 0
  %46 = bitcast float* %45 to <2 x float>*
  %47 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 2
  %48 = bitcast float* %47 to <2 x float>*
  %49 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 4
  %50 = bitcast float* %49 to <2 x float>*
  %51 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 6
  %52 = bitcast float* %51 to <2 x float>*
  %53 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 8
  %54 = bitcast float* %53 to <2 x float>*
  %55 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 10
  %56 = bitcast float* %55 to <2 x float>*
  %57 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 12
  %58 = bitcast float* %57 to <2 x float>*
  %59 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 14
  %60 = bitcast float* %59 to <2 x float>*
  %61 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 16
  %62 = bitcast float* %61 to <2 x float>*
  %63 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 18
  %64 = bitcast float* %63 to <2 x float>*
  %65 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 20
  %66 = bitcast float* %65 to <2 x float>*
  %67 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 22
  %68 = bitcast float* %67 to <2 x float>*
  %69 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 24
  %70 = bitcast float* %69 to <2 x float>*
  %71 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 26
  %72 = bitcast float* %71 to <2 x float>*
  %73 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 28
  %74 = bitcast float* %73 to <2 x float>*
  %75 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 30
  %76 = bitcast float* %75 to <2 x float>*
  %77 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 32
  %78 = bitcast float* %77 to <2 x float>*
  %79 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 34
  %80 = bitcast float* %79 to <2 x float>*
  %81 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 36
  %82 = bitcast float* %81 to <2 x float>*
  %83 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %24, i64 38
  %84 = bitcast float* %83 to <2 x float>*
  %85 = and i64 %37, 1
  %86 = icmp eq i32 %0, 0
  %87 = sub nsw i64 %37, %85
  %88 = icmp eq i64 %85, 0
  br label %89

89:                                               ; preds = %577, %6
  %90 = phi i64 [ 0, %6 ], [ %578, %577 ]
  %91 = mul nuw nsw i64 %90, 40
  %92 = getelementptr float, float* %3, i64 %91
  %93 = bitcast float* %92 to i8*
  %94 = mul nsw i64 %90, %36
  store double 1.000000e+00, double* %21, align 16
  %95 = getelementptr inbounds double, double* %4, i64 %94
  %96 = getelementptr inbounds double, double* %95, i64 1
  %97 = bitcast double* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %97, i64 %25, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %26) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -1, i64 48, i1 false) #2
  %98 = load double, double* %27, align 8
  %99 = fptrunc double %98 to float
  store float %99, float* %30, align 4
  %100 = fmul float %99, %99
  %101 = fsub float 1.000000e+00, %100
  %102 = tail call float @sqrtf(float %101) #3
  store float %102, float* %31, align 4
  br i1 %32, label %103, label %328

103:                                              ; preds = %89, %316
  %104 = phi i64 [ %327, %316 ], [ 0, %89 ]
  %105 = phi float [ %318, %316 ], [ %99, %89 ]
  %106 = phi i64 [ %319, %316 ], [ %29, %89 ]
  %107 = phi i32 [ %326, %316 ], [ %0, %89 ]
  %108 = phi float [ %322, %316 ], [ %101, %89 ]
  %109 = xor i64 %104, -1
  %110 = add i64 %109, %29
  %111 = add i64 %110, -4
  %112 = lshr i64 %111, 2
  %113 = add nuw nsw i64 %112, 1
  %114 = trunc i64 %104 to i32
  %115 = sub i32 %0, %114
  %116 = zext i32 %115 to i64
  %117 = trunc i64 %104 to i32
  %118 = sub i32 %0, %117
  %119 = zext i32 %118 to i64
  %120 = add nsw i64 %119, -2
  %121 = trunc i64 %104 to i32
  %122 = sub i32 %28, %121
  %123 = trunc i64 %104 to i32
  %124 = sub i32 %0, %123
  %125 = zext i32 %124 to i64
  %126 = add nsw i64 %125, -1
  %127 = xor i64 %104, -1
  %128 = add i64 %127, %29
  %129 = fdiv float 1.000000e+00, %108
  %130 = add nsw i64 %106, 1
  %131 = zext i32 %107 to i64
  %132 = icmp ult i64 %126, 4
  br i1 %132, label %133, label %157

133:                                              ; preds = %211, %157, %103
  %134 = phi i64 [ 1, %157 ], [ 1, %103 ], [ %165, %211 ]
  %135 = xor i64 %134, -1
  %136 = and i64 %116, 1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %153

138:                                              ; preds = %133
  %139 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %134
  %140 = load double, double* %139, align 8
  %141 = fptrunc double %140 to float
  %142 = sub i64 %130, %134
  %143 = shl i64 %142, 32
  %144 = ashr exact i64 %143, 32
  %145 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %144
  %146 = load double, double* %145, align 8
  %147 = fptrunc double %146 to float
  %148 = fmul float %105, %147
  %149 = fsub float %141, %148
  %150 = fmul float %129, %149
  %151 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %134
  store float %150, float* %151, align 4
  %152 = add nuw nsw i64 %134, 1
  br label %153

153:                                              ; preds = %138, %133
  %154 = phi i64 [ %152, %138 ], [ %134, %133 ]
  %155 = sub nsw i64 0, %116
  %156 = icmp eq i64 %135, %155
  br i1 %156, label %213, label %277

157:                                              ; preds = %103
  %158 = trunc i64 %120 to i32
  %159 = sub i32 %122, %158
  %160 = icmp sgt i32 %159, %122
  %161 = icmp ugt i64 %120, 4294967295
  %162 = or i1 %160, %161
  br i1 %162, label %133, label %163

163:                                              ; preds = %157
  %164 = and i64 %126, -4
  %165 = or i64 %164, 1
  %166 = insertelement <2 x float> undef, float %105, i32 0
  %167 = shufflevector <2 x float> %166, <2 x float> undef, <2 x i32> zeroinitializer
  %168 = insertelement <2 x float> undef, float %105, i32 0
  %169 = shufflevector <2 x float> %168, <2 x float> undef, <2 x i32> zeroinitializer
  %170 = insertelement <2 x float> undef, float %129, i32 0
  %171 = shufflevector <2 x float> %170, <2 x float> undef, <2 x i32> zeroinitializer
  %172 = insertelement <2 x float> undef, float %129, i32 0
  %173 = shufflevector <2 x float> %172, <2 x float> undef, <2 x i32> zeroinitializer
  br label %174

174:                                              ; preds = %174, %163
  %175 = phi i64 [ 0, %163 ], [ %209, %174 ]
  %176 = or i64 %175, 1
  %177 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %176
  %178 = bitcast double* %177 to <2 x double>*
  %179 = load <2 x double>, <2 x double>* %178, align 8
  %180 = getelementptr inbounds double, double* %177, i64 2
  %181 = bitcast double* %180 to <2 x double>*
  %182 = load <2 x double>, <2 x double>* %181, align 8
  %183 = fptrunc <2 x double> %179 to <2 x float>
  %184 = fptrunc <2 x double> %182 to <2 x float>
  %185 = sub i64 %130, %176
  %186 = shl i64 %185, 32
  %187 = ashr exact i64 %186, 32
  %188 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %187
  %189 = getelementptr inbounds double, double* %188, i64 -1
  %190 = bitcast double* %189 to <2 x double>*
  %191 = load <2 x double>, <2 x double>* %190, align 8
  %192 = shufflevector <2 x double> %191, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %193 = getelementptr inbounds double, double* %188, i64 -3
  %194 = bitcast double* %193 to <2 x double>*
  %195 = load <2 x double>, <2 x double>* %194, align 8
  %196 = shufflevector <2 x double> %195, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %197 = fptrunc <2 x double> %192 to <2 x float>
  %198 = fptrunc <2 x double> %196 to <2 x float>
  %199 = fmul <2 x float> %167, %197
  %200 = fmul <2 x float> %169, %198
  %201 = fsub <2 x float> %183, %199
  %202 = fsub <2 x float> %184, %200
  %203 = fmul <2 x float> %171, %201
  %204 = fmul <2 x float> %173, %202
  %205 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %176
  %206 = bitcast float* %205 to <2 x float>*
  store <2 x float> %203, <2 x float>* %206, align 4
  %207 = getelementptr inbounds float, float* %205, i64 2
  %208 = bitcast float* %207 to <2 x float>*
  store <2 x float> %204, <2 x float>* %208, align 4
  %209 = add i64 %175, 4
  %210 = icmp eq i64 %209, %164
  br i1 %210, label %211, label %174, !llvm.loop !2

211:                                              ; preds = %174
  %212 = icmp eq i64 %126, %164
  br i1 %212, label %213, label %133

213:                                              ; preds = %153, %277, %211
  %214 = icmp sgt i64 %106, 1
  br i1 %214, label %215, label %316

215:                                              ; preds = %213
  %216 = icmp ult i64 %128, 4
  br i1 %216, label %217, label %219

217:                                              ; preds = %275, %215
  %218 = phi i64 [ 1, %215 ], [ %221, %275 ]
  br label %308

219:                                              ; preds = %215
  %220 = and i64 %128, -4
  %221 = or i64 %220, 1
  %222 = and i64 %113, 1
  %223 = icmp eq i64 %112, 0
  br i1 %223, label %258, label %224

224:                                              ; preds = %219
  %225 = sub nuw nsw i64 %113, %222
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %255, %226 ]
  %228 = phi i64 [ %225, %224 ], [ %256, %226 ]
  %229 = or i64 %227, 1
  %230 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %229
  %231 = bitcast float* %230 to <2 x float>*
  %232 = load <2 x float>, <2 x float>* %231, align 4
  %233 = getelementptr inbounds float, float* %230, i64 2
  %234 = bitcast float* %233 to <2 x float>*
  %235 = load <2 x float>, <2 x float>* %234, align 4
  %236 = fpext <2 x float> %232 to <2 x double>
  %237 = fpext <2 x float> %235 to <2 x double>
  %238 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %229
  %239 = bitcast double* %238 to <2 x double>*
  store <2 x double> %236, <2 x double>* %239, align 8
  %240 = getelementptr inbounds double, double* %238, i64 2
  %241 = bitcast double* %240 to <2 x double>*
  store <2 x double> %237, <2 x double>* %241, align 8
  %242 = or i64 %227, 5
  %243 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %242
  %244 = bitcast float* %243 to <2 x float>*
  %245 = load <2 x float>, <2 x float>* %244, align 4
  %246 = getelementptr inbounds float, float* %243, i64 2
  %247 = bitcast float* %246 to <2 x float>*
  %248 = load <2 x float>, <2 x float>* %247, align 4
  %249 = fpext <2 x float> %245 to <2 x double>
  %250 = fpext <2 x float> %248 to <2 x double>
  %251 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %242
  %252 = bitcast double* %251 to <2 x double>*
  store <2 x double> %249, <2 x double>* %252, align 8
  %253 = getelementptr inbounds double, double* %251, i64 2
  %254 = bitcast double* %253 to <2 x double>*
  store <2 x double> %250, <2 x double>* %254, align 8
  %255 = add i64 %227, 8
  %256 = add i64 %228, -2
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %258, label %226, !llvm.loop !4

258:                                              ; preds = %226, %219
  %259 = phi i64 [ 0, %219 ], [ %255, %226 ]
  %260 = icmp eq i64 %222, 0
  br i1 %260, label %275, label %261

261:                                              ; preds = %258
  %262 = or i64 %259, 1
  %263 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %262
  %264 = bitcast float* %263 to <2 x float>*
  %265 = load <2 x float>, <2 x float>* %264, align 4
  %266 = getelementptr inbounds float, float* %263, i64 2
  %267 = bitcast float* %266 to <2 x float>*
  %268 = load <2 x float>, <2 x float>* %267, align 4
  %269 = fpext <2 x float> %265 to <2 x double>
  %270 = fpext <2 x float> %268 to <2 x double>
  %271 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %262
  %272 = bitcast double* %271 to <2 x double>*
  store <2 x double> %269, <2 x double>* %272, align 8
  %273 = getelementptr inbounds double, double* %271, i64 2
  %274 = bitcast double* %273 to <2 x double>*
  store <2 x double> %270, <2 x double>* %274, align 8
  br label %275

275:                                              ; preds = %258, %261
  %276 = icmp eq i64 %128, %220
  br i1 %276, label %316, label %217

277:                                              ; preds = %153, %277
  %278 = phi i64 [ %306, %277 ], [ %154, %153 ]
  %279 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %278
  %280 = load double, double* %279, align 8
  %281 = fptrunc double %280 to float
  %282 = sub i64 %130, %278
  %283 = shl i64 %282, 32
  %284 = ashr exact i64 %283, 32
  %285 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %284
  %286 = load double, double* %285, align 8
  %287 = fptrunc double %286 to float
  %288 = fmul float %105, %287
  %289 = fsub float %281, %288
  %290 = fmul float %129, %289
  %291 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %278
  store float %290, float* %291, align 4
  %292 = add nuw nsw i64 %278, 1
  %293 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %292
  %294 = load double, double* %293, align 8
  %295 = fptrunc double %294 to float
  %296 = sub i64 %130, %292
  %297 = shl i64 %296, 32
  %298 = ashr exact i64 %297, 32
  %299 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %298
  %300 = load double, double* %299, align 8
  %301 = fptrunc double %300 to float
  %302 = fmul float %105, %301
  %303 = fsub float %295, %302
  %304 = fmul float %129, %303
  %305 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %292
  store float %304, float* %305, align 4
  %306 = add nuw nsw i64 %278, 2
  %307 = icmp eq i64 %306, %131
  br i1 %307, label %213, label %277, !llvm.loop !5

308:                                              ; preds = %217, %308
  %309 = phi i64 [ %314, %308 ], [ %218, %217 ]
  %310 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %309
  %311 = load float, float* %310, align 4
  %312 = fpext float %311 to double
  %313 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %309
  store double %312, double* %313, align 8
  %314 = add nuw nsw i64 %309, 1
  %315 = icmp eq i64 %314, %106
  br i1 %315, label %316, label %308, !llvm.loop !6

316:                                              ; preds = %308, %275, %213
  %317 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %106
  %318 = load float, float* %317, align 4
  %319 = add nsw i64 %106, -1
  %320 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %319
  store float %318, float* %320, align 4
  %321 = fmul float %318, %318
  %322 = fsub float 1.000000e+00, %321
  %323 = tail call float @sqrtf(float %322) #3
  %324 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %319
  store float %323, float* %324, align 4
  %325 = icmp sgt i64 %319, 0
  %326 = add i32 %107, -1
  %327 = add i64 %104, 1
  br i1 %325, label %103, label %328

328:                                              ; preds = %316, %89
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #2
  %329 = load double, double* %95, align 8
  %330 = fptrunc double %329 to float
  br i1 %33, label %331, label %342

331:                                              ; preds = %328
  br i1 %42, label %332, label %344

332:                                              ; preds = %344, %331
  %333 = phi float [ undef, %331 ], [ %356, %344 ]
  %334 = phi i64 [ 0, %331 ], [ %359, %344 ]
  %335 = phi float [ %330, %331 ], [ %356, %344 ]
  br i1 %44, label %342, label %336

336:                                              ; preds = %332
  %337 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %334
  %338 = load float, float* %337, align 4
  %339 = fdiv float 1.000000e+00, %338
  %340 = getelementptr inbounds [12 x float], [12 x float]* %10, i64 0, i64 %334
  store float %339, float* %340, align 4
  %341 = fmul float %335, %338
  br label %342

342:                                              ; preds = %336, %332, %328
  %343 = phi float [ %330, %328 ], [ %333, %332 ], [ %341, %336 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* align 4 %93, i64 160, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %15, i8* align 4 %93, i64 160, i1 false)
  br i1 %34, label %364, label %362

344:                                              ; preds = %331, %344
  %345 = phi i64 [ %359, %344 ], [ 0, %331 ]
  %346 = phi float [ %356, %344 ], [ %330, %331 ]
  %347 = phi i64 [ %360, %344 ], [ %43, %331 ]
  %348 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %345
  %349 = load float, float* %348, align 8
  %350 = fmul float %346, %349
  %351 = fdiv float 1.000000e+00, %349
  %352 = getelementptr inbounds [12 x float], [12 x float]* %10, i64 0, i64 %345
  store float %351, float* %352, align 8
  %353 = or i64 %345, 1
  %354 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %353
  %355 = load float, float* %354, align 4
  %356 = fmul float %350, %355
  %357 = fdiv float 1.000000e+00, %355
  %358 = getelementptr inbounds [12 x float], [12 x float]* %10, i64 0, i64 %353
  store float %357, float* %358, align 4
  %359 = add nuw nsw i64 %345, 2
  %360 = add i64 %347, -2
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %332, label %344

362:                                              ; preds = %342
  %363 = load float, float* %38, align 16
  br label %365

364:                                              ; preds = %365, %342
  br i1 %33, label %509, label %387

365:                                              ; preds = %365, %362
  %366 = phi float [ %363, %362 ], [ %377, %365 ]
  %367 = phi i64 [ 1, %362 ], [ %385, %365 ]
  %368 = add nsw i64 %367, -1
  %369 = getelementptr inbounds [12 x float], [12 x float]* %10, i64 0, i64 %368
  %370 = load float, float* %369, align 4
  %371 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %368
  %372 = load float, float* %371, align 4
  %373 = getelementptr inbounds float, float* %2, i64 %368
  %374 = load float, float* %373, align 4
  %375 = fmul float %372, %374
  %376 = fadd float %366, %375
  %377 = fmul float %370, %376
  %378 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %367, i64 0
  store float %377, float* %378, align 16
  %379 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %368
  %380 = load float, float* %379, align 4
  %381 = fmul float %374, %380
  %382 = fmul float %372, %377
  %383 = fadd float %381, %382
  %384 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %14, i64 0, i64 %367, i64 0
  store float %383, float* %384, align 16
  %385 = add nuw nsw i64 %367, 1
  %386 = icmp eq i64 %385, %37
  br i1 %386, label %364, label %365

387:                                              ; preds = %534, %364
  %388 = insertelement <2 x float> undef, float %343, i32 0
  %389 = shufflevector <2 x float> %388, <2 x float> undef, <2 x i32> zeroinitializer
  %390 = load <2 x float>, <2 x float>* %46, align 16
  %391 = fmul <2 x float> %389, %390
  %392 = fpext <2 x float> %391 to <2 x double>
  %393 = getelementptr inbounds double, double* %5, i64 %91
  %394 = bitcast double* %393 to <2 x double>*
  store <2 x double> %392, <2 x double>* %394, align 8
  %395 = load <2 x float>, <2 x float>* %48, align 8
  %396 = fmul <2 x float> %389, %395
  %397 = fpext <2 x float> %396 to <2 x double>
  %398 = or i64 %91, 2
  %399 = getelementptr inbounds double, double* %5, i64 %398
  %400 = bitcast double* %399 to <2 x double>*
  store <2 x double> %397, <2 x double>* %400, align 8
  %401 = load <2 x float>, <2 x float>* %50, align 16
  %402 = fmul <2 x float> %389, %401
  %403 = fpext <2 x float> %402 to <2 x double>
  %404 = or i64 %91, 4
  %405 = getelementptr inbounds double, double* %5, i64 %404
  %406 = bitcast double* %405 to <2 x double>*
  store <2 x double> %403, <2 x double>* %406, align 8
  %407 = load <2 x float>, <2 x float>* %52, align 8
  %408 = fmul <2 x float> %389, %407
  %409 = fpext <2 x float> %408 to <2 x double>
  %410 = or i64 %91, 6
  %411 = getelementptr inbounds double, double* %5, i64 %410
  %412 = bitcast double* %411 to <2 x double>*
  store <2 x double> %409, <2 x double>* %412, align 8
  %413 = load <2 x float>, <2 x float>* %54, align 16
  %414 = fmul <2 x float> %389, %413
  %415 = fpext <2 x float> %414 to <2 x double>
  %416 = add nuw nsw i64 %91, 8
  %417 = getelementptr inbounds double, double* %5, i64 %416
  %418 = bitcast double* %417 to <2 x double>*
  store <2 x double> %415, <2 x double>* %418, align 8
  %419 = load <2 x float>, <2 x float>* %56, align 8
  %420 = fmul <2 x float> %389, %419
  %421 = fpext <2 x float> %420 to <2 x double>
  %422 = add nuw nsw i64 %91, 10
  %423 = getelementptr inbounds double, double* %5, i64 %422
  %424 = bitcast double* %423 to <2 x double>*
  store <2 x double> %421, <2 x double>* %424, align 8
  %425 = load <2 x float>, <2 x float>* %58, align 16
  %426 = fmul <2 x float> %389, %425
  %427 = fpext <2 x float> %426 to <2 x double>
  %428 = add nuw nsw i64 %91, 12
  %429 = getelementptr inbounds double, double* %5, i64 %428
  %430 = bitcast double* %429 to <2 x double>*
  store <2 x double> %427, <2 x double>* %430, align 8
  %431 = load <2 x float>, <2 x float>* %60, align 8
  %432 = fmul <2 x float> %389, %431
  %433 = fpext <2 x float> %432 to <2 x double>
  %434 = add nuw nsw i64 %91, 14
  %435 = getelementptr inbounds double, double* %5, i64 %434
  %436 = bitcast double* %435 to <2 x double>*
  store <2 x double> %433, <2 x double>* %436, align 8
  %437 = load <2 x float>, <2 x float>* %62, align 16
  %438 = fmul <2 x float> %389, %437
  %439 = fpext <2 x float> %438 to <2 x double>
  %440 = add nuw nsw i64 %91, 16
  %441 = getelementptr inbounds double, double* %5, i64 %440
  %442 = bitcast double* %441 to <2 x double>*
  store <2 x double> %439, <2 x double>* %442, align 8
  %443 = load <2 x float>, <2 x float>* %64, align 8
  %444 = fmul <2 x float> %389, %443
  %445 = fpext <2 x float> %444 to <2 x double>
  %446 = add nuw nsw i64 %91, 18
  %447 = getelementptr inbounds double, double* %5, i64 %446
  %448 = bitcast double* %447 to <2 x double>*
  store <2 x double> %445, <2 x double>* %448, align 8
  %449 = load <2 x float>, <2 x float>* %66, align 16
  %450 = fmul <2 x float> %389, %449
  %451 = fpext <2 x float> %450 to <2 x double>
  %452 = add nuw nsw i64 %91, 20
  %453 = getelementptr inbounds double, double* %5, i64 %452
  %454 = bitcast double* %453 to <2 x double>*
  store <2 x double> %451, <2 x double>* %454, align 8
  %455 = load <2 x float>, <2 x float>* %68, align 8
  %456 = fmul <2 x float> %389, %455
  %457 = fpext <2 x float> %456 to <2 x double>
  %458 = add nuw nsw i64 %91, 22
  %459 = getelementptr inbounds double, double* %5, i64 %458
  %460 = bitcast double* %459 to <2 x double>*
  store <2 x double> %457, <2 x double>* %460, align 8
  %461 = load <2 x float>, <2 x float>* %70, align 16
  %462 = fmul <2 x float> %389, %461
  %463 = fpext <2 x float> %462 to <2 x double>
  %464 = add nuw nsw i64 %91, 24
  %465 = getelementptr inbounds double, double* %5, i64 %464
  %466 = bitcast double* %465 to <2 x double>*
  store <2 x double> %463, <2 x double>* %466, align 8
  %467 = load <2 x float>, <2 x float>* %72, align 8
  %468 = fmul <2 x float> %389, %467
  %469 = fpext <2 x float> %468 to <2 x double>
  %470 = add nuw nsw i64 %91, 26
  %471 = getelementptr inbounds double, double* %5, i64 %470
  %472 = bitcast double* %471 to <2 x double>*
  store <2 x double> %469, <2 x double>* %472, align 8
  %473 = load <2 x float>, <2 x float>* %74, align 16
  %474 = fmul <2 x float> %389, %473
  %475 = fpext <2 x float> %474 to <2 x double>
  %476 = add nuw nsw i64 %91, 28
  %477 = getelementptr inbounds double, double* %5, i64 %476
  %478 = bitcast double* %477 to <2 x double>*
  store <2 x double> %475, <2 x double>* %478, align 8
  %479 = load <2 x float>, <2 x float>* %76, align 8
  %480 = fmul <2 x float> %389, %479
  %481 = fpext <2 x float> %480 to <2 x double>
  %482 = add nuw nsw i64 %91, 30
  %483 = getelementptr inbounds double, double* %5, i64 %482
  %484 = bitcast double* %483 to <2 x double>*
  store <2 x double> %481, <2 x double>* %484, align 8
  %485 = load <2 x float>, <2 x float>* %78, align 16
  %486 = fmul <2 x float> %389, %485
  %487 = fpext <2 x float> %486 to <2 x double>
  %488 = add nuw nsw i64 %91, 32
  %489 = getelementptr inbounds double, double* %5, i64 %488
  %490 = bitcast double* %489 to <2 x double>*
  store <2 x double> %487, <2 x double>* %490, align 8
  %491 = load <2 x float>, <2 x float>* %80, align 8
  %492 = fmul <2 x float> %389, %491
  %493 = fpext <2 x float> %492 to <2 x double>
  %494 = add nuw nsw i64 %91, 34
  %495 = getelementptr inbounds double, double* %5, i64 %494
  %496 = bitcast double* %495 to <2 x double>*
  store <2 x double> %493, <2 x double>* %496, align 8
  %497 = load <2 x float>, <2 x float>* %82, align 16
  %498 = fmul <2 x float> %389, %497
  %499 = fpext <2 x float> %498 to <2 x double>
  %500 = add nuw nsw i64 %91, 36
  %501 = getelementptr inbounds double, double* %5, i64 %500
  %502 = bitcast double* %501 to <2 x double>*
  store <2 x double> %499, <2 x double>* %502, align 8
  %503 = load <2 x float>, <2 x float>* %84, align 8
  %504 = fmul <2 x float> %389, %503
  %505 = fpext <2 x float> %504 to <2 x double>
  %506 = add nuw nsw i64 %91, 38
  %507 = getelementptr inbounds double, double* %5, i64 %506
  %508 = bitcast double* %507 to <2 x double>*
  store <2 x double> %505, <2 x double>* %508, align 8
  br i1 %35, label %577, label %536

509:                                              ; preds = %364, %534
  %510 = phi i64 [ %515, %534 ], [ 0, %364 ]
  %511 = getelementptr inbounds [12 x float], [12 x float]* %10, i64 0, i64 %510
  %512 = load float, float* %511, align 4
  %513 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %510
  %514 = load float, float* %513, align 4
  %515 = add nuw nsw i64 %510, 1
  %516 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %510
  %517 = load float, float* %516, align 4
  br label %518

518:                                              ; preds = %518, %509
  %519 = phi i64 [ 0, %509 ], [ %520, %518 ]
  %520 = add nuw nsw i64 %519, 1
  %521 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %510, i64 %520
  %522 = load float, float* %521, align 4
  %523 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %14, i64 0, i64 %510, i64 %519
  %524 = load float, float* %523, align 4
  %525 = fmul float %514, %524
  %526 = fadd float %522, %525
  %527 = fmul float %512, %526
  %528 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %515, i64 %520
  store float %527, float* %528, align 4
  %529 = fmul float %524, %517
  %530 = fmul float %514, %527
  %531 = fadd float %529, %530
  %532 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %14, i64 0, i64 %515, i64 %520
  store float %531, float* %532, align 4
  %533 = icmp eq i64 %520, 39
  br i1 %533, label %534, label %518

534:                                              ; preds = %518
  %535 = icmp eq i64 %515, %39
  br i1 %535, label %387, label %509

536:                                              ; preds = %387
  br i1 %86, label %564, label %537

537:                                              ; preds = %536, %537
  %538 = phi i64 [ %561, %537 ], [ 0, %536 ]
  %539 = phi i64 [ %562, %537 ], [ %87, %536 ]
  %540 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %538, i64 39
  %541 = bitcast float* %540 to i32*
  %542 = load i32, i32* %541, align 4
  %543 = getelementptr inbounds float, float* %1, i64 %538
  %544 = bitcast float* %543 to i32*
  store i32 %542, i32* %544, align 4
  %545 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %14, i64 0, i64 %538, i64 39
  %546 = bitcast float* %545 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = getelementptr inbounds float, float* %2, i64 %538
  %549 = bitcast float* %548 to i32*
  store i32 %547, i32* %549, align 4
  %550 = or i64 %538, 1
  %551 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %550, i64 39
  %552 = bitcast float* %551 to i32*
  %553 = load i32, i32* %552, align 4
  %554 = getelementptr inbounds float, float* %1, i64 %550
  %555 = bitcast float* %554 to i32*
  store i32 %553, i32* %555, align 4
  %556 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %14, i64 0, i64 %550, i64 39
  %557 = bitcast float* %556 to i32*
  %558 = load i32, i32* %557, align 4
  %559 = getelementptr inbounds float, float* %2, i64 %550
  %560 = bitcast float* %559 to i32*
  store i32 %558, i32* %560, align 4
  %561 = add nuw nsw i64 %538, 2
  %562 = add i64 %539, -2
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %564, label %537

564:                                              ; preds = %537, %536
  %565 = phi i64 [ 0, %536 ], [ %561, %537 ]
  br i1 %88, label %577, label %566

566:                                              ; preds = %564
  %567 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %565, i64 39
  %568 = bitcast float* %567 to i32*
  %569 = load i32, i32* %568, align 4
  %570 = getelementptr inbounds float, float* %1, i64 %565
  %571 = bitcast float* %570 to i32*
  store i32 %569, i32* %571, align 4
  %572 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %14, i64 0, i64 %565, i64 39
  %573 = bitcast float* %572 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = getelementptr inbounds float, float* %2, i64 %565
  %576 = bitcast float* %575 to i32*
  store i32 %574, i32* %576, align 4
  br label %577

577:                                              ; preds = %566, %564, %387
  %578 = add nuw nsw i64 %90, 1
  %579 = icmp eq i64 %578, 6
  br i1 %579, label %580, label %89

580:                                              ; preds = %577
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %15) #2
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %13) #2
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %20) #2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %19) #2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %18) #2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %17) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_Dir2Lat(double* nocapture, i32, float* nocapture, float* nocapture) local_unnamed_addr #0 {
  %5 = alloca [12 x float], align 16
  %6 = bitcast [12 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 48, i1 false)
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds double, double* %0, i64 %7
  %9 = load double, double* %8, align 8
  %10 = fptrunc double %9 to float
  %11 = add i32 %1, -1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds float, float* %2, i64 %12
  store float %10, float* %13, align 4
  %14 = fmul float %10, %10
  %15 = fsub float 1.000000e+00, %14
  %16 = tail call float @sqrtf(float %15) #3
  %17 = getelementptr inbounds float, float* %3, i64 %12
  store float %16, float* %17, align 4
  %18 = icmp sgt i32 %11, 0
  br i1 %18, label %19, label %246

19:                                               ; preds = %4, %234
  %20 = phi i64 [ %245, %234 ], [ 0, %4 ]
  %21 = phi i64 [ %237, %234 ], [ %12, %4 ]
  %22 = phi i32 [ %244, %234 ], [ %1, %4 ]
  %23 = phi float [ %240, %234 ], [ %15, %4 ]
  %24 = xor i64 %20, -1
  %25 = add i64 %24, %12
  %26 = add i64 %25, -4
  %27 = lshr i64 %26, 2
  %28 = add nuw nsw i64 %27, 1
  %29 = trunc i64 %20 to i32
  %30 = sub i32 %1, %29
  %31 = zext i32 %30 to i64
  %32 = trunc i64 %20 to i32
  %33 = sub i32 %1, %32
  %34 = zext i32 %33 to i64
  %35 = add nsw i64 %34, -2
  %36 = trunc i64 %20 to i32
  %37 = sub i32 %11, %36
  %38 = trunc i64 %20 to i32
  %39 = sub i32 %1, %38
  %40 = zext i32 %39 to i64
  %41 = add nsw i64 %40, -1
  %42 = xor i64 %20, -1
  %43 = add i64 %42, %12
  %44 = fdiv float 1.000000e+00, %23
  %45 = getelementptr inbounds float, float* %2, i64 %21
  %46 = load float, float* %45, align 4
  %47 = add i64 %21, 1
  %48 = zext i32 %22 to i64
  %49 = icmp ult i64 %41, 4
  br i1 %49, label %50, label %74

50:                                               ; preds = %129, %74, %19
  %51 = phi i64 [ 1, %74 ], [ 1, %19 ], [ %82, %129 ]
  %52 = xor i64 %51, -1
  %53 = and i64 %31, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %70

55:                                               ; preds = %50
  %56 = getelementptr inbounds double, double* %0, i64 %51
  %57 = load double, double* %56, align 8
  %58 = fptrunc double %57 to float
  %59 = sub i64 %47, %51
  %60 = shl i64 %59, 32
  %61 = ashr exact i64 %60, 32
  %62 = getelementptr inbounds double, double* %0, i64 %61
  %63 = load double, double* %62, align 8
  %64 = fptrunc double %63 to float
  %65 = fmul float %46, %64
  %66 = fsub float %58, %65
  %67 = fmul float %44, %66
  %68 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %51
  store float %67, float* %68, align 4
  %69 = add nuw nsw i64 %51, 1
  br label %70

70:                                               ; preds = %55, %50
  %71 = phi i64 [ %69, %55 ], [ %51, %50 ]
  %72 = sub nsw i64 0, %31
  %73 = icmp eq i64 %52, %72
  br i1 %73, label %131, label %195

74:                                               ; preds = %19
  %75 = trunc i64 %35 to i32
  %76 = sub i32 %37, %75
  %77 = icmp sgt i32 %76, %37
  %78 = icmp ugt i64 %35, 4294967295
  %79 = or i1 %77, %78
  br i1 %79, label %50, label %80

80:                                               ; preds = %74
  %81 = and i64 %41, -4
  %82 = or i64 %81, 1
  %83 = insertelement <2 x float> undef, float %46, i32 0
  %84 = shufflevector <2 x float> %83, <2 x float> undef, <2 x i32> zeroinitializer
  %85 = insertelement <2 x float> undef, float %46, i32 0
  %86 = shufflevector <2 x float> %85, <2 x float> undef, <2 x i32> zeroinitializer
  %87 = insertelement <2 x float> undef, float %44, i32 0
  %88 = shufflevector <2 x float> %87, <2 x float> undef, <2 x i32> zeroinitializer
  %89 = insertelement <2 x float> undef, float %44, i32 0
  %90 = shufflevector <2 x float> %89, <2 x float> undef, <2 x i32> zeroinitializer
  br label %91

91:                                               ; preds = %91, %80
  %92 = phi i64 [ 0, %80 ], [ %127, %91 ]
  %93 = or i64 %92, 1
  %94 = getelementptr inbounds double, double* %0, i64 %93
  %95 = bitcast double* %94 to <2 x double>*
  %96 = load <2 x double>, <2 x double>* %95, align 8
  %97 = getelementptr inbounds double, double* %94, i64 2
  %98 = bitcast double* %97 to <2 x double>*
  %99 = load <2 x double>, <2 x double>* %98, align 8
  %100 = fptrunc <2 x double> %96 to <2 x float>
  %101 = fptrunc <2 x double> %99 to <2 x float>
  %102 = sub i64 %47, %93
  %103 = shl i64 %102, 32
  %104 = ashr exact i64 %103, 32
  %105 = getelementptr inbounds double, double* %0, i64 %104
  %106 = getelementptr inbounds double, double* %105, i64 -1
  %107 = bitcast double* %106 to <2 x double>*
  %108 = load <2 x double>, <2 x double>* %107, align 8
  %109 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %110 = getelementptr inbounds double, double* %105, i64 -2
  %111 = getelementptr inbounds double, double* %110, i64 -1
  %112 = bitcast double* %111 to <2 x double>*
  %113 = load <2 x double>, <2 x double>* %112, align 8
  %114 = shufflevector <2 x double> %113, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %115 = fptrunc <2 x double> %109 to <2 x float>
  %116 = fptrunc <2 x double> %114 to <2 x float>
  %117 = fmul <2 x float> %84, %115
  %118 = fmul <2 x float> %86, %116
  %119 = fsub <2 x float> %100, %117
  %120 = fsub <2 x float> %101, %118
  %121 = fmul <2 x float> %88, %119
  %122 = fmul <2 x float> %90, %120
  %123 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %93
  %124 = bitcast float* %123 to <2 x float>*
  store <2 x float> %121, <2 x float>* %124, align 4
  %125 = getelementptr inbounds float, float* %123, i64 2
  %126 = bitcast float* %125 to <2 x float>*
  store <2 x float> %122, <2 x float>* %126, align 4
  %127 = add i64 %92, 4
  %128 = icmp eq i64 %127, %81
  br i1 %128, label %129, label %91, !llvm.loop !8

129:                                              ; preds = %91
  %130 = icmp eq i64 %41, %81
  br i1 %130, label %131, label %50

131:                                              ; preds = %70, %195, %129
  %132 = icmp sgt i64 %21, 1
  br i1 %132, label %133, label %234

133:                                              ; preds = %131
  %134 = icmp ult i64 %43, 4
  br i1 %134, label %135, label %137

135:                                              ; preds = %193, %133
  %136 = phi i64 [ 1, %133 ], [ %139, %193 ]
  br label %226

137:                                              ; preds = %133
  %138 = and i64 %43, -4
  %139 = or i64 %138, 1
  %140 = and i64 %28, 1
  %141 = icmp eq i64 %27, 0
  br i1 %141, label %176, label %142

142:                                              ; preds = %137
  %143 = sub nuw nsw i64 %28, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i64 [ 0, %142 ], [ %173, %144 ]
  %146 = phi i64 [ %143, %142 ], [ %174, %144 ]
  %147 = or i64 %145, 1
  %148 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %147
  %149 = bitcast float* %148 to <2 x float>*
  %150 = load <2 x float>, <2 x float>* %149, align 4
  %151 = getelementptr inbounds float, float* %148, i64 2
  %152 = bitcast float* %151 to <2 x float>*
  %153 = load <2 x float>, <2 x float>* %152, align 4
  %154 = fpext <2 x float> %150 to <2 x double>
  %155 = fpext <2 x float> %153 to <2 x double>
  %156 = getelementptr inbounds double, double* %0, i64 %147
  %157 = bitcast double* %156 to <2 x double>*
  store <2 x double> %154, <2 x double>* %157, align 8
  %158 = getelementptr inbounds double, double* %156, i64 2
  %159 = bitcast double* %158 to <2 x double>*
  store <2 x double> %155, <2 x double>* %159, align 8
  %160 = or i64 %145, 5
  %161 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %160
  %162 = bitcast float* %161 to <2 x float>*
  %163 = load <2 x float>, <2 x float>* %162, align 4
  %164 = getelementptr inbounds float, float* %161, i64 2
  %165 = bitcast float* %164 to <2 x float>*
  %166 = load <2 x float>, <2 x float>* %165, align 4
  %167 = fpext <2 x float> %163 to <2 x double>
  %168 = fpext <2 x float> %166 to <2 x double>
  %169 = getelementptr inbounds double, double* %0, i64 %160
  %170 = bitcast double* %169 to <2 x double>*
  store <2 x double> %167, <2 x double>* %170, align 8
  %171 = getelementptr inbounds double, double* %169, i64 2
  %172 = bitcast double* %171 to <2 x double>*
  store <2 x double> %168, <2 x double>* %172, align 8
  %173 = add i64 %145, 8
  %174 = add i64 %146, -2
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %144, !llvm.loop !9

176:                                              ; preds = %144, %137
  %177 = phi i64 [ 0, %137 ], [ %173, %144 ]
  %178 = icmp eq i64 %140, 0
  br i1 %178, label %193, label %179

179:                                              ; preds = %176
  %180 = or i64 %177, 1
  %181 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %180
  %182 = bitcast float* %181 to <2 x float>*
  %183 = load <2 x float>, <2 x float>* %182, align 4
  %184 = getelementptr inbounds float, float* %181, i64 2
  %185 = bitcast float* %184 to <2 x float>*
  %186 = load <2 x float>, <2 x float>* %185, align 4
  %187 = fpext <2 x float> %183 to <2 x double>
  %188 = fpext <2 x float> %186 to <2 x double>
  %189 = getelementptr inbounds double, double* %0, i64 %180
  %190 = bitcast double* %189 to <2 x double>*
  store <2 x double> %187, <2 x double>* %190, align 8
  %191 = getelementptr inbounds double, double* %189, i64 2
  %192 = bitcast double* %191 to <2 x double>*
  store <2 x double> %188, <2 x double>* %192, align 8
  br label %193

193:                                              ; preds = %176, %179
  %194 = icmp eq i64 %43, %138
  br i1 %194, label %234, label %135

195:                                              ; preds = %70, %195
  %196 = phi i64 [ %224, %195 ], [ %71, %70 ]
  %197 = getelementptr inbounds double, double* %0, i64 %196
  %198 = load double, double* %197, align 8
  %199 = fptrunc double %198 to float
  %200 = sub i64 %47, %196
  %201 = shl i64 %200, 32
  %202 = ashr exact i64 %201, 32
  %203 = getelementptr inbounds double, double* %0, i64 %202
  %204 = load double, double* %203, align 8
  %205 = fptrunc double %204 to float
  %206 = fmul float %46, %205
  %207 = fsub float %199, %206
  %208 = fmul float %44, %207
  %209 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %196
  store float %208, float* %209, align 4
  %210 = add nuw nsw i64 %196, 1
  %211 = getelementptr inbounds double, double* %0, i64 %210
  %212 = load double, double* %211, align 8
  %213 = fptrunc double %212 to float
  %214 = sub i64 %47, %210
  %215 = shl i64 %214, 32
  %216 = ashr exact i64 %215, 32
  %217 = getelementptr inbounds double, double* %0, i64 %216
  %218 = load double, double* %217, align 8
  %219 = fptrunc double %218 to float
  %220 = fmul float %46, %219
  %221 = fsub float %213, %220
  %222 = fmul float %44, %221
  %223 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %210
  store float %222, float* %223, align 4
  %224 = add nuw nsw i64 %196, 2
  %225 = icmp eq i64 %224, %48
  br i1 %225, label %131, label %195, !llvm.loop !10

226:                                              ; preds = %135, %226
  %227 = phi i64 [ %232, %226 ], [ %136, %135 ]
  %228 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %227
  %229 = load float, float* %228, align 4
  %230 = fpext float %229 to double
  %231 = getelementptr inbounds double, double* %0, i64 %227
  store double %230, double* %231, align 8
  %232 = add nuw nsw i64 %227, 1
  %233 = icmp eq i64 %232, %21
  br i1 %233, label %234, label %226, !llvm.loop !11

234:                                              ; preds = %226, %193, %131
  %235 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 %21
  %236 = load float, float* %235, align 4
  %237 = add nsw i64 %21, -1
  %238 = getelementptr inbounds float, float* %2, i64 %237
  store float %236, float* %238, align 4
  %239 = fmul float %236, %236
  %240 = fsub float 1.000000e+00, %239
  %241 = tail call float @sqrtf(float %240) #3
  %242 = getelementptr inbounds float, float* %3, i64 %237
  store float %241, float* %242, align 4
  %243 = icmp sgt i64 %237, 0
  %244 = add i32 %22, -1
  %245 = add i64 %20, 1
  br i1 %243, label %19, label %246

246:                                              ; preds = %234, %4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_NormLatticeFilterAr(i32, float* nocapture, float* nocapture, double* nocapture readonly, double* nocapture readonly, float* nocapture) local_unnamed_addr #0 {
  %7 = alloca [12 x float], align 16
  %8 = alloca [12 x float], align 16
  %9 = alloca [12 x float], align 16
  %10 = alloca [13 x double], align 16
  %11 = alloca [13 x [40 x float]], align 16
  %12 = alloca [13 x [40 x float]], align 16
  %13 = add i32 %0, 1
  %14 = bitcast [12 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 48, i1 false)
  %15 = bitcast [12 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %15) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 48, i1 false)
  %16 = bitcast [13 x double]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %16) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -1, i64 104, i1 false)
  %17 = bitcast [13 x [40 x float]]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %17) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 2080, i1 false)
  %18 = bitcast [13 x [40 x float]]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %18) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 2080, i1 false)
  %19 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 0
  %20 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 1
  %21 = bitcast double* %20 to i8*
  %22 = sext i32 %0 to i64
  %23 = shl nsw i64 %22, 3
  %24 = bitcast [12 x float]* %7 to i8*
  %25 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %22
  %26 = add i32 %0, -1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %27
  %29 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %27
  %30 = icmp sgt i32 %26, 0
  %31 = icmp sgt i32 %0, 0
  %32 = icmp sgt i32 %26, -1
  %33 = bitcast [13 x [40 x float]]* %11 to i32*
  %34 = bitcast [13 x [40 x float]]* %12 to i32*
  %35 = icmp slt i32 %0, 0
  %36 = sext i32 %13 to i64
  %37 = zext i32 %13 to i64
  %38 = zext i32 %0 to i64
  %39 = add nsw i64 %38, -1
  %40 = and i64 %38, 7
  %41 = icmp ult i64 %39, 7
  %42 = sub nsw i64 %38, %40
  %43 = icmp eq i64 %40, 0
  %44 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 0
  %45 = bitcast float* %44 to <2 x float>*
  %46 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 2
  %47 = bitcast float* %46 to <2 x float>*
  %48 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 4
  %49 = bitcast float* %48 to <2 x float>*
  %50 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 6
  %51 = bitcast float* %50 to <2 x float>*
  %52 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 8
  %53 = bitcast float* %52 to <2 x float>*
  %54 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 10
  %55 = bitcast float* %54 to <2 x float>*
  %56 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 12
  %57 = bitcast float* %56 to <2 x float>*
  %58 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 14
  %59 = bitcast float* %58 to <2 x float>*
  %60 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 16
  %61 = bitcast float* %60 to <2 x float>*
  %62 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 18
  %63 = bitcast float* %62 to <2 x float>*
  %64 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 20
  %65 = bitcast float* %64 to <2 x float>*
  %66 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 22
  %67 = bitcast float* %66 to <2 x float>*
  %68 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 24
  %69 = bitcast float* %68 to <2 x float>*
  %70 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 26
  %71 = bitcast float* %70 to <2 x float>*
  %72 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 28
  %73 = bitcast float* %72 to <2 x float>*
  %74 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 30
  %75 = bitcast float* %74 to <2 x float>*
  %76 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 32
  %77 = bitcast float* %76 to <2 x float>*
  %78 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 34
  %79 = bitcast float* %78 to <2 x float>*
  %80 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 36
  %81 = bitcast float* %80 to <2 x float>*
  %82 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %22, i64 38
  %83 = bitcast float* %82 to <2 x float>*
  %84 = and i64 %37, 1
  %85 = icmp eq i32 %0, 0
  %86 = sub nsw i64 %37, %84
  %87 = icmp eq i64 %84, 0
  br label %88

88:                                               ; preds = %603, %6
  %89 = phi i64 [ 0, %6 ], [ %604, %603 ]
  %90 = mul nsw i64 %89, %36
  store double 1.000000e+00, double* %19, align 16
  %91 = getelementptr inbounds double, double* %4, i64 %90
  %92 = getelementptr inbounds double, double* %91, i64 1
  %93 = bitcast double* %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %93, i64 %23, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %24) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -1, i64 48, i1 false) #2
  %94 = load double, double* %25, align 8
  %95 = fptrunc double %94 to float
  store float %95, float* %28, align 4
  %96 = fmul float %95, %95
  %97 = fsub float 1.000000e+00, %96
  %98 = tail call float @sqrtf(float %97) #3
  store float %98, float* %29, align 4
  br i1 %30, label %99, label %324

99:                                               ; preds = %88, %312
  %100 = phi i64 [ %323, %312 ], [ 0, %88 ]
  %101 = phi float [ %314, %312 ], [ %95, %88 ]
  %102 = phi i64 [ %315, %312 ], [ %27, %88 ]
  %103 = phi i32 [ %322, %312 ], [ %0, %88 ]
  %104 = phi float [ %318, %312 ], [ %97, %88 ]
  %105 = xor i64 %100, -1
  %106 = add i64 %105, %27
  %107 = add i64 %106, -4
  %108 = lshr i64 %107, 2
  %109 = add nuw nsw i64 %108, 1
  %110 = trunc i64 %100 to i32
  %111 = sub i32 %0, %110
  %112 = zext i32 %111 to i64
  %113 = trunc i64 %100 to i32
  %114 = sub i32 %0, %113
  %115 = zext i32 %114 to i64
  %116 = add nsw i64 %115, -2
  %117 = trunc i64 %100 to i32
  %118 = sub i32 %26, %117
  %119 = trunc i64 %100 to i32
  %120 = sub i32 %0, %119
  %121 = zext i32 %120 to i64
  %122 = add nsw i64 %121, -1
  %123 = xor i64 %100, -1
  %124 = add i64 %123, %27
  %125 = fdiv float 1.000000e+00, %104
  %126 = add nsw i64 %102, 1
  %127 = zext i32 %103 to i64
  %128 = icmp ult i64 %122, 4
  br i1 %128, label %129, label %153

129:                                              ; preds = %207, %153, %99
  %130 = phi i64 [ 1, %153 ], [ 1, %99 ], [ %161, %207 ]
  %131 = xor i64 %130, -1
  %132 = and i64 %112, 1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %149

134:                                              ; preds = %129
  %135 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %130
  %136 = load double, double* %135, align 8
  %137 = fptrunc double %136 to float
  %138 = sub i64 %126, %130
  %139 = shl i64 %138, 32
  %140 = ashr exact i64 %139, 32
  %141 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %140
  %142 = load double, double* %141, align 8
  %143 = fptrunc double %142 to float
  %144 = fmul float %101, %143
  %145 = fsub float %137, %144
  %146 = fmul float %125, %145
  %147 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %130
  store float %146, float* %147, align 4
  %148 = add nuw nsw i64 %130, 1
  br label %149

149:                                              ; preds = %134, %129
  %150 = phi i64 [ %148, %134 ], [ %130, %129 ]
  %151 = sub nsw i64 0, %112
  %152 = icmp eq i64 %131, %151
  br i1 %152, label %209, label %273

153:                                              ; preds = %99
  %154 = trunc i64 %116 to i32
  %155 = sub i32 %118, %154
  %156 = icmp sgt i32 %155, %118
  %157 = icmp ugt i64 %116, 4294967295
  %158 = or i1 %156, %157
  br i1 %158, label %129, label %159

159:                                              ; preds = %153
  %160 = and i64 %122, -4
  %161 = or i64 %160, 1
  %162 = insertelement <2 x float> undef, float %101, i32 0
  %163 = shufflevector <2 x float> %162, <2 x float> undef, <2 x i32> zeroinitializer
  %164 = insertelement <2 x float> undef, float %101, i32 0
  %165 = shufflevector <2 x float> %164, <2 x float> undef, <2 x i32> zeroinitializer
  %166 = insertelement <2 x float> undef, float %125, i32 0
  %167 = shufflevector <2 x float> %166, <2 x float> undef, <2 x i32> zeroinitializer
  %168 = insertelement <2 x float> undef, float %125, i32 0
  %169 = shufflevector <2 x float> %168, <2 x float> undef, <2 x i32> zeroinitializer
  br label %170

170:                                              ; preds = %170, %159
  %171 = phi i64 [ 0, %159 ], [ %205, %170 ]
  %172 = or i64 %171, 1
  %173 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %172
  %174 = bitcast double* %173 to <2 x double>*
  %175 = load <2 x double>, <2 x double>* %174, align 8
  %176 = getelementptr inbounds double, double* %173, i64 2
  %177 = bitcast double* %176 to <2 x double>*
  %178 = load <2 x double>, <2 x double>* %177, align 8
  %179 = fptrunc <2 x double> %175 to <2 x float>
  %180 = fptrunc <2 x double> %178 to <2 x float>
  %181 = sub i64 %126, %172
  %182 = shl i64 %181, 32
  %183 = ashr exact i64 %182, 32
  %184 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %183
  %185 = getelementptr inbounds double, double* %184, i64 -1
  %186 = bitcast double* %185 to <2 x double>*
  %187 = load <2 x double>, <2 x double>* %186, align 8
  %188 = shufflevector <2 x double> %187, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %189 = getelementptr inbounds double, double* %184, i64 -3
  %190 = bitcast double* %189 to <2 x double>*
  %191 = load <2 x double>, <2 x double>* %190, align 8
  %192 = shufflevector <2 x double> %191, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %193 = fptrunc <2 x double> %188 to <2 x float>
  %194 = fptrunc <2 x double> %192 to <2 x float>
  %195 = fmul <2 x float> %163, %193
  %196 = fmul <2 x float> %165, %194
  %197 = fsub <2 x float> %179, %195
  %198 = fsub <2 x float> %180, %196
  %199 = fmul <2 x float> %167, %197
  %200 = fmul <2 x float> %169, %198
  %201 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %172
  %202 = bitcast float* %201 to <2 x float>*
  store <2 x float> %199, <2 x float>* %202, align 4
  %203 = getelementptr inbounds float, float* %201, i64 2
  %204 = bitcast float* %203 to <2 x float>*
  store <2 x float> %200, <2 x float>* %204, align 4
  %205 = add i64 %171, 4
  %206 = icmp eq i64 %205, %160
  br i1 %206, label %207, label %170, !llvm.loop !12

207:                                              ; preds = %170
  %208 = icmp eq i64 %122, %160
  br i1 %208, label %209, label %129

209:                                              ; preds = %149, %273, %207
  %210 = icmp sgt i64 %102, 1
  br i1 %210, label %211, label %312

211:                                              ; preds = %209
  %212 = icmp ult i64 %124, 4
  br i1 %212, label %213, label %215

213:                                              ; preds = %271, %211
  %214 = phi i64 [ 1, %211 ], [ %217, %271 ]
  br label %304

215:                                              ; preds = %211
  %216 = and i64 %124, -4
  %217 = or i64 %216, 1
  %218 = and i64 %109, 1
  %219 = icmp eq i64 %108, 0
  br i1 %219, label %254, label %220

220:                                              ; preds = %215
  %221 = sub nuw nsw i64 %109, %218
  br label %222

222:                                              ; preds = %222, %220
  %223 = phi i64 [ 0, %220 ], [ %251, %222 ]
  %224 = phi i64 [ %221, %220 ], [ %252, %222 ]
  %225 = or i64 %223, 1
  %226 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %225
  %227 = bitcast float* %226 to <2 x float>*
  %228 = load <2 x float>, <2 x float>* %227, align 4
  %229 = getelementptr inbounds float, float* %226, i64 2
  %230 = bitcast float* %229 to <2 x float>*
  %231 = load <2 x float>, <2 x float>* %230, align 4
  %232 = fpext <2 x float> %228 to <2 x double>
  %233 = fpext <2 x float> %231 to <2 x double>
  %234 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %225
  %235 = bitcast double* %234 to <2 x double>*
  store <2 x double> %232, <2 x double>* %235, align 8
  %236 = getelementptr inbounds double, double* %234, i64 2
  %237 = bitcast double* %236 to <2 x double>*
  store <2 x double> %233, <2 x double>* %237, align 8
  %238 = or i64 %223, 5
  %239 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %238
  %240 = bitcast float* %239 to <2 x float>*
  %241 = load <2 x float>, <2 x float>* %240, align 4
  %242 = getelementptr inbounds float, float* %239, i64 2
  %243 = bitcast float* %242 to <2 x float>*
  %244 = load <2 x float>, <2 x float>* %243, align 4
  %245 = fpext <2 x float> %241 to <2 x double>
  %246 = fpext <2 x float> %244 to <2 x double>
  %247 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %238
  %248 = bitcast double* %247 to <2 x double>*
  store <2 x double> %245, <2 x double>* %248, align 8
  %249 = getelementptr inbounds double, double* %247, i64 2
  %250 = bitcast double* %249 to <2 x double>*
  store <2 x double> %246, <2 x double>* %250, align 8
  %251 = add i64 %223, 8
  %252 = add i64 %224, -2
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %254, label %222, !llvm.loop !13

254:                                              ; preds = %222, %215
  %255 = phi i64 [ 0, %215 ], [ %251, %222 ]
  %256 = icmp eq i64 %218, 0
  br i1 %256, label %271, label %257

257:                                              ; preds = %254
  %258 = or i64 %255, 1
  %259 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %258
  %260 = bitcast float* %259 to <2 x float>*
  %261 = load <2 x float>, <2 x float>* %260, align 4
  %262 = getelementptr inbounds float, float* %259, i64 2
  %263 = bitcast float* %262 to <2 x float>*
  %264 = load <2 x float>, <2 x float>* %263, align 4
  %265 = fpext <2 x float> %261 to <2 x double>
  %266 = fpext <2 x float> %264 to <2 x double>
  %267 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %258
  %268 = bitcast double* %267 to <2 x double>*
  store <2 x double> %265, <2 x double>* %268, align 8
  %269 = getelementptr inbounds double, double* %267, i64 2
  %270 = bitcast double* %269 to <2 x double>*
  store <2 x double> %266, <2 x double>* %270, align 8
  br label %271

271:                                              ; preds = %254, %257
  %272 = icmp eq i64 %124, %216
  br i1 %272, label %312, label %213

273:                                              ; preds = %149, %273
  %274 = phi i64 [ %302, %273 ], [ %150, %149 ]
  %275 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %274
  %276 = load double, double* %275, align 8
  %277 = fptrunc double %276 to float
  %278 = sub i64 %126, %274
  %279 = shl i64 %278, 32
  %280 = ashr exact i64 %279, 32
  %281 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %280
  %282 = load double, double* %281, align 8
  %283 = fptrunc double %282 to float
  %284 = fmul float %101, %283
  %285 = fsub float %277, %284
  %286 = fmul float %125, %285
  %287 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %274
  store float %286, float* %287, align 4
  %288 = add nuw nsw i64 %274, 1
  %289 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %288
  %290 = load double, double* %289, align 8
  %291 = fptrunc double %290 to float
  %292 = sub i64 %126, %288
  %293 = shl i64 %292, 32
  %294 = ashr exact i64 %293, 32
  %295 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %294
  %296 = load double, double* %295, align 8
  %297 = fptrunc double %296 to float
  %298 = fmul float %101, %297
  %299 = fsub float %291, %298
  %300 = fmul float %125, %299
  %301 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %288
  store float %300, float* %301, align 4
  %302 = add nuw nsw i64 %274, 2
  %303 = icmp eq i64 %302, %127
  br i1 %303, label %209, label %273, !llvm.loop !14

304:                                              ; preds = %213, %304
  %305 = phi i64 [ %310, %304 ], [ %214, %213 ]
  %306 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %305
  %307 = load float, float* %306, align 4
  %308 = fpext float %307 to double
  %309 = getelementptr inbounds [13 x double], [13 x double]* %10, i64 0, i64 %305
  store double %308, double* %309, align 8
  %310 = add nuw nsw i64 %305, 1
  %311 = icmp eq i64 %310, %102
  br i1 %311, label %312, label %304, !llvm.loop !15

312:                                              ; preds = %304, %271, %209
  %313 = getelementptr inbounds [12 x float], [12 x float]* %7, i64 0, i64 %102
  %314 = load float, float* %313, align 4
  %315 = add nsw i64 %102, -1
  %316 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %315
  store float %314, float* %316, align 4
  %317 = fmul float %314, %314
  %318 = fsub float 1.000000e+00, %317
  %319 = tail call float @sqrtf(float %318) #3
  %320 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %315
  store float %319, float* %320, align 4
  %321 = icmp sgt i64 %315, 0
  %322 = add i32 %103, -1
  %323 = add i64 %100, 1
  br i1 %321, label %99, label %324

324:                                              ; preds = %312, %88
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %24) #2
  %325 = load double, double* %91, align 8
  %326 = fptrunc double %325 to float
  br i1 %31, label %327, label %380

327:                                              ; preds = %324
  br i1 %41, label %366, label %328

328:                                              ; preds = %327, %328
  %329 = phi i64 [ %363, %328 ], [ 0, %327 ]
  %330 = phi float [ %362, %328 ], [ %326, %327 ]
  %331 = phi i64 [ %364, %328 ], [ %42, %327 ]
  %332 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %329
  %333 = load float, float* %332, align 16
  %334 = fmul float %330, %333
  %335 = or i64 %329, 1
  %336 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %335
  %337 = load float, float* %336, align 4
  %338 = fmul float %334, %337
  %339 = or i64 %329, 2
  %340 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %339
  %341 = load float, float* %340, align 8
  %342 = fmul float %338, %341
  %343 = or i64 %329, 3
  %344 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %343
  %345 = load float, float* %344, align 4
  %346 = fmul float %342, %345
  %347 = or i64 %329, 4
  %348 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %347
  %349 = load float, float* %348, align 16
  %350 = fmul float %346, %349
  %351 = or i64 %329, 5
  %352 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %351
  %353 = load float, float* %352, align 4
  %354 = fmul float %350, %353
  %355 = or i64 %329, 6
  %356 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %355
  %357 = load float, float* %356, align 8
  %358 = fmul float %354, %357
  %359 = or i64 %329, 7
  %360 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %359
  %361 = load float, float* %360, align 4
  %362 = fmul float %358, %361
  %363 = add nuw nsw i64 %329, 8
  %364 = add i64 %331, -8
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %328

366:                                              ; preds = %328, %327
  %367 = phi float [ undef, %327 ], [ %362, %328 ]
  %368 = phi i64 [ 0, %327 ], [ %363, %328 ]
  %369 = phi float [ %326, %327 ], [ %362, %328 ]
  br i1 %43, label %380, label %370

370:                                              ; preds = %366, %370
  %371 = phi i64 [ %377, %370 ], [ %368, %366 ]
  %372 = phi float [ %376, %370 ], [ %369, %366 ]
  %373 = phi i64 [ %378, %370 ], [ %40, %366 ]
  %374 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %371
  %375 = load float, float* %374, align 4
  %376 = fmul float %372, %375
  %377 = add nuw nsw i64 %371, 1
  %378 = add i64 %373, -1
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %370, !llvm.loop !16

380:                                              ; preds = %366, %370, %324
  %381 = phi float [ %326, %324 ], [ %367, %366 ], [ %376, %370 ]
  %382 = mul nuw nsw i64 %89, 40
  %383 = fdiv float 1.000000e+00, %381
  %384 = insertelement <2 x float> undef, float %383, i32 0
  %385 = shufflevector <2 x float> %384, <2 x float> undef, <2 x i32> zeroinitializer
  %386 = getelementptr inbounds double, double* %3, i64 %382
  %387 = bitcast double* %386 to <2 x double>*
  %388 = load <2 x double>, <2 x double>* %387, align 8
  %389 = fptrunc <2 x double> %388 to <2 x float>
  %390 = fmul <2 x float> %385, %389
  store <2 x float> %390, <2 x float>* %45, align 16
  %391 = or i64 %382, 2
  %392 = getelementptr inbounds double, double* %3, i64 %391
  %393 = bitcast double* %392 to <2 x double>*
  %394 = load <2 x double>, <2 x double>* %393, align 8
  %395 = fptrunc <2 x double> %394 to <2 x float>
  %396 = fmul <2 x float> %385, %395
  store <2 x float> %396, <2 x float>* %47, align 8
  %397 = or i64 %382, 4
  %398 = getelementptr inbounds double, double* %3, i64 %397
  %399 = bitcast double* %398 to <2 x double>*
  %400 = load <2 x double>, <2 x double>* %399, align 8
  %401 = fptrunc <2 x double> %400 to <2 x float>
  %402 = fmul <2 x float> %385, %401
  store <2 x float> %402, <2 x float>* %49, align 16
  %403 = or i64 %382, 6
  %404 = getelementptr inbounds double, double* %3, i64 %403
  %405 = bitcast double* %404 to <2 x double>*
  %406 = load <2 x double>, <2 x double>* %405, align 8
  %407 = fptrunc <2 x double> %406 to <2 x float>
  %408 = fmul <2 x float> %385, %407
  store <2 x float> %408, <2 x float>* %51, align 8
  %409 = add nuw nsw i64 %382, 8
  %410 = getelementptr inbounds double, double* %3, i64 %409
  %411 = bitcast double* %410 to <2 x double>*
  %412 = load <2 x double>, <2 x double>* %411, align 8
  %413 = fptrunc <2 x double> %412 to <2 x float>
  %414 = fmul <2 x float> %385, %413
  store <2 x float> %414, <2 x float>* %53, align 16
  %415 = add nuw nsw i64 %382, 10
  %416 = getelementptr inbounds double, double* %3, i64 %415
  %417 = bitcast double* %416 to <2 x double>*
  %418 = load <2 x double>, <2 x double>* %417, align 8
  %419 = fptrunc <2 x double> %418 to <2 x float>
  %420 = fmul <2 x float> %385, %419
  store <2 x float> %420, <2 x float>* %55, align 8
  %421 = add nuw nsw i64 %382, 12
  %422 = getelementptr inbounds double, double* %3, i64 %421
  %423 = bitcast double* %422 to <2 x double>*
  %424 = load <2 x double>, <2 x double>* %423, align 8
  %425 = fptrunc <2 x double> %424 to <2 x float>
  %426 = fmul <2 x float> %385, %425
  store <2 x float> %426, <2 x float>* %57, align 16
  %427 = add nuw nsw i64 %382, 14
  %428 = getelementptr inbounds double, double* %3, i64 %427
  %429 = bitcast double* %428 to <2 x double>*
  %430 = load <2 x double>, <2 x double>* %429, align 8
  %431 = fptrunc <2 x double> %430 to <2 x float>
  %432 = fmul <2 x float> %385, %431
  store <2 x float> %432, <2 x float>* %59, align 8
  %433 = add nuw nsw i64 %382, 16
  %434 = getelementptr inbounds double, double* %3, i64 %433
  %435 = bitcast double* %434 to <2 x double>*
  %436 = load <2 x double>, <2 x double>* %435, align 8
  %437 = fptrunc <2 x double> %436 to <2 x float>
  %438 = fmul <2 x float> %385, %437
  store <2 x float> %438, <2 x float>* %61, align 16
  %439 = add nuw nsw i64 %382, 18
  %440 = getelementptr inbounds double, double* %3, i64 %439
  %441 = bitcast double* %440 to <2 x double>*
  %442 = load <2 x double>, <2 x double>* %441, align 8
  %443 = fptrunc <2 x double> %442 to <2 x float>
  %444 = fmul <2 x float> %385, %443
  store <2 x float> %444, <2 x float>* %63, align 8
  %445 = add nuw nsw i64 %382, 20
  %446 = getelementptr inbounds double, double* %3, i64 %445
  %447 = bitcast double* %446 to <2 x double>*
  %448 = load <2 x double>, <2 x double>* %447, align 8
  %449 = fptrunc <2 x double> %448 to <2 x float>
  %450 = fmul <2 x float> %385, %449
  store <2 x float> %450, <2 x float>* %65, align 16
  %451 = add nuw nsw i64 %382, 22
  %452 = getelementptr inbounds double, double* %3, i64 %451
  %453 = bitcast double* %452 to <2 x double>*
  %454 = load <2 x double>, <2 x double>* %453, align 8
  %455 = fptrunc <2 x double> %454 to <2 x float>
  %456 = fmul <2 x float> %385, %455
  store <2 x float> %456, <2 x float>* %67, align 8
  %457 = add nuw nsw i64 %382, 24
  %458 = getelementptr inbounds double, double* %3, i64 %457
  %459 = bitcast double* %458 to <2 x double>*
  %460 = load <2 x double>, <2 x double>* %459, align 8
  %461 = fptrunc <2 x double> %460 to <2 x float>
  %462 = fmul <2 x float> %385, %461
  store <2 x float> %462, <2 x float>* %69, align 16
  %463 = add nuw nsw i64 %382, 26
  %464 = getelementptr inbounds double, double* %3, i64 %463
  %465 = bitcast double* %464 to <2 x double>*
  %466 = load <2 x double>, <2 x double>* %465, align 8
  %467 = fptrunc <2 x double> %466 to <2 x float>
  %468 = fmul <2 x float> %385, %467
  store <2 x float> %468, <2 x float>* %71, align 8
  %469 = add nuw nsw i64 %382, 28
  %470 = getelementptr inbounds double, double* %3, i64 %469
  %471 = bitcast double* %470 to <2 x double>*
  %472 = load <2 x double>, <2 x double>* %471, align 8
  %473 = fptrunc <2 x double> %472 to <2 x float>
  %474 = fmul <2 x float> %385, %473
  store <2 x float> %474, <2 x float>* %73, align 16
  %475 = add nuw nsw i64 %382, 30
  %476 = getelementptr inbounds double, double* %3, i64 %475
  %477 = bitcast double* %476 to <2 x double>*
  %478 = load <2 x double>, <2 x double>* %477, align 8
  %479 = fptrunc <2 x double> %478 to <2 x float>
  %480 = fmul <2 x float> %385, %479
  store <2 x float> %480, <2 x float>* %75, align 8
  %481 = add nuw nsw i64 %382, 32
  %482 = getelementptr inbounds double, double* %3, i64 %481
  %483 = bitcast double* %482 to <2 x double>*
  %484 = load <2 x double>, <2 x double>* %483, align 8
  %485 = fptrunc <2 x double> %484 to <2 x float>
  %486 = fmul <2 x float> %385, %485
  store <2 x float> %486, <2 x float>* %77, align 16
  %487 = add nuw nsw i64 %382, 34
  %488 = getelementptr inbounds double, double* %3, i64 %487
  %489 = bitcast double* %488 to <2 x double>*
  %490 = load <2 x double>, <2 x double>* %489, align 8
  %491 = fptrunc <2 x double> %490 to <2 x float>
  %492 = fmul <2 x float> %385, %491
  store <2 x float> %492, <2 x float>* %79, align 8
  %493 = add nuw nsw i64 %382, 36
  %494 = getelementptr inbounds double, double* %3, i64 %493
  %495 = bitcast double* %494 to <2 x double>*
  %496 = load <2 x double>, <2 x double>* %495, align 8
  %497 = fptrunc <2 x double> %496 to <2 x float>
  %498 = fmul <2 x float> %385, %497
  store <2 x float> %498, <2 x float>* %81, align 16
  %499 = add nuw nsw i64 %382, 38
  %500 = getelementptr inbounds double, double* %3, i64 %499
  %501 = bitcast double* %500 to <2 x double>*
  %502 = load <2 x double>, <2 x double>* %501, align 8
  %503 = fptrunc <2 x double> %502 to <2 x float>
  %504 = fmul <2 x float> %385, %503
  store <2 x float> %504, <2 x float>* %83, align 8
  br i1 %32, label %505, label %526

505:                                              ; preds = %380, %505
  %506 = phi i64 [ %524, %505 ], [ %27, %380 ]
  %507 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %506
  %508 = load float, float* %507, align 4
  %509 = add nuw nsw i64 %506, 1
  %510 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %509, i64 0
  %511 = load float, float* %510, align 16
  %512 = fmul float %508, %511
  %513 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %506
  %514 = load float, float* %513, align 4
  %515 = getelementptr inbounds float, float* %2, i64 %506
  %516 = load float, float* %515, align 4
  %517 = fmul float %514, %516
  %518 = fsub float %512, %517
  %519 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %506, i64 0
  store float %518, float* %519, align 16
  %520 = fmul float %511, %514
  %521 = fmul float %508, %516
  %522 = fadd float %520, %521
  %523 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %509, i64 0
  store float %522, float* %523, align 16
  %524 = add nsw i64 %506, -1
  %525 = icmp sgt i64 %506, 0
  br i1 %525, label %505, label %526

526:                                              ; preds = %505, %380
  %527 = load i32, i32* %33, align 16
  store i32 %527, i32* %34, align 16
  br label %528

528:                                              ; preds = %552, %526
  %529 = phi i64 [ 0, %526 ], [ %530, %552 ]
  %530 = add nuw nsw i64 %529, 1
  br i1 %32, label %531, label %552

531:                                              ; preds = %528, %531
  %532 = phi i64 [ %550, %531 ], [ %27, %528 ]
  %533 = getelementptr inbounds [12 x float], [12 x float]* %9, i64 0, i64 %532
  %534 = load float, float* %533, align 4
  %535 = add nuw nsw i64 %532, 1
  %536 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %535, i64 %530
  %537 = load float, float* %536, align 4
  %538 = fmul float %534, %537
  %539 = getelementptr inbounds [12 x float], [12 x float]* %8, i64 0, i64 %532
  %540 = load float, float* %539, align 4
  %541 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %532, i64 %529
  %542 = load float, float* %541, align 4
  %543 = fmul float %540, %542
  %544 = fsub float %538, %543
  %545 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %532, i64 %530
  store float %544, float* %545, align 4
  %546 = fmul float %537, %540
  %547 = fmul float %534, %542
  %548 = fadd float %546, %547
  %549 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %535, i64 %530
  store float %548, float* %549, align 4
  %550 = add nsw i64 %532, -1
  %551 = icmp sgt i64 %532, 0
  br i1 %551, label %531, label %552

552:                                              ; preds = %531, %528
  %553 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 0, i64 %530
  %554 = bitcast float* %553 to i32*
  %555 = load i32, i32* %554, align 4
  %556 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 0, i64 %530
  %557 = bitcast float* %556 to i32*
  store i32 %555, i32* %557, align 4
  %558 = icmp eq i64 %530, 39
  br i1 %558, label %559, label %528

559:                                              ; preds = %552
  %560 = getelementptr inbounds float, float* %5, i64 %382
  %561 = bitcast float* %560 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %561, i8* nonnull align 16 %17, i64 160, i1 false)
  br i1 %35, label %603, label %562

562:                                              ; preds = %559
  br i1 %85, label %590, label %563

563:                                              ; preds = %562, %563
  %564 = phi i64 [ %587, %563 ], [ 0, %562 ]
  %565 = phi i64 [ %588, %563 ], [ %86, %562 ]
  %566 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %564, i64 39
  %567 = bitcast float* %566 to i32*
  %568 = load i32, i32* %567, align 4
  %569 = getelementptr inbounds float, float* %1, i64 %564
  %570 = bitcast float* %569 to i32*
  store i32 %568, i32* %570, align 4
  %571 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %564, i64 39
  %572 = bitcast float* %571 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = getelementptr inbounds float, float* %2, i64 %564
  %575 = bitcast float* %574 to i32*
  store i32 %573, i32* %575, align 4
  %576 = or i64 %564, 1
  %577 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %576, i64 39
  %578 = bitcast float* %577 to i32*
  %579 = load i32, i32* %578, align 4
  %580 = getelementptr inbounds float, float* %1, i64 %576
  %581 = bitcast float* %580 to i32*
  store i32 %579, i32* %581, align 4
  %582 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %576, i64 39
  %583 = bitcast float* %582 to i32*
  %584 = load i32, i32* %583, align 4
  %585 = getelementptr inbounds float, float* %2, i64 %576
  %586 = bitcast float* %585 to i32*
  store i32 %584, i32* %586, align 4
  %587 = add nuw nsw i64 %564, 2
  %588 = add i64 %565, -2
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %563

590:                                              ; preds = %563, %562
  %591 = phi i64 [ 0, %562 ], [ %587, %563 ]
  br i1 %87, label %603, label %592

592:                                              ; preds = %590
  %593 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %11, i64 0, i64 %591, i64 39
  %594 = bitcast float* %593 to i32*
  %595 = load i32, i32* %594, align 4
  %596 = getelementptr inbounds float, float* %1, i64 %591
  %597 = bitcast float* %596 to i32*
  store i32 %595, i32* %597, align 4
  %598 = getelementptr inbounds [13 x [40 x float]], [13 x [40 x float]]* %12, i64 0, i64 %591, i64 39
  %599 = bitcast float* %598 to i32*
  %600 = load i32, i32* %599, align 4
  %601 = getelementptr inbounds float, float* %2, i64 %591
  %602 = bitcast float* %601 to i32*
  store i32 %600, i32* %602, align 4
  br label %603

603:                                              ; preds = %592, %590, %559
  %604 = add nuw nsw i64 %89, 1
  %605 = icmp eq i64 %604, 6
  br i1 %605, label %606, label %88

606:                                              ; preds = %603
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %18) #2
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %17) #2
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %16) #2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %15) #2
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #2
  ret void
}

declare float @sqrtf(float) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !7, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !7, !3}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
