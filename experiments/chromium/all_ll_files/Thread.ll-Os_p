; ModuleID = '../../third_party/swiftshader/src/Common/Thread.cpp'
source_filename = "../../third_party/swiftshader/src/Common/Thread.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.sw::Thread" = type <{ i64, i8, [7 x i8] }>
%"class.sw::Event" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.sw::Thread::Entry" = type { void (i8*)*, i8*, %"class.sw::Event"* }
%union.pthread_condattr_t = type { i32 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }

@_ZN2sw6ThreadC1EPFvPvES1_ = hidden unnamed_addr alias void (%"class.sw::Thread"*, void (i8*)*, i8*), void (%"class.sw::Thread"*, void (i8*)*, i8*)* @_ZN2sw6ThreadC2EPFvPvES1_
@_ZN2sw6ThreadD1Ev = hidden unnamed_addr alias void (%"class.sw::Thread"*), void (%"class.sw::Thread"*)* @_ZN2sw6ThreadD2Ev
@_ZN2sw5EventC1Ev = hidden unnamed_addr alias void (%"class.sw::Event"*), void (%"class.sw::Event"*)* @_ZN2sw5EventC2Ev
@_ZN2sw5EventD1Ev = hidden unnamed_addr alias void (%"class.sw::Event"*), void (%"class.sw::Event"*)* @_ZN2sw5EventD2Ev

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2sw6ThreadC2EPFvPvES1_(%"class.sw::Thread"*, void (i8*)*, i8*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sw::Event", align 8
  %5 = alloca %"struct.sw::Thread::Entry", align 8
  %6 = getelementptr inbounds %"class.sw::Thread", %"class.sw::Thread"* %0, i64 0, i32 1
  store i8 0, i8* %6, align 8
  %7 = bitcast %"class.sw::Event"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 96, i1 false)
  %8 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %4, i64 0, i32 0
  %9 = call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %8, %union.pthread_condattr_t* null) #5
  %10 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %4, i64 0, i32 1
  %11 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %10, %union.pthread_mutexattr_t* null) #5
  %12 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %4, i64 0, i32 2
  store volatile i8 0, i8* %12, align 8
  %13 = bitcast %"struct.sw::Thread::Entry"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #4
  %14 = getelementptr inbounds %"struct.sw::Thread::Entry", %"struct.sw::Thread::Entry"* %5, i64 0, i32 0
  %15 = getelementptr inbounds %"struct.sw::Thread::Entry", %"struct.sw::Thread::Entry"* %5, i64 0, i32 1
  %16 = getelementptr inbounds %"struct.sw::Thread::Entry", %"struct.sw::Thread::Entry"* %5, i64 0, i32 2
  store void (i8*)* %1, void (i8*)** %14, align 8
  store i8* %2, i8** %15, align 8
  store %"class.sw::Event"* %4, %"class.sw::Event"** %16, align 8
  %17 = getelementptr inbounds %"class.sw::Thread", %"class.sw::Thread"* %0, i64 0, i32 0
  %18 = call i32 @pthread_create(i64* %17, %union.pthread_attr_t* null, i8* (i8*)* nonnull @_ZN2sw6Thread13startFunctionEPv, i8* nonnull %13) #5
  %19 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %10) #5
  %20 = load volatile i8, i8* %12, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %3, %22
  %23 = call i32 @pthread_cond_wait(%union.pthread_cond_t* nonnull %8, %union.pthread_mutex_t* %10) #5
  %24 = load volatile i8, i8* %12, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %22, label %26

26:                                               ; preds = %22, %3
  store volatile i8 0, i8* %12, align 8
  %27 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %10) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #4
  %28 = call i32 @pthread_cond_destroy(%union.pthread_cond_t* nonnull %8) #5
  %29 = call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %10) #5
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind optsize
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden noalias i8* @_ZN2sw6Thread13startFunctionEPv(i8* nocapture readonly) #0 align 2 {
  %2 = bitcast i8* %0 to void (i8*)**
  %3 = load void (i8*)*, void (i8*)** %2, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %0, i64 16
  %8 = bitcast i8* %7 to %"class.sw::Event"**
  %9 = load %"class.sw::Event"*, %"class.sw::Event"** %8, align 8
  %10 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %9, i64 0, i32 1
  %11 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %10) #5
  %12 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %9, i64 0, i32 2
  store volatile i8 1, i8* %12, align 8
  %13 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %9, i64 0, i32 0
  %14 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %13) #5
  %15 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %10) #5
  tail call void %3(i8* %6) #5
  ret i8* null
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2sw6ThreadD2Ev(%"class.sw::Thread"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sw::Thread", %"class.sw::Thread"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sw::Thread", %"class.sw::Thread"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = tail call i32 @pthread_join(i64 %7, i8** null) #5
  store i8 1, i8* %2, align 8
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2sw6Thread4joinEv(%"class.sw::Thread"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sw::Thread", %"class.sw::Thread"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sw::Thread", %"class.sw::Thread"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = tail call i32 @pthread_join(i64 %7, i8** null) #5
  store i8 1, i8* %2, align 8
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: optsize
declare i32 @pthread_join(i64, i8**) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2sw5EventC2Ev(%"class.sw::Event"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %0, i64 0, i32 0
  %3 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %2, %union.pthread_condattr_t* null) #5
  %4 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %0, i64 0, i32 1
  %5 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %4, %union.pthread_mutexattr_t* null) #5
  %6 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %0, i64 0, i32 2
  store volatile i8 0, i8* %6, align 8
  ret void
}

; Function Attrs: nounwind optsize
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2sw5EventD2Ev(%"class.sw::Event"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %0, i64 0, i32 0
  %3 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %2) #5
  %4 = getelementptr inbounds %"class.sw::Event", %"class.sw::Event"* %0, i64 0, i32 1
  %5 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %4) #5
  ret void
}

; Function Attrs: nounwind optsize
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #2

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
