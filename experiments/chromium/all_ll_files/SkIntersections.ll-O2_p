; ModuleID = '../../third_party/skia/src/pathops/SkIntersections.cpp'
source_filename = "../../third_party/skia/src/pathops/SkIntersections.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDPoint = type { double, double }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZNK15SkIntersections9closestToEddRK8SkDPointPd(%class.SkIntersections* nocapture readonly, double, double, %struct.SkDPoint* nocapture readonly dereferenceable(16), double* nocapture) local_unnamed_addr #0 align 2 {
  store double 0x47EFFFFFE0000000, double* %4, align 8
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = bitcast %struct.SkDPoint* %3 to <2 x double>*
  br label %13

11:                                               ; preds = %38, %5
  %12 = phi i32 [ -1, %5 ], [ %41, %38 ]
  ret i32 %12

13:                                               ; preds = %9, %38
  %14 = phi i8 [ %7, %9 ], [ %39, %38 ]
  %15 = phi double [ 0x47EFFFFFE0000000, %9 ], [ %40, %38 ]
  %16 = phi i64 [ 0, %9 ], [ %42, %38 ]
  %17 = phi i32 [ -1, %9 ], [ %41, %38 ]
  %18 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %16
  %19 = load double, double* %18, align 8
  %20 = fsub double %1, %19
  %21 = fsub double %2, %19
  %22 = fmul double %20, %21
  %23 = fcmp ugt double %22, 0.000000e+00
  br i1 %23, label %38, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %16, i32 0
  %26 = load <2 x double>, <2 x double>* %10, align 8
  %27 = bitcast double* %25 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fsub <2 x double> %26, %28
  %30 = fmul <2 x double> %29, %29
  %31 = extractelement <2 x double> %30, i32 0
  %32 = extractelement <2 x double> %30, i32 1
  %33 = fadd double %31, %32
  %34 = fcmp ogt double %15, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %24
  store double %33, double* %4, align 8
  %36 = trunc i64 %16 to i32
  %37 = load i8, i8* %6, align 2
  br label %38

38:                                               ; preds = %13, %24, %35
  %39 = phi i8 [ %14, %13 ], [ %37, %35 ], [ %14, %24 ]
  %40 = phi double [ %15, %13 ], [ %33, %35 ], [ %15, %24 ]
  %41 = phi i32 [ %17, %13 ], [ %36, %35 ], [ %17, %24 ]
  %42 = add nuw nsw i64 %16, 1
  %43 = zext i8 %39 to i64
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %13, label %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15SkIntersections4flipEv(%class.SkIntersections* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %6, %1
  ret void

6:                                                ; preds = %1, %6
  %7 = phi i64 [ %11, %6 ], [ 0, %1 ]
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %7
  %9 = load double, double* %8, align 8
  %10 = fsub double 1.000000e+00, %9
  store double %10, double* %8, align 8
  %11 = add nuw nsw i64 %7, 1
  %12 = load i8, i8* %2, align 2
  %13 = zext i8 %12 to i64
  %14 = icmp ult i64 %11, %13
  br i1 %14, label %6, label %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  %6 = load i16, i16* %5, align 8
  %7 = icmp eq i16 %6, 3
  br i1 %7, label %8, label %19

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = insertelement <2 x double> undef, double %1, i32 0
  %13 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> zeroinitializer
  %14 = fsub <2 x double> %11, %13
  %15 = extractelement <2 x double> %14, i32 0
  %16 = extractelement <2 x double> %14, i32 1
  %17 = fmul double %15, %16
  %18 = fcmp ugt double %17, 0.000000e+00
  br i1 %18, label %19, label %185

19:                                               ; preds = %8, %4
  %20 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %21 = load i8, i8* %20, align 2
  %22 = zext i8 %21 to i64
  %23 = icmp eq i8 %21, 0
  br i1 %23, label %127, label %24

24:                                               ; preds = %19
  %25 = zext i8 %21 to i64
  br label %26

26:                                               ; preds = %24, %106
  %27 = phi i64 [ 0, %24 ], [ %107, %106 ]
  %28 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %27
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %27
  %31 = load double, double* %30, align 8
  %32 = fcmp oeq double %29, %1
  %33 = fcmp oeq double %31, %2
  %34 = and i1 %32, %33
  br i1 %34, label %185, label %35

35:                                               ; preds = %26
  %36 = fsub double %29, %1
  %37 = tail call double @llvm.fabs.f64(double %36) #5
  %38 = fcmp olt double %37, 0x3F00000000000000
  br i1 %38, label %39, label %106

39:                                               ; preds = %35
  %40 = fsub double %31, %2
  %41 = tail call double @llvm.fabs.f64(double %40) #5
  %42 = fcmp olt double %41, 0x3F00000000000000
  br i1 %42, label %43, label %106

43:                                               ; preds = %39
  %44 = trunc i64 %27 to i32
  %45 = and i64 %27, 4294967295
  %46 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %45
  %47 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %45
  %48 = tail call double @llvm.fabs.f64(double %1) #5
  %49 = fcmp uge double %48, 0x3CD0000000000000
  %50 = tail call double @llvm.fabs.f64(double %29) #5
  %51 = fcmp olt double %50, 0x3CD0000000000000
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %75

53:                                               ; preds = %43
  %54 = fadd double %1, -1.000000e+00
  %55 = tail call double @llvm.fabs.f64(double %54) #5
  %56 = fcmp olt double %55, 0x3CD0000000000000
  br i1 %56, label %57, label %61

57:                                               ; preds = %53
  %58 = fadd double %29, -1.000000e+00
  %59 = tail call double @llvm.fabs.f64(double %58) #5
  %60 = fcmp olt double %59, 0x3CD0000000000000
  br i1 %60, label %61, label %75

61:                                               ; preds = %57, %53
  %62 = tail call double @llvm.fabs.f64(double %2) #5
  %63 = fcmp uge double %62, 0x3CD0000000000000
  %64 = tail call double @llvm.fabs.f64(double %31) #5
  %65 = fcmp olt double %64, 0x3CD0000000000000
  %66 = or i1 %63, %65
  br i1 %66, label %67, label %75

67:                                               ; preds = %61
  %68 = fadd double %2, -1.000000e+00
  %69 = tail call double @llvm.fabs.f64(double %68) #5
  %70 = fcmp olt double %69, 0x3CD0000000000000
  br i1 %70, label %71, label %185

71:                                               ; preds = %67
  %72 = fadd double %31, -1.000000e+00
  %73 = tail call double @llvm.fabs.f64(double %72) #5
  %74 = fcmp olt double %73, 0x3CD0000000000000
  br i1 %74, label %185, label %75

75:                                               ; preds = %61, %43, %57, %71
  %76 = xor i64 %27, 4294967295
  %77 = add nuw i64 %76, %22
  %78 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %45
  %79 = bitcast %struct.SkDPoint* %78 to i8*
  %80 = add nuw i64 %27, 1
  %81 = and i64 %80, 4294967295
  %82 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %81
  %83 = bitcast %struct.SkDPoint* %82 to i8*
  %84 = shl i64 %77, 32
  %85 = ashr exact i64 %84, 28
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %83, i64 %85, i1 false)
  %86 = bitcast double* %46 to i8*
  %87 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %81
  %88 = bitcast double* %87 to i8*
  %89 = ashr exact i64 %84, 29
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %88, i64 %89, i1 false)
  %90 = bitcast double* %47 to i8*
  %91 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %81
  %92 = bitcast double* %91 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %92, i64 %89, i1 false)
  %93 = shl nsw i32 -1, %44
  %94 = load i16, i16* %5, align 8
  %95 = lshr i16 %94, 1
  %96 = trunc i32 %93 to i16
  %97 = and i16 %95, %96
  %98 = sub i16 %94, %97
  store i16 %98, i16* %5, align 8
  %99 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 1
  %100 = load i16, i16* %99, align 2
  %101 = lshr i16 %100, 1
  %102 = and i16 %101, %96
  %103 = sub i16 %100, %102
  store i16 %103, i16* %99, align 2
  %104 = load i8, i8* %20, align 2
  %105 = add i8 %104, -1
  store i8 %105, i8* %20, align 2
  br label %109

106:                                              ; preds = %39, %35
  %107 = add nuw nsw i64 %27, 1
  %108 = icmp ult i64 %107, %25
  br i1 %108, label %26, label %109

109:                                              ; preds = %106, %75
  %110 = phi i8 [ %105, %75 ], [ %21, %106 ]
  %111 = zext i8 %110 to i32
  %112 = icmp eq i8 %110, 0
  br i1 %112, label %127, label %113

113:                                              ; preds = %109
  %114 = zext i8 %110 to i64
  br label %115

115:                                              ; preds = %113, %120
  %116 = phi i64 [ 0, %113 ], [ %121, %120 ]
  %117 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %116
  %118 = load double, double* %117, align 8
  %119 = fcmp ogt double %118, %1
  br i1 %119, label %125, label %120

120:                                              ; preds = %115
  %121 = add nuw nsw i64 %116, 1
  %122 = icmp ult i64 %121, %114
  br i1 %122, label %115, label %123

123:                                              ; preds = %120
  %124 = trunc i64 %121 to i32
  br label %127

125:                                              ; preds = %115
  %126 = trunc i64 %116 to i32
  br label %127

127:                                              ; preds = %19, %125, %109, %123
  %128 = phi i32 [ %111, %123 ], [ 0, %109 ], [ %111, %125 ], [ 0, %19 ]
  %129 = phi i32 [ %124, %123 ], [ 0, %109 ], [ %126, %125 ], [ 0, %19 ]
  %130 = phi i8 [ %110, %123 ], [ 0, %109 ], [ %110, %125 ], [ 0, %19 ]
  %131 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %130, %132
  br i1 %133, label %135, label %134

134:                                              ; preds = %127
  store i8 0, i8* %20, align 2
  br label %185

135:                                              ; preds = %127
  %136 = sub nsw i32 %128, %129
  %137 = icmp sgt i32 %136, 0
  br i1 %137, label %140, label %138

138:                                              ; preds = %135
  %139 = zext i32 %129 to i64
  br label %168

140:                                              ; preds = %135
  %141 = add nuw nsw i32 %129, 1
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %142
  %144 = bitcast %struct.SkDPoint* %143 to i8*
  %145 = zext i32 %129 to i64
  %146 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %145
  %147 = bitcast %struct.SkDPoint* %146 to i8*
  %148 = sext i32 %136 to i64
  %149 = shl nsw i64 %148, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %147, i64 %149, i1 false)
  %150 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %142
  %151 = bitcast double* %150 to i8*
  %152 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %145
  %153 = bitcast double* %152 to i8*
  %154 = shl nsw i64 %148, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %151, i8* align 8 %153, i64 %154, i1 false)
  %155 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %142
  %156 = bitcast double* %155 to i8*
  %157 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %145
  %158 = bitcast double* %157 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %158, i64 %154, i1 false)
  %159 = shl nsw i32 -1, %129
  %160 = load i16, i16* %5, align 8
  %161 = trunc i32 %159 to i16
  %162 = and i16 %160, %161
  %163 = add i16 %162, %160
  store i16 %163, i16* %5, align 8
  %164 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 1
  %165 = load i16, i16* %164, align 2
  %166 = and i16 %165, %161
  %167 = add i16 %166, %165
  store i16 %167, i16* %164, align 2
  br label %168

168:                                              ; preds = %138, %140
  %169 = phi i64 [ %139, %138 ], [ %145, %140 ]
  %170 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %169
  %171 = bitcast %struct.SkDPoint* %170 to i8*
  %172 = bitcast %struct.SkDPoint* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 16, i1 false)
  %173 = fcmp olt double %1, 0.000000e+00
  %174 = fcmp ogt double %1, 1.000000e+00
  %175 = or i1 %173, %174
  br i1 %175, label %185, label %176

176:                                              ; preds = %168
  %177 = fcmp olt double %2, 0.000000e+00
  %178 = fcmp ogt double %2, 1.000000e+00
  %179 = or i1 %177, %178
  br i1 %179, label %185, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %169
  store double %1, double* %181, align 8
  %182 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %169
  store double %2, double* %182, align 8
  %183 = load i8, i8* %20, align 2
  %184 = add i8 %183, 1
  store i8 %184, i8* %20, align 2
  br label %185

185:                                              ; preds = %26, %8, %67, %71, %134, %176, %168, %180
  %186 = phi i32 [ -1, %8 ], [ 0, %134 ], [ %129, %180 ], [ -1, %168 ], [ -1, %176 ], [ -1, %71 ], [ -1, %67 ], [ -1, %26 ]
  ret i32 %186
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkIntersections10insertNearEddRK8SkDPointS2_(%class.SkIntersections*, double, double, %struct.SkDPoint* nocapture readonly dereferenceable(16), %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %6 = fcmp une double %1, 0.000000e+00
  %7 = zext i1 %6 to i64
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 4, i64 %7
  store i8 1, i8* %8, align 1
  %9 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %1, double %2, %struct.SkDPoint* dereferenceable(16) %3)
  %10 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 1, i64 %7
  %11 = bitcast %struct.SkDPoint* %10 to i8*
  %12 = bitcast %struct.SkDPoint* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections16insertCoincidentEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 8
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %2, double %1, %struct.SkDPoint* dereferenceable(16) %3) #5
  br label %12

10:                                               ; preds = %4
  %11 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %0, double %1, double %2, %struct.SkDPoint* dereferenceable(16) %3) #5
  br label %12

12:                                               ; preds = %8, %10
  %13 = phi i32 [ %9, %8 ], [ %11, %10 ]
  %14 = icmp sgt i32 %13, -1
  br i1 %14, label %15, label %24

15:                                               ; preds = %12
  %16 = shl i32 1, %13
  %17 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  %18 = load i16, i16* %17, align 8
  %19 = trunc i32 %16 to i16
  %20 = or i16 %18, %19
  store i16 %20, i16* %17, align 8
  %21 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %22, %19
  store i16 %23, i16* %21, align 2
  br label %24

24:                                               ; preds = %15, %12
  ret i32 %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = shl i32 1, %1
  %4 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  %5 = load i16, i16* %4, align 8
  %6 = trunc i32 %3 to i16
  %7 = or i16 %5, %6
  store i16 %7, i16* %4, align 8
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = or i16 %9, %6
  store i16 %10, i16* %8, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkIntersections5mergeERKS_iS1_i(%class.SkIntersections* nocapture, %class.SkIntersections* nocapture readonly dereferenceable(464), i32, %class.SkIntersections* nocapture readonly dereferenceable(464), i32) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 7
  store i8 1, i8* %6, align 8
  %7 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  store i8 0, i8* %7, align 2
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  %9 = bitcast i16* %8 to i32*
  store i32 0, i32* %9, align 1
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %1, i64 0, i32 2, i64 0, i64 %10
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2
  %15 = bitcast [2 x [13 x double]]* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = sext i32 %4 to i64
  %17 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %3, i64 0, i32 2, i64 0, i64 %16
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1
  %21 = bitcast [13 x double]* %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %1, i64 0, i32 0, i64 %10
  %23 = bitcast %class.SkIntersections* %0 to i8*
  %24 = bitcast %struct.SkDPoint* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false)
  %25 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %3, i64 0, i32 0, i64 %16
  %26 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 1, i64 0
  %27 = bitcast %struct.SkDPoint* %26 to i8*
  %28 = bitcast %struct.SkDPoint* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false)
  store i8 1, i8* %7, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK15SkIntersections11mostOutsideEddRK8SkDPoint(%class.SkIntersections* nocapture readonly, double, double, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %6 = load i8, i8* %5, align 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = bitcast %struct.SkDPoint* %3 to <2 x double>*
  br label %12

10:                                               ; preds = %48, %4
  %11 = phi i32 [ -1, %4 ], [ %50, %48 ]
  ret i32 %11

12:                                               ; preds = %8, %48
  %13 = phi i8 [ %6, %8 ], [ %49, %48 ]
  %14 = phi i64 [ 0, %8 ], [ %51, %48 ]
  %15 = phi i32 [ -1, %8 ], [ %50, %48 ]
  %16 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %14
  %17 = load double, double* %16, align 8
  %18 = fsub double %1, %17
  %19 = fsub double %2, %17
  %20 = fmul double %18, %19
  %21 = fcmp ugt double %20, 0.000000e+00
  br i1 %21, label %48, label %22

22:                                               ; preds = %12
  %23 = icmp slt i32 %15, 0
  %24 = trunc i64 %14 to i32
  br i1 %23, label %48, label %25

25:                                               ; preds = %22
  %26 = sext i32 %15 to i64
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %26, i32 0
  %28 = bitcast double* %27 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = load <2 x double>, <2 x double>* %9, align 8
  %31 = fsub <2 x double> %29, %30
  %32 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %14, i32 0
  %33 = bitcast double* %32 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = fsub <2 x double> %34, %30
  %36 = shufflevector <2 x double> %35, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %37 = fmul <2 x double> %31, %36
  %38 = extractelement <2 x double> %37, i32 1
  %39 = fptrunc double %38 to float
  %40 = extractelement <2 x double> %37, i32 0
  %41 = fptrunc double %40 to float
  %42 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %39, float %41) #5
  %43 = fsub double %38, %40
  %44 = select i1 %42, double 0.000000e+00, double %43
  %45 = fcmp olt double %44, 0.000000e+00
  %46 = select i1 %45, i32 %24, i32 %15
  %47 = load i8, i8* %5, align 2
  br label %48

48:                                               ; preds = %12, %22, %25
  %49 = phi i8 [ %47, %25 ], [ %13, %12 ], [ %13, %22 ]
  %50 = phi i32 [ %46, %25 ], [ %15, %12 ], [ %24, %22 ]
  %51 = add nuw nsw i64 %14, 1
  %52 = zext i8 %49 to i64
  %53 = icmp ult i64 %51, %52
  br i1 %53, label %12, label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 2
  %5 = add i8 %4, -1
  store i8 %5, i8* %3, align 2
  %6 = zext i8 %5 to i32
  %7 = sub nsw i32 %6, %1
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %47, label %9

9:                                                ; preds = %2
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %10
  %12 = bitcast %struct.SkDPoint* %11 to i8*
  %13 = add nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %14
  %16 = bitcast %struct.SkDPoint* %15 to i8*
  %17 = sext i32 %7 to i64
  %18 = shl nsw i64 %17, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %16, i64 %18, i1 false)
  %19 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %10
  %20 = bitcast double* %19 to i8*
  %21 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %14
  %22 = bitcast double* %21 to i8*
  %23 = shl nsw i64 %17, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %22, i64 %23, i1 false)
  %24 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %10
  %25 = bitcast double* %24 to i8*
  %26 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 1, i64 %14
  %27 = bitcast double* %26 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %27, i64 %23, i1 false)
  %28 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 0
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i32
  %31 = shl i32 1, %1
  %32 = and i32 %31, %30
  %33 = lshr i32 %30, 1
  %34 = sub i32 0, %31
  %35 = and i32 %33, %34
  %36 = add nuw nsw i32 %35, %32
  %37 = trunc i32 %36 to i16
  %38 = sub i16 %29, %37
  store i16 %38, i16* %28, align 8
  %39 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 3, i64 1
  %40 = load i16, i16* %39, align 2
  %41 = lshr i16 %40, 1
  %42 = zext i16 %41 to i32
  %43 = and i32 %42, %34
  %44 = add nuw nsw i32 %43, %32
  %45 = trunc i32 %44 to i16
  %46 = sub i16 %40, %45
  store i16 %46, i16* %39, align 2
  br label %47

47:                                               ; preds = %2, %9
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

declare zeroext i1 @_Z15AlmostEqualUlpsff(float, float) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
