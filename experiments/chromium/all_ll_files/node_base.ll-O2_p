; ModuleID = '../../components/performance_manager/graph/node_base.cc'
source_filename = "../../components/performance_manager/graph/node_base.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.performance_manager::NodeBase" = type { i32 (...)**, i8, %"class.performance_manager::GraphImpl"* }
%"class.performance_manager::GraphImpl" = type <{ %"class.performance_manager::Graph", %"class.std::__1::unique_ptr", %"class.std::__1::unordered_set", %"class.std::__1::map", %"class.std::__1::map.26", %"class.ukm::UkmRecorder"*, %"class.std::__1::vector", %"class.std::__1::vector.42", %"class.std::__1::vector.49", %"class.std::__1::vector.56", %"class.std::__1::vector.63", %"class.std::__1::vector.70", %"class.performance_manager::OwnedObjects", %"class.std::__1::unique_ptr.85", %"class.std::__1::map.91", %"class.performance_manager::RegisteredObjects", i64, %"class.performance_manager::NodeBase"*, i32, [4 x i8] }>
%"class.performance_manager::Graph" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.performance_manager::SystemNodeImpl"* }
%"class.performance_manager::SystemNodeImpl" = type opaque
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.1", %"class.std::__1::__compressed_pair.8", %"class.std::__1::__compressed_pair.13", %"class.std::__1::__compressed_pair.15", [4 x i8] }>
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3", %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i64 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::map.26" = type { %"class.std::__1::__tree.27" }
%"class.std::__1::__tree.27" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.ukm::UkmRecorder" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.performance_manager::GraphObserver"**, %"class.performance_manager::GraphObserver"**, %"class.std::__1::__compressed_pair.37" }
%"class.performance_manager::GraphObserver" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.performance_manager::GraphObserver"** }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"class.performance_manager::FrameNodeObserver"**, %"class.performance_manager::FrameNodeObserver"**, %"class.std::__1::__compressed_pair.44" }
%"class.performance_manager::FrameNodeObserver" = type opaque
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.performance_manager::FrameNodeObserver"** }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { %"class.performance_manager::PageNodeObserver"**, %"class.performance_manager::PageNodeObserver"**, %"class.std::__1::__compressed_pair.51" }
%"class.performance_manager::PageNodeObserver" = type opaque
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.performance_manager::PageNodeObserver"** }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { %"class.performance_manager::ProcessNodeObserver"**, %"class.performance_manager::ProcessNodeObserver"**, %"class.std::__1::__compressed_pair.58" }
%"class.performance_manager::ProcessNodeObserver" = type opaque
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.performance_manager::ProcessNodeObserver"** }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"class.performance_manager::SystemNodeObserver"**, %"class.performance_manager::SystemNodeObserver"**, %"class.std::__1::__compressed_pair.65" }
%"class.performance_manager::SystemNodeObserver" = type opaque
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.performance_manager::SystemNodeObserver"** }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %"class.performance_manager::WorkerNodeObserver"**, %"class.performance_manager::WorkerNodeObserver"**, %"class.std::__1::__compressed_pair.72" }
%"class.performance_manager::WorkerNodeObserver" = type opaque
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.performance_manager::WorkerNodeObserver"** }
%"class.performance_manager::OwnedObjects" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.77" }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"class.std::__1::unique_ptr.79"*, %"class.std::__1::unique_ptr.79"*, %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.performance_manager::GraphOwned"* }
%"class.performance_manager::GraphOwned" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::unique_ptr.79"* }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.performance_manager::NodeDataDescriberRegistry"* }
%"class.performance_manager::NodeDataDescriberRegistry" = type opaque
%"class.std::__1::map.91" = type { %"class.std::__1::__tree.92" }
%"class.std::__1::__tree.92" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.93", %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.performance_manager::RegisteredObjects" = type { %"class.base::internal::flat_tree.102" }
%"class.base::internal::flat_tree.102" = type { %"class.std::__1::vector.103" }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"class.performance_manager::GraphRegistered"**, %"class.performance_manager::GraphRegistered"**, %"class.std::__1::__compressed_pair.105" }
%"class.performance_manager::GraphRegistered" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.performance_manager::GraphRegistered"** }
%"class.performance_manager::Node" = type { i32 (...)** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

@_ZN19performance_manager8NodeBase13kNodeBaseTypeE = hidden constant i64 ptrtoint (i64* @_ZN19performance_manager8NodeBase13kNodeBaseTypeE to i64), align 8
@_ZTVN19performance_manager8NodeBaseE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.performance_manager::NodeBase"*)* @_ZN19performance_manager8NodeBaseD2Ev to i8*), i8* bitcast (void (%"class.performance_manager::NodeBase"*)* @_ZN19performance_manager8NodeBaseD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.performance_manager::NodeBase"*)* @_ZN19performance_manager8NodeBase14OnJoiningGraphEv to i8*), i8* bitcast (void (%"class.performance_manager::NodeBase"*)* @_ZN19performance_manager8NodeBase20OnBeforeLeavingGraphEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [37 x i8] c"kNodeBaseType == node->GetImplType()\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"../../components/performance_manager/graph/node_base.cc\00", align 1

@_ZN19performance_manager8NodeBaseD1Ev = hidden unnamed_addr alias void (%"class.performance_manager::NodeBase"*), void (%"class.performance_manager::NodeBase"*)* @_ZN19performance_manager8NodeBaseD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19performance_manager8NodeBaseC2ENS_12NodeTypeEnumE(%"class.performance_manager::NodeBase"* nocapture, i8 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN19performance_manager8NodeBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 1
  store i8 %1, i8* %4, align 8
  %5 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 2
  store %"class.performance_manager::GraphImpl"* null, %"class.performance_manager::GraphImpl"** %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19performance_manager8NodeBaseD2Ev(%"class.performance_manager::NodeBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN19performance_manager8NodeBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN19performance_manager8NodeBaseD0Ev(%"class.performance_manager::NodeBase"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.performance_manager::NodeBase"* @_ZN19performance_manager8NodeBase8FromNodeEPKNS_4NodeE(%"class.performance_manager::Node"*) local_unnamed_addr #3 align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.performance_manager::Node"* %0 to i64 (%"class.performance_manager::Node"*)***
  %8 = load i64 (%"class.performance_manager::Node"*)**, i64 (%"class.performance_manager::Node"*)*** %7, align 8
  %9 = getelementptr inbounds i64 (%"class.performance_manager::Node"*)*, i64 (%"class.performance_manager::Node"*)** %8, i64 4
  %10 = load i64 (%"class.performance_manager::Node"*)*, i64 (%"class.performance_manager::Node"*)** %9, align 8
  %11 = tail call i64 %10(%"class.performance_manager::Node"* %0) #9
  %12 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp eq i64 %11, ptrtoint (i64* @_ZN19performance_manager8NodeBase13kNodeBaseTypeE to i64)
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %6, align 8
  br label %24

15:                                               ; preds = %1
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 ptrtoint (i64* @_ZN19performance_manager8NodeBase13kNodeBaseTypeE to i64)) #9
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %11) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %16, i8* %17) #9
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %6, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 28, %"class.logging::CheckOpResult"* nonnull %3) #9
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #9
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %25 = bitcast %"class.performance_manager::Node"* %0 to i8* (%"class.performance_manager::Node"*)***
  %26 = load i8* (%"class.performance_manager::Node"*)**, i8* (%"class.performance_manager::Node"*)*** %25, align 8
  %27 = getelementptr inbounds i8* (%"class.performance_manager::Node"*)*, i8* (%"class.performance_manager::Node"*)** %26, i64 5
  %28 = load i8* (%"class.performance_manager::Node"*)*, i8* (%"class.performance_manager::Node"*)** %27, align 8
  %29 = call i8* %28(%"class.performance_manager::Node"* %0) #9
  %30 = bitcast i8* %29 to %"class.performance_manager::NodeBase"*
  ret %"class.performance_manager::NodeBase"* %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.performance_manager::NodeBase"* @_ZN19performance_manager8NodeBase8FromNodeEPNS_4NodeE(%"class.performance_manager::Node"*) local_unnamed_addr #3 align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.performance_manager::Node"* %0 to i64 (%"class.performance_manager::Node"*)***
  %8 = load i64 (%"class.performance_manager::Node"*)**, i64 (%"class.performance_manager::Node"*)*** %7, align 8
  %9 = getelementptr inbounds i64 (%"class.performance_manager::Node"*)*, i64 (%"class.performance_manager::Node"*)** %8, i64 4
  %10 = load i64 (%"class.performance_manager::Node"*)*, i64 (%"class.performance_manager::Node"*)** %9, align 8
  %11 = tail call i64 %10(%"class.performance_manager::Node"* %0) #9
  %12 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp eq i64 %11, ptrtoint (i64* @_ZN19performance_manager8NodeBase13kNodeBaseTypeE to i64)
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %6, align 8
  br label %24

15:                                               ; preds = %1
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 ptrtoint (i64* @_ZN19performance_manager8NodeBase13kNodeBaseTypeE to i64)) #9
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %11) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %16, i8* %17) #9
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %6, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 34, %"class.logging::CheckOpResult"* nonnull %3) #9
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #9
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %25 = bitcast %"class.performance_manager::Node"* %0 to i8* (%"class.performance_manager::Node"*)***
  %26 = load i8* (%"class.performance_manager::Node"*)**, i8* (%"class.performance_manager::Node"*)*** %25, align 8
  %27 = getelementptr inbounds i8* (%"class.performance_manager::Node"*)*, i8* (%"class.performance_manager::Node"*)** %26, i64 5
  %28 = load i8* (%"class.performance_manager::Node"*)*, i8* (%"class.performance_manager::Node"*)** %27, align 8
  %29 = call i8* %28(%"class.performance_manager::Node"* %0) #9
  %30 = bitcast i8* %29 to %"class.performance_manager::NodeBase"*
  ret %"class.performance_manager::NodeBase"* %30
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK19performance_manager8NodeBase14CanSetPropertyEv(%"class.performance_manager::NodeBase"*) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 2
  %3 = load %"class.performance_manager::GraphImpl"*, %"class.performance_manager::GraphImpl"** %2, align 8
  %4 = icmp eq %"class.performance_manager::GraphImpl"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @_ZNK19performance_manager9GraphImpl12GetNodeStateEPKNS_8NodeBaseE(%"class.performance_manager::GraphImpl"* nonnull %3, %"class.performance_manager::NodeBase"* %0) #9
  %7 = icmp eq i32 %6, 1
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ %7, %5 ], [ false, %1 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK19performance_manager8NodeBase23CanSetAndNotifyPropertyEv(%"class.performance_manager::NodeBase"*) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 2
  %3 = load %"class.performance_manager::GraphImpl"*, %"class.performance_manager::GraphImpl"** %2, align 8
  %4 = icmp eq %"class.performance_manager::GraphImpl"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @_ZNK19performance_manager9GraphImpl12GetNodeStateEPKNS_8NodeBaseE(%"class.performance_manager::GraphImpl"* nonnull %3, %"class.performance_manager::NodeBase"* %0) #9
  %7 = icmp eq i32 %6, 3
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ %7, %5 ], [ false, %1 ]
  ret i1 %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19performance_manager8NodeBase9JoinGraphEPNS_9GraphImplE(%"class.performance_manager::NodeBase"* nocapture, %"class.performance_manager::GraphImpl"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 2
  store %"class.performance_manager::GraphImpl"* %1, %"class.performance_manager::GraphImpl"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN19performance_manager8NodeBase14OnJoiningGraphEv(%"class.performance_manager::NodeBase"* nocapture) unnamed_addr #7 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN19performance_manager8NodeBase20OnBeforeLeavingGraphEv(%"class.performance_manager::NodeBase"* nocapture) unnamed_addr #7 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19performance_manager8NodeBase10LeaveGraphEv(%"class.performance_manager::NodeBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.performance_manager::NodeBase", %"class.performance_manager::NodeBase"* %0, i64 0, i32 2
  store %"class.performance_manager::GraphImpl"* null, %"class.performance_manager::GraphImpl"** %2, align 8
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

declare i32 @_ZNK19performance_manager9GraphImpl12GetNodeStateEPKNS_8NodeBaseE(%"class.performance_manager::GraphImpl"*, %"class.performance_manager::NodeBase"*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
