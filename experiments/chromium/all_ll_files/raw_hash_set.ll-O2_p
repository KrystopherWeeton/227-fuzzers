; ModuleID = '../../third_party/abseil-cpp/absl/container/internal/raw_hash_set.cc'
source_filename = "../../third_party/abseil-cpp/absl/container/internal/raw_hash_set.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

$_ZZN4absl18container_internal10RandomSeedEvE7counter = comdat any

@_ZN4absl18container_internal13GroupSse2Impl6kWidthE = hidden local_unnamed_addr constant i64 16, align 8
@_ZZN4absl18container_internal10RandomSeedEvE7counter = linkonce_odr hidden thread_local global i64 0, comdat, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl18container_internal21ShouldInsertBackwardsEmPa(i64, i8*) local_unnamed_addr #0 {
  %3 = lshr i64 %0, 7
  %4 = ptrtoint i8* %1 to i64
  %5 = lshr i64 %4, 12
  %6 = load i64, i64* @_ZZN4absl18container_internal10RandomSeedEvE7counter, align 8
  %7 = add i64 %6, 1
  store i64 %7, i64* @_ZZN4absl18container_internal10RandomSeedEvE7counter, align 8
  %8 = xor i64 %3, ptrtoint (i64* @_ZZN4absl18container_internal10RandomSeedEvE7counter to i64)
  %9 = xor i64 %8, %5
  %10 = xor i64 %9, %7
  %11 = urem i64 %10, 13
  %12 = icmp ugt i64 %11, 6
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #1 {
  %3 = getelementptr inbounds i8, i8* %0, i64 %1
  %4 = getelementptr inbounds i8, i8* %3, i64 1
  %5 = icmp eq i8* %4, %0
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = add i64 %1, -15
  %8 = lshr i64 %7, 4
  %9 = add nuw nsw i64 %8, 1
  %10 = and i64 %9, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %6, %12
  %13 = phi i8* [ %22, %12 ], [ %0, %6 ]
  %14 = phi i64 [ %23, %12 ], [ %10, %6 ]
  %15 = bitcast i8* %13 to <2 x i64>*
  %16 = bitcast i8* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = ashr <16 x i8> %17, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 9114861777597660798, i64 9114861777597660798>
  %21 = xor <2 x i64> %20, <i64 -72340172838076674, i64 -72340172838076674>
  store <2 x i64> %21, <2 x i64>* %15, align 1
  %22 = getelementptr inbounds i8, i8* %13, i64 16
  %23 = add i64 %14, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %12, !llvm.loop !2

25:                                               ; preds = %12, %6
  %26 = phi i8* [ %0, %6 ], [ %22, %12 ]
  %27 = icmp ult i64 %7, 48
  br i1 %27, label %28, label %29

28:                                               ; preds = %25, %29, %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %0, i64 16, i1 false)
  store i8 -1, i8* %3, align 1
  ret void

29:                                               ; preds = %25, %29
  %30 = phi i8* [ %62, %29 ], [ %26, %25 ]
  %31 = bitcast i8* %30 to <2 x i64>*
  %32 = bitcast i8* %30 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1
  %34 = ashr <16 x i8> %33, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %35 = bitcast <16 x i8> %34 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 9114861777597660798, i64 9114861777597660798>
  %37 = xor <2 x i64> %36, <i64 -72340172838076674, i64 -72340172838076674>
  store <2 x i64> %37, <2 x i64>* %31, align 1
  %38 = getelementptr inbounds i8, i8* %30, i64 16
  %39 = bitcast i8* %38 to <2 x i64>*
  %40 = bitcast i8* %38 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = ashr <16 x i8> %41, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %43 = bitcast <16 x i8> %42 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 9114861777597660798, i64 9114861777597660798>
  %45 = xor <2 x i64> %44, <i64 -72340172838076674, i64 -72340172838076674>
  store <2 x i64> %45, <2 x i64>* %39, align 1
  %46 = getelementptr inbounds i8, i8* %30, i64 32
  %47 = bitcast i8* %46 to <2 x i64>*
  %48 = bitcast i8* %46 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1
  %50 = ashr <16 x i8> %49, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 9114861777597660798, i64 9114861777597660798>
  %53 = xor <2 x i64> %52, <i64 -72340172838076674, i64 -72340172838076674>
  store <2 x i64> %53, <2 x i64>* %47, align 1
  %54 = getelementptr inbounds i8, i8* %30, i64 48
  %55 = bitcast i8* %54 to <2 x i64>*
  %56 = bitcast i8* %54 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = ashr <16 x i8> %57, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 9114861777597660798, i64 9114861777597660798>
  %61 = xor <2 x i64> %60, <i64 -72340172838076674, i64 -72340172838076674>
  store <2 x i64> %61, <2 x i64>* %55, align 1
  %62 = getelementptr inbounds i8, i8* %30, i64 64
  %63 = icmp eq i8* %62, %4
  br i1 %63, label %28, label %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
