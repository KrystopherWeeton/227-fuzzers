; ModuleID = '../../third_party/libzip/src/lib/zip_source_file_stdio_named.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_file_stdio_named.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source_file_operations = type { void (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*, i64)*, i1 (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*, i8*, i64)*, i64 (%struct.zip_source_file_context*)*, void (%struct.zip_source_file_context*)*, i1 (%struct.zip_source_file_context*, i8*, i64, i32)*, i1 (%struct.zip_source_file_context*, %struct.zip_source_file_stat*)*, i8* (%struct.zip_source_file_context*, i8*)*, i64 (%struct.zip_source_file_context*, i8*)*, i64 (%struct.zip_source_file_context*, i8*, i64)* }
%struct.zip_source_file_context = type { %struct.zip_error, i64, i8*, i8*, %struct.zip_stat, %struct.zip_file_attributes, %struct.zip_error, i64, i64, i64, i8*, i8*, %struct.zip_source_file_operations*, i8* }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_source_file_stat = type { i64, i64, i8, i8 }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }

@ops_stdio_named = internal global %struct.zip_source_file_operations { void (%struct.zip_source_file_context*)* @_zip_stdio_op_close, i64 (%struct.zip_source_file_context*)* @_zip_stdio_op_commit_write, i64 (%struct.zip_source_file_context*)* @_zip_stdio_op_create_temp_output, i64 (%struct.zip_source_file_context*, i64)* null, i1 (%struct.zip_source_file_context*)* @_zip_stdio_op_open, i64 (%struct.zip_source_file_context*, i8*, i64)* @_zip_stdio_op_read, i64 (%struct.zip_source_file_context*)* @_zip_stdio_op_remove, void (%struct.zip_source_file_context*)* @_zip_stdio_op_rollback_write, i1 (%struct.zip_source_file_context*, i8*, i64, i32)* @_zip_stdio_op_seek, i1 (%struct.zip_source_file_context*, %struct.zip_source_file_stat*)* @_zip_stdio_op_stat, i8* (%struct.zip_source_file_context*, i8*)* @_zip_stdio_op_strdup, i64 (%struct.zip_source_file_context*, i8*)* @_zip_stdio_op_tell, i64 (%struct.zip_source_file_context*, i8*, i64)* @_zip_stdio_op_write }, align 8
@.str = private unnamed_addr constant [10 x i8] c"%s.XXXXXX\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"r+b\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_file(%struct.zip*, i8*, i64, i64) local_unnamed_addr #0 {
  %5 = icmp eq %struct.zip* %0, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %8 = icmp eq i8* %1, null
  %9 = icmp slt i64 %3, -1
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  tail call void @zip_error_set(%struct.zip_error* %7, i32 18, i32 0) #9
  br label %14

12:                                               ; preds = %6
  %13 = tail call %struct.zip_source* @zip_source_file_common_new(i8* nonnull %1, i8* null, i64 %2, i64 %3, %struct.zip_stat* null, %struct.zip_source_file_operations* nonnull @ops_stdio_named, i8* null, %struct.zip_error* %7) #9
  br label %14

14:                                               ; preds = %12, %11, %4
  %15 = phi %struct.zip_source* [ null, %4 ], [ null, %11 ], [ %13, %12 ]
  ret %struct.zip_source* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_file_create(i8*, i64, i64, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp eq i8* %0, null
  %6 = icmp slt i64 %2, -1
  %7 = or i1 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #9
  br label %11

9:                                                ; preds = %4
  %10 = tail call %struct.zip_source* @zip_source_file_common_new(i8* nonnull %0, i8* null, i64 %1, i64 %2, %struct.zip_stat* null, %struct.zip_source_file_operations* nonnull @ops_stdio_named, i8* null, %struct.zip_error* %3) #9
  br label %11

11:                                               ; preds = %9, %8
  %12 = phi %struct.zip_source* [ null, %8 ], [ %10, %9 ]
  ret %struct.zip_source* %12
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_source* @zip_source_file_common_new(i8*, i8*, i64, i64, %struct.zip_stat*, %struct.zip_source_file_operations*, i8*, %struct.zip_error*) local_unnamed_addr #1

declare void @_zip_stdio_op_close(%struct.zip_source_file_context*) #1

; Function Attrs: nounwind ssp uwtable
define internal i64 @_zip_stdio_op_commit_write(%struct.zip_source_file_context*) #0 {
  %2 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 11
  %3 = bitcast i8** %2 to %struct._IO_FILE**
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %5 = tail call i32 @fclose(%struct._IO_FILE* %4)
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 10
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = tail call i32 @rename(i8* %9, i8* %11) #9
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %7, %1
  %15 = phi i32 [ 6, %1 ], [ 2, %7 ]
  %16 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %17 = tail call i32* @__errno_location() #10
  %18 = load i32, i32* %17, align 4
  tail call void @zip_error_set(%struct.zip_error* %16, i32 %15, i32 %18) #9
  br label %19

19:                                               ; preds = %14, %7
  %20 = phi i64 [ 0, %7 ], [ -1, %14 ]
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_zip_stdio_op_create_temp_output(%struct.zip_source_file_context*) #0 {
  %2 = alloca %struct.stat, align 8
  %3 = bitcast %struct.stat* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %3) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 144, i1 false)
  %4 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = tail call i64 @strlen(i8* %5) #11
  %7 = add i64 %6, 8
  %8 = tail call noalias i8* @malloc(i64 %7) #9
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  tail call void @zip_error_set(%struct.zip_error* %11, i32 14, i32 0) #9
  br label %40

12:                                               ; preds = %1
  %13 = bitcast %struct.stat* %2 to %struct.stat64*
  %14 = call i32 @__xstat64(i32 1, i8* %5, %struct.stat64* nonnull %13) #9
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.stat, %struct.stat* %2, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = select i1 %15, i32 %17, i32 -1
  %19 = load i8*, i8** %4, align 8
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* %19) #9
  %21 = call i32 @_zip_mkstempm(i8* nonnull %8, i32 %18) #9
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %27

23:                                               ; preds = %12
  %24 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %25 = tail call i32* @__errno_location() #10
  %26 = load i32, i32* %25, align 4
  call void @zip_error_set(%struct.zip_error* %24, i32 12, i32 %26) #9
  call void @free(i8* nonnull %8) #9
  br label %40

27:                                               ; preds = %12
  %28 = call %struct._IO_FILE* @fdopen(i32 %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0)) #9
  %29 = icmp eq %struct._IO_FILE* %28, null
  br i1 %29, label %30, label %36

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %32 = tail call i32* @__errno_location() #10
  %33 = load i32, i32* %32, align 4
  call void @zip_error_set(%struct.zip_error* %31, i32 12, i32 %33) #9
  %34 = call i32 @close(i32 %21) #9
  %35 = call i32 @remove(i8* nonnull %8) #9
  call void @free(i8* nonnull %8) #9
  br label %40

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 11
  %38 = bitcast i8** %37 to %struct._IO_FILE**
  store %struct._IO_FILE* %28, %struct._IO_FILE** %38, align 8
  %39 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 10
  store i8* %8, i8** %39, align 8
  br label %40

40:                                               ; preds = %36, %30, %23, %10
  %41 = phi i64 [ -1, %10 ], [ -1, %23 ], [ -1, %30 ], [ 0, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %3) #9
  ret i64 %41
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_zip_stdio_op_open(%struct.zip_source_file_context*) #0 {
  %2 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = tail call %struct._IO_FILE* @_zip_fopen_close_on_exec(i8* %3, i1 zeroext false) #9
  %5 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 3
  %6 = bitcast i8** %5 to %struct._IO_FILE**
  store %struct._IO_FILE* %4, %struct._IO_FILE** %6, align 8
  %7 = icmp eq %struct._IO_FILE* %4, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %10 = tail call i32* @__errno_location() #10
  %11 = load i32, i32* %10, align 4
  tail call void @zip_error_set(%struct.zip_error* %9, i32 11, i32 %11) #9
  br label %12

12:                                               ; preds = %1, %8
  %13 = phi i1 [ false, %8 ], [ true, %1 ]
  ret i1 %13
}

declare i64 @_zip_stdio_op_read(%struct.zip_source_file_context*, i8*, i64) #1

; Function Attrs: nounwind ssp uwtable
define internal i64 @_zip_stdio_op_remove(%struct.zip_source_file_context*) #0 {
  %2 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = tail call i32 @remove(i8* %3) #9
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %8 = tail call i32* @__errno_location() #10
  %9 = load i32, i32* %8, align 4
  tail call void @zip_error_set(%struct.zip_error* %7, i32 22, i32 %9) #9
  br label %10

10:                                               ; preds = %1, %6
  %11 = phi i64 [ -1, %6 ], [ 0, %1 ]
  ret i64 %11
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_zip_stdio_op_rollback_write(%struct.zip_source_file_context* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 11
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %3 to %struct._IO_FILE*
  %7 = tail call i32 @fclose(%struct._IO_FILE* nonnull %6)
  br label %8

8:                                                ; preds = %1, %5
  %9 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 10
  %10 = load i8*, i8** %9, align 8
  %11 = tail call i32 @remove(i8* %10) #9
  ret void
}

declare zeroext i1 @_zip_stdio_op_seek(%struct.zip_source_file_context*, i8*, i64, i32) #1

declare zeroext i1 @_zip_stdio_op_stat(%struct.zip_source_file_context*, %struct.zip_source_file_stat*) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal noalias i8* @_zip_stdio_op_strdup(%struct.zip_source_file_context* nocapture readnone, i8* nocapture readonly) #2 {
  %3 = tail call noalias i8* @strdup(i8* %1) #9
  ret i8* %3
}

declare i64 @_zip_stdio_op_tell(%struct.zip_source_file_context*, i8*) #1

; Function Attrs: nounwind ssp uwtable
define internal i64 @_zip_stdio_op_write(%struct.zip_source_file_context*, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 11
  %5 = bitcast i8** %4 to %struct._IO_FILE**
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  tail call void @clearerr(%struct._IO_FILE* %6) #9
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %8 = tail call i64 @fwrite(i8* %1, i64 1, i64 %2, %struct._IO_FILE* %7)
  %9 = icmp eq i64 %8, %2
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %12 = tail call i32 @ferror(%struct._IO_FILE* %11) #9
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10, %3
  %15 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %16 = tail call i32* @__errno_location() #10
  %17 = load i32, i32* %16, align 4
  tail call void @zip_error_set(%struct.zip_error* %15, i32 6, i32 %17) #9
  br label %18

18:                                               ; preds = %10, %14
  %19 = phi i64 [ -1, %14 ], [ %2, %10 ]
  ret i64 %19
}

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @rename(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #3

declare i32 @_zip_mkstempm(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #3

declare i32 @close(i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @remove(i8* nocapture readonly) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind
declare i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #7

declare %struct._IO_FILE* @_zip_fopen_close_on_exec(i8*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @strdup(i8* nocapture readonly) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @clearerr(%struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
